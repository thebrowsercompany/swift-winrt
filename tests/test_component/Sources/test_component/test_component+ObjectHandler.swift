// WARNING: Please don't edit this file. It was generated by Swift/WinRT v0.0.1
// swiftlint:disable all
import Foundation
@_spi(WinRTInternal) @_spi(WinRTImplements) import WindowsFoundation
import CWinRT

public typealias ObjectHandler = (Any?) throws -> ()

// MARK: - ObjectHandler Internals

@_spi(WinRTInternal)
extension __IMPL_test_component {
    public class ObjectHandlerBridge : WinRTDelegateBridge {
        public typealias Handler = ObjectHandler
        public typealias CABI = __x_ABI_Ctest__component_CIObjectHandler
        public typealias SwiftABI = __ABI_test_component.ObjectHandler

        public static func from(abi: ComPtr<CABI>?) -> Handler? {
            guard let abi = abi else { return nil }
            let _default = SwiftABI(abi)
            let handler: Handler = { (item) in
                try _default.Invoke(item)
            }
            return handler
        }
    }
}
@_spi(WinRTInternal)
extension __ABI_test_component {
    private static let IID___x_ABI_Ctest__component_CIObjectHandler: WindowsFoundation.IID = .init(
        Data1: 0x5DD35752, Data2: 0x9800, Data3: 0x5961, Data4: ( 0x80,0xDE,0xFC,0x5E,0x20,0x9E,0x6E,0x2D ) // 5DD35752-9800-5961-80DE-FC5E209E6E2D
    ) 

    public class ObjectHandler: WindowsFoundation.IUnknown {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_Ctest__component_CIObjectHandler }

        open func Invoke(_ item: Any?) throws {
            let itemWrapper = __ABI_.AnyWrapper(item)
            let _item = try! itemWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_Ctest__component_CIObjectHandler.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Invoke(pThis, _item))
            }
        }

    }


    typealias ObjectHandlerWrapper = InterfaceWrapperBase<__IMPL_test_component.ObjectHandlerBridge>
    internal static var ObjectHandlerVTable: __x_ABI_Ctest__component_CIObjectHandlerVtbl = .init(
        QueryInterface: { ObjectHandlerWrapper.queryInterface($0, $1, $2) },
        AddRef: { ObjectHandlerWrapper.addRef($0) },
        Release: { ObjectHandlerWrapper.release($0) },
        Invoke: {
            do {
                guard let __unwrapped__instance = ObjectHandlerWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let item: Any? = __ABI_.AnyWrapper.unwrapFrom(abi: ComPtr($1))
                try __unwrapped__instance(item)
                return S_OK
            } catch { return failWith(error: error) }
        }
    )
}
public extension WinRTDelegateBridge where CABI == __x_ABI_Ctest__component_CIObjectHandler {
    static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__ABI_test_component.ObjectHandlerVTable) { $0 }
        return .init(lpVtbl:vtblPtr)
    }
}


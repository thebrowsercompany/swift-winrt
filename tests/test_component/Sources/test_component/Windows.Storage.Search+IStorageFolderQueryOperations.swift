// WARNING: Please don't edit this file. It was generated by Swift/WinRT v0.0.1
// swiftlint:disable all
import Foundation
import Ctest_component

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.search.istoragefolderqueryoperations)
public protocol IStorageFolderQueryOperations : WinRTInterface {
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.search.istoragefolderqueryoperations.getindexedstateasync)
    func getIndexedStateAsync() throws -> test_component.AnyIAsyncOperation<test_component.IndexedState>!
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.search.istoragefolderqueryoperations.createfilequery)
    func createFileQuery() throws -> test_component.StorageFileQueryResult!
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.search.istoragefolderqueryoperations.createfilequery)
    func createFileQuery(_ query: test_component.CommonFileQuery) throws -> test_component.StorageFileQueryResult!
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.search.istoragefolderqueryoperations.createfilequerywithoptions)
    func createFileQueryWithOptions(_ queryOptions: test_component.QueryOptions!) throws -> test_component.StorageFileQueryResult!
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.search.istoragefolderqueryoperations.createfolderquery)
    func createFolderQuery() throws -> test_component.StorageFolderQueryResult!
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.search.istoragefolderqueryoperations.createfolderquery)
    func createFolderQuery(_ query: test_component.CommonFolderQuery) throws -> test_component.StorageFolderQueryResult!
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.search.istoragefolderqueryoperations.createfolderquerywithoptions)
    func createFolderQueryWithOptions(_ queryOptions: test_component.QueryOptions!) throws -> test_component.StorageFolderQueryResult!
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.search.istoragefolderqueryoperations.createitemquery)
    func createItemQuery() throws -> test_component.StorageItemQueryResult!
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.search.istoragefolderqueryoperations.createitemquerywithoptions)
    func createItemQueryWithOptions(_ queryOptions: test_component.QueryOptions!) throws -> test_component.StorageItemQueryResult!
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.search.istoragefolderqueryoperations.getfilesasync)
    func getFilesAsync(_ query: test_component.CommonFileQuery, _ startIndex: UInt32, _ maxItemsToRetrieve: UInt32) throws -> test_component.AnyIAsyncOperation<test_component.AnyIVectorView<test_component.StorageFile?>?>!
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.search.istoragefolderqueryoperations.getfilesasync)
    func getFilesAsync(_ query: test_component.CommonFileQuery) throws -> test_component.AnyIAsyncOperation<test_component.AnyIVectorView<test_component.StorageFile?>?>!
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.search.istoragefolderqueryoperations.getfoldersasync)
    func getFoldersAsync(_ query: test_component.CommonFolderQuery, _ startIndex: UInt32, _ maxItemsToRetrieve: UInt32) throws -> test_component.AnyIAsyncOperation<test_component.AnyIVectorView<test_component.StorageFolder?>?>!
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.search.istoragefolderqueryoperations.getfoldersasync)
    func getFoldersAsync(_ query: test_component.CommonFolderQuery) throws -> test_component.AnyIAsyncOperation<test_component.AnyIVectorView<test_component.StorageFolder?>?>!
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.search.istoragefolderqueryoperations.getitemsasync)
    func getItemsAsync(_ startIndex: UInt32, _ maxItemsToRetrieve: UInt32) throws -> test_component.AnyIAsyncOperation<test_component.AnyIVectorView<test_component.AnyIStorageItem?>?>!
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.search.istoragefolderqueryoperations.arequeryoptionssupported)
    func areQueryOptionsSupported(_ queryOptions: test_component.QueryOptions!) throws -> Bool
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.search.istoragefolderqueryoperations.iscommonfolderquerysupported)
    func isCommonFolderQuerySupported(_ query: test_component.CommonFolderQuery) throws -> Bool
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.search.istoragefolderqueryoperations.iscommonfilequerysupported)
    func isCommonFileQuerySupported(_ query: test_component.CommonFileQuery) throws -> Bool
}

extension IStorageFolderQueryOperations {
    public func queryInterface(_ iid: test_component.IID) -> IUnknownRef? {
        switch iid {
            case __ABI_Windows_Storage_Search.IStorageFolderQueryOperationsWrapper.IID:
                let wrapper = __ABI_Windows_Storage_Search.IStorageFolderQueryOperationsWrapper(self)
                return wrapper!.queryInterface(iid)
            default: return nil
        }
    }
}
public typealias AnyIStorageFolderQueryOperations = any IStorageFolderQueryOperations


// MARK: - Internals

@_spi(WinRTInternal)
extension __IMPL_Windows_Storage_Search {
    public enum IStorageFolderQueryOperationsBridge : AbiInterfaceBridge {
        public typealias CABI = __x_ABI_CWindows_CStorage_CSearch_CIStorageFolderQueryOperations
        public typealias SwiftABI = __ABI_Windows_Storage_Search.IStorageFolderQueryOperations
        public typealias SwiftProjection = AnyIStorageFolderQueryOperations
        public static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
            guard let abi = abi else { return nil }
            return IStorageFolderQueryOperationsImpl(abi)
        }

        public static func makeAbi() -> CABI {
            let vtblPtr = withUnsafeMutablePointer(to: &__ABI_Windows_Storage_Search.IStorageFolderQueryOperationsVTable) { $0 }
            return .init(lpVtbl: vtblPtr)
        }
    }

    fileprivate class IStorageFolderQueryOperationsImpl: IStorageFolderQueryOperations, WinRTAbiImpl {
        fileprivate typealias Bridge = IStorageFolderQueryOperationsBridge
        fileprivate let _default: Bridge.SwiftABI
        fileprivate var thisPtr: test_component.IInspectable { _default }
        fileprivate init(_ fromAbi: ComPtr<Bridge.CABI>) {
            _default = Bridge.SwiftABI(fromAbi)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.search.istoragefolderqueryoperations.getindexedstateasync)
        fileprivate func getIndexedStateAsync() throws -> AnyIAsyncOperation<IndexedState>! {
            try _default.GetIndexedStateAsync()
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.search.istoragefolderqueryoperations.createfilequery)
        fileprivate func createFileQuery() throws -> StorageFileQueryResult! {
            try _default.CreateFileQueryOverloadDefault()
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.search.istoragefolderqueryoperations.createfilequery)
        fileprivate func createFileQuery(_ query: CommonFileQuery) throws -> StorageFileQueryResult! {
            try _default.CreateFileQuery(query)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.search.istoragefolderqueryoperations.createfilequerywithoptions)
        fileprivate func createFileQueryWithOptions(_ queryOptions: QueryOptions!) throws -> StorageFileQueryResult! {
            try _default.CreateFileQueryWithOptions(queryOptions)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.search.istoragefolderqueryoperations.createfolderquery)
        fileprivate func createFolderQuery() throws -> StorageFolderQueryResult! {
            try _default.CreateFolderQueryOverloadDefault()
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.search.istoragefolderqueryoperations.createfolderquery)
        fileprivate func createFolderQuery(_ query: CommonFolderQuery) throws -> StorageFolderQueryResult! {
            try _default.CreateFolderQuery(query)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.search.istoragefolderqueryoperations.createfolderquerywithoptions)
        fileprivate func createFolderQueryWithOptions(_ queryOptions: QueryOptions!) throws -> StorageFolderQueryResult! {
            try _default.CreateFolderQueryWithOptions(queryOptions)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.search.istoragefolderqueryoperations.createitemquery)
        fileprivate func createItemQuery() throws -> StorageItemQueryResult! {
            try _default.CreateItemQuery()
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.search.istoragefolderqueryoperations.createitemquerywithoptions)
        fileprivate func createItemQueryWithOptions(_ queryOptions: QueryOptions!) throws -> StorageItemQueryResult! {
            try _default.CreateItemQueryWithOptions(queryOptions)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.search.istoragefolderqueryoperations.getfilesasync)
        fileprivate func getFilesAsync(_ query: CommonFileQuery, _ startIndex: UInt32, _ maxItemsToRetrieve: UInt32) throws -> AnyIAsyncOperation<AnyIVectorView<test_component.StorageFile?>?>! {
            try _default.GetFilesAsync(query, startIndex, maxItemsToRetrieve)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.search.istoragefolderqueryoperations.getfilesasync)
        fileprivate func getFilesAsync(_ query: CommonFileQuery) throws -> AnyIAsyncOperation<AnyIVectorView<test_component.StorageFile?>?>! {
            try _default.GetFilesAsyncOverloadDefaultStartAndCount(query)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.search.istoragefolderqueryoperations.getfoldersasync)
        fileprivate func getFoldersAsync(_ query: CommonFolderQuery, _ startIndex: UInt32, _ maxItemsToRetrieve: UInt32) throws -> AnyIAsyncOperation<AnyIVectorView<test_component.StorageFolder?>?>! {
            try _default.GetFoldersAsync(query, startIndex, maxItemsToRetrieve)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.search.istoragefolderqueryoperations.getfoldersasync)
        fileprivate func getFoldersAsync(_ query: CommonFolderQuery) throws -> AnyIAsyncOperation<AnyIVectorView<test_component.StorageFolder?>?>! {
            try _default.GetFoldersAsyncOverloadDefaultStartAndCount(query)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.search.istoragefolderqueryoperations.getitemsasync)
        fileprivate func getItemsAsync(_ startIndex: UInt32, _ maxItemsToRetrieve: UInt32) throws -> AnyIAsyncOperation<AnyIVectorView<test_component.AnyIStorageItem?>?>! {
            try _default.GetItemsAsync(startIndex, maxItemsToRetrieve)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.search.istoragefolderqueryoperations.arequeryoptionssupported)
        fileprivate func areQueryOptionsSupported(_ queryOptions: QueryOptions!) throws -> Bool {
            try _default.AreQueryOptionsSupported(queryOptions)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.search.istoragefolderqueryoperations.iscommonfolderquerysupported)
        fileprivate func isCommonFolderQuerySupported(_ query: CommonFolderQuery) throws -> Bool {
            try _default.IsCommonFolderQuerySupported(query)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.search.istoragefolderqueryoperations.iscommonfilequerysupported)
        fileprivate func isCommonFileQuerySupported(_ query: CommonFileQuery) throws -> Bool {
            try _default.IsCommonFileQuerySupported(query)
        }

    }

}
@_spi(WinRTInternal)
extension __ABI_Windows_Storage_Search {
    private static let IID___x_ABI_CWindows_CStorage_CSearch_CIStorageFolderQueryOperations: test_component.IID = .init(
        Data1: 0xCB43CCC9, Data2: 0x446B, Data3: 0x4A4F, Data4: ( 0xBE,0x97,0x75,0x77,0x71,0xBE,0x52,0x03 ) // CB43CCC9-446B-4A4F-BE97-757771BE5203
    ) 
    public class IStorageFolderQueryOperations: test_component.IInspectable {
        override public class var IID: test_component.IID { IID___x_ABI_CWindows_CStorage_CSearch_CIStorageFolderQueryOperations }

        open func GetIndexedStateAsync() throws -> test_component.AnyIAsyncOperation<test_component.IndexedState>? {
            let (operation) = try ComPtrs.initialize { operationAbi in
                _ = try perform(as: __x_ABI_CWindows_CStorage_CSearch_CIStorageFolderQueryOperations.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetIndexedStateAsync(pThis, &operationAbi))
                }
            }
            return test_component.__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CSearch__CIndexedStateWrapper.unwrapFrom(abi: operation)
        }

        open func CreateFileQueryOverloadDefault() throws -> test_component.StorageFileQueryResult? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CStorage_CSearch_CIStorageFolderQueryOperations.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateFileQueryOverloadDefault(pThis, &valueAbi))
                }
            }
            return __IMPL_Windows_Storage_Search.StorageFileQueryResultBridge.from(abi: value)
        }

        open func CreateFileQuery(_ query: test_component.CommonFileQuery) throws -> test_component.StorageFileQueryResult? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CStorage_CSearch_CIStorageFolderQueryOperations.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateFileQuery(pThis, query, &valueAbi))
                }
            }
            return __IMPL_Windows_Storage_Search.StorageFileQueryResultBridge.from(abi: value)
        }

        open func CreateFileQueryWithOptions(_ queryOptions: test_component.QueryOptions?) throws -> test_component.StorageFileQueryResult? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CStorage_CSearch_CIStorageFolderQueryOperations.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateFileQueryWithOptions(pThis, RawPointer(queryOptions), &valueAbi))
                }
            }
            return __IMPL_Windows_Storage_Search.StorageFileQueryResultBridge.from(abi: value)
        }

        open func CreateFolderQueryOverloadDefault() throws -> test_component.StorageFolderQueryResult? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CStorage_CSearch_CIStorageFolderQueryOperations.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateFolderQueryOverloadDefault(pThis, &valueAbi))
                }
            }
            return __IMPL_Windows_Storage_Search.StorageFolderQueryResultBridge.from(abi: value)
        }

        open func CreateFolderQuery(_ query: test_component.CommonFolderQuery) throws -> test_component.StorageFolderQueryResult? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CStorage_CSearch_CIStorageFolderQueryOperations.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateFolderQuery(pThis, query, &valueAbi))
                }
            }
            return __IMPL_Windows_Storage_Search.StorageFolderQueryResultBridge.from(abi: value)
        }

        open func CreateFolderQueryWithOptions(_ queryOptions: test_component.QueryOptions?) throws -> test_component.StorageFolderQueryResult? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CStorage_CSearch_CIStorageFolderQueryOperations.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateFolderQueryWithOptions(pThis, RawPointer(queryOptions), &valueAbi))
                }
            }
            return __IMPL_Windows_Storage_Search.StorageFolderQueryResultBridge.from(abi: value)
        }

        open func CreateItemQuery() throws -> test_component.StorageItemQueryResult? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CStorage_CSearch_CIStorageFolderQueryOperations.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateItemQuery(pThis, &valueAbi))
                }
            }
            return __IMPL_Windows_Storage_Search.StorageItemQueryResultBridge.from(abi: value)
        }

        open func CreateItemQueryWithOptions(_ queryOptions: test_component.QueryOptions?) throws -> test_component.StorageItemQueryResult? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CStorage_CSearch_CIStorageFolderQueryOperations.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateItemQueryWithOptions(pThis, RawPointer(queryOptions), &valueAbi))
                }
            }
            return __IMPL_Windows_Storage_Search.StorageItemQueryResultBridge.from(abi: value)
        }

        open func GetFilesAsync(_ query: test_component.CommonFileQuery, _ startIndex: UInt32, _ maxItemsToRetrieve: UInt32) throws -> test_component.AnyIAsyncOperation<test_component.AnyIVectorView<test_component.StorageFile?>?>? {
            let (operation) = try ComPtrs.initialize { operationAbi in
                _ = try perform(as: __x_ABI_CWindows_CStorage_CSearch_CIStorageFolderQueryOperations.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetFilesAsync(pThis, query, startIndex, maxItemsToRetrieve, &operationAbi))
                }
            }
            return test_component.__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CStorageFileWrapper.unwrapFrom(abi: operation)
        }

        open func GetFilesAsyncOverloadDefaultStartAndCount(_ query: test_component.CommonFileQuery) throws -> test_component.AnyIAsyncOperation<test_component.AnyIVectorView<test_component.StorageFile?>?>? {
            let (operation) = try ComPtrs.initialize { operationAbi in
                _ = try perform(as: __x_ABI_CWindows_CStorage_CSearch_CIStorageFolderQueryOperations.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetFilesAsyncOverloadDefaultStartAndCount(pThis, query, &operationAbi))
                }
            }
            return test_component.__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CStorageFileWrapper.unwrapFrom(abi: operation)
        }

        open func GetFoldersAsync(_ query: test_component.CommonFolderQuery, _ startIndex: UInt32, _ maxItemsToRetrieve: UInt32) throws -> test_component.AnyIAsyncOperation<test_component.AnyIVectorView<test_component.StorageFolder?>?>? {
            let (operation) = try ComPtrs.initialize { operationAbi in
                _ = try perform(as: __x_ABI_CWindows_CStorage_CSearch_CIStorageFolderQueryOperations.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetFoldersAsync(pThis, query, startIndex, maxItemsToRetrieve, &operationAbi))
                }
            }
            return test_component.__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CStorageFolderWrapper.unwrapFrom(abi: operation)
        }

        open func GetFoldersAsyncOverloadDefaultStartAndCount(_ query: test_component.CommonFolderQuery) throws -> test_component.AnyIAsyncOperation<test_component.AnyIVectorView<test_component.StorageFolder?>?>? {
            let (operation) = try ComPtrs.initialize { operationAbi in
                _ = try perform(as: __x_ABI_CWindows_CStorage_CSearch_CIStorageFolderQueryOperations.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetFoldersAsyncOverloadDefaultStartAndCount(pThis, query, &operationAbi))
                }
            }
            return test_component.__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CStorageFolderWrapper.unwrapFrom(abi: operation)
        }

        open func GetItemsAsync(_ startIndex: UInt32, _ maxItemsToRetrieve: UInt32) throws -> test_component.AnyIAsyncOperation<test_component.AnyIVectorView<test_component.AnyIStorageItem?>?>? {
            let (operation) = try ComPtrs.initialize { operationAbi in
                _ = try perform(as: __x_ABI_CWindows_CStorage_CSearch_CIStorageFolderQueryOperations.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetItemsAsync(pThis, startIndex, maxItemsToRetrieve, &operationAbi))
                }
            }
            return test_component.__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CIStorageItemWrapper.unwrapFrom(abi: operation)
        }

        open func AreQueryOptionsSupported(_ queryOptions: test_component.QueryOptions?) throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CWindows_CStorage_CSearch_CIStorageFolderQueryOperations.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.AreQueryOptionsSupported(pThis, RawPointer(queryOptions), &value))
            }
            return .init(from: value)
        }

        open func IsCommonFolderQuerySupported(_ query: test_component.CommonFolderQuery) throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CWindows_CStorage_CSearch_CIStorageFolderQueryOperations.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.IsCommonFolderQuerySupported(pThis, query, &value))
            }
            return .init(from: value)
        }

        open func IsCommonFileQuerySupported(_ query: test_component.CommonFileQuery) throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CWindows_CStorage_CSearch_CIStorageFolderQueryOperations.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.IsCommonFileQuerySupported(pThis, query, &value))
            }
            return .init(from: value)
        }

    }

    internal static var IStorageFolderQueryOperationsVTable: __x_ABI_CWindows_CStorage_CSearch_CIStorageFolderQueryOperationsVtbl = .init(
        QueryInterface: { IStorageFolderQueryOperationsWrapper.queryInterface($0, $1, $2) },
        AddRef: { IStorageFolderQueryOperationsWrapper.addRef($0) },
        Release: { IStorageFolderQueryOperationsWrapper.release($0) },
        GetIids: {
            let size = MemoryLayout<test_component.IID>.size
            let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: test_component.IID.self)
            iids[0] = IUnknown.IID
            iids[1] = IInspectable.IID
            iids[2] = __ABI_Windows_Storage_Search.IStorageFolderQueryOperationsWrapper.IID
            $1!.pointee = 3
            $2!.pointee = iids
            return S_OK
        },

        GetRuntimeClassName: {
            _ = $0
            let hstring = try! HString("Windows.Storage.Search.IStorageFolderQueryOperations").detach()
            $1!.pointee = hstring
            return S_OK
        },

        GetTrustLevel: {
            _ = $0
            $1!.pointee = TrustLevel(rawValue: 0)
            return S_OK
        },

        GetIndexedStateAsync: {
            do {
                guard let __unwrapped__instance = IStorageFolderQueryOperationsWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let operation = try __unwrapped__instance.getIndexedStateAsync()
                let operationWrapper = test_component.__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CSearch__CIndexedStateWrapper(operation)
                operationWrapper?.copyTo($1)
                return S_OK
            } catch { return failWith(error: error) }
        },

        CreateFileQueryOverloadDefault: {
            do {
                guard let __unwrapped__instance = IStorageFolderQueryOperationsWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let value = try __unwrapped__instance.createFileQuery()
                value?.copyTo($1)
                return S_OK
            } catch { return failWith(error: error) }
        },

        CreateFileQuery: {
            do {
                guard let __unwrapped__instance = IStorageFolderQueryOperationsWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let query: test_component.CommonFileQuery = $1
                let value = try __unwrapped__instance.createFileQuery(query)
                value?.copyTo($2)
                return S_OK
            } catch { return failWith(error: error) }
        },

        CreateFileQueryWithOptions: {
            do {
                guard let __unwrapped__instance = IStorageFolderQueryOperationsWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let queryOptions: test_component.QueryOptions? = __IMPL_Windows_Storage_Search.QueryOptionsBridge.from(abi: ComPtr($1))
                let value = try __unwrapped__instance.createFileQueryWithOptions(queryOptions)
                value?.copyTo($2)
                return S_OK
            } catch { return failWith(error: error) }
        },

        CreateFolderQueryOverloadDefault: {
            do {
                guard let __unwrapped__instance = IStorageFolderQueryOperationsWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let value = try __unwrapped__instance.createFolderQuery()
                value?.copyTo($1)
                return S_OK
            } catch { return failWith(error: error) }
        },

        CreateFolderQuery: {
            do {
                guard let __unwrapped__instance = IStorageFolderQueryOperationsWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let query: test_component.CommonFolderQuery = $1
                let value = try __unwrapped__instance.createFolderQuery(query)
                value?.copyTo($2)
                return S_OK
            } catch { return failWith(error: error) }
        },

        CreateFolderQueryWithOptions: {
            do {
                guard let __unwrapped__instance = IStorageFolderQueryOperationsWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let queryOptions: test_component.QueryOptions? = __IMPL_Windows_Storage_Search.QueryOptionsBridge.from(abi: ComPtr($1))
                let value = try __unwrapped__instance.createFolderQueryWithOptions(queryOptions)
                value?.copyTo($2)
                return S_OK
            } catch { return failWith(error: error) }
        },

        CreateItemQuery: {
            do {
                guard let __unwrapped__instance = IStorageFolderQueryOperationsWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let value = try __unwrapped__instance.createItemQuery()
                value?.copyTo($1)
                return S_OK
            } catch { return failWith(error: error) }
        },

        CreateItemQueryWithOptions: {
            do {
                guard let __unwrapped__instance = IStorageFolderQueryOperationsWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let queryOptions: test_component.QueryOptions? = __IMPL_Windows_Storage_Search.QueryOptionsBridge.from(abi: ComPtr($1))
                let value = try __unwrapped__instance.createItemQueryWithOptions(queryOptions)
                value?.copyTo($2)
                return S_OK
            } catch { return failWith(error: error) }
        },

        GetFilesAsync: {
            do {
                guard let __unwrapped__instance = IStorageFolderQueryOperationsWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let query: test_component.CommonFileQuery = $1
                let startIndex: UInt32 = $2
                let maxItemsToRetrieve: UInt32 = $3
                let operation = try __unwrapped__instance.getFilesAsync(query, startIndex, maxItemsToRetrieve)
                let operationWrapper = test_component.__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CStorageFileWrapper(operation)
                operationWrapper?.copyTo($4)
                return S_OK
            } catch { return failWith(error: error) }
        },

        GetFilesAsyncOverloadDefaultStartAndCount: {
            do {
                guard let __unwrapped__instance = IStorageFolderQueryOperationsWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let query: test_component.CommonFileQuery = $1
                let operation = try __unwrapped__instance.getFilesAsync(query)
                let operationWrapper = test_component.__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CStorageFileWrapper(operation)
                operationWrapper?.copyTo($2)
                return S_OK
            } catch { return failWith(error: error) }
        },

        GetFoldersAsync: {
            do {
                guard let __unwrapped__instance = IStorageFolderQueryOperationsWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let query: test_component.CommonFolderQuery = $1
                let startIndex: UInt32 = $2
                let maxItemsToRetrieve: UInt32 = $3
                let operation = try __unwrapped__instance.getFoldersAsync(query, startIndex, maxItemsToRetrieve)
                let operationWrapper = test_component.__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CStorageFolderWrapper(operation)
                operationWrapper?.copyTo($4)
                return S_OK
            } catch { return failWith(error: error) }
        },

        GetFoldersAsyncOverloadDefaultStartAndCount: {
            do {
                guard let __unwrapped__instance = IStorageFolderQueryOperationsWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let query: test_component.CommonFolderQuery = $1
                let operation = try __unwrapped__instance.getFoldersAsync(query)
                let operationWrapper = test_component.__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CStorageFolderWrapper(operation)
                operationWrapper?.copyTo($2)
                return S_OK
            } catch { return failWith(error: error) }
        },

        GetItemsAsync: {
            do {
                guard let __unwrapped__instance = IStorageFolderQueryOperationsWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let startIndex: UInt32 = $1
                let maxItemsToRetrieve: UInt32 = $2
                let operation = try __unwrapped__instance.getItemsAsync(startIndex, maxItemsToRetrieve)
                let operationWrapper = test_component.__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CIStorageItemWrapper(operation)
                operationWrapper?.copyTo($3)
                return S_OK
            } catch { return failWith(error: error) }
        },

        AreQueryOptionsSupported: {
            do {
                guard let __unwrapped__instance = IStorageFolderQueryOperationsWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let queryOptions: test_component.QueryOptions? = __IMPL_Windows_Storage_Search.QueryOptionsBridge.from(abi: ComPtr($1))
                let value = try __unwrapped__instance.areQueryOptionsSupported(queryOptions)
                $2?.initialize(to: .init(from: value))
                return S_OK
            } catch { return failWith(error: error) }
        },

        IsCommonFolderQuerySupported: {
            do {
                guard let __unwrapped__instance = IStorageFolderQueryOperationsWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let query: test_component.CommonFolderQuery = $1
                let value = try __unwrapped__instance.isCommonFolderQuerySupported(query)
                $2?.initialize(to: .init(from: value))
                return S_OK
            } catch { return failWith(error: error) }
        },

        IsCommonFileQuerySupported: {
            do {
                guard let __unwrapped__instance = IStorageFolderQueryOperationsWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let query: test_component.CommonFileQuery = $1
                let value = try __unwrapped__instance.isCommonFileQuerySupported(query)
                $2?.initialize(to: .init(from: value))
                return S_OK
            } catch { return failWith(error: error) }
        }
    )

    public typealias IStorageFolderQueryOperationsWrapper = InterfaceWrapperBase<__IMPL_Windows_Storage_Search.IStorageFolderQueryOperationsBridge>
}
@_spi(WinRTInternal)
public class IStorageFolderQueryOperationsMaker: MakeFromAbi {
    public typealias SwiftType = AnyIStorageFolderQueryOperations
    public static func from(abi: test_component.IInspectable) -> SwiftType {
        let swiftAbi: __ABI_Windows_Storage_Search.IStorageFolderQueryOperations = try! abi.QueryInterface()
        return __IMPL_Windows_Storage_Search.IStorageFolderQueryOperationsBridge.from(abi: RawPointer(swiftAbi))!
    }
}

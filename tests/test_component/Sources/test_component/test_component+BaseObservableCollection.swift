// WARNING: Please don't edit this file. It was generated by Swift/WinRT v0.0.1
// swiftlint:disable all
import Foundation
@_spi(WinRTInternal) @_spi(WinRTImplements) import WindowsFoundation
import CWinRT

public final class BaseObservableCollection : WinRTClass, IObservableVector, IVector, IIterable {
    public typealias T = Base?
    private typealias SwiftABI = test_component.IObservableVectorBase
    private typealias CABI = __x_ABI_C__FIObservableVector_1___x_ABI_Ctest__zcomponent__CBase
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    // MARK: Collection
    public typealias Element = T
    public var startIndex: Int { 0 }
    public var endIndex: Int { Int(size) }
    public func index(after i: Int) -> Int {
        i+1
    }

    public func index(of: Element) -> Int? {
        var index: UInt32 = 0
        let result = indexOf(of, &index)
        guard result else { return nil }
        return Int(index)
    }
    public var count: Int { Int(size) }


    public subscript(position: Int) -> Element {
        get {
            getAt(UInt32(position))
        }
        set(newValue) {
            setAt(UInt32(position), newValue)
        }
    }

    public func removeLast() {
        removeAtEnd()
    }

    // MARK: WinRT
    public lazy var vectorChanged : Event<VectorChangedEventHandler<Base?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_VectorChanged($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_VectorChanged($0)
       }
      )
    }()

    private lazy var _IVector: IVectorBase! = getInterfaceForCaching()
    public func getAt(_ index: UInt32) -> Base? {
        try! _IVector.GetAt(index)
    }

    public func getView() -> WindowsFoundation.AnyIVectorView<Base?>? {
        try! _IVector.GetView()
    }

    public func indexOf(_ value: Base?, _ index: inout UInt32) -> Bool {
        try! _IVector.IndexOf(value, &index)
    }

    public func setAt(_ index: UInt32, _ value: Base?) {
        try! _IVector.SetAt(index, value)
    }

    public func insertAt(_ index: UInt32, _ value: Base?) {
        try! _IVector.InsertAt(index, value)
    }

    public func removeAt(_ index: UInt32) {
        try! _IVector.RemoveAt(index)
    }

    public func append(_ value: Base?) {
        try! _IVector.Append(value)
    }

    public func removeAtEnd() {
        try! _IVector.RemoveAtEnd()
    }

    public func clear() {
        try! _IVector.Clear()
    }

    public func getMany(_ startIndex: UInt32, _ items: inout [Base?]) -> UInt32 {
        try! _IVector.GetMany(startIndex, &items)
    }

    public func replaceAll(_ items: [Base?]) {
        try! _IVector.ReplaceAll(items)
    }

    public var size : UInt32 {
        get { try! _IVector.get_Size() }
    }

    private lazy var _IIterable: IIterableBase! = getInterfaceForCaching()
    public func first() -> WindowsFoundation.AnyIIterator<Base?>? {
        try! _IIterable.First()
    }

    deinit {
        _default = nil
        _IVector = nil
        _IIterable = nil
    }
}

// MARK: - BaseObservableCollection Internals

@_spi(WinRTInternal)
extension __IMPL_test_component {
    public enum BaseObservableCollectionBridge: AbiBridge {
        public typealias SwiftProjection = BaseObservableCollection
        public typealias CABI = __x_ABI_C__FIObservableVector_1___x_ABI_Ctest__zcomponent__CBase
        public static func from(abi: ComPtr<__x_ABI_C__FIObservableVector_1___x_ABI_Ctest__zcomponent__CBase>?) -> BaseObservableCollection? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

}
@_spi(WinRTInternal)
public class BaseObservableCollectionMaker: MakeFromAbi {
    public typealias SwiftType = BaseObservableCollection
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return BaseObservableCollection(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
extension __ABI_test_component {
}

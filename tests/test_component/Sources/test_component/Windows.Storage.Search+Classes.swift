// WARNING: Please don't edit this file. It was generated by Swift/WinRT v0.0.1
// swiftlint:disable all
import Foundation
import Ctest_component

// MARK: - QueryOptions

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.search.queryoptions)
public final class QueryOptions : WinRTClass {
    private typealias SwiftABI = __ABI_Windows_Storage_Search.IQueryOptions
    private typealias CABI = __x_ABI_CWindows_CStorage_CSearch_CIQueryOptions
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: test_component.IInspectable) {
        super.init(fromAbi)
    }

    private static let _defaultFactory: test_component.IActivationFactory = try! RoGetActivationFactory("Windows.Storage.Search.QueryOptions")
    override public init() {
        super.init(try! Self._defaultFactory.ActivateInstance())
    }

    private static let _IQueryOptionsFactory: __ABI_Windows_Storage_Search.IQueryOptionsFactory = try! RoGetActivationFactory("Windows.Storage.Search.QueryOptions")
    public init(_ query: CommonFileQuery, _ fileTypeFilter: AnyIIterable<String>!) {
        super.init(try! Self._IQueryOptionsFactory.CreateCommonFileQuery(query, fileTypeFilter))
    }

    public init(_ query: CommonFolderQuery) {
        super.init(try! Self._IQueryOptionsFactory.CreateCommonFolderQuery(query))
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.search.queryoptions.savetostring)
    public func saveToString() throws -> String {
        try _default.SaveToString()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.search.queryoptions.loadfromstring)
    public func loadFromString(_ value: String) throws {
        try _default.LoadFromString(value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.search.queryoptions.setthumbnailprefetch)
    public func setThumbnailPrefetch(_ mode: test_component.ThumbnailMode, _ requestedSize: UInt32, _ options: test_component.ThumbnailOptions) throws {
        try _default.SetThumbnailPrefetch(mode, requestedSize, options)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.search.queryoptions.setpropertyprefetch)
    public func setPropertyPrefetch(_ options: test_component.PropertyPrefetchOptions, _ propertiesToRetrieve: AnyIIterable<String>!) throws {
        try _default.SetPropertyPrefetch(options, propertiesToRetrieve)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.search.queryoptions.applicationsearchfilter)
    public var applicationSearchFilter : String {
        get { try! _default.get_ApplicationSearchFilter() }
        set { try! _default.put_ApplicationSearchFilter(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.search.queryoptions.datestackoption)
    public var dateStackOption : DateStackOption {
        get { try! _default.get_DateStackOption() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.search.queryoptions.filetypefilter)
    public var fileTypeFilter : AnyIVector<String>! {
        get { try! _default.get_FileTypeFilter() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.search.queryoptions.folderdepth)
    public var folderDepth : FolderDepth {
        get { try! _default.get_FolderDepth() }
        set { try! _default.put_FolderDepth(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.search.queryoptions.grouppropertyname)
    public var groupPropertyName : String {
        get { try! _default.get_GroupPropertyName() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.search.queryoptions.indexeroption)
    public var indexerOption : IndexerOption {
        get { try! _default.get_IndexerOption() }
        set { try! _default.put_IndexerOption(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.search.queryoptions.language)
    public var language : String {
        get { try! _default.get_Language() }
        set { try! _default.put_Language(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.search.queryoptions.sortorder)
    public var sortOrder : AnyIVector<SortEntry>! {
        get { try! _default.get_SortOrder() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.search.queryoptions.usersearchfilter)
    public var userSearchFilter : String {
        get { try! _default.get_UserSearchFilter() }
        set { try! _default.put_UserSearchFilter(newValue) }
    }

    private lazy var _IQueryOptionsWithProviderFilter: __ABI_Windows_Storage_Search.IQueryOptionsWithProviderFilter! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.search.queryoptions.storageprovideridfilter)
    public var storageProviderIdFilter : AnyIVector<String>! {
        get { try! _IQueryOptionsWithProviderFilter.get_StorageProviderIdFilter() }
    }

    deinit {
        _default = nil
        _IQueryOptionsWithProviderFilter = nil
    }
}

// MARK: - QueryOptions Internals

@_spi(WinRTInternal)
extension __IMPL_Windows_Storage_Search {
    public enum QueryOptionsBridge: AbiBridge {
        public typealias SwiftProjection = QueryOptions
        public typealias CABI = __x_ABI_CWindows_CStorage_CSearch_CIQueryOptions
        public static func from(abi: ComPtr<__x_ABI_CWindows_CStorage_CSearch_CIQueryOptions>?) -> QueryOptions? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: test_component.IInspectable(abi))
        }
    }

}
@_spi(WinRTInternal)
public class QueryOptionsMaker: MakeFromAbi {
    public typealias SwiftType = QueryOptions
    public static func from(abi: test_component.IInspectable) -> SwiftType {
        return QueryOptions(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
extension __ABI_Windows_Storage_Search {
    private static let IID___x_ABI_CWindows_CStorage_CSearch_CIQueryOptions: test_component.IID = .init(
        Data1: 0x1E5E46EE, Data2: 0x0F45, Data3: 0x4838, Data4: ( 0xA8,0xE9,0xD0,0x47,0x9D,0x44,0x6C,0x30 ) // 1E5E46EE-0F45-4838-A8E9-D0479D446C30
    ) 

    public class IQueryOptions: test_component.IInspectable {
        override public class var IID: test_component.IID { IID___x_ABI_CWindows_CStorage_CSearch_CIQueryOptions }

        public func get_FileTypeFilter() throws -> test_component.AnyIVector<String>? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CStorage_CSearch_CIQueryOptions.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_FileTypeFilter(pThis, &valueAbi))
                }
            }
            return test_component.__x_ABI_C__FIVector_1_HSTRINGWrapper.unwrapFrom(abi: value)
        }

        public func get_FolderDepth() throws -> test_component.FolderDepth {
            var value: __x_ABI_CWindows_CStorage_CSearch_CFolderDepth = .init(0)
            _ = try perform(as: __x_ABI_CWindows_CStorage_CSearch_CIQueryOptions.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_FolderDepth(pThis, &value))
            }
            return value
        }

        public func put_FolderDepth(_ value: test_component.FolderDepth) throws {
            _ = try perform(as: __x_ABI_CWindows_CStorage_CSearch_CIQueryOptions.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_FolderDepth(pThis, value))
            }
        }

        public func get_ApplicationSearchFilter() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CWindows_CStorage_CSearch_CIQueryOptions.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ApplicationSearchFilter(pThis, &value))
            }
            return .init(from: value)
        }

        public func put_ApplicationSearchFilter(_ value: String) throws {
            let _value = try! HString(value)
            _ = try perform(as: __x_ABI_CWindows_CStorage_CSearch_CIQueryOptions.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_ApplicationSearchFilter(pThis, _value.get()))
            }
        }

        public func get_UserSearchFilter() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CWindows_CStorage_CSearch_CIQueryOptions.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_UserSearchFilter(pThis, &value))
            }
            return .init(from: value)
        }

        public func put_UserSearchFilter(_ value: String) throws {
            let _value = try! HString(value)
            _ = try perform(as: __x_ABI_CWindows_CStorage_CSearch_CIQueryOptions.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_UserSearchFilter(pThis, _value.get()))
            }
        }

        public func get_Language() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CWindows_CStorage_CSearch_CIQueryOptions.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Language(pThis, &value))
            }
            return .init(from: value)
        }

        public func put_Language(_ value: String) throws {
            let _value = try! HString(value)
            _ = try perform(as: __x_ABI_CWindows_CStorage_CSearch_CIQueryOptions.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Language(pThis, _value.get()))
            }
        }

        public func get_IndexerOption() throws -> test_component.IndexerOption {
            var value: __x_ABI_CWindows_CStorage_CSearch_CIndexerOption = .init(0)
            _ = try perform(as: __x_ABI_CWindows_CStorage_CSearch_CIQueryOptions.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IndexerOption(pThis, &value))
            }
            return value
        }

        public func put_IndexerOption(_ value: test_component.IndexerOption) throws {
            _ = try perform(as: __x_ABI_CWindows_CStorage_CSearch_CIQueryOptions.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_IndexerOption(pThis, value))
            }
        }

        public func get_SortOrder() throws -> test_component.AnyIVector<test_component.SortEntry>? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CStorage_CSearch_CIQueryOptions.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_SortOrder(pThis, &valueAbi))
                }
            }
            return test_component.__x_ABI_C__FIVector_1___x_ABI_CWindows__CStorage__CSearch__CSortEntryWrapper.unwrapFrom(abi: value)
        }

        public func get_GroupPropertyName() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CWindows_CStorage_CSearch_CIQueryOptions.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_GroupPropertyName(pThis, &value))
            }
            return .init(from: value)
        }

        public func get_DateStackOption() throws -> test_component.DateStackOption {
            var value: __x_ABI_CWindows_CStorage_CSearch_CDateStackOption = .init(0)
            _ = try perform(as: __x_ABI_CWindows_CStorage_CSearch_CIQueryOptions.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_DateStackOption(pThis, &value))
            }
            return value
        }

        public func SaveToString() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CWindows_CStorage_CSearch_CIQueryOptions.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.SaveToString(pThis, &value))
            }
            return .init(from: value)
        }

        public func LoadFromString(_ value: String) throws {
            let _value = try! HString(value)
            _ = try perform(as: __x_ABI_CWindows_CStorage_CSearch_CIQueryOptions.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.LoadFromString(pThis, _value.get()))
            }
        }

        public func SetThumbnailPrefetch(_ mode: test_component.ThumbnailMode, _ requestedSize: UInt32, _ options: test_component.ThumbnailOptions) throws {
            _ = try perform(as: __x_ABI_CWindows_CStorage_CSearch_CIQueryOptions.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.SetThumbnailPrefetch(pThis, mode, requestedSize, options))
            }
        }

        public func SetPropertyPrefetch(_ options: test_component.PropertyPrefetchOptions, _ propertiesToRetrieve: test_component.AnyIIterable<String>?) throws {
            let propertiesToRetrieveWrapper = test_component.__x_ABI_C__FIIterable_1_HSTRINGWrapper(propertiesToRetrieve)
            let _propertiesToRetrieve = try! propertiesToRetrieveWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CWindows_CStorage_CSearch_CIQueryOptions.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.SetPropertyPrefetch(pThis, options, _propertiesToRetrieve))
            }
        }

    }

    private static let IID___x_ABI_CWindows_CStorage_CSearch_CIQueryOptionsWithProviderFilter: test_component.IID = .init(
        Data1: 0x5B9D1026, Data2: 0x15C4, Data3: 0x44DD, Data4: ( 0xB8,0x9A,0x47,0xA5,0x9B,0x7D,0x7C,0x4F ) // 5B9D1026-15C4-44DD-B89A-47A59B7D7C4F
    ) 

    public class IQueryOptionsWithProviderFilter: test_component.IInspectable {
        override public class var IID: test_component.IID { IID___x_ABI_CWindows_CStorage_CSearch_CIQueryOptionsWithProviderFilter }

        public func get_StorageProviderIdFilter() throws -> test_component.AnyIVector<String>? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CStorage_CSearch_CIQueryOptionsWithProviderFilter.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_StorageProviderIdFilter(pThis, &valueAbi))
                }
            }
            return test_component.__x_ABI_C__FIVector_1_HSTRINGWrapper.unwrapFrom(abi: value)
        }

    }

    private static let IID___x_ABI_CWindows_CStorage_CSearch_CIQueryOptionsFactory: test_component.IID = .init(
        Data1: 0x032E1F8C, Data2: 0xA9C1, Data3: 0x4E71, Data4: ( 0x80,0x11,0x0D,0xEE,0x9D,0x48,0x11,0xA3 ) // 032E1F8C-A9C1-4E71-8011-0DEE9D4811A3
    ) 

    public class IQueryOptionsFactory: test_component.IInspectable {
        override public class var IID: test_component.IID { IID___x_ABI_CWindows_CStorage_CSearch_CIQueryOptionsFactory }

        public func CreateCommonFileQuery(_ query: test_component.CommonFileQuery, _ fileTypeFilter: test_component.AnyIIterable<String>?) throws -> IQueryOptions {
            let (queryOptions) = try ComPtrs.initialize { queryOptionsAbi in
                let fileTypeFilterWrapper = test_component.__x_ABI_C__FIIterable_1_HSTRINGWrapper(fileTypeFilter)
                let _fileTypeFilter = try! fileTypeFilterWrapper?.toABI { $0 }
                _ = try perform(as: __x_ABI_CWindows_CStorage_CSearch_CIQueryOptionsFactory.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateCommonFileQuery(pThis, query, _fileTypeFilter, &queryOptionsAbi))
                }
            }
            return IQueryOptions(queryOptions!)
        }

        public func CreateCommonFolderQuery(_ query: test_component.CommonFolderQuery) throws -> IQueryOptions {
            let (queryOptions) = try ComPtrs.initialize { queryOptionsAbi in
                _ = try perform(as: __x_ABI_CWindows_CStorage_CSearch_CIQueryOptionsFactory.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateCommonFolderQuery(pThis, query, &queryOptionsAbi))
                }
            }
            return IQueryOptions(queryOptions!)
        }

    }

}
// MARK: - StorageFileQueryResult

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.search.storagefilequeryresult)
public final class StorageFileQueryResult : WinRTClass, IStorageQueryResultBase {
    private typealias SwiftABI = __ABI_Windows_Storage_Search.IStorageFileQueryResult
    private typealias CABI = __x_ABI_CWindows_CStorage_CSearch_CIStorageFileQueryResult
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: test_component.IInspectable) {
        super.init(fromAbi)
    }

    override public func queryInterface(_ iid: test_component.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private lazy var _IStorageQueryResultBase: __ABI_Windows_Storage_Search.IStorageQueryResultBase! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.search.storagefilequeryresult.getitemcountasync)
    public func getItemCountAsync() throws -> AnyIAsyncOperation<UInt32>! {
        try _IStorageQueryResultBase.GetItemCountAsync()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.search.storagefilequeryresult.findstartindexasync)
    public func findStartIndexAsync(_ value: Any!) throws -> AnyIAsyncOperation<UInt32>! {
        try _IStorageQueryResultBase.FindStartIndexAsync(value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.search.storagefilequeryresult.getcurrentqueryoptions)
    public func getCurrentQueryOptions() throws -> QueryOptions! {
        try _IStorageQueryResultBase.GetCurrentQueryOptions()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.search.storagefilequeryresult.applynewqueryoptions)
    public func applyNewQueryOptions(_ newQueryOptions: QueryOptions!) throws {
        try _IStorageQueryResultBase.ApplyNewQueryOptions(newQueryOptions)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.search.storagefilequeryresult.folder)
    public var folder : test_component.StorageFolder! {
        get { try! _IStorageQueryResultBase.get_Folder() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.search.storagefilequeryresult.contentschanged)
    public lazy var contentsChanged : Event<TypedEventHandler<IStorageQueryResultBase?, Any?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._IStorageQueryResultBase else { return .init() }
          return try! this.add_ContentsChanged($0)
        },
        remove: { [weak self] in
         try? self?._IStorageQueryResultBase.remove_ContentsChanged($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.search.storagefilequeryresult.optionschanged)
    public lazy var optionsChanged : Event<TypedEventHandler<IStorageQueryResultBase?, Any?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._IStorageQueryResultBase else { return .init() }
          return try! this.add_OptionsChanged($0)
        },
        remove: { [weak self] in
         try? self?._IStorageQueryResultBase.remove_OptionsChanged($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.search.storagefilequeryresult.getfilesasync)
    public func getFilesAsync(_ startIndex: UInt32, _ maxNumberOfItems: UInt32) throws -> AnyIAsyncOperation<AnyIVectorView<test_component.StorageFile?>?>! {
        try _default.GetFilesAsync(startIndex, maxNumberOfItems)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.search.storagefilequeryresult.getfilesasync)
    public func getFilesAsync() throws -> AnyIAsyncOperation<AnyIVectorView<test_component.StorageFile?>?>! {
        try _default.GetFilesAsyncDefaultStartAndCount()
    }

    private lazy var _IStorageFileQueryResult2: __ABI_Windows_Storage_Search.IStorageFileQueryResult2! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.search.storagefilequeryresult.getmatchingpropertieswithranges)
    public func getMatchingPropertiesWithRanges(_ file: test_component.StorageFile!) throws -> AnyIMap<String, AnyIVectorView<test_component.TextSegment>?>! {
        try _IStorageFileQueryResult2.GetMatchingPropertiesWithRanges(file)
    }

    deinit {
        _IStorageQueryResultBase = nil
        _default = nil
        _IStorageFileQueryResult2 = nil
    }
}

// MARK: - StorageFileQueryResult Internals

@_spi(WinRTInternal)
extension __IMPL_Windows_Storage_Search {
    public enum StorageFileQueryResultBridge: AbiBridge {
        public typealias SwiftProjection = StorageFileQueryResult
        public typealias CABI = __x_ABI_CWindows_CStorage_CSearch_CIStorageFileQueryResult
        public static func from(abi: ComPtr<__x_ABI_CWindows_CStorage_CSearch_CIStorageFileQueryResult>?) -> StorageFileQueryResult? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: test_component.IInspectable(abi))
        }
    }

}
@_spi(WinRTInternal)
public class StorageFileQueryResultMaker: MakeFromAbi {
    public typealias SwiftType = StorageFileQueryResult
    public static func from(abi: test_component.IInspectable) -> SwiftType {
        return StorageFileQueryResult(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
extension __ABI_Windows_Storage_Search {
    private static let IID___x_ABI_CWindows_CStorage_CSearch_CIStorageFileQueryResult: test_component.IID = .init(
        Data1: 0x52FDA447, Data2: 0x2BAA, Data3: 0x412C, Data4: ( 0xB2,0x9F,0xD4,0xB1,0x77,0x8E,0xFA,0x1E ) // 52FDA447-2BAA-412C-B29F-D4B1778EFA1E
    ) 

    public class IStorageFileQueryResult: test_component.IInspectable {
        override public class var IID: test_component.IID { IID___x_ABI_CWindows_CStorage_CSearch_CIStorageFileQueryResult }

        public func GetFilesAsync(_ startIndex: UInt32, _ maxNumberOfItems: UInt32) throws -> test_component.AnyIAsyncOperation<test_component.AnyIVectorView<test_component.StorageFile?>?>? {
            let (operation) = try ComPtrs.initialize { operationAbi in
                _ = try perform(as: __x_ABI_CWindows_CStorage_CSearch_CIStorageFileQueryResult.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetFilesAsync(pThis, startIndex, maxNumberOfItems, &operationAbi))
                }
            }
            return test_component.__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CStorageFileWrapper.unwrapFrom(abi: operation)
        }

        public func GetFilesAsyncDefaultStartAndCount() throws -> test_component.AnyIAsyncOperation<test_component.AnyIVectorView<test_component.StorageFile?>?>? {
            let (operation) = try ComPtrs.initialize { operationAbi in
                _ = try perform(as: __x_ABI_CWindows_CStorage_CSearch_CIStorageFileQueryResult.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetFilesAsyncDefaultStartAndCount(pThis, &operationAbi))
                }
            }
            return test_component.__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CStorageFileWrapper.unwrapFrom(abi: operation)
        }

    }

    private static let IID___x_ABI_CWindows_CStorage_CSearch_CIStorageFileQueryResult2: test_component.IID = .init(
        Data1: 0x4E5DB9DD, Data2: 0x7141, Data3: 0x46C4, Data4: ( 0x8B,0xE3,0xE9,0xDC,0x9E,0x27,0x27,0x5C ) // 4E5DB9DD-7141-46C4-8BE3-E9DC9E27275C
    ) 

    public class IStorageFileQueryResult2: test_component.IInspectable {
        override public class var IID: test_component.IID { IID___x_ABI_CWindows_CStorage_CSearch_CIStorageFileQueryResult2 }

        public func GetMatchingPropertiesWithRanges(_ file: test_component.StorageFile?) throws -> test_component.AnyIMap<String, test_component.AnyIVectorView<test_component.TextSegment>?>? {
            let (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CWindows_CStorage_CSearch_CIStorageFileQueryResult2.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetMatchingPropertiesWithRanges(pThis, RawPointer(file), &resultAbi))
                }
            }
            return test_component.__x_ABI_C__FIMap_2_HSTRING___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CTextSegmentWrapper.unwrapFrom(abi: result)
        }

    }

}
// MARK: - StorageFolderQueryResult

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.search.storagefolderqueryresult)
public final class StorageFolderQueryResult : WinRTClass, IStorageQueryResultBase {
    private typealias SwiftABI = __ABI_Windows_Storage_Search.IStorageFolderQueryResult
    private typealias CABI = __x_ABI_CWindows_CStorage_CSearch_CIStorageFolderQueryResult
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: test_component.IInspectable) {
        super.init(fromAbi)
    }

    override public func queryInterface(_ iid: test_component.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private lazy var _IStorageQueryResultBase: __ABI_Windows_Storage_Search.IStorageQueryResultBase! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.search.storagefolderqueryresult.getitemcountasync)
    public func getItemCountAsync() throws -> AnyIAsyncOperation<UInt32>! {
        try _IStorageQueryResultBase.GetItemCountAsync()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.search.storagefolderqueryresult.findstartindexasync)
    public func findStartIndexAsync(_ value: Any!) throws -> AnyIAsyncOperation<UInt32>! {
        try _IStorageQueryResultBase.FindStartIndexAsync(value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.search.storagefolderqueryresult.getcurrentqueryoptions)
    public func getCurrentQueryOptions() throws -> QueryOptions! {
        try _IStorageQueryResultBase.GetCurrentQueryOptions()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.search.storagefolderqueryresult.applynewqueryoptions)
    public func applyNewQueryOptions(_ newQueryOptions: QueryOptions!) throws {
        try _IStorageQueryResultBase.ApplyNewQueryOptions(newQueryOptions)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.search.storagefolderqueryresult.folder)
    public var folder : test_component.StorageFolder! {
        get { try! _IStorageQueryResultBase.get_Folder() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.search.storagefolderqueryresult.contentschanged)
    public lazy var contentsChanged : Event<TypedEventHandler<IStorageQueryResultBase?, Any?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._IStorageQueryResultBase else { return .init() }
          return try! this.add_ContentsChanged($0)
        },
        remove: { [weak self] in
         try? self?._IStorageQueryResultBase.remove_ContentsChanged($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.search.storagefolderqueryresult.optionschanged)
    public lazy var optionsChanged : Event<TypedEventHandler<IStorageQueryResultBase?, Any?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._IStorageQueryResultBase else { return .init() }
          return try! this.add_OptionsChanged($0)
        },
        remove: { [weak self] in
         try? self?._IStorageQueryResultBase.remove_OptionsChanged($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.search.storagefolderqueryresult.getfoldersasync)
    public func getFoldersAsync(_ startIndex: UInt32, _ maxNumberOfItems: UInt32) throws -> AnyIAsyncOperation<AnyIVectorView<test_component.StorageFolder?>?>! {
        try _default.GetFoldersAsync(startIndex, maxNumberOfItems)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.search.storagefolderqueryresult.getfoldersasync)
    public func getFoldersAsync() throws -> AnyIAsyncOperation<AnyIVectorView<test_component.StorageFolder?>?>! {
        try _default.GetFoldersAsyncDefaultStartAndCount()
    }

    deinit {
        _IStorageQueryResultBase = nil
        _default = nil
    }
}

// MARK: - StorageFolderQueryResult Internals

@_spi(WinRTInternal)
extension __IMPL_Windows_Storage_Search {
    public enum StorageFolderQueryResultBridge: AbiBridge {
        public typealias SwiftProjection = StorageFolderQueryResult
        public typealias CABI = __x_ABI_CWindows_CStorage_CSearch_CIStorageFolderQueryResult
        public static func from(abi: ComPtr<__x_ABI_CWindows_CStorage_CSearch_CIStorageFolderQueryResult>?) -> StorageFolderQueryResult? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: test_component.IInspectable(abi))
        }
    }

}
@_spi(WinRTInternal)
public class StorageFolderQueryResultMaker: MakeFromAbi {
    public typealias SwiftType = StorageFolderQueryResult
    public static func from(abi: test_component.IInspectable) -> SwiftType {
        return StorageFolderQueryResult(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
extension __ABI_Windows_Storage_Search {
    private static let IID___x_ABI_CWindows_CStorage_CSearch_CIStorageFolderQueryResult: test_component.IID = .init(
        Data1: 0x6654C911, Data2: 0x7D66, Data3: 0x46FA, Data4: ( 0xAE,0xCF,0xE4,0xA4,0xBA,0xA9,0x3A,0xB8 ) // 6654C911-7D66-46FA-AECF-E4A4BAA93AB8
    ) 

    public class IStorageFolderQueryResult: test_component.IInspectable {
        override public class var IID: test_component.IID { IID___x_ABI_CWindows_CStorage_CSearch_CIStorageFolderQueryResult }

        public func GetFoldersAsync(_ startIndex: UInt32, _ maxNumberOfItems: UInt32) throws -> test_component.AnyIAsyncOperation<test_component.AnyIVectorView<test_component.StorageFolder?>?>? {
            let (operation) = try ComPtrs.initialize { operationAbi in
                _ = try perform(as: __x_ABI_CWindows_CStorage_CSearch_CIStorageFolderQueryResult.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetFoldersAsync(pThis, startIndex, maxNumberOfItems, &operationAbi))
                }
            }
            return test_component.__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CStorageFolderWrapper.unwrapFrom(abi: operation)
        }

        public func GetFoldersAsyncDefaultStartAndCount() throws -> test_component.AnyIAsyncOperation<test_component.AnyIVectorView<test_component.StorageFolder?>?>? {
            let (operation) = try ComPtrs.initialize { operationAbi in
                _ = try perform(as: __x_ABI_CWindows_CStorage_CSearch_CIStorageFolderQueryResult.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetFoldersAsyncDefaultStartAndCount(pThis, &operationAbi))
                }
            }
            return test_component.__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CStorageFolderWrapper.unwrapFrom(abi: operation)
        }

    }

}
// MARK: - StorageItemQueryResult

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.search.storageitemqueryresult)
public final class StorageItemQueryResult : WinRTClass, IStorageQueryResultBase {
    private typealias SwiftABI = __ABI_Windows_Storage_Search.IStorageItemQueryResult
    private typealias CABI = __x_ABI_CWindows_CStorage_CSearch_CIStorageItemQueryResult
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: test_component.IInspectable) {
        super.init(fromAbi)
    }

    override public func queryInterface(_ iid: test_component.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private lazy var _IStorageQueryResultBase: __ABI_Windows_Storage_Search.IStorageQueryResultBase! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.search.storageitemqueryresult.getitemcountasync)
    public func getItemCountAsync() throws -> AnyIAsyncOperation<UInt32>! {
        try _IStorageQueryResultBase.GetItemCountAsync()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.search.storageitemqueryresult.findstartindexasync)
    public func findStartIndexAsync(_ value: Any!) throws -> AnyIAsyncOperation<UInt32>! {
        try _IStorageQueryResultBase.FindStartIndexAsync(value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.search.storageitemqueryresult.getcurrentqueryoptions)
    public func getCurrentQueryOptions() throws -> QueryOptions! {
        try _IStorageQueryResultBase.GetCurrentQueryOptions()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.search.storageitemqueryresult.applynewqueryoptions)
    public func applyNewQueryOptions(_ newQueryOptions: QueryOptions!) throws {
        try _IStorageQueryResultBase.ApplyNewQueryOptions(newQueryOptions)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.search.storageitemqueryresult.folder)
    public var folder : test_component.StorageFolder! {
        get { try! _IStorageQueryResultBase.get_Folder() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.search.storageitemqueryresult.contentschanged)
    public lazy var contentsChanged : Event<TypedEventHandler<IStorageQueryResultBase?, Any?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._IStorageQueryResultBase else { return .init() }
          return try! this.add_ContentsChanged($0)
        },
        remove: { [weak self] in
         try? self?._IStorageQueryResultBase.remove_ContentsChanged($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.search.storageitemqueryresult.optionschanged)
    public lazy var optionsChanged : Event<TypedEventHandler<IStorageQueryResultBase?, Any?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._IStorageQueryResultBase else { return .init() }
          return try! this.add_OptionsChanged($0)
        },
        remove: { [weak self] in
         try? self?._IStorageQueryResultBase.remove_OptionsChanged($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.search.storageitemqueryresult.getitemsasync)
    public func getItemsAsync(_ startIndex: UInt32, _ maxNumberOfItems: UInt32) throws -> AnyIAsyncOperation<AnyIVectorView<test_component.AnyIStorageItem?>?>! {
        try _default.GetItemsAsync(startIndex, maxNumberOfItems)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.search.storageitemqueryresult.getitemsasync)
    public func getItemsAsync() throws -> AnyIAsyncOperation<AnyIVectorView<test_component.AnyIStorageItem?>?>! {
        try _default.GetItemsAsyncDefaultStartAndCount()
    }

    deinit {
        _IStorageQueryResultBase = nil
        _default = nil
    }
}

// MARK: - StorageItemQueryResult Internals

@_spi(WinRTInternal)
extension __IMPL_Windows_Storage_Search {
    public enum StorageItemQueryResultBridge: AbiBridge {
        public typealias SwiftProjection = StorageItemQueryResult
        public typealias CABI = __x_ABI_CWindows_CStorage_CSearch_CIStorageItemQueryResult
        public static func from(abi: ComPtr<__x_ABI_CWindows_CStorage_CSearch_CIStorageItemQueryResult>?) -> StorageItemQueryResult? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: test_component.IInspectable(abi))
        }
    }

}
@_spi(WinRTInternal)
public class StorageItemQueryResultMaker: MakeFromAbi {
    public typealias SwiftType = StorageItemQueryResult
    public static func from(abi: test_component.IInspectable) -> SwiftType {
        return StorageItemQueryResult(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
extension __ABI_Windows_Storage_Search {
    private static let IID___x_ABI_CWindows_CStorage_CSearch_CIStorageItemQueryResult: test_component.IID = .init(
        Data1: 0xE8948079, Data2: 0x9D58, Data3: 0x47B8, Data4: ( 0xB2,0xB2,0x41,0xB0,0x7F,0x47,0x95,0xF9 ) // E8948079-9D58-47B8-B2B2-41B07F4795F9
    ) 

    public class IStorageItemQueryResult: test_component.IInspectable {
        override public class var IID: test_component.IID { IID___x_ABI_CWindows_CStorage_CSearch_CIStorageItemQueryResult }

        public func GetItemsAsync(_ startIndex: UInt32, _ maxNumberOfItems: UInt32) throws -> test_component.AnyIAsyncOperation<test_component.AnyIVectorView<test_component.AnyIStorageItem?>?>? {
            let (operation) = try ComPtrs.initialize { operationAbi in
                _ = try perform(as: __x_ABI_CWindows_CStorage_CSearch_CIStorageItemQueryResult.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetItemsAsync(pThis, startIndex, maxNumberOfItems, &operationAbi))
                }
            }
            return test_component.__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CIStorageItemWrapper.unwrapFrom(abi: operation)
        }

        public func GetItemsAsyncDefaultStartAndCount() throws -> test_component.AnyIAsyncOperation<test_component.AnyIVectorView<test_component.AnyIStorageItem?>?>? {
            let (operation) = try ComPtrs.initialize { operationAbi in
                _ = try perform(as: __x_ABI_CWindows_CStorage_CSearch_CIStorageItemQueryResult.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetItemsAsyncDefaultStartAndCount(pThis, &operationAbi))
                }
            }
            return test_component.__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CIStorageItemWrapper.unwrapFrom(abi: operation)
        }

    }

}

// WARNING: Please don't edit this file. It was generated by Swift/WinRT v0.0.1
// swiftlint:disable all
import Foundation
import Ctest_component

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.istorageitem2)
public protocol IStorageItem2 : IStorageItem {
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.istorageitem2.getparentasync)
    func getParentAsync() throws -> test_component.AnyIAsyncOperation<test_component.StorageFolder?>!
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.istorageitem2.isequal)
    func isEqual(_ item: test_component.AnyIStorageItem!) throws -> Bool
}

extension IStorageItem2 {
    public func queryInterface(_ iid: test_component.IID) -> IUnknownRef? {
        switch iid {
            case __ABI_Windows_Storage.IStorageItem2Wrapper.IID:
                let wrapper = __ABI_Windows_Storage.IStorageItem2Wrapper(self)
                return wrapper!.queryInterface(iid)
            case __ABI_Windows_Storage.IStorageItemWrapper.IID:
                let wrapper = __ABI_Windows_Storage.IStorageItemWrapper(self)
                return wrapper!.queryInterface(iid)
            default: return nil
        }
    }
}
public typealias AnyIStorageItem2 = any IStorageItem2


// MARK: - Internals

@_spi(WinRTInternal)
extension __IMPL_Windows_Storage {
    public enum IStorageItem2Bridge : AbiInterfaceBridge {
        public typealias CABI = __x_ABI_CWindows_CStorage_CIStorageItem2
        public typealias SwiftABI = __ABI_Windows_Storage.IStorageItem2
        public typealias SwiftProjection = AnyIStorageItem2
        public static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
            guard let abi = abi else { return nil }
            return IStorageItem2Impl(abi)
        }

        public static func makeAbi() -> CABI {
            let vtblPtr = withUnsafeMutablePointer(to: &__ABI_Windows_Storage.IStorageItem2VTable) { $0 }
            return .init(lpVtbl: vtblPtr)
        }
    }

    fileprivate class IStorageItem2Impl: IStorageItem2, WinRTAbiImpl {
        fileprivate typealias Bridge = IStorageItem2Bridge
        fileprivate let _default: Bridge.SwiftABI
        fileprivate var thisPtr: test_component.IInspectable { _default }
        fileprivate init(_ fromAbi: ComPtr<Bridge.CABI>) {
            _default = Bridge.SwiftABI(fromAbi)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.istorageitem2.getparentasync)
        fileprivate func getParentAsync() throws -> AnyIAsyncOperation<StorageFolder?>! {
            try _default.GetParentAsync()
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.istorageitem2.isequal)
        fileprivate func isEqual(_ item: AnyIStorageItem!) throws -> Bool {
            try _default.IsEqual(item)
        }

        private lazy var _IStorageItem: __ABI_Windows_Storage.IStorageItem! = getInterfaceForCaching()
        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.istorageitem2.renameasync)
        fileprivate func renameAsync(_ desiredName: String) throws -> test_component.AnyIAsyncAction! {
            try _IStorageItem.RenameAsyncOverloadDefaultOptions(desiredName)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.istorageitem2.renameasync)
        fileprivate func renameAsync(_ desiredName: String, _ option: NameCollisionOption) throws -> test_component.AnyIAsyncAction! {
            try _IStorageItem.RenameAsync(desiredName, option)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.istorageitem2.deleteasync)
        fileprivate func deleteAsync() throws -> test_component.AnyIAsyncAction! {
            try _IStorageItem.DeleteAsyncOverloadDefaultOptions()
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.istorageitem2.deleteasync)
        fileprivate func deleteAsync(_ option: StorageDeleteOption) throws -> test_component.AnyIAsyncAction! {
            try _IStorageItem.DeleteAsync(option)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.istorageitem2.getbasicpropertiesasync)
        fileprivate func getBasicPropertiesAsync() throws -> AnyIAsyncOperation<test_component.BasicProperties?>! {
            try _IStorageItem.GetBasicPropertiesAsync()
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.istorageitem2.isoftype)
        fileprivate func isOfType(_ type: StorageItemTypes) throws -> Bool {
            try _IStorageItem.IsOfType(type)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.istorageitem2.attributes)
        fileprivate var attributes : FileAttributes {
            get { try! _IStorageItem.get_Attributes() }
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.istorageitem2.datecreated)
        fileprivate var dateCreated : test_component.DateTime {
            get { try! _IStorageItem.get_DateCreated() }
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.istorageitem2.name)
        fileprivate var name : String {
            get { try! _IStorageItem.get_Name() }
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.istorageitem2.path)
        fileprivate var path : String {
            get { try! _IStorageItem.get_Path() }
        }

    }

}
@_spi(WinRTInternal)
extension __ABI_Windows_Storage {
    private static let IID___x_ABI_CWindows_CStorage_CIStorageItem2: test_component.IID = .init(
        Data1: 0x53F926D2, Data2: 0x083C, Data3: 0x4283, Data4: ( 0xB4,0x5B,0x81,0xC0,0x07,0x23,0x7E,0x44 )
    ) // 53F926D2-083C-4283-B45B-81C007237E44
    public class IStorageItem2: test_component.IInspectable {
        override public class var IID: test_component.IID { IID___x_ABI_CWindows_CStorage_CIStorageItem2 }

        open func GetParentAsync() throws -> test_component.AnyIAsyncOperation<test_component.StorageFolder?>? {
            let (operation) = try ComPtrs.initialize { operationAbi in
                _ = try perform(as: __x_ABI_CWindows_CStorage_CIStorageItem2.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetParentAsync(pThis, &operationAbi))
                }
            }
            return test_component.__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStorageFolderWrapper.unwrapFrom(abi: operation)
        }

        open func IsEqual(_ item: test_component.AnyIStorageItem?) throws -> Bool {
            var value: boolean = 0
            let itemWrapper = __ABI_Windows_Storage.IStorageItemWrapper(item)
            let _item = try! itemWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CWindows_CStorage_CIStorageItem2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.IsEqual(pThis, _item, &value))
            }
            return .init(from: value)
        }

    }

    internal static var IStorageItem2VTable: __x_ABI_CWindows_CStorage_CIStorageItem2Vtbl = .init(
        QueryInterface: { IStorageItem2Wrapper.queryInterface($0, $1, $2) },
        AddRef: { IStorageItem2Wrapper.addRef($0) },
        Release: { IStorageItem2Wrapper.release($0) },
        GetIids: {
            let size = MemoryLayout<test_component.IID>.size
            let iids = CoTaskMemAlloc(UInt64(size) * 4).assumingMemoryBound(to: test_component.IID.self)
            iids[0] = IUnknown.IID
            iids[1] = IInspectable.IID
            iids[2] = __ABI_Windows_Storage.IStorageItem2Wrapper.IID
            iids[3] = __ABI_Windows_Storage.IStorageItemWrapper.IID
            $1!.pointee = 4
            $2!.pointee = iids
            return S_OK
        },

        GetRuntimeClassName: {
            _ = $0
            let hstring = try! HString("Windows.Storage.IStorageItem2").detach()
            $1!.pointee = hstring
            return S_OK
        },

        GetTrustLevel: {
            _ = $0
            $1!.pointee = TrustLevel(rawValue: 0)
            return S_OK
        },

        GetParentAsync: {
            do {
                guard let __unwrapped__instance = IStorageItem2Wrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let operation = try __unwrapped__instance.getParentAsync()
                let operationWrapper = test_component.__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStorageFolderWrapper(operation)
                operationWrapper?.copyTo($1)
                return S_OK
            } catch { return failWith(error: error) }
        },

        IsEqual: {
            do {
                guard let __unwrapped__instance = IStorageItem2Wrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let item: test_component.AnyIStorageItem? = __ABI_Windows_Storage.IStorageItemWrapper.unwrapFrom(abi: ComPtr($1))
                let value = try __unwrapped__instance.isEqual(item)
                $2?.initialize(to: .init(from: value))
                return S_OK
            } catch { return failWith(error: error) }
        }
    )

    public typealias IStorageItem2Wrapper = InterfaceWrapperBase<__IMPL_Windows_Storage.IStorageItem2Bridge>
}
@_spi(WinRTInternal)
public class IStorageItem2Maker: MakeFromAbi {
    public typealias SwiftType = AnyIStorageItem2
    public static func from(abi: test_component.IInspectable) -> SwiftType {
        let swiftAbi: __ABI_Windows_Storage.IStorageItem2 = try! abi.QueryInterface()
        return __IMPL_Windows_Storage.IStorageItem2Bridge.from(abi: RawPointer(swiftAbi))!
    }
}

// WARNING: Please don't edit this file. It was generated by Swift/WinRT v0.0.1
// swiftlint:disable all
import Foundation
@_spi(WinRTInternal) @_spi(WinRTImplements) import WindowsFoundation
import CWinRT

public protocol WithKeyword : WinRTInterface {
    func `enum`(_ `extension`: String) throws
    func `subscript`() throws
    var `struct`: String { get set }
    var `repeat`: Event<EventHandler<Any?>> { get }
}

extension WithKeyword {
    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        switch iid {
            case __ABI_test_component.WithKeywordWrapper.IID:
                let wrapper = __ABI_test_component.WithKeywordWrapper(self)
                return wrapper!.queryInterface(iid)
            default: return nil
        }
    }
}
public typealias AnyWithKeyword = any WithKeyword

// MARK: - WithKeyword Internals

@_spi(WinRTInternal)
extension __IMPL_test_component {
    public enum WithKeywordBridge : AbiInterfaceBridge {
        public typealias CABI = __x_ABI_Ctest__component_CWithKeyword
        public typealias SwiftABI = __ABI_test_component.WithKeyword
        public typealias SwiftProjection = AnyWithKeyword
        public static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
            guard let abi = abi else { return nil }
            return WithKeywordImpl(abi)
        }

        public static func makeAbi() -> CABI {
            let vtblPtr = withUnsafeMutablePointer(to: &__ABI_test_component.WithKeywordVTable) { $0 }
            return .init(lpVtbl: vtblPtr)
        }
    }

    fileprivate class WithKeywordImpl: WithKeyword, WinRTAbiImpl {
        fileprivate typealias Bridge = WithKeywordBridge
        fileprivate let _default: Bridge.SwiftABI
        fileprivate var thisPtr: WindowsFoundation.IInspectable { _default }
        fileprivate init(_ fromAbi: ComPtr<Bridge.CABI>) {
            _default = Bridge.SwiftABI(fromAbi)
        }

        fileprivate func `enum`(_ `extension`: String) throws {
            try _default.Enum(`extension`)
        }

        fileprivate func `subscript`() throws {
            try _default.Subscript()
        }

        fileprivate var `struct` : String {
            get { try! _default.get_Struct() }
            set { try! _default.put_Struct(newValue) }
        }

        fileprivate lazy var `repeat` : Event<EventHandler<Any?>> = {
          .init(
            add: { [weak self] in
              guard let this = self?._default else { return .init() }
              return try! this.add_Repeat($0)
            },
            remove: { [weak self] in
             try? self?._default.remove_Repeat($0)
           }
          )
        }()

    }

}
@_spi(WinRTInternal)
extension __ABI_test_component {
    private static let IID___x_ABI_Ctest__component_CWithKeyword: WindowsFoundation.IID = .init(
        Data1: 0x18D4C535, Data2: 0x1785, Data3: 0x52CA, Data4: ( 0x88,0x51,0x8C,0xF3,0xD5,0x15,0x70,0x8A ) // 18D4C535-1785-52CA-8851-8CF3D515708A
    ) 

    public class WithKeyword: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_Ctest__component_CWithKeyword }

        open func Enum(_ `extension`: String) throws {
            let _extension = try! HString(`extension`)
            _ = try perform(as: __x_ABI_Ctest__component_CWithKeyword.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Enum(pThis, _extension.get()))
            }
        }

        open func get_Struct() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_Ctest__component_CWithKeyword.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Struct(pThis, &value))
            }
            return .init(from: value)
        }

        open func put_Struct(_ value: String) throws {
            let _value = try! HString(value)
            _ = try perform(as: __x_ABI_Ctest__component_CWithKeyword.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Struct(pThis, _value.get()))
            }
        }

        open func add_Repeat(_ handler: EventHandler<Any?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = test_component.__x_ABI_C__FIEventHandler_1_IInspectableWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_Ctest__component_CWithKeyword.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_Repeat(pThis, _handler, &token))
            }
            return token
        }

        open func remove_Repeat(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_Ctest__component_CWithKeyword.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_Repeat(pThis, token))
            }
        }

        open func Subscript() throws {
            _ = try perform(as: __x_ABI_Ctest__component_CWithKeyword.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Subscript(pThis))
            }
        }

    }

    internal static var WithKeywordVTable: __x_ABI_Ctest__component_CWithKeywordVtbl = .init(
        QueryInterface: { WithKeywordWrapper.queryInterface($0, $1, $2) },
        AddRef: { WithKeywordWrapper.addRef($0) },
        Release: { WithKeywordWrapper.release($0) },
        GetIids: {
            let size = MemoryLayout<WindowsFoundation.IID>.size
            let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: WindowsFoundation.IID.self)
            iids[0] = IUnknown.IID
            iids[1] = IInspectable.IID
            iids[2] = __ABI_test_component.WithKeywordWrapper.IID
            $1!.pointee = 3
            $2!.pointee = iids
            return S_OK
        },

        GetRuntimeClassName: {
            _ = $0
            let hstring = try! HString("test_component.WithKeyword").detach()
            $1!.pointee = hstring
            return S_OK
        },

        GetTrustLevel: {
            _ = $0
            $1!.pointee = TrustLevel(rawValue: 0)
            return S_OK
        },

        Enum: {
            do {
                guard let __unwrapped__instance = WithKeywordWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let `extension`: String = .init(from: $1)
                try __unwrapped__instance.`enum`(`extension`)
                return S_OK
            } catch { return failWith(error: error) }
        },

        get_Struct: {
            guard let __unwrapped__instance = WithKeywordWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value = __unwrapped__instance.`struct`
            $1?.initialize(to: try! HString(value).detach())
            return S_OK
        },

        put_Struct: {
            guard let __unwrapped__instance = WithKeywordWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value: String = .init(from: $1)
            __unwrapped__instance.`struct` = value
            return S_OK
        },

        add_Repeat: {
            guard let __unwrapped__instance = WithKeywordWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            guard let handler = test_component.__x_ABI_C__FIEventHandler_1_IInspectableWrapper.unwrapFrom(abi: ComPtr($1)) else { return E_INVALIDARG }
            let token = __unwrapped__instance.`repeat`.addHandler(handler)
            $2?.initialize(to: .from(swift: token))
            return S_OK
        },

        remove_Repeat: {
            guard let __unwrapped__instance = WithKeywordWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let token: EventRegistrationToken = $1
            __unwrapped__instance.`repeat`.removeHandler(token)
            return S_OK
        },

        Subscript: {
            do {
                guard let __unwrapped__instance = WithKeywordWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                try __unwrapped__instance.`subscript`()
                return S_OK
            } catch { return failWith(error: error) }
        }
    )

    public typealias WithKeywordWrapper = InterfaceWrapperBase<__IMPL_test_component.WithKeywordBridge>
}
@_spi(WinRTInternal)
public class WithKeywordMaker: MakeFromAbi {
    public typealias SwiftType = AnyWithKeyword
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        let swiftAbi: __ABI_test_component.WithKeyword = try! abi.QueryInterface()
        return __IMPL_test_component.WithKeywordBridge.from(abi: RawPointer(swiftAbi))!
    }
}

// WARNING: Please don't edit this file. It was generated by Swift/WinRT v0.0.1
// swiftlint:disable all
import Foundation
import Ctest_component

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.system.user)
public final class User : WinRTClass {
    private typealias SwiftABI = __ABI_Windows_System.IUser
    private typealias CABI = __x_ABI_CWindows_CSystem_CIUser
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: test_component.IInspectable) {
        super.init(fromAbi)
    }

    private static let _IUserStatics: __ABI_Windows_System.IUserStatics = try! RoGetActivationFactory("Windows.System.User")
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.system.user.createwatcher)
    public static func createWatcher() throws -> UserWatcher! {
        return try _IUserStatics.CreateWatcher()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.system.user.findallasync)
    public static func findAllAsync() throws -> AnyIAsyncOperation<AnyIVectorView<User?>?>! {
        return try _IUserStatics.FindAllAsync()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.system.user.findallasync)
    public static func findAllAsync(_ type: UserType) throws -> AnyIAsyncOperation<AnyIVectorView<User?>?>! {
        return try _IUserStatics.FindAllAsyncByType(type)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.system.user.findallasync)
    public static func findAllAsync(_ type: UserType, _ status: UserAuthenticationStatus) throws -> AnyIAsyncOperation<AnyIVectorView<User?>?>! {
        return try _IUserStatics.FindAllAsyncByTypeAndStatus(type, status)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.system.user.getfromid)
    public static func getFromId(_ nonRoamableId: String) throws -> User! {
        return try _IUserStatics.GetFromId(nonRoamableId)
    }

    private static let _IUserStatics2: __ABI_Windows_System.IUserStatics2 = try! RoGetActivationFactory("Windows.System.User")
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.system.user.getdefault)
    public static func getDefault() throws -> User! {
        return try _IUserStatics2.GetDefault()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.system.user.getpropertyasync)
    public func getPropertyAsync(_ value: String) throws -> AnyIAsyncOperation<Any?>! {
        try _default.GetPropertyAsync(value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.system.user.getpropertiesasync)
    public func getPropertiesAsync(_ values: AnyIVectorView<String>!) throws -> AnyIAsyncOperation<test_component.AnyIPropertySet?>! {
        try _default.GetPropertiesAsync(values)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.system.user.getpictureasync)
    public func getPictureAsync(_ desiredSize: UserPictureSize) throws -> AnyIAsyncOperation<test_component.AnyIRandomAccessStreamReference?>! {
        try _default.GetPictureAsync(desiredSize)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.system.user.authenticationstatus)
    public var authenticationStatus : UserAuthenticationStatus {
        get { try! _default.get_AuthenticationStatus() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.system.user.nonroamableid)
    public var nonRoamableId : String {
        get { try! _default.get_NonRoamableId() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.system.user.type)
    public var type : UserType {
        get { try! _default.get_Type() }
    }

    private lazy var _IUser2: __ABI_Windows_System.IUser2! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.system.user.checkuserageconsentgroupasync)
    public func checkUserAgeConsentGroupAsync(_ consentGroup: UserAgeConsentGroup) throws -> AnyIAsyncOperation<UserAgeConsentResult>! {
        try _IUser2.CheckUserAgeConsentGroupAsync(consentGroup)
    }

    deinit {
        _default = nil
        _IUser2 = nil
    }
}

// MARK: - User Internals

@_spi(WinRTInternal)
extension __IMPL_Windows_System {
    public enum UserBridge: AbiBridge {
        public typealias SwiftProjection = User
        public typealias CABI = __x_ABI_CWindows_CSystem_CIUser
        public static func from(abi: ComPtr<__x_ABI_CWindows_CSystem_CIUser>?) -> User? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: test_component.IInspectable(abi))
        }
    }

}
@_spi(WinRTInternal)
public class UserMaker: MakeFromAbi {
    public typealias SwiftType = User
    public static func from(abi: test_component.IInspectable) -> SwiftType {
        return User(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
extension __ABI_Windows_System {
    private static let IID___x_ABI_CWindows_CSystem_CIUser: test_component.IID = .init(
        Data1: 0xDF9A26C6, Data2: 0xE746, Data3: 0x4BCD, Data4: ( 0xB5,0xD4,0x12,0x01,0x03,0xC4,0x20,0x9B ) // DF9A26C6-E746-4BCD-B5D4-120103C4209B
    ) 

    public class IUser: test_component.IInspectable {
        override public class var IID: test_component.IID { IID___x_ABI_CWindows_CSystem_CIUser }

        public func get_NonRoamableId() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CWindows_CSystem_CIUser.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_NonRoamableId(pThis, &value))
            }
            return .init(from: value)
        }

        public func get_AuthenticationStatus() throws -> test_component.UserAuthenticationStatus {
            var value: __x_ABI_CWindows_CSystem_CUserAuthenticationStatus = .init(0)
            _ = try perform(as: __x_ABI_CWindows_CSystem_CIUser.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_AuthenticationStatus(pThis, &value))
            }
            return value
        }

        public func get_Type() throws -> test_component.UserType {
            var value: __x_ABI_CWindows_CSystem_CUserType = .init(0)
            _ = try perform(as: __x_ABI_CWindows_CSystem_CIUser.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Type(pThis, &value))
            }
            return value
        }

        public func GetPropertyAsync(_ value: String) throws -> test_component.AnyIAsyncOperation<Any?>? {
            let (operation) = try ComPtrs.initialize { operationAbi in
                let _value = try! HString(value)
                _ = try perform(as: __x_ABI_CWindows_CSystem_CIUser.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetPropertyAsync(pThis, _value.get(), &operationAbi))
                }
            }
            return test_component.__x_ABI_C__FIAsyncOperation_1_IInspectableWrapper.unwrapFrom(abi: operation)
        }

        public func GetPropertiesAsync(_ values: test_component.AnyIVectorView<String>?) throws -> test_component.AnyIAsyncOperation<test_component.AnyIPropertySet?>? {
            let (operation) = try ComPtrs.initialize { operationAbi in
                let valuesWrapper = test_component.__x_ABI_C__FIVectorView_1_HSTRINGWrapper(values)
                let _values = try! valuesWrapper?.toABI { $0 }
                _ = try perform(as: __x_ABI_CWindows_CSystem_CIUser.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetPropertiesAsync(pThis, _values, &operationAbi))
                }
            }
            return test_component.__x_ABI_C__FIAsyncOperation_1___x_ABI_C__F__CIPropertySetWrapper.unwrapFrom(abi: operation)
        }

        public func GetPictureAsync(_ desiredSize: test_component.UserPictureSize) throws -> test_component.AnyIAsyncOperation<test_component.AnyIRandomAccessStreamReference?>? {
            let (operation) = try ComPtrs.initialize { operationAbi in
                _ = try perform(as: __x_ABI_CWindows_CSystem_CIUser.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetPictureAsync(pThis, desiredSize, &operationAbi))
                }
            }
            return test_component.__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStreams__CIRandomAccessStreamReferenceWrapper.unwrapFrom(abi: operation)
        }

    }

    private static let IID___x_ABI_CWindows_CSystem_CIUser2: test_component.IID = .init(
        Data1: 0x98BA5628, Data2: 0xA6E3, Data3: 0x518E, Data4: ( 0x89,0xD9,0xD3,0xB2,0xB1,0x99,0x1A,0x10 ) // 98BA5628-A6E3-518E-89D9-D3B2B1991A10
    ) 

    public class IUser2: test_component.IInspectable {
        override public class var IID: test_component.IID { IID___x_ABI_CWindows_CSystem_CIUser2 }

        public func CheckUserAgeConsentGroupAsync(_ consentGroup: test_component.UserAgeConsentGroup) throws -> test_component.AnyIAsyncOperation<test_component.UserAgeConsentResult>? {
            let (operation) = try ComPtrs.initialize { operationAbi in
                _ = try perform(as: __x_ABI_CWindows_CSystem_CIUser2.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CheckUserAgeConsentGroupAsync(pThis, consentGroup, &operationAbi))
                }
            }
            return test_component.__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CUserAgeConsentResultWrapper.unwrapFrom(abi: operation)
        }

    }

    private static let IID___x_ABI_CWindows_CSystem_CIUserStatics: test_component.IID = .init(
        Data1: 0x155EB23B, Data2: 0x242A, Data3: 0x45E0, Data4: ( 0xA2,0xE9,0x31,0x71,0xFC,0x6A,0x7F,0xDD ) // 155EB23B-242A-45E0-A2E9-3171FC6A7FDD
    ) 

    public class IUserStatics: test_component.IInspectable {
        override public class var IID: test_component.IID { IID___x_ABI_CWindows_CSystem_CIUserStatics }

        public func CreateWatcher() throws -> test_component.UserWatcher? {
            let (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CWindows_CSystem_CIUserStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateWatcher(pThis, &resultAbi))
                }
            }
            return __IMPL_Windows_System.UserWatcherBridge.from(abi: result)
        }

        public func FindAllAsync() throws -> test_component.AnyIAsyncOperation<test_component.AnyIVectorView<test_component.User?>?>? {
            let (operation) = try ComPtrs.initialize { operationAbi in
                _ = try perform(as: __x_ABI_CWindows_CSystem_CIUserStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.FindAllAsync(pThis, &operationAbi))
                }
            }
            return test_component.__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CUserWrapper.unwrapFrom(abi: operation)
        }

        public func FindAllAsyncByType(_ type: test_component.UserType) throws -> test_component.AnyIAsyncOperation<test_component.AnyIVectorView<test_component.User?>?>? {
            let (operation) = try ComPtrs.initialize { operationAbi in
                _ = try perform(as: __x_ABI_CWindows_CSystem_CIUserStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.FindAllAsyncByType(pThis, type, &operationAbi))
                }
            }
            return test_component.__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CUserWrapper.unwrapFrom(abi: operation)
        }

        public func FindAllAsyncByTypeAndStatus(_ type: test_component.UserType, _ status: test_component.UserAuthenticationStatus) throws -> test_component.AnyIAsyncOperation<test_component.AnyIVectorView<test_component.User?>?>? {
            let (operation) = try ComPtrs.initialize { operationAbi in
                _ = try perform(as: __x_ABI_CWindows_CSystem_CIUserStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.FindAllAsyncByTypeAndStatus(pThis, type, status, &operationAbi))
                }
            }
            return test_component.__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CUserWrapper.unwrapFrom(abi: operation)
        }

        public func GetFromId(_ nonRoamableId: String) throws -> test_component.User? {
            let (result) = try ComPtrs.initialize { resultAbi in
                let _nonRoamableId = try! HString(nonRoamableId)
                _ = try perform(as: __x_ABI_CWindows_CSystem_CIUserStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetFromId(pThis, _nonRoamableId.get(), &resultAbi))
                }
            }
            return __IMPL_Windows_System.UserBridge.from(abi: result)
        }

    }

    private static let IID___x_ABI_CWindows_CSystem_CIUserStatics2: test_component.IID = .init(
        Data1: 0x74A37E11, Data2: 0x2EB5, Data3: 0x4487, Data4: ( 0xB0,0xD5,0x2C,0x67,0x90,0xE0,0x13,0xE9 ) // 74A37E11-2EB5-4487-B0D5-2C6790E013E9
    ) 

    public class IUserStatics2: test_component.IInspectable {
        override public class var IID: test_component.IID { IID___x_ABI_CWindows_CSystem_CIUserStatics2 }

        public func GetDefault() throws -> test_component.User? {
            let (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CWindows_CSystem_CIUserStatics2.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetDefault(pThis, &resultAbi))
                }
            }
            return __IMPL_Windows_System.UserBridge.from(abi: result)
        }

    }

}

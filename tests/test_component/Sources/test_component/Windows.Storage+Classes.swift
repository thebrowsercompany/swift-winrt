// WARNING: Please don't edit this file. It was generated by Swift/WinRT v0.0.1
// swiftlint:disable all
import Foundation
import Ctest_component

// MARK: - PathIO

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.pathio)
public final class PathIO {
    private static let _IPathIOStatics: __ABI_Windows_Storage.IPathIOStatics = try! RoGetActivationFactory("Windows.Storage.PathIO")
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.pathio.readtextasync)
    public static func readTextAsync(_ absolutePath: String) throws -> AnyIAsyncOperation<String>! {
        return try _IPathIOStatics.ReadTextAsync(absolutePath)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.pathio.readtextasync)
    public static func readTextAsync(_ absolutePath: String, _ encoding: test_component.UnicodeEncoding) throws -> AnyIAsyncOperation<String>! {
        return try _IPathIOStatics.ReadTextWithEncodingAsync(absolutePath, encoding)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.pathio.writetextasync)
    public static func writeTextAsync(_ absolutePath: String, _ contents: String) throws -> test_component.AnyIAsyncAction! {
        return try _IPathIOStatics.WriteTextAsync(absolutePath, contents)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.pathio.writetextasync)
    public static func writeTextAsync(_ absolutePath: String, _ contents: String, _ encoding: test_component.UnicodeEncoding) throws -> test_component.AnyIAsyncAction! {
        return try _IPathIOStatics.WriteTextWithEncodingAsync(absolutePath, contents, encoding)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.pathio.appendtextasync)
    public static func appendTextAsync(_ absolutePath: String, _ contents: String) throws -> test_component.AnyIAsyncAction! {
        return try _IPathIOStatics.AppendTextAsync(absolutePath, contents)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.pathio.appendtextasync)
    public static func appendTextAsync(_ absolutePath: String, _ contents: String, _ encoding: test_component.UnicodeEncoding) throws -> test_component.AnyIAsyncAction! {
        return try _IPathIOStatics.AppendTextWithEncodingAsync(absolutePath, contents, encoding)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.pathio.readlinesasync)
    public static func readLinesAsync(_ absolutePath: String) throws -> AnyIAsyncOperation<AnyIVector<String>?>! {
        return try _IPathIOStatics.ReadLinesAsync(absolutePath)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.pathio.readlinesasync)
    public static func readLinesAsync(_ absolutePath: String, _ encoding: test_component.UnicodeEncoding) throws -> AnyIAsyncOperation<AnyIVector<String>?>! {
        return try _IPathIOStatics.ReadLinesWithEncodingAsync(absolutePath, encoding)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.pathio.writelinesasync)
    public static func writeLinesAsync(_ absolutePath: String, _ lines: AnyIIterable<String>!) throws -> test_component.AnyIAsyncAction! {
        return try _IPathIOStatics.WriteLinesAsync(absolutePath, lines)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.pathio.writelinesasync)
    public static func writeLinesAsync(_ absolutePath: String, _ lines: AnyIIterable<String>!, _ encoding: test_component.UnicodeEncoding) throws -> test_component.AnyIAsyncAction! {
        return try _IPathIOStatics.WriteLinesWithEncodingAsync(absolutePath, lines, encoding)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.pathio.appendlinesasync)
    public static func appendLinesAsync(_ absolutePath: String, _ lines: AnyIIterable<String>!) throws -> test_component.AnyIAsyncAction! {
        return try _IPathIOStatics.AppendLinesAsync(absolutePath, lines)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.pathio.appendlinesasync)
    public static func appendLinesAsync(_ absolutePath: String, _ lines: AnyIIterable<String>!, _ encoding: test_component.UnicodeEncoding) throws -> test_component.AnyIAsyncAction! {
        return try _IPathIOStatics.AppendLinesWithEncodingAsync(absolutePath, lines, encoding)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.pathio.readbufferasync)
    public static func readBufferAsync(_ absolutePath: String) throws -> AnyIAsyncOperation<test_component.AnyIBuffer?>! {
        return try _IPathIOStatics.ReadBufferAsync(absolutePath)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.pathio.writebufferasync)
    public static func writeBufferAsync(_ absolutePath: String, _ buffer: test_component.AnyIBuffer!) throws -> test_component.AnyIAsyncAction! {
        return try _IPathIOStatics.WriteBufferAsync(absolutePath, buffer)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.pathio.writebytesasync)
    public static func writeBytesAsync(_ absolutePath: String, _ buffer: [UInt8]) throws -> test_component.AnyIAsyncAction! {
        return try _IPathIOStatics.WriteBytesAsync(absolutePath, buffer)
    }

}

// MARK: - PathIO Internals

@_spi(WinRTInternal)
extension __ABI_Windows_Storage {
    private static let IID___x_ABI_CWindows_CStorage_CIPathIOStatics: test_component.IID = .init(
        Data1: 0x0F2F3758, Data2: 0x8EC7, Data3: 0x4381, Data4: ( 0x92,0x2B,0x8F,0x6C,0x07,0xD2,0x88,0xF3 ) // 0F2F3758-8EC7-4381-922B-8F6C07D288F3
    ) 

    public class IPathIOStatics: test_component.IInspectable {
        override public class var IID: test_component.IID { IID___x_ABI_CWindows_CStorage_CIPathIOStatics }

        public func ReadTextAsync(_ absolutePath: String) throws -> test_component.AnyIAsyncOperation<String>? {
            let (textOperation) = try ComPtrs.initialize { textOperationAbi in
                let _absolutePath = try! HString(absolutePath)
                _ = try perform(as: __x_ABI_CWindows_CStorage_CIPathIOStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.ReadTextAsync(pThis, _absolutePath.get(), &textOperationAbi))
                }
            }
            return test_component.__x_ABI_C__FIAsyncOperation_1_HSTRINGWrapper.unwrapFrom(abi: textOperation)
        }

        public func ReadTextWithEncodingAsync(_ absolutePath: String, _ encoding: test_component.UnicodeEncoding) throws -> test_component.AnyIAsyncOperation<String>? {
            let (textOperation) = try ComPtrs.initialize { textOperationAbi in
                let _absolutePath = try! HString(absolutePath)
                _ = try perform(as: __x_ABI_CWindows_CStorage_CIPathIOStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.ReadTextWithEncodingAsync(pThis, _absolutePath.get(), encoding, &textOperationAbi))
                }
            }
            return test_component.__x_ABI_C__FIAsyncOperation_1_HSTRINGWrapper.unwrapFrom(abi: textOperation)
        }

        public func WriteTextAsync(_ absolutePath: String, _ contents: String) throws -> test_component.AnyIAsyncAction? {
            let (textOperation) = try ComPtrs.initialize { textOperationAbi in
                let _absolutePath = try! HString(absolutePath)
                let _contents = try! HString(contents)
                _ = try perform(as: __x_ABI_CWindows_CStorage_CIPathIOStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.WriteTextAsync(pThis, _absolutePath.get(), _contents.get(), &textOperationAbi))
                }
            }
            return __ABI_Windows_Foundation.IAsyncActionWrapper.unwrapFrom(abi: textOperation)
        }

        public func WriteTextWithEncodingAsync(_ absolutePath: String, _ contents: String, _ encoding: test_component.UnicodeEncoding) throws -> test_component.AnyIAsyncAction? {
            let (textOperation) = try ComPtrs.initialize { textOperationAbi in
                let _absolutePath = try! HString(absolutePath)
                let _contents = try! HString(contents)
                _ = try perform(as: __x_ABI_CWindows_CStorage_CIPathIOStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.WriteTextWithEncodingAsync(pThis, _absolutePath.get(), _contents.get(), encoding, &textOperationAbi))
                }
            }
            return __ABI_Windows_Foundation.IAsyncActionWrapper.unwrapFrom(abi: textOperation)
        }

        public func AppendTextAsync(_ absolutePath: String, _ contents: String) throws -> test_component.AnyIAsyncAction? {
            let (textOperation) = try ComPtrs.initialize { textOperationAbi in
                let _absolutePath = try! HString(absolutePath)
                let _contents = try! HString(contents)
                _ = try perform(as: __x_ABI_CWindows_CStorage_CIPathIOStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.AppendTextAsync(pThis, _absolutePath.get(), _contents.get(), &textOperationAbi))
                }
            }
            return __ABI_Windows_Foundation.IAsyncActionWrapper.unwrapFrom(abi: textOperation)
        }

        public func AppendTextWithEncodingAsync(_ absolutePath: String, _ contents: String, _ encoding: test_component.UnicodeEncoding) throws -> test_component.AnyIAsyncAction? {
            let (textOperation) = try ComPtrs.initialize { textOperationAbi in
                let _absolutePath = try! HString(absolutePath)
                let _contents = try! HString(contents)
                _ = try perform(as: __x_ABI_CWindows_CStorage_CIPathIOStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.AppendTextWithEncodingAsync(pThis, _absolutePath.get(), _contents.get(), encoding, &textOperationAbi))
                }
            }
            return __ABI_Windows_Foundation.IAsyncActionWrapper.unwrapFrom(abi: textOperation)
        }

        public func ReadLinesAsync(_ absolutePath: String) throws -> test_component.AnyIAsyncOperation<test_component.AnyIVector<String>?>? {
            let (linesOperation) = try ComPtrs.initialize { linesOperationAbi in
                let _absolutePath = try! HString(absolutePath)
                _ = try perform(as: __x_ABI_CWindows_CStorage_CIPathIOStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.ReadLinesAsync(pThis, _absolutePath.get(), &linesOperationAbi))
                }
            }
            return test_component.__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVector_1_HSTRINGWrapper.unwrapFrom(abi: linesOperation)
        }

        public func ReadLinesWithEncodingAsync(_ absolutePath: String, _ encoding: test_component.UnicodeEncoding) throws -> test_component.AnyIAsyncOperation<test_component.AnyIVector<String>?>? {
            let (linesOperation) = try ComPtrs.initialize { linesOperationAbi in
                let _absolutePath = try! HString(absolutePath)
                _ = try perform(as: __x_ABI_CWindows_CStorage_CIPathIOStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.ReadLinesWithEncodingAsync(pThis, _absolutePath.get(), encoding, &linesOperationAbi))
                }
            }
            return test_component.__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVector_1_HSTRINGWrapper.unwrapFrom(abi: linesOperation)
        }

        public func WriteLinesAsync(_ absolutePath: String, _ lines: test_component.AnyIIterable<String>?) throws -> test_component.AnyIAsyncAction? {
            let (operation) = try ComPtrs.initialize { operationAbi in
                let _absolutePath = try! HString(absolutePath)
                let linesWrapper = test_component.__x_ABI_C__FIIterable_1_HSTRINGWrapper(lines)
                let _lines = try! linesWrapper?.toABI { $0 }
                _ = try perform(as: __x_ABI_CWindows_CStorage_CIPathIOStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.WriteLinesAsync(pThis, _absolutePath.get(), _lines, &operationAbi))
                }
            }
            return __ABI_Windows_Foundation.IAsyncActionWrapper.unwrapFrom(abi: operation)
        }

        public func WriteLinesWithEncodingAsync(_ absolutePath: String, _ lines: test_component.AnyIIterable<String>?, _ encoding: test_component.UnicodeEncoding) throws -> test_component.AnyIAsyncAction? {
            let (operation) = try ComPtrs.initialize { operationAbi in
                let _absolutePath = try! HString(absolutePath)
                let linesWrapper = test_component.__x_ABI_C__FIIterable_1_HSTRINGWrapper(lines)
                let _lines = try! linesWrapper?.toABI { $0 }
                _ = try perform(as: __x_ABI_CWindows_CStorage_CIPathIOStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.WriteLinesWithEncodingAsync(pThis, _absolutePath.get(), _lines, encoding, &operationAbi))
                }
            }
            return __ABI_Windows_Foundation.IAsyncActionWrapper.unwrapFrom(abi: operation)
        }

        public func AppendLinesAsync(_ absolutePath: String, _ lines: test_component.AnyIIterable<String>?) throws -> test_component.AnyIAsyncAction? {
            let (operation) = try ComPtrs.initialize { operationAbi in
                let _absolutePath = try! HString(absolutePath)
                let linesWrapper = test_component.__x_ABI_C__FIIterable_1_HSTRINGWrapper(lines)
                let _lines = try! linesWrapper?.toABI { $0 }
                _ = try perform(as: __x_ABI_CWindows_CStorage_CIPathIOStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.AppendLinesAsync(pThis, _absolutePath.get(), _lines, &operationAbi))
                }
            }
            return __ABI_Windows_Foundation.IAsyncActionWrapper.unwrapFrom(abi: operation)
        }

        public func AppendLinesWithEncodingAsync(_ absolutePath: String, _ lines: test_component.AnyIIterable<String>?, _ encoding: test_component.UnicodeEncoding) throws -> test_component.AnyIAsyncAction? {
            let (operation) = try ComPtrs.initialize { operationAbi in
                let _absolutePath = try! HString(absolutePath)
                let linesWrapper = test_component.__x_ABI_C__FIIterable_1_HSTRINGWrapper(lines)
                let _lines = try! linesWrapper?.toABI { $0 }
                _ = try perform(as: __x_ABI_CWindows_CStorage_CIPathIOStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.AppendLinesWithEncodingAsync(pThis, _absolutePath.get(), _lines, encoding, &operationAbi))
                }
            }
            return __ABI_Windows_Foundation.IAsyncActionWrapper.unwrapFrom(abi: operation)
        }

        public func ReadBufferAsync(_ absolutePath: String) throws -> test_component.AnyIAsyncOperation<test_component.AnyIBuffer?>? {
            let (operation) = try ComPtrs.initialize { operationAbi in
                let _absolutePath = try! HString(absolutePath)
                _ = try perform(as: __x_ABI_CWindows_CStorage_CIPathIOStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.ReadBufferAsync(pThis, _absolutePath.get(), &operationAbi))
                }
            }
            return test_component.__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStreams__CIBufferWrapper.unwrapFrom(abi: operation)
        }

        public func WriteBufferAsync(_ absolutePath: String, _ buffer: test_component.AnyIBuffer?) throws -> test_component.AnyIAsyncAction? {
            let (operation) = try ComPtrs.initialize { operationAbi in
                let _absolutePath = try! HString(absolutePath)
                let bufferWrapper = __ABI_Windows_Storage_Streams.IBufferWrapper(buffer)
                let _buffer = try! bufferWrapper?.toABI { $0 }
                _ = try perform(as: __x_ABI_CWindows_CStorage_CIPathIOStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.WriteBufferAsync(pThis, _absolutePath.get(), _buffer, &operationAbi))
                }
            }
            return __ABI_Windows_Foundation.IAsyncActionWrapper.unwrapFrom(abi: operation)
        }

        public func WriteBytesAsync(_ absolutePath: String, _ buffer: [UInt8]) throws -> test_component.AnyIAsyncAction? {
            let (operation) = try ComPtrs.initialize { operationAbi in
                let _absolutePath = try! HString(absolutePath)
                try buffer.toABI { _buffer in
                    _ = try perform(as: __x_ABI_CWindows_CStorage_CIPathIOStatics.self) { pThis in
                        try CHECKED(pThis.pointee.lpVtbl.pointee.WriteBytesAsync(pThis, _absolutePath.get(), _buffer.count, _buffer.start, &operationAbi))
                    }
                }
            }
            return __ABI_Windows_Foundation.IAsyncActionWrapper.unwrapFrom(abi: operation)
        }

    }

}
// MARK: - StorageFile

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.storagefile)
public final class StorageFile : WinRTClass, IStorageItem, test_component.IRandomAccessStreamReference, test_component.IInputStreamReference, IStorageFile, IStorageItemProperties, IStorageItemProperties2, IStorageItem2, IStorageItemPropertiesWithProvider, IStorageFilePropertiesWithAvailability, IStorageFile2 {
    private typealias SwiftABI = __ABI_Windows_Storage.IStorageFile
    private typealias CABI = __x_ABI_CWindows_CStorage_CIStorageFile
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: test_component.IInspectable) {
        super.init(fromAbi)
    }

    override public func queryInterface(_ iid: test_component.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static let _IStorageFileStatics: __ABI_Windows_Storage.IStorageFileStatics = try! RoGetActivationFactory("Windows.Storage.StorageFile")
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.storagefile.getfilefrompathasync)
    public static func getFileFromPathAsync(_ path: String) throws -> AnyIAsyncOperation<StorageFile?>! {
        return try _IStorageFileStatics.GetFileFromPathAsync(path)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.storagefile.getfilefromapplicationuriasync)
    public static func getFileFromApplicationUriAsync(_ uri: test_component.Uri!) throws -> AnyIAsyncOperation<StorageFile?>! {
        return try _IStorageFileStatics.GetFileFromApplicationUriAsync(uri)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.storagefile.createstreamedfileasync)
    public static func createStreamedFileAsync(_ displayNameWithExtension: String, _ dataRequested: StreamedFileDataRequestedHandler!, _ thumbnail: test_component.AnyIRandomAccessStreamReference!) throws -> AnyIAsyncOperation<StorageFile?>! {
        return try _IStorageFileStatics.CreateStreamedFileAsync(displayNameWithExtension, dataRequested, thumbnail)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.storagefile.replacewithstreamedfileasync)
    public static func replaceWithStreamedFileAsync(_ fileToReplace: AnyIStorageFile!, _ dataRequested: StreamedFileDataRequestedHandler!, _ thumbnail: test_component.AnyIRandomAccessStreamReference!) throws -> AnyIAsyncOperation<StorageFile?>! {
        return try _IStorageFileStatics.ReplaceWithStreamedFileAsync(fileToReplace, dataRequested, thumbnail)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.storagefile.createstreamedfilefromuriasync)
    public static func createStreamedFileFromUriAsync(_ displayNameWithExtension: String, _ uri: test_component.Uri!, _ thumbnail: test_component.AnyIRandomAccessStreamReference!) throws -> AnyIAsyncOperation<StorageFile?>! {
        return try _IStorageFileStatics.CreateStreamedFileFromUriAsync(displayNameWithExtension, uri, thumbnail)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.storagefile.replacewithstreamedfilefromuriasync)
    public static func replaceWithStreamedFileFromUriAsync(_ fileToReplace: AnyIStorageFile!, _ uri: test_component.Uri!, _ thumbnail: test_component.AnyIRandomAccessStreamReference!) throws -> AnyIAsyncOperation<StorageFile?>! {
        return try _IStorageFileStatics.ReplaceWithStreamedFileFromUriAsync(fileToReplace, uri, thumbnail)
    }

    private static let _IStorageFileStatics2: __ABI_Windows_Storage.IStorageFileStatics2 = try! RoGetActivationFactory("Windows.Storage.StorageFile")
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.storagefile.getfilefrompathforuserasync)
    public static func getFileFromPathForUserAsync(_ user: test_component.User!, _ path: String) throws -> AnyIAsyncOperation<StorageFile?>! {
        return try _IStorageFileStatics2.GetFileFromPathForUserAsync(user, path)
    }

    private lazy var _IStorageItem: __ABI_Windows_Storage.IStorageItem! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.storagefile.renameasync)
    public func renameAsync(_ desiredName: String) throws -> test_component.AnyIAsyncAction! {
        try _IStorageItem.RenameAsyncOverloadDefaultOptions(desiredName)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.storagefile.renameasync)
    public func renameAsync(_ desiredName: String, _ option: NameCollisionOption) throws -> test_component.AnyIAsyncAction! {
        try _IStorageItem.RenameAsync(desiredName, option)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.storagefile.deleteasync)
    public func deleteAsync() throws -> test_component.AnyIAsyncAction! {
        try _IStorageItem.DeleteAsyncOverloadDefaultOptions()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.storagefile.deleteasync)
    public func deleteAsync(_ option: StorageDeleteOption) throws -> test_component.AnyIAsyncAction! {
        try _IStorageItem.DeleteAsync(option)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.storagefile.getbasicpropertiesasync)
    public func getBasicPropertiesAsync() throws -> AnyIAsyncOperation<test_component.BasicProperties?>! {
        try _IStorageItem.GetBasicPropertiesAsync()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.storagefile.isoftype)
    public func isOfType(_ type: StorageItemTypes) throws -> Bool {
        try _IStorageItem.IsOfType(type)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.storagefile.attributes)
    public var attributes : FileAttributes {
        get { try! _IStorageItem.get_Attributes() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.storagefile.datecreated)
    public var dateCreated : test_component.DateTime {
        get { try! _IStorageItem.get_DateCreated() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.storagefile.name)
    public var name : String {
        get { try! _IStorageItem.get_Name() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.storagefile.path)
    public var path : String {
        get { try! _IStorageItem.get_Path() }
    }

    private lazy var _IRandomAccessStreamReference: __ABI_Windows_Storage_Streams.IRandomAccessStreamReference! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.storagefile.openreadasync)
    public func openReadAsync() throws -> AnyIAsyncOperation<test_component.AnyIRandomAccessStreamWithContentType?>! {
        try _IRandomAccessStreamReference.OpenReadAsync()
    }

    private lazy var _IInputStreamReference: __ABI_Windows_Storage_Streams.IInputStreamReference! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.storagefile.opensequentialreadasync)
    public func openSequentialReadAsync() throws -> AnyIAsyncOperation<test_component.AnyIInputStream?>! {
        try _IInputStreamReference.OpenSequentialReadAsync()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.storagefile.openasync)
    public func openAsync(_ accessMode: FileAccessMode) throws -> AnyIAsyncOperation<test_component.AnyIRandomAccessStream?>! {
        try _default.OpenAsync(accessMode)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.storagefile.opentransactedwriteasync)
    public func openTransactedWriteAsync() throws -> AnyIAsyncOperation<StorageStreamTransaction?>! {
        try _default.OpenTransactedWriteAsync()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.storagefile.copyasync)
    public func copyAsync(_ destinationFolder: AnyIStorageFolder!) throws -> AnyIAsyncOperation<StorageFile?>! {
        try _default.CopyOverloadDefaultNameAndOptions(destinationFolder)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.storagefile.copyasync)
    public func copyAsync(_ destinationFolder: AnyIStorageFolder!, _ desiredNewName: String) throws -> AnyIAsyncOperation<StorageFile?>! {
        try _default.CopyOverloadDefaultOptions(destinationFolder, desiredNewName)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.storagefile.copyasync)
    public func copyAsync(_ destinationFolder: AnyIStorageFolder!, _ desiredNewName: String, _ option: NameCollisionOption) throws -> AnyIAsyncOperation<StorageFile?>! {
        try _default.CopyOverload(destinationFolder, desiredNewName, option)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.storagefile.copyandreplaceasync)
    public func copyAndReplaceAsync(_ fileToReplace: AnyIStorageFile!) throws -> test_component.AnyIAsyncAction! {
        try _default.CopyAndReplaceAsync(fileToReplace)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.storagefile.moveasync)
    public func moveAsync(_ destinationFolder: AnyIStorageFolder!) throws -> test_component.AnyIAsyncAction! {
        try _default.MoveOverloadDefaultNameAndOptions(destinationFolder)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.storagefile.moveasync)
    public func moveAsync(_ destinationFolder: AnyIStorageFolder!, _ desiredNewName: String) throws -> test_component.AnyIAsyncAction! {
        try _default.MoveOverloadDefaultOptions(destinationFolder, desiredNewName)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.storagefile.moveasync)
    public func moveAsync(_ destinationFolder: AnyIStorageFolder!, _ desiredNewName: String, _ option: NameCollisionOption) throws -> test_component.AnyIAsyncAction! {
        try _default.MoveOverload(destinationFolder, desiredNewName, option)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.storagefile.moveandreplaceasync)
    public func moveAndReplaceAsync(_ fileToReplace: AnyIStorageFile!) throws -> test_component.AnyIAsyncAction! {
        try _default.MoveAndReplaceAsync(fileToReplace)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.storagefile.contenttype)
    public var contentType : String {
        get { try! _default.get_ContentType() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.storagefile.filetype)
    public var fileType : String {
        get { try! _default.get_FileType() }
    }

    private lazy var _IStorageItemProperties: __ABI_Windows_Storage.IStorageItemProperties! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.storagefile.getthumbnailasync)
    public func getThumbnailAsync(_ mode: test_component.ThumbnailMode) throws -> AnyIAsyncOperation<test_component.StorageItemThumbnail?>! {
        try _IStorageItemProperties.GetThumbnailAsyncOverloadDefaultSizeDefaultOptions(mode)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.storagefile.getthumbnailasync)
    public func getThumbnailAsync(_ mode: test_component.ThumbnailMode, _ requestedSize: UInt32) throws -> AnyIAsyncOperation<test_component.StorageItemThumbnail?>! {
        try _IStorageItemProperties.GetThumbnailAsyncOverloadDefaultOptions(mode, requestedSize)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.storagefile.getthumbnailasync)
    public func getThumbnailAsync(_ mode: test_component.ThumbnailMode, _ requestedSize: UInt32, _ options: test_component.ThumbnailOptions) throws -> AnyIAsyncOperation<test_component.StorageItemThumbnail?>! {
        try _IStorageItemProperties.GetThumbnailAsync(mode, requestedSize, options)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.storagefile.displayname)
    public var displayName : String {
        get { try! _IStorageItemProperties.get_DisplayName() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.storagefile.displaytype)
    public var displayType : String {
        get { try! _IStorageItemProperties.get_DisplayType() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.storagefile.folderrelativeid)
    public var folderRelativeId : String {
        get { try! _IStorageItemProperties.get_FolderRelativeId() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.storagefile.properties)
    public var properties : test_component.StorageItemContentProperties! {
        get { try! _IStorageItemProperties.get_Properties() }
    }

    private lazy var _IStorageItemProperties2: __ABI_Windows_Storage.IStorageItemProperties2! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.storagefile.getscaledimageasthumbnailasync)
    public func getScaledImageAsThumbnailAsync(_ mode: test_component.ThumbnailMode) throws -> AnyIAsyncOperation<test_component.StorageItemThumbnail?>! {
        try _IStorageItemProperties2.GetScaledImageAsThumbnailAsyncOverloadDefaultSizeDefaultOptions(mode)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.storagefile.getscaledimageasthumbnailasync)
    public func getScaledImageAsThumbnailAsync(_ mode: test_component.ThumbnailMode, _ requestedSize: UInt32) throws -> AnyIAsyncOperation<test_component.StorageItemThumbnail?>! {
        try _IStorageItemProperties2.GetScaledImageAsThumbnailAsyncOverloadDefaultOptions(mode, requestedSize)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.storagefile.getscaledimageasthumbnailasync)
    public func getScaledImageAsThumbnailAsync(_ mode: test_component.ThumbnailMode, _ requestedSize: UInt32, _ options: test_component.ThumbnailOptions) throws -> AnyIAsyncOperation<test_component.StorageItemThumbnail?>! {
        try _IStorageItemProperties2.GetScaledImageAsThumbnailAsync(mode, requestedSize, options)
    }

    private lazy var _IStorageItem2: __ABI_Windows_Storage.IStorageItem2! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.storagefile.getparentasync)
    public func getParentAsync() throws -> AnyIAsyncOperation<StorageFolder?>! {
        try _IStorageItem2.GetParentAsync()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.storagefile.isequal)
    public func isEqual(_ item: AnyIStorageItem!) throws -> Bool {
        try _IStorageItem2.IsEqual(item)
    }

    private lazy var _IStorageItemPropertiesWithProvider: __ABI_Windows_Storage.IStorageItemPropertiesWithProvider! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.storagefile.provider)
    public var provider : StorageProvider! {
        get { try! _IStorageItemPropertiesWithProvider.get_Provider() }
    }

    private lazy var _IStorageFilePropertiesWithAvailability: __ABI_Windows_Storage.IStorageFilePropertiesWithAvailability! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.storagefile.isavailable)
    public var isAvailable : Bool {
        get { try! _IStorageFilePropertiesWithAvailability.get_IsAvailable() }
    }

    private lazy var _IStorageFile2: __ABI_Windows_Storage.IStorageFile2! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.storagefile.openasync)
    public func openAsync(_ accessMode: FileAccessMode, _ options: StorageOpenOptions) throws -> AnyIAsyncOperation<test_component.AnyIRandomAccessStream?>! {
        try _IStorageFile2.OpenWithOptionsAsync(accessMode, options)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.storagefile.opentransactedwriteasync)
    public func openTransactedWriteAsync(_ options: StorageOpenOptions) throws -> AnyIAsyncOperation<StorageStreamTransaction?>! {
        try _IStorageFile2.OpenTransactedWriteWithOptionsAsync(options)
    }

    deinit {
        _IStorageItem = nil
        _IRandomAccessStreamReference = nil
        _IInputStreamReference = nil
        _default = nil
        _IStorageItemProperties = nil
        _IStorageItemProperties2 = nil
        _IStorageItem2 = nil
        _IStorageItemPropertiesWithProvider = nil
        _IStorageFilePropertiesWithAvailability = nil
        _IStorageFile2 = nil
    }
}

// MARK: - StorageFile Internals

@_spi(WinRTInternal)
extension __IMPL_Windows_Storage {
    public enum StorageFileBridge: AbiBridge {
        public typealias SwiftProjection = StorageFile
        public typealias CABI = __x_ABI_CWindows_CStorage_CIStorageFile
        public static func from(abi: ComPtr<__x_ABI_CWindows_CStorage_CIStorageFile>?) -> StorageFile? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: test_component.IInspectable(abi))
        }
    }

}
@_spi(WinRTInternal)
public class StorageFileMaker: MakeFromAbi {
    public typealias SwiftType = StorageFile
    public static func from(abi: test_component.IInspectable) -> SwiftType {
        return StorageFile(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
extension __ABI_Windows_Storage {
    private static let IID___x_ABI_CWindows_CStorage_CIStorageFileStatics: test_component.IID = .init(
        Data1: 0x5984C710, Data2: 0xDAF2, Data3: 0x43C8, Data4: ( 0x8B,0xB4,0xA4,0xD3,0xEA,0xCF,0xD0,0x3F ) // 5984C710-DAF2-43C8-8BB4-A4D3EACFD03F
    ) 

    public class IStorageFileStatics: test_component.IInspectable {
        override public class var IID: test_component.IID { IID___x_ABI_CWindows_CStorage_CIStorageFileStatics }

        public func GetFileFromPathAsync(_ path: String) throws -> test_component.AnyIAsyncOperation<test_component.StorageFile?>? {
            let (operation) = try ComPtrs.initialize { operationAbi in
                let _path = try! HString(path)
                _ = try perform(as: __x_ABI_CWindows_CStorage_CIStorageFileStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetFileFromPathAsync(pThis, _path.get(), &operationAbi))
                }
            }
            return test_component.__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStorageFileWrapper.unwrapFrom(abi: operation)
        }

        public func GetFileFromApplicationUriAsync(_ uri: test_component.Uri?) throws -> test_component.AnyIAsyncOperation<test_component.StorageFile?>? {
            let (operation) = try ComPtrs.initialize { operationAbi in
                _ = try perform(as: __x_ABI_CWindows_CStorage_CIStorageFileStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetFileFromApplicationUriAsync(pThis, RawPointer(uri), &operationAbi))
                }
            }
            return test_component.__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStorageFileWrapper.unwrapFrom(abi: operation)
        }

        public func CreateStreamedFileAsync(_ displayNameWithExtension: String, _ dataRequested: test_component.StreamedFileDataRequestedHandler?, _ thumbnail: test_component.AnyIRandomAccessStreamReference?) throws -> test_component.AnyIAsyncOperation<test_component.StorageFile?>? {
            let (operation) = try ComPtrs.initialize { operationAbi in
                let _displayNameWithExtension = try! HString(displayNameWithExtension)
                let dataRequestedWrapper = __ABI_Windows_Storage.StreamedFileDataRequestedHandlerWrapper(dataRequested)
                let _dataRequested = try! dataRequestedWrapper?.toABI { $0 }
                let thumbnailWrapper = __ABI_Windows_Storage_Streams.IRandomAccessStreamReferenceWrapper(thumbnail)
                let _thumbnail = try! thumbnailWrapper?.toABI { $0 }
                _ = try perform(as: __x_ABI_CWindows_CStorage_CIStorageFileStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateStreamedFileAsync(pThis, _displayNameWithExtension.get(), _dataRequested, _thumbnail, &operationAbi))
                }
            }
            return test_component.__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStorageFileWrapper.unwrapFrom(abi: operation)
        }

        public func ReplaceWithStreamedFileAsync(_ fileToReplace: test_component.AnyIStorageFile?, _ dataRequested: test_component.StreamedFileDataRequestedHandler?, _ thumbnail: test_component.AnyIRandomAccessStreamReference?) throws -> test_component.AnyIAsyncOperation<test_component.StorageFile?>? {
            let (operation) = try ComPtrs.initialize { operationAbi in
                let fileToReplaceWrapper = __ABI_Windows_Storage.IStorageFileWrapper(fileToReplace)
                let _fileToReplace = try! fileToReplaceWrapper?.toABI { $0 }
                let dataRequestedWrapper = __ABI_Windows_Storage.StreamedFileDataRequestedHandlerWrapper(dataRequested)
                let _dataRequested = try! dataRequestedWrapper?.toABI { $0 }
                let thumbnailWrapper = __ABI_Windows_Storage_Streams.IRandomAccessStreamReferenceWrapper(thumbnail)
                let _thumbnail = try! thumbnailWrapper?.toABI { $0 }
                _ = try perform(as: __x_ABI_CWindows_CStorage_CIStorageFileStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.ReplaceWithStreamedFileAsync(pThis, _fileToReplace, _dataRequested, _thumbnail, &operationAbi))
                }
            }
            return test_component.__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStorageFileWrapper.unwrapFrom(abi: operation)
        }

        public func CreateStreamedFileFromUriAsync(_ displayNameWithExtension: String, _ uri: test_component.Uri?, _ thumbnail: test_component.AnyIRandomAccessStreamReference?) throws -> test_component.AnyIAsyncOperation<test_component.StorageFile?>? {
            let (operation) = try ComPtrs.initialize { operationAbi in
                let _displayNameWithExtension = try! HString(displayNameWithExtension)
                let thumbnailWrapper = __ABI_Windows_Storage_Streams.IRandomAccessStreamReferenceWrapper(thumbnail)
                let _thumbnail = try! thumbnailWrapper?.toABI { $0 }
                _ = try perform(as: __x_ABI_CWindows_CStorage_CIStorageFileStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateStreamedFileFromUriAsync(pThis, _displayNameWithExtension.get(), RawPointer(uri), _thumbnail, &operationAbi))
                }
            }
            return test_component.__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStorageFileWrapper.unwrapFrom(abi: operation)
        }

        public func ReplaceWithStreamedFileFromUriAsync(_ fileToReplace: test_component.AnyIStorageFile?, _ uri: test_component.Uri?, _ thumbnail: test_component.AnyIRandomAccessStreamReference?) throws -> test_component.AnyIAsyncOperation<test_component.StorageFile?>? {
            let (operation) = try ComPtrs.initialize { operationAbi in
                let fileToReplaceWrapper = __ABI_Windows_Storage.IStorageFileWrapper(fileToReplace)
                let _fileToReplace = try! fileToReplaceWrapper?.toABI { $0 }
                let thumbnailWrapper = __ABI_Windows_Storage_Streams.IRandomAccessStreamReferenceWrapper(thumbnail)
                let _thumbnail = try! thumbnailWrapper?.toABI { $0 }
                _ = try perform(as: __x_ABI_CWindows_CStorage_CIStorageFileStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.ReplaceWithStreamedFileFromUriAsync(pThis, _fileToReplace, RawPointer(uri), _thumbnail, &operationAbi))
                }
            }
            return test_component.__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStorageFileWrapper.unwrapFrom(abi: operation)
        }

    }

    private static let IID___x_ABI_CWindows_CStorage_CIStorageFileStatics2: test_component.IID = .init(
        Data1: 0x5C76A781, Data2: 0x212E, Data3: 0x4AF9, Data4: ( 0x8F,0x04,0x74,0x0C,0xAE,0x10,0x89,0x74 ) // 5C76A781-212E-4AF9-8F04-740CAE108974
    ) 

    public class IStorageFileStatics2: test_component.IInspectable {
        override public class var IID: test_component.IID { IID___x_ABI_CWindows_CStorage_CIStorageFileStatics2 }

        public func GetFileFromPathForUserAsync(_ user: test_component.User?, _ path: String) throws -> test_component.AnyIAsyncOperation<test_component.StorageFile?>? {
            let (operation) = try ComPtrs.initialize { operationAbi in
                let _path = try! HString(path)
                _ = try perform(as: __x_ABI_CWindows_CStorage_CIStorageFileStatics2.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetFileFromPathForUserAsync(pThis, RawPointer(user), _path.get(), &operationAbi))
                }
            }
            return test_component.__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStorageFileWrapper.unwrapFrom(abi: operation)
        }

    }

}
// MARK: - StorageFolder

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.storagefolder)
public final class StorageFolder : WinRTClass, IStorageItem, IStorageFolder, test_component.IStorageFolderQueryOperations, IStorageItemProperties, IStorageItemProperties2, IStorageItem2, IStorageFolder2, IStorageItemPropertiesWithProvider {
    private typealias SwiftABI = __ABI_Windows_Storage.IStorageFolder
    private typealias CABI = __x_ABI_CWindows_CStorage_CIStorageFolder
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: test_component.IInspectable) {
        super.init(fromAbi)
    }

    override public func queryInterface(_ iid: test_component.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static let _IStorageFolderStatics: __ABI_Windows_Storage.IStorageFolderStatics = try! RoGetActivationFactory("Windows.Storage.StorageFolder")
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.storagefolder.getfolderfrompathasync)
    public static func getFolderFromPathAsync(_ path: String) throws -> AnyIAsyncOperation<StorageFolder?>! {
        return try _IStorageFolderStatics.GetFolderFromPathAsync(path)
    }

    private static let _IStorageFolderStatics2: __ABI_Windows_Storage.IStorageFolderStatics2 = try! RoGetActivationFactory("Windows.Storage.StorageFolder")
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.storagefolder.getfolderfrompathforuserasync)
    public static func getFolderFromPathForUserAsync(_ user: test_component.User!, _ path: String) throws -> AnyIAsyncOperation<StorageFolder?>! {
        return try _IStorageFolderStatics2.GetFolderFromPathForUserAsync(user, path)
    }

    private lazy var _IStorageItem: __ABI_Windows_Storage.IStorageItem! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.storagefolder.renameasync)
    public func renameAsync(_ desiredName: String) throws -> test_component.AnyIAsyncAction! {
        try _IStorageItem.RenameAsyncOverloadDefaultOptions(desiredName)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.storagefolder.renameasync)
    public func renameAsync(_ desiredName: String, _ option: NameCollisionOption) throws -> test_component.AnyIAsyncAction! {
        try _IStorageItem.RenameAsync(desiredName, option)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.storagefolder.deleteasync)
    public func deleteAsync() throws -> test_component.AnyIAsyncAction! {
        try _IStorageItem.DeleteAsyncOverloadDefaultOptions()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.storagefolder.deleteasync)
    public func deleteAsync(_ option: StorageDeleteOption) throws -> test_component.AnyIAsyncAction! {
        try _IStorageItem.DeleteAsync(option)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.storagefolder.getbasicpropertiesasync)
    public func getBasicPropertiesAsync() throws -> AnyIAsyncOperation<test_component.BasicProperties?>! {
        try _IStorageItem.GetBasicPropertiesAsync()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.storagefolder.isoftype)
    public func isOfType(_ type: StorageItemTypes) throws -> Bool {
        try _IStorageItem.IsOfType(type)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.storagefolder.attributes)
    public var attributes : FileAttributes {
        get { try! _IStorageItem.get_Attributes() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.storagefolder.datecreated)
    public var dateCreated : test_component.DateTime {
        get { try! _IStorageItem.get_DateCreated() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.storagefolder.name)
    public var name : String {
        get { try! _IStorageItem.get_Name() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.storagefolder.path)
    public var path : String {
        get { try! _IStorageItem.get_Path() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.storagefolder.createfileasync)
    public func createFileAsync(_ desiredName: String) throws -> AnyIAsyncOperation<StorageFile?>! {
        try _default.CreateFileAsyncOverloadDefaultOptions(desiredName)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.storagefolder.createfileasync)
    public func createFileAsync(_ desiredName: String, _ options: CreationCollisionOption) throws -> AnyIAsyncOperation<StorageFile?>! {
        try _default.CreateFileAsync(desiredName, options)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.storagefolder.createfolderasync)
    public func createFolderAsync(_ desiredName: String) throws -> AnyIAsyncOperation<StorageFolder?>! {
        try _default.CreateFolderAsyncOverloadDefaultOptions(desiredName)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.storagefolder.createfolderasync)
    public func createFolderAsync(_ desiredName: String, _ options: CreationCollisionOption) throws -> AnyIAsyncOperation<StorageFolder?>! {
        try _default.CreateFolderAsync(desiredName, options)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.storagefolder.getfileasync)
    public func getFileAsync(_ name: String) throws -> AnyIAsyncOperation<StorageFile?>! {
        try _default.GetFileAsync(name)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.storagefolder.getfolderasync)
    public func getFolderAsync(_ name: String) throws -> AnyIAsyncOperation<StorageFolder?>! {
        try _default.GetFolderAsync(name)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.storagefolder.getitemasync)
    public func getItemAsync(_ name: String) throws -> AnyIAsyncOperation<AnyIStorageItem?>! {
        try _default.GetItemAsync(name)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.storagefolder.getfilesasync)
    public func getFilesAsync() throws -> AnyIAsyncOperation<AnyIVectorView<StorageFile?>?>! {
        try _default.GetFilesAsyncOverloadDefaultOptionsStartAndCount()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.storagefolder.getfoldersasync)
    public func getFoldersAsync() throws -> AnyIAsyncOperation<AnyIVectorView<StorageFolder?>?>! {
        try _default.GetFoldersAsyncOverloadDefaultOptionsStartAndCount()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.storagefolder.getitemsasync)
    public func getItemsAsync() throws -> AnyIAsyncOperation<AnyIVectorView<AnyIStorageItem?>?>! {
        try _default.GetItemsAsyncOverloadDefaultStartAndCount()
    }

    private lazy var _IStorageFolderQueryOperations: __ABI_Windows_Storage_Search.IStorageFolderQueryOperations! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.storagefolder.getindexedstateasync)
    public func getIndexedStateAsync() throws -> AnyIAsyncOperation<test_component.IndexedState>! {
        try _IStorageFolderQueryOperations.GetIndexedStateAsync()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.storagefolder.createfilequery)
    public func createFileQuery() throws -> test_component.StorageFileQueryResult! {
        try _IStorageFolderQueryOperations.CreateFileQueryOverloadDefault()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.storagefolder.createfilequery)
    public func createFileQuery(_ query: test_component.CommonFileQuery) throws -> test_component.StorageFileQueryResult! {
        try _IStorageFolderQueryOperations.CreateFileQuery(query)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.storagefolder.createfilequerywithoptions)
    public func createFileQueryWithOptions(_ queryOptions: test_component.QueryOptions!) throws -> test_component.StorageFileQueryResult! {
        try _IStorageFolderQueryOperations.CreateFileQueryWithOptions(queryOptions)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.storagefolder.createfolderquery)
    public func createFolderQuery() throws -> test_component.StorageFolderQueryResult! {
        try _IStorageFolderQueryOperations.CreateFolderQueryOverloadDefault()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.storagefolder.createfolderquery)
    public func createFolderQuery(_ query: test_component.CommonFolderQuery) throws -> test_component.StorageFolderQueryResult! {
        try _IStorageFolderQueryOperations.CreateFolderQuery(query)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.storagefolder.createfolderquerywithoptions)
    public func createFolderQueryWithOptions(_ queryOptions: test_component.QueryOptions!) throws -> test_component.StorageFolderQueryResult! {
        try _IStorageFolderQueryOperations.CreateFolderQueryWithOptions(queryOptions)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.storagefolder.createitemquery)
    public func createItemQuery() throws -> test_component.StorageItemQueryResult! {
        try _IStorageFolderQueryOperations.CreateItemQuery()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.storagefolder.createitemquerywithoptions)
    public func createItemQueryWithOptions(_ queryOptions: test_component.QueryOptions!) throws -> test_component.StorageItemQueryResult! {
        try _IStorageFolderQueryOperations.CreateItemQueryWithOptions(queryOptions)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.storagefolder.getfilesasync)
    public func getFilesAsync(_ query: test_component.CommonFileQuery, _ startIndex: UInt32, _ maxItemsToRetrieve: UInt32) throws -> AnyIAsyncOperation<AnyIVectorView<StorageFile?>?>! {
        try _IStorageFolderQueryOperations.GetFilesAsync(query, startIndex, maxItemsToRetrieve)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.storagefolder.getfilesasync)
    public func getFilesAsync(_ query: test_component.CommonFileQuery) throws -> AnyIAsyncOperation<AnyIVectorView<StorageFile?>?>! {
        try _IStorageFolderQueryOperations.GetFilesAsyncOverloadDefaultStartAndCount(query)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.storagefolder.getfoldersasync)
    public func getFoldersAsync(_ query: test_component.CommonFolderQuery, _ startIndex: UInt32, _ maxItemsToRetrieve: UInt32) throws -> AnyIAsyncOperation<AnyIVectorView<StorageFolder?>?>! {
        try _IStorageFolderQueryOperations.GetFoldersAsync(query, startIndex, maxItemsToRetrieve)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.storagefolder.getfoldersasync)
    public func getFoldersAsync(_ query: test_component.CommonFolderQuery) throws -> AnyIAsyncOperation<AnyIVectorView<StorageFolder?>?>! {
        try _IStorageFolderQueryOperations.GetFoldersAsyncOverloadDefaultStartAndCount(query)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.storagefolder.getitemsasync)
    public func getItemsAsync(_ startIndex: UInt32, _ maxItemsToRetrieve: UInt32) throws -> AnyIAsyncOperation<AnyIVectorView<AnyIStorageItem?>?>! {
        try _IStorageFolderQueryOperations.GetItemsAsync(startIndex, maxItemsToRetrieve)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.storagefolder.arequeryoptionssupported)
    public func areQueryOptionsSupported(_ queryOptions: test_component.QueryOptions!) throws -> Bool {
        try _IStorageFolderQueryOperations.AreQueryOptionsSupported(queryOptions)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.storagefolder.iscommonfolderquerysupported)
    public func isCommonFolderQuerySupported(_ query: test_component.CommonFolderQuery) throws -> Bool {
        try _IStorageFolderQueryOperations.IsCommonFolderQuerySupported(query)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.storagefolder.iscommonfilequerysupported)
    public func isCommonFileQuerySupported(_ query: test_component.CommonFileQuery) throws -> Bool {
        try _IStorageFolderQueryOperations.IsCommonFileQuerySupported(query)
    }

    private lazy var _IStorageItemProperties: __ABI_Windows_Storage.IStorageItemProperties! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.storagefolder.getthumbnailasync)
    public func getThumbnailAsync(_ mode: test_component.ThumbnailMode) throws -> AnyIAsyncOperation<test_component.StorageItemThumbnail?>! {
        try _IStorageItemProperties.GetThumbnailAsyncOverloadDefaultSizeDefaultOptions(mode)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.storagefolder.getthumbnailasync)
    public func getThumbnailAsync(_ mode: test_component.ThumbnailMode, _ requestedSize: UInt32) throws -> AnyIAsyncOperation<test_component.StorageItemThumbnail?>! {
        try _IStorageItemProperties.GetThumbnailAsyncOverloadDefaultOptions(mode, requestedSize)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.storagefolder.getthumbnailasync)
    public func getThumbnailAsync(_ mode: test_component.ThumbnailMode, _ requestedSize: UInt32, _ options: test_component.ThumbnailOptions) throws -> AnyIAsyncOperation<test_component.StorageItemThumbnail?>! {
        try _IStorageItemProperties.GetThumbnailAsync(mode, requestedSize, options)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.storagefolder.displayname)
    public var displayName : String {
        get { try! _IStorageItemProperties.get_DisplayName() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.storagefolder.displaytype)
    public var displayType : String {
        get { try! _IStorageItemProperties.get_DisplayType() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.storagefolder.folderrelativeid)
    public var folderRelativeId : String {
        get { try! _IStorageItemProperties.get_FolderRelativeId() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.storagefolder.properties)
    public var properties : test_component.StorageItemContentProperties! {
        get { try! _IStorageItemProperties.get_Properties() }
    }

    private lazy var _IStorageItemProperties2: __ABI_Windows_Storage.IStorageItemProperties2! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.storagefolder.getscaledimageasthumbnailasync)
    public func getScaledImageAsThumbnailAsync(_ mode: test_component.ThumbnailMode) throws -> AnyIAsyncOperation<test_component.StorageItemThumbnail?>! {
        try _IStorageItemProperties2.GetScaledImageAsThumbnailAsyncOverloadDefaultSizeDefaultOptions(mode)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.storagefolder.getscaledimageasthumbnailasync)
    public func getScaledImageAsThumbnailAsync(_ mode: test_component.ThumbnailMode, _ requestedSize: UInt32) throws -> AnyIAsyncOperation<test_component.StorageItemThumbnail?>! {
        try _IStorageItemProperties2.GetScaledImageAsThumbnailAsyncOverloadDefaultOptions(mode, requestedSize)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.storagefolder.getscaledimageasthumbnailasync)
    public func getScaledImageAsThumbnailAsync(_ mode: test_component.ThumbnailMode, _ requestedSize: UInt32, _ options: test_component.ThumbnailOptions) throws -> AnyIAsyncOperation<test_component.StorageItemThumbnail?>! {
        try _IStorageItemProperties2.GetScaledImageAsThumbnailAsync(mode, requestedSize, options)
    }

    private lazy var _IStorageItem2: __ABI_Windows_Storage.IStorageItem2! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.storagefolder.getparentasync)
    public func getParentAsync() throws -> AnyIAsyncOperation<StorageFolder?>! {
        try _IStorageItem2.GetParentAsync()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.storagefolder.isequal)
    public func isEqual(_ item: AnyIStorageItem!) throws -> Bool {
        try _IStorageItem2.IsEqual(item)
    }

    private lazy var _IStorageFolder2: __ABI_Windows_Storage.IStorageFolder2! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.storagefolder.trygetitemasync)
    public func tryGetItemAsync(_ name: String) throws -> AnyIAsyncOperation<AnyIStorageItem?>! {
        try _IStorageFolder2.TryGetItemAsync(name)
    }

    private lazy var _IStorageItemPropertiesWithProvider: __ABI_Windows_Storage.IStorageItemPropertiesWithProvider! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.storagefolder.provider)
    public var provider : StorageProvider! {
        get { try! _IStorageItemPropertiesWithProvider.get_Provider() }
    }

    private lazy var _IStorageFolder3: __ABI_Windows_Storage.IStorageFolder3! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.storagefolder.trygetchangetracker)
    public func tryGetChangeTracker() throws -> StorageLibraryChangeTracker! {
        try _IStorageFolder3.TryGetChangeTracker()
    }

    deinit {
        _IStorageItem = nil
        _default = nil
        _IStorageFolderQueryOperations = nil
        _IStorageItemProperties = nil
        _IStorageItemProperties2 = nil
        _IStorageItem2 = nil
        _IStorageFolder2 = nil
        _IStorageItemPropertiesWithProvider = nil
        _IStorageFolder3 = nil
    }
}

// MARK: - StorageFolder Internals

@_spi(WinRTInternal)
extension __IMPL_Windows_Storage {
    public enum StorageFolderBridge: AbiBridge {
        public typealias SwiftProjection = StorageFolder
        public typealias CABI = __x_ABI_CWindows_CStorage_CIStorageFolder
        public static func from(abi: ComPtr<__x_ABI_CWindows_CStorage_CIStorageFolder>?) -> StorageFolder? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: test_component.IInspectable(abi))
        }
    }

}
@_spi(WinRTInternal)
public class StorageFolderMaker: MakeFromAbi {
    public typealias SwiftType = StorageFolder
    public static func from(abi: test_component.IInspectable) -> SwiftType {
        return StorageFolder(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
extension __ABI_Windows_Storage {
    private static let IID___x_ABI_CWindows_CStorage_CIStorageFolder3: test_component.IID = .init(
        Data1: 0x9F617899, Data2: 0xBDE1, Data3: 0x4124, Data4: ( 0xAE,0xB3,0xB0,0x6A,0xD9,0x6F,0x98,0xD4 ) // 9F617899-BDE1-4124-AEB3-B06AD96F98D4
    ) 

    public class IStorageFolder3: test_component.IInspectable {
        override public class var IID: test_component.IID { IID___x_ABI_CWindows_CStorage_CIStorageFolder3 }

        public func TryGetChangeTracker() throws -> test_component.StorageLibraryChangeTracker? {
            let (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CWindows_CStorage_CIStorageFolder3.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.TryGetChangeTracker(pThis, &resultAbi))
                }
            }
            return __IMPL_Windows_Storage.StorageLibraryChangeTrackerBridge.from(abi: result)
        }

    }

    private static let IID___x_ABI_CWindows_CStorage_CIStorageFolderStatics: test_component.IID = .init(
        Data1: 0x08F327FF, Data2: 0x85D5, Data3: 0x48B9, Data4: ( 0xAE,0xE9,0x28,0x51,0x1E,0x33,0x9F,0x9F ) // 08F327FF-85D5-48B9-AEE9-28511E339F9F
    ) 

    public class IStorageFolderStatics: test_component.IInspectable {
        override public class var IID: test_component.IID { IID___x_ABI_CWindows_CStorage_CIStorageFolderStatics }

        public func GetFolderFromPathAsync(_ path: String) throws -> test_component.AnyIAsyncOperation<test_component.StorageFolder?>? {
            let (operation) = try ComPtrs.initialize { operationAbi in
                let _path = try! HString(path)
                _ = try perform(as: __x_ABI_CWindows_CStorage_CIStorageFolderStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetFolderFromPathAsync(pThis, _path.get(), &operationAbi))
                }
            }
            return test_component.__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStorageFolderWrapper.unwrapFrom(abi: operation)
        }

    }

    private static let IID___x_ABI_CWindows_CStorage_CIStorageFolderStatics2: test_component.IID = .init(
        Data1: 0xB4656DC3, Data2: 0x71D2, Data3: 0x467D, Data4: ( 0x8B,0x29,0x37,0x1F,0x0F,0x62,0xBF,0x6F ) // B4656DC3-71D2-467D-8B29-371F0F62BF6F
    ) 

    public class IStorageFolderStatics2: test_component.IInspectable {
        override public class var IID: test_component.IID { IID___x_ABI_CWindows_CStorage_CIStorageFolderStatics2 }

        public func GetFolderFromPathForUserAsync(_ user: test_component.User?, _ path: String) throws -> test_component.AnyIAsyncOperation<test_component.StorageFolder?>? {
            let (operation) = try ComPtrs.initialize { operationAbi in
                let _path = try! HString(path)
                _ = try perform(as: __x_ABI_CWindows_CStorage_CIStorageFolderStatics2.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetFolderFromPathForUserAsync(pThis, RawPointer(user), _path.get(), &operationAbi))
                }
            }
            return test_component.__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStorageFolderWrapper.unwrapFrom(abi: operation)
        }

    }

}
// MARK: - StorageLibraryChange

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.storagelibrarychange)
public final class StorageLibraryChange : WinRTClass {
    private typealias SwiftABI = __ABI_Windows_Storage.IStorageLibraryChange
    private typealias CABI = __x_ABI_CWindows_CStorage_CIStorageLibraryChange
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: test_component.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.storagelibrarychange.isoftype)
    public func isOfType(_ type: StorageItemTypes) throws -> Bool {
        try _default.IsOfType(type)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.storagelibrarychange.getstorageitemasync)
    public func getStorageItemAsync() throws -> AnyIAsyncOperation<AnyIStorageItem?>! {
        try _default.GetStorageItemAsync()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.storagelibrarychange.changetype)
    public var changeType : StorageLibraryChangeType {
        get { try! _default.get_ChangeType() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.storagelibrarychange.path)
    public var path : String {
        get { try! _default.get_Path() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.storagelibrarychange.previouspath)
    public var previousPath : String {
        get { try! _default.get_PreviousPath() }
    }

    deinit {
        _default = nil
    }
}

// MARK: - StorageLibraryChange Internals

@_spi(WinRTInternal)
extension __IMPL_Windows_Storage {
    public enum StorageLibraryChangeBridge: AbiBridge {
        public typealias SwiftProjection = StorageLibraryChange
        public typealias CABI = __x_ABI_CWindows_CStorage_CIStorageLibraryChange
        public static func from(abi: ComPtr<__x_ABI_CWindows_CStorage_CIStorageLibraryChange>?) -> StorageLibraryChange? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: test_component.IInspectable(abi))
        }
    }

}
@_spi(WinRTInternal)
public class StorageLibraryChangeMaker: MakeFromAbi {
    public typealias SwiftType = StorageLibraryChange
    public static func from(abi: test_component.IInspectable) -> SwiftType {
        return StorageLibraryChange(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
extension __ABI_Windows_Storage {
    private static let IID___x_ABI_CWindows_CStorage_CIStorageLibraryChange: test_component.IID = .init(
        Data1: 0x00980B23, Data2: 0x2BE2, Data3: 0x4909, Data4: ( 0xAA,0x48,0x15,0x9F,0x52,0x03,0xA5,0x1E ) // 00980B23-2BE2-4909-AA48-159F5203A51E
    ) 

    public class IStorageLibraryChange: test_component.IInspectable {
        override public class var IID: test_component.IID { IID___x_ABI_CWindows_CStorage_CIStorageLibraryChange }

        public func get_ChangeType() throws -> test_component.StorageLibraryChangeType {
            var value: __x_ABI_CWindows_CStorage_CStorageLibraryChangeType = .init(0)
            _ = try perform(as: __x_ABI_CWindows_CStorage_CIStorageLibraryChange.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ChangeType(pThis, &value))
            }
            return value
        }

        public func get_Path() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CWindows_CStorage_CIStorageLibraryChange.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Path(pThis, &value))
            }
            return .init(from: value)
        }

        public func get_PreviousPath() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CWindows_CStorage_CIStorageLibraryChange.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_PreviousPath(pThis, &value))
            }
            return .init(from: value)
        }

        public func IsOfType(_ type: test_component.StorageItemTypes) throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CWindows_CStorage_CIStorageLibraryChange.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.IsOfType(pThis, type, &value))
            }
            return .init(from: value)
        }

        public func GetStorageItemAsync() throws -> test_component.AnyIAsyncOperation<test_component.AnyIStorageItem?>? {
            let (operation) = try ComPtrs.initialize { operationAbi in
                _ = try perform(as: __x_ABI_CWindows_CStorage_CIStorageLibraryChange.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetStorageItemAsync(pThis, &operationAbi))
                }
            }
            return test_component.__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CIStorageItemWrapper.unwrapFrom(abi: operation)
        }

    }

}
// MARK: - StorageLibraryChangeReader

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.storagelibrarychangereader)
public final class StorageLibraryChangeReader : WinRTClass {
    private typealias SwiftABI = __ABI_Windows_Storage.IStorageLibraryChangeReader
    private typealias CABI = __x_ABI_CWindows_CStorage_CIStorageLibraryChangeReader
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: test_component.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.storagelibrarychangereader.readbatchasync)
    public func readBatchAsync() throws -> AnyIAsyncOperation<AnyIVectorView<StorageLibraryChange?>?>! {
        try _default.ReadBatchAsync()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.storagelibrarychangereader.acceptchangesasync)
    public func acceptChangesAsync() throws -> test_component.AnyIAsyncAction! {
        try _default.AcceptChangesAsync()
    }

    private lazy var _IStorageLibraryChangeReader2: __ABI_Windows_Storage.IStorageLibraryChangeReader2! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.storagelibrarychangereader.getlastchangeid)
    public func getLastChangeId() throws -> UInt64 {
        try _IStorageLibraryChangeReader2.GetLastChangeId()
    }

    deinit {
        _default = nil
        _IStorageLibraryChangeReader2 = nil
    }
}

// MARK: - StorageLibraryChangeReader Internals

@_spi(WinRTInternal)
extension __IMPL_Windows_Storage {
    public enum StorageLibraryChangeReaderBridge: AbiBridge {
        public typealias SwiftProjection = StorageLibraryChangeReader
        public typealias CABI = __x_ABI_CWindows_CStorage_CIStorageLibraryChangeReader
        public static func from(abi: ComPtr<__x_ABI_CWindows_CStorage_CIStorageLibraryChangeReader>?) -> StorageLibraryChangeReader? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: test_component.IInspectable(abi))
        }
    }

}
@_spi(WinRTInternal)
public class StorageLibraryChangeReaderMaker: MakeFromAbi {
    public typealias SwiftType = StorageLibraryChangeReader
    public static func from(abi: test_component.IInspectable) -> SwiftType {
        return StorageLibraryChangeReader(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
extension __ABI_Windows_Storage {
    private static let IID___x_ABI_CWindows_CStorage_CIStorageLibraryChangeReader: test_component.IID = .init(
        Data1: 0xF205BC83, Data2: 0xFCA2, Data3: 0x41F9, Data4: ( 0x89,0x54,0xEE,0x2E,0x99,0x1E,0xB9,0x6F ) // F205BC83-FCA2-41F9-8954-EE2E991EB96F
    ) 

    public class IStorageLibraryChangeReader: test_component.IInspectable {
        override public class var IID: test_component.IID { IID___x_ABI_CWindows_CStorage_CIStorageLibraryChangeReader }

        public func ReadBatchAsync() throws -> test_component.AnyIAsyncOperation<test_component.AnyIVectorView<test_component.StorageLibraryChange?>?>? {
            let (operation) = try ComPtrs.initialize { operationAbi in
                _ = try perform(as: __x_ABI_CWindows_CStorage_CIStorageLibraryChangeReader.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.ReadBatchAsync(pThis, &operationAbi))
                }
            }
            return test_component.__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CStorageLibraryChangeWrapper.unwrapFrom(abi: operation)
        }

        public func AcceptChangesAsync() throws -> test_component.AnyIAsyncAction? {
            let (operation) = try ComPtrs.initialize { operationAbi in
                _ = try perform(as: __x_ABI_CWindows_CStorage_CIStorageLibraryChangeReader.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.AcceptChangesAsync(pThis, &operationAbi))
                }
            }
            return __ABI_Windows_Foundation.IAsyncActionWrapper.unwrapFrom(abi: operation)
        }

    }

    private static let IID___x_ABI_CWindows_CStorage_CIStorageLibraryChangeReader2: test_component.IID = .init(
        Data1: 0xABF4868B, Data2: 0xFBCC, Data3: 0x4A4F, Data4: ( 0x99,0x9E,0xE7,0xAB,0x7C,0x64,0x6D,0xBE ) // ABF4868B-FBCC-4A4F-999E-E7AB7C646DBE
    ) 

    public class IStorageLibraryChangeReader2: test_component.IInspectable {
        override public class var IID: test_component.IID { IID___x_ABI_CWindows_CStorage_CIStorageLibraryChangeReader2 }

        public func GetLastChangeId() throws -> UInt64 {
            var result: UINT64 = 0
            _ = try perform(as: __x_ABI_CWindows_CStorage_CIStorageLibraryChangeReader2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetLastChangeId(pThis, &result))
            }
            return result
        }

    }

}
// MARK: - StorageLibraryChangeTracker

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.storagelibrarychangetracker)
public final class StorageLibraryChangeTracker : WinRTClass {
    private typealias SwiftABI = __ABI_Windows_Storage.IStorageLibraryChangeTracker
    private typealias CABI = __x_ABI_CWindows_CStorage_CIStorageLibraryChangeTracker
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: test_component.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.storagelibrarychangetracker.getchangereader)
    public func getChangeReader() throws -> StorageLibraryChangeReader! {
        try _default.GetChangeReader()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.storagelibrarychangetracker.enable)
    public func enable() throws {
        try _default.Enable()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.storagelibrarychangetracker.reset)
    public func reset() throws {
        try _default.Reset()
    }

    private lazy var _IStorageLibraryChangeTracker2: __ABI_Windows_Storage.IStorageLibraryChangeTracker2! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.storagelibrarychangetracker.enable)
    public func enable(_ options: StorageLibraryChangeTrackerOptions!) throws {
        try _IStorageLibraryChangeTracker2.EnableWithOptions(options)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.storagelibrarychangetracker.disable)
    public func disable() throws {
        try _IStorageLibraryChangeTracker2.Disable()
    }

    deinit {
        _default = nil
        _IStorageLibraryChangeTracker2 = nil
    }
}

// MARK: - StorageLibraryChangeTracker Internals

@_spi(WinRTInternal)
extension __IMPL_Windows_Storage {
    public enum StorageLibraryChangeTrackerBridge: AbiBridge {
        public typealias SwiftProjection = StorageLibraryChangeTracker
        public typealias CABI = __x_ABI_CWindows_CStorage_CIStorageLibraryChangeTracker
        public static func from(abi: ComPtr<__x_ABI_CWindows_CStorage_CIStorageLibraryChangeTracker>?) -> StorageLibraryChangeTracker? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: test_component.IInspectable(abi))
        }
    }

}
@_spi(WinRTInternal)
public class StorageLibraryChangeTrackerMaker: MakeFromAbi {
    public typealias SwiftType = StorageLibraryChangeTracker
    public static func from(abi: test_component.IInspectable) -> SwiftType {
        return StorageLibraryChangeTracker(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
extension __ABI_Windows_Storage {
    private static let IID___x_ABI_CWindows_CStorage_CIStorageLibraryChangeTracker: test_component.IID = .init(
        Data1: 0x9E157316, Data2: 0x6073, Data3: 0x44F6, Data4: ( 0x96,0x81,0x74,0x92,0xD1,0x28,0x6C,0x90 ) // 9E157316-6073-44F6-9681-7492D1286C90
    ) 

    public class IStorageLibraryChangeTracker: test_component.IInspectable {
        override public class var IID: test_component.IID { IID___x_ABI_CWindows_CStorage_CIStorageLibraryChangeTracker }

        public func GetChangeReader() throws -> test_component.StorageLibraryChangeReader? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CStorage_CIStorageLibraryChangeTracker.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetChangeReader(pThis, &valueAbi))
                }
            }
            return __IMPL_Windows_Storage.StorageLibraryChangeReaderBridge.from(abi: value)
        }

        public func Enable() throws {
            _ = try perform(as: __x_ABI_CWindows_CStorage_CIStorageLibraryChangeTracker.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Enable(pThis))
            }
        }

        public func Reset() throws {
            _ = try perform(as: __x_ABI_CWindows_CStorage_CIStorageLibraryChangeTracker.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Reset(pThis))
            }
        }

    }

    private static let IID___x_ABI_CWindows_CStorage_CIStorageLibraryChangeTracker2: test_component.IID = .init(
        Data1: 0xCD051C3B, Data2: 0x0F9F, Data3: 0x42F9, Data4: ( 0x8F,0xB3,0x15,0x8D,0x82,0xE1,0x38,0x21 ) // CD051C3B-0F9F-42F9-8FB3-158D82E13821
    ) 

    public class IStorageLibraryChangeTracker2: test_component.IInspectable {
        override public class var IID: test_component.IID { IID___x_ABI_CWindows_CStorage_CIStorageLibraryChangeTracker2 }

        public func EnableWithOptions(_ options: test_component.StorageLibraryChangeTrackerOptions?) throws {
            _ = try perform(as: __x_ABI_CWindows_CStorage_CIStorageLibraryChangeTracker2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.EnableWithOptions(pThis, RawPointer(options)))
            }
        }

        public func Disable() throws {
            _ = try perform(as: __x_ABI_CWindows_CStorage_CIStorageLibraryChangeTracker2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Disable(pThis))
            }
        }

    }

}
// MARK: - StorageLibraryChangeTrackerOptions

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.storagelibrarychangetrackeroptions)
public final class StorageLibraryChangeTrackerOptions : WinRTClass {
    private typealias SwiftABI = __ABI_Windows_Storage.IStorageLibraryChangeTrackerOptions
    private typealias CABI = __x_ABI_CWindows_CStorage_CIStorageLibraryChangeTrackerOptions
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: test_component.IInspectable) {
        super.init(fromAbi)
    }

    private static let _defaultFactory: test_component.IActivationFactory = try! RoGetActivationFactory("Windows.Storage.StorageLibraryChangeTrackerOptions")
    override public init() {
        super.init(try! Self._defaultFactory.ActivateInstance())
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.storagelibrarychangetrackeroptions.trackchangedetails)
    public var trackChangeDetails : Bool {
        get { try! _default.get_TrackChangeDetails() }
        set { try! _default.put_TrackChangeDetails(newValue) }
    }

    deinit {
        _default = nil
    }
}

// MARK: - StorageLibraryChangeTrackerOptions Internals

@_spi(WinRTInternal)
extension __IMPL_Windows_Storage {
    public enum StorageLibraryChangeTrackerOptionsBridge: AbiBridge {
        public typealias SwiftProjection = StorageLibraryChangeTrackerOptions
        public typealias CABI = __x_ABI_CWindows_CStorage_CIStorageLibraryChangeTrackerOptions
        public static func from(abi: ComPtr<__x_ABI_CWindows_CStorage_CIStorageLibraryChangeTrackerOptions>?) -> StorageLibraryChangeTrackerOptions? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: test_component.IInspectable(abi))
        }
    }

}
@_spi(WinRTInternal)
public class StorageLibraryChangeTrackerOptionsMaker: MakeFromAbi {
    public typealias SwiftType = StorageLibraryChangeTrackerOptions
    public static func from(abi: test_component.IInspectable) -> SwiftType {
        return StorageLibraryChangeTrackerOptions(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
extension __ABI_Windows_Storage {
    private static let IID___x_ABI_CWindows_CStorage_CIStorageLibraryChangeTrackerOptions: test_component.IID = .init(
        Data1: 0xBB52BCD4, Data2: 0x1A6D, Data3: 0x59C0, Data4: ( 0xAD,0x2A,0x82,0x3A,0x20,0x53,0x24,0x83 ) // BB52BCD4-1A6D-59C0-AD2A-823A20532483
    ) 

    public class IStorageLibraryChangeTrackerOptions: test_component.IInspectable {
        override public class var IID: test_component.IID { IID___x_ABI_CWindows_CStorage_CIStorageLibraryChangeTrackerOptions }

        public func get_TrackChangeDetails() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CWindows_CStorage_CIStorageLibraryChangeTrackerOptions.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_TrackChangeDetails(pThis, &value))
            }
            return .init(from: value)
        }

        public func put_TrackChangeDetails(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CWindows_CStorage_CIStorageLibraryChangeTrackerOptions.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_TrackChangeDetails(pThis, .init(from: value)))
            }
        }

    }

}
// MARK: - StorageProvider

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.storageprovider)
public final class StorageProvider : WinRTClass {
    private typealias SwiftABI = __ABI_Windows_Storage.IStorageProvider
    private typealias CABI = __x_ABI_CWindows_CStorage_CIStorageProvider
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: test_component.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.storageprovider.displayname)
    public var displayName : String {
        get { try! _default.get_DisplayName() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.storageprovider.id)
    public var id : String {
        get { try! _default.get_Id() }
    }

    private lazy var _IStorageProvider2: __ABI_Windows_Storage.IStorageProvider2! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.storageprovider.ispropertysupportedforpartialfileasync)
    public func isPropertySupportedForPartialFileAsync(_ propertyCanonicalName: String) throws -> AnyIAsyncOperation<Bool>! {
        try _IStorageProvider2.IsPropertySupportedForPartialFileAsync(propertyCanonicalName)
    }

    deinit {
        _default = nil
        _IStorageProvider2 = nil
    }
}

// MARK: - StorageProvider Internals

@_spi(WinRTInternal)
extension __IMPL_Windows_Storage {
    public enum StorageProviderBridge: AbiBridge {
        public typealias SwiftProjection = StorageProvider
        public typealias CABI = __x_ABI_CWindows_CStorage_CIStorageProvider
        public static func from(abi: ComPtr<__x_ABI_CWindows_CStorage_CIStorageProvider>?) -> StorageProvider? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: test_component.IInspectable(abi))
        }
    }

}
@_spi(WinRTInternal)
public class StorageProviderMaker: MakeFromAbi {
    public typealias SwiftType = StorageProvider
    public static func from(abi: test_component.IInspectable) -> SwiftType {
        return StorageProvider(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
extension __ABI_Windows_Storage {
    private static let IID___x_ABI_CWindows_CStorage_CIStorageProvider: test_component.IID = .init(
        Data1: 0xE705EED4, Data2: 0xD478, Data3: 0x47D6, Data4: ( 0xBA,0x46,0x1A,0x8E,0xBE,0x11,0x4A,0x20 ) // E705EED4-D478-47D6-BA46-1A8EBE114A20
    ) 

    public class IStorageProvider: test_component.IInspectable {
        override public class var IID: test_component.IID { IID___x_ABI_CWindows_CStorage_CIStorageProvider }

        public func get_Id() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CWindows_CStorage_CIStorageProvider.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Id(pThis, &value))
            }
            return .init(from: value)
        }

        public func get_DisplayName() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CWindows_CStorage_CIStorageProvider.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_DisplayName(pThis, &value))
            }
            return .init(from: value)
        }

    }

    private static let IID___x_ABI_CWindows_CStorage_CIStorageProvider2: test_component.IID = .init(
        Data1: 0x010D1917, Data2: 0x3404, Data3: 0x414B, Data4: ( 0x9F,0xD7,0xCD,0x44,0x47,0x2E,0xAA,0x39 ) // 010D1917-3404-414B-9FD7-CD44472EAA39
    ) 

    public class IStorageProvider2: test_component.IInspectable {
        override public class var IID: test_component.IID { IID___x_ABI_CWindows_CStorage_CIStorageProvider2 }

        public func IsPropertySupportedForPartialFileAsync(_ propertyCanonicalName: String) throws -> test_component.AnyIAsyncOperation<Bool>? {
            let (operation) = try ComPtrs.initialize { operationAbi in
                let _propertyCanonicalName = try! HString(propertyCanonicalName)
                _ = try perform(as: __x_ABI_CWindows_CStorage_CIStorageProvider2.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.IsPropertySupportedForPartialFileAsync(pThis, _propertyCanonicalName.get(), &operationAbi))
                }
            }
            return test_component.__x_ABI_C__FIAsyncOperation_1_booleanWrapper.unwrapFrom(abi: operation)
        }

    }

}
// MARK: - StorageStreamTransaction

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.storagestreamtransaction)
public final class StorageStreamTransaction : WinRTClass, test_component.IClosable {
    private typealias SwiftABI = __ABI_Windows_Storage.IStorageStreamTransaction
    private typealias CABI = __x_ABI_CWindows_CStorage_CIStorageStreamTransaction
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: test_component.IInspectable) {
        super.init(fromAbi)
    }

    override public func queryInterface(_ iid: test_component.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private lazy var _IClosable: __ABI_Windows_Foundation.IClosable! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.storagestreamtransaction.close)
    public func close() throws {
        try _IClosable.Close()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.storagestreamtransaction.commitasync)
    public func commitAsync() throws -> test_component.AnyIAsyncAction! {
        try _default.CommitAsync()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.storagestreamtransaction.stream)
    public var stream : test_component.AnyIRandomAccessStream! {
        get { try! _default.get_Stream() }
    }

    deinit {
        _IClosable = nil
        _default = nil
    }
}

// MARK: - StorageStreamTransaction Internals

@_spi(WinRTInternal)
extension __IMPL_Windows_Storage {
    public enum StorageStreamTransactionBridge: AbiBridge {
        public typealias SwiftProjection = StorageStreamTransaction
        public typealias CABI = __x_ABI_CWindows_CStorage_CIStorageStreamTransaction
        public static func from(abi: ComPtr<__x_ABI_CWindows_CStorage_CIStorageStreamTransaction>?) -> StorageStreamTransaction? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: test_component.IInspectable(abi))
        }
    }

}
@_spi(WinRTInternal)
public class StorageStreamTransactionMaker: MakeFromAbi {
    public typealias SwiftType = StorageStreamTransaction
    public static func from(abi: test_component.IInspectable) -> SwiftType {
        return StorageStreamTransaction(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
extension __ABI_Windows_Storage {
    private static let IID___x_ABI_CWindows_CStorage_CIStorageStreamTransaction: test_component.IID = .init(
        Data1: 0xF67CF363, Data2: 0xA53D, Data3: 0x4D94, Data4: ( 0xAE,0x2C,0x67,0x23,0x2D,0x93,0xAC,0xDD ) // F67CF363-A53D-4D94-AE2C-67232D93ACDD
    ) 

    public class IStorageStreamTransaction: test_component.IInspectable {
        override public class var IID: test_component.IID { IID___x_ABI_CWindows_CStorage_CIStorageStreamTransaction }

        public func get_Stream() throws -> test_component.AnyIRandomAccessStream? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CStorage_CIStorageStreamTransaction.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Stream(pThis, &valueAbi))
                }
            }
            return __ABI_Windows_Storage_Streams.IRandomAccessStreamWrapper.unwrapFrom(abi: value)
        }

        public func CommitAsync() throws -> test_component.AnyIAsyncAction? {
            let (operation) = try ComPtrs.initialize { operationAbi in
                _ = try perform(as: __x_ABI_CWindows_CStorage_CIStorageStreamTransaction.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CommitAsync(pThis, &operationAbi))
                }
            }
            return __ABI_Windows_Foundation.IAsyncActionWrapper.unwrapFrom(abi: operation)
        }

    }

}
// MARK: - StreamedFileDataRequest

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.streamedfiledatarequest)
public final class StreamedFileDataRequest : WinRTClass, test_component.IClosable, test_component.IOutputStream, IStreamedFileDataRequest {
    private typealias SwiftABI = __ABI_Windows_Storage_Streams.IOutputStream
    private typealias CABI = __x_ABI_CWindows_CStorage_CStreams_CIOutputStream
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: test_component.IInspectable) {
        super.init(fromAbi)
    }

    override public func queryInterface(_ iid: test_component.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private lazy var _IClosable: __ABI_Windows_Foundation.IClosable! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.streamedfiledatarequest.close)
    public func close() throws {
        try _IClosable.Close()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.streamedfiledatarequest.writeasync)
    public func writeAsync(_ buffer: test_component.AnyIBuffer!) throws -> AnyIAsyncOperationWithProgress<UInt32, UInt32>! {
        try _default.WriteAsync(buffer)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.streamedfiledatarequest.flushasync)
    public func flushAsync() throws -> AnyIAsyncOperation<Bool>! {
        try _default.FlushAsync()
    }

    private lazy var _IStreamedFileDataRequest: __ABI_Windows_Storage.IStreamedFileDataRequest! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.streamedfiledatarequest.failandclose)
    public func failAndClose(_ failureMode: StreamedFileFailureMode) throws {
        try _IStreamedFileDataRequest.FailAndClose(failureMode)
    }

    deinit {
        _IClosable = nil
        _default = nil
        _IStreamedFileDataRequest = nil
    }
}

// MARK: - StreamedFileDataRequest Internals

@_spi(WinRTInternal)
extension __IMPL_Windows_Storage {
    public enum StreamedFileDataRequestBridge: AbiBridge {
        public typealias SwiftProjection = StreamedFileDataRequest
        public typealias CABI = __x_ABI_CWindows_CStorage_CStreams_CIOutputStream
        public static func from(abi: ComPtr<__x_ABI_CWindows_CStorage_CStreams_CIOutputStream>?) -> StreamedFileDataRequest? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: test_component.IInspectable(abi))
        }
    }

}
@_spi(WinRTInternal)
public class StreamedFileDataRequestMaker: MakeFromAbi {
    public typealias SwiftType = StreamedFileDataRequest
    public static func from(abi: test_component.IInspectable) -> SwiftType {
        return StreamedFileDataRequest(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
extension __ABI_Windows_Storage {
}

// WARNING: Please don't edit this file. It was generated by Swift/WinRT v0.0.1
// swiftlint:disable all
import Foundation
import Ctest_component

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.streams.irandomaccessstream)
public protocol IRandomAccessStream : test_component.IClosable, IInputStream, IOutputStream {
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.streams.irandomaccessstream.getinputstreamat)
    func getInputStreamAt(_ position: UInt64) throws -> test_component.AnyIInputStream!
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.streams.irandomaccessstream.getoutputstreamat)
    func getOutputStreamAt(_ position: UInt64) throws -> test_component.AnyIOutputStream!
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.streams.irandomaccessstream.seek)
    func seek(_ position: UInt64) throws
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.streams.irandomaccessstream.clonestream)
    func cloneStream() throws -> test_component.AnyIRandomAccessStream!
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.streams.irandomaccessstream.canread)
    var canRead: Bool { get }
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.streams.irandomaccessstream.canwrite)
    var canWrite: Bool { get }
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.streams.irandomaccessstream.position)
    var position: UInt64 { get }
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.streams.irandomaccessstream.size)
    var size: UInt64 { get set }
}

extension IRandomAccessStream {
    public func queryInterface(_ iid: test_component.IID) -> IUnknownRef? {
        switch iid {
            case __ABI_Windows_Storage_Streams.IRandomAccessStreamWrapper.IID:
                let wrapper = __ABI_Windows_Storage_Streams.IRandomAccessStreamWrapper(self)
                return wrapper!.queryInterface(iid)
            case __ABI_Windows_Foundation.IClosableWrapper.IID:
                let wrapper = __ABI_Windows_Foundation.IClosableWrapper(self)
                return wrapper!.queryInterface(iid)
            case __ABI_Windows_Storage_Streams.IInputStreamWrapper.IID:
                let wrapper = __ABI_Windows_Storage_Streams.IInputStreamWrapper(self)
                return wrapper!.queryInterface(iid)
            case __ABI_Windows_Storage_Streams.IOutputStreamWrapper.IID:
                let wrapper = __ABI_Windows_Storage_Streams.IOutputStreamWrapper(self)
                return wrapper!.queryInterface(iid)
            default: return nil
        }
    }
}
public typealias AnyIRandomAccessStream = any IRandomAccessStream


// MARK: - Internals

@_spi(WinRTInternal)
extension __IMPL_Windows_Storage_Streams {
    public enum IRandomAccessStreamBridge : AbiInterfaceBridge {
        public typealias CABI = __x_ABI_CWindows_CStorage_CStreams_CIRandomAccessStream
        public typealias SwiftABI = __ABI_Windows_Storage_Streams.IRandomAccessStream
        public typealias SwiftProjection = AnyIRandomAccessStream
        public static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
            guard let abi = abi else { return nil }
            return IRandomAccessStreamImpl(abi)
        }

        public static func makeAbi() -> CABI {
            let vtblPtr = withUnsafeMutablePointer(to: &__ABI_Windows_Storage_Streams.IRandomAccessStreamVTable) { $0 }
            return .init(lpVtbl: vtblPtr)
        }
    }

    fileprivate class IRandomAccessStreamImpl: IRandomAccessStream, WinRTAbiImpl {
        fileprivate typealias Bridge = IRandomAccessStreamBridge
        fileprivate let _default: Bridge.SwiftABI
        fileprivate var thisPtr: test_component.IInspectable { _default }
        fileprivate init(_ fromAbi: ComPtr<Bridge.CABI>) {
            _default = Bridge.SwiftABI(fromAbi)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.streams.irandomaccessstream.getinputstreamat)
        fileprivate func getInputStreamAt(_ position: UInt64) throws -> AnyIInputStream! {
            try _default.GetInputStreamAt(position)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.streams.irandomaccessstream.getoutputstreamat)
        fileprivate func getOutputStreamAt(_ position: UInt64) throws -> AnyIOutputStream! {
            try _default.GetOutputStreamAt(position)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.streams.irandomaccessstream.seek)
        fileprivate func seek(_ position: UInt64) throws {
            try _default.Seek(position)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.streams.irandomaccessstream.clonestream)
        fileprivate func cloneStream() throws -> AnyIRandomAccessStream! {
            try _default.CloneStream()
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.streams.irandomaccessstream.canread)
        fileprivate var canRead : Bool {
            get { try! _default.get_CanRead() }
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.streams.irandomaccessstream.canwrite)
        fileprivate var canWrite : Bool {
            get { try! _default.get_CanWrite() }
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.streams.irandomaccessstream.position)
        fileprivate var position : UInt64 {
            get { try! _default.get_Position() }
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.streams.irandomaccessstream.size)
        fileprivate var size : UInt64 {
            get { try! _default.get_Size() }
            set { try! _default.put_Size(newValue) }
        }

        private lazy var _IClosable: __ABI_Windows_Foundation.IClosable! = getInterfaceForCaching()
        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.streams.irandomaccessstream.close)
        fileprivate func close() throws {
            try _IClosable.Close()
        }

        private lazy var _IInputStream: __ABI_Windows_Storage_Streams.IInputStream! = getInterfaceForCaching()
        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.streams.irandomaccessstream.readasync)
        fileprivate func readAsync(_ buffer: AnyIBuffer!, _ count: UInt32, _ options: InputStreamOptions) throws -> AnyIAsyncOperationWithProgress<AnyIBuffer?, UInt32>! {
            try _IInputStream.ReadAsync(buffer, count, options)
        }

        private lazy var _IOutputStream: __ABI_Windows_Storage_Streams.IOutputStream! = getInterfaceForCaching()
        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.streams.irandomaccessstream.writeasync)
        fileprivate func writeAsync(_ buffer: AnyIBuffer!) throws -> AnyIAsyncOperationWithProgress<UInt32, UInt32>! {
            try _IOutputStream.WriteAsync(buffer)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.streams.irandomaccessstream.flushasync)
        fileprivate func flushAsync() throws -> AnyIAsyncOperation<Bool>! {
            try _IOutputStream.FlushAsync()
        }

    }

}
@_spi(WinRTInternal)
extension __ABI_Windows_Storage_Streams {
    private static let IID___x_ABI_CWindows_CStorage_CStreams_CIRandomAccessStream: test_component.IID = .init(
        Data1: 0x905A0FE1, Data2: 0xBC53, Data3: 0x11DF, Data4: ( 0x8C,0x49,0x00,0x1E,0x4F,0xC6,0x86,0xDA )
    ) // 905A0FE1-BC53-11DF-8C49-001E4FC686DA
    public class IRandomAccessStream: test_component.IInspectable {
        override public class var IID: test_component.IID { IID___x_ABI_CWindows_CStorage_CStreams_CIRandomAccessStream }

        open func get_Size() throws -> UInt64 {
            var value: UINT64 = 0
            _ = try perform(as: __x_ABI_CWindows_CStorage_CStreams_CIRandomAccessStream.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Size(pThis, &value))
            }
            return value
        }

        open func put_Size(_ value: UInt64) throws {
            _ = try perform(as: __x_ABI_CWindows_CStorage_CStreams_CIRandomAccessStream.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Size(pThis, value))
            }
        }

        open func GetInputStreamAt(_ position: UInt64) throws -> test_component.AnyIInputStream? {
            let (stream) = try ComPtrs.initialize { streamAbi in
                _ = try perform(as: __x_ABI_CWindows_CStorage_CStreams_CIRandomAccessStream.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetInputStreamAt(pThis, position, &streamAbi))
                }
            }
            return __ABI_Windows_Storage_Streams.IInputStreamWrapper.unwrapFrom(abi: stream)
        }

        open func GetOutputStreamAt(_ position: UInt64) throws -> test_component.AnyIOutputStream? {
            let (stream) = try ComPtrs.initialize { streamAbi in
                _ = try perform(as: __x_ABI_CWindows_CStorage_CStreams_CIRandomAccessStream.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetOutputStreamAt(pThis, position, &streamAbi))
                }
            }
            return __ABI_Windows_Storage_Streams.IOutputStreamWrapper.unwrapFrom(abi: stream)
        }

        open func get_Position() throws -> UInt64 {
            var value: UINT64 = 0
            _ = try perform(as: __x_ABI_CWindows_CStorage_CStreams_CIRandomAccessStream.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Position(pThis, &value))
            }
            return value
        }

        open func Seek(_ position: UInt64) throws {
            _ = try perform(as: __x_ABI_CWindows_CStorage_CStreams_CIRandomAccessStream.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Seek(pThis, position))
            }
        }

        open func CloneStream() throws -> test_component.AnyIRandomAccessStream? {
            let (stream) = try ComPtrs.initialize { streamAbi in
                _ = try perform(as: __x_ABI_CWindows_CStorage_CStreams_CIRandomAccessStream.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CloneStream(pThis, &streamAbi))
                }
            }
            return __ABI_Windows_Storage_Streams.IRandomAccessStreamWrapper.unwrapFrom(abi: stream)
        }

        open func get_CanRead() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CWindows_CStorage_CStreams_CIRandomAccessStream.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_CanRead(pThis, &value))
            }
            return .init(from: value)
        }

        open func get_CanWrite() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CWindows_CStorage_CStreams_CIRandomAccessStream.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_CanWrite(pThis, &value))
            }
            return .init(from: value)
        }

    }

    internal static var IRandomAccessStreamVTable: __x_ABI_CWindows_CStorage_CStreams_CIRandomAccessStreamVtbl = .init(
        QueryInterface: { IRandomAccessStreamWrapper.queryInterface($0, $1, $2) },
        AddRef: { IRandomAccessStreamWrapper.addRef($0) },
        Release: { IRandomAccessStreamWrapper.release($0) },
        GetIids: {
            let size = MemoryLayout<test_component.IID>.size
            let iids = CoTaskMemAlloc(UInt64(size) * 6).assumingMemoryBound(to: test_component.IID.self)
            iids[0] = IUnknown.IID
            iids[1] = IInspectable.IID
            iids[2] = __ABI_Windows_Storage_Streams.IRandomAccessStreamWrapper.IID
            iids[3] = __ABI_Windows_Foundation.IClosableWrapper.IID
            iids[4] = __ABI_Windows_Storage_Streams.IInputStreamWrapper.IID
            iids[5] = __ABI_Windows_Storage_Streams.IOutputStreamWrapper.IID
            $1!.pointee = 6
            $2!.pointee = iids
            return S_OK
        },

        GetRuntimeClassName: {
            _ = $0
            let hstring = try! HString("Windows.Storage.Streams.IRandomAccessStream").detach()
            $1!.pointee = hstring
            return S_OK
        },

        GetTrustLevel: {
            _ = $0
            $1!.pointee = TrustLevel(rawValue: 0)
            return S_OK
        },

        get_Size: {
            guard let __unwrapped__instance = IRandomAccessStreamWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value = __unwrapped__instance.size
            $1?.initialize(to: value)
            return S_OK
        },

        put_Size: {
            guard let __unwrapped__instance = IRandomAccessStreamWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value: UInt64 = $1
            __unwrapped__instance.size = value
            return S_OK
        },

        GetInputStreamAt: {
            do {
                guard let __unwrapped__instance = IRandomAccessStreamWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let position: UInt64 = $1
                let stream = try __unwrapped__instance.getInputStreamAt(position)
                let streamWrapper = __ABI_Windows_Storage_Streams.IInputStreamWrapper(stream)
                streamWrapper?.copyTo($2)
                return S_OK
            } catch { return failWith(error: error) }
        },

        GetOutputStreamAt: {
            do {
                guard let __unwrapped__instance = IRandomAccessStreamWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let position: UInt64 = $1
                let stream = try __unwrapped__instance.getOutputStreamAt(position)
                let streamWrapper = __ABI_Windows_Storage_Streams.IOutputStreamWrapper(stream)
                streamWrapper?.copyTo($2)
                return S_OK
            } catch { return failWith(error: error) }
        },

        get_Position: {
            guard let __unwrapped__instance = IRandomAccessStreamWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value = __unwrapped__instance.position
            $1?.initialize(to: value)
            return S_OK
        },

        Seek: {
            do {
                guard let __unwrapped__instance = IRandomAccessStreamWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let position: UInt64 = $1
                try __unwrapped__instance.seek(position)
                return S_OK
            } catch { return failWith(error: error) }
        },

        CloneStream: {
            do {
                guard let __unwrapped__instance = IRandomAccessStreamWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let stream = try __unwrapped__instance.cloneStream()
                let streamWrapper = __ABI_Windows_Storage_Streams.IRandomAccessStreamWrapper(stream)
                streamWrapper?.copyTo($1)
                return S_OK
            } catch { return failWith(error: error) }
        },

        get_CanRead: {
            guard let __unwrapped__instance = IRandomAccessStreamWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value = __unwrapped__instance.canRead
            $1?.initialize(to: .init(from: value))
            return S_OK
        },

        get_CanWrite: {
            guard let __unwrapped__instance = IRandomAccessStreamWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value = __unwrapped__instance.canWrite
            $1?.initialize(to: .init(from: value))
            return S_OK
        }
    )

    public typealias IRandomAccessStreamWrapper = InterfaceWrapperBase<__IMPL_Windows_Storage_Streams.IRandomAccessStreamBridge>
}
@_spi(WinRTInternal)
public class IRandomAccessStreamMaker: MakeFromAbi {
    public typealias SwiftType = AnyIRandomAccessStream
    public static func from(abi: test_component.IInspectable) -> SwiftType {
        let swiftAbi: __ABI_Windows_Storage_Streams.IRandomAccessStream = try! abi.QueryInterface()
        return __IMPL_Windows_Storage_Streams.IRandomAccessStreamBridge.from(abi: RawPointer(swiftAbi))!
    }
}

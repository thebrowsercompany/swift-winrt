// WARNING: Please don't edit this file. It was generated by Swift/WinRT v0.0.1
// swiftlint:disable all
import Foundation
import Ctest_component
@_spi(WinRTInternal) @_spi(WinRTImplements) import WindowsFoundation
import CWindowsFoundation
import CWinRT

public typealias SignalDelegate = () throws -> ()

// MARK: - SignalDelegate Internals

@_spi(WinRTInternal)
extension __IMPL_test_component_Delegates {
    public class SignalDelegateBridge : WinRTDelegateBridge {
        public typealias Handler = SignalDelegate
        public typealias CABI = __x_ABI_Ctest__component_CDelegates_CISignalDelegate
        public typealias SwiftABI = __ABI_test_component_Delegates.SignalDelegate

        public static func from(abi: ComPtr<CABI>?) -> Handler? {
            guard let abi = abi else { return nil }
            let _default = SwiftABI(abi)
            let handler: Handler = { () in
                try _default.Invoke()
            }
            return handler
        }
    }
}
@_spi(WinRTInternal)
extension __ABI_test_component_Delegates {
    private static let IID___x_ABI_Ctest__component_CDelegates_CISignalDelegate: WindowsFoundation.IID = .init(
        Data1: 0x9EA7161A, Data2: 0xFCAB, Data3: 0x5037, Data4: ( 0x87,0xF0,0xB5,0x73,0xA5,0xE9,0x7B,0xE9 ) // 9EA7161A-FCAB-5037-87F0-B573A5E97BE9
    ) 

    public class SignalDelegate: WindowsFoundation.IUnknown {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_Ctest__component_CDelegates_CISignalDelegate }

        open func Invoke() throws {
            _ = try perform(as: __x_ABI_Ctest__component_CDelegates_CISignalDelegate.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Invoke(pThis))
            }
        }

    }


    typealias SignalDelegateWrapper = InterfaceWrapperBase<__IMPL_test_component_Delegates.SignalDelegateBridge>
    internal static var SignalDelegateVTable: __x_ABI_Ctest__component_CDelegates_CISignalDelegateVtbl = .init(
        QueryInterface: { SignalDelegateWrapper.queryInterface($0, $1, $2) },
        AddRef: { SignalDelegateWrapper.addRef($0) },
        Release: { SignalDelegateWrapper.release($0) },
        Invoke: {
            do {
                guard let __unwrapped__instance = SignalDelegateWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                try __unwrapped__instance()
                return S_OK
            } catch { return failWith(error: error) }
        }
    )
}
public extension WinRTDelegateBridge where CABI == __x_ABI_Ctest__component_CDelegates_CISignalDelegate {
    static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__ABI_test_component_Delegates.SignalDelegateVTable) { $0 }
        return .init(lpVtbl:vtblPtr)
    }
}


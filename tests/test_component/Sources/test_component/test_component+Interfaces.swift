// WARNING: Please don't edit this file. It was generated by Swift/WinRT v0.0.1
// swiftlint:disable all
import Foundation
import Ctest_component

// MARK: - IArrayScenarios

public protocol IArrayScenarios : WinRTInterface {
    func inArray(_ value: [Int32]) throws
    func outArray(_ value: inout [Int32]) throws
    func refArray(_ value: inout [Int32]) throws
    func returnArray() throws -> [Int32]
    func doubleIn(_ value1: [Int32], _ value2: [Int32]) throws
    func inAndOut(_ value: [Int32], _ results: inout [Int32]) throws
    func inAndRef(_ value: [Int32], _ results: inout [Int32]) throws
    func inAndRefNonBlittable(_ value: [Int32], _ results: inout [Bool]) throws
    func inAndReturn(_ value: [Int32]) throws -> [Int32]
    var arrayProperty: [Int32] { get set }
}

extension IArrayScenarios {
    public func queryInterface(_ iid: test_component.IID) -> IUnknownRef? {
        switch iid {
            case __ABI_test_component.IArrayScenariosWrapper.IID:
                let wrapper = __ABI_test_component.IArrayScenariosWrapper(self)
                return wrapper!.queryInterface(iid)
            default: return nil
        }
    }
}
public typealias AnyIArrayScenarios = any IArrayScenarios

// MARK: - IArrayScenarios Internals

@_spi(WinRTInternal)
extension __IMPL_test_component {
    public enum IArrayScenariosBridge : AbiInterfaceBridge {
        public typealias CABI = __x_ABI_Ctest__component_CIArrayScenarios
        public typealias SwiftABI = __ABI_test_component.IArrayScenarios
        public typealias SwiftProjection = AnyIArrayScenarios
        public static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
            guard let abi = abi else { return nil }
            return IArrayScenariosImpl(abi)
        }

        public static func makeAbi() -> CABI {
            let vtblPtr = withUnsafeMutablePointer(to: &__ABI_test_component.IArrayScenariosVTable) { $0 }
            return .init(lpVtbl: vtblPtr)
        }
    }

    fileprivate class IArrayScenariosImpl: IArrayScenarios, WinRTAbiImpl {
        fileprivate typealias Bridge = IArrayScenariosBridge
        fileprivate let _default: Bridge.SwiftABI
        fileprivate var thisPtr: test_component.IInspectable { _default }
        fileprivate init(_ fromAbi: ComPtr<Bridge.CABI>) {
            _default = Bridge.SwiftABI(fromAbi)
        }

        fileprivate func inArray(_ value: [Int32]) throws {
            try _default.InArray(value)
        }

        fileprivate func outArray(_ value: inout [Int32]) throws {
            try _default.OutArray(&value)
        }

        fileprivate func refArray(_ value: inout [Int32]) throws {
            try _default.RefArray(&value)
        }

        fileprivate func returnArray() throws -> [Int32] {
            try _default.ReturnArray()
        }

        fileprivate func doubleIn(_ value1: [Int32], _ value2: [Int32]) throws {
            try _default.DoubleIn(value1, value2)
        }

        fileprivate func inAndOut(_ value: [Int32], _ results: inout [Int32]) throws {
            try _default.InAndOut(value, &results)
        }

        fileprivate func inAndRef(_ value: [Int32], _ results: inout [Int32]) throws {
            try _default.InAndRef(value, &results)
        }

        fileprivate func inAndRefNonBlittable(_ value: [Int32], _ results: inout [Bool]) throws {
            try _default.InAndRefNonBlittable(value, &results)
        }

        fileprivate func inAndReturn(_ value: [Int32]) throws -> [Int32] {
            try _default.InAndReturn(value)
        }

        fileprivate var arrayProperty : [Int32] {
            get { try! _default.get_ArrayProperty() }
            set { try! _default.put_ArrayProperty(newValue) }
        }

    }

}
@_spi(WinRTInternal)
extension __ABI_test_component {
    private static let IID___x_ABI_Ctest__component_CIArrayScenarios: test_component.IID = .init(
        Data1: 0x56558D36, Data2: 0xC35F, Data3: 0x5624, Data4: ( 0xB3,0xB1,0xF3,0xF3,0x65,0x26,0x57,0xA3 ) // 56558D36-C35F-5624-B3B1-F3F3652657A3
    ) 
    public class IArrayScenarios: test_component.IInspectable {
        override public class var IID: test_component.IID { IID___x_ABI_Ctest__component_CIArrayScenarios }

        open func InArray(_ value: [Int32]) throws {
            try value.toABI { _value in
                _ = try perform(as: __x_ABI_Ctest__component_CIArrayScenarios.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.InArray(pThis, _value.count, _value.start))
                }
            }
        }

        open func OutArray(_ value: inout [Int32]) throws {
            var _value: WinRTArrayAbi<INT32> = (0, nil)
            _ = try perform(as: __x_ABI_Ctest__component_CIArrayScenarios.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.OutArray(pThis, &_value.count, &_value.start))
            }
            defer { CoTaskMemFree(_value.start) }
            value = .from(abi: _value)
        }

        open func RefArray(_ value: inout [Int32]) throws {
            try value.toABI { _value in
                _ = try perform(as: __x_ABI_Ctest__component_CIArrayScenarios.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.RefArray(pThis, _value.count, _value.start))
                }
            }
        }

        open func ReturnArray() throws -> [Int32] {
            var result: WinRTArrayAbi<INT32> = (0, nil)
            _ = try perform(as: __x_ABI_Ctest__component_CIArrayScenarios.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.ReturnArray(pThis, &result.count, &result.start))
            }
            defer { CoTaskMemFree(result.start) }
            return .from(abi: result)

        }

        open func get_ArrayProperty() throws -> [Int32] {
            var value: WinRTArrayAbi<INT32> = (0, nil)
            _ = try perform(as: __x_ABI_Ctest__component_CIArrayScenarios.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ArrayProperty(pThis, &value.count, &value.start))
            }
            defer { CoTaskMemFree(value.start) }
            return .from(abi: value)

        }

        open func put_ArrayProperty(_ value: [Int32]) throws {
            try value.toABI { _value in
                _ = try perform(as: __x_ABI_Ctest__component_CIArrayScenarios.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.put_ArrayProperty(pThis, _value.count, _value.start))
                }
            }
        }

        open func DoubleIn(_ value1: [Int32], _ value2: [Int32]) throws {
            try value1.toABI { _value1 in
                try value2.toABI { _value2 in
                _ = try perform(as: __x_ABI_Ctest__component_CIArrayScenarios.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.DoubleIn(pThis, _value1.count, _value1.start, _value2.count, _value2.start))
                }
            }
            }
        }

        open func InAndOut(_ value: [Int32], _ results: inout [Int32]) throws {
            try value.toABI { _value in
                var _results: WinRTArrayAbi<INT32> = (0, nil)
                _ = try perform(as: __x_ABI_Ctest__component_CIArrayScenarios.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.InAndOut(pThis, _value.count, _value.start, &_results.count, &_results.start))
                }
                defer { CoTaskMemFree(_results.start) }
                results = .from(abi: _results)
            }
        }

        open func InAndRef(_ value: [Int32], _ results: inout [Int32]) throws {
            try value.toABI { _value in
                try results.toABI { _results in
                _ = try perform(as: __x_ABI_Ctest__component_CIArrayScenarios.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.InAndRef(pThis, _value.count, _value.start, _results.count, _results.start))
                }
            }
            }
        }

        open func InAndRefNonBlittable(_ value: [Int32], _ results: inout [Bool]) throws {
            try value.toABI { _value in
                try results.toABI { _results in
                _ = try perform(as: __x_ABI_Ctest__component_CIArrayScenarios.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.InAndRefNonBlittable(pThis, _value.count, _value.start, _results.count, _results.start))
                }
                results = .from(abi: _results)
            }
            }
        }

        open func InAndReturn(_ value: [Int32]) throws -> [Int32] {
            var result: WinRTArrayAbi<INT32> = (0, nil)
            try value.toABI { _value in
                _ = try perform(as: __x_ABI_Ctest__component_CIArrayScenarios.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.InAndReturn(pThis, _value.count, _value.start, &result.count, &result.start))
                }
            }
            defer { CoTaskMemFree(result.start) }
            return .from(abi: result)

        }

    }

    internal static var IArrayScenariosVTable: __x_ABI_Ctest__component_CIArrayScenariosVtbl = .init(
        QueryInterface: { IArrayScenariosWrapper.queryInterface($0, $1, $2) },
        AddRef: { IArrayScenariosWrapper.addRef($0) },
        Release: { IArrayScenariosWrapper.release($0) },
        GetIids: {
            let size = MemoryLayout<test_component.IID>.size
            let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: test_component.IID.self)
            iids[0] = IUnknown.IID
            iids[1] = IInspectable.IID
            iids[2] = __ABI_test_component.IArrayScenariosWrapper.IID
            $1!.pointee = 3
            $2!.pointee = iids
            return S_OK
        },

        GetRuntimeClassName: {
            _ = $0
            let hstring = try! HString("test_component.IArrayScenarios").detach()
            $1!.pointee = hstring
            return S_OK
        },

        GetTrustLevel: {
            _ = $0
            $1!.pointee = TrustLevel(rawValue: 0)
            return S_OK
        },

        InArray: {
            do {
                guard let __unwrapped__instance = IArrayScenariosWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let value: [Int32] = .from(abi: (count: $1, start: $2))
                try __unwrapped__instance.inArray(value)
                return S_OK
            } catch { return failWith(error: error) }
        },

        OutArray: {
            do {
                guard let __unwrapped__instance = IArrayScenariosWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                var value = [Int32]()
                try __unwrapped__instance.outArray(&value)
                $1?.initialize(to: UInt32(value.count))
                value.fill(abi: $2)
                return S_OK
            } catch { return failWith(error: error) }
        },

        RefArray: {
            do {
                guard let __unwrapped__instance = IArrayScenariosWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                var value: [Int32] = .from(abi: (count: $1, start: $2))
                try __unwrapped__instance.refArray(&value)
                value.fill(abi: $2)
                return S_OK
            } catch { return failWith(error: error) }
        },

        ReturnArray: {
            do {
                guard let __unwrapped__instance = IArrayScenariosWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let result = try __unwrapped__instance.returnArray()
                $1?.initialize(to: UInt32(result.count))
                result.fill(abi: $2)
                return S_OK
            } catch { return failWith(error: error) }
        },

        get_ArrayProperty: {
            guard let __unwrapped__instance = IArrayScenariosWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value = __unwrapped__instance.arrayProperty
            $1?.initialize(to: UInt32(value.count))
            value.fill(abi: $2)
            return S_OK
        },

        put_ArrayProperty: {
            guard let __unwrapped__instance = IArrayScenariosWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value: [Int32] = .from(abi: (count: $1, start: $2))
            __unwrapped__instance.arrayProperty = value
            return S_OK
        },

        DoubleIn: {
            do {
                guard let __unwrapped__instance = IArrayScenariosWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let value1: [Int32] = .from(abi: (count: $1, start: $2))
                let value2: [Int32] = .from(abi: (count: $3, start: $4))
                try __unwrapped__instance.doubleIn(value1, value2)
                return S_OK
            } catch { return failWith(error: error) }
        },

        InAndOut: {
            do {
                guard let __unwrapped__instance = IArrayScenariosWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let value: [Int32] = .from(abi: (count: $1, start: $2))
                var results = [Int32]()
                try __unwrapped__instance.inAndOut(value, &results)
                $3?.initialize(to: UInt32(results.count))
                results.fill(abi: $4)
                return S_OK
            } catch { return failWith(error: error) }
        },

        InAndRef: {
            do {
                guard let __unwrapped__instance = IArrayScenariosWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let value: [Int32] = .from(abi: (count: $1, start: $2))
                var results: [Int32] = .from(abi: (count: $3, start: $4))
                try __unwrapped__instance.inAndRef(value, &results)
                results.fill(abi: $4)
                return S_OK
            } catch { return failWith(error: error) }
        },

        InAndRefNonBlittable: {
            do {
                guard let __unwrapped__instance = IArrayScenariosWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let value: [Int32] = .from(abi: (count: $1, start: $2))
                var results: [Bool] = .from(abi: (count: $3, start: $4))
                try __unwrapped__instance.inAndRefNonBlittable(value, &results)
                do {
                    try results.fill(abi: $4)
                } catch { return failWith(error: error) }
                return S_OK
            } catch { return failWith(error: error) }
        },

        InAndReturn: {
            do {
                guard let __unwrapped__instance = IArrayScenariosWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let value: [Int32] = .from(abi: (count: $1, start: $2))
                let result = try __unwrapped__instance.inAndReturn(value)
                $3?.initialize(to: UInt32(result.count))
                result.fill(abi: $4)
                return S_OK
            } catch { return failWith(error: error) }
        }
    )

    public typealias IArrayScenariosWrapper = InterfaceWrapperBase<__IMPL_test_component.IArrayScenariosBridge>
}
@_spi(WinRTInternal)
public class IArrayScenariosMaker: MakeFromAbi {
    public typealias SwiftType = AnyIArrayScenarios
    public static func from(abi: test_component.IInspectable) -> SwiftType {
        let swiftAbi: __ABI_test_component.IArrayScenarios = try! abi.QueryInterface()
        return __IMPL_test_component.IArrayScenariosBridge.from(abi: RawPointer(swiftAbi))!
    }
}
// MARK: - IArrayShouldBuild

public protocol IArrayShouldBuild : WinRTInterface {
    var scenarios: [test_component.AnyIArrayScenarios?] { get }
}

extension IArrayShouldBuild {
    public func queryInterface(_ iid: test_component.IID) -> IUnknownRef? {
        switch iid {
            case __ABI_test_component.IArrayShouldBuildWrapper.IID:
                let wrapper = __ABI_test_component.IArrayShouldBuildWrapper(self)
                return wrapper!.queryInterface(iid)
            default: return nil
        }
    }
}
public typealias AnyIArrayShouldBuild = any IArrayShouldBuild

// MARK: - IArrayShouldBuild Internals

@_spi(WinRTInternal)
extension __IMPL_test_component {
    public enum IArrayShouldBuildBridge : AbiInterfaceBridge {
        public typealias CABI = __x_ABI_Ctest__component_CIArrayShouldBuild
        public typealias SwiftABI = __ABI_test_component.IArrayShouldBuild
        public typealias SwiftProjection = AnyIArrayShouldBuild
        public static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
            guard let abi = abi else { return nil }
            return IArrayShouldBuildImpl(abi)
        }

        public static func makeAbi() -> CABI {
            let vtblPtr = withUnsafeMutablePointer(to: &__ABI_test_component.IArrayShouldBuildVTable) { $0 }
            return .init(lpVtbl: vtblPtr)
        }
    }

    fileprivate class IArrayShouldBuildImpl: IArrayShouldBuild, WinRTAbiImpl {
        fileprivate typealias Bridge = IArrayShouldBuildBridge
        fileprivate let _default: Bridge.SwiftABI
        fileprivate var thisPtr: test_component.IInspectable { _default }
        fileprivate init(_ fromAbi: ComPtr<Bridge.CABI>) {
            _default = Bridge.SwiftABI(fromAbi)
        }

        fileprivate var scenarios : [AnyIArrayScenarios?] {
            get { try! _default.get_Scenarios() }
        }

    }

}
@_spi(WinRTInternal)
extension __ABI_test_component {
    private static let IID___x_ABI_Ctest__component_CIArrayShouldBuild: test_component.IID = .init(
        Data1: 0xA0DB5CFD, Data2: 0xD277, Data3: 0x585A, Data4: ( 0xA0,0xAC,0xC2,0x18,0x5C,0x18,0xE9,0x72 ) // A0DB5CFD-D277-585A-A0AC-C2185C18E972
    ) 
    public class IArrayShouldBuild: test_component.IInspectable {
        override public class var IID: test_component.IID { IID___x_ABI_Ctest__component_CIArrayShouldBuild }

        open func get_Scenarios() throws -> [test_component.AnyIArrayScenarios?] {
            var value: WinRTArrayAbi<UnsafeMutablePointer<__x_ABI_Ctest__component_CIArrayScenarios>?> = (0, nil)
            _ = try perform(as: __x_ABI_Ctest__component_CIArrayShouldBuild.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Scenarios(pThis, &value.count, &value.start))
            }
            defer { CoTaskMemFree(value.start) }
            return .from(abiBridge: __IMPL_test_component.IArrayScenariosBridge.self, abi: value)

        }

    }

    internal static var IArrayShouldBuildVTable: __x_ABI_Ctest__component_CIArrayShouldBuildVtbl = .init(
        QueryInterface: { IArrayShouldBuildWrapper.queryInterface($0, $1, $2) },
        AddRef: { IArrayShouldBuildWrapper.addRef($0) },
        Release: { IArrayShouldBuildWrapper.release($0) },
        GetIids: {
            let size = MemoryLayout<test_component.IID>.size
            let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: test_component.IID.self)
            iids[0] = IUnknown.IID
            iids[1] = IInspectable.IID
            iids[2] = __ABI_test_component.IArrayShouldBuildWrapper.IID
            $1!.pointee = 3
            $2!.pointee = iids
            return S_OK
        },

        GetRuntimeClassName: {
            _ = $0
            let hstring = try! HString("test_component.IArrayShouldBuild").detach()
            $1!.pointee = hstring
            return S_OK
        },

        GetTrustLevel: {
            _ = $0
            $1!.pointee = TrustLevel(rawValue: 0)
            return S_OK
        },

        get_Scenarios: {
            guard let __unwrapped__instance = IArrayShouldBuildWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value = __unwrapped__instance.scenarios
            $1?.initialize(to: UInt32(value.count))
            value.fill(abi: $2, abiBridge: __IMPL_test_component.IArrayScenariosBridge.self)
            return S_OK
        }
    )

    public typealias IArrayShouldBuildWrapper = InterfaceWrapperBase<__IMPL_test_component.IArrayShouldBuildBridge>
}
@_spi(WinRTInternal)
public class IArrayShouldBuildMaker: MakeFromAbi {
    public typealias SwiftType = AnyIArrayShouldBuild
    public static func from(abi: test_component.IInspectable) -> SwiftType {
        let swiftAbi: __ABI_test_component.IArrayShouldBuild = try! abi.QueryInterface()
        return __IMPL_test_component.IArrayShouldBuildBridge.from(abi: RawPointer(swiftAbi))!
    }
}
// MARK: - IAsyncMethodsWithProgress

public protocol IAsyncMethodsWithProgress : WinRTInterface {
    func operationWithProgress(_ value: test_component.DateTime) throws -> test_component.AnyIAsyncOperationWithProgress<Int32, Double>!
}

extension IAsyncMethodsWithProgress {
    public func queryInterface(_ iid: test_component.IID) -> IUnknownRef? {
        switch iid {
            case __ABI_test_component.IAsyncMethodsWithProgressWrapper.IID:
                let wrapper = __ABI_test_component.IAsyncMethodsWithProgressWrapper(self)
                return wrapper!.queryInterface(iid)
            default: return nil
        }
    }
}
public typealias AnyIAsyncMethodsWithProgress = any IAsyncMethodsWithProgress

// MARK: - IAsyncMethodsWithProgress Internals

@_spi(WinRTInternal)
extension __IMPL_test_component {
    public enum IAsyncMethodsWithProgressBridge : AbiInterfaceBridge {
        public typealias CABI = __x_ABI_Ctest__component_CIAsyncMethodsWithProgress
        public typealias SwiftABI = __ABI_test_component.IAsyncMethodsWithProgress
        public typealias SwiftProjection = AnyIAsyncMethodsWithProgress
        public static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
            guard let abi = abi else { return nil }
            return IAsyncMethodsWithProgressImpl(abi)
        }

        public static func makeAbi() -> CABI {
            let vtblPtr = withUnsafeMutablePointer(to: &__ABI_test_component.IAsyncMethodsWithProgressVTable) { $0 }
            return .init(lpVtbl: vtblPtr)
        }
    }

    fileprivate class IAsyncMethodsWithProgressImpl: IAsyncMethodsWithProgress, WinRTAbiImpl {
        fileprivate typealias Bridge = IAsyncMethodsWithProgressBridge
        fileprivate let _default: Bridge.SwiftABI
        fileprivate var thisPtr: test_component.IInspectable { _default }
        fileprivate init(_ fromAbi: ComPtr<Bridge.CABI>) {
            _default = Bridge.SwiftABI(fromAbi)
        }

        fileprivate func operationWithProgress(_ value: test_component.DateTime) throws -> AnyIAsyncOperationWithProgress<Int32, Double>! {
            try _default.OperationWithProgress(value)
        }

    }

}
@_spi(WinRTInternal)
extension __ABI_test_component {
    private static let IID___x_ABI_Ctest__component_CIAsyncMethodsWithProgress: test_component.IID = .init(
        Data1: 0xD782777A, Data2: 0xBE43, Data3: 0x55FA, Data4: ( 0x92,0x6E,0x51,0xE6,0x40,0x23,0xD5,0xEC ) // D782777A-BE43-55FA-926E-51E64023D5EC
    ) 
    public class IAsyncMethodsWithProgress: test_component.IInspectable {
        override public class var IID: test_component.IID { IID___x_ABI_Ctest__component_CIAsyncMethodsWithProgress }

        open func OperationWithProgress(_ value: test_component.DateTime) throws -> test_component.AnyIAsyncOperationWithProgress<Int32, Double>? {
            let (operation) = try ComPtrs.initialize { operationAbi in
                _ = try perform(as: __x_ABI_Ctest__component_CIAsyncMethodsWithProgress.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.OperationWithProgress(pThis, .from(swift: value), &operationAbi))
                }
            }
            return test_component.__x_ABI_C__FIAsyncOperationWithProgress_2_int_doubleWrapper.unwrapFrom(abi: operation)
        }

    }

    internal static var IAsyncMethodsWithProgressVTable: __x_ABI_Ctest__component_CIAsyncMethodsWithProgressVtbl = .init(
        QueryInterface: { IAsyncMethodsWithProgressWrapper.queryInterface($0, $1, $2) },
        AddRef: { IAsyncMethodsWithProgressWrapper.addRef($0) },
        Release: { IAsyncMethodsWithProgressWrapper.release($0) },
        GetIids: {
            let size = MemoryLayout<test_component.IID>.size
            let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: test_component.IID.self)
            iids[0] = IUnknown.IID
            iids[1] = IInspectable.IID
            iids[2] = __ABI_test_component.IAsyncMethodsWithProgressWrapper.IID
            $1!.pointee = 3
            $2!.pointee = iids
            return S_OK
        },

        GetRuntimeClassName: {
            _ = $0
            let hstring = try! HString("test_component.IAsyncMethodsWithProgress").detach()
            $1!.pointee = hstring
            return S_OK
        },

        GetTrustLevel: {
            _ = $0
            $1!.pointee = TrustLevel(rawValue: 0)
            return S_OK
        },

        OperationWithProgress: {
            do {
                guard let __unwrapped__instance = IAsyncMethodsWithProgressWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let value: test_component.DateTime = .from(abi: $1)
                let operation = try __unwrapped__instance.operationWithProgress(value)
                let operationWrapper = test_component.__x_ABI_C__FIAsyncOperationWithProgress_2_int_doubleWrapper(operation)
                operationWrapper?.copyTo($2)
                return S_OK
            } catch { return failWith(error: error) }
        }
    )

    public typealias IAsyncMethodsWithProgressWrapper = InterfaceWrapperBase<__IMPL_test_component.IAsyncMethodsWithProgressBridge>
}
@_spi(WinRTInternal)
public class IAsyncMethodsWithProgressMaker: MakeFromAbi {
    public typealias SwiftType = AnyIAsyncMethodsWithProgress
    public static func from(abi: test_component.IInspectable) -> SwiftType {
        let swiftAbi: __ABI_test_component.IAsyncMethodsWithProgress = try! abi.QueryInterface()
        return __IMPL_test_component.IAsyncMethodsWithProgressBridge.from(abi: RawPointer(swiftAbi))!
    }
}
// MARK: - IAsyncOperationInt

public protocol IAsyncOperationInt : WinRTInterface {
    func complete(_ result: Int32) throws
    func completeWithError(_ errorCode: HRESULT) throws
}

extension IAsyncOperationInt {
    public func queryInterface(_ iid: test_component.IID) -> IUnknownRef? {
        switch iid {
            case __ABI_test_component.IAsyncOperationIntWrapper.IID:
                let wrapper = __ABI_test_component.IAsyncOperationIntWrapper(self)
                return wrapper!.queryInterface(iid)
            default: return nil
        }
    }
}
public typealias AnyIAsyncOperationInt = any IAsyncOperationInt

// MARK: - IAsyncOperationInt Internals

@_spi(WinRTInternal)
extension __IMPL_test_component {
    public enum IAsyncOperationIntBridge : AbiInterfaceBridge {
        public typealias CABI = __x_ABI_Ctest__component_CIAsyncOperationInt
        public typealias SwiftABI = __ABI_test_component.IAsyncOperationInt
        public typealias SwiftProjection = AnyIAsyncOperationInt
        public static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
            guard let abi = abi else { return nil }
            return IAsyncOperationIntImpl(abi)
        }

        public static func makeAbi() -> CABI {
            let vtblPtr = withUnsafeMutablePointer(to: &__ABI_test_component.IAsyncOperationIntVTable) { $0 }
            return .init(lpVtbl: vtblPtr)
        }
    }

    fileprivate class IAsyncOperationIntImpl: IAsyncOperationInt, WinRTAbiImpl {
        fileprivate typealias Bridge = IAsyncOperationIntBridge
        fileprivate let _default: Bridge.SwiftABI
        fileprivate var thisPtr: test_component.IInspectable { _default }
        fileprivate init(_ fromAbi: ComPtr<Bridge.CABI>) {
            _default = Bridge.SwiftABI(fromAbi)
        }

        fileprivate func complete(_ result: Int32) throws {
            try _default.Complete(result)
        }

        fileprivate func completeWithError(_ errorCode: HRESULT) throws {
            try _default.CompleteWithError(errorCode)
        }

    }

}
@_spi(WinRTInternal)
extension __ABI_test_component {
    private static let IID___x_ABI_Ctest__component_CIAsyncOperationInt: test_component.IID = .init(
        Data1: 0x1D730A19, Data2: 0xCD91, Data3: 0x5A59, Data4: ( 0x96,0x83,0x51,0xA6,0x11,0xFA,0x48,0x08 ) // 1D730A19-CD91-5A59-9683-51A611FA4808
    ) 
    public class IAsyncOperationInt: test_component.IInspectable {
        override public class var IID: test_component.IID { IID___x_ABI_Ctest__component_CIAsyncOperationInt }

        open func Complete(_ result: Int32) throws {
            _ = try perform(as: __x_ABI_Ctest__component_CIAsyncOperationInt.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Complete(pThis, result))
            }
        }

        open func CompleteWithError(_ errorCode: HRESULT) throws {
            _ = try perform(as: __x_ABI_Ctest__component_CIAsyncOperationInt.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.CompleteWithError(pThis, errorCode))
            }
        }

    }

    internal static var IAsyncOperationIntVTable: __x_ABI_Ctest__component_CIAsyncOperationIntVtbl = .init(
        QueryInterface: { IAsyncOperationIntWrapper.queryInterface($0, $1, $2) },
        AddRef: { IAsyncOperationIntWrapper.addRef($0) },
        Release: { IAsyncOperationIntWrapper.release($0) },
        GetIids: {
            let size = MemoryLayout<test_component.IID>.size
            let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: test_component.IID.self)
            iids[0] = IUnknown.IID
            iids[1] = IInspectable.IID
            iids[2] = __ABI_test_component.IAsyncOperationIntWrapper.IID
            $1!.pointee = 3
            $2!.pointee = iids
            return S_OK
        },

        GetRuntimeClassName: {
            _ = $0
            let hstring = try! HString("test_component.IAsyncOperationInt").detach()
            $1!.pointee = hstring
            return S_OK
        },

        GetTrustLevel: {
            _ = $0
            $1!.pointee = TrustLevel(rawValue: 0)
            return S_OK
        },

        Complete: {
            do {
                guard let __unwrapped__instance = IAsyncOperationIntWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let result: Int32 = $1
                try __unwrapped__instance.complete(result)
                return S_OK
            } catch { return failWith(error: error) }
        },

        CompleteWithError: {
            do {
                guard let __unwrapped__instance = IAsyncOperationIntWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let errorCode: HRESULT = $1
                try __unwrapped__instance.completeWithError(errorCode)
                return S_OK
            } catch { return failWith(error: error) }
        }
    )

    public typealias IAsyncOperationIntWrapper = InterfaceWrapperBase<__IMPL_test_component.IAsyncOperationIntBridge>
}
@_spi(WinRTInternal)
public class IAsyncOperationIntMaker: MakeFromAbi {
    public typealias SwiftType = AnyIAsyncOperationInt
    public static func from(abi: test_component.IInspectable) -> SwiftType {
        let swiftAbi: __ABI_test_component.IAsyncOperationInt = try! abi.QueryInterface()
        return __IMPL_test_component.IAsyncOperationIntBridge.from(abi: RawPointer(swiftAbi))!
    }
}
// MARK: - IBasic

public protocol IBasic : WinRTInterface {
    func method()
}

extension IBasic {
    public func queryInterface(_ iid: test_component.IID) -> IUnknownRef? {
        switch iid {
            case __ABI_test_component.IBasicWrapper.IID:
                let wrapper = __ABI_test_component.IBasicWrapper(self)
                return wrapper!.queryInterface(iid)
            default: return nil
        }
    }
}
public typealias AnyIBasic = any IBasic

// MARK: - IBasic Internals

@_spi(WinRTInternal)
extension __IMPL_test_component {
    public enum IBasicBridge : AbiInterfaceBridge {
        public typealias CABI = __x_ABI_Ctest__component_CIBasic
        public typealias SwiftABI = __ABI_test_component.IBasic
        public typealias SwiftProjection = AnyIBasic
        public static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
            guard let abi = abi else { return nil }
            return IBasicImpl(abi)
        }

        public static func makeAbi() -> CABI {
            let vtblPtr = withUnsafeMutablePointer(to: &__ABI_test_component.IBasicVTable) { $0 }
            return .init(lpVtbl: vtblPtr)
        }
    }

    fileprivate class IBasicImpl: IBasic, WinRTAbiImpl {
        fileprivate typealias Bridge = IBasicBridge
        fileprivate let _default: Bridge.SwiftABI
        fileprivate var thisPtr: test_component.IInspectable { _default }
        fileprivate init(_ fromAbi: ComPtr<Bridge.CABI>) {
            _default = Bridge.SwiftABI(fromAbi)
        }

        fileprivate func method() {
            try! _default.Method()
        }

    }

}
@_spi(WinRTInternal)
extension __ABI_test_component {
    private static let IID___x_ABI_Ctest__component_CIBasic: test_component.IID = .init(
        Data1: 0x636060A1, Data2: 0xE41D, Data3: 0x59DF, Data4: ( 0xA5,0xD3,0xFB,0x7C,0xE7,0xE1,0x79,0x2F ) // 636060A1-E41D-59DF-A5D3-FB7CE7E1792F
    ) 
    public class IBasic: test_component.IInspectable {
        override public class var IID: test_component.IID { IID___x_ABI_Ctest__component_CIBasic }

        open func Method() throws {
            _ = try perform(as: __x_ABI_Ctest__component_CIBasic.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Method(pThis))
            }
        }

    }

    internal static var IBasicVTable: __x_ABI_Ctest__component_CIBasicVtbl = .init(
        QueryInterface: { IBasicWrapper.queryInterface($0, $1, $2) },
        AddRef: { IBasicWrapper.addRef($0) },
        Release: { IBasicWrapper.release($0) },
        GetIids: {
            let size = MemoryLayout<test_component.IID>.size
            let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: test_component.IID.self)
            iids[0] = IUnknown.IID
            iids[1] = IInspectable.IID
            iids[2] = __ABI_test_component.IBasicWrapper.IID
            $1!.pointee = 3
            $2!.pointee = iids
            return S_OK
        },

        GetRuntimeClassName: {
            _ = $0
            let hstring = try! HString("test_component.IBasic").detach()
            $1!.pointee = hstring
            return S_OK
        },

        GetTrustLevel: {
            _ = $0
            $1!.pointee = TrustLevel(rawValue: 0)
            return S_OK
        },

        Method: {
            do {
                guard let __unwrapped__instance = IBasicWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                try __unwrapped__instance.method()
                return S_OK
            } catch { return failWith(error: error) }
        }
    )

    public typealias IBasicWrapper = InterfaceWrapperBase<__IMPL_test_component.IBasicBridge>
}
@_spi(WinRTInternal)
public class IBasicMaker: MakeFromAbi {
    public typealias SwiftType = AnyIBasic
    public static func from(abi: test_component.IInspectable) -> SwiftType {
        let swiftAbi: __ABI_test_component.IBasic = try! abi.QueryInterface()
        return __IMPL_test_component.IBasicBridge.from(abi: RawPointer(swiftAbi))!
    }
}
// MARK: - IIAmImplementable

public protocol IIAmImplementable : WinRTInterface {
    func inInt32(_ value: Int32) throws -> String
    func inString(_ value: String) throws -> String
    func inObject(_ value: Any!) throws -> String
    func inEnum(_ value: test_component.Signed) throws -> String
    func outInt32(_ value: inout Int32) throws
    func outString(_ value: inout String) throws
    func outObject(_ value: inout Any!) throws
    func outBlittableStruct(_ value: inout test_component.BlittableStruct) throws
    func outNonBlittableStruct(_ value: inout test_component.NonBlittableStruct) throws
    func outEnum(_ value: inout test_component.Signed) throws
    func returnObject() throws -> Any!
    func returnEnum() throws -> test_component.Signed
    func fireEvent(_ data: String) throws
    var enumProperty: test_component.Fruit { get set }
    var id: Foundation.UUID? { get set }
    var implementableEvent: Event<test_component.InDelegate> { get }
}

public extension EventSource where Handler == test_component.InDelegate {
    func invoke(_ value: String) throws {
        for handler in getInvocationList() {
            try handler(value)
        }
    }
}

extension IIAmImplementable {
    public func queryInterface(_ iid: test_component.IID) -> IUnknownRef? {
        switch iid {
            case __ABI_test_component.IIAmImplementableWrapper.IID:
                let wrapper = __ABI_test_component.IIAmImplementableWrapper(self)
                return wrapper!.queryInterface(iid)
            default: return nil
        }
    }
}
public typealias AnyIIAmImplementable = any IIAmImplementable

// MARK: - IIAmImplementable Internals

@_spi(WinRTInternal)
extension __IMPL_test_component {
    public enum IIAmImplementableBridge : AbiInterfaceBridge {
        public typealias CABI = __x_ABI_Ctest__component_CIIAmImplementable
        public typealias SwiftABI = __ABI_test_component.IIAmImplementable
        public typealias SwiftProjection = AnyIIAmImplementable
        public static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
            guard let abi = abi else { return nil }
            return IIAmImplementableImpl(abi)
        }

        public static func makeAbi() -> CABI {
            let vtblPtr = withUnsafeMutablePointer(to: &__ABI_test_component.IIAmImplementableVTable) { $0 }
            return .init(lpVtbl: vtblPtr)
        }
    }

    fileprivate class IIAmImplementableImpl: IIAmImplementable, WinRTAbiImpl {
        fileprivate typealias Bridge = IIAmImplementableBridge
        fileprivate let _default: Bridge.SwiftABI
        fileprivate var thisPtr: test_component.IInspectable { _default }
        fileprivate init(_ fromAbi: ComPtr<Bridge.CABI>) {
            _default = Bridge.SwiftABI(fromAbi)
        }

        fileprivate func inInt32(_ value: Int32) throws -> String {
            try _default.InInt32(value)
        }

        fileprivate func inString(_ value: String) throws -> String {
            try _default.InString(value)
        }

        fileprivate func inObject(_ value: Any!) throws -> String {
            try _default.InObject(value)
        }

        fileprivate func inEnum(_ value: Signed) throws -> String {
            try _default.InEnum(value)
        }

        fileprivate func outInt32(_ value: inout Int32) throws {
            try _default.OutInt32(&value)
        }

        fileprivate func outString(_ value: inout String) throws {
            try _default.OutString(&value)
        }

        fileprivate func outObject(_ value: inout Any!) throws {
            try _default.OutObject(&value)
        }

        fileprivate func outBlittableStruct(_ value: inout BlittableStruct) throws {
            try _default.OutBlittableStruct(&value)
        }

        fileprivate func outNonBlittableStruct(_ value: inout NonBlittableStruct) throws {
            try _default.OutNonBlittableStruct(&value)
        }

        fileprivate func outEnum(_ value: inout Signed) throws {
            try _default.OutEnum(&value)
        }

        fileprivate func returnObject() throws -> Any! {
            try _default.ReturnObject()
        }

        fileprivate func returnEnum() throws -> Signed {
            try _default.ReturnEnum()
        }

        fileprivate func fireEvent(_ data: String) throws {
            try _default.FireEvent(data)
        }

        fileprivate var enumProperty : Fruit {
            get { try! _default.get_EnumProperty() }
            set { try! _default.put_EnumProperty(newValue) }
        }

        fileprivate var id : Foundation.UUID? {
            get { try! _default.get_Id() }
            set { try! _default.put_Id(newValue) }
        }

        fileprivate lazy var implementableEvent : Event<test_component.InDelegate> = {
          .init(
            add: { [weak self] in
              guard let this = self?._default else { return .init() }
              return try! this.add_ImplementableEvent($0)
            },
            remove: { [weak self] in
             try? self?._default.remove_ImplementableEvent($0)
           }
          )
        }()

    }

}
@_spi(WinRTInternal)
extension __ABI_test_component {
    private static let IID___x_ABI_Ctest__component_CIIAmImplementable: test_component.IID = .init(
        Data1: 0x0B3C0120, Data2: 0xD138, Data3: 0x512B, Data4: ( 0x8D,0x38,0xF5,0x1E,0x35,0xF0,0x65,0xB2 ) // 0B3C0120-D138-512B-8D38-F51E35F065B2
    ) 
    public class IIAmImplementable: test_component.IInspectable {
        override public class var IID: test_component.IID { IID___x_ABI_Ctest__component_CIIAmImplementable }

        open func InInt32(_ value: Int32) throws -> String {
            var result: HSTRING?
            _ = try perform(as: __x_ABI_Ctest__component_CIIAmImplementable.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.InInt32(pThis, value, &result))
            }
            return .init(from: result)
        }

        open func InString(_ value: String) throws -> String {
            var result: HSTRING?
            let _value = try! HString(value)
            _ = try perform(as: __x_ABI_Ctest__component_CIIAmImplementable.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.InString(pThis, _value.get(), &result))
            }
            return .init(from: result)
        }

        open func InObject(_ value: Any?) throws -> String {
            var result: HSTRING?
            let valueWrapper = __ABI_.AnyWrapper(value)
            let _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_Ctest__component_CIIAmImplementable.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.InObject(pThis, _value, &result))
            }
            return .init(from: result)
        }

        open func InEnum(_ value: test_component.Signed) throws -> String {
            var result: HSTRING?
            _ = try perform(as: __x_ABI_Ctest__component_CIIAmImplementable.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.InEnum(pThis, value, &result))
            }
            return .init(from: result)
        }

        open func OutInt32(_ value: inout Int32) throws {
            _ = try perform(as: __x_ABI_Ctest__component_CIIAmImplementable.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.OutInt32(pThis, &value))
            }
        }

        open func OutString(_ value: inout String) throws {
            var _value: HSTRING?
            _ = try perform(as: __x_ABI_Ctest__component_CIIAmImplementable.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.OutString(pThis, &_value))
            }
            value = .init(from: _value)
            WindowsDeleteString(_value)
        }

        open func OutObject(_ value: inout Any?) throws {
            let (_value) = try ComPtrs.initialize { (_valueAbi) in
                _ = try perform(as: __x_ABI_Ctest__component_CIIAmImplementable.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.OutObject(pThis, &_valueAbi))
                }
            }
            value = __ABI_.AnyWrapper.unwrapFrom(abi: _value)
        }

        open func OutBlittableStruct(_ value: inout test_component.BlittableStruct) throws {
            var _value: __x_ABI_Ctest__component_CBlittableStruct = .init()
            _ = try perform(as: __x_ABI_Ctest__component_CIIAmImplementable.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.OutBlittableStruct(pThis, &_value))
            }
            value = .from(abi: _value)
        }

        open func OutNonBlittableStruct(_ value: inout test_component.NonBlittableStruct) throws {
            let _value: __ABI_test_component._ABI_NonBlittableStruct = .init()
            _ = try perform(as: __x_ABI_Ctest__component_CIIAmImplementable.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.OutNonBlittableStruct(pThis, &_value.val))
            }
            value = .from(abi: _value.val)
        }

        open func OutEnum(_ value: inout test_component.Signed) throws {
            _ = try perform(as: __x_ABI_Ctest__component_CIIAmImplementable.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.OutEnum(pThis, &value))
            }
        }

        open func ReturnObject() throws -> Any? {
            let (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_Ctest__component_CIIAmImplementable.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.ReturnObject(pThis, &resultAbi))
                }
            }
            return __ABI_.AnyWrapper.unwrapFrom(abi: result)
        }

        open func ReturnEnum() throws -> test_component.Signed {
            var result: __x_ABI_Ctest__component_CSigned = .init(0)
            _ = try perform(as: __x_ABI_Ctest__component_CIIAmImplementable.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.ReturnEnum(pThis, &result))
            }
            return result
        }

        open func get_EnumProperty() throws -> test_component.Fruit {
            var value: __x_ABI_Ctest__component_CFruit = .init(0)
            _ = try perform(as: __x_ABI_Ctest__component_CIIAmImplementable.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_EnumProperty(pThis, &value))
            }
            return value
        }

        open func put_EnumProperty(_ value: test_component.Fruit) throws {
            _ = try perform(as: __x_ABI_Ctest__component_CIIAmImplementable.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_EnumProperty(pThis, value))
            }
        }

        open func get_Id() throws -> Foundation.UUID? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_Ctest__component_CIIAmImplementable.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Id(pThis, &valueAbi))
                }
            }
            return test_component.__x_ABI_C__FIReference_1_GUIDWrapper.unwrapFrom(abi: value)
        }

        open func put_Id(_ value: Foundation.UUID?) throws {
            let valueWrapper = test_component.__x_ABI_C__FIReference_1_GUIDWrapper(value)
            let _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_Ctest__component_CIIAmImplementable.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Id(pThis, _value))
            }
        }

        open func add_ImplementableEvent(_ handler: test_component.InDelegate?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = __ABI_test_component_Delegates.InDelegateWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_Ctest__component_CIIAmImplementable.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_ImplementableEvent(pThis, _handler, &token))
            }
            return token
        }

        open func remove_ImplementableEvent(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_Ctest__component_CIIAmImplementable.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_ImplementableEvent(pThis, token))
            }
        }

        open func FireEvent(_ data: String) throws {
            let _data = try! HString(data)
            _ = try perform(as: __x_ABI_Ctest__component_CIIAmImplementable.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.FireEvent(pThis, _data.get()))
            }
        }

    }

    internal static var IIAmImplementableVTable: __x_ABI_Ctest__component_CIIAmImplementableVtbl = .init(
        QueryInterface: { IIAmImplementableWrapper.queryInterface($0, $1, $2) },
        AddRef: { IIAmImplementableWrapper.addRef($0) },
        Release: { IIAmImplementableWrapper.release($0) },
        GetIids: {
            let size = MemoryLayout<test_component.IID>.size
            let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: test_component.IID.self)
            iids[0] = IUnknown.IID
            iids[1] = IInspectable.IID
            iids[2] = __ABI_test_component.IIAmImplementableWrapper.IID
            $1!.pointee = 3
            $2!.pointee = iids
            return S_OK
        },

        GetRuntimeClassName: {
            _ = $0
            let hstring = try! HString("test_component.IIAmImplementable").detach()
            $1!.pointee = hstring
            return S_OK
        },

        GetTrustLevel: {
            _ = $0
            $1!.pointee = TrustLevel(rawValue: 0)
            return S_OK
        },

        InInt32: {
            do {
                guard let __unwrapped__instance = IIAmImplementableWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let value: Int32 = $1
                let result = try __unwrapped__instance.inInt32(value)
                $2?.initialize(to: try! HString(result).detach())
                return S_OK
            } catch { return failWith(error: error) }
        },

        InString: {
            do {
                guard let __unwrapped__instance = IIAmImplementableWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let value: String = .init(from: $1)
                let result = try __unwrapped__instance.inString(value)
                $2?.initialize(to: try! HString(result).detach())
                return S_OK
            } catch { return failWith(error: error) }
        },

        InObject: {
            do {
                guard let __unwrapped__instance = IIAmImplementableWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let value: Any? = __ABI_.AnyWrapper.unwrapFrom(abi: ComPtr($1))
                let result = try __unwrapped__instance.inObject(value)
                $2?.initialize(to: try! HString(result).detach())
                return S_OK
            } catch { return failWith(error: error) }
        },

        InEnum: {
            do {
                guard let __unwrapped__instance = IIAmImplementableWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let value: test_component.Signed = $1
                let result = try __unwrapped__instance.inEnum(value)
                $2?.initialize(to: try! HString(result).detach())
                return S_OK
            } catch { return failWith(error: error) }
        },

        OutInt32: {
            do {
                guard let __unwrapped__instance = IIAmImplementableWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                var value: Int32 = 0
                try __unwrapped__instance.outInt32(&value)
                $1?.initialize(to: value)
                return S_OK
            } catch { return failWith(error: error) }
        },

        OutString: {
            do {
                guard let __unwrapped__instance = IIAmImplementableWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                var value: String = ""
                try __unwrapped__instance.outString(&value)
                $1?.initialize(to: try! HString(value).detach())
                return S_OK
            } catch { return failWith(error: error) }
        },

        OutObject: {
            do {
                guard let __unwrapped__instance = IIAmImplementableWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                var value: Any?
                try __unwrapped__instance.outObject(&value)
                let valueWrapper = __ABI_.AnyWrapper(value)
                valueWrapper?.copyTo($1)
                return S_OK
            } catch { return failWith(error: error) }
        },

        OutBlittableStruct: {
            do {
                guard let __unwrapped__instance = IIAmImplementableWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                var value: test_component.BlittableStruct = .init()
                try __unwrapped__instance.outBlittableStruct(&value)
                $1?.initialize(to: .from(swift: value))
                return S_OK
            } catch { return failWith(error: error) }
        },

        OutNonBlittableStruct: {
            do {
                guard let __unwrapped__instance = IIAmImplementableWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                var value: test_component.NonBlittableStruct = .init()
                try __unwrapped__instance.outNonBlittableStruct(&value)
                let _value = __ABI_test_component._ABI_NonBlittableStruct(from: value)
                	$1?.initialize(to: _value.detach())
                return S_OK
            } catch { return failWith(error: error) }
        },

        OutEnum: {
            do {
                guard let __unwrapped__instance = IIAmImplementableWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                var value: test_component.Signed = .init(0)
                try __unwrapped__instance.outEnum(&value)
                $1?.initialize(to: value)
                return S_OK
            } catch { return failWith(error: error) }
        },

        ReturnObject: {
            do {
                guard let __unwrapped__instance = IIAmImplementableWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let result = try __unwrapped__instance.returnObject()
                let resultWrapper = __ABI_.AnyWrapper(result)
                resultWrapper?.copyTo($1)
                return S_OK
            } catch { return failWith(error: error) }
        },

        ReturnEnum: {
            do {
                guard let __unwrapped__instance = IIAmImplementableWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let result = try __unwrapped__instance.returnEnum()
                $1?.initialize(to: result)
                return S_OK
            } catch { return failWith(error: error) }
        },

        get_EnumProperty: {
            guard let __unwrapped__instance = IIAmImplementableWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value = __unwrapped__instance.enumProperty
            $1?.initialize(to: value)
            return S_OK
        },

        put_EnumProperty: {
            guard let __unwrapped__instance = IIAmImplementableWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value: test_component.Fruit = $1
            __unwrapped__instance.enumProperty = value
            return S_OK
        },

        get_Id: {
            guard let __unwrapped__instance = IIAmImplementableWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value = __unwrapped__instance.id
            let valueWrapper = test_component.__x_ABI_C__FIReference_1_GUIDWrapper(value)
            valueWrapper?.copyTo($1)
            return S_OK
        },

        put_Id: {
            guard let __unwrapped__instance = IIAmImplementableWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value: Foundation.UUID? = test_component.__x_ABI_C__FIReference_1_GUIDWrapper.unwrapFrom(abi: ComPtr($1))
            __unwrapped__instance.id = value
            return S_OK
        },

        add_ImplementableEvent: {
            guard let __unwrapped__instance = IIAmImplementableWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            guard let handler = __ABI_test_component_Delegates.InDelegateWrapper.unwrapFrom(abi: ComPtr($1)) else { return E_INVALIDARG }
            let token = __unwrapped__instance.implementableEvent.addHandler(handler)
            $2?.initialize(to: .from(swift: token))
            return S_OK
        },

        remove_ImplementableEvent: {
            guard let __unwrapped__instance = IIAmImplementableWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let token: EventRegistrationToken = $1
            __unwrapped__instance.implementableEvent.removeHandler(token)
            return S_OK
        },

        FireEvent: {
            do {
                guard let __unwrapped__instance = IIAmImplementableWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let data: String = .init(from: $1)
                try __unwrapped__instance.fireEvent(data)
                return S_OK
            } catch { return failWith(error: error) }
        }
    )

    public typealias IIAmImplementableWrapper = InterfaceWrapperBase<__IMPL_test_component.IIAmImplementableBridge>
}
@_spi(WinRTInternal)
public class IIAmImplementableMaker: MakeFromAbi {
    public typealias SwiftType = AnyIIAmImplementable
    public static func from(abi: test_component.IInspectable) -> SwiftType {
        let swiftAbi: __ABI_test_component.IIAmImplementable = try! abi.QueryInterface()
        return __IMPL_test_component.IIAmImplementableBridge.from(abi: RawPointer(swiftAbi))!
    }
}
// MARK: - IInterfaceWithObservableVector

public protocol IInterfaceWithObservableVector : WinRTInterface {
    func takeObservable(_ basics: test_component.AnyIObservableVector<test_component.AnyIBasic?>!) throws
}

extension IInterfaceWithObservableVector {
    public func queryInterface(_ iid: test_component.IID) -> IUnknownRef? {
        switch iid {
            case __ABI_test_component.IInterfaceWithObservableVectorWrapper.IID:
                let wrapper = __ABI_test_component.IInterfaceWithObservableVectorWrapper(self)
                return wrapper!.queryInterface(iid)
            default: return nil
        }
    }
}
public typealias AnyIInterfaceWithObservableVector = any IInterfaceWithObservableVector

// MARK: - IInterfaceWithObservableVector Internals

@_spi(WinRTInternal)
extension __IMPL_test_component {
    public enum IInterfaceWithObservableVectorBridge : AbiInterfaceBridge {
        public typealias CABI = __x_ABI_Ctest__component_CIInterfaceWithObservableVector
        public typealias SwiftABI = __ABI_test_component.IInterfaceWithObservableVector
        public typealias SwiftProjection = AnyIInterfaceWithObservableVector
        public static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
            guard let abi = abi else { return nil }
            return IInterfaceWithObservableVectorImpl(abi)
        }

        public static func makeAbi() -> CABI {
            let vtblPtr = withUnsafeMutablePointer(to: &__ABI_test_component.IInterfaceWithObservableVectorVTable) { $0 }
            return .init(lpVtbl: vtblPtr)
        }
    }

    fileprivate class IInterfaceWithObservableVectorImpl: IInterfaceWithObservableVector, WinRTAbiImpl {
        fileprivate typealias Bridge = IInterfaceWithObservableVectorBridge
        fileprivate let _default: Bridge.SwiftABI
        fileprivate var thisPtr: test_component.IInspectable { _default }
        fileprivate init(_ fromAbi: ComPtr<Bridge.CABI>) {
            _default = Bridge.SwiftABI(fromAbi)
        }

        fileprivate func takeObservable(_ basics: AnyIObservableVector<AnyIBasic?>!) throws {
            try _default.TakeObservable(basics)
        }

    }

}
@_spi(WinRTInternal)
extension __ABI_test_component {
    private static let IID___x_ABI_Ctest__component_CIInterfaceWithObservableVector: test_component.IID = .init(
        Data1: 0x364C232A, Data2: 0xB3A9, Data3: 0x5FD7, Data4: ( 0x91,0x3E,0x53,0x82,0xF7,0x2B,0x64,0xD7 ) // 364C232A-B3A9-5FD7-913E-5382F72B64D7
    ) 
    public class IInterfaceWithObservableVector: test_component.IInspectable {
        override public class var IID: test_component.IID { IID___x_ABI_Ctest__component_CIInterfaceWithObservableVector }

        open func TakeObservable(_ basics: test_component.AnyIObservableVector<test_component.AnyIBasic?>?) throws {
            let basicsWrapper = test_component.__x_ABI_C__FIObservableVector_1___x_ABI_Ctest__zcomponent__CIBasicWrapper(basics)
            let _basics = try! basicsWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_Ctest__component_CIInterfaceWithObservableVector.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.TakeObservable(pThis, _basics))
            }
        }

    }

    internal static var IInterfaceWithObservableVectorVTable: __x_ABI_Ctest__component_CIInterfaceWithObservableVectorVtbl = .init(
        QueryInterface: { IInterfaceWithObservableVectorWrapper.queryInterface($0, $1, $2) },
        AddRef: { IInterfaceWithObservableVectorWrapper.addRef($0) },
        Release: { IInterfaceWithObservableVectorWrapper.release($0) },
        GetIids: {
            let size = MemoryLayout<test_component.IID>.size
            let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: test_component.IID.self)
            iids[0] = IUnknown.IID
            iids[1] = IInspectable.IID
            iids[2] = __ABI_test_component.IInterfaceWithObservableVectorWrapper.IID
            $1!.pointee = 3
            $2!.pointee = iids
            return S_OK
        },

        GetRuntimeClassName: {
            _ = $0
            let hstring = try! HString("test_component.IInterfaceWithObservableVector").detach()
            $1!.pointee = hstring
            return S_OK
        },

        GetTrustLevel: {
            _ = $0
            $1!.pointee = TrustLevel(rawValue: 0)
            return S_OK
        },

        TakeObservable: {
            do {
                guard let __unwrapped__instance = IInterfaceWithObservableVectorWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let basics: test_component.AnyIObservableVector<test_component.AnyIBasic?>? = test_component.__x_ABI_C__FIObservableVector_1___x_ABI_Ctest__zcomponent__CIBasicWrapper.unwrapFrom(abi: ComPtr($1))
                try __unwrapped__instance.takeObservable(basics)
                return S_OK
            } catch { return failWith(error: error) }
        }
    )

    public typealias IInterfaceWithObservableVectorWrapper = InterfaceWrapperBase<__IMPL_test_component.IInterfaceWithObservableVectorBridge>
}
@_spi(WinRTInternal)
public class IInterfaceWithObservableVectorMaker: MakeFromAbi {
    public typealias SwiftType = AnyIInterfaceWithObservableVector
    public static func from(abi: test_component.IInspectable) -> SwiftType {
        let swiftAbi: __ABI_test_component.IInterfaceWithObservableVector = try! abi.QueryInterface()
        return __IMPL_test_component.IInterfaceWithObservableVectorBridge.from(abi: RawPointer(swiftAbi))!
    }
}
// MARK: - IReferenceTarget

public protocol IReferenceTarget : WinRTInterface {
    func method() throws
}

extension IReferenceTarget {
    public func queryInterface(_ iid: test_component.IID) -> IUnknownRef? {
        switch iid {
            case __ABI_test_component.IReferenceTargetWrapper.IID:
                let wrapper = __ABI_test_component.IReferenceTargetWrapper(self)
                return wrapper!.queryInterface(iid)
            default: return nil
        }
    }
}
public typealias AnyIReferenceTarget = any IReferenceTarget

// MARK: - IReferenceTarget Internals

@_spi(WinRTInternal)
extension __IMPL_test_component {
    public enum IReferenceTargetBridge : AbiInterfaceBridge {
        public typealias CABI = __x_ABI_Ctest__component_CIReferenceTarget
        public typealias SwiftABI = __ABI_test_component.IReferenceTarget
        public typealias SwiftProjection = AnyIReferenceTarget
        public static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
            guard let abi = abi else { return nil }
            return IReferenceTargetImpl(abi)
        }

        public static func makeAbi() -> CABI {
            let vtblPtr = withUnsafeMutablePointer(to: &__ABI_test_component.IReferenceTargetVTable) { $0 }
            return .init(lpVtbl: vtblPtr)
        }
    }

    fileprivate class IReferenceTargetImpl: IReferenceTarget, WinRTAbiImpl {
        fileprivate typealias Bridge = IReferenceTargetBridge
        fileprivate let _default: Bridge.SwiftABI
        fileprivate var thisPtr: test_component.IInspectable { _default }
        fileprivate init(_ fromAbi: ComPtr<Bridge.CABI>) {
            _default = Bridge.SwiftABI(fromAbi)
        }

        fileprivate func method() throws {
            try _default.Method()
        }

    }

}
@_spi(WinRTInternal)
extension __ABI_test_component {
    private static let IID___x_ABI_Ctest__component_CIReferenceTarget: test_component.IID = .init(
        Data1: 0x128E6AAA, Data2: 0xF772, Data3: 0x5A6F, Data4: ( 0x85,0x8B,0x3B,0x69,0x04,0x18,0xC8,0x73 ) // 128E6AAA-F772-5A6F-858B-3B690418C873
    ) 
    public class IReferenceTarget: test_component.IInspectable {
        override public class var IID: test_component.IID { IID___x_ABI_Ctest__component_CIReferenceTarget }

        open func Method() throws {
            _ = try perform(as: __x_ABI_Ctest__component_CIReferenceTarget.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Method(pThis))
            }
        }

    }

    internal static var IReferenceTargetVTable: __x_ABI_Ctest__component_CIReferenceTargetVtbl = .init(
        QueryInterface: { IReferenceTargetWrapper.queryInterface($0, $1, $2) },
        AddRef: { IReferenceTargetWrapper.addRef($0) },
        Release: { IReferenceTargetWrapper.release($0) },
        GetIids: {
            let size = MemoryLayout<test_component.IID>.size
            let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: test_component.IID.self)
            iids[0] = IUnknown.IID
            iids[1] = IInspectable.IID
            iids[2] = __ABI_test_component.IReferenceTargetWrapper.IID
            $1!.pointee = 3
            $2!.pointee = iids
            return S_OK
        },

        GetRuntimeClassName: {
            _ = $0
            let hstring = try! HString("test_component.IReferenceTarget").detach()
            $1!.pointee = hstring
            return S_OK
        },

        GetTrustLevel: {
            _ = $0
            $1!.pointee = TrustLevel(rawValue: 0)
            return S_OK
        },

        Method: {
            do {
                guard let __unwrapped__instance = IReferenceTargetWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                try __unwrapped__instance.method()
                return S_OK
            } catch { return failWith(error: error) }
        }
    )

    public typealias IReferenceTargetWrapper = InterfaceWrapperBase<__IMPL_test_component.IReferenceTargetBridge>
}
@_spi(WinRTInternal)
public class IReferenceTargetMaker: MakeFromAbi {
    public typealias SwiftType = AnyIReferenceTarget
    public static func from(abi: test_component.IInspectable) -> SwiftType {
        let swiftAbi: __ABI_test_component.IReferenceTarget = try! abi.QueryInterface()
        return __IMPL_test_component.IReferenceTargetBridge.from(abi: RawPointer(swiftAbi))!
    }
}
// MARK: - ISimpleDelegate

public protocol ISimpleDelegate : WinRTInterface {
    func doThis() throws
    func doThat(_ val: Int32) throws
}

extension ISimpleDelegate {
    public func queryInterface(_ iid: test_component.IID) -> IUnknownRef? {
        switch iid {
            case __ABI_test_component.ISimpleDelegateWrapper.IID:
                let wrapper = __ABI_test_component.ISimpleDelegateWrapper(self)
                return wrapper!.queryInterface(iid)
            default: return nil
        }
    }
}
public typealias AnyISimpleDelegate = any ISimpleDelegate

// MARK: - ISimpleDelegate Internals

@_spi(WinRTInternal)
extension __IMPL_test_component {
    public enum ISimpleDelegateBridge : AbiInterfaceBridge {
        public typealias CABI = __x_ABI_Ctest__component_CISimpleDelegate
        public typealias SwiftABI = __ABI_test_component.ISimpleDelegate
        public typealias SwiftProjection = AnyISimpleDelegate
        public static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
            guard let abi = abi else { return nil }
            return ISimpleDelegateImpl(abi)
        }

        public static func makeAbi() -> CABI {
            let vtblPtr = withUnsafeMutablePointer(to: &__ABI_test_component.ISimpleDelegateVTable) { $0 }
            return .init(lpVtbl: vtblPtr)
        }
    }

    fileprivate class ISimpleDelegateImpl: ISimpleDelegate, WinRTAbiImpl {
        fileprivate typealias Bridge = ISimpleDelegateBridge
        fileprivate let _default: Bridge.SwiftABI
        fileprivate var thisPtr: test_component.IInspectable { _default }
        fileprivate init(_ fromAbi: ComPtr<Bridge.CABI>) {
            _default = Bridge.SwiftABI(fromAbi)
        }

        fileprivate func doThis() throws {
            try _default.DoThis()
        }

        fileprivate func doThat(_ val: Int32) throws {
            try _default.DoThat(val)
        }

    }

}
@_spi(WinRTInternal)
extension __ABI_test_component {
    private static let IID___x_ABI_Ctest__component_CISimpleDelegate: test_component.IID = .init(
        Data1: 0xB73AD784, Data2: 0xEADD, Data3: 0x54B7, Data4: ( 0xA6,0x8E,0x8A,0xC5,0x6E,0xAB,0x73,0x87 ) // B73AD784-EADD-54B7-A68E-8AC56EAB7387
    ) 
    public class ISimpleDelegate: test_component.IInspectable {
        override public class var IID: test_component.IID { IID___x_ABI_Ctest__component_CISimpleDelegate }

        open func DoThis() throws {
            _ = try perform(as: __x_ABI_Ctest__component_CISimpleDelegate.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.DoThis(pThis))
            }
        }

        open func DoThat(_ val: Int32) throws {
            _ = try perform(as: __x_ABI_Ctest__component_CISimpleDelegate.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.DoThat(pThis, val))
            }
        }

    }

    internal static var ISimpleDelegateVTable: __x_ABI_Ctest__component_CISimpleDelegateVtbl = .init(
        QueryInterface: { ISimpleDelegateWrapper.queryInterface($0, $1, $2) },
        AddRef: { ISimpleDelegateWrapper.addRef($0) },
        Release: { ISimpleDelegateWrapper.release($0) },
        GetIids: {
            let size = MemoryLayout<test_component.IID>.size
            let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: test_component.IID.self)
            iids[0] = IUnknown.IID
            iids[1] = IInspectable.IID
            iids[2] = __ABI_test_component.ISimpleDelegateWrapper.IID
            $1!.pointee = 3
            $2!.pointee = iids
            return S_OK
        },

        GetRuntimeClassName: {
            _ = $0
            let hstring = try! HString("test_component.ISimpleDelegate").detach()
            $1!.pointee = hstring
            return S_OK
        },

        GetTrustLevel: {
            _ = $0
            $1!.pointee = TrustLevel(rawValue: 0)
            return S_OK
        },

        DoThis: {
            do {
                guard let __unwrapped__instance = ISimpleDelegateWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                try __unwrapped__instance.doThis()
                return S_OK
            } catch { return failWith(error: error) }
        },

        DoThat: {
            do {
                guard let __unwrapped__instance = ISimpleDelegateWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let val: Int32 = $1
                try __unwrapped__instance.doThat(val)
                return S_OK
            } catch { return failWith(error: error) }
        }
    )

    public typealias ISimpleDelegateWrapper = InterfaceWrapperBase<__IMPL_test_component.ISimpleDelegateBridge>
}
@_spi(WinRTInternal)
public class ISimpleDelegateMaker: MakeFromAbi {
    public typealias SwiftType = AnyISimpleDelegate
    public static func from(abi: test_component.IInspectable) -> SwiftType {
        let swiftAbi: __ABI_test_component.ISimpleDelegate = try! abi.QueryInterface()
        return __IMPL_test_component.ISimpleDelegateBridge.from(abi: RawPointer(swiftAbi))!
    }
}
// MARK: - InterfaceWithReturnDelegate

public protocol InterfaceWithReturnDelegate : WinRTInterface {
    var eventWithReturn: Event<test_component.ReturnInt32Delegate> { get }
}

public extension EventSource where Handler == test_component.ReturnInt32Delegate {
    @discardableResult func invoke() throws -> Int32 {
        var result:Int32 = 0
        for handler in getInvocationList() {
            result = try handler()
        }
        return result
    }
}

extension InterfaceWithReturnDelegate {
    public func queryInterface(_ iid: test_component.IID) -> IUnknownRef? {
        switch iid {
            case __ABI_test_component.InterfaceWithReturnDelegateWrapper.IID:
                let wrapper = __ABI_test_component.InterfaceWithReturnDelegateWrapper(self)
                return wrapper!.queryInterface(iid)
            default: return nil
        }
    }
}
public typealias AnyInterfaceWithReturnDelegate = any InterfaceWithReturnDelegate

// MARK: - InterfaceWithReturnDelegate Internals

@_spi(WinRTInternal)
extension __IMPL_test_component {
    public enum InterfaceWithReturnDelegateBridge : AbiInterfaceBridge {
        public typealias CABI = __x_ABI_Ctest__component_CInterfaceWithReturnDelegate
        public typealias SwiftABI = __ABI_test_component.InterfaceWithReturnDelegate
        public typealias SwiftProjection = AnyInterfaceWithReturnDelegate
        public static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
            guard let abi = abi else { return nil }
            return InterfaceWithReturnDelegateImpl(abi)
        }

        public static func makeAbi() -> CABI {
            let vtblPtr = withUnsafeMutablePointer(to: &__ABI_test_component.InterfaceWithReturnDelegateVTable) { $0 }
            return .init(lpVtbl: vtblPtr)
        }
    }

    fileprivate class InterfaceWithReturnDelegateImpl: InterfaceWithReturnDelegate, WinRTAbiImpl {
        fileprivate typealias Bridge = InterfaceWithReturnDelegateBridge
        fileprivate let _default: Bridge.SwiftABI
        fileprivate var thisPtr: test_component.IInspectable { _default }
        fileprivate init(_ fromAbi: ComPtr<Bridge.CABI>) {
            _default = Bridge.SwiftABI(fromAbi)
        }

        fileprivate lazy var eventWithReturn : Event<test_component.ReturnInt32Delegate> = {
          .init(
            add: { [weak self] in
              guard let this = self?._default else { return .init() }
              return try! this.add_EventWithReturn($0)
            },
            remove: { [weak self] in
             try? self?._default.remove_EventWithReturn($0)
           }
          )
        }()

    }

}
@_spi(WinRTInternal)
extension __ABI_test_component {
    private static let IID___x_ABI_Ctest__component_CInterfaceWithReturnDelegate: test_component.IID = .init(
        Data1: 0xB0EBC406, Data2: 0x17C0, Data3: 0x5703, Data4: ( 0xB9,0xC7,0x50,0xBE,0x67,0x5B,0xBC,0x95 ) // B0EBC406-17C0-5703-B9C7-50BE675BBC95
    ) 
    public class InterfaceWithReturnDelegate: test_component.IInspectable {
        override public class var IID: test_component.IID { IID___x_ABI_Ctest__component_CInterfaceWithReturnDelegate }

        open func add_EventWithReturn(_ handler: test_component.ReturnInt32Delegate?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = __ABI_test_component_Delegates.ReturnInt32DelegateWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_Ctest__component_CInterfaceWithReturnDelegate.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_EventWithReturn(pThis, _handler, &token))
            }
            return token
        }

        open func remove_EventWithReturn(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_Ctest__component_CInterfaceWithReturnDelegate.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_EventWithReturn(pThis, token))
            }
        }

    }

    internal static var InterfaceWithReturnDelegateVTable: __x_ABI_Ctest__component_CInterfaceWithReturnDelegateVtbl = .init(
        QueryInterface: { InterfaceWithReturnDelegateWrapper.queryInterface($0, $1, $2) },
        AddRef: { InterfaceWithReturnDelegateWrapper.addRef($0) },
        Release: { InterfaceWithReturnDelegateWrapper.release($0) },
        GetIids: {
            let size = MemoryLayout<test_component.IID>.size
            let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: test_component.IID.self)
            iids[0] = IUnknown.IID
            iids[1] = IInspectable.IID
            iids[2] = __ABI_test_component.InterfaceWithReturnDelegateWrapper.IID
            $1!.pointee = 3
            $2!.pointee = iids
            return S_OK
        },

        GetRuntimeClassName: {
            _ = $0
            let hstring = try! HString("test_component.InterfaceWithReturnDelegate").detach()
            $1!.pointee = hstring
            return S_OK
        },

        GetTrustLevel: {
            _ = $0
            $1!.pointee = TrustLevel(rawValue: 0)
            return S_OK
        },

        add_EventWithReturn: {
            guard let __unwrapped__instance = InterfaceWithReturnDelegateWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            guard let handler = __ABI_test_component_Delegates.ReturnInt32DelegateWrapper.unwrapFrom(abi: ComPtr($1)) else { return E_INVALIDARG }
            let token = __unwrapped__instance.eventWithReturn.addHandler(handler)
            $2?.initialize(to: .from(swift: token))
            return S_OK
        },

        remove_EventWithReturn: {
            guard let __unwrapped__instance = InterfaceWithReturnDelegateWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let token: EventRegistrationToken = $1
            __unwrapped__instance.eventWithReturn.removeHandler(token)
            return S_OK
        }
    )

    public typealias InterfaceWithReturnDelegateWrapper = InterfaceWrapperBase<__IMPL_test_component.InterfaceWithReturnDelegateBridge>
}
@_spi(WinRTInternal)
public class InterfaceWithReturnDelegateMaker: MakeFromAbi {
    public typealias SwiftType = AnyInterfaceWithReturnDelegate
    public static func from(abi: test_component.IInspectable) -> SwiftType {
        let swiftAbi: __ABI_test_component.InterfaceWithReturnDelegate = try! abi.QueryInterface()
        return __IMPL_test_component.InterfaceWithReturnDelegateBridge.from(abi: RawPointer(swiftAbi))!
    }
}
// MARK: - WithIterableGuids

public protocol WithIterableGuids : WinRTInterface {
    func ids() throws -> test_component.AnyIVector<Foundation.UUID>!
}

extension WithIterableGuids {
    public func queryInterface(_ iid: test_component.IID) -> IUnknownRef? {
        switch iid {
            case __ABI_test_component.WithIterableGuidsWrapper.IID:
                let wrapper = __ABI_test_component.WithIterableGuidsWrapper(self)
                return wrapper!.queryInterface(iid)
            default: return nil
        }
    }
}
public typealias AnyWithIterableGuids = any WithIterableGuids

// MARK: - WithIterableGuids Internals

@_spi(WinRTInternal)
extension __IMPL_test_component {
    public enum WithIterableGuidsBridge : AbiInterfaceBridge {
        public typealias CABI = __x_ABI_Ctest__component_CWithIterableGuids
        public typealias SwiftABI = __ABI_test_component.WithIterableGuids
        public typealias SwiftProjection = AnyWithIterableGuids
        public static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
            guard let abi = abi else { return nil }
            return WithIterableGuidsImpl(abi)
        }

        public static func makeAbi() -> CABI {
            let vtblPtr = withUnsafeMutablePointer(to: &__ABI_test_component.WithIterableGuidsVTable) { $0 }
            return .init(lpVtbl: vtblPtr)
        }
    }

    fileprivate class WithIterableGuidsImpl: WithIterableGuids, WinRTAbiImpl {
        fileprivate typealias Bridge = WithIterableGuidsBridge
        fileprivate let _default: Bridge.SwiftABI
        fileprivate var thisPtr: test_component.IInspectable { _default }
        fileprivate init(_ fromAbi: ComPtr<Bridge.CABI>) {
            _default = Bridge.SwiftABI(fromAbi)
        }

        fileprivate func ids() throws -> AnyIVector<Foundation.UUID>! {
            try _default.IDs()
        }

    }

}
@_spi(WinRTInternal)
extension __ABI_test_component {
    private static let IID___x_ABI_Ctest__component_CWithIterableGuids: test_component.IID = .init(
        Data1: 0xF8BD03F6, Data2: 0xBD7E, Data3: 0x586D, Data4: ( 0x96,0xB8,0x63,0xB6,0x39,0xA8,0xD0,0x42 ) // F8BD03F6-BD7E-586D-96B8-63B639A8D042
    ) 
    public class WithIterableGuids: test_component.IInspectable {
        override public class var IID: test_component.IID { IID___x_ABI_Ctest__component_CWithIterableGuids }

        open func IDs() throws -> test_component.AnyIVector<Foundation.UUID>? {
            let (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_Ctest__component_CWithIterableGuids.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.IDs(pThis, &resultAbi))
                }
            }
            return test_component.__x_ABI_C__FIVector_1_GUIDWrapper.unwrapFrom(abi: result)
        }

    }

    internal static var WithIterableGuidsVTable: __x_ABI_Ctest__component_CWithIterableGuidsVtbl = .init(
        QueryInterface: { WithIterableGuidsWrapper.queryInterface($0, $1, $2) },
        AddRef: { WithIterableGuidsWrapper.addRef($0) },
        Release: { WithIterableGuidsWrapper.release($0) },
        GetIids: {
            let size = MemoryLayout<test_component.IID>.size
            let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: test_component.IID.self)
            iids[0] = IUnknown.IID
            iids[1] = IInspectable.IID
            iids[2] = __ABI_test_component.WithIterableGuidsWrapper.IID
            $1!.pointee = 3
            $2!.pointee = iids
            return S_OK
        },

        GetRuntimeClassName: {
            _ = $0
            let hstring = try! HString("test_component.WithIterableGuids").detach()
            $1!.pointee = hstring
            return S_OK
        },

        GetTrustLevel: {
            _ = $0
            $1!.pointee = TrustLevel(rawValue: 0)
            return S_OK
        },

        IDs: {
            do {
                guard let __unwrapped__instance = WithIterableGuidsWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let result = try __unwrapped__instance.ids()
                let resultWrapper = test_component.__x_ABI_C__FIVector_1_GUIDWrapper(result)
                resultWrapper?.copyTo($1)
                return S_OK
            } catch { return failWith(error: error) }
        }
    )

    public typealias WithIterableGuidsWrapper = InterfaceWrapperBase<__IMPL_test_component.WithIterableGuidsBridge>
}
@_spi(WinRTInternal)
public class WithIterableGuidsMaker: MakeFromAbi {
    public typealias SwiftType = AnyWithIterableGuids
    public static func from(abi: test_component.IInspectable) -> SwiftType {
        let swiftAbi: __ABI_test_component.WithIterableGuids = try! abi.QueryInterface()
        return __IMPL_test_component.WithIterableGuidsBridge.from(abi: RawPointer(swiftAbi))!
    }
}
// MARK: - WithKeyword

public protocol WithKeyword : WinRTInterface {
    func `enum`(_ `extension`: String) throws
    func `subscript`() throws
    var `struct`: String { get set }
    var `repeat`: Event<EventHandler<Any?>> { get }
}

extension WithKeyword {
    public func queryInterface(_ iid: test_component.IID) -> IUnknownRef? {
        switch iid {
            case __ABI_test_component.WithKeywordWrapper.IID:
                let wrapper = __ABI_test_component.WithKeywordWrapper(self)
                return wrapper!.queryInterface(iid)
            default: return nil
        }
    }
}
public typealias AnyWithKeyword = any WithKeyword

// MARK: - WithKeyword Internals

@_spi(WinRTInternal)
extension __IMPL_test_component {
    public enum WithKeywordBridge : AbiInterfaceBridge {
        public typealias CABI = __x_ABI_Ctest__component_CWithKeyword
        public typealias SwiftABI = __ABI_test_component.WithKeyword
        public typealias SwiftProjection = AnyWithKeyword
        public static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
            guard let abi = abi else { return nil }
            return WithKeywordImpl(abi)
        }

        public static func makeAbi() -> CABI {
            let vtblPtr = withUnsafeMutablePointer(to: &__ABI_test_component.WithKeywordVTable) { $0 }
            return .init(lpVtbl: vtblPtr)
        }
    }

    fileprivate class WithKeywordImpl: WithKeyword, WinRTAbiImpl {
        fileprivate typealias Bridge = WithKeywordBridge
        fileprivate let _default: Bridge.SwiftABI
        fileprivate var thisPtr: test_component.IInspectable { _default }
        fileprivate init(_ fromAbi: ComPtr<Bridge.CABI>) {
            _default = Bridge.SwiftABI(fromAbi)
        }

        fileprivate func `enum`(_ `extension`: String) throws {
            try _default.Enum(`extension`)
        }

        fileprivate func `subscript`() throws {
            try _default.Subscript()
        }

        fileprivate var `struct` : String {
            get { try! _default.get_Struct() }
            set { try! _default.put_Struct(newValue) }
        }

        fileprivate lazy var `repeat` : Event<EventHandler<Any?>> = {
          .init(
            add: { [weak self] in
              guard let this = self?._default else { return .init() }
              return try! this.add_Repeat($0)
            },
            remove: { [weak self] in
             try? self?._default.remove_Repeat($0)
           }
          )
        }()

    }

}
@_spi(WinRTInternal)
extension __ABI_test_component {
    private static let IID___x_ABI_Ctest__component_CWithKeyword: test_component.IID = .init(
        Data1: 0x18D4C535, Data2: 0x1785, Data3: 0x52CA, Data4: ( 0x88,0x51,0x8C,0xF3,0xD5,0x15,0x70,0x8A ) // 18D4C535-1785-52CA-8851-8CF3D515708A
    ) 
    public class WithKeyword: test_component.IInspectable {
        override public class var IID: test_component.IID { IID___x_ABI_Ctest__component_CWithKeyword }

        open func Enum(_ `extension`: String) throws {
            let _extension = try! HString(`extension`)
            _ = try perform(as: __x_ABI_Ctest__component_CWithKeyword.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Enum(pThis, _extension.get()))
            }
        }

        open func get_Struct() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_Ctest__component_CWithKeyword.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Struct(pThis, &value))
            }
            return .init(from: value)
        }

        open func put_Struct(_ value: String) throws {
            let _value = try! HString(value)
            _ = try perform(as: __x_ABI_Ctest__component_CWithKeyword.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Struct(pThis, _value.get()))
            }
        }

        open func add_Repeat(_ handler: EventHandler<Any?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = test_component.__x_ABI_C__FIEventHandler_1_IInspectableWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_Ctest__component_CWithKeyword.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_Repeat(pThis, _handler, &token))
            }
            return token
        }

        open func remove_Repeat(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_Ctest__component_CWithKeyword.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_Repeat(pThis, token))
            }
        }

        open func Subscript() throws {
            _ = try perform(as: __x_ABI_Ctest__component_CWithKeyword.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Subscript(pThis))
            }
        }

    }

    internal static var WithKeywordVTable: __x_ABI_Ctest__component_CWithKeywordVtbl = .init(
        QueryInterface: { WithKeywordWrapper.queryInterface($0, $1, $2) },
        AddRef: { WithKeywordWrapper.addRef($0) },
        Release: { WithKeywordWrapper.release($0) },
        GetIids: {
            let size = MemoryLayout<test_component.IID>.size
            let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: test_component.IID.self)
            iids[0] = IUnknown.IID
            iids[1] = IInspectable.IID
            iids[2] = __ABI_test_component.WithKeywordWrapper.IID
            $1!.pointee = 3
            $2!.pointee = iids
            return S_OK
        },

        GetRuntimeClassName: {
            _ = $0
            let hstring = try! HString("test_component.WithKeyword").detach()
            $1!.pointee = hstring
            return S_OK
        },

        GetTrustLevel: {
            _ = $0
            $1!.pointee = TrustLevel(rawValue: 0)
            return S_OK
        },

        Enum: {
            do {
                guard let __unwrapped__instance = WithKeywordWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let `extension`: String = .init(from: $1)
                try __unwrapped__instance.`enum`(`extension`)
                return S_OK
            } catch { return failWith(error: error) }
        },

        get_Struct: {
            guard let __unwrapped__instance = WithKeywordWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value = __unwrapped__instance.`struct`
            $1?.initialize(to: try! HString(value).detach())
            return S_OK
        },

        put_Struct: {
            guard let __unwrapped__instance = WithKeywordWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value: String = .init(from: $1)
            __unwrapped__instance.`struct` = value
            return S_OK
        },

        add_Repeat: {
            guard let __unwrapped__instance = WithKeywordWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            guard let handler = test_component.__x_ABI_C__FIEventHandler_1_IInspectableWrapper.unwrapFrom(abi: ComPtr($1)) else { return E_INVALIDARG }
            let token = __unwrapped__instance.`repeat`.addHandler(handler)
            $2?.initialize(to: .from(swift: token))
            return S_OK
        },

        remove_Repeat: {
            guard let __unwrapped__instance = WithKeywordWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let token: EventRegistrationToken = $1
            __unwrapped__instance.`repeat`.removeHandler(token)
            return S_OK
        },

        Subscript: {
            do {
                guard let __unwrapped__instance = WithKeywordWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                try __unwrapped__instance.`subscript`()
                return S_OK
            } catch { return failWith(error: error) }
        }
    )

    public typealias WithKeywordWrapper = InterfaceWrapperBase<__IMPL_test_component.WithKeywordBridge>
}
@_spi(WinRTInternal)
public class WithKeywordMaker: MakeFromAbi {
    public typealias SwiftType = AnyWithKeyword
    public static func from(abi: test_component.IInspectable) -> SwiftType {
        let swiftAbi: __ABI_test_component.WithKeyword = try! abi.QueryInterface()
        return __IMPL_test_component.WithKeywordBridge.from(abi: RawPointer(swiftAbi))!
    }
}

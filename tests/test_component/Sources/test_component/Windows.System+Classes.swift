// WARNING: Please don't edit this file. It was generated by Swift/WinRT v0.0.1
// swiftlint:disable all
import Foundation
import Ctest_component

// MARK: - User

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.system.user)
public final class User : WinRTClass {
    private typealias SwiftABI = __ABI_Windows_System.IUser
    private typealias CABI = __x_ABI_CWindows_CSystem_CIUser
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: test_component.IInspectable) {
        super.init(fromAbi)
    }

    private static let _IUserStatics: __ABI_Windows_System.IUserStatics = try! RoGetActivationFactory("Windows.System.User")
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.system.user.createwatcher)
    public static func createWatcher() throws -> UserWatcher! {
        return try _IUserStatics.CreateWatcher()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.system.user.findallasync)
    public static func findAllAsync() throws -> AnyIAsyncOperation<AnyIVectorView<User?>?>! {
        return try _IUserStatics.FindAllAsync()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.system.user.findallasync)
    public static func findAllAsync(_ type: UserType) throws -> AnyIAsyncOperation<AnyIVectorView<User?>?>! {
        return try _IUserStatics.FindAllAsyncByType(type)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.system.user.findallasync)
    public static func findAllAsync(_ type: UserType, _ status: UserAuthenticationStatus) throws -> AnyIAsyncOperation<AnyIVectorView<User?>?>! {
        return try _IUserStatics.FindAllAsyncByTypeAndStatus(type, status)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.system.user.getfromid)
    public static func getFromId(_ nonRoamableId: String) throws -> User! {
        return try _IUserStatics.GetFromId(nonRoamableId)
    }

    private static let _IUserStatics2: __ABI_Windows_System.IUserStatics2 = try! RoGetActivationFactory("Windows.System.User")
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.system.user.getdefault)
    public static func getDefault() throws -> User! {
        return try _IUserStatics2.GetDefault()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.system.user.getpropertyasync)
    public func getPropertyAsync(_ value: String) throws -> AnyIAsyncOperation<Any?>! {
        try _default.GetPropertyAsync(value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.system.user.getpropertiesasync)
    public func getPropertiesAsync(_ values: AnyIVectorView<String>!) throws -> AnyIAsyncOperation<test_component.AnyIPropertySet?>! {
        try _default.GetPropertiesAsync(values)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.system.user.getpictureasync)
    public func getPictureAsync(_ desiredSize: UserPictureSize) throws -> AnyIAsyncOperation<test_component.AnyIRandomAccessStreamReference?>! {
        try _default.GetPictureAsync(desiredSize)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.system.user.authenticationstatus)
    public var authenticationStatus : UserAuthenticationStatus {
        get { try! _default.get_AuthenticationStatus() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.system.user.nonroamableid)
    public var nonRoamableId : String {
        get { try! _default.get_NonRoamableId() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.system.user.type)
    public var type : UserType {
        get { try! _default.get_Type() }
    }

    private lazy var _IUser2: __ABI_Windows_System.IUser2! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.system.user.checkuserageconsentgroupasync)
    public func checkUserAgeConsentGroupAsync(_ consentGroup: UserAgeConsentGroup) throws -> AnyIAsyncOperation<UserAgeConsentResult>! {
        try _IUser2.CheckUserAgeConsentGroupAsync(consentGroup)
    }

    deinit {
        _default = nil
        _IUser2 = nil
    }
}

// MARK: - User Internals

@_spi(WinRTInternal)
extension __IMPL_Windows_System {
    public enum UserBridge: AbiBridge {
        public typealias SwiftProjection = User
        public typealias CABI = __x_ABI_CWindows_CSystem_CIUser
        public static func from(abi: ComPtr<__x_ABI_CWindows_CSystem_CIUser>?) -> User? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: test_component.IInspectable(abi))
        }
    }

}
@_spi(WinRTInternal)
public class UserMaker: MakeFromAbi {
    public typealias SwiftType = User
    public static func from(abi: test_component.IInspectable) -> SwiftType {
        return User(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
extension __ABI_Windows_System {
    private static let IID___x_ABI_CWindows_CSystem_CIUser: test_component.IID = .init(
        Data1: 0xDF9A26C6, Data2: 0xE746, Data3: 0x4BCD, Data4: ( 0xB5,0xD4,0x12,0x01,0x03,0xC4,0x20,0x9B ) // DF9A26C6-E746-4BCD-B5D4-120103C4209B
    ) 

    public class IUser: test_component.IInspectable {
        override public class var IID: test_component.IID { IID___x_ABI_CWindows_CSystem_CIUser }

        public func get_NonRoamableId() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CWindows_CSystem_CIUser.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_NonRoamableId(pThis, &value))
            }
            return .init(from: value)
        }

        public func get_AuthenticationStatus() throws -> test_component.UserAuthenticationStatus {
            var value: __x_ABI_CWindows_CSystem_CUserAuthenticationStatus = .init(0)
            _ = try perform(as: __x_ABI_CWindows_CSystem_CIUser.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_AuthenticationStatus(pThis, &value))
            }
            return value
        }

        public func get_Type() throws -> test_component.UserType {
            var value: __x_ABI_CWindows_CSystem_CUserType = .init(0)
            _ = try perform(as: __x_ABI_CWindows_CSystem_CIUser.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Type(pThis, &value))
            }
            return value
        }

        public func GetPropertyAsync(_ value: String) throws -> test_component.AnyIAsyncOperation<Any?>? {
            let (operation) = try ComPtrs.initialize { operationAbi in
                let _value = try! HString(value)
                _ = try perform(as: __x_ABI_CWindows_CSystem_CIUser.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetPropertyAsync(pThis, _value.get(), &operationAbi))
                }
            }
            return test_component.__x_ABI_C__FIAsyncOperation_1_IInspectableWrapper.unwrapFrom(abi: operation)
        }

        public func GetPropertiesAsync(_ values: test_component.AnyIVectorView<String>?) throws -> test_component.AnyIAsyncOperation<test_component.AnyIPropertySet?>? {
            let (operation) = try ComPtrs.initialize { operationAbi in
                let valuesWrapper = test_component.__x_ABI_C__FIVectorView_1_HSTRINGWrapper(values)
                let _values = try! valuesWrapper?.toABI { $0 }
                _ = try perform(as: __x_ABI_CWindows_CSystem_CIUser.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetPropertiesAsync(pThis, _values, &operationAbi))
                }
            }
            return test_component.__x_ABI_C__FIAsyncOperation_1___x_ABI_C__F__CIPropertySetWrapper.unwrapFrom(abi: operation)
        }

        public func GetPictureAsync(_ desiredSize: test_component.UserPictureSize) throws -> test_component.AnyIAsyncOperation<test_component.AnyIRandomAccessStreamReference?>? {
            let (operation) = try ComPtrs.initialize { operationAbi in
                _ = try perform(as: __x_ABI_CWindows_CSystem_CIUser.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetPictureAsync(pThis, desiredSize, &operationAbi))
                }
            }
            return test_component.__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStreams__CIRandomAccessStreamReferenceWrapper.unwrapFrom(abi: operation)
        }

    }

    private static let IID___x_ABI_CWindows_CSystem_CIUser2: test_component.IID = .init(
        Data1: 0x98BA5628, Data2: 0xA6E3, Data3: 0x518E, Data4: ( 0x89,0xD9,0xD3,0xB2,0xB1,0x99,0x1A,0x10 ) // 98BA5628-A6E3-518E-89D9-D3B2B1991A10
    ) 

    public class IUser2: test_component.IInspectable {
        override public class var IID: test_component.IID { IID___x_ABI_CWindows_CSystem_CIUser2 }

        public func CheckUserAgeConsentGroupAsync(_ consentGroup: test_component.UserAgeConsentGroup) throws -> test_component.AnyIAsyncOperation<test_component.UserAgeConsentResult>? {
            let (operation) = try ComPtrs.initialize { operationAbi in
                _ = try perform(as: __x_ABI_CWindows_CSystem_CIUser2.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CheckUserAgeConsentGroupAsync(pThis, consentGroup, &operationAbi))
                }
            }
            return test_component.__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CUserAgeConsentResultWrapper.unwrapFrom(abi: operation)
        }

    }

    private static let IID___x_ABI_CWindows_CSystem_CIUserStatics: test_component.IID = .init(
        Data1: 0x155EB23B, Data2: 0x242A, Data3: 0x45E0, Data4: ( 0xA2,0xE9,0x31,0x71,0xFC,0x6A,0x7F,0xDD ) // 155EB23B-242A-45E0-A2E9-3171FC6A7FDD
    ) 

    public class IUserStatics: test_component.IInspectable {
        override public class var IID: test_component.IID { IID___x_ABI_CWindows_CSystem_CIUserStatics }

        public func CreateWatcher() throws -> test_component.UserWatcher? {
            let (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CWindows_CSystem_CIUserStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateWatcher(pThis, &resultAbi))
                }
            }
            return __IMPL_Windows_System.UserWatcherBridge.from(abi: result)
        }

        public func FindAllAsync() throws -> test_component.AnyIAsyncOperation<test_component.AnyIVectorView<test_component.User?>?>? {
            let (operation) = try ComPtrs.initialize { operationAbi in
                _ = try perform(as: __x_ABI_CWindows_CSystem_CIUserStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.FindAllAsync(pThis, &operationAbi))
                }
            }
            return test_component.__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CUserWrapper.unwrapFrom(abi: operation)
        }

        public func FindAllAsyncByType(_ type: test_component.UserType) throws -> test_component.AnyIAsyncOperation<test_component.AnyIVectorView<test_component.User?>?>? {
            let (operation) = try ComPtrs.initialize { operationAbi in
                _ = try perform(as: __x_ABI_CWindows_CSystem_CIUserStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.FindAllAsyncByType(pThis, type, &operationAbi))
                }
            }
            return test_component.__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CUserWrapper.unwrapFrom(abi: operation)
        }

        public func FindAllAsyncByTypeAndStatus(_ type: test_component.UserType, _ status: test_component.UserAuthenticationStatus) throws -> test_component.AnyIAsyncOperation<test_component.AnyIVectorView<test_component.User?>?>? {
            let (operation) = try ComPtrs.initialize { operationAbi in
                _ = try perform(as: __x_ABI_CWindows_CSystem_CIUserStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.FindAllAsyncByTypeAndStatus(pThis, type, status, &operationAbi))
                }
            }
            return test_component.__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CUserWrapper.unwrapFrom(abi: operation)
        }

        public func GetFromId(_ nonRoamableId: String) throws -> test_component.User? {
            let (result) = try ComPtrs.initialize { resultAbi in
                let _nonRoamableId = try! HString(nonRoamableId)
                _ = try perform(as: __x_ABI_CWindows_CSystem_CIUserStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetFromId(pThis, _nonRoamableId.get(), &resultAbi))
                }
            }
            return __IMPL_Windows_System.UserBridge.from(abi: result)
        }

    }

    private static let IID___x_ABI_CWindows_CSystem_CIUserStatics2: test_component.IID = .init(
        Data1: 0x74A37E11, Data2: 0x2EB5, Data3: 0x4487, Data4: ( 0xB0,0xD5,0x2C,0x67,0x90,0xE0,0x13,0xE9 ) // 74A37E11-2EB5-4487-B0D5-2C6790E013E9
    ) 

    public class IUserStatics2: test_component.IInspectable {
        override public class var IID: test_component.IID { IID___x_ABI_CWindows_CSystem_CIUserStatics2 }

        public func GetDefault() throws -> test_component.User? {
            let (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CWindows_CSystem_CIUserStatics2.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetDefault(pThis, &resultAbi))
                }
            }
            return __IMPL_Windows_System.UserBridge.from(abi: result)
        }

    }

}
// MARK: - UserAuthenticationStatusChangeDeferral

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.system.userauthenticationstatuschangedeferral)
public final class UserAuthenticationStatusChangeDeferral : WinRTClass {
    private typealias SwiftABI = __ABI_Windows_System.IUserAuthenticationStatusChangeDeferral
    private typealias CABI = __x_ABI_CWindows_CSystem_CIUserAuthenticationStatusChangeDeferral
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: test_component.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.system.userauthenticationstatuschangedeferral.complete)
    public func complete() throws {
        try _default.Complete()
    }

    deinit {
        _default = nil
    }
}

// MARK: - UserAuthenticationStatusChangeDeferral Internals

@_spi(WinRTInternal)
extension __IMPL_Windows_System {
    public enum UserAuthenticationStatusChangeDeferralBridge: AbiBridge {
        public typealias SwiftProjection = UserAuthenticationStatusChangeDeferral
        public typealias CABI = __x_ABI_CWindows_CSystem_CIUserAuthenticationStatusChangeDeferral
        public static func from(abi: ComPtr<__x_ABI_CWindows_CSystem_CIUserAuthenticationStatusChangeDeferral>?) -> UserAuthenticationStatusChangeDeferral? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: test_component.IInspectable(abi))
        }
    }

}
@_spi(WinRTInternal)
public class UserAuthenticationStatusChangeDeferralMaker: MakeFromAbi {
    public typealias SwiftType = UserAuthenticationStatusChangeDeferral
    public static func from(abi: test_component.IInspectable) -> SwiftType {
        return UserAuthenticationStatusChangeDeferral(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
extension __ABI_Windows_System {
    private static let IID___x_ABI_CWindows_CSystem_CIUserAuthenticationStatusChangeDeferral: test_component.IID = .init(
        Data1: 0x88B59568, Data2: 0xBB30, Data3: 0x42FB, Data4: ( 0xA2,0x70,0xE9,0x90,0x2E,0x40,0xEF,0xA7 ) // 88B59568-BB30-42FB-A270-E9902E40EFA7
    ) 

    public class IUserAuthenticationStatusChangeDeferral: test_component.IInspectable {
        override public class var IID: test_component.IID { IID___x_ABI_CWindows_CSystem_CIUserAuthenticationStatusChangeDeferral }

        public func Complete() throws {
            _ = try perform(as: __x_ABI_CWindows_CSystem_CIUserAuthenticationStatusChangeDeferral.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Complete(pThis))
            }
        }

    }

}
// MARK: - UserAuthenticationStatusChangingEventArgs

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.system.userauthenticationstatuschangingeventargs)
public final class UserAuthenticationStatusChangingEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Windows_System.IUserAuthenticationStatusChangingEventArgs
    private typealias CABI = __x_ABI_CWindows_CSystem_CIUserAuthenticationStatusChangingEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: test_component.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.system.userauthenticationstatuschangingeventargs.getdeferral)
    public func getDeferral() throws -> UserAuthenticationStatusChangeDeferral! {
        try _default.GetDeferral()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.system.userauthenticationstatuschangingeventargs.currentstatus)
    public var currentStatus : UserAuthenticationStatus {
        get { try! _default.get_CurrentStatus() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.system.userauthenticationstatuschangingeventargs.newstatus)
    public var newStatus : UserAuthenticationStatus {
        get { try! _default.get_NewStatus() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.system.userauthenticationstatuschangingeventargs.user)
    public var user : User! {
        get { try! _default.get_User() }
    }

    deinit {
        _default = nil
    }
}

// MARK: - UserAuthenticationStatusChangingEventArgs Internals

@_spi(WinRTInternal)
extension __IMPL_Windows_System {
    public enum UserAuthenticationStatusChangingEventArgsBridge: AbiBridge {
        public typealias SwiftProjection = UserAuthenticationStatusChangingEventArgs
        public typealias CABI = __x_ABI_CWindows_CSystem_CIUserAuthenticationStatusChangingEventArgs
        public static func from(abi: ComPtr<__x_ABI_CWindows_CSystem_CIUserAuthenticationStatusChangingEventArgs>?) -> UserAuthenticationStatusChangingEventArgs? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: test_component.IInspectable(abi))
        }
    }

}
@_spi(WinRTInternal)
public class UserAuthenticationStatusChangingEventArgsMaker: MakeFromAbi {
    public typealias SwiftType = UserAuthenticationStatusChangingEventArgs
    public static func from(abi: test_component.IInspectable) -> SwiftType {
        return UserAuthenticationStatusChangingEventArgs(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
extension __ABI_Windows_System {
    private static let IID___x_ABI_CWindows_CSystem_CIUserAuthenticationStatusChangingEventArgs: test_component.IID = .init(
        Data1: 0x8C030F28, Data2: 0xA711, Data3: 0x4C1E, Data4: ( 0xAB,0x48,0x04,0x17,0x9C,0x15,0x93,0x8F ) // 8C030F28-A711-4C1E-AB48-04179C15938F
    ) 

    public class IUserAuthenticationStatusChangingEventArgs: test_component.IInspectable {
        override public class var IID: test_component.IID { IID___x_ABI_CWindows_CSystem_CIUserAuthenticationStatusChangingEventArgs }

        public func GetDeferral() throws -> test_component.UserAuthenticationStatusChangeDeferral? {
            let (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CWindows_CSystem_CIUserAuthenticationStatusChangingEventArgs.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetDeferral(pThis, &resultAbi))
                }
            }
            return __IMPL_Windows_System.UserAuthenticationStatusChangeDeferralBridge.from(abi: result)
        }

        public func get_User() throws -> test_component.User? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CSystem_CIUserAuthenticationStatusChangingEventArgs.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_User(pThis, &valueAbi))
                }
            }
            return __IMPL_Windows_System.UserBridge.from(abi: value)
        }

        public func get_NewStatus() throws -> test_component.UserAuthenticationStatus {
            var value: __x_ABI_CWindows_CSystem_CUserAuthenticationStatus = .init(0)
            _ = try perform(as: __x_ABI_CWindows_CSystem_CIUserAuthenticationStatusChangingEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_NewStatus(pThis, &value))
            }
            return value
        }

        public func get_CurrentStatus() throws -> test_component.UserAuthenticationStatus {
            var value: __x_ABI_CWindows_CSystem_CUserAuthenticationStatus = .init(0)
            _ = try perform(as: __x_ABI_CWindows_CSystem_CIUserAuthenticationStatusChangingEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_CurrentStatus(pThis, &value))
            }
            return value
        }

    }

}
// MARK: - UserChangedEventArgs

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.system.userchangedeventargs)
public final class UserChangedEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Windows_System.IUserChangedEventArgs
    private typealias CABI = __x_ABI_CWindows_CSystem_CIUserChangedEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: test_component.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.system.userchangedeventargs.user)
    public var user : User! {
        get { try! _default.get_User() }
    }

    private lazy var _IUserChangedEventArgs2: __ABI_Windows_System.IUserChangedEventArgs2! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.system.userchangedeventargs.changedpropertykinds)
    public var changedPropertyKinds : AnyIVectorView<UserWatcherUpdateKind>! {
        get { try! _IUserChangedEventArgs2.get_ChangedPropertyKinds() }
    }

    deinit {
        _default = nil
        _IUserChangedEventArgs2 = nil
    }
}

// MARK: - UserChangedEventArgs Internals

@_spi(WinRTInternal)
extension __IMPL_Windows_System {
    public enum UserChangedEventArgsBridge: AbiBridge {
        public typealias SwiftProjection = UserChangedEventArgs
        public typealias CABI = __x_ABI_CWindows_CSystem_CIUserChangedEventArgs
        public static func from(abi: ComPtr<__x_ABI_CWindows_CSystem_CIUserChangedEventArgs>?) -> UserChangedEventArgs? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: test_component.IInspectable(abi))
        }
    }

}
@_spi(WinRTInternal)
public class UserChangedEventArgsMaker: MakeFromAbi {
    public typealias SwiftType = UserChangedEventArgs
    public static func from(abi: test_component.IInspectable) -> SwiftType {
        return UserChangedEventArgs(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
extension __ABI_Windows_System {
    private static let IID___x_ABI_CWindows_CSystem_CIUserChangedEventArgs: test_component.IID = .init(
        Data1: 0x086459DC, Data2: 0x18C6, Data3: 0x48DB, Data4: ( 0xBC,0x99,0x72,0x4F,0xB9,0x20,0x3C,0xCC ) // 086459DC-18C6-48DB-BC99-724FB9203CCC
    ) 

    public class IUserChangedEventArgs: test_component.IInspectable {
        override public class var IID: test_component.IID { IID___x_ABI_CWindows_CSystem_CIUserChangedEventArgs }

        public func get_User() throws -> test_component.User? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CSystem_CIUserChangedEventArgs.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_User(pThis, &valueAbi))
                }
            }
            return __IMPL_Windows_System.UserBridge.from(abi: value)
        }

    }

    private static let IID___x_ABI_CWindows_CSystem_CIUserChangedEventArgs2: test_component.IID = .init(
        Data1: 0x6B2CCB44, Data2: 0x6F01, Data3: 0x560C, Data4: ( 0x97,0xAD,0xFC,0x7F,0x32,0xEC,0x58,0x1F ) // 6B2CCB44-6F01-560C-97AD-FC7F32EC581F
    ) 

    public class IUserChangedEventArgs2: test_component.IInspectable {
        override public class var IID: test_component.IID { IID___x_ABI_CWindows_CSystem_CIUserChangedEventArgs2 }

        public func get_ChangedPropertyKinds() throws -> test_component.AnyIVectorView<test_component.UserWatcherUpdateKind>? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CSystem_CIUserChangedEventArgs2.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ChangedPropertyKinds(pThis, &valueAbi))
                }
            }
            return test_component.__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CUserWatcherUpdateKindWrapper.unwrapFrom(abi: value)
        }

    }

}
// MARK: - UserWatcher

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.system.userwatcher)
public final class UserWatcher : WinRTClass {
    private typealias SwiftABI = __ABI_Windows_System.IUserWatcher
    private typealias CABI = __x_ABI_CWindows_CSystem_CIUserWatcher
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: test_component.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.system.userwatcher.start)
    public func start() throws {
        try _default.Start()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.system.userwatcher.stop)
    public func stop() throws {
        try _default.Stop()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.system.userwatcher.status)
    public var status : UserWatcherStatus {
        get { try! _default.get_Status() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.system.userwatcher.added)
    public lazy var added : Event<TypedEventHandler<UserWatcher?, UserChangedEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_Added($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_Added($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.system.userwatcher.authenticationstatuschanged)
    public lazy var authenticationStatusChanged : Event<TypedEventHandler<UserWatcher?, UserChangedEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_AuthenticationStatusChanged($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_AuthenticationStatusChanged($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.system.userwatcher.authenticationstatuschanging)
    public lazy var authenticationStatusChanging : Event<TypedEventHandler<UserWatcher?, UserAuthenticationStatusChangingEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_AuthenticationStatusChanging($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_AuthenticationStatusChanging($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.system.userwatcher.enumerationcompleted)
    public lazy var enumerationCompleted : Event<TypedEventHandler<UserWatcher?, Any?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_EnumerationCompleted($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_EnumerationCompleted($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.system.userwatcher.removed)
    public lazy var removed : Event<TypedEventHandler<UserWatcher?, UserChangedEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_Removed($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_Removed($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.system.userwatcher.stopped)
    public lazy var stopped : Event<TypedEventHandler<UserWatcher?, Any?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_Stopped($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_Stopped($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.system.userwatcher.updated)
    public lazy var updated : Event<TypedEventHandler<UserWatcher?, UserChangedEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_Updated($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_Updated($0)
       }
      )
    }()

    deinit {
        _default = nil
    }
}

// MARK: - UserWatcher Internals

@_spi(WinRTInternal)
extension __IMPL_Windows_System {
    public enum UserWatcherBridge: AbiBridge {
        public typealias SwiftProjection = UserWatcher
        public typealias CABI = __x_ABI_CWindows_CSystem_CIUserWatcher
        public static func from(abi: ComPtr<__x_ABI_CWindows_CSystem_CIUserWatcher>?) -> UserWatcher? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: test_component.IInspectable(abi))
        }
    }

}
@_spi(WinRTInternal)
public class UserWatcherMaker: MakeFromAbi {
    public typealias SwiftType = UserWatcher
    public static func from(abi: test_component.IInspectable) -> SwiftType {
        return UserWatcher(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
extension __ABI_Windows_System {
    private static let IID___x_ABI_CWindows_CSystem_CIUserWatcher: test_component.IID = .init(
        Data1: 0x155EB23B, Data2: 0x242A, Data3: 0x45E0, Data4: ( 0xA2,0xE9,0x31,0x71,0xFC,0x6A,0x7F,0xBB ) // 155EB23B-242A-45E0-A2E9-3171FC6A7FBB
    ) 

    public class IUserWatcher: test_component.IInspectable {
        override public class var IID: test_component.IID { IID___x_ABI_CWindows_CSystem_CIUserWatcher }

        public func get_Status() throws -> test_component.UserWatcherStatus {
            var value: __x_ABI_CWindows_CSystem_CUserWatcherStatus = .init(0)
            _ = try perform(as: __x_ABI_CWindows_CSystem_CIUserWatcher.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Status(pThis, &value))
            }
            return value
        }

        public func Start() throws {
            _ = try perform(as: __x_ABI_CWindows_CSystem_CIUserWatcher.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Start(pThis))
            }
        }

        public func Stop() throws {
            _ = try perform(as: __x_ABI_CWindows_CSystem_CIUserWatcher.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Stop(pThis))
            }
        }

        public func add_Added(_ handler: TypedEventHandler<test_component.UserWatcher?, test_component.UserChangedEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = test_component.__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CUserWatcher___x_ABI_CWindows__CSystem__CUserChangedEventArgsWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CWindows_CSystem_CIUserWatcher.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_Added(pThis, _handler, &token))
            }
            return token
        }

        public func remove_Added(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CWindows_CSystem_CIUserWatcher.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_Added(pThis, token))
            }
        }

        public func add_Removed(_ handler: TypedEventHandler<test_component.UserWatcher?, test_component.UserChangedEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = test_component.__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CUserWatcher___x_ABI_CWindows__CSystem__CUserChangedEventArgsWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CWindows_CSystem_CIUserWatcher.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_Removed(pThis, _handler, &token))
            }
            return token
        }

        public func remove_Removed(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CWindows_CSystem_CIUserWatcher.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_Removed(pThis, token))
            }
        }

        public func add_Updated(_ handler: TypedEventHandler<test_component.UserWatcher?, test_component.UserChangedEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = test_component.__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CUserWatcher___x_ABI_CWindows__CSystem__CUserChangedEventArgsWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CWindows_CSystem_CIUserWatcher.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_Updated(pThis, _handler, &token))
            }
            return token
        }

        public func remove_Updated(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CWindows_CSystem_CIUserWatcher.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_Updated(pThis, token))
            }
        }

        public func add_AuthenticationStatusChanged(_ handler: TypedEventHandler<test_component.UserWatcher?, test_component.UserChangedEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = test_component.__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CUserWatcher___x_ABI_CWindows__CSystem__CUserChangedEventArgsWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CWindows_CSystem_CIUserWatcher.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_AuthenticationStatusChanged(pThis, _handler, &token))
            }
            return token
        }

        public func remove_AuthenticationStatusChanged(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CWindows_CSystem_CIUserWatcher.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_AuthenticationStatusChanged(pThis, token))
            }
        }

        public func add_AuthenticationStatusChanging(_ handler: TypedEventHandler<test_component.UserWatcher?, test_component.UserAuthenticationStatusChangingEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = test_component.__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CUserWatcher___x_ABI_CWindows__CSystem__CUserAuthenticationStatusChangingEventArgsWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CWindows_CSystem_CIUserWatcher.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_AuthenticationStatusChanging(pThis, _handler, &token))
            }
            return token
        }

        public func remove_AuthenticationStatusChanging(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CWindows_CSystem_CIUserWatcher.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_AuthenticationStatusChanging(pThis, token))
            }
        }

        public func add_EnumerationCompleted(_ handler: TypedEventHandler<test_component.UserWatcher?, Any?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = test_component.__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CUserWatcher_IInspectableWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CWindows_CSystem_CIUserWatcher.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_EnumerationCompleted(pThis, _handler, &token))
            }
            return token
        }

        public func remove_EnumerationCompleted(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CWindows_CSystem_CIUserWatcher.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_EnumerationCompleted(pThis, token))
            }
        }

        public func add_Stopped(_ handler: TypedEventHandler<test_component.UserWatcher?, Any?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = test_component.__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CUserWatcher_IInspectableWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CWindows_CSystem_CIUserWatcher.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_Stopped(pThis, _handler, &token))
            }
            return token
        }

        public func remove_Stopped(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CWindows_CSystem_CIUserWatcher.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_Stopped(pThis, token))
            }
        }

    }

}

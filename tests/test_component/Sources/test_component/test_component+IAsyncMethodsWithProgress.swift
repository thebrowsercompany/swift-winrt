// WARNING: Please don't edit this file. It was generated by Swift/WinRT v0.0.1
// swiftlint:disable all
import Foundation
@_spi(WinRTInternal) @_spi(WinRTImplements) import WindowsFoundation
import CWinRT

public protocol IAsyncMethodsWithProgress : WinRTInterface {
    func operationWithProgress(_ value: WindowsFoundation.DateTime) throws -> WindowsFoundation.AnyIAsyncOperationWithProgress<Int32, Double>!
}

extension IAsyncMethodsWithProgress {
    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        switch iid {
            case __ABI_test_component.IAsyncMethodsWithProgressWrapper.IID:
                let wrapper = __ABI_test_component.IAsyncMethodsWithProgressWrapper(self)
                return wrapper!.queryInterface(iid)
            default: return nil
        }
    }
}
public typealias AnyIAsyncMethodsWithProgress = any IAsyncMethodsWithProgress

// MARK: - IAsyncMethodsWithProgress Internals

@_spi(WinRTInternal)
extension __IMPL_test_component {
    public enum IAsyncMethodsWithProgressBridge : AbiInterfaceBridge {
        public typealias CABI = __x_ABI_Ctest__component_CIAsyncMethodsWithProgress
        public typealias SwiftABI = __ABI_test_component.IAsyncMethodsWithProgress
        public typealias SwiftProjection = AnyIAsyncMethodsWithProgress
        public static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
            guard let abi = abi else { return nil }
            return IAsyncMethodsWithProgressImpl(abi)
        }

        public static func makeAbi() -> CABI {
            let vtblPtr = withUnsafeMutablePointer(to: &__ABI_test_component.IAsyncMethodsWithProgressVTable) { $0 }
            return .init(lpVtbl: vtblPtr)
        }
    }

    fileprivate class IAsyncMethodsWithProgressImpl: IAsyncMethodsWithProgress, WinRTAbiImpl {
        fileprivate typealias Bridge = IAsyncMethodsWithProgressBridge
        fileprivate let _default: Bridge.SwiftABI
        fileprivate var thisPtr: WindowsFoundation.IInspectable { _default }
        fileprivate init(_ fromAbi: ComPtr<Bridge.CABI>) {
            _default = Bridge.SwiftABI(fromAbi)
        }

        fileprivate func operationWithProgress(_ value: WindowsFoundation.DateTime) throws -> WindowsFoundation.AnyIAsyncOperationWithProgress<Int32, Double>! {
            try _default.OperationWithProgress(value)
        }

    }

}
@_spi(WinRTInternal)
extension __ABI_test_component {
    private static let IID___x_ABI_Ctest__component_CIAsyncMethodsWithProgress: WindowsFoundation.IID = .init(
        Data1: 0xD782777A, Data2: 0xBE43, Data3: 0x55FA, Data4: ( 0x92,0x6E,0x51,0xE6,0x40,0x23,0xD5,0xEC ) // D782777A-BE43-55FA-926E-51E64023D5EC
    ) 

    public class IAsyncMethodsWithProgress: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_Ctest__component_CIAsyncMethodsWithProgress }

        open func OperationWithProgress(_ value: WindowsFoundation.DateTime) throws -> WindowsFoundation.AnyIAsyncOperationWithProgress<Int32, Double>? {
            let (operation) = try ComPtrs.initialize { operationAbi in
                _ = try perform(as: __x_ABI_Ctest__component_CIAsyncMethodsWithProgress.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.OperationWithProgress(pThis, .from(swift: value), &operationAbi))
                }
            }
            return test_component.__x_ABI_C__FIAsyncOperationWithProgress_2_int_doubleWrapper.unwrapFrom(abi: operation)
        }

    }

    internal static var IAsyncMethodsWithProgressVTable: __x_ABI_Ctest__component_CIAsyncMethodsWithProgressVtbl = .init(
        QueryInterface: { IAsyncMethodsWithProgressWrapper.queryInterface($0, $1, $2) },
        AddRef: { IAsyncMethodsWithProgressWrapper.addRef($0) },
        Release: { IAsyncMethodsWithProgressWrapper.release($0) },
        GetIids: {
            let size = MemoryLayout<WindowsFoundation.IID>.size
            let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: WindowsFoundation.IID.self)
            iids[0] = IUnknown.IID
            iids[1] = IInspectable.IID
            iids[2] = __ABI_test_component.IAsyncMethodsWithProgressWrapper.IID
            $1!.pointee = 3
            $2!.pointee = iids
            return S_OK
        },

        GetRuntimeClassName: {
            _ = $0
            let hstring = try! HString("test_component.IAsyncMethodsWithProgress").detach()
            $1!.pointee = hstring
            return S_OK
        },

        GetTrustLevel: {
            _ = $0
            $1!.pointee = TrustLevel(rawValue: 0)
            return S_OK
        },

        OperationWithProgress: {
            do {
                guard let __unwrapped__instance = IAsyncMethodsWithProgressWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let value: WindowsFoundation.DateTime = .from(abi: $1)
                let operation = try __unwrapped__instance.operationWithProgress(value)
                let operationWrapper = test_component.__x_ABI_C__FIAsyncOperationWithProgress_2_int_doubleWrapper(operation)
                operationWrapper?.copyTo($2)
                return S_OK
            } catch { return failWith(error: error) }
        }
    )

    public typealias IAsyncMethodsWithProgressWrapper = InterfaceWrapperBase<__IMPL_test_component.IAsyncMethodsWithProgressBridge>
}
@_spi(WinRTInternal)
public class IAsyncMethodsWithProgressMaker: MakeFromAbi {
    public typealias SwiftType = AnyIAsyncMethodsWithProgress
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        let swiftAbi: __ABI_test_component.IAsyncMethodsWithProgress = try! abi.QueryInterface()
        return __IMPL_test_component.IAsyncMethodsWithProgressBridge.from(abi: RawPointer(swiftAbi))!
    }
}

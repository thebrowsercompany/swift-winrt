// WARNING: Please don't edit this file. It was generated by Swift/WinRT v0.0.1
// swiftlint:disable all
import Foundation
import Ctest_component

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.storageprovider)
public final class StorageProvider : WinRTClass {
    private typealias SwiftABI = __ABI_Windows_Storage.IStorageProvider
    private typealias CABI = __x_ABI_CWindows_CStorage_CIStorageProvider
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: test_component.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.storageprovider.displayname)
    public var displayName : String {
        get { try! _default.get_DisplayName() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.storageprovider.id)
    public var id : String {
        get { try! _default.get_Id() }
    }

    private lazy var _IStorageProvider2: __ABI_Windows_Storage.IStorageProvider2! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.storageprovider.ispropertysupportedforpartialfileasync)
    public func isPropertySupportedForPartialFileAsync(_ propertyCanonicalName: String) throws -> AnyIAsyncOperation<Bool>! {
        try _IStorageProvider2.IsPropertySupportedForPartialFileAsync(propertyCanonicalName)
    }

    deinit {
        _default = nil
        _IStorageProvider2 = nil
    }
}

// MARK: - StorageProvider Internals

@_spi(WinRTInternal)
extension __IMPL_Windows_Storage {
    public enum StorageProviderBridge: AbiBridge {
        public typealias SwiftProjection = StorageProvider
        public typealias CABI = __x_ABI_CWindows_CStorage_CIStorageProvider
        public static func from(abi: ComPtr<__x_ABI_CWindows_CStorage_CIStorageProvider>?) -> StorageProvider? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: test_component.IInspectable(abi))
        }
    }

}
@_spi(WinRTInternal)
public class StorageProviderMaker: MakeFromAbi {
    public typealias SwiftType = StorageProvider
    public static func from(abi: test_component.IInspectable) -> SwiftType {
        return StorageProvider(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
extension __ABI_Windows_Storage {
    private static let IID___x_ABI_CWindows_CStorage_CIStorageProvider: test_component.IID = .init(
        Data1: 0xE705EED4, Data2: 0xD478, Data3: 0x47D6, Data4: ( 0xBA,0x46,0x1A,0x8E,0xBE,0x11,0x4A,0x20 ) // E705EED4-D478-47D6-BA46-1A8EBE114A20
    ) 

    public class IStorageProvider: test_component.IInspectable {
        override public class var IID: test_component.IID { IID___x_ABI_CWindows_CStorage_CIStorageProvider }

        public func get_Id() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CWindows_CStorage_CIStorageProvider.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Id(pThis, &value))
            }
            return .init(from: value)
        }

        public func get_DisplayName() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CWindows_CStorage_CIStorageProvider.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_DisplayName(pThis, &value))
            }
            return .init(from: value)
        }

    }

    private static let IID___x_ABI_CWindows_CStorage_CIStorageProvider2: test_component.IID = .init(
        Data1: 0x010D1917, Data2: 0x3404, Data3: 0x414B, Data4: ( 0x9F,0xD7,0xCD,0x44,0x47,0x2E,0xAA,0x39 ) // 010D1917-3404-414B-9FD7-CD44472EAA39
    ) 

    public class IStorageProvider2: test_component.IInspectable {
        override public class var IID: test_component.IID { IID___x_ABI_CWindows_CStorage_CIStorageProvider2 }

        public func IsPropertySupportedForPartialFileAsync(_ propertyCanonicalName: String) throws -> test_component.AnyIAsyncOperation<Bool>? {
            let (operation) = try ComPtrs.initialize { operationAbi in
                let _propertyCanonicalName = try! HString(propertyCanonicalName)
                _ = try perform(as: __x_ABI_CWindows_CStorage_CIStorageProvider2.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.IsPropertySupportedForPartialFileAsync(pThis, _propertyCanonicalName.get(), &operationAbi))
                }
            }
            return test_component.__x_ABI_C__FIAsyncOperation_1_booleanWrapper.unwrapFrom(abi: operation)
        }

    }

}

// WARNING: Please don't edit this file. It was generated by Swift/WinRT v0.0.1
// swiftlint:disable all
import Foundation
import Ctest_component

public final class WeakReferencer : WinRTClass {
    private typealias SwiftABI = __ABI_test_component.IWeakReferencer
    private typealias CABI = __x_ABI_Ctest__component_CIWeakReferencer
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: test_component.IInspectable) {
        super.init(fromAbi)
    }

    private static let _IWeakReferencerFactory: __ABI_test_component.IWeakReferencerFactory = try! RoGetActivationFactory("test_component.WeakReferencer")
    public init(_ object: AnyIReferenceTarget!) {
        super.init(try! Self._IWeakReferencerFactory.CreateInstance(object))
    }

    public func resolve() throws -> AnyIReferenceTarget! {
        try _default.Resolve()
    }

    deinit {
        _default = nil
    }
}


// MARK: - Internals

@_spi(WinRTInternal)
extension __IMPL_test_component {
    public enum WeakReferencerBridge: AbiBridge {
        public typealias SwiftProjection = WeakReferencer
        public typealias CABI = __x_ABI_Ctest__component_CIWeakReferencer
        public static func from(abi: ComPtr<__x_ABI_Ctest__component_CIWeakReferencer>?) -> WeakReferencer? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: test_component.IInspectable(abi))
        }
    }

}
@_spi(WinRTInternal)
public class WeakReferencerMaker: MakeFromAbi {
    public typealias SwiftType = WeakReferencer
    public static func from(abi: test_component.IInspectable) -> SwiftType {
        return WeakReferencer(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
extension __ABI_test_component {
    private static let IID___x_ABI_Ctest__component_CIWeakReferencer: test_component.IID = .init(
        Data1: 0xF3CE877F, Data2: 0x5BD2, Data3: 0x53C7, Data4: ( 0xAA,0x6A,0x39,0xF0,0x64,0x78,0x1C,0x21 ) // F3CE877F-5BD2-53C7-AA6A-39F064781C21
    ) 
    public class IWeakReferencer: test_component.IInspectable {
        override public class var IID: test_component.IID { IID___x_ABI_Ctest__component_CIWeakReferencer }

        public func Resolve() throws -> test_component.AnyIReferenceTarget? {
            let (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_Ctest__component_CIWeakReferencer.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.Resolve(pThis, &resultAbi))
                }
            }
            return __ABI_test_component.IReferenceTargetWrapper.unwrapFrom(abi: result)
        }

    }

    private static let IID___x_ABI_Ctest__component_CIWeakReferencerFactory: test_component.IID = .init(
        Data1: 0x34CE8191, Data2: 0x4DC4, Data3: 0x50EF, Data4: ( 0xB6,0x9E,0x19,0x8F,0x3C,0x9F,0x65,0x52 ) // 34CE8191-4DC4-50EF-B69E-198F3C9F6552
    ) 
    public class IWeakReferencerFactory: test_component.IInspectable {
        override public class var IID: test_component.IID { IID___x_ABI_Ctest__component_CIWeakReferencerFactory }

        public func CreateInstance(_ object: test_component.AnyIReferenceTarget?) throws -> IWeakReferencer {
            let (value) = try ComPtrs.initialize { valueAbi in
                let objectWrapper = __ABI_test_component.IReferenceTargetWrapper(object)
                let _object = try! objectWrapper?.toABI { $0 }
                _ = try perform(as: __x_ABI_Ctest__component_CIWeakReferencerFactory.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance(pThis, _object, &valueAbi))
                }
            }
            return IWeakReferencer(value!)
        }

    }

}

// WARNING: Please don't edit this file. It was generated by Swift/WinRT v0.0.1
// swiftlint:disable all
import Foundation
import Ctest_component

public final class Simple : WinRTClass {
    private typealias SwiftABI = __ABI_test_component.ISimple
    private typealias CABI = __x_ABI_Ctest__component_CISimple
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: test_component.IInspectable) {
        super.init(fromAbi)
    }

    private static let _defaultFactory: test_component.IActivationFactory = try! RoGetActivationFactory("test_component.Simple")
    override public init() {
        super.init(try! Self._defaultFactory.ActivateInstance())
    }

    private static let _ISimpleStatics: __ABI_test_component.ISimpleStatics = try! RoGetActivationFactory("test_component.Simple")
    public static func fireStaticEvent() throws {
        try _ISimpleStatics.FireStaticEvent()
    }

    public static var staticEvent : Event<EventHandler<Any?>> = {
      .init(
        add: { try! _ISimpleStatics.add_StaticEvent($0) },
        remove: { try? _ISimpleStatics.remove_StaticEvent($0) }
      )
    }()

    public func method() throws {
        try _default.Method()
    }

    public func operation(_ value: test_component.DateTime) throws -> AnyIAsyncOperation<Int32>! {
        try _default.Operation(value)
    }

    public func action(_ value: test_component.DateTime) throws -> test_component.AnyIAsyncAction! {
        try _default.Action(value)
    }

    public func object(_ value: test_component.DateTime) throws -> Any! {
        try _default.Object(value)
    }

    public func returnBlittableStruct() throws -> BlittableStruct {
        try _default.ReturnBlittableStruct()
    }

    public func takeBlittableStruct(_ value: BlittableStruct) throws {
        try _default.TakeBlittableStruct(value)
    }

    public func returnStructWithReference() throws -> StructWithIReference {
        try _default.ReturnStructWithReference()
    }

    public func takeStructWithReference(_ value: StructWithIReference) throws {
        try _default.TakeStructWithReference(value)
    }

    public func returnNonBlittableStruct() throws -> NonBlittableStruct {
        try _default.ReturnNonBlittableStruct()
    }

    public func takeNonBlittableStruct(_ value: NonBlittableStruct) throws {
        try _default.TakeNonBlittableStruct(value)
    }

    public func fireEvent() throws {
        try _default.FireEvent()
    }

    public var blittableStructProperty : BlittableStruct {
        get { try! _default.get_BlittableStructProperty() }
        set { try! _default.put_BlittableStructProperty(newValue) }
    }

    public var nonBlittableStructProperty : NonBlittableStruct {
        get { try! _default.get_NonBlittableStructProperty() }
        set { try! _default.put_NonBlittableStructProperty(newValue) }
    }

    public var stringProperty : String {
        get { try! _default.get_StringProperty() }
        set { try! _default.put_StringProperty(newValue) }
    }

    public var structWithReferenceProperty : StructWithIReference {
        get { try! _default.get_StructWithReferenceProperty() }
        set { try! _default.put_StructWithReferenceProperty(newValue) }
    }

    public lazy var inEvent : Event<test_component.InDelegate> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_InEvent($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_InEvent($0)
       }
      )
    }()

    public lazy var signalEvent : Event<test_component.SignalDelegate> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_SignalEvent($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_SignalEvent($0)
       }
      )
    }()

    public lazy var simpleEvent : Event<TypedEventHandler<Simple?, SimpleEventArgs>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_SimpleEvent($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_SimpleEvent($0)
       }
      )
    }()

    deinit {
        _default = nil
    }
}

// MARK: - Simple Internals

@_spi(WinRTInternal)
extension __IMPL_test_component {
    public enum SimpleBridge: AbiBridge {
        public typealias SwiftProjection = Simple
        public typealias CABI = __x_ABI_Ctest__component_CISimple
        public static func from(abi: ComPtr<__x_ABI_Ctest__component_CISimple>?) -> Simple? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: test_component.IInspectable(abi))
        }
    }

}
@_spi(WinRTInternal)
public class SimpleMaker: MakeFromAbi {
    public typealias SwiftType = Simple
    public static func from(abi: test_component.IInspectable) -> SwiftType {
        return Simple(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
extension __ABI_test_component {
    private static let IID___x_ABI_Ctest__component_CISimple: test_component.IID = .init(
        Data1: 0xAE7B4545, Data2: 0xD9D0, Data3: 0x5655, Data4: ( 0xB1,0xDE,0xA0,0x7D,0xA1,0x3B,0xD8,0x9B ) // AE7B4545-D9D0-5655-B1DE-A07DA13BD89B
    ) 

    public class ISimple: test_component.IInspectable {
        override public class var IID: test_component.IID { IID___x_ABI_Ctest__component_CISimple }

        public func Method() throws {
            _ = try perform(as: __x_ABI_Ctest__component_CISimple.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Method(pThis))
            }
        }

        public func Operation(_ value: test_component.DateTime) throws -> test_component.AnyIAsyncOperation<Int32>? {
            let (operation) = try ComPtrs.initialize { operationAbi in
                _ = try perform(as: __x_ABI_Ctest__component_CISimple.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.Operation(pThis, .from(swift: value), &operationAbi))
                }
            }
            return test_component.__x_ABI_C__FIAsyncOperation_1_intWrapper.unwrapFrom(abi: operation)
        }

        public func Action(_ value: test_component.DateTime) throws -> test_component.AnyIAsyncAction? {
            let (operation) = try ComPtrs.initialize { operationAbi in
                _ = try perform(as: __x_ABI_Ctest__component_CISimple.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.Action(pThis, .from(swift: value), &operationAbi))
                }
            }
            return __ABI_Windows_Foundation.IAsyncActionWrapper.unwrapFrom(abi: operation)
        }

        public func Object(_ value: test_component.DateTime) throws -> Any? {
            let (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_Ctest__component_CISimple.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.Object(pThis, .from(swift: value), &resultAbi))
                }
            }
            return __ABI_.AnyWrapper.unwrapFrom(abi: result)
        }

        public func ReturnBlittableStruct() throws -> test_component.BlittableStruct {
            var result: __x_ABI_Ctest__component_CBlittableStruct = .init()
            _ = try perform(as: __x_ABI_Ctest__component_CISimple.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.ReturnBlittableStruct(pThis, &result))
            }
            return .from(abi: result)
        }

        public func TakeBlittableStruct(_ value: test_component.BlittableStruct) throws {
            _ = try perform(as: __x_ABI_Ctest__component_CISimple.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.TakeBlittableStruct(pThis, .from(swift: value)))
            }
        }

        public func get_BlittableStructProperty() throws -> test_component.BlittableStruct {
            var value: __x_ABI_Ctest__component_CBlittableStruct = .init()
            _ = try perform(as: __x_ABI_Ctest__component_CISimple.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_BlittableStructProperty(pThis, &value))
            }
            return .from(abi: value)
        }

        public func put_BlittableStructProperty(_ value: test_component.BlittableStruct) throws {
            _ = try perform(as: __x_ABI_Ctest__component_CISimple.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_BlittableStructProperty(pThis, .from(swift: value)))
            }
        }

        public func ReturnStructWithReference() throws -> test_component.StructWithIReference {
            var result: __x_ABI_Ctest__component_CStructWithIReference = .init()
            _ = try perform(as: __x_ABI_Ctest__component_CISimple.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.ReturnStructWithReference(pThis, &result))
            }
            return .from(abi: result)
        }

        public func TakeStructWithReference(_ value: test_component.StructWithIReference) throws {
            let _value = __ABI_test_component._ABI_StructWithIReference(from: value)
            _ = try perform(as: __x_ABI_Ctest__component_CISimple.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.TakeStructWithReference(pThis, _value.val))
            }
        }

        public func get_StructWithReferenceProperty() throws -> test_component.StructWithIReference {
            var value: __x_ABI_Ctest__component_CStructWithIReference = .init()
            _ = try perform(as: __x_ABI_Ctest__component_CISimple.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_StructWithReferenceProperty(pThis, &value))
            }
            return .from(abi: value)
        }

        public func put_StructWithReferenceProperty(_ value: test_component.StructWithIReference) throws {
            let _value = __ABI_test_component._ABI_StructWithIReference(from: value)
            _ = try perform(as: __x_ABI_Ctest__component_CISimple.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_StructWithReferenceProperty(pThis, _value.val))
            }
        }

        public func ReturnNonBlittableStruct() throws -> test_component.NonBlittableStruct {
            var result: __x_ABI_Ctest__component_CNonBlittableStruct = .init()
            _ = try perform(as: __x_ABI_Ctest__component_CISimple.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.ReturnNonBlittableStruct(pThis, &result))
            }
            return .from(abi: result)
        }

        public func TakeNonBlittableStruct(_ value: test_component.NonBlittableStruct) throws {
            let _value = __ABI_test_component._ABI_NonBlittableStruct(from: value)
            _ = try perform(as: __x_ABI_Ctest__component_CISimple.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.TakeNonBlittableStruct(pThis, _value.val))
            }
        }

        public func get_NonBlittableStructProperty() throws -> test_component.NonBlittableStruct {
            var value: __x_ABI_Ctest__component_CNonBlittableStruct = .init()
            _ = try perform(as: __x_ABI_Ctest__component_CISimple.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_NonBlittableStructProperty(pThis, &value))
            }
            return .from(abi: value)
        }

        public func put_NonBlittableStructProperty(_ value: test_component.NonBlittableStruct) throws {
            let _value = __ABI_test_component._ABI_NonBlittableStruct(from: value)
            _ = try perform(as: __x_ABI_Ctest__component_CISimple.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_NonBlittableStructProperty(pThis, _value.val))
            }
        }

        public func get_StringProperty() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_Ctest__component_CISimple.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_StringProperty(pThis, &value))
            }
            return .init(from: value)
        }

        public func put_StringProperty(_ value: String) throws {
            let _value = try! HString(value)
            _ = try perform(as: __x_ABI_Ctest__component_CISimple.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_StringProperty(pThis, _value.get()))
            }
        }

        public func add_SignalEvent(_ handler: test_component.SignalDelegate?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = __ABI_test_component_Delegates.SignalDelegateWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_Ctest__component_CISimple.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_SignalEvent(pThis, _handler, &token))
            }
            return token
        }

        public func remove_SignalEvent(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_Ctest__component_CISimple.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_SignalEvent(pThis, token))
            }
        }

        public func add_InEvent(_ handler: test_component.InDelegate?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = __ABI_test_component_Delegates.InDelegateWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_Ctest__component_CISimple.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_InEvent(pThis, _handler, &token))
            }
            return token
        }

        public func remove_InEvent(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_Ctest__component_CISimple.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_InEvent(pThis, token))
            }
        }

        public func add_SimpleEvent(_ handler: TypedEventHandler<test_component.Simple?, test_component.SimpleEventArgs>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = test_component.__x_ABI_C__FITypedEventHandler_2___x_ABI_Ctest__zcomponent__CSimple___x_ABI_Ctest__zcomponent__CSimpleEventArgsWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_Ctest__component_CISimple.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_SimpleEvent(pThis, _handler, &token))
            }
            return token
        }

        public func remove_SimpleEvent(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_Ctest__component_CISimple.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_SimpleEvent(pThis, token))
            }
        }

        public func FireEvent() throws {
            _ = try perform(as: __x_ABI_Ctest__component_CISimple.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.FireEvent(pThis))
            }
        }

    }

    private static let IID___x_ABI_Ctest__component_CISimpleOverrides: test_component.IID = .init(
        Data1: 0x2F772B66, Data2: 0xE6BE, Data3: 0x51E4, Data4: ( 0xB9,0x22,0x01,0x9D,0x56,0xF7,0xEF,0xD1 ) // 2F772B66-E6BE-51E4-B922-019D56F7EFD1
    ) 

    public class ISimpleOverrides: test_component.IInspectable {
        override public class var IID: test_component.IID { IID___x_ABI_Ctest__component_CISimpleOverrides }

        public func CantActuallyOverrideBecauseNotComposable() throws {
            _ = try perform(as: __x_ABI_Ctest__component_CISimpleOverrides.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.CantActuallyOverrideBecauseNotComposable(pThis))
            }
        }

    }

    private static let IID___x_ABI_Ctest__component_CISimpleStatics: test_component.IID = .init(
        Data1: 0xC8DCADA0, Data2: 0xFD8E, Data3: 0x5E27, Data4: ( 0x95,0x51,0xA3,0x68,0xFE,0x1D,0x11,0xB2 ) // C8DCADA0-FD8E-5E27-9551-A368FE1D11B2
    ) 

    public class ISimpleStatics: test_component.IInspectable {
        override public class var IID: test_component.IID { IID___x_ABI_Ctest__component_CISimpleStatics }

        public func add_StaticEvent(_ handler: EventHandler<Any?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = test_component.__x_ABI_C__FIEventHandler_1_IInspectableWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_Ctest__component_CISimpleStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_StaticEvent(pThis, _handler, &token))
            }
            return token
        }

        public func remove_StaticEvent(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_Ctest__component_CISimpleStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_StaticEvent(pThis, token))
            }
        }

        public func FireStaticEvent() throws {
            _ = try perform(as: __x_ABI_Ctest__component_CISimpleStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.FireStaticEvent(pThis))
            }
        }

    }

}

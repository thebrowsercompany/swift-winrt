// WARNING: Please don't edit this file. It was generated by Swift/WinRT v0.0.1
// swiftlint:disable all
import Foundation
import Ctest_component

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncaction)
public protocol IAsyncAction : IAsyncInfo {
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncaction.getresults)
    func getResults() throws
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncaction.completed)
    var completed: test_component.AsyncActionCompletedHandler! { get set }
}

extension IAsyncAction {
    public func queryInterface(_ iid: test_component.IID) -> IUnknownRef? {
        switch iid {
            case __ABI_Windows_Foundation.IAsyncActionWrapper.IID:
                let wrapper = __ABI_Windows_Foundation.IAsyncActionWrapper(self)
                return wrapper!.queryInterface(iid)
            case __ABI_Windows_Foundation.IAsyncInfoWrapper.IID:
                let wrapper = __ABI_Windows_Foundation.IAsyncInfoWrapper(self)
                return wrapper!.queryInterface(iid)
            default: return nil
        }
    }
}
public typealias AnyIAsyncAction = any IAsyncAction

public extension IAsyncAction {
    func get() async throws {
        if status == .started {
            let event = WaitableEvent()
            completed = { _, _ in
                Task { await event.signal() }
            }
            await event.wait()
        }
        return try getResults()
    }
}

// MARK: - IAsyncAction Internals

@_spi(WinRTInternal)
extension __IMPL_Windows_Foundation {
    public enum IAsyncActionBridge : AbiInterfaceBridge {
        public typealias CABI = __x_ABI_CWindows_CFoundation_CIAsyncAction
        public typealias SwiftABI = __ABI_Windows_Foundation.IAsyncAction
        public typealias SwiftProjection = AnyIAsyncAction
        public static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
            guard let abi = abi else { return nil }
            return IAsyncActionImpl(abi)
        }

        public static func makeAbi() -> CABI {
            let vtblPtr = withUnsafeMutablePointer(to: &__ABI_Windows_Foundation.IAsyncActionVTable) { $0 }
            return .init(lpVtbl: vtblPtr)
        }
    }

    fileprivate class IAsyncActionImpl: IAsyncAction, WinRTAbiImpl {
        fileprivate typealias Bridge = IAsyncActionBridge
        fileprivate let _default: Bridge.SwiftABI
        fileprivate var thisPtr: test_component.IInspectable { _default }
        fileprivate init(_ fromAbi: ComPtr<Bridge.CABI>) {
            _default = Bridge.SwiftABI(fromAbi)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncaction.getresults)
        fileprivate func getResults() throws {
            try _default.GetResults()
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncaction.completed)
        fileprivate var completed : AsyncActionCompletedHandler! {
            get { try! _default.get_Completed() }
            set { try! _default.put_Completed(newValue) }
        }

        private lazy var _IAsyncInfo: __ABI_Windows_Foundation.IAsyncInfo! = getInterfaceForCaching()
        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncaction.cancel)
        fileprivate func cancel() throws {
            try _IAsyncInfo.Cancel()
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncaction.close)
        fileprivate func close() throws {
            try _IAsyncInfo.Close()
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncaction.errorcode)
        fileprivate var errorCode : HRESULT {
            get { try! _IAsyncInfo.get_ErrorCode() }
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncaction.id)
        fileprivate var id : UInt32 {
            get { try! _IAsyncInfo.get_Id() }
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncaction.status)
        fileprivate var status : AsyncStatus {
            get { try! _IAsyncInfo.get_Status() }
        }

    }

}
@_spi(WinRTInternal)
extension __ABI_Windows_Foundation {
    private static let IID___x_ABI_CWindows_CFoundation_CIAsyncAction: test_component.IID = .init(
        Data1: 0x5A648006, Data2: 0x843A, Data3: 0x4DA9, Data4: ( 0x86,0x5B,0x9D,0x26,0xE5,0xDF,0xAD,0x7B ) // 5A648006-843A-4DA9-865B-9D26E5DFAD7B
    ) 

    public class IAsyncAction: test_component.IInspectable {
        override public class var IID: test_component.IID { IID___x_ABI_CWindows_CFoundation_CIAsyncAction }

        open func put_Completed(_ handler: test_component.AsyncActionCompletedHandler?) throws {
            let handlerWrapper = __ABI_Windows_Foundation.AsyncActionCompletedHandlerWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CWindows_CFoundation_CIAsyncAction.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Completed(pThis, _handler))
            }
        }

        open func get_Completed() throws -> test_component.AsyncActionCompletedHandler? {
            let (handler) = try ComPtrs.initialize { handlerAbi in
                _ = try perform(as: __x_ABI_CWindows_CFoundation_CIAsyncAction.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Completed(pThis, &handlerAbi))
                }
            }
            return __ABI_Windows_Foundation.AsyncActionCompletedHandlerWrapper.unwrapFrom(abi: handler)
        }

        open func GetResults() throws {
            _ = try perform(as: __x_ABI_CWindows_CFoundation_CIAsyncAction.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetResults(pThis))
            }
        }

    }

    internal static var IAsyncActionVTable: __x_ABI_CWindows_CFoundation_CIAsyncActionVtbl = .init(
        QueryInterface: { IAsyncActionWrapper.queryInterface($0, $1, $2) },
        AddRef: { IAsyncActionWrapper.addRef($0) },
        Release: { IAsyncActionWrapper.release($0) },
        GetIids: {
            let size = MemoryLayout<test_component.IID>.size
            let iids = CoTaskMemAlloc(UInt64(size) * 4).assumingMemoryBound(to: test_component.IID.self)
            iids[0] = IUnknown.IID
            iids[1] = IInspectable.IID
            iids[2] = __ABI_Windows_Foundation.IAsyncActionWrapper.IID
            iids[3] = __ABI_Windows_Foundation.IAsyncInfoWrapper.IID
            $1!.pointee = 4
            $2!.pointee = iids
            return S_OK
        },

        GetRuntimeClassName: {
            _ = $0
            let hstring = try! HString("Windows.Foundation.IAsyncAction").detach()
            $1!.pointee = hstring
            return S_OK
        },

        GetTrustLevel: {
            _ = $0
            $1!.pointee = TrustLevel(rawValue: 0)
            return S_OK
        },

        put_Completed: {
            guard let __unwrapped__instance = IAsyncActionWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            guard let handler = __ABI_Windows_Foundation.AsyncActionCompletedHandlerWrapper.unwrapFrom(abi: ComPtr($1)) else { return E_INVALIDARG }
            __unwrapped__instance.completed = handler
            return S_OK
        },

        get_Completed: {
            guard let __unwrapped__instance = IAsyncActionWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let handler = __unwrapped__instance.completed
            let handlerWrapper = __ABI_Windows_Foundation.AsyncActionCompletedHandlerWrapper(handler)
            handlerWrapper?.copyTo($1)
            return S_OK
        },

        GetResults: {
            do {
                guard let __unwrapped__instance = IAsyncActionWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                try __unwrapped__instance.getResults()
                return S_OK
            } catch { return failWith(error: error) }
        }
    )

    public typealias IAsyncActionWrapper = InterfaceWrapperBase<__IMPL_Windows_Foundation.IAsyncActionBridge>
}
@_spi(WinRTInternal)
public class IAsyncActionMaker: MakeFromAbi {
    public typealias SwiftType = AnyIAsyncAction
    public static func from(abi: test_component.IInspectable) -> SwiftType {
        let swiftAbi: __ABI_Windows_Foundation.IAsyncAction = try! abi.QueryInterface()
        return __IMPL_Windows_Foundation.IAsyncActionBridge.from(abi: RawPointer(swiftAbi))!
    }
}

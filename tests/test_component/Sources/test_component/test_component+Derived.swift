// WARNING: Please don't edit this file. It was generated by Swift/WinRT v0.0.1
// swiftlint:disable all
import Foundation
import Ctest_component

public final class Derived : test_component.Base {
    private typealias SwiftABI = __ABI_test_component.IDerived
    private typealias CABI = __x_ABI_Ctest__component_CIDerived
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: test_component.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    private static let _defaultFactory: test_component.IActivationFactory = try! RoGetActivationFactory("test_component.Derived")
    override public init() {
        super.init(fromAbi: try! Self._defaultFactory.ActivateInstance())
    }

    private static let _IDerivedStatics: __ABI_test_component.IDerivedStatics = try! RoGetActivationFactory("test_component.Derived")
    override public static func createFromString(_ value: String) throws -> Derived! {
        return try _IDerivedStatics.CreateFromString(value)
    }

    public var prop : Int32 {
        get { try! _default.get_Prop() }
        set { try! _default.put_Prop(newValue) }
    }

    deinit {
        _default = nil
    }
}


// MARK: - Internals

@_spi(WinRTInternal)
extension __IMPL_test_component {
    public enum DerivedBridge: AbiBridge {
        public typealias SwiftProjection = Derived
        public typealias CABI = __x_ABI_Ctest__component_CIDerived
        public static func from(abi: ComPtr<__x_ABI_Ctest__component_CIDerived>?) -> Derived? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: test_component.IInspectable(abi))
        }
    }

}
@_spi(WinRTInternal)
public class DerivedMaker: MakeFromAbi {
    public typealias SwiftType = Derived
    public static func from(abi: test_component.IInspectable) -> SwiftType {
        return Derived(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
extension __ABI_test_component {
    private static let IID___x_ABI_Ctest__component_CIDerived: test_component.IID = .init(
        Data1: 0x864F4DCB, Data2: 0xC4FF, Data3: 0x5FBB, Data4: ( 0xB4,0x5D,0xA7,0x3E,0x25,0x7B,0x48,0xA2 )
    ) // 864F4DCB-C4FF-5FBB-B45D-A73E257B48A2
    public class IDerived: test_component.IInspectable {
        override public class var IID: test_component.IID { IID___x_ABI_Ctest__component_CIDerived }

        public func get_Prop() throws -> Int32 {
            var value: INT32 = 0
            _ = try perform(as: __x_ABI_Ctest__component_CIDerived.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Prop(pThis, &value))
            }
            return value
        }

        public func put_Prop(_ value: Int32) throws {
            _ = try perform(as: __x_ABI_Ctest__component_CIDerived.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Prop(pThis, value))
            }
        }

    }

    private static let IID___x_ABI_Ctest__component_CIDerivedStatics: test_component.IID = .init(
        Data1: 0x5DE6D589, Data2: 0x61EC, Data3: 0x5020, Data4: ( 0x80,0x3A,0x3E,0x62,0x6C,0x8B,0xBC,0x8E )
    ) // 5DE6D589-61EC-5020-803A-3E626C8BBC8E
    public class IDerivedStatics: test_component.IInspectable {
        override public class var IID: test_component.IID { IID___x_ABI_Ctest__component_CIDerivedStatics }

        public func CreateFromString(_ value: String) throws -> test_component.Derived? {
            let (result) = try ComPtrs.initialize { resultAbi in
                let _value = try! HString(value)
                _ = try perform(as: __x_ABI_Ctest__component_CIDerivedStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateFromString(pThis, _value.get(), &resultAbi))
                }
            }
            return __IMPL_test_component.DerivedBridge.from(abi: result)
        }

    }

}

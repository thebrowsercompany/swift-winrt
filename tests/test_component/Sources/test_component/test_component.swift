// WARNING: Please don't edit this file. It was generated by Swift/WinRT v0.0.1
// swiftlint:disable all
import Foundation
import Ctest_component

public typealias Fruit = __x_ABI_Ctest__component_CFruit
public typealias Keywords = __x_ABI_Ctest__component_CKeywords
public typealias Signed = __x_ABI_Ctest__component_CSigned
public typealias SwiftifiableNames = __x_ABI_Ctest__component_CSwiftifiableNames
public typealias Unsigned = __x_ABI_Ctest__component_CUnsigned
public final class ArrayMethods {
    private static let _IArrayMethodsStatics: __ABI_test_component.IArrayMethodsStatics = try! RoGetActivationFactory("test_component.ArrayMethods")
    public static func inInt32Array(_ value: [Int32]) throws -> String {
        return try _IArrayMethodsStatics.InInt32Array(value)
    }

    public static func inStringArray(_ value: [String]) throws -> String {
        return try _IArrayMethodsStatics.InStringArray(value)
    }

    public static func inObjectArray(_ value: [Any?]) throws -> String {
        return try _IArrayMethodsStatics.InObjectArray(value)
    }

    public static func inStringableArray(_ value: [test_component.AnyIStringable?]) throws -> String {
        return try _IArrayMethodsStatics.InStringableArray(value)
    }

    public static func inStructArray(_ value: [BlittableStruct]) throws -> String {
        return try _IArrayMethodsStatics.InStructArray(value)
    }

    public static func inNonBlittableStructArray(_ value: [NonBlittableStruct]) throws -> String {
        return try _IArrayMethodsStatics.InNonBlittableStructArray(value)
    }

    public static func inEnumArray(_ value: [Signed]) throws -> String {
        return try _IArrayMethodsStatics.InEnumArray(value)
    }

}

public final class AsyncMethods {
    private static let _IAsyncMethodsStatics: __ABI_test_component.IAsyncMethodsStatics = try! RoGetActivationFactory("test_component.AsyncMethods")
    public static func getCompletedAsync(_ result: Int32) throws -> AnyIAsyncOperation<Int32>! {
        return try _IAsyncMethodsStatics.GetCompletedAsync(result)
    }

    public static func getCompletedWithErrorAsync(_ errorCode: HRESULT) throws -> AnyIAsyncOperation<Int32>! {
        return try _IAsyncMethodsStatics.GetCompletedWithErrorAsync(errorCode)
    }

    public static func getPendingAsync() throws -> AsyncOperationInt! {
        return try _IAsyncMethodsStatics.GetPendingAsync()
    }

}

public final class AsyncOperationInt : WinRTClass, IAsyncOperationInt, IAsyncOperation, test_component.IAsyncInfo {
    public typealias TResult = Int32
    private typealias SwiftABI = __ABI_test_component.IAsyncOperationInt
    private typealias CABI = __x_ABI_Ctest__component_CIAsyncOperationInt
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: test_component.IInspectable) {
        super.init(fromAbi)
    }

    override public func queryInterface(_ iid: test_component.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    public func complete(_ result: Int32) throws {
        try _default.Complete(result)
    }

    public func completeWithError(_ errorCode: HRESULT) throws {
        try _default.CompleteWithError(errorCode)
    }

    private lazy var _IAsyncOperation: IAsyncOperationInt32! = getInterfaceForCaching()
    public func getResults() throws -> Int32 {
        try _IAsyncOperation.GetResults()
    }

    public var completed : AsyncOperationCompletedHandler<Int32>? {
        get { try! _IAsyncOperation.get_Completed() }
        set { try! _IAsyncOperation.put_Completed(newValue) }
    }

    private lazy var _IAsyncInfo: __ABI_Windows_Foundation.IAsyncInfo! = getInterfaceForCaching()
    public func cancel() throws {
        try _IAsyncInfo.Cancel()
    }

    public func close() throws {
        try _IAsyncInfo.Close()
    }

    public var errorCode : HRESULT {
        get { try! _IAsyncInfo.get_ErrorCode() }
    }

    public var id : UInt32 {
        get { try! _IAsyncInfo.get_Id() }
    }

    public var status : test_component.AsyncStatus {
        get { try! _IAsyncInfo.get_Status() }
    }

    deinit {
        _default = nil
        _IAsyncOperation = nil
        _IAsyncInfo = nil
    }
}

open class Base : WinRTClass {
    private typealias SwiftABI = __ABI_test_component.IBase
    private typealias CABI = __x_ABI_Ctest__component_CIBase
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: test_component.IInspectable) {
        super.init(fromAbi)
    }

    @_spi(WinRTInternal)
    public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout test_component.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init()
        MakeComposed(composing: composing, (self as! Composable.Class), createCallback)
    }
    override open func queryInterface(_ iid: test_component.IID) -> IUnknownRef? {
        switch iid {
            case __ABI_test_component.IBaseOverridesWrapper.IID:
                let wrapper = __ABI_test_component.IBaseOverridesWrapper(self)
                return wrapper!.queryInterface(iid)
            default: return super.queryInterface(iid)
        }
    }
    private static var _IBaseProtectedFactory : __ABI_test_component.IBaseProtectedFactory =  try! RoGetActivationFactory("test_component.Base")

    override public init() {
        super.init()
        MakeComposed(composing: __IMPL_test_component.BaseBridge.Composable.self, self) { baseInterface, innerInterface in 
            try! Self._IBaseProtectedFactory.CreateInstance(baseInterface, &innerInterface)
        }
    }

    private static let _IBaseStatics: __ABI_test_component.IBaseStatics = try! RoGetActivationFactory("test_component.Base")
    public class func createFromString(_ value: String) throws -> Base! {
        return try _IBaseStatics.CreateFromString(value)
    }

    public func doTheThing() throws {
        try _default.DoTheThing()
    }

    private lazy var _IBaseOverrides: __ABI_test_component.IBaseOverrides! = getInterfaceForCaching()
    open func onDoTheThing() throws {
        try _IBaseOverrides.OnDoTheThing()
    }

    deinit {
        _default = nil
        _IBaseOverrides = nil
    }
}

open class BaseCollection : WinRTClass, IVector, IIterable {
    public typealias T = Base?
    private typealias SwiftABI = test_component.IVectorBase
    private typealias CABI = __x_ABI_C__FIVector_1___x_ABI_Ctest__zcomponent__CBase
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: test_component.IInspectable) {
        super.init(fromAbi)
    }

    @_spi(WinRTInternal)
    public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout test_component.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init()
        MakeComposed(composing: composing, (self as! Composable.Class), createCallback)
    }
    override open func queryInterface(_ iid: test_component.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IBaseCollectionProtectedFactory : __ABI_test_component.IBaseCollectionProtectedFactory =  try! RoGetActivationFactory("test_component.BaseCollection")

    override public init() {
        super.init()
        MakeComposed(composing: __IMPL_test_component.BaseCollectionBridge.Composable.self, self) { baseInterface, innerInterface in 
            try! Self._IBaseCollectionProtectedFactory.CreateInstance(baseInterface, &innerInterface)
        }
    }

    // MARK: Collection
    public typealias Element = T
    public var startIndex: Int { 0 }
    public var endIndex: Int { Int(size) }
    public func index(after i: Int) -> Int {
        i+1
    }

    public func index(of: Element) -> Int? {
        var index: UInt32 = 0
        let result = indexOf(of, &index)
        guard result else { return nil }
        return Int(index)
    }
    public var count: Int { Int(size) }


    public subscript(position: Int) -> Element {
        get {
            getAt(UInt32(position))
        }
        set(newValue) {
            setAt(UInt32(position), newValue)
        }
    }

    public func removeLast() {
        removeAtEnd()
    }

    // MARK: WinRT
    public func getAt(_ index: UInt32) -> Base? {
        try! _default.GetAt(index)
    }

    public func getView() -> AnyIVectorView<Base?>? {
        try! _default.GetView()
    }

    public func indexOf(_ value: Base?, _ index: inout UInt32) -> Bool {
        try! _default.IndexOf(value, &index)
    }

    public func setAt(_ index: UInt32, _ value: Base?) {
        try! _default.SetAt(index, value)
    }

    public func insertAt(_ index: UInt32, _ value: Base?) {
        try! _default.InsertAt(index, value)
    }

    public func removeAt(_ index: UInt32) {
        try! _default.RemoveAt(index)
    }

    public func append(_ value: Base?) {
        try! _default.Append(value)
    }

    public func removeAtEnd() {
        try! _default.RemoveAtEnd()
    }

    public func clear() {
        try! _default.Clear()
    }

    public func replaceAll(_ items: [Base?]) {
        try! _default.ReplaceAll(items)
    }

    public var size : UInt32 {
        get { try! _default.get_Size() }
    }

    private lazy var _IIterable: IIterableBase! = getInterfaceForCaching()
    public func first() -> AnyIIterator<Base?>? {
        try! _IIterable.First()
    }

    deinit {
        _default = nil
        _IIterable = nil
    }
}

public final class BaseMapCollection : WinRTClass, IMap, IIterable {
    public typealias K = String
    public typealias V = Base?
    public typealias T = AnyIKeyValuePair<String, Base?>?
    private typealias SwiftABI = test_component.IMapString_Base
    private typealias CABI = __x_ABI_C__FIMap_2_HSTRING___x_ABI_Ctest__zcomponent__CBase
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: test_component.IInspectable) {
        super.init(fromAbi)
    }

    override public func queryInterface(_ iid: test_component.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    public func lookup(_ key: String) -> Base? {
        try! _default.Lookup(key)
    }

    public func hasKey(_ key: String) -> Bool {
        try! _default.HasKey(key)
    }

    public func getView() -> AnyIMapView<String, Base?>? {
        try! _default.GetView()
    }

    public func insert(_ key: String, _ value: Base?) -> Bool {
        try! _default.Insert(key, value)
    }

    public func remove(_ key: String) {
        try! _default.Remove(key)
    }

    public func clear() {
        try! _default.Clear()
    }

    public var size : UInt32 {
        get { try! _default.get_Size() }
    }

    private lazy var _IIterable: IIterableIKeyValuePairString_Base! = getInterfaceForCaching()
    public func first() -> AnyIIterator<AnyIKeyValuePair<String, Base?>?>? {
        try! _IIterable.First()
    }

    deinit {
        _default = nil
        _IIterable = nil
    }
}

open class BaseNoOverrides : WinRTClass {
    private typealias SwiftABI = __ABI_test_component.IBaseNoOverrides
    private typealias CABI = __x_ABI_Ctest__component_CIBaseNoOverrides
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: test_component.IInspectable) {
        super.init(fromAbi)
    }

    @_spi(WinRTInternal)
    public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout test_component.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init()
        MakeComposed(composing: composing, (self as! Composable.Class), createCallback)
    }
    override open func queryInterface(_ iid: test_component.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IBaseNoOverridesProtectedFactory : __ABI_test_component.IBaseNoOverridesProtectedFactory =  try! RoGetActivationFactory("test_component.BaseNoOverrides")

    override public init() {
        super.init()
        MakeComposed(composing: __IMPL_test_component.BaseNoOverridesBridge.Composable.self, self) { baseInterface, innerInterface in 
            try! Self._IBaseNoOverridesProtectedFactory.CreateInstance(baseInterface, &innerInterface)
        }
    }

    private static let _IBaseNoOverridesStatics: __ABI_test_component.IBaseNoOverridesStatics = try! RoGetActivationFactory("test_component.BaseNoOverrides")
    public class func createFromString(_ value: String) throws -> BaseNoOverrides! {
        return try _IBaseNoOverridesStatics.CreateFromString(value)
    }

    deinit {
        _default = nil
    }
}

public final class BaseObservableCollection : WinRTClass, IObservableVector, IVector, IIterable {
    public typealias T = Base?
    private typealias SwiftABI = test_component.IObservableVectorBase
    private typealias CABI = __x_ABI_C__FIObservableVector_1___x_ABI_Ctest__zcomponent__CBase
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: test_component.IInspectable) {
        super.init(fromAbi)
    }

    override public func queryInterface(_ iid: test_component.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    // MARK: Collection
    public typealias Element = T
    public var startIndex: Int { 0 }
    public var endIndex: Int { Int(size) }
    public func index(after i: Int) -> Int {
        i+1
    }

    public func index(of: Element) -> Int? {
        var index: UInt32 = 0
        let result = indexOf(of, &index)
        guard result else { return nil }
        return Int(index)
    }
    public var count: Int { Int(size) }


    public subscript(position: Int) -> Element {
        get {
            getAt(UInt32(position))
        }
        set(newValue) {
            setAt(UInt32(position), newValue)
        }
    }

    public func removeLast() {
        removeAtEnd()
    }

    // MARK: WinRT
    public lazy var vectorChanged : Event<VectorChangedEventHandler<Base?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_VectorChanged($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_VectorChanged($0)
       }
      )
    }()

    private lazy var _IVector: IVectorBase! = getInterfaceForCaching()
    public func getAt(_ index: UInt32) -> Base? {
        try! _IVector.GetAt(index)
    }

    public func getView() -> AnyIVectorView<Base?>? {
        try! _IVector.GetView()
    }

    public func indexOf(_ value: Base?, _ index: inout UInt32) -> Bool {
        try! _IVector.IndexOf(value, &index)
    }

    public func setAt(_ index: UInt32, _ value: Base?) {
        try! _IVector.SetAt(index, value)
    }

    public func insertAt(_ index: UInt32, _ value: Base?) {
        try! _IVector.InsertAt(index, value)
    }

    public func removeAt(_ index: UInt32) {
        try! _IVector.RemoveAt(index)
    }

    public func append(_ value: Base?) {
        try! _IVector.Append(value)
    }

    public func removeAtEnd() {
        try! _IVector.RemoveAtEnd()
    }

    public func clear() {
        try! _IVector.Clear()
    }

    public func replaceAll(_ items: [Base?]) {
        try! _IVector.ReplaceAll(items)
    }

    public var size : UInt32 {
        get { try! _IVector.get_Size() }
    }

    private lazy var _IIterable: IIterableBase! = getInterfaceForCaching()
    public func first() -> AnyIIterator<Base?>? {
        try! _IIterable.First()
    }

    deinit {
        _default = nil
        _IVector = nil
        _IIterable = nil
    }
}

public final class BufferTester {
    private static let _IBufferTesterStatics: __ABI_test_component.IBufferTesterStatics = try! RoGetActivationFactory("test_component.BufferTester")
    public static func getDataFrom(_ buffer: test_component.AnyIBuffer!, _ index: UInt32) throws -> UInt8 {
        return try _IBufferTesterStatics.GetDataFrom(buffer, index)
    }

}

public final class Class : WinRTClass, IBasic {
    private typealias SwiftABI = __ABI_test_component.IClass
    private typealias CABI = __x_ABI_Ctest__component_CIClass
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: test_component.IInspectable) {
        super.init(fromAbi)
    }

    override public func queryInterface(_ iid: test_component.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static let _defaultFactory: test_component.IActivationFactory = try! RoGetActivationFactory("test_component.Class")
    override public init() {
        super.init(try! Self._defaultFactory.ActivateInstance())
    }

    private static let _IClassFactory: __ABI_test_component.IClassFactory = try! RoGetActivationFactory("test_component.Class")
    public init(_ name: String) {
        super.init(try! Self._IClassFactory.CreateInstance(name))
    }

    public init(_ name: String, _ fruit: Fruit) {
        super.init(try! Self._IClassFactory.CreateInstance2(name, fruit))
    }

    public init(_ arg: AnyIMap<String, String>!, _ dummy1: Int32, _ dummy2: Int32, _ dummy3: Int32) {
        super.init(try! Self._IClassFactory.CreateInstance3(arg, dummy1, dummy2, dummy3))
    }

    public init(_ arg: AnyIMapView<String, String>!, _ dummy1: Int32, _ dummy2: Int32, _ dummy3: Int32, _ dummy4: Int32) {
        super.init(try! Self._IClassFactory.CreateInstance4(arg, dummy1, dummy2, dummy3, dummy4))
    }

    public init(_ arg: AnyIVector<String>!, _ dummy1: Int32, _ dummy2: Int32, _ dummy3: Int32, _ dummy4: Int32, _ dummy5: Int32) {
        super.init(try! Self._IClassFactory.CreateInstance5(arg, dummy1, dummy2, dummy3, dummy4, dummy5))
    }

    public init(_ arg: AnyIVectorView<String>!, _ dummy1: Int32, _ dummy2: Int32, _ dummy3: Int32, _ dummy4: Int32, _ dummy5: Int32, _ dummy6: Int32) {
        super.init(try! Self._IClassFactory.CreateInstance6(arg, dummy1, dummy2, dummy3, dummy4, dummy5, dummy6))
    }

    private static let _IClassFactory2: __ABI_test_component.IClassFactory2 = try! RoGetActivationFactory("test_component.Class")
    public init(_ name: String, _ fruit: Fruit, _ implementation: AnyIIAmImplementable!) {
        super.init(try! Self._IClassFactory2.CreateInstance(name, fruit, implementation))
    }

    private static let _IClassStatics: __ABI_test_component.IClassStatics = try! RoGetActivationFactory("test_component.Class")
    public static func staticTest() throws {
        try _IClassStatics.StaticTest()
    }

    public static func staticTestReturn() throws -> Int32 {
        return try _IClassStatics.StaticTestReturn()
    }

    public static func takeBaseAndGiveToCallbackAsObject(_ base: Base!, _ callback: test_component.InObjectDelegate!) throws {
        try _IClassStatics.TakeBaseAndGiveToCallbackAsObject(base, callback)
    }

    public static var staticProperty : Int32 {
        get { try! _IClassStatics.get_StaticProperty() }
    }

    private static let _IClassStatics2: __ABI_test_component.IClassStatics2 = try! RoGetActivationFactory("test_component.Class")
    public static func staticTestReturnFloat() throws -> Float {
        return try _IClassStatics2.StaticTestReturnFloat()
    }

    public static var staticPropertyFloat : Float {
        get { try! _IClassStatics2.get_StaticPropertyFloat() }
        set { try! _IClassStatics2.put_StaticPropertyFloat(newValue) }
    }

    public func setDelegate(_ value: AnyISimpleDelegate!) throws {
        try _default.SetDelegate(value)
    }

    public func getDelegate() throws -> AnyISimpleDelegate! {
        try _default.GetDelegate()
    }

    public func fail(_ message: String) throws {
        try _default.Fail(message)
    }

    public func inInt32(_ value: Int32) throws -> String {
        try _default.InInt32(value)
    }

    public func inString(_ value: String) throws -> String {
        try _default.InString(value)
    }

    public func inObject(_ value: Any!) throws -> String {
        try _default.InObject(value)
    }

    public func inEnum(_ value: Signed) throws -> String {
        try _default.InEnum(value)
    }

    public func outInt32(_ value: inout Int32) throws {
        try _default.OutInt32(&value)
    }

    public func outString(_ value: inout String) throws {
        try _default.OutString(&value)
    }

    public func outObject(_ value: inout Any!) throws {
        try _default.OutObject(&value)
    }

    public func outStringable(_ value: inout test_component.AnyIStringable!) throws {
        try _default.OutStringable(&value)
    }

    public func outBlittableStruct(_ value: inout BlittableStruct) throws {
        try _default.OutBlittableStruct(&value)
    }

    public func outNonBlittableStruct(_ value: inout NonBlittableStruct) throws {
        try _default.OutNonBlittableStruct(&value)
    }

    public func outEnum(_ value: inout Signed) throws {
        try _default.OutEnum(&value)
    }

    public func returnObject() throws -> Any! {
        try _default.ReturnObject()
    }

    public func returnEnum() throws -> Signed {
        try _default.ReturnEnum()
    }

    public func returnReferenceEnum() throws -> Signed? {
        try _default.ReturnReferenceEnum()
    }

    public func noexceptVoid() {
        try! _default.NoexceptVoid()
    }

    public func noexceptInt32() -> Int32 {
        try! _default.NoexceptInt32()
    }

    public func noexceptString() -> String {
        try! _default.NoexceptString()
    }

    public func raiseDeferrableEventAsync() throws -> AnyIAsyncOperation<Int32>! {
        try _default.RaiseDeferrableEventAsync()
    }

    public func returnChar() throws -> Character {
        try _default.ReturnChar()
    }

    public func inChar(_ value: Character) throws -> String {
        try _default.InChar(value)
    }

    public func outChar(_ value: inout Character) throws {
        try _default.OutChar(&value)
    }

    public var baseNoOverridesProperty : BaseNoOverrides! {
        get { try! _default.get_BaseNoOverridesProperty() }
        set { try! _default.put_BaseNoOverridesProperty(newValue) }
    }

    public var baseProperty : Base! {
        get { try! _default.get_BaseProperty() }
        set { try! _default.put_BaseProperty(newValue) }
    }

    public var enumProperty : Fruit {
        get { try! _default.get_EnumProperty() }
        set { try! _default.put_EnumProperty(newValue) }
    }

    public var id : Foundation.UUID? {
        get { try! _default.get_Id() }
        set { try! _default.put_Id(newValue) }
    }

    public var implementation : AnyIBasic! {
        get { try! _default.get_Implementation() }
        set { try! _default.put_Implementation(newValue) }
    }

    public var startValue : Int32? {
        get { try! _default.get_StartValue() }
        set { try! _default.put_StartValue(newValue) }
    }

    public lazy var deferrableEvent : Event<TypedEventHandler<Class?, DeferrableEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_DeferrableEvent($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_DeferrableEvent($0)
       }
      )
    }()

    private lazy var _IBasic: __ABI_test_component.IBasic! = getInterfaceForCaching()
    public func method() {
        try! _IBasic.Method()
    }

    deinit {
        _default = nil
        _IBasic = nil
    }
}

public final class CollectionTester : WinRTClass {
    private typealias SwiftABI = __ABI_test_component.ICollectionTester
    private typealias CABI = __x_ABI_Ctest__component_CICollectionTester
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: test_component.IInspectable) {
        super.init(fromAbi)
    }

    private static let _defaultFactory: test_component.IActivationFactory = try! RoGetActivationFactory("test_component.CollectionTester")
    override public init() {
        super.init(try! Self._defaultFactory.ActivateInstance())
    }

    private static let _ICollectionTesterStatics: __ABI_test_component.ICollectionTesterStatics = try! RoGetActivationFactory("test_component.CollectionTester")
    public static func inMap(_ value: AnyIMap<String, String>!) throws -> String {
        return try _ICollectionTesterStatics.InMap(value)
    }

    public static func inMapView(_ value: AnyIMapView<String, String>!) throws -> String {
        return try _ICollectionTesterStatics.InMapView(value)
    }

    public static func inVector(_ value: AnyIVector<String>!) throws -> String {
        return try _ICollectionTesterStatics.InVector(value)
    }

    public static func inVectorView(_ value: AnyIVectorView<String>!) throws -> String {
        return try _ICollectionTesterStatics.InVectorView(value)
    }

    public static func getObjectAt(_ value: AnyIVector<Any?>!, _ index: UInt32, _ callback: ObjectHandler!) throws {
        try _ICollectionTesterStatics.GetObjectAt(value, index, callback)
    }

    public static func vectorAsIterable(_ value: AnyIVector<String>!) throws -> AnyIIterable<String>! {
        return try _ICollectionTesterStatics.VectorAsIterable(value)
    }

    public func returnStoredStringVector() throws -> AnyIVector<String>! {
        try _default.ReturnStoredStringVector()
    }

    public func returnMapFromStringToString() throws -> AnyIMap<String, String>! {
        try _default.ReturnMapFromStringToString()
    }

    deinit {
        _default = nil
    }
}

public final class DeferrableEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_test_component.IDeferrableEventArgs
    private typealias CABI = __x_ABI_Ctest__component_CIDeferrableEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: test_component.IInspectable) {
        super.init(fromAbi)
    }

    public func getDeferral() throws -> test_component.Deferral! {
        try _default.GetDeferral()
    }

    public func incrementCounter() throws {
        try _default.IncrementCounter()
    }

    deinit {
        _default = nil
    }
}

public final class Derived : test_component.Base {
    private typealias SwiftABI = __ABI_test_component.IDerived
    private typealias CABI = __x_ABI_Ctest__component_CIDerived
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: test_component.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    private static let _defaultFactory: test_component.IActivationFactory = try! RoGetActivationFactory("test_component.Derived")
    override public init() {
        super.init(fromAbi: try! Self._defaultFactory.ActivateInstance())
    }

    private static let _IDerivedStatics: __ABI_test_component.IDerivedStatics = try! RoGetActivationFactory("test_component.Derived")
    override public static func createFromString(_ value: String) throws -> Derived! {
        return try _IDerivedStatics.CreateFromString(value)
    }

    public var prop : Int32 {
        get { try! _default.get_Prop() }
        set { try! _default.put_Prop(newValue) }
    }

    deinit {
        _default = nil
    }
}

public final class DerivedFromNoConstructor : test_component.UnsealedDerivedNoConstructor {
    private typealias SwiftABI = __ABI_test_component.IDerivedFromNoConstructor
    private typealias CABI = __x_ABI_Ctest__component_CIDerivedFromNoConstructor
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: test_component.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    public func method() throws {
        try _default.Method()
    }

    deinit {
        _default = nil
    }
}

public final class EventTester : WinRTClass {
    private typealias SwiftABI = __ABI_test_component.IEventTester
    private typealias CABI = __x_ABI_Ctest__component_CIEventTester
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: test_component.IInspectable) {
        super.init(fromAbi)
    }

    private static let _IEventTesterFactory: __ABI_test_component.IEventTesterFactory = try! RoGetActivationFactory("test_component.EventTester")
    public init(_ impl: AnyIIAmImplementable!) {
        super.init(try! Self._IEventTesterFactory.CreateInstance(impl))
    }

    public func subscribe() throws {
        try _default.Subscribe()
    }

    public func unsubscribe() throws {
        try _default.Unsubscribe()
    }

    public func getResult() throws -> String {
        try _default.GetResult()
    }

    public var count : Int32 {
        get { try! _default.get_Count() }
    }

    deinit {
        _default = nil
    }
}

public final class NoopClosable : WinRTClass, test_component.IClosable {
    private typealias SwiftABI = __ABI_Windows_Foundation.IClosable
    private typealias CABI = __x_ABI_CWindows_CFoundation_CIClosable
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: test_component.IInspectable) {
        super.init(fromAbi)
    }

    override public func queryInterface(_ iid: test_component.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static let _defaultFactory: test_component.IActivationFactory = try! RoGetActivationFactory("test_component.NoopClosable")
    override public init() {
        super.init(try! Self._defaultFactory.ActivateInstance())
    }

    public func close() throws {
        try _default.Close()
    }

    deinit {
        _default = nil
    }
}

public final class NullValues {
    private static let _INullValuesStatics: __ABI_test_component.INullValuesStatics = try! RoGetActivationFactory("test_component.NullValues")
    public static func isObjectNull(_ value: Any!) throws -> Bool {
        return try _INullValuesStatics.IsObjectNull(value)
    }

    public static func isInterfaceNull(_ value: test_component.AnyIClosable!) throws -> Bool {
        return try _INullValuesStatics.IsInterfaceNull(value)
    }

    public static func isGenericInterfaceNull(_ value: AnyIVector<String>!) throws -> Bool {
        return try _INullValuesStatics.IsGenericInterfaceNull(value)
    }

    public static func isClassNull(_ value: NoopClosable!) throws -> Bool {
        return try _INullValuesStatics.IsClassNull(value)
    }

    public static func isDelegateNull(_ value: VoidToVoidDelegate!) throws -> Bool {
        return try _INullValuesStatics.IsDelegateNull(value)
    }

    public static func getNullObject() throws -> Any! {
        return try _INullValuesStatics.GetNullObject()
    }

    public static func getNullInterface() throws -> test_component.AnyIClosable! {
        return try _INullValuesStatics.GetNullInterface()
    }

    public static func getNullGenericInterface() throws -> AnyIVector<String>! {
        return try _INullValuesStatics.GetNullGenericInterface()
    }

    public static func getNullClass() throws -> NoopClosable! {
        return try _INullValuesStatics.GetNullClass()
    }

    public static func getNullDelegate() throws -> VoidToVoidDelegate! {
        return try _INullValuesStatics.GetNullDelegate()
    }

}

public final class Simple : WinRTClass {
    private typealias SwiftABI = __ABI_test_component.ISimple
    private typealias CABI = __x_ABI_Ctest__component_CISimple
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: test_component.IInspectable) {
        super.init(fromAbi)
    }

    private static let _defaultFactory: test_component.IActivationFactory = try! RoGetActivationFactory("test_component.Simple")
    override public init() {
        super.init(try! Self._defaultFactory.ActivateInstance())
    }

    private static let _ISimpleStatics: __ABI_test_component.ISimpleStatics = try! RoGetActivationFactory("test_component.Simple")
    public static func fireStaticEvent() throws {
        try _ISimpleStatics.FireStaticEvent()
    }

    public static var staticEvent : Event<EventHandler<Any?>> = {
      .init(
        add: { try! _ISimpleStatics.add_StaticEvent($0) },
        remove: { try? _ISimpleStatics.remove_StaticEvent($0) }
      )
    }()

    public func method() throws {
        try _default.Method()
    }

    public func operation(_ value: test_component.DateTime) throws -> AnyIAsyncOperation<Int32>! {
        try _default.Operation(value)
    }

    public func action(_ value: test_component.DateTime) throws -> test_component.AnyIAsyncAction! {
        try _default.Action(value)
    }

    public func object(_ value: test_component.DateTime) throws -> Any! {
        try _default.Object(value)
    }

    public func returnBlittableStruct() throws -> BlittableStruct {
        try _default.ReturnBlittableStruct()
    }

    public func takeBlittableStruct(_ value: BlittableStruct) throws {
        try _default.TakeBlittableStruct(value)
    }

    public func returnStructWithReference() throws -> StructWithIReference {
        try _default.ReturnStructWithReference()
    }

    public func takeStructWithReference(_ value: StructWithIReference) throws {
        try _default.TakeStructWithReference(value)
    }

    public func returnNonBlittableStruct() throws -> NonBlittableStruct {
        try _default.ReturnNonBlittableStruct()
    }

    public func takeNonBlittableStruct(_ value: NonBlittableStruct) throws {
        try _default.TakeNonBlittableStruct(value)
    }

    public func fireEvent() throws {
        try _default.FireEvent()
    }

    public var blittableStructProperty : BlittableStruct {
        get { try! _default.get_BlittableStructProperty() }
        set { try! _default.put_BlittableStructProperty(newValue) }
    }

    public var nonBlittableStructProperty : NonBlittableStruct {
        get { try! _default.get_NonBlittableStructProperty() }
        set { try! _default.put_NonBlittableStructProperty(newValue) }
    }

    public var stringProperty : String {
        get { try! _default.get_StringProperty() }
        set { try! _default.put_StringProperty(newValue) }
    }

    public var structWithReferenceProperty : StructWithIReference {
        get { try! _default.get_StructWithReferenceProperty() }
        set { try! _default.put_StructWithReferenceProperty(newValue) }
    }

    public lazy var inEvent : Event<test_component.InDelegate> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_InEvent($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_InEvent($0)
       }
      )
    }()

    public lazy var signalEvent : Event<test_component.SignalDelegate> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_SignalEvent($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_SignalEvent($0)
       }
      )
    }()

    public lazy var simpleEvent : Event<TypedEventHandler<Simple?, SimpleEventArgs>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_SimpleEvent($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_SimpleEvent($0)
       }
      )
    }()

    deinit {
        _default = nil
    }
}

public final class StaticClass {
    private static let _IStaticClassStatics: __ABI_test_component.IStaticClassStatics = try! RoGetActivationFactory("test_component.StaticClass")
    public static func inEnum(_ value: Signed) throws -> String {
        return try _IStaticClassStatics.InEnum(value)
    }

    public static func inNonBlittableStruct(_ value: NonBlittableStruct) throws -> String {
        return try _IStaticClassStatics.InNonBlittableStruct(value)
    }

    public static func takeBase(_ base: Base!) throws {
        try _IStaticClassStatics.TakeBase(base)
    }

    public static var enumProperty : Fruit {
        get { try! _IStaticClassStatics.get_EnumProperty() }
        set { try! _IStaticClassStatics.put_EnumProperty(newValue) }
    }

}

open class UnsealedDerived : test_component.Base {
    private typealias SwiftABI = __ABI_test_component.IUnsealedDerived
    private typealias CABI = __x_ABI_Ctest__component_CIUnsealedDerived
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: test_component.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout test_component.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: test_component.IID) -> IUnknownRef? {
        switch iid {
            case __ABI_test_component.IUnsealedDerivedOverloads2Wrapper.IID:
                let wrapper = __ABI_test_component.IUnsealedDerivedOverloads2Wrapper(self)
                return wrapper!.queryInterface(iid)
            case __ABI_test_component.IUnsealedDerivedOverridesWrapper.IID:
                let wrapper = __ABI_test_component.IUnsealedDerivedOverridesWrapper(self)
                return wrapper!.queryInterface(iid)
            default: return super.queryInterface(iid)
        }
    }
    private static var _IUnsealedDerivedFactory : __ABI_test_component.IUnsealedDerivedFactory =  try! RoGetActivationFactory("test_component.UnsealedDerived")

    override public init() {
        super.init(composing: __IMPL_test_component.UnsealedDerivedBridge.Composable.self) { baseInterface, innerInterface in 
            try! Self._IUnsealedDerivedFactory.CreateInstance(baseInterface, &innerInterface)
        }
    }

    public init(_ prop: Int32) {
        super.init(composing: __IMPL_test_component.UnsealedDerivedBridge.Composable.self) { baseInterface, innerInterface in 
            try! Self._IUnsealedDerivedFactory.CreateInstance2(prop, baseInterface, &innerInterface)
        }
    }

    public init(_ prop1: String, _ prop2: Base!) {
        super.init(composing: __IMPL_test_component.UnsealedDerivedBridge.Composable.self) { baseInterface, innerInterface in 
            try! Self._IUnsealedDerivedFactory.CreateInstance3(prop1, prop2, baseInterface, &innerInterface)
        }
    }

    public var prop : Int32 {
        get { try! _default.get_Prop() }
        set { try! _default.put_Prop(newValue) }
    }

    private lazy var _IUnsealedDerivedOverloads2: __ABI_test_component.IUnsealedDerivedOverloads2! = getInterfaceForCaching()
    open func onAfterDoTheThing() throws {
        try _IUnsealedDerivedOverloads2.OnAfterDoTheThing()
    }

    private lazy var _IUnsealedDerivedOverrides: __ABI_test_component.IUnsealedDerivedOverrides! = getInterfaceForCaching()
    open func onBeforeDoTheThing() throws {
        try _IUnsealedDerivedOverrides.OnBeforeDoTheThing()
    }

    deinit {
        _default = nil
        _IUnsealedDerivedOverloads2 = nil
        _IUnsealedDerivedOverrides = nil
    }
}

open class UnsealedDerived2 : test_component.UnsealedDerived {
    private typealias SwiftABI = __ABI_test_component.IUnsealedDerived2
    private typealias CABI = __x_ABI_Ctest__component_CIUnsealedDerived2
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: test_component.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout test_component.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: test_component.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IUnsealedDerived2Factory : __ABI_test_component.IUnsealedDerived2Factory =  try! RoGetActivationFactory("test_component.UnsealedDerived2")

    override public init(_ prop: Int32) {
        super.init(composing: __IMPL_test_component.UnsealedDerived2Bridge.Composable.self) { baseInterface, innerInterface in 
            try! Self._IUnsealedDerived2Factory.CreateInstance(prop, baseInterface, &innerInterface)
        }
    }

    private static var _IUnsealedDerived2ProtectedFactory : __ABI_test_component.IUnsealedDerived2ProtectedFactory =  try! RoGetActivationFactory("test_component.UnsealedDerived2")

    override public init() {
        super.init(composing: __IMPL_test_component.UnsealedDerived2Bridge.Composable.self) { baseInterface, innerInterface in 
            try! Self._IUnsealedDerived2ProtectedFactory.CreateInstance(baseInterface, &innerInterface)
        }
    }

    public func method() throws {
        try _default.Method()
    }

    deinit {
        _default = nil
    }
}

open class UnsealedDerivedFromNoConstructor : test_component.UnsealedDerivedNoConstructor {
    private typealias SwiftABI = __ABI_test_component.IUnsealedDerivedFromNoConstructor
    private typealias CABI = __x_ABI_Ctest__component_CIUnsealedDerivedFromNoConstructor
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: test_component.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout test_component.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: test_component.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IUnsealedDerivedFromNoConstructorFactory : __ABI_test_component.IUnsealedDerivedFromNoConstructorFactory =  try! RoGetActivationFactory("test_component.UnsealedDerivedFromNoConstructor")

    public init() {
        super.init(composing: __IMPL_test_component.UnsealedDerivedFromNoConstructorBridge.Composable.self) { baseInterface, innerInterface in 
            try! Self._IUnsealedDerivedFromNoConstructorFactory.CreateInstance(baseInterface, &innerInterface)
        }
    }

    deinit {
        _default = nil
    }
}

open class UnsealedDerivedNoConstructor : test_component.Base {
    private typealias SwiftABI = __ABI_test_component.IUnsealedDerivedNoConstructor
    private typealias CABI = __x_ABI_Ctest__component_CIUnsealedDerivedNoConstructor
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: test_component.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout test_component.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: test_component.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IUnsealedDerivedNoConstructorFactory : __ABI_test_component.IUnsealedDerivedNoConstructorFactory =  try! RoGetActivationFactory("test_component.UnsealedDerivedNoConstructor")

    deinit {
        _default = nil
    }
}

open class UnsealedDerivedNoOverrides : test_component.BaseNoOverrides {
    private typealias SwiftABI = __ABI_test_component.IUnsealedDerivedNoOverrides
    private typealias CABI = __x_ABI_Ctest__component_CIUnsealedDerivedNoOverrides
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: test_component.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout test_component.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: test_component.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IUnsealedDerivedNoOverridesProtectedFactory : __ABI_test_component.IUnsealedDerivedNoOverridesProtectedFactory =  try! RoGetActivationFactory("test_component.UnsealedDerivedNoOverrides")

    override public init() {
        super.init(composing: __IMPL_test_component.UnsealedDerivedNoOverridesBridge.Composable.self) { baseInterface, innerInterface in 
            try! Self._IUnsealedDerivedNoOverridesProtectedFactory.CreateInstance(baseInterface, &innerInterface)
        }
    }

    deinit {
        _default = nil
    }
}

public final class WeakReferencer : WinRTClass {
    private typealias SwiftABI = __ABI_test_component.IWeakReferencer
    private typealias CABI = __x_ABI_Ctest__component_CIWeakReferencer
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: test_component.IInspectable) {
        super.init(fromAbi)
    }

    private static let _IWeakReferencerFactory: __ABI_test_component.IWeakReferencerFactory = try! RoGetActivationFactory("test_component.WeakReferencer")
    public init(_ object: AnyIReferenceTarget!) {
        super.init(try! Self._IWeakReferencerFactory.CreateInstance(object))
    }

    public func resolve() throws -> AnyIReferenceTarget! {
        try _default.Resolve()
    }

    deinit {
        _default = nil
    }
}

public typealias ObjectHandler = (Any?) throws -> ()
public typealias VoidToVoidDelegate = () throws -> ()
public struct BlittableStruct: Hashable, Codable, Sendable {
    public var first: Int32 = 0
    public var second: Int32 = 0
    public init() {}
    public init(first: Int32, second: Int32) {
        self.first = first
        self.second = second
    }
}

public struct NonBlittableBoolStruct: Hashable, Codable, Sendable {
    public var first: Bool = false
    public var second: Bool = false
    public var third: Bool = false
    public var fourth: Bool = false
    public init() {}
    public init(first: Bool, second: Bool, third: Bool, fourth: Bool) {
        self.first = first
        self.second = second
        self.third = third
        self.fourth = fourth
    }
}

public struct NonBlittableStruct: Hashable, Codable, Sendable {
    public var first: String = ""
    public var second: String = ""
    public var third: Int32 = 0
    public var fourth: String = ""
    public init() {}
    public init(first: String, second: String, third: Int32, fourth: String) {
        self.first = first
        self.second = second
        self.third = third
        self.fourth = fourth
    }
}

public struct SimpleEventArgs: Hashable, Codable, Sendable {
    public var value: Int32 = 0
    public init() {}
    public init(value: Int32) {
        self.value = value
    }
}

public struct StructWithEnum: Hashable, Codable, Sendable {
    public var names: SwiftifiableNames = .init(0)
    public init() {}
    public init(names: SwiftifiableNames) {
        self.names = names
    }
}

public struct StructWithIReference: Hashable, Codable, Sendable {
    public var value1: Int32?
    public var value2: Int32?
    public init() {}
    public init(value1: Int32?, value2: Int32?) {
        self.value1 = value1
        self.value2 = value2
    }
}

public protocol IAsyncMethodsWithProgress : WinRTInterface {
    func operationWithProgress(_ value: test_component.DateTime) throws -> test_component.AnyIAsyncOperationWithProgress<Int32, Double>!
}

extension IAsyncMethodsWithProgress {
    public func queryInterface(_ iid: test_component.IID) -> IUnknownRef? {
        switch iid {
            case __ABI_test_component.IAsyncMethodsWithProgressWrapper.IID:
                let wrapper = __ABI_test_component.IAsyncMethodsWithProgressWrapper(self)
                return wrapper!.queryInterface(iid)
            default: return nil
        }
    }
}
public typealias AnyIAsyncMethodsWithProgress = any IAsyncMethodsWithProgress

public protocol IAsyncOperationInt : WinRTInterface {
    func complete(_ result: Int32) throws
    func completeWithError(_ errorCode: HRESULT) throws
}

extension IAsyncOperationInt {
    public func queryInterface(_ iid: test_component.IID) -> IUnknownRef? {
        switch iid {
            case __ABI_test_component.IAsyncOperationIntWrapper.IID:
                let wrapper = __ABI_test_component.IAsyncOperationIntWrapper(self)
                return wrapper!.queryInterface(iid)
            default: return nil
        }
    }
}
public typealias AnyIAsyncOperationInt = any IAsyncOperationInt

public protocol IBasic : WinRTInterface {
    func method()
}

extension IBasic {
    public func queryInterface(_ iid: test_component.IID) -> IUnknownRef? {
        switch iid {
            case __ABI_test_component.IBasicWrapper.IID:
                let wrapper = __ABI_test_component.IBasicWrapper(self)
                return wrapper!.queryInterface(iid)
            default: return nil
        }
    }
}
public typealias AnyIBasic = any IBasic

public protocol IIAmImplementable : WinRTInterface {
    func inInt32(_ value: Int32) throws -> String
    func inString(_ value: String) throws -> String
    func inObject(_ value: Any!) throws -> String
    func inEnum(_ value: test_component.Signed) throws -> String
    func outInt32(_ value: inout Int32) throws
    func outString(_ value: inout String) throws
    func outObject(_ value: inout Any!) throws
    func outBlittableStruct(_ value: inout test_component.BlittableStruct) throws
    func outNonBlittableStruct(_ value: inout test_component.NonBlittableStruct) throws
    func outEnum(_ value: inout test_component.Signed) throws
    func returnObject() throws -> Any!
    func returnEnum() throws -> test_component.Signed
    func fireEvent(_ data: String) throws
    var enumProperty: test_component.Fruit { get set }
    var id: Foundation.UUID? { get set }
    var implementableEvent: Event<test_component.InDelegate> { get }
}

public extension EventSource where Handler == test_component.InDelegate {
    func invoke(_ value: String) throws {
        for handler in getInvocationList() {
            try handler(value)
        }
    }
}

extension IIAmImplementable {
    public func queryInterface(_ iid: test_component.IID) -> IUnknownRef? {
        switch iid {
            case __ABI_test_component.IIAmImplementableWrapper.IID:
                let wrapper = __ABI_test_component.IIAmImplementableWrapper(self)
                return wrapper!.queryInterface(iid)
            default: return nil
        }
    }
}
public typealias AnyIIAmImplementable = any IIAmImplementable

public protocol IInterfaceWithObservableVector : WinRTInterface {
    func takeObservable(_ basics: test_component.AnyIObservableVector<test_component.AnyIBasic?>!) throws
}

extension IInterfaceWithObservableVector {
    public func queryInterface(_ iid: test_component.IID) -> IUnknownRef? {
        switch iid {
            case __ABI_test_component.IInterfaceWithObservableVectorWrapper.IID:
                let wrapper = __ABI_test_component.IInterfaceWithObservableVectorWrapper(self)
                return wrapper!.queryInterface(iid)
            default: return nil
        }
    }
}
public typealias AnyIInterfaceWithObservableVector = any IInterfaceWithObservableVector

public protocol IReferenceTarget : WinRTInterface {
    func method() throws
}

extension IReferenceTarget {
    public func queryInterface(_ iid: test_component.IID) -> IUnknownRef? {
        switch iid {
            case __ABI_test_component.IReferenceTargetWrapper.IID:
                let wrapper = __ABI_test_component.IReferenceTargetWrapper(self)
                return wrapper!.queryInterface(iid)
            default: return nil
        }
    }
}
public typealias AnyIReferenceTarget = any IReferenceTarget

public protocol ISimpleDelegate : WinRTInterface {
    func doThis() throws
    func doThat(_ val: Int32) throws
}

extension ISimpleDelegate {
    public func queryInterface(_ iid: test_component.IID) -> IUnknownRef? {
        switch iid {
            case __ABI_test_component.ISimpleDelegateWrapper.IID:
                let wrapper = __ABI_test_component.ISimpleDelegateWrapper(self)
                return wrapper!.queryInterface(iid)
            default: return nil
        }
    }
}
public typealias AnyISimpleDelegate = any ISimpleDelegate

public protocol InterfaceWithReturnDelegate : WinRTInterface {
    var eventWithReturn: Event<test_component.ReturnInt32Delegate> { get }
}

public extension EventSource where Handler == test_component.ReturnInt32Delegate {
    @discardableResult func invoke() throws -> Int32 {
        var result:Int32 = 0
        for handler in getInvocationList() {
            result = try handler()
        }
        return result
    }
}

extension InterfaceWithReturnDelegate {
    public func queryInterface(_ iid: test_component.IID) -> IUnknownRef? {
        switch iid {
            case __ABI_test_component.InterfaceWithReturnDelegateWrapper.IID:
                let wrapper = __ABI_test_component.InterfaceWithReturnDelegateWrapper(self)
                return wrapper!.queryInterface(iid)
            default: return nil
        }
    }
}
public typealias AnyInterfaceWithReturnDelegate = any InterfaceWithReturnDelegate

public protocol WithIterableGuids : WinRTInterface {
    func ids() throws -> test_component.AnyIVector<Foundation.UUID>!
}

extension WithIterableGuids {
    public func queryInterface(_ iid: test_component.IID) -> IUnknownRef? {
        switch iid {
            case __ABI_test_component.WithIterableGuidsWrapper.IID:
                let wrapper = __ABI_test_component.WithIterableGuidsWrapper(self)
                return wrapper!.queryInterface(iid)
            default: return nil
        }
    }
}
public typealias AnyWithIterableGuids = any WithIterableGuids

public protocol WithKeyword : WinRTInterface {
    func `enum`(_ `extension`: String) throws
    func `subscript`() throws
    var `struct`: String { get set }
    var `repeat`: Event<EventHandler<Any?>> { get }
}

extension WithKeyword {
    public func queryInterface(_ iid: test_component.IID) -> IUnknownRef? {
        switch iid {
            case __ABI_test_component.WithKeywordWrapper.IID:
                let wrapper = __ABI_test_component.WithKeywordWrapper(self)
                return wrapper!.queryInterface(iid)
            default: return nil
        }
    }
}
public typealias AnyWithKeyword = any WithKeyword

extension test_component.Fruit {
    public static var banana : test_component.Fruit {
        __x_ABI_Ctest__component_CFruit_Banana
    }
    public static var apple : test_component.Fruit {
        __x_ABI_Ctest__component_CFruit_Apple
    }
    public static var orange : test_component.Fruit {
        __x_ABI_Ctest__component_CFruit_Orange
    }
    public static var pineapple : test_component.Fruit {
        __x_ABI_Ctest__component_CFruit_Pineapple
    }
}
extension test_component.Fruit: @retroactive Hashable, @retroactive Codable, @retroactive @unchecked Sendable {}

extension test_component.Keywords {
    public static var `as` : test_component.Keywords {
        __x_ABI_Ctest__component_CKeywords_As
    }
    public static var `break` : test_component.Keywords {
        __x_ABI_Ctest__component_CKeywords_Break
    }
    public static var `case` : test_component.Keywords {
        __x_ABI_Ctest__component_CKeywords_Case
    }
    public static var `catch` : test_component.Keywords {
        __x_ABI_Ctest__component_CKeywords_Catch
    }
    public static var `class` : test_component.Keywords {
        __x_ABI_Ctest__component_CKeywords_Class
    }
    public static var `continue` : test_component.Keywords {
        __x_ABI_Ctest__component_CKeywords_Continue
    }
    public static var `default` : test_component.Keywords {
        __x_ABI_Ctest__component_CKeywords_Default
    }
    public static var `defer` : test_component.Keywords {
        __x_ABI_Ctest__component_CKeywords_Defer
    }
    public static var `do` : test_component.Keywords {
        __x_ABI_Ctest__component_CKeywords_Do
    }
    public static var `else` : test_component.Keywords {
        __x_ABI_Ctest__component_CKeywords_Else
    }
    public static var `enum` : test_component.Keywords {
        __x_ABI_Ctest__component_CKeywords_Enum
    }
    public static var `extension` : test_component.Keywords {
        __x_ABI_Ctest__component_CKeywords_Extension
    }
    public static var `fallthrough` : test_component.Keywords {
        __x_ABI_Ctest__component_CKeywords_Fallthrough
    }
    public static var `false` : test_component.Keywords {
        __x_ABI_Ctest__component_CKeywords_False
    }
    public static var `for` : test_component.Keywords {
        __x_ABI_Ctest__component_CKeywords_For
    }
    public static var `func` : test_component.Keywords {
        __x_ABI_Ctest__component_CKeywords_Func
    }
    public static var `if` : test_component.Keywords {
        __x_ABI_Ctest__component_CKeywords_If
    }
    public static var `import` : test_component.Keywords {
        __x_ABI_Ctest__component_CKeywords_Import
    }
    public static var `in` : test_component.Keywords {
        __x_ABI_Ctest__component_CKeywords_In
    }
    public static var `internal` : test_component.Keywords {
        __x_ABI_Ctest__component_CKeywords_Internal
    }
    public static var `is` : test_component.Keywords {
        __x_ABI_Ctest__component_CKeywords_Is
    }
    public static var `let` : test_component.Keywords {
        __x_ABI_Ctest__component_CKeywords_Let
    }
    public static var `nil` : test_component.Keywords {
        __x_ABI_Ctest__component_CKeywords_Nil
    }
    public static var `private` : test_component.Keywords {
        __x_ABI_Ctest__component_CKeywords_Private
    }
    public static var `protocol` : test_component.Keywords {
        __x_ABI_Ctest__component_CKeywords_Protocol
    }
    public static var `public` : test_component.Keywords {
        __x_ABI_Ctest__component_CKeywords_Public
    }
    public static var `repeat` : test_component.Keywords {
        __x_ABI_Ctest__component_CKeywords_Repeat
    }
    public static var `rethrows` : test_component.Keywords {
        __x_ABI_Ctest__component_CKeywords_Rethrows
    }
    public static var `return` : test_component.Keywords {
        __x_ABI_Ctest__component_CKeywords_Return
    }
    public static var `self` : test_component.Keywords {
        __x_ABI_Ctest__component_CKeywords_Self
    }
    public static var `static` : test_component.Keywords {
        __x_ABI_Ctest__component_CKeywords_Static
    }
    public static var `struct` : test_component.Keywords {
        __x_ABI_Ctest__component_CKeywords_Struct
    }
    public static var `subscript` : test_component.Keywords {
        __x_ABI_Ctest__component_CKeywords_Subscript
    }
    public static var `super` : test_component.Keywords {
        __x_ABI_Ctest__component_CKeywords_Super
    }
    public static var `switch` : test_component.Keywords {
        __x_ABI_Ctest__component_CKeywords_Switch
    }
    public static var `throw` : test_component.Keywords {
        __x_ABI_Ctest__component_CKeywords_Throw
    }
    public static var `throws` : test_component.Keywords {
        __x_ABI_Ctest__component_CKeywords_Throws
    }
    public static var `true` : test_component.Keywords {
        __x_ABI_Ctest__component_CKeywords_True
    }
    public static var `try` : test_component.Keywords {
        __x_ABI_Ctest__component_CKeywords_Try
    }
    public static var `var` : test_component.Keywords {
        __x_ABI_Ctest__component_CKeywords_Var
    }
    public static var `where` : test_component.Keywords {
        __x_ABI_Ctest__component_CKeywords_Where
    }
    public static var `while` : test_component.Keywords {
        __x_ABI_Ctest__component_CKeywords_While
    }
}
extension test_component.Keywords: @retroactive Hashable, @retroactive Codable, @retroactive @unchecked Sendable {}

extension test_component.Signed {
    public static var first : test_component.Signed {
        __x_ABI_Ctest__component_CSigned_First
    }
    public static var second : test_component.Signed {
        __x_ABI_Ctest__component_CSigned_Second
    }
    public static var third : test_component.Signed {
        __x_ABI_Ctest__component_CSigned_Third
    }
}
extension test_component.Signed: @retroactive Hashable, @retroactive Codable, @retroactive @unchecked Sendable {}

extension test_component.SwiftifiableNames {
    public static var camelCase : test_component.SwiftifiableNames {
        __x_ABI_Ctest__component_CSwiftifiableNames_camelCase
    }
    public static var pascalCase : test_component.SwiftifiableNames {
        __x_ABI_Ctest__component_CSwiftifiableNames_PascalCase
    }
    public static var esingleLetterPrefixed : test_component.SwiftifiableNames {
        __x_ABI_Ctest__component_CSwiftifiableNames_ESingleLetterPrefixed
    }
    public static var leadingCaps : test_component.SwiftifiableNames {
        __x_ABI_Ctest__component_CSwiftifiableNames_LEADINGCaps
    }
    public static var r8g8b8a8Typeless : test_component.SwiftifiableNames {
        __x_ABI_Ctest__component_CSwiftifiableNames_R8G8B8A8Typeless
    }
    public static var uuid : test_component.SwiftifiableNames {
        __x_ABI_Ctest__component_CSwiftifiableNames_UUID
    }
}
extension test_component.SwiftifiableNames: @retroactive Hashable, @retroactive Codable, @retroactive @unchecked Sendable {}

extension test_component.Unsigned {
    public static var first : test_component.Unsigned {
        __x_ABI_Ctest__component_CUnsigned_First
    }
    public static var second : test_component.Unsigned {
        __x_ABI_Ctest__component_CUnsigned_Second
    }
    public static var third : test_component.Unsigned {
        __x_ABI_Ctest__component_CUnsigned_Third
    }
}
extension test_component.Unsigned: @retroactive Hashable, @retroactive Codable, @retroactive @unchecked Sendable {}


// WARNING: Please don't edit this file. It was generated by Swift/WinRT v0.0.1
// swiftlint:disable all
import Ctest_component

public typealias Fruit = __x_ABI_Ctest__component_CFruit
public typealias Keywords = __x_ABI_Ctest__component_CKeywords
public typealias Signed = __x_ABI_Ctest__component_CSigned
public typealias SwiftifiableNames = __x_ABI_Ctest__component_CSwiftifiableNames
public typealias Unsigned = __x_ABI_Ctest__component_CUnsigned
public final class AsyncOperationInt : WinRTClass, IAsyncOperation, test_component.IAsyncInfo {
    public typealias TResult = Int32
    private typealias SwiftABI = IAsyncOperationInt32
    private typealias CABI = __x_ABI_C__FIAsyncOperation_1_int
    private var _default: SwiftABI!
    public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        if T.self == C_IInspectable.self {
            return RawPointer(_default)
        }
        if T.self == C_IUnknown.self {
            return RawPointer(_default)
        }
        return nil
    }

    public var thisPtr: test_component.IInspectable { _default }

    public static func from(abi: UnsafeMutablePointer<__x_ABI_C__FIAsyncOperation_1_int>?) -> AsyncOperationInt? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: .init(abi))
    }

    public init(fromAbi: test_component.IInspectable) {
        _default = try! fromAbi.QueryInterface()
    }

    public func queryInterface(_ iid: test_component.IID) -> IUnknownRef? {
        return test_component.queryInterface(sealed: self, iid)}
    public func getResults() throws -> Int32 {
        let result = try _default.GetResultsImpl()
        return result
    }

    public var completed : AsyncOperationCompletedHandler<Int32>? {
        get {
            let result = try! _default.get_CompletedImpl()
            return test_component.__x_ABI_C__FIAsyncOperationCompletedHandler_1_intWrapper.unwrapFrom(abi: result)
        }

        set {
            let wrapper = test_component.__x_ABI_C__FIAsyncOperationCompletedHandler_1_intWrapper(newValue)
            let _newValue = try! wrapper?.toABI { $0 }
            try! _default.put_CompletedImpl(_newValue)
        }
    }

    internal lazy var _IAsyncInfo: __ABI_Windows_Foundation.IAsyncInfo = try! _default.QueryInterface()
    public func cancel() throws {
        try _IAsyncInfo.CancelImpl()
    }

    public func close() throws {
        try _IAsyncInfo.CloseImpl()
    }

    public var errorCode : HRESULT {
        get {
            let result = try! _IAsyncInfo.get_ErrorCodeImpl()
            return result
        }

    }

    public var id : UInt32 {
        get {
            let result = try! _IAsyncInfo.get_IdImpl()
            return result
        }

    }

    public var status : test_component.AsyncStatus {
        get {
            let result = try! _IAsyncInfo.get_StatusImpl()
            return result
        }

    }

}

open class Base : UnsealedWinRTClass {
    private (set) public var _inner: IUnknownRef?
    private typealias SwiftABI = __ABI_test_component.IBase
    private typealias CABI = __x_ABI_Ctest__component_CIBase
    private var _default: SwiftABI!
    open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        if T.self == C_IInspectable.self {
            return RawPointer(_default)
        }
        if T.self == C_IUnknown.self {
            return RawPointer(_default)
        }
        return nil
    }

    open var thisPtr: test_component.IInspectable { _default }

    public static func from(abi: UnsafeMutablePointer<__x_ABI_Ctest__component_CIBase>?) -> Base? {
        guard let abi = abi else { return nil }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    public init(fromAbi: test_component.IInspectable) {
        _default = try! fromAbi.QueryInterface()
    }

    open func queryInterface(_ iid: test_component.IID) -> IUnknownRef? {
        switch iid {
            case __ABI_test_component.IBaseOverridesWrapper.IID:
                let wrapper = __ABI_test_component.IBaseOverridesWrapper(self)
                return wrapper!.queryInterface(iid)
            default: return test_component.queryInterface(unsealed: self, iid)
        }
    }
    private static var _IBaseProtectedFactory : __ABI_test_component.IBaseProtectedFactory =  try! RoGetActivationFactory(HString("test_component.Base"))
    public init() {
        self._default = MakeComposed(Self._IBaseProtectedFactory, &_inner, self)
    }

    public init<Factory: ComposableActivationFactory>(_ factory : Factory) {
        self._default = try! MakeComposed(factory, &_inner, self as! Factory.Composable.Default.SwiftProjection).QueryInterface()
        _ = self._default.Release() // release to reset reference count since QI caused an AddRef on ourselves
    }
    public func doTheThing() throws {
        try _default.DoTheThingImpl()
    }

    internal lazy var _IBaseOverrides: __ABI_test_component.IBaseOverrides = try! IUnknown(_inner!.borrow).QueryInterface()
    open func onDoTheThing() throws {
        try _IBaseOverrides.OnDoTheThingImpl()
    }

    internal class IBaseOverrides : ComposableImpl {
        internal typealias CABI = __x_ABI_Ctest__component_CIBaseOverrides
        internal typealias SwiftABI = __ABI_test_component.IBaseOverrides
        internal class Default : MakeComposedAbi {
            internal typealias SwiftProjection = Base
            internal typealias CABI = __x_ABI_Ctest__component_CIBase
            internal typealias SwiftABI = __ABI_test_component.IBase
            internal static func from(abi: UnsafeMutableRawPointer?) -> SwiftProjection? {
                guard let abi = abi else { return nil }
                return .init(fromAbi: .init(abi))
            }
        }
    }
    internal typealias Composable = IBaseOverrides
    open class var _makeFromAbi : any MakeFromAbi.Type { Composable.Default.self }
}

public final class BaseCollection : WinRTClass, IVector, IIterable {
    public typealias T = Base?
    private typealias SwiftABI = IVectorBase
    private typealias CABI = __x_ABI_C__FIVector_1___x_ABI_Ctest__zcomponent__CBase
    private var _default: SwiftABI!
    public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        if T.self == C_IInspectable.self {
            return RawPointer(_default)
        }
        if T.self == C_IUnknown.self {
            return RawPointer(_default)
        }
        return nil
    }

    public var thisPtr: test_component.IInspectable { _default }

    public static func from(abi: UnsafeMutablePointer<__x_ABI_C__FIVector_1___x_ABI_Ctest__zcomponent__CBase>?) -> BaseCollection? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: .init(abi))
    }

    public init(fromAbi: test_component.IInspectable) {
        _default = try! fromAbi.QueryInterface()
    }

    public func queryInterface(_ iid: test_component.IID) -> IUnknownRef? {
        return test_component.queryInterface(sealed: self, iid)}
    // MARK: Collection
    public typealias Element = T
    public var startIndex: Int { 0 }
    public var endIndex: Int { Int(size) }
    public func index(after i: Int) -> Int {
        i+1
    }

    public func index(of: Element) -> Int? {
        var index: UInt32 = 0
        let result = indexOf(of, &index)
        guard result else { return nil }
        return Int(index)
    }
    public var count: Int { Int(size) }


    public subscript(position: Int) -> Element {
        get {
            getAt(UInt32(position))
        }
        set(newValue) {
            setAt(UInt32(position), newValue)
        }
    }

    public func removeLast() {
        removeAtEnd()
    }

    // MARK: WinRT
    public func getAt(_ index: UInt32) -> Base? {
        let result = try! _default.GetAtImpl(index)
        return .from(abi: result)
    }

    public func getView() -> AnyIVectorView<Base?>? {
        let result = try! _default.GetViewImpl()
        return test_component.__x_ABI_C__FIVectorView_1___x_ABI_Ctest__zcomponent__CBaseWrapper.unwrapFrom(abi: result)
    }

    public func indexOf(_ value: Base?, _ index: inout UInt32) -> Bool {
        let result = try! _default.IndexOfImpl(RawPointer(value), &index)
        return .init(from: result)
    }

    public func setAt(_ index: UInt32, _ value: Base?) {
        try! _default.SetAtImpl(index, RawPointer(value))
    }

    public func insertAt(_ index: UInt32, _ value: Base?) {
        try! _default.InsertAtImpl(index, RawPointer(value))
    }

    public func removeAt(_ index: UInt32) {
        try! _default.RemoveAtImpl(index)
    }

    public func append(_ value: Base?) {
        try! _default.AppendImpl(RawPointer(value))
    }

    public func removeAtEnd() {
        try! _default.RemoveAtEndImpl()
    }

    public func clear() {
        try! _default.ClearImpl()
    }

    public var size : UInt32 {
        get {
            let result = try! _default.get_SizeImpl()
            return result
        }

    }

    internal lazy var _IIterable: IIterableBase = try! _default.QueryInterface()
    public func first() -> AnyIIterator<Base?>? {
        let result = try! _IIterable.FirstImpl()
        return test_component.__x_ABI_C__FIIterator_1___x_ABI_Ctest__zcomponent__CBaseWrapper.unwrapFrom(abi: result)
    }

}

public final class BaseMapCollection : WinRTClass, IMap, IIterable {
    public typealias K = String
    public typealias V = Base?
    public typealias T = AnyIKeyValuePair<String, Base?>?
    private typealias SwiftABI = IMapString_Base
    private typealias CABI = __x_ABI_C__FIMap_2_HSTRING___x_ABI_Ctest__zcomponent__CBase
    private var _default: SwiftABI!
    public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        if T.self == C_IInspectable.self {
            return RawPointer(_default)
        }
        if T.self == C_IUnknown.self {
            return RawPointer(_default)
        }
        return nil
    }

    public var thisPtr: test_component.IInspectable { _default }

    public static func from(abi: UnsafeMutablePointer<__x_ABI_C__FIMap_2_HSTRING___x_ABI_Ctest__zcomponent__CBase>?) -> BaseMapCollection? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: .init(abi))
    }

    public init(fromAbi: test_component.IInspectable) {
        _default = try! fromAbi.QueryInterface()
    }

    public func queryInterface(_ iid: test_component.IID) -> IUnknownRef? {
        return test_component.queryInterface(sealed: self, iid)}
    public func lookup(_ key: String) -> Base? {
        let _key = try! HString(key)
        let result = try! _default.LookupImpl(_key.get())
        return .from(abi: result)
    }

    public func hasKey(_ key: String) -> Bool {
        let _key = try! HString(key)
        let result = try! _default.HasKeyImpl(_key.get())
        return .init(from: result)
    }

    public func getView() -> AnyIMapView<String, Base?>? {
        let result = try! _default.GetViewImpl()
        return test_component.__x_ABI_C__FIMapView_2_HSTRING___x_ABI_Ctest__zcomponent__CBaseWrapper.unwrapFrom(abi: result)
    }

    public func insert(_ key: String, _ value: Base?) -> Bool {
        let _key = try! HString(key)
        let result = try! _default.InsertImpl(_key.get(), RawPointer(value))
        return .init(from: result)
    }

    public func remove(_ key: String) {
        let _key = try! HString(key)
        try! _default.RemoveImpl(_key.get())
    }

    public func clear() {
        try! _default.ClearImpl()
    }

    public var size : UInt32 {
        get {
            let result = try! _default.get_SizeImpl()
            return result
        }

    }

    internal lazy var _IIterable: IIterableIKeyValuePairString_Base = try! _default.QueryInterface()
    public func first() -> AnyIIterator<AnyIKeyValuePair<String, Base?>?>? {
        let result = try! _IIterable.FirstImpl()
        return test_component.__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_Ctest__zcomponent__CBaseWrapper.unwrapFrom(abi: result)
    }

}

open class BaseNoOverrides : UnsealedWinRTClass {
    private (set) public var _inner: IUnknownRef?
    private typealias SwiftABI = __ABI_test_component.IBaseNoOverrides
    private typealias CABI = __x_ABI_Ctest__component_CIBaseNoOverrides
    private var _default: SwiftABI!
    open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        if T.self == C_IInspectable.self {
            return RawPointer(_default)
        }
        if T.self == C_IUnknown.self {
            return RawPointer(_default)
        }
        return nil
    }

    open var thisPtr: test_component.IInspectable { _default }

    public static func from(abi: UnsafeMutablePointer<__x_ABI_Ctest__component_CIBaseNoOverrides>?) -> BaseNoOverrides? {
        guard let abi = abi else { return nil }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    public init(fromAbi: test_component.IInspectable) {
        _default = try! fromAbi.QueryInterface()
    }

    open func queryInterface(_ iid: test_component.IID) -> IUnknownRef? {
        return test_component.queryInterface(unsealed: self, iid)}
    private static var _IBaseNoOverridesProtectedFactory : __ABI_test_component.IBaseNoOverridesProtectedFactory =  try! RoGetActivationFactory(HString("test_component.BaseNoOverrides"))
    public init() {
        self._default = MakeComposed(Self._IBaseNoOverridesProtectedFactory, &_inner, self)
    }

    public init<Factory: ComposableActivationFactory>(_ factory : Factory) {
        self._default = try! MakeComposed(factory, &_inner, self as! Factory.Composable.Default.SwiftProjection).QueryInterface()
        _ = self._default.Release() // release to reset reference count since QI caused an AddRef on ourselves
    }
    internal class IBaseNoOverrides : ComposableImpl {
        internal typealias CABI = C_IInspectable
        internal typealias SwiftABI = test_component.IInspectable
        internal class Default : MakeComposedAbi {
            internal typealias SwiftProjection = BaseNoOverrides
            internal typealias CABI = __x_ABI_Ctest__component_CIBaseNoOverrides
            internal typealias SwiftABI = __ABI_test_component.IBaseNoOverrides
            internal static func from(abi: UnsafeMutableRawPointer?) -> SwiftProjection? {
                guard let abi = abi else { return nil }
                return .init(fromAbi: .init(abi))
            }
        }
    }
    internal typealias Composable = IBaseNoOverrides
    open class var _makeFromAbi : any MakeFromAbi.Type { Composable.Default.self }
}

public final class BaseObservableCollection : WinRTClass, IObservableVector, IVector, IIterable {
    public typealias T = Base?
    private typealias SwiftABI = IObservableVectorBase
    private typealias CABI = __x_ABI_C__FIObservableVector_1___x_ABI_Ctest__zcomponent__CBase
    private var _default: SwiftABI!
    public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        if T.self == C_IInspectable.self {
            return RawPointer(_default)
        }
        if T.self == C_IUnknown.self {
            return RawPointer(_default)
        }
        return nil
    }

    public var thisPtr: test_component.IInspectable { _default }

    public static func from(abi: UnsafeMutablePointer<__x_ABI_C__FIObservableVector_1___x_ABI_Ctest__zcomponent__CBase>?) -> BaseObservableCollection? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: .init(abi))
    }

    public init(fromAbi: test_component.IInspectable) {
        _default = try! fromAbi.QueryInterface()
    }

    public func queryInterface(_ iid: test_component.IID) -> IUnknownRef? {
        return test_component.queryInterface(sealed: self, iid)}
    // MARK: Collection
    public typealias Element = T
    public var startIndex: Int { 0 }
    public var endIndex: Int { Int(size) }
    public func index(after i: Int) -> Int {
        i+1
    }

    public func index(of: Element) -> Int? {
        var index: UInt32 = 0
        let result = indexOf(of, &index)
        guard result else { return nil }
        return Int(index)
    }
    public var count: Int { Int(size) }


    public subscript(position: Int) -> Element {
        get {
            getAt(UInt32(position))
        }
        set(newValue) {
            setAt(UInt32(position), newValue)
        }
    }

    public func removeLast() {
        removeAtEnd()
    }

    // MARK: WinRT
    public lazy var vectorChanged : Event<VectorChangedEventHandler<Base?>> = {
      .init(
        add: { [weak this = _default] in
          guard let this else { return .init() }
          let wrapper = test_component.__x_ABI_C__FVectorChangedEventHandler_1___x_ABI_Ctest__zcomponent__CBaseWrapper($0)
          let abi = try! wrapper?.toABI { $0 }
          return try! this.add_VectorChangedImpl(abi)
        },
        remove: { [weak this = _default] in
         try? this?.remove_VectorChangedImpl($0)
       }
      )
    }()

    internal lazy var _IVector: IVectorBase = try! _default.QueryInterface()
    public func getAt(_ index: UInt32) -> Base? {
        let result = try! _IVector.GetAtImpl(index)
        return .from(abi: result)
    }

    public func getView() -> AnyIVectorView<Base?>? {
        let result = try! _IVector.GetViewImpl()
        return test_component.__x_ABI_C__FIVectorView_1___x_ABI_Ctest__zcomponent__CBaseWrapper.unwrapFrom(abi: result)
    }

    public func indexOf(_ value: Base?, _ index: inout UInt32) -> Bool {
        let result = try! _IVector.IndexOfImpl(RawPointer(value), &index)
        return .init(from: result)
    }

    public func setAt(_ index: UInt32, _ value: Base?) {
        try! _IVector.SetAtImpl(index, RawPointer(value))
    }

    public func insertAt(_ index: UInt32, _ value: Base?) {
        try! _IVector.InsertAtImpl(index, RawPointer(value))
    }

    public func removeAt(_ index: UInt32) {
        try! _IVector.RemoveAtImpl(index)
    }

    public func append(_ value: Base?) {
        try! _IVector.AppendImpl(RawPointer(value))
    }

    public func removeAtEnd() {
        try! _IVector.RemoveAtEndImpl()
    }

    public func clear() {
        try! _IVector.ClearImpl()
    }

    public var size : UInt32 {
        get {
            let result = try! _IVector.get_SizeImpl()
            return result
        }

    }

    internal lazy var _IIterable: IIterableBase = try! _default.QueryInterface()
    public func first() -> AnyIIterator<Base?>? {
        let result = try! _IIterable.FirstImpl()
        return test_component.__x_ABI_C__FIIterator_1___x_ABI_Ctest__zcomponent__CBaseWrapper.unwrapFrom(abi: result)
    }

}

public final class Class : WinRTClass, IBasic {
    private typealias SwiftABI = __ABI_test_component.IClass
    private typealias CABI = __x_ABI_Ctest__component_CIClass
    private var _default: SwiftABI!
    public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        if T.self == C_IInspectable.self {
            return RawPointer(_default)
        }
        if T.self == C_IUnknown.self {
            return RawPointer(_default)
        }
        return nil
    }

    public var thisPtr: test_component.IInspectable { _default }

    public static func from(abi: UnsafeMutablePointer<__x_ABI_Ctest__component_CIClass>?) -> Class? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: .init(abi))
    }

    public init(fromAbi: test_component.IInspectable) {
        _default = try! fromAbi.QueryInterface()
    }

    public func queryInterface(_ iid: test_component.IID) -> IUnknownRef? {
        return test_component.queryInterface(sealed: self, iid)}
    public init() {
        try! _default = RoActivateInstance(HString("test_component.Class"))
    }

    private static let _IClassFactory: __ABI_test_component.IClassFactory = try! RoGetActivationFactory(HString("test_component.Class"))
    public init(_ name: String) {
        let _name = try! HString(name)
        let value = try! Self._IClassFactory.CreateInstanceImpl(_name.get())
        _default = __ABI_test_component.IClass(consuming: value!)
    }

    public init(_ name: String, _ fruit: Fruit) {
        let _name = try! HString(name)
        let value = try! Self._IClassFactory.CreateInstance2Impl(_name.get(), fruit)
        _default = __ABI_test_component.IClass(consuming: value!)
    }

    public init(_ arg: AnyIMap<String, String>!, _ dummy1: Int32, _ dummy2: Int32, _ dummy3: Int32) {
        let argWrapper = test_component.__x_ABI_C__FIMap_2_HSTRING_HSTRINGWrapper(arg)
        let _arg = try! argWrapper?.toABI { $0 }
        let value = try! Self._IClassFactory.CreateInstance3Impl(_arg, dummy1, dummy2, dummy3)
        _default = __ABI_test_component.IClass(consuming: value!)
    }

    public init(_ arg: AnyIMapView<String, String>!, _ dummy1: Int32, _ dummy2: Int32, _ dummy3: Int32, _ dummy4: Int32) {
        let argWrapper = test_component.__x_ABI_C__FIMapView_2_HSTRING_HSTRINGWrapper(arg)
        let _arg = try! argWrapper?.toABI { $0 }
        let value = try! Self._IClassFactory.CreateInstance4Impl(_arg, dummy1, dummy2, dummy3, dummy4)
        _default = __ABI_test_component.IClass(consuming: value!)
    }

    public init(_ arg: AnyIVector<String>!, _ dummy1: Int32, _ dummy2: Int32, _ dummy3: Int32, _ dummy4: Int32, _ dummy5: Int32) {
        let argWrapper = test_component.__x_ABI_C__FIVector_1_HSTRINGWrapper(arg)
        let _arg = try! argWrapper?.toABI { $0 }
        let value = try! Self._IClassFactory.CreateInstance5Impl(_arg, dummy1, dummy2, dummy3, dummy4, dummy5)
        _default = __ABI_test_component.IClass(consuming: value!)
    }

    public init(_ arg: AnyIVectorView<String>!, _ dummy1: Int32, _ dummy2: Int32, _ dummy3: Int32, _ dummy4: Int32, _ dummy5: Int32, _ dummy6: Int32) {
        let argWrapper = test_component.__x_ABI_C__FIVectorView_1_HSTRINGWrapper(arg)
        let _arg = try! argWrapper?.toABI { $0 }
        let value = try! Self._IClassFactory.CreateInstance6Impl(_arg, dummy1, dummy2, dummy3, dummy4, dummy5, dummy6)
        _default = __ABI_test_component.IClass(consuming: value!)
    }

    private static let _IClassFactory2: __ABI_test_component.IClassFactory2 = try! RoGetActivationFactory(HString("test_component.Class"))
    public init(_ name: String, _ fruit: Fruit, _ implementation: AnyIIAmImplementable!) {
        let _name = try! HString(name)
        let implementationWrapper = __ABI_test_component.IIAmImplementableWrapper(implementation)
        let _implementation = try! implementationWrapper?.toABI { $0 }
        let value = try! Self._IClassFactory2.CreateInstanceImpl(_name.get(), fruit, _implementation)
        _default = __ABI_test_component.IClass(consuming: value!)
    }

    private static let _IClassStatics: __ABI_test_component.IClassStatics = try! RoGetActivationFactory(HString("test_component.Class"))
    public static func staticTest() {
        try! _IClassStatics.StaticTestImpl()
    }

    public static func staticTestReturn() -> Int32 {
        let result = try! _IClassStatics.StaticTestReturnImpl()
        return result
    }

    public static var staticProperty : Int32 {
        get {
            let value = try! _IClassStatics.get_StaticPropertyImpl()
            return value
        }

    }

    private static let _IClassStatics2: __ABI_test_component.IClassStatics2 = try! RoGetActivationFactory(HString("test_component.Class"))
    public static func staticTestReturnFloat() -> Float {
        let result = try! _IClassStatics2.StaticTestReturnFloatImpl()
        return result
    }

    public static var staticPropertyFloat : Float {
        get {
            let value = try! _IClassStatics2.get_StaticPropertyFloatImpl()
            return value
        }

        set {
            try! _IClassStatics2.put_StaticPropertyFloatImpl(newValue)
        }
    }

    public func setDelegate(_ value: AnyISimpleDelegate!) throws {
        let valueWrapper = __ABI_test_component.ISimpleDelegateWrapper(value)
        let _value = try! valueWrapper?.toABI { $0 }
        try _default.SetDelegateImpl(_value)
    }

    public func getDelegate() throws -> AnyISimpleDelegate! {
        let result = try _default.GetDelegateImpl()
        return __ABI_test_component.ISimpleDelegateWrapper.unwrapFrom(abi: result)
    }

    public func fail(_ message: String) throws {
        let _message = try! HString(message)
        try _default.FailImpl(_message.get())
    }

    public func inInt32(_ value: Int32) throws -> String {
        let result = try _default.InInt32Impl(value)
        return .init(from: result)
    }

    public func inString(_ value: String) throws -> String {
        let _value = try! HString(value)
        let result = try _default.InStringImpl(_value.get())
        return .init(from: result)
    }

    public func inObject(_ value: Any!) throws -> String {
        let valueWrapper = __ABI_.AnyWrapper(value)
        let _value = try! valueWrapper?.toABI { $0 }
        let result = try _default.InObjectImpl(_value)
        return .init(from: result)
    }

    public func inEnum(_ value: Signed) throws -> String {
        let result = try _default.InEnumImpl(value)
        return .init(from: result)
    }

    public func outInt32(_ value: inout Int32) throws {
        try _default.OutInt32Impl(&value)
    }

    public func outString(_ value: inout String) throws {
        var _value: HSTRING?
        try _default.OutStringImpl(&_value)
        value = .init(from: _value)
        WindowsDeleteString(_value)
    }

    public func outObject(_ value: inout Any!) throws {
        var _value: UnsafeMutablePointer<C_IInspectable>?
        try _default.OutObjectImpl(&_value)
        value = __ABI_.AnyWrapper.unwrapFrom(abi: _value)
    }

    public func outStringable(_ value: inout test_component.AnyIStringable!) throws {
        var _value: UnsafeMutablePointer<__x_ABI_CWindows_CFoundation_CIStringable>?
        try _default.OutStringableImpl(&_value)
        value = __ABI_Windows_Foundation.IStringableWrapper.unwrapFrom(abi: _value)
    }

    public func outBlittableStruct(_ value: inout BlittableStruct) throws {
        var _value: __x_ABI_Ctest__component_CBlittableStruct = .init()
        try _default.OutBlittableStructImpl(&_value)
        value = .from(abi: _value)
    }

    public func outNonBlittableStruct(_ value: inout NonBlittableStruct) throws {
        let _value: __ABI_test_component._ABI_NonBlittableStruct = .init()
        try _default.OutNonBlittableStructImpl(&_value.val)
        value = .from(abi: _value.val)
    }

    public func outEnum(_ value: inout Signed) throws {
        try _default.OutEnumImpl(&value)
    }

    public func returnObject() throws -> Any! {
        let result = try _default.ReturnObjectImpl()
        return __ABI_.AnyWrapper.unwrapFrom(abi: result)
    }

    public func returnEnum() throws -> Signed {
        let result = try _default.ReturnEnumImpl()
        return result
    }

    public func returnReferenceEnum() throws -> Signed? {
        let result = try _default.ReturnReferenceEnumImpl()
        return .init(ref: result)
    }

    public func noexceptVoid() {
        try! _default.NoexceptVoidImpl()
    }

    public func noexceptInt32() -> Int32 {
        let result = try! _default.NoexceptInt32Impl()
        return result
    }

    public func noexceptString() -> String {
        let result = try! _default.NoexceptStringImpl()
        return .init(from: result)
    }

    public func raiseDeferrableEventAsync() throws -> AnyIAsyncOperation<Int32>! {
        let operation = try _default.RaiseDeferrableEventAsyncImpl()
        return test_component.__x_ABI_C__FIAsyncOperation_1_intWrapper.unwrapFrom(abi: operation)
    }

    public func returnChar() throws -> Character {
        let result = try _default.ReturnCharImpl()
        return .init(from: result)
    }

    public func inChar(_ value: Character) throws -> String {
        let result = try _default.InCharImpl(.init(from: value))
        return .init(from: result)
    }

    public func outChar(_ value: inout Character) throws {
        var _value: WCHAR = .init()
        try _default.OutCharImpl(&_value)
        value = .init(from: _value)
    }

    public var baseNoOverridesProperty : BaseNoOverrides! {
        get {
            let value = try! _default.get_BaseNoOverridesPropertyImpl()
            return .from(abi: value)
        }

        set {
            try! _default.put_BaseNoOverridesPropertyImpl(RawPointer(newValue))
        }
    }

    public var baseProperty : Base! {
        get {
            let value = try! _default.get_BasePropertyImpl()
            return .from(abi: value)
        }

        set {
            try! _default.put_BasePropertyImpl(RawPointer(newValue))
        }
    }

    public var enumProperty : Fruit {
        get {
            let value = try! _default.get_EnumPropertyImpl()
            return value
        }

        set {
            try! _default.put_EnumPropertyImpl(newValue)
        }
    }

    public var id : test_component.GUID? {
        get {
            let value = try! _default.get_IdImpl()
            return .init(ref: value)
        }

        set {
            let wrapper = test_component.__x_ABI_C__FIReference_1_GUIDWrapper(newValue)
            let _newValue = try! wrapper?.toABI { $0 }
            try! _default.put_IdImpl(_newValue)
        }
    }

    public var implementation : AnyIBasic! {
        get {
            let value = try! _default.get_ImplementationImpl()
            return __ABI_test_component.IBasicWrapper.unwrapFrom(abi: value)
        }

        set {
            let wrapper = __ABI_test_component.IBasicWrapper(newValue)
            let _newValue = try! wrapper?.toABI { $0 }
            try! _default.put_ImplementationImpl(_newValue)
        }
    }

    public var startValue : Int32? {
        get {
            let value = try! _default.get_StartValueImpl()
            return .init(ref: value)
        }

        set {
            let wrapper = test_component.__x_ABI_C__FIReference_1_intWrapper(newValue)
            let _newValue = try! wrapper?.toABI { $0 }
            try! _default.put_StartValueImpl(_newValue)
        }
    }

    public lazy var deferrableEvent : Event<TypedEventHandler<Class?, DeferrableEventArgs?>> = {
      .init(
        add: { [weak this = _default] in
          guard let this else { return .init() }
          let wrapper = test_component.__x_ABI_C__FITypedEventHandler_2___x_ABI_Ctest__zcomponent__CClass___x_ABI_Ctest__zcomponent__CDeferrableEventArgsWrapper($0)
          let abi = try! wrapper?.toABI { $0 }
          return try! this.add_DeferrableEventImpl(abi)
        },
        remove: { [weak this = _default] in
         try? this?.remove_DeferrableEventImpl($0)
       }
      )
    }()

    internal lazy var _IBasic: __ABI_test_component.IBasic = try! _default.QueryInterface()
    public func method() {
        try! _IBasic.MethodImpl()
    }

}

public final class CollectionTester : WinRTClass {
    private typealias SwiftABI = __ABI_test_component.ICollectionTester
    private typealias CABI = __x_ABI_Ctest__component_CICollectionTester
    private var _default: SwiftABI!
    public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        if T.self == C_IInspectable.self {
            return RawPointer(_default)
        }
        if T.self == C_IUnknown.self {
            return RawPointer(_default)
        }
        return nil
    }

    public var thisPtr: test_component.IInspectable { _default }

    public static func from(abi: UnsafeMutablePointer<__x_ABI_Ctest__component_CICollectionTester>?) -> CollectionTester? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: .init(abi))
    }

    public init(fromAbi: test_component.IInspectable) {
        _default = try! fromAbi.QueryInterface()
    }

    public init() {
        try! _default = RoActivateInstance(HString("test_component.CollectionTester"))
    }

    private static let _ICollectionTesterStatics: __ABI_test_component.ICollectionTesterStatics = try! RoGetActivationFactory(HString("test_component.CollectionTester"))
    public static func inMap(_ value: AnyIMap<String, String>!) -> String {
        let valueWrapper = test_component.__x_ABI_C__FIMap_2_HSTRING_HSTRINGWrapper(value)
        let _value = try! valueWrapper?.toABI { $0 }
        let result = try! _ICollectionTesterStatics.InMapImpl(_value)
        return .init(from: result)
    }

    public static func inMapView(_ value: AnyIMapView<String, String>!) -> String {
        let valueWrapper = test_component.__x_ABI_C__FIMapView_2_HSTRING_HSTRINGWrapper(value)
        let _value = try! valueWrapper?.toABI { $0 }
        let result = try! _ICollectionTesterStatics.InMapViewImpl(_value)
        return .init(from: result)
    }

    public static func inVector(_ value: AnyIVector<String>!) -> String {
        let valueWrapper = test_component.__x_ABI_C__FIVector_1_HSTRINGWrapper(value)
        let _value = try! valueWrapper?.toABI { $0 }
        let result = try! _ICollectionTesterStatics.InVectorImpl(_value)
        return .init(from: result)
    }

    public static func inVectorView(_ value: AnyIVectorView<String>!) -> String {
        let valueWrapper = test_component.__x_ABI_C__FIVectorView_1_HSTRINGWrapper(value)
        let _value = try! valueWrapper?.toABI { $0 }
        let result = try! _ICollectionTesterStatics.InVectorViewImpl(_value)
        return .init(from: result)
    }

    public static func getObjectAt(_ value: AnyIVector<Any?>!, _ index: UInt32, _ callback: ObjectHandler!) {
        let valueWrapper = test_component.__x_ABI_C__FIVector_1_IInspectableWrapper(value)
        let _value = try! valueWrapper?.toABI { $0 }
        let callbackWrapper = __ABI_test_component.ObjectHandlerWrapper(callback)
        let _callback = try! callbackWrapper?.toABI { $0 }
        try! _ICollectionTesterStatics.GetObjectAtImpl(_value, index, _callback)
    }

    public func returnStoredStringVector() throws -> AnyIVector<String>! {
        let result = try _default.ReturnStoredStringVectorImpl()
        return test_component.__x_ABI_C__FIVector_1_HSTRINGWrapper.unwrapFrom(abi: result)
    }

    public func returnMapFromStringToString() throws -> AnyIMap<String, String>! {
        let result = try _default.ReturnMapFromStringToStringImpl()
        return test_component.__x_ABI_C__FIMap_2_HSTRING_HSTRINGWrapper.unwrapFrom(abi: result)
    }

}

public final class DeferrableEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_test_component.IDeferrableEventArgs
    private typealias CABI = __x_ABI_Ctest__component_CIDeferrableEventArgs
    private var _default: SwiftABI!
    public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        if T.self == C_IInspectable.self {
            return RawPointer(_default)
        }
        if T.self == C_IUnknown.self {
            return RawPointer(_default)
        }
        return nil
    }

    public var thisPtr: test_component.IInspectable { _default }

    public static func from(abi: UnsafeMutablePointer<__x_ABI_Ctest__component_CIDeferrableEventArgs>?) -> DeferrableEventArgs? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: .init(abi))
    }

    public init(fromAbi: test_component.IInspectable) {
        _default = try! fromAbi.QueryInterface()
    }

    public func getDeferral() throws -> test_component.Deferral! {
        let result = try _default.GetDeferralImpl()
        return .from(abi: result)
    }

    public func incrementCounter() throws {
        try _default.IncrementCounterImpl()
    }

}

public final class Derived : test_component.Base {
    private typealias SwiftABI = __ABI_test_component.IDerived
    private typealias CABI = __x_ABI_Ctest__component_CIDerived
    private var _default: SwiftABI!
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        if T.self == C_IInspectable.self {
            return RawPointer(_default)
        }
        if T.self == C_IUnknown.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    override public var thisPtr: test_component.IInspectable { _default }

    public static func from(abi: UnsafeMutablePointer<__x_ABI_Ctest__component_CIDerived>?) -> Derived? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: .init(abi))
    }

    override public init(fromAbi: test_component.IInspectable) {
        _default = try! fromAbi.QueryInterface()
        super.init(fromAbi: fromAbi)
    }

    override public init() {
        try! _default = RoActivateInstance(HString("test_component.Derived"))
        super.init(fromAbi: try! _default.QueryInterface())
    }

    public var prop : Int32 {
        get {
            let value = try! _default.get_PropImpl()
            return value
        }

        set {
            try! _default.put_PropImpl(newValue)
        }
    }

    internal class IBaseOverrides : ComposableImpl {
        internal typealias CABI = __x_ABI_Ctest__component_CIBaseOverrides
        internal typealias SwiftABI = __ABI_test_component.IBaseOverrides
        internal class Default : MakeComposedAbi {
            internal typealias SwiftProjection = Derived
            internal typealias CABI = __x_ABI_Ctest__component_CIDerived
            internal typealias SwiftABI = __ABI_test_component.IDerived
            internal static func from(abi: UnsafeMutableRawPointer?) -> SwiftProjection? {
                guard let abi = abi else { return nil }
                return .init(fromAbi: .init(abi))
            }
        }
    }
    internal typealias Composable = IBaseOverrides
    override public class var _makeFromAbi : any MakeFromAbi.Type { Composable.Default.self }
}

public final class EventTester : WinRTClass {
    private typealias SwiftABI = __ABI_test_component.IEventTester
    private typealias CABI = __x_ABI_Ctest__component_CIEventTester
    private var _default: SwiftABI!
    public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        if T.self == C_IInspectable.self {
            return RawPointer(_default)
        }
        if T.self == C_IUnknown.self {
            return RawPointer(_default)
        }
        return nil
    }

    public var thisPtr: test_component.IInspectable { _default }

    public static func from(abi: UnsafeMutablePointer<__x_ABI_Ctest__component_CIEventTester>?) -> EventTester? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: .init(abi))
    }

    public init(fromAbi: test_component.IInspectable) {
        _default = try! fromAbi.QueryInterface()
    }

    private static let _IEventTesterFactory: __ABI_test_component.IEventTesterFactory = try! RoGetActivationFactory(HString("test_component.EventTester"))
    public init(_ impl: AnyIIAmImplementable!) {
        let implWrapper = __ABI_test_component.IIAmImplementableWrapper(impl)
        let _impl = try! implWrapper?.toABI { $0 }
        let value = try! Self._IEventTesterFactory.CreateInstanceImpl(_impl)
        _default = __ABI_test_component.IEventTester(consuming: value!)
    }

    public func subscribe() throws {
        try _default.SubscribeImpl()
    }

    public func unsubscribe() throws {
        try _default.UnsubscribeImpl()
    }

    public func getResult() throws -> String {
        let result = try _default.GetResultImpl()
        return .init(from: result)
    }

    public var count : Int32 {
        get {
            let value = try! _default.get_CountImpl()
            return value
        }

    }

}

public final class NoopClosable : WinRTClass, test_component.IClosable {
    private typealias SwiftABI = __ABI_Windows_Foundation.IClosable
    private typealias CABI = __x_ABI_CWindows_CFoundation_CIClosable
    private var _default: SwiftABI!
    public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        if T.self == C_IInspectable.self {
            return RawPointer(_default)
        }
        if T.self == C_IUnknown.self {
            return RawPointer(_default)
        }
        return nil
    }

    public var thisPtr: test_component.IInspectable { _default }

    public static func from(abi: UnsafeMutablePointer<__x_ABI_CWindows_CFoundation_CIClosable>?) -> NoopClosable? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: .init(abi))
    }

    public init(fromAbi: test_component.IInspectable) {
        _default = try! fromAbi.QueryInterface()
    }

    public func queryInterface(_ iid: test_component.IID) -> IUnknownRef? {
        return test_component.queryInterface(sealed: self, iid)}
    public init() {
        try! _default = RoActivateInstance(HString("test_component.NoopClosable"))
    }

    public func close() throws {
        try _default.CloseImpl()
    }

}

public final class NullValues {
    private static let _INullValuesStatics: __ABI_test_component.INullValuesStatics = try! RoGetActivationFactory(HString("test_component.NullValues"))
    public static func isObjectNull(_ value: Any!) -> Bool {
        let valueWrapper = __ABI_.AnyWrapper(value)
        let _value = try! valueWrapper?.toABI { $0 }
        let result = try! _INullValuesStatics.IsObjectNullImpl(_value)
        return .init(from: result)
    }

    public static func isInterfaceNull(_ value: test_component.AnyIClosable!) -> Bool {
        let valueWrapper = __ABI_Windows_Foundation.IClosableWrapper(value)
        let _value = try! valueWrapper?.toABI { $0 }
        let result = try! _INullValuesStatics.IsInterfaceNullImpl(_value)
        return .init(from: result)
    }

    public static func isGenericInterfaceNull(_ value: AnyIVector<String>!) -> Bool {
        let valueWrapper = test_component.__x_ABI_C__FIVector_1_HSTRINGWrapper(value)
        let _value = try! valueWrapper?.toABI { $0 }
        let result = try! _INullValuesStatics.IsGenericInterfaceNullImpl(_value)
        return .init(from: result)
    }

    public static func isClassNull(_ value: NoopClosable!) -> Bool {
        let result = try! _INullValuesStatics.IsClassNullImpl(RawPointer(value))
        return .init(from: result)
    }

    public static func isDelegateNull(_ value: VoidToVoidDelegate!) -> Bool {
        let valueWrapper = __ABI_test_component.VoidToVoidDelegateWrapper(value)
        let _value = try! valueWrapper?.toABI { $0 }
        let result = try! _INullValuesStatics.IsDelegateNullImpl(_value)
        return .init(from: result)
    }

    public static func getNullObject() -> Any! {
        let result = try! _INullValuesStatics.GetNullObjectImpl()
        return __ABI_.AnyWrapper.unwrapFrom(abi: result)
    }

    public static func getNullInterface() -> test_component.AnyIClosable! {
        let result = try! _INullValuesStatics.GetNullInterfaceImpl()
        return __ABI_Windows_Foundation.IClosableWrapper.unwrapFrom(abi: result)
    }

    public static func getNullGenericInterface() -> AnyIVector<String>! {
        let result = try! _INullValuesStatics.GetNullGenericInterfaceImpl()
        return test_component.__x_ABI_C__FIVector_1_HSTRINGWrapper.unwrapFrom(abi: result)
    }

    public static func getNullClass() -> NoopClosable! {
        let result = try! _INullValuesStatics.GetNullClassImpl()
        return .from(abi: result)
    }

    public static func getNullDelegate() -> VoidToVoidDelegate! {
        let result = try! _INullValuesStatics.GetNullDelegateImpl()
        return __ABI_test_component.VoidToVoidDelegateWrapper.unwrapFrom(abi: result)
    }

}

public final class Simple : WinRTClass {
    private typealias SwiftABI = __ABI_test_component.ISimple
    private typealias CABI = __x_ABI_Ctest__component_CISimple
    private var _default: SwiftABI!
    public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        if T.self == C_IInspectable.self {
            return RawPointer(_default)
        }
        if T.self == C_IUnknown.self {
            return RawPointer(_default)
        }
        return nil
    }

    public var thisPtr: test_component.IInspectable { _default }

    public static func from(abi: UnsafeMutablePointer<__x_ABI_Ctest__component_CISimple>?) -> Simple? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: .init(abi))
    }

    public init(fromAbi: test_component.IInspectable) {
        _default = try! fromAbi.QueryInterface()
    }

    public init() {
        try! _default = RoActivateInstance(HString("test_component.Simple"))
    }

    private static let _ISimpleStatics: __ABI_test_component.ISimpleStatics = try! RoGetActivationFactory(HString("test_component.Simple"))
    public static func fireStaticEvent() {
        try! _ISimpleStatics.FireStaticEventImpl()
    }

    public static var staticEvent : Event<EventHandler<Any?>> = {
      .init(
        add: { [weak this = _ISimpleStatics] in
          guard let this else { return .init() }
          let wrapper = test_component.__x_ABI_C__FIEventHandler_1_IInspectableWrapper($0)
          let abi = try! wrapper?.toABI { $0 }
          return try! this.add_StaticEventImpl(abi)
        },
        remove: { [weak this = _ISimpleStatics] in
         try? this?.remove_StaticEventImpl($0)
       }
      )
    }()

    public func method() throws {
        try _default.MethodImpl()
    }

    public func operation(_ value: test_component.DateTime) throws -> AnyIAsyncOperation<Int32>! {
        let operation = try _default.OperationImpl(.from(swift: value))
        return test_component.__x_ABI_C__FIAsyncOperation_1_intWrapper.unwrapFrom(abi: operation)
    }

    public func action(_ value: test_component.DateTime) throws -> test_component.AnyIAsyncAction! {
        let operation = try _default.ActionImpl(.from(swift: value))
        return __ABI_Windows_Foundation.IAsyncActionWrapper.unwrapFrom(abi: operation)
    }

    public func object(_ value: test_component.DateTime) throws -> Any! {
        let result = try _default.ObjectImpl(.from(swift: value))
        return __ABI_.AnyWrapper.unwrapFrom(abi: result)
    }

    public func returnBlittableStruct() throws -> BlittableStruct {
        let result = try _default.ReturnBlittableStructImpl()
        return .from(abi: result)
    }

    public func takeBlittableStruct(_ value: BlittableStruct) throws {
        try _default.TakeBlittableStructImpl(.from(swift: value))
    }

    public func returnNonBlittableStruct() throws -> NonBlittableStruct {
        let result = try _default.ReturnNonBlittableStructImpl()
        return .from(abi: result)
    }

    public func takeNonBlittableStruct(_ value: NonBlittableStruct) throws {
        let _value = __ABI_test_component._ABI_NonBlittableStruct(from: value)
        try _default.TakeNonBlittableStructImpl(_value.val)
    }

    public func fireEvent() throws {
        try _default.FireEventImpl()
    }

    public var blittableStructProperty : BlittableStruct {
        get {
            let value = try! _default.get_BlittableStructPropertyImpl()
            return .from(abi: value)
        }

        set {
            try! _default.put_BlittableStructPropertyImpl(.from(swift: newValue))
        }
    }

    public var nonBlittableStructProperty : NonBlittableStruct {
        get {
            let value = try! _default.get_NonBlittableStructPropertyImpl()
            return .from(abi: value)
        }

        set {
            let _newValue = __ABI_test_component._ABI_NonBlittableStruct(from: newValue)
            try! _default.put_NonBlittableStructPropertyImpl(_newValue.val)
        }
    }

    public var stringProperty : String {
        get {
            let value = try! _default.get_StringPropertyImpl()
            return .init(from: value)
        }

        set {
            let _newValue = try! HString(newValue)
            try! _default.put_StringPropertyImpl(_newValue.get())
        }
    }

    public lazy var inEvent : Event<test_component.InDelegate> = {
      .init(
        add: { [weak this = _default] in
          guard let this else { return .init() }
          let wrapper = __ABI_test_component_Delegates.InDelegateWrapper($0)
          let abi = try! wrapper?.toABI { $0 }
          return try! this.add_InEventImpl(abi)
        },
        remove: { [weak this = _default] in
         try? this?.remove_InEventImpl($0)
       }
      )
    }()

    public lazy var signalEvent : Event<test_component.SignalDelegate> = {
      .init(
        add: { [weak this = _default] in
          guard let this else { return .init() }
          let wrapper = __ABI_test_component_Delegates.SignalDelegateWrapper($0)
          let abi = try! wrapper?.toABI { $0 }
          return try! this.add_SignalEventImpl(abi)
        },
        remove: { [weak this = _default] in
         try? this?.remove_SignalEventImpl($0)
       }
      )
    }()

    public lazy var simpleEvent : Event<TypedEventHandler<Simple?, SimpleEventArgs>> = {
      .init(
        add: { [weak this = _default] in
          guard let this else { return .init() }
          let wrapper = test_component.__x_ABI_C__FITypedEventHandler_2___x_ABI_Ctest__zcomponent__CSimple___x_ABI_Ctest__zcomponent__CSimpleEventArgsWrapper($0)
          let abi = try! wrapper?.toABI { $0 }
          return try! this.add_SimpleEventImpl(abi)
        },
        remove: { [weak this = _default] in
         try? this?.remove_SimpleEventImpl($0)
       }
      )
    }()

}

public final class StaticClass {
    private static let _IStaticClassStatics: __ABI_test_component.IStaticClassStatics = try! RoGetActivationFactory(HString("test_component.StaticClass"))
    public static func inEnum(_ value: Signed) -> String {
        let result = try! _IStaticClassStatics.InEnumImpl(value)
        return .init(from: result)
    }

    public static func inNonBlittableStruct(_ value: NonBlittableStruct) -> String {
        let _value = __ABI_test_component._ABI_NonBlittableStruct(from: value)
        let result = try! _IStaticClassStatics.InNonBlittableStructImpl(_value.val)
        return .init(from: result)
    }

    public static func takeBase(_ base: Base!) {
        try! _IStaticClassStatics.TakeBaseImpl(RawPointer(base))
    }

    public static var enumProperty : Fruit {
        get {
            let value = try! _IStaticClassStatics.get_EnumPropertyImpl()
            return value
        }

        set {
            try! _IStaticClassStatics.put_EnumPropertyImpl(newValue)
        }
    }

}

open class UnsealedDerived : test_component.Base {
    private typealias SwiftABI = __ABI_test_component.IUnsealedDerived
    private typealias CABI = __x_ABI_Ctest__component_CIUnsealedDerived
    private var _default: SwiftABI!
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        if T.self == C_IInspectable.self {
            return RawPointer(_default)
        }
        if T.self == C_IUnknown.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    override open var thisPtr: test_component.IInspectable { _default }

    public static func from(abi: UnsafeMutablePointer<__x_ABI_Ctest__component_CIUnsealedDerived>?) -> UnsealedDerived? {
        guard let abi = abi else { return nil }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    override public init(fromAbi: test_component.IInspectable) {
        _default = try! fromAbi.QueryInterface()
        super.init(fromAbi: fromAbi)
    }

    override open func queryInterface(_ iid: test_component.IID) -> IUnknownRef? {
        switch iid {
            case __ABI_test_component.IUnsealedDerivedOverloads2Wrapper.IID:
                let wrapper = __ABI_test_component.IUnsealedDerivedOverloads2Wrapper(self)
                return wrapper!.queryInterface(iid)
            case __ABI_test_component.IUnsealedDerivedOverridesWrapper.IID:
                let wrapper = __ABI_test_component.IUnsealedDerivedOverridesWrapper(self)
                return wrapper!.queryInterface(iid)
            default: return super.queryInterface(iid)
        }
    }
    private static var _IUnsealedDerivedFactory : __ABI_test_component.IUnsealedDerivedFactory =  try! RoGetActivationFactory(HString("test_component.UnsealedDerived"))
    override public init() {
        super.init(Self._IUnsealedDerivedFactory)
        let parentDefault: UnsafeMutablePointer<C_IInspectable> = super._getABI()!
        self._default = try! IInspectable(parentDefault).QueryInterface()
        _ = self._default.Release() // release to reset reference count since QI caused an AddRef on ourselves
    }

    override public init<Factory: ComposableActivationFactory>(_ factory: Factory) {
        super.init(factory)
        let parentDefault: UnsafeMutablePointer<C_IInspectable> = super._getABI()!
        self._default = try! IInspectable(parentDefault).QueryInterface()
        _ = self._default.Release() // release to reset reference count since QI caused an AddRef on ourselves
    }
    public var prop : Int32 {
        get {
            let value = try! _default.get_PropImpl()
            return value
        }

        set {
            try! _default.put_PropImpl(newValue)
        }
    }

    internal lazy var _IUnsealedDerivedOverloads2: __ABI_test_component.IUnsealedDerivedOverloads2 = try! IUnknown(_inner!.borrow).QueryInterface()
    open func onAfterDoTheThing() throws {
        try _IUnsealedDerivedOverloads2.OnAfterDoTheThingImpl()
    }

    internal class IUnsealedDerivedOverloads2 : ComposableImpl {
        internal typealias CABI = __x_ABI_Ctest__component_CIUnsealedDerivedOverloads2
        internal typealias SwiftABI = __ABI_test_component.IUnsealedDerivedOverloads2
        internal class Default : MakeComposedAbi {
            internal typealias SwiftProjection = UnsealedDerived
            internal typealias CABI = __x_ABI_Ctest__component_CIUnsealedDerived
            internal typealias SwiftABI = __ABI_test_component.IUnsealedDerived
            internal static func from(abi: UnsafeMutableRawPointer?) -> SwiftProjection? {
                guard let abi = abi else { return nil }
                return .init(fromAbi: .init(abi))
            }
        }
    }
    internal typealias Composable = IUnsealedDerivedOverloads2
    override open class var _makeFromAbi : any MakeFromAbi.Type { Composable.Default.self }
    internal lazy var _IUnsealedDerivedOverrides: __ABI_test_component.IUnsealedDerivedOverrides = try! IUnknown(_inner!.borrow).QueryInterface()
    open func onBeforeDoTheThing() throws {
        try _IUnsealedDerivedOverrides.OnBeforeDoTheThingImpl()
    }

    internal class IUnsealedDerivedOverrides : ComposableImpl {
        internal typealias CABI = __x_ABI_Ctest__component_CIUnsealedDerivedOverrides
        internal typealias SwiftABI = __ABI_test_component.IUnsealedDerivedOverrides
        internal class Default : MakeComposedAbi {
            internal typealias SwiftProjection = UnsealedDerived
            internal typealias CABI = __x_ABI_Ctest__component_CIUnsealedDerived
            internal typealias SwiftABI = __ABI_test_component.IUnsealedDerived
            internal static func from(abi: UnsafeMutableRawPointer?) -> SwiftProjection? {
                guard let abi = abi else { return nil }
                return .init(fromAbi: .init(abi))
            }
        }
    }
}

open class UnsealedDerived2 : test_component.UnsealedDerived {
    private typealias SwiftABI = __ABI_test_component.IUnsealedDerived2
    private typealias CABI = __x_ABI_Ctest__component_CIUnsealedDerived2
    private var _default: SwiftABI!
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        if T.self == C_IInspectable.self {
            return RawPointer(_default)
        }
        if T.self == C_IUnknown.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    override open var thisPtr: test_component.IInspectable { _default }

    public static func from(abi: UnsafeMutablePointer<__x_ABI_Ctest__component_CIUnsealedDerived2>?) -> UnsealedDerived2? {
        guard let abi = abi else { return nil }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    override public init(fromAbi: test_component.IInspectable) {
        _default = try! fromAbi.QueryInterface()
        super.init(fromAbi: fromAbi)
    }

    override open func queryInterface(_ iid: test_component.IID) -> IUnknownRef? {
        return super.queryInterface(iid)}
    private static var _IUnsealedDerived2ProtectedFactory : __ABI_test_component.IUnsealedDerived2ProtectedFactory =  try! RoGetActivationFactory(HString("test_component.UnsealedDerived2"))
    override public init() {
        super.init(Self._IUnsealedDerived2ProtectedFactory)
        let parentDefault: UnsafeMutablePointer<C_IInspectable> = super._getABI()!
        self._default = try! IInspectable(parentDefault).QueryInterface()
        _ = self._default.Release() // release to reset reference count since QI caused an AddRef on ourselves
    }

    override public init<Factory: ComposableActivationFactory>(_ factory: Factory) {
        super.init(factory)
        let parentDefault: UnsafeMutablePointer<C_IInspectable> = super._getABI()!
        self._default = try! IInspectable(parentDefault).QueryInterface()
        _ = self._default.Release() // release to reset reference count since QI caused an AddRef on ourselves
    }
    public func method() throws {
        try _default.MethodImpl()
    }

    internal class IUnsealedDerivedOverloads2 : ComposableImpl {
        internal typealias CABI = __x_ABI_Ctest__component_CIUnsealedDerivedOverloads2
        internal typealias SwiftABI = __ABI_test_component.IUnsealedDerivedOverloads2
        internal class Default : MakeComposedAbi {
            internal typealias SwiftProjection = UnsealedDerived2
            internal typealias CABI = __x_ABI_Ctest__component_CIUnsealedDerived2
            internal typealias SwiftABI = __ABI_test_component.IUnsealedDerived2
            internal static func from(abi: UnsafeMutableRawPointer?) -> SwiftProjection? {
                guard let abi = abi else { return nil }
                return .init(fromAbi: .init(abi))
            }
        }
    }
    internal typealias Composable = IUnsealedDerivedOverloads2
    override open class var _makeFromAbi : any MakeFromAbi.Type { Composable.Default.self }
}

open class UnsealedDerivedNoOverrides : test_component.BaseNoOverrides {
    private typealias SwiftABI = __ABI_test_component.IUnsealedDerivedNoOverrides
    private typealias CABI = __x_ABI_Ctest__component_CIUnsealedDerivedNoOverrides
    private var _default: SwiftABI!
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        if T.self == C_IInspectable.self {
            return RawPointer(_default)
        }
        if T.self == C_IUnknown.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    override open var thisPtr: test_component.IInspectable { _default }

    public static func from(abi: UnsafeMutablePointer<__x_ABI_Ctest__component_CIUnsealedDerivedNoOverrides>?) -> UnsealedDerivedNoOverrides? {
        guard let abi = abi else { return nil }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    override public init(fromAbi: test_component.IInspectable) {
        _default = try! fromAbi.QueryInterface()
        super.init(fromAbi: fromAbi)
    }

    override open func queryInterface(_ iid: test_component.IID) -> IUnknownRef? {
        return super.queryInterface(iid)}
    private static var _IUnsealedDerivedNoOverridesProtectedFactory : __ABI_test_component.IUnsealedDerivedNoOverridesProtectedFactory =  try! RoGetActivationFactory(HString("test_component.UnsealedDerivedNoOverrides"))
    override public init() {
        super.init(Self._IUnsealedDerivedNoOverridesProtectedFactory)
        let parentDefault: UnsafeMutablePointer<C_IInspectable> = super._getABI()!
        self._default = try! IInspectable(parentDefault).QueryInterface()
        _ = self._default.Release() // release to reset reference count since QI caused an AddRef on ourselves
    }

    override public init<Factory: ComposableActivationFactory>(_ factory: Factory) {
        super.init(factory)
        let parentDefault: UnsafeMutablePointer<C_IInspectable> = super._getABI()!
        self._default = try! IInspectable(parentDefault).QueryInterface()
        _ = self._default.Release() // release to reset reference count since QI caused an AddRef on ourselves
    }
    internal class IUnsealedDerivedNoOverrides : ComposableImpl {
        internal typealias CABI = C_IInspectable
        internal typealias SwiftABI = test_component.IInspectable
        internal class Default : MakeComposedAbi {
            internal typealias SwiftProjection = UnsealedDerivedNoOverrides
            internal typealias CABI = __x_ABI_Ctest__component_CIUnsealedDerivedNoOverrides
            internal typealias SwiftABI = __ABI_test_component.IUnsealedDerivedNoOverrides
            internal static func from(abi: UnsafeMutableRawPointer?) -> SwiftProjection? {
                guard let abi = abi else { return nil }
                return .init(fromAbi: .init(abi))
            }
        }
    }
    internal typealias Composable = IUnsealedDerivedNoOverrides
    override open class var _makeFromAbi : any MakeFromAbi.Type { Composable.Default.self }
}

public typealias ObjectHandler = (Any?) -> ()
public typealias VoidToVoidDelegate = () -> ()
public struct BlittableStruct: Hashable, Codable {
    public var first: Int32 = 0
    public var second: Int32 = 0
    public init() {}
    public init(first: Int32, second: Int32) {
        self.first = first
        self.second = second
    }
    public static func from(abi: __x_ABI_Ctest__component_CBlittableStruct) -> BlittableStruct {
        .init(first: abi.First, second: abi.Second)
    }
}

public struct NonBlittableBoolStruct: Hashable, Codable {
    public var first: Bool = false
    public var second: Bool = false
    public var third: Bool = false
    public var fourth: Bool = false
    public init() {}
    public init(first: Bool, second: Bool, third: Bool, fourth: Bool) {
        self.first = first
        self.second = second
        self.third = third
        self.fourth = fourth
    }
    public static func from(abi: __x_ABI_Ctest__component_CNonBlittableBoolStruct) -> NonBlittableBoolStruct {
        .init(first: .init(from: abi.First), second: .init(from: abi.Second), third: .init(from: abi.Third), fourth: .init(from: abi.Fourth))
    }
}

public struct NonBlittableStruct: Hashable, Codable {
    public var first: String = ""
    public var second: String = ""
    public var third: Int32 = 0
    public var fourth: String = ""
    public init() {}
    public init(first: String, second: String, third: Int32, fourth: String) {
        self.first = first
        self.second = second
        self.third = third
        self.fourth = fourth
    }
    public static func from(abi: __x_ABI_Ctest__component_CNonBlittableStruct) -> NonBlittableStruct {
        .init(first: .init(from: abi.First), second: .init(from: abi.Second), third: abi.Third, fourth: .init(from: abi.Fourth))
    }
}

public struct SimpleEventArgs: Hashable, Codable {
    public var value: Int32 = 0
    public init() {}
    public init(value: Int32) {
        self.value = value
    }
    public static func from(abi: __x_ABI_Ctest__component_CSimpleEventArgs) -> SimpleEventArgs {
        .init(value: abi.Value)
    }
}

public struct StructWithEnum: Hashable, Codable {
    public var names: SwiftifiableNames = .init(0)
    public init() {}
    public init(names: SwiftifiableNames) {
        self.names = names
    }
    public static func from(abi: __x_ABI_Ctest__component_CStructWithEnum) -> StructWithEnum {
        .init(names: abi.Names)
    }
}

public protocol IAsyncMethods : WinRTInterface {
    func operationWithProgress(_ value: test_component.DateTime) throws -> test_component.AnyIAsyncOperationWithProgress<Int32, Double>!
}

extension IAsyncMethods {
    public func queryInterface(_ iid: test_component.IID) -> IUnknownRef? {
        switch iid {
            case __ABI_test_component.IAsyncMethodsWrapper.IID:
                let wrapper = __ABI_test_component.IAsyncMethodsWrapper(self)
                return wrapper!.queryInterface(iid)
            default: return nil
        }
    }
}
public typealias AnyIAsyncMethods = any IAsyncMethods

public protocol IBasic : WinRTInterface {
    func method()
}

extension IBasic {
    public func queryInterface(_ iid: test_component.IID) -> IUnknownRef? {
        switch iid {
            case __ABI_test_component.IBasicWrapper.IID:
                let wrapper = __ABI_test_component.IBasicWrapper(self)
                return wrapper!.queryInterface(iid)
            default: return nil
        }
    }
}
public typealias AnyIBasic = any IBasic

public protocol IIAmImplementable : WinRTInterface {
    func inInt32(_ value: Int32) throws -> String
    func inString(_ value: String) throws -> String
    func inObject(_ value: Any!) throws -> String
    func inEnum(_ value: test_component.Signed) throws -> String
    func outInt32(_ value: inout Int32) throws
    func outString(_ value: inout String) throws
    func outObject(_ value: inout Any!) throws
    func outBlittableStruct(_ value: inout test_component.BlittableStruct) throws
    func outNonBlittableStruct(_ value: inout test_component.NonBlittableStruct) throws
    func outEnum(_ value: inout test_component.Signed) throws
    func returnObject() throws -> Any!
    func returnEnum() throws -> test_component.Signed
    func fireEvent(_ data: String) throws
    var enumProperty: test_component.Fruit { get set }
    var id: test_component.GUID? { get set }
    var implementableEvent: Event<test_component.InDelegate> { get }
}

public extension EventSource where Handler == test_component.InDelegate {
    func invoke(_ value: String) {
        for handler in getInvocationList() {
            handler(value)
        }
    }
}

extension IIAmImplementable {
    public func queryInterface(_ iid: test_component.IID) -> IUnknownRef? {
        switch iid {
            case __ABI_test_component.IIAmImplementableWrapper.IID:
                let wrapper = __ABI_test_component.IIAmImplementableWrapper(self)
                return wrapper!.queryInterface(iid)
            default: return nil
        }
    }
}
public typealias AnyIIAmImplementable = any IIAmImplementable

public protocol IInterfaceWithObservableVector : WinRTInterface {
    func takeObservable(_ basics: test_component.AnyIObservableVector<test_component.AnyIBasic?>!) throws
}

extension IInterfaceWithObservableVector {
    public func queryInterface(_ iid: test_component.IID) -> IUnknownRef? {
        switch iid {
            case __ABI_test_component.IInterfaceWithObservableVectorWrapper.IID:
                let wrapper = __ABI_test_component.IInterfaceWithObservableVectorWrapper(self)
                return wrapper!.queryInterface(iid)
            default: return nil
        }
    }
}
public typealias AnyIInterfaceWithObservableVector = any IInterfaceWithObservableVector

public protocol ISimpleDelegate : WinRTInterface {
    func doThis() throws
    func doThat(_ val: Int32) throws
}

extension ISimpleDelegate {
    public func queryInterface(_ iid: test_component.IID) -> IUnknownRef? {
        switch iid {
            case __ABI_test_component.ISimpleDelegateWrapper.IID:
                let wrapper = __ABI_test_component.ISimpleDelegateWrapper(self)
                return wrapper!.queryInterface(iid)
            default: return nil
        }
    }
}
public typealias AnyISimpleDelegate = any ISimpleDelegate

public protocol InterfaceWithReturnDelegate : WinRTInterface {
    var eventWithReturn: Event<test_component.ReturnInt32Delegate> { get }
}

public extension EventSource where Handler == test_component.ReturnInt32Delegate {
    @discardableResult func invoke() -> Int32 {
        var result:Int32 = 0
        for handler in getInvocationList() {
            result = handler()
        }
        return result
    }
}

extension InterfaceWithReturnDelegate {
    public func queryInterface(_ iid: test_component.IID) -> IUnknownRef? {
        switch iid {
            case __ABI_test_component.InterfaceWithReturnDelegateWrapper.IID:
                let wrapper = __ABI_test_component.InterfaceWithReturnDelegateWrapper(self)
                return wrapper!.queryInterface(iid)
            default: return nil
        }
    }
}
public typealias AnyInterfaceWithReturnDelegate = any InterfaceWithReturnDelegate

public protocol WithKeyword : WinRTInterface {
    func `enum`(_ `extension`: String) throws
    var `struct`: String { get set }
    var `repeat`: Event<EventHandler<Any?>> { get }
}

extension WithKeyword {
    public func queryInterface(_ iid: test_component.IID) -> IUnknownRef? {
        switch iid {
            case __ABI_test_component.WithKeywordWrapper.IID:
                let wrapper = __ABI_test_component.WithKeywordWrapper(self)
                return wrapper!.queryInterface(iid)
            default: return nil
        }
    }
}
public typealias AnyWithKeyword = any WithKeyword

extension test_component.Fruit {
    public static var banana : test_component.Fruit {
        __x_ABI_Ctest__component_CFruit_Banana
    }
    public static var apple : test_component.Fruit {
        __x_ABI_Ctest__component_CFruit_Apple
    }
    public static var orange : test_component.Fruit {
        __x_ABI_Ctest__component_CFruit_Orange
    }
    public static var pineapple : test_component.Fruit {
        __x_ABI_Ctest__component_CFruit_Pineapple
    }
}
extension test_component.Fruit: Hashable, Codable {}

extension test_component.Keywords {
    public static var `as` : test_component.Keywords {
        __x_ABI_Ctest__component_CKeywords_As
    }
    public static var `break` : test_component.Keywords {
        __x_ABI_Ctest__component_CKeywords_Break
    }
    public static var `case` : test_component.Keywords {
        __x_ABI_Ctest__component_CKeywords_Case
    }
    public static var `catch` : test_component.Keywords {
        __x_ABI_Ctest__component_CKeywords_Catch
    }
    public static var `class` : test_component.Keywords {
        __x_ABI_Ctest__component_CKeywords_Class
    }
    public static var `continue` : test_component.Keywords {
        __x_ABI_Ctest__component_CKeywords_Continue
    }
    public static var `default` : test_component.Keywords {
        __x_ABI_Ctest__component_CKeywords_Default
    }
    public static var `defer` : test_component.Keywords {
        __x_ABI_Ctest__component_CKeywords_Defer
    }
    public static var `do` : test_component.Keywords {
        __x_ABI_Ctest__component_CKeywords_Do
    }
    public static var `else` : test_component.Keywords {
        __x_ABI_Ctest__component_CKeywords_Else
    }
    public static var `enum` : test_component.Keywords {
        __x_ABI_Ctest__component_CKeywords_Enum
    }
    public static var `extension` : test_component.Keywords {
        __x_ABI_Ctest__component_CKeywords_Extension
    }
    public static var `fallthrough` : test_component.Keywords {
        __x_ABI_Ctest__component_CKeywords_Fallthrough
    }
    public static var `false` : test_component.Keywords {
        __x_ABI_Ctest__component_CKeywords_False
    }
    public static var `for` : test_component.Keywords {
        __x_ABI_Ctest__component_CKeywords_For
    }
    public static var `func` : test_component.Keywords {
        __x_ABI_Ctest__component_CKeywords_Func
    }
    public static var `if` : test_component.Keywords {
        __x_ABI_Ctest__component_CKeywords_If
    }
    public static var `import` : test_component.Keywords {
        __x_ABI_Ctest__component_CKeywords_Import
    }
    public static var `in` : test_component.Keywords {
        __x_ABI_Ctest__component_CKeywords_In
    }
    public static var `internal` : test_component.Keywords {
        __x_ABI_Ctest__component_CKeywords_Internal
    }
    public static var `is` : test_component.Keywords {
        __x_ABI_Ctest__component_CKeywords_Is
    }
    public static var `let` : test_component.Keywords {
        __x_ABI_Ctest__component_CKeywords_Let
    }
    public static var `nil` : test_component.Keywords {
        __x_ABI_Ctest__component_CKeywords_Nil
    }
    public static var `private` : test_component.Keywords {
        __x_ABI_Ctest__component_CKeywords_Private
    }
    public static var `protocol` : test_component.Keywords {
        __x_ABI_Ctest__component_CKeywords_Protocol
    }
    public static var `public` : test_component.Keywords {
        __x_ABI_Ctest__component_CKeywords_Public
    }
    public static var `repeat` : test_component.Keywords {
        __x_ABI_Ctest__component_CKeywords_Repeat
    }
    public static var `rethrows` : test_component.Keywords {
        __x_ABI_Ctest__component_CKeywords_Rethrows
    }
    public static var `return` : test_component.Keywords {
        __x_ABI_Ctest__component_CKeywords_Return
    }
    public static var `self` : test_component.Keywords {
        __x_ABI_Ctest__component_CKeywords_Self
    }
    public static var `static` : test_component.Keywords {
        __x_ABI_Ctest__component_CKeywords_Static
    }
    public static var `struct` : test_component.Keywords {
        __x_ABI_Ctest__component_CKeywords_Struct
    }
    public static var `super` : test_component.Keywords {
        __x_ABI_Ctest__component_CKeywords_Super
    }
    public static var `switch` : test_component.Keywords {
        __x_ABI_Ctest__component_CKeywords_Switch
    }
    public static var `throw` : test_component.Keywords {
        __x_ABI_Ctest__component_CKeywords_Throw
    }
    public static var `throws` : test_component.Keywords {
        __x_ABI_Ctest__component_CKeywords_Throws
    }
    public static var `true` : test_component.Keywords {
        __x_ABI_Ctest__component_CKeywords_True
    }
    public static var `try` : test_component.Keywords {
        __x_ABI_Ctest__component_CKeywords_Try
    }
    public static var `var` : test_component.Keywords {
        __x_ABI_Ctest__component_CKeywords_Var
    }
    public static var `where` : test_component.Keywords {
        __x_ABI_Ctest__component_CKeywords_Where
    }
    public static var `while` : test_component.Keywords {
        __x_ABI_Ctest__component_CKeywords_While
    }
}
extension test_component.Keywords: Hashable, Codable {}

extension test_component.Signed {
    public static var first : test_component.Signed {
        __x_ABI_Ctest__component_CSigned_First
    }
    public static var second : test_component.Signed {
        __x_ABI_Ctest__component_CSigned_Second
    }
    public static var third : test_component.Signed {
        __x_ABI_Ctest__component_CSigned_Third
    }
}
extension test_component.Signed: Hashable, Codable {}

extension test_component.SwiftifiableNames {
    public static var camelCase : test_component.SwiftifiableNames {
        __x_ABI_Ctest__component_CSwiftifiableNames_camelCase
    }
    public static var pascalCase : test_component.SwiftifiableNames {
        __x_ABI_Ctest__component_CSwiftifiableNames_PascalCase
    }
    public static var esingleLetterPrefixed : test_component.SwiftifiableNames {
        __x_ABI_Ctest__component_CSwiftifiableNames_ESingleLetterPrefixed
    }
    public static var leadingCaps : test_component.SwiftifiableNames {
        __x_ABI_Ctest__component_CSwiftifiableNames_LEADINGCaps
    }
    public static var r8g8b8a8Typeless : test_component.SwiftifiableNames {
        __x_ABI_Ctest__component_CSwiftifiableNames_R8G8B8A8Typeless
    }
    public static var uuid : test_component.SwiftifiableNames {
        __x_ABI_Ctest__component_CSwiftifiableNames_UUID
    }
}
extension test_component.SwiftifiableNames: Hashable, Codable {}

extension test_component.Unsigned {
    public static var first : test_component.Unsigned {
        __x_ABI_Ctest__component_CUnsigned_First
    }
    public static var second : test_component.Unsigned {
        __x_ABI_Ctest__component_CUnsigned_Second
    }
    public static var third : test_component.Unsigned {
        __x_ABI_Ctest__component_CUnsigned_Third
    }
}
extension test_component.Unsigned: Hashable, Codable {}


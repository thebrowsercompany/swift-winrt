// WARNING: Please don't edit this file. It was generated by Swift/WinRT v0.0.1
// swiftlint:disable all
import Foundation
import Ctest_component

public protocol InterfaceWithReturnDelegate : WinRTInterface {
    var eventWithReturn: Event<test_component.ReturnInt32Delegate> { get }
}

public extension EventSource where Handler == test_component.ReturnInt32Delegate {
    @discardableResult func invoke() throws -> Int32 {
        var result:Int32 = 0
        for handler in getInvocationList() {
            result = try handler()
        }
        return result
    }
}

extension InterfaceWithReturnDelegate {
    public func queryInterface(_ iid: test_component.IID) -> IUnknownRef? {
        switch iid {
            case __ABI_test_component.InterfaceWithReturnDelegateWrapper.IID:
                let wrapper = __ABI_test_component.InterfaceWithReturnDelegateWrapper(self)
                return wrapper!.queryInterface(iid)
            default: return nil
        }
    }
}
public typealias AnyInterfaceWithReturnDelegate = any InterfaceWithReturnDelegate


// MARK: - Internals

@_spi(WinRTInternal)
extension __IMPL_test_component {
    public enum InterfaceWithReturnDelegateBridge : AbiInterfaceBridge {
        public typealias CABI = __x_ABI_Ctest__component_CInterfaceWithReturnDelegate
        public typealias SwiftABI = __ABI_test_component.InterfaceWithReturnDelegate
        public typealias SwiftProjection = AnyInterfaceWithReturnDelegate
        public static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
            guard let abi = abi else { return nil }
            return InterfaceWithReturnDelegateImpl(abi)
        }

        public static func makeAbi() -> CABI {
            let vtblPtr = withUnsafeMutablePointer(to: &__ABI_test_component.InterfaceWithReturnDelegateVTable) { $0 }
            return .init(lpVtbl: vtblPtr)
        }
    }

    fileprivate class InterfaceWithReturnDelegateImpl: InterfaceWithReturnDelegate, WinRTAbiImpl {
        fileprivate typealias Bridge = InterfaceWithReturnDelegateBridge
        fileprivate let _default: Bridge.SwiftABI
        fileprivate var thisPtr: test_component.IInspectable { _default }
        fileprivate init(_ fromAbi: ComPtr<Bridge.CABI>) {
            _default = Bridge.SwiftABI(fromAbi)
        }

        fileprivate lazy var eventWithReturn : Event<test_component.ReturnInt32Delegate> = {
          .init(
            add: { [weak self] in
              guard let this = self?._default else { return .init() }
              return try! this.add_EventWithReturn($0)
            },
            remove: { [weak self] in
             try? self?._default.remove_EventWithReturn($0)
           }
          )
        }()

    }

}
@_spi(WinRTInternal)
extension __ABI_test_component {
    private static let IID___x_ABI_Ctest__component_CInterfaceWithReturnDelegate: test_component.IID = .init(
        Data1: 0xB0EBC406, Data2: 0x17C0, Data3: 0x5703, Data4: ( 0xB9,0xC7,0x50,0xBE,0x67,0x5B,0xBC,0x95 ) // B0EBC406-17C0-5703-B9C7-50BE675BBC95
    ) 
    public class InterfaceWithReturnDelegate: test_component.IInspectable {
        override public class var IID: test_component.IID { IID___x_ABI_Ctest__component_CInterfaceWithReturnDelegate }

        open func add_EventWithReturn(_ handler: test_component.ReturnInt32Delegate?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = __ABI_test_component_Delegates.ReturnInt32DelegateWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_Ctest__component_CInterfaceWithReturnDelegate.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_EventWithReturn(pThis, _handler, &token))
            }
            return token
        }

        open func remove_EventWithReturn(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_Ctest__component_CInterfaceWithReturnDelegate.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_EventWithReturn(pThis, token))
            }
        }

    }

    internal static var InterfaceWithReturnDelegateVTable: __x_ABI_Ctest__component_CInterfaceWithReturnDelegateVtbl = .init(
        QueryInterface: { InterfaceWithReturnDelegateWrapper.queryInterface($0, $1, $2) },
        AddRef: { InterfaceWithReturnDelegateWrapper.addRef($0) },
        Release: { InterfaceWithReturnDelegateWrapper.release($0) },
        GetIids: {
            let size = MemoryLayout<test_component.IID>.size
            let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: test_component.IID.self)
            iids[0] = IUnknown.IID
            iids[1] = IInspectable.IID
            iids[2] = __ABI_test_component.InterfaceWithReturnDelegateWrapper.IID
            $1!.pointee = 3
            $2!.pointee = iids
            return S_OK
        },

        GetRuntimeClassName: {
            _ = $0
            let hstring = try! HString("test_component.InterfaceWithReturnDelegate").detach()
            $1!.pointee = hstring
            return S_OK
        },

        GetTrustLevel: {
            _ = $0
            $1!.pointee = TrustLevel(rawValue: 0)
            return S_OK
        },

        add_EventWithReturn: {
            guard let __unwrapped__instance = InterfaceWithReturnDelegateWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            guard let handler = __ABI_test_component_Delegates.ReturnInt32DelegateWrapper.unwrapFrom(abi: ComPtr($1)) else { return E_INVALIDARG }
            let token = __unwrapped__instance.eventWithReturn.addHandler(handler)
            $2?.initialize(to: .from(swift: token))
            return S_OK
        },

        remove_EventWithReturn: {
            guard let __unwrapped__instance = InterfaceWithReturnDelegateWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let token: EventRegistrationToken = $1
            __unwrapped__instance.eventWithReturn.removeHandler(token)
            return S_OK
        }
    )

    public typealias InterfaceWithReturnDelegateWrapper = InterfaceWrapperBase<__IMPL_test_component.InterfaceWithReturnDelegateBridge>
}
@_spi(WinRTInternal)
public class InterfaceWithReturnDelegateMaker: MakeFromAbi {
    public typealias SwiftType = AnyInterfaceWithReturnDelegate
    public static func from(abi: test_component.IInspectable) -> SwiftType {
        let swiftAbi: __ABI_test_component.InterfaceWithReturnDelegate = try! abi.QueryInterface()
        return __IMPL_test_component.InterfaceWithReturnDelegateBridge.from(abi: RawPointer(swiftAbi))!
    }
}

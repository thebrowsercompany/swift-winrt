// WARNING: Please don't edit this file. It was generated by Swift/WinRT v0.0.1
// swiftlint:disable all
import Foundation
import Ctest_component

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.ipropertyvalue)
public protocol IPropertyValue : WinRTInterface {
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.ipropertyvalue.getuint8)
    func getUInt8() throws -> UInt8
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.ipropertyvalue.getint16)
    func getInt16() throws -> Int16
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.ipropertyvalue.getuint16)
    func getUInt16() throws -> UInt16
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.ipropertyvalue.getint32)
    func getInt32() throws -> Int32
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.ipropertyvalue.getuint32)
    func getUInt32() throws -> UInt32
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.ipropertyvalue.getint64)
    func getInt64() throws -> Int64
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.ipropertyvalue.getuint64)
    func getUInt64() throws -> UInt64
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.ipropertyvalue.getsingle)
    func getSingle() throws -> Float
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.ipropertyvalue.getdouble)
    func getDouble() throws -> Double
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.ipropertyvalue.getchar16)
    func getChar16() throws -> Character
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.ipropertyvalue.getboolean)
    func getBoolean() throws -> Bool
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.ipropertyvalue.getstring)
    func getString() throws -> String
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.ipropertyvalue.getguid)
    func getGuid() throws -> Foundation.UUID
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.ipropertyvalue.getdatetime)
    func getDateTime() throws -> test_component.DateTime
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.ipropertyvalue.gettimespan)
    func getTimeSpan() throws -> test_component.TimeSpan
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.ipropertyvalue.getpoint)
    func getPoint() throws -> test_component.Point
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.ipropertyvalue.getsize)
    func getSize() throws -> test_component.Size
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.ipropertyvalue.getrect)
    func getRect() throws -> test_component.Rect
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.ipropertyvalue.getuint8array)
    func getUInt8Array(_ value: inout [UInt8]) throws
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.ipropertyvalue.getint16array)
    func getInt16Array(_ value: inout [Int16]) throws
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.ipropertyvalue.getuint16array)
    func getUInt16Array(_ value: inout [UInt16]) throws
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.ipropertyvalue.getint32array)
    func getInt32Array(_ value: inout [Int32]) throws
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.ipropertyvalue.getuint32array)
    func getUInt32Array(_ value: inout [UInt32]) throws
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.ipropertyvalue.getint64array)
    func getInt64Array(_ value: inout [Int64]) throws
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.ipropertyvalue.getuint64array)
    func getUInt64Array(_ value: inout [UInt64]) throws
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.ipropertyvalue.getsinglearray)
    func getSingleArray(_ value: inout [Float]) throws
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.ipropertyvalue.getdoublearray)
    func getDoubleArray(_ value: inout [Double]) throws
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.ipropertyvalue.getchar16array)
    func getChar16Array(_ value: inout [Character]) throws
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.ipropertyvalue.getbooleanarray)
    func getBooleanArray(_ value: inout [Bool]) throws
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.ipropertyvalue.getstringarray)
    func getStringArray(_ value: inout [String]) throws
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.ipropertyvalue.getinspectablearray)
    func getInspectableArray(_ value: inout [Any?]) throws
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.ipropertyvalue.getguidarray)
    func getGuidArray(_ value: inout [Foundation.UUID]) throws
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.ipropertyvalue.getdatetimearray)
    func getDateTimeArray(_ value: inout [test_component.DateTime]) throws
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.ipropertyvalue.gettimespanarray)
    func getTimeSpanArray(_ value: inout [test_component.TimeSpan]) throws
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.ipropertyvalue.getpointarray)
    func getPointArray(_ value: inout [test_component.Point]) throws
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.ipropertyvalue.getsizearray)
    func getSizeArray(_ value: inout [test_component.Size]) throws
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.ipropertyvalue.getrectarray)
    func getRectArray(_ value: inout [test_component.Rect]) throws
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.ipropertyvalue.isnumericscalar)
    var isNumericScalar: Bool { get }
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.ipropertyvalue.type)
    var type: test_component.PropertyType { get }
}

public typealias AnyIPropertyValue = any IPropertyValue


// MARK: - Internals

@_spi(WinRTInternal)
extension __IMPL_Windows_Foundation {
    public enum IPropertyValueBridge : AbiInterfaceBridge {
        public typealias CABI = __x_ABI_CWindows_CFoundation_CIPropertyValue
        public typealias SwiftABI = __ABI_Windows_Foundation.IPropertyValue
        public typealias SwiftProjection = AnyIPropertyValue
        public static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
            guard let abi = abi else { return nil }
            return IPropertyValueImpl(abi)
        }

        public static func makeAbi() -> CABI {
            let vtblPtr = withUnsafeMutablePointer(to: &__ABI_Windows_Foundation.IPropertyValueVTable) { $0 }
            return .init(lpVtbl: vtblPtr)
        }
    }

    public class IPropertyValueImpl : IPropertyValue, IReference {
        public typealias T = Any
        var _value: Any
        var propertyType : PropertyType

        fileprivate init(_ abi: ComPtr<__x_ABI_CWindows_CFoundation_CIPropertyValue>) { fatalError("not implemented") }
        public init(value: Any) {
            _value = value
            propertyType = switch value {
                case is UInt8: .uint8
                case is Int16: .int16
                case is UInt16: .uint16
                case is Int32: .int32
                case is UInt32: .uint32
                case is Int64: .int64
                case is UInt64: .uint64
                case is Float: .single
                case is Double: .double
                case is Character: .char16
                case is Bool: .boolean
                case is String: .string
                case is DateTime: .dateTime
                case is TimeSpan: .timeSpan
                case is Foundation.UUID: .guid
                case is Point: .point
                case is Size: .size
                case is Rect: .rect
                case is IWinRTObject: .inspectable
                case is IInspectable: .inspectable
                case is [UInt8]: .uint8Array
                case is [Int16]: .int16Array
                case is [UInt16]: .uint16Array
                case is [Int32]: .int32Array
                case is [UInt32]: .uint32Array
                case is [Int64]: .int64Array
                case is [UInt64]: .uint64Array
                case is [Float]: .singleArray
                case is [Double]: .doubleArray
                case is [Character]: .char16Array
                case is [Bool]: .booleanArray
                case is [String]: .stringArray
                case is [DateTime]: .dateTimeArray
                case is [TimeSpan]: .timeSpanArray
                case is [Foundation.UUID]: .guidArray
                case is [Point]: .pointArray
                case is [Size]: .sizeArray
                case is [Rect]: .rectArray
                case is [Any?]: .inspectableArray
                default: .otherType
                }
        }

        public var type: PropertyType { propertyType }
        public var isNumericScalar: Bool {
            switch propertyType {
                case .int16, .int32, .int64, .uint8, .uint16, .uint32, .uint64, .single, .double: return true
                default: return false
            }
        }

        public var value: Any { _value }

        public func getUInt8() -> UInt8 { _value as! UInt8 }
        public func getInt16() -> Int16 { _value as! Int16 }
        public func getUInt16() -> UInt16 { _value as! UInt16 }
        public func getInt32() -> Int32 { _value as! Int32 }
        public func getUInt32() -> UInt32 { _value as! UInt32 }
        public func getInt64() -> Int64 { _value as! Int64 }
        public func getUInt64() -> UInt64 { _value as! UInt64 }
        public func getSingle() -> Float { _value as! Float }
        public func getDouble() -> Double { _value as! Double }
        public func getChar16() -> Character { _value as! Character }
        public func getBoolean() -> Bool { _value as! Bool }
        public func getString() -> String { _value as! String }
        public func getGuid() -> Foundation.UUID { _value as! Foundation.UUID }
        public func getDateTime() -> DateTime { _value as! DateTime }
        public func getTimeSpan() -> TimeSpan { _value as! TimeSpan }
        public func getPoint() -> Point { _value as! Point }
        public func getSize() -> Size { _value as! Size }
        public func getRect() -> Rect { _value as! Rect }
        public func getUInt8Array(_ value: inout [UInt8]) { value = _value as! [UInt8] }
        public func getInt16Array(_ value: inout [Int16]) { value = _value as! [Int16] }
        public func getUInt16Array(_ value: inout [UInt16]) { value = _value as! [UInt16] }
        public func getInt32Array(_ value: inout [Int32]) { value = _value as! [Int32] }
        public func getUInt32Array(_ value: inout [UInt32])  { value = _value as! [UInt32] }
        public func getInt64Array(_ value: inout [Int64]) { value = _value as! [Int64] }
        public func getUInt64Array(_ value: inout [UInt64]) { value = _value as! [UInt64] }
        public func getSingleArray(_ value: inout [Float]) { value = _value as! [Float] }
        public func getDoubleArray(_ value: inout [Double]) { value = _value as! [Double] }
        public func getChar16Array(_ value: inout [Character]) { value = _value as! [Character] }
        public func getBooleanArray(_ value: inout [Bool]) { value = _value as! [Bool] }
        public func getStringArray(_ value: inout [String]) { value = _value as! [String] }
        public func getGuidArray(_ value: inout [Foundation.UUID]) { value = _value as! [Foundation.UUID] }
        public func getDateTimeArray(_ value: inout [DateTime]) { value = _value as! [DateTime] }
        public func getTimeSpanArray(_ value: inout [TimeSpan]) { value = _value as! [TimeSpan] }
        public func getPointArray(_ value: inout [Point]) { value = _value as! [Point] }
        public func getSizeArray(_ value: inout [Size]) { value = _value as! [Size] }
        public func getRectArray(_ value: inout [Rect]) { value = _value as! [Rect] }
        public func getInspectableArray(_ value: inout [Any?]) { value = _value as! [Any?] }
        
        public func queryInterface(_ iid: test_component.IID) -> IUnknownRef? {
            guard iid == __ABI_Windows_Foundation.IPropertyValueWrapper.IID else { return nil }
            guard let thisAsIPropValue = __ABI_Windows_Foundation.IPropertyValueWrapper(self) else { fatalError("creating non-nil wrapper shouldn't fail") }
            return thisAsIPropValue.queryInterface(iid)
        }

    }

}
@_spi(WinRTInternal)
extension __ABI_Windows_Foundation {
    private static let IID___x_ABI_CWindows_CFoundation_CIPropertyValue: test_component.IID = .init(
        Data1: 0x4BD682DD, Data2: 0x7554, Data3: 0x40E9, Data4: ( 0x9A,0x9B,0x82,0x65,0x4E,0xDE,0x7E,0x62 )
    ) // 4BD682DD-7554-40E9-9A9B-82654EDE7E62
    public class IPropertyValue: test_component.IInspectable {
        override public class var IID: test_component.IID { IID___x_ABI_CWindows_CFoundation_CIPropertyValue }

        open func get_Type() throws -> test_component.PropertyType {
            var value: __x_ABI_CWindows_CFoundation_CPropertyType = .init(0)
            _ = try perform(as: __x_ABI_CWindows_CFoundation_CIPropertyValue.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Type(pThis, &value))
            }
            return value
        }

        open func get_IsNumericScalar() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CWindows_CFoundation_CIPropertyValue.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsNumericScalar(pThis, &value))
            }
            return .init(from: value)
        }

        open func GetUInt8() throws -> UInt8 {
            var value: UINT8 = 0
            _ = try perform(as: __x_ABI_CWindows_CFoundation_CIPropertyValue.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetUInt8(pThis, &value))
            }
            return value
        }

        open func GetInt16() throws -> Int16 {
            var value: INT16 = 0
            _ = try perform(as: __x_ABI_CWindows_CFoundation_CIPropertyValue.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetInt16(pThis, &value))
            }
            return value
        }

        open func GetUInt16() throws -> UInt16 {
            var value: UINT16 = 0
            _ = try perform(as: __x_ABI_CWindows_CFoundation_CIPropertyValue.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetUInt16(pThis, &value))
            }
            return value
        }

        open func GetInt32() throws -> Int32 {
            var value: INT32 = 0
            _ = try perform(as: __x_ABI_CWindows_CFoundation_CIPropertyValue.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetInt32(pThis, &value))
            }
            return value
        }

        open func GetUInt32() throws -> UInt32 {
            var value: UINT32 = 0
            _ = try perform(as: __x_ABI_CWindows_CFoundation_CIPropertyValue.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetUInt32(pThis, &value))
            }
            return value
        }

        open func GetInt64() throws -> Int64 {
            var value: INT64 = 0
            _ = try perform(as: __x_ABI_CWindows_CFoundation_CIPropertyValue.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetInt64(pThis, &value))
            }
            return value
        }

        open func GetUInt64() throws -> UInt64 {
            var value: UINT64 = 0
            _ = try perform(as: __x_ABI_CWindows_CFoundation_CIPropertyValue.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetUInt64(pThis, &value))
            }
            return value
        }

        open func GetSingle() throws -> Float {
            var value: FLOAT = 0.0
            _ = try perform(as: __x_ABI_CWindows_CFoundation_CIPropertyValue.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetSingle(pThis, &value))
            }
            return value
        }

        open func GetDouble() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CWindows_CFoundation_CIPropertyValue.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetDouble(pThis, &value))
            }
            return value
        }

        open func GetChar16() throws -> Character {
            var value: WCHAR = 0
            _ = try perform(as: __x_ABI_CWindows_CFoundation_CIPropertyValue.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetChar16(pThis, &value))
            }
            return .init(from: value)
        }

        open func GetBoolean() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CWindows_CFoundation_CIPropertyValue.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetBoolean(pThis, &value))
            }
            return .init(from: value)
        }

        open func GetString() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CWindows_CFoundation_CIPropertyValue.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetString(pThis, &value))
            }
            return .init(from: value)
        }

        open func GetGuid() throws -> Foundation.UUID {
            var value: test_component.GUID = .init()
            _ = try perform(as: __x_ABI_CWindows_CFoundation_CIPropertyValue.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetGuid(pThis, &value))
            }
            return .init(from: value)
        }

        open func GetDateTime() throws -> test_component.DateTime {
            var value: __x_ABI_CWindows_CFoundation_CDateTime = .init()
            _ = try perform(as: __x_ABI_CWindows_CFoundation_CIPropertyValue.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetDateTime(pThis, &value))
            }
            return .from(abi: value)
        }

        open func GetTimeSpan() throws -> test_component.TimeSpan {
            var value: __x_ABI_CWindows_CFoundation_CTimeSpan = .init()
            _ = try perform(as: __x_ABI_CWindows_CFoundation_CIPropertyValue.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetTimeSpan(pThis, &value))
            }
            return .from(abi: value)
        }

        open func GetPoint() throws -> test_component.Point {
            var value: __x_ABI_CWindows_CFoundation_CPoint = .init()
            _ = try perform(as: __x_ABI_CWindows_CFoundation_CIPropertyValue.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetPoint(pThis, &value))
            }
            return .from(abi: value)
        }

        open func GetSize() throws -> test_component.Size {
            var value: __x_ABI_CWindows_CFoundation_CSize = .init()
            _ = try perform(as: __x_ABI_CWindows_CFoundation_CIPropertyValue.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetSize(pThis, &value))
            }
            return .from(abi: value)
        }

        open func GetRect() throws -> test_component.Rect {
            var value: __x_ABI_CWindows_CFoundation_CRect = .init()
            _ = try perform(as: __x_ABI_CWindows_CFoundation_CIPropertyValue.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetRect(pThis, &value))
            }
            return .from(abi: value)
        }

        open func GetUInt8Array(_ value: inout [UInt8]) throws {
            var _value: WinRTArrayAbi<UINT8> = (0, nil)
            _ = try perform(as: __x_ABI_CWindows_CFoundation_CIPropertyValue.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetUInt8Array(pThis, &_value.count, &_value.start))
            }
            defer { CoTaskMemFree(_value.start) }
            value = .from(abi: _value)
        }

        open func GetInt16Array(_ value: inout [Int16]) throws {
            var _value: WinRTArrayAbi<INT16> = (0, nil)
            _ = try perform(as: __x_ABI_CWindows_CFoundation_CIPropertyValue.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetInt16Array(pThis, &_value.count, &_value.start))
            }
            defer { CoTaskMemFree(_value.start) }
            value = .from(abi: _value)
        }

        open func GetUInt16Array(_ value: inout [UInt16]) throws {
            var _value: WinRTArrayAbi<UINT16> = (0, nil)
            _ = try perform(as: __x_ABI_CWindows_CFoundation_CIPropertyValue.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetUInt16Array(pThis, &_value.count, &_value.start))
            }
            defer { CoTaskMemFree(_value.start) }
            value = .from(abi: _value)
        }

        open func GetInt32Array(_ value: inout [Int32]) throws {
            var _value: WinRTArrayAbi<INT32> = (0, nil)
            _ = try perform(as: __x_ABI_CWindows_CFoundation_CIPropertyValue.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetInt32Array(pThis, &_value.count, &_value.start))
            }
            defer { CoTaskMemFree(_value.start) }
            value = .from(abi: _value)
        }

        open func GetUInt32Array(_ value: inout [UInt32]) throws {
            var _value: WinRTArrayAbi<UINT32> = (0, nil)
            _ = try perform(as: __x_ABI_CWindows_CFoundation_CIPropertyValue.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetUInt32Array(pThis, &_value.count, &_value.start))
            }
            defer { CoTaskMemFree(_value.start) }
            value = .from(abi: _value)
        }

        open func GetInt64Array(_ value: inout [Int64]) throws {
            var _value: WinRTArrayAbi<INT64> = (0, nil)
            _ = try perform(as: __x_ABI_CWindows_CFoundation_CIPropertyValue.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetInt64Array(pThis, &_value.count, &_value.start))
            }
            defer { CoTaskMemFree(_value.start) }
            value = .from(abi: _value)
        }

        open func GetUInt64Array(_ value: inout [UInt64]) throws {
            var _value: WinRTArrayAbi<UINT64> = (0, nil)
            _ = try perform(as: __x_ABI_CWindows_CFoundation_CIPropertyValue.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetUInt64Array(pThis, &_value.count, &_value.start))
            }
            defer { CoTaskMemFree(_value.start) }
            value = .from(abi: _value)
        }

        open func GetSingleArray(_ value: inout [Float]) throws {
            var _value: WinRTArrayAbi<FLOAT> = (0, nil)
            _ = try perform(as: __x_ABI_CWindows_CFoundation_CIPropertyValue.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetSingleArray(pThis, &_value.count, &_value.start))
            }
            defer { CoTaskMemFree(_value.start) }
            value = .from(abi: _value)
        }

        open func GetDoubleArray(_ value: inout [Double]) throws {
            var _value: WinRTArrayAbi<DOUBLE> = (0, nil)
            _ = try perform(as: __x_ABI_CWindows_CFoundation_CIPropertyValue.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetDoubleArray(pThis, &_value.count, &_value.start))
            }
            defer { CoTaskMemFree(_value.start) }
            value = .from(abi: _value)
        }

        open func GetChar16Array(_ value: inout [Character]) throws {
            var _value: WinRTArrayAbi<WCHAR> = (0, nil)
            _ = try perform(as: __x_ABI_CWindows_CFoundation_CIPropertyValue.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetChar16Array(pThis, &_value.count, &_value.start))
            }
            defer { CoTaskMemFree(_value.start) }
            value = .from(abi: _value)
        }

        open func GetBooleanArray(_ value: inout [Bool]) throws {
            var _value: WinRTArrayAbi<boolean> = (0, nil)
            _ = try perform(as: __x_ABI_CWindows_CFoundation_CIPropertyValue.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetBooleanArray(pThis, &_value.count, &_value.start))
            }
            defer { CoTaskMemFree(_value.start) }
            value = .from(abi: _value)
        }

        open func GetStringArray(_ value: inout [String]) throws {
            var _value: WinRTArrayAbi<HSTRING?> = (0, nil)
            _ = try perform(as: __x_ABI_CWindows_CFoundation_CIPropertyValue.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetStringArray(pThis, &_value.count, &_value.start))
            }
            defer { CoTaskMemFree(_value.start) }
            value = .from(abi: _value)
        }

        open func GetInspectableArray(_ value: inout [Any?]) throws {
            var _value: WinRTArrayAbi<UnsafeMutablePointer<C_IInspectable>?> = (0, nil)
            _ = try perform(as: __x_ABI_CWindows_CFoundation_CIPropertyValue.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetInspectableArray(pThis, &_value.count, &_value.start))
            }
            defer { CoTaskMemFree(_value.start) }
            value = .from(abiBridge: __IMPL_.AnyBridge.self, abi: _value)
        }

        open func GetGuidArray(_ value: inout [Foundation.UUID]) throws {
            var _value: WinRTArrayAbi<test_component.GUID> = (0, nil)
            _ = try perform(as: __x_ABI_CWindows_CFoundation_CIPropertyValue.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetGuidArray(pThis, &_value.count, &_value.start))
            }
            defer { CoTaskMemFree(_value.start) }
            value = .from(abi: _value)
        }

        open func GetDateTimeArray(_ value: inout [test_component.DateTime]) throws {
            var _value: WinRTArrayAbi<__x_ABI_CWindows_CFoundation_CDateTime> = (0, nil)
            _ = try perform(as: __x_ABI_CWindows_CFoundation_CIPropertyValue.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetDateTimeArray(pThis, &_value.count, &_value.start))
            }
            defer { CoTaskMemFree(_value.start) }
            value = .from(abi: _value)
        }

        open func GetTimeSpanArray(_ value: inout [test_component.TimeSpan]) throws {
            var _value: WinRTArrayAbi<__x_ABI_CWindows_CFoundation_CTimeSpan> = (0, nil)
            _ = try perform(as: __x_ABI_CWindows_CFoundation_CIPropertyValue.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetTimeSpanArray(pThis, &_value.count, &_value.start))
            }
            defer { CoTaskMemFree(_value.start) }
            value = .from(abi: _value)
        }

        open func GetPointArray(_ value: inout [test_component.Point]) throws {
            var _value: WinRTArrayAbi<__x_ABI_CWindows_CFoundation_CPoint> = (0, nil)
            _ = try perform(as: __x_ABI_CWindows_CFoundation_CIPropertyValue.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetPointArray(pThis, &_value.count, &_value.start))
            }
            defer { CoTaskMemFree(_value.start) }
            value = .from(abi: _value)
        }

        open func GetSizeArray(_ value: inout [test_component.Size]) throws {
            var _value: WinRTArrayAbi<__x_ABI_CWindows_CFoundation_CSize> = (0, nil)
            _ = try perform(as: __x_ABI_CWindows_CFoundation_CIPropertyValue.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetSizeArray(pThis, &_value.count, &_value.start))
            }
            defer { CoTaskMemFree(_value.start) }
            value = .from(abi: _value)
        }

        open func GetRectArray(_ value: inout [test_component.Rect]) throws {
            var _value: WinRTArrayAbi<__x_ABI_CWindows_CFoundation_CRect> = (0, nil)
            _ = try perform(as: __x_ABI_CWindows_CFoundation_CIPropertyValue.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetRectArray(pThis, &_value.count, &_value.start))
            }
            defer { CoTaskMemFree(_value.start) }
            value = .from(abi: _value)
        }

    }

    internal static var IPropertyValueVTable: __x_ABI_CWindows_CFoundation_CIPropertyValueVtbl = .init(
        QueryInterface: { IPropertyValueWrapper.queryInterface($0, $1, $2) },
        AddRef: { IPropertyValueWrapper.addRef($0) },
        Release: { IPropertyValueWrapper.release($0) },
        GetIids: {
            let size = MemoryLayout<test_component.IID>.size
            let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: test_component.IID.self)
            iids[0] = IUnknown.IID
            iids[1] = IInspectable.IID
            iids[2] = __ABI_Windows_Foundation.IPropertyValueWrapper.IID
            $1!.pointee = 3
            $2!.pointee = iids
            return S_OK
        },

        GetRuntimeClassName: {
            _ = $0
            let hstring = try! HString("Windows.Foundation.IPropertyValue").detach()
            $1!.pointee = hstring
            return S_OK
        },

        GetTrustLevel: {
            _ = $0
            $1!.pointee = TrustLevel(rawValue: 0)
            return S_OK
        },

        get_Type: {
            guard let __unwrapped__instance = IPropertyValueWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value = __unwrapped__instance.type
            $1?.initialize(to: value)
            return S_OK
        },

        get_IsNumericScalar: {
            guard let __unwrapped__instance = IPropertyValueWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value = __unwrapped__instance.isNumericScalar
            $1?.initialize(to: .init(from: value))
            return S_OK
        },

        GetUInt8: {
            do {
                guard let __unwrapped__instance = IPropertyValueWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let value = try __unwrapped__instance.getUInt8()
                $1?.initialize(to: value)
                return S_OK
            } catch { return failWith(error: error) }
        },

        GetInt16: {
            do {
                guard let __unwrapped__instance = IPropertyValueWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let value = try __unwrapped__instance.getInt16()
                $1?.initialize(to: value)
                return S_OK
            } catch { return failWith(error: error) }
        },

        GetUInt16: {
            do {
                guard let __unwrapped__instance = IPropertyValueWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let value = try __unwrapped__instance.getUInt16()
                $1?.initialize(to: value)
                return S_OK
            } catch { return failWith(error: error) }
        },

        GetInt32: {
            do {
                guard let __unwrapped__instance = IPropertyValueWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let value = try __unwrapped__instance.getInt32()
                $1?.initialize(to: value)
                return S_OK
            } catch { return failWith(error: error) }
        },

        GetUInt32: {
            do {
                guard let __unwrapped__instance = IPropertyValueWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let value = try __unwrapped__instance.getUInt32()
                $1?.initialize(to: value)
                return S_OK
            } catch { return failWith(error: error) }
        },

        GetInt64: {
            do {
                guard let __unwrapped__instance = IPropertyValueWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let value = try __unwrapped__instance.getInt64()
                $1?.initialize(to: value)
                return S_OK
            } catch { return failWith(error: error) }
        },

        GetUInt64: {
            do {
                guard let __unwrapped__instance = IPropertyValueWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let value = try __unwrapped__instance.getUInt64()
                $1?.initialize(to: value)
                return S_OK
            } catch { return failWith(error: error) }
        },

        GetSingle: {
            do {
                guard let __unwrapped__instance = IPropertyValueWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let value = try __unwrapped__instance.getSingle()
                $1?.initialize(to: value)
                return S_OK
            } catch { return failWith(error: error) }
        },

        GetDouble: {
            do {
                guard let __unwrapped__instance = IPropertyValueWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let value = try __unwrapped__instance.getDouble()
                $1?.initialize(to: value)
                return S_OK
            } catch { return failWith(error: error) }
        },

        GetChar16: {
            do {
                guard let __unwrapped__instance = IPropertyValueWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let value = try __unwrapped__instance.getChar16()
                $1?.initialize(to: .init(from: value))
                return S_OK
            } catch { return failWith(error: error) }
        },

        GetBoolean: {
            do {
                guard let __unwrapped__instance = IPropertyValueWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let value = try __unwrapped__instance.getBoolean()
                $1?.initialize(to: .init(from: value))
                return S_OK
            } catch { return failWith(error: error) }
        },

        GetString: {
            do {
                guard let __unwrapped__instance = IPropertyValueWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let value = try __unwrapped__instance.getString()
                $1?.initialize(to: try! HString(value).detach())
                return S_OK
            } catch { return failWith(error: error) }
        },

        GetGuid: {
            do {
                guard let __unwrapped__instance = IPropertyValueWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let value = try __unwrapped__instance.getGuid()
                $1?.initialize(to: .init(from: value))
                return S_OK
            } catch { return failWith(error: error) }
        },

        GetDateTime: {
            do {
                guard let __unwrapped__instance = IPropertyValueWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let value = try __unwrapped__instance.getDateTime()
                $1?.initialize(to: .from(swift: value))
                return S_OK
            } catch { return failWith(error: error) }
        },

        GetTimeSpan: {
            do {
                guard let __unwrapped__instance = IPropertyValueWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let value = try __unwrapped__instance.getTimeSpan()
                $1?.initialize(to: .from(swift: value))
                return S_OK
            } catch { return failWith(error: error) }
        },

        GetPoint: {
            do {
                guard let __unwrapped__instance = IPropertyValueWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let value = try __unwrapped__instance.getPoint()
                $1?.initialize(to: .from(swift: value))
                return S_OK
            } catch { return failWith(error: error) }
        },

        GetSize: {
            do {
                guard let __unwrapped__instance = IPropertyValueWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let value = try __unwrapped__instance.getSize()
                $1?.initialize(to: .from(swift: value))
                return S_OK
            } catch { return failWith(error: error) }
        },

        GetRect: {
            do {
                guard let __unwrapped__instance = IPropertyValueWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let value = try __unwrapped__instance.getRect()
                $1?.initialize(to: .from(swift: value))
                return S_OK
            } catch { return failWith(error: error) }
        },

        GetUInt8Array: {
            do {
                guard let __unwrapped__instance = IPropertyValueWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                var value = [UInt8]()
                try __unwrapped__instance.getUInt8Array(&value)
                $1?.initialize(to: UInt32(value.count))
                value.fill(abi: $2)
                return S_OK
            } catch { return failWith(error: error) }
        },

        GetInt16Array: {
            do {
                guard let __unwrapped__instance = IPropertyValueWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                var value = [Int16]()
                try __unwrapped__instance.getInt16Array(&value)
                $1?.initialize(to: UInt32(value.count))
                value.fill(abi: $2)
                return S_OK
            } catch { return failWith(error: error) }
        },

        GetUInt16Array: {
            do {
                guard let __unwrapped__instance = IPropertyValueWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                var value = [UInt16]()
                try __unwrapped__instance.getUInt16Array(&value)
                $1?.initialize(to: UInt32(value.count))
                value.fill(abi: $2)
                return S_OK
            } catch { return failWith(error: error) }
        },

        GetInt32Array: {
            do {
                guard let __unwrapped__instance = IPropertyValueWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                var value = [Int32]()
                try __unwrapped__instance.getInt32Array(&value)
                $1?.initialize(to: UInt32(value.count))
                value.fill(abi: $2)
                return S_OK
            } catch { return failWith(error: error) }
        },

        GetUInt32Array: {
            do {
                guard let __unwrapped__instance = IPropertyValueWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                var value = [UInt32]()
                try __unwrapped__instance.getUInt32Array(&value)
                $1?.initialize(to: UInt32(value.count))
                value.fill(abi: $2)
                return S_OK
            } catch { return failWith(error: error) }
        },

        GetInt64Array: {
            do {
                guard let __unwrapped__instance = IPropertyValueWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                var value = [Int64]()
                try __unwrapped__instance.getInt64Array(&value)
                $1?.initialize(to: UInt32(value.count))
                value.fill(abi: $2)
                return S_OK
            } catch { return failWith(error: error) }
        },

        GetUInt64Array: {
            do {
                guard let __unwrapped__instance = IPropertyValueWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                var value = [UInt64]()
                try __unwrapped__instance.getUInt64Array(&value)
                $1?.initialize(to: UInt32(value.count))
                value.fill(abi: $2)
                return S_OK
            } catch { return failWith(error: error) }
        },

        GetSingleArray: {
            do {
                guard let __unwrapped__instance = IPropertyValueWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                var value = [Float]()
                try __unwrapped__instance.getSingleArray(&value)
                $1?.initialize(to: UInt32(value.count))
                value.fill(abi: $2)
                return S_OK
            } catch { return failWith(error: error) }
        },

        GetDoubleArray: {
            do {
                guard let __unwrapped__instance = IPropertyValueWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                var value = [Double]()
                try __unwrapped__instance.getDoubleArray(&value)
                $1?.initialize(to: UInt32(value.count))
                value.fill(abi: $2)
                return S_OK
            } catch { return failWith(error: error) }
        },

        GetChar16Array: {
            do {
                guard let __unwrapped__instance = IPropertyValueWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                var value = [Character]()
                try __unwrapped__instance.getChar16Array(&value)
                $1?.initialize(to: UInt32(value.count))
                do {
                    try value.fill(abi: $2)
                } catch { return failWith(error: error) }
                return S_OK
            } catch { return failWith(error: error) }
        },

        GetBooleanArray: {
            do {
                guard let __unwrapped__instance = IPropertyValueWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                var value = [Bool]()
                try __unwrapped__instance.getBooleanArray(&value)
                $1?.initialize(to: UInt32(value.count))
                do {
                    try value.fill(abi: $2)
                } catch { return failWith(error: error) }
                return S_OK
            } catch { return failWith(error: error) }
        },

        GetStringArray: {
            do {
                guard let __unwrapped__instance = IPropertyValueWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                var value = [String]()
                try __unwrapped__instance.getStringArray(&value)
                $1?.initialize(to: UInt32(value.count))
                do {
                    try value.fill(abi: $2)
                } catch { return failWith(error: error) }
                return S_OK
            } catch { return failWith(error: error) }
        },

        GetInspectableArray: {
            do {
                guard let __unwrapped__instance = IPropertyValueWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                var value = [Any?]()
                try __unwrapped__instance.getInspectableArray(&value)
                $1?.initialize(to: UInt32(value.count))
                value.fill(abi: $2, abiBridge: __IMPL_.AnyBridge.self)
                return S_OK
            } catch { return failWith(error: error) }
        },

        GetGuidArray: {
            do {
                guard let __unwrapped__instance = IPropertyValueWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                var value = [Foundation.UUID]()
                try __unwrapped__instance.getGuidArray(&value)
                $1?.initialize(to: UInt32(value.count))
                do {
                    try value.fill(abi: $2)
                } catch { return failWith(error: error) }
                return S_OK
            } catch { return failWith(error: error) }
        },

        GetDateTimeArray: {
            do {
                guard let __unwrapped__instance = IPropertyValueWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                var value = [test_component.DateTime]()
                try __unwrapped__instance.getDateTimeArray(&value)
                $1?.initialize(to: UInt32(value.count))
                do {
                    try value.fill(abi: $2)
                } catch { return failWith(error: error) }
                return S_OK
            } catch { return failWith(error: error) }
        },

        GetTimeSpanArray: {
            do {
                guard let __unwrapped__instance = IPropertyValueWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                var value = [test_component.TimeSpan]()
                try __unwrapped__instance.getTimeSpanArray(&value)
                $1?.initialize(to: UInt32(value.count))
                do {
                    try value.fill(abi: $2)
                } catch { return failWith(error: error) }
                return S_OK
            } catch { return failWith(error: error) }
        },

        GetPointArray: {
            do {
                guard let __unwrapped__instance = IPropertyValueWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                var value = [test_component.Point]()
                try __unwrapped__instance.getPointArray(&value)
                $1?.initialize(to: UInt32(value.count))
                do {
                    try value.fill(abi: $2)
                } catch { return failWith(error: error) }
                return S_OK
            } catch { return failWith(error: error) }
        },

        GetSizeArray: {
            do {
                guard let __unwrapped__instance = IPropertyValueWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                var value = [test_component.Size]()
                try __unwrapped__instance.getSizeArray(&value)
                $1?.initialize(to: UInt32(value.count))
                do {
                    try value.fill(abi: $2)
                } catch { return failWith(error: error) }
                return S_OK
            } catch { return failWith(error: error) }
        },

        GetRectArray: {
            do {
                guard let __unwrapped__instance = IPropertyValueWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                var value = [test_component.Rect]()
                try __unwrapped__instance.getRectArray(&value)
                $1?.initialize(to: UInt32(value.count))
                do {
                    try value.fill(abi: $2)
                } catch { return failWith(error: error) }
                return S_OK
            } catch { return failWith(error: error) }
        }
    )

    public typealias IPropertyValueWrapper = InterfaceWrapperBase<__IMPL_Windows_Foundation.IPropertyValueBridge>
}

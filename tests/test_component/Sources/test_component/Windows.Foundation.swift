// WARNING: Please don't edit this file. It was generated by Swift/WinRT v0.0.1
import Ctest_component

public typealias PropertyType = __x_ABI_CWindows_CFoundation_CPropertyType
public struct DateTime: Hashable, Codable {
    public var universalTime: Int64 = 0
    public init() {}
    public init(universalTime: Int64) {
        self.universalTime = universalTime
    }
    public static func from(abi: __x_ABI_CWindows_CFoundation_CDateTime) -> DateTime {
        .init(universalTime: abi.UniversalTime)
    }
}

public struct Point: Hashable, Codable {
    public var x: Float = 0.0
    public var y: Float = 0.0
    public init() {}
    public init(x: Float, y: Float) {
        self.x = x
        self.y = y
    }
    public static func from(abi: __x_ABI_CWindows_CFoundation_CPoint) -> Point {
        .init(x: abi.X, y: abi.Y)
    }
}

public struct Rect: Hashable, Codable {
    public var x: Float = 0.0
    public var y: Float = 0.0
    public var width: Float = 0.0
    public var height: Float = 0.0
    public init() {}
    public init(x: Float, y: Float, width: Float, height: Float) {
        self.x = x
        self.y = y
        self.width = width
        self.height = height
    }
    public static func from(abi: __x_ABI_CWindows_CFoundation_CRect) -> Rect {
        .init(x: abi.X, y: abi.Y, width: abi.Width, height: abi.Height)
    }
}

public struct Size: Hashable, Codable {
    public var width: Float = 0.0
    public var height: Float = 0.0
    public init() {}
    public init(width: Float, height: Float) {
        self.width = width
        self.height = height
    }
    public static func from(abi: __x_ABI_CWindows_CFoundation_CSize) -> Size {
        .init(width: abi.Width, height: abi.Height)
    }
}

public struct TimeSpan: Hashable, Codable {
    public var duration: Int64 = 0
    public init() {}
    public init(duration: Int64) {
        self.duration = duration
    }
    public static func from(abi: __x_ABI_CWindows_CFoundation_CTimeSpan) -> TimeSpan {
        .init(duration: abi.Duration)
    }
}

public protocol IClosable : IWinRTObject {
    func close() throws
}

public typealias AnyIClosable = any IClosable

public protocol IPropertyValue : IWinRTObject {
    func getUInt8() throws -> UInt8
    func getInt16() throws -> Int16
    func getUInt16() throws -> UInt16
    func getInt32() throws -> Int32
    func getUInt32() throws -> UInt32
    func getInt64() throws -> Int64
    func getUInt64() throws -> UInt64
    func getSingle() throws -> Float
    func getDouble() throws -> Double
    func getChar16() throws -> Character
    func getBoolean() throws -> Bool
    func getString() throws -> String
    func getGuid() throws -> UUID
    func getDateTime() throws -> test_component.DateTime
    func getTimeSpan() throws -> test_component.TimeSpan
    func getPoint() throws -> test_component.Point
    func getSize() throws -> test_component.Size
    func getRect() throws -> test_component.Rect
    var isNumericScalar: Bool { get }
    var type: test_component.PropertyType { get }
}

public typealias AnyIPropertyValue = any IPropertyValue

public protocol IReference : IPropertyValue {
    var value: Any { get }
}
extension test_component.PropertyType {
    public static var empty : test_component.PropertyType {
        __x_ABI_CWindows_CFoundation_CPropertyType_Empty
    }
    public static var uint8 : test_component.PropertyType {
        __x_ABI_CWindows_CFoundation_CPropertyType_UInt8
    }
    public static var int16 : test_component.PropertyType {
        __x_ABI_CWindows_CFoundation_CPropertyType_Int16
    }
    public static var uint16 : test_component.PropertyType {
        __x_ABI_CWindows_CFoundation_CPropertyType_UInt16
    }
    public static var int32 : test_component.PropertyType {
        __x_ABI_CWindows_CFoundation_CPropertyType_Int32
    }
    public static var uint32 : test_component.PropertyType {
        __x_ABI_CWindows_CFoundation_CPropertyType_UInt32
    }
    public static var int64 : test_component.PropertyType {
        __x_ABI_CWindows_CFoundation_CPropertyType_Int64
    }
    public static var uint64 : test_component.PropertyType {
        __x_ABI_CWindows_CFoundation_CPropertyType_UInt64
    }
    public static var single : test_component.PropertyType {
        __x_ABI_CWindows_CFoundation_CPropertyType_Single
    }
    public static var double : test_component.PropertyType {
        __x_ABI_CWindows_CFoundation_CPropertyType_Double
    }
    public static var char16 : test_component.PropertyType {
        __x_ABI_CWindows_CFoundation_CPropertyType_Char16
    }
    public static var boolean : test_component.PropertyType {
        __x_ABI_CWindows_CFoundation_CPropertyType_Boolean
    }
    public static var string : test_component.PropertyType {
        __x_ABI_CWindows_CFoundation_CPropertyType_String
    }
    public static var inspectable : test_component.PropertyType {
        __x_ABI_CWindows_CFoundation_CPropertyType_Inspectable
    }
    public static var dateTime : test_component.PropertyType {
        __x_ABI_CWindows_CFoundation_CPropertyType_DateTime
    }
    public static var timeSpan : test_component.PropertyType {
        __x_ABI_CWindows_CFoundation_CPropertyType_TimeSpan
    }
    public static var guid : test_component.PropertyType {
        __x_ABI_CWindows_CFoundation_CPropertyType_Guid
    }
    public static var point : test_component.PropertyType {
        __x_ABI_CWindows_CFoundation_CPropertyType_Point
    }
    public static var size : test_component.PropertyType {
        __x_ABI_CWindows_CFoundation_CPropertyType_Size
    }
    public static var rect : test_component.PropertyType {
        __x_ABI_CWindows_CFoundation_CPropertyType_Rect
    }
    public static var otherType : test_component.PropertyType {
        __x_ABI_CWindows_CFoundation_CPropertyType_OtherType
    }
    public static var uint8Array : test_component.PropertyType {
        __x_ABI_CWindows_CFoundation_CPropertyType_UInt8Array
    }
    public static var int16Array : test_component.PropertyType {
        __x_ABI_CWindows_CFoundation_CPropertyType_Int16Array
    }
    public static var uint16Array : test_component.PropertyType {
        __x_ABI_CWindows_CFoundation_CPropertyType_UInt16Array
    }
    public static var int32Array : test_component.PropertyType {
        __x_ABI_CWindows_CFoundation_CPropertyType_Int32Array
    }
    public static var uint32Array : test_component.PropertyType {
        __x_ABI_CWindows_CFoundation_CPropertyType_UInt32Array
    }
    public static var int64Array : test_component.PropertyType {
        __x_ABI_CWindows_CFoundation_CPropertyType_Int64Array
    }
    public static var uint64Array : test_component.PropertyType {
        __x_ABI_CWindows_CFoundation_CPropertyType_UInt64Array
    }
    public static var singleArray : test_component.PropertyType {
        __x_ABI_CWindows_CFoundation_CPropertyType_SingleArray
    }
    public static var doubleArray : test_component.PropertyType {
        __x_ABI_CWindows_CFoundation_CPropertyType_DoubleArray
    }
    public static var char16Array : test_component.PropertyType {
        __x_ABI_CWindows_CFoundation_CPropertyType_Char16Array
    }
    public static var booleanArray : test_component.PropertyType {
        __x_ABI_CWindows_CFoundation_CPropertyType_BooleanArray
    }
    public static var stringArray : test_component.PropertyType {
        __x_ABI_CWindows_CFoundation_CPropertyType_StringArray
    }
    public static var inspectableArray : test_component.PropertyType {
        __x_ABI_CWindows_CFoundation_CPropertyType_InspectableArray
    }
    public static var dateTimeArray : test_component.PropertyType {
        __x_ABI_CWindows_CFoundation_CPropertyType_DateTimeArray
    }
    public static var timeSpanArray : test_component.PropertyType {
        __x_ABI_CWindows_CFoundation_CPropertyType_TimeSpanArray
    }
    public static var guidArray : test_component.PropertyType {
        __x_ABI_CWindows_CFoundation_CPropertyType_GuidArray
    }
    public static var pointArray : test_component.PropertyType {
        __x_ABI_CWindows_CFoundation_CPropertyType_PointArray
    }
    public static var sizeArray : test_component.PropertyType {
        __x_ABI_CWindows_CFoundation_CPropertyType_SizeArray
    }
    public static var rectArray : test_component.PropertyType {
        __x_ABI_CWindows_CFoundation_CPropertyType_RectArray
    }
    public static var otherTypeArray : test_component.PropertyType {
        __x_ABI_CWindows_CFoundation_CPropertyType_OtherTypeArray
    }
}
extension test_component.PropertyType: Hashable, Codable {}


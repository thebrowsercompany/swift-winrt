// WARNING: Please don't edit this file. It was generated by Swift/WinRT v0.0.1
import Ctest_component

public typealias NotifyCollectionChangedAction = __x_ABI_CWindows_CUI_CXaml_CInterop_CNotifyCollectionChangedAction
open class NotifyCollectionChangedEventArgs : UnsealedWinRTClass {
    private (set) public var _inner: UnsafeMutablePointer<Ctest_component.IInspectable>?
    private typealias SwiftABI = __ABI_Windows_UI_Xaml_Interop.INotifyCollectionChangedEventArgs
    private typealias CABI = __x_ABI_CWindows_CUI_CXaml_CInterop_CINotifyCollectionChangedEventArgs
    private var _default: SwiftABI!
    open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }   
        if T.self == Ctest_component.IInspectable.self {
            return RawPointer(_default)
        }
        return nil
    }

    open var thisPtr: test_component.IInspectable { _default }

    public static func from(abi: UnsafeMutablePointer<__x_ABI_CWindows_CUI_CXaml_CInterop_CINotifyCollectionChangedEventArgs>?) -> NotifyCollectionChangedEventArgs? {
        guard let abi = abi else { return nil }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    public init(fromAbi: test_component.IInspectable) {
        _default = try! fromAbi.QueryInterface()
    }

    private static var _INotifyCollectionChangedEventArgsFactory : __ABI_Windows_UI_Xaml_Interop.INotifyCollectionChangedEventArgsFactory =  try! RoGetActivationFactory(HString("Windows.UI.Xaml.Interop.NotifyCollectionChangedEventArgs"))
    public init() {
        self._default = MakeComposed(Self._INotifyCollectionChangedEventArgsFactory, &_inner, self)
    }

    public init<Factory: ComposableActivationFactory>(_ factory : Factory) {
        self._default = try! MakeComposed(factory, &_inner, self as! Factory.Composable.Default.SwiftProjection).QueryInterface()
        _ = self._default.Release() // release to reset reference count since QI caused an AddRef on ourselves
    }
    public var action : NotifyCollectionChangedAction {
        get {
            let value = try! _default.get_ActionImpl()
            return value
        }

    }

    public var newItems : AnyIBindableVector! {
        get {
            let value = try! _default.get_NewItemsImpl()
            return __ABI_Windows_UI_Xaml_Interop.IBindableVectorWrapper.unwrapFrom(abi: value)
        }

    }

    public var newStartingIndex : Int32 {
        get {
            let value = try! _default.get_NewStartingIndexImpl()
            return value
        }

    }

    public var oldItems : AnyIBindableVector! {
        get {
            let value = try! _default.get_OldItemsImpl()
            return __ABI_Windows_UI_Xaml_Interop.IBindableVectorWrapper.unwrapFrom(abi: value)
        }

    }

    public var oldStartingIndex : Int32 {
        get {
            let value = try! _default.get_OldStartingIndexImpl()
            return value
        }

    }

    internal class INotifyCollectionChangedEventArgs : ComposableImpl {
        internal typealias CABI = Ctest_component.IInspectable
        internal typealias SwiftABI = test_component.IInspectable
        internal class Default : MakeComposedAbi {
            internal typealias SwiftProjection = NotifyCollectionChangedEventArgs
            internal typealias CABI = __x_ABI_CWindows_CUI_CXaml_CInterop_CINotifyCollectionChangedEventArgs
            internal typealias SwiftABI = __ABI_Windows_UI_Xaml_Interop.INotifyCollectionChangedEventArgs
            internal static func from(abi: UnsafeMutableRawPointer?) -> SwiftProjection? {
                guard let abi = abi else { return nil }
                return .init(fromAbi: .init(abi))
            }
        }
    }
    internal typealias Composable = INotifyCollectionChangedEventArgs
    open class var _makeFromAbi : any MakeFromAbi.Type { Composable.Default.self }
}

public typealias NotifyCollectionChangedEventHandler = (Any?, NotifyCollectionChangedEventArgs?) -> ()
public protocol IBindableIterable : WinRTInterface {
    func first() throws -> test_component.AnyIBindableIterator!
}

extension IBindableIterable {
    public func makeAbi() -> test_component.IInspectable {
        let wrapper = __ABI_Windows_UI_Xaml_Interop.IBindableIterableWrapper(self)
        let _abi = try! wrapper?.toABI { $0 }
        return .init(_abi!)
    }
}
public typealias AnyIBindableIterable = any IBindableIterable

public protocol IBindableIterator : WinRTInterface {
    func moveNext() throws -> Bool
    var current: Any! { get }
    var hasCurrent: Bool { get }
}

extension IBindableIterator {
    public func makeAbi() -> test_component.IInspectable {
        let wrapper = __ABI_Windows_UI_Xaml_Interop.IBindableIteratorWrapper(self)
        let _abi = try! wrapper?.toABI { $0 }
        return .init(_abi!)
    }
}
public typealias AnyIBindableIterator = any IBindableIterator

public protocol IBindableVector : IBindableIterable {
    func getAt(_ index: UInt32) throws -> Any!
    func getView() throws -> test_component.AnyIBindableVectorView!
    func indexOf(_ value: Any!, _ index: inout UInt32) throws -> Bool
    func setAt(_ index: UInt32, _ value: Any!) throws
    func insertAt(_ index: UInt32, _ value: Any!) throws
    func removeAt(_ index: UInt32) throws
    func append(_ value: Any!) throws
    func removeAtEnd() throws
    func clear() throws
    var size: UInt32 { get }
}

extension IBindableVector {
    public func makeAbi() -> test_component.IInspectable {
        let wrapper = __ABI_Windows_UI_Xaml_Interop.IBindableVectorWrapper(self)
        let _abi = try! wrapper?.toABI { $0 }
        return .init(_abi!)
    }
}
public typealias AnyIBindableVector = any IBindableVector

public protocol IBindableVectorView : IBindableIterable {
    func getAt(_ index: UInt32) throws -> Any!
    func indexOf(_ value: Any!, _ index: inout UInt32) throws -> Bool
    var size: UInt32 { get }
}

extension IBindableVectorView {
    public func makeAbi() -> test_component.IInspectable {
        let wrapper = __ABI_Windows_UI_Xaml_Interop.IBindableVectorViewWrapper(self)
        let _abi = try! wrapper?.toABI { $0 }
        return .init(_abi!)
    }
}
public typealias AnyIBindableVectorView = any IBindableVectorView

public protocol INotifyCollectionChanged : WinRTInterface {
    var collectionChanged: Event<NotifyCollectionChangedEventHandler> { get }
}

public extension EventInvoker where Handler == NotifyCollectionChangedEventHandler {
    func callAsFunction(_ sender: Any!, _ e: NotifyCollectionChangedEventArgs!) {
        for handler in handlers {
            handler(sender, e)
        }
    }
}

extension INotifyCollectionChanged {
    public func makeAbi() -> test_component.IInspectable {
        let wrapper = __ABI_Windows_UI_Xaml_Interop.INotifyCollectionChangedWrapper(self)
        let _abi = try! wrapper?.toABI { $0 }
        return .init(_abi!)
    }
}
public typealias AnyINotifyCollectionChanged = any INotifyCollectionChanged

extension test_component.NotifyCollectionChangedAction {
    public static var add : test_component.NotifyCollectionChangedAction {
        __x_ABI_CWindows_CUI_CXaml_CInterop_CNotifyCollectionChangedAction_Add
    }
    public static var remove : test_component.NotifyCollectionChangedAction {
        __x_ABI_CWindows_CUI_CXaml_CInterop_CNotifyCollectionChangedAction_Remove
    }
    public static var replace : test_component.NotifyCollectionChangedAction {
        __x_ABI_CWindows_CUI_CXaml_CInterop_CNotifyCollectionChangedAction_Replace
    }
    public static var move : test_component.NotifyCollectionChangedAction {
        __x_ABI_CWindows_CUI_CXaml_CInterop_CNotifyCollectionChangedAction_Move
    }
    public static var reset : test_component.NotifyCollectionChangedAction {
        __x_ABI_CWindows_CUI_CXaml_CInterop_CNotifyCollectionChangedAction_Reset
    }
}
extension test_component.NotifyCollectionChangedAction: Hashable, Codable {}


// WARNING: Please don't edit this file. It was generated by Swift/WinRT v0.0.1
// swiftlint:disable all
import Foundation
import Ctest_component

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.pathio)
public final class PathIO {
    private static let _IPathIOStatics: __ABI_Windows_Storage.IPathIOStatics = try! RoGetActivationFactory("Windows.Storage.PathIO")
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.pathio.readtextasync)
    public static func readTextAsync(_ absolutePath: String) throws -> AnyIAsyncOperation<String>! {
        return try _IPathIOStatics.ReadTextAsync(absolutePath)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.pathio.readtextasync)
    public static func readTextAsync(_ absolutePath: String, _ encoding: test_component.UnicodeEncoding) throws -> AnyIAsyncOperation<String>! {
        return try _IPathIOStatics.ReadTextWithEncodingAsync(absolutePath, encoding)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.pathio.writetextasync)
    public static func writeTextAsync(_ absolutePath: String, _ contents: String) throws -> test_component.AnyIAsyncAction! {
        return try _IPathIOStatics.WriteTextAsync(absolutePath, contents)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.pathio.writetextasync)
    public static func writeTextAsync(_ absolutePath: String, _ contents: String, _ encoding: test_component.UnicodeEncoding) throws -> test_component.AnyIAsyncAction! {
        return try _IPathIOStatics.WriteTextWithEncodingAsync(absolutePath, contents, encoding)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.pathio.appendtextasync)
    public static func appendTextAsync(_ absolutePath: String, _ contents: String) throws -> test_component.AnyIAsyncAction! {
        return try _IPathIOStatics.AppendTextAsync(absolutePath, contents)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.pathio.appendtextasync)
    public static func appendTextAsync(_ absolutePath: String, _ contents: String, _ encoding: test_component.UnicodeEncoding) throws -> test_component.AnyIAsyncAction! {
        return try _IPathIOStatics.AppendTextWithEncodingAsync(absolutePath, contents, encoding)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.pathio.readlinesasync)
    public static func readLinesAsync(_ absolutePath: String) throws -> AnyIAsyncOperation<AnyIVector<String>?>! {
        return try _IPathIOStatics.ReadLinesAsync(absolutePath)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.pathio.readlinesasync)
    public static func readLinesAsync(_ absolutePath: String, _ encoding: test_component.UnicodeEncoding) throws -> AnyIAsyncOperation<AnyIVector<String>?>! {
        return try _IPathIOStatics.ReadLinesWithEncodingAsync(absolutePath, encoding)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.pathio.writelinesasync)
    public static func writeLinesAsync(_ absolutePath: String, _ lines: AnyIIterable<String>!) throws -> test_component.AnyIAsyncAction! {
        return try _IPathIOStatics.WriteLinesAsync(absolutePath, lines)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.pathio.writelinesasync)
    public static func writeLinesAsync(_ absolutePath: String, _ lines: AnyIIterable<String>!, _ encoding: test_component.UnicodeEncoding) throws -> test_component.AnyIAsyncAction! {
        return try _IPathIOStatics.WriteLinesWithEncodingAsync(absolutePath, lines, encoding)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.pathio.appendlinesasync)
    public static func appendLinesAsync(_ absolutePath: String, _ lines: AnyIIterable<String>!) throws -> test_component.AnyIAsyncAction! {
        return try _IPathIOStatics.AppendLinesAsync(absolutePath, lines)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.pathio.appendlinesasync)
    public static func appendLinesAsync(_ absolutePath: String, _ lines: AnyIIterable<String>!, _ encoding: test_component.UnicodeEncoding) throws -> test_component.AnyIAsyncAction! {
        return try _IPathIOStatics.AppendLinesWithEncodingAsync(absolutePath, lines, encoding)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.pathio.readbufferasync)
    public static func readBufferAsync(_ absolutePath: String) throws -> AnyIAsyncOperation<test_component.AnyIBuffer?>! {
        return try _IPathIOStatics.ReadBufferAsync(absolutePath)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.pathio.writebufferasync)
    public static func writeBufferAsync(_ absolutePath: String, _ buffer: test_component.AnyIBuffer!) throws -> test_component.AnyIAsyncAction! {
        return try _IPathIOStatics.WriteBufferAsync(absolutePath, buffer)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.pathio.writebytesasync)
    public static func writeBytesAsync(_ absolutePath: String, _ buffer: [UInt8]) throws -> test_component.AnyIAsyncAction! {
        return try _IPathIOStatics.WriteBytesAsync(absolutePath, buffer)
    }

}


// MARK: - Internals

@_spi(WinRTInternal)
extension __IMPL_Windows_Storage {
}
@_spi(WinRTInternal)
extension __ABI_Windows_Storage {
    private static let IID___x_ABI_CWindows_CStorage_CIPathIOStatics: test_component.IID = .init(
        Data1: 0x0F2F3758, Data2: 0x8EC7, Data3: 0x4381, Data4: ( 0x92,0x2B,0x8F,0x6C,0x07,0xD2,0x88,0xF3 ) // 0F2F3758-8EC7-4381-922B-8F6C07D288F3
    ) 
    public class IPathIOStatics: test_component.IInspectable {
        override public class var IID: test_component.IID { IID___x_ABI_CWindows_CStorage_CIPathIOStatics }

        public func ReadTextAsync(_ absolutePath: String) throws -> test_component.AnyIAsyncOperation<String>? {
            let (textOperation) = try ComPtrs.initialize { textOperationAbi in
                let _absolutePath = try! HString(absolutePath)
                _ = try perform(as: __x_ABI_CWindows_CStorage_CIPathIOStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.ReadTextAsync(pThis, _absolutePath.get(), &textOperationAbi))
                }
            }
            return test_component.__x_ABI_C__FIAsyncOperation_1_HSTRINGWrapper.unwrapFrom(abi: textOperation)
        }

        public func ReadTextWithEncodingAsync(_ absolutePath: String, _ encoding: test_component.UnicodeEncoding) throws -> test_component.AnyIAsyncOperation<String>? {
            let (textOperation) = try ComPtrs.initialize { textOperationAbi in
                let _absolutePath = try! HString(absolutePath)
                _ = try perform(as: __x_ABI_CWindows_CStorage_CIPathIOStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.ReadTextWithEncodingAsync(pThis, _absolutePath.get(), encoding, &textOperationAbi))
                }
            }
            return test_component.__x_ABI_C__FIAsyncOperation_1_HSTRINGWrapper.unwrapFrom(abi: textOperation)
        }

        public func WriteTextAsync(_ absolutePath: String, _ contents: String) throws -> test_component.AnyIAsyncAction? {
            let (textOperation) = try ComPtrs.initialize { textOperationAbi in
                let _absolutePath = try! HString(absolutePath)
                let _contents = try! HString(contents)
                _ = try perform(as: __x_ABI_CWindows_CStorage_CIPathIOStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.WriteTextAsync(pThis, _absolutePath.get(), _contents.get(), &textOperationAbi))
                }
            }
            return __ABI_Windows_Foundation.IAsyncActionWrapper.unwrapFrom(abi: textOperation)
        }

        public func WriteTextWithEncodingAsync(_ absolutePath: String, _ contents: String, _ encoding: test_component.UnicodeEncoding) throws -> test_component.AnyIAsyncAction? {
            let (textOperation) = try ComPtrs.initialize { textOperationAbi in
                let _absolutePath = try! HString(absolutePath)
                let _contents = try! HString(contents)
                _ = try perform(as: __x_ABI_CWindows_CStorage_CIPathIOStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.WriteTextWithEncodingAsync(pThis, _absolutePath.get(), _contents.get(), encoding, &textOperationAbi))
                }
            }
            return __ABI_Windows_Foundation.IAsyncActionWrapper.unwrapFrom(abi: textOperation)
        }

        public func AppendTextAsync(_ absolutePath: String, _ contents: String) throws -> test_component.AnyIAsyncAction? {
            let (textOperation) = try ComPtrs.initialize { textOperationAbi in
                let _absolutePath = try! HString(absolutePath)
                let _contents = try! HString(contents)
                _ = try perform(as: __x_ABI_CWindows_CStorage_CIPathIOStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.AppendTextAsync(pThis, _absolutePath.get(), _contents.get(), &textOperationAbi))
                }
            }
            return __ABI_Windows_Foundation.IAsyncActionWrapper.unwrapFrom(abi: textOperation)
        }

        public func AppendTextWithEncodingAsync(_ absolutePath: String, _ contents: String, _ encoding: test_component.UnicodeEncoding) throws -> test_component.AnyIAsyncAction? {
            let (textOperation) = try ComPtrs.initialize { textOperationAbi in
                let _absolutePath = try! HString(absolutePath)
                let _contents = try! HString(contents)
                _ = try perform(as: __x_ABI_CWindows_CStorage_CIPathIOStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.AppendTextWithEncodingAsync(pThis, _absolutePath.get(), _contents.get(), encoding, &textOperationAbi))
                }
            }
            return __ABI_Windows_Foundation.IAsyncActionWrapper.unwrapFrom(abi: textOperation)
        }

        public func ReadLinesAsync(_ absolutePath: String) throws -> test_component.AnyIAsyncOperation<test_component.AnyIVector<String>?>? {
            let (linesOperation) = try ComPtrs.initialize { linesOperationAbi in
                let _absolutePath = try! HString(absolutePath)
                _ = try perform(as: __x_ABI_CWindows_CStorage_CIPathIOStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.ReadLinesAsync(pThis, _absolutePath.get(), &linesOperationAbi))
                }
            }
            return test_component.__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVector_1_HSTRINGWrapper.unwrapFrom(abi: linesOperation)
        }

        public func ReadLinesWithEncodingAsync(_ absolutePath: String, _ encoding: test_component.UnicodeEncoding) throws -> test_component.AnyIAsyncOperation<test_component.AnyIVector<String>?>? {
            let (linesOperation) = try ComPtrs.initialize { linesOperationAbi in
                let _absolutePath = try! HString(absolutePath)
                _ = try perform(as: __x_ABI_CWindows_CStorage_CIPathIOStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.ReadLinesWithEncodingAsync(pThis, _absolutePath.get(), encoding, &linesOperationAbi))
                }
            }
            return test_component.__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVector_1_HSTRINGWrapper.unwrapFrom(abi: linesOperation)
        }

        public func WriteLinesAsync(_ absolutePath: String, _ lines: test_component.AnyIIterable<String>?) throws -> test_component.AnyIAsyncAction? {
            let (operation) = try ComPtrs.initialize { operationAbi in
                let _absolutePath = try! HString(absolutePath)
                let linesWrapper = test_component.__x_ABI_C__FIIterable_1_HSTRINGWrapper(lines)
                let _lines = try! linesWrapper?.toABI { $0 }
                _ = try perform(as: __x_ABI_CWindows_CStorage_CIPathIOStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.WriteLinesAsync(pThis, _absolutePath.get(), _lines, &operationAbi))
                }
            }
            return __ABI_Windows_Foundation.IAsyncActionWrapper.unwrapFrom(abi: operation)
        }

        public func WriteLinesWithEncodingAsync(_ absolutePath: String, _ lines: test_component.AnyIIterable<String>?, _ encoding: test_component.UnicodeEncoding) throws -> test_component.AnyIAsyncAction? {
            let (operation) = try ComPtrs.initialize { operationAbi in
                let _absolutePath = try! HString(absolutePath)
                let linesWrapper = test_component.__x_ABI_C__FIIterable_1_HSTRINGWrapper(lines)
                let _lines = try! linesWrapper?.toABI { $0 }
                _ = try perform(as: __x_ABI_CWindows_CStorage_CIPathIOStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.WriteLinesWithEncodingAsync(pThis, _absolutePath.get(), _lines, encoding, &operationAbi))
                }
            }
            return __ABI_Windows_Foundation.IAsyncActionWrapper.unwrapFrom(abi: operation)
        }

        public func AppendLinesAsync(_ absolutePath: String, _ lines: test_component.AnyIIterable<String>?) throws -> test_component.AnyIAsyncAction? {
            let (operation) = try ComPtrs.initialize { operationAbi in
                let _absolutePath = try! HString(absolutePath)
                let linesWrapper = test_component.__x_ABI_C__FIIterable_1_HSTRINGWrapper(lines)
                let _lines = try! linesWrapper?.toABI { $0 }
                _ = try perform(as: __x_ABI_CWindows_CStorage_CIPathIOStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.AppendLinesAsync(pThis, _absolutePath.get(), _lines, &operationAbi))
                }
            }
            return __ABI_Windows_Foundation.IAsyncActionWrapper.unwrapFrom(abi: operation)
        }

        public func AppendLinesWithEncodingAsync(_ absolutePath: String, _ lines: test_component.AnyIIterable<String>?, _ encoding: test_component.UnicodeEncoding) throws -> test_component.AnyIAsyncAction? {
            let (operation) = try ComPtrs.initialize { operationAbi in
                let _absolutePath = try! HString(absolutePath)
                let linesWrapper = test_component.__x_ABI_C__FIIterable_1_HSTRINGWrapper(lines)
                let _lines = try! linesWrapper?.toABI { $0 }
                _ = try perform(as: __x_ABI_CWindows_CStorage_CIPathIOStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.AppendLinesWithEncodingAsync(pThis, _absolutePath.get(), _lines, encoding, &operationAbi))
                }
            }
            return __ABI_Windows_Foundation.IAsyncActionWrapper.unwrapFrom(abi: operation)
        }

        public func ReadBufferAsync(_ absolutePath: String) throws -> test_component.AnyIAsyncOperation<test_component.AnyIBuffer?>? {
            let (operation) = try ComPtrs.initialize { operationAbi in
                let _absolutePath = try! HString(absolutePath)
                _ = try perform(as: __x_ABI_CWindows_CStorage_CIPathIOStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.ReadBufferAsync(pThis, _absolutePath.get(), &operationAbi))
                }
            }
            return test_component.__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStreams__CIBufferWrapper.unwrapFrom(abi: operation)
        }

        public func WriteBufferAsync(_ absolutePath: String, _ buffer: test_component.AnyIBuffer?) throws -> test_component.AnyIAsyncAction? {
            let (operation) = try ComPtrs.initialize { operationAbi in
                let _absolutePath = try! HString(absolutePath)
                let bufferWrapper = __ABI_Windows_Storage_Streams.IBufferWrapper(buffer)
                let _buffer = try! bufferWrapper?.toABI { $0 }
                _ = try perform(as: __x_ABI_CWindows_CStorage_CIPathIOStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.WriteBufferAsync(pThis, _absolutePath.get(), _buffer, &operationAbi))
                }
            }
            return __ABI_Windows_Foundation.IAsyncActionWrapper.unwrapFrom(abi: operation)
        }

        public func WriteBytesAsync(_ absolutePath: String, _ buffer: [UInt8]) throws -> test_component.AnyIAsyncAction? {
            let (operation) = try ComPtrs.initialize { operationAbi in
                let _absolutePath = try! HString(absolutePath)
                try buffer.toABI { _buffer in
                    _ = try perform(as: __x_ABI_CWindows_CStorage_CIPathIOStatics.self) { pThis in
                        try CHECKED(pThis.pointee.lpVtbl.pointee.WriteBytesAsync(pThis, _absolutePath.get(), _buffer.count, _buffer.start, &operationAbi))
                    }
                }
            }
            return __ABI_Windows_Foundation.IAsyncActionWrapper.unwrapFrom(abi: operation)
        }

    }

}

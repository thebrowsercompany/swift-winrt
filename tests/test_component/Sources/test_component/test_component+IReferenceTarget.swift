// WARNING: Please don't edit this file. It was generated by Swift/WinRT v0.0.1
// swiftlint:disable all
import Foundation
@_spi(WinRTInternal) @_spi(WinRTImplements) import WindowsFoundation
import CWinRT

public protocol IReferenceTarget : WinRTInterface {
    func method() throws
}

extension IReferenceTarget {
    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        switch iid {
            case __ABI_test_component.IReferenceTargetWrapper.IID:
                let wrapper = __ABI_test_component.IReferenceTargetWrapper(self)
                return wrapper!.queryInterface(iid)
            default: return nil
        }
    }
}
public typealias AnyIReferenceTarget = any IReferenceTarget

// MARK: - IReferenceTarget Internals

@_spi(WinRTInternal)
extension __IMPL_test_component {
    public enum IReferenceTargetBridge : AbiInterfaceBridge {
        public typealias CABI = __x_ABI_Ctest__component_CIReferenceTarget
        public typealias SwiftABI = __ABI_test_component.IReferenceTarget
        public typealias SwiftProjection = AnyIReferenceTarget
        public static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
            guard let abi = abi else { return nil }
            return IReferenceTargetImpl(abi)
        }

        public static func makeAbi() -> CABI {
            let vtblPtr = withUnsafeMutablePointer(to: &__ABI_test_component.IReferenceTargetVTable) { $0 }
            return .init(lpVtbl: vtblPtr)
        }
    }

    fileprivate class IReferenceTargetImpl: IReferenceTarget, WinRTAbiImpl {
        fileprivate typealias Bridge = IReferenceTargetBridge
        fileprivate let _default: Bridge.SwiftABI
        fileprivate var thisPtr: WindowsFoundation.IInspectable { _default }
        fileprivate init(_ fromAbi: ComPtr<Bridge.CABI>) {
            _default = Bridge.SwiftABI(fromAbi)
        }

        fileprivate func method() throws {
            try _default.Method()
        }

    }

}
@_spi(WinRTInternal)
extension __ABI_test_component {
    private static let IID___x_ABI_Ctest__component_CIReferenceTarget: WindowsFoundation.IID = .init(
        Data1: 0x128E6AAA, Data2: 0xF772, Data3: 0x5A6F, Data4: ( 0x85,0x8B,0x3B,0x69,0x04,0x18,0xC8,0x73 ) // 128E6AAA-F772-5A6F-858B-3B690418C873
    ) 

    public class IReferenceTarget: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_Ctest__component_CIReferenceTarget }

        open func Method() throws {
            _ = try perform(as: __x_ABI_Ctest__component_CIReferenceTarget.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Method(pThis))
            }
        }

    }

    internal static var IReferenceTargetVTable: __x_ABI_Ctest__component_CIReferenceTargetVtbl = .init(
        QueryInterface: { IReferenceTargetWrapper.queryInterface($0, $1, $2) },
        AddRef: { IReferenceTargetWrapper.addRef($0) },
        Release: { IReferenceTargetWrapper.release($0) },
        GetIids: {
            let size = MemoryLayout<WindowsFoundation.IID>.size
            let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: WindowsFoundation.IID.self)
            iids[0] = IUnknown.IID
            iids[1] = IInspectable.IID
            iids[2] = __ABI_test_component.IReferenceTargetWrapper.IID
            $1!.pointee = 3
            $2!.pointee = iids
            return S_OK
        },

        GetRuntimeClassName: {
            _ = $0
            let hstring = try! HString("test_component.IReferenceTarget").detach()
            $1!.pointee = hstring
            return S_OK
        },

        GetTrustLevel: {
            _ = $0
            $1!.pointee = TrustLevel(rawValue: 0)
            return S_OK
        },

        Method: {
            do {
                guard let __unwrapped__instance = IReferenceTargetWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                try __unwrapped__instance.method()
                return S_OK
            } catch { return failWith(error: error) }
        }
    )

    public typealias IReferenceTargetWrapper = InterfaceWrapperBase<__IMPL_test_component.IReferenceTargetBridge>
}
@_spi(WinRTInternal)
public class IReferenceTargetMaker: MakeFromAbi {
    public typealias SwiftType = AnyIReferenceTarget
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        let swiftAbi: __ABI_test_component.IReferenceTarget = try! abi.QueryInterface()
        return __IMPL_test_component.IReferenceTargetBridge.from(abi: RawPointer(swiftAbi))!
    }
}

// WARNING: Please don't edit this file. It was generated by Swift/WinRT v0.0.1
// swiftlint:disable all
import Ctest_component

public enum __IMPL_Windows_Foundation {
    public class IAsyncActionImpl : IAsyncAction, WinRTAbiBridge {
        public typealias CABI = __x_ABI_CWindows_CFoundation_CIAsyncAction
        public typealias SwiftABI = __ABI_Windows_Foundation.IAsyncAction
        public typealias SwiftProjection = AnyIAsyncAction
        private (set) public var _default: SwiftABI
        public var thisPtr: test_component.IInspectable { _default }
        public static func from(abi: UnsafeMutablePointer<CABI>?) -> SwiftProjection? {
            guard let abi = abi else { return nil }
            return IAsyncActionImpl(abi)
        }
        public init(_ fromAbi: UnsafeMutablePointer<CABI>) {
            _default = SwiftABI(fromAbi)
        }

        public static func makeAbi() -> CABI {
            let vtblPtr = withUnsafeMutablePointer(to: &__ABI_Windows_Foundation.IAsyncActionVTable) { $0 }
            return .init(lpVtbl: vtblPtr)
        }
        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncaction.getresults)
        public func getResults() throws {
            try _default.GetResultsImpl()
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncaction.completed)
        public var completed : AsyncActionCompletedHandler! {
            get {
                let handler = try! _default.get_CompletedImpl()
                return __ABI_Windows_Foundation.AsyncActionCompletedHandlerWrapper.unwrapFrom(abi: handler)
            }

            set {
                let wrapper = __ABI_Windows_Foundation.AsyncActionCompletedHandlerWrapper(newValue)
                let _newValue = try! wrapper?.toABI { $0 }
                try! _default.put_CompletedImpl(_newValue)
            }
        }

        internal lazy var _IAsyncInfo: __ABI_Windows_Foundation.IAsyncInfo = try! _default.QueryInterface()
        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncaction.cancel)
        public func cancel() throws {
            try _IAsyncInfo.CancelImpl()
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncaction.close)
        public func close() throws {
            try _IAsyncInfo.CloseImpl()
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncaction.errorcode)
        public var errorCode : HRESULT {
            get {
                let result = try! _IAsyncInfo.get_ErrorCodeImpl()
                return result
            }

        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncaction.id)
        public var id : UInt32 {
            get {
                let result = try! _IAsyncInfo.get_IdImpl()
                return result
            }

        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncaction.status)
        public var status : AsyncStatus {
            get {
                let result = try! _IAsyncInfo.get_StatusImpl()
                return result
            }

        }

    }

    public class IAsyncInfoImpl : IAsyncInfo, WinRTAbiBridge {
        public typealias CABI = __x_ABI_CWindows_CFoundation_CIAsyncInfo
        public typealias SwiftABI = __ABI_Windows_Foundation.IAsyncInfo
        public typealias SwiftProjection = AnyIAsyncInfo
        private (set) public var _default: SwiftABI
        public var thisPtr: test_component.IInspectable { _default }
        public static func from(abi: UnsafeMutablePointer<CABI>?) -> SwiftProjection? {
            guard let abi = abi else { return nil }
            return IAsyncInfoImpl(abi)
        }
        public init(_ fromAbi: UnsafeMutablePointer<CABI>) {
            _default = SwiftABI(fromAbi)
        }

        public static func makeAbi() -> CABI {
            let vtblPtr = withUnsafeMutablePointer(to: &__ABI_Windows_Foundation.IAsyncInfoVTable) { $0 }
            return .init(lpVtbl: vtblPtr)
        }
        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncinfo.cancel)
        public func cancel() throws {
            try _default.CancelImpl()
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncinfo.close)
        public func close() throws {
            try _default.CloseImpl()
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncinfo.errorcode)
        public var errorCode : HRESULT {
            get {
                let result = try! _default.get_ErrorCodeImpl()
                return result
            }

        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncinfo.id)
        public var id : UInt32 {
            get {
                let result = try! _default.get_IdImpl()
                return result
            }

        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncinfo.status)
        public var status : AsyncStatus {
            get {
                let result = try! _default.get_StatusImpl()
                return result
            }

        }

    }

    public class IClosableImpl : IClosable, WinRTAbiBridge {
        public typealias CABI = __x_ABI_CWindows_CFoundation_CIClosable
        public typealias SwiftABI = __ABI_Windows_Foundation.IClosable
        public typealias SwiftProjection = AnyIClosable
        private (set) public var _default: SwiftABI
        public var thisPtr: test_component.IInspectable { _default }
        public static func from(abi: UnsafeMutablePointer<CABI>?) -> SwiftProjection? {
            guard let abi = abi else { return nil }
            return IClosableImpl(abi)
        }
        public init(_ fromAbi: UnsafeMutablePointer<CABI>) {
            _default = SwiftABI(fromAbi)
        }

        public static func makeAbi() -> CABI {
            let vtblPtr = withUnsafeMutablePointer(to: &__ABI_Windows_Foundation.IClosableVTable) { $0 }
            return .init(lpVtbl: vtblPtr)
        }
        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iclosable.close)
        public func close() throws {
            try _default.CloseImpl()
        }

    }

    public class IPropertyValueImpl : IPropertyValue, IReference {
        public typealias T = Any
        var _value: Any
        var propertyType : PropertyType

        public init(value: Any) {
            _value = value
            if _value is Int32 {
                propertyType = .int32
            } else if _value is UInt8 {
                propertyType = .uint8
            } else if _value is Int16 {
                propertyType = .int16
            } else if _value is UInt32 {
                propertyType = .uint32
            } else if _value is Int64 {
                propertyType = .int64
            } else if _value is UInt64 {
                propertyType = .uint64
            } else if _value is Float {
                propertyType = .single
            } else if _value is Double {
                propertyType = .double
            } else if _value is Character {
                propertyType = .char16
            } else if _value is Bool {
                propertyType = .boolean
            } else if _value is DateTime {
                propertyType = .dateTime
            } else if _value is TimeSpan {
                propertyType = .timeSpan
            } else if _value is IWinRTObject {
                propertyType = .inspectable
            } else if _value is IInspectable {
                propertyType = .inspectable
            } else {
                propertyType = .otherType
            }
        }

        public var type: PropertyType { propertyType }
        public var isNumericScalar: Bool {
            switch propertyType {
                case .int16, .int32, .int64, .uint8, .uint16, .uint32, .uint64, .single, .double: return true
                default: return false
            }
        }

        public var value: Any { _value }

        public func getUInt8() -> UInt8 { _value as! UInt8 }
        public func getInt16() -> Int16 { _value as! Int16 }
        public func getUInt16() -> UInt16 { _value as! UInt16 }
        public func getInt32() -> Int32 { _value as! Int32 }
        public func getUInt32() -> UInt32 { _value as! UInt32 }
        public func getInt64() -> Int64 { _value as! Int64 }
        public func getUInt64() -> UInt64 { _value as! UInt64 }
        public func getSingle() -> Float { _value as! Float }
        public func getDouble() -> Double { _value as! Double }
        public func getChar16() -> Character { _value as! Character }
        public func getBoolean() -> Bool { _value as! Bool }
        public func getString() -> String { _value as! String }
        public func getGuid() -> test_component.GUID { _value as! test_component.GUID }
        public func getDateTime() -> DateTime { _value as! DateTime }
        public func getTimeSpan() -> TimeSpan { _value as! TimeSpan }
        public func getPoint() -> Point { _value as! Point }
        public func getSize() -> Size { _value as! Size }
        public func getRect() -> Rect { _value as! Rect }
        
        public func queryInterface(_ iid: test_component.IID) -> IUnknownRef? {
            guard iid == __ABI_Windows_Foundation.IPropertyValueWrapper.IID else { return nil }
            guard let thisAsIPropValue = __ABI_Windows_Foundation.IPropertyValueWrapper(self) else { fatalError("creating non-nil wrapper shouldn't fail") }
            return thisAsIPropValue.queryInterface(iid)
        }

    }

    public class IStringableImpl : IStringable, WinRTAbiBridge {
        public typealias CABI = __x_ABI_CWindows_CFoundation_CIStringable
        public typealias SwiftABI = __ABI_Windows_Foundation.IStringable
        public typealias SwiftProjection = AnyIStringable
        private (set) public var _default: SwiftABI
        public var thisPtr: test_component.IInspectable { _default }
        public static func from(abi: UnsafeMutablePointer<CABI>?) -> SwiftProjection? {
            guard let abi = abi else { return nil }
            return IStringableImpl(abi)
        }
        public init(_ fromAbi: UnsafeMutablePointer<CABI>) {
            _default = SwiftABI(fromAbi)
        }

        public static func makeAbi() -> CABI {
            let vtblPtr = withUnsafeMutablePointer(to: &__ABI_Windows_Foundation.IStringableVTable) { $0 }
            return .init(lpVtbl: vtblPtr)
        }
        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.istringable.tostring)
        public func toString() throws -> String {
            let value = try _default.ToStringImpl()
            return .init(from: value)
        }

    }

    public class AsyncActionCompletedHandlerImpl : WinRTDelegateBridge {
        public typealias Handler = AsyncActionCompletedHandler
        public typealias CABI = __x_ABI_CWindows_CFoundation_CIAsyncActionCompletedHandler
        public typealias SwiftABI = __ABI_Windows_Foundation.AsyncActionCompletedHandler

        public static func from(abi: UnsafeMutablePointer<CABI>?) -> SwiftProjection? {
            guard let abi = abi else { return nil }
            let _default = SwiftABI(abi)
            let handler: Handler = { (asyncInfo, asyncStatus) in
                let asyncInfoWrapper = __ABI_Windows_Foundation.IAsyncActionWrapper(asyncInfo)
                let _asyncInfo = try! asyncInfoWrapper?.toABI { $0 }
                try! _default.InvokeImpl(_asyncInfo, asyncStatus)
            }
            return handler
        }
    }
    public class DeferralCompletedHandlerImpl : WinRTDelegateBridge {
        public typealias Handler = DeferralCompletedHandler
        public typealias CABI = __x_ABI_CWindows_CFoundation_CIDeferralCompletedHandler
        public typealias SwiftABI = __ABI_Windows_Foundation.DeferralCompletedHandler

        public static func from(abi: UnsafeMutablePointer<CABI>?) -> SwiftProjection? {
            guard let abi = abi else { return nil }
            let _default = SwiftABI(abi)
            let handler: Handler = { () in
                try! _default.InvokeImpl()
            }
            return handler
        }
    }
}

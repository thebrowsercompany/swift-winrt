// WARNING: Please don't edit this file. It was generated by Swift/WinRT v0.0.1
// swiftlint:disable all
import Foundation
import Ctest_component

public typealias VoidToVoidDelegate = () throws -> ()

// MARK: - Internals

@_spi(WinRTInternal)
extension __IMPL_test_component {
    public class VoidToVoidDelegateBridge : WinRTDelegateBridge {
        public typealias Handler = VoidToVoidDelegate
        public typealias CABI = __x_ABI_Ctest__component_CIVoidToVoidDelegate
        public typealias SwiftABI = __ABI_test_component.VoidToVoidDelegate

        public static func from(abi: ComPtr<CABI>?) -> Handler? {
            guard let abi = abi else { return nil }
            let _default = SwiftABI(abi)
            let handler: Handler = { () in
                try _default.Invoke()
            }
            return handler
        }
    }
}
@_spi(WinRTInternal)
extension __ABI_test_component {
    private static let IID___x_ABI_Ctest__component_CIVoidToVoidDelegate: test_component.IID = .init(
        Data1: 0x5ED7E415, Data2: 0x84E7, Data3: 0x5E4C, Data4: ( 0x8F,0x68,0xD4,0x65,0x3C,0x39,0xEE,0x46 ) // 5ED7E415-84E7-5E4C-8F68-D4653C39EE46
    ) 
    public class VoidToVoidDelegate: test_component.IUnknown {
        override public class var IID: test_component.IID { IID___x_ABI_Ctest__component_CIVoidToVoidDelegate }

        open func Invoke() throws {
            _ = try perform(as: __x_ABI_Ctest__component_CIVoidToVoidDelegate.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Invoke(pThis))
            }
        }

    }


    typealias VoidToVoidDelegateWrapper = InterfaceWrapperBase<__IMPL_test_component.VoidToVoidDelegateBridge>
    internal static var VoidToVoidDelegateVTable: __x_ABI_Ctest__component_CIVoidToVoidDelegateVtbl = .init(
        QueryInterface: { VoidToVoidDelegateWrapper.queryInterface($0, $1, $2) },
        AddRef: { VoidToVoidDelegateWrapper.addRef($0) },
        Release: { VoidToVoidDelegateWrapper.release($0) },
        Invoke: {
            do {
                guard let __unwrapped__instance = VoidToVoidDelegateWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                try __unwrapped__instance()
                return S_OK
            } catch { return failWith(error: error) }
        }
    )
}
@_spi(WinRTInternal)
public extension WinRTDelegateBridge where CABI == __x_ABI_Ctest__component_CIVoidToVoidDelegate {
    static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__ABI_test_component.VoidToVoidDelegateVTable) { $0 }
        return .init(lpVtbl:vtblPtr)
    }
}


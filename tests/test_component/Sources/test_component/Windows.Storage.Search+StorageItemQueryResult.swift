// WARNING: Please don't edit this file. It was generated by Swift/WinRT v0.0.1
// swiftlint:disable all
import Foundation
import Ctest_component

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.search.storageitemqueryresult)
public final class StorageItemQueryResult : WinRTClass, IStorageQueryResultBase {
    private typealias SwiftABI = __ABI_Windows_Storage_Search.IStorageItemQueryResult
    private typealias CABI = __x_ABI_CWindows_CStorage_CSearch_CIStorageItemQueryResult
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: test_component.IInspectable) {
        super.init(fromAbi)
    }

    override public func queryInterface(_ iid: test_component.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private lazy var _IStorageQueryResultBase: __ABI_Windows_Storage_Search.IStorageQueryResultBase! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.search.storageitemqueryresult.getitemcountasync)
    public func getItemCountAsync() throws -> AnyIAsyncOperation<UInt32>! {
        try _IStorageQueryResultBase.GetItemCountAsync()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.search.storageitemqueryresult.findstartindexasync)
    public func findStartIndexAsync(_ value: Any!) throws -> AnyIAsyncOperation<UInt32>! {
        try _IStorageQueryResultBase.FindStartIndexAsync(value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.search.storageitemqueryresult.getcurrentqueryoptions)
    public func getCurrentQueryOptions() throws -> QueryOptions! {
        try _IStorageQueryResultBase.GetCurrentQueryOptions()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.search.storageitemqueryresult.applynewqueryoptions)
    public func applyNewQueryOptions(_ newQueryOptions: QueryOptions!) throws {
        try _IStorageQueryResultBase.ApplyNewQueryOptions(newQueryOptions)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.search.storageitemqueryresult.folder)
    public var folder : test_component.StorageFolder! {
        get { try! _IStorageQueryResultBase.get_Folder() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.search.storageitemqueryresult.contentschanged)
    public lazy var contentsChanged : Event<TypedEventHandler<IStorageQueryResultBase?, Any?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._IStorageQueryResultBase else { return .init() }
          return try! this.add_ContentsChanged($0)
        },
        remove: { [weak self] in
         try? self?._IStorageQueryResultBase.remove_ContentsChanged($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.search.storageitemqueryresult.optionschanged)
    public lazy var optionsChanged : Event<TypedEventHandler<IStorageQueryResultBase?, Any?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._IStorageQueryResultBase else { return .init() }
          return try! this.add_OptionsChanged($0)
        },
        remove: { [weak self] in
         try? self?._IStorageQueryResultBase.remove_OptionsChanged($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.search.storageitemqueryresult.getitemsasync)
    public func getItemsAsync(_ startIndex: UInt32, _ maxNumberOfItems: UInt32) throws -> AnyIAsyncOperation<AnyIVectorView<test_component.AnyIStorageItem?>?>! {
        try _default.GetItemsAsync(startIndex, maxNumberOfItems)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.search.storageitemqueryresult.getitemsasync)
    public func getItemsAsync() throws -> AnyIAsyncOperation<AnyIVectorView<test_component.AnyIStorageItem?>?>! {
        try _default.GetItemsAsyncDefaultStartAndCount()
    }

    deinit {
        _IStorageQueryResultBase = nil
        _default = nil
    }
}


// MARK: - Internals

@_spi(WinRTInternal)
extension __IMPL_Windows_Storage_Search {
    public enum StorageItemQueryResultBridge: AbiBridge {
        public typealias SwiftProjection = StorageItemQueryResult
        public typealias CABI = __x_ABI_CWindows_CStorage_CSearch_CIStorageItemQueryResult
        public static func from(abi: ComPtr<__x_ABI_CWindows_CStorage_CSearch_CIStorageItemQueryResult>?) -> StorageItemQueryResult? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: test_component.IInspectable(abi))
        }
    }

}
@_spi(WinRTInternal)
public class StorageItemQueryResultMaker: MakeFromAbi {
    public typealias SwiftType = StorageItemQueryResult
    public static func from(abi: test_component.IInspectable) -> SwiftType {
        return StorageItemQueryResult(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
extension __ABI_Windows_Storage_Search {
    private static let IID___x_ABI_CWindows_CStorage_CSearch_CIStorageItemQueryResult: test_component.IID = .init(
        Data1: 0xE8948079, Data2: 0x9D58, Data3: 0x47B8, Data4: ( 0xB2,0xB2,0x41,0xB0,0x7F,0x47,0x95,0xF9 )
    ) // E8948079-9D58-47B8-B2B2-41B07F4795F9
    public class IStorageItemQueryResult: test_component.IInspectable {
        override public class var IID: test_component.IID { IID___x_ABI_CWindows_CStorage_CSearch_CIStorageItemQueryResult }

        public func GetItemsAsync(_ startIndex: UInt32, _ maxNumberOfItems: UInt32) throws -> test_component.AnyIAsyncOperation<test_component.AnyIVectorView<test_component.AnyIStorageItem?>?>? {
            let (operation) = try ComPtrs.initialize { operationAbi in
                _ = try perform(as: __x_ABI_CWindows_CStorage_CSearch_CIStorageItemQueryResult.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetItemsAsync(pThis, startIndex, maxNumberOfItems, &operationAbi))
                }
            }
            return test_component.__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CIStorageItemWrapper.unwrapFrom(abi: operation)
        }

        public func GetItemsAsyncDefaultStartAndCount() throws -> test_component.AnyIAsyncOperation<test_component.AnyIVectorView<test_component.AnyIStorageItem?>?>? {
            let (operation) = try ComPtrs.initialize { operationAbi in
                _ = try perform(as: __x_ABI_CWindows_CStorage_CSearch_CIStorageItemQueryResult.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetItemsAsyncDefaultStartAndCount(pThis, &operationAbi))
                }
            }
            return test_component.__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CIStorageItemWrapper.unwrapFrom(abi: operation)
        }

    }

}

// WARNING: Please don't edit this file. It was generated by Swift/WinRT v0.0.1
// swiftlint:disable all
import Foundation
import Ctest_component

// MARK: - BlittableStruct

public struct BlittableStruct: Hashable, Codable, Sendable {
    public var first: Int32 = 0
    public var second: Int32 = 0
    public init() {}
    public init(first: Int32, second: Int32) {
        self.first = first
        self.second = second
    }
}

// MARK: - BlittableStruct Internals

@_spi(WinRTInternal)
extension BlittableStruct: WinRTBridgeable {
    public typealias ABI = __x_ABI_Ctest__component_CBlittableStruct
    public static func from(abi: ABI) -> Self {
        .init(first: abi.First, second: abi.Second)
    }
    public func toABI() -> ABI {
        .from(swift: self)
    }
}

extension __x_ABI_Ctest__component_CBlittableStruct {
    public static func from(swift: test_component.BlittableStruct) -> __x_ABI_Ctest__component_CBlittableStruct {
        .init(First: swift.first, Second: swift.second)
    }
}
// MARK: - NonBlittableBoolStruct

public struct NonBlittableBoolStruct: Hashable, Codable, Sendable {
    public var first: Bool = false
    public var second: Bool = false
    public var third: Bool = false
    public var fourth: Bool = false
    public init() {}
    public init(first: Bool, second: Bool, third: Bool, fourth: Bool) {
        self.first = first
        self.second = second
        self.third = third
        self.fourth = fourth
    }
}

// MARK: - NonBlittableBoolStruct Internals

@_spi(WinRTInternal)
extension NonBlittableBoolStruct: WinRTBridgeable {
    public typealias ABI = __x_ABI_Ctest__component_CNonBlittableBoolStruct
    public static func from(abi: ABI) -> Self {
        .init(first: .init(from: abi.First), second: .init(from: abi.Second), third: .init(from: abi.Third), fourth: .init(from: abi.Fourth))
    }
    public func toABI() -> ABI {
        __ABI_test_component._ABI_NonBlittableBoolStruct(from: self).detach()
    }
}

@_spi(WinRTInternal)
extension __ABI_test_component {
    public class _ABI_NonBlittableBoolStruct {
        public var val: __x_ABI_Ctest__component_CNonBlittableBoolStruct = .init()
        public init() { }
        public init(from swift: test_component.NonBlittableBoolStruct) {
            val.First = .init(from: swift.first)
            val.Second = .init(from: swift.second)
            val.Third = .init(from: swift.third)
            val.Fourth = .init(from: swift.fourth)
        }

        public func detach() -> __x_ABI_Ctest__component_CNonBlittableBoolStruct {
            let result = val
            return result
        }

        deinit {
        }
    }
}
// MARK: - NonBlittableStruct

public struct NonBlittableStruct: Hashable, Codable, Sendable {
    public var first: String = ""
    public var second: String = ""
    public var third: Int32 = 0
    public var fourth: String = ""
    public init() {}
    public init(first: String, second: String, third: Int32, fourth: String) {
        self.first = first
        self.second = second
        self.third = third
        self.fourth = fourth
    }
}

// MARK: - NonBlittableStruct Internals

@_spi(WinRTInternal)
extension NonBlittableStruct: WinRTBridgeable {
    public typealias ABI = __x_ABI_Ctest__component_CNonBlittableStruct
    public static func from(abi: ABI) -> Self {
        .init(first: .init(from: abi.First), second: .init(from: abi.Second), third: abi.Third, fourth: .init(from: abi.Fourth))
    }
    public func toABI() -> ABI {
        __ABI_test_component._ABI_NonBlittableStruct(from: self).detach()
    }
}

@_spi(WinRTInternal)
extension __ABI_test_component {
    public class _ABI_NonBlittableStruct {
        public var val: __x_ABI_Ctest__component_CNonBlittableStruct = .init()
        public init() { }
        public init(from swift: test_component.NonBlittableStruct) {
            val.First = try! HString(swift.first).detach()
            val.Second = try! HString(swift.second).detach()
            val.Third = swift.third
            val.Fourth = try! HString(swift.fourth).detach()
        }

        public func detach() -> __x_ABI_Ctest__component_CNonBlittableStruct {
            let result = val
            val.First = nil
            val.Second = nil
            val.Fourth = nil
            return result
        }

        deinit {
            WindowsDeleteString(val.First)
            WindowsDeleteString(val.Second)
            WindowsDeleteString(val.Fourth)
        }
    }
}
// MARK: - SimpleEventArgs

public struct SimpleEventArgs: Hashable, Codable, Sendable {
    public var value: Int32 = 0
    public init() {}
    public init(value: Int32) {
        self.value = value
    }
}

// MARK: - SimpleEventArgs Internals

@_spi(WinRTInternal)
extension SimpleEventArgs: WinRTBridgeable {
    public typealias ABI = __x_ABI_Ctest__component_CSimpleEventArgs
    public static func from(abi: ABI) -> Self {
        .init(value: abi.Value)
    }
    public func toABI() -> ABI {
        .from(swift: self)
    }
}

extension __x_ABI_Ctest__component_CSimpleEventArgs {
    public static func from(swift: test_component.SimpleEventArgs) -> __x_ABI_Ctest__component_CSimpleEventArgs {
        .init(Value: swift.value)
    }
}
// MARK: - StructWithEnum

public struct StructWithEnum: Hashable, Codable, Sendable {
    public var names: SwiftifiableNames = .init(0)
    public init() {}
    public init(names: SwiftifiableNames) {
        self.names = names
    }
}

// MARK: - StructWithEnum Internals

@_spi(WinRTInternal)
extension StructWithEnum: WinRTBridgeable {
    public typealias ABI = __x_ABI_Ctest__component_CStructWithEnum
    public static func from(abi: ABI) -> Self {
        .init(names: abi.Names)
    }
    public func toABI() -> ABI {
        .from(swift: self)
    }
}

extension __x_ABI_Ctest__component_CStructWithEnum {
    public static func from(swift: test_component.StructWithEnum) -> __x_ABI_Ctest__component_CStructWithEnum {
        .init(Names: swift.names)
    }
}
// MARK: - StructWithIReference

public struct StructWithIReference: Hashable, Codable, Sendable {
    public var value1: Int32?
    public var value2: Int32?
    public init() {}
    public init(value1: Int32?, value2: Int32?) {
        self.value1 = value1
        self.value2 = value2
    }
}

// MARK: - StructWithIReference Internals

@_spi(WinRTInternal)
extension StructWithIReference: WinRTBridgeable {
    public typealias ABI = __x_ABI_Ctest__component_CStructWithIReference
    public static func from(abi: ABI) -> Self {
        .init(value1: test_component.__x_ABI_C__FIReference_1_intWrapper.unwrapFrom(abi: ComPtr(abi.Value1)), value2: test_component.__x_ABI_C__FIReference_1_intWrapper.unwrapFrom(abi: ComPtr(abi.Value2)))
    }
    public func toABI() -> ABI {
        __ABI_test_component._ABI_StructWithIReference(from: self).detach()
    }
}

@_spi(WinRTInternal)
extension __ABI_test_component {
    public class _ABI_StructWithIReference {
        public var val: __x_ABI_Ctest__component_CStructWithIReference = .init()
        public init() { }
        public init(from swift: test_component.StructWithIReference) {
            let Value1Wrapper = test_component.__x_ABI_C__FIReference_1_intWrapper(swift.value1)
            Value1Wrapper?.copyTo(&val.Value1)
            let Value2Wrapper = test_component.__x_ABI_C__FIReference_1_intWrapper(swift.value2)
            Value2Wrapper?.copyTo(&val.Value2)
        }

        public func detach() -> __x_ABI_Ctest__component_CStructWithIReference {
            let result = val
            val.Value1 = nil
            val.Value2 = nil
            return result
        }

        deinit {
            _ = val.Value1?.pointee.lpVtbl.pointee.Release(val.Value1)
            _ = val.Value2?.pointee.lpVtbl.pointee.Release(val.Value2)
        }
    }
}

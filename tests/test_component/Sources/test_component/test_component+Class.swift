// WARNING: Please don't edit this file. It was generated by Swift/WinRT v0.0.1
// swiftlint:disable all
import Foundation
import Ctest_component

public final class Class : WinRTClass, IBasic {
    private typealias SwiftABI = __ABI_test_component.IClass
    private typealias CABI = __x_ABI_Ctest__component_CIClass
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: test_component.IInspectable) {
        super.init(fromAbi)
    }

    override public func queryInterface(_ iid: test_component.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static let _defaultFactory: test_component.IActivationFactory = try! RoGetActivationFactory("test_component.Class")
    override public init() {
        super.init(try! Self._defaultFactory.ActivateInstance())
    }

    private static let _IClassFactory: __ABI_test_component.IClassFactory = try! RoGetActivationFactory("test_component.Class")
    public init(_ name: String) {
        super.init(try! Self._IClassFactory.CreateInstance(name))
    }

    public init(_ name: String, _ fruit: Fruit) {
        super.init(try! Self._IClassFactory.CreateInstance2(name, fruit))
    }

    public init(_ arg: AnyIMap<String, String>!, _ dummy1: Int32, _ dummy2: Int32, _ dummy3: Int32) {
        super.init(try! Self._IClassFactory.CreateInstance3(arg, dummy1, dummy2, dummy3))
    }

    public init(_ arg: AnyIMapView<String, String>!, _ dummy1: Int32, _ dummy2: Int32, _ dummy3: Int32, _ dummy4: Int32) {
        super.init(try! Self._IClassFactory.CreateInstance4(arg, dummy1, dummy2, dummy3, dummy4))
    }

    public init(_ arg: AnyIVector<String>!, _ dummy1: Int32, _ dummy2: Int32, _ dummy3: Int32, _ dummy4: Int32, _ dummy5: Int32) {
        super.init(try! Self._IClassFactory.CreateInstance5(arg, dummy1, dummy2, dummy3, dummy4, dummy5))
    }

    public init(_ arg: AnyIVectorView<String>!, _ dummy1: Int32, _ dummy2: Int32, _ dummy3: Int32, _ dummy4: Int32, _ dummy5: Int32, _ dummy6: Int32) {
        super.init(try! Self._IClassFactory.CreateInstance6(arg, dummy1, dummy2, dummy3, dummy4, dummy5, dummy6))
    }

    private static let _IClassFactory2: __ABI_test_component.IClassFactory2 = try! RoGetActivationFactory("test_component.Class")
    public init(_ name: String, _ fruit: Fruit, _ implementation: AnyIIAmImplementable!) {
        super.init(try! Self._IClassFactory2.CreateInstance(name, fruit, implementation))
    }

    private static let _IClassStatics: __ABI_test_component.IClassStatics = try! RoGetActivationFactory("test_component.Class")
    public static func staticTest() throws {
        try _IClassStatics.StaticTest()
    }

    public static func staticTestReturn() throws -> Int32 {
        return try _IClassStatics.StaticTestReturn()
    }

    public static func takeBaseAndGiveToCallbackAsObject(_ base: Base!, _ callback: test_component.InObjectDelegate!) throws {
        try _IClassStatics.TakeBaseAndGiveToCallbackAsObject(base, callback)
    }

    public static var staticProperty : Int32 {
        get { try! _IClassStatics.get_StaticProperty() }
    }

    private static let _IClassStatics2: __ABI_test_component.IClassStatics2 = try! RoGetActivationFactory("test_component.Class")
    public static func staticTestReturnFloat() throws -> Float {
        return try _IClassStatics2.StaticTestReturnFloat()
    }

    public static var staticPropertyFloat : Float {
        get { try! _IClassStatics2.get_StaticPropertyFloat() }
        set { try! _IClassStatics2.put_StaticPropertyFloat(newValue) }
    }

    public func setDelegate(_ value: AnyISimpleDelegate!) throws {
        try _default.SetDelegate(value)
    }

    public func getDelegate() throws -> AnyISimpleDelegate! {
        try _default.GetDelegate()
    }

    public func fail(_ message: String) throws {
        try _default.Fail(message)
    }

    public func inInt32(_ value: Int32) throws -> String {
        try _default.InInt32(value)
    }

    public func inString(_ value: String) throws -> String {
        try _default.InString(value)
    }

    public func inObject(_ value: Any!) throws -> String {
        try _default.InObject(value)
    }

    public func inBlittableStructRef(_ value: BlittableStruct) throws -> String {
        try _default.InBlittableStructRef(value)
    }

    public func inNonBlittableStructRef(_ value: NonBlittableStruct) throws -> String {
        try _default.InNonBlittableStructRef(value)
    }

    public func inEnum(_ value: Signed) throws -> String {
        try _default.InEnum(value)
    }

    public func outInt32(_ value: inout Int32) throws {
        try _default.OutInt32(&value)
    }

    public func outString(_ value: inout String) throws {
        try _default.OutString(&value)
    }

    public func outObject(_ value: inout Any!) throws {
        try _default.OutObject(&value)
    }

    public func outStringable(_ value: inout test_component.AnyIStringable!) throws {
        try _default.OutStringable(&value)
    }

    public func outBlittableStruct(_ value: inout BlittableStruct) throws {
        try _default.OutBlittableStruct(&value)
    }

    public func outNonBlittableStruct(_ value: inout NonBlittableStruct) throws {
        try _default.OutNonBlittableStruct(&value)
    }

    public func outEnum(_ value: inout Signed) throws {
        try _default.OutEnum(&value)
    }

    public func returnObject() throws -> Any! {
        try _default.ReturnObject()
    }

    public func returnEnum() throws -> Signed {
        try _default.ReturnEnum()
    }

    public func returnReferenceEnum() throws -> Signed? {
        try _default.ReturnReferenceEnum()
    }

    public func noexceptVoid() {
        try! _default.NoexceptVoid()
    }

    public func noexceptInt32() -> Int32 {
        try! _default.NoexceptInt32()
    }

    public func noexceptString() -> String {
        try! _default.NoexceptString()
    }

    public func raiseDeferrableEventAsync() throws -> AnyIAsyncOperation<Int32>! {
        try _default.RaiseDeferrableEventAsync()
    }

    public func returnChar() throws -> Character {
        try _default.ReturnChar()
    }

    public func inChar(_ value: Character) throws -> String {
        try _default.InChar(value)
    }

    public func outChar(_ value: inout Character) throws {
        try _default.OutChar(&value)
    }

    public var baseNoOverridesProperty : BaseNoOverrides! {
        get { try! _default.get_BaseNoOverridesProperty() }
        set { try! _default.put_BaseNoOverridesProperty(newValue) }
    }

    public var baseProperty : Base! {
        get { try! _default.get_BaseProperty() }
        set { try! _default.put_BaseProperty(newValue) }
    }

    public var enumProperty : Fruit {
        get { try! _default.get_EnumProperty() }
        set { try! _default.put_EnumProperty(newValue) }
    }

    public var id : Foundation.UUID? {
        get { try! _default.get_Id() }
        set { try! _default.put_Id(newValue) }
    }

    public var implementation : AnyIBasic! {
        get { try! _default.get_Implementation() }
        set { try! _default.put_Implementation(newValue) }
    }

    public var startValue : Int32? {
        get { try! _default.get_StartValue() }
        set { try! _default.put_StartValue(newValue) }
    }

    public lazy var deferrableEvent : Event<TypedEventHandler<Class?, DeferrableEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_DeferrableEvent($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_DeferrableEvent($0)
       }
      )
    }()

    private lazy var _IBasic: __ABI_test_component.IBasic! = getInterfaceForCaching()
    public func method() {
        try! _IBasic.Method()
    }

    deinit {
        _default = nil
        _IBasic = nil
    }
}

// MARK: - Class Internals

@_spi(WinRTInternal)
extension __IMPL_test_component {
    public enum ClassBridge: AbiBridge {
        public typealias SwiftProjection = Class
        public typealias CABI = __x_ABI_Ctest__component_CIClass
        public static func from(abi: ComPtr<__x_ABI_Ctest__component_CIClass>?) -> Class? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: test_component.IInspectable(abi))
        }
    }

}
@_spi(WinRTInternal)
public class ClassMaker: MakeFromAbi {
    public typealias SwiftType = Class
    public static func from(abi: test_component.IInspectable) -> SwiftType {
        return Class(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
extension __ABI_test_component {
    private static let IID___x_ABI_Ctest__component_CIClass: test_component.IID = .init(
        Data1: 0x586690C4, Data2: 0x6AE2, Data3: 0x5C62, Data4: ( 0xB5,0x25,0x44,0x4D,0xCC,0x2D,0xEE,0x39 ) // 586690C4-6AE2-5C62-B525-444DCC2DEE39
    ) 

    public class IClass: test_component.IInspectable {
        override public class var IID: test_component.IID { IID___x_ABI_Ctest__component_CIClass }

        public func get_Implementation() throws -> test_component.AnyIBasic? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_Ctest__component_CIClass.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Implementation(pThis, &valueAbi))
                }
            }
            return __ABI_test_component.IBasicWrapper.unwrapFrom(abi: value)
        }

        public func put_Implementation(_ value: test_component.AnyIBasic?) throws {
            let valueWrapper = __ABI_test_component.IBasicWrapper(value)
            let _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_Ctest__component_CIClass.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Implementation(pThis, _value))
            }
        }

        public func SetDelegate(_ value: test_component.AnyISimpleDelegate?) throws {
            let valueWrapper = __ABI_test_component.ISimpleDelegateWrapper(value)
            let _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_Ctest__component_CIClass.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.SetDelegate(pThis, _value))
            }
        }

        public func GetDelegate() throws -> test_component.AnyISimpleDelegate? {
            let (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_Ctest__component_CIClass.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetDelegate(pThis, &resultAbi))
                }
            }
            return __ABI_test_component.ISimpleDelegateWrapper.unwrapFrom(abi: result)
        }

        public func Fail(_ message: String) throws {
            let _message = try! HString(message)
            _ = try perform(as: __x_ABI_Ctest__component_CIClass.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Fail(pThis, _message.get()))
            }
        }

        public func InInt32(_ value: Int32) throws -> String {
            var result: HSTRING?
            _ = try perform(as: __x_ABI_Ctest__component_CIClass.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.InInt32(pThis, value, &result))
            }
            return .init(from: result)
        }

        public func InString(_ value: String) throws -> String {
            var result: HSTRING?
            let _value = try! HString(value)
            _ = try perform(as: __x_ABI_Ctest__component_CIClass.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.InString(pThis, _value.get(), &result))
            }
            return .init(from: result)
        }

        public func InObject(_ value: Any?) throws -> String {
            var result: HSTRING?
            let valueWrapper = __ABI_.AnyWrapper(value)
            let _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_Ctest__component_CIClass.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.InObject(pThis, _value, &result))
            }
            return .init(from: result)
        }

        public func InBlittableStructRef(_ value: test_component.BlittableStruct) throws -> String {
            var result: HSTRING?
            var _value: __x_ABI_Ctest__component_CBlittableStruct = .from(swift: value)
            _ = try perform(as: __x_ABI_Ctest__component_CIClass.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.InBlittableStructRef(pThis, &_value, &result))
            }
            return .init(from: result)
        }

        public func InNonBlittableStructRef(_ value: test_component.NonBlittableStruct) throws -> String {
            var result: HSTRING?
            let _value = __ABI_test_component._ABI_NonBlittableStruct(from: value)
            _ = try perform(as: __x_ABI_Ctest__component_CIClass.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.InNonBlittableStructRef(pThis, &_value.val, &result))
            }
            return .init(from: result)
        }

        public func InEnum(_ value: test_component.Signed) throws -> String {
            var result: HSTRING?
            _ = try perform(as: __x_ABI_Ctest__component_CIClass.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.InEnum(pThis, value, &result))
            }
            return .init(from: result)
        }

        public func OutInt32(_ value: inout Int32) throws {
            _ = try perform(as: __x_ABI_Ctest__component_CIClass.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.OutInt32(pThis, &value))
            }
        }

        public func OutString(_ value: inout String) throws {
            var _value: HSTRING?
            _ = try perform(as: __x_ABI_Ctest__component_CIClass.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.OutString(pThis, &_value))
            }
            value = .init(from: _value)
            WindowsDeleteString(_value)
        }

        public func OutObject(_ value: inout Any?) throws {
            let (_value) = try ComPtrs.initialize { (_valueAbi) in
                _ = try perform(as: __x_ABI_Ctest__component_CIClass.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.OutObject(pThis, &_valueAbi))
                }
            }
            value = __ABI_.AnyWrapper.unwrapFrom(abi: _value)
        }

        public func OutStringable(_ value: inout test_component.AnyIStringable?) throws {
            let (_value) = try ComPtrs.initialize { (_valueAbi) in
                _ = try perform(as: __x_ABI_Ctest__component_CIClass.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.OutStringable(pThis, &_valueAbi))
                }
            }
            value = __ABI_Windows_Foundation.IStringableWrapper.unwrapFrom(abi: _value)
        }

        public func OutBlittableStruct(_ value: inout test_component.BlittableStruct) throws {
            var _value: __x_ABI_Ctest__component_CBlittableStruct = .init()
            _ = try perform(as: __x_ABI_Ctest__component_CIClass.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.OutBlittableStruct(pThis, &_value))
            }
            value = .from(abi: _value)
        }

        public func OutNonBlittableStruct(_ value: inout test_component.NonBlittableStruct) throws {
            let _value: __ABI_test_component._ABI_NonBlittableStruct = .init()
            _ = try perform(as: __x_ABI_Ctest__component_CIClass.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.OutNonBlittableStruct(pThis, &_value.val))
            }
            value = .from(abi: _value.val)
        }

        public func OutEnum(_ value: inout test_component.Signed) throws {
            _ = try perform(as: __x_ABI_Ctest__component_CIClass.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.OutEnum(pThis, &value))
            }
        }

        public func ReturnObject() throws -> Any? {
            let (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_Ctest__component_CIClass.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.ReturnObject(pThis, &resultAbi))
                }
            }
            return __ABI_.AnyWrapper.unwrapFrom(abi: result)
        }

        public func ReturnEnum() throws -> test_component.Signed {
            var result: __x_ABI_Ctest__component_CSigned = .init(0)
            _ = try perform(as: __x_ABI_Ctest__component_CIClass.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.ReturnEnum(pThis, &result))
            }
            return result
        }

        public func ReturnReferenceEnum() throws -> test_component.Signed? {
            let (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_Ctest__component_CIClass.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.ReturnReferenceEnum(pThis, &resultAbi))
                }
            }
            return test_component.__x_ABI_C__FIReference_1___x_ABI_Ctest__zcomponent__CSignedWrapper.unwrapFrom(abi: result)
        }

        public func get_EnumProperty() throws -> test_component.Fruit {
            var value: __x_ABI_Ctest__component_CFruit = .init(0)
            _ = try perform(as: __x_ABI_Ctest__component_CIClass.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_EnumProperty(pThis, &value))
            }
            return value
        }

        public func put_EnumProperty(_ value: test_component.Fruit) throws {
            _ = try perform(as: __x_ABI_Ctest__component_CIClass.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_EnumProperty(pThis, value))
            }
        }

        public func NoexceptVoid() throws {
            _ = try perform(as: __x_ABI_Ctest__component_CIClass.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.NoexceptVoid(pThis))
            }
        }

        public func NoexceptInt32() throws -> Int32 {
            var result: INT32 = 0
            _ = try perform(as: __x_ABI_Ctest__component_CIClass.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.NoexceptInt32(pThis, &result))
            }
            return result
        }

        public func NoexceptString() throws -> String {
            var result: HSTRING?
            _ = try perform(as: __x_ABI_Ctest__component_CIClass.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.NoexceptString(pThis, &result))
            }
            return .init(from: result)
        }

        public func add_DeferrableEvent(_ handler: TypedEventHandler<test_component.Class?, test_component.DeferrableEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = test_component.__x_ABI_C__FITypedEventHandler_2___x_ABI_Ctest__zcomponent__CClass___x_ABI_Ctest__zcomponent__CDeferrableEventArgsWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_Ctest__component_CIClass.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_DeferrableEvent(pThis, _handler, &token))
            }
            return token
        }

        public func remove_DeferrableEvent(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_Ctest__component_CIClass.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_DeferrableEvent(pThis, token))
            }
        }

        public func RaiseDeferrableEventAsync() throws -> test_component.AnyIAsyncOperation<Int32>? {
            let (operation) = try ComPtrs.initialize { operationAbi in
                _ = try perform(as: __x_ABI_Ctest__component_CIClass.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.RaiseDeferrableEventAsync(pThis, &operationAbi))
                }
            }
            return test_component.__x_ABI_C__FIAsyncOperation_1_intWrapper.unwrapFrom(abi: operation)
        }

        public func ReturnChar() throws -> Character {
            var result: WCHAR = 0
            _ = try perform(as: __x_ABI_Ctest__component_CIClass.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.ReturnChar(pThis, &result))
            }
            return .init(from: result)
        }

        public func InChar(_ value: Character) throws -> String {
            var result: HSTRING?
            _ = try perform(as: __x_ABI_Ctest__component_CIClass.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.InChar(pThis, .init(from: value), &result))
            }
            return .init(from: result)
        }

        public func OutChar(_ value: inout Character) throws {
            var _value: WCHAR = .init()
            _ = try perform(as: __x_ABI_Ctest__component_CIClass.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.OutChar(pThis, &_value))
            }
            value = .init(from: _value)
        }

        public func get_StartValue() throws -> Int32? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_Ctest__component_CIClass.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_StartValue(pThis, &valueAbi))
                }
            }
            return test_component.__x_ABI_C__FIReference_1_intWrapper.unwrapFrom(abi: value)
        }

        public func put_StartValue(_ value: Int32?) throws {
            let valueWrapper = test_component.__x_ABI_C__FIReference_1_intWrapper(value)
            let _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_Ctest__component_CIClass.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_StartValue(pThis, _value))
            }
        }

        public func get_Id() throws -> Foundation.UUID? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_Ctest__component_CIClass.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Id(pThis, &valueAbi))
                }
            }
            return test_component.__x_ABI_C__FIReference_1_GUIDWrapper.unwrapFrom(abi: value)
        }

        public func put_Id(_ value: Foundation.UUID?) throws {
            let valueWrapper = test_component.__x_ABI_C__FIReference_1_GUIDWrapper(value)
            let _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_Ctest__component_CIClass.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Id(pThis, _value))
            }
        }

        public func get_BaseProperty() throws -> test_component.Base? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_Ctest__component_CIClass.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_BaseProperty(pThis, &valueAbi))
                }
            }
            return __IMPL_test_component.BaseBridge.from(abi: value)
        }

        public func put_BaseProperty(_ value: test_component.Base?) throws {
            _ = try perform(as: __x_ABI_Ctest__component_CIClass.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_BaseProperty(pThis, RawPointer(value)))
            }
        }

        public func get_BaseNoOverridesProperty() throws -> test_component.BaseNoOverrides? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_Ctest__component_CIClass.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_BaseNoOverridesProperty(pThis, &valueAbi))
                }
            }
            return __IMPL_test_component.BaseNoOverridesBridge.from(abi: value)
        }

        public func put_BaseNoOverridesProperty(_ value: test_component.BaseNoOverrides?) throws {
            _ = try perform(as: __x_ABI_Ctest__component_CIClass.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_BaseNoOverridesProperty(pThis, RawPointer(value)))
            }
        }

    }

    private static let IID___x_ABI_Ctest__component_CIClassFactory: test_component.IID = .init(
        Data1: 0x78914881, Data2: 0xB900, Data3: 0x582A, Data4: ( 0x94,0xB8,0x58,0x19,0x84,0xC0,0xF7,0x8A ) // 78914881-B900-582A-94B8-581984C0F78A
    ) 

    public class IClassFactory: test_component.IInspectable {
        override public class var IID: test_component.IID { IID___x_ABI_Ctest__component_CIClassFactory }

        public func CreateInstance(_ name: String) throws -> IClass {
            let (value) = try ComPtrs.initialize { valueAbi in
                let _name = try! HString(name)
                _ = try perform(as: __x_ABI_Ctest__component_CIClassFactory.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance(pThis, _name.get(), &valueAbi))
                }
            }
            return IClass(value!)
        }

        public func CreateInstance2(_ name: String, _ fruit: test_component.Fruit) throws -> IClass {
            let (value) = try ComPtrs.initialize { valueAbi in
                let _name = try! HString(name)
                _ = try perform(as: __x_ABI_Ctest__component_CIClassFactory.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance2(pThis, _name.get(), fruit, &valueAbi))
                }
            }
            return IClass(value!)
        }

        public func CreateInstance3(_ arg: test_component.AnyIMap<String, String>?, _ dummy1: Int32, _ dummy2: Int32, _ dummy3: Int32) throws -> IClass {
            let (value) = try ComPtrs.initialize { valueAbi in
                let argWrapper = test_component.__x_ABI_C__FIMap_2_HSTRING_HSTRINGWrapper(arg)
                let _arg = try! argWrapper?.toABI { $0 }
                _ = try perform(as: __x_ABI_Ctest__component_CIClassFactory.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance3(pThis, _arg, dummy1, dummy2, dummy3, &valueAbi))
                }
            }
            return IClass(value!)
        }

        public func CreateInstance4(_ arg: test_component.AnyIMapView<String, String>?, _ dummy1: Int32, _ dummy2: Int32, _ dummy3: Int32, _ dummy4: Int32) throws -> IClass {
            let (value) = try ComPtrs.initialize { valueAbi in
                let argWrapper = test_component.__x_ABI_C__FIMapView_2_HSTRING_HSTRINGWrapper(arg)
                let _arg = try! argWrapper?.toABI { $0 }
                _ = try perform(as: __x_ABI_Ctest__component_CIClassFactory.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance4(pThis, _arg, dummy1, dummy2, dummy3, dummy4, &valueAbi))
                }
            }
            return IClass(value!)
        }

        public func CreateInstance5(_ arg: test_component.AnyIVector<String>?, _ dummy1: Int32, _ dummy2: Int32, _ dummy3: Int32, _ dummy4: Int32, _ dummy5: Int32) throws -> IClass {
            let (value) = try ComPtrs.initialize { valueAbi in
                let argWrapper = test_component.__x_ABI_C__FIVector_1_HSTRINGWrapper(arg)
                let _arg = try! argWrapper?.toABI { $0 }
                _ = try perform(as: __x_ABI_Ctest__component_CIClassFactory.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance5(pThis, _arg, dummy1, dummy2, dummy3, dummy4, dummy5, &valueAbi))
                }
            }
            return IClass(value!)
        }

        public func CreateInstance6(_ arg: test_component.AnyIVectorView<String>?, _ dummy1: Int32, _ dummy2: Int32, _ dummy3: Int32, _ dummy4: Int32, _ dummy5: Int32, _ dummy6: Int32) throws -> IClass {
            let (value) = try ComPtrs.initialize { valueAbi in
                let argWrapper = test_component.__x_ABI_C__FIVectorView_1_HSTRINGWrapper(arg)
                let _arg = try! argWrapper?.toABI { $0 }
                _ = try perform(as: __x_ABI_Ctest__component_CIClassFactory.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance6(pThis, _arg, dummy1, dummy2, dummy3, dummy4, dummy5, dummy6, &valueAbi))
                }
            }
            return IClass(value!)
        }

    }

    private static let IID___x_ABI_Ctest__component_CIClassFactory2: test_component.IID = .init(
        Data1: 0xF5F62EBE, Data2: 0x931B, Data3: 0x519B, Data4: ( 0x95,0x1A,0xF1,0x4A,0x4B,0xC7,0x83,0xB1 ) // F5F62EBE-931B-519B-951A-F14A4BC783B1
    ) 

    public class IClassFactory2: test_component.IInspectable {
        override public class var IID: test_component.IID { IID___x_ABI_Ctest__component_CIClassFactory2 }

        public func CreateInstance(_ name: String, _ fruit: test_component.Fruit, _ implementation: test_component.AnyIIAmImplementable?) throws -> IClass {
            let (value) = try ComPtrs.initialize { valueAbi in
                let _name = try! HString(name)
                let implementationWrapper = __ABI_test_component.IIAmImplementableWrapper(implementation)
                let _implementation = try! implementationWrapper?.toABI { $0 }
                _ = try perform(as: __x_ABI_Ctest__component_CIClassFactory2.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance(pThis, _name.get(), fruit, _implementation, &valueAbi))
                }
            }
            return IClass(value!)
        }

    }

    private static let IID___x_ABI_Ctest__component_CIClassStatics: test_component.IID = .init(
        Data1: 0x3E30803C, Data2: 0x35D4, Data3: 0x52A7, Data4: ( 0xB2,0x11,0xFD,0xC5,0xD6,0xAC,0x48,0x7B ) // 3E30803C-35D4-52A7-B211-FDC5D6AC487B
    ) 

    public class IClassStatics: test_component.IInspectable {
        override public class var IID: test_component.IID { IID___x_ABI_Ctest__component_CIClassStatics }

        public func StaticTest() throws {
            _ = try perform(as: __x_ABI_Ctest__component_CIClassStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.StaticTest(pThis))
            }
        }

        public func StaticTestReturn() throws -> Int32 {
            var result: INT32 = 0
            _ = try perform(as: __x_ABI_Ctest__component_CIClassStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.StaticTestReturn(pThis, &result))
            }
            return result
        }

        public func get_StaticProperty() throws -> Int32 {
            var value: INT32 = 0
            _ = try perform(as: __x_ABI_Ctest__component_CIClassStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_StaticProperty(pThis, &value))
            }
            return value
        }

        public func TakeBaseAndGiveToCallbackAsObject(_ base: test_component.Base?, _ callback: test_component.InObjectDelegate?) throws {
            let callbackWrapper = __ABI_test_component_Delegates.InObjectDelegateWrapper(callback)
            let _callback = try! callbackWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_Ctest__component_CIClassStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.TakeBaseAndGiveToCallbackAsObject(pThis, RawPointer(base), _callback))
            }
        }

    }

    private static let IID___x_ABI_Ctest__component_CIClassStatics2: test_component.IID = .init(
        Data1: 0xB341C098, Data2: 0x033D, Data3: 0x5445, Data4: ( 0x86,0x80,0x70,0x3A,0x93,0xBC,0xDF,0x81 ) // B341C098-033D-5445-8680-703A93BCDF81
    ) 

    public class IClassStatics2: test_component.IInspectable {
        override public class var IID: test_component.IID { IID___x_ABI_Ctest__component_CIClassStatics2 }

        public func StaticTestReturnFloat() throws -> Float {
            var result: FLOAT = 0.0
            _ = try perform(as: __x_ABI_Ctest__component_CIClassStatics2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.StaticTestReturnFloat(pThis, &result))
            }
            return result
        }

        public func get_StaticPropertyFloat() throws -> Float {
            var value: FLOAT = 0.0
            _ = try perform(as: __x_ABI_Ctest__component_CIClassStatics2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_StaticPropertyFloat(pThis, &value))
            }
            return value
        }

        public func put_StaticPropertyFloat(_ value: Float) throws {
            _ = try perform(as: __x_ABI_Ctest__component_CIClassStatics2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_StaticPropertyFloat(pThis, value))
            }
        }

    }

}

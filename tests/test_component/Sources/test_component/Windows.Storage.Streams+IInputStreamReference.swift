// WARNING: Please don't edit this file. It was generated by Swift/WinRT v0.0.1
// swiftlint:disable all
import Foundation
import Ctest_component

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.streams.iinputstreamreference)
public protocol IInputStreamReference : WinRTInterface {
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.streams.iinputstreamreference.opensequentialreadasync)
    func openSequentialReadAsync() throws -> test_component.AnyIAsyncOperation<test_component.AnyIInputStream?>!
}

extension IInputStreamReference {
    public func queryInterface(_ iid: test_component.IID) -> IUnknownRef? {
        switch iid {
            case __ABI_Windows_Storage_Streams.IInputStreamReferenceWrapper.IID:
                let wrapper = __ABI_Windows_Storage_Streams.IInputStreamReferenceWrapper(self)
                return wrapper!.queryInterface(iid)
            default: return nil
        }
    }
}
public typealias AnyIInputStreamReference = any IInputStreamReference


// MARK: - Internals

@_spi(WinRTInternal)
extension __IMPL_Windows_Storage_Streams {
    public enum IInputStreamReferenceBridge : AbiInterfaceBridge {
        public typealias CABI = __x_ABI_CWindows_CStorage_CStreams_CIInputStreamReference
        public typealias SwiftABI = __ABI_Windows_Storage_Streams.IInputStreamReference
        public typealias SwiftProjection = AnyIInputStreamReference
        public static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
            guard let abi = abi else { return nil }
            return IInputStreamReferenceImpl(abi)
        }

        public static func makeAbi() -> CABI {
            let vtblPtr = withUnsafeMutablePointer(to: &__ABI_Windows_Storage_Streams.IInputStreamReferenceVTable) { $0 }
            return .init(lpVtbl: vtblPtr)
        }
    }

    fileprivate class IInputStreamReferenceImpl: IInputStreamReference, WinRTAbiImpl {
        fileprivate typealias Bridge = IInputStreamReferenceBridge
        fileprivate let _default: Bridge.SwiftABI
        fileprivate var thisPtr: test_component.IInspectable { _default }
        fileprivate init(_ fromAbi: ComPtr<Bridge.CABI>) {
            _default = Bridge.SwiftABI(fromAbi)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.streams.iinputstreamreference.opensequentialreadasync)
        fileprivate func openSequentialReadAsync() throws -> AnyIAsyncOperation<AnyIInputStream?>! {
            try _default.OpenSequentialReadAsync()
        }

    }

}
@_spi(WinRTInternal)
extension __ABI_Windows_Storage_Streams {
    private static let IID___x_ABI_CWindows_CStorage_CStreams_CIInputStreamReference: test_component.IID = .init(
        Data1: 0x43929D18, Data2: 0x5EC9, Data3: 0x4B5A, Data4: ( 0x91,0x9C,0x42,0x05,0xB0,0xC8,0x04,0xB6 )
    ) // 43929D18-5EC9-4B5A-919C-4205B0C804B6
    public class IInputStreamReference: test_component.IInspectable {
        override public class var IID: test_component.IID { IID___x_ABI_CWindows_CStorage_CStreams_CIInputStreamReference }

        open func OpenSequentialReadAsync() throws -> test_component.AnyIAsyncOperation<test_component.AnyIInputStream?>? {
            let (operation) = try ComPtrs.initialize { operationAbi in
                _ = try perform(as: __x_ABI_CWindows_CStorage_CStreams_CIInputStreamReference.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.OpenSequentialReadAsync(pThis, &operationAbi))
                }
            }
            return test_component.__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStreams__CIInputStreamWrapper.unwrapFrom(abi: operation)
        }

    }

    internal static var IInputStreamReferenceVTable: __x_ABI_CWindows_CStorage_CStreams_CIInputStreamReferenceVtbl = .init(
        QueryInterface: { IInputStreamReferenceWrapper.queryInterface($0, $1, $2) },
        AddRef: { IInputStreamReferenceWrapper.addRef($0) },
        Release: { IInputStreamReferenceWrapper.release($0) },
        GetIids: {
            let size = MemoryLayout<test_component.IID>.size
            let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: test_component.IID.self)
            iids[0] = IUnknown.IID
            iids[1] = IInspectable.IID
            iids[2] = __ABI_Windows_Storage_Streams.IInputStreamReferenceWrapper.IID
            $1!.pointee = 3
            $2!.pointee = iids
            return S_OK
        },

        GetRuntimeClassName: {
            _ = $0
            let hstring = try! HString("Windows.Storage.Streams.IInputStreamReference").detach()
            $1!.pointee = hstring
            return S_OK
        },

        GetTrustLevel: {
            _ = $0
            $1!.pointee = TrustLevel(rawValue: 0)
            return S_OK
        },

        OpenSequentialReadAsync: {
            do {
                guard let __unwrapped__instance = IInputStreamReferenceWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let operation = try __unwrapped__instance.openSequentialReadAsync()
                let operationWrapper = test_component.__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStreams__CIInputStreamWrapper(operation)
                operationWrapper?.copyTo($1)
                return S_OK
            } catch { return failWith(error: error) }
        }
    )

    public typealias IInputStreamReferenceWrapper = InterfaceWrapperBase<__IMPL_Windows_Storage_Streams.IInputStreamReferenceBridge>
}
@_spi(WinRTInternal)
public class IInputStreamReferenceMaker: MakeFromAbi {
    public typealias SwiftType = AnyIInputStreamReference
    public static func from(abi: test_component.IInspectable) -> SwiftType {
        let swiftAbi: __ABI_Windows_Storage_Streams.IInputStreamReference = try! abi.QueryInterface()
        return __IMPL_Windows_Storage_Streams.IInputStreamReferenceBridge.from(abi: RawPointer(swiftAbi))!
    }
}

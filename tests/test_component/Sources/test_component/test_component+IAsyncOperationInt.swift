// WARNING: Please don't edit this file. It was generated by Swift/WinRT v0.0.1
// swiftlint:disable all
import Foundation
import Ctest_component
@_spi(WinRTInternal) @_spi(WinRTImplements) import WindowsFoundation
import CWindowsFoundation
import CWinRT

public protocol IAsyncOperationInt : WinRTInterface {
    func complete(_ result: Int32) throws
    func completeWithError(_ errorCode: HRESULT) throws
}

extension IAsyncOperationInt {
    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        switch iid {
            case __ABI_test_component.IAsyncOperationIntWrapper.IID:
                let wrapper = __ABI_test_component.IAsyncOperationIntWrapper(self)
                return wrapper!.queryInterface(iid)
            default: return nil
        }
    }
}
public typealias AnyIAsyncOperationInt = any IAsyncOperationInt

// MARK: - IAsyncOperationInt Internals

@_spi(WinRTInternal)
extension __IMPL_test_component {
    public enum IAsyncOperationIntBridge : AbiInterfaceBridge {
        public typealias CABI = __x_ABI_Ctest__component_CIAsyncOperationInt
        public typealias SwiftABI = __ABI_test_component.IAsyncOperationInt
        public typealias SwiftProjection = AnyIAsyncOperationInt
        public static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
            guard let abi = abi else { return nil }
            return IAsyncOperationIntImpl(abi)
        }

        public static func makeAbi() -> CABI {
            let vtblPtr = withUnsafeMutablePointer(to: &__ABI_test_component.IAsyncOperationIntVTable) { $0 }
            return .init(lpVtbl: vtblPtr)
        }
    }

    fileprivate class IAsyncOperationIntImpl: IAsyncOperationInt, WinRTAbiImpl {
        fileprivate typealias Bridge = IAsyncOperationIntBridge
        fileprivate let _default: Bridge.SwiftABI
        fileprivate var thisPtr: WindowsFoundation.IInspectable { _default }
        fileprivate init(_ fromAbi: ComPtr<Bridge.CABI>) {
            _default = Bridge.SwiftABI(fromAbi)
        }

        fileprivate func complete(_ result: Int32) throws {
            try _default.Complete(result)
        }

        fileprivate func completeWithError(_ errorCode: HRESULT) throws {
            try _default.CompleteWithError(errorCode)
        }

    }

}
@_spi(WinRTInternal)
extension __ABI_test_component {
    private static let IID___x_ABI_Ctest__component_CIAsyncOperationInt: WindowsFoundation.IID = .init(
        Data1: 0x1D730A19, Data2: 0xCD91, Data3: 0x5A59, Data4: ( 0x96,0x83,0x51,0xA6,0x11,0xFA,0x48,0x08 ) // 1D730A19-CD91-5A59-9683-51A611FA4808
    ) 

    public class IAsyncOperationInt: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_Ctest__component_CIAsyncOperationInt }

        open func Complete(_ result: Int32) throws {
            _ = try perform(as: __x_ABI_Ctest__component_CIAsyncOperationInt.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Complete(pThis, result))
            }
        }

        open func CompleteWithError(_ errorCode: HRESULT) throws {
            _ = try perform(as: __x_ABI_Ctest__component_CIAsyncOperationInt.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.CompleteWithError(pThis, errorCode))
            }
        }

    }

    internal static var IAsyncOperationIntVTable: __x_ABI_Ctest__component_CIAsyncOperationIntVtbl = .init(
        QueryInterface: { IAsyncOperationIntWrapper.queryInterface($0, $1, $2) },
        AddRef: { IAsyncOperationIntWrapper.addRef($0) },
        Release: { IAsyncOperationIntWrapper.release($0) },
        GetIids: {
            let size = MemoryLayout<WindowsFoundation.IID>.size
            let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: WindowsFoundation.IID.self)
            iids[0] = IUnknown.IID
            iids[1] = IInspectable.IID
            iids[2] = __ABI_test_component.IAsyncOperationIntWrapper.IID
            $1!.pointee = 3
            $2!.pointee = iids
            return S_OK
        },

        GetRuntimeClassName: {
            _ = $0
            let hstring = try! HString("test_component.IAsyncOperationInt").detach()
            $1!.pointee = hstring
            return S_OK
        },

        GetTrustLevel: {
            _ = $0
            $1!.pointee = TrustLevel(rawValue: 0)
            return S_OK
        },

        Complete: {
            do {
                guard let __unwrapped__instance = IAsyncOperationIntWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let result: Int32 = $1
                try __unwrapped__instance.complete(result)
                return S_OK
            } catch { return failWith(error: error) }
        },

        CompleteWithError: {
            do {
                guard let __unwrapped__instance = IAsyncOperationIntWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let errorCode: HRESULT = $1
                try __unwrapped__instance.completeWithError(errorCode)
                return S_OK
            } catch { return failWith(error: error) }
        }
    )

    public typealias IAsyncOperationIntWrapper = InterfaceWrapperBase<__IMPL_test_component.IAsyncOperationIntBridge>
}
@_spi(WinRTInternal)
public class IAsyncOperationIntMaker: MakeFromAbi {
    public typealias SwiftType = AnyIAsyncOperationInt
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        let swiftAbi: __ABI_test_component.IAsyncOperationInt = try! abi.QueryInterface()
        return __IMPL_test_component.IAsyncOperationIntBridge.from(abi: RawPointer(swiftAbi))!
    }
}

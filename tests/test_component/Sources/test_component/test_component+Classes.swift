// WARNING: Please don't edit this file. It was generated by Swift/WinRT v0.0.1
// swiftlint:disable all
import Foundation
import Ctest_component

// MARK: - ArrayMethods

public final class ArrayMethods {
    private static let _IArrayMethodsStatics: __ABI_test_component.IArrayMethodsStatics = try! RoGetActivationFactory("test_component.ArrayMethods")
    public static func inInt32Array(_ value: [Int32]) throws -> String {
        return try _IArrayMethodsStatics.InInt32Array(value)
    }

    public static func inStringArray(_ value: [String]) throws -> String {
        return try _IArrayMethodsStatics.InStringArray(value)
    }

    public static func inObjectArray(_ value: [Any?]) throws -> String {
        return try _IArrayMethodsStatics.InObjectArray(value)
    }

    public static func inStringableArray(_ value: [test_component.AnyIStringable?]) throws -> String {
        return try _IArrayMethodsStatics.InStringableArray(value)
    }

    public static func inStructArray(_ value: [BlittableStruct]) throws -> String {
        return try _IArrayMethodsStatics.InStructArray(value)
    }

    public static func inNonBlittableStructArray(_ value: [NonBlittableStruct]) throws -> String {
        return try _IArrayMethodsStatics.InNonBlittableStructArray(value)
    }

    public static func inEnumArray(_ value: [Signed]) throws -> String {
        return try _IArrayMethodsStatics.InEnumArray(value)
    }

    public static func outInt32Array(_ value: inout [Int32]) throws {
        try _IArrayMethodsStatics.OutInt32Array(&value)
    }

    public static func outStringArray(_ value: inout [String]) throws {
        try _IArrayMethodsStatics.OutStringArray(&value)
    }

    public static func outObjectArray(_ value: inout [Any?]) throws {
        try _IArrayMethodsStatics.OutObjectArray(&value)
    }

    public static func outStringableArray(_ value: inout [test_component.AnyIStringable?]) throws {
        try _IArrayMethodsStatics.OutStringableArray(&value)
    }

    public static func outStructArray(_ value: inout [BlittableStruct]) throws {
        try _IArrayMethodsStatics.OutStructArray(&value)
    }

    public static func outNonBlittableStructArray(_ value: inout [NonBlittableStruct]) throws {
        try _IArrayMethodsStatics.OutNonBlittableStructArray(&value)
    }

    public static func outEnumArray(_ value: inout [Signed]) throws {
        try _IArrayMethodsStatics.OutEnumArray(&value)
    }

    public static func refInt32Array(_ value: inout [Int32]) throws {
        try _IArrayMethodsStatics.RefInt32Array(&value)
    }

    public static func refStringArray(_ value: inout [String]) throws {
        try _IArrayMethodsStatics.RefStringArray(&value)
    }

    public static func refObjectArray(_ value: inout [Any?]) throws {
        try _IArrayMethodsStatics.RefObjectArray(&value)
    }

    public static func refStringableArray(_ value: inout [test_component.AnyIStringable?]) throws {
        try _IArrayMethodsStatics.RefStringableArray(&value)
    }

    public static func refStructArray(_ value: inout [BlittableStruct]) throws {
        try _IArrayMethodsStatics.RefStructArray(&value)
    }

    public static func refNonBlittableStructArray(_ value: inout [NonBlittableStruct]) throws {
        try _IArrayMethodsStatics.RefNonBlittableStructArray(&value)
    }

    public static func refEnumArray(_ value: inout [Signed]) throws {
        try _IArrayMethodsStatics.RefEnumArray(&value)
    }

    public static func returnInt32Array() throws -> [Int32] {
        return try _IArrayMethodsStatics.ReturnInt32Array()
    }

    public static func returnStringArray() throws -> [String] {
        return try _IArrayMethodsStatics.ReturnStringArray()
    }

    public static func returnObjectArray() throws -> [Any?] {
        return try _IArrayMethodsStatics.ReturnObjectArray()
    }

    public static func returnStringableArray() throws -> [test_component.AnyIStringable?] {
        return try _IArrayMethodsStatics.ReturnStringableArray()
    }

    public static func returnStructArray() throws -> [BlittableStruct] {
        return try _IArrayMethodsStatics.ReturnStructArray()
    }

    public static func returnNonBlittableStructArray() throws -> [NonBlittableStruct] {
        return try _IArrayMethodsStatics.ReturnNonBlittableStructArray()
    }

    public static func returnEnumArray() throws -> [Signed] {
        return try _IArrayMethodsStatics.ReturnEnumArray()
    }

    public static func testInArrayThroughSwiftImplementation(_ scenario: AnyIArrayScenarios!, _ value: [Int32]) throws {
        try _IArrayMethodsStatics.TestInArrayThroughSwiftImplementation(scenario, value)
    }

    public static func testOutArrayThroughSwiftImplementation(_ scenario: AnyIArrayScenarios!, _ callback: ArrayMethodCallback!) throws {
        try _IArrayMethodsStatics.TestOutArrayThroughSwiftImplementation(scenario, callback)
    }

    public static func testRefArrayThroughSwiftImplementation(_ scenario: AnyIArrayScenarios!, _ value: inout [Int32], _ callback: ArrayMethodCallback!) throws {
        try _IArrayMethodsStatics.TestRefArrayThroughSwiftImplementation(scenario, &value, callback)
    }

    public static func testReturnArrayThroughSwiftImplementation(_ scenario: AnyIArrayScenarios!, _ callback: ArrayMethodCallback!) throws {
        try _IArrayMethodsStatics.TestReturnArrayThroughSwiftImplementation(scenario, callback)
    }

}

// MARK: - ArrayMethods Internals

@_spi(WinRTInternal)
extension __ABI_test_component {
    private static let IID___x_ABI_Ctest__component_CIArrayMethodsStatics: test_component.IID = .init(
        Data1: 0x8999FD6A, Data2: 0xD1C5, Data3: 0x53CE, Data4: ( 0xB8,0x0F,0x7C,0x45,0x85,0xD0,0x75,0x6C ) // 8999FD6A-D1C5-53CE-B80F-7C4585D0756C
    ) 

    public class IArrayMethodsStatics: test_component.IInspectable {
        override public class var IID: test_component.IID { IID___x_ABI_Ctest__component_CIArrayMethodsStatics }

        public func InInt32Array(_ value: [Int32]) throws -> String {
            var result: HSTRING?
            try value.toABI { _value in
                _ = try perform(as: __x_ABI_Ctest__component_CIArrayMethodsStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.InInt32Array(pThis, _value.count, _value.start, &result))
                }
            }
            return .init(from: result)
        }

        public func InStringArray(_ value: [String]) throws -> String {
            var result: HSTRING?
            try value.toABI { _value in
                _ = try perform(as: __x_ABI_Ctest__component_CIArrayMethodsStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.InStringArray(pThis, _value.count, _value.start, &result))
                }
            }
            return .init(from: result)
        }

        public func InObjectArray(_ value: [Any?]) throws -> String {
            var result: HSTRING?
            try value.toABI(abiBridge: __IMPL_.AnyBridge.self) { _value in
                _ = try perform(as: __x_ABI_Ctest__component_CIArrayMethodsStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.InObjectArray(pThis, _value.count, _value.start, &result))
                }
            }
            return .init(from: result)
        }

        public func InStringableArray(_ value: [test_component.AnyIStringable?]) throws -> String {
            var result: HSTRING?
            try value.toABI(abiBridge: __IMPL_Windows_Foundation.IStringableBridge.self) { _value in
                _ = try perform(as: __x_ABI_Ctest__component_CIArrayMethodsStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.InStringableArray(pThis, _value.count, _value.start, &result))
                }
            }
            return .init(from: result)
        }

        public func InStructArray(_ value: [test_component.BlittableStruct]) throws -> String {
            var result: HSTRING?
            try value.toABI { _value in
                _ = try perform(as: __x_ABI_Ctest__component_CIArrayMethodsStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.InStructArray(pThis, _value.count, _value.start, &result))
                }
            }
            return .init(from: result)
        }

        public func InNonBlittableStructArray(_ value: [test_component.NonBlittableStruct]) throws -> String {
            var result: HSTRING?
            try value.toABI { _value in
                _ = try perform(as: __x_ABI_Ctest__component_CIArrayMethodsStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.InNonBlittableStructArray(pThis, _value.count, _value.start, &result))
                }
            }
            return .init(from: result)
        }

        public func InEnumArray(_ value: [test_component.Signed]) throws -> String {
            var result: HSTRING?
            try value.toABI { _value in
                _ = try perform(as: __x_ABI_Ctest__component_CIArrayMethodsStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.InEnumArray(pThis, _value.count, _value.start, &result))
                }
            }
            return .init(from: result)
        }

        public func OutInt32Array(_ value: inout [Int32]) throws {
            var _value: WinRTArrayAbi<INT32> = (0, nil)
            _ = try perform(as: __x_ABI_Ctest__component_CIArrayMethodsStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.OutInt32Array(pThis, &_value.count, &_value.start))
            }
            defer { CoTaskMemFree(_value.start) }
            value = .from(abi: _value)
        }

        public func OutStringArray(_ value: inout [String]) throws {
            var _value: WinRTArrayAbi<HSTRING?> = (0, nil)
            _ = try perform(as: __x_ABI_Ctest__component_CIArrayMethodsStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.OutStringArray(pThis, &_value.count, &_value.start))
            }
            defer { CoTaskMemFree(_value.start) }
            value = .from(abi: _value)
        }

        public func OutObjectArray(_ value: inout [Any?]) throws {
            var _value: WinRTArrayAbi<UnsafeMutablePointer<C_IInspectable>?> = (0, nil)
            _ = try perform(as: __x_ABI_Ctest__component_CIArrayMethodsStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.OutObjectArray(pThis, &_value.count, &_value.start))
            }
            defer { CoTaskMemFree(_value.start) }
            value = .from(abiBridge: __IMPL_.AnyBridge.self, abi: _value)
        }

        public func OutStringableArray(_ value: inout [test_component.AnyIStringable?]) throws {
            var _value: WinRTArrayAbi<UnsafeMutablePointer<__x_ABI_CWindows_CFoundation_CIStringable>?> = (0, nil)
            _ = try perform(as: __x_ABI_Ctest__component_CIArrayMethodsStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.OutStringableArray(pThis, &_value.count, &_value.start))
            }
            defer { CoTaskMemFree(_value.start) }
            value = .from(abiBridge: __IMPL_Windows_Foundation.IStringableBridge.self, abi: _value)
        }

        public func OutStructArray(_ value: inout [test_component.BlittableStruct]) throws {
            var _value: WinRTArrayAbi<__x_ABI_Ctest__component_CBlittableStruct> = (0, nil)
            _ = try perform(as: __x_ABI_Ctest__component_CIArrayMethodsStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.OutStructArray(pThis, &_value.count, &_value.start))
            }
            defer { CoTaskMemFree(_value.start) }
            value = .from(abi: _value)
        }

        public func OutNonBlittableStructArray(_ value: inout [test_component.NonBlittableStruct]) throws {
            var _value: WinRTArrayAbi<__x_ABI_Ctest__component_CNonBlittableStruct> = (0, nil)
            _ = try perform(as: __x_ABI_Ctest__component_CIArrayMethodsStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.OutNonBlittableStructArray(pThis, &_value.count, &_value.start))
            }
            defer { CoTaskMemFree(_value.start) }
            value = .from(abi: _value)
        }

        public func OutEnumArray(_ value: inout [test_component.Signed]) throws {
            var _value: WinRTArrayAbi<__x_ABI_Ctest__component_CSigned> = (0, nil)
            _ = try perform(as: __x_ABI_Ctest__component_CIArrayMethodsStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.OutEnumArray(pThis, &_value.count, &_value.start))
            }
            defer { CoTaskMemFree(_value.start) }
            value = .from(abi: _value)
        }

        public func RefInt32Array(_ value: inout [Int32]) throws {
            try value.toABI { _value in
                _ = try perform(as: __x_ABI_Ctest__component_CIArrayMethodsStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.RefInt32Array(pThis, _value.count, _value.start))
                }
            }
        }

        public func RefStringArray(_ value: inout [String]) throws {
            try value.toABI { _value in
                _ = try perform(as: __x_ABI_Ctest__component_CIArrayMethodsStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.RefStringArray(pThis, _value.count, _value.start))
                }
            value = .from(abi: _value)
            }
        }

        public func RefObjectArray(_ value: inout [Any?]) throws {
            try value.toABI(abiBridge: __IMPL_.AnyBridge.self) { _value in
                _ = try perform(as: __x_ABI_Ctest__component_CIArrayMethodsStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.RefObjectArray(pThis, _value.count, _value.start))
                }
            value = .from(abiBridge: __IMPL_.AnyBridge.self, abi: _value)
            }
        }

        public func RefStringableArray(_ value: inout [test_component.AnyIStringable?]) throws {
            try value.toABI(abiBridge: __IMPL_Windows_Foundation.IStringableBridge.self) { _value in
                _ = try perform(as: __x_ABI_Ctest__component_CIArrayMethodsStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.RefStringableArray(pThis, _value.count, _value.start))
                }
            value = .from(abiBridge: __IMPL_Windows_Foundation.IStringableBridge.self, abi: _value)
            }
        }

        public func RefStructArray(_ value: inout [test_component.BlittableStruct]) throws {
            try value.toABI { _value in
                _ = try perform(as: __x_ABI_Ctest__component_CIArrayMethodsStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.RefStructArray(pThis, _value.count, _value.start))
                }
            value = .from(abi: _value)
            }
        }

        public func RefNonBlittableStructArray(_ value: inout [test_component.NonBlittableStruct]) throws {
            try value.toABI { _value in
                _ = try perform(as: __x_ABI_Ctest__component_CIArrayMethodsStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.RefNonBlittableStructArray(pThis, _value.count, _value.start))
                }
            value = .from(abi: _value)
            }
        }

        public func RefEnumArray(_ value: inout [test_component.Signed]) throws {
            try value.toABI { _value in
                _ = try perform(as: __x_ABI_Ctest__component_CIArrayMethodsStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.RefEnumArray(pThis, _value.count, _value.start))
                }
            }
        }

        public func ReturnInt32Array() throws -> [Int32] {
            var result: WinRTArrayAbi<INT32> = (0, nil)
            _ = try perform(as: __x_ABI_Ctest__component_CIArrayMethodsStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.ReturnInt32Array(pThis, &result.count, &result.start))
            }
            defer { CoTaskMemFree(result.start) }
            return .from(abi: result)

        }

        public func ReturnStringArray() throws -> [String] {
            var result: WinRTArrayAbi<HSTRING?> = (0, nil)
            _ = try perform(as: __x_ABI_Ctest__component_CIArrayMethodsStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.ReturnStringArray(pThis, &result.count, &result.start))
            }
            defer { CoTaskMemFree(result.start) }
            return .from(abi: result)

        }

        public func ReturnObjectArray() throws -> [Any?] {
            var result: WinRTArrayAbi<UnsafeMutablePointer<C_IInspectable>?> = (0, nil)
            _ = try perform(as: __x_ABI_Ctest__component_CIArrayMethodsStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.ReturnObjectArray(pThis, &result.count, &result.start))
            }
            defer { CoTaskMemFree(result.start) }
            return .from(abiBridge: __IMPL_.AnyBridge.self, abi: result)

        }

        public func ReturnStringableArray() throws -> [test_component.AnyIStringable?] {
            var result: WinRTArrayAbi<UnsafeMutablePointer<__x_ABI_CWindows_CFoundation_CIStringable>?> = (0, nil)
            _ = try perform(as: __x_ABI_Ctest__component_CIArrayMethodsStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.ReturnStringableArray(pThis, &result.count, &result.start))
            }
            defer { CoTaskMemFree(result.start) }
            return .from(abiBridge: __IMPL_Windows_Foundation.IStringableBridge.self, abi: result)

        }

        public func ReturnStructArray() throws -> [test_component.BlittableStruct] {
            var result: WinRTArrayAbi<__x_ABI_Ctest__component_CBlittableStruct> = (0, nil)
            _ = try perform(as: __x_ABI_Ctest__component_CIArrayMethodsStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.ReturnStructArray(pThis, &result.count, &result.start))
            }
            defer { CoTaskMemFree(result.start) }
            return .from(abi: result)

        }

        public func ReturnNonBlittableStructArray() throws -> [test_component.NonBlittableStruct] {
            var result: WinRTArrayAbi<__x_ABI_Ctest__component_CNonBlittableStruct> = (0, nil)
            _ = try perform(as: __x_ABI_Ctest__component_CIArrayMethodsStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.ReturnNonBlittableStructArray(pThis, &result.count, &result.start))
            }
            defer { CoTaskMemFree(result.start) }
            return .from(abi: result)

        }

        public func ReturnEnumArray() throws -> [test_component.Signed] {
            var result: WinRTArrayAbi<__x_ABI_Ctest__component_CSigned> = (0, nil)
            _ = try perform(as: __x_ABI_Ctest__component_CIArrayMethodsStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.ReturnEnumArray(pThis, &result.count, &result.start))
            }
            defer { CoTaskMemFree(result.start) }
            return .from(abi: result)

        }

        public func TestInArrayThroughSwiftImplementation(_ scenario: test_component.AnyIArrayScenarios?, _ value: [Int32]) throws {
            let scenarioWrapper = __ABI_test_component.IArrayScenariosWrapper(scenario)
            let _scenario = try! scenarioWrapper?.toABI { $0 }
            try value.toABI { _value in
                _ = try perform(as: __x_ABI_Ctest__component_CIArrayMethodsStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.TestInArrayThroughSwiftImplementation(pThis, _scenario, _value.count, _value.start))
                }
            }
        }

        public func TestOutArrayThroughSwiftImplementation(_ scenario: test_component.AnyIArrayScenarios?, _ callback: test_component.ArrayMethodCallback?) throws {
            let scenarioWrapper = __ABI_test_component.IArrayScenariosWrapper(scenario)
            let _scenario = try! scenarioWrapper?.toABI { $0 }
            let callbackWrapper = __ABI_test_component.ArrayMethodCallbackWrapper(callback)
            let _callback = try! callbackWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_Ctest__component_CIArrayMethodsStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.TestOutArrayThroughSwiftImplementation(pThis, _scenario, _callback))
            }
        }

        public func TestRefArrayThroughSwiftImplementation(_ scenario: test_component.AnyIArrayScenarios?, _ value: inout [Int32], _ callback: test_component.ArrayMethodCallback?) throws {
            let scenarioWrapper = __ABI_test_component.IArrayScenariosWrapper(scenario)
            let _scenario = try! scenarioWrapper?.toABI { $0 }
            try value.toABI { _value in
                let callbackWrapper = __ABI_test_component.ArrayMethodCallbackWrapper(callback)
                let _callback = try! callbackWrapper?.toABI { $0 }
                _ = try perform(as: __x_ABI_Ctest__component_CIArrayMethodsStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.TestRefArrayThroughSwiftImplementation(pThis, _scenario, _value.count, _value.start, _callback))
                }
            }
        }

        public func TestReturnArrayThroughSwiftImplementation(_ scenario: test_component.AnyIArrayScenarios?, _ callback: test_component.ArrayMethodCallback?) throws {
            let scenarioWrapper = __ABI_test_component.IArrayScenariosWrapper(scenario)
            let _scenario = try! scenarioWrapper?.toABI { $0 }
            let callbackWrapper = __ABI_test_component.ArrayMethodCallbackWrapper(callback)
            let _callback = try! callbackWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_Ctest__component_CIArrayMethodsStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.TestReturnArrayThroughSwiftImplementation(pThis, _scenario, _callback))
            }
        }

    }

}
// MARK: - AsyncMethods

public final class AsyncMethods {
    private static let _IAsyncMethodsStatics: __ABI_test_component.IAsyncMethodsStatics = try! RoGetActivationFactory("test_component.AsyncMethods")
    public static func getCompletedAsync(_ result: Int32) throws -> AnyIAsyncOperation<Int32>! {
        return try _IAsyncMethodsStatics.GetCompletedAsync(result)
    }

    public static func getCompletedWithErrorAsync(_ errorCode: HRESULT) throws -> AnyIAsyncOperation<Int32>! {
        return try _IAsyncMethodsStatics.GetCompletedWithErrorAsync(errorCode)
    }

    public static func getPendingAsync() throws -> AsyncOperationInt! {
        return try _IAsyncMethodsStatics.GetPendingAsync()
    }

}

// MARK: - AsyncMethods Internals

@_spi(WinRTInternal)
extension __ABI_test_component {
    private static let IID___x_ABI_Ctest__component_CIAsyncMethodsStatics: test_component.IID = .init(
        Data1: 0x5FAAD8F4, Data2: 0x29D7, Data3: 0x5C26, Data4: ( 0xA8,0x72,0x35,0x42,0xE3,0xE1,0x86,0x7A ) // 5FAAD8F4-29D7-5C26-A872-3542E3E1867A
    ) 

    public class IAsyncMethodsStatics: test_component.IInspectable {
        override public class var IID: test_component.IID { IID___x_ABI_Ctest__component_CIAsyncMethodsStatics }

        public func GetCompletedAsync(_ result: Int32) throws -> test_component.AnyIAsyncOperation<Int32>? {
            let (operation) = try ComPtrs.initialize { operationAbi in
                _ = try perform(as: __x_ABI_Ctest__component_CIAsyncMethodsStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetCompletedAsync(pThis, result, &operationAbi))
                }
            }
            return test_component.__x_ABI_C__FIAsyncOperation_1_intWrapper.unwrapFrom(abi: operation)
        }

        public func GetCompletedWithErrorAsync(_ errorCode: HRESULT) throws -> test_component.AnyIAsyncOperation<Int32>? {
            let (operation) = try ComPtrs.initialize { operationAbi in
                _ = try perform(as: __x_ABI_Ctest__component_CIAsyncMethodsStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetCompletedWithErrorAsync(pThis, errorCode, &operationAbi))
                }
            }
            return test_component.__x_ABI_C__FIAsyncOperation_1_intWrapper.unwrapFrom(abi: operation)
        }

        public func GetPendingAsync() throws -> test_component.AsyncOperationInt? {
            let (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_Ctest__component_CIAsyncMethodsStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetPendingAsync(pThis, &resultAbi))
                }
            }
            return __IMPL_test_component.AsyncOperationIntBridge.from(abi: result)
        }

    }

}
// MARK: - AsyncOperationInt

public final class AsyncOperationInt : WinRTClass, IAsyncOperationInt, IAsyncOperation, test_component.IAsyncInfo {
    public typealias TResult = Int32
    private typealias SwiftABI = __ABI_test_component.IAsyncOperationInt
    private typealias CABI = __x_ABI_Ctest__component_CIAsyncOperationInt
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: test_component.IInspectable) {
        super.init(fromAbi)
    }

    override public func queryInterface(_ iid: test_component.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    public func complete(_ result: Int32) throws {
        try _default.Complete(result)
    }

    public func completeWithError(_ errorCode: HRESULT) throws {
        try _default.CompleteWithError(errorCode)
    }

    private lazy var _IAsyncOperation: IAsyncOperationInt32! = getInterfaceForCaching()
    public func getResults() throws -> Int32 {
        try _IAsyncOperation.GetResults()
    }

    public var completed : AsyncOperationCompletedHandler<Int32>? {
        get { try! _IAsyncOperation.get_Completed() }
        set { try! _IAsyncOperation.put_Completed(newValue) }
    }

    private lazy var _IAsyncInfo: __ABI_Windows_Foundation.IAsyncInfo! = getInterfaceForCaching()
    public func cancel() throws {
        try _IAsyncInfo.Cancel()
    }

    public func close() throws {
        try _IAsyncInfo.Close()
    }

    public var errorCode : HRESULT {
        get { try! _IAsyncInfo.get_ErrorCode() }
    }

    public var id : UInt32 {
        get { try! _IAsyncInfo.get_Id() }
    }

    public var status : test_component.AsyncStatus {
        get { try! _IAsyncInfo.get_Status() }
    }

    deinit {
        _default = nil
        _IAsyncOperation = nil
        _IAsyncInfo = nil
    }
}

// MARK: - AsyncOperationInt Internals

@_spi(WinRTInternal)
extension __IMPL_test_component {
    public enum AsyncOperationIntBridge: AbiBridge {
        public typealias SwiftProjection = AsyncOperationInt
        public typealias CABI = __x_ABI_Ctest__component_CIAsyncOperationInt
        public static func from(abi: ComPtr<__x_ABI_Ctest__component_CIAsyncOperationInt>?) -> AsyncOperationInt? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: test_component.IInspectable(abi))
        }
    }

}
@_spi(WinRTInternal)
public class AsyncOperationIntMaker: MakeFromAbi {
    public typealias SwiftType = AsyncOperationInt
    public static func from(abi: test_component.IInspectable) -> SwiftType {
        return AsyncOperationInt(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
extension __ABI_test_component {
}
// MARK: - Base

open class Base : WinRTClass {
    private typealias SwiftABI = __ABI_test_component.IBase
    private typealias CABI = __x_ABI_Ctest__component_CIBase
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: test_component.IInspectable) {
        super.init(fromAbi)
    }

    @_spi(WinRTInternal)
    public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout test_component.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init()
        MakeComposed(composing: composing, (self as! Composable.Class), createCallback)
    }
    override open func queryInterface(_ iid: test_component.IID) -> IUnknownRef? {
        switch iid {
            case __ABI_test_component.IBaseOverridesWrapper.IID:
                let wrapper = __ABI_test_component.IBaseOverridesWrapper(self)
                return wrapper!.queryInterface(iid)
            default: return super.queryInterface(iid)
        }
    }
    private static var _IBaseProtectedFactory : __ABI_test_component.IBaseProtectedFactory =  try! RoGetActivationFactory("test_component.Base")

    override public init() {
        super.init()
        MakeComposed(composing: __IMPL_test_component.BaseBridge.Composable.self, self) { baseInterface, innerInterface in 
            try! Self._IBaseProtectedFactory.CreateInstance(baseInterface, &innerInterface)
        }
    }

    private static let _IBaseStatics: __ABI_test_component.IBaseStatics = try! RoGetActivationFactory("test_component.Base")
    public class func createFromString(_ value: String) throws -> Base! {
        return try _IBaseStatics.CreateFromString(value)
    }

    public func doTheThing() throws {
        try _default.DoTheThing()
    }

    private lazy var _IBaseOverrides: __ABI_test_component.IBaseOverrides! = getInterfaceForCaching()
    open func onDoTheThing() throws {
        try _IBaseOverrides.OnDoTheThing()
    }

    deinit {
        _default = nil
        _IBaseOverrides = nil
    }
}

// MARK: - Base Internals

@_spi(WinRTInternal)
extension __IMPL_test_component {
    public enum BaseBridge: ComposableBridge {
        public typealias SwiftProjection = Base
        public typealias CABI = __x_ABI_Ctest__component_CIBase
        public static func from(abi: ComPtr<__x_ABI_Ctest__component_CIBase>?) -> Base? {
            guard let abi = abi else { return nil }
            return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
        }
        public enum IBaseOverrides : ComposableImpl {
            public typealias CABI = __x_ABI_Ctest__component_CIBaseOverrides
            public typealias SwiftABI = __ABI_test_component.IBaseOverrides
            public typealias Class = Base
            public typealias SwiftProjection = WinRTClassWeakReference<Class>
            public enum Default : AbiInterface {
                public typealias CABI = __x_ABI_Ctest__component_CIBase
                public typealias SwiftABI = __ABI_test_component.IBase
            }
        }
        @_spi(WinRTInternal)
        public typealias Composable = IBaseOverrides
    }

}
@_spi(WinRTInternal)
public class BaseMaker: MakeFromAbi {
    public typealias SwiftType = Base
    public static func from(abi: test_component.IInspectable) -> SwiftType {
        return Base(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
extension __ABI_test_component {
    internal typealias IBaseOverridesWrapper = UnsealedWinRTClassWrapper<__IMPL_test_component.BaseBridge.IBaseOverrides>
    internal static var IBaseOverridesVTable: __x_ABI_Ctest__component_CIBaseOverridesVtbl = .init(
        QueryInterface: { IBaseOverridesWrapper.queryInterface($0, $1, $2) },
        AddRef: { IBaseOverridesWrapper.addRef($0) },
        Release: { IBaseOverridesWrapper.release($0) },
        GetIids: {
            let size = MemoryLayout<test_component.IID>.size
            let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: test_component.IID.self)
            iids[0] = IUnknown.IID
            iids[1] = IInspectable.IID
            iids[2] = __ABI_test_component.IBaseOverridesWrapper.IID
            $1!.pointee = 3
            $2!.pointee = iids
            return S_OK
        },

        GetRuntimeClassName: {
            guard let instance = IBaseOverridesWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let hstring = instance.GetRuntimeClassName().detach()
            $1!.pointee = hstring
            return S_OK
        },

        GetTrustLevel: {
            _ = $0
            $1!.pointee = TrustLevel(rawValue: 0)
            return S_OK
        },

        OnDoTheThing: {
            do {
                guard let __unwrapped__instance = IBaseOverridesWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                try __unwrapped__instance.onDoTheThing()
                return S_OK
            } catch { return failWith(error: error) }
        }
    )
    private static let IID___x_ABI_Ctest__component_CIBase: test_component.IID = .init(
        Data1: 0xE9FE0BB2, Data2: 0xE1F6, Data3: 0x5E39, Data4: ( 0x92,0xBB,0x2F,0x19,0xFF,0xDE,0x3F,0xDC ) // E9FE0BB2-E1F6-5E39-92BB-2F19FFDE3FDC
    ) 

    public class IBase: test_component.IInspectable {
        override public class var IID: test_component.IID { IID___x_ABI_Ctest__component_CIBase }

        public func DoTheThing() throws {
            _ = try perform(as: __x_ABI_Ctest__component_CIBase.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.DoTheThing(pThis))
            }
        }

    }

    private static let IID___x_ABI_Ctest__component_CIBaseOverrides: test_component.IID = .init(
        Data1: 0xEE3CBD78, Data2: 0x04B7, Data3: 0x534F, Data4: ( 0xA7,0x15,0x53,0xDA,0xF5,0x35,0x01,0x3C ) // EE3CBD78-04B7-534F-A715-53DAF535013C
    ) 

    public class IBaseOverrides: test_component.IInspectable {
        override public class var IID: test_component.IID { IID___x_ABI_Ctest__component_CIBaseOverrides }

        public func OnDoTheThing() throws {
            _ = try perform(as: __x_ABI_Ctest__component_CIBaseOverrides.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.OnDoTheThing(pThis))
            }
        }

    }

    private static let IID___x_ABI_Ctest__component_CIBaseProtectedFactory: test_component.IID = .init(
        Data1: 0x05CAD233, Data2: 0x20A7, Data3: 0x581F, Data4: ( 0xBD,0x44,0x0D,0x13,0x6C,0x31,0x0E,0x0F ) // 05CAD233-20A7-581F-BD44-0D136C310E0F
    ) 

    public class IBaseProtectedFactory: test_component.IInspectable {
        override public class var IID: test_component.IID { IID___x_ABI_Ctest__component_CIBaseProtectedFactory }

        public func CreateInstance(_ baseInterface: UnsealedWinRTClassWrapper<__IMPL_test_component.BaseBridge.Composable>?, _ innerInterface: inout test_component.IInspectable?) throws -> IBase {
            let (value) = try ComPtrs.initialize { valueAbi in
                let _baseInterface = baseInterface?.toIInspectableABI { $0 }
                let (_innerInterface) = try ComPtrs.initialize { _innerInterfaceAbi in
                    _ = try perform(as: __x_ABI_Ctest__component_CIBaseProtectedFactory.self) { pThis in
                        try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance(pThis, _baseInterface, &_innerInterfaceAbi, &valueAbi))
                    }
                }
                innerInterface = test_component.IInspectable(_innerInterface!)
            }
            return IBase(value!)
        }

    }

    private static let IID___x_ABI_Ctest__component_CIBaseStatics: test_component.IID = .init(
        Data1: 0x9E36C560, Data2: 0xE3AE, Data3: 0x55DF, Data4: ( 0xBA,0x41,0x6B,0xB5,0x47,0xA2,0x81,0x65 ) // 9E36C560-E3AE-55DF-BA41-6BB547A28165
    ) 

    public class IBaseStatics: test_component.IInspectable {
        override public class var IID: test_component.IID { IID___x_ABI_Ctest__component_CIBaseStatics }

        public func CreateFromString(_ value: String) throws -> test_component.Base? {
            let (result) = try ComPtrs.initialize { resultAbi in
                let _value = try! HString(value)
                _ = try perform(as: __x_ABI_Ctest__component_CIBaseStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateFromString(pThis, _value.get(), &resultAbi))
                }
            }
            return __IMPL_test_component.BaseBridge.from(abi: result)
        }

    }

}
extension ComposableImpl where CABI == __x_ABI_Ctest__component_CIBaseOverrides {
    public static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__ABI_test_component.IBaseOverridesVTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}
// MARK: - BaseCollection

open class BaseCollection : WinRTClass, IVector, IIterable {
    public typealias T = Base?
    private typealias SwiftABI = test_component.IVectorBase
    private typealias CABI = __x_ABI_C__FIVector_1___x_ABI_Ctest__zcomponent__CBase
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: test_component.IInspectable) {
        super.init(fromAbi)
    }

    @_spi(WinRTInternal)
    public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout test_component.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init()
        MakeComposed(composing: composing, (self as! Composable.Class), createCallback)
    }
    override open func queryInterface(_ iid: test_component.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IBaseCollectionProtectedFactory : __ABI_test_component.IBaseCollectionProtectedFactory =  try! RoGetActivationFactory("test_component.BaseCollection")

    override public init() {
        super.init()
        MakeComposed(composing: __IMPL_test_component.BaseCollectionBridge.Composable.self, self) { baseInterface, innerInterface in 
            try! Self._IBaseCollectionProtectedFactory.CreateInstance(baseInterface, &innerInterface)
        }
    }

    // MARK: Collection
    public typealias Element = T
    public var startIndex: Int { 0 }
    public var endIndex: Int { Int(size) }
    public func index(after i: Int) -> Int {
        i+1
    }

    public func index(of: Element) -> Int? {
        var index: UInt32 = 0
        let result = indexOf(of, &index)
        guard result else { return nil }
        return Int(index)
    }
    public var count: Int { Int(size) }


    public subscript(position: Int) -> Element {
        get {
            getAt(UInt32(position))
        }
        set(newValue) {
            setAt(UInt32(position), newValue)
        }
    }

    public func removeLast() {
        removeAtEnd()
    }

    // MARK: WinRT
    public func getAt(_ index: UInt32) -> Base? {
        try! _default.GetAt(index)
    }

    public func getView() -> AnyIVectorView<Base?>? {
        try! _default.GetView()
    }

    public func indexOf(_ value: Base?, _ index: inout UInt32) -> Bool {
        try! _default.IndexOf(value, &index)
    }

    public func setAt(_ index: UInt32, _ value: Base?) {
        try! _default.SetAt(index, value)
    }

    public func insertAt(_ index: UInt32, _ value: Base?) {
        try! _default.InsertAt(index, value)
    }

    public func removeAt(_ index: UInt32) {
        try! _default.RemoveAt(index)
    }

    public func append(_ value: Base?) {
        try! _default.Append(value)
    }

    public func removeAtEnd() {
        try! _default.RemoveAtEnd()
    }

    public func clear() {
        try! _default.Clear()
    }

    public func getMany(_ startIndex: UInt32, _ items: inout [Base?]) -> UInt32 {
        try! _default.GetMany(startIndex, &items)
    }

    public func replaceAll(_ items: [Base?]) {
        try! _default.ReplaceAll(items)
    }

    public var size : UInt32 {
        get { try! _default.get_Size() }
    }

    private lazy var _IIterable: IIterableBase! = getInterfaceForCaching()
    public func first() -> AnyIIterator<Base?>? {
        try! _IIterable.First()
    }

    deinit {
        _default = nil
        _IIterable = nil
    }
}

// MARK: - BaseCollection Internals

@_spi(WinRTInternal)
extension __IMPL_test_component {
    public enum BaseCollectionBridge: ComposableBridge {
        public typealias SwiftProjection = BaseCollection
        public typealias CABI = __x_ABI_C__FIVector_1___x_ABI_Ctest__zcomponent__CBase
        public static func from(abi: ComPtr<__x_ABI_C__FIVector_1___x_ABI_Ctest__zcomponent__CBase>?) -> BaseCollection? {
            guard let abi = abi else { return nil }
            return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
        }
        public enum IVectorBase : ComposableImpl {
            public typealias CABI = C_IInspectable
            public typealias SwiftABI = test_component.IInspectable
            public typealias Class = BaseCollection
            public typealias SwiftProjection = WinRTClassWeakReference<Class>
            public enum Default : AbiInterface {
                public typealias CABI = __x_ABI_C__FIVector_1___x_ABI_Ctest__zcomponent__CBase
                public typealias SwiftABI = test_component.IVectorBase
            }
        }
        @_spi(WinRTInternal)
        public typealias Composable = IVectorBase
    }

}
@_spi(WinRTInternal)
public class BaseCollectionMaker: MakeFromAbi {
    public typealias SwiftType = BaseCollection
    public static func from(abi: test_component.IInspectable) -> SwiftType {
        return BaseCollection(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
extension __ABI_test_component {
    private static let IID___x_ABI_Ctest__component_CIBaseCollectionProtectedFactory: test_component.IID = .init(
        Data1: 0xB5581456, Data2: 0xA980, Data3: 0x5851, Data4: ( 0xAD,0xA4,0x0A,0x7B,0x27,0x0F,0x6C,0xD9 ) // B5581456-A980-5851-ADA4-0A7B270F6CD9
    ) 

    public class IBaseCollectionProtectedFactory: test_component.IInspectable {
        override public class var IID: test_component.IID { IID___x_ABI_Ctest__component_CIBaseCollectionProtectedFactory }

        public func CreateInstance(_ baseInterface: UnsealedWinRTClassWrapper<__IMPL_test_component.BaseCollectionBridge.Composable>?, _ innerInterface: inout test_component.IInspectable?) throws -> IVectorBase {
            let (value) = try ComPtrs.initialize { valueAbi in
                let _baseInterface = baseInterface?.toIInspectableABI { $0 }
                let (_innerInterface) = try ComPtrs.initialize { _innerInterfaceAbi in
                    _ = try perform(as: __x_ABI_Ctest__component_CIBaseCollectionProtectedFactory.self) { pThis in
                        try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance(pThis, _baseInterface, &_innerInterfaceAbi, &valueAbi))
                    }
                }
                innerInterface = test_component.IInspectable(_innerInterface!)
            }
            return IVectorBase(value!)
        }

    }

}
// MARK: - BaseMapCollection

public final class BaseMapCollection : WinRTClass, IMap, IIterable {
    public typealias K = String
    public typealias V = Base?
    public typealias T = AnyIKeyValuePair<String, Base?>?
    private typealias SwiftABI = test_component.IMapString_Base
    private typealias CABI = __x_ABI_C__FIMap_2_HSTRING___x_ABI_Ctest__zcomponent__CBase
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: test_component.IInspectable) {
        super.init(fromAbi)
    }

    override public func queryInterface(_ iid: test_component.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    public func lookup(_ key: String) -> Base? {
        try! _default.Lookup(key)
    }

    public func hasKey(_ key: String) -> Bool {
        try! _default.HasKey(key)
    }

    public func getView() -> AnyIMapView<String, Base?>? {
        try! _default.GetView()
    }

    public func insert(_ key: String, _ value: Base?) -> Bool {
        try! _default.Insert(key, value)
    }

    public func remove(_ key: String) {
        try! _default.Remove(key)
    }

    public func clear() {
        try! _default.Clear()
    }

    public var size : UInt32 {
        get { try! _default.get_Size() }
    }

    private lazy var _IIterable: IIterableIKeyValuePairString_Base! = getInterfaceForCaching()
    public func first() -> AnyIIterator<AnyIKeyValuePair<String, Base?>?>? {
        try! _IIterable.First()
    }

    deinit {
        _default = nil
        _IIterable = nil
    }
}

// MARK: - BaseMapCollection Internals

@_spi(WinRTInternal)
extension __IMPL_test_component {
    public enum BaseMapCollectionBridge: AbiBridge {
        public typealias SwiftProjection = BaseMapCollection
        public typealias CABI = __x_ABI_C__FIMap_2_HSTRING___x_ABI_Ctest__zcomponent__CBase
        public static func from(abi: ComPtr<__x_ABI_C__FIMap_2_HSTRING___x_ABI_Ctest__zcomponent__CBase>?) -> BaseMapCollection? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: test_component.IInspectable(abi))
        }
    }

}
@_spi(WinRTInternal)
public class BaseMapCollectionMaker: MakeFromAbi {
    public typealias SwiftType = BaseMapCollection
    public static func from(abi: test_component.IInspectable) -> SwiftType {
        return BaseMapCollection(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
extension __ABI_test_component {
}
// MARK: - BaseNoOverrides

open class BaseNoOverrides : WinRTClass {
    private typealias SwiftABI = __ABI_test_component.IBaseNoOverrides
    private typealias CABI = __x_ABI_Ctest__component_CIBaseNoOverrides
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: test_component.IInspectable) {
        super.init(fromAbi)
    }

    @_spi(WinRTInternal)
    public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout test_component.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init()
        MakeComposed(composing: composing, (self as! Composable.Class), createCallback)
    }
    override open func queryInterface(_ iid: test_component.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IBaseNoOverridesProtectedFactory : __ABI_test_component.IBaseNoOverridesProtectedFactory =  try! RoGetActivationFactory("test_component.BaseNoOverrides")

    override public init() {
        super.init()
        MakeComposed(composing: __IMPL_test_component.BaseNoOverridesBridge.Composable.self, self) { baseInterface, innerInterface in 
            try! Self._IBaseNoOverridesProtectedFactory.CreateInstance(baseInterface, &innerInterface)
        }
    }

    private static let _IBaseNoOverridesStatics: __ABI_test_component.IBaseNoOverridesStatics = try! RoGetActivationFactory("test_component.BaseNoOverrides")
    public class func createFromString(_ value: String) throws -> BaseNoOverrides! {
        return try _IBaseNoOverridesStatics.CreateFromString(value)
    }

    deinit {
        _default = nil
    }
}

// MARK: - BaseNoOverrides Internals

@_spi(WinRTInternal)
extension __IMPL_test_component {
    public enum BaseNoOverridesBridge: ComposableBridge {
        public typealias SwiftProjection = BaseNoOverrides
        public typealias CABI = __x_ABI_Ctest__component_CIBaseNoOverrides
        public static func from(abi: ComPtr<__x_ABI_Ctest__component_CIBaseNoOverrides>?) -> BaseNoOverrides? {
            guard let abi = abi else { return nil }
            return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
        }
        public enum IBaseNoOverrides : ComposableImpl {
            public typealias CABI = C_IInspectable
            public typealias SwiftABI = test_component.IInspectable
            public typealias Class = BaseNoOverrides
            public typealias SwiftProjection = WinRTClassWeakReference<Class>
            public enum Default : AbiInterface {
                public typealias CABI = __x_ABI_Ctest__component_CIBaseNoOverrides
                public typealias SwiftABI = __ABI_test_component.IBaseNoOverrides
            }
        }
        @_spi(WinRTInternal)
        public typealias Composable = IBaseNoOverrides
    }

}
@_spi(WinRTInternal)
public class BaseNoOverridesMaker: MakeFromAbi {
    public typealias SwiftType = BaseNoOverrides
    public static func from(abi: test_component.IInspectable) -> SwiftType {
        return BaseNoOverrides(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
extension __ABI_test_component {
    private static let IID___x_ABI_Ctest__component_CIBaseNoOverrides: test_component.IID = .init(
        Data1: 0xCAC21C05, Data2: 0xB599, Data3: 0x5D37, Data4: ( 0xA9,0x3A,0xD6,0x0C,0xBD,0xD1,0xD0,0xE8 ) // CAC21C05-B599-5D37-A93A-D60CBDD1D0E8
    ) 

    public class IBaseNoOverrides: test_component.IInspectable {
        override public class var IID: test_component.IID { IID___x_ABI_Ctest__component_CIBaseNoOverrides }

    }

    private static let IID___x_ABI_Ctest__component_CIBaseNoOverridesProtectedFactory: test_component.IID = .init(
        Data1: 0x92FC0572, Data2: 0x825F, Data3: 0x5B3F, Data4: ( 0x9B,0x0B,0xF0,0x80,0xA1,0x66,0xEF,0x06 ) // 92FC0572-825F-5B3F-9B0B-F080A166EF06
    ) 

    public class IBaseNoOverridesProtectedFactory: test_component.IInspectable {
        override public class var IID: test_component.IID { IID___x_ABI_Ctest__component_CIBaseNoOverridesProtectedFactory }

        public func CreateInstance(_ baseInterface: UnsealedWinRTClassWrapper<__IMPL_test_component.BaseNoOverridesBridge.Composable>?, _ innerInterface: inout test_component.IInspectable?) throws -> IBaseNoOverrides {
            let (value) = try ComPtrs.initialize { valueAbi in
                let _baseInterface = baseInterface?.toIInspectableABI { $0 }
                let (_innerInterface) = try ComPtrs.initialize { _innerInterfaceAbi in
                    _ = try perform(as: __x_ABI_Ctest__component_CIBaseNoOverridesProtectedFactory.self) { pThis in
                        try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance(pThis, _baseInterface, &_innerInterfaceAbi, &valueAbi))
                    }
                }
                innerInterface = test_component.IInspectable(_innerInterface!)
            }
            return IBaseNoOverrides(value!)
        }

    }

    private static let IID___x_ABI_Ctest__component_CIBaseNoOverridesStatics: test_component.IID = .init(
        Data1: 0xCC810B5D, Data2: 0x97FC, Data3: 0x5B35, Data4: ( 0xAE,0xEA,0xA4,0x7F,0x5F,0x58,0x06,0xF7 ) // CC810B5D-97FC-5B35-AEEA-A47F5F5806F7
    ) 

    public class IBaseNoOverridesStatics: test_component.IInspectable {
        override public class var IID: test_component.IID { IID___x_ABI_Ctest__component_CIBaseNoOverridesStatics }

        public func CreateFromString(_ value: String) throws -> test_component.BaseNoOverrides? {
            let (result) = try ComPtrs.initialize { resultAbi in
                let _value = try! HString(value)
                _ = try perform(as: __x_ABI_Ctest__component_CIBaseNoOverridesStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateFromString(pThis, _value.get(), &resultAbi))
                }
            }
            return __IMPL_test_component.BaseNoOverridesBridge.from(abi: result)
        }

    }

}
// MARK: - BaseObservableCollection

public final class BaseObservableCollection : WinRTClass, IObservableVector, IVector, IIterable {
    public typealias T = Base?
    private typealias SwiftABI = test_component.IObservableVectorBase
    private typealias CABI = __x_ABI_C__FIObservableVector_1___x_ABI_Ctest__zcomponent__CBase
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: test_component.IInspectable) {
        super.init(fromAbi)
    }

    override public func queryInterface(_ iid: test_component.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    // MARK: Collection
    public typealias Element = T
    public var startIndex: Int { 0 }
    public var endIndex: Int { Int(size) }
    public func index(after i: Int) -> Int {
        i+1
    }

    public func index(of: Element) -> Int? {
        var index: UInt32 = 0
        let result = indexOf(of, &index)
        guard result else { return nil }
        return Int(index)
    }
    public var count: Int { Int(size) }


    public subscript(position: Int) -> Element {
        get {
            getAt(UInt32(position))
        }
        set(newValue) {
            setAt(UInt32(position), newValue)
        }
    }

    public func removeLast() {
        removeAtEnd()
    }

    // MARK: WinRT
    public lazy var vectorChanged : Event<VectorChangedEventHandler<Base?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_VectorChanged($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_VectorChanged($0)
       }
      )
    }()

    private lazy var _IVector: IVectorBase! = getInterfaceForCaching()
    public func getAt(_ index: UInt32) -> Base? {
        try! _IVector.GetAt(index)
    }

    public func getView() -> AnyIVectorView<Base?>? {
        try! _IVector.GetView()
    }

    public func indexOf(_ value: Base?, _ index: inout UInt32) -> Bool {
        try! _IVector.IndexOf(value, &index)
    }

    public func setAt(_ index: UInt32, _ value: Base?) {
        try! _IVector.SetAt(index, value)
    }

    public func insertAt(_ index: UInt32, _ value: Base?) {
        try! _IVector.InsertAt(index, value)
    }

    public func removeAt(_ index: UInt32) {
        try! _IVector.RemoveAt(index)
    }

    public func append(_ value: Base?) {
        try! _IVector.Append(value)
    }

    public func removeAtEnd() {
        try! _IVector.RemoveAtEnd()
    }

    public func clear() {
        try! _IVector.Clear()
    }

    public func getMany(_ startIndex: UInt32, _ items: inout [Base?]) -> UInt32 {
        try! _IVector.GetMany(startIndex, &items)
    }

    public func replaceAll(_ items: [Base?]) {
        try! _IVector.ReplaceAll(items)
    }

    public var size : UInt32 {
        get { try! _IVector.get_Size() }
    }

    private lazy var _IIterable: IIterableBase! = getInterfaceForCaching()
    public func first() -> AnyIIterator<Base?>? {
        try! _IIterable.First()
    }

    deinit {
        _default = nil
        _IVector = nil
        _IIterable = nil
    }
}

// MARK: - BaseObservableCollection Internals

@_spi(WinRTInternal)
extension __IMPL_test_component {
    public enum BaseObservableCollectionBridge: AbiBridge {
        public typealias SwiftProjection = BaseObservableCollection
        public typealias CABI = __x_ABI_C__FIObservableVector_1___x_ABI_Ctest__zcomponent__CBase
        public static func from(abi: ComPtr<__x_ABI_C__FIObservableVector_1___x_ABI_Ctest__zcomponent__CBase>?) -> BaseObservableCollection? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: test_component.IInspectable(abi))
        }
    }

}
@_spi(WinRTInternal)
public class BaseObservableCollectionMaker: MakeFromAbi {
    public typealias SwiftType = BaseObservableCollection
    public static func from(abi: test_component.IInspectable) -> SwiftType {
        return BaseObservableCollection(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
extension __ABI_test_component {
}
// MARK: - BufferTester

public final class BufferTester {
    private static let _IBufferTesterStatics: __ABI_test_component.IBufferTesterStatics = try! RoGetActivationFactory("test_component.BufferTester")
    public static func getDataFrom(_ buffer: test_component.AnyIBuffer!, _ index: UInt32) throws -> UInt8 {
        return try _IBufferTesterStatics.GetDataFrom(buffer, index)
    }

}

// MARK: - BufferTester Internals

@_spi(WinRTInternal)
extension __ABI_test_component {
    private static let IID___x_ABI_Ctest__component_CIBufferTesterStatics: test_component.IID = .init(
        Data1: 0x82190F30, Data2: 0x48DC, Data3: 0x5350, Data4: ( 0xAD,0x5B,0x00,0x36,0x63,0x5C,0xF5,0xB4 ) // 82190F30-48DC-5350-AD5B-0036635CF5B4
    ) 

    public class IBufferTesterStatics: test_component.IInspectable {
        override public class var IID: test_component.IID { IID___x_ABI_Ctest__component_CIBufferTesterStatics }

        public func GetDataFrom(_ buffer: test_component.AnyIBuffer?, _ index: UInt32) throws -> UInt8 {
            var result: UINT8 = 0
            let bufferWrapper = __ABI_Windows_Storage_Streams.IBufferWrapper(buffer)
            let _buffer = try! bufferWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_Ctest__component_CIBufferTesterStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetDataFrom(pThis, _buffer, index, &result))
            }
            return result
        }

    }

}
// MARK: - Class

public final class Class : WinRTClass, IBasic {
    private typealias SwiftABI = __ABI_test_component.IClass
    private typealias CABI = __x_ABI_Ctest__component_CIClass
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: test_component.IInspectable) {
        super.init(fromAbi)
    }

    override public func queryInterface(_ iid: test_component.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static let _defaultFactory: test_component.IActivationFactory = try! RoGetActivationFactory("test_component.Class")
    override public init() {
        super.init(try! Self._defaultFactory.ActivateInstance())
    }

    private static let _IClassFactory: __ABI_test_component.IClassFactory = try! RoGetActivationFactory("test_component.Class")
    public init(_ name: String) {
        super.init(try! Self._IClassFactory.CreateInstance(name))
    }

    public init(_ name: String, _ fruit: Fruit) {
        super.init(try! Self._IClassFactory.CreateInstance2(name, fruit))
    }

    public init(_ arg: AnyIMap<String, String>!, _ dummy1: Int32, _ dummy2: Int32, _ dummy3: Int32) {
        super.init(try! Self._IClassFactory.CreateInstance3(arg, dummy1, dummy2, dummy3))
    }

    public init(_ arg: AnyIMapView<String, String>!, _ dummy1: Int32, _ dummy2: Int32, _ dummy3: Int32, _ dummy4: Int32) {
        super.init(try! Self._IClassFactory.CreateInstance4(arg, dummy1, dummy2, dummy3, dummy4))
    }

    public init(_ arg: AnyIVector<String>!, _ dummy1: Int32, _ dummy2: Int32, _ dummy3: Int32, _ dummy4: Int32, _ dummy5: Int32) {
        super.init(try! Self._IClassFactory.CreateInstance5(arg, dummy1, dummy2, dummy3, dummy4, dummy5))
    }

    public init(_ arg: AnyIVectorView<String>!, _ dummy1: Int32, _ dummy2: Int32, _ dummy3: Int32, _ dummy4: Int32, _ dummy5: Int32, _ dummy6: Int32) {
        super.init(try! Self._IClassFactory.CreateInstance6(arg, dummy1, dummy2, dummy3, dummy4, dummy5, dummy6))
    }

    private static let _IClassFactory2: __ABI_test_component.IClassFactory2 = try! RoGetActivationFactory("test_component.Class")
    public init(_ name: String, _ fruit: Fruit, _ implementation: AnyIIAmImplementable!) {
        super.init(try! Self._IClassFactory2.CreateInstance(name, fruit, implementation))
    }

    private static let _IClassStatics: __ABI_test_component.IClassStatics = try! RoGetActivationFactory("test_component.Class")
    public static func staticTest() throws {
        try _IClassStatics.StaticTest()
    }

    public static func staticTestReturn() throws -> Int32 {
        return try _IClassStatics.StaticTestReturn()
    }

    public static func takeBaseAndGiveToCallbackAsObject(_ base: Base!, _ callback: test_component.InObjectDelegate!) throws {
        try _IClassStatics.TakeBaseAndGiveToCallbackAsObject(base, callback)
    }

    public static var staticProperty : Int32 {
        get { try! _IClassStatics.get_StaticProperty() }
    }

    private static let _IClassStatics2: __ABI_test_component.IClassStatics2 = try! RoGetActivationFactory("test_component.Class")
    public static func staticTestReturnFloat() throws -> Float {
        return try _IClassStatics2.StaticTestReturnFloat()
    }

    public static var staticPropertyFloat : Float {
        get { try! _IClassStatics2.get_StaticPropertyFloat() }
        set { try! _IClassStatics2.put_StaticPropertyFloat(newValue) }
    }

    public func setDelegate(_ value: AnyISimpleDelegate!) throws {
        try _default.SetDelegate(value)
    }

    public func getDelegate() throws -> AnyISimpleDelegate! {
        try _default.GetDelegate()
    }

    public func fail(_ message: String) throws {
        try _default.Fail(message)
    }

    public func inInt32(_ value: Int32) throws -> String {
        try _default.InInt32(value)
    }

    public func inString(_ value: String) throws -> String {
        try _default.InString(value)
    }

    public func inObject(_ value: Any!) throws -> String {
        try _default.InObject(value)
    }

    public func inBlittableStructRef(_ value: BlittableStruct) throws -> String {
        try _default.InBlittableStructRef(value)
    }

    public func inNonBlittableStructRef(_ value: NonBlittableStruct) throws -> String {
        try _default.InNonBlittableStructRef(value)
    }

    public func inEnum(_ value: Signed) throws -> String {
        try _default.InEnum(value)
    }

    public func outInt32(_ value: inout Int32) throws {
        try _default.OutInt32(&value)
    }

    public func outString(_ value: inout String) throws {
        try _default.OutString(&value)
    }

    public func outObject(_ value: inout Any!) throws {
        try _default.OutObject(&value)
    }

    public func outStringable(_ value: inout test_component.AnyIStringable!) throws {
        try _default.OutStringable(&value)
    }

    public func outBlittableStruct(_ value: inout BlittableStruct) throws {
        try _default.OutBlittableStruct(&value)
    }

    public func outNonBlittableStruct(_ value: inout NonBlittableStruct) throws {
        try _default.OutNonBlittableStruct(&value)
    }

    public func outEnum(_ value: inout Signed) throws {
        try _default.OutEnum(&value)
    }

    public func returnObject() throws -> Any! {
        try _default.ReturnObject()
    }

    public func returnEnum() throws -> Signed {
        try _default.ReturnEnum()
    }

    public func returnReferenceEnum() throws -> Signed? {
        try _default.ReturnReferenceEnum()
    }

    public func noexceptVoid() {
        try! _default.NoexceptVoid()
    }

    public func noexceptInt32() -> Int32 {
        try! _default.NoexceptInt32()
    }

    public func noexceptString() -> String {
        try! _default.NoexceptString()
    }

    public func raiseDeferrableEventAsync() throws -> AnyIAsyncOperation<Int32>! {
        try _default.RaiseDeferrableEventAsync()
    }

    public func returnChar() throws -> Character {
        try _default.ReturnChar()
    }

    public func inChar(_ value: Character) throws -> String {
        try _default.InChar(value)
    }

    public func outChar(_ value: inout Character) throws {
        try _default.OutChar(&value)
    }

    public var baseNoOverridesProperty : BaseNoOverrides! {
        get { try! _default.get_BaseNoOverridesProperty() }
        set { try! _default.put_BaseNoOverridesProperty(newValue) }
    }

    public var baseProperty : Base! {
        get { try! _default.get_BaseProperty() }
        set { try! _default.put_BaseProperty(newValue) }
    }

    public var enumProperty : Fruit {
        get { try! _default.get_EnumProperty() }
        set { try! _default.put_EnumProperty(newValue) }
    }

    public var id : Foundation.UUID? {
        get { try! _default.get_Id() }
        set { try! _default.put_Id(newValue) }
    }

    public var implementation : AnyIBasic! {
        get { try! _default.get_Implementation() }
        set { try! _default.put_Implementation(newValue) }
    }

    public var startValue : Int32? {
        get { try! _default.get_StartValue() }
        set { try! _default.put_StartValue(newValue) }
    }

    public lazy var deferrableEvent : Event<TypedEventHandler<Class?, DeferrableEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_DeferrableEvent($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_DeferrableEvent($0)
       }
      )
    }()

    private lazy var _IBasic: __ABI_test_component.IBasic! = getInterfaceForCaching()
    public func method() {
        try! _IBasic.Method()
    }

    deinit {
        _default = nil
        _IBasic = nil
    }
}

// MARK: - Class Internals

@_spi(WinRTInternal)
extension __IMPL_test_component {
    public enum ClassBridge: AbiBridge {
        public typealias SwiftProjection = Class
        public typealias CABI = __x_ABI_Ctest__component_CIClass
        public static func from(abi: ComPtr<__x_ABI_Ctest__component_CIClass>?) -> Class? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: test_component.IInspectable(abi))
        }
    }

}
@_spi(WinRTInternal)
public class ClassMaker: MakeFromAbi {
    public typealias SwiftType = Class
    public static func from(abi: test_component.IInspectable) -> SwiftType {
        return Class(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
extension __ABI_test_component {
    private static let IID___x_ABI_Ctest__component_CIClass: test_component.IID = .init(
        Data1: 0x586690C4, Data2: 0x6AE2, Data3: 0x5C62, Data4: ( 0xB5,0x25,0x44,0x4D,0xCC,0x2D,0xEE,0x39 ) // 586690C4-6AE2-5C62-B525-444DCC2DEE39
    ) 

    public class IClass: test_component.IInspectable {
        override public class var IID: test_component.IID { IID___x_ABI_Ctest__component_CIClass }

        public func get_Implementation() throws -> test_component.AnyIBasic? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_Ctest__component_CIClass.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Implementation(pThis, &valueAbi))
                }
            }
            return __ABI_test_component.IBasicWrapper.unwrapFrom(abi: value)
        }

        public func put_Implementation(_ value: test_component.AnyIBasic?) throws {
            let valueWrapper = __ABI_test_component.IBasicWrapper(value)
            let _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_Ctest__component_CIClass.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Implementation(pThis, _value))
            }
        }

        public func SetDelegate(_ value: test_component.AnyISimpleDelegate?) throws {
            let valueWrapper = __ABI_test_component.ISimpleDelegateWrapper(value)
            let _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_Ctest__component_CIClass.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.SetDelegate(pThis, _value))
            }
        }

        public func GetDelegate() throws -> test_component.AnyISimpleDelegate? {
            let (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_Ctest__component_CIClass.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetDelegate(pThis, &resultAbi))
                }
            }
            return __ABI_test_component.ISimpleDelegateWrapper.unwrapFrom(abi: result)
        }

        public func Fail(_ message: String) throws {
            let _message = try! HString(message)
            _ = try perform(as: __x_ABI_Ctest__component_CIClass.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Fail(pThis, _message.get()))
            }
        }

        public func InInt32(_ value: Int32) throws -> String {
            var result: HSTRING?
            _ = try perform(as: __x_ABI_Ctest__component_CIClass.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.InInt32(pThis, value, &result))
            }
            return .init(from: result)
        }

        public func InString(_ value: String) throws -> String {
            var result: HSTRING?
            let _value = try! HString(value)
            _ = try perform(as: __x_ABI_Ctest__component_CIClass.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.InString(pThis, _value.get(), &result))
            }
            return .init(from: result)
        }

        public func InObject(_ value: Any?) throws -> String {
            var result: HSTRING?
            let valueWrapper = __ABI_.AnyWrapper(value)
            let _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_Ctest__component_CIClass.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.InObject(pThis, _value, &result))
            }
            return .init(from: result)
        }

        public func InBlittableStructRef(_ value: test_component.BlittableStruct) throws -> String {
            var result: HSTRING?
            var _value: __x_ABI_Ctest__component_CBlittableStruct = .from(swift: value)
            _ = try perform(as: __x_ABI_Ctest__component_CIClass.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.InBlittableStructRef(pThis, &_value, &result))
            }
            return .init(from: result)
        }

        public func InNonBlittableStructRef(_ value: test_component.NonBlittableStruct) throws -> String {
            var result: HSTRING?
            let _value = __ABI_test_component._ABI_NonBlittableStruct(from: value)
            _ = try perform(as: __x_ABI_Ctest__component_CIClass.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.InNonBlittableStructRef(pThis, &_value.val, &result))
            }
            return .init(from: result)
        }

        public func InEnum(_ value: test_component.Signed) throws -> String {
            var result: HSTRING?
            _ = try perform(as: __x_ABI_Ctest__component_CIClass.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.InEnum(pThis, value, &result))
            }
            return .init(from: result)
        }

        public func OutInt32(_ value: inout Int32) throws {
            _ = try perform(as: __x_ABI_Ctest__component_CIClass.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.OutInt32(pThis, &value))
            }
        }

        public func OutString(_ value: inout String) throws {
            var _value: HSTRING?
            _ = try perform(as: __x_ABI_Ctest__component_CIClass.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.OutString(pThis, &_value))
            }
            value = .init(from: _value)
            WindowsDeleteString(_value)
        }

        public func OutObject(_ value: inout Any?) throws {
            let (_value) = try ComPtrs.initialize { (_valueAbi) in
                _ = try perform(as: __x_ABI_Ctest__component_CIClass.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.OutObject(pThis, &_valueAbi))
                }
            }
            value = __ABI_.AnyWrapper.unwrapFrom(abi: _value)
        }

        public func OutStringable(_ value: inout test_component.AnyIStringable?) throws {
            let (_value) = try ComPtrs.initialize { (_valueAbi) in
                _ = try perform(as: __x_ABI_Ctest__component_CIClass.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.OutStringable(pThis, &_valueAbi))
                }
            }
            value = __ABI_Windows_Foundation.IStringableWrapper.unwrapFrom(abi: _value)
        }

        public func OutBlittableStruct(_ value: inout test_component.BlittableStruct) throws {
            var _value: __x_ABI_Ctest__component_CBlittableStruct = .init()
            _ = try perform(as: __x_ABI_Ctest__component_CIClass.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.OutBlittableStruct(pThis, &_value))
            }
            value = .from(abi: _value)
        }

        public func OutNonBlittableStruct(_ value: inout test_component.NonBlittableStruct) throws {
            let _value: __ABI_test_component._ABI_NonBlittableStruct = .init()
            _ = try perform(as: __x_ABI_Ctest__component_CIClass.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.OutNonBlittableStruct(pThis, &_value.val))
            }
            value = .from(abi: _value.val)
        }

        public func OutEnum(_ value: inout test_component.Signed) throws {
            _ = try perform(as: __x_ABI_Ctest__component_CIClass.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.OutEnum(pThis, &value))
            }
        }

        public func ReturnObject() throws -> Any? {
            let (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_Ctest__component_CIClass.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.ReturnObject(pThis, &resultAbi))
                }
            }
            return __ABI_.AnyWrapper.unwrapFrom(abi: result)
        }

        public func ReturnEnum() throws -> test_component.Signed {
            var result: __x_ABI_Ctest__component_CSigned = .init(0)
            _ = try perform(as: __x_ABI_Ctest__component_CIClass.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.ReturnEnum(pThis, &result))
            }
            return result
        }

        public func ReturnReferenceEnum() throws -> test_component.Signed? {
            let (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_Ctest__component_CIClass.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.ReturnReferenceEnum(pThis, &resultAbi))
                }
            }
            return test_component.__x_ABI_C__FIReference_1___x_ABI_Ctest__zcomponent__CSignedWrapper.unwrapFrom(abi: result)
        }

        public func get_EnumProperty() throws -> test_component.Fruit {
            var value: __x_ABI_Ctest__component_CFruit = .init(0)
            _ = try perform(as: __x_ABI_Ctest__component_CIClass.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_EnumProperty(pThis, &value))
            }
            return value
        }

        public func put_EnumProperty(_ value: test_component.Fruit) throws {
            _ = try perform(as: __x_ABI_Ctest__component_CIClass.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_EnumProperty(pThis, value))
            }
        }

        public func NoexceptVoid() throws {
            _ = try perform(as: __x_ABI_Ctest__component_CIClass.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.NoexceptVoid(pThis))
            }
        }

        public func NoexceptInt32() throws -> Int32 {
            var result: INT32 = 0
            _ = try perform(as: __x_ABI_Ctest__component_CIClass.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.NoexceptInt32(pThis, &result))
            }
            return result
        }

        public func NoexceptString() throws -> String {
            var result: HSTRING?
            _ = try perform(as: __x_ABI_Ctest__component_CIClass.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.NoexceptString(pThis, &result))
            }
            return .init(from: result)
        }

        public func add_DeferrableEvent(_ handler: TypedEventHandler<test_component.Class?, test_component.DeferrableEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = test_component.__x_ABI_C__FITypedEventHandler_2___x_ABI_Ctest__zcomponent__CClass___x_ABI_Ctest__zcomponent__CDeferrableEventArgsWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_Ctest__component_CIClass.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_DeferrableEvent(pThis, _handler, &token))
            }
            return token
        }

        public func remove_DeferrableEvent(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_Ctest__component_CIClass.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_DeferrableEvent(pThis, token))
            }
        }

        public func RaiseDeferrableEventAsync() throws -> test_component.AnyIAsyncOperation<Int32>? {
            let (operation) = try ComPtrs.initialize { operationAbi in
                _ = try perform(as: __x_ABI_Ctest__component_CIClass.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.RaiseDeferrableEventAsync(pThis, &operationAbi))
                }
            }
            return test_component.__x_ABI_C__FIAsyncOperation_1_intWrapper.unwrapFrom(abi: operation)
        }

        public func ReturnChar() throws -> Character {
            var result: WCHAR = 0
            _ = try perform(as: __x_ABI_Ctest__component_CIClass.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.ReturnChar(pThis, &result))
            }
            return .init(from: result)
        }

        public func InChar(_ value: Character) throws -> String {
            var result: HSTRING?
            _ = try perform(as: __x_ABI_Ctest__component_CIClass.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.InChar(pThis, .init(from: value), &result))
            }
            return .init(from: result)
        }

        public func OutChar(_ value: inout Character) throws {
            var _value: WCHAR = .init()
            _ = try perform(as: __x_ABI_Ctest__component_CIClass.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.OutChar(pThis, &_value))
            }
            value = .init(from: _value)
        }

        public func get_StartValue() throws -> Int32? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_Ctest__component_CIClass.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_StartValue(pThis, &valueAbi))
                }
            }
            return test_component.__x_ABI_C__FIReference_1_intWrapper.unwrapFrom(abi: value)
        }

        public func put_StartValue(_ value: Int32?) throws {
            let valueWrapper = test_component.__x_ABI_C__FIReference_1_intWrapper(value)
            let _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_Ctest__component_CIClass.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_StartValue(pThis, _value))
            }
        }

        public func get_Id() throws -> Foundation.UUID? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_Ctest__component_CIClass.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Id(pThis, &valueAbi))
                }
            }
            return test_component.__x_ABI_C__FIReference_1_GUIDWrapper.unwrapFrom(abi: value)
        }

        public func put_Id(_ value: Foundation.UUID?) throws {
            let valueWrapper = test_component.__x_ABI_C__FIReference_1_GUIDWrapper(value)
            let _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_Ctest__component_CIClass.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Id(pThis, _value))
            }
        }

        public func get_BaseProperty() throws -> test_component.Base? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_Ctest__component_CIClass.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_BaseProperty(pThis, &valueAbi))
                }
            }
            return __IMPL_test_component.BaseBridge.from(abi: value)
        }

        public func put_BaseProperty(_ value: test_component.Base?) throws {
            _ = try perform(as: __x_ABI_Ctest__component_CIClass.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_BaseProperty(pThis, RawPointer(value)))
            }
        }

        public func get_BaseNoOverridesProperty() throws -> test_component.BaseNoOverrides? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_Ctest__component_CIClass.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_BaseNoOverridesProperty(pThis, &valueAbi))
                }
            }
            return __IMPL_test_component.BaseNoOverridesBridge.from(abi: value)
        }

        public func put_BaseNoOverridesProperty(_ value: test_component.BaseNoOverrides?) throws {
            _ = try perform(as: __x_ABI_Ctest__component_CIClass.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_BaseNoOverridesProperty(pThis, RawPointer(value)))
            }
        }

    }

    private static let IID___x_ABI_Ctest__component_CIClassFactory: test_component.IID = .init(
        Data1: 0x78914881, Data2: 0xB900, Data3: 0x582A, Data4: ( 0x94,0xB8,0x58,0x19,0x84,0xC0,0xF7,0x8A ) // 78914881-B900-582A-94B8-581984C0F78A
    ) 

    public class IClassFactory: test_component.IInspectable {
        override public class var IID: test_component.IID { IID___x_ABI_Ctest__component_CIClassFactory }

        public func CreateInstance(_ name: String) throws -> IClass {
            let (value) = try ComPtrs.initialize { valueAbi in
                let _name = try! HString(name)
                _ = try perform(as: __x_ABI_Ctest__component_CIClassFactory.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance(pThis, _name.get(), &valueAbi))
                }
            }
            return IClass(value!)
        }

        public func CreateInstance2(_ name: String, _ fruit: test_component.Fruit) throws -> IClass {
            let (value) = try ComPtrs.initialize { valueAbi in
                let _name = try! HString(name)
                _ = try perform(as: __x_ABI_Ctest__component_CIClassFactory.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance2(pThis, _name.get(), fruit, &valueAbi))
                }
            }
            return IClass(value!)
        }

        public func CreateInstance3(_ arg: test_component.AnyIMap<String, String>?, _ dummy1: Int32, _ dummy2: Int32, _ dummy3: Int32) throws -> IClass {
            let (value) = try ComPtrs.initialize { valueAbi in
                let argWrapper = test_component.__x_ABI_C__FIMap_2_HSTRING_HSTRINGWrapper(arg)
                let _arg = try! argWrapper?.toABI { $0 }
                _ = try perform(as: __x_ABI_Ctest__component_CIClassFactory.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance3(pThis, _arg, dummy1, dummy2, dummy3, &valueAbi))
                }
            }
            return IClass(value!)
        }

        public func CreateInstance4(_ arg: test_component.AnyIMapView<String, String>?, _ dummy1: Int32, _ dummy2: Int32, _ dummy3: Int32, _ dummy4: Int32) throws -> IClass {
            let (value) = try ComPtrs.initialize { valueAbi in
                let argWrapper = test_component.__x_ABI_C__FIMapView_2_HSTRING_HSTRINGWrapper(arg)
                let _arg = try! argWrapper?.toABI { $0 }
                _ = try perform(as: __x_ABI_Ctest__component_CIClassFactory.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance4(pThis, _arg, dummy1, dummy2, dummy3, dummy4, &valueAbi))
                }
            }
            return IClass(value!)
        }

        public func CreateInstance5(_ arg: test_component.AnyIVector<String>?, _ dummy1: Int32, _ dummy2: Int32, _ dummy3: Int32, _ dummy4: Int32, _ dummy5: Int32) throws -> IClass {
            let (value) = try ComPtrs.initialize { valueAbi in
                let argWrapper = test_component.__x_ABI_C__FIVector_1_HSTRINGWrapper(arg)
                let _arg = try! argWrapper?.toABI { $0 }
                _ = try perform(as: __x_ABI_Ctest__component_CIClassFactory.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance5(pThis, _arg, dummy1, dummy2, dummy3, dummy4, dummy5, &valueAbi))
                }
            }
            return IClass(value!)
        }

        public func CreateInstance6(_ arg: test_component.AnyIVectorView<String>?, _ dummy1: Int32, _ dummy2: Int32, _ dummy3: Int32, _ dummy4: Int32, _ dummy5: Int32, _ dummy6: Int32) throws -> IClass {
            let (value) = try ComPtrs.initialize { valueAbi in
                let argWrapper = test_component.__x_ABI_C__FIVectorView_1_HSTRINGWrapper(arg)
                let _arg = try! argWrapper?.toABI { $0 }
                _ = try perform(as: __x_ABI_Ctest__component_CIClassFactory.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance6(pThis, _arg, dummy1, dummy2, dummy3, dummy4, dummy5, dummy6, &valueAbi))
                }
            }
            return IClass(value!)
        }

    }

    private static let IID___x_ABI_Ctest__component_CIClassFactory2: test_component.IID = .init(
        Data1: 0xF5F62EBE, Data2: 0x931B, Data3: 0x519B, Data4: ( 0x95,0x1A,0xF1,0x4A,0x4B,0xC7,0x83,0xB1 ) // F5F62EBE-931B-519B-951A-F14A4BC783B1
    ) 

    public class IClassFactory2: test_component.IInspectable {
        override public class var IID: test_component.IID { IID___x_ABI_Ctest__component_CIClassFactory2 }

        public func CreateInstance(_ name: String, _ fruit: test_component.Fruit, _ implementation: test_component.AnyIIAmImplementable?) throws -> IClass {
            let (value) = try ComPtrs.initialize { valueAbi in
                let _name = try! HString(name)
                let implementationWrapper = __ABI_test_component.IIAmImplementableWrapper(implementation)
                let _implementation = try! implementationWrapper?.toABI { $0 }
                _ = try perform(as: __x_ABI_Ctest__component_CIClassFactory2.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance(pThis, _name.get(), fruit, _implementation, &valueAbi))
                }
            }
            return IClass(value!)
        }

    }

    private static let IID___x_ABI_Ctest__component_CIClassStatics: test_component.IID = .init(
        Data1: 0x3E30803C, Data2: 0x35D4, Data3: 0x52A7, Data4: ( 0xB2,0x11,0xFD,0xC5,0xD6,0xAC,0x48,0x7B ) // 3E30803C-35D4-52A7-B211-FDC5D6AC487B
    ) 

    public class IClassStatics: test_component.IInspectable {
        override public class var IID: test_component.IID { IID___x_ABI_Ctest__component_CIClassStatics }

        public func StaticTest() throws {
            _ = try perform(as: __x_ABI_Ctest__component_CIClassStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.StaticTest(pThis))
            }
        }

        public func StaticTestReturn() throws -> Int32 {
            var result: INT32 = 0
            _ = try perform(as: __x_ABI_Ctest__component_CIClassStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.StaticTestReturn(pThis, &result))
            }
            return result
        }

        public func get_StaticProperty() throws -> Int32 {
            var value: INT32 = 0
            _ = try perform(as: __x_ABI_Ctest__component_CIClassStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_StaticProperty(pThis, &value))
            }
            return value
        }

        public func TakeBaseAndGiveToCallbackAsObject(_ base: test_component.Base?, _ callback: test_component.InObjectDelegate?) throws {
            let callbackWrapper = __ABI_test_component_Delegates.InObjectDelegateWrapper(callback)
            let _callback = try! callbackWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_Ctest__component_CIClassStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.TakeBaseAndGiveToCallbackAsObject(pThis, RawPointer(base), _callback))
            }
        }

    }

    private static let IID___x_ABI_Ctest__component_CIClassStatics2: test_component.IID = .init(
        Data1: 0xB341C098, Data2: 0x033D, Data3: 0x5445, Data4: ( 0x86,0x80,0x70,0x3A,0x93,0xBC,0xDF,0x81 ) // B341C098-033D-5445-8680-703A93BCDF81
    ) 

    public class IClassStatics2: test_component.IInspectable {
        override public class var IID: test_component.IID { IID___x_ABI_Ctest__component_CIClassStatics2 }

        public func StaticTestReturnFloat() throws -> Float {
            var result: FLOAT = 0.0
            _ = try perform(as: __x_ABI_Ctest__component_CIClassStatics2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.StaticTestReturnFloat(pThis, &result))
            }
            return result
        }

        public func get_StaticPropertyFloat() throws -> Float {
            var value: FLOAT = 0.0
            _ = try perform(as: __x_ABI_Ctest__component_CIClassStatics2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_StaticPropertyFloat(pThis, &value))
            }
            return value
        }

        public func put_StaticPropertyFloat(_ value: Float) throws {
            _ = try perform(as: __x_ABI_Ctest__component_CIClassStatics2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_StaticPropertyFloat(pThis, value))
            }
        }

    }

}
// MARK: - CollectionTester

public final class CollectionTester : WinRTClass {
    private typealias SwiftABI = __ABI_test_component.ICollectionTester
    private typealias CABI = __x_ABI_Ctest__component_CICollectionTester
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: test_component.IInspectable) {
        super.init(fromAbi)
    }

    private static let _defaultFactory: test_component.IActivationFactory = try! RoGetActivationFactory("test_component.CollectionTester")
    override public init() {
        super.init(try! Self._defaultFactory.ActivateInstance())
    }

    private static let _ICollectionTesterStatics: __ABI_test_component.ICollectionTesterStatics = try! RoGetActivationFactory("test_component.CollectionTester")
    public static func inMap(_ value: AnyIMap<String, String>!) throws -> String {
        return try _ICollectionTesterStatics.InMap(value)
    }

    public static func inMapView(_ value: AnyIMapView<String, String>!) throws -> String {
        return try _ICollectionTesterStatics.InMapView(value)
    }

    public static func inVector(_ value: AnyIVector<String>!) throws -> String {
        return try _ICollectionTesterStatics.InVector(value)
    }

    public static func inVectorView(_ value: AnyIVectorView<String>!) throws -> String {
        return try _ICollectionTesterStatics.InVectorView(value)
    }

    public static func getObjectAt(_ value: AnyIVector<Any?>!, _ index: UInt32, _ callback: ObjectHandler!) throws {
        try _ICollectionTesterStatics.GetObjectAt(value, index, callback)
    }

    public static func vectorAsIterable(_ value: AnyIVector<String>!) throws -> AnyIIterable<String>! {
        return try _ICollectionTesterStatics.VectorAsIterable(value)
    }

    public func returnStoredStringVector() throws -> AnyIVector<String>! {
        try _default.ReturnStoredStringVector()
    }

    public func returnMapFromStringToString() throws -> AnyIMap<String, String>! {
        try _default.ReturnMapFromStringToString()
    }

    deinit {
        _default = nil
    }
}

// MARK: - CollectionTester Internals

@_spi(WinRTInternal)
extension __IMPL_test_component {
    public enum CollectionTesterBridge: AbiBridge {
        public typealias SwiftProjection = CollectionTester
        public typealias CABI = __x_ABI_Ctest__component_CICollectionTester
        public static func from(abi: ComPtr<__x_ABI_Ctest__component_CICollectionTester>?) -> CollectionTester? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: test_component.IInspectable(abi))
        }
    }

}
@_spi(WinRTInternal)
public class CollectionTesterMaker: MakeFromAbi {
    public typealias SwiftType = CollectionTester
    public static func from(abi: test_component.IInspectable) -> SwiftType {
        return CollectionTester(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
extension __ABI_test_component {
    private static let IID___x_ABI_Ctest__component_CICollectionTester: test_component.IID = .init(
        Data1: 0xF8B13FDD, Data2: 0xB785, Data3: 0x53D4, Data4: ( 0xBC,0x69,0xFA,0x7D,0x02,0xBD,0x88,0xE6 ) // F8B13FDD-B785-53D4-BC69-FA7D02BD88E6
    ) 

    public class ICollectionTester: test_component.IInspectable {
        override public class var IID: test_component.IID { IID___x_ABI_Ctest__component_CICollectionTester }

        public func ReturnStoredStringVector() throws -> test_component.AnyIVector<String>? {
            let (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_Ctest__component_CICollectionTester.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.ReturnStoredStringVector(pThis, &resultAbi))
                }
            }
            return test_component.__x_ABI_C__FIVector_1_HSTRINGWrapper.unwrapFrom(abi: result)
        }

        public func ReturnMapFromStringToString() throws -> test_component.AnyIMap<String, String>? {
            let (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_Ctest__component_CICollectionTester.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.ReturnMapFromStringToString(pThis, &resultAbi))
                }
            }
            return test_component.__x_ABI_C__FIMap_2_HSTRING_HSTRINGWrapper.unwrapFrom(abi: result)
        }

    }

    private static let IID___x_ABI_Ctest__component_CICollectionTesterStatics: test_component.IID = .init(
        Data1: 0xA4C0D4B5, Data2: 0xEDA2, Data3: 0x55E5, Data4: ( 0xAD,0x0F,0xCE,0x1F,0x13,0xA9,0x81,0xCC ) // A4C0D4B5-EDA2-55E5-AD0F-CE1F13A981CC
    ) 

    public class ICollectionTesterStatics: test_component.IInspectable {
        override public class var IID: test_component.IID { IID___x_ABI_Ctest__component_CICollectionTesterStatics }

        public func InMap(_ value: test_component.AnyIMap<String, String>?) throws -> String {
            var result: HSTRING?
            let valueWrapper = test_component.__x_ABI_C__FIMap_2_HSTRING_HSTRINGWrapper(value)
            let _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_Ctest__component_CICollectionTesterStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.InMap(pThis, _value, &result))
            }
            return .init(from: result)
        }

        public func InMapView(_ value: test_component.AnyIMapView<String, String>?) throws -> String {
            var result: HSTRING?
            let valueWrapper = test_component.__x_ABI_C__FIMapView_2_HSTRING_HSTRINGWrapper(value)
            let _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_Ctest__component_CICollectionTesterStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.InMapView(pThis, _value, &result))
            }
            return .init(from: result)
        }

        public func InVector(_ value: test_component.AnyIVector<String>?) throws -> String {
            var result: HSTRING?
            let valueWrapper = test_component.__x_ABI_C__FIVector_1_HSTRINGWrapper(value)
            let _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_Ctest__component_CICollectionTesterStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.InVector(pThis, _value, &result))
            }
            return .init(from: result)
        }

        public func InVectorView(_ value: test_component.AnyIVectorView<String>?) throws -> String {
            var result: HSTRING?
            let valueWrapper = test_component.__x_ABI_C__FIVectorView_1_HSTRINGWrapper(value)
            let _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_Ctest__component_CICollectionTesterStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.InVectorView(pThis, _value, &result))
            }
            return .init(from: result)
        }

        public func GetObjectAt(_ value: test_component.AnyIVector<Any?>?, _ index: UInt32, _ callback: test_component.ObjectHandler?) throws {
            let valueWrapper = test_component.__x_ABI_C__FIVector_1_IInspectableWrapper(value)
            let _value = try! valueWrapper?.toABI { $0 }
            let callbackWrapper = __ABI_test_component.ObjectHandlerWrapper(callback)
            let _callback = try! callbackWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_Ctest__component_CICollectionTesterStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetObjectAt(pThis, _value, index, _callback))
            }
        }

        public func VectorAsIterable(_ value: test_component.AnyIVector<String>?) throws -> test_component.AnyIIterable<String>? {
            let (result) = try ComPtrs.initialize { resultAbi in
                let valueWrapper = test_component.__x_ABI_C__FIVector_1_HSTRINGWrapper(value)
                let _value = try! valueWrapper?.toABI { $0 }
                _ = try perform(as: __x_ABI_Ctest__component_CICollectionTesterStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.VectorAsIterable(pThis, _value, &resultAbi))
                }
            }
            return test_component.__x_ABI_C__FIIterable_1_HSTRINGWrapper.unwrapFrom(abi: result)
        }

    }

}
// MARK: - DeferrableEventArgs

public final class DeferrableEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_test_component.IDeferrableEventArgs
    private typealias CABI = __x_ABI_Ctest__component_CIDeferrableEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: test_component.IInspectable) {
        super.init(fromAbi)
    }

    public func getDeferral() throws -> test_component.Deferral! {
        try _default.GetDeferral()
    }

    public func incrementCounter() throws {
        try _default.IncrementCounter()
    }

    deinit {
        _default = nil
    }
}

// MARK: - DeferrableEventArgs Internals

@_spi(WinRTInternal)
extension __IMPL_test_component {
    public enum DeferrableEventArgsBridge: AbiBridge {
        public typealias SwiftProjection = DeferrableEventArgs
        public typealias CABI = __x_ABI_Ctest__component_CIDeferrableEventArgs
        public static func from(abi: ComPtr<__x_ABI_Ctest__component_CIDeferrableEventArgs>?) -> DeferrableEventArgs? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: test_component.IInspectable(abi))
        }
    }

}
@_spi(WinRTInternal)
public class DeferrableEventArgsMaker: MakeFromAbi {
    public typealias SwiftType = DeferrableEventArgs
    public static func from(abi: test_component.IInspectable) -> SwiftType {
        return DeferrableEventArgs(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
extension __ABI_test_component {
    private static let IID___x_ABI_Ctest__component_CIDeferrableEventArgs: test_component.IID = .init(
        Data1: 0xDA7B0340, Data2: 0x93E0, Data3: 0x5D49, Data4: ( 0xA7,0xF3,0x0F,0xCA,0x6E,0x90,0x02,0x3C ) // DA7B0340-93E0-5D49-A7F3-0FCA6E90023C
    ) 

    public class IDeferrableEventArgs: test_component.IInspectable {
        override public class var IID: test_component.IID { IID___x_ABI_Ctest__component_CIDeferrableEventArgs }

        public func GetDeferral() throws -> test_component.Deferral? {
            let (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_Ctest__component_CIDeferrableEventArgs.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetDeferral(pThis, &resultAbi))
                }
            }
            return __IMPL_Windows_Foundation.DeferralBridge.from(abi: result)
        }

        public func IncrementCounter() throws {
            _ = try perform(as: __x_ABI_Ctest__component_CIDeferrableEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.IncrementCounter(pThis))
            }
        }

    }

}
// MARK: - Derived

public final class Derived : test_component.Base {
    private typealias SwiftABI = __ABI_test_component.IDerived
    private typealias CABI = __x_ABI_Ctest__component_CIDerived
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: test_component.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    private static let _defaultFactory: test_component.IActivationFactory = try! RoGetActivationFactory("test_component.Derived")
    override public init() {
        super.init(fromAbi: try! Self._defaultFactory.ActivateInstance())
    }

    private static let _IDerivedStatics: __ABI_test_component.IDerivedStatics = try! RoGetActivationFactory("test_component.Derived")
    override public static func createFromString(_ value: String) throws -> Derived! {
        return try _IDerivedStatics.CreateFromString(value)
    }

    public var prop : Int32 {
        get { try! _default.get_Prop() }
        set { try! _default.put_Prop(newValue) }
    }

    deinit {
        _default = nil
    }
}

// MARK: - Derived Internals

@_spi(WinRTInternal)
extension __IMPL_test_component {
    public enum DerivedBridge: AbiBridge {
        public typealias SwiftProjection = Derived
        public typealias CABI = __x_ABI_Ctest__component_CIDerived
        public static func from(abi: ComPtr<__x_ABI_Ctest__component_CIDerived>?) -> Derived? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: test_component.IInspectable(abi))
        }
    }

}
@_spi(WinRTInternal)
public class DerivedMaker: MakeFromAbi {
    public typealias SwiftType = Derived
    public static func from(abi: test_component.IInspectable) -> SwiftType {
        return Derived(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
extension __ABI_test_component {
    private static let IID___x_ABI_Ctest__component_CIDerived: test_component.IID = .init(
        Data1: 0x864F4DCB, Data2: 0xC4FF, Data3: 0x5FBB, Data4: ( 0xB4,0x5D,0xA7,0x3E,0x25,0x7B,0x48,0xA2 ) // 864F4DCB-C4FF-5FBB-B45D-A73E257B48A2
    ) 

    public class IDerived: test_component.IInspectable {
        override public class var IID: test_component.IID { IID___x_ABI_Ctest__component_CIDerived }

        public func get_Prop() throws -> Int32 {
            var value: INT32 = 0
            _ = try perform(as: __x_ABI_Ctest__component_CIDerived.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Prop(pThis, &value))
            }
            return value
        }

        public func put_Prop(_ value: Int32) throws {
            _ = try perform(as: __x_ABI_Ctest__component_CIDerived.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Prop(pThis, value))
            }
        }

    }

    private static let IID___x_ABI_Ctest__component_CIDerivedStatics: test_component.IID = .init(
        Data1: 0x5DE6D589, Data2: 0x61EC, Data3: 0x5020, Data4: ( 0x80,0x3A,0x3E,0x62,0x6C,0x8B,0xBC,0x8E ) // 5DE6D589-61EC-5020-803A-3E626C8BBC8E
    ) 

    public class IDerivedStatics: test_component.IInspectable {
        override public class var IID: test_component.IID { IID___x_ABI_Ctest__component_CIDerivedStatics }

        public func CreateFromString(_ value: String) throws -> test_component.Derived? {
            let (result) = try ComPtrs.initialize { resultAbi in
                let _value = try! HString(value)
                _ = try perform(as: __x_ABI_Ctest__component_CIDerivedStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateFromString(pThis, _value.get(), &resultAbi))
                }
            }
            return __IMPL_test_component.DerivedBridge.from(abi: result)
        }

    }

}
// MARK: - DerivedFromNoConstructor

public final class DerivedFromNoConstructor : test_component.UnsealedDerivedNoConstructor {
    private typealias SwiftABI = __ABI_test_component.IDerivedFromNoConstructor
    private typealias CABI = __x_ABI_Ctest__component_CIDerivedFromNoConstructor
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: test_component.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    public func method() throws {
        try _default.Method()
    }

    deinit {
        _default = nil
    }
}

// MARK: - DerivedFromNoConstructor Internals

@_spi(WinRTInternal)
extension __IMPL_test_component {
    public enum DerivedFromNoConstructorBridge: AbiBridge {
        public typealias SwiftProjection = DerivedFromNoConstructor
        public typealias CABI = __x_ABI_Ctest__component_CIDerivedFromNoConstructor
        public static func from(abi: ComPtr<__x_ABI_Ctest__component_CIDerivedFromNoConstructor>?) -> DerivedFromNoConstructor? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: test_component.IInspectable(abi))
        }
    }

}
@_spi(WinRTInternal)
public class DerivedFromNoConstructorMaker: MakeFromAbi {
    public typealias SwiftType = DerivedFromNoConstructor
    public static func from(abi: test_component.IInspectable) -> SwiftType {
        return DerivedFromNoConstructor(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
extension __ABI_test_component {
    private static let IID___x_ABI_Ctest__component_CIDerivedFromNoConstructor: test_component.IID = .init(
        Data1: 0x2A9D928D, Data2: 0xAD55, Data3: 0x59EC, Data4: ( 0x9B,0x73,0xE2,0xED,0x06,0x57,0xE6,0xC4 ) // 2A9D928D-AD55-59EC-9B73-E2ED0657E6C4
    ) 

    public class IDerivedFromNoConstructor: test_component.IInspectable {
        override public class var IID: test_component.IID { IID___x_ABI_Ctest__component_CIDerivedFromNoConstructor }

        public func Method() throws {
            _ = try perform(as: __x_ABI_Ctest__component_CIDerivedFromNoConstructor.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Method(pThis))
            }
        }

    }

}
// MARK: - EventTester

public final class EventTester : WinRTClass {
    private typealias SwiftABI = __ABI_test_component.IEventTester
    private typealias CABI = __x_ABI_Ctest__component_CIEventTester
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: test_component.IInspectable) {
        super.init(fromAbi)
    }

    private static let _IEventTesterFactory: __ABI_test_component.IEventTesterFactory = try! RoGetActivationFactory("test_component.EventTester")
    public init(_ impl: AnyIIAmImplementable!) {
        super.init(try! Self._IEventTesterFactory.CreateInstance(impl))
    }

    public func subscribe() throws {
        try _default.Subscribe()
    }

    public func unsubscribe() throws {
        try _default.Unsubscribe()
    }

    public func getResult() throws -> String {
        try _default.GetResult()
    }

    public var count : Int32 {
        get { try! _default.get_Count() }
    }

    deinit {
        _default = nil
    }
}

// MARK: - EventTester Internals

@_spi(WinRTInternal)
extension __IMPL_test_component {
    public enum EventTesterBridge: AbiBridge {
        public typealias SwiftProjection = EventTester
        public typealias CABI = __x_ABI_Ctest__component_CIEventTester
        public static func from(abi: ComPtr<__x_ABI_Ctest__component_CIEventTester>?) -> EventTester? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: test_component.IInspectable(abi))
        }
    }

}
@_spi(WinRTInternal)
public class EventTesterMaker: MakeFromAbi {
    public typealias SwiftType = EventTester
    public static func from(abi: test_component.IInspectable) -> SwiftType {
        return EventTester(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
extension __ABI_test_component {
    private static let IID___x_ABI_Ctest__component_CIEventTester: test_component.IID = .init(
        Data1: 0xDD19BE65, Data2: 0x638D, Data3: 0x519A, Data4: ( 0x81,0xA9,0x73,0x3F,0xDB,0xD8,0x7A,0x17 ) // DD19BE65-638D-519A-81A9-733FDBD87A17
    ) 

    public class IEventTester: test_component.IInspectable {
        override public class var IID: test_component.IID { IID___x_ABI_Ctest__component_CIEventTester }

        public func Subscribe() throws {
            _ = try perform(as: __x_ABI_Ctest__component_CIEventTester.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Subscribe(pThis))
            }
        }

        public func Unsubscribe() throws {
            _ = try perform(as: __x_ABI_Ctest__component_CIEventTester.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Unsubscribe(pThis))
            }
        }

        public func GetResult() throws -> String {
            var result: HSTRING?
            _ = try perform(as: __x_ABI_Ctest__component_CIEventTester.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetResult(pThis, &result))
            }
            return .init(from: result)
        }

        public func get_Count() throws -> Int32 {
            var value: INT32 = 0
            _ = try perform(as: __x_ABI_Ctest__component_CIEventTester.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Count(pThis, &value))
            }
            return value
        }

    }

    private static let IID___x_ABI_Ctest__component_CIEventTesterFactory: test_component.IID = .init(
        Data1: 0x9E6F50EC, Data2: 0x0F53, Data3: 0x5507, Data4: ( 0xB7,0x37,0x14,0x3B,0x1B,0xB3,0x53,0x65 ) // 9E6F50EC-0F53-5507-B737-143B1BB35365
    ) 

    public class IEventTesterFactory: test_component.IInspectable {
        override public class var IID: test_component.IID { IID___x_ABI_Ctest__component_CIEventTesterFactory }

        public func CreateInstance(_ impl: test_component.AnyIIAmImplementable?) throws -> IEventTester {
            let (value) = try ComPtrs.initialize { valueAbi in
                let implWrapper = __ABI_test_component.IIAmImplementableWrapper(impl)
                let _impl = try! implWrapper?.toABI { $0 }
                _ = try perform(as: __x_ABI_Ctest__component_CIEventTesterFactory.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance(pThis, _impl, &valueAbi))
                }
            }
            return IEventTester(value!)
        }

    }

}
// MARK: - NoopClosable

public final class NoopClosable : WinRTClass, test_component.IClosable {
    private typealias SwiftABI = __ABI_Windows_Foundation.IClosable
    private typealias CABI = __x_ABI_CWindows_CFoundation_CIClosable
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: test_component.IInspectable) {
        super.init(fromAbi)
    }

    override public func queryInterface(_ iid: test_component.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static let _defaultFactory: test_component.IActivationFactory = try! RoGetActivationFactory("test_component.NoopClosable")
    override public init() {
        super.init(try! Self._defaultFactory.ActivateInstance())
    }

    public func close() throws {
        try _default.Close()
    }

    deinit {
        _default = nil
    }
}

// MARK: - NoopClosable Internals

@_spi(WinRTInternal)
extension __IMPL_test_component {
    public enum NoopClosableBridge: AbiBridge {
        public typealias SwiftProjection = NoopClosable
        public typealias CABI = __x_ABI_CWindows_CFoundation_CIClosable
        public static func from(abi: ComPtr<__x_ABI_CWindows_CFoundation_CIClosable>?) -> NoopClosable? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: test_component.IInspectable(abi))
        }
    }

}
@_spi(WinRTInternal)
public class NoopClosableMaker: MakeFromAbi {
    public typealias SwiftType = NoopClosable
    public static func from(abi: test_component.IInspectable) -> SwiftType {
        return NoopClosable(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
extension __ABI_test_component {
}
// MARK: - NullValues

public final class NullValues {
    private static let _INullValuesStatics: __ABI_test_component.INullValuesStatics = try! RoGetActivationFactory("test_component.NullValues")
    public static func isObjectNull(_ value: Any!) throws -> Bool {
        return try _INullValuesStatics.IsObjectNull(value)
    }

    public static func isInterfaceNull(_ value: test_component.AnyIClosable!) throws -> Bool {
        return try _INullValuesStatics.IsInterfaceNull(value)
    }

    public static func isGenericInterfaceNull(_ value: AnyIVector<String>!) throws -> Bool {
        return try _INullValuesStatics.IsGenericInterfaceNull(value)
    }

    public static func isClassNull(_ value: NoopClosable!) throws -> Bool {
        return try _INullValuesStatics.IsClassNull(value)
    }

    public static func isDelegateNull(_ value: VoidToVoidDelegate!) throws -> Bool {
        return try _INullValuesStatics.IsDelegateNull(value)
    }

    public static func getNullObject() throws -> Any! {
        return try _INullValuesStatics.GetNullObject()
    }

    public static func getNullInterface() throws -> test_component.AnyIClosable! {
        return try _INullValuesStatics.GetNullInterface()
    }

    public static func getNullGenericInterface() throws -> AnyIVector<String>! {
        return try _INullValuesStatics.GetNullGenericInterface()
    }

    public static func getNullClass() throws -> NoopClosable! {
        return try _INullValuesStatics.GetNullClass()
    }

    public static func getNullDelegate() throws -> VoidToVoidDelegate! {
        return try _INullValuesStatics.GetNullDelegate()
    }

}

// MARK: - NullValues Internals

@_spi(WinRTInternal)
extension __ABI_test_component {
    private static let IID___x_ABI_Ctest__component_CINullValuesStatics: test_component.IID = .init(
        Data1: 0x4F2BB96B, Data2: 0xB91D, Data3: 0x51E5, Data4: ( 0xA5,0x89,0x26,0x52,0xC1,0x65,0xA8,0xB5 ) // 4F2BB96B-B91D-51E5-A589-2652C165A8B5
    ) 

    public class INullValuesStatics: test_component.IInspectable {
        override public class var IID: test_component.IID { IID___x_ABI_Ctest__component_CINullValuesStatics }

        public func IsObjectNull(_ value: Any?) throws -> Bool {
            var result: boolean = 0
            let valueWrapper = __ABI_.AnyWrapper(value)
            let _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_Ctest__component_CINullValuesStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.IsObjectNull(pThis, _value, &result))
            }
            return .init(from: result)
        }

        public func IsInterfaceNull(_ value: test_component.AnyIClosable?) throws -> Bool {
            var result: boolean = 0
            let valueWrapper = __ABI_Windows_Foundation.IClosableWrapper(value)
            let _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_Ctest__component_CINullValuesStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.IsInterfaceNull(pThis, _value, &result))
            }
            return .init(from: result)
        }

        public func IsGenericInterfaceNull(_ value: test_component.AnyIVector<String>?) throws -> Bool {
            var result: boolean = 0
            let valueWrapper = test_component.__x_ABI_C__FIVector_1_HSTRINGWrapper(value)
            let _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_Ctest__component_CINullValuesStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.IsGenericInterfaceNull(pThis, _value, &result))
            }
            return .init(from: result)
        }

        public func IsClassNull(_ value: test_component.NoopClosable?) throws -> Bool {
            var result: boolean = 0
            _ = try perform(as: __x_ABI_Ctest__component_CINullValuesStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.IsClassNull(pThis, RawPointer(value), &result))
            }
            return .init(from: result)
        }

        public func IsDelegateNull(_ value: test_component.VoidToVoidDelegate?) throws -> Bool {
            var result: boolean = 0
            let valueWrapper = __ABI_test_component.VoidToVoidDelegateWrapper(value)
            let _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_Ctest__component_CINullValuesStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.IsDelegateNull(pThis, _value, &result))
            }
            return .init(from: result)
        }

        public func GetNullObject() throws -> Any? {
            let (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_Ctest__component_CINullValuesStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetNullObject(pThis, &resultAbi))
                }
            }
            return __ABI_.AnyWrapper.unwrapFrom(abi: result)
        }

        public func GetNullInterface() throws -> test_component.AnyIClosable? {
            let (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_Ctest__component_CINullValuesStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetNullInterface(pThis, &resultAbi))
                }
            }
            return __ABI_Windows_Foundation.IClosableWrapper.unwrapFrom(abi: result)
        }

        public func GetNullGenericInterface() throws -> test_component.AnyIVector<String>? {
            let (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_Ctest__component_CINullValuesStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetNullGenericInterface(pThis, &resultAbi))
                }
            }
            return test_component.__x_ABI_C__FIVector_1_HSTRINGWrapper.unwrapFrom(abi: result)
        }

        public func GetNullClass() throws -> test_component.NoopClosable? {
            let (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_Ctest__component_CINullValuesStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetNullClass(pThis, &resultAbi))
                }
            }
            return __IMPL_test_component.NoopClosableBridge.from(abi: result)
        }

        public func GetNullDelegate() throws -> test_component.VoidToVoidDelegate? {
            let (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_Ctest__component_CINullValuesStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetNullDelegate(pThis, &resultAbi))
                }
            }
            return __ABI_test_component.VoidToVoidDelegateWrapper.unwrapFrom(abi: result)
        }

    }

}
// MARK: - Simple

public final class Simple : WinRTClass {
    private typealias SwiftABI = __ABI_test_component.ISimple
    private typealias CABI = __x_ABI_Ctest__component_CISimple
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: test_component.IInspectable) {
        super.init(fromAbi)
    }

    private static let _defaultFactory: test_component.IActivationFactory = try! RoGetActivationFactory("test_component.Simple")
    override public init() {
        super.init(try! Self._defaultFactory.ActivateInstance())
    }

    private static let _ISimpleStatics: __ABI_test_component.ISimpleStatics = try! RoGetActivationFactory("test_component.Simple")
    public static func fireStaticEvent() throws {
        try _ISimpleStatics.FireStaticEvent()
    }

    public static var staticEvent : Event<EventHandler<Any?>> = {
      .init(
        add: { try! _ISimpleStatics.add_StaticEvent($0) },
        remove: { try? _ISimpleStatics.remove_StaticEvent($0) }
      )
    }()

    public func method() throws {
        try _default.Method()
    }

    public func operation(_ value: test_component.DateTime) throws -> AnyIAsyncOperation<Int32>! {
        try _default.Operation(value)
    }

    public func action(_ value: test_component.DateTime) throws -> test_component.AnyIAsyncAction! {
        try _default.Action(value)
    }

    public func object(_ value: test_component.DateTime) throws -> Any! {
        try _default.Object(value)
    }

    public func returnBlittableStruct() throws -> BlittableStruct {
        try _default.ReturnBlittableStruct()
    }

    public func takeBlittableStruct(_ value: BlittableStruct) throws {
        try _default.TakeBlittableStruct(value)
    }

    public func returnStructWithReference() throws -> StructWithIReference {
        try _default.ReturnStructWithReference()
    }

    public func takeStructWithReference(_ value: StructWithIReference) throws {
        try _default.TakeStructWithReference(value)
    }

    public func returnNonBlittableStruct() throws -> NonBlittableStruct {
        try _default.ReturnNonBlittableStruct()
    }

    public func takeNonBlittableStruct(_ value: NonBlittableStruct) throws {
        try _default.TakeNonBlittableStruct(value)
    }

    public func fireEvent() throws {
        try _default.FireEvent()
    }

    public var blittableStructProperty : BlittableStruct {
        get { try! _default.get_BlittableStructProperty() }
        set { try! _default.put_BlittableStructProperty(newValue) }
    }

    public var nonBlittableStructProperty : NonBlittableStruct {
        get { try! _default.get_NonBlittableStructProperty() }
        set { try! _default.put_NonBlittableStructProperty(newValue) }
    }

    public var stringProperty : String {
        get { try! _default.get_StringProperty() }
        set { try! _default.put_StringProperty(newValue) }
    }

    public var structWithReferenceProperty : StructWithIReference {
        get { try! _default.get_StructWithReferenceProperty() }
        set { try! _default.put_StructWithReferenceProperty(newValue) }
    }

    public lazy var inEvent : Event<test_component.InDelegate> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_InEvent($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_InEvent($0)
       }
      )
    }()

    public lazy var signalEvent : Event<test_component.SignalDelegate> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_SignalEvent($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_SignalEvent($0)
       }
      )
    }()

    public lazy var simpleEvent : Event<TypedEventHandler<Simple?, SimpleEventArgs>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_SimpleEvent($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_SimpleEvent($0)
       }
      )
    }()

    deinit {
        _default = nil
    }
}

// MARK: - Simple Internals

@_spi(WinRTInternal)
extension __IMPL_test_component {
    public enum SimpleBridge: AbiBridge {
        public typealias SwiftProjection = Simple
        public typealias CABI = __x_ABI_Ctest__component_CISimple
        public static func from(abi: ComPtr<__x_ABI_Ctest__component_CISimple>?) -> Simple? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: test_component.IInspectable(abi))
        }
    }

}
@_spi(WinRTInternal)
public class SimpleMaker: MakeFromAbi {
    public typealias SwiftType = Simple
    public static func from(abi: test_component.IInspectable) -> SwiftType {
        return Simple(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
extension __ABI_test_component {
    private static let IID___x_ABI_Ctest__component_CISimple: test_component.IID = .init(
        Data1: 0xAE7B4545, Data2: 0xD9D0, Data3: 0x5655, Data4: ( 0xB1,0xDE,0xA0,0x7D,0xA1,0x3B,0xD8,0x9B ) // AE7B4545-D9D0-5655-B1DE-A07DA13BD89B
    ) 

    public class ISimple: test_component.IInspectable {
        override public class var IID: test_component.IID { IID___x_ABI_Ctest__component_CISimple }

        public func Method() throws {
            _ = try perform(as: __x_ABI_Ctest__component_CISimple.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Method(pThis))
            }
        }

        public func Operation(_ value: test_component.DateTime) throws -> test_component.AnyIAsyncOperation<Int32>? {
            let (operation) = try ComPtrs.initialize { operationAbi in
                _ = try perform(as: __x_ABI_Ctest__component_CISimple.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.Operation(pThis, .from(swift: value), &operationAbi))
                }
            }
            return test_component.__x_ABI_C__FIAsyncOperation_1_intWrapper.unwrapFrom(abi: operation)
        }

        public func Action(_ value: test_component.DateTime) throws -> test_component.AnyIAsyncAction? {
            let (operation) = try ComPtrs.initialize { operationAbi in
                _ = try perform(as: __x_ABI_Ctest__component_CISimple.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.Action(pThis, .from(swift: value), &operationAbi))
                }
            }
            return __ABI_Windows_Foundation.IAsyncActionWrapper.unwrapFrom(abi: operation)
        }

        public func Object(_ value: test_component.DateTime) throws -> Any? {
            let (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_Ctest__component_CISimple.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.Object(pThis, .from(swift: value), &resultAbi))
                }
            }
            return __ABI_.AnyWrapper.unwrapFrom(abi: result)
        }

        public func ReturnBlittableStruct() throws -> test_component.BlittableStruct {
            var result: __x_ABI_Ctest__component_CBlittableStruct = .init()
            _ = try perform(as: __x_ABI_Ctest__component_CISimple.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.ReturnBlittableStruct(pThis, &result))
            }
            return .from(abi: result)
        }

        public func TakeBlittableStruct(_ value: test_component.BlittableStruct) throws {
            _ = try perform(as: __x_ABI_Ctest__component_CISimple.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.TakeBlittableStruct(pThis, .from(swift: value)))
            }
        }

        public func get_BlittableStructProperty() throws -> test_component.BlittableStruct {
            var value: __x_ABI_Ctest__component_CBlittableStruct = .init()
            _ = try perform(as: __x_ABI_Ctest__component_CISimple.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_BlittableStructProperty(pThis, &value))
            }
            return .from(abi: value)
        }

        public func put_BlittableStructProperty(_ value: test_component.BlittableStruct) throws {
            _ = try perform(as: __x_ABI_Ctest__component_CISimple.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_BlittableStructProperty(pThis, .from(swift: value)))
            }
        }

        public func ReturnStructWithReference() throws -> test_component.StructWithIReference {
            var result: __x_ABI_Ctest__component_CStructWithIReference = .init()
            _ = try perform(as: __x_ABI_Ctest__component_CISimple.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.ReturnStructWithReference(pThis, &result))
            }
            return .from(abi: result)
        }

        public func TakeStructWithReference(_ value: test_component.StructWithIReference) throws {
            let _value = __ABI_test_component._ABI_StructWithIReference(from: value)
            _ = try perform(as: __x_ABI_Ctest__component_CISimple.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.TakeStructWithReference(pThis, _value.val))
            }
        }

        public func get_StructWithReferenceProperty() throws -> test_component.StructWithIReference {
            var value: __x_ABI_Ctest__component_CStructWithIReference = .init()
            _ = try perform(as: __x_ABI_Ctest__component_CISimple.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_StructWithReferenceProperty(pThis, &value))
            }
            return .from(abi: value)
        }

        public func put_StructWithReferenceProperty(_ value: test_component.StructWithIReference) throws {
            let _value = __ABI_test_component._ABI_StructWithIReference(from: value)
            _ = try perform(as: __x_ABI_Ctest__component_CISimple.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_StructWithReferenceProperty(pThis, _value.val))
            }
        }

        public func ReturnNonBlittableStruct() throws -> test_component.NonBlittableStruct {
            var result: __x_ABI_Ctest__component_CNonBlittableStruct = .init()
            _ = try perform(as: __x_ABI_Ctest__component_CISimple.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.ReturnNonBlittableStruct(pThis, &result))
            }
            return .from(abi: result)
        }

        public func TakeNonBlittableStruct(_ value: test_component.NonBlittableStruct) throws {
            let _value = __ABI_test_component._ABI_NonBlittableStruct(from: value)
            _ = try perform(as: __x_ABI_Ctest__component_CISimple.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.TakeNonBlittableStruct(pThis, _value.val))
            }
        }

        public func get_NonBlittableStructProperty() throws -> test_component.NonBlittableStruct {
            var value: __x_ABI_Ctest__component_CNonBlittableStruct = .init()
            _ = try perform(as: __x_ABI_Ctest__component_CISimple.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_NonBlittableStructProperty(pThis, &value))
            }
            return .from(abi: value)
        }

        public func put_NonBlittableStructProperty(_ value: test_component.NonBlittableStruct) throws {
            let _value = __ABI_test_component._ABI_NonBlittableStruct(from: value)
            _ = try perform(as: __x_ABI_Ctest__component_CISimple.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_NonBlittableStructProperty(pThis, _value.val))
            }
        }

        public func get_StringProperty() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_Ctest__component_CISimple.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_StringProperty(pThis, &value))
            }
            return .init(from: value)
        }

        public func put_StringProperty(_ value: String) throws {
            let _value = try! HString(value)
            _ = try perform(as: __x_ABI_Ctest__component_CISimple.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_StringProperty(pThis, _value.get()))
            }
        }

        public func add_SignalEvent(_ handler: test_component.SignalDelegate?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = __ABI_test_component_Delegates.SignalDelegateWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_Ctest__component_CISimple.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_SignalEvent(pThis, _handler, &token))
            }
            return token
        }

        public func remove_SignalEvent(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_Ctest__component_CISimple.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_SignalEvent(pThis, token))
            }
        }

        public func add_InEvent(_ handler: test_component.InDelegate?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = __ABI_test_component_Delegates.InDelegateWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_Ctest__component_CISimple.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_InEvent(pThis, _handler, &token))
            }
            return token
        }

        public func remove_InEvent(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_Ctest__component_CISimple.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_InEvent(pThis, token))
            }
        }

        public func add_SimpleEvent(_ handler: TypedEventHandler<test_component.Simple?, test_component.SimpleEventArgs>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = test_component.__x_ABI_C__FITypedEventHandler_2___x_ABI_Ctest__zcomponent__CSimple___x_ABI_Ctest__zcomponent__CSimpleEventArgsWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_Ctest__component_CISimple.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_SimpleEvent(pThis, _handler, &token))
            }
            return token
        }

        public func remove_SimpleEvent(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_Ctest__component_CISimple.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_SimpleEvent(pThis, token))
            }
        }

        public func FireEvent() throws {
            _ = try perform(as: __x_ABI_Ctest__component_CISimple.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.FireEvent(pThis))
            }
        }

    }

    private static let IID___x_ABI_Ctest__component_CISimpleOverrides: test_component.IID = .init(
        Data1: 0x2F772B66, Data2: 0xE6BE, Data3: 0x51E4, Data4: ( 0xB9,0x22,0x01,0x9D,0x56,0xF7,0xEF,0xD1 ) // 2F772B66-E6BE-51E4-B922-019D56F7EFD1
    ) 

    public class ISimpleOverrides: test_component.IInspectable {
        override public class var IID: test_component.IID { IID___x_ABI_Ctest__component_CISimpleOverrides }

        public func CantActuallyOverrideBecauseNotComposable() throws {
            _ = try perform(as: __x_ABI_Ctest__component_CISimpleOverrides.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.CantActuallyOverrideBecauseNotComposable(pThis))
            }
        }

    }

    private static let IID___x_ABI_Ctest__component_CISimpleStatics: test_component.IID = .init(
        Data1: 0xC8DCADA0, Data2: 0xFD8E, Data3: 0x5E27, Data4: ( 0x95,0x51,0xA3,0x68,0xFE,0x1D,0x11,0xB2 ) // C8DCADA0-FD8E-5E27-9551-A368FE1D11B2
    ) 

    public class ISimpleStatics: test_component.IInspectable {
        override public class var IID: test_component.IID { IID___x_ABI_Ctest__component_CISimpleStatics }

        public func add_StaticEvent(_ handler: EventHandler<Any?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = test_component.__x_ABI_C__FIEventHandler_1_IInspectableWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_Ctest__component_CISimpleStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_StaticEvent(pThis, _handler, &token))
            }
            return token
        }

        public func remove_StaticEvent(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_Ctest__component_CISimpleStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_StaticEvent(pThis, token))
            }
        }

        public func FireStaticEvent() throws {
            _ = try perform(as: __x_ABI_Ctest__component_CISimpleStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.FireStaticEvent(pThis))
            }
        }

    }

}
// MARK: - StaticClass

public final class StaticClass {
    private static let _IStaticClassStatics: __ABI_test_component.IStaticClassStatics = try! RoGetActivationFactory("test_component.StaticClass")
    public static func inEnum(_ value: Signed) throws -> String {
        return try _IStaticClassStatics.InEnum(value)
    }

    public static func inNonBlittableStruct(_ value: NonBlittableStruct) throws -> String {
        return try _IStaticClassStatics.InNonBlittableStruct(value)
    }

    public static func takeBase(_ base: Base!) throws {
        try _IStaticClassStatics.TakeBase(base)
    }

    public static var enumProperty : Fruit {
        get { try! _IStaticClassStatics.get_EnumProperty() }
        set { try! _IStaticClassStatics.put_EnumProperty(newValue) }
    }

}

// MARK: - StaticClass Internals

@_spi(WinRTInternal)
extension __ABI_test_component {
    private static let IID___x_ABI_Ctest__component_CIStaticClassStatics: test_component.IID = .init(
        Data1: 0x92E618EF, Data2: 0xFF6E, Data3: 0x5975, Data4: ( 0x86,0x8C,0x99,0xAD,0xC1,0x1D,0x36,0xDE ) // 92E618EF-FF6E-5975-868C-99ADC11D36DE
    ) 

    public class IStaticClassStatics: test_component.IInspectable {
        override public class var IID: test_component.IID { IID___x_ABI_Ctest__component_CIStaticClassStatics }

        public func get_EnumProperty() throws -> test_component.Fruit {
            var value: __x_ABI_Ctest__component_CFruit = .init(0)
            _ = try perform(as: __x_ABI_Ctest__component_CIStaticClassStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_EnumProperty(pThis, &value))
            }
            return value
        }

        public func put_EnumProperty(_ value: test_component.Fruit) throws {
            _ = try perform(as: __x_ABI_Ctest__component_CIStaticClassStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_EnumProperty(pThis, value))
            }
        }

        public func InEnum(_ value: test_component.Signed) throws -> String {
            var result: HSTRING?
            _ = try perform(as: __x_ABI_Ctest__component_CIStaticClassStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.InEnum(pThis, value, &result))
            }
            return .init(from: result)
        }

        public func InNonBlittableStruct(_ value: test_component.NonBlittableStruct) throws -> String {
            var result: HSTRING?
            let _value = __ABI_test_component._ABI_NonBlittableStruct(from: value)
            _ = try perform(as: __x_ABI_Ctest__component_CIStaticClassStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.InNonBlittableStruct(pThis, _value.val, &result))
            }
            return .init(from: result)
        }

        public func TakeBase(_ base: test_component.Base?) throws {
            _ = try perform(as: __x_ABI_Ctest__component_CIStaticClassStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.TakeBase(pThis, RawPointer(base)))
            }
        }

    }

}
// MARK: - UnsealedDerived

open class UnsealedDerived : test_component.Base {
    private typealias SwiftABI = __ABI_test_component.IUnsealedDerived
    private typealias CABI = __x_ABI_Ctest__component_CIUnsealedDerived
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: test_component.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout test_component.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: test_component.IID) -> IUnknownRef? {
        switch iid {
            case __ABI_test_component.IUnsealedDerivedOverloads2Wrapper.IID:
                let wrapper = __ABI_test_component.IUnsealedDerivedOverloads2Wrapper(self)
                return wrapper!.queryInterface(iid)
            case __ABI_test_component.IUnsealedDerivedOverridesWrapper.IID:
                let wrapper = __ABI_test_component.IUnsealedDerivedOverridesWrapper(self)
                return wrapper!.queryInterface(iid)
            default: return super.queryInterface(iid)
        }
    }
    private static var _IUnsealedDerivedFactory : __ABI_test_component.IUnsealedDerivedFactory =  try! RoGetActivationFactory("test_component.UnsealedDerived")

    override public init() {
        super.init(composing: __IMPL_test_component.UnsealedDerivedBridge.Composable.self) { baseInterface, innerInterface in 
            try! Self._IUnsealedDerivedFactory.CreateInstance(baseInterface, &innerInterface)
        }
    }

    public init(_ prop: Int32) {
        super.init(composing: __IMPL_test_component.UnsealedDerivedBridge.Composable.self) { baseInterface, innerInterface in 
            try! Self._IUnsealedDerivedFactory.CreateInstance2(prop, baseInterface, &innerInterface)
        }
    }

    public init(_ prop1: String, _ prop2: Base!) {
        super.init(composing: __IMPL_test_component.UnsealedDerivedBridge.Composable.self) { baseInterface, innerInterface in 
            try! Self._IUnsealedDerivedFactory.CreateInstance3(prop1, prop2, baseInterface, &innerInterface)
        }
    }

    public var prop : Int32 {
        get { try! _default.get_Prop() }
        set { try! _default.put_Prop(newValue) }
    }

    private lazy var _IUnsealedDerivedOverloads2: __ABI_test_component.IUnsealedDerivedOverloads2! = getInterfaceForCaching()
    open func onAfterDoTheThing() throws {
        try _IUnsealedDerivedOverloads2.OnAfterDoTheThing()
    }

    private lazy var _IUnsealedDerivedOverrides: __ABI_test_component.IUnsealedDerivedOverrides! = getInterfaceForCaching()
    open func onBeforeDoTheThing() throws {
        try _IUnsealedDerivedOverrides.OnBeforeDoTheThing()
    }

    deinit {
        _default = nil
        _IUnsealedDerivedOverloads2 = nil
        _IUnsealedDerivedOverrides = nil
    }
}

// MARK: - UnsealedDerived Internals

@_spi(WinRTInternal)
extension __IMPL_test_component {
    public enum UnsealedDerivedBridge: ComposableBridge {
        public typealias SwiftProjection = UnsealedDerived
        public typealias CABI = __x_ABI_Ctest__component_CIUnsealedDerived
        public static func from(abi: ComPtr<__x_ABI_Ctest__component_CIUnsealedDerived>?) -> UnsealedDerived? {
            guard let abi = abi else { return nil }
            return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
        }
        public enum IUnsealedDerivedOverloads2 : ComposableImpl {
            public typealias CABI = __x_ABI_Ctest__component_CIUnsealedDerivedOverloads2
            public typealias SwiftABI = __ABI_test_component.IUnsealedDerivedOverloads2
            public typealias Class = UnsealedDerived
            public typealias SwiftProjection = WinRTClassWeakReference<Class>
            public enum Default : AbiInterface {
                public typealias CABI = __x_ABI_Ctest__component_CIUnsealedDerived
                public typealias SwiftABI = __ABI_test_component.IUnsealedDerived
            }
        }
        @_spi(WinRTInternal)
        public typealias Composable = IUnsealedDerivedOverloads2
        public enum IUnsealedDerivedOverrides : ComposableImpl {
            public typealias CABI = __x_ABI_Ctest__component_CIUnsealedDerivedOverrides
            public typealias SwiftABI = __ABI_test_component.IUnsealedDerivedOverrides
            public typealias Class = UnsealedDerived
            public typealias SwiftProjection = WinRTClassWeakReference<Class>
            public enum Default : AbiInterface {
                public typealias CABI = __x_ABI_Ctest__component_CIUnsealedDerived
                public typealias SwiftABI = __ABI_test_component.IUnsealedDerived
            }
        }
    }

}
@_spi(WinRTInternal)
public class UnsealedDerivedMaker: MakeFromAbi {
    public typealias SwiftType = UnsealedDerived
    public static func from(abi: test_component.IInspectable) -> SwiftType {
        return UnsealedDerived(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
extension __ABI_test_component {
    internal typealias IUnsealedDerivedOverridesWrapper = UnsealedWinRTClassWrapper<__IMPL_test_component.UnsealedDerivedBridge.IUnsealedDerivedOverrides>
    internal static var IUnsealedDerivedOverridesVTable: __x_ABI_Ctest__component_CIUnsealedDerivedOverridesVtbl = .init(
        QueryInterface: { IUnsealedDerivedOverridesWrapper.queryInterface($0, $1, $2) },
        AddRef: { IUnsealedDerivedOverridesWrapper.addRef($0) },
        Release: { IUnsealedDerivedOverridesWrapper.release($0) },
        GetIids: {
            let size = MemoryLayout<test_component.IID>.size
            let iids = CoTaskMemAlloc(UInt64(size) * 4).assumingMemoryBound(to: test_component.IID.self)
            iids[0] = IUnknown.IID
            iids[1] = IInspectable.IID
            iids[2] = __ABI_test_component.IUnsealedDerivedOverridesWrapper.IID
            iids[3] = __ABI_test_component.IBaseOverridesWrapper.IID
            $1!.pointee = 4
            $2!.pointee = iids
            return S_OK
        },

        GetRuntimeClassName: {
            guard let instance = IUnsealedDerivedOverridesWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let hstring = instance.GetRuntimeClassName().detach()
            $1!.pointee = hstring
            return S_OK
        },

        GetTrustLevel: {
            _ = $0
            $1!.pointee = TrustLevel(rawValue: 0)
            return S_OK
        },

        OnBeforeDoTheThing: {
            do {
                guard let __unwrapped__instance = IUnsealedDerivedOverridesWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                try __unwrapped__instance.onBeforeDoTheThing()
                return S_OK
            } catch { return failWith(error: error) }
        }
    )
    internal typealias IUnsealedDerivedOverloads2Wrapper = UnsealedWinRTClassWrapper<__IMPL_test_component.UnsealedDerivedBridge.IUnsealedDerivedOverloads2>
    internal static var IUnsealedDerivedOverloads2VTable: __x_ABI_Ctest__component_CIUnsealedDerivedOverloads2Vtbl = .init(
        QueryInterface: { IUnsealedDerivedOverloads2Wrapper.queryInterface($0, $1, $2) },
        AddRef: { IUnsealedDerivedOverloads2Wrapper.addRef($0) },
        Release: { IUnsealedDerivedOverloads2Wrapper.release($0) },
        GetIids: {
            let size = MemoryLayout<test_component.IID>.size
            let iids = CoTaskMemAlloc(UInt64(size) * 5).assumingMemoryBound(to: test_component.IID.self)
            iids[0] = IUnknown.IID
            iids[1] = IInspectable.IID
            iids[2] = __ABI_test_component.IUnsealedDerivedOverloads2Wrapper.IID
            iids[3] = __ABI_test_component.IBaseOverridesWrapper.IID
            iids[4] = __ABI_test_component.IUnsealedDerivedOverridesWrapper.IID
            $1!.pointee = 5
            $2!.pointee = iids
            return S_OK
        },

        GetRuntimeClassName: {
            guard let instance = IUnsealedDerivedOverloads2Wrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let hstring = instance.GetRuntimeClassName().detach()
            $1!.pointee = hstring
            return S_OK
        },

        GetTrustLevel: {
            _ = $0
            $1!.pointee = TrustLevel(rawValue: 0)
            return S_OK
        },

        OnAfterDoTheThing: {
            do {
                guard let __unwrapped__instance = IUnsealedDerivedOverloads2Wrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                try __unwrapped__instance.onAfterDoTheThing()
                return S_OK
            } catch { return failWith(error: error) }
        }
    )
    private static let IID___x_ABI_Ctest__component_CIUnsealedDerived: test_component.IID = .init(
        Data1: 0xB4FA333D, Data2: 0x9BCA, Data3: 0x592D, Data4: ( 0x9D,0xCB,0x18,0xAF,0x96,0xD7,0x6A,0x03 ) // B4FA333D-9BCA-592D-9DCB-18AF96D76A03
    ) 

    public class IUnsealedDerived: test_component.IInspectable {
        override public class var IID: test_component.IID { IID___x_ABI_Ctest__component_CIUnsealedDerived }

        public func get_Prop() throws -> Int32 {
            var value: INT32 = 0
            _ = try perform(as: __x_ABI_Ctest__component_CIUnsealedDerived.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Prop(pThis, &value))
            }
            return value
        }

        public func put_Prop(_ value: Int32) throws {
            _ = try perform(as: __x_ABI_Ctest__component_CIUnsealedDerived.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Prop(pThis, value))
            }
        }

    }

    private static let IID___x_ABI_Ctest__component_CIUnsealedDerivedOverloads2: test_component.IID = .init(
        Data1: 0xF4CE1AD9, Data2: 0x36B9, Data3: 0x5DC7, Data4: ( 0xA0,0x07,0x3A,0xCD,0xF4,0x22,0xE7,0x05 ) // F4CE1AD9-36B9-5DC7-A007-3ACDF422E705
    ) 

    public class IUnsealedDerivedOverloads2: test_component.IInspectable {
        override public class var IID: test_component.IID { IID___x_ABI_Ctest__component_CIUnsealedDerivedOverloads2 }

        public func OnAfterDoTheThing() throws {
            _ = try perform(as: __x_ABI_Ctest__component_CIUnsealedDerivedOverloads2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.OnAfterDoTheThing(pThis))
            }
        }

    }

    private static let IID___x_ABI_Ctest__component_CIUnsealedDerivedOverrides: test_component.IID = .init(
        Data1: 0x828DCEE6, Data2: 0xF93A, Data3: 0x5A4D, Data4: ( 0xBC,0xEE,0xF7,0xC1,0xDE,0xE4,0xEB,0x4E ) // 828DCEE6-F93A-5A4D-BCEE-F7C1DEE4EB4E
    ) 

    public class IUnsealedDerivedOverrides: test_component.IInspectable {
        override public class var IID: test_component.IID { IID___x_ABI_Ctest__component_CIUnsealedDerivedOverrides }

        public func OnBeforeDoTheThing() throws {
            _ = try perform(as: __x_ABI_Ctest__component_CIUnsealedDerivedOverrides.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.OnBeforeDoTheThing(pThis))
            }
        }

    }

    private static let IID___x_ABI_Ctest__component_CIUnsealedDerivedFactory: test_component.IID = .init(
        Data1: 0xDAF846D2, Data2: 0x8988, Data3: 0x5EE1, Data4: ( 0xA8,0xAA,0x7E,0x81,0xC0,0xF8,0xA9,0xE9 ) // DAF846D2-8988-5EE1-A8AA-7E81C0F8A9E9
    ) 

    public class IUnsealedDerivedFactory: test_component.IInspectable {
        override public class var IID: test_component.IID { IID___x_ABI_Ctest__component_CIUnsealedDerivedFactory }

        public func CreateInstance(_ baseInterface: UnsealedWinRTClassWrapper<__IMPL_test_component.UnsealedDerivedBridge.Composable>?, _ innerInterface: inout test_component.IInspectable?) throws -> IUnsealedDerived {
            let (value) = try ComPtrs.initialize { valueAbi in
                let _baseInterface = baseInterface?.toIInspectableABI { $0 }
                let (_innerInterface) = try ComPtrs.initialize { _innerInterfaceAbi in
                    _ = try perform(as: __x_ABI_Ctest__component_CIUnsealedDerivedFactory.self) { pThis in
                        try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance(pThis, _baseInterface, &_innerInterfaceAbi, &valueAbi))
                    }
                }
                innerInterface = test_component.IInspectable(_innerInterface!)
            }
            return IUnsealedDerived(value!)
        }

        public func CreateInstance2(_ prop: Int32, _ baseInterface: UnsealedWinRTClassWrapper<__IMPL_test_component.UnsealedDerivedBridge.Composable>?, _ innerInterface: inout test_component.IInspectable?) throws -> IUnsealedDerived {
            let (value) = try ComPtrs.initialize { valueAbi in
                let _baseInterface = baseInterface?.toIInspectableABI { $0 }
                let (_innerInterface) = try ComPtrs.initialize { _innerInterfaceAbi in
                    _ = try perform(as: __x_ABI_Ctest__component_CIUnsealedDerivedFactory.self) { pThis in
                        try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance2(pThis, prop, _baseInterface, &_innerInterfaceAbi, &valueAbi))
                    }
                }
                innerInterface = test_component.IInspectable(_innerInterface!)
            }
            return IUnsealedDerived(value!)
        }

        public func CreateInstance3(_ prop1: String, _ prop2: test_component.Base?, _ baseInterface: UnsealedWinRTClassWrapper<__IMPL_test_component.UnsealedDerivedBridge.Composable>?, _ innerInterface: inout test_component.IInspectable?) throws -> IUnsealedDerived {
            let (value) = try ComPtrs.initialize { valueAbi in
                let _prop1 = try! HString(prop1)
                let _baseInterface = baseInterface?.toIInspectableABI { $0 }
                let (_innerInterface) = try ComPtrs.initialize { _innerInterfaceAbi in
                    _ = try perform(as: __x_ABI_Ctest__component_CIUnsealedDerivedFactory.self) { pThis in
                        try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance3(pThis, _prop1.get(), RawPointer(prop2), _baseInterface, &_innerInterfaceAbi, &valueAbi))
                    }
                }
                innerInterface = test_component.IInspectable(_innerInterface!)
            }
            return IUnsealedDerived(value!)
        }

    }

}
extension ComposableImpl where CABI == __x_ABI_Ctest__component_CIUnsealedDerivedOverloads2 {
    public static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__ABI_test_component.IUnsealedDerivedOverloads2VTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}
extension ComposableImpl where CABI == __x_ABI_Ctest__component_CIUnsealedDerivedOverrides {
    public static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__ABI_test_component.IUnsealedDerivedOverridesVTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}
// MARK: - UnsealedDerived2

open class UnsealedDerived2 : test_component.UnsealedDerived {
    private typealias SwiftABI = __ABI_test_component.IUnsealedDerived2
    private typealias CABI = __x_ABI_Ctest__component_CIUnsealedDerived2
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: test_component.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout test_component.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: test_component.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IUnsealedDerived2Factory : __ABI_test_component.IUnsealedDerived2Factory =  try! RoGetActivationFactory("test_component.UnsealedDerived2")

    override public init(_ prop: Int32) {
        super.init(composing: __IMPL_test_component.UnsealedDerived2Bridge.Composable.self) { baseInterface, innerInterface in 
            try! Self._IUnsealedDerived2Factory.CreateInstance(prop, baseInterface, &innerInterface)
        }
    }

    private static var _IUnsealedDerived2ProtectedFactory : __ABI_test_component.IUnsealedDerived2ProtectedFactory =  try! RoGetActivationFactory("test_component.UnsealedDerived2")

    override public init() {
        super.init(composing: __IMPL_test_component.UnsealedDerived2Bridge.Composable.self) { baseInterface, innerInterface in 
            try! Self._IUnsealedDerived2ProtectedFactory.CreateInstance(baseInterface, &innerInterface)
        }
    }

    public func method() throws {
        try _default.Method()
    }

    deinit {
        _default = nil
    }
}

// MARK: - UnsealedDerived2 Internals

@_spi(WinRTInternal)
extension __IMPL_test_component {
    public enum UnsealedDerived2Bridge: ComposableBridge {
        public typealias SwiftProjection = UnsealedDerived2
        public typealias CABI = __x_ABI_Ctest__component_CIUnsealedDerived2
        public static func from(abi: ComPtr<__x_ABI_Ctest__component_CIUnsealedDerived2>?) -> UnsealedDerived2? {
            guard let abi = abi else { return nil }
            return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
        }
        public enum IUnsealedDerivedOverloads2 : ComposableImpl {
            public typealias CABI = __x_ABI_Ctest__component_CIUnsealedDerivedOverloads2
            public typealias SwiftABI = __ABI_test_component.IUnsealedDerivedOverloads2
            public typealias Class = UnsealedDerived2
            public typealias SwiftProjection = WinRTClassWeakReference<Class>
            public enum Default : AbiInterface {
                public typealias CABI = __x_ABI_Ctest__component_CIUnsealedDerived2
                public typealias SwiftABI = __ABI_test_component.IUnsealedDerived2
            }
        }
        @_spi(WinRTInternal)
        public typealias Composable = IUnsealedDerivedOverloads2
    }

}
@_spi(WinRTInternal)
public class UnsealedDerived2Maker: MakeFromAbi {
    public typealias SwiftType = UnsealedDerived2
    public static func from(abi: test_component.IInspectable) -> SwiftType {
        return UnsealedDerived2(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
extension __ABI_test_component {
    private static let IID___x_ABI_Ctest__component_CIUnsealedDerived2: test_component.IID = .init(
        Data1: 0xA58C23CF, Data2: 0x4DC4, Data3: 0x59C5, Data4: ( 0x8D,0xE3,0x9F,0x06,0x3B,0x21,0x8D,0xDE ) // A58C23CF-4DC4-59C5-8DE3-9F063B218DDE
    ) 

    public class IUnsealedDerived2: test_component.IInspectable {
        override public class var IID: test_component.IID { IID___x_ABI_Ctest__component_CIUnsealedDerived2 }

        public func Method() throws {
            _ = try perform(as: __x_ABI_Ctest__component_CIUnsealedDerived2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Method(pThis))
            }
        }

    }

    private static let IID___x_ABI_Ctest__component_CIUnsealedDerived2Factory: test_component.IID = .init(
        Data1: 0x136F2143, Data2: 0x1044, Data3: 0x5A97, Data4: ( 0x8C,0x91,0x1E,0xF2,0x81,0x67,0xD9,0xFC ) // 136F2143-1044-5A97-8C91-1EF28167D9FC
    ) 

    public class IUnsealedDerived2Factory: test_component.IInspectable {
        override public class var IID: test_component.IID { IID___x_ABI_Ctest__component_CIUnsealedDerived2Factory }

        public func CreateInstance(_ prop: Int32, _ baseInterface: UnsealedWinRTClassWrapper<__IMPL_test_component.UnsealedDerived2Bridge.Composable>?, _ innerInterface: inout test_component.IInspectable?) throws -> IUnsealedDerived2 {
            let (value) = try ComPtrs.initialize { valueAbi in
                let _baseInterface = baseInterface?.toIInspectableABI { $0 }
                let (_innerInterface) = try ComPtrs.initialize { _innerInterfaceAbi in
                    _ = try perform(as: __x_ABI_Ctest__component_CIUnsealedDerived2Factory.self) { pThis in
                        try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance(pThis, prop, _baseInterface, &_innerInterfaceAbi, &valueAbi))
                    }
                }
                innerInterface = test_component.IInspectable(_innerInterface!)
            }
            return IUnsealedDerived2(value!)
        }

    }

    private static let IID___x_ABI_Ctest__component_CIUnsealedDerived2ProtectedFactory: test_component.IID = .init(
        Data1: 0x0978D147, Data2: 0x77BF, Data3: 0x5E0A, Data4: ( 0xA1,0x64,0xCA,0x95,0x1B,0xCA,0xB8,0xB4 ) // 0978D147-77BF-5E0A-A164-CA951BCAB8B4
    ) 

    public class IUnsealedDerived2ProtectedFactory: test_component.IInspectable {
        override public class var IID: test_component.IID { IID___x_ABI_Ctest__component_CIUnsealedDerived2ProtectedFactory }

        public func CreateInstance(_ baseInterface: UnsealedWinRTClassWrapper<__IMPL_test_component.UnsealedDerived2Bridge.Composable>?, _ innerInterface: inout test_component.IInspectable?) throws -> IUnsealedDerived2 {
            let (value) = try ComPtrs.initialize { valueAbi in
                let _baseInterface = baseInterface?.toIInspectableABI { $0 }
                let (_innerInterface) = try ComPtrs.initialize { _innerInterfaceAbi in
                    _ = try perform(as: __x_ABI_Ctest__component_CIUnsealedDerived2ProtectedFactory.self) { pThis in
                        try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance(pThis, _baseInterface, &_innerInterfaceAbi, &valueAbi))
                    }
                }
                innerInterface = test_component.IInspectable(_innerInterface!)
            }
            return IUnsealedDerived2(value!)
        }

    }

}
// MARK: - UnsealedDerivedFromNoConstructor

open class UnsealedDerivedFromNoConstructor : test_component.UnsealedDerivedNoConstructor {
    private typealias SwiftABI = __ABI_test_component.IUnsealedDerivedFromNoConstructor
    private typealias CABI = __x_ABI_Ctest__component_CIUnsealedDerivedFromNoConstructor
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: test_component.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout test_component.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: test_component.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IUnsealedDerivedFromNoConstructorFactory : __ABI_test_component.IUnsealedDerivedFromNoConstructorFactory =  try! RoGetActivationFactory("test_component.UnsealedDerivedFromNoConstructor")

    public init() {
        super.init(composing: __IMPL_test_component.UnsealedDerivedFromNoConstructorBridge.Composable.self) { baseInterface, innerInterface in 
            try! Self._IUnsealedDerivedFromNoConstructorFactory.CreateInstance(baseInterface, &innerInterface)
        }
    }

    deinit {
        _default = nil
    }
}

// MARK: - UnsealedDerivedFromNoConstructor Internals

@_spi(WinRTInternal)
extension __IMPL_test_component {
    public enum UnsealedDerivedFromNoConstructorBridge: ComposableBridge {
        public typealias SwiftProjection = UnsealedDerivedFromNoConstructor
        public typealias CABI = __x_ABI_Ctest__component_CIUnsealedDerivedFromNoConstructor
        public static func from(abi: ComPtr<__x_ABI_Ctest__component_CIUnsealedDerivedFromNoConstructor>?) -> UnsealedDerivedFromNoConstructor? {
            guard let abi = abi else { return nil }
            return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
        }
        public enum IBaseOverrides : ComposableImpl {
            public typealias CABI = __x_ABI_Ctest__component_CIBaseOverrides
            public typealias SwiftABI = __ABI_test_component.IBaseOverrides
            public typealias Class = UnsealedDerivedFromNoConstructor
            public typealias SwiftProjection = WinRTClassWeakReference<Class>
            public enum Default : AbiInterface {
                public typealias CABI = __x_ABI_Ctest__component_CIUnsealedDerivedFromNoConstructor
                public typealias SwiftABI = __ABI_test_component.IUnsealedDerivedFromNoConstructor
            }
        }
        @_spi(WinRTInternal)
        public typealias Composable = IBaseOverrides
    }

}
@_spi(WinRTInternal)
public class UnsealedDerivedFromNoConstructorMaker: MakeFromAbi {
    public typealias SwiftType = UnsealedDerivedFromNoConstructor
    public static func from(abi: test_component.IInspectable) -> SwiftType {
        return UnsealedDerivedFromNoConstructor(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
extension __ABI_test_component {
    private static let IID___x_ABI_Ctest__component_CIUnsealedDerivedFromNoConstructor: test_component.IID = .init(
        Data1: 0xD0FB287A, Data2: 0xCBA2, Data3: 0x5756, Data4: ( 0xB7,0xA5,0x5F,0x3B,0x04,0x03,0x9F,0x67 ) // D0FB287A-CBA2-5756-B7A5-5F3B04039F67
    ) 

    public class IUnsealedDerivedFromNoConstructor: test_component.IInspectable {
        override public class var IID: test_component.IID { IID___x_ABI_Ctest__component_CIUnsealedDerivedFromNoConstructor }

    }

    private static let IID___x_ABI_Ctest__component_CIUnsealedDerivedFromNoConstructorFactory: test_component.IID = .init(
        Data1: 0x51E65EEC, Data2: 0x650B, Data3: 0x549E, Data4: ( 0x94,0x0C,0x61,0xB6,0xA1,0x4E,0xEA,0x4B ) // 51E65EEC-650B-549E-940C-61B6A14EEA4B
    ) 

    public class IUnsealedDerivedFromNoConstructorFactory: test_component.IInspectable {
        override public class var IID: test_component.IID { IID___x_ABI_Ctest__component_CIUnsealedDerivedFromNoConstructorFactory }

        public func CreateInstance(_ baseInterface: UnsealedWinRTClassWrapper<__IMPL_test_component.UnsealedDerivedFromNoConstructorBridge.Composable>?, _ innerInterface: inout test_component.IInspectable?) throws -> IUnsealedDerivedFromNoConstructor {
            let (value) = try ComPtrs.initialize { valueAbi in
                let _baseInterface = baseInterface?.toIInspectableABI { $0 }
                let (_innerInterface) = try ComPtrs.initialize { _innerInterfaceAbi in
                    _ = try perform(as: __x_ABI_Ctest__component_CIUnsealedDerivedFromNoConstructorFactory.self) { pThis in
                        try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance(pThis, _baseInterface, &_innerInterfaceAbi, &valueAbi))
                    }
                }
                innerInterface = test_component.IInspectable(_innerInterface!)
            }
            return IUnsealedDerivedFromNoConstructor(value!)
        }

    }

}
// MARK: - UnsealedDerivedNoConstructor

open class UnsealedDerivedNoConstructor : test_component.Base {
    private typealias SwiftABI = __ABI_test_component.IUnsealedDerivedNoConstructor
    private typealias CABI = __x_ABI_Ctest__component_CIUnsealedDerivedNoConstructor
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: test_component.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout test_component.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: test_component.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IUnsealedDerivedNoConstructorFactory : __ABI_test_component.IUnsealedDerivedNoConstructorFactory =  try! RoGetActivationFactory("test_component.UnsealedDerivedNoConstructor")

    deinit {
        _default = nil
    }
}

// MARK: - UnsealedDerivedNoConstructor Internals

@_spi(WinRTInternal)
extension __IMPL_test_component {
    public enum UnsealedDerivedNoConstructorBridge: ComposableBridge {
        public typealias SwiftProjection = UnsealedDerivedNoConstructor
        public typealias CABI = __x_ABI_Ctest__component_CIUnsealedDerivedNoConstructor
        public static func from(abi: ComPtr<__x_ABI_Ctest__component_CIUnsealedDerivedNoConstructor>?) -> UnsealedDerivedNoConstructor? {
            guard let abi = abi else { return nil }
            return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
        }
        public enum IBaseOverrides : ComposableImpl {
            public typealias CABI = __x_ABI_Ctest__component_CIBaseOverrides
            public typealias SwiftABI = __ABI_test_component.IBaseOverrides
            public typealias Class = UnsealedDerivedNoConstructor
            public typealias SwiftProjection = WinRTClassWeakReference<Class>
            public enum Default : AbiInterface {
                public typealias CABI = __x_ABI_Ctest__component_CIUnsealedDerivedNoConstructor
                public typealias SwiftABI = __ABI_test_component.IUnsealedDerivedNoConstructor
            }
        }
        @_spi(WinRTInternal)
        public typealias Composable = IBaseOverrides
    }

}
@_spi(WinRTInternal)
public class UnsealedDerivedNoConstructorMaker: MakeFromAbi {
    public typealias SwiftType = UnsealedDerivedNoConstructor
    public static func from(abi: test_component.IInspectable) -> SwiftType {
        return UnsealedDerivedNoConstructor(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
extension __ABI_test_component {
    private static let IID___x_ABI_Ctest__component_CIUnsealedDerivedNoConstructor: test_component.IID = .init(
        Data1: 0x78393D7D, Data2: 0x930B, Data3: 0x57F9, Data4: ( 0x9B,0x04,0x2D,0xCC,0x34,0x80,0xD7,0x46 ) // 78393D7D-930B-57F9-9B04-2DCC3480D746
    ) 

    public class IUnsealedDerivedNoConstructor: test_component.IInspectable {
        override public class var IID: test_component.IID { IID___x_ABI_Ctest__component_CIUnsealedDerivedNoConstructor }

    }

    private static let IID___x_ABI_Ctest__component_CIUnsealedDerivedNoConstructorFactory: test_component.IID = .init(
        Data1: 0xD8B1C0D1, Data2: 0xB48A, Data3: 0x5AA3, Data4: ( 0x98,0xF1,0xFF,0x86,0x8C,0xC4,0xD5,0x71 ) // D8B1C0D1-B48A-5AA3-98F1-FF868CC4D571
    ) 

    public class IUnsealedDerivedNoConstructorFactory: test_component.IInspectable {
        override public class var IID: test_component.IID { IID___x_ABI_Ctest__component_CIUnsealedDerivedNoConstructorFactory }

    }

}
// MARK: - UnsealedDerivedNoOverrides

open class UnsealedDerivedNoOverrides : test_component.BaseNoOverrides {
    private typealias SwiftABI = __ABI_test_component.IUnsealedDerivedNoOverrides
    private typealias CABI = __x_ABI_Ctest__component_CIUnsealedDerivedNoOverrides
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: test_component.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout test_component.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: test_component.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IUnsealedDerivedNoOverridesProtectedFactory : __ABI_test_component.IUnsealedDerivedNoOverridesProtectedFactory =  try! RoGetActivationFactory("test_component.UnsealedDerivedNoOverrides")

    override public init() {
        super.init(composing: __IMPL_test_component.UnsealedDerivedNoOverridesBridge.Composable.self) { baseInterface, innerInterface in 
            try! Self._IUnsealedDerivedNoOverridesProtectedFactory.CreateInstance(baseInterface, &innerInterface)
        }
    }

    deinit {
        _default = nil
    }
}

// MARK: - UnsealedDerivedNoOverrides Internals

@_spi(WinRTInternal)
extension __IMPL_test_component {
    public enum UnsealedDerivedNoOverridesBridge: ComposableBridge {
        public typealias SwiftProjection = UnsealedDerivedNoOverrides
        public typealias CABI = __x_ABI_Ctest__component_CIUnsealedDerivedNoOverrides
        public static func from(abi: ComPtr<__x_ABI_Ctest__component_CIUnsealedDerivedNoOverrides>?) -> UnsealedDerivedNoOverrides? {
            guard let abi = abi else { return nil }
            return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
        }
        public enum IUnsealedDerivedNoOverrides : ComposableImpl {
            public typealias CABI = C_IInspectable
            public typealias SwiftABI = test_component.IInspectable
            public typealias Class = UnsealedDerivedNoOverrides
            public typealias SwiftProjection = WinRTClassWeakReference<Class>
            public enum Default : AbiInterface {
                public typealias CABI = __x_ABI_Ctest__component_CIUnsealedDerivedNoOverrides
                public typealias SwiftABI = __ABI_test_component.IUnsealedDerivedNoOverrides
            }
        }
        @_spi(WinRTInternal)
        public typealias Composable = IUnsealedDerivedNoOverrides
    }

}
@_spi(WinRTInternal)
public class UnsealedDerivedNoOverridesMaker: MakeFromAbi {
    public typealias SwiftType = UnsealedDerivedNoOverrides
    public static func from(abi: test_component.IInspectable) -> SwiftType {
        return UnsealedDerivedNoOverrides(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
extension __ABI_test_component {
    private static let IID___x_ABI_Ctest__component_CIUnsealedDerivedNoOverrides: test_component.IID = .init(
        Data1: 0x3CD27E28, Data2: 0x2DFF, Data3: 0x5A17, Data4: ( 0x82,0x63,0x1B,0xFA,0x75,0x04,0x34,0xAA ) // 3CD27E28-2DFF-5A17-8263-1BFA750434AA
    ) 

    public class IUnsealedDerivedNoOverrides: test_component.IInspectable {
        override public class var IID: test_component.IID { IID___x_ABI_Ctest__component_CIUnsealedDerivedNoOverrides }

    }

    private static let IID___x_ABI_Ctest__component_CIUnsealedDerivedNoOverridesProtectedFactory: test_component.IID = .init(
        Data1: 0x8D27A3F3, Data2: 0xD785, Data3: 0x53E3, Data4: ( 0x83,0x19,0x6A,0x50,0x97,0xB1,0x04,0xAB ) // 8D27A3F3-D785-53E3-8319-6A5097B104AB
    ) 

    public class IUnsealedDerivedNoOverridesProtectedFactory: test_component.IInspectable {
        override public class var IID: test_component.IID { IID___x_ABI_Ctest__component_CIUnsealedDerivedNoOverridesProtectedFactory }

        public func CreateInstance(_ baseInterface: UnsealedWinRTClassWrapper<__IMPL_test_component.UnsealedDerivedNoOverridesBridge.Composable>?, _ innerInterface: inout test_component.IInspectable?) throws -> IUnsealedDerivedNoOverrides {
            let (value) = try ComPtrs.initialize { valueAbi in
                let _baseInterface = baseInterface?.toIInspectableABI { $0 }
                let (_innerInterface) = try ComPtrs.initialize { _innerInterfaceAbi in
                    _ = try perform(as: __x_ABI_Ctest__component_CIUnsealedDerivedNoOverridesProtectedFactory.self) { pThis in
                        try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance(pThis, _baseInterface, &_innerInterfaceAbi, &valueAbi))
                    }
                }
                innerInterface = test_component.IInspectable(_innerInterface!)
            }
            return IUnsealedDerivedNoOverrides(value!)
        }

    }

}
// MARK: - WeakReferencer

public final class WeakReferencer : WinRTClass {
    private typealias SwiftABI = __ABI_test_component.IWeakReferencer
    private typealias CABI = __x_ABI_Ctest__component_CIWeakReferencer
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: test_component.IInspectable) {
        super.init(fromAbi)
    }

    private static let _IWeakReferencerFactory: __ABI_test_component.IWeakReferencerFactory = try! RoGetActivationFactory("test_component.WeakReferencer")
    public init(_ object: AnyIReferenceTarget!) {
        super.init(try! Self._IWeakReferencerFactory.CreateInstance(object))
    }

    public func resolve() throws -> AnyIReferenceTarget! {
        try _default.Resolve()
    }

    deinit {
        _default = nil
    }
}

// MARK: - WeakReferencer Internals

@_spi(WinRTInternal)
extension __IMPL_test_component {
    public enum WeakReferencerBridge: AbiBridge {
        public typealias SwiftProjection = WeakReferencer
        public typealias CABI = __x_ABI_Ctest__component_CIWeakReferencer
        public static func from(abi: ComPtr<__x_ABI_Ctest__component_CIWeakReferencer>?) -> WeakReferencer? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: test_component.IInspectable(abi))
        }
    }

}
@_spi(WinRTInternal)
public class WeakReferencerMaker: MakeFromAbi {
    public typealias SwiftType = WeakReferencer
    public static func from(abi: test_component.IInspectable) -> SwiftType {
        return WeakReferencer(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
extension __ABI_test_component {
    private static let IID___x_ABI_Ctest__component_CIWeakReferencer: test_component.IID = .init(
        Data1: 0xF3CE877F, Data2: 0x5BD2, Data3: 0x53C7, Data4: ( 0xAA,0x6A,0x39,0xF0,0x64,0x78,0x1C,0x21 ) // F3CE877F-5BD2-53C7-AA6A-39F064781C21
    ) 

    public class IWeakReferencer: test_component.IInspectable {
        override public class var IID: test_component.IID { IID___x_ABI_Ctest__component_CIWeakReferencer }

        public func Resolve() throws -> test_component.AnyIReferenceTarget? {
            let (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_Ctest__component_CIWeakReferencer.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.Resolve(pThis, &resultAbi))
                }
            }
            return __ABI_test_component.IReferenceTargetWrapper.unwrapFrom(abi: result)
        }

    }

    private static let IID___x_ABI_Ctest__component_CIWeakReferencerFactory: test_component.IID = .init(
        Data1: 0x34CE8191, Data2: 0x4DC4, Data3: 0x50EF, Data4: ( 0xB6,0x9E,0x19,0x8F,0x3C,0x9F,0x65,0x52 ) // 34CE8191-4DC4-50EF-B69E-198F3C9F6552
    ) 

    public class IWeakReferencerFactory: test_component.IInspectable {
        override public class var IID: test_component.IID { IID___x_ABI_Ctest__component_CIWeakReferencerFactory }

        public func CreateInstance(_ object: test_component.AnyIReferenceTarget?) throws -> IWeakReferencer {
            let (value) = try ComPtrs.initialize { valueAbi in
                let objectWrapper = __ABI_test_component.IReferenceTargetWrapper(object)
                let _object = try! objectWrapper?.toABI { $0 }
                _ = try perform(as: __x_ABI_Ctest__component_CIWeakReferencerFactory.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance(pThis, _object, &valueAbi))
                }
            }
            return IWeakReferencer(value!)
        }

    }

}

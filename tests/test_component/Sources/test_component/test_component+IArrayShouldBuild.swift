// WARNING: Please don't edit this file. It was generated by Swift/WinRT v0.0.1
// swiftlint:disable all
import Foundation
import Ctest_component

public protocol IArrayShouldBuild : WinRTInterface {
    var scenarios: [test_component.AnyIArrayScenarios?] { get }
}

extension IArrayShouldBuild {
    public func queryInterface(_ iid: test_component.IID) -> IUnknownRef? {
        switch iid {
            case __ABI_test_component.IArrayShouldBuildWrapper.IID:
                let wrapper = __ABI_test_component.IArrayShouldBuildWrapper(self)
                return wrapper!.queryInterface(iid)
            default: return nil
        }
    }
}
public typealias AnyIArrayShouldBuild = any IArrayShouldBuild


// MARK: - Internals

@_spi(WinRTInternal)
extension __IMPL_test_component {
    public enum IArrayShouldBuildBridge : AbiInterfaceBridge {
        public typealias CABI = __x_ABI_Ctest__component_CIArrayShouldBuild
        public typealias SwiftABI = __ABI_test_component.IArrayShouldBuild
        public typealias SwiftProjection = AnyIArrayShouldBuild
        public static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
            guard let abi = abi else { return nil }
            return IArrayShouldBuildImpl(abi)
        }

        public static func makeAbi() -> CABI {
            let vtblPtr = withUnsafeMutablePointer(to: &__ABI_test_component.IArrayShouldBuildVTable) { $0 }
            return .init(lpVtbl: vtblPtr)
        }
    }

    fileprivate class IArrayShouldBuildImpl: IArrayShouldBuild, WinRTAbiImpl {
        fileprivate typealias Bridge = IArrayShouldBuildBridge
        fileprivate let _default: Bridge.SwiftABI
        fileprivate var thisPtr: test_component.IInspectable { _default }
        fileprivate init(_ fromAbi: ComPtr<Bridge.CABI>) {
            _default = Bridge.SwiftABI(fromAbi)
        }

        fileprivate var scenarios : [AnyIArrayScenarios?] {
            get { try! _default.get_Scenarios() }
        }

    }

}
@_spi(WinRTInternal)
extension __ABI_test_component {
    private static let IID___x_ABI_Ctest__component_CIArrayShouldBuild: test_component.IID = .init(
        Data1: 0xA0DB5CFD, Data2: 0xD277, Data3: 0x585A, Data4: ( 0xA0,0xAC,0xC2,0x18,0x5C,0x18,0xE9,0x72 )
    ) // A0DB5CFD-D277-585A-A0AC-C2185C18E972
    public class IArrayShouldBuild: test_component.IInspectable {
        override public class var IID: test_component.IID { IID___x_ABI_Ctest__component_CIArrayShouldBuild }

        open func get_Scenarios() throws -> [test_component.AnyIArrayScenarios?] {
            var value: WinRTArrayAbi<UnsafeMutablePointer<__x_ABI_Ctest__component_CIArrayScenarios>?> = (0, nil)
            _ = try perform(as: __x_ABI_Ctest__component_CIArrayShouldBuild.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Scenarios(pThis, &value.count, &value.start))
            }
            defer { CoTaskMemFree(value.start) }
            return .from(abiBridge: __IMPL_test_component.IArrayScenariosBridge.self, abi: value)

        }

    }

    internal static var IArrayShouldBuildVTable: __x_ABI_Ctest__component_CIArrayShouldBuildVtbl = .init(
        QueryInterface: { IArrayShouldBuildWrapper.queryInterface($0, $1, $2) },
        AddRef: { IArrayShouldBuildWrapper.addRef($0) },
        Release: { IArrayShouldBuildWrapper.release($0) },
        GetIids: {
            let size = MemoryLayout<test_component.IID>.size
            let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: test_component.IID.self)
            iids[0] = IUnknown.IID
            iids[1] = IInspectable.IID
            iids[2] = __ABI_test_component.IArrayShouldBuildWrapper.IID
            $1!.pointee = 3
            $2!.pointee = iids
            return S_OK
        },

        GetRuntimeClassName: {
            _ = $0
            let hstring = try! HString("test_component.IArrayShouldBuild").detach()
            $1!.pointee = hstring
            return S_OK
        },

        GetTrustLevel: {
            _ = $0
            $1!.pointee = TrustLevel(rawValue: 0)
            return S_OK
        },

        get_Scenarios: {
            guard let __unwrapped__instance = IArrayShouldBuildWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value = __unwrapped__instance.scenarios
            $1?.initialize(to: UInt32(value.count))
            value.fill(abi: $2, abiBridge: __IMPL_test_component.IArrayScenariosBridge.self)
            return S_OK
        }
    )

    public typealias IArrayShouldBuildWrapper = InterfaceWrapperBase<__IMPL_test_component.IArrayShouldBuildBridge>
}
@_spi(WinRTInternal)
public class IArrayShouldBuildMaker: MakeFromAbi {
    public typealias SwiftType = AnyIArrayShouldBuild
    public static func from(abi: test_component.IInspectable) -> SwiftType {
        let swiftAbi: __ABI_test_component.IArrayShouldBuild = try! abi.QueryInterface()
        return __IMPL_test_component.IArrayShouldBuildBridge.from(abi: RawPointer(swiftAbi))!
    }
}

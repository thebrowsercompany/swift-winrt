// WARNING: Please don't edit this file. It was generated by Swift/WinRT v0.0.1
// swiftlint:disable all
import Foundation
import Ctest_component

public enum __IMPL_Windows_Storage_Streams {
    public enum IBufferBridge : AbiInterfaceBridge {
        public typealias CABI = __x_ABI_CWindows_CStorage_CStreams_CIBuffer
        public typealias SwiftABI = __ABI_Windows_Storage_Streams.IBuffer
        public typealias SwiftProjection = AnyIBuffer
        public static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
            guard let abi = abi else { return nil }
            return IBufferImpl(abi)
        }

        public static func makeAbi() -> CABI {
            let vtblPtr = withUnsafeMutablePointer(to: &__ABI_Windows_Storage_Streams.IBufferVTable) { $0 }
            return .init(lpVtbl: vtblPtr)
        }
    }

    fileprivate class IBufferImpl: IBuffer, WinRTAbiImpl {
        fileprivate typealias Bridge = IBufferBridge
        fileprivate let _default: Bridge.SwiftABI
        fileprivate var thisPtr: test_component.IInspectable { _default }
        fileprivate init(_ fromAbi: ComPtr<Bridge.CABI>) {
            _default = Bridge.SwiftABI(fromAbi)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.streams.ibuffer.capacity)
        fileprivate var capacity : UInt32 {
            get { try! _default.get_CapacityImpl() }
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.streams.ibuffer.length)
        fileprivate var length : UInt32 {
            get { try! _default.get_LengthImpl() }
            set { try! _default.put_LengthImpl(newValue) }
        }

        private lazy var _IBufferByteAccess: __ABI_.IBufferByteAccess! = getInterfaceForCaching()
        fileprivate  var data: Data {
            get throws {
                let bufferByteAccess: test_component.__ABI_.IBufferByteAccess = try _IBufferByteAccess.QueryInterface()
                var data = Data(count: Int(capacity))
                try data.withUnsafeMutableBytes { (bytes: UnsafeMutableRawBufferPointer) in
                    try bufferByteAccess.Buffer(bytes.baseAddress?.assumingMemoryBound(to: UInt8.self))
                }
                return data
            }
        }
    }

}

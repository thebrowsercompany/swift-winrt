// WARNING: Please don't edit this file. It was generated by Swift/WinRT v0.0.1
// swiftlint:disable all
import Foundation
import Ctest_component

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.istorageitempropertieswithprovider)
public protocol IStorageItemPropertiesWithProvider : IStorageItemProperties {
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.istorageitempropertieswithprovider.provider)
    var provider: test_component.StorageProvider! { get }
}

extension IStorageItemPropertiesWithProvider {
    public func queryInterface(_ iid: test_component.IID) -> IUnknownRef? {
        switch iid {
            case __ABI_Windows_Storage.IStorageItemPropertiesWithProviderWrapper.IID:
                let wrapper = __ABI_Windows_Storage.IStorageItemPropertiesWithProviderWrapper(self)
                return wrapper!.queryInterface(iid)
            case __ABI_Windows_Storage.IStorageItemPropertiesWrapper.IID:
                let wrapper = __ABI_Windows_Storage.IStorageItemPropertiesWrapper(self)
                return wrapper!.queryInterface(iid)
            default: return nil
        }
    }
}
public typealias AnyIStorageItemPropertiesWithProvider = any IStorageItemPropertiesWithProvider


// MARK: - Internals

@_spi(WinRTInternal)
extension __IMPL_Windows_Storage {
    public enum IStorageItemPropertiesWithProviderBridge : AbiInterfaceBridge {
        public typealias CABI = __x_ABI_CWindows_CStorage_CIStorageItemPropertiesWithProvider
        public typealias SwiftABI = __ABI_Windows_Storage.IStorageItemPropertiesWithProvider
        public typealias SwiftProjection = AnyIStorageItemPropertiesWithProvider
        public static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
            guard let abi = abi else { return nil }
            return IStorageItemPropertiesWithProviderImpl(abi)
        }

        public static func makeAbi() -> CABI {
            let vtblPtr = withUnsafeMutablePointer(to: &__ABI_Windows_Storage.IStorageItemPropertiesWithProviderVTable) { $0 }
            return .init(lpVtbl: vtblPtr)
        }
    }

    fileprivate class IStorageItemPropertiesWithProviderImpl: IStorageItemPropertiesWithProvider, WinRTAbiImpl {
        fileprivate typealias Bridge = IStorageItemPropertiesWithProviderBridge
        fileprivate let _default: Bridge.SwiftABI
        fileprivate var thisPtr: test_component.IInspectable { _default }
        fileprivate init(_ fromAbi: ComPtr<Bridge.CABI>) {
            _default = Bridge.SwiftABI(fromAbi)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.istorageitempropertieswithprovider.provider)
        fileprivate var provider : StorageProvider! {
            get { try! _default.get_Provider() }
        }

        private lazy var _IStorageItemProperties: __ABI_Windows_Storage.IStorageItemProperties! = getInterfaceForCaching()
        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.istorageitempropertieswithprovider.getthumbnailasync)
        fileprivate func getThumbnailAsync(_ mode: test_component.ThumbnailMode) throws -> AnyIAsyncOperation<test_component.StorageItemThumbnail?>! {
            try _IStorageItemProperties.GetThumbnailAsyncOverloadDefaultSizeDefaultOptions(mode)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.istorageitempropertieswithprovider.getthumbnailasync)
        fileprivate func getThumbnailAsync(_ mode: test_component.ThumbnailMode, _ requestedSize: UInt32) throws -> AnyIAsyncOperation<test_component.StorageItemThumbnail?>! {
            try _IStorageItemProperties.GetThumbnailAsyncOverloadDefaultOptions(mode, requestedSize)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.istorageitempropertieswithprovider.getthumbnailasync)
        fileprivate func getThumbnailAsync(_ mode: test_component.ThumbnailMode, _ requestedSize: UInt32, _ options: test_component.ThumbnailOptions) throws -> AnyIAsyncOperation<test_component.StorageItemThumbnail?>! {
            try _IStorageItemProperties.GetThumbnailAsync(mode, requestedSize, options)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.istorageitempropertieswithprovider.displayname)
        fileprivate var displayName : String {
            get { try! _IStorageItemProperties.get_DisplayName() }
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.istorageitempropertieswithprovider.displaytype)
        fileprivate var displayType : String {
            get { try! _IStorageItemProperties.get_DisplayType() }
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.istorageitempropertieswithprovider.folderrelativeid)
        fileprivate var folderRelativeId : String {
            get { try! _IStorageItemProperties.get_FolderRelativeId() }
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.istorageitempropertieswithprovider.properties)
        fileprivate var properties : test_component.StorageItemContentProperties! {
            get { try! _IStorageItemProperties.get_Properties() }
        }

    }

}
@_spi(WinRTInternal)
extension __ABI_Windows_Storage {
    private static let IID___x_ABI_CWindows_CStorage_CIStorageItemPropertiesWithProvider: test_component.IID = .init(
        Data1: 0x861BF39B, Data2: 0x6368, Data3: 0x4DEE, Data4: ( 0xB4,0x0E,0x74,0x68,0x4A,0x5C,0xE7,0x14 )
    ) // 861BF39B-6368-4DEE-B40E-74684A5CE714
    public class IStorageItemPropertiesWithProvider: test_component.IInspectable {
        override public class var IID: test_component.IID { IID___x_ABI_CWindows_CStorage_CIStorageItemPropertiesWithProvider }

        open func get_Provider() throws -> test_component.StorageProvider? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CStorage_CIStorageItemPropertiesWithProvider.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Provider(pThis, &valueAbi))
                }
            }
            return __IMPL_Windows_Storage.StorageProviderBridge.from(abi: value)
        }

    }

    internal static var IStorageItemPropertiesWithProviderVTable: __x_ABI_CWindows_CStorage_CIStorageItemPropertiesWithProviderVtbl = .init(
        QueryInterface: { IStorageItemPropertiesWithProviderWrapper.queryInterface($0, $1, $2) },
        AddRef: { IStorageItemPropertiesWithProviderWrapper.addRef($0) },
        Release: { IStorageItemPropertiesWithProviderWrapper.release($0) },
        GetIids: {
            let size = MemoryLayout<test_component.IID>.size
            let iids = CoTaskMemAlloc(UInt64(size) * 4).assumingMemoryBound(to: test_component.IID.self)
            iids[0] = IUnknown.IID
            iids[1] = IInspectable.IID
            iids[2] = __ABI_Windows_Storage.IStorageItemPropertiesWithProviderWrapper.IID
            iids[3] = __ABI_Windows_Storage.IStorageItemPropertiesWrapper.IID
            $1!.pointee = 4
            $2!.pointee = iids
            return S_OK
        },

        GetRuntimeClassName: {
            _ = $0
            let hstring = try! HString("Windows.Storage.IStorageItemPropertiesWithProvider").detach()
            $1!.pointee = hstring
            return S_OK
        },

        GetTrustLevel: {
            _ = $0
            $1!.pointee = TrustLevel(rawValue: 0)
            return S_OK
        },

        get_Provider: {
            guard let __unwrapped__instance = IStorageItemPropertiesWithProviderWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value = __unwrapped__instance.provider
            value?.copyTo($1)
            return S_OK
        }
    )

    public typealias IStorageItemPropertiesWithProviderWrapper = InterfaceWrapperBase<__IMPL_Windows_Storage.IStorageItemPropertiesWithProviderBridge>
}
@_spi(WinRTInternal)
public class IStorageItemPropertiesWithProviderMaker: MakeFromAbi {
    public typealias SwiftType = AnyIStorageItemPropertiesWithProvider
    public static func from(abi: test_component.IInspectable) -> SwiftType {
        let swiftAbi: __ABI_Windows_Storage.IStorageItemPropertiesWithProvider = try! abi.QueryInterface()
        return __IMPL_Windows_Storage.IStorageItemPropertiesWithProviderBridge.from(abi: RawPointer(swiftAbi))!
    }
}

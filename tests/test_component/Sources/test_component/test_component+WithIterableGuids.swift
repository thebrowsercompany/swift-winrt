// WARNING: Please don't edit this file. It was generated by Swift/WinRT v0.0.1
// swiftlint:disable all
import Foundation
@_spi(WinRTInternal) @_spi(WinRTImplements) import WindowsFoundation
import CWinRT

public protocol WithIterableGuids : WinRTInterface {
    func ids() throws -> WindowsFoundation.AnyIVector<Foundation.UUID>!
}

extension WithIterableGuids {
    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        switch iid {
            case __ABI_test_component.WithIterableGuidsWrapper.IID:
                let wrapper = __ABI_test_component.WithIterableGuidsWrapper(self)
                return wrapper!.queryInterface(iid)
            default: return nil
        }
    }
}
public typealias AnyWithIterableGuids = any WithIterableGuids

// MARK: - WithIterableGuids Internals

@_spi(WinRTInternal)
extension __IMPL_test_component {
    public enum WithIterableGuidsBridge : AbiInterfaceBridge {
        public typealias CABI = __x_ABI_Ctest__component_CWithIterableGuids
        public typealias SwiftABI = __ABI_test_component.WithIterableGuids
        public typealias SwiftProjection = AnyWithIterableGuids
        public static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
            guard let abi = abi else { return nil }
            return WithIterableGuidsImpl(abi)
        }

        public static func makeAbi() -> CABI {
            let vtblPtr = withUnsafeMutablePointer(to: &__ABI_test_component.WithIterableGuidsVTable) { $0 }
            return .init(lpVtbl: vtblPtr)
        }
    }

    fileprivate class WithIterableGuidsImpl: WithIterableGuids, WinRTAbiImpl {
        fileprivate typealias Bridge = WithIterableGuidsBridge
        fileprivate let _default: Bridge.SwiftABI
        fileprivate var thisPtr: WindowsFoundation.IInspectable { _default }
        fileprivate init(_ fromAbi: ComPtr<Bridge.CABI>) {
            _default = Bridge.SwiftABI(fromAbi)
        }

        fileprivate func ids() throws -> WindowsFoundation.AnyIVector<Foundation.UUID>! {
            try _default.IDs()
        }

    }

}
@_spi(WinRTInternal)
extension __ABI_test_component {
    private static let IID___x_ABI_Ctest__component_CWithIterableGuids: WindowsFoundation.IID = .init(
        Data1: 0xF8BD03F6, Data2: 0xBD7E, Data3: 0x586D, Data4: ( 0x96,0xB8,0x63,0xB6,0x39,0xA8,0xD0,0x42 ) // F8BD03F6-BD7E-586D-96B8-63B639A8D042
    ) 

    public class WithIterableGuids: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_Ctest__component_CWithIterableGuids }

        open func IDs() throws -> WindowsFoundation.AnyIVector<Foundation.UUID>? {
            let (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_Ctest__component_CWithIterableGuids.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.IDs(pThis, &resultAbi))
                }
            }
            return test_component.__x_ABI_C__FIVector_1_GUIDWrapper.unwrapFrom(abi: result)
        }

    }

    internal static var WithIterableGuidsVTable: __x_ABI_Ctest__component_CWithIterableGuidsVtbl = .init(
        QueryInterface: { WithIterableGuidsWrapper.queryInterface($0, $1, $2) },
        AddRef: { WithIterableGuidsWrapper.addRef($0) },
        Release: { WithIterableGuidsWrapper.release($0) },
        GetIids: {
            let size = MemoryLayout<WindowsFoundation.IID>.size
            let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: WindowsFoundation.IID.self)
            iids[0] = IUnknown.IID
            iids[1] = IInspectable.IID
            iids[2] = __ABI_test_component.WithIterableGuidsWrapper.IID
            $1!.pointee = 3
            $2!.pointee = iids
            return S_OK
        },

        GetRuntimeClassName: {
            _ = $0
            let hstring = try! HString("test_component.WithIterableGuids").detach()
            $1!.pointee = hstring
            return S_OK
        },

        GetTrustLevel: {
            _ = $0
            $1!.pointee = TrustLevel(rawValue: 0)
            return S_OK
        },

        IDs: {
            do {
                guard let __unwrapped__instance = WithIterableGuidsWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let result = try __unwrapped__instance.ids()
                let resultWrapper = test_component.__x_ABI_C__FIVector_1_GUIDWrapper(result)
                resultWrapper?.copyTo($1)
                return S_OK
            } catch { return failWith(error: error) }
        }
    )

    public typealias WithIterableGuidsWrapper = InterfaceWrapperBase<__IMPL_test_component.WithIterableGuidsBridge>
}
@_spi(WinRTInternal)
public class WithIterableGuidsMaker: MakeFromAbi {
    public typealias SwiftType = AnyWithIterableGuids
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        let swiftAbi: __ABI_test_component.WithIterableGuids = try! abi.QueryInterface()
        return __IMPL_test_component.WithIterableGuidsBridge.from(abi: RawPointer(swiftAbi))!
    }
}

// WARNING: Please don't edit this file. It was generated by Swift/WinRT v0.0.1
// swiftlint:disable all
import Foundation
import Ctest_component

public final class BaseMapCollection : WinRTClass, IMap, IIterable {
    public typealias K = String
    public typealias V = Base?
    public typealias T = AnyIKeyValuePair<String, Base?>?
    private typealias SwiftABI = test_component.IMapString_Base
    private typealias CABI = __x_ABI_C__FIMap_2_HSTRING___x_ABI_Ctest__zcomponent__CBase
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: test_component.IInspectable) {
        super.init(fromAbi)
    }

    override public func queryInterface(_ iid: test_component.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    public func lookup(_ key: String) -> Base? {
        try! _default.Lookup(key)
    }

    public func hasKey(_ key: String) -> Bool {
        try! _default.HasKey(key)
    }

    public func getView() -> AnyIMapView<String, Base?>? {
        try! _default.GetView()
    }

    public func insert(_ key: String, _ value: Base?) -> Bool {
        try! _default.Insert(key, value)
    }

    public func remove(_ key: String) {
        try! _default.Remove(key)
    }

    public func clear() {
        try! _default.Clear()
    }

    public var size : UInt32 {
        get { try! _default.get_Size() }
    }

    private lazy var _IIterable: IIterableIKeyValuePairString_Base! = getInterfaceForCaching()
    public func first() -> AnyIIterator<AnyIKeyValuePair<String, Base?>?>? {
        try! _IIterable.First()
    }

    deinit {
        _default = nil
        _IIterable = nil
    }
}

// MARK: - BaseMapCollection Internals

@_spi(WinRTInternal)
extension __IMPL_test_component {
    public enum BaseMapCollectionBridge: AbiBridge {
        public typealias SwiftProjection = BaseMapCollection
        public typealias CABI = __x_ABI_C__FIMap_2_HSTRING___x_ABI_Ctest__zcomponent__CBase
        public static func from(abi: ComPtr<__x_ABI_C__FIMap_2_HSTRING___x_ABI_Ctest__zcomponent__CBase>?) -> BaseMapCollection? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: test_component.IInspectable(abi))
        }
    }

}
@_spi(WinRTInternal)
public class BaseMapCollectionMaker: MakeFromAbi {
    public typealias SwiftType = BaseMapCollection
    public static func from(abi: test_component.IInspectable) -> SwiftType {
        return BaseMapCollection(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
extension __ABI_test_component {
}

// WARNING: Please don't edit this file. It was generated by Swift/WinRT v0.0.1
import Ctest_component

public typealias CollectionChange = __x_ABI_CWindows_CFoundation_CCollections_CCollectionChange
public final class PropertySet : WinRTClass, IObservableMap, IMap, IIterable, IPropertySet {
    public typealias K = String
    public typealias V = Any?
    public typealias T = AnyIKeyValuePair<String, Any?>?
    private typealias SwiftABI = __ABI_Windows_Foundation_Collections.IPropertySet
    private typealias CABI = __x_ABI_CWindows_CFoundation_CCollections_CIPropertySet
    private var _default: SwiftABI!
    public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }   
        if T.self == Ctest_component.IInspectable.self {
            return RawPointer(_default)
        }
        return nil
    }

    public var thisPtr: test_component.IInspectable { _default }

    public static func from(abi: UnsafeMutablePointer<__x_ABI_CWindows_CFoundation_CCollections_CIPropertySet>?) -> PropertySet? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: .init(abi))
    }

    public init(fromAbi: test_component.IInspectable) {
        _default = try! fromAbi.QueryInterface()
    }

    public func queryInterface(_ iid: IID) -> IUnknownRef? {
        return test_component.queryInterface(sealed: self, iid)}
    public init() {
        try! _default = RoActivateInstance(HString("Windows.Foundation.Collections.PropertySet"))
    }

    internal lazy var _IObservableMap: IObservableMapString_Any = try! _default.QueryInterface()
    // MARK: WinRT
    public lazy var mapChanged : Event<MapChangedEventHandler<String, Any?>> = {
      .init(
        add: { [weak this = _IObservableMap] in
          guard let this else { return .init() }
          let wrapper = test_component.__x_ABI_C__FMapChangedEventHandler_2_HSTRING_IInspectableWrapper($0)
          let abi = try! wrapper?.toABI { $0 }
          return try! this.add_MapChangedImpl(abi)
        },
        remove: { [weak this = _IObservableMap] in
         try? this?.remove_MapChangedImpl($0) 
       }
      )
    }()

    internal lazy var _IMap: IMapString_Any = try! _default.QueryInterface()
    // MARK: WinRT
    public func lookup(_ key: String) -> Any? {
        let _key = try! HString(key)
        let result = try! _IMap.LookupImpl(_key.get())
        return __ABI_.AnyWrapper.unwrapFrom(abi: result)
    }

    public func hasKey(_ key: String) -> Bool {
        let _key = try! HString(key)
        let result = try! _IMap.HasKeyImpl(_key.get())
        return .init(from: result)
    }

    public func getView() -> AnyIMapView<String, Any?>? {
        let result = try! _IMap.GetViewImpl()
        return test_component.__x_ABI_C__FIMapView_2_HSTRING_IInspectableWrapper.unwrapFrom(abi: result)
    }

    public func insert(_ key: String, _ value: Any?) -> Bool {
        let _key = try! HString(key)
        let valueWrapper = __ABI_.AnyWrapper(value)
        let _value = try! valueWrapper?.toABI { $0 }
        let result = try! _IMap.InsertImpl(_key.get(), _value)
        return .init(from: result)
    }

    public func remove(_ key: String) {
        let _key = try! HString(key)
        try! _IMap.RemoveImpl(_key.get())
    }

    public func clear() {
        try! _IMap.ClearImpl()
    }

    public var size : UInt32 {
        get {
            let result = try! _IMap.get_SizeImpl()
            return result
        }

    }

    internal lazy var _IIterable: IIterableIKeyValuePairString_Any = try! _default.QueryInterface()
    // MARK: WinRT
    public func first() -> AnyIIterator<AnyIKeyValuePair<String, Any?>?>? {
        let result = try! _IIterable.FirstImpl()
        return test_component.__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectableWrapper.unwrapFrom(abi: result)
    }

}

public final class StringMap : WinRTClass, IMap, IIterable, IObservableMap {
    public typealias K = String
    public typealias V = String
    public typealias T = AnyIKeyValuePair<String, String>?
    private typealias SwiftABI = IMapString_String
    private typealias CABI = __x_ABI_C__FIMap_2_HSTRING_HSTRING
    private var _default: SwiftABI!
    public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }   
        if T.self == Ctest_component.IInspectable.self {
            return RawPointer(_default)
        }
        return nil
    }

    public var thisPtr: test_component.IInspectable { _default }

    public static func from(abi: UnsafeMutablePointer<__x_ABI_C__FIMap_2_HSTRING_HSTRING>?) -> StringMap? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: .init(abi))
    }

    public init(fromAbi: test_component.IInspectable) {
        _default = try! fromAbi.QueryInterface()
    }

    public func queryInterface(_ iid: IID) -> IUnknownRef? {
        return test_component.queryInterface(sealed: self, iid)}
    public init() {
        try! _default = RoActivateInstance(HString("Windows.Foundation.Collections.StringMap"))
    }

    // MARK: WinRT
    public func lookup(_ key: String) -> String {
        let _key = try! HString(key)
        let result = try! _default.LookupImpl(_key.get())
        return .init(from: result)
    }

    public func hasKey(_ key: String) -> Bool {
        let _key = try! HString(key)
        let result = try! _default.HasKeyImpl(_key.get())
        return .init(from: result)
    }

    public func getView() -> AnyIMapView<String, String>? {
        let result = try! _default.GetViewImpl()
        return test_component.__x_ABI_C__FIMapView_2_HSTRING_HSTRINGWrapper.unwrapFrom(abi: result)
    }

    public func insert(_ key: String, _ value: String) -> Bool {
        let _key = try! HString(key)
        let _value = try! HString(value)
        let result = try! _default.InsertImpl(_key.get(), _value.get())
        return .init(from: result)
    }

    public func remove(_ key: String) {
        let _key = try! HString(key)
        try! _default.RemoveImpl(_key.get())
    }

    public func clear() {
        try! _default.ClearImpl()
    }

    public var size : UInt32 {
        get {
            let result = try! _default.get_SizeImpl()
            return result
        }

    }

    internal lazy var _IIterable: IIterableIKeyValuePairString_String = try! _default.QueryInterface()
    // MARK: WinRT
    public func first() -> AnyIIterator<AnyIKeyValuePair<String, String>?>? {
        let result = try! _IIterable.FirstImpl()
        return test_component.__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRINGWrapper.unwrapFrom(abi: result)
    }

    internal lazy var _IObservableMap: IObservableMapString_String = try! _default.QueryInterface()
    // MARK: WinRT
    public lazy var mapChanged : Event<MapChangedEventHandler<String, String>> = {
      .init(
        add: { [weak this = _IObservableMap] in
          guard let this else { return .init() }
          let wrapper = test_component.__x_ABI_C__FMapChangedEventHandler_2_HSTRING_HSTRINGWrapper($0)
          let abi = try! wrapper?.toABI { $0 }
          return try! this.add_MapChangedImpl(abi)
        },
        remove: { [weak this = _IObservableMap] in
         try? this?.remove_MapChangedImpl($0) 
       }
      )
    }()

}

public final class ValueSet : WinRTClass, IObservableMap, IMap, IIterable, IPropertySet {
    public typealias K = String
    public typealias V = Any?
    public typealias T = AnyIKeyValuePair<String, Any?>?
    private typealias SwiftABI = __ABI_Windows_Foundation_Collections.IPropertySet
    private typealias CABI = __x_ABI_CWindows_CFoundation_CCollections_CIPropertySet
    private var _default: SwiftABI!
    public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }   
        if T.self == Ctest_component.IInspectable.self {
            return RawPointer(_default)
        }
        return nil
    }

    public var thisPtr: test_component.IInspectable { _default }

    public static func from(abi: UnsafeMutablePointer<__x_ABI_CWindows_CFoundation_CCollections_CIPropertySet>?) -> ValueSet? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: .init(abi))
    }

    public init(fromAbi: test_component.IInspectable) {
        _default = try! fromAbi.QueryInterface()
    }

    public func queryInterface(_ iid: IID) -> IUnknownRef? {
        return test_component.queryInterface(sealed: self, iid)}
    public init() {
        try! _default = RoActivateInstance(HString("Windows.Foundation.Collections.ValueSet"))
    }

    internal lazy var _IObservableMap: IObservableMapString_Any = try! _default.QueryInterface()
    // MARK: WinRT
    public lazy var mapChanged : Event<MapChangedEventHandler<String, Any?>> = {
      .init(
        add: { [weak this = _IObservableMap] in
          guard let this else { return .init() }
          let wrapper = test_component.__x_ABI_C__FMapChangedEventHandler_2_HSTRING_IInspectableWrapper($0)
          let abi = try! wrapper?.toABI { $0 }
          return try! this.add_MapChangedImpl(abi)
        },
        remove: { [weak this = _IObservableMap] in
         try? this?.remove_MapChangedImpl($0) 
       }
      )
    }()

    internal lazy var _IMap: IMapString_Any = try! _default.QueryInterface()
    // MARK: WinRT
    public func lookup(_ key: String) -> Any? {
        let _key = try! HString(key)
        let result = try! _IMap.LookupImpl(_key.get())
        return __ABI_.AnyWrapper.unwrapFrom(abi: result)
    }

    public func hasKey(_ key: String) -> Bool {
        let _key = try! HString(key)
        let result = try! _IMap.HasKeyImpl(_key.get())
        return .init(from: result)
    }

    public func getView() -> AnyIMapView<String, Any?>? {
        let result = try! _IMap.GetViewImpl()
        return test_component.__x_ABI_C__FIMapView_2_HSTRING_IInspectableWrapper.unwrapFrom(abi: result)
    }

    public func insert(_ key: String, _ value: Any?) -> Bool {
        let _key = try! HString(key)
        let valueWrapper = __ABI_.AnyWrapper(value)
        let _value = try! valueWrapper?.toABI { $0 }
        let result = try! _IMap.InsertImpl(_key.get(), _value)
        return .init(from: result)
    }

    public func remove(_ key: String) {
        let _key = try! HString(key)
        try! _IMap.RemoveImpl(_key.get())
    }

    public func clear() {
        try! _IMap.ClearImpl()
    }

    public var size : UInt32 {
        get {
            let result = try! _IMap.get_SizeImpl()
            return result
        }

    }

    internal lazy var _IIterable: IIterableIKeyValuePairString_Any = try! _default.QueryInterface()
    // MARK: WinRT
    public func first() -> AnyIIterator<AnyIKeyValuePair<String, Any?>?>? {
        let result = try! _IIterable.FirstImpl()
        return test_component.__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectableWrapper.unwrapFrom(abi: result)
    }

}

public typealias MapChangedEventHandler<K,V> = (AnyIObservableMap<K, V>?, AnyIMapChangedEventArgs<K>?) -> ()
public typealias VectorChangedEventHandler<T> = (AnyIObservableVector<T>?, AnyIVectorChangedEventArgs?) -> ()
public protocol IIterable<T> : WinRTInterface {
    associatedtype T
    func first() -> test_component.AnyIIterator<T>?
}

public typealias AnyIIterable<T> = any IIterable<T>

public protocol IIterator<T> : WinRTInterface {
    associatedtype T
    func moveNext() -> Bool
    var current: T { get }
    var hasCurrent: Bool { get }
}

public typealias AnyIIterator<T> = any IIterator<T>

public protocol IKeyValuePair<K,V> : WinRTInterface {
    associatedtype K
    associatedtype V
    var key: K { get }
    var value: V { get }
}

public typealias AnyIKeyValuePair<K,V> = any IKeyValuePair<K,V>

public protocol IMapChangedEventArgs<K> : WinRTInterface {
    associatedtype K
    var collectionChange: test_component.CollectionChange { get }
    var key: K { get }
}

public typealias AnyIMapChangedEventArgs<K> = any IMapChangedEventArgs<K>

public protocol IMapView<K,V> : IIterable where T == AnyIKeyValuePair<K,V>? {
    associatedtype K
    associatedtype V
    func lookup(_ key: K) -> V
    func hasKey(_ key: K) -> Bool
    func split(_ first: inout test_component.AnyIMapView<K, V>?, _ second: inout test_component.AnyIMapView<K, V>?)
    var size: UInt32 { get }
}

public typealias AnyIMapView<K,V> = any IMapView<K,V>

public protocol IMap<K,V> : IIterable where T == AnyIKeyValuePair<K,V>? {
    associatedtype K
    associatedtype V
    func lookup(_ key: K) -> V
    func hasKey(_ key: K) -> Bool
    func getView() -> test_component.AnyIMapView<K, V>?
    func insert(_ key: K, _ value: V) -> Bool
    func remove(_ key: K)
    func clear()
    var size: UInt32 { get }
}

public typealias AnyIMap<K,V> = any IMap<K,V>

public protocol IObservableMap<K,V> : IIterable, IMap {
    associatedtype K
    associatedtype V
    var mapChanged: Event<MapChangedEventHandler<K,V>> { get }
}

public typealias AnyIObservableMap<K,V> = any IObservableMap<K,V>

public protocol IObservableVector<T> : IIterable, IVector {
    associatedtype T
    var vectorChanged: Event<VectorChangedEventHandler<T>> { get }
}

public typealias AnyIObservableVector<T> = any IObservableVector<T>

public protocol IPropertySet : IObservableMap<String, Any?>, IMap<String, Any?>, IIterable<AnyIKeyValuePair<String, Any?>?> {
}

extension IPropertySet {
    public func queryInterface(_ iid: IID) -> IUnknownRef? {
        switch iid {
            case __ABI_Windows_Foundation_Collections.IPropertySetWrapper.IID:
                let wrapper = __ABI_Windows_Foundation_Collections.IPropertySetWrapper(self)
                return wrapper!.queryInterface(iid)
            case test_component.__x_ABI_C__FIObservableMap_2_HSTRING_IInspectableWrapper.IID:
                let wrapper = test_component.__x_ABI_C__FIObservableMap_2_HSTRING_IInspectableWrapper(self)
                return wrapper!.queryInterface(iid)
            case test_component.__x_ABI_C__FIMap_2_HSTRING_IInspectableWrapper.IID:
                let wrapper = test_component.__x_ABI_C__FIMap_2_HSTRING_IInspectableWrapper(self)
                return wrapper!.queryInterface(iid)
            case test_component.__x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectableWrapper.IID:
                let wrapper = test_component.__x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectableWrapper(self)
                return wrapper!.queryInterface(iid)
            default: return nil
        }
    }
}
public typealias AnyIPropertySet = any IPropertySet

public protocol IVectorChangedEventArgs : WinRTInterface {
    var collectionChange: test_component.CollectionChange { get }
    var index: UInt32 { get }
}

extension IVectorChangedEventArgs {
    public func queryInterface(_ iid: IID) -> IUnknownRef? {
        switch iid {
            case __ABI_Windows_Foundation_Collections.IVectorChangedEventArgsWrapper.IID:
                let wrapper = __ABI_Windows_Foundation_Collections.IVectorChangedEventArgsWrapper(self)
                return wrapper!.queryInterface(iid)
            default: return nil
        }
    }
}
public typealias AnyIVectorChangedEventArgs = any IVectorChangedEventArgs

public protocol IVectorView<T> : IIterable, Collection where Element == T, Index == Int {
    associatedtype T
    func getAt(_ index: UInt32) -> T
    func indexOf(_ value: T, _ index: inout UInt32) -> Bool
    var size: UInt32 { get }
}

public typealias AnyIVectorView<T> = any IVectorView<T>

public protocol IVector<T> : IIterable, Collection where Element == T, Index == Int {
    associatedtype T
    func getAt(_ index: UInt32) -> T
    func getView() -> test_component.AnyIVectorView<T>?
    func indexOf(_ value: T, _ index: inout UInt32) -> Bool
    func setAt(_ index: UInt32, _ value: T)
    func insertAt(_ index: UInt32, _ value: T)
    func removeAt(_ index: UInt32)
    func append(_ value: T)
    func removeAtEnd()
    func clear()
    var size: UInt32 { get }
}

public typealias AnyIVector<T> = any IVector<T>

extension test_component.CollectionChange {
    public static var reset : test_component.CollectionChange {
        CollectionChange_Reset
    }
    public static var itemInserted : test_component.CollectionChange {
        CollectionChange_ItemInserted
    }
    public static var itemRemoved : test_component.CollectionChange {
        CollectionChange_ItemRemoved
    }
    public static var itemChanged : test_component.CollectionChange {
        CollectionChange_ItemChanged
    }
}
extension test_component.CollectionChange: Hashable, Codable {}


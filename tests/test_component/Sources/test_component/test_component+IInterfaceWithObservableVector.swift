// WARNING: Please don't edit this file. It was generated by Swift/WinRT v0.0.1
// swiftlint:disable all
import Foundation
@_spi(WinRTInternal) @_spi(WinRTImplements) import WindowsFoundation
import CWinRT

public protocol IInterfaceWithObservableVector : WinRTInterface {
    func takeObservable(_ basics: WindowsFoundation.AnyIObservableVector<test_component.AnyIBasic?>!) throws
}

extension IInterfaceWithObservableVector {
    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        switch iid {
            case __ABI_test_component.IInterfaceWithObservableVectorWrapper.IID:
                let wrapper = __ABI_test_component.IInterfaceWithObservableVectorWrapper(self)
                return wrapper!.queryInterface(iid)
            default: return nil
        }
    }
}
public typealias AnyIInterfaceWithObservableVector = any IInterfaceWithObservableVector

// MARK: - IInterfaceWithObservableVector Internals

@_spi(WinRTInternal)
extension __IMPL_test_component {
    public enum IInterfaceWithObservableVectorBridge : AbiInterfaceBridge {
        public typealias CABI = __x_ABI_Ctest__component_CIInterfaceWithObservableVector
        public typealias SwiftABI = __ABI_test_component.IInterfaceWithObservableVector
        public typealias SwiftProjection = AnyIInterfaceWithObservableVector
        public static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
            guard let abi = abi else { return nil }
            return IInterfaceWithObservableVectorImpl(abi)
        }

        public static func makeAbi() -> CABI {
            let vtblPtr = withUnsafeMutablePointer(to: &__ABI_test_component.IInterfaceWithObservableVectorVTable) { $0 }
            return .init(lpVtbl: vtblPtr)
        }
    }

    fileprivate class IInterfaceWithObservableVectorImpl: IInterfaceWithObservableVector, WinRTAbiImpl {
        fileprivate typealias Bridge = IInterfaceWithObservableVectorBridge
        fileprivate let _default: Bridge.SwiftABI
        fileprivate var thisPtr: WindowsFoundation.IInspectable { _default }
        fileprivate init(_ fromAbi: ComPtr<Bridge.CABI>) {
            _default = Bridge.SwiftABI(fromAbi)
        }

        fileprivate func takeObservable(_ basics: WindowsFoundation.AnyIObservableVector<AnyIBasic?>!) throws {
            try _default.TakeObservable(basics)
        }

    }

}
@_spi(WinRTInternal)
extension __ABI_test_component {
    private static let IID___x_ABI_Ctest__component_CIInterfaceWithObservableVector: WindowsFoundation.IID = .init(
        Data1: 0x364C232A, Data2: 0xB3A9, Data3: 0x5FD7, Data4: ( 0x91,0x3E,0x53,0x82,0xF7,0x2B,0x64,0xD7 ) // 364C232A-B3A9-5FD7-913E-5382F72B64D7
    ) 

    public class IInterfaceWithObservableVector: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_Ctest__component_CIInterfaceWithObservableVector }

        open func TakeObservable(_ basics: WindowsFoundation.AnyIObservableVector<test_component.AnyIBasic?>?) throws {
            let basicsWrapper = test_component.__x_ABI_C__FIObservableVector_1___x_ABI_Ctest__zcomponent__CIBasicWrapper(basics)
            let _basics = try! basicsWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_Ctest__component_CIInterfaceWithObservableVector.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.TakeObservable(pThis, _basics))
            }
        }

    }

    internal static var IInterfaceWithObservableVectorVTable: __x_ABI_Ctest__component_CIInterfaceWithObservableVectorVtbl = .init(
        QueryInterface: { IInterfaceWithObservableVectorWrapper.queryInterface($0, $1, $2) },
        AddRef: { IInterfaceWithObservableVectorWrapper.addRef($0) },
        Release: { IInterfaceWithObservableVectorWrapper.release($0) },
        GetIids: {
            let size = MemoryLayout<WindowsFoundation.IID>.size
            let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: WindowsFoundation.IID.self)
            iids[0] = IUnknown.IID
            iids[1] = IInspectable.IID
            iids[2] = __ABI_test_component.IInterfaceWithObservableVectorWrapper.IID
            $1!.pointee = 3
            $2!.pointee = iids
            return S_OK
        },

        GetRuntimeClassName: {
            _ = $0
            let hstring = try! HString("test_component.IInterfaceWithObservableVector").detach()
            $1!.pointee = hstring
            return S_OK
        },

        GetTrustLevel: {
            _ = $0
            $1!.pointee = TrustLevel(rawValue: 0)
            return S_OK
        },

        TakeObservable: {
            do {
                guard let __unwrapped__instance = IInterfaceWithObservableVectorWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let basics: WindowsFoundation.AnyIObservableVector<test_component.AnyIBasic?>? = test_component.__x_ABI_C__FIObservableVector_1___x_ABI_Ctest__zcomponent__CIBasicWrapper.unwrapFrom(abi: ComPtr($1))
                try __unwrapped__instance.takeObservable(basics)
                return S_OK
            } catch { return failWith(error: error) }
        }
    )

    public typealias IInterfaceWithObservableVectorWrapper = InterfaceWrapperBase<__IMPL_test_component.IInterfaceWithObservableVectorBridge>
}
@_spi(WinRTInternal)
public class IInterfaceWithObservableVectorMaker: MakeFromAbi {
    public typealias SwiftType = AnyIInterfaceWithObservableVector
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        let swiftAbi: __ABI_test_component.IInterfaceWithObservableVector = try! abi.QueryInterface()
        return __IMPL_test_component.IInterfaceWithObservableVectorBridge.from(abi: RawPointer(swiftAbi))!
    }
}

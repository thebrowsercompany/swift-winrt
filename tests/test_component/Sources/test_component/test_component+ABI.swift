// WARNING: Please don't edit this file. It was generated by Swift/WinRT v0.0.1
import Ctest_component

private var IID___x_ABI_Ctest__component_CIBase: IID {
    IID(Data1: 0xE9FE0BB2, Data2: 0xE1F6, Data3: 0x5E39, Data4: ( 0x92,0xBB,0x2F,0x19,0xFF,0xDE,0x3F,0xDC ))// E9FE0BB2-E1F6-5E39-92BB-2F19FFDE3FDC
}

private var IID___x_ABI_Ctest__component_CIBaseNoOverrides: IID {
    IID(Data1: 0xCAC21C05, Data2: 0xB599, Data3: 0x5D37, Data4: ( 0xA9,0x3A,0xD6,0x0C,0xBD,0xD1,0xD0,0xE8 ))// CAC21C05-B599-5D37-A93A-D60CBDD1D0E8
}

private var IID___x_ABI_Ctest__component_CIBaseNoOverridesProtectedFactory: IID {
    IID(Data1: 0x92FC0572, Data2: 0x825F, Data3: 0x5B3F, Data4: ( 0x9B,0x0B,0xF0,0x80,0xA1,0x66,0xEF,0x06 ))// 92FC0572-825F-5B3F-9B0B-F080A166EF06
}

private var IID___x_ABI_Ctest__component_CIBaseOverrides: IID {
    IID(Data1: 0xEE3CBD78, Data2: 0x04B7, Data3: 0x534F, Data4: ( 0xA7,0x15,0x53,0xDA,0xF5,0x35,0x01,0x3C ))// EE3CBD78-04B7-534F-A715-53DAF535013C
}

private var IID___x_ABI_Ctest__component_CIBaseProtectedFactory: IID {
    IID(Data1: 0x05CAD233, Data2: 0x20A7, Data3: 0x581F, Data4: ( 0xBD,0x44,0x0D,0x13,0x6C,0x31,0x0E,0x0F ))// 05CAD233-20A7-581F-BD44-0D136C310E0F
}

private var IID___x_ABI_Ctest__component_CIBasic: IID {
    IID(Data1: 0x636060A1, Data2: 0xE41D, Data3: 0x59DF, Data4: ( 0xA5,0xD3,0xFB,0x7C,0xE7,0xE1,0x79,0x2F ))// 636060A1-E41D-59DF-A5D3-FB7CE7E1792F
}

private var IID___x_ABI_Ctest__component_CIClass: IID {
    IID(Data1: 0x6C4D9280, Data2: 0xC652, Data3: 0x5CFE, Data4: ( 0xB6,0x94,0x77,0xE1,0xE8,0x7A,0xB4,0x00 ))// 6C4D9280-C652-5CFE-B694-77E1E87AB400
}

private var IID___x_ABI_Ctest__component_CIClassFactory: IID {
    IID(Data1: 0x78914881, Data2: 0xB900, Data3: 0x582A, Data4: ( 0x94,0xB8,0x58,0x19,0x84,0xC0,0xF7,0x8A ))// 78914881-B900-582A-94B8-581984C0F78A
}

private var IID___x_ABI_Ctest__component_CIClassFactory2: IID {
    IID(Data1: 0xF5F62EBE, Data2: 0x931B, Data3: 0x519B, Data4: ( 0x95,0x1A,0xF1,0x4A,0x4B,0xC7,0x83,0xB1 ))// F5F62EBE-931B-519B-951A-F14A4BC783B1
}

private var IID___x_ABI_Ctest__component_CIClassStatics: IID {
    IID(Data1: 0x2E573677, Data2: 0xD7B8, Data3: 0x5305, Data4: ( 0x8F,0x9D,0x1B,0x23,0x15,0xE3,0x77,0x8B ))// 2E573677-D7B8-5305-8F9D-1B2315E3778B
}

private var IID___x_ABI_Ctest__component_CIClassStatics2: IID {
    IID(Data1: 0xB341C098, Data2: 0x033D, Data3: 0x5445, Data4: ( 0x86,0x80,0x70,0x3A,0x93,0xBC,0xDF,0x81 ))// B341C098-033D-5445-8680-703A93BCDF81
}

private var IID___x_ABI_Ctest__component_CICollectionTester: IID {
    IID(Data1: 0xF8B13FDD, Data2: 0xB785, Data3: 0x53D4, Data4: ( 0xBC,0x69,0xFA,0x7D,0x02,0xBD,0x88,0xE6 ))// F8B13FDD-B785-53D4-BC69-FA7D02BD88E6
}

private var IID___x_ABI_Ctest__component_CICollectionTesterStatics: IID {
    IID(Data1: 0xB357268D, Data2: 0x1A80, Data3: 0x5A61, Data4: ( 0xB3,0xEF,0x13,0x22,0x4B,0xE0,0x63,0x10 ))// B357268D-1A80-5A61-B3EF-13224BE06310
}

private var IID___x_ABI_Ctest__component_CIDerived: IID {
    IID(Data1: 0x864F4DCB, Data2: 0xC4FF, Data3: 0x5FBB, Data4: ( 0xB4,0x5D,0xA7,0x3E,0x25,0x7B,0x48,0xA2 ))// 864F4DCB-C4FF-5FBB-B45D-A73E257B48A2
}

private var IID___x_ABI_Ctest__component_CIEventTester: IID {
    IID(Data1: 0xDD19BE65, Data2: 0x638D, Data3: 0x519A, Data4: ( 0x81,0xA9,0x73,0x3F,0xDB,0xD8,0x7A,0x17 ))// DD19BE65-638D-519A-81A9-733FDBD87A17
}

private var IID___x_ABI_Ctest__component_CIEventTesterFactory: IID {
    IID(Data1: 0x9E6F50EC, Data2: 0x0F53, Data3: 0x5507, Data4: ( 0xB7,0x37,0x14,0x3B,0x1B,0xB3,0x53,0x65 ))// 9E6F50EC-0F53-5507-B737-143B1BB35365
}

private var IID___x_ABI_Ctest__component_CIIAmImplementable: IID {
    IID(Data1: 0x0B3C0120, Data2: 0xD138, Data3: 0x512B, Data4: ( 0x8D,0x38,0xF5,0x1E,0x35,0xF0,0x65,0xB2 ))// 0B3C0120-D138-512B-8D38-F51E35F065B2
}

private var IID___x_ABI_Ctest__component_CINullValuesStatics: IID {
    IID(Data1: 0x4F2BB96B, Data2: 0xB91D, Data3: 0x51E5, Data4: ( 0xA5,0x89,0x26,0x52,0xC1,0x65,0xA8,0xB5 ))// 4F2BB96B-B91D-51E5-A589-2652C165A8B5
}

private var IID___x_ABI_Ctest__component_CISimple: IID {
    IID(Data1: 0xDFE1A506, Data2: 0xBC5C, Data3: 0x581B, Data4: ( 0xA2,0xCB,0x27,0xF7,0xC0,0x9C,0x60,0xFE ))// DFE1A506-BC5C-581B-A2CB-27F7C09C60FE
}

private var IID___x_ABI_Ctest__component_CISimpleDelegate: IID {
    IID(Data1: 0xB73AD784, Data2: 0xEADD, Data3: 0x54B7, Data4: ( 0xA6,0x8E,0x8A,0xC5,0x6E,0xAB,0x73,0x87 ))// B73AD784-EADD-54B7-A68E-8AC56EAB7387
}

private var IID___x_ABI_Ctest__component_CISimpleStatics: IID {
    IID(Data1: 0xC8DCADA0, Data2: 0xFD8E, Data3: 0x5E27, Data4: ( 0x95,0x51,0xA3,0x68,0xFE,0x1D,0x11,0xB2 ))// C8DCADA0-FD8E-5E27-9551-A368FE1D11B2
}

private var IID___x_ABI_Ctest__component_CIStaticClassStatics: IID {
    IID(Data1: 0x92E618EF, Data2: 0xFF6E, Data3: 0x5975, Data4: ( 0x86,0x8C,0x99,0xAD,0xC1,0x1D,0x36,0xDE ))// 92E618EF-FF6E-5975-868C-99ADC11D36DE
}

private var IID___x_ABI_Ctest__component_CIUnsealedDerived: IID {
    IID(Data1: 0xB4FA333D, Data2: 0x9BCA, Data3: 0x592D, Data4: ( 0x9D,0xCB,0x18,0xAF,0x96,0xD7,0x6A,0x03 ))// B4FA333D-9BCA-592D-9DCB-18AF96D76A03
}

private var IID___x_ABI_Ctest__component_CIUnsealedDerived2: IID {
    IID(Data1: 0xA58C23CF, Data2: 0x4DC4, Data3: 0x59C5, Data4: ( 0x8D,0xE3,0x9F,0x06,0x3B,0x21,0x8D,0xDE ))// A58C23CF-4DC4-59C5-8DE3-9F063B218DDE
}

private var IID___x_ABI_Ctest__component_CIUnsealedDerived2ProtectedFactory: IID {
    IID(Data1: 0x0978D147, Data2: 0x77BF, Data3: 0x5E0A, Data4: ( 0xA1,0x64,0xCA,0x95,0x1B,0xCA,0xB8,0xB4 ))// 0978D147-77BF-5E0A-A164-CA951BCAB8B4
}

private var IID___x_ABI_Ctest__component_CIUnsealedDerivedFactory: IID {
    IID(Data1: 0x3496ED92, Data2: 0x7A72, Data3: 0x5271, Data4: ( 0x9B,0xC4,0x4D,0x3D,0xA0,0x80,0x3C,0xA8 ))// 3496ED92-7A72-5271-9BC4-4D3DA0803CA8
}

private var IID___x_ABI_Ctest__component_CIUnsealedDerivedNoOverrides: IID {
    IID(Data1: 0x3CD27E28, Data2: 0x2DFF, Data3: 0x5A17, Data4: ( 0x82,0x63,0x1B,0xFA,0x75,0x04,0x34,0xAA ))// 3CD27E28-2DFF-5A17-8263-1BFA750434AA
}

private var IID___x_ABI_Ctest__component_CIUnsealedDerivedNoOverridesProtectedFactory: IID {
    IID(Data1: 0x8D27A3F3, Data2: 0xD785, Data3: 0x53E3, Data4: ( 0x83,0x19,0x6A,0x50,0x97,0xB1,0x04,0xAB ))// 8D27A3F3-D785-53E3-8319-6A5097B104AB
}

private var IID___x_ABI_Ctest__component_CIUnsealedDerivedOverloads2: IID {
    IID(Data1: 0xF4CE1AD9, Data2: 0x36B9, Data3: 0x5DC7, Data4: ( 0xA0,0x07,0x3A,0xCD,0xF4,0x22,0xE7,0x05 ))// F4CE1AD9-36B9-5DC7-A007-3ACDF422E705
}

private var IID___x_ABI_Ctest__component_CIUnsealedDerivedOverrides: IID {
    IID(Data1: 0x828DCEE6, Data2: 0xF93A, Data3: 0x5A4D, Data4: ( 0xBC,0xEE,0xF7,0xC1,0xDE,0xE4,0xEB,0x4E ))// 828DCEE6-F93A-5A4D-BCEE-F7C1DEE4EB4E
}

private var IID___x_ABI_Ctest__component_CInterfaceWithReturnDelegate: IID {
    IID(Data1: 0xB0EBC406, Data2: 0x17C0, Data3: 0x5703, Data4: ( 0xB9,0xC7,0x50,0xBE,0x67,0x5B,0xBC,0x95 ))// B0EBC406-17C0-5703-B9C7-50BE675BBC95
}

private var IID___x_ABI_Ctest__component_CIObjectHandler: IID {
    IID(Data1: 0x5DD35752, Data2: 0x9800, Data3: 0x5961, Data4: ( 0x80,0xDE,0xFC,0x5E,0x20,0x9E,0x6E,0x2D ))// 5DD35752-9800-5961-80DE-FC5E209E6E2D
}

private var IID___x_ABI_Ctest__component_CIVoidToVoidDelegate: IID {
    IID(Data1: 0x5ED7E415, Data2: 0x84E7, Data3: 0x5E4C, Data4: ( 0x8F,0x68,0xD4,0x65,0x3C,0x39,0xEE,0x46 ))// 5ED7E415-84E7-5E4C-8F68-D4653C39EE46
}

public enum __ABI_test_component {
    open class IBase: test_component.IInspectable {
        override public class var IID: IID { IID___x_ABI_Ctest__component_CIBase }

        internal func DoTheThingImpl() throws {
            _ = try perform(as: __x_ABI_Ctest__component_CIBase.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.DoTheThing(pThis))
            }
        }

    }

    open class IBaseNoOverrides: test_component.IInspectable {
        override public class var IID: IID { IID___x_ABI_Ctest__component_CIBaseNoOverrides }

    }

    internal class IBaseNoOverridesProtectedFactory: test_component.IInspectable, ComposableActivationFactory {
        internal typealias Composable = test_component.BaseNoOverrides.Composable

        override public class var IID: IID { IID___x_ABI_Ctest__component_CIBaseNoOverridesProtectedFactory }

        internal func CreateInstanceImpl(_ baseInterface: UnsafeMutablePointer<Ctest_component.IInspectable>?, _ innerInterface: inout UnsafeMutablePointer<Ctest_component.IInspectable>?) throws -> UnsafeMutablePointer<__x_ABI_Ctest__component_CIBaseNoOverrides>? {
            var value: UnsafeMutablePointer<__x_ABI_Ctest__component_CIBaseNoOverrides>?
            _ = try perform(as: __x_ABI_Ctest__component_CIBaseNoOverridesProtectedFactory.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance(pThis, baseInterface, &innerInterface, &value))
            }
            return value
        }

    }

    open class IBaseOverrides: test_component.IInspectable {
        override public class var IID: IID { IID___x_ABI_Ctest__component_CIBaseOverrides }

        internal func OnDoTheThingImpl() throws {
            _ = try perform(as: __x_ABI_Ctest__component_CIBaseOverrides.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.OnDoTheThing(pThis))
            }
        }

    }

    internal class IBaseProtectedFactory: test_component.IInspectable, ComposableActivationFactory {
        internal typealias Composable = test_component.Base.Composable

        override public class var IID: IID { IID___x_ABI_Ctest__component_CIBaseProtectedFactory }

        internal func CreateInstanceImpl(_ baseInterface: UnsafeMutablePointer<Ctest_component.IInspectable>?, _ innerInterface: inout UnsafeMutablePointer<Ctest_component.IInspectable>?) throws -> UnsafeMutablePointer<__x_ABI_Ctest__component_CIBase>? {
            var value: UnsafeMutablePointer<__x_ABI_Ctest__component_CIBase>?
            _ = try perform(as: __x_ABI_Ctest__component_CIBaseProtectedFactory.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance(pThis, baseInterface, &innerInterface, &value))
            }
            return value
        }

    }

    open class IBasic: test_component.IInspectable {
        override public class var IID: IID { IID___x_ABI_Ctest__component_CIBasic }

        open func MethodImpl() throws {
            _ = try perform(as: __x_ABI_Ctest__component_CIBasic.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Method(pThis))
            }
        }

    }

    internal static var IBasicVTable: __x_ABI_Ctest__component_CIBasicVtbl = .init(
        QueryInterface: {
            guard let pUnk = $0, let riid = $1, let ppvObject = $2 else { return E_INVALIDARG }
            ppvObject.pointee = nil

            switch riid.pointee {
                case IUnknown.IID, IInspectable.IID, ISwiftImplemented.IID, IAgileObject.IID, IBasicWrapper.IID:
                    _ = pUnk.pointee.lpVtbl.pointee.AddRef(pUnk)
                    ppvObject.pointee = UnsafeMutableRawPointer(pUnk)
                    return S_OK
                default:
                    guard let instance = IBasicWrapper.tryUnwrapFrom(raw: pUnk),
                          let iUnknownRef = instance.queryInterface(riid.pointee) else { return failWith(err: E_NOINTERFACE )}
                    ppvObject.pointee = UnsafeMutableRawPointer(iUnknownRef.ref)
                    return S_OK

            }
        },

        AddRef: {
             guard let wrapper = IBasicWrapper.fromRaw($0) else { return 1 }
             _ = wrapper.retain()
             return ULONG(_getRetainCount(wrapper.takeUnretainedValue()))
        },

        Release: {
            guard let wrapper = IBasicWrapper.fromRaw($0) else { return 1 }
            return ULONG(_getRetainCount(wrapper.takeRetainedValue()))
        },

        GetIids: {
            let size = MemoryLayout<IID>.size
            let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: IID.self)
            iids[0] = IUnknown.IID
            iids[1] = IInspectable.IID
            iids[2] = __ABI_test_component.IBasicWrapper.IID
            $1!.pointee = 3
            $2!.pointee = iids
            return S_OK
        },

        GetRuntimeClassName: {
            _ = $0
            let hstring = try! HString("test_component.IBasic").detach()
            $1!.pointee = hstring
            return S_OK
        },

        GetTrustLevel: {
            _ = $0
            $1!.pointee = TrustLevel(rawValue: 0)
            return S_OK
        },

        Method: {
            do {
                guard let __unwrapped__instance = IBasicWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                try __unwrapped__instance.method()
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        }
    )

    public typealias IBasicWrapper = InterfaceWrapperBase<__IMPL_test_component.IBasicImpl>
    open class IClass: test_component.IInspectable {
        override public class var IID: IID { IID___x_ABI_Ctest__component_CIClass }

        internal func get_ImplementationImpl() throws -> UnsafeMutablePointer<__x_ABI_Ctest__component_CIBasic>? {
            var value: UnsafeMutablePointer<__x_ABI_Ctest__component_CIBasic>?
            _ = try perform(as: __x_ABI_Ctest__component_CIClass.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Implementation(pThis, &value))
            }
            return value
        }

        internal func put_ImplementationImpl(_ value: UnsafeMutablePointer<__x_ABI_Ctest__component_CIBasic>?) throws {
            _ = try perform(as: __x_ABI_Ctest__component_CIClass.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Implementation(pThis, value))
            }
        }

        internal func SetDelegateImpl(_ value: UnsafeMutablePointer<__x_ABI_Ctest__component_CISimpleDelegate>?) throws {
            _ = try perform(as: __x_ABI_Ctest__component_CIClass.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.SetDelegate(pThis, value))
            }
        }

        internal func GetDelegateImpl() throws -> UnsafeMutablePointer<__x_ABI_Ctest__component_CISimpleDelegate>? {
            var result: UnsafeMutablePointer<__x_ABI_Ctest__component_CISimpleDelegate>?
            _ = try perform(as: __x_ABI_Ctest__component_CIClass.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetDelegate(pThis, &result))
            }
            return result
        }

        internal func FailImpl(_ message: HSTRING?) throws {
            _ = try perform(as: __x_ABI_Ctest__component_CIClass.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Fail(pThis, message))
            }
        }

        internal func InInt32Impl(_ value: INT32) throws -> HSTRING? {
            var result: HSTRING?
            _ = try perform(as: __x_ABI_Ctest__component_CIClass.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.InInt32(pThis, value, &result))
            }
            return result
        }

        internal func InStringImpl(_ value: HSTRING?) throws -> HSTRING? {
            var result: HSTRING?
            _ = try perform(as: __x_ABI_Ctest__component_CIClass.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.InString(pThis, value, &result))
            }
            return result
        }

        internal func InObjectImpl(_ value: UnsafeMutablePointer<Ctest_component.IInspectable>?) throws -> HSTRING? {
            var result: HSTRING?
            _ = try perform(as: __x_ABI_Ctest__component_CIClass.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.InObject(pThis, value, &result))
            }
            return result
        }

        internal func InEnumImpl(_ value: __x_ABI_Ctest__component_CSigned) throws -> HSTRING? {
            var result: HSTRING?
            _ = try perform(as: __x_ABI_Ctest__component_CIClass.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.InEnum(pThis, value, &result))
            }
            return result
        }

        internal func OutInt32Impl(_ value: inout INT32) throws {
            _ = try perform(as: __x_ABI_Ctest__component_CIClass.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.OutInt32(pThis, &value))
            }
        }

        internal func OutStringImpl(_ value: inout HSTRING?) throws {
            _ = try perform(as: __x_ABI_Ctest__component_CIClass.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.OutString(pThis, &value))
            }
        }

        internal func OutObjectImpl(_ value: inout UnsafeMutablePointer<Ctest_component.IInspectable>?) throws {
            _ = try perform(as: __x_ABI_Ctest__component_CIClass.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.OutObject(pThis, &value))
            }
        }

        internal func OutStringableImpl(_ value: inout UnsafeMutablePointer<__x_ABI_CWindows_CFoundation_CIStringable>?) throws {
            _ = try perform(as: __x_ABI_Ctest__component_CIClass.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.OutStringable(pThis, &value))
            }
        }

        internal func OutBlittableStructImpl(_ value: inout __x_ABI_Ctest__component_CBlittableStruct) throws {
            _ = try perform(as: __x_ABI_Ctest__component_CIClass.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.OutBlittableStruct(pThis, &value))
            }
        }

        internal func OutNonBlittableStructImpl(_ value: inout __x_ABI_Ctest__component_CNonBlittableStruct) throws {
            _ = try perform(as: __x_ABI_Ctest__component_CIClass.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.OutNonBlittableStruct(pThis, &value))
            }
        }

        internal func OutEnumImpl(_ value: inout __x_ABI_Ctest__component_CSigned) throws {
            _ = try perform(as: __x_ABI_Ctest__component_CIClass.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.OutEnum(pThis, &value))
            }
        }

        internal func ReturnObjectImpl() throws -> UnsafeMutablePointer<Ctest_component.IInspectable>? {
            var result: UnsafeMutablePointer<Ctest_component.IInspectable>?
            _ = try perform(as: __x_ABI_Ctest__component_CIClass.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.ReturnObject(pThis, &result))
            }
            return result
        }

        internal func ReturnEnumImpl() throws -> __x_ABI_Ctest__component_CSigned {
            var result: __x_ABI_Ctest__component_CSigned = .init(0)
            _ = try perform(as: __x_ABI_Ctest__component_CIClass.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.ReturnEnum(pThis, &result))
            }
            return result
        }

        internal func ReturnReferenceEnumImpl() throws -> UnsafeMutablePointer<__x_ABI_C__FIReference_1___x_ABI_Ctest__zcomponent__CSigned>? {
            var result: UnsafeMutablePointer<__x_ABI_C__FIReference_1___x_ABI_Ctest__zcomponent__CSigned>?
            _ = try perform(as: __x_ABI_Ctest__component_CIClass.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.ReturnReferenceEnum(pThis, &result))
            }
            return result
        }

        internal func get_EnumPropertyImpl() throws -> __x_ABI_Ctest__component_CFruit {
            var value: __x_ABI_Ctest__component_CFruit = .init(0)
            _ = try perform(as: __x_ABI_Ctest__component_CIClass.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_EnumProperty(pThis, &value))
            }
            return value
        }

        internal func put_EnumPropertyImpl(_ value: __x_ABI_Ctest__component_CFruit) throws {
            _ = try perform(as: __x_ABI_Ctest__component_CIClass.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_EnumProperty(pThis, value))
            }
        }

        internal func NoexceptVoidImpl() throws {
            _ = try perform(as: __x_ABI_Ctest__component_CIClass.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.NoexceptVoid(pThis))
            }
        }

        internal func NoexceptInt32Impl() throws -> INT32 {
            var result: INT32 = 0
            _ = try perform(as: __x_ABI_Ctest__component_CIClass.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.NoexceptInt32(pThis, &result))
            }
            return result
        }

        internal func NoexceptStringImpl() throws -> HSTRING? {
            var result: HSTRING?
            _ = try perform(as: __x_ABI_Ctest__component_CIClass.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.NoexceptString(pThis, &result))
            }
            return result
        }

        internal func ReturnCharImpl() throws -> WCHAR {
            var result: WCHAR = 0
            _ = try perform(as: __x_ABI_Ctest__component_CIClass.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.ReturnChar(pThis, &result))
            }
            return result
        }

        internal func InCharImpl(_ value: WCHAR) throws -> HSTRING? {
            var result: HSTRING?
            _ = try perform(as: __x_ABI_Ctest__component_CIClass.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.InChar(pThis, value, &result))
            }
            return result
        }

        internal func OutCharImpl(_ value: inout WCHAR) throws {
            _ = try perform(as: __x_ABI_Ctest__component_CIClass.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.OutChar(pThis, &value))
            }
        }

        internal func get_StartValueImpl() throws -> UnsafeMutablePointer<__x_ABI_C__FIReference_1_int>? {
            var value: UnsafeMutablePointer<__x_ABI_C__FIReference_1_int>?
            _ = try perform(as: __x_ABI_Ctest__component_CIClass.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_StartValue(pThis, &value))
            }
            return value
        }

        internal func put_StartValueImpl(_ value: UnsafeMutablePointer<__x_ABI_C__FIReference_1_int>?) throws {
            _ = try perform(as: __x_ABI_Ctest__component_CIClass.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_StartValue(pThis, value))
            }
        }

        internal func get_IdImpl() throws -> UnsafeMutablePointer<__x_ABI_C__FIReference_1_GUID>? {
            var value: UnsafeMutablePointer<__x_ABI_C__FIReference_1_GUID>?
            _ = try perform(as: __x_ABI_Ctest__component_CIClass.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Id(pThis, &value))
            }
            return value
        }

        internal func put_IdImpl(_ value: UnsafeMutablePointer<__x_ABI_C__FIReference_1_GUID>?) throws {
            _ = try perform(as: __x_ABI_Ctest__component_CIClass.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Id(pThis, value))
            }
        }

        internal func get_BasePropertyImpl() throws -> UnsafeMutablePointer<__x_ABI_Ctest__component_CIBase>? {
            var value: UnsafeMutablePointer<__x_ABI_Ctest__component_CIBase>?
            _ = try perform(as: __x_ABI_Ctest__component_CIClass.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_BaseProperty(pThis, &value))
            }
            return value
        }

        internal func put_BasePropertyImpl(_ value: UnsafeMutablePointer<__x_ABI_Ctest__component_CIBase>?) throws {
            _ = try perform(as: __x_ABI_Ctest__component_CIClass.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_BaseProperty(pThis, value))
            }
        }

        internal func get_BaseNoOverridesPropertyImpl() throws -> UnsafeMutablePointer<__x_ABI_Ctest__component_CIBaseNoOverrides>? {
            var value: UnsafeMutablePointer<__x_ABI_Ctest__component_CIBaseNoOverrides>?
            _ = try perform(as: __x_ABI_Ctest__component_CIClass.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_BaseNoOverridesProperty(pThis, &value))
            }
            return value
        }

        internal func put_BaseNoOverridesPropertyImpl(_ value: UnsafeMutablePointer<__x_ABI_Ctest__component_CIBaseNoOverrides>?) throws {
            _ = try perform(as: __x_ABI_Ctest__component_CIClass.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_BaseNoOverridesProperty(pThis, value))
            }
        }

    }

    open class IClassFactory: test_component.IInspectable {
        override public class var IID: IID { IID___x_ABI_Ctest__component_CIClassFactory }

        internal func CreateInstanceImpl(_ name: HSTRING?) throws -> UnsafeMutablePointer<__x_ABI_Ctest__component_CIClass>? {
            var value: UnsafeMutablePointer<__x_ABI_Ctest__component_CIClass>?
            _ = try perform(as: __x_ABI_Ctest__component_CIClassFactory.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance(pThis, name, &value))
            }
            return value
        }

        internal func CreateInstance2Impl(_ name: HSTRING?, _ fruit: __x_ABI_Ctest__component_CFruit) throws -> UnsafeMutablePointer<__x_ABI_Ctest__component_CIClass>? {
            var value: UnsafeMutablePointer<__x_ABI_Ctest__component_CIClass>?
            _ = try perform(as: __x_ABI_Ctest__component_CIClassFactory.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance2(pThis, name, fruit, &value))
            }
            return value
        }

        internal func CreateInstance3Impl(_ arg: UnsafeMutablePointer<__x_ABI_C__FIMap_2_HSTRING_HSTRING>?, _ dummy1: INT32, _ dummy2: INT32, _ dummy3: INT32) throws -> UnsafeMutablePointer<__x_ABI_Ctest__component_CIClass>? {
            var value: UnsafeMutablePointer<__x_ABI_Ctest__component_CIClass>?
            _ = try perform(as: __x_ABI_Ctest__component_CIClassFactory.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance3(pThis, arg, dummy1, dummy2, dummy3, &value))
            }
            return value
        }

        internal func CreateInstance4Impl(_ arg: UnsafeMutablePointer<__x_ABI_C__FIMapView_2_HSTRING_HSTRING>?, _ dummy1: INT32, _ dummy2: INT32, _ dummy3: INT32, _ dummy4: INT32) throws -> UnsafeMutablePointer<__x_ABI_Ctest__component_CIClass>? {
            var value: UnsafeMutablePointer<__x_ABI_Ctest__component_CIClass>?
            _ = try perform(as: __x_ABI_Ctest__component_CIClassFactory.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance4(pThis, arg, dummy1, dummy2, dummy3, dummy4, &value))
            }
            return value
        }

        internal func CreateInstance5Impl(_ arg: UnsafeMutablePointer<__x_ABI_C__FIVector_1_HSTRING>?, _ dummy1: INT32, _ dummy2: INT32, _ dummy3: INT32, _ dummy4: INT32, _ dummy5: INT32) throws -> UnsafeMutablePointer<__x_ABI_Ctest__component_CIClass>? {
            var value: UnsafeMutablePointer<__x_ABI_Ctest__component_CIClass>?
            _ = try perform(as: __x_ABI_Ctest__component_CIClassFactory.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance5(pThis, arg, dummy1, dummy2, dummy3, dummy4, dummy5, &value))
            }
            return value
        }

        internal func CreateInstance6Impl(_ arg: UnsafeMutablePointer<__x_ABI_C__FIVectorView_1_HSTRING>?, _ dummy1: INT32, _ dummy2: INT32, _ dummy3: INT32, _ dummy4: INT32, _ dummy5: INT32, _ dummy6: INT32) throws -> UnsafeMutablePointer<__x_ABI_Ctest__component_CIClass>? {
            var value: UnsafeMutablePointer<__x_ABI_Ctest__component_CIClass>?
            _ = try perform(as: __x_ABI_Ctest__component_CIClassFactory.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance6(pThis, arg, dummy1, dummy2, dummy3, dummy4, dummy5, dummy6, &value))
            }
            return value
        }

    }

    open class IClassFactory2: test_component.IInspectable {
        override public class var IID: IID { IID___x_ABI_Ctest__component_CIClassFactory2 }

        internal func CreateInstanceImpl(_ name: HSTRING?, _ fruit: __x_ABI_Ctest__component_CFruit, _ implementation: UnsafeMutablePointer<__x_ABI_Ctest__component_CIIAmImplementable>?) throws -> UnsafeMutablePointer<__x_ABI_Ctest__component_CIClass>? {
            var value: UnsafeMutablePointer<__x_ABI_Ctest__component_CIClass>?
            _ = try perform(as: __x_ABI_Ctest__component_CIClassFactory2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance(pThis, name, fruit, implementation, &value))
            }
            return value
        }

    }

    open class IClassStatics: test_component.IInspectable {
        override public class var IID: IID { IID___x_ABI_Ctest__component_CIClassStatics }

        internal func StaticTestImpl() throws {
            _ = try perform(as: __x_ABI_Ctest__component_CIClassStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.StaticTest(pThis))
            }
        }

        internal func StaticTestReturnImpl() throws -> INT32 {
            var result: INT32 = 0
            _ = try perform(as: __x_ABI_Ctest__component_CIClassStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.StaticTestReturn(pThis, &result))
            }
            return result
        }

        internal func get_StaticPropertyImpl() throws -> INT32 {
            var value: INT32 = 0
            _ = try perform(as: __x_ABI_Ctest__component_CIClassStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_StaticProperty(pThis, &value))
            }
            return value
        }

    }

    open class IClassStatics2: test_component.IInspectable {
        override public class var IID: IID { IID___x_ABI_Ctest__component_CIClassStatics2 }

        internal func StaticTestReturnFloatImpl() throws -> FLOAT {
            var result: FLOAT = 0.0
            _ = try perform(as: __x_ABI_Ctest__component_CIClassStatics2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.StaticTestReturnFloat(pThis, &result))
            }
            return result
        }

        internal func get_StaticPropertyFloatImpl() throws -> FLOAT {
            var value: FLOAT = 0.0
            _ = try perform(as: __x_ABI_Ctest__component_CIClassStatics2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_StaticPropertyFloat(pThis, &value))
            }
            return value
        }

        internal func put_StaticPropertyFloatImpl(_ value: FLOAT) throws {
            _ = try perform(as: __x_ABI_Ctest__component_CIClassStatics2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_StaticPropertyFloat(pThis, value))
            }
        }

    }

    open class ICollectionTester: test_component.IInspectable {
        override public class var IID: IID { IID___x_ABI_Ctest__component_CICollectionTester }

        internal func ReturnStoredStringVectorImpl() throws -> UnsafeMutablePointer<__x_ABI_C__FIVector_1_HSTRING>? {
            var result: UnsafeMutablePointer<__x_ABI_C__FIVector_1_HSTRING>?
            _ = try perform(as: __x_ABI_Ctest__component_CICollectionTester.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.ReturnStoredStringVector(pThis, &result))
            }
            return result
        }

        internal func ReturnMapFromStringToStringImpl() throws -> UnsafeMutablePointer<__x_ABI_C__FIMap_2_HSTRING_HSTRING>? {
            var result: UnsafeMutablePointer<__x_ABI_C__FIMap_2_HSTRING_HSTRING>?
            _ = try perform(as: __x_ABI_Ctest__component_CICollectionTester.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.ReturnMapFromStringToString(pThis, &result))
            }
            return result
        }

    }

    open class ICollectionTesterStatics: test_component.IInspectable {
        override public class var IID: IID { IID___x_ABI_Ctest__component_CICollectionTesterStatics }

        internal func InMapImpl(_ value: UnsafeMutablePointer<__x_ABI_C__FIMap_2_HSTRING_HSTRING>?) throws -> HSTRING? {
            var result: HSTRING?
            _ = try perform(as: __x_ABI_Ctest__component_CICollectionTesterStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.InMap(pThis, value, &result))
            }
            return result
        }

        internal func InMapViewImpl(_ value: UnsafeMutablePointer<__x_ABI_C__FIMapView_2_HSTRING_HSTRING>?) throws -> HSTRING? {
            var result: HSTRING?
            _ = try perform(as: __x_ABI_Ctest__component_CICollectionTesterStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.InMapView(pThis, value, &result))
            }
            return result
        }

        internal func InVectorImpl(_ value: UnsafeMutablePointer<__x_ABI_C__FIVector_1_HSTRING>?) throws -> HSTRING? {
            var result: HSTRING?
            _ = try perform(as: __x_ABI_Ctest__component_CICollectionTesterStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.InVector(pThis, value, &result))
            }
            return result
        }

        internal func InVectorViewImpl(_ value: UnsafeMutablePointer<__x_ABI_C__FIVectorView_1_HSTRING>?) throws -> HSTRING? {
            var result: HSTRING?
            _ = try perform(as: __x_ABI_Ctest__component_CICollectionTesterStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.InVectorView(pThis, value, &result))
            }
            return result
        }

        internal func GetObjectAtImpl(_ value: UnsafeMutablePointer<__x_ABI_C__FIVector_1_IInspectable>?, _ index: UINT32, _ callback: UnsafeMutablePointer<__x_ABI_Ctest__component_CIObjectHandler>?) throws {
            _ = try perform(as: __x_ABI_Ctest__component_CICollectionTesterStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetObjectAt(pThis, value, index, callback))
            }
        }

    }

    open class IDerived: test_component.IInspectable {
        override public class var IID: IID { IID___x_ABI_Ctest__component_CIDerived }

        internal func get_PropImpl() throws -> INT32 {
            var value: INT32 = 0
            _ = try perform(as: __x_ABI_Ctest__component_CIDerived.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Prop(pThis, &value))
            }
            return value
        }

        internal func put_PropImpl(_ value: INT32) throws {
            _ = try perform(as: __x_ABI_Ctest__component_CIDerived.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Prop(pThis, value))
            }
        }

    }

    open class IEventTester: test_component.IInspectable {
        override public class var IID: IID { IID___x_ABI_Ctest__component_CIEventTester }

        internal func SubscribeImpl() throws {
            _ = try perform(as: __x_ABI_Ctest__component_CIEventTester.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Subscribe(pThis))
            }
        }

        internal func UnsubscribeImpl() throws {
            _ = try perform(as: __x_ABI_Ctest__component_CIEventTester.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Unsubscribe(pThis))
            }
        }

        internal func GetResultImpl() throws -> HSTRING? {
            var result: HSTRING?
            _ = try perform(as: __x_ABI_Ctest__component_CIEventTester.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetResult(pThis, &result))
            }
            return result
        }

        internal func get_CountImpl() throws -> INT32 {
            var value: INT32 = 0
            _ = try perform(as: __x_ABI_Ctest__component_CIEventTester.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Count(pThis, &value))
            }
            return value
        }

    }

    open class IEventTesterFactory: test_component.IInspectable {
        override public class var IID: IID { IID___x_ABI_Ctest__component_CIEventTesterFactory }

        internal func CreateInstanceImpl(_ impl: UnsafeMutablePointer<__x_ABI_Ctest__component_CIIAmImplementable>?) throws -> UnsafeMutablePointer<__x_ABI_Ctest__component_CIEventTester>? {
            var value: UnsafeMutablePointer<__x_ABI_Ctest__component_CIEventTester>?
            _ = try perform(as: __x_ABI_Ctest__component_CIEventTesterFactory.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance(pThis, impl, &value))
            }
            return value
        }

    }

    open class IIAmImplementable: test_component.IInspectable {
        override public class var IID: IID { IID___x_ABI_Ctest__component_CIIAmImplementable }

        open func InInt32Impl(_ value: INT32) throws -> HSTRING? {
            var result: HSTRING?
            _ = try perform(as: __x_ABI_Ctest__component_CIIAmImplementable.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.InInt32(pThis, value, &result))
            }
            return result
        }

        open func InStringImpl(_ value: HSTRING?) throws -> HSTRING? {
            var result: HSTRING?
            _ = try perform(as: __x_ABI_Ctest__component_CIIAmImplementable.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.InString(pThis, value, &result))
            }
            return result
        }

        open func InObjectImpl(_ value: UnsafeMutablePointer<Ctest_component.IInspectable>?) throws -> HSTRING? {
            var result: HSTRING?
            _ = try perform(as: __x_ABI_Ctest__component_CIIAmImplementable.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.InObject(pThis, value, &result))
            }
            return result
        }

        open func InEnumImpl(_ value: __x_ABI_Ctest__component_CSigned) throws -> HSTRING? {
            var result: HSTRING?
            _ = try perform(as: __x_ABI_Ctest__component_CIIAmImplementable.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.InEnum(pThis, value, &result))
            }
            return result
        }

        open func OutInt32Impl(_ value: inout INT32) throws {
            _ = try perform(as: __x_ABI_Ctest__component_CIIAmImplementable.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.OutInt32(pThis, &value))
            }
        }

        open func OutStringImpl(_ value: inout HSTRING?) throws {
            _ = try perform(as: __x_ABI_Ctest__component_CIIAmImplementable.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.OutString(pThis, &value))
            }
        }

        open func OutObjectImpl(_ value: inout UnsafeMutablePointer<Ctest_component.IInspectable>?) throws {
            _ = try perform(as: __x_ABI_Ctest__component_CIIAmImplementable.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.OutObject(pThis, &value))
            }
        }

        open func OutBlittableStructImpl(_ value: inout __x_ABI_Ctest__component_CBlittableStruct) throws {
            _ = try perform(as: __x_ABI_Ctest__component_CIIAmImplementable.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.OutBlittableStruct(pThis, &value))
            }
        }

        open func OutNonBlittableStructImpl(_ value: inout __x_ABI_Ctest__component_CNonBlittableStruct) throws {
            _ = try perform(as: __x_ABI_Ctest__component_CIIAmImplementable.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.OutNonBlittableStruct(pThis, &value))
            }
        }

        open func OutEnumImpl(_ value: inout __x_ABI_Ctest__component_CSigned) throws {
            _ = try perform(as: __x_ABI_Ctest__component_CIIAmImplementable.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.OutEnum(pThis, &value))
            }
        }

        open func ReturnObjectImpl() throws -> UnsafeMutablePointer<Ctest_component.IInspectable>? {
            var result: UnsafeMutablePointer<Ctest_component.IInspectable>?
            _ = try perform(as: __x_ABI_Ctest__component_CIIAmImplementable.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.ReturnObject(pThis, &result))
            }
            return result
        }

        open func ReturnEnumImpl() throws -> __x_ABI_Ctest__component_CSigned {
            var result: __x_ABI_Ctest__component_CSigned = .init(0)
            _ = try perform(as: __x_ABI_Ctest__component_CIIAmImplementable.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.ReturnEnum(pThis, &result))
            }
            return result
        }

        open func get_EnumPropertyImpl() throws -> __x_ABI_Ctest__component_CFruit {
            var value: __x_ABI_Ctest__component_CFruit = .init(0)
            _ = try perform(as: __x_ABI_Ctest__component_CIIAmImplementable.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_EnumProperty(pThis, &value))
            }
            return value
        }

        open func put_EnumPropertyImpl(_ value: __x_ABI_Ctest__component_CFruit) throws {
            _ = try perform(as: __x_ABI_Ctest__component_CIIAmImplementable.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_EnumProperty(pThis, value))
            }
        }

        open func get_IdImpl() throws -> UnsafeMutablePointer<__x_ABI_C__FIReference_1_GUID>? {
            var value: UnsafeMutablePointer<__x_ABI_C__FIReference_1_GUID>?
            _ = try perform(as: __x_ABI_Ctest__component_CIIAmImplementable.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Id(pThis, &value))
            }
            return value
        }

        open func put_IdImpl(_ value: UnsafeMutablePointer<__x_ABI_C__FIReference_1_GUID>?) throws {
            _ = try perform(as: __x_ABI_Ctest__component_CIIAmImplementable.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Id(pThis, value))
            }
        }

        open func add_ImplementableEventImpl(_ handler: UnsafeMutablePointer<__x_ABI_Ctest__component_CDelegates_CIInDelegate>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            _ = try perform(as: __x_ABI_Ctest__component_CIIAmImplementable.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_ImplementableEvent(pThis, handler, &token))
            }
            return token
        }

        open func remove_ImplementableEventImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_Ctest__component_CIIAmImplementable.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_ImplementableEvent(pThis, token))
            }
        }

        open func FireEventImpl(_ data: HSTRING?) throws {
            _ = try perform(as: __x_ABI_Ctest__component_CIIAmImplementable.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.FireEvent(pThis, data))
            }
        }

    }

    internal static var IIAmImplementableVTable: __x_ABI_Ctest__component_CIIAmImplementableVtbl = .init(
        QueryInterface: {
            guard let pUnk = $0, let riid = $1, let ppvObject = $2 else { return E_INVALIDARG }
            ppvObject.pointee = nil

            switch riid.pointee {
                case IUnknown.IID, IInspectable.IID, ISwiftImplemented.IID, IAgileObject.IID, IIAmImplementableWrapper.IID:
                    _ = pUnk.pointee.lpVtbl.pointee.AddRef(pUnk)
                    ppvObject.pointee = UnsafeMutableRawPointer(pUnk)
                    return S_OK
                default:
                    guard let instance = IIAmImplementableWrapper.tryUnwrapFrom(raw: pUnk),
                          let iUnknownRef = instance.queryInterface(riid.pointee) else { return failWith(err: E_NOINTERFACE )}
                    ppvObject.pointee = UnsafeMutableRawPointer(iUnknownRef.ref)
                    return S_OK

            }
        },

        AddRef: {
             guard let wrapper = IIAmImplementableWrapper.fromRaw($0) else { return 1 }
             _ = wrapper.retain()
             return ULONG(_getRetainCount(wrapper.takeUnretainedValue()))
        },

        Release: {
            guard let wrapper = IIAmImplementableWrapper.fromRaw($0) else { return 1 }
            return ULONG(_getRetainCount(wrapper.takeRetainedValue()))
        },

        GetIids: {
            let size = MemoryLayout<IID>.size
            let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: IID.self)
            iids[0] = IUnknown.IID
            iids[1] = IInspectable.IID
            iids[2] = __ABI_test_component.IIAmImplementableWrapper.IID
            $1!.pointee = 3
            $2!.pointee = iids
            return S_OK
        },

        GetRuntimeClassName: {
            _ = $0
            let hstring = try! HString("test_component.IIAmImplementable").detach()
            $1!.pointee = hstring
            return S_OK
        },

        GetTrustLevel: {
            _ = $0
            $1!.pointee = TrustLevel(rawValue: 0)
            return S_OK
        },

        InInt32: {
            do {
                guard let __unwrapped__instance = IIAmImplementableWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let value: Int32 = $1
                let result = try __unwrapped__instance.inInt32(value)
                $2?.initialize(to: try! HString(result).detach())
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        InString: {
            do {
                guard let __unwrapped__instance = IIAmImplementableWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let value: String = .init(from: $1)
                let result = try __unwrapped__instance.inString(value)
                $2?.initialize(to: try! HString(result).detach())
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        InObject: {
            do {
                guard let __unwrapped__instance = IIAmImplementableWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let value: Any? = __ABI_.AnyWrapper.unwrapFrom(abi: $1)
                let result = try __unwrapped__instance.inObject(value)
                $2?.initialize(to: try! HString(result).detach())
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        InEnum: {
            do {
                guard let __unwrapped__instance = IIAmImplementableWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let value: test_component.Signed = $1
                let result = try __unwrapped__instance.inEnum(value)
                $2?.initialize(to: try! HString(result).detach())
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        OutInt32: {
            do {
                guard let __unwrapped__instance = IIAmImplementableWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                var value: Int32 = 0
                try __unwrapped__instance.outInt32(&value)
                $1?.initialize(to: value)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        OutString: {
            do {
                guard let __unwrapped__instance = IIAmImplementableWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                var value: String = ""
                try __unwrapped__instance.outString(&value)
                $1?.initialize(to: try! HString(value).detach())
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        OutObject: {
            do {
                guard let __unwrapped__instance = IIAmImplementableWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                var value: Any?
                try __unwrapped__instance.outObject(&value)
                let valueWrapper = __ABI_.AnyWrapper(value)
                valueWrapper?.copyTo($1)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        OutBlittableStruct: {
            do {
                guard let __unwrapped__instance = IIAmImplementableWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                var value: test_component.BlittableStruct = .init()
                try __unwrapped__instance.outBlittableStruct(&value)
                $1?.initialize(to: .from(swift: value))
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        OutNonBlittableStruct: {
            do {
                guard let __unwrapped__instance = IIAmImplementableWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                var value: test_component.NonBlittableStruct = .init()
                try __unwrapped__instance.outNonBlittableStruct(&value)
                let _value = __ABI_test_component._ABI_NonBlittableStruct(from: value)
                	$1?.initialize(to: _value.detach())
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        OutEnum: {
            do {
                guard let __unwrapped__instance = IIAmImplementableWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                var value: test_component.Signed = .init(0)
                try __unwrapped__instance.outEnum(&value)
                $1?.initialize(to: value)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        ReturnObject: {
            do {
                guard let __unwrapped__instance = IIAmImplementableWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let result = try __unwrapped__instance.returnObject()
                let resultWrapper = __ABI_.AnyWrapper(result)
                resultWrapper?.copyTo($1)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        ReturnEnum: {
            do {
                guard let __unwrapped__instance = IIAmImplementableWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let result = try __unwrapped__instance.returnEnum()
                $1?.initialize(to: result)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        get_EnumProperty: {
            guard let __unwrapped__instance = IIAmImplementableWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value = __unwrapped__instance.enumProperty
            $1?.initialize(to: value)
            return S_OK
        },

        put_EnumProperty: {
            guard let __unwrapped__instance = IIAmImplementableWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value: test_component.Fruit = $1
            __unwrapped__instance.enumProperty = value
            return S_OK
        },

        get_Id: {
            guard let __unwrapped__instance = IIAmImplementableWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value = __unwrapped__instance.id
            let valueWrapper = test_component.__x_ABI_C__FIReference_1_GUIDWrapper(value)
            valueWrapper?.copyTo($1)
            return S_OK
        },

        put_Id: {
            guard let __unwrapped__instance = IIAmImplementableWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value: UUID? = .init(ref: $1)
            __unwrapped__instance.id = value
            return S_OK
        },

        add_ImplementableEvent: {
            guard let __unwrapped__instance = IIAmImplementableWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            guard let handler = __ABI_test_component_Delegates.InDelegateWrapper.unwrapFrom(abi: $1) else { return E_INVALIDARG }
            let token = __unwrapped__instance.implementableEvent.addHandler(handler)
            $2?.initialize(to: .from(swift: token))
            return S_OK
        },

        remove_ImplementableEvent: {
            guard let __unwrapped__instance = IIAmImplementableWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let token: EventRegistrationToken = $1
            __unwrapped__instance.implementableEvent.removeHandler(token)
            return S_OK
        },

        FireEvent: {
            do {
                guard let __unwrapped__instance = IIAmImplementableWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let data: String = .init(from: $1)
                try __unwrapped__instance.fireEvent(data)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        }
    )

    public typealias IIAmImplementableWrapper = InterfaceWrapperBase<__IMPL_test_component.IIAmImplementableImpl>
    open class INullValuesStatics: test_component.IInspectable {
        override public class var IID: IID { IID___x_ABI_Ctest__component_CINullValuesStatics }

        internal func IsObjectNullImpl(_ value: UnsafeMutablePointer<Ctest_component.IInspectable>?) throws -> boolean {
            var result: boolean = 0
            _ = try perform(as: __x_ABI_Ctest__component_CINullValuesStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.IsObjectNull(pThis, value, &result))
            }
            return result
        }

        internal func IsInterfaceNullImpl(_ value: UnsafeMutablePointer<__x_ABI_CWindows_CFoundation_CIClosable>?) throws -> boolean {
            var result: boolean = 0
            _ = try perform(as: __x_ABI_Ctest__component_CINullValuesStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.IsInterfaceNull(pThis, value, &result))
            }
            return result
        }

        internal func IsGenericInterfaceNullImpl(_ value: UnsafeMutablePointer<__x_ABI_C__FIVector_1_HSTRING>?) throws -> boolean {
            var result: boolean = 0
            _ = try perform(as: __x_ABI_Ctest__component_CINullValuesStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.IsGenericInterfaceNull(pThis, value, &result))
            }
            return result
        }

        internal func IsClassNullImpl(_ value: UnsafeMutablePointer<__x_ABI_CWindows_CFoundation_CIClosable>?) throws -> boolean {
            var result: boolean = 0
            _ = try perform(as: __x_ABI_Ctest__component_CINullValuesStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.IsClassNull(pThis, value, &result))
            }
            return result
        }

        internal func IsDelegateNullImpl(_ value: UnsafeMutablePointer<__x_ABI_Ctest__component_CIVoidToVoidDelegate>?) throws -> boolean {
            var result: boolean = 0
            _ = try perform(as: __x_ABI_Ctest__component_CINullValuesStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.IsDelegateNull(pThis, value, &result))
            }
            return result
        }

        internal func GetNullObjectImpl() throws -> UnsafeMutablePointer<Ctest_component.IInspectable>? {
            var result: UnsafeMutablePointer<Ctest_component.IInspectable>?
            _ = try perform(as: __x_ABI_Ctest__component_CINullValuesStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetNullObject(pThis, &result))
            }
            return result
        }

        internal func GetNullInterfaceImpl() throws -> UnsafeMutablePointer<__x_ABI_CWindows_CFoundation_CIClosable>? {
            var result: UnsafeMutablePointer<__x_ABI_CWindows_CFoundation_CIClosable>?
            _ = try perform(as: __x_ABI_Ctest__component_CINullValuesStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetNullInterface(pThis, &result))
            }
            return result
        }

        internal func GetNullGenericInterfaceImpl() throws -> UnsafeMutablePointer<__x_ABI_C__FIVector_1_HSTRING>? {
            var result: UnsafeMutablePointer<__x_ABI_C__FIVector_1_HSTRING>?
            _ = try perform(as: __x_ABI_Ctest__component_CINullValuesStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetNullGenericInterface(pThis, &result))
            }
            return result
        }

        internal func GetNullClassImpl() throws -> UnsafeMutablePointer<__x_ABI_CWindows_CFoundation_CIClosable>? {
            var result: UnsafeMutablePointer<__x_ABI_CWindows_CFoundation_CIClosable>?
            _ = try perform(as: __x_ABI_Ctest__component_CINullValuesStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetNullClass(pThis, &result))
            }
            return result
        }

        internal func GetNullDelegateImpl() throws -> UnsafeMutablePointer<__x_ABI_Ctest__component_CIVoidToVoidDelegate>? {
            var result: UnsafeMutablePointer<__x_ABI_Ctest__component_CIVoidToVoidDelegate>?
            _ = try perform(as: __x_ABI_Ctest__component_CINullValuesStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetNullDelegate(pThis, &result))
            }
            return result
        }

    }

    open class ISimple: test_component.IInspectable {
        override public class var IID: IID { IID___x_ABI_Ctest__component_CISimple }

        internal func MethodImpl() throws {
            _ = try perform(as: __x_ABI_Ctest__component_CISimple.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Method(pThis))
            }
        }

        internal func ObjectImpl(_ value: __x_ABI_CWindows_CFoundation_CDateTime) throws -> UnsafeMutablePointer<Ctest_component.IInspectable>? {
            var result: UnsafeMutablePointer<Ctest_component.IInspectable>?
            _ = try perform(as: __x_ABI_Ctest__component_CISimple.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Object(pThis, value, &result))
            }
            return result
        }

        internal func ReturnBlittableStructImpl() throws -> __x_ABI_Ctest__component_CBlittableStruct {
            var result: __x_ABI_Ctest__component_CBlittableStruct = .init()
            _ = try perform(as: __x_ABI_Ctest__component_CISimple.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.ReturnBlittableStruct(pThis, &result))
            }
            return result
        }

        internal func TakeBlittableStructImpl(_ value: __x_ABI_Ctest__component_CBlittableStruct) throws {
            _ = try perform(as: __x_ABI_Ctest__component_CISimple.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.TakeBlittableStruct(pThis, value))
            }
        }

        internal func get_BlittableStructPropertyImpl() throws -> __x_ABI_Ctest__component_CBlittableStruct {
            var value: __x_ABI_Ctest__component_CBlittableStruct = .init()
            _ = try perform(as: __x_ABI_Ctest__component_CISimple.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_BlittableStructProperty(pThis, &value))
            }
            return value
        }

        internal func put_BlittableStructPropertyImpl(_ value: __x_ABI_Ctest__component_CBlittableStruct) throws {
            _ = try perform(as: __x_ABI_Ctest__component_CISimple.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_BlittableStructProperty(pThis, value))
            }
        }

        internal func ReturnNonBlittableStructImpl() throws -> __x_ABI_Ctest__component_CNonBlittableStruct {
            var result: __x_ABI_Ctest__component_CNonBlittableStruct = .init()
            _ = try perform(as: __x_ABI_Ctest__component_CISimple.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.ReturnNonBlittableStruct(pThis, &result))
            }
            return result
        }

        internal func TakeNonBlittableStructImpl(_ value: __x_ABI_Ctest__component_CNonBlittableStruct) throws {
            _ = try perform(as: __x_ABI_Ctest__component_CISimple.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.TakeNonBlittableStruct(pThis, value))
            }
        }

        internal func get_NonBlittableStructPropertyImpl() throws -> __x_ABI_Ctest__component_CNonBlittableStruct {
            var value: __x_ABI_Ctest__component_CNonBlittableStruct = .init()
            _ = try perform(as: __x_ABI_Ctest__component_CISimple.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_NonBlittableStructProperty(pThis, &value))
            }
            return value
        }

        internal func put_NonBlittableStructPropertyImpl(_ value: __x_ABI_Ctest__component_CNonBlittableStruct) throws {
            _ = try perform(as: __x_ABI_Ctest__component_CISimple.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_NonBlittableStructProperty(pThis, value))
            }
        }

        internal func get_StringPropertyImpl() throws -> HSTRING? {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_Ctest__component_CISimple.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_StringProperty(pThis, &value))
            }
            return value
        }

        internal func put_StringPropertyImpl(_ value: HSTRING?) throws {
            _ = try perform(as: __x_ABI_Ctest__component_CISimple.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_StringProperty(pThis, value))
            }
        }

        internal func add_SignalEventImpl(_ handler: UnsafeMutablePointer<__x_ABI_Ctest__component_CDelegates_CISignalDelegate>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            _ = try perform(as: __x_ABI_Ctest__component_CISimple.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_SignalEvent(pThis, handler, &token))
            }
            return token
        }

        internal func remove_SignalEventImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_Ctest__component_CISimple.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_SignalEvent(pThis, token))
            }
        }

        internal func add_InEventImpl(_ handler: UnsafeMutablePointer<__x_ABI_Ctest__component_CDelegates_CIInDelegate>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            _ = try perform(as: __x_ABI_Ctest__component_CISimple.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_InEvent(pThis, handler, &token))
            }
            return token
        }

        internal func remove_InEventImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_Ctest__component_CISimple.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_InEvent(pThis, token))
            }
        }

        internal func add_SimpleEventImpl(_ handler: UnsafeMutablePointer<__x_ABI_C__FITypedEventHandler_2___x_ABI_Ctest__zcomponent__CSimple___x_ABI_Ctest__zcomponent__CSimpleEventArgs>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            _ = try perform(as: __x_ABI_Ctest__component_CISimple.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_SimpleEvent(pThis, handler, &token))
            }
            return token
        }

        internal func remove_SimpleEventImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_Ctest__component_CISimple.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_SimpleEvent(pThis, token))
            }
        }

        internal func FireEventImpl() throws {
            _ = try perform(as: __x_ABI_Ctest__component_CISimple.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.FireEvent(pThis))
            }
        }

    }

    open class ISimpleDelegate: test_component.IInspectable {
        override public class var IID: IID { IID___x_ABI_Ctest__component_CISimpleDelegate }

        open func DoThisImpl() throws {
            _ = try perform(as: __x_ABI_Ctest__component_CISimpleDelegate.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.DoThis(pThis))
            }
        }

        open func DoThatImpl(_ val: INT32) throws {
            _ = try perform(as: __x_ABI_Ctest__component_CISimpleDelegate.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.DoThat(pThis, val))
            }
        }

    }

    internal static var ISimpleDelegateVTable: __x_ABI_Ctest__component_CISimpleDelegateVtbl = .init(
        QueryInterface: {
            guard let pUnk = $0, let riid = $1, let ppvObject = $2 else { return E_INVALIDARG }
            ppvObject.pointee = nil

            switch riid.pointee {
                case IUnknown.IID, IInspectable.IID, ISwiftImplemented.IID, IAgileObject.IID, ISimpleDelegateWrapper.IID:
                    _ = pUnk.pointee.lpVtbl.pointee.AddRef(pUnk)
                    ppvObject.pointee = UnsafeMutableRawPointer(pUnk)
                    return S_OK
                default:
                    guard let instance = ISimpleDelegateWrapper.tryUnwrapFrom(raw: pUnk),
                          let iUnknownRef = instance.queryInterface(riid.pointee) else { return failWith(err: E_NOINTERFACE )}
                    ppvObject.pointee = UnsafeMutableRawPointer(iUnknownRef.ref)
                    return S_OK

            }
        },

        AddRef: {
             guard let wrapper = ISimpleDelegateWrapper.fromRaw($0) else { return 1 }
             _ = wrapper.retain()
             return ULONG(_getRetainCount(wrapper.takeUnretainedValue()))
        },

        Release: {
            guard let wrapper = ISimpleDelegateWrapper.fromRaw($0) else { return 1 }
            return ULONG(_getRetainCount(wrapper.takeRetainedValue()))
        },

        GetIids: {
            let size = MemoryLayout<IID>.size
            let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: IID.self)
            iids[0] = IUnknown.IID
            iids[1] = IInspectable.IID
            iids[2] = __ABI_test_component.ISimpleDelegateWrapper.IID
            $1!.pointee = 3
            $2!.pointee = iids
            return S_OK
        },

        GetRuntimeClassName: {
            _ = $0
            let hstring = try! HString("test_component.ISimpleDelegate").detach()
            $1!.pointee = hstring
            return S_OK
        },

        GetTrustLevel: {
            _ = $0
            $1!.pointee = TrustLevel(rawValue: 0)
            return S_OK
        },

        DoThis: {
            do {
                guard let __unwrapped__instance = ISimpleDelegateWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                try __unwrapped__instance.doThis()
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        DoThat: {
            do {
                guard let __unwrapped__instance = ISimpleDelegateWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let val: Int32 = $1
                try __unwrapped__instance.doThat(val)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        }
    )

    public typealias ISimpleDelegateWrapper = InterfaceWrapperBase<__IMPL_test_component.ISimpleDelegateImpl>
    open class ISimpleStatics: test_component.IInspectable {
        override public class var IID: IID { IID___x_ABI_Ctest__component_CISimpleStatics }

        internal func add_StaticEventImpl(_ handler: UnsafeMutablePointer<__x_ABI_C__FIEventHandler_1_IInspectable>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            _ = try perform(as: __x_ABI_Ctest__component_CISimpleStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_StaticEvent(pThis, handler, &token))
            }
            return token
        }

        internal func remove_StaticEventImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_Ctest__component_CISimpleStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_StaticEvent(pThis, token))
            }
        }

        internal func FireStaticEventImpl() throws {
            _ = try perform(as: __x_ABI_Ctest__component_CISimpleStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.FireStaticEvent(pThis))
            }
        }

    }

    open class IStaticClassStatics: test_component.IInspectable {
        override public class var IID: IID { IID___x_ABI_Ctest__component_CIStaticClassStatics }

        internal func get_EnumPropertyImpl() throws -> __x_ABI_Ctest__component_CFruit {
            var value: __x_ABI_Ctest__component_CFruit = .init(0)
            _ = try perform(as: __x_ABI_Ctest__component_CIStaticClassStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_EnumProperty(pThis, &value))
            }
            return value
        }

        internal func put_EnumPropertyImpl(_ value: __x_ABI_Ctest__component_CFruit) throws {
            _ = try perform(as: __x_ABI_Ctest__component_CIStaticClassStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_EnumProperty(pThis, value))
            }
        }

        internal func InEnumImpl(_ value: __x_ABI_Ctest__component_CSigned) throws -> HSTRING? {
            var result: HSTRING?
            _ = try perform(as: __x_ABI_Ctest__component_CIStaticClassStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.InEnum(pThis, value, &result))
            }
            return result
        }

        internal func InNonBlittableStructImpl(_ value: __x_ABI_Ctest__component_CNonBlittableStruct) throws -> HSTRING? {
            var result: HSTRING?
            _ = try perform(as: __x_ABI_Ctest__component_CIStaticClassStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.InNonBlittableStruct(pThis, value, &result))
            }
            return result
        }

        internal func TakeBaseImpl(_ base: UnsafeMutablePointer<__x_ABI_Ctest__component_CIBase>?) throws {
            _ = try perform(as: __x_ABI_Ctest__component_CIStaticClassStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.TakeBase(pThis, base))
            }
        }

    }

    open class IUnsealedDerived: test_component.IInspectable {
        override public class var IID: IID { IID___x_ABI_Ctest__component_CIUnsealedDerived }

        internal func get_PropImpl() throws -> INT32 {
            var value: INT32 = 0
            _ = try perform(as: __x_ABI_Ctest__component_CIUnsealedDerived.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Prop(pThis, &value))
            }
            return value
        }

        internal func put_PropImpl(_ value: INT32) throws {
            _ = try perform(as: __x_ABI_Ctest__component_CIUnsealedDerived.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Prop(pThis, value))
            }
        }

    }

    open class IUnsealedDerived2: test_component.IInspectable {
        override public class var IID: IID { IID___x_ABI_Ctest__component_CIUnsealedDerived2 }

        internal func MethodImpl() throws {
            _ = try perform(as: __x_ABI_Ctest__component_CIUnsealedDerived2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Method(pThis))
            }
        }

    }

    internal class IUnsealedDerived2ProtectedFactory: test_component.IInspectable, ComposableActivationFactory {
        internal typealias Composable = test_component.UnsealedDerived2.Composable

        override public class var IID: IID { IID___x_ABI_Ctest__component_CIUnsealedDerived2ProtectedFactory }

        internal func CreateInstanceImpl(_ baseInterface: UnsafeMutablePointer<Ctest_component.IInspectable>?, _ innerInterface: inout UnsafeMutablePointer<Ctest_component.IInspectable>?) throws -> UnsafeMutablePointer<__x_ABI_Ctest__component_CIUnsealedDerived2>? {
            var value: UnsafeMutablePointer<__x_ABI_Ctest__component_CIUnsealedDerived2>?
            _ = try perform(as: __x_ABI_Ctest__component_CIUnsealedDerived2ProtectedFactory.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance(pThis, baseInterface, &innerInterface, &value))
            }
            return value
        }

    }

    internal class IUnsealedDerivedFactory: test_component.IInspectable, ComposableActivationFactory {
        internal typealias Composable = test_component.UnsealedDerived.Composable

        override public class var IID: IID { IID___x_ABI_Ctest__component_CIUnsealedDerivedFactory }

        internal func CreateInstanceImpl(_ baseInterface: UnsafeMutablePointer<Ctest_component.IInspectable>?, _ innerInterface: inout UnsafeMutablePointer<Ctest_component.IInspectable>?) throws -> UnsafeMutablePointer<__x_ABI_Ctest__component_CIUnsealedDerived>? {
            var value: UnsafeMutablePointer<__x_ABI_Ctest__component_CIUnsealedDerived>?
            _ = try perform(as: __x_ABI_Ctest__component_CIUnsealedDerivedFactory.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance(pThis, baseInterface, &innerInterface, &value))
            }
            return value
        }

    }

    open class IUnsealedDerivedNoOverrides: test_component.IInspectable {
        override public class var IID: IID { IID___x_ABI_Ctest__component_CIUnsealedDerivedNoOverrides }

    }

    internal class IUnsealedDerivedNoOverridesProtectedFactory: test_component.IInspectable, ComposableActivationFactory {
        internal typealias Composable = test_component.UnsealedDerivedNoOverrides.Composable

        override public class var IID: IID { IID___x_ABI_Ctest__component_CIUnsealedDerivedNoOverridesProtectedFactory }

        internal func CreateInstanceImpl(_ baseInterface: UnsafeMutablePointer<Ctest_component.IInspectable>?, _ innerInterface: inout UnsafeMutablePointer<Ctest_component.IInspectable>?) throws -> UnsafeMutablePointer<__x_ABI_Ctest__component_CIUnsealedDerivedNoOverrides>? {
            var value: UnsafeMutablePointer<__x_ABI_Ctest__component_CIUnsealedDerivedNoOverrides>?
            _ = try perform(as: __x_ABI_Ctest__component_CIUnsealedDerivedNoOverridesProtectedFactory.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance(pThis, baseInterface, &innerInterface, &value))
            }
            return value
        }

    }

    open class IUnsealedDerivedOverloads2: test_component.IInspectable {
        override public class var IID: IID { IID___x_ABI_Ctest__component_CIUnsealedDerivedOverloads2 }

        internal func OnAfterDoTheThingImpl() throws {
            _ = try perform(as: __x_ABI_Ctest__component_CIUnsealedDerivedOverloads2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.OnAfterDoTheThing(pThis))
            }
        }

    }

    open class IUnsealedDerivedOverrides: test_component.IInspectable {
        override public class var IID: IID { IID___x_ABI_Ctest__component_CIUnsealedDerivedOverrides }

        internal func OnBeforeDoTheThingImpl() throws {
            _ = try perform(as: __x_ABI_Ctest__component_CIUnsealedDerivedOverrides.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.OnBeforeDoTheThing(pThis))
            }
        }

    }

    open class InterfaceWithReturnDelegate: test_component.IInspectable {
        override public class var IID: IID { IID___x_ABI_Ctest__component_CInterfaceWithReturnDelegate }

        open func add_EventWithReturnImpl(_ handler: UnsafeMutablePointer<__x_ABI_Ctest__component_CDelegates_CIReturnInt32Delegate>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            _ = try perform(as: __x_ABI_Ctest__component_CInterfaceWithReturnDelegate.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_EventWithReturn(pThis, handler, &token))
            }
            return token
        }

        open func remove_EventWithReturnImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_Ctest__component_CInterfaceWithReturnDelegate.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_EventWithReturn(pThis, token))
            }
        }

    }

    internal static var InterfaceWithReturnDelegateVTable: __x_ABI_Ctest__component_CInterfaceWithReturnDelegateVtbl = .init(
        QueryInterface: {
            guard let pUnk = $0, let riid = $1, let ppvObject = $2 else { return E_INVALIDARG }
            ppvObject.pointee = nil

            switch riid.pointee {
                case IUnknown.IID, IInspectable.IID, ISwiftImplemented.IID, IAgileObject.IID, InterfaceWithReturnDelegateWrapper.IID:
                    _ = pUnk.pointee.lpVtbl.pointee.AddRef(pUnk)
                    ppvObject.pointee = UnsafeMutableRawPointer(pUnk)
                    return S_OK
                default:
                    guard let instance = InterfaceWithReturnDelegateWrapper.tryUnwrapFrom(raw: pUnk),
                          let iUnknownRef = instance.queryInterface(riid.pointee) else { return failWith(err: E_NOINTERFACE )}
                    ppvObject.pointee = UnsafeMutableRawPointer(iUnknownRef.ref)
                    return S_OK

            }
        },

        AddRef: {
             guard let wrapper = InterfaceWithReturnDelegateWrapper.fromRaw($0) else { return 1 }
             _ = wrapper.retain()
             return ULONG(_getRetainCount(wrapper.takeUnretainedValue()))
        },

        Release: {
            guard let wrapper = InterfaceWithReturnDelegateWrapper.fromRaw($0) else { return 1 }
            return ULONG(_getRetainCount(wrapper.takeRetainedValue()))
        },

        GetIids: {
            let size = MemoryLayout<IID>.size
            let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: IID.self)
            iids[0] = IUnknown.IID
            iids[1] = IInspectable.IID
            iids[2] = __ABI_test_component.InterfaceWithReturnDelegateWrapper.IID
            $1!.pointee = 3
            $2!.pointee = iids
            return S_OK
        },

        GetRuntimeClassName: {
            _ = $0
            let hstring = try! HString("test_component.InterfaceWithReturnDelegate").detach()
            $1!.pointee = hstring
            return S_OK
        },

        GetTrustLevel: {
            _ = $0
            $1!.pointee = TrustLevel(rawValue: 0)
            return S_OK
        },

        add_EventWithReturn: {
            guard let __unwrapped__instance = InterfaceWithReturnDelegateWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            guard let handler = __ABI_test_component_Delegates.ReturnInt32DelegateWrapper.unwrapFrom(abi: $1) else { return E_INVALIDARG }
            let token = __unwrapped__instance.eventWithReturn.addHandler(handler)
            $2?.initialize(to: .from(swift: token))
            return S_OK
        },

        remove_EventWithReturn: {
            guard let __unwrapped__instance = InterfaceWithReturnDelegateWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let token: EventRegistrationToken = $1
            __unwrapped__instance.eventWithReturn.removeHandler(token)
            return S_OK
        }
    )

    public typealias InterfaceWithReturnDelegateWrapper = InterfaceWrapperBase<__IMPL_test_component.InterfaceWithReturnDelegateImpl>
    public class _ABI_NonBlittableBoolStruct {
        public var val: __x_ABI_Ctest__component_CNonBlittableBoolStruct = .init()
        public init() { }
        public init(from swift: test_component.NonBlittableBoolStruct) {
            val.First = .init(from: swift.first)
            val.Second = .init(from: swift.second)
            val.Third = .init(from: swift.third)
            val.Fourth = .init(from: swift.fourth)
        }

        public func detach() -> __x_ABI_Ctest__component_CNonBlittableBoolStruct {
            let result = val
            return result
        }

        deinit {
        }
    }
    public class _ABI_NonBlittableStruct {
        public var val: __x_ABI_Ctest__component_CNonBlittableStruct = .init()
        public init() { }
        public init(from swift: test_component.NonBlittableStruct) {
            val.First = try! HString(swift.first).detach()
            val.Second = try! HString(swift.second).detach()
            val.Third = swift.third
            val.Fourth = try! HString(swift.fourth).detach()
        }

        public func detach() -> __x_ABI_Ctest__component_CNonBlittableStruct {
            let result = val
            val.First = nil
            val.Second = nil
            val.Fourth = nil
            return result
        }

        deinit {
            WindowsDeleteString(val.First)
            WindowsDeleteString(val.Second)
            WindowsDeleteString(val.Fourth)
        }
    }
    internal typealias IBaseOverridesWrapper = UnsealedWinRTClassWrapper<test_component.Base.IBaseOverrides>
    internal static var IBaseOverridesVTable: __x_ABI_Ctest__component_CIBaseOverridesVtbl = .init(
        QueryInterface: {
            guard let pUnk = $0, let riid = $1, let ppvObject = $2 else { return E_INVALIDARG }
            ppvObject.pointee = nil

            switch riid.pointee {
                case IUnknown.IID, IInspectable.IID, ISwiftImplemented.IID, IAgileObject.IID, IBaseOverridesWrapper.IID:
                    _ = pUnk.pointee.lpVtbl.pointee.AddRef(pUnk)
                    ppvObject.pointee = UnsafeMutableRawPointer(pUnk)
                    return S_OK
                default:
                    guard let instance = IBaseOverridesWrapper.tryUnwrapFrom(raw: pUnk),
                          let iUnknownRef = instance.queryInterface(riid.pointee) else { return failWith(err: E_NOINTERFACE )}
                    ppvObject.pointee = UnsafeMutableRawPointer(iUnknownRef.ref)
                    return S_OK

            }
        },

        AddRef: {
             guard let wrapper = IBaseOverridesWrapper.fromRaw($0) else { return 1 }
             _ = wrapper.retain()
             return ULONG(_getRetainCount(wrapper.takeUnretainedValue()))
        },

        Release: {
            guard let wrapper = IBaseOverridesWrapper.fromRaw($0) else { return 1 }
            return ULONG(_getRetainCount(wrapper.takeRetainedValue()))
        },

        GetIids: {
            let size = MemoryLayout<IID>.size
            let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: IID.self)
            iids[0] = IUnknown.IID
            iids[1] = IInspectable.IID
            iids[2] = __ABI_test_component.IBaseOverridesWrapper.IID
            $1!.pointee = 3
            $2!.pointee = iids
            return S_OK
        },

        GetRuntimeClassName: {
            guard let instance = IBaseOverridesWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let hstring = instance.GetRuntimeClassName().detach()
            $1!.pointee = hstring
            return S_OK
        },

        GetTrustLevel: {
            _ = $0
            $1!.pointee = TrustLevel(rawValue: 0)
            return S_OK
        },

        OnDoTheThing: {
            do {
                guard let __unwrapped__instance = IBaseOverridesWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                try __unwrapped__instance.onDoTheThing()
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        }
    )
    internal typealias IUnsealedDerivedOverridesWrapper = UnsealedWinRTClassWrapper<test_component.UnsealedDerived.IUnsealedDerivedOverrides>
    internal static var IUnsealedDerivedOverridesVTable: __x_ABI_Ctest__component_CIUnsealedDerivedOverridesVtbl = .init(
        QueryInterface: {
            guard let pUnk = $0, let riid = $1, let ppvObject = $2 else { return E_INVALIDARG }
            ppvObject.pointee = nil

            switch riid.pointee {
                case IUnknown.IID, IInspectable.IID, ISwiftImplemented.IID, IAgileObject.IID, IUnsealedDerivedOverridesWrapper.IID:
                    _ = pUnk.pointee.lpVtbl.pointee.AddRef(pUnk)
                    ppvObject.pointee = UnsafeMutableRawPointer(pUnk)
                    return S_OK
                default:
                    guard let instance = IUnsealedDerivedOverridesWrapper.tryUnwrapFrom(raw: pUnk),
                          let iUnknownRef = instance.queryInterface(riid.pointee) else { return failWith(err: E_NOINTERFACE )}
                    ppvObject.pointee = UnsafeMutableRawPointer(iUnknownRef.ref)
                    return S_OK

            }
        },

        AddRef: {
             guard let wrapper = IUnsealedDerivedOverridesWrapper.fromRaw($0) else { return 1 }
             _ = wrapper.retain()
             return ULONG(_getRetainCount(wrapper.takeUnretainedValue()))
        },

        Release: {
            guard let wrapper = IUnsealedDerivedOverridesWrapper.fromRaw($0) else { return 1 }
            return ULONG(_getRetainCount(wrapper.takeRetainedValue()))
        },

        GetIids: {
            let size = MemoryLayout<IID>.size
            let iids = CoTaskMemAlloc(UInt64(size) * 4).assumingMemoryBound(to: IID.self)
            iids[0] = IUnknown.IID
            iids[1] = IInspectable.IID
            iids[2] = __ABI_test_component.IUnsealedDerivedOverridesWrapper.IID
            iids[3] = __ABI_test_component.IBaseOverridesWrapper.IID
            $1!.pointee = 4
            $2!.pointee = iids
            return S_OK
        },

        GetRuntimeClassName: {
            guard let instance = IUnsealedDerivedOverridesWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let hstring = instance.GetRuntimeClassName().detach()
            $1!.pointee = hstring
            return S_OK
        },

        GetTrustLevel: {
            _ = $0
            $1!.pointee = TrustLevel(rawValue: 0)
            return S_OK
        },

        OnBeforeDoTheThing: {
            do {
                guard let __unwrapped__instance = IUnsealedDerivedOverridesWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                try __unwrapped__instance.onBeforeDoTheThing()
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        }
    )
    internal typealias IUnsealedDerivedOverloads2Wrapper = UnsealedWinRTClassWrapper<test_component.UnsealedDerived.IUnsealedDerivedOverloads2>
    internal static var IUnsealedDerivedOverloads2VTable: __x_ABI_Ctest__component_CIUnsealedDerivedOverloads2Vtbl = .init(
        QueryInterface: {
            guard let pUnk = $0, let riid = $1, let ppvObject = $2 else { return E_INVALIDARG }
            ppvObject.pointee = nil

            switch riid.pointee {
                case IUnknown.IID, IInspectable.IID, ISwiftImplemented.IID, IAgileObject.IID, IUnsealedDerivedOverloads2Wrapper.IID:
                    _ = pUnk.pointee.lpVtbl.pointee.AddRef(pUnk)
                    ppvObject.pointee = UnsafeMutableRawPointer(pUnk)
                    return S_OK
                default:
                    guard let instance = IUnsealedDerivedOverloads2Wrapper.tryUnwrapFrom(raw: pUnk),
                          let iUnknownRef = instance.queryInterface(riid.pointee) else { return failWith(err: E_NOINTERFACE )}
                    ppvObject.pointee = UnsafeMutableRawPointer(iUnknownRef.ref)
                    return S_OK

            }
        },

        AddRef: {
             guard let wrapper = IUnsealedDerivedOverloads2Wrapper.fromRaw($0) else { return 1 }
             _ = wrapper.retain()
             return ULONG(_getRetainCount(wrapper.takeUnretainedValue()))
        },

        Release: {
            guard let wrapper = IUnsealedDerivedOverloads2Wrapper.fromRaw($0) else { return 1 }
            return ULONG(_getRetainCount(wrapper.takeRetainedValue()))
        },

        GetIids: {
            let size = MemoryLayout<IID>.size
            let iids = CoTaskMemAlloc(UInt64(size) * 5).assumingMemoryBound(to: IID.self)
            iids[0] = IUnknown.IID
            iids[1] = IInspectable.IID
            iids[2] = __ABI_test_component.IUnsealedDerivedOverloads2Wrapper.IID
            iids[3] = __ABI_test_component.IBaseOverridesWrapper.IID
            iids[4] = __ABI_test_component.IUnsealedDerivedOverridesWrapper.IID
            $1!.pointee = 5
            $2!.pointee = iids
            return S_OK
        },

        GetRuntimeClassName: {
            guard let instance = IUnsealedDerivedOverloads2Wrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let hstring = instance.GetRuntimeClassName().detach()
            $1!.pointee = hstring
            return S_OK
        },

        GetTrustLevel: {
            _ = $0
            $1!.pointee = TrustLevel(rawValue: 0)
            return S_OK
        },

        OnAfterDoTheThing: {
            do {
                guard let __unwrapped__instance = IUnsealedDerivedOverloads2Wrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                try __unwrapped__instance.onAfterDoTheThing()
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        }
    )
}
extension __x_ABI_Ctest__component_CBlittableStruct {
        public static func from(swift: test_component.BlittableStruct) -> __x_ABI_Ctest__component_CBlittableStruct {
            .init(First: swift.first, Second: swift.second)
        }
    }
    extension __x_ABI_Ctest__component_CSimpleEventArgs {
        public static func from(swift: test_component.SimpleEventArgs) -> __x_ABI_Ctest__component_CSimpleEventArgs {
            .init(Value: swift.value)
        }
    }
    extension __x_ABI_Ctest__component_CStructWithEnum {
        public static func from(swift: test_component.StructWithEnum) -> __x_ABI_Ctest__component_CStructWithEnum {
            .init(Names: swift.names)
        }
    }
    extension ComposableImpl where CABI == __x_ABI_Ctest__component_CIBaseOverrides {
    public static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__ABI_test_component.IBaseOverridesVTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}
extension ComposableImpl where CABI == __x_ABI_Ctest__component_CIUnsealedDerivedOverloads2 {
    public static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__ABI_test_component.IUnsealedDerivedOverloads2VTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}
extension ComposableImpl where CABI == __x_ABI_Ctest__component_CIUnsealedDerivedOverrides {
    public static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__ABI_test_component.IUnsealedDerivedOverridesVTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}
// MARK - ObjectHandler
extension __ABI_test_component {
    open class ObjectHandler: test_component.IUnknown {
        override public class var IID: IID { IID___x_ABI_Ctest__component_CIObjectHandler }

        open func InvokeImpl(_ item: UnsafeMutablePointer<Ctest_component.IInspectable>?) throws {
            _ = try perform(as: __x_ABI_Ctest__component_CIObjectHandler.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Invoke(pThis, item))
            }
        }

    }


    typealias ObjectHandlerWrapper = InterfaceWrapperBase<__IMPL_test_component.ObjectHandlerImpl>
    internal static var ObjectHandlerVTable: __x_ABI_Ctest__component_CIObjectHandlerVtbl = .init(
        QueryInterface: {
            guard let pUnk = $0, let riid = $1, let ppvObject = $2 else { return E_INVALIDARG }
            ppvObject.pointee = nil

            switch riid.pointee {
                case IUnknown.IID, IInspectable.IID, ISwiftImplemented.IID, IAgileObject.IID, ObjectHandlerWrapper.IID:
                    _ = pUnk.pointee.lpVtbl.pointee.AddRef(pUnk)
                    ppvObject.pointee = UnsafeMutableRawPointer(pUnk)
                    return S_OK
                default:
                    return failWith(err: E_NOINTERFACE)
            }
        },

        AddRef: {
             guard let wrapper = ObjectHandlerWrapper.fromRaw($0) else { return 1 }
             _ = wrapper.retain()
             return ULONG(_getRetainCount(wrapper.takeUnretainedValue()))
        },

        Release: {
            guard let wrapper = ObjectHandlerWrapper.fromRaw($0) else { return 1 }
            return ULONG(_getRetainCount(wrapper.takeRetainedValue()))
        },

        Invoke: {
            guard let __unwrapped__instance = ObjectHandlerWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let item: Any? = __ABI_.AnyWrapper.unwrapFrom(abi: $1)
            __unwrapped__instance(item)
            return S_OK
        }
    )
}
public extension WinRTDelegateBridge where CABI == __x_ABI_Ctest__component_CIObjectHandler {
    static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__ABI_test_component.ObjectHandlerVTable) { $0 }
        return .init(lpVtbl:vtblPtr)
    }
}

// MARK - VoidToVoidDelegate
extension __ABI_test_component {
    open class VoidToVoidDelegate: test_component.IUnknown {
        override public class var IID: IID { IID___x_ABI_Ctest__component_CIVoidToVoidDelegate }

        open func InvokeImpl() throws {
            _ = try perform(as: __x_ABI_Ctest__component_CIVoidToVoidDelegate.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Invoke(pThis))
            }
        }

    }


    typealias VoidToVoidDelegateWrapper = InterfaceWrapperBase<__IMPL_test_component.VoidToVoidDelegateImpl>
    internal static var VoidToVoidDelegateVTable: __x_ABI_Ctest__component_CIVoidToVoidDelegateVtbl = .init(
        QueryInterface: {
            guard let pUnk = $0, let riid = $1, let ppvObject = $2 else { return E_INVALIDARG }
            ppvObject.pointee = nil

            switch riid.pointee {
                case IUnknown.IID, IInspectable.IID, ISwiftImplemented.IID, IAgileObject.IID, VoidToVoidDelegateWrapper.IID:
                    _ = pUnk.pointee.lpVtbl.pointee.AddRef(pUnk)
                    ppvObject.pointee = UnsafeMutableRawPointer(pUnk)
                    return S_OK
                default:
                    return failWith(err: E_NOINTERFACE)
            }
        },

        AddRef: {
             guard let wrapper = VoidToVoidDelegateWrapper.fromRaw($0) else { return 1 }
             _ = wrapper.retain()
             return ULONG(_getRetainCount(wrapper.takeUnretainedValue()))
        },

        Release: {
            guard let wrapper = VoidToVoidDelegateWrapper.fromRaw($0) else { return 1 }
            return ULONG(_getRetainCount(wrapper.takeRetainedValue()))
        },

        Invoke: {
            guard let __unwrapped__instance = VoidToVoidDelegateWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            __unwrapped__instance()
            return S_OK
        }
    )
}
public extension WinRTDelegateBridge where CABI == __x_ABI_Ctest__component_CIVoidToVoidDelegate {
    static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__ABI_test_component.VoidToVoidDelegateVTable) { $0 }
        return .init(lpVtbl:vtblPtr)
    }
}


// WARNING: Please don't edit this file. It was generated by Swift/WinRT v0.0.1
// swiftlint:disable all
import Foundation
import Ctest_component

private var IID___x_ABI_Ctest__component_CIAsyncMethodsStatics: test_component.IID {
    .init(Data1: 0x5FAAD8F4, Data2: 0x29D7, Data3: 0x5C26, Data4: ( 0xA8,0x72,0x35,0x42,0xE3,0xE1,0x86,0x7A ))// 5FAAD8F4-29D7-5C26-A872-3542E3E1867A
}

private var IID___x_ABI_Ctest__component_CIAsyncMethodsWithProgress: test_component.IID {
    .init(Data1: 0xD782777A, Data2: 0xBE43, Data3: 0x55FA, Data4: ( 0x92,0x6E,0x51,0xE6,0x40,0x23,0xD5,0xEC ))// D782777A-BE43-55FA-926E-51E64023D5EC
}

private var IID___x_ABI_Ctest__component_CIAsyncOperationInt: test_component.IID {
    .init(Data1: 0x1D730A19, Data2: 0xCD91, Data3: 0x5A59, Data4: ( 0x96,0x83,0x51,0xA6,0x11,0xFA,0x48,0x08 ))// 1D730A19-CD91-5A59-9683-51A611FA4808
}

private var IID___x_ABI_Ctest__component_CIBase: test_component.IID {
    .init(Data1: 0xE9FE0BB2, Data2: 0xE1F6, Data3: 0x5E39, Data4: ( 0x92,0xBB,0x2F,0x19,0xFF,0xDE,0x3F,0xDC ))// E9FE0BB2-E1F6-5E39-92BB-2F19FFDE3FDC
}

private var IID___x_ABI_Ctest__component_CIBaseCollectionProtectedFactory: test_component.IID {
    .init(Data1: 0xB5581456, Data2: 0xA980, Data3: 0x5851, Data4: ( 0xAD,0xA4,0x0A,0x7B,0x27,0x0F,0x6C,0xD9 ))// B5581456-A980-5851-ADA4-0A7B270F6CD9
}

private var IID___x_ABI_Ctest__component_CIBaseNoOverrides: test_component.IID {
    .init(Data1: 0xCAC21C05, Data2: 0xB599, Data3: 0x5D37, Data4: ( 0xA9,0x3A,0xD6,0x0C,0xBD,0xD1,0xD0,0xE8 ))// CAC21C05-B599-5D37-A93A-D60CBDD1D0E8
}

private var IID___x_ABI_Ctest__component_CIBaseNoOverridesProtectedFactory: test_component.IID {
    .init(Data1: 0x92FC0572, Data2: 0x825F, Data3: 0x5B3F, Data4: ( 0x9B,0x0B,0xF0,0x80,0xA1,0x66,0xEF,0x06 ))// 92FC0572-825F-5B3F-9B0B-F080A166EF06
}

private var IID___x_ABI_Ctest__component_CIBaseNoOverridesStatics: test_component.IID {
    .init(Data1: 0xCC810B5D, Data2: 0x97FC, Data3: 0x5B35, Data4: ( 0xAE,0xEA,0xA4,0x7F,0x5F,0x58,0x06,0xF7 ))// CC810B5D-97FC-5B35-AEEA-A47F5F5806F7
}

private var IID___x_ABI_Ctest__component_CIBaseOverrides: test_component.IID {
    .init(Data1: 0xEE3CBD78, Data2: 0x04B7, Data3: 0x534F, Data4: ( 0xA7,0x15,0x53,0xDA,0xF5,0x35,0x01,0x3C ))// EE3CBD78-04B7-534F-A715-53DAF535013C
}

private var IID___x_ABI_Ctest__component_CIBaseProtectedFactory: test_component.IID {
    .init(Data1: 0x05CAD233, Data2: 0x20A7, Data3: 0x581F, Data4: ( 0xBD,0x44,0x0D,0x13,0x6C,0x31,0x0E,0x0F ))// 05CAD233-20A7-581F-BD44-0D136C310E0F
}

private var IID___x_ABI_Ctest__component_CIBaseStatics: test_component.IID {
    .init(Data1: 0x9E36C560, Data2: 0xE3AE, Data3: 0x55DF, Data4: ( 0xBA,0x41,0x6B,0xB5,0x47,0xA2,0x81,0x65 ))// 9E36C560-E3AE-55DF-BA41-6BB547A28165
}

private var IID___x_ABI_Ctest__component_CIBasic: test_component.IID {
    .init(Data1: 0x636060A1, Data2: 0xE41D, Data3: 0x59DF, Data4: ( 0xA5,0xD3,0xFB,0x7C,0xE7,0xE1,0x79,0x2F ))// 636060A1-E41D-59DF-A5D3-FB7CE7E1792F
}

private var IID___x_ABI_Ctest__component_CIBufferTesterStatics: test_component.IID {
    .init(Data1: 0x82190F30, Data2: 0x48DC, Data3: 0x5350, Data4: ( 0xAD,0x5B,0x00,0x36,0x63,0x5C,0xF5,0xB4 ))// 82190F30-48DC-5350-AD5B-0036635CF5B4
}

private var IID___x_ABI_Ctest__component_CIClass: test_component.IID {
    .init(Data1: 0xEBCBC0CD, Data2: 0x48DD, Data3: 0x56BA, Data4: ( 0xBB,0xE2,0xCD,0x0B,0xE5,0xA3,0x06,0x76 ))// EBCBC0CD-48DD-56BA-BBE2-CD0BE5A30676
}

private var IID___x_ABI_Ctest__component_CIClassFactory: test_component.IID {
    .init(Data1: 0x78914881, Data2: 0xB900, Data3: 0x582A, Data4: ( 0x94,0xB8,0x58,0x19,0x84,0xC0,0xF7,0x8A ))// 78914881-B900-582A-94B8-581984C0F78A
}

private var IID___x_ABI_Ctest__component_CIClassFactory2: test_component.IID {
    .init(Data1: 0xF5F62EBE, Data2: 0x931B, Data3: 0x519B, Data4: ( 0x95,0x1A,0xF1,0x4A,0x4B,0xC7,0x83,0xB1 ))// F5F62EBE-931B-519B-951A-F14A4BC783B1
}

private var IID___x_ABI_Ctest__component_CIClassStatics: test_component.IID {
    .init(Data1: 0x3E30803C, Data2: 0x35D4, Data3: 0x52A7, Data4: ( 0xB2,0x11,0xFD,0xC5,0xD6,0xAC,0x48,0x7B ))// 3E30803C-35D4-52A7-B211-FDC5D6AC487B
}

private var IID___x_ABI_Ctest__component_CIClassStatics2: test_component.IID {
    .init(Data1: 0xB341C098, Data2: 0x033D, Data3: 0x5445, Data4: ( 0x86,0x80,0x70,0x3A,0x93,0xBC,0xDF,0x81 ))// B341C098-033D-5445-8680-703A93BCDF81
}

private var IID___x_ABI_Ctest__component_CICollectionTester: test_component.IID {
    .init(Data1: 0xF8B13FDD, Data2: 0xB785, Data3: 0x53D4, Data4: ( 0xBC,0x69,0xFA,0x7D,0x02,0xBD,0x88,0xE6 ))// F8B13FDD-B785-53D4-BC69-FA7D02BD88E6
}

private var IID___x_ABI_Ctest__component_CICollectionTesterStatics: test_component.IID {
    .init(Data1: 0xB357268D, Data2: 0x1A80, Data3: 0x5A61, Data4: ( 0xB3,0xEF,0x13,0x22,0x4B,0xE0,0x63,0x10 ))// B357268D-1A80-5A61-B3EF-13224BE06310
}

private var IID___x_ABI_Ctest__component_CIDeferrableEventArgs: test_component.IID {
    .init(Data1: 0xDA7B0340, Data2: 0x93E0, Data3: 0x5D49, Data4: ( 0xA7,0xF3,0x0F,0xCA,0x6E,0x90,0x02,0x3C ))// DA7B0340-93E0-5D49-A7F3-0FCA6E90023C
}

private var IID___x_ABI_Ctest__component_CIDerived: test_component.IID {
    .init(Data1: 0x864F4DCB, Data2: 0xC4FF, Data3: 0x5FBB, Data4: ( 0xB4,0x5D,0xA7,0x3E,0x25,0x7B,0x48,0xA2 ))// 864F4DCB-C4FF-5FBB-B45D-A73E257B48A2
}

private var IID___x_ABI_Ctest__component_CIDerivedFromNoConstructor: test_component.IID {
    .init(Data1: 0x2A9D928D, Data2: 0xAD55, Data3: 0x59EC, Data4: ( 0x9B,0x73,0xE2,0xED,0x06,0x57,0xE6,0xC4 ))// 2A9D928D-AD55-59EC-9B73-E2ED0657E6C4
}

private var IID___x_ABI_Ctest__component_CIDerivedStatics: test_component.IID {
    .init(Data1: 0x5DE6D589, Data2: 0x61EC, Data3: 0x5020, Data4: ( 0x80,0x3A,0x3E,0x62,0x6C,0x8B,0xBC,0x8E ))// 5DE6D589-61EC-5020-803A-3E626C8BBC8E
}

private var IID___x_ABI_Ctest__component_CIEventTester: test_component.IID {
    .init(Data1: 0xDD19BE65, Data2: 0x638D, Data3: 0x519A, Data4: ( 0x81,0xA9,0x73,0x3F,0xDB,0xD8,0x7A,0x17 ))// DD19BE65-638D-519A-81A9-733FDBD87A17
}

private var IID___x_ABI_Ctest__component_CIEventTesterFactory: test_component.IID {
    .init(Data1: 0x9E6F50EC, Data2: 0x0F53, Data3: 0x5507, Data4: ( 0xB7,0x37,0x14,0x3B,0x1B,0xB3,0x53,0x65 ))// 9E6F50EC-0F53-5507-B737-143B1BB35365
}

private var IID___x_ABI_Ctest__component_CIIAmImplementable: test_component.IID {
    .init(Data1: 0x0B3C0120, Data2: 0xD138, Data3: 0x512B, Data4: ( 0x8D,0x38,0xF5,0x1E,0x35,0xF0,0x65,0xB2 ))// 0B3C0120-D138-512B-8D38-F51E35F065B2
}

private var IID___x_ABI_Ctest__component_CIInterfaceWithObservableVector: test_component.IID {
    .init(Data1: 0x364C232A, Data2: 0xB3A9, Data3: 0x5FD7, Data4: ( 0x91,0x3E,0x53,0x82,0xF7,0x2B,0x64,0xD7 ))// 364C232A-B3A9-5FD7-913E-5382F72B64D7
}

private var IID___x_ABI_Ctest__component_CINullValuesStatics: test_component.IID {
    .init(Data1: 0x4F2BB96B, Data2: 0xB91D, Data3: 0x51E5, Data4: ( 0xA5,0x89,0x26,0x52,0xC1,0x65,0xA8,0xB5 ))// 4F2BB96B-B91D-51E5-A589-2652C165A8B5
}

private var IID___x_ABI_Ctest__component_CIReferenceTarget: test_component.IID {
    .init(Data1: 0x128E6AAA, Data2: 0xF772, Data3: 0x5A6F, Data4: ( 0x85,0x8B,0x3B,0x69,0x04,0x18,0xC8,0x73 ))// 128E6AAA-F772-5A6F-858B-3B690418C873
}

private var IID___x_ABI_Ctest__component_CISimple: test_component.IID {
    .init(Data1: 0xAE7B4545, Data2: 0xD9D0, Data3: 0x5655, Data4: ( 0xB1,0xDE,0xA0,0x7D,0xA1,0x3B,0xD8,0x9B ))// AE7B4545-D9D0-5655-B1DE-A07DA13BD89B
}

private var IID___x_ABI_Ctest__component_CISimpleDelegate: test_component.IID {
    .init(Data1: 0xB73AD784, Data2: 0xEADD, Data3: 0x54B7, Data4: ( 0xA6,0x8E,0x8A,0xC5,0x6E,0xAB,0x73,0x87 ))// B73AD784-EADD-54B7-A68E-8AC56EAB7387
}

private var IID___x_ABI_Ctest__component_CISimpleOverrides: test_component.IID {
    .init(Data1: 0x2F772B66, Data2: 0xE6BE, Data3: 0x51E4, Data4: ( 0xB9,0x22,0x01,0x9D,0x56,0xF7,0xEF,0xD1 ))// 2F772B66-E6BE-51E4-B922-019D56F7EFD1
}

private var IID___x_ABI_Ctest__component_CISimpleStatics: test_component.IID {
    .init(Data1: 0xC8DCADA0, Data2: 0xFD8E, Data3: 0x5E27, Data4: ( 0x95,0x51,0xA3,0x68,0xFE,0x1D,0x11,0xB2 ))// C8DCADA0-FD8E-5E27-9551-A368FE1D11B2
}

private var IID___x_ABI_Ctest__component_CIStaticClassStatics: test_component.IID {
    .init(Data1: 0x92E618EF, Data2: 0xFF6E, Data3: 0x5975, Data4: ( 0x86,0x8C,0x99,0xAD,0xC1,0x1D,0x36,0xDE ))// 92E618EF-FF6E-5975-868C-99ADC11D36DE
}

private var IID___x_ABI_Ctest__component_CIUnsealedDerived: test_component.IID {
    .init(Data1: 0xB4FA333D, Data2: 0x9BCA, Data3: 0x592D, Data4: ( 0x9D,0xCB,0x18,0xAF,0x96,0xD7,0x6A,0x03 ))// B4FA333D-9BCA-592D-9DCB-18AF96D76A03
}

private var IID___x_ABI_Ctest__component_CIUnsealedDerived2: test_component.IID {
    .init(Data1: 0xA58C23CF, Data2: 0x4DC4, Data3: 0x59C5, Data4: ( 0x8D,0xE3,0x9F,0x06,0x3B,0x21,0x8D,0xDE ))// A58C23CF-4DC4-59C5-8DE3-9F063B218DDE
}

private var IID___x_ABI_Ctest__component_CIUnsealedDerived2Factory: test_component.IID {
    .init(Data1: 0x136F2143, Data2: 0x1044, Data3: 0x5A97, Data4: ( 0x8C,0x91,0x1E,0xF2,0x81,0x67,0xD9,0xFC ))// 136F2143-1044-5A97-8C91-1EF28167D9FC
}

private var IID___x_ABI_Ctest__component_CIUnsealedDerived2ProtectedFactory: test_component.IID {
    .init(Data1: 0x0978D147, Data2: 0x77BF, Data3: 0x5E0A, Data4: ( 0xA1,0x64,0xCA,0x95,0x1B,0xCA,0xB8,0xB4 ))// 0978D147-77BF-5E0A-A164-CA951BCAB8B4
}

private var IID___x_ABI_Ctest__component_CIUnsealedDerivedFactory: test_component.IID {
    .init(Data1: 0xDAF846D2, Data2: 0x8988, Data3: 0x5EE1, Data4: ( 0xA8,0xAA,0x7E,0x81,0xC0,0xF8,0xA9,0xE9 ))// DAF846D2-8988-5EE1-A8AA-7E81C0F8A9E9
}

private var IID___x_ABI_Ctest__component_CIUnsealedDerivedFromNoConstructor: test_component.IID {
    .init(Data1: 0xD0FB287A, Data2: 0xCBA2, Data3: 0x5756, Data4: ( 0xB7,0xA5,0x5F,0x3B,0x04,0x03,0x9F,0x67 ))// D0FB287A-CBA2-5756-B7A5-5F3B04039F67
}

private var IID___x_ABI_Ctest__component_CIUnsealedDerivedFromNoConstructorFactory: test_component.IID {
    .init(Data1: 0x51E65EEC, Data2: 0x650B, Data3: 0x549E, Data4: ( 0x94,0x0C,0x61,0xB6,0xA1,0x4E,0xEA,0x4B ))// 51E65EEC-650B-549E-940C-61B6A14EEA4B
}

private var IID___x_ABI_Ctest__component_CIUnsealedDerivedNoConstructor: test_component.IID {
    .init(Data1: 0x78393D7D, Data2: 0x930B, Data3: 0x57F9, Data4: ( 0x9B,0x04,0x2D,0xCC,0x34,0x80,0xD7,0x46 ))// 78393D7D-930B-57F9-9B04-2DCC3480D746
}

private var IID___x_ABI_Ctest__component_CIUnsealedDerivedNoConstructorFactory: test_component.IID {
    .init(Data1: 0xD8B1C0D1, Data2: 0xB48A, Data3: 0x5AA3, Data4: ( 0x98,0xF1,0xFF,0x86,0x8C,0xC4,0xD5,0x71 ))// D8B1C0D1-B48A-5AA3-98F1-FF868CC4D571
}

private var IID___x_ABI_Ctest__component_CIUnsealedDerivedNoOverrides: test_component.IID {
    .init(Data1: 0x3CD27E28, Data2: 0x2DFF, Data3: 0x5A17, Data4: ( 0x82,0x63,0x1B,0xFA,0x75,0x04,0x34,0xAA ))// 3CD27E28-2DFF-5A17-8263-1BFA750434AA
}

private var IID___x_ABI_Ctest__component_CIUnsealedDerivedNoOverridesProtectedFactory: test_component.IID {
    .init(Data1: 0x8D27A3F3, Data2: 0xD785, Data3: 0x53E3, Data4: ( 0x83,0x19,0x6A,0x50,0x97,0xB1,0x04,0xAB ))// 8D27A3F3-D785-53E3-8319-6A5097B104AB
}

private var IID___x_ABI_Ctest__component_CIUnsealedDerivedOverloads2: test_component.IID {
    .init(Data1: 0xF4CE1AD9, Data2: 0x36B9, Data3: 0x5DC7, Data4: ( 0xA0,0x07,0x3A,0xCD,0xF4,0x22,0xE7,0x05 ))// F4CE1AD9-36B9-5DC7-A007-3ACDF422E705
}

private var IID___x_ABI_Ctest__component_CIUnsealedDerivedOverrides: test_component.IID {
    .init(Data1: 0x828DCEE6, Data2: 0xF93A, Data3: 0x5A4D, Data4: ( 0xBC,0xEE,0xF7,0xC1,0xDE,0xE4,0xEB,0x4E ))// 828DCEE6-F93A-5A4D-BCEE-F7C1DEE4EB4E
}

private var IID___x_ABI_Ctest__component_CIWeakReferencer: test_component.IID {
    .init(Data1: 0xF3CE877F, Data2: 0x5BD2, Data3: 0x53C7, Data4: ( 0xAA,0x6A,0x39,0xF0,0x64,0x78,0x1C,0x21 ))// F3CE877F-5BD2-53C7-AA6A-39F064781C21
}

private var IID___x_ABI_Ctest__component_CIWeakReferencerFactory: test_component.IID {
    .init(Data1: 0x34CE8191, Data2: 0x4DC4, Data3: 0x50EF, Data4: ( 0xB6,0x9E,0x19,0x8F,0x3C,0x9F,0x65,0x52 ))// 34CE8191-4DC4-50EF-B69E-198F3C9F6552
}

private var IID___x_ABI_Ctest__component_CInterfaceWithReturnDelegate: test_component.IID {
    .init(Data1: 0xB0EBC406, Data2: 0x17C0, Data3: 0x5703, Data4: ( 0xB9,0xC7,0x50,0xBE,0x67,0x5B,0xBC,0x95 ))// B0EBC406-17C0-5703-B9C7-50BE675BBC95
}

private var IID___x_ABI_Ctest__component_CWithIterableGuids: test_component.IID {
    .init(Data1: 0xF8BD03F6, Data2: 0xBD7E, Data3: 0x586D, Data4: ( 0x96,0xB8,0x63,0xB6,0x39,0xA8,0xD0,0x42 ))// F8BD03F6-BD7E-586D-96B8-63B639A8D042
}

private var IID___x_ABI_Ctest__component_CWithKeyword: test_component.IID {
    .init(Data1: 0x18D4C535, Data2: 0x1785, Data3: 0x52CA, Data4: ( 0x88,0x51,0x8C,0xF3,0xD5,0x15,0x70,0x8A ))// 18D4C535-1785-52CA-8851-8CF3D515708A
}

private var IID___x_ABI_Ctest__component_CIObjectHandler: test_component.IID {
    .init(Data1: 0x5DD35752, Data2: 0x9800, Data3: 0x5961, Data4: ( 0x80,0xDE,0xFC,0x5E,0x20,0x9E,0x6E,0x2D ))// 5DD35752-9800-5961-80DE-FC5E209E6E2D
}

private var IID___x_ABI_Ctest__component_CIVoidToVoidDelegate: test_component.IID {
    .init(Data1: 0x5ED7E415, Data2: 0x84E7, Data3: 0x5E4C, Data4: ( 0x8F,0x68,0xD4,0x65,0x3C,0x39,0xEE,0x46 ))// 5ED7E415-84E7-5E4C-8F68-D4653C39EE46
}

public enum __ABI_test_component {
    public class IAsyncMethodsStatics: test_component.IInspectable {
        override public class var IID: test_component.IID { IID___x_ABI_Ctest__component_CIAsyncMethodsStatics }

        internal func GetCompletedAsyncImpl(_ result: Int32) throws -> test_component.AnyIAsyncOperation<Int32>? {
            let (operation) = try ComPtrs.initialize { operationAbi in
                _ = try perform(as: __x_ABI_Ctest__component_CIAsyncMethodsStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetCompletedAsync(pThis, result, &operationAbi))
                }
            }
            return test_component.__x_ABI_C__FIAsyncOperation_1_intWrapper.unwrapFrom(abi: operation)
        }

        internal func GetCompletedWithErrorAsyncImpl(_ errorCode: HRESULT) throws -> test_component.AnyIAsyncOperation<Int32>? {
            let (operation) = try ComPtrs.initialize { operationAbi in
                _ = try perform(as: __x_ABI_Ctest__component_CIAsyncMethodsStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetCompletedWithErrorAsync(pThis, errorCode, &operationAbi))
                }
            }
            return test_component.__x_ABI_C__FIAsyncOperation_1_intWrapper.unwrapFrom(abi: operation)
        }

        internal func GetPendingAsyncImpl() throws -> test_component.AsyncOperationInt? {
            let (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_Ctest__component_CIAsyncMethodsStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetPendingAsync(pThis, &resultAbi))
                }
            }
            return .from(abi: result)
        }

    }

    public class IAsyncMethodsWithProgress: test_component.IInspectable {
        override public class var IID: test_component.IID { IID___x_ABI_Ctest__component_CIAsyncMethodsWithProgress }

        open func OperationWithProgressImpl(_ value: test_component.DateTime) throws -> test_component.AnyIAsyncOperationWithProgress<Int32, Double>? {
            let (operation) = try ComPtrs.initialize { operationAbi in
                _ = try perform(as: __x_ABI_Ctest__component_CIAsyncMethodsWithProgress.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.OperationWithProgress(pThis, .from(swift: value), &operationAbi))
                }
            }
            return test_component.__x_ABI_C__FIAsyncOperationWithProgress_2_int_doubleWrapper.unwrapFrom(abi: operation)
        }

    }

    internal static var IAsyncMethodsWithProgressVTable: __x_ABI_Ctest__component_CIAsyncMethodsWithProgressVtbl = .init(
        QueryInterface: { IAsyncMethodsWithProgressWrapper.queryInterface($0, $1, $2) },
        AddRef: { IAsyncMethodsWithProgressWrapper.addRef($0) },
        Release: { IAsyncMethodsWithProgressWrapper.release($0) },
        GetIids: {
            let size = MemoryLayout<test_component.IID>.size
            let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: test_component.IID.self)
            iids[0] = IUnknown.IID
            iids[1] = IInspectable.IID
            iids[2] = __ABI_test_component.IAsyncMethodsWithProgressWrapper.IID
            $1!.pointee = 3
            $2!.pointee = iids
            return S_OK
        },

        GetRuntimeClassName: {
            _ = $0
            let hstring = try! HString("test_component.IAsyncMethodsWithProgress").detach()
            $1!.pointee = hstring
            return S_OK
        },

        GetTrustLevel: {
            _ = $0
            $1!.pointee = TrustLevel(rawValue: 0)
            return S_OK
        },

        OperationWithProgress: {
            do {
                guard let __unwrapped__instance = IAsyncMethodsWithProgressWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let value: test_component.DateTime = .from(abi: $1)
                let operation = try __unwrapped__instance.operationWithProgress(value)
                let operationWrapper = test_component.__x_ABI_C__FIAsyncOperationWithProgress_2_int_doubleWrapper(operation)
                operationWrapper?.copyTo($2)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        }
    )

    public typealias IAsyncMethodsWithProgressWrapper = InterfaceWrapperBase<__IMPL_test_component.IAsyncMethodsWithProgressBridge>
    public class IAsyncOperationInt: test_component.IInspectable {
        override public class var IID: test_component.IID { IID___x_ABI_Ctest__component_CIAsyncOperationInt }

        open func CompleteImpl(_ result: Int32) throws {
            _ = try perform(as: __x_ABI_Ctest__component_CIAsyncOperationInt.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Complete(pThis, result))
            }
        }

        open func CompleteWithErrorImpl(_ errorCode: HRESULT) throws {
            _ = try perform(as: __x_ABI_Ctest__component_CIAsyncOperationInt.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.CompleteWithError(pThis, errorCode))
            }
        }

    }

    internal static var IAsyncOperationIntVTable: __x_ABI_Ctest__component_CIAsyncOperationIntVtbl = .init(
        QueryInterface: { IAsyncOperationIntWrapper.queryInterface($0, $1, $2) },
        AddRef: { IAsyncOperationIntWrapper.addRef($0) },
        Release: { IAsyncOperationIntWrapper.release($0) },
        GetIids: {
            let size = MemoryLayout<test_component.IID>.size
            let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: test_component.IID.self)
            iids[0] = IUnknown.IID
            iids[1] = IInspectable.IID
            iids[2] = __ABI_test_component.IAsyncOperationIntWrapper.IID
            $1!.pointee = 3
            $2!.pointee = iids
            return S_OK
        },

        GetRuntimeClassName: {
            _ = $0
            let hstring = try! HString("test_component.IAsyncOperationInt").detach()
            $1!.pointee = hstring
            return S_OK
        },

        GetTrustLevel: {
            _ = $0
            $1!.pointee = TrustLevel(rawValue: 0)
            return S_OK
        },

        Complete: {
            do {
                guard let __unwrapped__instance = IAsyncOperationIntWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let result: Int32 = $1
                try __unwrapped__instance.complete(result)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        CompleteWithError: {
            do {
                guard let __unwrapped__instance = IAsyncOperationIntWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let errorCode: HRESULT = $1
                try __unwrapped__instance.completeWithError(errorCode)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        }
    )

    public typealias IAsyncOperationIntWrapper = InterfaceWrapperBase<__IMPL_test_component.IAsyncOperationIntBridge>
    public class IBase: test_component.IInspectable {
        override public class var IID: test_component.IID { IID___x_ABI_Ctest__component_CIBase }

        internal func DoTheThingImpl() throws {
            _ = try perform(as: __x_ABI_Ctest__component_CIBase.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.DoTheThing(pThis))
            }
        }

    }

    public class IBaseCollectionProtectedFactory: test_component.IInspectable {
        override public class var IID: test_component.IID { IID___x_ABI_Ctest__component_CIBaseCollectionProtectedFactory }

        internal func CreateInstanceImpl(_ baseInterface: UnsealedWinRTClassWrapper<test_component.BaseCollection.Composable>?, _ innerInterface: inout test_component.IInspectable?) throws -> IVectorBase {
            let (value) = try ComPtrs.initialize { valueAbi in
                let _baseInterface = baseInterface?.toIInspectableABI { $0 }
                let (_innerInterface) = try ComPtrs.initialize { _innerInterfaceAbi in
                    _ = try perform(as: __x_ABI_Ctest__component_CIBaseCollectionProtectedFactory.self) { pThis in
                        try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance(pThis, _baseInterface, &_innerInterfaceAbi, &valueAbi))
                    }
                }
                innerInterface = test_component.IInspectable(_innerInterface!)
            }
            return IVectorBase(value!)
        }

    }

    public class IBaseNoOverrides: test_component.IInspectable {
        override public class var IID: test_component.IID { IID___x_ABI_Ctest__component_CIBaseNoOverrides }

    }

    public class IBaseNoOverridesProtectedFactory: test_component.IInspectable {
        override public class var IID: test_component.IID { IID___x_ABI_Ctest__component_CIBaseNoOverridesProtectedFactory }

        internal func CreateInstanceImpl(_ baseInterface: UnsealedWinRTClassWrapper<test_component.BaseNoOverrides.Composable>?, _ innerInterface: inout test_component.IInspectable?) throws -> IBaseNoOverrides {
            let (value) = try ComPtrs.initialize { valueAbi in
                let _baseInterface = baseInterface?.toIInspectableABI { $0 }
                let (_innerInterface) = try ComPtrs.initialize { _innerInterfaceAbi in
                    _ = try perform(as: __x_ABI_Ctest__component_CIBaseNoOverridesProtectedFactory.self) { pThis in
                        try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance(pThis, _baseInterface, &_innerInterfaceAbi, &valueAbi))
                    }
                }
                innerInterface = test_component.IInspectable(_innerInterface!)
            }
            return IBaseNoOverrides(value!)
        }

    }

    public class IBaseNoOverridesStatics: test_component.IInspectable {
        override public class var IID: test_component.IID { IID___x_ABI_Ctest__component_CIBaseNoOverridesStatics }

        internal func CreateFromStringImpl(_ value: String) throws -> test_component.BaseNoOverrides? {
            let (result) = try ComPtrs.initialize { resultAbi in
                let _value = try! HString(value)
                _ = try perform(as: __x_ABI_Ctest__component_CIBaseNoOverridesStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateFromString(pThis, _value.get(), &resultAbi))
                }
            }
            return .from(abi: result)
        }

    }

    public class IBaseOverrides: test_component.IInspectable {
        override public class var IID: test_component.IID { IID___x_ABI_Ctest__component_CIBaseOverrides }

        internal func OnDoTheThingImpl() throws {
            _ = try perform(as: __x_ABI_Ctest__component_CIBaseOverrides.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.OnDoTheThing(pThis))
            }
        }

    }

    public class IBaseProtectedFactory: test_component.IInspectable {
        override public class var IID: test_component.IID { IID___x_ABI_Ctest__component_CIBaseProtectedFactory }

        internal func CreateInstanceImpl(_ baseInterface: UnsealedWinRTClassWrapper<test_component.Base.Composable>?, _ innerInterface: inout test_component.IInspectable?) throws -> IBase {
            let (value) = try ComPtrs.initialize { valueAbi in
                let _baseInterface = baseInterface?.toIInspectableABI { $0 }
                let (_innerInterface) = try ComPtrs.initialize { _innerInterfaceAbi in
                    _ = try perform(as: __x_ABI_Ctest__component_CIBaseProtectedFactory.self) { pThis in
                        try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance(pThis, _baseInterface, &_innerInterfaceAbi, &valueAbi))
                    }
                }
                innerInterface = test_component.IInspectable(_innerInterface!)
            }
            return IBase(value!)
        }

    }

    public class IBaseStatics: test_component.IInspectable {
        override public class var IID: test_component.IID { IID___x_ABI_Ctest__component_CIBaseStatics }

        internal func CreateFromStringImpl(_ value: String) throws -> test_component.Base? {
            let (result) = try ComPtrs.initialize { resultAbi in
                let _value = try! HString(value)
                _ = try perform(as: __x_ABI_Ctest__component_CIBaseStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateFromString(pThis, _value.get(), &resultAbi))
                }
            }
            return .from(abi: result)
        }

    }

    public class IBasic: test_component.IInspectable {
        override public class var IID: test_component.IID { IID___x_ABI_Ctest__component_CIBasic }

        open func MethodImpl() throws {
            _ = try perform(as: __x_ABI_Ctest__component_CIBasic.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Method(pThis))
            }
        }

    }

    internal static var IBasicVTable: __x_ABI_Ctest__component_CIBasicVtbl = .init(
        QueryInterface: { IBasicWrapper.queryInterface($0, $1, $2) },
        AddRef: { IBasicWrapper.addRef($0) },
        Release: { IBasicWrapper.release($0) },
        GetIids: {
            let size = MemoryLayout<test_component.IID>.size
            let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: test_component.IID.self)
            iids[0] = IUnknown.IID
            iids[1] = IInspectable.IID
            iids[2] = __ABI_test_component.IBasicWrapper.IID
            $1!.pointee = 3
            $2!.pointee = iids
            return S_OK
        },

        GetRuntimeClassName: {
            _ = $0
            let hstring = try! HString("test_component.IBasic").detach()
            $1!.pointee = hstring
            return S_OK
        },

        GetTrustLevel: {
            _ = $0
            $1!.pointee = TrustLevel(rawValue: 0)
            return S_OK
        },

        Method: {
            do {
                guard let __unwrapped__instance = IBasicWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                try __unwrapped__instance.method()
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        }
    )

    public typealias IBasicWrapper = InterfaceWrapperBase<__IMPL_test_component.IBasicBridge>
    public class IBufferTesterStatics: test_component.IInspectable {
        override public class var IID: test_component.IID { IID___x_ABI_Ctest__component_CIBufferTesterStatics }

        internal func GetDataFromImpl(_ buffer: test_component.AnyIBuffer?, _ index: UInt32) throws -> UInt8 {
            var result: UINT8 = 0
            let bufferWrapper = __ABI_Windows_Storage_Streams.IBufferWrapper(buffer)
            let _buffer = try! bufferWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_Ctest__component_CIBufferTesterStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetDataFrom(pThis, _buffer, index, &result))
            }
            return result
        }

    }

    public class IClass: test_component.IInspectable {
        override public class var IID: test_component.IID { IID___x_ABI_Ctest__component_CIClass }

        internal func get_ImplementationImpl() throws -> test_component.AnyIBasic? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_Ctest__component_CIClass.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Implementation(pThis, &valueAbi))
                }
            }
            return __ABI_test_component.IBasicWrapper.unwrapFrom(abi: value)
        }

        internal func put_ImplementationImpl(_ value: test_component.AnyIBasic?) throws {
            let valueWrapper = __ABI_test_component.IBasicWrapper(value)
            let _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_Ctest__component_CIClass.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Implementation(pThis, _value))
            }
        }

        internal func SetDelegateImpl(_ value: test_component.AnyISimpleDelegate?) throws {
            let valueWrapper = __ABI_test_component.ISimpleDelegateWrapper(value)
            let _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_Ctest__component_CIClass.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.SetDelegate(pThis, _value))
            }
        }

        internal func GetDelegateImpl() throws -> test_component.AnyISimpleDelegate? {
            let (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_Ctest__component_CIClass.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetDelegate(pThis, &resultAbi))
                }
            }
            return __ABI_test_component.ISimpleDelegateWrapper.unwrapFrom(abi: result)
        }

        internal func FailImpl(_ message: String) throws {
            let _message = try! HString(message)
            _ = try perform(as: __x_ABI_Ctest__component_CIClass.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Fail(pThis, _message.get()))
            }
        }

        internal func InInt32Impl(_ value: Int32) throws -> String {
            var result: HSTRING?
            _ = try perform(as: __x_ABI_Ctest__component_CIClass.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.InInt32(pThis, value, &result))
            }
            return .init(from: result)
        }

        internal func InStringImpl(_ value: String) throws -> String {
            var result: HSTRING?
            let _value = try! HString(value)
            _ = try perform(as: __x_ABI_Ctest__component_CIClass.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.InString(pThis, _value.get(), &result))
            }
            return .init(from: result)
        }

        internal func InObjectImpl(_ value: Any?) throws -> String {
            var result: HSTRING?
            let valueWrapper = __ABI_.AnyWrapper(value)
            let _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_Ctest__component_CIClass.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.InObject(pThis, _value, &result))
            }
            return .init(from: result)
        }

        internal func InEnumImpl(_ value: test_component.Signed) throws -> String {
            var result: HSTRING?
            _ = try perform(as: __x_ABI_Ctest__component_CIClass.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.InEnum(pThis, value, &result))
            }
            return .init(from: result)
        }

        internal func OutInt32Impl(_ value: inout Int32) throws {
            _ = try perform(as: __x_ABI_Ctest__component_CIClass.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.OutInt32(pThis, &value))
            }
        }

        internal func OutStringImpl(_ value: inout String) throws {
            var _value: HSTRING?
            _ = try perform(as: __x_ABI_Ctest__component_CIClass.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.OutString(pThis, &_value))
            }
            value = .init(from: _value)
            WindowsDeleteString(_value)
        }

        internal func OutObjectImpl(_ value: inout Any?) throws {
            let (_value) = try ComPtrs.initialize { (_valueAbi) in
                _ = try perform(as: __x_ABI_Ctest__component_CIClass.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.OutObject(pThis, &_valueAbi))
                }
            }
            value = __ABI_.AnyWrapper.unwrapFrom(abi: _value)
        }

        internal func OutStringableImpl(_ value: inout test_component.AnyIStringable?) throws {
            let (_value) = try ComPtrs.initialize { (_valueAbi) in
                _ = try perform(as: __x_ABI_Ctest__component_CIClass.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.OutStringable(pThis, &_valueAbi))
                }
            }
            value = __ABI_Windows_Foundation.IStringableWrapper.unwrapFrom(abi: _value)
        }

        internal func OutBlittableStructImpl(_ value: inout test_component.BlittableStruct) throws {
            var _value: __x_ABI_Ctest__component_CBlittableStruct = .init()
            _ = try perform(as: __x_ABI_Ctest__component_CIClass.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.OutBlittableStruct(pThis, &_value))
            }
            value = .from(abi: _value)
        }

        internal func OutNonBlittableStructImpl(_ value: inout test_component.NonBlittableStruct) throws {
            let _value: __ABI_test_component._ABI_NonBlittableStruct = .init()
            _ = try perform(as: __x_ABI_Ctest__component_CIClass.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.OutNonBlittableStruct(pThis, &_value.val))
            }
            value = .from(abi: _value.val)
        }

        internal func OutEnumImpl(_ value: inout test_component.Signed) throws {
            _ = try perform(as: __x_ABI_Ctest__component_CIClass.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.OutEnum(pThis, &value))
            }
        }

        internal func ReturnObjectImpl() throws -> Any? {
            let (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_Ctest__component_CIClass.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.ReturnObject(pThis, &resultAbi))
                }
            }
            return __ABI_.AnyWrapper.unwrapFrom(abi: result)
        }

        internal func ReturnEnumImpl() throws -> test_component.Signed {
            var result: __x_ABI_Ctest__component_CSigned = .init(0)
            _ = try perform(as: __x_ABI_Ctest__component_CIClass.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.ReturnEnum(pThis, &result))
            }
            return result
        }

        internal func ReturnReferenceEnumImpl() throws -> test_component.Signed? {
            let (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_Ctest__component_CIClass.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.ReturnReferenceEnum(pThis, &resultAbi))
                }
            }
            return test_component.__x_ABI_C__FIReference_1___x_ABI_Ctest__zcomponent__CSignedWrapper.unwrapFrom(abi: result)
        }

        internal func get_EnumPropertyImpl() throws -> test_component.Fruit {
            var value: __x_ABI_Ctest__component_CFruit = .init(0)
            _ = try perform(as: __x_ABI_Ctest__component_CIClass.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_EnumProperty(pThis, &value))
            }
            return value
        }

        internal func put_EnumPropertyImpl(_ value: test_component.Fruit) throws {
            _ = try perform(as: __x_ABI_Ctest__component_CIClass.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_EnumProperty(pThis, value))
            }
        }

        internal func NoexceptVoidImpl() throws {
            _ = try perform(as: __x_ABI_Ctest__component_CIClass.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.NoexceptVoid(pThis))
            }
        }

        internal func NoexceptInt32Impl() throws -> Int32 {
            var result: INT32 = 0
            _ = try perform(as: __x_ABI_Ctest__component_CIClass.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.NoexceptInt32(pThis, &result))
            }
            return result
        }

        internal func NoexceptStringImpl() throws -> String {
            var result: HSTRING?
            _ = try perform(as: __x_ABI_Ctest__component_CIClass.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.NoexceptString(pThis, &result))
            }
            return .init(from: result)
        }

        internal func add_DeferrableEventImpl(_ handler: TypedEventHandler<test_component.Class?, test_component.DeferrableEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = test_component.__x_ABI_C__FITypedEventHandler_2___x_ABI_Ctest__zcomponent__CClass___x_ABI_Ctest__zcomponent__CDeferrableEventArgsWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_Ctest__component_CIClass.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_DeferrableEvent(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_DeferrableEventImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_Ctest__component_CIClass.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_DeferrableEvent(pThis, token))
            }
        }

        internal func RaiseDeferrableEventAsyncImpl() throws -> test_component.AnyIAsyncOperation<Int32>? {
            let (operation) = try ComPtrs.initialize { operationAbi in
                _ = try perform(as: __x_ABI_Ctest__component_CIClass.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.RaiseDeferrableEventAsync(pThis, &operationAbi))
                }
            }
            return test_component.__x_ABI_C__FIAsyncOperation_1_intWrapper.unwrapFrom(abi: operation)
        }

        internal func ReturnCharImpl() throws -> Character {
            var result: WCHAR = 0
            _ = try perform(as: __x_ABI_Ctest__component_CIClass.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.ReturnChar(pThis, &result))
            }
            return .init(from: result)
        }

        internal func InCharImpl(_ value: Character) throws -> String {
            var result: HSTRING?
            _ = try perform(as: __x_ABI_Ctest__component_CIClass.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.InChar(pThis, .init(from: value), &result))
            }
            return .init(from: result)
        }

        internal func OutCharImpl(_ value: inout Character) throws {
            var _value: WCHAR = .init()
            _ = try perform(as: __x_ABI_Ctest__component_CIClass.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.OutChar(pThis, &_value))
            }
            value = .init(from: _value)
        }

        internal func get_StartValueImpl() throws -> Int32? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_Ctest__component_CIClass.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_StartValue(pThis, &valueAbi))
                }
            }
            return test_component.__x_ABI_C__FIReference_1_intWrapper.unwrapFrom(abi: value)
        }

        internal func put_StartValueImpl(_ value: Int32?) throws {
            let valueWrapper = test_component.__x_ABI_C__FIReference_1_intWrapper(value)
            let _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_Ctest__component_CIClass.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_StartValue(pThis, _value))
            }
        }

        internal func get_IdImpl() throws -> Foundation.UUID? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_Ctest__component_CIClass.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Id(pThis, &valueAbi))
                }
            }
            return test_component.__x_ABI_C__FIReference_1_GUIDWrapper.unwrapFrom(abi: value)
        }

        internal func put_IdImpl(_ value: Foundation.UUID?) throws {
            let valueWrapper = test_component.__x_ABI_C__FIReference_1_GUIDWrapper(value)
            let _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_Ctest__component_CIClass.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Id(pThis, _value))
            }
        }

        internal func get_BasePropertyImpl() throws -> test_component.Base? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_Ctest__component_CIClass.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_BaseProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func put_BasePropertyImpl(_ value: test_component.Base?) throws {
            _ = try perform(as: __x_ABI_Ctest__component_CIClass.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_BaseProperty(pThis, RawPointer(value)))
            }
        }

        internal func get_BaseNoOverridesPropertyImpl() throws -> test_component.BaseNoOverrides? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_Ctest__component_CIClass.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_BaseNoOverridesProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func put_BaseNoOverridesPropertyImpl(_ value: test_component.BaseNoOverrides?) throws {
            _ = try perform(as: __x_ABI_Ctest__component_CIClass.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_BaseNoOverridesProperty(pThis, RawPointer(value)))
            }
        }

    }

    public class IClassFactory: test_component.IInspectable {
        override public class var IID: test_component.IID { IID___x_ABI_Ctest__component_CIClassFactory }

        internal func CreateInstanceImpl(_ name: String) throws -> IClass {
            let (value) = try ComPtrs.initialize { valueAbi in
                let _name = try! HString(name)
                _ = try perform(as: __x_ABI_Ctest__component_CIClassFactory.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance(pThis, _name.get(), &valueAbi))
                }
            }
            return IClass(value!)
        }

        internal func CreateInstance2Impl(_ name: String, _ fruit: test_component.Fruit) throws -> IClass {
            let (value) = try ComPtrs.initialize { valueAbi in
                let _name = try! HString(name)
                _ = try perform(as: __x_ABI_Ctest__component_CIClassFactory.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance2(pThis, _name.get(), fruit, &valueAbi))
                }
            }
            return IClass(value!)
        }

        internal func CreateInstance3Impl(_ arg: test_component.AnyIMap<String, String>?, _ dummy1: Int32, _ dummy2: Int32, _ dummy3: Int32) throws -> IClass {
            let (value) = try ComPtrs.initialize { valueAbi in
                let argWrapper = test_component.__x_ABI_C__FIMap_2_HSTRING_HSTRINGWrapper(arg)
                let _arg = try! argWrapper?.toABI { $0 }
                _ = try perform(as: __x_ABI_Ctest__component_CIClassFactory.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance3(pThis, _arg, dummy1, dummy2, dummy3, &valueAbi))
                }
            }
            return IClass(value!)
        }

        internal func CreateInstance4Impl(_ arg: test_component.AnyIMapView<String, String>?, _ dummy1: Int32, _ dummy2: Int32, _ dummy3: Int32, _ dummy4: Int32) throws -> IClass {
            let (value) = try ComPtrs.initialize { valueAbi in
                let argWrapper = test_component.__x_ABI_C__FIMapView_2_HSTRING_HSTRINGWrapper(arg)
                let _arg = try! argWrapper?.toABI { $0 }
                _ = try perform(as: __x_ABI_Ctest__component_CIClassFactory.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance4(pThis, _arg, dummy1, dummy2, dummy3, dummy4, &valueAbi))
                }
            }
            return IClass(value!)
        }

        internal func CreateInstance5Impl(_ arg: test_component.AnyIVector<String>?, _ dummy1: Int32, _ dummy2: Int32, _ dummy3: Int32, _ dummy4: Int32, _ dummy5: Int32) throws -> IClass {
            let (value) = try ComPtrs.initialize { valueAbi in
                let argWrapper = test_component.__x_ABI_C__FIVector_1_HSTRINGWrapper(arg)
                let _arg = try! argWrapper?.toABI { $0 }
                _ = try perform(as: __x_ABI_Ctest__component_CIClassFactory.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance5(pThis, _arg, dummy1, dummy2, dummy3, dummy4, dummy5, &valueAbi))
                }
            }
            return IClass(value!)
        }

        internal func CreateInstance6Impl(_ arg: test_component.AnyIVectorView<String>?, _ dummy1: Int32, _ dummy2: Int32, _ dummy3: Int32, _ dummy4: Int32, _ dummy5: Int32, _ dummy6: Int32) throws -> IClass {
            let (value) = try ComPtrs.initialize { valueAbi in
                let argWrapper = test_component.__x_ABI_C__FIVectorView_1_HSTRINGWrapper(arg)
                let _arg = try! argWrapper?.toABI { $0 }
                _ = try perform(as: __x_ABI_Ctest__component_CIClassFactory.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance6(pThis, _arg, dummy1, dummy2, dummy3, dummy4, dummy5, dummy6, &valueAbi))
                }
            }
            return IClass(value!)
        }

    }

    public class IClassFactory2: test_component.IInspectable {
        override public class var IID: test_component.IID { IID___x_ABI_Ctest__component_CIClassFactory2 }

        internal func CreateInstanceImpl(_ name: String, _ fruit: test_component.Fruit, _ implementation: test_component.AnyIIAmImplementable?) throws -> IClass {
            let (value) = try ComPtrs.initialize { valueAbi in
                let _name = try! HString(name)
                let implementationWrapper = __ABI_test_component.IIAmImplementableWrapper(implementation)
                let _implementation = try! implementationWrapper?.toABI { $0 }
                _ = try perform(as: __x_ABI_Ctest__component_CIClassFactory2.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance(pThis, _name.get(), fruit, _implementation, &valueAbi))
                }
            }
            return IClass(value!)
        }

    }

    public class IClassStatics: test_component.IInspectable {
        override public class var IID: test_component.IID { IID___x_ABI_Ctest__component_CIClassStatics }

        internal func StaticTestImpl() throws {
            _ = try perform(as: __x_ABI_Ctest__component_CIClassStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.StaticTest(pThis))
            }
        }

        internal func StaticTestReturnImpl() throws -> Int32 {
            var result: INT32 = 0
            _ = try perform(as: __x_ABI_Ctest__component_CIClassStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.StaticTestReturn(pThis, &result))
            }
            return result
        }

        internal func get_StaticPropertyImpl() throws -> Int32 {
            var value: INT32 = 0
            _ = try perform(as: __x_ABI_Ctest__component_CIClassStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_StaticProperty(pThis, &value))
            }
            return value
        }

        internal func TakeBaseAndGiveToCallbackAsObjectImpl(_ base: test_component.Base?, _ callback: test_component.InObjectDelegate?) throws {
            let callbackWrapper = __ABI_test_component_Delegates.InObjectDelegateWrapper(callback)
            let _callback = try! callbackWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_Ctest__component_CIClassStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.TakeBaseAndGiveToCallbackAsObject(pThis, RawPointer(base), _callback))
            }
        }

    }

    public class IClassStatics2: test_component.IInspectable {
        override public class var IID: test_component.IID { IID___x_ABI_Ctest__component_CIClassStatics2 }

        internal func StaticTestReturnFloatImpl() throws -> Float {
            var result: FLOAT = 0.0
            _ = try perform(as: __x_ABI_Ctest__component_CIClassStatics2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.StaticTestReturnFloat(pThis, &result))
            }
            return result
        }

        internal func get_StaticPropertyFloatImpl() throws -> Float {
            var value: FLOAT = 0.0
            _ = try perform(as: __x_ABI_Ctest__component_CIClassStatics2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_StaticPropertyFloat(pThis, &value))
            }
            return value
        }

        internal func put_StaticPropertyFloatImpl(_ value: Float) throws {
            _ = try perform(as: __x_ABI_Ctest__component_CIClassStatics2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_StaticPropertyFloat(pThis, value))
            }
        }

    }

    public class ICollectionTester: test_component.IInspectable {
        override public class var IID: test_component.IID { IID___x_ABI_Ctest__component_CICollectionTester }

        internal func ReturnStoredStringVectorImpl() throws -> test_component.AnyIVector<String>? {
            let (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_Ctest__component_CICollectionTester.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.ReturnStoredStringVector(pThis, &resultAbi))
                }
            }
            return test_component.__x_ABI_C__FIVector_1_HSTRINGWrapper.unwrapFrom(abi: result)
        }

        internal func ReturnMapFromStringToStringImpl() throws -> test_component.AnyIMap<String, String>? {
            let (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_Ctest__component_CICollectionTester.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.ReturnMapFromStringToString(pThis, &resultAbi))
                }
            }
            return test_component.__x_ABI_C__FIMap_2_HSTRING_HSTRINGWrapper.unwrapFrom(abi: result)
        }

    }

    public class ICollectionTesterStatics: test_component.IInspectable {
        override public class var IID: test_component.IID { IID___x_ABI_Ctest__component_CICollectionTesterStatics }

        internal func InMapImpl(_ value: test_component.AnyIMap<String, String>?) throws -> String {
            var result: HSTRING?
            let valueWrapper = test_component.__x_ABI_C__FIMap_2_HSTRING_HSTRINGWrapper(value)
            let _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_Ctest__component_CICollectionTesterStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.InMap(pThis, _value, &result))
            }
            return .init(from: result)
        }

        internal func InMapViewImpl(_ value: test_component.AnyIMapView<String, String>?) throws -> String {
            var result: HSTRING?
            let valueWrapper = test_component.__x_ABI_C__FIMapView_2_HSTRING_HSTRINGWrapper(value)
            let _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_Ctest__component_CICollectionTesterStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.InMapView(pThis, _value, &result))
            }
            return .init(from: result)
        }

        internal func InVectorImpl(_ value: test_component.AnyIVector<String>?) throws -> String {
            var result: HSTRING?
            let valueWrapper = test_component.__x_ABI_C__FIVector_1_HSTRINGWrapper(value)
            let _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_Ctest__component_CICollectionTesterStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.InVector(pThis, _value, &result))
            }
            return .init(from: result)
        }

        internal func InVectorViewImpl(_ value: test_component.AnyIVectorView<String>?) throws -> String {
            var result: HSTRING?
            let valueWrapper = test_component.__x_ABI_C__FIVectorView_1_HSTRINGWrapper(value)
            let _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_Ctest__component_CICollectionTesterStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.InVectorView(pThis, _value, &result))
            }
            return .init(from: result)
        }

        internal func GetObjectAtImpl(_ value: test_component.AnyIVector<Any?>?, _ index: UInt32, _ callback: test_component.ObjectHandler?) throws {
            let valueWrapper = test_component.__x_ABI_C__FIVector_1_IInspectableWrapper(value)
            let _value = try! valueWrapper?.toABI { $0 }
            let callbackWrapper = __ABI_test_component.ObjectHandlerWrapper(callback)
            let _callback = try! callbackWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_Ctest__component_CICollectionTesterStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetObjectAt(pThis, _value, index, _callback))
            }
        }

    }

    public class IDeferrableEventArgs: test_component.IInspectable {
        override public class var IID: test_component.IID { IID___x_ABI_Ctest__component_CIDeferrableEventArgs }

        internal func GetDeferralImpl() throws -> test_component.Deferral? {
            let (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_Ctest__component_CIDeferrableEventArgs.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetDeferral(pThis, &resultAbi))
                }
            }
            return .from(abi: result)
        }

        internal func IncrementCounterImpl() throws {
            _ = try perform(as: __x_ABI_Ctest__component_CIDeferrableEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.IncrementCounter(pThis))
            }
        }

    }

    public class IDerived: test_component.IInspectable {
        override public class var IID: test_component.IID { IID___x_ABI_Ctest__component_CIDerived }

        internal func get_PropImpl() throws -> Int32 {
            var value: INT32 = 0
            _ = try perform(as: __x_ABI_Ctest__component_CIDerived.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Prop(pThis, &value))
            }
            return value
        }

        internal func put_PropImpl(_ value: Int32) throws {
            _ = try perform(as: __x_ABI_Ctest__component_CIDerived.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Prop(pThis, value))
            }
        }

    }

    public class IDerivedFromNoConstructor: test_component.IInspectable {
        override public class var IID: test_component.IID { IID___x_ABI_Ctest__component_CIDerivedFromNoConstructor }

        internal func MethodImpl() throws {
            _ = try perform(as: __x_ABI_Ctest__component_CIDerivedFromNoConstructor.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Method(pThis))
            }
        }

    }

    public class IDerivedStatics: test_component.IInspectable {
        override public class var IID: test_component.IID { IID___x_ABI_Ctest__component_CIDerivedStatics }

        internal func CreateFromStringImpl(_ value: String) throws -> test_component.Derived? {
            let (result) = try ComPtrs.initialize { resultAbi in
                let _value = try! HString(value)
                _ = try perform(as: __x_ABI_Ctest__component_CIDerivedStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateFromString(pThis, _value.get(), &resultAbi))
                }
            }
            return .from(abi: result)
        }

    }

    public class IEventTester: test_component.IInspectable {
        override public class var IID: test_component.IID { IID___x_ABI_Ctest__component_CIEventTester }

        internal func SubscribeImpl() throws {
            _ = try perform(as: __x_ABI_Ctest__component_CIEventTester.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Subscribe(pThis))
            }
        }

        internal func UnsubscribeImpl() throws {
            _ = try perform(as: __x_ABI_Ctest__component_CIEventTester.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Unsubscribe(pThis))
            }
        }

        internal func GetResultImpl() throws -> String {
            var result: HSTRING?
            _ = try perform(as: __x_ABI_Ctest__component_CIEventTester.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetResult(pThis, &result))
            }
            return .init(from: result)
        }

        internal func get_CountImpl() throws -> Int32 {
            var value: INT32 = 0
            _ = try perform(as: __x_ABI_Ctest__component_CIEventTester.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Count(pThis, &value))
            }
            return value
        }

    }

    public class IEventTesterFactory: test_component.IInspectable {
        override public class var IID: test_component.IID { IID___x_ABI_Ctest__component_CIEventTesterFactory }

        internal func CreateInstanceImpl(_ impl: test_component.AnyIIAmImplementable?) throws -> IEventTester {
            let (value) = try ComPtrs.initialize { valueAbi in
                let implWrapper = __ABI_test_component.IIAmImplementableWrapper(impl)
                let _impl = try! implWrapper?.toABI { $0 }
                _ = try perform(as: __x_ABI_Ctest__component_CIEventTesterFactory.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance(pThis, _impl, &valueAbi))
                }
            }
            return IEventTester(value!)
        }

    }

    public class IIAmImplementable: test_component.IInspectable {
        override public class var IID: test_component.IID { IID___x_ABI_Ctest__component_CIIAmImplementable }

        open func InInt32Impl(_ value: Int32) throws -> String {
            var result: HSTRING?
            _ = try perform(as: __x_ABI_Ctest__component_CIIAmImplementable.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.InInt32(pThis, value, &result))
            }
            return .init(from: result)
        }

        open func InStringImpl(_ value: String) throws -> String {
            var result: HSTRING?
            let _value = try! HString(value)
            _ = try perform(as: __x_ABI_Ctest__component_CIIAmImplementable.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.InString(pThis, _value.get(), &result))
            }
            return .init(from: result)
        }

        open func InObjectImpl(_ value: Any?) throws -> String {
            var result: HSTRING?
            let valueWrapper = __ABI_.AnyWrapper(value)
            let _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_Ctest__component_CIIAmImplementable.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.InObject(pThis, _value, &result))
            }
            return .init(from: result)
        }

        open func InEnumImpl(_ value: test_component.Signed) throws -> String {
            var result: HSTRING?
            _ = try perform(as: __x_ABI_Ctest__component_CIIAmImplementable.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.InEnum(pThis, value, &result))
            }
            return .init(from: result)
        }

        open func OutInt32Impl(_ value: inout Int32) throws {
            _ = try perform(as: __x_ABI_Ctest__component_CIIAmImplementable.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.OutInt32(pThis, &value))
            }
        }

        open func OutStringImpl(_ value: inout String) throws {
            var _value: HSTRING?
            _ = try perform(as: __x_ABI_Ctest__component_CIIAmImplementable.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.OutString(pThis, &_value))
            }
            value = .init(from: _value)
            WindowsDeleteString(_value)
        }

        open func OutObjectImpl(_ value: inout Any?) throws {
            let (_value) = try ComPtrs.initialize { (_valueAbi) in
                _ = try perform(as: __x_ABI_Ctest__component_CIIAmImplementable.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.OutObject(pThis, &_valueAbi))
                }
            }
            value = __ABI_.AnyWrapper.unwrapFrom(abi: _value)
        }

        open func OutBlittableStructImpl(_ value: inout test_component.BlittableStruct) throws {
            var _value: __x_ABI_Ctest__component_CBlittableStruct = .init()
            _ = try perform(as: __x_ABI_Ctest__component_CIIAmImplementable.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.OutBlittableStruct(pThis, &_value))
            }
            value = .from(abi: _value)
        }

        open func OutNonBlittableStructImpl(_ value: inout test_component.NonBlittableStruct) throws {
            let _value: __ABI_test_component._ABI_NonBlittableStruct = .init()
            _ = try perform(as: __x_ABI_Ctest__component_CIIAmImplementable.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.OutNonBlittableStruct(pThis, &_value.val))
            }
            value = .from(abi: _value.val)
        }

        open func OutEnumImpl(_ value: inout test_component.Signed) throws {
            _ = try perform(as: __x_ABI_Ctest__component_CIIAmImplementable.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.OutEnum(pThis, &value))
            }
        }

        open func ReturnObjectImpl() throws -> Any? {
            let (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_Ctest__component_CIIAmImplementable.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.ReturnObject(pThis, &resultAbi))
                }
            }
            return __ABI_.AnyWrapper.unwrapFrom(abi: result)
        }

        open func ReturnEnumImpl() throws -> test_component.Signed {
            var result: __x_ABI_Ctest__component_CSigned = .init(0)
            _ = try perform(as: __x_ABI_Ctest__component_CIIAmImplementable.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.ReturnEnum(pThis, &result))
            }
            return result
        }

        open func get_EnumPropertyImpl() throws -> test_component.Fruit {
            var value: __x_ABI_Ctest__component_CFruit = .init(0)
            _ = try perform(as: __x_ABI_Ctest__component_CIIAmImplementable.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_EnumProperty(pThis, &value))
            }
            return value
        }

        open func put_EnumPropertyImpl(_ value: test_component.Fruit) throws {
            _ = try perform(as: __x_ABI_Ctest__component_CIIAmImplementable.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_EnumProperty(pThis, value))
            }
        }

        open func get_IdImpl() throws -> Foundation.UUID? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_Ctest__component_CIIAmImplementable.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Id(pThis, &valueAbi))
                }
            }
            return test_component.__x_ABI_C__FIReference_1_GUIDWrapper.unwrapFrom(abi: value)
        }

        open func put_IdImpl(_ value: Foundation.UUID?) throws {
            let valueWrapper = test_component.__x_ABI_C__FIReference_1_GUIDWrapper(value)
            let _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_Ctest__component_CIIAmImplementable.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Id(pThis, _value))
            }
        }

        open func add_ImplementableEventImpl(_ handler: test_component.InDelegate?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = __ABI_test_component_Delegates.InDelegateWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_Ctest__component_CIIAmImplementable.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_ImplementableEvent(pThis, _handler, &token))
            }
            return token
        }

        open func remove_ImplementableEventImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_Ctest__component_CIIAmImplementable.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_ImplementableEvent(pThis, token))
            }
        }

        open func FireEventImpl(_ data: String) throws {
            let _data = try! HString(data)
            _ = try perform(as: __x_ABI_Ctest__component_CIIAmImplementable.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.FireEvent(pThis, _data.get()))
            }
        }

    }

    internal static var IIAmImplementableVTable: __x_ABI_Ctest__component_CIIAmImplementableVtbl = .init(
        QueryInterface: { IIAmImplementableWrapper.queryInterface($0, $1, $2) },
        AddRef: { IIAmImplementableWrapper.addRef($0) },
        Release: { IIAmImplementableWrapper.release($0) },
        GetIids: {
            let size = MemoryLayout<test_component.IID>.size
            let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: test_component.IID.self)
            iids[0] = IUnknown.IID
            iids[1] = IInspectable.IID
            iids[2] = __ABI_test_component.IIAmImplementableWrapper.IID
            $1!.pointee = 3
            $2!.pointee = iids
            return S_OK
        },

        GetRuntimeClassName: {
            _ = $0
            let hstring = try! HString("test_component.IIAmImplementable").detach()
            $1!.pointee = hstring
            return S_OK
        },

        GetTrustLevel: {
            _ = $0
            $1!.pointee = TrustLevel(rawValue: 0)
            return S_OK
        },

        InInt32: {
            do {
                guard let __unwrapped__instance = IIAmImplementableWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let value: Int32 = $1
                let result = try __unwrapped__instance.inInt32(value)
                $2?.initialize(to: try! HString(result).detach())
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        InString: {
            do {
                guard let __unwrapped__instance = IIAmImplementableWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let value: String = .init(from: $1)
                let result = try __unwrapped__instance.inString(value)
                $2?.initialize(to: try! HString(result).detach())
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        InObject: {
            do {
                guard let __unwrapped__instance = IIAmImplementableWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let value: Any? = __ABI_.AnyWrapper.unwrapFrom(abi: ComPtr($1))
                let result = try __unwrapped__instance.inObject(value)
                $2?.initialize(to: try! HString(result).detach())
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        InEnum: {
            do {
                guard let __unwrapped__instance = IIAmImplementableWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let value: test_component.Signed = $1
                let result = try __unwrapped__instance.inEnum(value)
                $2?.initialize(to: try! HString(result).detach())
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        OutInt32: {
            do {
                guard let __unwrapped__instance = IIAmImplementableWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                var value: Int32 = 0
                try __unwrapped__instance.outInt32(&value)
                $1?.initialize(to: value)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        OutString: {
            do {
                guard let __unwrapped__instance = IIAmImplementableWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                var value: String = ""
                try __unwrapped__instance.outString(&value)
                $1?.initialize(to: try! HString(value).detach())
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        OutObject: {
            do {
                guard let __unwrapped__instance = IIAmImplementableWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                var value: Any?
                try __unwrapped__instance.outObject(&value)
                let valueWrapper = __ABI_.AnyWrapper(value)
                valueWrapper?.copyTo($1)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        OutBlittableStruct: {
            do {
                guard let __unwrapped__instance = IIAmImplementableWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                var value: test_component.BlittableStruct = .init()
                try __unwrapped__instance.outBlittableStruct(&value)
                $1?.initialize(to: .from(swift: value))
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        OutNonBlittableStruct: {
            do {
                guard let __unwrapped__instance = IIAmImplementableWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                var value: test_component.NonBlittableStruct = .init()
                try __unwrapped__instance.outNonBlittableStruct(&value)
                let _value = __ABI_test_component._ABI_NonBlittableStruct(from: value)
                	$1?.initialize(to: _value.detach())
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        OutEnum: {
            do {
                guard let __unwrapped__instance = IIAmImplementableWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                var value: test_component.Signed = .init(0)
                try __unwrapped__instance.outEnum(&value)
                $1?.initialize(to: value)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        ReturnObject: {
            do {
                guard let __unwrapped__instance = IIAmImplementableWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let result = try __unwrapped__instance.returnObject()
                let resultWrapper = __ABI_.AnyWrapper(result)
                resultWrapper?.copyTo($1)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        ReturnEnum: {
            do {
                guard let __unwrapped__instance = IIAmImplementableWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let result = try __unwrapped__instance.returnEnum()
                $1?.initialize(to: result)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        get_EnumProperty: {
            guard let __unwrapped__instance = IIAmImplementableWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value = __unwrapped__instance.enumProperty
            $1?.initialize(to: value)
            return S_OK
        },

        put_EnumProperty: {
            guard let __unwrapped__instance = IIAmImplementableWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value: test_component.Fruit = $1
            __unwrapped__instance.enumProperty = value
            return S_OK
        },

        get_Id: {
            guard let __unwrapped__instance = IIAmImplementableWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value = __unwrapped__instance.id
            let valueWrapper = test_component.__x_ABI_C__FIReference_1_GUIDWrapper(value)
            valueWrapper?.copyTo($1)
            return S_OK
        },

        put_Id: {
            guard let __unwrapped__instance = IIAmImplementableWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value: Foundation.UUID? = test_component.__x_ABI_C__FIReference_1_GUIDWrapper.unwrapFrom(abi: ComPtr($1))
            __unwrapped__instance.id = value
            return S_OK
        },

        add_ImplementableEvent: {
            guard let __unwrapped__instance = IIAmImplementableWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            guard let handler = __ABI_test_component_Delegates.InDelegateWrapper.unwrapFrom(abi: ComPtr($1)) else { return E_INVALIDARG }
            let token = __unwrapped__instance.implementableEvent.addHandler(handler)
            $2?.initialize(to: .from(swift: token))
            return S_OK
        },

        remove_ImplementableEvent: {
            guard let __unwrapped__instance = IIAmImplementableWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let token: EventRegistrationToken = $1
            __unwrapped__instance.implementableEvent.removeHandler(token)
            return S_OK
        },

        FireEvent: {
            do {
                guard let __unwrapped__instance = IIAmImplementableWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let data: String = .init(from: $1)
                try __unwrapped__instance.fireEvent(data)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        }
    )

    public typealias IIAmImplementableWrapper = InterfaceWrapperBase<__IMPL_test_component.IIAmImplementableBridge>
    public class IInterfaceWithObservableVector: test_component.IInspectable {
        override public class var IID: test_component.IID { IID___x_ABI_Ctest__component_CIInterfaceWithObservableVector }

        open func TakeObservableImpl(_ basics: test_component.AnyIObservableVector<test_component.AnyIBasic?>?) throws {
            let basicsWrapper = test_component.__x_ABI_C__FIObservableVector_1___x_ABI_Ctest__zcomponent__CIBasicWrapper(basics)
            let _basics = try! basicsWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_Ctest__component_CIInterfaceWithObservableVector.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.TakeObservable(pThis, _basics))
            }
        }

    }

    internal static var IInterfaceWithObservableVectorVTable: __x_ABI_Ctest__component_CIInterfaceWithObservableVectorVtbl = .init(
        QueryInterface: { IInterfaceWithObservableVectorWrapper.queryInterface($0, $1, $2) },
        AddRef: { IInterfaceWithObservableVectorWrapper.addRef($0) },
        Release: { IInterfaceWithObservableVectorWrapper.release($0) },
        GetIids: {
            let size = MemoryLayout<test_component.IID>.size
            let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: test_component.IID.self)
            iids[0] = IUnknown.IID
            iids[1] = IInspectable.IID
            iids[2] = __ABI_test_component.IInterfaceWithObservableVectorWrapper.IID
            $1!.pointee = 3
            $2!.pointee = iids
            return S_OK
        },

        GetRuntimeClassName: {
            _ = $0
            let hstring = try! HString("test_component.IInterfaceWithObservableVector").detach()
            $1!.pointee = hstring
            return S_OK
        },

        GetTrustLevel: {
            _ = $0
            $1!.pointee = TrustLevel(rawValue: 0)
            return S_OK
        },

        TakeObservable: {
            do {
                guard let __unwrapped__instance = IInterfaceWithObservableVectorWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let basics: test_component.AnyIObservableVector<test_component.AnyIBasic?>? = test_component.__x_ABI_C__FIObservableVector_1___x_ABI_Ctest__zcomponent__CIBasicWrapper.unwrapFrom(abi: ComPtr($1))
                try __unwrapped__instance.takeObservable(basics)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        }
    )

    public typealias IInterfaceWithObservableVectorWrapper = InterfaceWrapperBase<__IMPL_test_component.IInterfaceWithObservableVectorBridge>
    public class INullValuesStatics: test_component.IInspectable {
        override public class var IID: test_component.IID { IID___x_ABI_Ctest__component_CINullValuesStatics }

        internal func IsObjectNullImpl(_ value: Any?) throws -> Bool {
            var result: boolean = 0
            let valueWrapper = __ABI_.AnyWrapper(value)
            let _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_Ctest__component_CINullValuesStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.IsObjectNull(pThis, _value, &result))
            }
            return .init(from: result)
        }

        internal func IsInterfaceNullImpl(_ value: test_component.AnyIClosable?) throws -> Bool {
            var result: boolean = 0
            let valueWrapper = __ABI_Windows_Foundation.IClosableWrapper(value)
            let _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_Ctest__component_CINullValuesStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.IsInterfaceNull(pThis, _value, &result))
            }
            return .init(from: result)
        }

        internal func IsGenericInterfaceNullImpl(_ value: test_component.AnyIVector<String>?) throws -> Bool {
            var result: boolean = 0
            let valueWrapper = test_component.__x_ABI_C__FIVector_1_HSTRINGWrapper(value)
            let _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_Ctest__component_CINullValuesStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.IsGenericInterfaceNull(pThis, _value, &result))
            }
            return .init(from: result)
        }

        internal func IsClassNullImpl(_ value: test_component.NoopClosable?) throws -> Bool {
            var result: boolean = 0
            _ = try perform(as: __x_ABI_Ctest__component_CINullValuesStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.IsClassNull(pThis, RawPointer(value), &result))
            }
            return .init(from: result)
        }

        internal func IsDelegateNullImpl(_ value: test_component.VoidToVoidDelegate?) throws -> Bool {
            var result: boolean = 0
            let valueWrapper = __ABI_test_component.VoidToVoidDelegateWrapper(value)
            let _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_Ctest__component_CINullValuesStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.IsDelegateNull(pThis, _value, &result))
            }
            return .init(from: result)
        }

        internal func GetNullObjectImpl() throws -> Any? {
            let (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_Ctest__component_CINullValuesStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetNullObject(pThis, &resultAbi))
                }
            }
            return __ABI_.AnyWrapper.unwrapFrom(abi: result)
        }

        internal func GetNullInterfaceImpl() throws -> test_component.AnyIClosable? {
            let (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_Ctest__component_CINullValuesStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetNullInterface(pThis, &resultAbi))
                }
            }
            return __ABI_Windows_Foundation.IClosableWrapper.unwrapFrom(abi: result)
        }

        internal func GetNullGenericInterfaceImpl() throws -> test_component.AnyIVector<String>? {
            let (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_Ctest__component_CINullValuesStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetNullGenericInterface(pThis, &resultAbi))
                }
            }
            return test_component.__x_ABI_C__FIVector_1_HSTRINGWrapper.unwrapFrom(abi: result)
        }

        internal func GetNullClassImpl() throws -> test_component.NoopClosable? {
            let (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_Ctest__component_CINullValuesStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetNullClass(pThis, &resultAbi))
                }
            }
            return .from(abi: result)
        }

        internal func GetNullDelegateImpl() throws -> test_component.VoidToVoidDelegate? {
            let (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_Ctest__component_CINullValuesStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetNullDelegate(pThis, &resultAbi))
                }
            }
            return __ABI_test_component.VoidToVoidDelegateWrapper.unwrapFrom(abi: result)
        }

    }

    public class IReferenceTarget: test_component.IInspectable {
        override public class var IID: test_component.IID { IID___x_ABI_Ctest__component_CIReferenceTarget }

        open func MethodImpl() throws {
            _ = try perform(as: __x_ABI_Ctest__component_CIReferenceTarget.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Method(pThis))
            }
        }

    }

    internal static var IReferenceTargetVTable: __x_ABI_Ctest__component_CIReferenceTargetVtbl = .init(
        QueryInterface: { IReferenceTargetWrapper.queryInterface($0, $1, $2) },
        AddRef: { IReferenceTargetWrapper.addRef($0) },
        Release: { IReferenceTargetWrapper.release($0) },
        GetIids: {
            let size = MemoryLayout<test_component.IID>.size
            let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: test_component.IID.self)
            iids[0] = IUnknown.IID
            iids[1] = IInspectable.IID
            iids[2] = __ABI_test_component.IReferenceTargetWrapper.IID
            $1!.pointee = 3
            $2!.pointee = iids
            return S_OK
        },

        GetRuntimeClassName: {
            _ = $0
            let hstring = try! HString("test_component.IReferenceTarget").detach()
            $1!.pointee = hstring
            return S_OK
        },

        GetTrustLevel: {
            _ = $0
            $1!.pointee = TrustLevel(rawValue: 0)
            return S_OK
        },

        Method: {
            do {
                guard let __unwrapped__instance = IReferenceTargetWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                try __unwrapped__instance.method()
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        }
    )

    public typealias IReferenceTargetWrapper = InterfaceWrapperBase<__IMPL_test_component.IReferenceTargetBridge>
    public class ISimple: test_component.IInspectable {
        override public class var IID: test_component.IID { IID___x_ABI_Ctest__component_CISimple }

        internal func MethodImpl() throws {
            _ = try perform(as: __x_ABI_Ctest__component_CISimple.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Method(pThis))
            }
        }

        internal func OperationImpl(_ value: test_component.DateTime) throws -> test_component.AnyIAsyncOperation<Int32>? {
            let (operation) = try ComPtrs.initialize { operationAbi in
                _ = try perform(as: __x_ABI_Ctest__component_CISimple.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.Operation(pThis, .from(swift: value), &operationAbi))
                }
            }
            return test_component.__x_ABI_C__FIAsyncOperation_1_intWrapper.unwrapFrom(abi: operation)
        }

        internal func ActionImpl(_ value: test_component.DateTime) throws -> test_component.AnyIAsyncAction? {
            let (operation) = try ComPtrs.initialize { operationAbi in
                _ = try perform(as: __x_ABI_Ctest__component_CISimple.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.Action(pThis, .from(swift: value), &operationAbi))
                }
            }
            return __ABI_Windows_Foundation.IAsyncActionWrapper.unwrapFrom(abi: operation)
        }

        internal func ObjectImpl(_ value: test_component.DateTime) throws -> Any? {
            let (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_Ctest__component_CISimple.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.Object(pThis, .from(swift: value), &resultAbi))
                }
            }
            return __ABI_.AnyWrapper.unwrapFrom(abi: result)
        }

        internal func ReturnBlittableStructImpl() throws -> test_component.BlittableStruct {
            var result: __x_ABI_Ctest__component_CBlittableStruct = .init()
            _ = try perform(as: __x_ABI_Ctest__component_CISimple.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.ReturnBlittableStruct(pThis, &result))
            }
            return .from(abi: result)
        }

        internal func TakeBlittableStructImpl(_ value: test_component.BlittableStruct) throws {
            _ = try perform(as: __x_ABI_Ctest__component_CISimple.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.TakeBlittableStruct(pThis, .from(swift: value)))
            }
        }

        internal func get_BlittableStructPropertyImpl() throws -> test_component.BlittableStruct {
            var value: __x_ABI_Ctest__component_CBlittableStruct = .init()
            _ = try perform(as: __x_ABI_Ctest__component_CISimple.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_BlittableStructProperty(pThis, &value))
            }
            return .from(abi: value)
        }

        internal func put_BlittableStructPropertyImpl(_ value: test_component.BlittableStruct) throws {
            _ = try perform(as: __x_ABI_Ctest__component_CISimple.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_BlittableStructProperty(pThis, .from(swift: value)))
            }
        }

        internal func ReturnStructWithReferenceImpl() throws -> test_component.StructWithIReference {
            var result: __x_ABI_Ctest__component_CStructWithIReference = .init()
            _ = try perform(as: __x_ABI_Ctest__component_CISimple.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.ReturnStructWithReference(pThis, &result))
            }
            return .from(abi: result)
        }

        internal func TakeStructWithReferenceImpl(_ value: test_component.StructWithIReference) throws {
            let _value = __ABI_test_component._ABI_StructWithIReference(from: value)
            _ = try perform(as: __x_ABI_Ctest__component_CISimple.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.TakeStructWithReference(pThis, _value.val))
            }
        }

        internal func get_StructWithReferencePropertyImpl() throws -> test_component.StructWithIReference {
            var value: __x_ABI_Ctest__component_CStructWithIReference = .init()
            _ = try perform(as: __x_ABI_Ctest__component_CISimple.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_StructWithReferenceProperty(pThis, &value))
            }
            return .from(abi: value)
        }

        internal func put_StructWithReferencePropertyImpl(_ value: test_component.StructWithIReference) throws {
            let _value = __ABI_test_component._ABI_StructWithIReference(from: value)
            _ = try perform(as: __x_ABI_Ctest__component_CISimple.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_StructWithReferenceProperty(pThis, _value.val))
            }
        }

        internal func ReturnNonBlittableStructImpl() throws -> test_component.NonBlittableStruct {
            var result: __x_ABI_Ctest__component_CNonBlittableStruct = .init()
            _ = try perform(as: __x_ABI_Ctest__component_CISimple.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.ReturnNonBlittableStruct(pThis, &result))
            }
            return .from(abi: result)
        }

        internal func TakeNonBlittableStructImpl(_ value: test_component.NonBlittableStruct) throws {
            let _value = __ABI_test_component._ABI_NonBlittableStruct(from: value)
            _ = try perform(as: __x_ABI_Ctest__component_CISimple.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.TakeNonBlittableStruct(pThis, _value.val))
            }
        }

        internal func get_NonBlittableStructPropertyImpl() throws -> test_component.NonBlittableStruct {
            var value: __x_ABI_Ctest__component_CNonBlittableStruct = .init()
            _ = try perform(as: __x_ABI_Ctest__component_CISimple.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_NonBlittableStructProperty(pThis, &value))
            }
            return .from(abi: value)
        }

        internal func put_NonBlittableStructPropertyImpl(_ value: test_component.NonBlittableStruct) throws {
            let _value = __ABI_test_component._ABI_NonBlittableStruct(from: value)
            _ = try perform(as: __x_ABI_Ctest__component_CISimple.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_NonBlittableStructProperty(pThis, _value.val))
            }
        }

        internal func get_StringPropertyImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_Ctest__component_CISimple.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_StringProperty(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_StringPropertyImpl(_ value: String) throws {
            let _value = try! HString(value)
            _ = try perform(as: __x_ABI_Ctest__component_CISimple.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_StringProperty(pThis, _value.get()))
            }
        }

        internal func add_SignalEventImpl(_ handler: test_component.SignalDelegate?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = __ABI_test_component_Delegates.SignalDelegateWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_Ctest__component_CISimple.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_SignalEvent(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_SignalEventImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_Ctest__component_CISimple.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_SignalEvent(pThis, token))
            }
        }

        internal func add_InEventImpl(_ handler: test_component.InDelegate?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = __ABI_test_component_Delegates.InDelegateWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_Ctest__component_CISimple.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_InEvent(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_InEventImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_Ctest__component_CISimple.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_InEvent(pThis, token))
            }
        }

        internal func add_SimpleEventImpl(_ handler: TypedEventHandler<test_component.Simple?, test_component.SimpleEventArgs>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = test_component.__x_ABI_C__FITypedEventHandler_2___x_ABI_Ctest__zcomponent__CSimple___x_ABI_Ctest__zcomponent__CSimpleEventArgsWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_Ctest__component_CISimple.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_SimpleEvent(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_SimpleEventImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_Ctest__component_CISimple.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_SimpleEvent(pThis, token))
            }
        }

        internal func FireEventImpl() throws {
            _ = try perform(as: __x_ABI_Ctest__component_CISimple.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.FireEvent(pThis))
            }
        }

    }

    public class ISimpleDelegate: test_component.IInspectable {
        override public class var IID: test_component.IID { IID___x_ABI_Ctest__component_CISimpleDelegate }

        open func DoThisImpl() throws {
            _ = try perform(as: __x_ABI_Ctest__component_CISimpleDelegate.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.DoThis(pThis))
            }
        }

        open func DoThatImpl(_ val: Int32) throws {
            _ = try perform(as: __x_ABI_Ctest__component_CISimpleDelegate.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.DoThat(pThis, val))
            }
        }

    }

    internal static var ISimpleDelegateVTable: __x_ABI_Ctest__component_CISimpleDelegateVtbl = .init(
        QueryInterface: { ISimpleDelegateWrapper.queryInterface($0, $1, $2) },
        AddRef: { ISimpleDelegateWrapper.addRef($0) },
        Release: { ISimpleDelegateWrapper.release($0) },
        GetIids: {
            let size = MemoryLayout<test_component.IID>.size
            let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: test_component.IID.self)
            iids[0] = IUnknown.IID
            iids[1] = IInspectable.IID
            iids[2] = __ABI_test_component.ISimpleDelegateWrapper.IID
            $1!.pointee = 3
            $2!.pointee = iids
            return S_OK
        },

        GetRuntimeClassName: {
            _ = $0
            let hstring = try! HString("test_component.ISimpleDelegate").detach()
            $1!.pointee = hstring
            return S_OK
        },

        GetTrustLevel: {
            _ = $0
            $1!.pointee = TrustLevel(rawValue: 0)
            return S_OK
        },

        DoThis: {
            do {
                guard let __unwrapped__instance = ISimpleDelegateWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                try __unwrapped__instance.doThis()
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        DoThat: {
            do {
                guard let __unwrapped__instance = ISimpleDelegateWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let val: Int32 = $1
                try __unwrapped__instance.doThat(val)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        }
    )

    public typealias ISimpleDelegateWrapper = InterfaceWrapperBase<__IMPL_test_component.ISimpleDelegateBridge>
    public class ISimpleOverrides: test_component.IInspectable {
        override public class var IID: test_component.IID { IID___x_ABI_Ctest__component_CISimpleOverrides }

        internal func CantActuallyOverrideBecauseNotComposableImpl() throws {
            _ = try perform(as: __x_ABI_Ctest__component_CISimpleOverrides.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.CantActuallyOverrideBecauseNotComposable(pThis))
            }
        }

    }

    public class ISimpleStatics: test_component.IInspectable {
        override public class var IID: test_component.IID { IID___x_ABI_Ctest__component_CISimpleStatics }

        internal func add_StaticEventImpl(_ handler: EventHandler<Any?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = test_component.__x_ABI_C__FIEventHandler_1_IInspectableWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_Ctest__component_CISimpleStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_StaticEvent(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_StaticEventImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_Ctest__component_CISimpleStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_StaticEvent(pThis, token))
            }
        }

        internal func FireStaticEventImpl() throws {
            _ = try perform(as: __x_ABI_Ctest__component_CISimpleStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.FireStaticEvent(pThis))
            }
        }

    }

    public class IStaticClassStatics: test_component.IInspectable {
        override public class var IID: test_component.IID { IID___x_ABI_Ctest__component_CIStaticClassStatics }

        internal func get_EnumPropertyImpl() throws -> test_component.Fruit {
            var value: __x_ABI_Ctest__component_CFruit = .init(0)
            _ = try perform(as: __x_ABI_Ctest__component_CIStaticClassStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_EnumProperty(pThis, &value))
            }
            return value
        }

        internal func put_EnumPropertyImpl(_ value: test_component.Fruit) throws {
            _ = try perform(as: __x_ABI_Ctest__component_CIStaticClassStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_EnumProperty(pThis, value))
            }
        }

        internal func InEnumImpl(_ value: test_component.Signed) throws -> String {
            var result: HSTRING?
            _ = try perform(as: __x_ABI_Ctest__component_CIStaticClassStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.InEnum(pThis, value, &result))
            }
            return .init(from: result)
        }

        internal func InNonBlittableStructImpl(_ value: test_component.NonBlittableStruct) throws -> String {
            var result: HSTRING?
            let _value = __ABI_test_component._ABI_NonBlittableStruct(from: value)
            _ = try perform(as: __x_ABI_Ctest__component_CIStaticClassStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.InNonBlittableStruct(pThis, _value.val, &result))
            }
            return .init(from: result)
        }

        internal func TakeBaseImpl(_ base: test_component.Base?) throws {
            _ = try perform(as: __x_ABI_Ctest__component_CIStaticClassStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.TakeBase(pThis, RawPointer(base)))
            }
        }

    }

    public class IUnsealedDerived: test_component.IInspectable {
        override public class var IID: test_component.IID { IID___x_ABI_Ctest__component_CIUnsealedDerived }

        internal func get_PropImpl() throws -> Int32 {
            var value: INT32 = 0
            _ = try perform(as: __x_ABI_Ctest__component_CIUnsealedDerived.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Prop(pThis, &value))
            }
            return value
        }

        internal func put_PropImpl(_ value: Int32) throws {
            _ = try perform(as: __x_ABI_Ctest__component_CIUnsealedDerived.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Prop(pThis, value))
            }
        }

    }

    public class IUnsealedDerived2: test_component.IInspectable {
        override public class var IID: test_component.IID { IID___x_ABI_Ctest__component_CIUnsealedDerived2 }

        internal func MethodImpl() throws {
            _ = try perform(as: __x_ABI_Ctest__component_CIUnsealedDerived2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Method(pThis))
            }
        }

    }

    public class IUnsealedDerived2Factory: test_component.IInspectable {
        override public class var IID: test_component.IID { IID___x_ABI_Ctest__component_CIUnsealedDerived2Factory }

        internal func CreateInstanceImpl(_ prop: Int32, _ baseInterface: UnsealedWinRTClassWrapper<test_component.UnsealedDerived2.Composable>?, _ innerInterface: inout test_component.IInspectable?) throws -> IUnsealedDerived2 {
            let (value) = try ComPtrs.initialize { valueAbi in
                let _baseInterface = baseInterface?.toIInspectableABI { $0 }
                let (_innerInterface) = try ComPtrs.initialize { _innerInterfaceAbi in
                    _ = try perform(as: __x_ABI_Ctest__component_CIUnsealedDerived2Factory.self) { pThis in
                        try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance(pThis, prop, _baseInterface, &_innerInterfaceAbi, &valueAbi))
                    }
                }
                innerInterface = test_component.IInspectable(_innerInterface!)
            }
            return IUnsealedDerived2(value!)
        }

    }

    public class IUnsealedDerived2ProtectedFactory: test_component.IInspectable {
        override public class var IID: test_component.IID { IID___x_ABI_Ctest__component_CIUnsealedDerived2ProtectedFactory }

        internal func CreateInstanceImpl(_ baseInterface: UnsealedWinRTClassWrapper<test_component.UnsealedDerived2.Composable>?, _ innerInterface: inout test_component.IInspectable?) throws -> IUnsealedDerived2 {
            let (value) = try ComPtrs.initialize { valueAbi in
                let _baseInterface = baseInterface?.toIInspectableABI { $0 }
                let (_innerInterface) = try ComPtrs.initialize { _innerInterfaceAbi in
                    _ = try perform(as: __x_ABI_Ctest__component_CIUnsealedDerived2ProtectedFactory.self) { pThis in
                        try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance(pThis, _baseInterface, &_innerInterfaceAbi, &valueAbi))
                    }
                }
                innerInterface = test_component.IInspectable(_innerInterface!)
            }
            return IUnsealedDerived2(value!)
        }

    }

    public class IUnsealedDerivedFactory: test_component.IInspectable {
        override public class var IID: test_component.IID { IID___x_ABI_Ctest__component_CIUnsealedDerivedFactory }

        internal func CreateInstanceImpl(_ baseInterface: UnsealedWinRTClassWrapper<test_component.UnsealedDerived.Composable>?, _ innerInterface: inout test_component.IInspectable?) throws -> IUnsealedDerived {
            let (value) = try ComPtrs.initialize { valueAbi in
                let _baseInterface = baseInterface?.toIInspectableABI { $0 }
                let (_innerInterface) = try ComPtrs.initialize { _innerInterfaceAbi in
                    _ = try perform(as: __x_ABI_Ctest__component_CIUnsealedDerivedFactory.self) { pThis in
                        try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance(pThis, _baseInterface, &_innerInterfaceAbi, &valueAbi))
                    }
                }
                innerInterface = test_component.IInspectable(_innerInterface!)
            }
            return IUnsealedDerived(value!)
        }

        internal func CreateInstance2Impl(_ prop: Int32, _ baseInterface: UnsealedWinRTClassWrapper<test_component.UnsealedDerived.Composable>?, _ innerInterface: inout test_component.IInspectable?) throws -> IUnsealedDerived {
            let (value) = try ComPtrs.initialize { valueAbi in
                let _baseInterface = baseInterface?.toIInspectableABI { $0 }
                let (_innerInterface) = try ComPtrs.initialize { _innerInterfaceAbi in
                    _ = try perform(as: __x_ABI_Ctest__component_CIUnsealedDerivedFactory.self) { pThis in
                        try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance2(pThis, prop, _baseInterface, &_innerInterfaceAbi, &valueAbi))
                    }
                }
                innerInterface = test_component.IInspectable(_innerInterface!)
            }
            return IUnsealedDerived(value!)
        }

        internal func CreateInstance3Impl(_ prop1: String, _ prop2: test_component.Base?, _ baseInterface: UnsealedWinRTClassWrapper<test_component.UnsealedDerived.Composable>?, _ innerInterface: inout test_component.IInspectable?) throws -> IUnsealedDerived {
            let (value) = try ComPtrs.initialize { valueAbi in
                let _prop1 = try! HString(prop1)
                let _baseInterface = baseInterface?.toIInspectableABI { $0 }
                let (_innerInterface) = try ComPtrs.initialize { _innerInterfaceAbi in
                    _ = try perform(as: __x_ABI_Ctest__component_CIUnsealedDerivedFactory.self) { pThis in
                        try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance3(pThis, _prop1.get(), RawPointer(prop2), _baseInterface, &_innerInterfaceAbi, &valueAbi))
                    }
                }
                innerInterface = test_component.IInspectable(_innerInterface!)
            }
            return IUnsealedDerived(value!)
        }

    }

    public class IUnsealedDerivedFromNoConstructor: test_component.IInspectable {
        override public class var IID: test_component.IID { IID___x_ABI_Ctest__component_CIUnsealedDerivedFromNoConstructor }

    }

    public class IUnsealedDerivedFromNoConstructorFactory: test_component.IInspectable {
        override public class var IID: test_component.IID { IID___x_ABI_Ctest__component_CIUnsealedDerivedFromNoConstructorFactory }

        internal func CreateInstanceImpl(_ baseInterface: UnsealedWinRTClassWrapper<test_component.UnsealedDerivedFromNoConstructor.Composable>?, _ innerInterface: inout test_component.IInspectable?) throws -> IUnsealedDerivedFromNoConstructor {
            let (value) = try ComPtrs.initialize { valueAbi in
                let _baseInterface = baseInterface?.toIInspectableABI { $0 }
                let (_innerInterface) = try ComPtrs.initialize { _innerInterfaceAbi in
                    _ = try perform(as: __x_ABI_Ctest__component_CIUnsealedDerivedFromNoConstructorFactory.self) { pThis in
                        try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance(pThis, _baseInterface, &_innerInterfaceAbi, &valueAbi))
                    }
                }
                innerInterface = test_component.IInspectable(_innerInterface!)
            }
            return IUnsealedDerivedFromNoConstructor(value!)
        }

    }

    public class IUnsealedDerivedNoConstructor: test_component.IInspectable {
        override public class var IID: test_component.IID { IID___x_ABI_Ctest__component_CIUnsealedDerivedNoConstructor }

    }

    public class IUnsealedDerivedNoConstructorFactory: test_component.IInspectable {
        override public class var IID: test_component.IID { IID___x_ABI_Ctest__component_CIUnsealedDerivedNoConstructorFactory }

    }

    public class IUnsealedDerivedNoOverrides: test_component.IInspectable {
        override public class var IID: test_component.IID { IID___x_ABI_Ctest__component_CIUnsealedDerivedNoOverrides }

    }

    public class IUnsealedDerivedNoOverridesProtectedFactory: test_component.IInspectable {
        override public class var IID: test_component.IID { IID___x_ABI_Ctest__component_CIUnsealedDerivedNoOverridesProtectedFactory }

        internal func CreateInstanceImpl(_ baseInterface: UnsealedWinRTClassWrapper<test_component.UnsealedDerivedNoOverrides.Composable>?, _ innerInterface: inout test_component.IInspectable?) throws -> IUnsealedDerivedNoOverrides {
            let (value) = try ComPtrs.initialize { valueAbi in
                let _baseInterface = baseInterface?.toIInspectableABI { $0 }
                let (_innerInterface) = try ComPtrs.initialize { _innerInterfaceAbi in
                    _ = try perform(as: __x_ABI_Ctest__component_CIUnsealedDerivedNoOverridesProtectedFactory.self) { pThis in
                        try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance(pThis, _baseInterface, &_innerInterfaceAbi, &valueAbi))
                    }
                }
                innerInterface = test_component.IInspectable(_innerInterface!)
            }
            return IUnsealedDerivedNoOverrides(value!)
        }

    }

    public class IUnsealedDerivedOverloads2: test_component.IInspectable {
        override public class var IID: test_component.IID { IID___x_ABI_Ctest__component_CIUnsealedDerivedOverloads2 }

        internal func OnAfterDoTheThingImpl() throws {
            _ = try perform(as: __x_ABI_Ctest__component_CIUnsealedDerivedOverloads2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.OnAfterDoTheThing(pThis))
            }
        }

    }

    public class IUnsealedDerivedOverrides: test_component.IInspectable {
        override public class var IID: test_component.IID { IID___x_ABI_Ctest__component_CIUnsealedDerivedOverrides }

        internal func OnBeforeDoTheThingImpl() throws {
            _ = try perform(as: __x_ABI_Ctest__component_CIUnsealedDerivedOverrides.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.OnBeforeDoTheThing(pThis))
            }
        }

    }

    public class IWeakReferencer: test_component.IInspectable {
        override public class var IID: test_component.IID { IID___x_ABI_Ctest__component_CIWeakReferencer }

        internal func ResolveImpl() throws -> test_component.AnyIReferenceTarget? {
            let (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_Ctest__component_CIWeakReferencer.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.Resolve(pThis, &resultAbi))
                }
            }
            return __ABI_test_component.IReferenceTargetWrapper.unwrapFrom(abi: result)
        }

    }

    public class IWeakReferencerFactory: test_component.IInspectable {
        override public class var IID: test_component.IID { IID___x_ABI_Ctest__component_CIWeakReferencerFactory }

        internal func CreateInstanceImpl(_ object: test_component.AnyIReferenceTarget?) throws -> IWeakReferencer {
            let (value) = try ComPtrs.initialize { valueAbi in
                let objectWrapper = __ABI_test_component.IReferenceTargetWrapper(object)
                let _object = try! objectWrapper?.toABI { $0 }
                _ = try perform(as: __x_ABI_Ctest__component_CIWeakReferencerFactory.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance(pThis, _object, &valueAbi))
                }
            }
            return IWeakReferencer(value!)
        }

    }

    public class InterfaceWithReturnDelegate: test_component.IInspectable {
        override public class var IID: test_component.IID { IID___x_ABI_Ctest__component_CInterfaceWithReturnDelegate }

        open func add_EventWithReturnImpl(_ handler: test_component.ReturnInt32Delegate?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = __ABI_test_component_Delegates.ReturnInt32DelegateWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_Ctest__component_CInterfaceWithReturnDelegate.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_EventWithReturn(pThis, _handler, &token))
            }
            return token
        }

        open func remove_EventWithReturnImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_Ctest__component_CInterfaceWithReturnDelegate.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_EventWithReturn(pThis, token))
            }
        }

    }

    internal static var InterfaceWithReturnDelegateVTable: __x_ABI_Ctest__component_CInterfaceWithReturnDelegateVtbl = .init(
        QueryInterface: { InterfaceWithReturnDelegateWrapper.queryInterface($0, $1, $2) },
        AddRef: { InterfaceWithReturnDelegateWrapper.addRef($0) },
        Release: { InterfaceWithReturnDelegateWrapper.release($0) },
        GetIids: {
            let size = MemoryLayout<test_component.IID>.size
            let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: test_component.IID.self)
            iids[0] = IUnknown.IID
            iids[1] = IInspectable.IID
            iids[2] = __ABI_test_component.InterfaceWithReturnDelegateWrapper.IID
            $1!.pointee = 3
            $2!.pointee = iids
            return S_OK
        },

        GetRuntimeClassName: {
            _ = $0
            let hstring = try! HString("test_component.InterfaceWithReturnDelegate").detach()
            $1!.pointee = hstring
            return S_OK
        },

        GetTrustLevel: {
            _ = $0
            $1!.pointee = TrustLevel(rawValue: 0)
            return S_OK
        },

        add_EventWithReturn: {
            guard let __unwrapped__instance = InterfaceWithReturnDelegateWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            guard let handler = __ABI_test_component_Delegates.ReturnInt32DelegateWrapper.unwrapFrom(abi: ComPtr($1)) else { return E_INVALIDARG }
            let token = __unwrapped__instance.eventWithReturn.addHandler(handler)
            $2?.initialize(to: .from(swift: token))
            return S_OK
        },

        remove_EventWithReturn: {
            guard let __unwrapped__instance = InterfaceWithReturnDelegateWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let token: EventRegistrationToken = $1
            __unwrapped__instance.eventWithReturn.removeHandler(token)
            return S_OK
        }
    )

    public typealias InterfaceWithReturnDelegateWrapper = InterfaceWrapperBase<__IMPL_test_component.InterfaceWithReturnDelegateBridge>
    public class WithIterableGuids: test_component.IInspectable {
        override public class var IID: test_component.IID { IID___x_ABI_Ctest__component_CWithIterableGuids }

        open func IDsImpl() throws -> test_component.AnyIVector<Foundation.UUID>? {
            let (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_Ctest__component_CWithIterableGuids.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.IDs(pThis, &resultAbi))
                }
            }
            return test_component.__x_ABI_C__FIVector_1_GUIDWrapper.unwrapFrom(abi: result)
        }

    }

    internal static var WithIterableGuidsVTable: __x_ABI_Ctest__component_CWithIterableGuidsVtbl = .init(
        QueryInterface: { WithIterableGuidsWrapper.queryInterface($0, $1, $2) },
        AddRef: { WithIterableGuidsWrapper.addRef($0) },
        Release: { WithIterableGuidsWrapper.release($0) },
        GetIids: {
            let size = MemoryLayout<test_component.IID>.size
            let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: test_component.IID.self)
            iids[0] = IUnknown.IID
            iids[1] = IInspectable.IID
            iids[2] = __ABI_test_component.WithIterableGuidsWrapper.IID
            $1!.pointee = 3
            $2!.pointee = iids
            return S_OK
        },

        GetRuntimeClassName: {
            _ = $0
            let hstring = try! HString("test_component.WithIterableGuids").detach()
            $1!.pointee = hstring
            return S_OK
        },

        GetTrustLevel: {
            _ = $0
            $1!.pointee = TrustLevel(rawValue: 0)
            return S_OK
        },

        IDs: {
            do {
                guard let __unwrapped__instance = WithIterableGuidsWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let result = try __unwrapped__instance.ids()
                let resultWrapper = test_component.__x_ABI_C__FIVector_1_GUIDWrapper(result)
                resultWrapper?.copyTo($1)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        }
    )

    public typealias WithIterableGuidsWrapper = InterfaceWrapperBase<__IMPL_test_component.WithIterableGuidsBridge>
    public class WithKeyword: test_component.IInspectable {
        override public class var IID: test_component.IID { IID___x_ABI_Ctest__component_CWithKeyword }

        open func EnumImpl(_ `extension`: String) throws {
            let _extension = try! HString(`extension`)
            _ = try perform(as: __x_ABI_Ctest__component_CWithKeyword.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Enum(pThis, _extension.get()))
            }
        }

        open func get_StructImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_Ctest__component_CWithKeyword.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Struct(pThis, &value))
            }
            return .init(from: value)
        }

        open func put_StructImpl(_ value: String) throws {
            let _value = try! HString(value)
            _ = try perform(as: __x_ABI_Ctest__component_CWithKeyword.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Struct(pThis, _value.get()))
            }
        }

        open func add_RepeatImpl(_ handler: EventHandler<Any?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = test_component.__x_ABI_C__FIEventHandler_1_IInspectableWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_Ctest__component_CWithKeyword.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_Repeat(pThis, _handler, &token))
            }
            return token
        }

        open func remove_RepeatImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_Ctest__component_CWithKeyword.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_Repeat(pThis, token))
            }
        }

        open func SubscriptImpl() throws {
            _ = try perform(as: __x_ABI_Ctest__component_CWithKeyword.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Subscript(pThis))
            }
        }

    }

    internal static var WithKeywordVTable: __x_ABI_Ctest__component_CWithKeywordVtbl = .init(
        QueryInterface: { WithKeywordWrapper.queryInterface($0, $1, $2) },
        AddRef: { WithKeywordWrapper.addRef($0) },
        Release: { WithKeywordWrapper.release($0) },
        GetIids: {
            let size = MemoryLayout<test_component.IID>.size
            let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: test_component.IID.self)
            iids[0] = IUnknown.IID
            iids[1] = IInspectable.IID
            iids[2] = __ABI_test_component.WithKeywordWrapper.IID
            $1!.pointee = 3
            $2!.pointee = iids
            return S_OK
        },

        GetRuntimeClassName: {
            _ = $0
            let hstring = try! HString("test_component.WithKeyword").detach()
            $1!.pointee = hstring
            return S_OK
        },

        GetTrustLevel: {
            _ = $0
            $1!.pointee = TrustLevel(rawValue: 0)
            return S_OK
        },

        Enum: {
            do {
                guard let __unwrapped__instance = WithKeywordWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let `extension`: String = .init(from: $1)
                try __unwrapped__instance.`enum`(`extension`)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        get_Struct: {
            guard let __unwrapped__instance = WithKeywordWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value = __unwrapped__instance.`struct`
            $1?.initialize(to: try! HString(value).detach())
            return S_OK
        },

        put_Struct: {
            guard let __unwrapped__instance = WithKeywordWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value: String = .init(from: $1)
            __unwrapped__instance.`struct` = value
            return S_OK
        },

        add_Repeat: {
            guard let __unwrapped__instance = WithKeywordWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            guard let handler = test_component.__x_ABI_C__FIEventHandler_1_IInspectableWrapper.unwrapFrom(abi: ComPtr($1)) else { return E_INVALIDARG }
            let token = __unwrapped__instance.`repeat`.addHandler(handler)
            $2?.initialize(to: .from(swift: token))
            return S_OK
        },

        remove_Repeat: {
            guard let __unwrapped__instance = WithKeywordWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let token: EventRegistrationToken = $1
            __unwrapped__instance.`repeat`.removeHandler(token)
            return S_OK
        },

        Subscript: {
            do {
                guard let __unwrapped__instance = WithKeywordWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                try __unwrapped__instance.`subscript`()
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        }
    )

    public typealias WithKeywordWrapper = InterfaceWrapperBase<__IMPL_test_component.WithKeywordBridge>
    public class _ABI_NonBlittableBoolStruct {
        public var val: __x_ABI_Ctest__component_CNonBlittableBoolStruct = .init()
        public init() { }
        public init(from swift: test_component.NonBlittableBoolStruct) {
            val.First = .init(from: swift.first)
            val.Second = .init(from: swift.second)
            val.Third = .init(from: swift.third)
            val.Fourth = .init(from: swift.fourth)
        }

        public func detach() -> __x_ABI_Ctest__component_CNonBlittableBoolStruct {
            let result = val
            return result
        }

        deinit {
        }
    }
    public class _ABI_NonBlittableStruct {
        public var val: __x_ABI_Ctest__component_CNonBlittableStruct = .init()
        public init() { }
        public init(from swift: test_component.NonBlittableStruct) {
            val.First = try! HString(swift.first).detach()
            val.Second = try! HString(swift.second).detach()
            val.Third = swift.third
            val.Fourth = try! HString(swift.fourth).detach()
        }

        public func detach() -> __x_ABI_Ctest__component_CNonBlittableStruct {
            let result = val
            val.First = nil
            val.Second = nil
            val.Fourth = nil
            return result
        }

        deinit {
            WindowsDeleteString(val.First)
            WindowsDeleteString(val.Second)
            WindowsDeleteString(val.Fourth)
        }
    }
    public class _ABI_StructWithIReference {
        public var val: __x_ABI_Ctest__component_CStructWithIReference = .init()
        public init() { }
        public init(from swift: test_component.StructWithIReference) {
            let Value1Wrapper = test_component.__x_ABI_C__FIReference_1_intWrapper(swift.value1)
            Value1Wrapper?.copyTo(&val.Value1)
            let Value2Wrapper = test_component.__x_ABI_C__FIReference_1_intWrapper(swift.value2)
            Value2Wrapper?.copyTo(&val.Value2)
        }

        public func detach() -> __x_ABI_Ctest__component_CStructWithIReference {
            let result = val
            val.Value1 = nil
            val.Value2 = nil
            return result
        }

        deinit {
            _ = val.Value1?.pointee.lpVtbl.pointee.Release(val.Value1)
            _ = val.Value2?.pointee.lpVtbl.pointee.Release(val.Value2)
        }
    }
    internal typealias IBaseOverridesWrapper = UnsealedWinRTClassWrapper<test_component.Base.IBaseOverrides>
    internal static var IBaseOverridesVTable: __x_ABI_Ctest__component_CIBaseOverridesVtbl = .init(
        QueryInterface: { IBaseOverridesWrapper.queryInterface($0, $1, $2) },
        AddRef: { IBaseOverridesWrapper.addRef($0) },
        Release: { IBaseOverridesWrapper.release($0) },
        GetIids: {
            let size = MemoryLayout<test_component.IID>.size
            let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: test_component.IID.self)
            iids[0] = IUnknown.IID
            iids[1] = IInspectable.IID
            iids[2] = __ABI_test_component.IBaseOverridesWrapper.IID
            $1!.pointee = 3
            $2!.pointee = iids
            return S_OK
        },

        GetRuntimeClassName: {
            guard let instance = IBaseOverridesWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let hstring = instance.GetRuntimeClassName().detach()
            $1!.pointee = hstring
            return S_OK
        },

        GetTrustLevel: {
            _ = $0
            $1!.pointee = TrustLevel(rawValue: 0)
            return S_OK
        },

        OnDoTheThing: {
            do {
                guard let __unwrapped__instance = IBaseOverridesWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                try __unwrapped__instance.onDoTheThing()
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        }
    )
    internal typealias IUnsealedDerivedOverridesWrapper = UnsealedWinRTClassWrapper<test_component.UnsealedDerived.IUnsealedDerivedOverrides>
    internal static var IUnsealedDerivedOverridesVTable: __x_ABI_Ctest__component_CIUnsealedDerivedOverridesVtbl = .init(
        QueryInterface: { IUnsealedDerivedOverridesWrapper.queryInterface($0, $1, $2) },
        AddRef: { IUnsealedDerivedOverridesWrapper.addRef($0) },
        Release: { IUnsealedDerivedOverridesWrapper.release($0) },
        GetIids: {
            let size = MemoryLayout<test_component.IID>.size
            let iids = CoTaskMemAlloc(UInt64(size) * 4).assumingMemoryBound(to: test_component.IID.self)
            iids[0] = IUnknown.IID
            iids[1] = IInspectable.IID
            iids[2] = __ABI_test_component.IUnsealedDerivedOverridesWrapper.IID
            iids[3] = __ABI_test_component.IBaseOverridesWrapper.IID
            $1!.pointee = 4
            $2!.pointee = iids
            return S_OK
        },

        GetRuntimeClassName: {
            guard let instance = IUnsealedDerivedOverridesWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let hstring = instance.GetRuntimeClassName().detach()
            $1!.pointee = hstring
            return S_OK
        },

        GetTrustLevel: {
            _ = $0
            $1!.pointee = TrustLevel(rawValue: 0)
            return S_OK
        },

        OnBeforeDoTheThing: {
            do {
                guard let __unwrapped__instance = IUnsealedDerivedOverridesWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                try __unwrapped__instance.onBeforeDoTheThing()
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        }
    )
    internal typealias IUnsealedDerivedOverloads2Wrapper = UnsealedWinRTClassWrapper<test_component.UnsealedDerived.IUnsealedDerivedOverloads2>
    internal static var IUnsealedDerivedOverloads2VTable: __x_ABI_Ctest__component_CIUnsealedDerivedOverloads2Vtbl = .init(
        QueryInterface: { IUnsealedDerivedOverloads2Wrapper.queryInterface($0, $1, $2) },
        AddRef: { IUnsealedDerivedOverloads2Wrapper.addRef($0) },
        Release: { IUnsealedDerivedOverloads2Wrapper.release($0) },
        GetIids: {
            let size = MemoryLayout<test_component.IID>.size
            let iids = CoTaskMemAlloc(UInt64(size) * 5).assumingMemoryBound(to: test_component.IID.self)
            iids[0] = IUnknown.IID
            iids[1] = IInspectable.IID
            iids[2] = __ABI_test_component.IUnsealedDerivedOverloads2Wrapper.IID
            iids[3] = __ABI_test_component.IBaseOverridesWrapper.IID
            iids[4] = __ABI_test_component.IUnsealedDerivedOverridesWrapper.IID
            $1!.pointee = 5
            $2!.pointee = iids
            return S_OK
        },

        GetRuntimeClassName: {
            guard let instance = IUnsealedDerivedOverloads2Wrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let hstring = instance.GetRuntimeClassName().detach()
            $1!.pointee = hstring
            return S_OK
        },

        GetTrustLevel: {
            _ = $0
            $1!.pointee = TrustLevel(rawValue: 0)
            return S_OK
        },

        OnAfterDoTheThing: {
            do {
                guard let __unwrapped__instance = IUnsealedDerivedOverloads2Wrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                try __unwrapped__instance.onAfterDoTheThing()
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        }
    )
}
extension __x_ABI_Ctest__component_CBlittableStruct {
        public static func from(swift: test_component.BlittableStruct) -> __x_ABI_Ctest__component_CBlittableStruct {
            .init(First: swift.first, Second: swift.second)
        }
    }
    extension __x_ABI_Ctest__component_CSimpleEventArgs {
        public static func from(swift: test_component.SimpleEventArgs) -> __x_ABI_Ctest__component_CSimpleEventArgs {
            .init(Value: swift.value)
        }
    }
    extension __x_ABI_Ctest__component_CStructWithEnum {
        public static func from(swift: test_component.StructWithEnum) -> __x_ABI_Ctest__component_CStructWithEnum {
            .init(Names: swift.names)
        }
    }
    extension ComposableImpl where CABI == __x_ABI_Ctest__component_CIBaseOverrides {
    public static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__ABI_test_component.IBaseOverridesVTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}
extension ComposableImpl where CABI == __x_ABI_Ctest__component_CIUnsealedDerivedOverloads2 {
    public static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__ABI_test_component.IUnsealedDerivedOverloads2VTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}
extension ComposableImpl where CABI == __x_ABI_Ctest__component_CIUnsealedDerivedOverrides {
    public static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__ABI_test_component.IUnsealedDerivedOverridesVTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}
// MARK - ObjectHandler
extension __ABI_test_component {
    public class ObjectHandler: test_component.IUnknown {
        override public class var IID: test_component.IID { IID___x_ABI_Ctest__component_CIObjectHandler }

        open func InvokeImpl(_ item: Any?) throws {
            let itemWrapper = __ABI_.AnyWrapper(item)
            let _item = try! itemWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_Ctest__component_CIObjectHandler.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Invoke(pThis, _item))
            }
        }

    }


    typealias ObjectHandlerWrapper = InterfaceWrapperBase<__IMPL_test_component.ObjectHandlerBridge>
    internal static var ObjectHandlerVTable: __x_ABI_Ctest__component_CIObjectHandlerVtbl = .init(
        QueryInterface: { ObjectHandlerWrapper.queryInterface($0, $1, $2) },
        AddRef: { ObjectHandlerWrapper.addRef($0) },
        Release: { ObjectHandlerWrapper.release($0) },
        Invoke: {
            do {
                guard let __unwrapped__instance = ObjectHandlerWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let item: Any? = __ABI_.AnyWrapper.unwrapFrom(abi: ComPtr($1))
                try __unwrapped__instance(item)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        }
    )
}
public extension WinRTDelegateBridge where CABI == __x_ABI_Ctest__component_CIObjectHandler {
    static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__ABI_test_component.ObjectHandlerVTable) { $0 }
        return .init(lpVtbl:vtblPtr)
    }
}

// MARK - VoidToVoidDelegate
extension __ABI_test_component {
    public class VoidToVoidDelegate: test_component.IUnknown {
        override public class var IID: test_component.IID { IID___x_ABI_Ctest__component_CIVoidToVoidDelegate }

        open func InvokeImpl() throws {
            _ = try perform(as: __x_ABI_Ctest__component_CIVoidToVoidDelegate.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Invoke(pThis))
            }
        }

    }


    typealias VoidToVoidDelegateWrapper = InterfaceWrapperBase<__IMPL_test_component.VoidToVoidDelegateBridge>
    internal static var VoidToVoidDelegateVTable: __x_ABI_Ctest__component_CIVoidToVoidDelegateVtbl = .init(
        QueryInterface: { VoidToVoidDelegateWrapper.queryInterface($0, $1, $2) },
        AddRef: { VoidToVoidDelegateWrapper.addRef($0) },
        Release: { VoidToVoidDelegateWrapper.release($0) },
        Invoke: {
            do {
                guard let __unwrapped__instance = VoidToVoidDelegateWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                try __unwrapped__instance()
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        }
    )
}
public extension WinRTDelegateBridge where CABI == __x_ABI_Ctest__component_CIVoidToVoidDelegate {
    static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__ABI_test_component.VoidToVoidDelegateVTable) { $0 }
        return .init(lpVtbl:vtblPtr)
    }
}


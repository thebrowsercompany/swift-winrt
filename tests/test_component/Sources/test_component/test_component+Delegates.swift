// WARNING: Please don't edit this file. It was generated by Swift/WinRT v0.0.1
// swiftlint:disable all
import Foundation
import Ctest_component

// MARK: - ArrayMethodCallback

public typealias ArrayMethodCallback = ([Int32]) throws -> ()
// MARK: - ArrayMethodCallback Internals

@_spi(WinRTInternal)
extension __IMPL_test_component {
    public class ArrayMethodCallbackBridge : WinRTDelegateBridge {
        public typealias Handler = ArrayMethodCallback
        public typealias CABI = __x_ABI_Ctest__component_CIArrayMethodCallback
        public typealias SwiftABI = __ABI_test_component.ArrayMethodCallback

        public static func from(abi: ComPtr<CABI>?) -> Handler? {
            guard let abi = abi else { return nil }
            let _default = SwiftABI(abi)
            let handler: Handler = { (value) in
                try _default.Invoke(value)
            }
            return handler
        }
    }
}
@_spi(WinRTInternal)
extension __ABI_test_component {
    private static let IID___x_ABI_Ctest__component_CIArrayMethodCallback: test_component.IID = .init(
        Data1: 0x224AFD3B, Data2: 0x6459, Data3: 0x5621, Data4: ( 0xBF,0x69,0xF5,0x02,0x8C,0xF2,0xB3,0x17 ) // 224AFD3B-6459-5621-BF69-F5028CF2B317
    ) 
    public class ArrayMethodCallback: test_component.IUnknown {
        override public class var IID: test_component.IID { IID___x_ABI_Ctest__component_CIArrayMethodCallback }

        open func Invoke(_ value: [Int32]) throws {
            try value.toABI { _value in
                _ = try perform(as: __x_ABI_Ctest__component_CIArrayMethodCallback.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.Invoke(pThis, _value.count, _value.start))
                }
            }
        }

    }


    typealias ArrayMethodCallbackWrapper = InterfaceWrapperBase<__IMPL_test_component.ArrayMethodCallbackBridge>
    internal static var ArrayMethodCallbackVTable: __x_ABI_Ctest__component_CIArrayMethodCallbackVtbl = .init(
        QueryInterface: { ArrayMethodCallbackWrapper.queryInterface($0, $1, $2) },
        AddRef: { ArrayMethodCallbackWrapper.addRef($0) },
        Release: { ArrayMethodCallbackWrapper.release($0) },
        Invoke: {
            do {
                guard let __unwrapped__instance = ArrayMethodCallbackWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let value: [Int32] = .from(abi: (count: $1, start: $2))
                try __unwrapped__instance(value)
                return S_OK
            } catch { return failWith(error: error) }
        }
    )
}
@_spi(WinRTInternal)
public extension WinRTDelegateBridge where CABI == __x_ABI_Ctest__component_CIArrayMethodCallback {
    static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__ABI_test_component.ArrayMethodCallbackVTable) { $0 }
        return .init(lpVtbl:vtblPtr)
    }
}

// MARK: - ObjectHandler

public typealias ObjectHandler = (Any?) throws -> ()
// MARK: - ObjectHandler Internals

@_spi(WinRTInternal)
extension __IMPL_test_component {
    public class ObjectHandlerBridge : WinRTDelegateBridge {
        public typealias Handler = ObjectHandler
        public typealias CABI = __x_ABI_Ctest__component_CIObjectHandler
        public typealias SwiftABI = __ABI_test_component.ObjectHandler

        public static func from(abi: ComPtr<CABI>?) -> Handler? {
            guard let abi = abi else { return nil }
            let _default = SwiftABI(abi)
            let handler: Handler = { (item) in
                try _default.Invoke(item)
            }
            return handler
        }
    }
}
@_spi(WinRTInternal)
extension __ABI_test_component {
    private static let IID___x_ABI_Ctest__component_CIObjectHandler: test_component.IID = .init(
        Data1: 0x5DD35752, Data2: 0x9800, Data3: 0x5961, Data4: ( 0x80,0xDE,0xFC,0x5E,0x20,0x9E,0x6E,0x2D ) // 5DD35752-9800-5961-80DE-FC5E209E6E2D
    ) 
    public class ObjectHandler: test_component.IUnknown {
        override public class var IID: test_component.IID { IID___x_ABI_Ctest__component_CIObjectHandler }

        open func Invoke(_ item: Any?) throws {
            let itemWrapper = __ABI_.AnyWrapper(item)
            let _item = try! itemWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_Ctest__component_CIObjectHandler.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Invoke(pThis, _item))
            }
        }

    }


    typealias ObjectHandlerWrapper = InterfaceWrapperBase<__IMPL_test_component.ObjectHandlerBridge>
    internal static var ObjectHandlerVTable: __x_ABI_Ctest__component_CIObjectHandlerVtbl = .init(
        QueryInterface: { ObjectHandlerWrapper.queryInterface($0, $1, $2) },
        AddRef: { ObjectHandlerWrapper.addRef($0) },
        Release: { ObjectHandlerWrapper.release($0) },
        Invoke: {
            do {
                guard let __unwrapped__instance = ObjectHandlerWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let item: Any? = __ABI_.AnyWrapper.unwrapFrom(abi: ComPtr($1))
                try __unwrapped__instance(item)
                return S_OK
            } catch { return failWith(error: error) }
        }
    )
}
@_spi(WinRTInternal)
public extension WinRTDelegateBridge where CABI == __x_ABI_Ctest__component_CIObjectHandler {
    static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__ABI_test_component.ObjectHandlerVTable) { $0 }
        return .init(lpVtbl:vtblPtr)
    }
}

// MARK: - VoidToVoidDelegate

public typealias VoidToVoidDelegate = () throws -> ()
// MARK: - VoidToVoidDelegate Internals

@_spi(WinRTInternal)
extension __IMPL_test_component {
    public class VoidToVoidDelegateBridge : WinRTDelegateBridge {
        public typealias Handler = VoidToVoidDelegate
        public typealias CABI = __x_ABI_Ctest__component_CIVoidToVoidDelegate
        public typealias SwiftABI = __ABI_test_component.VoidToVoidDelegate

        public static func from(abi: ComPtr<CABI>?) -> Handler? {
            guard let abi = abi else { return nil }
            let _default = SwiftABI(abi)
            let handler: Handler = { () in
                try _default.Invoke()
            }
            return handler
        }
    }
}
@_spi(WinRTInternal)
extension __ABI_test_component {
    private static let IID___x_ABI_Ctest__component_CIVoidToVoidDelegate: test_component.IID = .init(
        Data1: 0x5ED7E415, Data2: 0x84E7, Data3: 0x5E4C, Data4: ( 0x8F,0x68,0xD4,0x65,0x3C,0x39,0xEE,0x46 ) // 5ED7E415-84E7-5E4C-8F68-D4653C39EE46
    ) 
    public class VoidToVoidDelegate: test_component.IUnknown {
        override public class var IID: test_component.IID { IID___x_ABI_Ctest__component_CIVoidToVoidDelegate }

        open func Invoke() throws {
            _ = try perform(as: __x_ABI_Ctest__component_CIVoidToVoidDelegate.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Invoke(pThis))
            }
        }

    }


    typealias VoidToVoidDelegateWrapper = InterfaceWrapperBase<__IMPL_test_component.VoidToVoidDelegateBridge>
    internal static var VoidToVoidDelegateVTable: __x_ABI_Ctest__component_CIVoidToVoidDelegateVtbl = .init(
        QueryInterface: { VoidToVoidDelegateWrapper.queryInterface($0, $1, $2) },
        AddRef: { VoidToVoidDelegateWrapper.addRef($0) },
        Release: { VoidToVoidDelegateWrapper.release($0) },
        Invoke: {
            do {
                guard let __unwrapped__instance = VoidToVoidDelegateWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                try __unwrapped__instance()
                return S_OK
            } catch { return failWith(error: error) }
        }
    )
}
@_spi(WinRTInternal)
public extension WinRTDelegateBridge where CABI == __x_ABI_Ctest__component_CIVoidToVoidDelegate {
    static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__ABI_test_component.VoidToVoidDelegateVTable) { $0 }
        return .init(lpVtbl:vtblPtr)
    }
}


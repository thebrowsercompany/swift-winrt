// WARNING: Please don't edit this file. It was generated by Swift/WinRT v0.0.1
// swiftlint:disable all
import Foundation
import Ctest_component
@_spi(WinRTInternal) @_spi(WinRTImplements) import WindowsFoundation
import CWindowsFoundation
import CWinRT

open class BaseCollection : WinRTClass, IVector, IIterable {
    public typealias T = Base?
    private typealias SwiftABI = test_component.IVectorBase
    private typealias CABI = __x_ABI_C__FIVector_1___x_ABI_Ctest__zcomponent__CBase
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    @_spi(WinRTInternal)
    public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init()
        MakeComposed(composing: composing, (self as! Composable.Class), createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IBaseCollectionProtectedFactory : __ABI_test_component.IBaseCollectionProtectedFactory =  try! RoGetActivationFactory("test_component.BaseCollection")

    override public init() {
        super.init()
        MakeComposed(composing: __IMPL_test_component.BaseCollectionBridge.Composable.self, self) { baseInterface, innerInterface in 
            try! Self._IBaseCollectionProtectedFactory.CreateInstance(baseInterface, &innerInterface)
        }
    }

    // MARK: Collection
    public typealias Element = T
    public var startIndex: Int { 0 }
    public var endIndex: Int { Int(size) }
    public func index(after i: Int) -> Int {
        i+1
    }

    public func index(of: Element) -> Int? {
        var index: UInt32 = 0
        let result = indexOf(of, &index)
        guard result else { return nil }
        return Int(index)
    }
    public var count: Int { Int(size) }


    public subscript(position: Int) -> Element {
        get {
            getAt(UInt32(position))
        }
        set(newValue) {
            setAt(UInt32(position), newValue)
        }
    }

    public func removeLast() {
        removeAtEnd()
    }

    // MARK: WinRT
    public func getAt(_ index: UInt32) -> Base? {
        try! _default.GetAt(index)
    }

    public func getView() -> WindowsFoundation.AnyIVectorView<Base?>? {
        try! _default.GetView()
    }

    public func indexOf(_ value: Base?, _ index: inout UInt32) -> Bool {
        try! _default.IndexOf(value, &index)
    }

    public func setAt(_ index: UInt32, _ value: Base?) {
        try! _default.SetAt(index, value)
    }

    public func insertAt(_ index: UInt32, _ value: Base?) {
        try! _default.InsertAt(index, value)
    }

    public func removeAt(_ index: UInt32) {
        try! _default.RemoveAt(index)
    }

    public func append(_ value: Base?) {
        try! _default.Append(value)
    }

    public func removeAtEnd() {
        try! _default.RemoveAtEnd()
    }

    public func clear() {
        try! _default.Clear()
    }

    public func getMany(_ startIndex: UInt32, _ items: inout [Base?]) -> UInt32 {
        try! _default.GetMany(startIndex, &items)
    }

    public func replaceAll(_ items: [Base?]) {
        try! _default.ReplaceAll(items)
    }

    public var size : UInt32 {
        get { try! _default.get_Size() }
    }

    private lazy var _IIterable: IIterableBase! = getInterfaceForCaching()
    public func first() -> WindowsFoundation.AnyIIterator<Base?>? {
        try! _IIterable.First()
    }

    deinit {
        _default = nil
        _IIterable = nil
    }
}

// MARK: - BaseCollection Internals

@_spi(WinRTInternal)
extension __IMPL_test_component {
    public enum BaseCollectionBridge: ComposableBridge {
        public typealias SwiftProjection = BaseCollection
        public typealias CABI = __x_ABI_C__FIVector_1___x_ABI_Ctest__zcomponent__CBase
        public static func from(abi: ComPtr<__x_ABI_C__FIVector_1___x_ABI_Ctest__zcomponent__CBase>?) -> BaseCollection? {
            guard let abi = abi else { return nil }
            return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
        }
        public enum IVectorBase : ComposableImpl {
            public typealias CABI = C_IInspectable
            public typealias SwiftABI = WindowsFoundation.IInspectable
            public typealias Class = BaseCollection
            public typealias SwiftProjection = WinRTClassWeakReference<Class>
            public enum Default : AbiInterface {
                public typealias CABI = __x_ABI_C__FIVector_1___x_ABI_Ctest__zcomponent__CBase
                public typealias SwiftABI = test_component.IVectorBase
            }
        }
        @_spi(WinRTInternal)
        public typealias Composable = IVectorBase
    }

}
@_spi(WinRTInternal)
public class BaseCollectionMaker: MakeFromAbi {
    public typealias SwiftType = BaseCollection
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return BaseCollection(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
extension __ABI_test_component {
    private static let IID___x_ABI_Ctest__component_CIBaseCollectionProtectedFactory: WindowsFoundation.IID = .init(
        Data1: 0xB5581456, Data2: 0xA980, Data3: 0x5851, Data4: ( 0xAD,0xA4,0x0A,0x7B,0x27,0x0F,0x6C,0xD9 ) // B5581456-A980-5851-ADA4-0A7B270F6CD9
    ) 

    public class IBaseCollectionProtectedFactory: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_Ctest__component_CIBaseCollectionProtectedFactory }

        public func CreateInstance(_ baseInterface: UnsealedWinRTClassWrapper<__IMPL_test_component.BaseCollectionBridge.Composable>?, _ innerInterface: inout WindowsFoundation.IInspectable?) throws -> IVectorBase {
            let (value) = try ComPtrs.initialize { valueAbi in
                let _baseInterface = baseInterface?.toIInspectableABI { $0 }
                let (_innerInterface) = try ComPtrs.initialize { _innerInterfaceAbi in
                    _ = try perform(as: __x_ABI_Ctest__component_CIBaseCollectionProtectedFactory.self) { pThis in
                        try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance(pThis, _baseInterface, &_innerInterfaceAbi, &valueAbi))
                    }
                }
                innerInterface = WindowsFoundation.IInspectable(_innerInterface!)
            }
            return IVectorBase(value!)
        }

    }

}

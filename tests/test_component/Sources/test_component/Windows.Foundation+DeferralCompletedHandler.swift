// WARNING: Please don't edit this file. It was generated by Swift/WinRT v0.0.1
// swiftlint:disable all
import Foundation
import Ctest_component

public typealias DeferralCompletedHandler = () throws -> ()

// MARK: - Internals

@_spi(WinRTInternal)
extension __IMPL_Windows_Foundation {
    public class DeferralCompletedHandlerBridge : WinRTDelegateBridge {
        public typealias Handler = DeferralCompletedHandler
        public typealias CABI = __x_ABI_CWindows_CFoundation_CIDeferralCompletedHandler
        public typealias SwiftABI = __ABI_Windows_Foundation.DeferralCompletedHandler

        public static func from(abi: ComPtr<CABI>?) -> Handler? {
            guard let abi = abi else { return nil }
            let _default = SwiftABI(abi)
            let handler: Handler = { () in
                try _default.Invoke()
            }
            return handler
        }
    }
}
@_spi(WinRTInternal)
extension __ABI_Windows_Foundation {
    private static let IID___x_ABI_CWindows_CFoundation_CIDeferralCompletedHandler: test_component.IID = .init(
        Data1: 0xED32A372, Data2: 0xF3C8, Data3: 0x4FAA, Data4: ( 0x9C,0xFB,0x47,0x01,0x48,0xDA,0x38,0x88 ) // ED32A372-F3C8-4FAA-9CFB-470148DA3888
    ) 
    public class DeferralCompletedHandler: test_component.IUnknown {
        override public class var IID: test_component.IID { IID___x_ABI_CWindows_CFoundation_CIDeferralCompletedHandler }

        open func Invoke() throws {
            _ = try perform(as: __x_ABI_CWindows_CFoundation_CIDeferralCompletedHandler.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Invoke(pThis))
            }
        }

    }


    typealias DeferralCompletedHandlerWrapper = InterfaceWrapperBase<__IMPL_Windows_Foundation.DeferralCompletedHandlerBridge>
    internal static var DeferralCompletedHandlerVTable: __x_ABI_CWindows_CFoundation_CIDeferralCompletedHandlerVtbl = .init(
        QueryInterface: { DeferralCompletedHandlerWrapper.queryInterface($0, $1, $2) },
        AddRef: { DeferralCompletedHandlerWrapper.addRef($0) },
        Release: { DeferralCompletedHandlerWrapper.release($0) },
        Invoke: {
            do {
                guard let __unwrapped__instance = DeferralCompletedHandlerWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                try __unwrapped__instance()
                return S_OK
            } catch { return failWith(error: error) }
        }
    )
}
@_spi(WinRTInternal)
public extension WinRTDelegateBridge where CABI == __x_ABI_CWindows_CFoundation_CIDeferralCompletedHandler {
    static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__ABI_Windows_Foundation.DeferralCompletedHandlerVTable) { $0 }
        return .init(lpVtbl:vtblPtr)
    }
}


// WARNING: Please don't edit this file. It was generated by Swift/WinRT v0.0.1
// swiftlint:disable all
import Foundation
import Ctest_component

open class Base : WinRTClass {
    private typealias SwiftABI = __ABI_test_component.IBase
    private typealias CABI = __x_ABI_Ctest__component_CIBase
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: test_component.IInspectable) {
        super.init(fromAbi)
    }

    @_spi(WinRTInternal)
    public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout test_component.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init()
        MakeComposed(composing: composing, (self as! Composable.Class), createCallback)
    }
    override open func queryInterface(_ iid: test_component.IID) -> IUnknownRef? {
        switch iid {
            case __ABI_test_component.IBaseOverridesWrapper.IID:
                let wrapper = __ABI_test_component.IBaseOverridesWrapper(self)
                return wrapper!.queryInterface(iid)
            default: return super.queryInterface(iid)
        }
    }
    private static var _IBaseProtectedFactory : __ABI_test_component.IBaseProtectedFactory =  try! RoGetActivationFactory("test_component.Base")

    override public init() {
        super.init()
        MakeComposed(composing: __IMPL_test_component.BaseBridge.Composable.self, self) { baseInterface, innerInterface in 
            try! Self._IBaseProtectedFactory.CreateInstance(baseInterface, &innerInterface)
        }
    }

    private static let _IBaseStatics: __ABI_test_component.IBaseStatics = try! RoGetActivationFactory("test_component.Base")
    public class func createFromString(_ value: String) throws -> Base! {
        return try _IBaseStatics.CreateFromString(value)
    }

    public func doTheThing() throws {
        try _default.DoTheThing()
    }

    private lazy var _IBaseOverrides: __ABI_test_component.IBaseOverrides! = getInterfaceForCaching()
    open func onDoTheThing() throws {
        try _IBaseOverrides.OnDoTheThing()
    }

    deinit {
        _default = nil
        _IBaseOverrides = nil
    }
}


// MARK: - Internals

@_spi(WinRTInternal)
extension __IMPL_test_component {
    public enum BaseBridge: ComposableBridge {
        public typealias SwiftProjection = Base
        public typealias CABI = __x_ABI_Ctest__component_CIBase
        public static func from(abi: ComPtr<__x_ABI_Ctest__component_CIBase>?) -> Base? {
            guard let abi = abi else { return nil }
            return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
        }
        public enum IBaseOverrides : ComposableImpl {
            public typealias CABI = __x_ABI_Ctest__component_CIBaseOverrides
            public typealias SwiftABI = __ABI_test_component.IBaseOverrides
            public typealias Class = Base
            public typealias SwiftProjection = WinRTClassWeakReference<Class>
            public enum Default : AbiInterface {
                public typealias CABI = __x_ABI_Ctest__component_CIBase
                public typealias SwiftABI = __ABI_test_component.IBase
            }
        }
        @_spi(WinRTInternal)
        public typealias Composable = IBaseOverrides
    }

}
@_spi(WinRTInternal)
public class BaseMaker: MakeFromAbi {
    public typealias SwiftType = Base
    public static func from(abi: test_component.IInspectable) -> SwiftType {
        return Base(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
extension __ABI_test_component {
    internal typealias IBaseOverridesWrapper = UnsealedWinRTClassWrapper<__IMPL_test_component.BaseBridge.IBaseOverrides>
    internal static var IBaseOverridesVTable: __x_ABI_Ctest__component_CIBaseOverridesVtbl = .init(
        QueryInterface: { IBaseOverridesWrapper.queryInterface($0, $1, $2) },
        AddRef: { IBaseOverridesWrapper.addRef($0) },
        Release: { IBaseOverridesWrapper.release($0) },
        GetIids: {
            let size = MemoryLayout<test_component.IID>.size
            let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: test_component.IID.self)
            iids[0] = IUnknown.IID
            iids[1] = IInspectable.IID
            iids[2] = __ABI_test_component.IBaseOverridesWrapper.IID
            $1!.pointee = 3
            $2!.pointee = iids
            return S_OK
        },

        GetRuntimeClassName: {
            guard let instance = IBaseOverridesWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let hstring = instance.GetRuntimeClassName().detach()
            $1!.pointee = hstring
            return S_OK
        },

        GetTrustLevel: {
            _ = $0
            $1!.pointee = TrustLevel(rawValue: 0)
            return S_OK
        },

        OnDoTheThing: {
            do {
                guard let __unwrapped__instance = IBaseOverridesWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                try __unwrapped__instance.onDoTheThing()
                return S_OK
            } catch { return failWith(error: error) }
        }
    )
    private static let IID___x_ABI_Ctest__component_CIBase: test_component.IID = .init(
        Data1: 0xE9FE0BB2, Data2: 0xE1F6, Data3: 0x5E39, Data4: ( 0x92,0xBB,0x2F,0x19,0xFF,0xDE,0x3F,0xDC )
    ) // E9FE0BB2-E1F6-5E39-92BB-2F19FFDE3FDC
    public class IBase: test_component.IInspectable {
        override public class var IID: test_component.IID { IID___x_ABI_Ctest__component_CIBase }

        public func DoTheThing() throws {
            _ = try perform(as: __x_ABI_Ctest__component_CIBase.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.DoTheThing(pThis))
            }
        }

    }

    private static let IID___x_ABI_Ctest__component_CIBaseOverrides: test_component.IID = .init(
        Data1: 0xEE3CBD78, Data2: 0x04B7, Data3: 0x534F, Data4: ( 0xA7,0x15,0x53,0xDA,0xF5,0x35,0x01,0x3C )
    ) // EE3CBD78-04B7-534F-A715-53DAF535013C
    public class IBaseOverrides: test_component.IInspectable {
        override public class var IID: test_component.IID { IID___x_ABI_Ctest__component_CIBaseOverrides }

        public func OnDoTheThing() throws {
            _ = try perform(as: __x_ABI_Ctest__component_CIBaseOverrides.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.OnDoTheThing(pThis))
            }
        }

    }

    private static let IID___x_ABI_Ctest__component_CIBaseProtectedFactory: test_component.IID = .init(
        Data1: 0x05CAD233, Data2: 0x20A7, Data3: 0x581F, Data4: ( 0xBD,0x44,0x0D,0x13,0x6C,0x31,0x0E,0x0F )
    ) // 05CAD233-20A7-581F-BD44-0D136C310E0F
    public class IBaseProtectedFactory: test_component.IInspectable {
        override public class var IID: test_component.IID { IID___x_ABI_Ctest__component_CIBaseProtectedFactory }

        public func CreateInstance(_ baseInterface: UnsealedWinRTClassWrapper<__IMPL_test_component.BaseBridge.Composable>?, _ innerInterface: inout test_component.IInspectable?) throws -> IBase {
            let (value) = try ComPtrs.initialize { valueAbi in
                let _baseInterface = baseInterface?.toIInspectableABI { $0 }
                let (_innerInterface) = try ComPtrs.initialize { _innerInterfaceAbi in
                    _ = try perform(as: __x_ABI_Ctest__component_CIBaseProtectedFactory.self) { pThis in
                        try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance(pThis, _baseInterface, &_innerInterfaceAbi, &valueAbi))
                    }
                }
                innerInterface = test_component.IInspectable(_innerInterface!)
            }
            return IBase(value!)
        }

    }

    private static let IID___x_ABI_Ctest__component_CIBaseStatics: test_component.IID = .init(
        Data1: 0x9E36C560, Data2: 0xE3AE, Data3: 0x55DF, Data4: ( 0xBA,0x41,0x6B,0xB5,0x47,0xA2,0x81,0x65 )
    ) // 9E36C560-E3AE-55DF-BA41-6BB547A28165
    public class IBaseStatics: test_component.IInspectable {
        override public class var IID: test_component.IID { IID___x_ABI_Ctest__component_CIBaseStatics }

        public func CreateFromString(_ value: String) throws -> test_component.Base? {
            let (result) = try ComPtrs.initialize { resultAbi in
                let _value = try! HString(value)
                _ = try perform(as: __x_ABI_Ctest__component_CIBaseStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateFromString(pThis, _value.get(), &resultAbi))
                }
            }
            return __IMPL_test_component.BaseBridge.from(abi: result)
        }

    }

}
@_spi(WinRTInternal)
extension ComposableImpl where CABI == __x_ABI_Ctest__component_CIBaseOverrides {
    public static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__ABI_test_component.IBaseOverridesVTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}

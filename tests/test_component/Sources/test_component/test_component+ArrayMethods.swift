// WARNING: Please don't edit this file. It was generated by Swift/WinRT v0.0.1
// swiftlint:disable all
import Foundation
import Ctest_component
@_spi(WinRTInternal) @_spi(WinRTImplements) import WindowsFoundation
import CWindowsFoundation
import CWinRT

public final class ArrayMethods {
    private static let _IArrayMethodsStatics: __ABI_test_component.IArrayMethodsStatics = try! RoGetActivationFactory("test_component.ArrayMethods")
    public static func inInt32Array(_ value: [Int32]) throws -> String {
        return try _IArrayMethodsStatics.InInt32Array(value)
    }

    public static func inStringArray(_ value: [String]) throws -> String {
        return try _IArrayMethodsStatics.InStringArray(value)
    }

    public static func inObjectArray(_ value: [Any?]) throws -> String {
        return try _IArrayMethodsStatics.InObjectArray(value)
    }

    public static func inStringableArray(_ value: [WindowsFoundation.AnyIStringable?]) throws -> String {
        return try _IArrayMethodsStatics.InStringableArray(value)
    }

    public static func inStructArray(_ value: [BlittableStruct]) throws -> String {
        return try _IArrayMethodsStatics.InStructArray(value)
    }

    public static func inNonBlittableStructArray(_ value: [NonBlittableStruct]) throws -> String {
        return try _IArrayMethodsStatics.InNonBlittableStructArray(value)
    }

    public static func inEnumArray(_ value: [Signed]) throws -> String {
        return try _IArrayMethodsStatics.InEnumArray(value)
    }

    public static func outInt32Array(_ value: inout [Int32]) throws {
        try _IArrayMethodsStatics.OutInt32Array(&value)
    }

    public static func outStringArray(_ value: inout [String]) throws {
        try _IArrayMethodsStatics.OutStringArray(&value)
    }

    public static func outObjectArray(_ value: inout [Any?]) throws {
        try _IArrayMethodsStatics.OutObjectArray(&value)
    }

    public static func outStringableArray(_ value: inout [WindowsFoundation.AnyIStringable?]) throws {
        try _IArrayMethodsStatics.OutStringableArray(&value)
    }

    public static func outStructArray(_ value: inout [BlittableStruct]) throws {
        try _IArrayMethodsStatics.OutStructArray(&value)
    }

    public static func outNonBlittableStructArray(_ value: inout [NonBlittableStruct]) throws {
        try _IArrayMethodsStatics.OutNonBlittableStructArray(&value)
    }

    public static func outEnumArray(_ value: inout [Signed]) throws {
        try _IArrayMethodsStatics.OutEnumArray(&value)
    }

    public static func refInt32Array(_ value: inout [Int32]) throws {
        try _IArrayMethodsStatics.RefInt32Array(&value)
    }

    public static func refStringArray(_ value: inout [String]) throws {
        try _IArrayMethodsStatics.RefStringArray(&value)
    }

    public static func refObjectArray(_ value: inout [Any?]) throws {
        try _IArrayMethodsStatics.RefObjectArray(&value)
    }

    public static func refStringableArray(_ value: inout [WindowsFoundation.AnyIStringable?]) throws {
        try _IArrayMethodsStatics.RefStringableArray(&value)
    }

    public static func refStructArray(_ value: inout [BlittableStruct]) throws {
        try _IArrayMethodsStatics.RefStructArray(&value)
    }

    public static func refNonBlittableStructArray(_ value: inout [NonBlittableStruct]) throws {
        try _IArrayMethodsStatics.RefNonBlittableStructArray(&value)
    }

    public static func refEnumArray(_ value: inout [Signed]) throws {
        try _IArrayMethodsStatics.RefEnumArray(&value)
    }

    public static func returnInt32Array() throws -> [Int32] {
        return try _IArrayMethodsStatics.ReturnInt32Array()
    }

    public static func returnStringArray() throws -> [String] {
        return try _IArrayMethodsStatics.ReturnStringArray()
    }

    public static func returnObjectArray() throws -> [Any?] {
        return try _IArrayMethodsStatics.ReturnObjectArray()
    }

    public static func returnStringableArray() throws -> [WindowsFoundation.AnyIStringable?] {
        return try _IArrayMethodsStatics.ReturnStringableArray()
    }

    public static func returnStructArray() throws -> [BlittableStruct] {
        return try _IArrayMethodsStatics.ReturnStructArray()
    }

    public static func returnNonBlittableStructArray() throws -> [NonBlittableStruct] {
        return try _IArrayMethodsStatics.ReturnNonBlittableStructArray()
    }

    public static func returnEnumArray() throws -> [Signed] {
        return try _IArrayMethodsStatics.ReturnEnumArray()
    }

    public static func testInArrayThroughSwiftImplementation(_ scenario: AnyIArrayScenarios!, _ value: [Int32]) throws {
        try _IArrayMethodsStatics.TestInArrayThroughSwiftImplementation(scenario, value)
    }

    public static func testOutArrayThroughSwiftImplementation(_ scenario: AnyIArrayScenarios!, _ callback: ArrayMethodCallback!) throws {
        try _IArrayMethodsStatics.TestOutArrayThroughSwiftImplementation(scenario, callback)
    }

    public static func testRefArrayThroughSwiftImplementation(_ scenario: AnyIArrayScenarios!, _ value: inout [Int32], _ callback: ArrayMethodCallback!) throws {
        try _IArrayMethodsStatics.TestRefArrayThroughSwiftImplementation(scenario, &value, callback)
    }

    public static func testReturnArrayThroughSwiftImplementation(_ scenario: AnyIArrayScenarios!, _ callback: ArrayMethodCallback!) throws {
        try _IArrayMethodsStatics.TestReturnArrayThroughSwiftImplementation(scenario, callback)
    }

}

// MARK: - ArrayMethods Internals

@_spi(WinRTInternal)
extension __ABI_test_component {
    private static let IID___x_ABI_Ctest__component_CIArrayMethodsStatics: WindowsFoundation.IID = .init(
        Data1: 0x8999FD6A, Data2: 0xD1C5, Data3: 0x53CE, Data4: ( 0xB8,0x0F,0x7C,0x45,0x85,0xD0,0x75,0x6C ) // 8999FD6A-D1C5-53CE-B80F-7C4585D0756C
    ) 

    public class IArrayMethodsStatics: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_Ctest__component_CIArrayMethodsStatics }

        public func InInt32Array(_ value: [Int32]) throws -> String {
            var result: HSTRING?
            try value.toABI { _value in
                _ = try perform(as: __x_ABI_Ctest__component_CIArrayMethodsStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.InInt32Array(pThis, _value.count, _value.start, &result))
                }
            }
            return .init(from: result)
        }

        public func InStringArray(_ value: [String]) throws -> String {
            var result: HSTRING?
            try value.toABI { _value in
                _ = try perform(as: __x_ABI_Ctest__component_CIArrayMethodsStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.InStringArray(pThis, _value.count, _value.start, &result))
                }
            }
            return .init(from: result)
        }

        public func InObjectArray(_ value: [Any?]) throws -> String {
            var result: HSTRING?
            try value.toABI(abiBridge: __IMPL_.AnyBridge.self) { _value in
                _ = try perform(as: __x_ABI_Ctest__component_CIArrayMethodsStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.InObjectArray(pThis, _value.count, _value.start, &result))
                }
            }
            return .init(from: result)
        }

        public func InStringableArray(_ value: [WindowsFoundation.AnyIStringable?]) throws -> String {
            var result: HSTRING?
            try value.toABI(abiBridge: __IMPL_Windows_Foundation.IStringableBridge.self) { _value in
                _ = try perform(as: __x_ABI_Ctest__component_CIArrayMethodsStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.InStringableArray(pThis, _value.count, _value.start, &result))
                }
            }
            return .init(from: result)
        }

        public func InStructArray(_ value: [test_component.BlittableStruct]) throws -> String {
            var result: HSTRING?
            try value.toABI { _value in
                _ = try perform(as: __x_ABI_Ctest__component_CIArrayMethodsStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.InStructArray(pThis, _value.count, _value.start, &result))
                }
            }
            return .init(from: result)
        }

        public func InNonBlittableStructArray(_ value: [test_component.NonBlittableStruct]) throws -> String {
            var result: HSTRING?
            try value.toABI { _value in
                _ = try perform(as: __x_ABI_Ctest__component_CIArrayMethodsStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.InNonBlittableStructArray(pThis, _value.count, _value.start, &result))
                }
            }
            return .init(from: result)
        }

        public func InEnumArray(_ value: [test_component.Signed]) throws -> String {
            var result: HSTRING?
            try value.toABI { _value in
                _ = try perform(as: __x_ABI_Ctest__component_CIArrayMethodsStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.InEnumArray(pThis, _value.count, _value.start, &result))
                }
            }
            return .init(from: result)
        }

        public func OutInt32Array(_ value: inout [Int32]) throws {
            var _value: WinRTArrayAbi<INT32> = (0, nil)
            _ = try perform(as: __x_ABI_Ctest__component_CIArrayMethodsStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.OutInt32Array(pThis, &_value.count, &_value.start))
            }
            defer { CoTaskMemFree(_value.start) }
            value = .from(abi: _value)
        }

        public func OutStringArray(_ value: inout [String]) throws {
            var _value: WinRTArrayAbi<HSTRING?> = (0, nil)
            _ = try perform(as: __x_ABI_Ctest__component_CIArrayMethodsStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.OutStringArray(pThis, &_value.count, &_value.start))
            }
            defer { CoTaskMemFree(_value.start) }
            value = .from(abi: _value)
        }

        public func OutObjectArray(_ value: inout [Any?]) throws {
            var _value: WinRTArrayAbi<UnsafeMutablePointer<C_IInspectable>?> = (0, nil)
            _ = try perform(as: __x_ABI_Ctest__component_CIArrayMethodsStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.OutObjectArray(pThis, &_value.count, &_value.start))
            }
            defer { CoTaskMemFree(_value.start) }
            value = .from(abiBridge: __IMPL_.AnyBridge.self, abi: _value)
        }

        public func OutStringableArray(_ value: inout [WindowsFoundation.AnyIStringable?]) throws {
            var _value: WinRTArrayAbi<UnsafeMutablePointer<__x_ABI_CWindows_CFoundation_CIStringable>?> = (0, nil)
            _ = try perform(as: __x_ABI_Ctest__component_CIArrayMethodsStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.OutStringableArray(pThis, &_value.count, &_value.start))
            }
            defer { CoTaskMemFree(_value.start) }
            value = .from(abiBridge: __IMPL_Windows_Foundation.IStringableBridge.self, abi: _value)
        }

        public func OutStructArray(_ value: inout [test_component.BlittableStruct]) throws {
            var _value: WinRTArrayAbi<__x_ABI_Ctest__component_CBlittableStruct> = (0, nil)
            _ = try perform(as: __x_ABI_Ctest__component_CIArrayMethodsStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.OutStructArray(pThis, &_value.count, &_value.start))
            }
            defer { CoTaskMemFree(_value.start) }
            value = .from(abi: _value)
        }

        public func OutNonBlittableStructArray(_ value: inout [test_component.NonBlittableStruct]) throws {
            var _value: WinRTArrayAbi<__x_ABI_Ctest__component_CNonBlittableStruct> = (0, nil)
            _ = try perform(as: __x_ABI_Ctest__component_CIArrayMethodsStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.OutNonBlittableStructArray(pThis, &_value.count, &_value.start))
            }
            defer { CoTaskMemFree(_value.start) }
            value = .from(abi: _value)
        }

        public func OutEnumArray(_ value: inout [test_component.Signed]) throws {
            var _value: WinRTArrayAbi<__x_ABI_Ctest__component_CSigned> = (0, nil)
            _ = try perform(as: __x_ABI_Ctest__component_CIArrayMethodsStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.OutEnumArray(pThis, &_value.count, &_value.start))
            }
            defer { CoTaskMemFree(_value.start) }
            value = .from(abi: _value)
        }

        public func RefInt32Array(_ value: inout [Int32]) throws {
            try value.toABI { _value in
                _ = try perform(as: __x_ABI_Ctest__component_CIArrayMethodsStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.RefInt32Array(pThis, _value.count, _value.start))
                }
            }
        }

        public func RefStringArray(_ value: inout [String]) throws {
            try value.toABI { _value in
                _ = try perform(as: __x_ABI_Ctest__component_CIArrayMethodsStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.RefStringArray(pThis, _value.count, _value.start))
                }
            value = .from(abi: _value)
            }
        }

        public func RefObjectArray(_ value: inout [Any?]) throws {
            try value.toABI(abiBridge: __IMPL_.AnyBridge.self) { _value in
                _ = try perform(as: __x_ABI_Ctest__component_CIArrayMethodsStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.RefObjectArray(pThis, _value.count, _value.start))
                }
            value = .from(abiBridge: __IMPL_.AnyBridge.self, abi: _value)
            }
        }

        public func RefStringableArray(_ value: inout [WindowsFoundation.AnyIStringable?]) throws {
            try value.toABI(abiBridge: __IMPL_Windows_Foundation.IStringableBridge.self) { _value in
                _ = try perform(as: __x_ABI_Ctest__component_CIArrayMethodsStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.RefStringableArray(pThis, _value.count, _value.start))
                }
            value = .from(abiBridge: __IMPL_Windows_Foundation.IStringableBridge.self, abi: _value)
            }
        }

        public func RefStructArray(_ value: inout [test_component.BlittableStruct]) throws {
            try value.toABI { _value in
                _ = try perform(as: __x_ABI_Ctest__component_CIArrayMethodsStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.RefStructArray(pThis, _value.count, _value.start))
                }
            value = .from(abi: _value)
            }
        }

        public func RefNonBlittableStructArray(_ value: inout [test_component.NonBlittableStruct]) throws {
            try value.toABI { _value in
                _ = try perform(as: __x_ABI_Ctest__component_CIArrayMethodsStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.RefNonBlittableStructArray(pThis, _value.count, _value.start))
                }
            value = .from(abi: _value)
            }
        }

        public func RefEnumArray(_ value: inout [test_component.Signed]) throws {
            try value.toABI { _value in
                _ = try perform(as: __x_ABI_Ctest__component_CIArrayMethodsStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.RefEnumArray(pThis, _value.count, _value.start))
                }
            }
        }

        public func ReturnInt32Array() throws -> [Int32] {
            var result: WinRTArrayAbi<INT32> = (0, nil)
            _ = try perform(as: __x_ABI_Ctest__component_CIArrayMethodsStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.ReturnInt32Array(pThis, &result.count, &result.start))
            }
            defer { CoTaskMemFree(result.start) }
            return .from(abi: result)

        }

        public func ReturnStringArray() throws -> [String] {
            var result: WinRTArrayAbi<HSTRING?> = (0, nil)
            _ = try perform(as: __x_ABI_Ctest__component_CIArrayMethodsStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.ReturnStringArray(pThis, &result.count, &result.start))
            }
            defer { CoTaskMemFree(result.start) }
            return .from(abi: result)

        }

        public func ReturnObjectArray() throws -> [Any?] {
            var result: WinRTArrayAbi<UnsafeMutablePointer<C_IInspectable>?> = (0, nil)
            _ = try perform(as: __x_ABI_Ctest__component_CIArrayMethodsStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.ReturnObjectArray(pThis, &result.count, &result.start))
            }
            defer { CoTaskMemFree(result.start) }
            return .from(abiBridge: __IMPL_.AnyBridge.self, abi: result)

        }

        public func ReturnStringableArray() throws -> [WindowsFoundation.AnyIStringable?] {
            var result: WinRTArrayAbi<UnsafeMutablePointer<__x_ABI_CWindows_CFoundation_CIStringable>?> = (0, nil)
            _ = try perform(as: __x_ABI_Ctest__component_CIArrayMethodsStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.ReturnStringableArray(pThis, &result.count, &result.start))
            }
            defer { CoTaskMemFree(result.start) }
            return .from(abiBridge: __IMPL_Windows_Foundation.IStringableBridge.self, abi: result)

        }

        public func ReturnStructArray() throws -> [test_component.BlittableStruct] {
            var result: WinRTArrayAbi<__x_ABI_Ctest__component_CBlittableStruct> = (0, nil)
            _ = try perform(as: __x_ABI_Ctest__component_CIArrayMethodsStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.ReturnStructArray(pThis, &result.count, &result.start))
            }
            defer { CoTaskMemFree(result.start) }
            return .from(abi: result)

        }

        public func ReturnNonBlittableStructArray() throws -> [test_component.NonBlittableStruct] {
            var result: WinRTArrayAbi<__x_ABI_Ctest__component_CNonBlittableStruct> = (0, nil)
            _ = try perform(as: __x_ABI_Ctest__component_CIArrayMethodsStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.ReturnNonBlittableStructArray(pThis, &result.count, &result.start))
            }
            defer { CoTaskMemFree(result.start) }
            return .from(abi: result)

        }

        public func ReturnEnumArray() throws -> [test_component.Signed] {
            var result: WinRTArrayAbi<__x_ABI_Ctest__component_CSigned> = (0, nil)
            _ = try perform(as: __x_ABI_Ctest__component_CIArrayMethodsStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.ReturnEnumArray(pThis, &result.count, &result.start))
            }
            defer { CoTaskMemFree(result.start) }
            return .from(abi: result)

        }

        public func TestInArrayThroughSwiftImplementation(_ scenario: test_component.AnyIArrayScenarios?, _ value: [Int32]) throws {
            let scenarioWrapper = __ABI_test_component.IArrayScenariosWrapper(scenario)
            let _scenario = try! scenarioWrapper?.toABI { $0 }
            try value.toABI { _value in
                _ = try perform(as: __x_ABI_Ctest__component_CIArrayMethodsStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.TestInArrayThroughSwiftImplementation(pThis, _scenario, _value.count, _value.start))
                }
            }
        }

        public func TestOutArrayThroughSwiftImplementation(_ scenario: test_component.AnyIArrayScenarios?, _ callback: test_component.ArrayMethodCallback?) throws {
            let scenarioWrapper = __ABI_test_component.IArrayScenariosWrapper(scenario)
            let _scenario = try! scenarioWrapper?.toABI { $0 }
            let callbackWrapper = __ABI_test_component.ArrayMethodCallbackWrapper(callback)
            let _callback = try! callbackWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_Ctest__component_CIArrayMethodsStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.TestOutArrayThroughSwiftImplementation(pThis, _scenario, _callback))
            }
        }

        public func TestRefArrayThroughSwiftImplementation(_ scenario: test_component.AnyIArrayScenarios?, _ value: inout [Int32], _ callback: test_component.ArrayMethodCallback?) throws {
            let scenarioWrapper = __ABI_test_component.IArrayScenariosWrapper(scenario)
            let _scenario = try! scenarioWrapper?.toABI { $0 }
            try value.toABI { _value in
                let callbackWrapper = __ABI_test_component.ArrayMethodCallbackWrapper(callback)
                let _callback = try! callbackWrapper?.toABI { $0 }
                _ = try perform(as: __x_ABI_Ctest__component_CIArrayMethodsStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.TestRefArrayThroughSwiftImplementation(pThis, _scenario, _value.count, _value.start, _callback))
                }
            }
        }

        public func TestReturnArrayThroughSwiftImplementation(_ scenario: test_component.AnyIArrayScenarios?, _ callback: test_component.ArrayMethodCallback?) throws {
            let scenarioWrapper = __ABI_test_component.IArrayScenariosWrapper(scenario)
            let _scenario = try! scenarioWrapper?.toABI { $0 }
            let callbackWrapper = __ABI_test_component.ArrayMethodCallbackWrapper(callback)
            let _callback = try! callbackWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_Ctest__component_CIArrayMethodsStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.TestReturnArrayThroughSwiftImplementation(pThis, _scenario, _callback))
            }
        }

    }

}

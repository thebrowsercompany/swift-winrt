// WARNING: Please don't edit this file. It was generated by Swift/WinRT v0.0.1
import Ctest_component

private var IID___x_ABI_CWindows_CUI_CXaml_CInterop_CIBindableIterable: IID {
    IID(Data1: 0x036D2C08, Data2: 0xDF29, Data3: 0x41AF, Data4: ( 0x8A,0xA2,0xD7,0x74,0xBE,0x62,0xBA,0x6F ))// 036D2C08-DF29-41AF-8AA2-D774BE62BA6F
}

private var IID___x_ABI_CWindows_CUI_CXaml_CInterop_CIBindableIterator: IID {
    IID(Data1: 0x6A1D6C07, Data2: 0x076D, Data3: 0x49F2, Data4: ( 0x83,0x14,0xF5,0x2C,0x9C,0x9A,0x83,0x31 ))// 6A1D6C07-076D-49F2-8314-F52C9C9A8331
}

private var IID___x_ABI_CWindows_CUI_CXaml_CInterop_CIBindableVector: IID {
    IID(Data1: 0x393DE7DE, Data2: 0x6FD0, Data3: 0x4C0D, Data4: ( 0xBB,0x71,0x47,0x24,0x4A,0x11,0x3E,0x93 ))// 393DE7DE-6FD0-4C0D-BB71-47244A113E93
}

private var IID___x_ABI_CWindows_CUI_CXaml_CInterop_CIBindableVectorView: IID {
    IID(Data1: 0x346DD6E7, Data2: 0x976E, Data3: 0x4BC3, Data4: ( 0x81,0x5D,0xEC,0xE2,0x43,0xBC,0x0F,0x33 ))// 346DD6E7-976E-4BC3-815D-ECE243BC0F33
}

private var IID___x_ABI_CWindows_CUI_CXaml_CInterop_CINotifyCollectionChanged: IID {
    IID(Data1: 0x28B167D5, Data2: 0x1A31, Data3: 0x465B, Data4: ( 0x9B,0x25,0xD5,0xC3,0xAE,0x68,0x6C,0x40 ))// 28B167D5-1A31-465B-9B25-D5C3AE686C40
}

private var IID___x_ABI_CWindows_CUI_CXaml_CInterop_CINotifyCollectionChangedEventArgs: IID {
    IID(Data1: 0x4CF68D33, Data2: 0xE3F2, Data3: 0x4964, Data4: ( 0xB8,0x5E,0x94,0x5B,0x4F,0x7E,0x2F,0x21 ))// 4CF68D33-E3F2-4964-B85E-945B4F7E2F21
}

private var IID___x_ABI_CWindows_CUI_CXaml_CInterop_CINotifyCollectionChangedEventArgsFactory: IID {
    IID(Data1: 0xB30C3E3A, Data2: 0xDF8D, Data3: 0x44A5, Data4: ( 0x9A,0x38,0x7A,0xC0,0xD0,0x8C,0xE6,0x3D ))// B30C3E3A-DF8D-44A5-9A38-7AC0D08CE63D
}

private var IID___x_ABI_CWindows_CUI_CXaml_CInterop_CINotifyCollectionChangedEventHandler: IID {
    IID(Data1: 0xCA10B37C, Data2: 0xF382, Data3: 0x4591, Data4: ( 0x85,0x57,0x5E,0x24,0x96,0x52,0x79,0xB0 ))// CA10B37C-F382-4591-8557-5E24965279B0
}

public enum __ABI_Windows_UI_Xaml_Interop {
    open class IBindableIterable: test_component.IInspectable {
        override public class var IID: IID { IID___x_ABI_CWindows_CUI_CXaml_CInterop_CIBindableIterable }

        open func FirstImpl() throws -> UnsafeMutablePointer<__x_ABI_CWindows_CUI_CXaml_CInterop_CIBindableIterator>? {
            var result: UnsafeMutablePointer<__x_ABI_CWindows_CUI_CXaml_CInterop_CIBindableIterator>?
            _ = try perform(as: __x_ABI_CWindows_CUI_CXaml_CInterop_CIBindableIterable.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.First(pThis, &result))
            }
            return result
        }

    }

    internal static var IBindableIterableVTable: __x_ABI_CWindows_CUI_CXaml_CInterop_CIBindableIterableVtbl = .init(
        QueryInterface: {
            guard let pUnk = $0, let riid = $1, let ppvObject = $2 else { return E_INVALIDARG }

            guard riid.pointee == IUnknown.IID ||
                  riid.pointee == IInspectable.IID || 
                  riid.pointee == ISwiftImplemented.IID ||
                  riid.pointee == IAgileObject.IID ||
                  riid.pointee == __ABI_Windows_UI_Xaml_Interop.IBindableIterableWrapper.IID else { 
                    guard let instance = WinRTWrapperBase<Ctest_component.IInspectable, AnyObject>.tryUnwrapFrom(raw: $0) as? any WinRTClass,
                          let cDefault: UnsafeMutablePointer<Ctest_component.IInspectable> = instance._getABI() else { return E_NOINTERFACE }
                    return cDefault.pointee.lpVtbl.pointee.QueryInterface(cDefault, riid, ppvObject) 

            }
            _ = pUnk.pointee.lpVtbl.pointee.AddRef(pUnk)
            ppvObject.pointee = UnsafeMutableRawPointer(pUnk)
            return S_OK
        },

        AddRef: {
             guard let wrapper = IBindableIterableWrapper.fromRaw($0) else { return 1 }
             _ = wrapper.retain()
             return ULONG(_getRetainCount(wrapper.takeUnretainedValue()))
        },

        Release: {
            guard let wrapper = IBindableIterableWrapper.fromRaw($0) else { return 1 }
            return ULONG(_getRetainCount(wrapper.takeRetainedValue()))
        },

        GetIids: {
            let size = MemoryLayout<IID>.size
            let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: IID.self)
            iids[0] = IUnknown.IID
            iids[1] = IInspectable.IID
            iids[2] = __ABI_Windows_UI_Xaml_Interop.IBindableIterableWrapper.IID
            $1!.pointee = 3
            $2!.pointee = iids
            return S_OK
        },

        GetRuntimeClassName: {
            _ = $0
            let hstring = try! HString("Windows.UI.Xaml.Interop.IBindableIterable").detach()
            $1!.pointee = hstring
            return S_OK
        },

        GetTrustLevel: {
            _ = $0
            $1!.pointee = TrustLevel(rawValue: 0)
            return S_OK
        },

        First: {
            do {
                guard let __unwrapped__instance = IBindableIterableWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let result = try __unwrapped__instance.first()
                let resultWrapper = __ABI_Windows_UI_Xaml_Interop.IBindableIteratorWrapper(result)
                let _result = try! resultWrapper?.toABI { $0 }
                $1?.initialize(to: _result)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        }
    )

    public typealias IBindableIterableWrapper = InterfaceWrapperBase<__IMPL_Windows_UI_Xaml_Interop.IBindableIterableImpl>
    open class IBindableIterator: test_component.IInspectable {
        override public class var IID: IID { IID___x_ABI_CWindows_CUI_CXaml_CInterop_CIBindableIterator }

        open func get_CurrentImpl() throws -> UnsafeMutablePointer<Ctest_component.IInspectable>? {
            var value: UnsafeMutablePointer<Ctest_component.IInspectable>?
            _ = try perform(as: __x_ABI_CWindows_CUI_CXaml_CInterop_CIBindableIterator.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Current(pThis, &value))
            }
            return value
        }

        open func get_HasCurrentImpl() throws -> boolean {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CWindows_CUI_CXaml_CInterop_CIBindableIterator.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_HasCurrent(pThis, &value))
            }
            return value
        }

        open func MoveNextImpl() throws -> boolean {
            var result: boolean = 0
            _ = try perform(as: __x_ABI_CWindows_CUI_CXaml_CInterop_CIBindableIterator.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.MoveNext(pThis, &result))
            }
            return result
        }

    }

    internal static var IBindableIteratorVTable: __x_ABI_CWindows_CUI_CXaml_CInterop_CIBindableIteratorVtbl = .init(
        QueryInterface: {
            guard let pUnk = $0, let riid = $1, let ppvObject = $2 else { return E_INVALIDARG }

            guard riid.pointee == IUnknown.IID ||
                  riid.pointee == IInspectable.IID || 
                  riid.pointee == ISwiftImplemented.IID ||
                  riid.pointee == IAgileObject.IID ||
                  riid.pointee == __ABI_Windows_UI_Xaml_Interop.IBindableIteratorWrapper.IID else { 
                    guard let instance = WinRTWrapperBase<Ctest_component.IInspectable, AnyObject>.tryUnwrapFrom(raw: $0) as? any WinRTClass,
                          let cDefault: UnsafeMutablePointer<Ctest_component.IInspectable> = instance._getABI() else { return E_NOINTERFACE }
                    return cDefault.pointee.lpVtbl.pointee.QueryInterface(cDefault, riid, ppvObject) 

            }
            _ = pUnk.pointee.lpVtbl.pointee.AddRef(pUnk)
            ppvObject.pointee = UnsafeMutableRawPointer(pUnk)
            return S_OK
        },

        AddRef: {
             guard let wrapper = IBindableIteratorWrapper.fromRaw($0) else { return 1 }
             _ = wrapper.retain()
             return ULONG(_getRetainCount(wrapper.takeUnretainedValue()))
        },

        Release: {
            guard let wrapper = IBindableIteratorWrapper.fromRaw($0) else { return 1 }
            return ULONG(_getRetainCount(wrapper.takeRetainedValue()))
        },

        GetIids: {
            let size = MemoryLayout<IID>.size
            let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: IID.self)
            iids[0] = IUnknown.IID
            iids[1] = IInspectable.IID
            iids[2] = __ABI_Windows_UI_Xaml_Interop.IBindableIteratorWrapper.IID
            $1!.pointee = 3
            $2!.pointee = iids
            return S_OK
        },

        GetRuntimeClassName: {
            _ = $0
            let hstring = try! HString("Windows.UI.Xaml.Interop.IBindableIterator").detach()
            $1!.pointee = hstring
            return S_OK
        },

        GetTrustLevel: {
            _ = $0
            $1!.pointee = TrustLevel(rawValue: 0)
            return S_OK
        },

        get_Current: {
            guard let __unwrapped__instance = IBindableIteratorWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value = __unwrapped__instance.current
            let valueWrapper = __ABI_.AnyWrapper(value)
            let _value = try! valueWrapper?.toABI { $0 }
            $1?.initialize(to: _value)
            return S_OK
        },

        get_HasCurrent: {
            guard let __unwrapped__instance = IBindableIteratorWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value = __unwrapped__instance.hasCurrent
            $1?.initialize(to: .init(from: value))
            return S_OK
        },

        MoveNext: {
            do {
                guard let __unwrapped__instance = IBindableIteratorWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let result = try __unwrapped__instance.moveNext()
                $1?.initialize(to: .init(from: result))
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        }
    )

    public typealias IBindableIteratorWrapper = InterfaceWrapperBase<__IMPL_Windows_UI_Xaml_Interop.IBindableIteratorImpl>
    open class IBindableVector: test_component.IInspectable {
        override public class var IID: IID { IID___x_ABI_CWindows_CUI_CXaml_CInterop_CIBindableVector }

        open func GetAtImpl(_ index: UINT32) throws -> UnsafeMutablePointer<Ctest_component.IInspectable>? {
            var result: UnsafeMutablePointer<Ctest_component.IInspectable>?
            _ = try perform(as: __x_ABI_CWindows_CUI_CXaml_CInterop_CIBindableVector.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetAt(pThis, index, &result))
            }
            return result
        }

        open func get_SizeImpl() throws -> UINT32 {
            var value: UINT32 = 0
            _ = try perform(as: __x_ABI_CWindows_CUI_CXaml_CInterop_CIBindableVector.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Size(pThis, &value))
            }
            return value
        }

        open func GetViewImpl() throws -> UnsafeMutablePointer<__x_ABI_CWindows_CUI_CXaml_CInterop_CIBindableVectorView>? {
            var result: UnsafeMutablePointer<__x_ABI_CWindows_CUI_CXaml_CInterop_CIBindableVectorView>?
            _ = try perform(as: __x_ABI_CWindows_CUI_CXaml_CInterop_CIBindableVector.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetView(pThis, &result))
            }
            return result
        }

        open func IndexOfImpl(_ value: UnsafeMutablePointer<Ctest_component.IInspectable>?, _ index: inout UINT32) throws -> boolean {
            var returnValue: boolean = 0
            _ = try perform(as: __x_ABI_CWindows_CUI_CXaml_CInterop_CIBindableVector.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.IndexOf(pThis, value, &index, &returnValue))
            }
            return returnValue
        }

        open func SetAtImpl(_ index: UINT32, _ value: UnsafeMutablePointer<Ctest_component.IInspectable>?) throws {
            _ = try perform(as: __x_ABI_CWindows_CUI_CXaml_CInterop_CIBindableVector.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.SetAt(pThis, index, value))
            }
        }

        open func InsertAtImpl(_ index: UINT32, _ value: UnsafeMutablePointer<Ctest_component.IInspectable>?) throws {
            _ = try perform(as: __x_ABI_CWindows_CUI_CXaml_CInterop_CIBindableVector.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.InsertAt(pThis, index, value))
            }
        }

        open func RemoveAtImpl(_ index: UINT32) throws {
            _ = try perform(as: __x_ABI_CWindows_CUI_CXaml_CInterop_CIBindableVector.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.RemoveAt(pThis, index))
            }
        }

        open func AppendImpl(_ value: UnsafeMutablePointer<Ctest_component.IInspectable>?) throws {
            _ = try perform(as: __x_ABI_CWindows_CUI_CXaml_CInterop_CIBindableVector.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Append(pThis, value))
            }
        }

        open func RemoveAtEndImpl() throws {
            _ = try perform(as: __x_ABI_CWindows_CUI_CXaml_CInterop_CIBindableVector.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.RemoveAtEnd(pThis))
            }
        }

        open func ClearImpl() throws {
            _ = try perform(as: __x_ABI_CWindows_CUI_CXaml_CInterop_CIBindableVector.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Clear(pThis))
            }
        }

    }

    internal static var IBindableVectorVTable: __x_ABI_CWindows_CUI_CXaml_CInterop_CIBindableVectorVtbl = .init(
        QueryInterface: {
            guard let pUnk = $0, let riid = $1, let ppvObject = $2 else { return E_INVALIDARG }
            if riid.pointee == __ABI_Windows_UI_Xaml_Interop.IBindableIterableWrapper.IID {
                guard let instance = IBindableVectorWrapper.tryUnwrapFrom(raw: pUnk) else { return E_NOINTERFACE }
                guard let inner = __ABI_Windows_UI_Xaml_Interop.IBindableIterableWrapper(instance) else { return E_INVALIDARG }
                let pThis = try! inner.toABI { $0 }
                return pThis.pointee.lpVtbl.pointee.QueryInterface(pThis, riid, ppvObject)
            }

            guard riid.pointee == IUnknown.IID ||
                  riid.pointee == IInspectable.IID || 
                  riid.pointee == ISwiftImplemented.IID ||
                  riid.pointee == IAgileObject.IID ||
                  riid.pointee == __ABI_Windows_UI_Xaml_Interop.IBindableVectorWrapper.IID else { 
                    guard let instance = WinRTWrapperBase<Ctest_component.IInspectable, AnyObject>.tryUnwrapFrom(raw: $0) as? any WinRTClass,
                          let cDefault: UnsafeMutablePointer<Ctest_component.IInspectable> = instance._getABI() else { return E_NOINTERFACE }
                    return cDefault.pointee.lpVtbl.pointee.QueryInterface(cDefault, riid, ppvObject) 

            }
            _ = pUnk.pointee.lpVtbl.pointee.AddRef(pUnk)
            ppvObject.pointee = UnsafeMutableRawPointer(pUnk)
            return S_OK
        },

        AddRef: {
             guard let wrapper = IBindableVectorWrapper.fromRaw($0) else { return 1 }
             _ = wrapper.retain()
             return ULONG(_getRetainCount(wrapper.takeUnretainedValue()))
        },

        Release: {
            guard let wrapper = IBindableVectorWrapper.fromRaw($0) else { return 1 }
            return ULONG(_getRetainCount(wrapper.takeRetainedValue()))
        },

        GetIids: {
            let size = MemoryLayout<IID>.size
            let iids = CoTaskMemAlloc(UInt64(size) * 4).assumingMemoryBound(to: IID.self)
            iids[0] = IUnknown.IID
            iids[1] = IInspectable.IID
            iids[2] = __ABI_Windows_UI_Xaml_Interop.IBindableVectorWrapper.IID
            iids[3] = __ABI_Windows_UI_Xaml_Interop.IBindableIterableWrapper.IID
            $1!.pointee = 4
            $2!.pointee = iids
            return S_OK
        },

        GetRuntimeClassName: {
            _ = $0
            let hstring = try! HString("Windows.UI.Xaml.Interop.IBindableVector").detach()
            $1!.pointee = hstring
            return S_OK
        },

        GetTrustLevel: {
            _ = $0
            $1!.pointee = TrustLevel(rawValue: 0)
            return S_OK
        },

        GetAt: {
            do {
                guard let __unwrapped__instance = IBindableVectorWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let index: UInt32 = $1
                let result = try __unwrapped__instance.getAt(index)
                let resultWrapper = __ABI_.AnyWrapper(result)
                let _result = try! resultWrapper?.toABI { $0 }
                $2?.initialize(to: _result)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        get_Size: {
            guard let __unwrapped__instance = IBindableVectorWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value = __unwrapped__instance.size
            $1?.initialize(to: value)
            return S_OK
        },

        GetView: {
            do {
                guard let __unwrapped__instance = IBindableVectorWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let result = try __unwrapped__instance.getView()
                let resultWrapper = __ABI_Windows_UI_Xaml_Interop.IBindableVectorViewWrapper(result)
                let _result = try! resultWrapper?.toABI { $0 }
                $1?.initialize(to: _result)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        IndexOf: {
            do {
                guard let __unwrapped__instance = IBindableVectorWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let value: Any? = __ABI_.AnyWrapper.unwrapFrom(abi: $1)
                var index: UInt32 = 0
                let returnValue = try __unwrapped__instance.indexOf(value, &index)
                $2?.initialize(to: index)
                $3?.initialize(to: .init(from: returnValue))
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        SetAt: {
            do {
                guard let __unwrapped__instance = IBindableVectorWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let index: UInt32 = $1
                let value: Any? = __ABI_.AnyWrapper.unwrapFrom(abi: $2)
                try __unwrapped__instance.setAt(index, value)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        InsertAt: {
            do {
                guard let __unwrapped__instance = IBindableVectorWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let index: UInt32 = $1
                let value: Any? = __ABI_.AnyWrapper.unwrapFrom(abi: $2)
                try __unwrapped__instance.insertAt(index, value)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        RemoveAt: {
            do {
                guard let __unwrapped__instance = IBindableVectorWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let index: UInt32 = $1
                try __unwrapped__instance.removeAt(index)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        Append: {
            do {
                guard let __unwrapped__instance = IBindableVectorWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let value: Any? = __ABI_.AnyWrapper.unwrapFrom(abi: $1)
                try __unwrapped__instance.append(value)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        RemoveAtEnd: {
            do {
                guard let __unwrapped__instance = IBindableVectorWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                try __unwrapped__instance.removeAtEnd()
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        Clear: {
            do {
                guard let __unwrapped__instance = IBindableVectorWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                try __unwrapped__instance.clear()
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        }
    )

    public typealias IBindableVectorWrapper = InterfaceWrapperBase<__IMPL_Windows_UI_Xaml_Interop.IBindableVectorImpl>
    open class IBindableVectorView: test_component.IInspectable {
        override public class var IID: IID { IID___x_ABI_CWindows_CUI_CXaml_CInterop_CIBindableVectorView }

        open func GetAtImpl(_ index: UINT32) throws -> UnsafeMutablePointer<Ctest_component.IInspectable>? {
            var result: UnsafeMutablePointer<Ctest_component.IInspectable>?
            _ = try perform(as: __x_ABI_CWindows_CUI_CXaml_CInterop_CIBindableVectorView.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetAt(pThis, index, &result))
            }
            return result
        }

        open func get_SizeImpl() throws -> UINT32 {
            var value: UINT32 = 0
            _ = try perform(as: __x_ABI_CWindows_CUI_CXaml_CInterop_CIBindableVectorView.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Size(pThis, &value))
            }
            return value
        }

        open func IndexOfImpl(_ value: UnsafeMutablePointer<Ctest_component.IInspectable>?, _ index: inout UINT32) throws -> boolean {
            var returnValue: boolean = 0
            _ = try perform(as: __x_ABI_CWindows_CUI_CXaml_CInterop_CIBindableVectorView.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.IndexOf(pThis, value, &index, &returnValue))
            }
            return returnValue
        }

    }

    internal static var IBindableVectorViewVTable: __x_ABI_CWindows_CUI_CXaml_CInterop_CIBindableVectorViewVtbl = .init(
        QueryInterface: {
            guard let pUnk = $0, let riid = $1, let ppvObject = $2 else { return E_INVALIDARG }
            if riid.pointee == __ABI_Windows_UI_Xaml_Interop.IBindableIterableWrapper.IID {
                guard let instance = IBindableVectorViewWrapper.tryUnwrapFrom(raw: pUnk) else { return E_NOINTERFACE }
                guard let inner = __ABI_Windows_UI_Xaml_Interop.IBindableIterableWrapper(instance) else { return E_INVALIDARG }
                let pThis = try! inner.toABI { $0 }
                return pThis.pointee.lpVtbl.pointee.QueryInterface(pThis, riid, ppvObject)
            }

            guard riid.pointee == IUnknown.IID ||
                  riid.pointee == IInspectable.IID || 
                  riid.pointee == ISwiftImplemented.IID ||
                  riid.pointee == IAgileObject.IID ||
                  riid.pointee == __ABI_Windows_UI_Xaml_Interop.IBindableVectorViewWrapper.IID else { 
                    guard let instance = WinRTWrapperBase<Ctest_component.IInspectable, AnyObject>.tryUnwrapFrom(raw: $0) as? any WinRTClass,
                          let cDefault: UnsafeMutablePointer<Ctest_component.IInspectable> = instance._getABI() else { return E_NOINTERFACE }
                    return cDefault.pointee.lpVtbl.pointee.QueryInterface(cDefault, riid, ppvObject) 

            }
            _ = pUnk.pointee.lpVtbl.pointee.AddRef(pUnk)
            ppvObject.pointee = UnsafeMutableRawPointer(pUnk)
            return S_OK
        },

        AddRef: {
             guard let wrapper = IBindableVectorViewWrapper.fromRaw($0) else { return 1 }
             _ = wrapper.retain()
             return ULONG(_getRetainCount(wrapper.takeUnretainedValue()))
        },

        Release: {
            guard let wrapper = IBindableVectorViewWrapper.fromRaw($0) else { return 1 }
            return ULONG(_getRetainCount(wrapper.takeRetainedValue()))
        },

        GetIids: {
            let size = MemoryLayout<IID>.size
            let iids = CoTaskMemAlloc(UInt64(size) * 4).assumingMemoryBound(to: IID.self)
            iids[0] = IUnknown.IID
            iids[1] = IInspectable.IID
            iids[2] = __ABI_Windows_UI_Xaml_Interop.IBindableVectorViewWrapper.IID
            iids[3] = __ABI_Windows_UI_Xaml_Interop.IBindableIterableWrapper.IID
            $1!.pointee = 4
            $2!.pointee = iids
            return S_OK
        },

        GetRuntimeClassName: {
            _ = $0
            let hstring = try! HString("Windows.UI.Xaml.Interop.IBindableVectorView").detach()
            $1!.pointee = hstring
            return S_OK
        },

        GetTrustLevel: {
            _ = $0
            $1!.pointee = TrustLevel(rawValue: 0)
            return S_OK
        },

        GetAt: {
            do {
                guard let __unwrapped__instance = IBindableVectorViewWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let index: UInt32 = $1
                let result = try __unwrapped__instance.getAt(index)
                let resultWrapper = __ABI_.AnyWrapper(result)
                let _result = try! resultWrapper?.toABI { $0 }
                $2?.initialize(to: _result)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        get_Size: {
            guard let __unwrapped__instance = IBindableVectorViewWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value = __unwrapped__instance.size
            $1?.initialize(to: value)
            return S_OK
        },

        IndexOf: {
            do {
                guard let __unwrapped__instance = IBindableVectorViewWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let value: Any? = __ABI_.AnyWrapper.unwrapFrom(abi: $1)
                var index: UInt32 = 0
                let returnValue = try __unwrapped__instance.indexOf(value, &index)
                $2?.initialize(to: index)
                $3?.initialize(to: .init(from: returnValue))
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        }
    )

    public typealias IBindableVectorViewWrapper = InterfaceWrapperBase<__IMPL_Windows_UI_Xaml_Interop.IBindableVectorViewImpl>
    open class INotifyCollectionChanged: test_component.IInspectable {
        override public class var IID: IID { IID___x_ABI_CWindows_CUI_CXaml_CInterop_CINotifyCollectionChanged }

        open func add_CollectionChangedImpl(_ handler: UnsafeMutablePointer<__x_ABI_CWindows_CUI_CXaml_CInterop_CINotifyCollectionChangedEventHandler>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            _ = try perform(as: __x_ABI_CWindows_CUI_CXaml_CInterop_CINotifyCollectionChanged.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_CollectionChanged(pThis, handler, &token))
            }
            return token
        }

        open func remove_CollectionChangedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CWindows_CUI_CXaml_CInterop_CINotifyCollectionChanged.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_CollectionChanged(pThis, token))
            }
        }

    }

    internal static var INotifyCollectionChangedVTable: __x_ABI_CWindows_CUI_CXaml_CInterop_CINotifyCollectionChangedVtbl = .init(
        QueryInterface: {
            guard let pUnk = $0, let riid = $1, let ppvObject = $2 else { return E_INVALIDARG }

            guard riid.pointee == IUnknown.IID ||
                  riid.pointee == IInspectable.IID || 
                  riid.pointee == ISwiftImplemented.IID ||
                  riid.pointee == IAgileObject.IID ||
                  riid.pointee == __ABI_Windows_UI_Xaml_Interop.INotifyCollectionChangedWrapper.IID else { 
                    guard let instance = WinRTWrapperBase<Ctest_component.IInspectable, AnyObject>.tryUnwrapFrom(raw: $0) as? any WinRTClass,
                          let cDefault: UnsafeMutablePointer<Ctest_component.IInspectable> = instance._getABI() else { return E_NOINTERFACE }
                    return cDefault.pointee.lpVtbl.pointee.QueryInterface(cDefault, riid, ppvObject) 

            }
            _ = pUnk.pointee.lpVtbl.pointee.AddRef(pUnk)
            ppvObject.pointee = UnsafeMutableRawPointer(pUnk)
            return S_OK
        },

        AddRef: {
             guard let wrapper = INotifyCollectionChangedWrapper.fromRaw($0) else { return 1 }
             _ = wrapper.retain()
             return ULONG(_getRetainCount(wrapper.takeUnretainedValue()))
        },

        Release: {
            guard let wrapper = INotifyCollectionChangedWrapper.fromRaw($0) else { return 1 }
            return ULONG(_getRetainCount(wrapper.takeRetainedValue()))
        },

        GetIids: {
            let size = MemoryLayout<IID>.size
            let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: IID.self)
            iids[0] = IUnknown.IID
            iids[1] = IInspectable.IID
            iids[2] = __ABI_Windows_UI_Xaml_Interop.INotifyCollectionChangedWrapper.IID
            $1!.pointee = 3
            $2!.pointee = iids
            return S_OK
        },

        GetRuntimeClassName: {
            _ = $0
            let hstring = try! HString("Windows.UI.Xaml.Interop.INotifyCollectionChanged").detach()
            $1!.pointee = hstring
            return S_OK
        },

        GetTrustLevel: {
            _ = $0
            $1!.pointee = TrustLevel(rawValue: 0)
            return S_OK
        },

        add_CollectionChanged: {
            guard let __unwrapped__instance = INotifyCollectionChangedWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            guard let handler = __ABI_Windows_UI_Xaml_Interop.NotifyCollectionChangedEventHandlerWrapper.unwrapFrom(abi: $1) else { return E_INVALIDARG }
            let token = __unwrapped__instance.collectionChanged.addHandler(handler)
            $2?.initialize(to: .from(swift: token))
            return S_OK
        },

        remove_CollectionChanged: {
            guard let __unwrapped__instance = INotifyCollectionChangedWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let token: EventRegistrationToken = $1
            __unwrapped__instance.collectionChanged.removeHandler(token)
            return S_OK
        }
    )

    public typealias INotifyCollectionChangedWrapper = InterfaceWrapperBase<__IMPL_Windows_UI_Xaml_Interop.INotifyCollectionChangedImpl>
    open class INotifyCollectionChangedEventArgs: test_component.IInspectable {
        override public class var IID: IID { IID___x_ABI_CWindows_CUI_CXaml_CInterop_CINotifyCollectionChangedEventArgs }

        internal func get_ActionImpl() throws -> __x_ABI_CWindows_CUI_CXaml_CInterop_CNotifyCollectionChangedAction {
            var value: __x_ABI_CWindows_CUI_CXaml_CInterop_CNotifyCollectionChangedAction = .init(0)
            _ = try perform(as: __x_ABI_CWindows_CUI_CXaml_CInterop_CINotifyCollectionChangedEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Action(pThis, &value))
            }
            return value
        }

        internal func get_NewItemsImpl() throws -> UnsafeMutablePointer<__x_ABI_CWindows_CUI_CXaml_CInterop_CIBindableVector>? {
            var value: UnsafeMutablePointer<__x_ABI_CWindows_CUI_CXaml_CInterop_CIBindableVector>?
            _ = try perform(as: __x_ABI_CWindows_CUI_CXaml_CInterop_CINotifyCollectionChangedEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_NewItems(pThis, &value))
            }
            return value
        }

        internal func get_OldItemsImpl() throws -> UnsafeMutablePointer<__x_ABI_CWindows_CUI_CXaml_CInterop_CIBindableVector>? {
            var value: UnsafeMutablePointer<__x_ABI_CWindows_CUI_CXaml_CInterop_CIBindableVector>?
            _ = try perform(as: __x_ABI_CWindows_CUI_CXaml_CInterop_CINotifyCollectionChangedEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_OldItems(pThis, &value))
            }
            return value
        }

        internal func get_NewStartingIndexImpl() throws -> INT32 {
            var value: INT32 = 0
            _ = try perform(as: __x_ABI_CWindows_CUI_CXaml_CInterop_CINotifyCollectionChangedEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_NewStartingIndex(pThis, &value))
            }
            return value
        }

        internal func get_OldStartingIndexImpl() throws -> INT32 {
            var value: INT32 = 0
            _ = try perform(as: __x_ABI_CWindows_CUI_CXaml_CInterop_CINotifyCollectionChangedEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_OldStartingIndex(pThis, &value))
            }
            return value
        }

    }

    internal class INotifyCollectionChangedEventArgsFactory: test_component.IInspectable, ComposableActivationFactory {
        internal typealias Composable = test_component.NotifyCollectionChangedEventArgs.Composable

        override public class var IID: IID { IID___x_ABI_CWindows_CUI_CXaml_CInterop_CINotifyCollectionChangedEventArgsFactory }

        internal func CreateInstanceImpl(_ action: __x_ABI_CWindows_CUI_CXaml_CInterop_CNotifyCollectionChangedAction, _ newItems: UnsafeMutablePointer<__x_ABI_CWindows_CUI_CXaml_CInterop_CIBindableVector>?, _ oldItems: UnsafeMutablePointer<__x_ABI_CWindows_CUI_CXaml_CInterop_CIBindableVector>?, _ newIndex: INT32, _ oldIndex: INT32, _ baseInterface: UnsafeMutablePointer<Ctest_component.IInspectable>?, _ innerInterface: inout UnsafeMutablePointer<Ctest_component.IInspectable>?) throws -> UnsafeMutablePointer<__x_ABI_CWindows_CUI_CXaml_CInterop_CINotifyCollectionChangedEventArgs>? {
            var value: UnsafeMutablePointer<__x_ABI_CWindows_CUI_CXaml_CInterop_CINotifyCollectionChangedEventArgs>?
            _ = try perform(as: __x_ABI_CWindows_CUI_CXaml_CInterop_CINotifyCollectionChangedEventArgsFactory.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstanceWithAllParameters(pThis, action, newItems, oldItems, newIndex, oldIndex, baseInterface, &innerInterface, &value))
            }
            return value
        }

    }

}
// MARK - NotifyCollectionChangedEventHandler
extension __ABI_Windows_UI_Xaml_Interop {
    open class NotifyCollectionChangedEventHandler: test_component.IUnknown {
        override public class var IID: IID { IID___x_ABI_CWindows_CUI_CXaml_CInterop_CINotifyCollectionChangedEventHandler }

        open func InvokeImpl(_ sender: UnsafeMutablePointer<Ctest_component.IInspectable>?, _ e: UnsafeMutablePointer<__x_ABI_CWindows_CUI_CXaml_CInterop_CINotifyCollectionChangedEventArgs>?) throws {
            _ = try perform(as: __x_ABI_CWindows_CUI_CXaml_CInterop_CINotifyCollectionChangedEventHandler.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Invoke(pThis, sender, e))
            }
        }

    }


    typealias NotifyCollectionChangedEventHandlerWrapper = InterfaceWrapperBase<__IMPL_Windows_UI_Xaml_Interop.NotifyCollectionChangedEventHandlerImpl>
    internal static var NotifyCollectionChangedEventHandlerVTable: __x_ABI_CWindows_CUI_CXaml_CInterop_CINotifyCollectionChangedEventHandlerVtbl = .init(
        QueryInterface: {
            guard let pUnk = $0, let riid = $1, let ppvObject = $2 else { return E_INVALIDARG }

            guard riid.pointee == IUnknown.IID ||
                  riid.pointee == IInspectable.IID || 
                  riid.pointee == ISwiftImplemented.IID ||
                  riid.pointee == IAgileObject.IID ||
                  riid.pointee == __ABI_Windows_UI_Xaml_Interop.NotifyCollectionChangedEventHandlerWrapper.IID else { 
                    return E_NOINTERFACE

            }
            _ = pUnk.pointee.lpVtbl.pointee.AddRef(pUnk)
            ppvObject.pointee = UnsafeMutableRawPointer(pUnk)
            return S_OK
        },

        AddRef: {
             guard let wrapper = NotifyCollectionChangedEventHandlerWrapper.fromRaw($0) else { return 1 }
             _ = wrapper.retain()
             return ULONG(_getRetainCount(wrapper.takeUnretainedValue()))
        },

        Release: {
            guard let wrapper = NotifyCollectionChangedEventHandlerWrapper.fromRaw($0) else { return 1 }
            return ULONG(_getRetainCount(wrapper.takeRetainedValue()))
        },

        Invoke: {
            guard let __unwrapped__instance = NotifyCollectionChangedEventHandlerWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let sender: Any? = __ABI_.AnyWrapper.unwrapFrom(abi: $1)
            let e: test_component.NotifyCollectionChangedEventArgs? = .from(abi: $2)
            __unwrapped__instance(sender, e)
            return S_OK
        }
    )
}
public extension WinRTDelegateBridge where CABI == __x_ABI_CWindows_CUI_CXaml_CInterop_CINotifyCollectionChangedEventHandler {
    static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__ABI_Windows_UI_Xaml_Interop.NotifyCollectionChangedEventHandlerVTable) { $0 }
        return .init(lpVtbl:vtblPtr)
    }
}


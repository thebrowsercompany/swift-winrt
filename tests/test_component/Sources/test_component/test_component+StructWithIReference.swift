// WARNING: Please don't edit this file. It was generated by Swift/WinRT v0.0.1
// swiftlint:disable all
import Foundation
@_spi(WinRTInternal) @_spi(WinRTImplements) import WindowsFoundation
import CWinRT

public struct StructWithIReference: Hashable, Codable, Sendable {
    public var value1: Int32?
    public var value2: Int32?
    public init() {}
    public init(value1: Int32?, value2: Int32?) {
        self.value1 = value1
        self.value2 = value2
    }
}

// MARK: - StructWithIReference Internals

@_spi(WinRTInternal)
extension StructWithIReference: WinRTBridgeable {
    public typealias ABI = __x_ABI_Ctest__component_CStructWithIReference
    public static func from(abi: ABI) -> Self {
        .init(value1: test_component.__x_ABI_C__FIReference_1_intWrapper.unwrapFrom(abi: ComPtr(abi.Value1)), value2: test_component.__x_ABI_C__FIReference_1_intWrapper.unwrapFrom(abi: ComPtr(abi.Value2)))
    }
    public func toABI() -> ABI {
        __ABI_test_component._ABI_StructWithIReference(from: self).detach()
    }
}

@_spi(WinRTInternal)
extension __ABI_test_component {
    public class _ABI_StructWithIReference {
        public var val: __x_ABI_Ctest__component_CStructWithIReference = .init()
        public init() { }
        public init(from swift: test_component.StructWithIReference) {
            let Value1Wrapper = test_component.__x_ABI_C__FIReference_1_intWrapper(swift.value1)
            Value1Wrapper?.copyTo(&val.Value1)
            let Value2Wrapper = test_component.__x_ABI_C__FIReference_1_intWrapper(swift.value2)
            Value2Wrapper?.copyTo(&val.Value2)
        }

        public func detach() -> __x_ABI_Ctest__component_CStructWithIReference {
            let result = val
            val.Value1 = nil
            val.Value2 = nil
            return result
        }

        deinit {
            _ = val.Value1?.pointee.lpVtbl.pointee.Release(val.Value1)
            _ = val.Value2?.pointee.lpVtbl.pointee.Release(val.Value2)
        }
    }
}

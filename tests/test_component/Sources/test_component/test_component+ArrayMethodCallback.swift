// WARNING: Please don't edit this file. It was generated by Swift/WinRT v0.0.1
// swiftlint:disable all
import Foundation
@_spi(WinRTInternal) @_spi(WinRTImplements) import WindowsFoundation
import CWinRT

public typealias ArrayMethodCallback = ([Int32]) throws -> ()

// MARK: - ArrayMethodCallback Internals

@_spi(WinRTInternal)
extension __IMPL_test_component {
    public class ArrayMethodCallbackBridge : WinRTDelegateBridge {
        public typealias Handler = ArrayMethodCallback
        public typealias CABI = __x_ABI_Ctest__component_CIArrayMethodCallback
        public typealias SwiftABI = __ABI_test_component.ArrayMethodCallback

        public static func from(abi: ComPtr<CABI>?) -> Handler? {
            guard let abi = abi else { return nil }
            let _default = SwiftABI(abi)
            let handler: Handler = { (value) in
                try _default.Invoke(value)
            }
            return handler
        }
    }
}
@_spi(WinRTInternal)
extension __ABI_test_component {
    private static let IID___x_ABI_Ctest__component_CIArrayMethodCallback: WindowsFoundation.IID = .init(
        Data1: 0x224AFD3B, Data2: 0x6459, Data3: 0x5621, Data4: ( 0xBF,0x69,0xF5,0x02,0x8C,0xF2,0xB3,0x17 ) // 224AFD3B-6459-5621-BF69-F5028CF2B317
    ) 

    public class ArrayMethodCallback: WindowsFoundation.IUnknown {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_Ctest__component_CIArrayMethodCallback }

        open func Invoke(_ value: [Int32]) throws {
            try value.toABI { _value in
                _ = try perform(as: __x_ABI_Ctest__component_CIArrayMethodCallback.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.Invoke(pThis, _value.count, _value.start))
                }
            }
        }

    }


    typealias ArrayMethodCallbackWrapper = InterfaceWrapperBase<__IMPL_test_component.ArrayMethodCallbackBridge>
    internal static var ArrayMethodCallbackVTable: __x_ABI_Ctest__component_CIArrayMethodCallbackVtbl = .init(
        QueryInterface: { ArrayMethodCallbackWrapper.queryInterface($0, $1, $2) },
        AddRef: { ArrayMethodCallbackWrapper.addRef($0) },
        Release: { ArrayMethodCallbackWrapper.release($0) },
        Invoke: {
            do {
                guard let __unwrapped__instance = ArrayMethodCallbackWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let value: [Int32] = .from(abi: (count: $1, start: $2))
                try __unwrapped__instance(value)
                return S_OK
            } catch { return failWith(error: error) }
        }
    )
}
public extension WinRTDelegateBridge where CABI == __x_ABI_Ctest__component_CIArrayMethodCallback {
    static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__ABI_test_component.ArrayMethodCallbackVTable) { $0 }
        return .init(lpVtbl:vtblPtr)
    }
}


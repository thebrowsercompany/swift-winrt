// WARNING: Please don't edit this file. It was generated by Swift/WinRT v0.0.1
// swiftlint:disable all
import Foundation
import Ctest_component

public protocol IBasic : WinRTInterface {
    func method()
}

extension IBasic {
    public func queryInterface(_ iid: test_component.IID) -> IUnknownRef? {
        switch iid {
            case __ABI_test_component.IBasicWrapper.IID:
                let wrapper = __ABI_test_component.IBasicWrapper(self)
                return wrapper!.queryInterface(iid)
            default: return nil
        }
    }
}
public typealias AnyIBasic = any IBasic


// MARK: - Internals

@_spi(WinRTInternal)
extension __IMPL_test_component {
    public enum IBasicBridge : AbiInterfaceBridge {
        public typealias CABI = __x_ABI_Ctest__component_CIBasic
        public typealias SwiftABI = __ABI_test_component.IBasic
        public typealias SwiftProjection = AnyIBasic
        public static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
            guard let abi = abi else { return nil }
            return IBasicImpl(abi)
        }

        public static func makeAbi() -> CABI {
            let vtblPtr = withUnsafeMutablePointer(to: &__ABI_test_component.IBasicVTable) { $0 }
            return .init(lpVtbl: vtblPtr)
        }
    }

    fileprivate class IBasicImpl: IBasic, WinRTAbiImpl {
        fileprivate typealias Bridge = IBasicBridge
        fileprivate let _default: Bridge.SwiftABI
        fileprivate var thisPtr: test_component.IInspectable { _default }
        fileprivate init(_ fromAbi: ComPtr<Bridge.CABI>) {
            _default = Bridge.SwiftABI(fromAbi)
        }

        fileprivate func method() {
            try! _default.Method()
        }

    }

}
@_spi(WinRTInternal)
extension __ABI_test_component {
    private static let IID___x_ABI_Ctest__component_CIBasic: test_component.IID = .init(
        Data1: 0x636060A1, Data2: 0xE41D, Data3: 0x59DF, Data4: ( 0xA5,0xD3,0xFB,0x7C,0xE7,0xE1,0x79,0x2F )
    ) // 636060A1-E41D-59DF-A5D3-FB7CE7E1792F
    public class IBasic: test_component.IInspectable {
        override public class var IID: test_component.IID { IID___x_ABI_Ctest__component_CIBasic }

        open func Method() throws {
            _ = try perform(as: __x_ABI_Ctest__component_CIBasic.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Method(pThis))
            }
        }

    }

    internal static var IBasicVTable: __x_ABI_Ctest__component_CIBasicVtbl = .init(
        QueryInterface: { IBasicWrapper.queryInterface($0, $1, $2) },
        AddRef: { IBasicWrapper.addRef($0) },
        Release: { IBasicWrapper.release($0) },
        GetIids: {
            let size = MemoryLayout<test_component.IID>.size
            let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: test_component.IID.self)
            iids[0] = IUnknown.IID
            iids[1] = IInspectable.IID
            iids[2] = __ABI_test_component.IBasicWrapper.IID
            $1!.pointee = 3
            $2!.pointee = iids
            return S_OK
        },

        GetRuntimeClassName: {
            _ = $0
            let hstring = try! HString("test_component.IBasic").detach()
            $1!.pointee = hstring
            return S_OK
        },

        GetTrustLevel: {
            _ = $0
            $1!.pointee = TrustLevel(rawValue: 0)
            return S_OK
        },

        Method: {
            do {
                guard let __unwrapped__instance = IBasicWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                try __unwrapped__instance.method()
                return S_OK
            } catch { return failWith(error: error) }
        }
    )

    public typealias IBasicWrapper = InterfaceWrapperBase<__IMPL_test_component.IBasicBridge>
}
@_spi(WinRTInternal)
public class IBasicMaker: MakeFromAbi {
    public typealias SwiftType = AnyIBasic
    public static func from(abi: test_component.IInspectable) -> SwiftType {
        let swiftAbi: __ABI_test_component.IBasic = try! abi.QueryInterface()
        return __IMPL_test_component.IBasicBridge.from(abi: RawPointer(swiftAbi))!
    }
}

// WARNING: Please don't edit this file. It was generated by Swift/WinRT v0.0.1
// swiftlint:disable all
import Foundation
import Ctest_component

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.storagestreamtransaction)
public final class StorageStreamTransaction : WinRTClass, test_component.IClosable {
    private typealias SwiftABI = __ABI_Windows_Storage.IStorageStreamTransaction
    private typealias CABI = __x_ABI_CWindows_CStorage_CIStorageStreamTransaction
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: test_component.IInspectable) {
        super.init(fromAbi)
    }

    override public func queryInterface(_ iid: test_component.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private lazy var _IClosable: __ABI_Windows_Foundation.IClosable! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.storagestreamtransaction.close)
    public func close() throws {
        try _IClosable.Close()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.storagestreamtransaction.commitasync)
    public func commitAsync() throws -> test_component.AnyIAsyncAction! {
        try _default.CommitAsync()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.storagestreamtransaction.stream)
    public var stream : test_component.AnyIRandomAccessStream! {
        get { try! _default.get_Stream() }
    }

    deinit {
        _IClosable = nil
        _default = nil
    }
}

// MARK: - StorageStreamTransaction Internals

@_spi(WinRTInternal)
extension __IMPL_Windows_Storage {
    public enum StorageStreamTransactionBridge: AbiBridge {
        public typealias SwiftProjection = StorageStreamTransaction
        public typealias CABI = __x_ABI_CWindows_CStorage_CIStorageStreamTransaction
        public static func from(abi: ComPtr<__x_ABI_CWindows_CStorage_CIStorageStreamTransaction>?) -> StorageStreamTransaction? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: test_component.IInspectable(abi))
        }
    }

}
@_spi(WinRTInternal)
public class StorageStreamTransactionMaker: MakeFromAbi {
    public typealias SwiftType = StorageStreamTransaction
    public static func from(abi: test_component.IInspectable) -> SwiftType {
        return StorageStreamTransaction(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
extension __ABI_Windows_Storage {
    private static let IID___x_ABI_CWindows_CStorage_CIStorageStreamTransaction: test_component.IID = .init(
        Data1: 0xF67CF363, Data2: 0xA53D, Data3: 0x4D94, Data4: ( 0xAE,0x2C,0x67,0x23,0x2D,0x93,0xAC,0xDD ) // F67CF363-A53D-4D94-AE2C-67232D93ACDD
    ) 

    public class IStorageStreamTransaction: test_component.IInspectable {
        override public class var IID: test_component.IID { IID___x_ABI_CWindows_CStorage_CIStorageStreamTransaction }

        public func get_Stream() throws -> test_component.AnyIRandomAccessStream? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CStorage_CIStorageStreamTransaction.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Stream(pThis, &valueAbi))
                }
            }
            return __ABI_Windows_Storage_Streams.IRandomAccessStreamWrapper.unwrapFrom(abi: value)
        }

        public func CommitAsync() throws -> test_component.AnyIAsyncAction? {
            let (operation) = try ComPtrs.initialize { operationAbi in
                _ = try perform(as: __x_ABI_CWindows_CStorage_CIStorageStreamTransaction.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CommitAsync(pThis, &operationAbi))
                }
            }
            return __ABI_Windows_Foundation.IAsyncActionWrapper.unwrapFrom(abi: operation)
        }

    }

}

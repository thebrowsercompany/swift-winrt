// WARNING: Please don't edit this file. It was generated by Swift/WinRT v0.0.1
// swiftlint:disable all
import Foundation
import Ctest_component

public protocol ISimpleDelegate : WinRTInterface {
    func doThis() throws
    func doThat(_ val: Int32) throws
}

extension ISimpleDelegate {
    public func queryInterface(_ iid: test_component.IID) -> IUnknownRef? {
        switch iid {
            case __ABI_test_component.ISimpleDelegateWrapper.IID:
                let wrapper = __ABI_test_component.ISimpleDelegateWrapper(self)
                return wrapper!.queryInterface(iid)
            default: return nil
        }
    }
}
public typealias AnyISimpleDelegate = any ISimpleDelegate


// MARK: - Internals

@_spi(WinRTInternal)
extension __IMPL_test_component {
    public enum ISimpleDelegateBridge : AbiInterfaceBridge {
        public typealias CABI = __x_ABI_Ctest__component_CISimpleDelegate
        public typealias SwiftABI = __ABI_test_component.ISimpleDelegate
        public typealias SwiftProjection = AnyISimpleDelegate
        public static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
            guard let abi = abi else { return nil }
            return ISimpleDelegateImpl(abi)
        }

        public static func makeAbi() -> CABI {
            let vtblPtr = withUnsafeMutablePointer(to: &__ABI_test_component.ISimpleDelegateVTable) { $0 }
            return .init(lpVtbl: vtblPtr)
        }
    }

    fileprivate class ISimpleDelegateImpl: ISimpleDelegate, WinRTAbiImpl {
        fileprivate typealias Bridge = ISimpleDelegateBridge
        fileprivate let _default: Bridge.SwiftABI
        fileprivate var thisPtr: test_component.IInspectable { _default }
        fileprivate init(_ fromAbi: ComPtr<Bridge.CABI>) {
            _default = Bridge.SwiftABI(fromAbi)
        }

        fileprivate func doThis() throws {
            try _default.DoThis()
        }

        fileprivate func doThat(_ val: Int32) throws {
            try _default.DoThat(val)
        }

    }

}
@_spi(WinRTInternal)
extension __ABI_test_component {
    private static let IID___x_ABI_Ctest__component_CISimpleDelegate: test_component.IID = .init(
        Data1: 0xB73AD784, Data2: 0xEADD, Data3: 0x54B7, Data4: ( 0xA6,0x8E,0x8A,0xC5,0x6E,0xAB,0x73,0x87 ) // B73AD784-EADD-54B7-A68E-8AC56EAB7387
    ) 
    public class ISimpleDelegate: test_component.IInspectable {
        override public class var IID: test_component.IID { IID___x_ABI_Ctest__component_CISimpleDelegate }

        open func DoThis() throws {
            _ = try perform(as: __x_ABI_Ctest__component_CISimpleDelegate.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.DoThis(pThis))
            }
        }

        open func DoThat(_ val: Int32) throws {
            _ = try perform(as: __x_ABI_Ctest__component_CISimpleDelegate.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.DoThat(pThis, val))
            }
        }

    }

    internal static var ISimpleDelegateVTable: __x_ABI_Ctest__component_CISimpleDelegateVtbl = .init(
        QueryInterface: { ISimpleDelegateWrapper.queryInterface($0, $1, $2) },
        AddRef: { ISimpleDelegateWrapper.addRef($0) },
        Release: { ISimpleDelegateWrapper.release($0) },
        GetIids: {
            let size = MemoryLayout<test_component.IID>.size
            let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: test_component.IID.self)
            iids[0] = IUnknown.IID
            iids[1] = IInspectable.IID
            iids[2] = __ABI_test_component.ISimpleDelegateWrapper.IID
            $1!.pointee = 3
            $2!.pointee = iids
            return S_OK
        },

        GetRuntimeClassName: {
            _ = $0
            let hstring = try! HString("test_component.ISimpleDelegate").detach()
            $1!.pointee = hstring
            return S_OK
        },

        GetTrustLevel: {
            _ = $0
            $1!.pointee = TrustLevel(rawValue: 0)
            return S_OK
        },

        DoThis: {
            do {
                guard let __unwrapped__instance = ISimpleDelegateWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                try __unwrapped__instance.doThis()
                return S_OK
            } catch { return failWith(error: error) }
        },

        DoThat: {
            do {
                guard let __unwrapped__instance = ISimpleDelegateWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let val: Int32 = $1
                try __unwrapped__instance.doThat(val)
                return S_OK
            } catch { return failWith(error: error) }
        }
    )

    public typealias ISimpleDelegateWrapper = InterfaceWrapperBase<__IMPL_test_component.ISimpleDelegateBridge>
}
@_spi(WinRTInternal)
public class ISimpleDelegateMaker: MakeFromAbi {
    public typealias SwiftType = AnyISimpleDelegate
    public static func from(abi: test_component.IInspectable) -> SwiftType {
        let swiftAbi: __ABI_test_component.ISimpleDelegate = try! abi.QueryInterface()
        return __IMPL_test_component.ISimpleDelegateBridge.from(abi: RawPointer(swiftAbi))!
    }
}

// WARNING: Please don't edit this file. It was generated by Swift/WinRT v0.0.1
// swiftlint:disable all
import Foundation
import Ctest_component

// MARK: - DateTime

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.datetime)
public struct DateTime: Hashable, Codable, Sendable {
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.datetime.universaltime)
    public var universalTime: Int64 = 0
    public init() {}
    public init(universalTime: Int64) {
        self.universalTime = universalTime
    }
}

// MARK: - DateTime Internals

@_spi(WinRTInternal)
extension DateTime: WinRTBridgeable {
    public typealias ABI = __x_ABI_CWindows_CFoundation_CDateTime
    public static func from(abi: ABI) -> Self {
        .init(universalTime: abi.UniversalTime)
    }
    public func toABI() -> ABI {
        .from(swift: self)
    }
}

extension __x_ABI_CWindows_CFoundation_CDateTime {
    public static func from(swift: test_component.DateTime) -> __x_ABI_CWindows_CFoundation_CDateTime {
        .init(UniversalTime: swift.universalTime)
    }
}
// MARK: - Point

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.point)
public struct Point: Hashable, Codable, Sendable {
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.point.x)
    public var x: Float = 0.0
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.point.y)
    public var y: Float = 0.0
    public init() {}
    public init(x: Float, y: Float) {
        self.x = x
        self.y = y
    }
}

// MARK: - Point Internals

@_spi(WinRTInternal)
extension Point: WinRTBridgeable {
    public typealias ABI = __x_ABI_CWindows_CFoundation_CPoint
    public static func from(abi: ABI) -> Self {
        .init(x: abi.X, y: abi.Y)
    }
    public func toABI() -> ABI {
        .from(swift: self)
    }
}

extension __x_ABI_CWindows_CFoundation_CPoint {
    public static func from(swift: test_component.Point) -> __x_ABI_CWindows_CFoundation_CPoint {
        .init(X: swift.x, Y: swift.y)
    }
}
// MARK: - Rect

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.rect)
public struct Rect: Hashable, Codable, Sendable {
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.rect.x)
    public var x: Float = 0.0
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.rect.y)
    public var y: Float = 0.0
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.rect.width)
    public var width: Float = 0.0
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.rect.height)
    public var height: Float = 0.0
    public init() {}
    public init(x: Float, y: Float, width: Float, height: Float) {
        self.x = x
        self.y = y
        self.width = width
        self.height = height
    }
}

// MARK: - Rect Internals

@_spi(WinRTInternal)
extension Rect: WinRTBridgeable {
    public typealias ABI = __x_ABI_CWindows_CFoundation_CRect
    public static func from(abi: ABI) -> Self {
        .init(x: abi.X, y: abi.Y, width: abi.Width, height: abi.Height)
    }
    public func toABI() -> ABI {
        .from(swift: self)
    }
}

extension __x_ABI_CWindows_CFoundation_CRect {
    public static func from(swift: test_component.Rect) -> __x_ABI_CWindows_CFoundation_CRect {
        .init(X: swift.x, Y: swift.y, Width: swift.width, Height: swift.height)
    }
}
// MARK: - Size

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.size)
public struct Size: Hashable, Codable, Sendable {
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.size.width)
    public var width: Float = 0.0
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.size.height)
    public var height: Float = 0.0
    public init() {}
    public init(width: Float, height: Float) {
        self.width = width
        self.height = height
    }
}

// MARK: - Size Internals

@_spi(WinRTInternal)
extension Size: WinRTBridgeable {
    public typealias ABI = __x_ABI_CWindows_CFoundation_CSize
    public static func from(abi: ABI) -> Self {
        .init(width: abi.Width, height: abi.Height)
    }
    public func toABI() -> ABI {
        .from(swift: self)
    }
}

extension __x_ABI_CWindows_CFoundation_CSize {
    public static func from(swift: test_component.Size) -> __x_ABI_CWindows_CFoundation_CSize {
        .init(Width: swift.width, Height: swift.height)
    }
}
// MARK: - TimeSpan

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.timespan)
public struct TimeSpan: Hashable, Codable, Sendable {
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.timespan.duration)
    public var duration: Int64 = 0
    public init() {}
    public init(duration: Int64) {
        self.duration = duration
    }
}

// MARK: - TimeSpan Internals

@_spi(WinRTInternal)
extension TimeSpan: WinRTBridgeable {
    public typealias ABI = __x_ABI_CWindows_CFoundation_CTimeSpan
    public static func from(abi: ABI) -> Self {
        .init(duration: abi.Duration)
    }
    public func toABI() -> ABI {
        .from(swift: self)
    }
}

extension __x_ABI_CWindows_CFoundation_CTimeSpan {
    public static func from(swift: test_component.TimeSpan) -> __x_ABI_CWindows_CFoundation_CTimeSpan {
        .init(Duration: swift.duration)
    }
}

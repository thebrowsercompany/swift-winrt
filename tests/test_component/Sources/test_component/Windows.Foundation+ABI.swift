// WARNING: Please don't edit this file. It was generated by Swift/WinRT v0.0.1
// swiftlint:disable all
import Ctest_component

private var IID___x_ABI_CWindows_CFoundation_CIAsyncAction: test_component.IID {
    .init(Data1: 0x5A648006, Data2: 0x843A, Data3: 0x4DA9, Data4: ( 0x86,0x5B,0x9D,0x26,0xE5,0xDF,0xAD,0x7B ))// 5A648006-843A-4DA9-865B-9D26E5DFAD7B
}

private var IID___x_ABI_CWindows_CFoundation_CIAsyncInfo: test_component.IID {
    .init(Data1: 0x00000036, Data2: 0x0000, Data3: 0x0000, Data4: ( 0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x46 ))// 00000036-0000-0000-C000-000000000046
}

private var IID___x_ABI_C__FIAsyncOperationWithProgress_2_TResult_TProgress: test_component.IID {
    .init(Data1: 0xB5D036D7, Data2: 0xE297, Data3: 0x498F, Data4: ( 0xBA,0x60,0x02,0x89,0xE7,0x6E,0x23,0xDD ))// B5D036D7-E297-498F-BA60-0289E76E23DD
}

private var IID___x_ABI_C__FIAsyncOperation_1_TResult: test_component.IID {
    .init(Data1: 0x9FC2B0BB, Data2: 0xE446, Data3: 0x44E2, Data4: ( 0xAA,0x61,0x9C,0xAB,0x8F,0x63,0x6A,0xF2 ))// 9FC2B0BB-E446-44E2-AA61-9CAB8F636AF2
}

private var IID___x_ABI_CWindows_CFoundation_CIClosable: test_component.IID {
    .init(Data1: 0x30D5A829, Data2: 0x7FA4, Data3: 0x4026, Data4: ( 0x83,0xBB,0xD7,0x5B,0xAE,0x4E,0xA9,0x9E ))// 30D5A829-7FA4-4026-83BB-D75BAE4EA99E
}

private var IID___x_ABI_CWindows_CFoundation_CIDeferral: test_component.IID {
    .init(Data1: 0xD6269732, Data2: 0x3B7F, Data3: 0x46A7, Data4: ( 0xB4,0x0B,0x4F,0xDC,0xA2,0xA2,0xC6,0x93 ))// D6269732-3B7F-46A7-B40B-4FDCA2A2C693
}

private var IID___x_ABI_CWindows_CFoundation_CIDeferralFactory: test_component.IID {
    .init(Data1: 0x65A1ECC5, Data2: 0x3FB5, Data3: 0x4832, Data4: ( 0x8C,0xA9,0xF0,0x61,0xB2,0x81,0xD1,0x3A ))// 65A1ECC5-3FB5-4832-8CA9-F061B281D13A
}

private var IID___x_ABI_CWindows_CFoundation_CIPropertyValue: test_component.IID {
    .init(Data1: 0x4BD682DD, Data2: 0x7554, Data3: 0x40E9, Data4: ( 0x9A,0x9B,0x82,0x65,0x4E,0xDE,0x7E,0x62 ))// 4BD682DD-7554-40E9-9A9B-82654EDE7E62
}

private var IID___x_ABI_C__FIReference_1_T: test_component.IID {
    .init(Data1: 0x61C17706, Data2: 0x2D65, Data3: 0x11E0, Data4: ( 0x9A,0xE8,0xD4,0x85,0x64,0x01,0x54,0x72 ))// 61C17706-2D65-11E0-9AE8-D48564015472
}

private var IID___x_ABI_CWindows_CFoundation_CIStringable: test_component.IID {
    .init(Data1: 0x96369F54, Data2: 0x8EB6, Data3: 0x48F0, Data4: ( 0xAB,0xCE,0xC1,0xB2,0x11,0xE6,0x27,0xC3 ))// 96369F54-8EB6-48F0-ABCE-C1B211E627C3
}

private var IID___x_ABI_CWindows_CFoundation_CIAsyncActionCompletedHandler: test_component.IID {
    .init(Data1: 0xA4ED5C81, Data2: 0x76C9, Data3: 0x40BD, Data4: ( 0x8B,0xE6,0xB1,0xD9,0x0F,0xB2,0x0A,0xE7 ))// A4ED5C81-76C9-40BD-8BE6-B1D90FB20AE7
}

private var IID___x_ABI_C__FIAsyncOperationCompletedHandler_1_TResult: test_component.IID {
    .init(Data1: 0xFCDCF02C, Data2: 0xE5D8, Data3: 0x4478, Data4: ( 0x91,0x5A,0x4D,0x90,0xB7,0x4B,0x83,0xA5 ))// FCDCF02C-E5D8-4478-915A-4D90B74B83A5
}

private var IID___x_ABI_C__FIAsyncOperationProgressHandler_2_TResult_TProgress: test_component.IID {
    .init(Data1: 0x55690902, Data2: 0x0AAB, Data3: 0x421A, Data4: ( 0x87,0x78,0xF8,0xCE,0x50,0x26,0xD7,0x58 ))// 55690902-0AAB-421A-8778-F8CE5026D758
}

private var IID___x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2_TResult_TProgress: test_component.IID {
    .init(Data1: 0xE85DF41D, Data2: 0x6AA7, Data3: 0x46E3, Data4: ( 0xA8,0xE2,0xF0,0x09,0xD8,0x40,0xC6,0x27 ))// E85DF41D-6AA7-46E3-A8E2-F009D840C627
}

private var IID___x_ABI_CWindows_CFoundation_CIDeferralCompletedHandler: test_component.IID {
    .init(Data1: 0xED32A372, Data2: 0xF3C8, Data3: 0x4FAA, Data4: ( 0x9C,0xFB,0x47,0x01,0x48,0xDA,0x38,0x88 ))// ED32A372-F3C8-4FAA-9CFB-470148DA3888
}

private var IID___x_ABI_C__FIEventHandler_1_T: test_component.IID {
    .init(Data1: 0x9DE1C535, Data2: 0x6AE1, Data3: 0x11E0, Data4: ( 0x84,0xE1,0x18,0xA9,0x05,0xBC,0xC5,0x3F ))// 9DE1C535-6AE1-11E0-84E1-18A905BCC53F
}

private var IID___x_ABI_C__FITypedEventHandler_2_TSender_TResult: test_component.IID {
    .init(Data1: 0x9DE1C534, Data2: 0x6AE1, Data3: 0x11E0, Data4: ( 0x84,0xE1,0x18,0xA9,0x05,0xBC,0xC5,0x3F ))// 9DE1C534-6AE1-11E0-84E1-18A905BCC53F
}

public enum __ABI_Windows_Foundation {
    public class IAsyncAction: test_component.IInspectable {
        override public class var IID: test_component.IID { IID___x_ABI_CWindows_CFoundation_CIAsyncAction }

        open func put_CompletedImpl(_ handler: test_component.AsyncActionCompletedHandler?) throws {
            let handlerWrapper = __ABI_Windows_Foundation.AsyncActionCompletedHandlerWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CWindows_CFoundation_CIAsyncAction.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Completed(pThis, _handler))
            }
        }

        open func get_CompletedImpl() throws -> test_component.AsyncActionCompletedHandler? {
            var handler: UnsafeMutablePointer<__x_ABI_CWindows_CFoundation_CIAsyncActionCompletedHandler>?
            _ = try perform(as: __x_ABI_CWindows_CFoundation_CIAsyncAction.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Completed(pThis, &handler))
            }
            return __ABI_Windows_Foundation.AsyncActionCompletedHandlerWrapper.unwrapFrom(abi: handler)
        }

        open func GetResultsImpl() throws {
            _ = try perform(as: __x_ABI_CWindows_CFoundation_CIAsyncAction.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetResults(pThis))
            }
        }

    }

    internal static var IAsyncActionVTable: __x_ABI_CWindows_CFoundation_CIAsyncActionVtbl = .init(
        QueryInterface: { IAsyncActionWrapper.queryInterface($0, $1, $2) },
        AddRef: { IAsyncActionWrapper.addRef($0) },
        Release: { IAsyncActionWrapper.release($0) },
        GetIids: {
            let size = MemoryLayout<test_component.IID>.size
            let iids = CoTaskMemAlloc(UInt64(size) * 4).assumingMemoryBound(to: test_component.IID.self)
            iids[0] = IUnknown.IID
            iids[1] = IInspectable.IID
            iids[2] = __ABI_Windows_Foundation.IAsyncActionWrapper.IID
            iids[3] = __ABI_Windows_Foundation.IAsyncInfoWrapper.IID
            $1!.pointee = 4
            $2!.pointee = iids
            return S_OK
        },

        GetRuntimeClassName: {
            _ = $0
            let hstring = try! HString("Windows.Foundation.IAsyncAction").detach()
            $1!.pointee = hstring
            return S_OK
        },

        GetTrustLevel: {
            _ = $0
            $1!.pointee = TrustLevel(rawValue: 0)
            return S_OK
        },

        put_Completed: {
            guard let __unwrapped__instance = IAsyncActionWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            guard let handler = __ABI_Windows_Foundation.AsyncActionCompletedHandlerWrapper.unwrapFrom(abi: $1) else { return E_INVALIDARG }
            __unwrapped__instance.completed = handler
            return S_OK
        },

        get_Completed: {
            guard let __unwrapped__instance = IAsyncActionWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let handler = __unwrapped__instance.completed
            let handlerWrapper = __ABI_Windows_Foundation.AsyncActionCompletedHandlerWrapper(handler)
            handlerWrapper?.copyTo($1)
            return S_OK
        },

        GetResults: {
            do {
                guard let __unwrapped__instance = IAsyncActionWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                try __unwrapped__instance.getResults()
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        }
    )

    public typealias IAsyncActionWrapper = InterfaceWrapperBase<__IMPL_Windows_Foundation.IAsyncActionBridge>
    public class IAsyncInfo: test_component.IInspectable {
        override public class var IID: test_component.IID { IID___x_ABI_CWindows_CFoundation_CIAsyncInfo }

        open func get_IdImpl() throws -> UInt32 {
            var result: UINT32 = 0
            _ = try perform(as: __x_ABI_CWindows_CFoundation_CIAsyncInfo.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Id(pThis, &result))
            }
            return result
        }

        open func get_StatusImpl() throws -> test_component.AsyncStatus {
            var result: __x_ABI_CWindows_CFoundation_CAsyncStatus = .init(0)
            _ = try perform(as: __x_ABI_CWindows_CFoundation_CIAsyncInfo.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Status(pThis, &result))
            }
            return result
        }

        open func get_ErrorCodeImpl() throws -> HRESULT {
            var result: HRESULT = 0
            _ = try perform(as: __x_ABI_CWindows_CFoundation_CIAsyncInfo.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ErrorCode(pThis, &result))
            }
            return result
        }

        open func CancelImpl() throws {
            _ = try perform(as: __x_ABI_CWindows_CFoundation_CIAsyncInfo.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Cancel(pThis))
            }
        }

        open func CloseImpl() throws {
            _ = try perform(as: __x_ABI_CWindows_CFoundation_CIAsyncInfo.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Close(pThis))
            }
        }

    }

    internal static var IAsyncInfoVTable: __x_ABI_CWindows_CFoundation_CIAsyncInfoVtbl = .init(
        QueryInterface: { IAsyncInfoWrapper.queryInterface($0, $1, $2) },
        AddRef: { IAsyncInfoWrapper.addRef($0) },
        Release: { IAsyncInfoWrapper.release($0) },
        GetIids: {
            let size = MemoryLayout<test_component.IID>.size
            let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: test_component.IID.self)
            iids[0] = IUnknown.IID
            iids[1] = IInspectable.IID
            iids[2] = __ABI_Windows_Foundation.IAsyncInfoWrapper.IID
            $1!.pointee = 3
            $2!.pointee = iids
            return S_OK
        },

        GetRuntimeClassName: {
            _ = $0
            let hstring = try! HString("Windows.Foundation.IAsyncInfo").detach()
            $1!.pointee = hstring
            return S_OK
        },

        GetTrustLevel: {
            _ = $0
            $1!.pointee = TrustLevel(rawValue: 0)
            return S_OK
        },

        get_Id: {
            guard let __unwrapped__instance = IAsyncInfoWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let result = __unwrapped__instance.id
            $1?.initialize(to: result)
            return S_OK
        },

        get_Status: {
            guard let __unwrapped__instance = IAsyncInfoWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let result = __unwrapped__instance.status
            $1?.initialize(to: result)
            return S_OK
        },

        get_ErrorCode: {
            guard let __unwrapped__instance = IAsyncInfoWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let result = __unwrapped__instance.errorCode
            $1?.initialize(to: result)
            return S_OK
        },

        Cancel: {
            do {
                guard let __unwrapped__instance = IAsyncInfoWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                try __unwrapped__instance.cancel()
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        Close: {
            do {
                guard let __unwrapped__instance = IAsyncInfoWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                try __unwrapped__instance.close()
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        }
    )

    public typealias IAsyncInfoWrapper = InterfaceWrapperBase<__IMPL_Windows_Foundation.IAsyncInfoBridge>
    public class IClosable: test_component.IInspectable {
        override public class var IID: test_component.IID { IID___x_ABI_CWindows_CFoundation_CIClosable }

        open func CloseImpl() throws {
            _ = try perform(as: __x_ABI_CWindows_CFoundation_CIClosable.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Close(pThis))
            }
        }

    }

    internal static var IClosableVTable: __x_ABI_CWindows_CFoundation_CIClosableVtbl = .init(
        QueryInterface: { IClosableWrapper.queryInterface($0, $1, $2) },
        AddRef: { IClosableWrapper.addRef($0) },
        Release: { IClosableWrapper.release($0) },
        GetIids: {
            let size = MemoryLayout<test_component.IID>.size
            let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: test_component.IID.self)
            iids[0] = IUnknown.IID
            iids[1] = IInspectable.IID
            iids[2] = __ABI_Windows_Foundation.IClosableWrapper.IID
            $1!.pointee = 3
            $2!.pointee = iids
            return S_OK
        },

        GetRuntimeClassName: {
            _ = $0
            let hstring = try! HString("Windows.Foundation.IClosable").detach()
            $1!.pointee = hstring
            return S_OK
        },

        GetTrustLevel: {
            _ = $0
            $1!.pointee = TrustLevel(rawValue: 0)
            return S_OK
        },

        Close: {
            do {
                guard let __unwrapped__instance = IClosableWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                try __unwrapped__instance.close()
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        }
    )

    public typealias IClosableWrapper = InterfaceWrapperBase<__IMPL_Windows_Foundation.IClosableBridge>
    public class IDeferral: test_component.IInspectable {
        override public class var IID: test_component.IID { IID___x_ABI_CWindows_CFoundation_CIDeferral }

        internal func CompleteImpl() throws {
            _ = try perform(as: __x_ABI_CWindows_CFoundation_CIDeferral.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Complete(pThis))
            }
        }

    }

    public class IDeferralFactory: test_component.IInspectable {
        override public class var IID: test_component.IID { IID___x_ABI_CWindows_CFoundation_CIDeferralFactory }

        internal func CreateImpl(_ handler: test_component.DeferralCompletedHandler?) throws -> IDeferral {
            var result: UnsafeMutablePointer<__x_ABI_CWindows_CFoundation_CIDeferral>?
            let handlerWrapper = __ABI_Windows_Foundation.DeferralCompletedHandlerWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CWindows_CFoundation_CIDeferralFactory.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Create(pThis, _handler, &result))
            }
            return IDeferral(consuming: result!)
        }

    }

    public class IPropertyValue: test_component.IInspectable {
        override public class var IID: test_component.IID { IID___x_ABI_CWindows_CFoundation_CIPropertyValue }

        open func get_TypeImpl() throws -> test_component.PropertyType {
            var value: __x_ABI_CWindows_CFoundation_CPropertyType = .init(0)
            _ = try perform(as: __x_ABI_CWindows_CFoundation_CIPropertyValue.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Type(pThis, &value))
            }
            return value
        }

        open func get_IsNumericScalarImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CWindows_CFoundation_CIPropertyValue.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsNumericScalar(pThis, &value))
            }
            return .init(from: value)
        }

        open func GetUInt8Impl() throws -> UInt8 {
            var value: UINT8 = 0
            _ = try perform(as: __x_ABI_CWindows_CFoundation_CIPropertyValue.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetUInt8(pThis, &value))
            }
            return value
        }

        open func GetInt16Impl() throws -> Int16 {
            var value: INT16 = 0
            _ = try perform(as: __x_ABI_CWindows_CFoundation_CIPropertyValue.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetInt16(pThis, &value))
            }
            return value
        }

        open func GetUInt16Impl() throws -> UInt16 {
            var value: UINT16 = 0
            _ = try perform(as: __x_ABI_CWindows_CFoundation_CIPropertyValue.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetUInt16(pThis, &value))
            }
            return value
        }

        open func GetInt32Impl() throws -> Int32 {
            var value: INT32 = 0
            _ = try perform(as: __x_ABI_CWindows_CFoundation_CIPropertyValue.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetInt32(pThis, &value))
            }
            return value
        }

        open func GetUInt32Impl() throws -> UInt32 {
            var value: UINT32 = 0
            _ = try perform(as: __x_ABI_CWindows_CFoundation_CIPropertyValue.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetUInt32(pThis, &value))
            }
            return value
        }

        open func GetInt64Impl() throws -> Int64 {
            var value: INT64 = 0
            _ = try perform(as: __x_ABI_CWindows_CFoundation_CIPropertyValue.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetInt64(pThis, &value))
            }
            return value
        }

        open func GetUInt64Impl() throws -> UInt64 {
            var value: UINT64 = 0
            _ = try perform(as: __x_ABI_CWindows_CFoundation_CIPropertyValue.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetUInt64(pThis, &value))
            }
            return value
        }

        open func GetSingleImpl() throws -> Float {
            var value: FLOAT = 0.0
            _ = try perform(as: __x_ABI_CWindows_CFoundation_CIPropertyValue.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetSingle(pThis, &value))
            }
            return value
        }

        open func GetDoubleImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CWindows_CFoundation_CIPropertyValue.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetDouble(pThis, &value))
            }
            return value
        }

        open func GetChar16Impl() throws -> Character {
            var value: WCHAR = 0
            _ = try perform(as: __x_ABI_CWindows_CFoundation_CIPropertyValue.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetChar16(pThis, &value))
            }
            return .init(from: value)
        }

        open func GetBooleanImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CWindows_CFoundation_CIPropertyValue.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetBoolean(pThis, &value))
            }
            return .init(from: value)
        }

        open func GetStringImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CWindows_CFoundation_CIPropertyValue.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetString(pThis, &value))
            }
            return .init(from: value)
        }

        open func GetGuidImpl() throws -> test_component.GUID {
            var value: test_component.GUID = .init()
            _ = try perform(as: __x_ABI_CWindows_CFoundation_CIPropertyValue.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetGuid(pThis, &value))
            }
            return value
        }

        open func GetDateTimeImpl() throws -> test_component.DateTime {
            var value: __x_ABI_CWindows_CFoundation_CDateTime = .init()
            _ = try perform(as: __x_ABI_CWindows_CFoundation_CIPropertyValue.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetDateTime(pThis, &value))
            }
            return .from(abi: value)
        }

        open func GetTimeSpanImpl() throws -> test_component.TimeSpan {
            var value: __x_ABI_CWindows_CFoundation_CTimeSpan = .init()
            _ = try perform(as: __x_ABI_CWindows_CFoundation_CIPropertyValue.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetTimeSpan(pThis, &value))
            }
            return .from(abi: value)
        }

        open func GetPointImpl() throws -> test_component.Point {
            var value: __x_ABI_CWindows_CFoundation_CPoint = .init()
            _ = try perform(as: __x_ABI_CWindows_CFoundation_CIPropertyValue.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetPoint(pThis, &value))
            }
            return .from(abi: value)
        }

        open func GetSizeImpl() throws -> test_component.Size {
            var value: __x_ABI_CWindows_CFoundation_CSize = .init()
            _ = try perform(as: __x_ABI_CWindows_CFoundation_CIPropertyValue.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetSize(pThis, &value))
            }
            return .from(abi: value)
        }

        open func GetRectImpl() throws -> test_component.Rect {
            var value: __x_ABI_CWindows_CFoundation_CRect = .init()
            _ = try perform(as: __x_ABI_CWindows_CFoundation_CIPropertyValue.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetRect(pThis, &value))
            }
            return .from(abi: value)
        }

    }

    internal static var IPropertyValueVTable: __x_ABI_CWindows_CFoundation_CIPropertyValueVtbl = .init(
        QueryInterface: { IPropertyValueWrapper.queryInterface($0, $1, $2) },
        AddRef: { IPropertyValueWrapper.addRef($0) },
        Release: { IPropertyValueWrapper.release($0) },
        GetIids: {
            let size = MemoryLayout<test_component.IID>.size
            let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: test_component.IID.self)
            iids[0] = IUnknown.IID
            iids[1] = IInspectable.IID
            iids[2] = __ABI_Windows_Foundation.IPropertyValueWrapper.IID
            $1!.pointee = 3
            $2!.pointee = iids
            return S_OK
        },

        GetRuntimeClassName: {
            _ = $0
            let hstring = try! HString("Windows.Foundation.IPropertyValue").detach()
            $1!.pointee = hstring
            return S_OK
        },

        GetTrustLevel: {
            _ = $0
            $1!.pointee = TrustLevel(rawValue: 0)
            return S_OK
        },

        get_Type: {
            guard let __unwrapped__instance = IPropertyValueWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value = __unwrapped__instance.type
            $1?.initialize(to: value)
            return S_OK
        },

        get_IsNumericScalar: {
            guard let __unwrapped__instance = IPropertyValueWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value = __unwrapped__instance.isNumericScalar
            $1?.initialize(to: .init(from: value))
            return S_OK
        },

        GetUInt8: {
            do {
                guard let __unwrapped__instance = IPropertyValueWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let value = try __unwrapped__instance.getUInt8()
                $1?.initialize(to: value)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        GetInt16: {
            do {
                guard let __unwrapped__instance = IPropertyValueWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let value = try __unwrapped__instance.getInt16()
                $1?.initialize(to: value)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        GetUInt16: {
            do {
                guard let __unwrapped__instance = IPropertyValueWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let value = try __unwrapped__instance.getUInt16()
                $1?.initialize(to: value)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        GetInt32: {
            do {
                guard let __unwrapped__instance = IPropertyValueWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let value = try __unwrapped__instance.getInt32()
                $1?.initialize(to: value)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        GetUInt32: {
            do {
                guard let __unwrapped__instance = IPropertyValueWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let value = try __unwrapped__instance.getUInt32()
                $1?.initialize(to: value)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        GetInt64: {
            do {
                guard let __unwrapped__instance = IPropertyValueWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let value = try __unwrapped__instance.getInt64()
                $1?.initialize(to: value)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        GetUInt64: {
            do {
                guard let __unwrapped__instance = IPropertyValueWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let value = try __unwrapped__instance.getUInt64()
                $1?.initialize(to: value)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        GetSingle: {
            do {
                guard let __unwrapped__instance = IPropertyValueWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let value = try __unwrapped__instance.getSingle()
                $1?.initialize(to: value)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        GetDouble: {
            do {
                guard let __unwrapped__instance = IPropertyValueWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let value = try __unwrapped__instance.getDouble()
                $1?.initialize(to: value)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        GetChar16: {
            do {
                guard let __unwrapped__instance = IPropertyValueWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let value = try __unwrapped__instance.getChar16()
                $1?.initialize(to: .init(from: value))
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        GetBoolean: {
            do {
                guard let __unwrapped__instance = IPropertyValueWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let value = try __unwrapped__instance.getBoolean()
                $1?.initialize(to: .init(from: value))
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        GetString: {
            do {
                guard let __unwrapped__instance = IPropertyValueWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let value = try __unwrapped__instance.getString()
                $1?.initialize(to: try! HString(value).detach())
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        GetGuid: {
            do {
                guard let __unwrapped__instance = IPropertyValueWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let value = try __unwrapped__instance.getGuid()
                $1?.initialize(to: value)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        GetDateTime: {
            do {
                guard let __unwrapped__instance = IPropertyValueWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let value = try __unwrapped__instance.getDateTime()
                $1?.initialize(to: .from(swift: value))
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        GetTimeSpan: {
            do {
                guard let __unwrapped__instance = IPropertyValueWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let value = try __unwrapped__instance.getTimeSpan()
                $1?.initialize(to: .from(swift: value))
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        GetPoint: {
            do {
                guard let __unwrapped__instance = IPropertyValueWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let value = try __unwrapped__instance.getPoint()
                $1?.initialize(to: .from(swift: value))
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        GetSize: {
            do {
                guard let __unwrapped__instance = IPropertyValueWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let value = try __unwrapped__instance.getSize()
                $1?.initialize(to: .from(swift: value))
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        GetRect: {
            do {
                guard let __unwrapped__instance = IPropertyValueWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let value = try __unwrapped__instance.getRect()
                $1?.initialize(to: .from(swift: value))
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        GetUInt8Array: { _, _, _ in return failWith(err: E_NOTIMPL) },

        GetInt16Array: { _, _, _ in return failWith(err: E_NOTIMPL) },

        GetUInt16Array: { _, _, _ in return failWith(err: E_NOTIMPL) },

        GetInt32Array: { _, _, _ in return failWith(err: E_NOTIMPL) },

        GetUInt32Array: { _, _, _ in return failWith(err: E_NOTIMPL) },

        GetInt64Array: { _, _, _ in return failWith(err: E_NOTIMPL) },

        GetUInt64Array: { _, _, _ in return failWith(err: E_NOTIMPL) },

        GetSingleArray: { _, _, _ in return failWith(err: E_NOTIMPL) },

        GetDoubleArray: { _, _, _ in return failWith(err: E_NOTIMPL) },

        GetChar16Array: { _, _, _ in return failWith(err: E_NOTIMPL) },

        GetBooleanArray: { _, _, _ in return failWith(err: E_NOTIMPL) },

        GetStringArray: { _, _, _ in return failWith(err: E_NOTIMPL) },

        GetInspectableArray: { _, _, _ in return failWith(err: E_NOTIMPL) },

        GetGuidArray: { _, _, _ in return failWith(err: E_NOTIMPL) },

        GetDateTimeArray: { _, _, _ in return failWith(err: E_NOTIMPL) },

        GetTimeSpanArray: { _, _, _ in return failWith(err: E_NOTIMPL) },

        GetPointArray: { _, _, _ in return failWith(err: E_NOTIMPL) },

        GetSizeArray: { _, _, _ in return failWith(err: E_NOTIMPL) },

        GetRectArray: { _, _, _ in return failWith(err: E_NOTIMPL) }
    )

    public typealias IPropertyValueWrapper = InterfaceWrapperBase<__IMPL_Windows_Foundation.IPropertyValueBridge>
    public class IStringable: test_component.IInspectable {
        override public class var IID: test_component.IID { IID___x_ABI_CWindows_CFoundation_CIStringable }

        open func ToStringImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CWindows_CFoundation_CIStringable.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.ToString(pThis, &value))
            }
            return .init(from: value)
        }

    }

    internal static var IStringableVTable: __x_ABI_CWindows_CFoundation_CIStringableVtbl = .init(
        QueryInterface: { IStringableWrapper.queryInterface($0, $1, $2) },
        AddRef: { IStringableWrapper.addRef($0) },
        Release: { IStringableWrapper.release($0) },
        GetIids: {
            let size = MemoryLayout<test_component.IID>.size
            let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: test_component.IID.self)
            iids[0] = IUnknown.IID
            iids[1] = IInspectable.IID
            iids[2] = __ABI_Windows_Foundation.IStringableWrapper.IID
            $1!.pointee = 3
            $2!.pointee = iids
            return S_OK
        },

        GetRuntimeClassName: {
            _ = $0
            let hstring = try! HString("Windows.Foundation.IStringable").detach()
            $1!.pointee = hstring
            return S_OK
        },

        GetTrustLevel: {
            _ = $0
            $1!.pointee = TrustLevel(rawValue: 0)
            return S_OK
        },

        ToString: {
            do {
                guard let __unwrapped__instance = IStringableWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let value = try __unwrapped__instance.toString()
                $1?.initialize(to: try! HString(value).detach())
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        }
    )

    public typealias IStringableWrapper = InterfaceWrapperBase<__IMPL_Windows_Foundation.IStringableBridge>
}
extension __x_ABI_CWindows_CFoundation_CDateTime {
        public static func from(swift: test_component.DateTime) -> __x_ABI_CWindows_CFoundation_CDateTime {
            .init(UniversalTime: swift.universalTime)
        }
    }
    extension __x_ABI_CWindows_CFoundation_CPoint {
        public static func from(swift: test_component.Point) -> __x_ABI_CWindows_CFoundation_CPoint {
            .init(X: swift.x, Y: swift.y)
        }
    }
    extension __x_ABI_CWindows_CFoundation_CRect {
        public static func from(swift: test_component.Rect) -> __x_ABI_CWindows_CFoundation_CRect {
            .init(X: swift.x, Y: swift.y, Width: swift.width, Height: swift.height)
        }
    }
    extension __x_ABI_CWindows_CFoundation_CSize {
        public static func from(swift: test_component.Size) -> __x_ABI_CWindows_CFoundation_CSize {
            .init(Width: swift.width, Height: swift.height)
        }
    }
    extension __x_ABI_CWindows_CFoundation_CTimeSpan {
        public static func from(swift: test_component.TimeSpan) -> __x_ABI_CWindows_CFoundation_CTimeSpan {
            .init(Duration: swift.duration)
        }
    }
    // MARK - AsyncActionCompletedHandler
extension __ABI_Windows_Foundation {
    public class AsyncActionCompletedHandler: test_component.IUnknown {
        override public class var IID: test_component.IID { IID___x_ABI_CWindows_CFoundation_CIAsyncActionCompletedHandler }

        open func InvokeImpl(_ asyncInfo: test_component.AnyIAsyncAction?, _ asyncStatus: test_component.AsyncStatus) throws {
            let asyncInfoWrapper = __ABI_Windows_Foundation.IAsyncActionWrapper(asyncInfo)
            let _asyncInfo = try! asyncInfoWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CWindows_CFoundation_CIAsyncActionCompletedHandler.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Invoke(pThis, _asyncInfo, asyncStatus))
            }
        }

    }


    typealias AsyncActionCompletedHandlerWrapper = InterfaceWrapperBase<__IMPL_Windows_Foundation.AsyncActionCompletedHandlerBridge>
    internal static var AsyncActionCompletedHandlerVTable: __x_ABI_CWindows_CFoundation_CIAsyncActionCompletedHandlerVtbl = .init(
        QueryInterface: { AsyncActionCompletedHandlerWrapper.queryInterface($0, $1, $2) },
        AddRef: { AsyncActionCompletedHandlerWrapper.addRef($0) },
        Release: { AsyncActionCompletedHandlerWrapper.release($0) },
        Invoke: {
            guard let __unwrapped__instance = AsyncActionCompletedHandlerWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let asyncInfo: test_component.AnyIAsyncAction? = __ABI_Windows_Foundation.IAsyncActionWrapper.unwrapFrom(abi: $1)
            let asyncStatus: test_component.AsyncStatus = $2
            __unwrapped__instance(asyncInfo, asyncStatus)
            return S_OK
        }
    )
}
public extension WinRTDelegateBridge where CABI == __x_ABI_CWindows_CFoundation_CIAsyncActionCompletedHandler {
    static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__ABI_Windows_Foundation.AsyncActionCompletedHandlerVTable) { $0 }
        return .init(lpVtbl:vtblPtr)
    }
}

// MARK - DeferralCompletedHandler
extension __ABI_Windows_Foundation {
    public class DeferralCompletedHandler: test_component.IUnknown {
        override public class var IID: test_component.IID { IID___x_ABI_CWindows_CFoundation_CIDeferralCompletedHandler }

        open func InvokeImpl() throws {
            _ = try perform(as: __x_ABI_CWindows_CFoundation_CIDeferralCompletedHandler.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Invoke(pThis))
            }
        }

    }


    typealias DeferralCompletedHandlerWrapper = InterfaceWrapperBase<__IMPL_Windows_Foundation.DeferralCompletedHandlerBridge>
    internal static var DeferralCompletedHandlerVTable: __x_ABI_CWindows_CFoundation_CIDeferralCompletedHandlerVtbl = .init(
        QueryInterface: { DeferralCompletedHandlerWrapper.queryInterface($0, $1, $2) },
        AddRef: { DeferralCompletedHandlerWrapper.addRef($0) },
        Release: { DeferralCompletedHandlerWrapper.release($0) },
        Invoke: {
            guard let __unwrapped__instance = DeferralCompletedHandlerWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            __unwrapped__instance()
            return S_OK
        }
    )
}
public extension WinRTDelegateBridge where CABI == __x_ABI_CWindows_CFoundation_CIDeferralCompletedHandler {
    static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__ABI_Windows_Foundation.DeferralCompletedHandlerVTable) { $0 }
        return .init(lpVtbl:vtblPtr)
    }
}


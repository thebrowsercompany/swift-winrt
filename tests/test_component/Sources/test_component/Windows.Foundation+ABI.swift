// WARNING: Please don't edit this file. It was generated by Swift/WinRT v0.0.1
// swiftlint:disable all
import Foundation
import Ctest_component

private var IID___x_ABI_CWindows_CFoundation_CIAsyncAction: test_component.IID {
    .init(Data1: 0x5A648006, Data2: 0x843A, Data3: 0x4DA9, Data4: ( 0x86,0x5B,0x9D,0x26,0xE5,0xDF,0xAD,0x7B ))// 5A648006-843A-4DA9-865B-9D26E5DFAD7B
}

private var IID___x_ABI_CWindows_CFoundation_CIAsyncInfo: test_component.IID {
    .init(Data1: 0x00000036, Data2: 0x0000, Data3: 0x0000, Data4: ( 0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x46 ))// 00000036-0000-0000-C000-000000000046
}

private var IID___x_ABI_C__FIAsyncOperationWithProgress_2_TResult_TProgress: test_component.IID {
    .init(Data1: 0xB5D036D7, Data2: 0xE297, Data3: 0x498F, Data4: ( 0xBA,0x60,0x02,0x89,0xE7,0x6E,0x23,0xDD ))// B5D036D7-E297-498F-BA60-0289E76E23DD
}

private var IID___x_ABI_C__FIAsyncOperation_1_TResult: test_component.IID {
    .init(Data1: 0x9FC2B0BB, Data2: 0xE446, Data3: 0x44E2, Data4: ( 0xAA,0x61,0x9C,0xAB,0x8F,0x63,0x6A,0xF2 ))// 9FC2B0BB-E446-44E2-AA61-9CAB8F636AF2
}

private var IID___x_ABI_CWindows_CFoundation_CIClosable: test_component.IID {
    .init(Data1: 0x30D5A829, Data2: 0x7FA4, Data3: 0x4026, Data4: ( 0x83,0xBB,0xD7,0x5B,0xAE,0x4E,0xA9,0x9E ))// 30D5A829-7FA4-4026-83BB-D75BAE4EA99E
}

private var IID___x_ABI_CWindows_CFoundation_CIDeferral: test_component.IID {
    .init(Data1: 0xD6269732, Data2: 0x3B7F, Data3: 0x46A7, Data4: ( 0xB4,0x0B,0x4F,0xDC,0xA2,0xA2,0xC6,0x93 ))// D6269732-3B7F-46A7-B40B-4FDCA2A2C693
}

private var IID___x_ABI_CWindows_CFoundation_CIDeferralFactory: test_component.IID {
    .init(Data1: 0x65A1ECC5, Data2: 0x3FB5, Data3: 0x4832, Data4: ( 0x8C,0xA9,0xF0,0x61,0xB2,0x81,0xD1,0x3A ))// 65A1ECC5-3FB5-4832-8CA9-F061B281D13A
}

private var IID___x_ABI_CWindows_CFoundation_CIMemoryBuffer: test_component.IID {
    .init(Data1: 0xFBC4DD2A, Data2: 0x245B, Data3: 0x11E4, Data4: ( 0xAF,0x98,0x68,0x94,0x23,0x26,0x0C,0xF8 ))// FBC4DD2A-245B-11E4-AF98-689423260CF8
}

private var IID___x_ABI_CWindows_CFoundation_CIMemoryBufferFactory: test_component.IID {
    .init(Data1: 0xFBC4DD2B, Data2: 0x245B, Data3: 0x11E4, Data4: ( 0xAF,0x98,0x68,0x94,0x23,0x26,0x0C,0xF8 ))// FBC4DD2B-245B-11E4-AF98-689423260CF8
}

private var IID___x_ABI_CWindows_CFoundation_CIMemoryBufferReference: test_component.IID {
    .init(Data1: 0xFBC4DD29, Data2: 0x245B, Data3: 0x11E4, Data4: ( 0xAF,0x98,0x68,0x94,0x23,0x26,0x0C,0xF8 ))// FBC4DD29-245B-11E4-AF98-689423260CF8
}

private var IID___x_ABI_CWindows_CFoundation_CIPropertyValue: test_component.IID {
    .init(Data1: 0x4BD682DD, Data2: 0x7554, Data3: 0x40E9, Data4: ( 0x9A,0x9B,0x82,0x65,0x4E,0xDE,0x7E,0x62 ))// 4BD682DD-7554-40E9-9A9B-82654EDE7E62
}

private var IID___x_ABI_C__FIReference_1_T: test_component.IID {
    .init(Data1: 0x61C17706, Data2: 0x2D65, Data3: 0x11E0, Data4: ( 0x9A,0xE8,0xD4,0x85,0x64,0x01,0x54,0x72 ))// 61C17706-2D65-11E0-9AE8-D48564015472
}

private var IID___x_ABI_CWindows_CFoundation_CIStringable: test_component.IID {
    .init(Data1: 0x96369F54, Data2: 0x8EB6, Data3: 0x48F0, Data4: ( 0xAB,0xCE,0xC1,0xB2,0x11,0xE6,0x27,0xC3 ))// 96369F54-8EB6-48F0-ABCE-C1B211E627C3
}

private var IID___x_ABI_CWindows_CFoundation_CIUriEscapeStatics: test_component.IID {
    .init(Data1: 0xC1D432BA, Data2: 0xC824, Data3: 0x4452, Data4: ( 0xA7,0xFD,0x51,0x2B,0xC3,0xBB,0xE9,0xA1 ))// C1D432BA-C824-4452-A7FD-512BC3BBE9A1
}

private var IID___x_ABI_CWindows_CFoundation_CIUriRuntimeClass: test_component.IID {
    .init(Data1: 0x9E365E57, Data2: 0x48B2, Data3: 0x4160, Data4: ( 0x95,0x6F,0xC7,0x38,0x51,0x20,0xBB,0xFC ))// 9E365E57-48B2-4160-956F-C7385120BBFC
}

private var IID___x_ABI_CWindows_CFoundation_CIUriRuntimeClassFactory: test_component.IID {
    .init(Data1: 0x44A9796F, Data2: 0x723E, Data3: 0x4FDF, Data4: ( 0xA2,0x18,0x03,0x3E,0x75,0xB0,0xC0,0x84 ))// 44A9796F-723E-4FDF-A218-033E75B0C084
}

private var IID___x_ABI_CWindows_CFoundation_CIUriRuntimeClassWithAbsoluteCanonicalUri: test_component.IID {
    .init(Data1: 0x758D9661, Data2: 0x221C, Data3: 0x480F, Data4: ( 0xA3,0x39,0x50,0x65,0x66,0x73,0xF4,0x6F ))// 758D9661-221C-480F-A339-50656673F46F
}

private var IID___x_ABI_CWindows_CFoundation_CIWwwFormUrlDecoderEntry: test_component.IID {
    .init(Data1: 0x125E7431, Data2: 0xF678, Data3: 0x4E8E, Data4: ( 0xB6,0x70,0x20,0xA9,0xB0,0x6C,0x51,0x2D ))// 125E7431-F678-4E8E-B670-20A9B06C512D
}

private var IID___x_ABI_CWindows_CFoundation_CIWwwFormUrlDecoderRuntimeClass: test_component.IID {
    .init(Data1: 0xD45A0451, Data2: 0xF225, Data3: 0x4542, Data4: ( 0x92,0x96,0x0E,0x1D,0xF5,0xD2,0x54,0xDF ))// D45A0451-F225-4542-9296-0E1DF5D254DF
}

private var IID___x_ABI_CWindows_CFoundation_CIWwwFormUrlDecoderRuntimeClassFactory: test_component.IID {
    .init(Data1: 0x5B8C6B3D, Data2: 0x24AE, Data3: 0x41B5, Data4: ( 0xA1,0xBF,0xF0,0xC3,0xD5,0x44,0x84,0x5B ))// 5B8C6B3D-24AE-41B5-A1BF-F0C3D544845B
}

private var IID___x_ABI_CWindows_CFoundation_CIAsyncActionCompletedHandler: test_component.IID {
    .init(Data1: 0xA4ED5C81, Data2: 0x76C9, Data3: 0x40BD, Data4: ( 0x8B,0xE6,0xB1,0xD9,0x0F,0xB2,0x0A,0xE7 ))// A4ED5C81-76C9-40BD-8BE6-B1D90FB20AE7
}

private var IID___x_ABI_C__FIAsyncOperationCompletedHandler_1_TResult: test_component.IID {
    .init(Data1: 0xFCDCF02C, Data2: 0xE5D8, Data3: 0x4478, Data4: ( 0x91,0x5A,0x4D,0x90,0xB7,0x4B,0x83,0xA5 ))// FCDCF02C-E5D8-4478-915A-4D90B74B83A5
}

private var IID___x_ABI_C__FIAsyncOperationProgressHandler_2_TResult_TProgress: test_component.IID {
    .init(Data1: 0x55690902, Data2: 0x0AAB, Data3: 0x421A, Data4: ( 0x87,0x78,0xF8,0xCE,0x50,0x26,0xD7,0x58 ))// 55690902-0AAB-421A-8778-F8CE5026D758
}

private var IID___x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2_TResult_TProgress: test_component.IID {
    .init(Data1: 0xE85DF41D, Data2: 0x6AA7, Data3: 0x46E3, Data4: ( 0xA8,0xE2,0xF0,0x09,0xD8,0x40,0xC6,0x27 ))// E85DF41D-6AA7-46E3-A8E2-F009D840C627
}

private var IID___x_ABI_CWindows_CFoundation_CIDeferralCompletedHandler: test_component.IID {
    .init(Data1: 0xED32A372, Data2: 0xF3C8, Data3: 0x4FAA, Data4: ( 0x9C,0xFB,0x47,0x01,0x48,0xDA,0x38,0x88 ))// ED32A372-F3C8-4FAA-9CFB-470148DA3888
}

private var IID___x_ABI_C__FIEventHandler_1_T: test_component.IID {
    .init(Data1: 0x9DE1C535, Data2: 0x6AE1, Data3: 0x11E0, Data4: ( 0x84,0xE1,0x18,0xA9,0x05,0xBC,0xC5,0x3F ))// 9DE1C535-6AE1-11E0-84E1-18A905BCC53F
}

private var IID___x_ABI_C__FITypedEventHandler_2_TSender_TResult: test_component.IID {
    .init(Data1: 0x9DE1C534, Data2: 0x6AE1, Data3: 0x11E0, Data4: ( 0x84,0xE1,0x18,0xA9,0x05,0xBC,0xC5,0x3F ))// 9DE1C534-6AE1-11E0-84E1-18A905BCC53F
}

@_spi(WinRTInternal)
public enum __ABI_Windows_Foundation {
    public class IAsyncAction: test_component.IInspectable {
        override public class var IID: test_component.IID { IID___x_ABI_CWindows_CFoundation_CIAsyncAction }

        open func put_Completed(_ handler: test_component.AsyncActionCompletedHandler?) throws {
            let handlerWrapper = __ABI_Windows_Foundation.AsyncActionCompletedHandlerWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CWindows_CFoundation_CIAsyncAction.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Completed(pThis, _handler))
            }
        }

        open func get_Completed() throws -> test_component.AsyncActionCompletedHandler? {
            let (handler) = try ComPtrs.initialize { handlerAbi in
                _ = try perform(as: __x_ABI_CWindows_CFoundation_CIAsyncAction.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Completed(pThis, &handlerAbi))
                }
            }
            return __ABI_Windows_Foundation.AsyncActionCompletedHandlerWrapper.unwrapFrom(abi: handler)
        }

        open func GetResults() throws {
            _ = try perform(as: __x_ABI_CWindows_CFoundation_CIAsyncAction.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetResults(pThis))
            }
        }

    }

    internal static var IAsyncActionVTable: __x_ABI_CWindows_CFoundation_CIAsyncActionVtbl = .init(
        QueryInterface: { IAsyncActionWrapper.queryInterface($0, $1, $2) },
        AddRef: { IAsyncActionWrapper.addRef($0) },
        Release: { IAsyncActionWrapper.release($0) },
        GetIids: {
            let size = MemoryLayout<test_component.IID>.size
            let iids = CoTaskMemAlloc(UInt64(size) * 4).assumingMemoryBound(to: test_component.IID.self)
            iids[0] = IUnknown.IID
            iids[1] = IInspectable.IID
            iids[2] = __ABI_Windows_Foundation.IAsyncActionWrapper.IID
            iids[3] = __ABI_Windows_Foundation.IAsyncInfoWrapper.IID
            $1!.pointee = 4
            $2!.pointee = iids
            return S_OK
        },

        GetRuntimeClassName: {
            _ = $0
            let hstring = try! HString("Windows.Foundation.IAsyncAction").detach()
            $1!.pointee = hstring
            return S_OK
        },

        GetTrustLevel: {
            _ = $0
            $1!.pointee = TrustLevel(rawValue: 0)
            return S_OK
        },

        put_Completed: {
            guard let __unwrapped__instance = IAsyncActionWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            guard let handler = __ABI_Windows_Foundation.AsyncActionCompletedHandlerWrapper.unwrapFrom(abi: ComPtr($1)) else { return E_INVALIDARG }
            __unwrapped__instance.completed = handler
            return S_OK
        },

        get_Completed: {
            guard let __unwrapped__instance = IAsyncActionWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let handler = __unwrapped__instance.completed
            let handlerWrapper = __ABI_Windows_Foundation.AsyncActionCompletedHandlerWrapper(handler)
            handlerWrapper?.copyTo($1)
            return S_OK
        },

        GetResults: {
            do {
                guard let __unwrapped__instance = IAsyncActionWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                try __unwrapped__instance.getResults()
                return S_OK
            } catch { return failWith(error: error) }
        }
    )

    public typealias IAsyncActionWrapper = InterfaceWrapperBase<__IMPL_Windows_Foundation.IAsyncActionBridge>
    public class IAsyncInfo: test_component.IInspectable {
        override public class var IID: test_component.IID { IID___x_ABI_CWindows_CFoundation_CIAsyncInfo }

        open func get_Id() throws -> UInt32 {
            var result: UINT32 = 0
            _ = try perform(as: __x_ABI_CWindows_CFoundation_CIAsyncInfo.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Id(pThis, &result))
            }
            return result
        }

        open func get_Status() throws -> test_component.AsyncStatus {
            var result: __x_ABI_CWindows_CFoundation_CAsyncStatus = .init(0)
            _ = try perform(as: __x_ABI_CWindows_CFoundation_CIAsyncInfo.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Status(pThis, &result))
            }
            return result
        }

        open func get_ErrorCode() throws -> HRESULT {
            var result: HRESULT = 0
            _ = try perform(as: __x_ABI_CWindows_CFoundation_CIAsyncInfo.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ErrorCode(pThis, &result))
            }
            return result
        }

        open func Cancel() throws {
            _ = try perform(as: __x_ABI_CWindows_CFoundation_CIAsyncInfo.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Cancel(pThis))
            }
        }

        open func Close() throws {
            _ = try perform(as: __x_ABI_CWindows_CFoundation_CIAsyncInfo.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Close(pThis))
            }
        }

    }

    internal static var IAsyncInfoVTable: __x_ABI_CWindows_CFoundation_CIAsyncInfoVtbl = .init(
        QueryInterface: { IAsyncInfoWrapper.queryInterface($0, $1, $2) },
        AddRef: { IAsyncInfoWrapper.addRef($0) },
        Release: { IAsyncInfoWrapper.release($0) },
        GetIids: {
            let size = MemoryLayout<test_component.IID>.size
            let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: test_component.IID.self)
            iids[0] = IUnknown.IID
            iids[1] = IInspectable.IID
            iids[2] = __ABI_Windows_Foundation.IAsyncInfoWrapper.IID
            $1!.pointee = 3
            $2!.pointee = iids
            return S_OK
        },

        GetRuntimeClassName: {
            _ = $0
            let hstring = try! HString("Windows.Foundation.IAsyncInfo").detach()
            $1!.pointee = hstring
            return S_OK
        },

        GetTrustLevel: {
            _ = $0
            $1!.pointee = TrustLevel(rawValue: 0)
            return S_OK
        },

        get_Id: {
            guard let __unwrapped__instance = IAsyncInfoWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let result = __unwrapped__instance.id
            $1?.initialize(to: result)
            return S_OK
        },

        get_Status: {
            guard let __unwrapped__instance = IAsyncInfoWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let result = __unwrapped__instance.status
            $1?.initialize(to: result)
            return S_OK
        },

        get_ErrorCode: {
            guard let __unwrapped__instance = IAsyncInfoWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let result = __unwrapped__instance.errorCode
            $1?.initialize(to: result)
            return S_OK
        },

        Cancel: {
            do {
                guard let __unwrapped__instance = IAsyncInfoWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                try __unwrapped__instance.cancel()
                return S_OK
            } catch { return failWith(error: error) }
        },

        Close: {
            do {
                guard let __unwrapped__instance = IAsyncInfoWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                try __unwrapped__instance.close()
                return S_OK
            } catch { return failWith(error: error) }
        }
    )

    public typealias IAsyncInfoWrapper = InterfaceWrapperBase<__IMPL_Windows_Foundation.IAsyncInfoBridge>
    public class IClosable: test_component.IInspectable {
        override public class var IID: test_component.IID { IID___x_ABI_CWindows_CFoundation_CIClosable }

        open func Close() throws {
            _ = try perform(as: __x_ABI_CWindows_CFoundation_CIClosable.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Close(pThis))
            }
        }

    }

    internal static var IClosableVTable: __x_ABI_CWindows_CFoundation_CIClosableVtbl = .init(
        QueryInterface: { IClosableWrapper.queryInterface($0, $1, $2) },
        AddRef: { IClosableWrapper.addRef($0) },
        Release: { IClosableWrapper.release($0) },
        GetIids: {
            let size = MemoryLayout<test_component.IID>.size
            let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: test_component.IID.self)
            iids[0] = IUnknown.IID
            iids[1] = IInspectable.IID
            iids[2] = __ABI_Windows_Foundation.IClosableWrapper.IID
            $1!.pointee = 3
            $2!.pointee = iids
            return S_OK
        },

        GetRuntimeClassName: {
            _ = $0
            let hstring = try! HString("Windows.Foundation.IClosable").detach()
            $1!.pointee = hstring
            return S_OK
        },

        GetTrustLevel: {
            _ = $0
            $1!.pointee = TrustLevel(rawValue: 0)
            return S_OK
        },

        Close: {
            do {
                guard let __unwrapped__instance = IClosableWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                try __unwrapped__instance.close()
                return S_OK
            } catch { return failWith(error: error) }
        }
    )

    public typealias IClosableWrapper = InterfaceWrapperBase<__IMPL_Windows_Foundation.IClosableBridge>
    public class IDeferral: test_component.IInspectable {
        override public class var IID: test_component.IID { IID___x_ABI_CWindows_CFoundation_CIDeferral }

        public func Complete() throws {
            _ = try perform(as: __x_ABI_CWindows_CFoundation_CIDeferral.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Complete(pThis))
            }
        }

    }

    public class IDeferralFactory: test_component.IInspectable {
        override public class var IID: test_component.IID { IID___x_ABI_CWindows_CFoundation_CIDeferralFactory }

        public func Create(_ handler: test_component.DeferralCompletedHandler?) throws -> IDeferral {
            let (result) = try ComPtrs.initialize { resultAbi in
                let handlerWrapper = __ABI_Windows_Foundation.DeferralCompletedHandlerWrapper(handler)
                let _handler = try! handlerWrapper?.toABI { $0 }
                _ = try perform(as: __x_ABI_CWindows_CFoundation_CIDeferralFactory.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.Create(pThis, _handler, &resultAbi))
                }
            }
            return IDeferral(result!)
        }

    }

    public class IMemoryBuffer: test_component.IInspectable {
        override public class var IID: test_component.IID { IID___x_ABI_CWindows_CFoundation_CIMemoryBuffer }

        open func CreateReference() throws -> test_component.AnyIMemoryBufferReference? {
            let (reference) = try ComPtrs.initialize { referenceAbi in
                _ = try perform(as: __x_ABI_CWindows_CFoundation_CIMemoryBuffer.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateReference(pThis, &referenceAbi))
                }
            }
            return __ABI_Windows_Foundation.IMemoryBufferReferenceWrapper.unwrapFrom(abi: reference)
        }

    }

    internal static var IMemoryBufferVTable: __x_ABI_CWindows_CFoundation_CIMemoryBufferVtbl = .init(
        QueryInterface: { IMemoryBufferWrapper.queryInterface($0, $1, $2) },
        AddRef: { IMemoryBufferWrapper.addRef($0) },
        Release: { IMemoryBufferWrapper.release($0) },
        GetIids: {
            let size = MemoryLayout<test_component.IID>.size
            let iids = CoTaskMemAlloc(UInt64(size) * 4).assumingMemoryBound(to: test_component.IID.self)
            iids[0] = IUnknown.IID
            iids[1] = IInspectable.IID
            iids[2] = __ABI_Windows_Foundation.IMemoryBufferWrapper.IID
            iids[3] = __ABI_Windows_Foundation.IClosableWrapper.IID
            $1!.pointee = 4
            $2!.pointee = iids
            return S_OK
        },

        GetRuntimeClassName: {
            _ = $0
            let hstring = try! HString("Windows.Foundation.IMemoryBuffer").detach()
            $1!.pointee = hstring
            return S_OK
        },

        GetTrustLevel: {
            _ = $0
            $1!.pointee = TrustLevel(rawValue: 0)
            return S_OK
        },

        CreateReference: {
            do {
                guard let __unwrapped__instance = IMemoryBufferWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let reference = try __unwrapped__instance.createReference()
                let referenceWrapper = __ABI_Windows_Foundation.IMemoryBufferReferenceWrapper(reference)
                referenceWrapper?.copyTo($1)
                return S_OK
            } catch { return failWith(error: error) }
        }
    )

    public typealias IMemoryBufferWrapper = InterfaceWrapperBase<__IMPL_Windows_Foundation.IMemoryBufferBridge>
    public class IMemoryBufferFactory: test_component.IInspectable {
        override public class var IID: test_component.IID { IID___x_ABI_CWindows_CFoundation_CIMemoryBufferFactory }

        public func Create(_ capacity: UInt32) throws -> IMemoryBuffer {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CFoundation_CIMemoryBufferFactory.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.Create(pThis, capacity, &valueAbi))
                }
            }
            return IMemoryBuffer(value!)
        }

    }

    public class IMemoryBufferReference: test_component.IInspectable {
        override public class var IID: test_component.IID { IID___x_ABI_CWindows_CFoundation_CIMemoryBufferReference }

        open func get_Capacity() throws -> UInt32 {
            var value: UINT32 = 0
            _ = try perform(as: __x_ABI_CWindows_CFoundation_CIMemoryBufferReference.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Capacity(pThis, &value))
            }
            return value
        }

        open func add_Closed(_ handler: TypedEventHandler<test_component.AnyIMemoryBufferReference?, Any?>?) throws -> EventRegistrationToken {
            var cookie: EventRegistrationToken = .init()
            let handlerWrapper = test_component.__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CFoundation__CIMemoryBufferReference_IInspectableWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CWindows_CFoundation_CIMemoryBufferReference.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_Closed(pThis, _handler, &cookie))
            }
            return cookie
        }

        open func remove_Closed(_ cookie: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CWindows_CFoundation_CIMemoryBufferReference.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_Closed(pThis, cookie))
            }
        }

    }

    internal static var IMemoryBufferReferenceVTable: __x_ABI_CWindows_CFoundation_CIMemoryBufferReferenceVtbl = .init(
        QueryInterface: { IMemoryBufferReferenceWrapper.queryInterface($0, $1, $2) },
        AddRef: { IMemoryBufferReferenceWrapper.addRef($0) },
        Release: { IMemoryBufferReferenceWrapper.release($0) },
        GetIids: {
            let size = MemoryLayout<test_component.IID>.size
            let iids = CoTaskMemAlloc(UInt64(size) * 5).assumingMemoryBound(to: test_component.IID.self)
            iids[0] = IUnknown.IID
            iids[1] = IInspectable.IID
            iids[2] = __ABI_Windows_Foundation.IMemoryBufferReferenceWrapper.IID
            iids[3] = __ABI_Windows_Foundation.IClosableWrapper.IID
            iids[4] = __ABI_.IMemoryBufferByteAccessWrapper.IID
            $1!.pointee = 5
            $2!.pointee = iids
            return S_OK
        },

        GetRuntimeClassName: {
            _ = $0
            let hstring = try! HString("Windows.Foundation.IMemoryBufferReference").detach()
            $1!.pointee = hstring
            return S_OK
        },

        GetTrustLevel: {
            _ = $0
            $1!.pointee = TrustLevel(rawValue: 0)
            return S_OK
        },

        get_Capacity: {
            guard let __unwrapped__instance = IMemoryBufferReferenceWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value = __unwrapped__instance.capacity
            $1?.initialize(to: value)
            return S_OK
        },

        add_Closed: {
            guard let __unwrapped__instance = IMemoryBufferReferenceWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            guard let handler = test_component.__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CFoundation__CIMemoryBufferReference_IInspectableWrapper.unwrapFrom(abi: ComPtr($1)) else { return E_INVALIDARG }
            let cookie = __unwrapped__instance.closed.addHandler(handler)
            $2?.initialize(to: .from(swift: cookie))
            return S_OK
        },

        remove_Closed: {
            guard let __unwrapped__instance = IMemoryBufferReferenceWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let cookie: EventRegistrationToken = $1
            __unwrapped__instance.closed.removeHandler(cookie)
            return S_OK
        }
    )

    public typealias IMemoryBufferReferenceWrapper = InterfaceWrapperBase<__IMPL_Windows_Foundation.IMemoryBufferReferenceBridge>
    public class IPropertyValue: test_component.IInspectable {
        override public class var IID: test_component.IID { IID___x_ABI_CWindows_CFoundation_CIPropertyValue }

        open func get_Type() throws -> test_component.PropertyType {
            var value: __x_ABI_CWindows_CFoundation_CPropertyType = .init(0)
            _ = try perform(as: __x_ABI_CWindows_CFoundation_CIPropertyValue.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Type(pThis, &value))
            }
            return value
        }

        open func get_IsNumericScalar() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CWindows_CFoundation_CIPropertyValue.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsNumericScalar(pThis, &value))
            }
            return .init(from: value)
        }

        open func GetUInt8() throws -> UInt8 {
            var value: UINT8 = 0
            _ = try perform(as: __x_ABI_CWindows_CFoundation_CIPropertyValue.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetUInt8(pThis, &value))
            }
            return value
        }

        open func GetInt16() throws -> Int16 {
            var value: INT16 = 0
            _ = try perform(as: __x_ABI_CWindows_CFoundation_CIPropertyValue.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetInt16(pThis, &value))
            }
            return value
        }

        open func GetUInt16() throws -> UInt16 {
            var value: UINT16 = 0
            _ = try perform(as: __x_ABI_CWindows_CFoundation_CIPropertyValue.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetUInt16(pThis, &value))
            }
            return value
        }

        open func GetInt32() throws -> Int32 {
            var value: INT32 = 0
            _ = try perform(as: __x_ABI_CWindows_CFoundation_CIPropertyValue.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetInt32(pThis, &value))
            }
            return value
        }

        open func GetUInt32() throws -> UInt32 {
            var value: UINT32 = 0
            _ = try perform(as: __x_ABI_CWindows_CFoundation_CIPropertyValue.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetUInt32(pThis, &value))
            }
            return value
        }

        open func GetInt64() throws -> Int64 {
            var value: INT64 = 0
            _ = try perform(as: __x_ABI_CWindows_CFoundation_CIPropertyValue.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetInt64(pThis, &value))
            }
            return value
        }

        open func GetUInt64() throws -> UInt64 {
            var value: UINT64 = 0
            _ = try perform(as: __x_ABI_CWindows_CFoundation_CIPropertyValue.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetUInt64(pThis, &value))
            }
            return value
        }

        open func GetSingle() throws -> Float {
            var value: FLOAT = 0.0
            _ = try perform(as: __x_ABI_CWindows_CFoundation_CIPropertyValue.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetSingle(pThis, &value))
            }
            return value
        }

        open func GetDouble() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CWindows_CFoundation_CIPropertyValue.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetDouble(pThis, &value))
            }
            return value
        }

        open func GetChar16() throws -> Character {
            var value: WCHAR = 0
            _ = try perform(as: __x_ABI_CWindows_CFoundation_CIPropertyValue.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetChar16(pThis, &value))
            }
            return .init(from: value)
        }

        open func GetBoolean() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CWindows_CFoundation_CIPropertyValue.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetBoolean(pThis, &value))
            }
            return .init(from: value)
        }

        open func GetString() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CWindows_CFoundation_CIPropertyValue.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetString(pThis, &value))
            }
            return .init(from: value)
        }

        open func GetGuid() throws -> Foundation.UUID {
            var value: test_component.GUID = .init()
            _ = try perform(as: __x_ABI_CWindows_CFoundation_CIPropertyValue.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetGuid(pThis, &value))
            }
            return .init(from: value)
        }

        open func GetDateTime() throws -> test_component.DateTime {
            var value: __x_ABI_CWindows_CFoundation_CDateTime = .init()
            _ = try perform(as: __x_ABI_CWindows_CFoundation_CIPropertyValue.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetDateTime(pThis, &value))
            }
            return .from(abi: value)
        }

        open func GetTimeSpan() throws -> test_component.TimeSpan {
            var value: __x_ABI_CWindows_CFoundation_CTimeSpan = .init()
            _ = try perform(as: __x_ABI_CWindows_CFoundation_CIPropertyValue.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetTimeSpan(pThis, &value))
            }
            return .from(abi: value)
        }

        open func GetPoint() throws -> test_component.Point {
            var value: __x_ABI_CWindows_CFoundation_CPoint = .init()
            _ = try perform(as: __x_ABI_CWindows_CFoundation_CIPropertyValue.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetPoint(pThis, &value))
            }
            return .from(abi: value)
        }

        open func GetSize() throws -> test_component.Size {
            var value: __x_ABI_CWindows_CFoundation_CSize = .init()
            _ = try perform(as: __x_ABI_CWindows_CFoundation_CIPropertyValue.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetSize(pThis, &value))
            }
            return .from(abi: value)
        }

        open func GetRect() throws -> test_component.Rect {
            var value: __x_ABI_CWindows_CFoundation_CRect = .init()
            _ = try perform(as: __x_ABI_CWindows_CFoundation_CIPropertyValue.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetRect(pThis, &value))
            }
            return .from(abi: value)
        }

        open func GetUInt8Array(_ value: inout [UInt8]) throws {
            var _value: WinRTArrayAbi<UINT8> = (0, nil)
            _ = try perform(as: __x_ABI_CWindows_CFoundation_CIPropertyValue.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetUInt8Array(pThis, &_value.count, &_value.start))
            }
            defer { CoTaskMemFree(_value.start) }
            value = .from(abi: _value)
        }

        open func GetInt16Array(_ value: inout [Int16]) throws {
            var _value: WinRTArrayAbi<INT16> = (0, nil)
            _ = try perform(as: __x_ABI_CWindows_CFoundation_CIPropertyValue.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetInt16Array(pThis, &_value.count, &_value.start))
            }
            defer { CoTaskMemFree(_value.start) }
            value = .from(abi: _value)
        }

        open func GetUInt16Array(_ value: inout [UInt16]) throws {
            var _value: WinRTArrayAbi<UINT16> = (0, nil)
            _ = try perform(as: __x_ABI_CWindows_CFoundation_CIPropertyValue.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetUInt16Array(pThis, &_value.count, &_value.start))
            }
            defer { CoTaskMemFree(_value.start) }
            value = .from(abi: _value)
        }

        open func GetInt32Array(_ value: inout [Int32]) throws {
            var _value: WinRTArrayAbi<INT32> = (0, nil)
            _ = try perform(as: __x_ABI_CWindows_CFoundation_CIPropertyValue.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetInt32Array(pThis, &_value.count, &_value.start))
            }
            defer { CoTaskMemFree(_value.start) }
            value = .from(abi: _value)
        }

        open func GetUInt32Array(_ value: inout [UInt32]) throws {
            var _value: WinRTArrayAbi<UINT32> = (0, nil)
            _ = try perform(as: __x_ABI_CWindows_CFoundation_CIPropertyValue.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetUInt32Array(pThis, &_value.count, &_value.start))
            }
            defer { CoTaskMemFree(_value.start) }
            value = .from(abi: _value)
        }

        open func GetInt64Array(_ value: inout [Int64]) throws {
            var _value: WinRTArrayAbi<INT64> = (0, nil)
            _ = try perform(as: __x_ABI_CWindows_CFoundation_CIPropertyValue.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetInt64Array(pThis, &_value.count, &_value.start))
            }
            defer { CoTaskMemFree(_value.start) }
            value = .from(abi: _value)
        }

        open func GetUInt64Array(_ value: inout [UInt64]) throws {
            var _value: WinRTArrayAbi<UINT64> = (0, nil)
            _ = try perform(as: __x_ABI_CWindows_CFoundation_CIPropertyValue.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetUInt64Array(pThis, &_value.count, &_value.start))
            }
            defer { CoTaskMemFree(_value.start) }
            value = .from(abi: _value)
        }

        open func GetSingleArray(_ value: inout [Float]) throws {
            var _value: WinRTArrayAbi<FLOAT> = (0, nil)
            _ = try perform(as: __x_ABI_CWindows_CFoundation_CIPropertyValue.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetSingleArray(pThis, &_value.count, &_value.start))
            }
            defer { CoTaskMemFree(_value.start) }
            value = .from(abi: _value)
        }

        open func GetDoubleArray(_ value: inout [Double]) throws {
            var _value: WinRTArrayAbi<DOUBLE> = (0, nil)
            _ = try perform(as: __x_ABI_CWindows_CFoundation_CIPropertyValue.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetDoubleArray(pThis, &_value.count, &_value.start))
            }
            defer { CoTaskMemFree(_value.start) }
            value = .from(abi: _value)
        }

        open func GetChar16Array(_ value: inout [Character]) throws {
            var _value: WinRTArrayAbi<WCHAR> = (0, nil)
            _ = try perform(as: __x_ABI_CWindows_CFoundation_CIPropertyValue.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetChar16Array(pThis, &_value.count, &_value.start))
            }
            defer { CoTaskMemFree(_value.start) }
            value = .from(abi: _value)
        }

        open func GetBooleanArray(_ value: inout [Bool]) throws {
            var _value: WinRTArrayAbi<boolean> = (0, nil)
            _ = try perform(as: __x_ABI_CWindows_CFoundation_CIPropertyValue.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetBooleanArray(pThis, &_value.count, &_value.start))
            }
            defer { CoTaskMemFree(_value.start) }
            value = .from(abi: _value)
        }

        open func GetStringArray(_ value: inout [String]) throws {
            var _value: WinRTArrayAbi<HSTRING?> = (0, nil)
            _ = try perform(as: __x_ABI_CWindows_CFoundation_CIPropertyValue.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetStringArray(pThis, &_value.count, &_value.start))
            }
            defer { CoTaskMemFree(_value.start) }
            value = .from(abi: _value)
        }

        open func GetInspectableArray(_ value: inout [Any?]) throws {
            var _value: WinRTArrayAbi<UnsafeMutablePointer<C_IInspectable>?> = (0, nil)
            _ = try perform(as: __x_ABI_CWindows_CFoundation_CIPropertyValue.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetInspectableArray(pThis, &_value.count, &_value.start))
            }
            defer { CoTaskMemFree(_value.start) }
            value = .from(abiBridge: __IMPL_.AnyBridge.self, abi: _value)
        }

        open func GetGuidArray(_ value: inout [Foundation.UUID]) throws {
            var _value: WinRTArrayAbi<test_component.GUID> = (0, nil)
            _ = try perform(as: __x_ABI_CWindows_CFoundation_CIPropertyValue.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetGuidArray(pThis, &_value.count, &_value.start))
            }
            defer { CoTaskMemFree(_value.start) }
            value = .from(abi: _value)
        }

        open func GetDateTimeArray(_ value: inout [test_component.DateTime]) throws {
            var _value: WinRTArrayAbi<__x_ABI_CWindows_CFoundation_CDateTime> = (0, nil)
            _ = try perform(as: __x_ABI_CWindows_CFoundation_CIPropertyValue.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetDateTimeArray(pThis, &_value.count, &_value.start))
            }
            defer { CoTaskMemFree(_value.start) }
            value = .from(abi: _value)
        }

        open func GetTimeSpanArray(_ value: inout [test_component.TimeSpan]) throws {
            var _value: WinRTArrayAbi<__x_ABI_CWindows_CFoundation_CTimeSpan> = (0, nil)
            _ = try perform(as: __x_ABI_CWindows_CFoundation_CIPropertyValue.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetTimeSpanArray(pThis, &_value.count, &_value.start))
            }
            defer { CoTaskMemFree(_value.start) }
            value = .from(abi: _value)
        }

        open func GetPointArray(_ value: inout [test_component.Point]) throws {
            var _value: WinRTArrayAbi<__x_ABI_CWindows_CFoundation_CPoint> = (0, nil)
            _ = try perform(as: __x_ABI_CWindows_CFoundation_CIPropertyValue.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetPointArray(pThis, &_value.count, &_value.start))
            }
            defer { CoTaskMemFree(_value.start) }
            value = .from(abi: _value)
        }

        open func GetSizeArray(_ value: inout [test_component.Size]) throws {
            var _value: WinRTArrayAbi<__x_ABI_CWindows_CFoundation_CSize> = (0, nil)
            _ = try perform(as: __x_ABI_CWindows_CFoundation_CIPropertyValue.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetSizeArray(pThis, &_value.count, &_value.start))
            }
            defer { CoTaskMemFree(_value.start) }
            value = .from(abi: _value)
        }

        open func GetRectArray(_ value: inout [test_component.Rect]) throws {
            var _value: WinRTArrayAbi<__x_ABI_CWindows_CFoundation_CRect> = (0, nil)
            _ = try perform(as: __x_ABI_CWindows_CFoundation_CIPropertyValue.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetRectArray(pThis, &_value.count, &_value.start))
            }
            defer { CoTaskMemFree(_value.start) }
            value = .from(abi: _value)
        }

    }

    internal static var IPropertyValueVTable: __x_ABI_CWindows_CFoundation_CIPropertyValueVtbl = .init(
        QueryInterface: { IPropertyValueWrapper.queryInterface($0, $1, $2) },
        AddRef: { IPropertyValueWrapper.addRef($0) },
        Release: { IPropertyValueWrapper.release($0) },
        GetIids: {
            let size = MemoryLayout<test_component.IID>.size
            let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: test_component.IID.self)
            iids[0] = IUnknown.IID
            iids[1] = IInspectable.IID
            iids[2] = __ABI_Windows_Foundation.IPropertyValueWrapper.IID
            $1!.pointee = 3
            $2!.pointee = iids
            return S_OK
        },

        GetRuntimeClassName: {
            _ = $0
            let hstring = try! HString("Windows.Foundation.IPropertyValue").detach()
            $1!.pointee = hstring
            return S_OK
        },

        GetTrustLevel: {
            _ = $0
            $1!.pointee = TrustLevel(rawValue: 0)
            return S_OK
        },

        get_Type: {
            guard let __unwrapped__instance = IPropertyValueWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value = __unwrapped__instance.type
            $1?.initialize(to: value)
            return S_OK
        },

        get_IsNumericScalar: {
            guard let __unwrapped__instance = IPropertyValueWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value = __unwrapped__instance.isNumericScalar
            $1?.initialize(to: .init(from: value))
            return S_OK
        },

        GetUInt8: {
            do {
                guard let __unwrapped__instance = IPropertyValueWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let value = try __unwrapped__instance.getUInt8()
                $1?.initialize(to: value)
                return S_OK
            } catch { return failWith(error: error) }
        },

        GetInt16: {
            do {
                guard let __unwrapped__instance = IPropertyValueWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let value = try __unwrapped__instance.getInt16()
                $1?.initialize(to: value)
                return S_OK
            } catch { return failWith(error: error) }
        },

        GetUInt16: {
            do {
                guard let __unwrapped__instance = IPropertyValueWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let value = try __unwrapped__instance.getUInt16()
                $1?.initialize(to: value)
                return S_OK
            } catch { return failWith(error: error) }
        },

        GetInt32: {
            do {
                guard let __unwrapped__instance = IPropertyValueWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let value = try __unwrapped__instance.getInt32()
                $1?.initialize(to: value)
                return S_OK
            } catch { return failWith(error: error) }
        },

        GetUInt32: {
            do {
                guard let __unwrapped__instance = IPropertyValueWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let value = try __unwrapped__instance.getUInt32()
                $1?.initialize(to: value)
                return S_OK
            } catch { return failWith(error: error) }
        },

        GetInt64: {
            do {
                guard let __unwrapped__instance = IPropertyValueWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let value = try __unwrapped__instance.getInt64()
                $1?.initialize(to: value)
                return S_OK
            } catch { return failWith(error: error) }
        },

        GetUInt64: {
            do {
                guard let __unwrapped__instance = IPropertyValueWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let value = try __unwrapped__instance.getUInt64()
                $1?.initialize(to: value)
                return S_OK
            } catch { return failWith(error: error) }
        },

        GetSingle: {
            do {
                guard let __unwrapped__instance = IPropertyValueWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let value = try __unwrapped__instance.getSingle()
                $1?.initialize(to: value)
                return S_OK
            } catch { return failWith(error: error) }
        },

        GetDouble: {
            do {
                guard let __unwrapped__instance = IPropertyValueWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let value = try __unwrapped__instance.getDouble()
                $1?.initialize(to: value)
                return S_OK
            } catch { return failWith(error: error) }
        },

        GetChar16: {
            do {
                guard let __unwrapped__instance = IPropertyValueWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let value = try __unwrapped__instance.getChar16()
                $1?.initialize(to: .init(from: value))
                return S_OK
            } catch { return failWith(error: error) }
        },

        GetBoolean: {
            do {
                guard let __unwrapped__instance = IPropertyValueWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let value = try __unwrapped__instance.getBoolean()
                $1?.initialize(to: .init(from: value))
                return S_OK
            } catch { return failWith(error: error) }
        },

        GetString: {
            do {
                guard let __unwrapped__instance = IPropertyValueWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let value = try __unwrapped__instance.getString()
                $1?.initialize(to: try! HString(value).detach())
                return S_OK
            } catch { return failWith(error: error) }
        },

        GetGuid: {
            do {
                guard let __unwrapped__instance = IPropertyValueWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let value = try __unwrapped__instance.getGuid()
                $1?.initialize(to: .init(from: value))
                return S_OK
            } catch { return failWith(error: error) }
        },

        GetDateTime: {
            do {
                guard let __unwrapped__instance = IPropertyValueWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let value = try __unwrapped__instance.getDateTime()
                $1?.initialize(to: .from(swift: value))
                return S_OK
            } catch { return failWith(error: error) }
        },

        GetTimeSpan: {
            do {
                guard let __unwrapped__instance = IPropertyValueWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let value = try __unwrapped__instance.getTimeSpan()
                $1?.initialize(to: .from(swift: value))
                return S_OK
            } catch { return failWith(error: error) }
        },

        GetPoint: {
            do {
                guard let __unwrapped__instance = IPropertyValueWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let value = try __unwrapped__instance.getPoint()
                $1?.initialize(to: .from(swift: value))
                return S_OK
            } catch { return failWith(error: error) }
        },

        GetSize: {
            do {
                guard let __unwrapped__instance = IPropertyValueWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let value = try __unwrapped__instance.getSize()
                $1?.initialize(to: .from(swift: value))
                return S_OK
            } catch { return failWith(error: error) }
        },

        GetRect: {
            do {
                guard let __unwrapped__instance = IPropertyValueWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let value = try __unwrapped__instance.getRect()
                $1?.initialize(to: .from(swift: value))
                return S_OK
            } catch { return failWith(error: error) }
        },

        GetUInt8Array: {
            do {
                guard let __unwrapped__instance = IPropertyValueWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                var value = [UInt8]()
                try __unwrapped__instance.getUInt8Array(&value)
                $1?.initialize(to: UInt32(value.count))
                value.fill(abi: $2)
                return S_OK
            } catch { return failWith(error: error) }
        },

        GetInt16Array: {
            do {
                guard let __unwrapped__instance = IPropertyValueWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                var value = [Int16]()
                try __unwrapped__instance.getInt16Array(&value)
                $1?.initialize(to: UInt32(value.count))
                value.fill(abi: $2)
                return S_OK
            } catch { return failWith(error: error) }
        },

        GetUInt16Array: {
            do {
                guard let __unwrapped__instance = IPropertyValueWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                var value = [UInt16]()
                try __unwrapped__instance.getUInt16Array(&value)
                $1?.initialize(to: UInt32(value.count))
                value.fill(abi: $2)
                return S_OK
            } catch { return failWith(error: error) }
        },

        GetInt32Array: {
            do {
                guard let __unwrapped__instance = IPropertyValueWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                var value = [Int32]()
                try __unwrapped__instance.getInt32Array(&value)
                $1?.initialize(to: UInt32(value.count))
                value.fill(abi: $2)
                return S_OK
            } catch { return failWith(error: error) }
        },

        GetUInt32Array: {
            do {
                guard let __unwrapped__instance = IPropertyValueWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                var value = [UInt32]()
                try __unwrapped__instance.getUInt32Array(&value)
                $1?.initialize(to: UInt32(value.count))
                value.fill(abi: $2)
                return S_OK
            } catch { return failWith(error: error) }
        },

        GetInt64Array: {
            do {
                guard let __unwrapped__instance = IPropertyValueWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                var value = [Int64]()
                try __unwrapped__instance.getInt64Array(&value)
                $1?.initialize(to: UInt32(value.count))
                value.fill(abi: $2)
                return S_OK
            } catch { return failWith(error: error) }
        },

        GetUInt64Array: {
            do {
                guard let __unwrapped__instance = IPropertyValueWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                var value = [UInt64]()
                try __unwrapped__instance.getUInt64Array(&value)
                $1?.initialize(to: UInt32(value.count))
                value.fill(abi: $2)
                return S_OK
            } catch { return failWith(error: error) }
        },

        GetSingleArray: {
            do {
                guard let __unwrapped__instance = IPropertyValueWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                var value = [Float]()
                try __unwrapped__instance.getSingleArray(&value)
                $1?.initialize(to: UInt32(value.count))
                value.fill(abi: $2)
                return S_OK
            } catch { return failWith(error: error) }
        },

        GetDoubleArray: {
            do {
                guard let __unwrapped__instance = IPropertyValueWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                var value = [Double]()
                try __unwrapped__instance.getDoubleArray(&value)
                $1?.initialize(to: UInt32(value.count))
                value.fill(abi: $2)
                return S_OK
            } catch { return failWith(error: error) }
        },

        GetChar16Array: {
            do {
                guard let __unwrapped__instance = IPropertyValueWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                var value = [Character]()
                try __unwrapped__instance.getChar16Array(&value)
                $1?.initialize(to: UInt32(value.count))
                do {
                    try value.fill(abi: $2)
                } catch { return failWith(error: error) }
                return S_OK
            } catch { return failWith(error: error) }
        },

        GetBooleanArray: {
            do {
                guard let __unwrapped__instance = IPropertyValueWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                var value = [Bool]()
                try __unwrapped__instance.getBooleanArray(&value)
                $1?.initialize(to: UInt32(value.count))
                do {
                    try value.fill(abi: $2)
                } catch { return failWith(error: error) }
                return S_OK
            } catch { return failWith(error: error) }
        },

        GetStringArray: {
            do {
                guard let __unwrapped__instance = IPropertyValueWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                var value = [String]()
                try __unwrapped__instance.getStringArray(&value)
                $1?.initialize(to: UInt32(value.count))
                do {
                    try value.fill(abi: $2)
                } catch { return failWith(error: error) }
                return S_OK
            } catch { return failWith(error: error) }
        },

        GetInspectableArray: {
            do {
                guard let __unwrapped__instance = IPropertyValueWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                var value = [Any?]()
                try __unwrapped__instance.getInspectableArray(&value)
                $1?.initialize(to: UInt32(value.count))
                value.fill(abi: $2, abiBridge: __IMPL_.AnyBridge.self)
                return S_OK
            } catch { return failWith(error: error) }
        },

        GetGuidArray: {
            do {
                guard let __unwrapped__instance = IPropertyValueWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                var value = [Foundation.UUID]()
                try __unwrapped__instance.getGuidArray(&value)
                $1?.initialize(to: UInt32(value.count))
                do {
                    try value.fill(abi: $2)
                } catch { return failWith(error: error) }
                return S_OK
            } catch { return failWith(error: error) }
        },

        GetDateTimeArray: {
            do {
                guard let __unwrapped__instance = IPropertyValueWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                var value = [test_component.DateTime]()
                try __unwrapped__instance.getDateTimeArray(&value)
                $1?.initialize(to: UInt32(value.count))
                do {
                    try value.fill(abi: $2)
                } catch { return failWith(error: error) }
                return S_OK
            } catch { return failWith(error: error) }
        },

        GetTimeSpanArray: {
            do {
                guard let __unwrapped__instance = IPropertyValueWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                var value = [test_component.TimeSpan]()
                try __unwrapped__instance.getTimeSpanArray(&value)
                $1?.initialize(to: UInt32(value.count))
                do {
                    try value.fill(abi: $2)
                } catch { return failWith(error: error) }
                return S_OK
            } catch { return failWith(error: error) }
        },

        GetPointArray: {
            do {
                guard let __unwrapped__instance = IPropertyValueWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                var value = [test_component.Point]()
                try __unwrapped__instance.getPointArray(&value)
                $1?.initialize(to: UInt32(value.count))
                do {
                    try value.fill(abi: $2)
                } catch { return failWith(error: error) }
                return S_OK
            } catch { return failWith(error: error) }
        },

        GetSizeArray: {
            do {
                guard let __unwrapped__instance = IPropertyValueWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                var value = [test_component.Size]()
                try __unwrapped__instance.getSizeArray(&value)
                $1?.initialize(to: UInt32(value.count))
                do {
                    try value.fill(abi: $2)
                } catch { return failWith(error: error) }
                return S_OK
            } catch { return failWith(error: error) }
        },

        GetRectArray: {
            do {
                guard let __unwrapped__instance = IPropertyValueWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                var value = [test_component.Rect]()
                try __unwrapped__instance.getRectArray(&value)
                $1?.initialize(to: UInt32(value.count))
                do {
                    try value.fill(abi: $2)
                } catch { return failWith(error: error) }
                return S_OK
            } catch { return failWith(error: error) }
        }
    )

    public typealias IPropertyValueWrapper = InterfaceWrapperBase<__IMPL_Windows_Foundation.IPropertyValueBridge>
    public class IStringable: test_component.IInspectable {
        override public class var IID: test_component.IID { IID___x_ABI_CWindows_CFoundation_CIStringable }

        open func ToString() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CWindows_CFoundation_CIStringable.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.ToString(pThis, &value))
            }
            return .init(from: value)
        }

    }

    internal static var IStringableVTable: __x_ABI_CWindows_CFoundation_CIStringableVtbl = .init(
        QueryInterface: { IStringableWrapper.queryInterface($0, $1, $2) },
        AddRef: { IStringableWrapper.addRef($0) },
        Release: { IStringableWrapper.release($0) },
        GetIids: {
            let size = MemoryLayout<test_component.IID>.size
            let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: test_component.IID.self)
            iids[0] = IUnknown.IID
            iids[1] = IInspectable.IID
            iids[2] = __ABI_Windows_Foundation.IStringableWrapper.IID
            $1!.pointee = 3
            $2!.pointee = iids
            return S_OK
        },

        GetRuntimeClassName: {
            _ = $0
            let hstring = try! HString("Windows.Foundation.IStringable").detach()
            $1!.pointee = hstring
            return S_OK
        },

        GetTrustLevel: {
            _ = $0
            $1!.pointee = TrustLevel(rawValue: 0)
            return S_OK
        },

        ToString: {
            do {
                guard let __unwrapped__instance = IStringableWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let value = try __unwrapped__instance.toString()
                $1?.initialize(to: try! HString(value).detach())
                return S_OK
            } catch { return failWith(error: error) }
        }
    )

    public typealias IStringableWrapper = InterfaceWrapperBase<__IMPL_Windows_Foundation.IStringableBridge>
    public class IUriEscapeStatics: test_component.IInspectable {
        override public class var IID: test_component.IID { IID___x_ABI_CWindows_CFoundation_CIUriEscapeStatics }

        public func UnescapeComponent(_ toUnescape: String) throws -> String {
            var value: HSTRING?
            let _toUnescape = try! HString(toUnescape)
            _ = try perform(as: __x_ABI_CWindows_CFoundation_CIUriEscapeStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.UnescapeComponent(pThis, _toUnescape.get(), &value))
            }
            return .init(from: value)
        }

        public func EscapeComponent(_ toEscape: String) throws -> String {
            var value: HSTRING?
            let _toEscape = try! HString(toEscape)
            _ = try perform(as: __x_ABI_CWindows_CFoundation_CIUriEscapeStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.EscapeComponent(pThis, _toEscape.get(), &value))
            }
            return .init(from: value)
        }

    }

    public class IUriRuntimeClass: test_component.IInspectable {
        override public class var IID: test_component.IID { IID___x_ABI_CWindows_CFoundation_CIUriRuntimeClass }

        public func get_AbsoluteUri() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CWindows_CFoundation_CIUriRuntimeClass.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_AbsoluteUri(pThis, &value))
            }
            return .init(from: value)
        }

        public func get_DisplayUri() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CWindows_CFoundation_CIUriRuntimeClass.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_DisplayUri(pThis, &value))
            }
            return .init(from: value)
        }

        public func get_Domain() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CWindows_CFoundation_CIUriRuntimeClass.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Domain(pThis, &value))
            }
            return .init(from: value)
        }

        public func get_Extension() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CWindows_CFoundation_CIUriRuntimeClass.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Extension(pThis, &value))
            }
            return .init(from: value)
        }

        public func get_Fragment() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CWindows_CFoundation_CIUriRuntimeClass.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Fragment(pThis, &value))
            }
            return .init(from: value)
        }

        public func get_Host() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CWindows_CFoundation_CIUriRuntimeClass.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Host(pThis, &value))
            }
            return .init(from: value)
        }

        public func get_Password() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CWindows_CFoundation_CIUriRuntimeClass.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Password(pThis, &value))
            }
            return .init(from: value)
        }

        public func get_Path() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CWindows_CFoundation_CIUriRuntimeClass.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Path(pThis, &value))
            }
            return .init(from: value)
        }

        public func get_Query() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CWindows_CFoundation_CIUriRuntimeClass.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Query(pThis, &value))
            }
            return .init(from: value)
        }

        public func get_QueryParsed() throws -> test_component.WwwFormUrlDecoder? {
            let (ppWwwFormUrlDecoder) = try ComPtrs.initialize { ppWwwFormUrlDecoderAbi in
                _ = try perform(as: __x_ABI_CWindows_CFoundation_CIUriRuntimeClass.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_QueryParsed(pThis, &ppWwwFormUrlDecoderAbi))
                }
            }
            return __IMPL_Windows_Foundation.WwwFormUrlDecoderBridge.from(abi: ppWwwFormUrlDecoder)
        }

        public func get_RawUri() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CWindows_CFoundation_CIUriRuntimeClass.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_RawUri(pThis, &value))
            }
            return .init(from: value)
        }

        public func get_SchemeName() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CWindows_CFoundation_CIUriRuntimeClass.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_SchemeName(pThis, &value))
            }
            return .init(from: value)
        }

        public func get_UserName() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CWindows_CFoundation_CIUriRuntimeClass.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_UserName(pThis, &value))
            }
            return .init(from: value)
        }

        public func get_Port() throws -> Int32 {
            var value: INT32 = 0
            _ = try perform(as: __x_ABI_CWindows_CFoundation_CIUriRuntimeClass.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Port(pThis, &value))
            }
            return value
        }

        public func get_Suspicious() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CWindows_CFoundation_CIUriRuntimeClass.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Suspicious(pThis, &value))
            }
            return .init(from: value)
        }

        public func Equals(_ pUri: test_component.Uri?) throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CWindows_CFoundation_CIUriRuntimeClass.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Equals(pThis, RawPointer(pUri), &value))
            }
            return .init(from: value)
        }

        public func CombineUri(_ relativeUri: String) throws -> test_component.Uri? {
            let (instance) = try ComPtrs.initialize { instanceAbi in
                let _relativeUri = try! HString(relativeUri)
                _ = try perform(as: __x_ABI_CWindows_CFoundation_CIUriRuntimeClass.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CombineUri(pThis, _relativeUri.get(), &instanceAbi))
                }
            }
            return __IMPL_Windows_Foundation.UriBridge.from(abi: instance)
        }

    }

    public class IUriRuntimeClassFactory: test_component.IInspectable {
        override public class var IID: test_component.IID { IID___x_ABI_CWindows_CFoundation_CIUriRuntimeClassFactory }

        public func CreateUri(_ uri: String) throws -> IUriRuntimeClass {
            let (instance) = try ComPtrs.initialize { instanceAbi in
                let _uri = try! HString(uri)
                _ = try perform(as: __x_ABI_CWindows_CFoundation_CIUriRuntimeClassFactory.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateUri(pThis, _uri.get(), &instanceAbi))
                }
            }
            return IUriRuntimeClass(instance!)
        }

        public func CreateWithRelativeUri(_ baseUri: String, _ relativeUri: String) throws -> IUriRuntimeClass {
            let (instance) = try ComPtrs.initialize { instanceAbi in
                let _baseUri = try! HString(baseUri)
                let _relativeUri = try! HString(relativeUri)
                _ = try perform(as: __x_ABI_CWindows_CFoundation_CIUriRuntimeClassFactory.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateWithRelativeUri(pThis, _baseUri.get(), _relativeUri.get(), &instanceAbi))
                }
            }
            return IUriRuntimeClass(instance!)
        }

    }

    public class IUriRuntimeClassWithAbsoluteCanonicalUri: test_component.IInspectable {
        override public class var IID: test_component.IID { IID___x_ABI_CWindows_CFoundation_CIUriRuntimeClassWithAbsoluteCanonicalUri }

        public func get_AbsoluteCanonicalUri() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CWindows_CFoundation_CIUriRuntimeClassWithAbsoluteCanonicalUri.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_AbsoluteCanonicalUri(pThis, &value))
            }
            return .init(from: value)
        }

        public func get_DisplayIri() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CWindows_CFoundation_CIUriRuntimeClassWithAbsoluteCanonicalUri.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_DisplayIri(pThis, &value))
            }
            return .init(from: value)
        }

    }

    public class IWwwFormUrlDecoderEntry: test_component.IInspectable {
        override public class var IID: test_component.IID { IID___x_ABI_CWindows_CFoundation_CIWwwFormUrlDecoderEntry }

        open func get_Name() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CWindows_CFoundation_CIWwwFormUrlDecoderEntry.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Name(pThis, &value))
            }
            return .init(from: value)
        }

        open func get_Value() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CWindows_CFoundation_CIWwwFormUrlDecoderEntry.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Value(pThis, &value))
            }
            return .init(from: value)
        }

    }

    internal static var IWwwFormUrlDecoderEntryVTable: __x_ABI_CWindows_CFoundation_CIWwwFormUrlDecoderEntryVtbl = .init(
        QueryInterface: { IWwwFormUrlDecoderEntryWrapper.queryInterface($0, $1, $2) },
        AddRef: { IWwwFormUrlDecoderEntryWrapper.addRef($0) },
        Release: { IWwwFormUrlDecoderEntryWrapper.release($0) },
        GetIids: {
            let size = MemoryLayout<test_component.IID>.size
            let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: test_component.IID.self)
            iids[0] = IUnknown.IID
            iids[1] = IInspectable.IID
            iids[2] = __ABI_Windows_Foundation.IWwwFormUrlDecoderEntryWrapper.IID
            $1!.pointee = 3
            $2!.pointee = iids
            return S_OK
        },

        GetRuntimeClassName: {
            _ = $0
            let hstring = try! HString("Windows.Foundation.IWwwFormUrlDecoderEntry").detach()
            $1!.pointee = hstring
            return S_OK
        },

        GetTrustLevel: {
            _ = $0
            $1!.pointee = TrustLevel(rawValue: 0)
            return S_OK
        },

        get_Name: {
            guard let __unwrapped__instance = IWwwFormUrlDecoderEntryWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value = __unwrapped__instance.name
            $1?.initialize(to: try! HString(value).detach())
            return S_OK
        },

        get_Value: {
            guard let __unwrapped__instance = IWwwFormUrlDecoderEntryWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value = __unwrapped__instance.value
            $1?.initialize(to: try! HString(value).detach())
            return S_OK
        }
    )

    public typealias IWwwFormUrlDecoderEntryWrapper = InterfaceWrapperBase<__IMPL_Windows_Foundation.IWwwFormUrlDecoderEntryBridge>
    public class IWwwFormUrlDecoderRuntimeClass: test_component.IInspectable {
        override public class var IID: test_component.IID { IID___x_ABI_CWindows_CFoundation_CIWwwFormUrlDecoderRuntimeClass }

        public func GetFirstValueByName(_ name: String) throws -> String {
            var phstrValue: HSTRING?
            let _name = try! HString(name)
            _ = try perform(as: __x_ABI_CWindows_CFoundation_CIWwwFormUrlDecoderRuntimeClass.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetFirstValueByName(pThis, _name.get(), &phstrValue))
            }
            return .init(from: phstrValue)
        }

    }

    public class IWwwFormUrlDecoderRuntimeClassFactory: test_component.IInspectable {
        override public class var IID: test_component.IID { IID___x_ABI_CWindows_CFoundation_CIWwwFormUrlDecoderRuntimeClassFactory }

        public func CreateWwwFormUrlDecoder(_ query: String) throws -> IWwwFormUrlDecoderRuntimeClass {
            let (instance) = try ComPtrs.initialize { instanceAbi in
                let _query = try! HString(query)
                _ = try perform(as: __x_ABI_CWindows_CFoundation_CIWwwFormUrlDecoderRuntimeClassFactory.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateWwwFormUrlDecoder(pThis, _query.get(), &instanceAbi))
                }
            }
            return IWwwFormUrlDecoderRuntimeClass(instance!)
        }

    }

}
extension __x_ABI_CWindows_CFoundation_CDateTime {
        public static func from(swift: test_component.DateTime) -> __x_ABI_CWindows_CFoundation_CDateTime {
            .init(UniversalTime: swift.universalTime)
        }
    }
    extension __x_ABI_CWindows_CFoundation_CPoint {
        public static func from(swift: test_component.Point) -> __x_ABI_CWindows_CFoundation_CPoint {
            .init(X: swift.x, Y: swift.y)
        }
    }
    extension __x_ABI_CWindows_CFoundation_CRect {
        public static func from(swift: test_component.Rect) -> __x_ABI_CWindows_CFoundation_CRect {
            .init(X: swift.x, Y: swift.y, Width: swift.width, Height: swift.height)
        }
    }
    extension __x_ABI_CWindows_CFoundation_CSize {
        public static func from(swift: test_component.Size) -> __x_ABI_CWindows_CFoundation_CSize {
            .init(Width: swift.width, Height: swift.height)
        }
    }
    extension __x_ABI_CWindows_CFoundation_CTimeSpan {
        public static func from(swift: test_component.TimeSpan) -> __x_ABI_CWindows_CFoundation_CTimeSpan {
            .init(Duration: swift.duration)
        }
    }
    // MARK - AsyncActionCompletedHandler
extension __ABI_Windows_Foundation {
    public class AsyncActionCompletedHandler: test_component.IUnknown {
        override public class var IID: test_component.IID { IID___x_ABI_CWindows_CFoundation_CIAsyncActionCompletedHandler }

        open func Invoke(_ asyncInfo: test_component.AnyIAsyncAction?, _ asyncStatus: test_component.AsyncStatus) throws {
            let asyncInfoWrapper = __ABI_Windows_Foundation.IAsyncActionWrapper(asyncInfo)
            let _asyncInfo = try! asyncInfoWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CWindows_CFoundation_CIAsyncActionCompletedHandler.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Invoke(pThis, _asyncInfo, asyncStatus))
            }
        }

    }


    typealias AsyncActionCompletedHandlerWrapper = InterfaceWrapperBase<__IMPL_Windows_Foundation.AsyncActionCompletedHandlerBridge>
    internal static var AsyncActionCompletedHandlerVTable: __x_ABI_CWindows_CFoundation_CIAsyncActionCompletedHandlerVtbl = .init(
        QueryInterface: { AsyncActionCompletedHandlerWrapper.queryInterface($0, $1, $2) },
        AddRef: { AsyncActionCompletedHandlerWrapper.addRef($0) },
        Release: { AsyncActionCompletedHandlerWrapper.release($0) },
        Invoke: {
            do {
                guard let __unwrapped__instance = AsyncActionCompletedHandlerWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let asyncInfo: test_component.AnyIAsyncAction? = __ABI_Windows_Foundation.IAsyncActionWrapper.unwrapFrom(abi: ComPtr($1))
                let asyncStatus: test_component.AsyncStatus = $2
                try __unwrapped__instance(asyncInfo, asyncStatus)
                return S_OK
            } catch { return failWith(error: error) }
        }
    )
}
public extension WinRTDelegateBridge where CABI == __x_ABI_CWindows_CFoundation_CIAsyncActionCompletedHandler {
    static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__ABI_Windows_Foundation.AsyncActionCompletedHandlerVTable) { $0 }
        return .init(lpVtbl:vtblPtr)
    }
}

// MARK - DeferralCompletedHandler
extension __ABI_Windows_Foundation {
    public class DeferralCompletedHandler: test_component.IUnknown {
        override public class var IID: test_component.IID { IID___x_ABI_CWindows_CFoundation_CIDeferralCompletedHandler }

        open func Invoke() throws {
            _ = try perform(as: __x_ABI_CWindows_CFoundation_CIDeferralCompletedHandler.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Invoke(pThis))
            }
        }

    }


    typealias DeferralCompletedHandlerWrapper = InterfaceWrapperBase<__IMPL_Windows_Foundation.DeferralCompletedHandlerBridge>
    internal static var DeferralCompletedHandlerVTable: __x_ABI_CWindows_CFoundation_CIDeferralCompletedHandlerVtbl = .init(
        QueryInterface: { DeferralCompletedHandlerWrapper.queryInterface($0, $1, $2) },
        AddRef: { DeferralCompletedHandlerWrapper.addRef($0) },
        Release: { DeferralCompletedHandlerWrapper.release($0) },
        Invoke: {
            do {
                guard let __unwrapped__instance = DeferralCompletedHandlerWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                try __unwrapped__instance()
                return S_OK
            } catch { return failWith(error: error) }
        }
    )
}
public extension WinRTDelegateBridge where CABI == __x_ABI_CWindows_CFoundation_CIDeferralCompletedHandler {
    static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__ABI_Windows_Foundation.DeferralCompletedHandlerVTable) { $0 }
        return .init(lpVtbl:vtblPtr)
    }
}


// WARNING: Please don't edit this file. It was generated by Swift/WinRT v0.0.1
// swiftlint:disable all
import Foundation
import Ctest_component

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.istoragefolder)
public protocol IStorageFolder : IStorageItem {
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.istoragefolder.createfileasync)
    func createFileAsync(_ desiredName: String) throws -> test_component.AnyIAsyncOperation<test_component.StorageFile?>!
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.istoragefolder.createfileasync)
    func createFileAsync(_ desiredName: String, _ options: test_component.CreationCollisionOption) throws -> test_component.AnyIAsyncOperation<test_component.StorageFile?>!
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.istoragefolder.createfolderasync)
    func createFolderAsync(_ desiredName: String) throws -> test_component.AnyIAsyncOperation<test_component.StorageFolder?>!
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.istoragefolder.createfolderasync)
    func createFolderAsync(_ desiredName: String, _ options: test_component.CreationCollisionOption) throws -> test_component.AnyIAsyncOperation<test_component.StorageFolder?>!
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.istoragefolder.getfileasync)
    func getFileAsync(_ name: String) throws -> test_component.AnyIAsyncOperation<test_component.StorageFile?>!
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.istoragefolder.getfolderasync)
    func getFolderAsync(_ name: String) throws -> test_component.AnyIAsyncOperation<test_component.StorageFolder?>!
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.istoragefolder.getitemasync)
    func getItemAsync(_ name: String) throws -> test_component.AnyIAsyncOperation<test_component.AnyIStorageItem?>!
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.istoragefolder.getfilesasync)
    func getFilesAsync() throws -> test_component.AnyIAsyncOperation<test_component.AnyIVectorView<test_component.StorageFile?>?>!
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.istoragefolder.getfoldersasync)
    func getFoldersAsync() throws -> test_component.AnyIAsyncOperation<test_component.AnyIVectorView<test_component.StorageFolder?>?>!
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.istoragefolder.getitemsasync)
    func getItemsAsync() throws -> test_component.AnyIAsyncOperation<test_component.AnyIVectorView<test_component.AnyIStorageItem?>?>!
}

extension IStorageFolder {
    public func queryInterface(_ iid: test_component.IID) -> IUnknownRef? {
        switch iid {
            case __ABI_Windows_Storage.IStorageFolderWrapper.IID:
                let wrapper = __ABI_Windows_Storage.IStorageFolderWrapper(self)
                return wrapper!.queryInterface(iid)
            case __ABI_Windows_Storage.IStorageItemWrapper.IID:
                let wrapper = __ABI_Windows_Storage.IStorageItemWrapper(self)
                return wrapper!.queryInterface(iid)
            default: return nil
        }
    }
}
public typealias AnyIStorageFolder = any IStorageFolder


// MARK: - Internals

@_spi(WinRTInternal)
extension __IMPL_Windows_Storage {
    public enum IStorageFolderBridge : AbiInterfaceBridge {
        public typealias CABI = __x_ABI_CWindows_CStorage_CIStorageFolder
        public typealias SwiftABI = __ABI_Windows_Storage.IStorageFolder
        public typealias SwiftProjection = AnyIStorageFolder
        public static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
            guard let abi = abi else { return nil }
            return IStorageFolderImpl(abi)
        }

        public static func makeAbi() -> CABI {
            let vtblPtr = withUnsafeMutablePointer(to: &__ABI_Windows_Storage.IStorageFolderVTable) { $0 }
            return .init(lpVtbl: vtblPtr)
        }
    }

    fileprivate class IStorageFolderImpl: IStorageFolder, WinRTAbiImpl {
        fileprivate typealias Bridge = IStorageFolderBridge
        fileprivate let _default: Bridge.SwiftABI
        fileprivate var thisPtr: test_component.IInspectable { _default }
        fileprivate init(_ fromAbi: ComPtr<Bridge.CABI>) {
            _default = Bridge.SwiftABI(fromAbi)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.istoragefolder.createfileasync)
        fileprivate func createFileAsync(_ desiredName: String) throws -> AnyIAsyncOperation<StorageFile?>! {
            try _default.CreateFileAsyncOverloadDefaultOptions(desiredName)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.istoragefolder.createfileasync)
        fileprivate func createFileAsync(_ desiredName: String, _ options: CreationCollisionOption) throws -> AnyIAsyncOperation<StorageFile?>! {
            try _default.CreateFileAsync(desiredName, options)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.istoragefolder.createfolderasync)
        fileprivate func createFolderAsync(_ desiredName: String) throws -> AnyIAsyncOperation<StorageFolder?>! {
            try _default.CreateFolderAsyncOverloadDefaultOptions(desiredName)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.istoragefolder.createfolderasync)
        fileprivate func createFolderAsync(_ desiredName: String, _ options: CreationCollisionOption) throws -> AnyIAsyncOperation<StorageFolder?>! {
            try _default.CreateFolderAsync(desiredName, options)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.istoragefolder.getfileasync)
        fileprivate func getFileAsync(_ name: String) throws -> AnyIAsyncOperation<StorageFile?>! {
            try _default.GetFileAsync(name)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.istoragefolder.getfolderasync)
        fileprivate func getFolderAsync(_ name: String) throws -> AnyIAsyncOperation<StorageFolder?>! {
            try _default.GetFolderAsync(name)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.istoragefolder.getitemasync)
        fileprivate func getItemAsync(_ name: String) throws -> AnyIAsyncOperation<AnyIStorageItem?>! {
            try _default.GetItemAsync(name)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.istoragefolder.getfilesasync)
        fileprivate func getFilesAsync() throws -> AnyIAsyncOperation<AnyIVectorView<StorageFile?>?>! {
            try _default.GetFilesAsyncOverloadDefaultOptionsStartAndCount()
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.istoragefolder.getfoldersasync)
        fileprivate func getFoldersAsync() throws -> AnyIAsyncOperation<AnyIVectorView<StorageFolder?>?>! {
            try _default.GetFoldersAsyncOverloadDefaultOptionsStartAndCount()
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.istoragefolder.getitemsasync)
        fileprivate func getItemsAsync() throws -> AnyIAsyncOperation<AnyIVectorView<AnyIStorageItem?>?>! {
            try _default.GetItemsAsyncOverloadDefaultStartAndCount()
        }

        private lazy var _IStorageItem: __ABI_Windows_Storage.IStorageItem! = getInterfaceForCaching()
        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.istoragefolder.renameasync)
        fileprivate func renameAsync(_ desiredName: String) throws -> test_component.AnyIAsyncAction! {
            try _IStorageItem.RenameAsyncOverloadDefaultOptions(desiredName)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.istoragefolder.renameasync)
        fileprivate func renameAsync(_ desiredName: String, _ option: NameCollisionOption) throws -> test_component.AnyIAsyncAction! {
            try _IStorageItem.RenameAsync(desiredName, option)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.istoragefolder.deleteasync)
        fileprivate func deleteAsync() throws -> test_component.AnyIAsyncAction! {
            try _IStorageItem.DeleteAsyncOverloadDefaultOptions()
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.istoragefolder.deleteasync)
        fileprivate func deleteAsync(_ option: StorageDeleteOption) throws -> test_component.AnyIAsyncAction! {
            try _IStorageItem.DeleteAsync(option)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.istoragefolder.getbasicpropertiesasync)
        fileprivate func getBasicPropertiesAsync() throws -> AnyIAsyncOperation<test_component.BasicProperties?>! {
            try _IStorageItem.GetBasicPropertiesAsync()
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.istoragefolder.isoftype)
        fileprivate func isOfType(_ type: StorageItemTypes) throws -> Bool {
            try _IStorageItem.IsOfType(type)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.istoragefolder.attributes)
        fileprivate var attributes : FileAttributes {
            get { try! _IStorageItem.get_Attributes() }
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.istoragefolder.datecreated)
        fileprivate var dateCreated : test_component.DateTime {
            get { try! _IStorageItem.get_DateCreated() }
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.istoragefolder.name)
        fileprivate var name : String {
            get { try! _IStorageItem.get_Name() }
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.istoragefolder.path)
        fileprivate var path : String {
            get { try! _IStorageItem.get_Path() }
        }

    }

}
@_spi(WinRTInternal)
extension __ABI_Windows_Storage {
    private static let IID___x_ABI_CWindows_CStorage_CIStorageFolder: test_component.IID = .init(
        Data1: 0x72D1CB78, Data2: 0xB3EF, Data3: 0x4F75, Data4: ( 0xA8,0x0B,0x6F,0xD9,0xDA,0xE2,0x94,0x4B ) // 72D1CB78-B3EF-4F75-A80B-6FD9DAE2944B
    ) 
    public class IStorageFolder: test_component.IInspectable {
        override public class var IID: test_component.IID { IID___x_ABI_CWindows_CStorage_CIStorageFolder }

        open func CreateFileAsyncOverloadDefaultOptions(_ desiredName: String) throws -> test_component.AnyIAsyncOperation<test_component.StorageFile?>? {
            let (operation) = try ComPtrs.initialize { operationAbi in
                let _desiredName = try! HString(desiredName)
                _ = try perform(as: __x_ABI_CWindows_CStorage_CIStorageFolder.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateFileAsyncOverloadDefaultOptions(pThis, _desiredName.get(), &operationAbi))
                }
            }
            return test_component.__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStorageFileWrapper.unwrapFrom(abi: operation)
        }

        open func CreateFileAsync(_ desiredName: String, _ options: test_component.CreationCollisionOption) throws -> test_component.AnyIAsyncOperation<test_component.StorageFile?>? {
            let (operation) = try ComPtrs.initialize { operationAbi in
                let _desiredName = try! HString(desiredName)
                _ = try perform(as: __x_ABI_CWindows_CStorage_CIStorageFolder.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateFileAsync(pThis, _desiredName.get(), options, &operationAbi))
                }
            }
            return test_component.__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStorageFileWrapper.unwrapFrom(abi: operation)
        }

        open func CreateFolderAsyncOverloadDefaultOptions(_ desiredName: String) throws -> test_component.AnyIAsyncOperation<test_component.StorageFolder?>? {
            let (operation) = try ComPtrs.initialize { operationAbi in
                let _desiredName = try! HString(desiredName)
                _ = try perform(as: __x_ABI_CWindows_CStorage_CIStorageFolder.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateFolderAsyncOverloadDefaultOptions(pThis, _desiredName.get(), &operationAbi))
                }
            }
            return test_component.__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStorageFolderWrapper.unwrapFrom(abi: operation)
        }

        open func CreateFolderAsync(_ desiredName: String, _ options: test_component.CreationCollisionOption) throws -> test_component.AnyIAsyncOperation<test_component.StorageFolder?>? {
            let (operation) = try ComPtrs.initialize { operationAbi in
                let _desiredName = try! HString(desiredName)
                _ = try perform(as: __x_ABI_CWindows_CStorage_CIStorageFolder.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateFolderAsync(pThis, _desiredName.get(), options, &operationAbi))
                }
            }
            return test_component.__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStorageFolderWrapper.unwrapFrom(abi: operation)
        }

        open func GetFileAsync(_ name: String) throws -> test_component.AnyIAsyncOperation<test_component.StorageFile?>? {
            let (operation) = try ComPtrs.initialize { operationAbi in
                let _name = try! HString(name)
                _ = try perform(as: __x_ABI_CWindows_CStorage_CIStorageFolder.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetFileAsync(pThis, _name.get(), &operationAbi))
                }
            }
            return test_component.__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStorageFileWrapper.unwrapFrom(abi: operation)
        }

        open func GetFolderAsync(_ name: String) throws -> test_component.AnyIAsyncOperation<test_component.StorageFolder?>? {
            let (operation) = try ComPtrs.initialize { operationAbi in
                let _name = try! HString(name)
                _ = try perform(as: __x_ABI_CWindows_CStorage_CIStorageFolder.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetFolderAsync(pThis, _name.get(), &operationAbi))
                }
            }
            return test_component.__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStorageFolderWrapper.unwrapFrom(abi: operation)
        }

        open func GetItemAsync(_ name: String) throws -> test_component.AnyIAsyncOperation<test_component.AnyIStorageItem?>? {
            let (operation) = try ComPtrs.initialize { operationAbi in
                let _name = try! HString(name)
                _ = try perform(as: __x_ABI_CWindows_CStorage_CIStorageFolder.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetItemAsync(pThis, _name.get(), &operationAbi))
                }
            }
            return test_component.__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CIStorageItemWrapper.unwrapFrom(abi: operation)
        }

        open func GetFilesAsyncOverloadDefaultOptionsStartAndCount() throws -> test_component.AnyIAsyncOperation<test_component.AnyIVectorView<test_component.StorageFile?>?>? {
            let (operation) = try ComPtrs.initialize { operationAbi in
                _ = try perform(as: __x_ABI_CWindows_CStorage_CIStorageFolder.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetFilesAsyncOverloadDefaultOptionsStartAndCount(pThis, &operationAbi))
                }
            }
            return test_component.__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CStorageFileWrapper.unwrapFrom(abi: operation)
        }

        open func GetFoldersAsyncOverloadDefaultOptionsStartAndCount() throws -> test_component.AnyIAsyncOperation<test_component.AnyIVectorView<test_component.StorageFolder?>?>? {
            let (operation) = try ComPtrs.initialize { operationAbi in
                _ = try perform(as: __x_ABI_CWindows_CStorage_CIStorageFolder.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetFoldersAsyncOverloadDefaultOptionsStartAndCount(pThis, &operationAbi))
                }
            }
            return test_component.__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CStorageFolderWrapper.unwrapFrom(abi: operation)
        }

        open func GetItemsAsyncOverloadDefaultStartAndCount() throws -> test_component.AnyIAsyncOperation<test_component.AnyIVectorView<test_component.AnyIStorageItem?>?>? {
            let (operation) = try ComPtrs.initialize { operationAbi in
                _ = try perform(as: __x_ABI_CWindows_CStorage_CIStorageFolder.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetItemsAsyncOverloadDefaultStartAndCount(pThis, &operationAbi))
                }
            }
            return test_component.__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CIStorageItemWrapper.unwrapFrom(abi: operation)
        }

    }

    internal static var IStorageFolderVTable: __x_ABI_CWindows_CStorage_CIStorageFolderVtbl = .init(
        QueryInterface: { IStorageFolderWrapper.queryInterface($0, $1, $2) },
        AddRef: { IStorageFolderWrapper.addRef($0) },
        Release: { IStorageFolderWrapper.release($0) },
        GetIids: {
            let size = MemoryLayout<test_component.IID>.size
            let iids = CoTaskMemAlloc(UInt64(size) * 4).assumingMemoryBound(to: test_component.IID.self)
            iids[0] = IUnknown.IID
            iids[1] = IInspectable.IID
            iids[2] = __ABI_Windows_Storage.IStorageFolderWrapper.IID
            iids[3] = __ABI_Windows_Storage.IStorageItemWrapper.IID
            $1!.pointee = 4
            $2!.pointee = iids
            return S_OK
        },

        GetRuntimeClassName: {
            _ = $0
            let hstring = try! HString("Windows.Storage.IStorageFolder").detach()
            $1!.pointee = hstring
            return S_OK
        },

        GetTrustLevel: {
            _ = $0
            $1!.pointee = TrustLevel(rawValue: 0)
            return S_OK
        },

        CreateFileAsyncOverloadDefaultOptions: {
            do {
                guard let __unwrapped__instance = IStorageFolderWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let desiredName: String = .init(from: $1)
                let operation = try __unwrapped__instance.createFileAsync(desiredName)
                let operationWrapper = test_component.__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStorageFileWrapper(operation)
                operationWrapper?.copyTo($2)
                return S_OK
            } catch { return failWith(error: error) }
        },

        CreateFileAsync: {
            do {
                guard let __unwrapped__instance = IStorageFolderWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let desiredName: String = .init(from: $1)
                let options: test_component.CreationCollisionOption = $2
                let operation = try __unwrapped__instance.createFileAsync(desiredName, options)
                let operationWrapper = test_component.__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStorageFileWrapper(operation)
                operationWrapper?.copyTo($3)
                return S_OK
            } catch { return failWith(error: error) }
        },

        CreateFolderAsyncOverloadDefaultOptions: {
            do {
                guard let __unwrapped__instance = IStorageFolderWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let desiredName: String = .init(from: $1)
                let operation = try __unwrapped__instance.createFolderAsync(desiredName)
                let operationWrapper = test_component.__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStorageFolderWrapper(operation)
                operationWrapper?.copyTo($2)
                return S_OK
            } catch { return failWith(error: error) }
        },

        CreateFolderAsync: {
            do {
                guard let __unwrapped__instance = IStorageFolderWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let desiredName: String = .init(from: $1)
                let options: test_component.CreationCollisionOption = $2
                let operation = try __unwrapped__instance.createFolderAsync(desiredName, options)
                let operationWrapper = test_component.__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStorageFolderWrapper(operation)
                operationWrapper?.copyTo($3)
                return S_OK
            } catch { return failWith(error: error) }
        },

        GetFileAsync: {
            do {
                guard let __unwrapped__instance = IStorageFolderWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let name: String = .init(from: $1)
                let operation = try __unwrapped__instance.getFileAsync(name)
                let operationWrapper = test_component.__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStorageFileWrapper(operation)
                operationWrapper?.copyTo($2)
                return S_OK
            } catch { return failWith(error: error) }
        },

        GetFolderAsync: {
            do {
                guard let __unwrapped__instance = IStorageFolderWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let name: String = .init(from: $1)
                let operation = try __unwrapped__instance.getFolderAsync(name)
                let operationWrapper = test_component.__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStorageFolderWrapper(operation)
                operationWrapper?.copyTo($2)
                return S_OK
            } catch { return failWith(error: error) }
        },

        GetItemAsync: {
            do {
                guard let __unwrapped__instance = IStorageFolderWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let name: String = .init(from: $1)
                let operation = try __unwrapped__instance.getItemAsync(name)
                let operationWrapper = test_component.__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CIStorageItemWrapper(operation)
                operationWrapper?.copyTo($2)
                return S_OK
            } catch { return failWith(error: error) }
        },

        GetFilesAsyncOverloadDefaultOptionsStartAndCount: {
            do {
                guard let __unwrapped__instance = IStorageFolderWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let operation = try __unwrapped__instance.getFilesAsync()
                let operationWrapper = test_component.__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CStorageFileWrapper(operation)
                operationWrapper?.copyTo($1)
                return S_OK
            } catch { return failWith(error: error) }
        },

        GetFoldersAsyncOverloadDefaultOptionsStartAndCount: {
            do {
                guard let __unwrapped__instance = IStorageFolderWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let operation = try __unwrapped__instance.getFoldersAsync()
                let operationWrapper = test_component.__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CStorageFolderWrapper(operation)
                operationWrapper?.copyTo($1)
                return S_OK
            } catch { return failWith(error: error) }
        },

        GetItemsAsyncOverloadDefaultStartAndCount: {
            do {
                guard let __unwrapped__instance = IStorageFolderWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let operation = try __unwrapped__instance.getItemsAsync()
                let operationWrapper = test_component.__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CIStorageItemWrapper(operation)
                operationWrapper?.copyTo($1)
                return S_OK
            } catch { return failWith(error: error) }
        }
    )

    public typealias IStorageFolderWrapper = InterfaceWrapperBase<__IMPL_Windows_Storage.IStorageFolderBridge>
}
@_spi(WinRTInternal)
public class IStorageFolderMaker: MakeFromAbi {
    public typealias SwiftType = AnyIStorageFolder
    public static func from(abi: test_component.IInspectable) -> SwiftType {
        let swiftAbi: __ABI_Windows_Storage.IStorageFolder = try! abi.QueryInterface()
        return __IMPL_Windows_Storage.IStorageFolderBridge.from(abi: RawPointer(swiftAbi))!
    }
}

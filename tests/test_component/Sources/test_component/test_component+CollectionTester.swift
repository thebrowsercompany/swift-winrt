// WARNING: Please don't edit this file. It was generated by Swift/WinRT v0.0.1
// swiftlint:disable all
import Foundation
import Ctest_component

public final class CollectionTester : WinRTClass {
    private typealias SwiftABI = __ABI_test_component.ICollectionTester
    private typealias CABI = __x_ABI_Ctest__component_CICollectionTester
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: test_component.IInspectable) {
        super.init(fromAbi)
    }

    private static let _defaultFactory: test_component.IActivationFactory = try! RoGetActivationFactory("test_component.CollectionTester")
    override public init() {
        super.init(try! Self._defaultFactory.ActivateInstance())
    }

    private static let _ICollectionTesterStatics: __ABI_test_component.ICollectionTesterStatics = try! RoGetActivationFactory("test_component.CollectionTester")
    public static func inMap(_ value: AnyIMap<String, String>!) throws -> String {
        return try _ICollectionTesterStatics.InMap(value)
    }

    public static func inMapView(_ value: AnyIMapView<String, String>!) throws -> String {
        return try _ICollectionTesterStatics.InMapView(value)
    }

    public static func inVector(_ value: AnyIVector<String>!) throws -> String {
        return try _ICollectionTesterStatics.InVector(value)
    }

    public static func inVectorView(_ value: AnyIVectorView<String>!) throws -> String {
        return try _ICollectionTesterStatics.InVectorView(value)
    }

    public static func getObjectAt(_ value: AnyIVector<Any?>!, _ index: UInt32, _ callback: ObjectHandler!) throws {
        try _ICollectionTesterStatics.GetObjectAt(value, index, callback)
    }

    public static func vectorAsIterable(_ value: AnyIVector<String>!) throws -> AnyIIterable<String>! {
        return try _ICollectionTesterStatics.VectorAsIterable(value)
    }

    public func returnStoredStringVector() throws -> AnyIVector<String>! {
        try _default.ReturnStoredStringVector()
    }

    public func returnMapFromStringToString() throws -> AnyIMap<String, String>! {
        try _default.ReturnMapFromStringToString()
    }

    deinit {
        _default = nil
    }
}


// MARK: - Internals

@_spi(WinRTInternal)
extension __IMPL_test_component {
    public enum CollectionTesterBridge: AbiBridge {
        public typealias SwiftProjection = CollectionTester
        public typealias CABI = __x_ABI_Ctest__component_CICollectionTester
        public static func from(abi: ComPtr<__x_ABI_Ctest__component_CICollectionTester>?) -> CollectionTester? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: test_component.IInspectable(abi))
        }
    }

}
@_spi(WinRTInternal)
public class CollectionTesterMaker: MakeFromAbi {
    public typealias SwiftType = CollectionTester
    public static func from(abi: test_component.IInspectable) -> SwiftType {
        return CollectionTester(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
extension __ABI_test_component {
    private static let IID___x_ABI_Ctest__component_CICollectionTester: test_component.IID = .init(
        Data1: 0xF8B13FDD, Data2: 0xB785, Data3: 0x53D4, Data4: ( 0xBC,0x69,0xFA,0x7D,0x02,0xBD,0x88,0xE6 )
    ) // F8B13FDD-B785-53D4-BC69-FA7D02BD88E6
    public class ICollectionTester: test_component.IInspectable {
        override public class var IID: test_component.IID { IID___x_ABI_Ctest__component_CICollectionTester }

        public func ReturnStoredStringVector() throws -> test_component.AnyIVector<String>? {
            let (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_Ctest__component_CICollectionTester.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.ReturnStoredStringVector(pThis, &resultAbi))
                }
            }
            return test_component.__x_ABI_C__FIVector_1_HSTRINGWrapper.unwrapFrom(abi: result)
        }

        public func ReturnMapFromStringToString() throws -> test_component.AnyIMap<String, String>? {
            let (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_Ctest__component_CICollectionTester.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.ReturnMapFromStringToString(pThis, &resultAbi))
                }
            }
            return test_component.__x_ABI_C__FIMap_2_HSTRING_HSTRINGWrapper.unwrapFrom(abi: result)
        }

    }

    private static let IID___x_ABI_Ctest__component_CICollectionTesterStatics: test_component.IID = .init(
        Data1: 0xA4C0D4B5, Data2: 0xEDA2, Data3: 0x55E5, Data4: ( 0xAD,0x0F,0xCE,0x1F,0x13,0xA9,0x81,0xCC )
    ) // A4C0D4B5-EDA2-55E5-AD0F-CE1F13A981CC
    public class ICollectionTesterStatics: test_component.IInspectable {
        override public class var IID: test_component.IID { IID___x_ABI_Ctest__component_CICollectionTesterStatics }

        public func InMap(_ value: test_component.AnyIMap<String, String>?) throws -> String {
            var result: HSTRING?
            let valueWrapper = test_component.__x_ABI_C__FIMap_2_HSTRING_HSTRINGWrapper(value)
            let _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_Ctest__component_CICollectionTesterStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.InMap(pThis, _value, &result))
            }
            return .init(from: result)
        }

        public func InMapView(_ value: test_component.AnyIMapView<String, String>?) throws -> String {
            var result: HSTRING?
            let valueWrapper = test_component.__x_ABI_C__FIMapView_2_HSTRING_HSTRINGWrapper(value)
            let _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_Ctest__component_CICollectionTesterStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.InMapView(pThis, _value, &result))
            }
            return .init(from: result)
        }

        public func InVector(_ value: test_component.AnyIVector<String>?) throws -> String {
            var result: HSTRING?
            let valueWrapper = test_component.__x_ABI_C__FIVector_1_HSTRINGWrapper(value)
            let _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_Ctest__component_CICollectionTesterStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.InVector(pThis, _value, &result))
            }
            return .init(from: result)
        }

        public func InVectorView(_ value: test_component.AnyIVectorView<String>?) throws -> String {
            var result: HSTRING?
            let valueWrapper = test_component.__x_ABI_C__FIVectorView_1_HSTRINGWrapper(value)
            let _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_Ctest__component_CICollectionTesterStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.InVectorView(pThis, _value, &result))
            }
            return .init(from: result)
        }

        public func GetObjectAt(_ value: test_component.AnyIVector<Any?>?, _ index: UInt32, _ callback: test_component.ObjectHandler?) throws {
            let valueWrapper = test_component.__x_ABI_C__FIVector_1_IInspectableWrapper(value)
            let _value = try! valueWrapper?.toABI { $0 }
            let callbackWrapper = __ABI_test_component.ObjectHandlerWrapper(callback)
            let _callback = try! callbackWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_Ctest__component_CICollectionTesterStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetObjectAt(pThis, _value, index, _callback))
            }
        }

        public func VectorAsIterable(_ value: test_component.AnyIVector<String>?) throws -> test_component.AnyIIterable<String>? {
            let (result) = try ComPtrs.initialize { resultAbi in
                let valueWrapper = test_component.__x_ABI_C__FIVector_1_HSTRINGWrapper(value)
                let _value = try! valueWrapper?.toABI { $0 }
                _ = try perform(as: __x_ABI_Ctest__component_CICollectionTesterStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.VectorAsIterable(pThis, _value, &resultAbi))
                }
            }
            return test_component.__x_ABI_C__FIIterable_1_HSTRINGWrapper.unwrapFrom(abi: result)
        }

    }

}

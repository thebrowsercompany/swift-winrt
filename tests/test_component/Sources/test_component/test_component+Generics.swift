// WARNING: Please don't edit this file. It was generated by Swift/WinRT v0.0.1
// swiftlint:disable all
import Ctest_component

private var IID___x_ABI_C__FIAsyncOperationCompletedHandler_1_int: test_component.IID {
    .init(Data1: 0xd60cae9d, Data2: 0x88cb, Data3: 0x59f1, Data4: ( 0x85,0x76,0x3f,0xba,0x44,0x79,0x6b,0xe8 ))// d60cae9d-88cb-59f1-8576-3fba44796be8
}

internal extension WinRTDelegateBridge where CABI == __x_ABI_C__FIAsyncOperationCompletedHandler_1_int {
    static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &test_component.__x_ABI_C__FIAsyncOperationCompletedHandler_1_intVTable) { $0 }
        return .init(lpVtbl:vtblPtr)
    }
}

internal var __x_ABI_C__FIAsyncOperationCompletedHandler_1_intVTable: __x_ABI_C__FIAsyncOperationCompletedHandler_1_intVtbl = .init(
    QueryInterface: {
        guard let pUnk = $0, let riid = $1, let ppvObject = $2 else { return E_INVALIDARG }
        ppvObject.pointee = nil

        switch riid.pointee {
            case IUnknown.IID, IInspectable.IID, ISwiftImplemented.IID, IAgileObject.IID, __x_ABI_C__FIAsyncOperationCompletedHandler_1_intWrapper.IID:
                _ = pUnk.pointee.lpVtbl.pointee.AddRef(pUnk)
                ppvObject.pointee = UnsafeMutableRawPointer(pUnk)
                return S_OK
            default:
                return failWith(err: E_NOINTERFACE)
        }
    },

    AddRef: {
         guard let wrapper = __x_ABI_C__FIAsyncOperationCompletedHandler_1_intWrapper.fromRaw($0) else { return 1 }
         _ = wrapper.retain()
         return ULONG(_getRetainCount(wrapper.takeUnretainedValue()))
    },

    Release: {
        guard let wrapper = __x_ABI_C__FIAsyncOperationCompletedHandler_1_intWrapper.fromRaw($0) else { return 1 }
        return ULONG(_getRetainCount(wrapper.takeRetainedValue()))
    },

    Invoke: {
        guard let __unwrapped__instance = __x_ABI_C__FIAsyncOperationCompletedHandler_1_intWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let asyncInfo: test_component.AnyIAsyncOperation<Int32>? = test_component.__x_ABI_C__FIAsyncOperation_1_intWrapper.unwrapFrom(abi: $1)
        let asyncStatus: test_component.AsyncStatus = $2
        __unwrapped__instance(asyncInfo, asyncStatus)
        return S_OK
    }
)
typealias __x_ABI_C__FIAsyncOperationCompletedHandler_1_intWrapper = InterfaceWrapperBase<test_component.__x_ABI_C__FIAsyncOperationCompletedHandler_1_intImpl>
internal class AsyncOperationCompletedHandlerInt32: test_component.IUnknown {
    override public class var IID: test_component.IID { IID___x_ABI_C__FIAsyncOperationCompletedHandler_1_int }

    internal func InvokeImpl(_ asyncInfo: UnsafeMutablePointer<__x_ABI_C__FIAsyncOperation_1_int>?, _ asyncStatus: __x_ABI_CWindows_CFoundation_CAsyncStatus) throws {
        _ = try perform(as: __x_ABI_C__FIAsyncOperationCompletedHandler_1_int.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Invoke(pThis, asyncInfo, asyncStatus))
        }
    }

}

internal class __x_ABI_C__FIAsyncOperationCompletedHandler_1_intImpl : WinRTDelegateBridge {
    internal typealias Handler = AsyncOperationCompletedHandler<Int32>
    internal typealias CABI = __x_ABI_C__FIAsyncOperationCompletedHandler_1_int
    internal typealias SwiftABI = test_component.AsyncOperationCompletedHandlerInt32

    internal static func from(abi: UnsafeMutablePointer<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        let _default = SwiftABI(abi)
        let handler: Handler = { (asyncInfo, asyncStatus) in
            let asyncInfoWrapper = test_component.__x_ABI_C__FIAsyncOperation_1_intWrapper(asyncInfo)
            let _asyncInfo = try! asyncInfoWrapper?.toABI { $0 }
            try! _default.InvokeImpl(_asyncInfo, asyncStatus)
        }
        return handler
    }
}
private var IID___x_ABI_C__FIAsyncOperationProgressHandler_2_int_double: test_component.IID {
    .init(Data1: 0xc13682fc, Data2: 0x6466, Data3: 0x5af2, Data4: ( 0x8a,0x68,0x0d,0xa9,0x4b,0x50,0x64,0xf3 ))// c13682fc-6466-5af2-8a68-0da94b5064f3
}

internal extension WinRTDelegateBridge where CABI == __x_ABI_C__FIAsyncOperationProgressHandler_2_int_double {
    static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &test_component.__x_ABI_C__FIAsyncOperationProgressHandler_2_int_doubleVTable) { $0 }
        return .init(lpVtbl:vtblPtr)
    }
}

internal var __x_ABI_C__FIAsyncOperationProgressHandler_2_int_doubleVTable: __x_ABI_C__FIAsyncOperationProgressHandler_2_int_doubleVtbl = .init(
    QueryInterface: {
        guard let pUnk = $0, let riid = $1, let ppvObject = $2 else { return E_INVALIDARG }
        ppvObject.pointee = nil

        switch riid.pointee {
            case IUnknown.IID, IInspectable.IID, ISwiftImplemented.IID, IAgileObject.IID, __x_ABI_C__FIAsyncOperationProgressHandler_2_int_doubleWrapper.IID:
                _ = pUnk.pointee.lpVtbl.pointee.AddRef(pUnk)
                ppvObject.pointee = UnsafeMutableRawPointer(pUnk)
                return S_OK
            default:
                return failWith(err: E_NOINTERFACE)
        }
    },

    AddRef: {
         guard let wrapper = __x_ABI_C__FIAsyncOperationProgressHandler_2_int_doubleWrapper.fromRaw($0) else { return 1 }
         _ = wrapper.retain()
         return ULONG(_getRetainCount(wrapper.takeUnretainedValue()))
    },

    Release: {
        guard let wrapper = __x_ABI_C__FIAsyncOperationProgressHandler_2_int_doubleWrapper.fromRaw($0) else { return 1 }
        return ULONG(_getRetainCount(wrapper.takeRetainedValue()))
    },

    Invoke: {
        guard let __unwrapped__instance = __x_ABI_C__FIAsyncOperationProgressHandler_2_int_doubleWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let asyncInfo: test_component.AnyIAsyncOperationWithProgress<Int32, Double>? = test_component.__x_ABI_C__FIAsyncOperationWithProgress_2_int_doubleWrapper.unwrapFrom(abi: $1)
        let progressInfo: Double = $2
        __unwrapped__instance(asyncInfo, progressInfo)
        return S_OK
    }
)
typealias __x_ABI_C__FIAsyncOperationProgressHandler_2_int_doubleWrapper = InterfaceWrapperBase<test_component.__x_ABI_C__FIAsyncOperationProgressHandler_2_int_doubleImpl>
internal class AsyncOperationProgressHandlerInt32_Double: test_component.IUnknown {
    override public class var IID: test_component.IID { IID___x_ABI_C__FIAsyncOperationProgressHandler_2_int_double }

    internal func InvokeImpl(_ asyncInfo: UnsafeMutablePointer<__x_ABI_C__FIAsyncOperationWithProgress_2_int_double>?, _ progressInfo: DOUBLE) throws {
        _ = try perform(as: __x_ABI_C__FIAsyncOperationProgressHandler_2_int_double.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Invoke(pThis, asyncInfo, progressInfo))
        }
    }

}

internal class __x_ABI_C__FIAsyncOperationProgressHandler_2_int_doubleImpl : WinRTDelegateBridge {
    internal typealias Handler = AsyncOperationProgressHandler<Int32, Double>
    internal typealias CABI = __x_ABI_C__FIAsyncOperationProgressHandler_2_int_double
    internal typealias SwiftABI = test_component.AsyncOperationProgressHandlerInt32_Double

    internal static func from(abi: UnsafeMutablePointer<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        let _default = SwiftABI(abi)
        let handler: Handler = { (asyncInfo, progressInfo) in
            let asyncInfoWrapper = test_component.__x_ABI_C__FIAsyncOperationWithProgress_2_int_doubleWrapper(asyncInfo)
            let _asyncInfo = try! asyncInfoWrapper?.toABI { $0 }
            try! _default.InvokeImpl(_asyncInfo, progressInfo)
        }
        return handler
    }
}
private var IID___x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2_int_double: test_component.IID {
    .init(Data1: 0x42d14b3d, Data2: 0xcf9b, Data3: 0x5c48, Data4: ( 0x85,0x42,0x74,0xd9,0xf4,0x8f,0x4d,0x27 ))// 42d14b3d-cf9b-5c48-8542-74d9f48f4d27
}

internal extension WinRTDelegateBridge where CABI == __x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2_int_double {
    static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &test_component.__x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2_int_doubleVTable) { $0 }
        return .init(lpVtbl:vtblPtr)
    }
}

internal var __x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2_int_doubleVTable: __x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2_int_doubleVtbl = .init(
    QueryInterface: {
        guard let pUnk = $0, let riid = $1, let ppvObject = $2 else { return E_INVALIDARG }
        ppvObject.pointee = nil

        switch riid.pointee {
            case IUnknown.IID, IInspectable.IID, ISwiftImplemented.IID, IAgileObject.IID, __x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2_int_doubleWrapper.IID:
                _ = pUnk.pointee.lpVtbl.pointee.AddRef(pUnk)
                ppvObject.pointee = UnsafeMutableRawPointer(pUnk)
                return S_OK
            default:
                return failWith(err: E_NOINTERFACE)
        }
    },

    AddRef: {
         guard let wrapper = __x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2_int_doubleWrapper.fromRaw($0) else { return 1 }
         _ = wrapper.retain()
         return ULONG(_getRetainCount(wrapper.takeUnretainedValue()))
    },

    Release: {
        guard let wrapper = __x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2_int_doubleWrapper.fromRaw($0) else { return 1 }
        return ULONG(_getRetainCount(wrapper.takeRetainedValue()))
    },

    Invoke: {
        guard let __unwrapped__instance = __x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2_int_doubleWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let asyncInfo: test_component.AnyIAsyncOperationWithProgress<Int32, Double>? = test_component.__x_ABI_C__FIAsyncOperationWithProgress_2_int_doubleWrapper.unwrapFrom(abi: $1)
        let asyncStatus: test_component.AsyncStatus = $2
        __unwrapped__instance(asyncInfo, asyncStatus)
        return S_OK
    }
)
typealias __x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2_int_doubleWrapper = InterfaceWrapperBase<test_component.__x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2_int_doubleImpl>
internal class AsyncOperationWithProgressCompletedHandlerInt32_Double: test_component.IUnknown {
    override public class var IID: test_component.IID { IID___x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2_int_double }

    internal func InvokeImpl(_ asyncInfo: UnsafeMutablePointer<__x_ABI_C__FIAsyncOperationWithProgress_2_int_double>?, _ asyncStatus: __x_ABI_CWindows_CFoundation_CAsyncStatus) throws {
        _ = try perform(as: __x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2_int_double.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Invoke(pThis, asyncInfo, asyncStatus))
        }
    }

}

internal class __x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2_int_doubleImpl : WinRTDelegateBridge {
    internal typealias Handler = AsyncOperationWithProgressCompletedHandler<Int32, Double>
    internal typealias CABI = __x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2_int_double
    internal typealias SwiftABI = test_component.AsyncOperationWithProgressCompletedHandlerInt32_Double

    internal static func from(abi: UnsafeMutablePointer<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        let _default = SwiftABI(abi)
        let handler: Handler = { (asyncInfo, asyncStatus) in
            let asyncInfoWrapper = test_component.__x_ABI_C__FIAsyncOperationWithProgress_2_int_doubleWrapper(asyncInfo)
            let _asyncInfo = try! asyncInfoWrapper?.toABI { $0 }
            try! _default.InvokeImpl(_asyncInfo, asyncStatus)
        }
        return handler
    }
}
private var IID___x_ABI_C__FIIterable_1_IInspectable: test_component.IID {
    .init(Data1: 0x092b849b, Data2: 0x60b1, Data3: 0x52be, Data4: ( 0xa4,0x4a,0x6f,0xe8,0xe9,0x33,0xcb,0xe4 ))// 092b849b-60b1-52be-a44a-6fe8e933cbe4
}

internal var __x_ABI_C__FIIterable_1_IInspectableVTable: __x_ABI_C__FIIterable_1_IInspectableVtbl = .init(
    QueryInterface: {
        guard let pUnk = $0, let riid = $1, let ppvObject = $2 else { return E_INVALIDARG }
        ppvObject.pointee = nil

        switch riid.pointee {
            case IUnknown.IID, IInspectable.IID, ISwiftImplemented.IID, IAgileObject.IID, __x_ABI_C__FIIterable_1_IInspectableWrapper.IID:
                _ = pUnk.pointee.lpVtbl.pointee.AddRef(pUnk)
                ppvObject.pointee = UnsafeMutableRawPointer(pUnk)
                return S_OK
            default:
                guard let instance = __x_ABI_C__FIIterable_1_IInspectableWrapper.tryUnwrapFrom(raw: pUnk),
                      let iUnknownRef = instance.queryInterface(riid.pointee) else { return failWith(err: E_NOINTERFACE )}
                ppvObject.pointee = UnsafeMutableRawPointer(iUnknownRef.ref)
                return S_OK

        }
    },

    AddRef: {
         guard let wrapper = __x_ABI_C__FIIterable_1_IInspectableWrapper.fromRaw($0) else { return 1 }
         _ = wrapper.retain()
         return ULONG(_getRetainCount(wrapper.takeUnretainedValue()))
    },

    Release: {
        guard let wrapper = __x_ABI_C__FIIterable_1_IInspectableWrapper.fromRaw($0) else { return 1 }
        return ULONG(_getRetainCount(wrapper.takeRetainedValue()))
    },

    GetIids: {
        let size = MemoryLayout<test_component.IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: test_component.IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = test_component.__x_ABI_C__FIIterable_1_IInspectableWrapper.IID
        $1!.pointee = 3
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.Collections.IIterable`1<Any>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    First: {
        guard let __unwrapped__instance = __x_ABI_C__FIIterable_1_IInspectableWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.first()
        let resultWrapper = test_component.__x_ABI_C__FIIterator_1_IInspectableWrapper(result)
        resultWrapper?.copyTo($1)
        return S_OK
    }
)
typealias __x_ABI_C__FIIterable_1_IInspectableWrapper = InterfaceWrapperBase<test_component.__x_ABI_C__FIIterable_1_IInspectableImpl>
internal class IIterableAny: test_component.IInspectable {
    override public class var IID: test_component.IID { IID___x_ABI_C__FIIterable_1_IInspectable }

    internal func FirstImpl() throws -> UnsafeMutablePointer<__x_ABI_C__FIIterator_1_IInspectable>? {
        var result: UnsafeMutablePointer<__x_ABI_C__FIIterator_1_IInspectable>?
        _ = try perform(as: __x_ABI_C__FIIterable_1_IInspectable.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.First(pThis, &result))
        }
        return result
    }

}

internal class __x_ABI_C__FIIterable_1_IInspectableImpl : IIterable, AbiInterfaceImpl {
    typealias T = Any?
    typealias SwiftProjection = AnyIIterable<Any?>
    typealias CABI = __x_ABI_C__FIIterable_1_IInspectable
    typealias SwiftABI = IIterableAny

    private (set) public var _default: SwiftABI

    static func from(abi: UnsafeMutablePointer<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        return __x_ABI_C__FIIterable_1_IInspectableImpl(abi)
    }

    internal init(_ fromAbi: UnsafeMutablePointer<CABI>) {
        _default = SwiftABI(fromAbi)
    }

    static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIIterable_1_IInspectableVTable) { $0 }
        return.init(lpVtbl: vtblPtr)
    }

    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iiterable-1.first)
    public func first() -> AnyIIterator<Any?>? {
        let result = try! _default.FirstImpl()
        return test_component.__x_ABI_C__FIIterator_1_IInspectableWrapper.unwrapFrom(abi: result)
    }

    public func queryInterface(_ iid: test_component.IID) -> IUnknownRef? { nil }
}

private var IID___x_ABI_C__FIIterable_1_HSTRING: test_component.IID {
    .init(Data1: 0xe2fcc7c1, Data2: 0x3bfc, Data3: 0x5a0b, Data4: ( 0xb2,0xb0,0x72,0xe7,0x69,0xd1,0xcb,0x7e ))// e2fcc7c1-3bfc-5a0b-b2b0-72e769d1cb7e
}

internal var __x_ABI_C__FIIterable_1_HSTRINGVTable: __x_ABI_C__FIIterable_1_HSTRINGVtbl = .init(
    QueryInterface: {
        guard let pUnk = $0, let riid = $1, let ppvObject = $2 else { return E_INVALIDARG }
        ppvObject.pointee = nil

        switch riid.pointee {
            case IUnknown.IID, IInspectable.IID, ISwiftImplemented.IID, IAgileObject.IID, __x_ABI_C__FIIterable_1_HSTRINGWrapper.IID:
                _ = pUnk.pointee.lpVtbl.pointee.AddRef(pUnk)
                ppvObject.pointee = UnsafeMutableRawPointer(pUnk)
                return S_OK
            default:
                guard let instance = __x_ABI_C__FIIterable_1_HSTRINGWrapper.tryUnwrapFrom(raw: pUnk),
                      let iUnknownRef = instance.queryInterface(riid.pointee) else { return failWith(err: E_NOINTERFACE )}
                ppvObject.pointee = UnsafeMutableRawPointer(iUnknownRef.ref)
                return S_OK

        }
    },

    AddRef: {
         guard let wrapper = __x_ABI_C__FIIterable_1_HSTRINGWrapper.fromRaw($0) else { return 1 }
         _ = wrapper.retain()
         return ULONG(_getRetainCount(wrapper.takeUnretainedValue()))
    },

    Release: {
        guard let wrapper = __x_ABI_C__FIIterable_1_HSTRINGWrapper.fromRaw($0) else { return 1 }
        return ULONG(_getRetainCount(wrapper.takeRetainedValue()))
    },

    GetIids: {
        let size = MemoryLayout<test_component.IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: test_component.IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = test_component.__x_ABI_C__FIIterable_1_HSTRINGWrapper.IID
        $1!.pointee = 3
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.Collections.IIterable`1<String>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    First: {
        guard let __unwrapped__instance = __x_ABI_C__FIIterable_1_HSTRINGWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.first()
        let resultWrapper = test_component.__x_ABI_C__FIIterator_1_HSTRINGWrapper(result)
        resultWrapper?.copyTo($1)
        return S_OK
    }
)
typealias __x_ABI_C__FIIterable_1_HSTRINGWrapper = InterfaceWrapperBase<test_component.__x_ABI_C__FIIterable_1_HSTRINGImpl>
internal class IIterableString: test_component.IInspectable {
    override public class var IID: test_component.IID { IID___x_ABI_C__FIIterable_1_HSTRING }

    internal func FirstImpl() throws -> UnsafeMutablePointer<__x_ABI_C__FIIterator_1_HSTRING>? {
        var result: UnsafeMutablePointer<__x_ABI_C__FIIterator_1_HSTRING>?
        _ = try perform(as: __x_ABI_C__FIIterable_1_HSTRING.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.First(pThis, &result))
        }
        return result
    }

}

internal class __x_ABI_C__FIIterable_1_HSTRINGImpl : IIterable, AbiInterfaceImpl {
    typealias T = String
    typealias SwiftProjection = AnyIIterable<String>
    typealias CABI = __x_ABI_C__FIIterable_1_HSTRING
    typealias SwiftABI = IIterableString

    private (set) public var _default: SwiftABI

    static func from(abi: UnsafeMutablePointer<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        return __x_ABI_C__FIIterable_1_HSTRINGImpl(abi)
    }

    internal init(_ fromAbi: UnsafeMutablePointer<CABI>) {
        _default = SwiftABI(fromAbi)
    }

    static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIIterable_1_HSTRINGVTable) { $0 }
        return.init(lpVtbl: vtblPtr)
    }

    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iiterable-1.first)
    public func first() -> AnyIIterator<String>? {
        let result = try! _default.FirstImpl()
        return test_component.__x_ABI_C__FIIterator_1_HSTRINGWrapper.unwrapFrom(abi: result)
    }

    public func queryInterface(_ iid: test_component.IID) -> IUnknownRef? { nil }
}

private var IID___x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectable: test_component.IID {
    .init(Data1: 0xfe2f3d47, Data2: 0x5d47, Data3: 0x5499, Data4: ( 0x83,0x74,0x43,0x0c,0x7c,0xda,0x02,0x04 ))// fe2f3d47-5d47-5499-8374-430c7cda0204
}

internal var __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectableVTable: __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectableVtbl = .init(
    QueryInterface: {
        guard let pUnk = $0, let riid = $1, let ppvObject = $2 else { return E_INVALIDARG }
        ppvObject.pointee = nil

        switch riid.pointee {
            case IUnknown.IID, IInspectable.IID, ISwiftImplemented.IID, IAgileObject.IID, __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectableWrapper.IID:
                _ = pUnk.pointee.lpVtbl.pointee.AddRef(pUnk)
                ppvObject.pointee = UnsafeMutableRawPointer(pUnk)
                return S_OK
            default:
                guard let instance = __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectableWrapper.tryUnwrapFrom(raw: pUnk),
                      let iUnknownRef = instance.queryInterface(riid.pointee) else { return failWith(err: E_NOINTERFACE )}
                ppvObject.pointee = UnsafeMutableRawPointer(iUnknownRef.ref)
                return S_OK

        }
    },

    AddRef: {
         guard let wrapper = __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectableWrapper.fromRaw($0) else { return 1 }
         _ = wrapper.retain()
         return ULONG(_getRetainCount(wrapper.takeUnretainedValue()))
    },

    Release: {
        guard let wrapper = __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectableWrapper.fromRaw($0) else { return 1 }
        return ULONG(_getRetainCount(wrapper.takeRetainedValue()))
    },

    GetIids: {
        let size = MemoryLayout<test_component.IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: test_component.IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = test_component.__x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectableWrapper.IID
        $1!.pointee = 3
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.Collections.IIterable`1<Windows.Foundation.Collections.IKeyValuePair`2<String, Any>>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    First: {
        guard let __unwrapped__instance = __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectableWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.first()
        let resultWrapper = test_component.__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectableWrapper(result)
        resultWrapper?.copyTo($1)
        return S_OK
    }
)
typealias __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectableWrapper = InterfaceWrapperBase<test_component.__x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectableImpl>
internal class IIterableIKeyValuePairString_Any: test_component.IInspectable {
    override public class var IID: test_component.IID { IID___x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectable }

    internal func FirstImpl() throws -> UnsafeMutablePointer<__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectable>? {
        var result: UnsafeMutablePointer<__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectable>?
        _ = try perform(as: __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectable.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.First(pThis, &result))
        }
        return result
    }

}

internal class __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectableImpl : IIterable, AbiInterfaceImpl {
    typealias T = AnyIKeyValuePair<String, Any?>?
    typealias SwiftProjection = AnyIIterable<AnyIKeyValuePair<String, Any?>?>
    typealias CABI = __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectable
    typealias SwiftABI = IIterableIKeyValuePairString_Any

    private (set) public var _default: SwiftABI

    static func from(abi: UnsafeMutablePointer<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        return __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectableImpl(abi)
    }

    internal init(_ fromAbi: UnsafeMutablePointer<CABI>) {
        _default = SwiftABI(fromAbi)
    }

    static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectableVTable) { $0 }
        return.init(lpVtbl: vtblPtr)
    }

    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iiterable-1.first)
    public func first() -> AnyIIterator<AnyIKeyValuePair<String, Any?>?>? {
        let result = try! _default.FirstImpl()
        return test_component.__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectableWrapper.unwrapFrom(abi: result)
    }

    public func queryInterface(_ iid: test_component.IID) -> IUnknownRef? { nil }
}

private var IID___x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING: test_component.IID {
    .init(Data1: 0xe9bdaaf0, Data2: 0xcbf6, Data3: 0x5c72, Data4: ( 0xbe,0x90,0x29,0xcb,0xf3,0xa1,0x31,0x9b ))// e9bdaaf0-cbf6-5c72-be90-29cbf3a1319b
}

internal var __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRINGVTable: __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRINGVtbl = .init(
    QueryInterface: {
        guard let pUnk = $0, let riid = $1, let ppvObject = $2 else { return E_INVALIDARG }
        ppvObject.pointee = nil

        switch riid.pointee {
            case IUnknown.IID, IInspectable.IID, ISwiftImplemented.IID, IAgileObject.IID, __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRINGWrapper.IID:
                _ = pUnk.pointee.lpVtbl.pointee.AddRef(pUnk)
                ppvObject.pointee = UnsafeMutableRawPointer(pUnk)
                return S_OK
            default:
                guard let instance = __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRINGWrapper.tryUnwrapFrom(raw: pUnk),
                      let iUnknownRef = instance.queryInterface(riid.pointee) else { return failWith(err: E_NOINTERFACE )}
                ppvObject.pointee = UnsafeMutableRawPointer(iUnknownRef.ref)
                return S_OK

        }
    },

    AddRef: {
         guard let wrapper = __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRINGWrapper.fromRaw($0) else { return 1 }
         _ = wrapper.retain()
         return ULONG(_getRetainCount(wrapper.takeUnretainedValue()))
    },

    Release: {
        guard let wrapper = __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRINGWrapper.fromRaw($0) else { return 1 }
        return ULONG(_getRetainCount(wrapper.takeRetainedValue()))
    },

    GetIids: {
        let size = MemoryLayout<test_component.IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: test_component.IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = test_component.__x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRINGWrapper.IID
        $1!.pointee = 3
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.Collections.IIterable`1<Windows.Foundation.Collections.IKeyValuePair`2<String, String>>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    First: {
        guard let __unwrapped__instance = __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRINGWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.first()
        let resultWrapper = test_component.__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRINGWrapper(result)
        resultWrapper?.copyTo($1)
        return S_OK
    }
)
typealias __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRINGWrapper = InterfaceWrapperBase<test_component.__x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRINGImpl>
internal class IIterableIKeyValuePairString_String: test_component.IInspectable {
    override public class var IID: test_component.IID { IID___x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING }

    internal func FirstImpl() throws -> UnsafeMutablePointer<__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING>? {
        var result: UnsafeMutablePointer<__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING>?
        _ = try perform(as: __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.First(pThis, &result))
        }
        return result
    }

}

internal class __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRINGImpl : IIterable, AbiInterfaceImpl {
    typealias T = AnyIKeyValuePair<String, String>?
    typealias SwiftProjection = AnyIIterable<AnyIKeyValuePair<String, String>?>
    typealias CABI = __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING
    typealias SwiftABI = IIterableIKeyValuePairString_String

    private (set) public var _default: SwiftABI

    static func from(abi: UnsafeMutablePointer<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        return __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRINGImpl(abi)
    }

    internal init(_ fromAbi: UnsafeMutablePointer<CABI>) {
        _default = SwiftABI(fromAbi)
    }

    static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRINGVTable) { $0 }
        return.init(lpVtbl: vtblPtr)
    }

    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iiterable-1.first)
    public func first() -> AnyIIterator<AnyIKeyValuePair<String, String>?>? {
        let result = try! _default.FirstImpl()
        return test_component.__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRINGWrapper.unwrapFrom(abi: result)
    }

    public func queryInterface(_ iid: test_component.IID) -> IUnknownRef? { nil }
}

private var IID___x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_Ctest__zcomponent__CBase: test_component.IID {
    .init(Data1: 0x9ee59ac2, Data2: 0xef36, Data3: 0x560b, Data4: ( 0x8a,0xdc,0xd3,0xea,0x78,0xbd,0x58,0x2b ))// 9ee59ac2-ef36-560b-8adc-d3ea78bd582b
}

internal var __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_Ctest__zcomponent__CBaseVTable: __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_Ctest__zcomponent__CBaseVtbl = .init(
    QueryInterface: {
        guard let pUnk = $0, let riid = $1, let ppvObject = $2 else { return E_INVALIDARG }
        ppvObject.pointee = nil

        switch riid.pointee {
            case IUnknown.IID, IInspectable.IID, ISwiftImplemented.IID, IAgileObject.IID, __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_Ctest__zcomponent__CBaseWrapper.IID:
                _ = pUnk.pointee.lpVtbl.pointee.AddRef(pUnk)
                ppvObject.pointee = UnsafeMutableRawPointer(pUnk)
                return S_OK
            default:
                guard let instance = __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_Ctest__zcomponent__CBaseWrapper.tryUnwrapFrom(raw: pUnk),
                      let iUnknownRef = instance.queryInterface(riid.pointee) else { return failWith(err: E_NOINTERFACE )}
                ppvObject.pointee = UnsafeMutableRawPointer(iUnknownRef.ref)
                return S_OK

        }
    },

    AddRef: {
         guard let wrapper = __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_Ctest__zcomponent__CBaseWrapper.fromRaw($0) else { return 1 }
         _ = wrapper.retain()
         return ULONG(_getRetainCount(wrapper.takeUnretainedValue()))
    },

    Release: {
        guard let wrapper = __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_Ctest__zcomponent__CBaseWrapper.fromRaw($0) else { return 1 }
        return ULONG(_getRetainCount(wrapper.takeRetainedValue()))
    },

    GetIids: {
        let size = MemoryLayout<test_component.IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: test_component.IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = test_component.__x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_Ctest__zcomponent__CBaseWrapper.IID
        $1!.pointee = 3
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.Collections.IIterable`1<Windows.Foundation.Collections.IKeyValuePair`2<String, test_component.Base>>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    First: {
        guard let __unwrapped__instance = __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_Ctest__zcomponent__CBaseWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.first()
        let resultWrapper = test_component.__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_Ctest__zcomponent__CBaseWrapper(result)
        resultWrapper?.copyTo($1)
        return S_OK
    }
)
typealias __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_Ctest__zcomponent__CBaseWrapper = InterfaceWrapperBase<test_component.__x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_Ctest__zcomponent__CBaseImpl>
internal class IIterableIKeyValuePairString_Base: test_component.IInspectable {
    override public class var IID: test_component.IID { IID___x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_Ctest__zcomponent__CBase }

    internal func FirstImpl() throws -> UnsafeMutablePointer<__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_Ctest__zcomponent__CBase>? {
        var result: UnsafeMutablePointer<__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_Ctest__zcomponent__CBase>?
        _ = try perform(as: __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_Ctest__zcomponent__CBase.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.First(pThis, &result))
        }
        return result
    }

}

internal class __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_Ctest__zcomponent__CBaseImpl : IIterable, AbiInterfaceImpl {
    typealias T = AnyIKeyValuePair<String, Base?>?
    typealias SwiftProjection = AnyIIterable<AnyIKeyValuePair<String, Base?>?>
    typealias CABI = __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_Ctest__zcomponent__CBase
    typealias SwiftABI = IIterableIKeyValuePairString_Base

    private (set) public var _default: SwiftABI

    static func from(abi: UnsafeMutablePointer<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        return __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_Ctest__zcomponent__CBaseImpl(abi)
    }

    internal init(_ fromAbi: UnsafeMutablePointer<CABI>) {
        _default = SwiftABI(fromAbi)
    }

    static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_Ctest__zcomponent__CBaseVTable) { $0 }
        return.init(lpVtbl: vtblPtr)
    }

    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iiterable-1.first)
    public func first() -> AnyIIterator<AnyIKeyValuePair<String, Base?>?>? {
        let result = try! _default.FirstImpl()
        return test_component.__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_Ctest__zcomponent__CBaseWrapper.unwrapFrom(abi: result)
    }

    public func queryInterface(_ iid: test_component.IID) -> IUnknownRef? { nil }
}

private var IID___x_ABI_C__FIIterable_1___x_ABI_Ctest__zcomponent__CBase: test_component.IID {
    .init(Data1: 0xb826dcab, Data2: 0xca2a, Data3: 0x5fbc, Data4: ( 0x8c,0xbd,0xed,0x75,0x9a,0x9a,0x1c,0x00 ))// b826dcab-ca2a-5fbc-8cbd-ed759a9a1c00
}

internal var __x_ABI_C__FIIterable_1___x_ABI_Ctest__zcomponent__CBaseVTable: __x_ABI_C__FIIterable_1___x_ABI_Ctest__zcomponent__CBaseVtbl = .init(
    QueryInterface: {
        guard let pUnk = $0, let riid = $1, let ppvObject = $2 else { return E_INVALIDARG }
        ppvObject.pointee = nil

        switch riid.pointee {
            case IUnknown.IID, IInspectable.IID, ISwiftImplemented.IID, IAgileObject.IID, __x_ABI_C__FIIterable_1___x_ABI_Ctest__zcomponent__CBaseWrapper.IID:
                _ = pUnk.pointee.lpVtbl.pointee.AddRef(pUnk)
                ppvObject.pointee = UnsafeMutableRawPointer(pUnk)
                return S_OK
            default:
                guard let instance = __x_ABI_C__FIIterable_1___x_ABI_Ctest__zcomponent__CBaseWrapper.tryUnwrapFrom(raw: pUnk),
                      let iUnknownRef = instance.queryInterface(riid.pointee) else { return failWith(err: E_NOINTERFACE )}
                ppvObject.pointee = UnsafeMutableRawPointer(iUnknownRef.ref)
                return S_OK

        }
    },

    AddRef: {
         guard let wrapper = __x_ABI_C__FIIterable_1___x_ABI_Ctest__zcomponent__CBaseWrapper.fromRaw($0) else { return 1 }
         _ = wrapper.retain()
         return ULONG(_getRetainCount(wrapper.takeUnretainedValue()))
    },

    Release: {
        guard let wrapper = __x_ABI_C__FIIterable_1___x_ABI_Ctest__zcomponent__CBaseWrapper.fromRaw($0) else { return 1 }
        return ULONG(_getRetainCount(wrapper.takeRetainedValue()))
    },

    GetIids: {
        let size = MemoryLayout<test_component.IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: test_component.IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = test_component.__x_ABI_C__FIIterable_1___x_ABI_Ctest__zcomponent__CBaseWrapper.IID
        $1!.pointee = 3
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.Collections.IIterable`1<test_component.Base>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    First: {
        guard let __unwrapped__instance = __x_ABI_C__FIIterable_1___x_ABI_Ctest__zcomponent__CBaseWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.first()
        let resultWrapper = test_component.__x_ABI_C__FIIterator_1___x_ABI_Ctest__zcomponent__CBaseWrapper(result)
        resultWrapper?.copyTo($1)
        return S_OK
    }
)
typealias __x_ABI_C__FIIterable_1___x_ABI_Ctest__zcomponent__CBaseWrapper = InterfaceWrapperBase<test_component.__x_ABI_C__FIIterable_1___x_ABI_Ctest__zcomponent__CBaseImpl>
internal class IIterableBase: test_component.IInspectable {
    override public class var IID: test_component.IID { IID___x_ABI_C__FIIterable_1___x_ABI_Ctest__zcomponent__CBase }

    internal func FirstImpl() throws -> UnsafeMutablePointer<__x_ABI_C__FIIterator_1___x_ABI_Ctest__zcomponent__CBase>? {
        var result: UnsafeMutablePointer<__x_ABI_C__FIIterator_1___x_ABI_Ctest__zcomponent__CBase>?
        _ = try perform(as: __x_ABI_C__FIIterable_1___x_ABI_Ctest__zcomponent__CBase.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.First(pThis, &result))
        }
        return result
    }

}

internal class __x_ABI_C__FIIterable_1___x_ABI_Ctest__zcomponent__CBaseImpl : IIterable, AbiInterfaceImpl {
    typealias T = Base?
    typealias SwiftProjection = AnyIIterable<Base?>
    typealias CABI = __x_ABI_C__FIIterable_1___x_ABI_Ctest__zcomponent__CBase
    typealias SwiftABI = IIterableBase

    private (set) public var _default: SwiftABI

    static func from(abi: UnsafeMutablePointer<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        return __x_ABI_C__FIIterable_1___x_ABI_Ctest__zcomponent__CBaseImpl(abi)
    }

    internal init(_ fromAbi: UnsafeMutablePointer<CABI>) {
        _default = SwiftABI(fromAbi)
    }

    static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIIterable_1___x_ABI_Ctest__zcomponent__CBaseVTable) { $0 }
        return.init(lpVtbl: vtblPtr)
    }

    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iiterable-1.first)
    public func first() -> AnyIIterator<Base?>? {
        let result = try! _default.FirstImpl()
        return test_component.__x_ABI_C__FIIterator_1___x_ABI_Ctest__zcomponent__CBaseWrapper.unwrapFrom(abi: result)
    }

    public func queryInterface(_ iid: test_component.IID) -> IUnknownRef? { nil }
}

private var IID___x_ABI_C__FIIterable_1___x_ABI_Ctest__zcomponent__CIBasic: test_component.IID {
    .init(Data1: 0x2ec46808, Data2: 0xad2e, Data3: 0x5438, Data4: ( 0xa5,0x84,0xfa,0xb6,0x0a,0x1b,0x07,0xe3 ))// 2ec46808-ad2e-5438-a584-fab60a1b07e3
}

internal var __x_ABI_C__FIIterable_1___x_ABI_Ctest__zcomponent__CIBasicVTable: __x_ABI_C__FIIterable_1___x_ABI_Ctest__zcomponent__CIBasicVtbl = .init(
    QueryInterface: {
        guard let pUnk = $0, let riid = $1, let ppvObject = $2 else { return E_INVALIDARG }
        ppvObject.pointee = nil

        switch riid.pointee {
            case IUnknown.IID, IInspectable.IID, ISwiftImplemented.IID, IAgileObject.IID, __x_ABI_C__FIIterable_1___x_ABI_Ctest__zcomponent__CIBasicWrapper.IID:
                _ = pUnk.pointee.lpVtbl.pointee.AddRef(pUnk)
                ppvObject.pointee = UnsafeMutableRawPointer(pUnk)
                return S_OK
            default:
                guard let instance = __x_ABI_C__FIIterable_1___x_ABI_Ctest__zcomponent__CIBasicWrapper.tryUnwrapFrom(raw: pUnk),
                      let iUnknownRef = instance.queryInterface(riid.pointee) else { return failWith(err: E_NOINTERFACE )}
                ppvObject.pointee = UnsafeMutableRawPointer(iUnknownRef.ref)
                return S_OK

        }
    },

    AddRef: {
         guard let wrapper = __x_ABI_C__FIIterable_1___x_ABI_Ctest__zcomponent__CIBasicWrapper.fromRaw($0) else { return 1 }
         _ = wrapper.retain()
         return ULONG(_getRetainCount(wrapper.takeUnretainedValue()))
    },

    Release: {
        guard let wrapper = __x_ABI_C__FIIterable_1___x_ABI_Ctest__zcomponent__CIBasicWrapper.fromRaw($0) else { return 1 }
        return ULONG(_getRetainCount(wrapper.takeRetainedValue()))
    },

    GetIids: {
        let size = MemoryLayout<test_component.IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: test_component.IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = test_component.__x_ABI_C__FIIterable_1___x_ABI_Ctest__zcomponent__CIBasicWrapper.IID
        $1!.pointee = 3
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.Collections.IIterable`1<test_component.IBasic>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    First: {
        guard let __unwrapped__instance = __x_ABI_C__FIIterable_1___x_ABI_Ctest__zcomponent__CIBasicWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.first()
        let resultWrapper = test_component.__x_ABI_C__FIIterator_1___x_ABI_Ctest__zcomponent__CIBasicWrapper(result)
        resultWrapper?.copyTo($1)
        return S_OK
    }
)
typealias __x_ABI_C__FIIterable_1___x_ABI_Ctest__zcomponent__CIBasicWrapper = InterfaceWrapperBase<test_component.__x_ABI_C__FIIterable_1___x_ABI_Ctest__zcomponent__CIBasicImpl>
internal class IIterableIBasic: test_component.IInspectable {
    override public class var IID: test_component.IID { IID___x_ABI_C__FIIterable_1___x_ABI_Ctest__zcomponent__CIBasic }

    internal func FirstImpl() throws -> UnsafeMutablePointer<__x_ABI_C__FIIterator_1___x_ABI_Ctest__zcomponent__CIBasic>? {
        var result: UnsafeMutablePointer<__x_ABI_C__FIIterator_1___x_ABI_Ctest__zcomponent__CIBasic>?
        _ = try perform(as: __x_ABI_C__FIIterable_1___x_ABI_Ctest__zcomponent__CIBasic.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.First(pThis, &result))
        }
        return result
    }

}

internal class __x_ABI_C__FIIterable_1___x_ABI_Ctest__zcomponent__CIBasicImpl : IIterable, AbiInterfaceImpl {
    typealias T = AnyIBasic?
    typealias SwiftProjection = AnyIIterable<AnyIBasic?>
    typealias CABI = __x_ABI_C__FIIterable_1___x_ABI_Ctest__zcomponent__CIBasic
    typealias SwiftABI = IIterableIBasic

    private (set) public var _default: SwiftABI

    static func from(abi: UnsafeMutablePointer<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        return __x_ABI_C__FIIterable_1___x_ABI_Ctest__zcomponent__CIBasicImpl(abi)
    }

    internal init(_ fromAbi: UnsafeMutablePointer<CABI>) {
        _default = SwiftABI(fromAbi)
    }

    static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIIterable_1___x_ABI_Ctest__zcomponent__CIBasicVTable) { $0 }
        return.init(lpVtbl: vtblPtr)
    }

    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iiterable-1.first)
    public func first() -> AnyIIterator<AnyIBasic?>? {
        let result = try! _default.FirstImpl()
        return test_component.__x_ABI_C__FIIterator_1___x_ABI_Ctest__zcomponent__CIBasicWrapper.unwrapFrom(abi: result)
    }

    public func queryInterface(_ iid: test_component.IID) -> IUnknownRef? { nil }
}

private var IID___x_ABI_C__FIIterator_1_IInspectable: test_component.IID {
    .init(Data1: 0x44a94f2d, Data2: 0x04f8, Data3: 0x5091, Data4: ( 0xb3,0x36,0xbe,0x78,0x92,0xdd,0x10,0xbe ))// 44a94f2d-04f8-5091-b336-be7892dd10be
}

internal var __x_ABI_C__FIIterator_1_IInspectableVTable: __x_ABI_C__FIIterator_1_IInspectableVtbl = .init(
    QueryInterface: {
        guard let pUnk = $0, let riid = $1, let ppvObject = $2 else { return E_INVALIDARG }
        ppvObject.pointee = nil

        switch riid.pointee {
            case IUnknown.IID, IInspectable.IID, ISwiftImplemented.IID, IAgileObject.IID, __x_ABI_C__FIIterator_1_IInspectableWrapper.IID:
                _ = pUnk.pointee.lpVtbl.pointee.AddRef(pUnk)
                ppvObject.pointee = UnsafeMutableRawPointer(pUnk)
                return S_OK
            default:
                guard let instance = __x_ABI_C__FIIterator_1_IInspectableWrapper.tryUnwrapFrom(raw: pUnk),
                      let iUnknownRef = instance.queryInterface(riid.pointee) else { return failWith(err: E_NOINTERFACE )}
                ppvObject.pointee = UnsafeMutableRawPointer(iUnknownRef.ref)
                return S_OK

        }
    },

    AddRef: {
         guard let wrapper = __x_ABI_C__FIIterator_1_IInspectableWrapper.fromRaw($0) else { return 1 }
         _ = wrapper.retain()
         return ULONG(_getRetainCount(wrapper.takeUnretainedValue()))
    },

    Release: {
        guard let wrapper = __x_ABI_C__FIIterator_1_IInspectableWrapper.fromRaw($0) else { return 1 }
        return ULONG(_getRetainCount(wrapper.takeRetainedValue()))
    },

    GetIids: {
        let size = MemoryLayout<test_component.IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: test_component.IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = test_component.__x_ABI_C__FIIterator_1_IInspectableWrapper.IID
        $1!.pointee = 3
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.Collections.IIterator`1<Any>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    get_Current: {
        guard let __unwrapped__instance = __x_ABI_C__FIIterator_1_IInspectableWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.current
        let resultWrapper = __ABI_.AnyWrapper(result)
        resultWrapper?.copyTo($1)
        return S_OK
    },

    get_HasCurrent: {
        guard let __unwrapped__instance = __x_ABI_C__FIIterator_1_IInspectableWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.hasCurrent
        $1?.initialize(to: .init(from: result))
        return S_OK
    },

    MoveNext: {
        guard let __unwrapped__instance = __x_ABI_C__FIIterator_1_IInspectableWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.moveNext()
        $1?.initialize(to: .init(from: result))
        return S_OK
    },

    GetMany: { _, _, _, _ in return failWith(err: E_NOTIMPL) }
)
typealias __x_ABI_C__FIIterator_1_IInspectableWrapper = InterfaceWrapperBase<test_component.__x_ABI_C__FIIterator_1_IInspectableImpl>
internal class IIteratorAny: test_component.IInspectable {
    override public class var IID: test_component.IID { IID___x_ABI_C__FIIterator_1_IInspectable }

    internal func get_CurrentImpl() throws -> UnsafeMutablePointer<C_IInspectable>? {
        var result: UnsafeMutablePointer<C_IInspectable>?
        _ = try perform(as: __x_ABI_C__FIIterator_1_IInspectable.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Current(pThis, &result))
        }
        return result
    }

    internal func get_HasCurrentImpl() throws -> boolean {
        var result: boolean = 0
        _ = try perform(as: __x_ABI_C__FIIterator_1_IInspectable.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_HasCurrent(pThis, &result))
        }
        return result
    }

    internal func MoveNextImpl() throws -> boolean {
        var result: boolean = 0
        _ = try perform(as: __x_ABI_C__FIIterator_1_IInspectable.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.MoveNext(pThis, &result))
        }
        return result
    }

}

internal class __x_ABI_C__FIIterator_1_IInspectableImpl : IIterator, AbiInterfaceImpl {
    typealias T = Any?
    typealias SwiftProjection = AnyIIterator<Any?>
    typealias CABI = __x_ABI_C__FIIterator_1_IInspectable
    typealias SwiftABI = IIteratorAny

    private (set) public var _default: SwiftABI

    static func from(abi: UnsafeMutablePointer<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        return __x_ABI_C__FIIterator_1_IInspectableImpl(abi)
    }

    internal init(_ fromAbi: UnsafeMutablePointer<CABI>) {
        _default = SwiftABI(fromAbi)
    }

    static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIIterator_1_IInspectableVTable) { $0 }
        return.init(lpVtbl: vtblPtr)
    }

    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iiterator-1.movenext)
    public func moveNext() -> Bool {
        let result = try! _default.MoveNextImpl()
        return .init(from: result)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iiterator-1.current)
    public var current : Any? {
        get {
            let result = try! _default.get_CurrentImpl()
            return __ABI_.AnyWrapper.unwrapFrom(abi: result)
        }

    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iiterator-1.hascurrent)
    public var hasCurrent : Bool {
        get {
            let result = try! _default.get_HasCurrentImpl()
            return .init(from: result)
        }

    }

    public func queryInterface(_ iid: test_component.IID) -> IUnknownRef? { nil }
}

private var IID___x_ABI_C__FIIterator_1_HSTRING: test_component.IID {
    .init(Data1: 0x8c304ebb, Data2: 0x6615, Data3: 0x50a4, Data4: ( 0x88,0x29,0x87,0x9e,0xcd,0x44,0x32,0x36 ))// 8c304ebb-6615-50a4-8829-879ecd443236
}

internal var __x_ABI_C__FIIterator_1_HSTRINGVTable: __x_ABI_C__FIIterator_1_HSTRINGVtbl = .init(
    QueryInterface: {
        guard let pUnk = $0, let riid = $1, let ppvObject = $2 else { return E_INVALIDARG }
        ppvObject.pointee = nil

        switch riid.pointee {
            case IUnknown.IID, IInspectable.IID, ISwiftImplemented.IID, IAgileObject.IID, __x_ABI_C__FIIterator_1_HSTRINGWrapper.IID:
                _ = pUnk.pointee.lpVtbl.pointee.AddRef(pUnk)
                ppvObject.pointee = UnsafeMutableRawPointer(pUnk)
                return S_OK
            default:
                guard let instance = __x_ABI_C__FIIterator_1_HSTRINGWrapper.tryUnwrapFrom(raw: pUnk),
                      let iUnknownRef = instance.queryInterface(riid.pointee) else { return failWith(err: E_NOINTERFACE )}
                ppvObject.pointee = UnsafeMutableRawPointer(iUnknownRef.ref)
                return S_OK

        }
    },

    AddRef: {
         guard let wrapper = __x_ABI_C__FIIterator_1_HSTRINGWrapper.fromRaw($0) else { return 1 }
         _ = wrapper.retain()
         return ULONG(_getRetainCount(wrapper.takeUnretainedValue()))
    },

    Release: {
        guard let wrapper = __x_ABI_C__FIIterator_1_HSTRINGWrapper.fromRaw($0) else { return 1 }
        return ULONG(_getRetainCount(wrapper.takeRetainedValue()))
    },

    GetIids: {
        let size = MemoryLayout<test_component.IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: test_component.IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = test_component.__x_ABI_C__FIIterator_1_HSTRINGWrapper.IID
        $1!.pointee = 3
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.Collections.IIterator`1<String>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    get_Current: {
        guard let __unwrapped__instance = __x_ABI_C__FIIterator_1_HSTRINGWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.current
        $1?.initialize(to: try! HString(result).detach())
        return S_OK
    },

    get_HasCurrent: {
        guard let __unwrapped__instance = __x_ABI_C__FIIterator_1_HSTRINGWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.hasCurrent
        $1?.initialize(to: .init(from: result))
        return S_OK
    },

    MoveNext: {
        guard let __unwrapped__instance = __x_ABI_C__FIIterator_1_HSTRINGWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.moveNext()
        $1?.initialize(to: .init(from: result))
        return S_OK
    },

    GetMany: { _, _, _, _ in return failWith(err: E_NOTIMPL) }
)
typealias __x_ABI_C__FIIterator_1_HSTRINGWrapper = InterfaceWrapperBase<test_component.__x_ABI_C__FIIterator_1_HSTRINGImpl>
internal class IIteratorString: test_component.IInspectable {
    override public class var IID: test_component.IID { IID___x_ABI_C__FIIterator_1_HSTRING }

    internal func get_CurrentImpl() throws -> HSTRING? {
        var result: HSTRING?
        _ = try perform(as: __x_ABI_C__FIIterator_1_HSTRING.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Current(pThis, &result))
        }
        return result
    }

    internal func get_HasCurrentImpl() throws -> boolean {
        var result: boolean = 0
        _ = try perform(as: __x_ABI_C__FIIterator_1_HSTRING.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_HasCurrent(pThis, &result))
        }
        return result
    }

    internal func MoveNextImpl() throws -> boolean {
        var result: boolean = 0
        _ = try perform(as: __x_ABI_C__FIIterator_1_HSTRING.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.MoveNext(pThis, &result))
        }
        return result
    }

}

internal class __x_ABI_C__FIIterator_1_HSTRINGImpl : IIterator, AbiInterfaceImpl {
    typealias T = String
    typealias SwiftProjection = AnyIIterator<String>
    typealias CABI = __x_ABI_C__FIIterator_1_HSTRING
    typealias SwiftABI = IIteratorString

    private (set) public var _default: SwiftABI

    static func from(abi: UnsafeMutablePointer<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        return __x_ABI_C__FIIterator_1_HSTRINGImpl(abi)
    }

    internal init(_ fromAbi: UnsafeMutablePointer<CABI>) {
        _default = SwiftABI(fromAbi)
    }

    static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIIterator_1_HSTRINGVTable) { $0 }
        return.init(lpVtbl: vtblPtr)
    }

    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iiterator-1.movenext)
    public func moveNext() -> Bool {
        let result = try! _default.MoveNextImpl()
        return .init(from: result)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iiterator-1.current)
    public var current : String {
        get {
            let result = try! _default.get_CurrentImpl()
            return .init(from: result)
        }

    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iiterator-1.hascurrent)
    public var hasCurrent : Bool {
        get {
            let result = try! _default.get_HasCurrentImpl()
            return .init(from: result)
        }

    }

    public func queryInterface(_ iid: test_component.IID) -> IUnknownRef? { nil }
}

private var IID___x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectable: test_component.IID {
    .init(Data1: 0x5db5fa32, Data2: 0x707c, Data3: 0x5849, Data4: ( 0xa0,0x6b,0x91,0xc8,0xeb,0x9d,0x10,0xe8 ))// 5db5fa32-707c-5849-a06b-91c8eb9d10e8
}

internal var __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectableVTable: __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectableVtbl = .init(
    QueryInterface: {
        guard let pUnk = $0, let riid = $1, let ppvObject = $2 else { return E_INVALIDARG }
        ppvObject.pointee = nil

        switch riid.pointee {
            case IUnknown.IID, IInspectable.IID, ISwiftImplemented.IID, IAgileObject.IID, __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectableWrapper.IID:
                _ = pUnk.pointee.lpVtbl.pointee.AddRef(pUnk)
                ppvObject.pointee = UnsafeMutableRawPointer(pUnk)
                return S_OK
            default:
                guard let instance = __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectableWrapper.tryUnwrapFrom(raw: pUnk),
                      let iUnknownRef = instance.queryInterface(riid.pointee) else { return failWith(err: E_NOINTERFACE )}
                ppvObject.pointee = UnsafeMutableRawPointer(iUnknownRef.ref)
                return S_OK

        }
    },

    AddRef: {
         guard let wrapper = __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectableWrapper.fromRaw($0) else { return 1 }
         _ = wrapper.retain()
         return ULONG(_getRetainCount(wrapper.takeUnretainedValue()))
    },

    Release: {
        guard let wrapper = __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectableWrapper.fromRaw($0) else { return 1 }
        return ULONG(_getRetainCount(wrapper.takeRetainedValue()))
    },

    GetIids: {
        let size = MemoryLayout<test_component.IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: test_component.IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = test_component.__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectableWrapper.IID
        $1!.pointee = 3
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.Collections.IIterator`1<Windows.Foundation.Collections.IKeyValuePair`2<String, Any>>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    get_Current: {
        guard let __unwrapped__instance = __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectableWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.current
        let resultWrapper = test_component.__x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectableWrapper(result)
        resultWrapper?.copyTo($1)
        return S_OK
    },

    get_HasCurrent: {
        guard let __unwrapped__instance = __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectableWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.hasCurrent
        $1?.initialize(to: .init(from: result))
        return S_OK
    },

    MoveNext: {
        guard let __unwrapped__instance = __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectableWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.moveNext()
        $1?.initialize(to: .init(from: result))
        return S_OK
    },

    GetMany: { _, _, _, _ in return failWith(err: E_NOTIMPL) }
)
typealias __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectableWrapper = InterfaceWrapperBase<test_component.__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectableImpl>
internal class IIteratorIKeyValuePairString_Any: test_component.IInspectable {
    override public class var IID: test_component.IID { IID___x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectable }

    internal func get_CurrentImpl() throws -> UnsafeMutablePointer<__x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectable>? {
        var result: UnsafeMutablePointer<__x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectable>?
        _ = try perform(as: __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectable.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Current(pThis, &result))
        }
        return result
    }

    internal func get_HasCurrentImpl() throws -> boolean {
        var result: boolean = 0
        _ = try perform(as: __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectable.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_HasCurrent(pThis, &result))
        }
        return result
    }

    internal func MoveNextImpl() throws -> boolean {
        var result: boolean = 0
        _ = try perform(as: __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectable.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.MoveNext(pThis, &result))
        }
        return result
    }

}

internal class __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectableImpl : IIterator, AbiInterfaceImpl {
    typealias T = AnyIKeyValuePair<String, Any?>?
    typealias SwiftProjection = AnyIIterator<AnyIKeyValuePair<String, Any?>?>
    typealias CABI = __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectable
    typealias SwiftABI = IIteratorIKeyValuePairString_Any

    private (set) public var _default: SwiftABI

    static func from(abi: UnsafeMutablePointer<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        return __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectableImpl(abi)
    }

    internal init(_ fromAbi: UnsafeMutablePointer<CABI>) {
        _default = SwiftABI(fromAbi)
    }

    static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectableVTable) { $0 }
        return.init(lpVtbl: vtblPtr)
    }

    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iiterator-1.movenext)
    public func moveNext() -> Bool {
        let result = try! _default.MoveNextImpl()
        return .init(from: result)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iiterator-1.current)
    public var current : AnyIKeyValuePair<String, Any?>? {
        get {
            let result = try! _default.get_CurrentImpl()
            return test_component.__x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectableWrapper.unwrapFrom(abi: result)
        }

    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iiterator-1.hascurrent)
    public var hasCurrent : Bool {
        get {
            let result = try! _default.get_HasCurrentImpl()
            return .init(from: result)
        }

    }

    public func queryInterface(_ iid: test_component.IID) -> IUnknownRef? { nil }
}

private var IID___x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING: test_component.IID {
    .init(Data1: 0x05eb86f1, Data2: 0x7140, Data3: 0x5517, Data4: ( 0xb8,0x8d,0xcb,0xae,0xbe,0x57,0xe6,0xb1 ))// 05eb86f1-7140-5517-b88d-cbaebe57e6b1
}

internal var __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRINGVTable: __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRINGVtbl = .init(
    QueryInterface: {
        guard let pUnk = $0, let riid = $1, let ppvObject = $2 else { return E_INVALIDARG }
        ppvObject.pointee = nil

        switch riid.pointee {
            case IUnknown.IID, IInspectable.IID, ISwiftImplemented.IID, IAgileObject.IID, __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRINGWrapper.IID:
                _ = pUnk.pointee.lpVtbl.pointee.AddRef(pUnk)
                ppvObject.pointee = UnsafeMutableRawPointer(pUnk)
                return S_OK
            default:
                guard let instance = __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRINGWrapper.tryUnwrapFrom(raw: pUnk),
                      let iUnknownRef = instance.queryInterface(riid.pointee) else { return failWith(err: E_NOINTERFACE )}
                ppvObject.pointee = UnsafeMutableRawPointer(iUnknownRef.ref)
                return S_OK

        }
    },

    AddRef: {
         guard let wrapper = __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRINGWrapper.fromRaw($0) else { return 1 }
         _ = wrapper.retain()
         return ULONG(_getRetainCount(wrapper.takeUnretainedValue()))
    },

    Release: {
        guard let wrapper = __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRINGWrapper.fromRaw($0) else { return 1 }
        return ULONG(_getRetainCount(wrapper.takeRetainedValue()))
    },

    GetIids: {
        let size = MemoryLayout<test_component.IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: test_component.IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = test_component.__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRINGWrapper.IID
        $1!.pointee = 3
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.Collections.IIterator`1<Windows.Foundation.Collections.IKeyValuePair`2<String, String>>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    get_Current: {
        guard let __unwrapped__instance = __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRINGWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.current
        let resultWrapper = test_component.__x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRINGWrapper(result)
        resultWrapper?.copyTo($1)
        return S_OK
    },

    get_HasCurrent: {
        guard let __unwrapped__instance = __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRINGWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.hasCurrent
        $1?.initialize(to: .init(from: result))
        return S_OK
    },

    MoveNext: {
        guard let __unwrapped__instance = __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRINGWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.moveNext()
        $1?.initialize(to: .init(from: result))
        return S_OK
    },

    GetMany: { _, _, _, _ in return failWith(err: E_NOTIMPL) }
)
typealias __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRINGWrapper = InterfaceWrapperBase<test_component.__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRINGImpl>
internal class IIteratorIKeyValuePairString_String: test_component.IInspectable {
    override public class var IID: test_component.IID { IID___x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING }

    internal func get_CurrentImpl() throws -> UnsafeMutablePointer<__x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING>? {
        var result: UnsafeMutablePointer<__x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING>?
        _ = try perform(as: __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Current(pThis, &result))
        }
        return result
    }

    internal func get_HasCurrentImpl() throws -> boolean {
        var result: boolean = 0
        _ = try perform(as: __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_HasCurrent(pThis, &result))
        }
        return result
    }

    internal func MoveNextImpl() throws -> boolean {
        var result: boolean = 0
        _ = try perform(as: __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.MoveNext(pThis, &result))
        }
        return result
    }

}

internal class __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRINGImpl : IIterator, AbiInterfaceImpl {
    typealias T = AnyIKeyValuePair<String, String>?
    typealias SwiftProjection = AnyIIterator<AnyIKeyValuePair<String, String>?>
    typealias CABI = __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING
    typealias SwiftABI = IIteratorIKeyValuePairString_String

    private (set) public var _default: SwiftABI

    static func from(abi: UnsafeMutablePointer<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        return __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRINGImpl(abi)
    }

    internal init(_ fromAbi: UnsafeMutablePointer<CABI>) {
        _default = SwiftABI(fromAbi)
    }

    static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRINGVTable) { $0 }
        return.init(lpVtbl: vtblPtr)
    }

    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iiterator-1.movenext)
    public func moveNext() -> Bool {
        let result = try! _default.MoveNextImpl()
        return .init(from: result)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iiterator-1.current)
    public var current : AnyIKeyValuePair<String, String>? {
        get {
            let result = try! _default.get_CurrentImpl()
            return test_component.__x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRINGWrapper.unwrapFrom(abi: result)
        }

    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iiterator-1.hascurrent)
    public var hasCurrent : Bool {
        get {
            let result = try! _default.get_HasCurrentImpl()
            return .init(from: result)
        }

    }

    public func queryInterface(_ iid: test_component.IID) -> IUnknownRef? { nil }
}

private var IID___x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_Ctest__zcomponent__CBase: test_component.IID {
    .init(Data1: 0xbe30f8a4, Data2: 0x7d2e, Data3: 0x55fa, Data4: ( 0x91,0xd0,0xf0,0x21,0xdf,0xe4,0x6d,0x06 ))// be30f8a4-7d2e-55fa-91d0-f021dfe46d06
}

internal var __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_Ctest__zcomponent__CBaseVTable: __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_Ctest__zcomponent__CBaseVtbl = .init(
    QueryInterface: {
        guard let pUnk = $0, let riid = $1, let ppvObject = $2 else { return E_INVALIDARG }
        ppvObject.pointee = nil

        switch riid.pointee {
            case IUnknown.IID, IInspectable.IID, ISwiftImplemented.IID, IAgileObject.IID, __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_Ctest__zcomponent__CBaseWrapper.IID:
                _ = pUnk.pointee.lpVtbl.pointee.AddRef(pUnk)
                ppvObject.pointee = UnsafeMutableRawPointer(pUnk)
                return S_OK
            default:
                guard let instance = __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_Ctest__zcomponent__CBaseWrapper.tryUnwrapFrom(raw: pUnk),
                      let iUnknownRef = instance.queryInterface(riid.pointee) else { return failWith(err: E_NOINTERFACE )}
                ppvObject.pointee = UnsafeMutableRawPointer(iUnknownRef.ref)
                return S_OK

        }
    },

    AddRef: {
         guard let wrapper = __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_Ctest__zcomponent__CBaseWrapper.fromRaw($0) else { return 1 }
         _ = wrapper.retain()
         return ULONG(_getRetainCount(wrapper.takeUnretainedValue()))
    },

    Release: {
        guard let wrapper = __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_Ctest__zcomponent__CBaseWrapper.fromRaw($0) else { return 1 }
        return ULONG(_getRetainCount(wrapper.takeRetainedValue()))
    },

    GetIids: {
        let size = MemoryLayout<test_component.IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: test_component.IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = test_component.__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_Ctest__zcomponent__CBaseWrapper.IID
        $1!.pointee = 3
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.Collections.IIterator`1<Windows.Foundation.Collections.IKeyValuePair`2<String, test_component.Base>>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    get_Current: {
        guard let __unwrapped__instance = __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_Ctest__zcomponent__CBaseWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.current
        let resultWrapper = test_component.__x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_Ctest__zcomponent__CBaseWrapper(result)
        resultWrapper?.copyTo($1)
        return S_OK
    },

    get_HasCurrent: {
        guard let __unwrapped__instance = __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_Ctest__zcomponent__CBaseWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.hasCurrent
        $1?.initialize(to: .init(from: result))
        return S_OK
    },

    MoveNext: {
        guard let __unwrapped__instance = __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_Ctest__zcomponent__CBaseWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.moveNext()
        $1?.initialize(to: .init(from: result))
        return S_OK
    },

    GetMany: { _, _, _, _ in return failWith(err: E_NOTIMPL) }
)
typealias __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_Ctest__zcomponent__CBaseWrapper = InterfaceWrapperBase<test_component.__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_Ctest__zcomponent__CBaseImpl>
internal class IIteratorIKeyValuePairString_Base: test_component.IInspectable {
    override public class var IID: test_component.IID { IID___x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_Ctest__zcomponent__CBase }

    internal func get_CurrentImpl() throws -> UnsafeMutablePointer<__x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_Ctest__zcomponent__CBase>? {
        var result: UnsafeMutablePointer<__x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_Ctest__zcomponent__CBase>?
        _ = try perform(as: __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_Ctest__zcomponent__CBase.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Current(pThis, &result))
        }
        return result
    }

    internal func get_HasCurrentImpl() throws -> boolean {
        var result: boolean = 0
        _ = try perform(as: __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_Ctest__zcomponent__CBase.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_HasCurrent(pThis, &result))
        }
        return result
    }

    internal func MoveNextImpl() throws -> boolean {
        var result: boolean = 0
        _ = try perform(as: __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_Ctest__zcomponent__CBase.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.MoveNext(pThis, &result))
        }
        return result
    }

}

internal class __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_Ctest__zcomponent__CBaseImpl : IIterator, AbiInterfaceImpl {
    typealias T = AnyIKeyValuePair<String, Base?>?
    typealias SwiftProjection = AnyIIterator<AnyIKeyValuePair<String, Base?>?>
    typealias CABI = __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_Ctest__zcomponent__CBase
    typealias SwiftABI = IIteratorIKeyValuePairString_Base

    private (set) public var _default: SwiftABI

    static func from(abi: UnsafeMutablePointer<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        return __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_Ctest__zcomponent__CBaseImpl(abi)
    }

    internal init(_ fromAbi: UnsafeMutablePointer<CABI>) {
        _default = SwiftABI(fromAbi)
    }

    static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_Ctest__zcomponent__CBaseVTable) { $0 }
        return.init(lpVtbl: vtblPtr)
    }

    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iiterator-1.movenext)
    public func moveNext() -> Bool {
        let result = try! _default.MoveNextImpl()
        return .init(from: result)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iiterator-1.current)
    public var current : AnyIKeyValuePair<String, Base?>? {
        get {
            let result = try! _default.get_CurrentImpl()
            return test_component.__x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_Ctest__zcomponent__CBaseWrapper.unwrapFrom(abi: result)
        }

    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iiterator-1.hascurrent)
    public var hasCurrent : Bool {
        get {
            let result = try! _default.get_HasCurrentImpl()
            return .init(from: result)
        }

    }

    public func queryInterface(_ iid: test_component.IID) -> IUnknownRef? { nil }
}

private var IID___x_ABI_C__FIIterator_1___x_ABI_Ctest__zcomponent__CBase: test_component.IID {
    .init(Data1: 0xa8f692bf, Data2: 0xebba, Data3: 0x5b53, Data4: ( 0x90,0xd3,0x89,0x00,0x9b,0xcc,0x98,0x14 ))// a8f692bf-ebba-5b53-90d3-89009bcc9814
}

internal var __x_ABI_C__FIIterator_1___x_ABI_Ctest__zcomponent__CBaseVTable: __x_ABI_C__FIIterator_1___x_ABI_Ctest__zcomponent__CBaseVtbl = .init(
    QueryInterface: {
        guard let pUnk = $0, let riid = $1, let ppvObject = $2 else { return E_INVALIDARG }
        ppvObject.pointee = nil

        switch riid.pointee {
            case IUnknown.IID, IInspectable.IID, ISwiftImplemented.IID, IAgileObject.IID, __x_ABI_C__FIIterator_1___x_ABI_Ctest__zcomponent__CBaseWrapper.IID:
                _ = pUnk.pointee.lpVtbl.pointee.AddRef(pUnk)
                ppvObject.pointee = UnsafeMutableRawPointer(pUnk)
                return S_OK
            default:
                guard let instance = __x_ABI_C__FIIterator_1___x_ABI_Ctest__zcomponent__CBaseWrapper.tryUnwrapFrom(raw: pUnk),
                      let iUnknownRef = instance.queryInterface(riid.pointee) else { return failWith(err: E_NOINTERFACE )}
                ppvObject.pointee = UnsafeMutableRawPointer(iUnknownRef.ref)
                return S_OK

        }
    },

    AddRef: {
         guard let wrapper = __x_ABI_C__FIIterator_1___x_ABI_Ctest__zcomponent__CBaseWrapper.fromRaw($0) else { return 1 }
         _ = wrapper.retain()
         return ULONG(_getRetainCount(wrapper.takeUnretainedValue()))
    },

    Release: {
        guard let wrapper = __x_ABI_C__FIIterator_1___x_ABI_Ctest__zcomponent__CBaseWrapper.fromRaw($0) else { return 1 }
        return ULONG(_getRetainCount(wrapper.takeRetainedValue()))
    },

    GetIids: {
        let size = MemoryLayout<test_component.IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: test_component.IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = test_component.__x_ABI_C__FIIterator_1___x_ABI_Ctest__zcomponent__CBaseWrapper.IID
        $1!.pointee = 3
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.Collections.IIterator`1<test_component.Base>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    get_Current: {
        guard let __unwrapped__instance = __x_ABI_C__FIIterator_1___x_ABI_Ctest__zcomponent__CBaseWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.current
        result?.copyTo($1)
        return S_OK
    },

    get_HasCurrent: {
        guard let __unwrapped__instance = __x_ABI_C__FIIterator_1___x_ABI_Ctest__zcomponent__CBaseWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.hasCurrent
        $1?.initialize(to: .init(from: result))
        return S_OK
    },

    MoveNext: {
        guard let __unwrapped__instance = __x_ABI_C__FIIterator_1___x_ABI_Ctest__zcomponent__CBaseWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.moveNext()
        $1?.initialize(to: .init(from: result))
        return S_OK
    },

    GetMany: { _, _, _, _ in return failWith(err: E_NOTIMPL) }
)
typealias __x_ABI_C__FIIterator_1___x_ABI_Ctest__zcomponent__CBaseWrapper = InterfaceWrapperBase<test_component.__x_ABI_C__FIIterator_1___x_ABI_Ctest__zcomponent__CBaseImpl>
internal class IIteratorBase: test_component.IInspectable {
    override public class var IID: test_component.IID { IID___x_ABI_C__FIIterator_1___x_ABI_Ctest__zcomponent__CBase }

    internal func get_CurrentImpl() throws -> UnsafeMutablePointer<__x_ABI_Ctest__component_CIBase>? {
        var result: UnsafeMutablePointer<__x_ABI_Ctest__component_CIBase>?
        _ = try perform(as: __x_ABI_C__FIIterator_1___x_ABI_Ctest__zcomponent__CBase.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Current(pThis, &result))
        }
        return result
    }

    internal func get_HasCurrentImpl() throws -> boolean {
        var result: boolean = 0
        _ = try perform(as: __x_ABI_C__FIIterator_1___x_ABI_Ctest__zcomponent__CBase.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_HasCurrent(pThis, &result))
        }
        return result
    }

    internal func MoveNextImpl() throws -> boolean {
        var result: boolean = 0
        _ = try perform(as: __x_ABI_C__FIIterator_1___x_ABI_Ctest__zcomponent__CBase.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.MoveNext(pThis, &result))
        }
        return result
    }

}

internal class __x_ABI_C__FIIterator_1___x_ABI_Ctest__zcomponent__CBaseImpl : IIterator, AbiInterfaceImpl {
    typealias T = Base?
    typealias SwiftProjection = AnyIIterator<Base?>
    typealias CABI = __x_ABI_C__FIIterator_1___x_ABI_Ctest__zcomponent__CBase
    typealias SwiftABI = IIteratorBase

    private (set) public var _default: SwiftABI

    static func from(abi: UnsafeMutablePointer<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        return __x_ABI_C__FIIterator_1___x_ABI_Ctest__zcomponent__CBaseImpl(abi)
    }

    internal init(_ fromAbi: UnsafeMutablePointer<CABI>) {
        _default = SwiftABI(fromAbi)
    }

    static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIIterator_1___x_ABI_Ctest__zcomponent__CBaseVTable) { $0 }
        return.init(lpVtbl: vtblPtr)
    }

    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iiterator-1.movenext)
    public func moveNext() -> Bool {
        let result = try! _default.MoveNextImpl()
        return .init(from: result)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iiterator-1.current)
    public var current : Base? {
        get {
            let result = try! _default.get_CurrentImpl()
            return .from(abi: result)
        }

    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iiterator-1.hascurrent)
    public var hasCurrent : Bool {
        get {
            let result = try! _default.get_HasCurrentImpl()
            return .init(from: result)
        }

    }

    public func queryInterface(_ iid: test_component.IID) -> IUnknownRef? { nil }
}

private var IID___x_ABI_C__FIIterator_1___x_ABI_Ctest__zcomponent__CIBasic: test_component.IID {
    .init(Data1: 0xfc247a63, Data2: 0xc092, Data3: 0x5c5c, Data4: ( 0x8b,0x94,0x66,0xfb,0xfa,0x60,0xf9,0x5f ))// fc247a63-c092-5c5c-8b94-66fbfa60f95f
}

internal var __x_ABI_C__FIIterator_1___x_ABI_Ctest__zcomponent__CIBasicVTable: __x_ABI_C__FIIterator_1___x_ABI_Ctest__zcomponent__CIBasicVtbl = .init(
    QueryInterface: {
        guard let pUnk = $0, let riid = $1, let ppvObject = $2 else { return E_INVALIDARG }
        ppvObject.pointee = nil

        switch riid.pointee {
            case IUnknown.IID, IInspectable.IID, ISwiftImplemented.IID, IAgileObject.IID, __x_ABI_C__FIIterator_1___x_ABI_Ctest__zcomponent__CIBasicWrapper.IID:
                _ = pUnk.pointee.lpVtbl.pointee.AddRef(pUnk)
                ppvObject.pointee = UnsafeMutableRawPointer(pUnk)
                return S_OK
            default:
                guard let instance = __x_ABI_C__FIIterator_1___x_ABI_Ctest__zcomponent__CIBasicWrapper.tryUnwrapFrom(raw: pUnk),
                      let iUnknownRef = instance.queryInterface(riid.pointee) else { return failWith(err: E_NOINTERFACE )}
                ppvObject.pointee = UnsafeMutableRawPointer(iUnknownRef.ref)
                return S_OK

        }
    },

    AddRef: {
         guard let wrapper = __x_ABI_C__FIIterator_1___x_ABI_Ctest__zcomponent__CIBasicWrapper.fromRaw($0) else { return 1 }
         _ = wrapper.retain()
         return ULONG(_getRetainCount(wrapper.takeUnretainedValue()))
    },

    Release: {
        guard let wrapper = __x_ABI_C__FIIterator_1___x_ABI_Ctest__zcomponent__CIBasicWrapper.fromRaw($0) else { return 1 }
        return ULONG(_getRetainCount(wrapper.takeRetainedValue()))
    },

    GetIids: {
        let size = MemoryLayout<test_component.IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: test_component.IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = test_component.__x_ABI_C__FIIterator_1___x_ABI_Ctest__zcomponent__CIBasicWrapper.IID
        $1!.pointee = 3
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.Collections.IIterator`1<test_component.IBasic>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    get_Current: {
        guard let __unwrapped__instance = __x_ABI_C__FIIterator_1___x_ABI_Ctest__zcomponent__CIBasicWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.current
        let resultWrapper = __ABI_test_component.IBasicWrapper(result)
        resultWrapper?.copyTo($1)
        return S_OK
    },

    get_HasCurrent: {
        guard let __unwrapped__instance = __x_ABI_C__FIIterator_1___x_ABI_Ctest__zcomponent__CIBasicWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.hasCurrent
        $1?.initialize(to: .init(from: result))
        return S_OK
    },

    MoveNext: {
        guard let __unwrapped__instance = __x_ABI_C__FIIterator_1___x_ABI_Ctest__zcomponent__CIBasicWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.moveNext()
        $1?.initialize(to: .init(from: result))
        return S_OK
    },

    GetMany: { _, _, _, _ in return failWith(err: E_NOTIMPL) }
)
typealias __x_ABI_C__FIIterator_1___x_ABI_Ctest__zcomponent__CIBasicWrapper = InterfaceWrapperBase<test_component.__x_ABI_C__FIIterator_1___x_ABI_Ctest__zcomponent__CIBasicImpl>
internal class IIteratorIBasic: test_component.IInspectable {
    override public class var IID: test_component.IID { IID___x_ABI_C__FIIterator_1___x_ABI_Ctest__zcomponent__CIBasic }

    internal func get_CurrentImpl() throws -> UnsafeMutablePointer<__x_ABI_Ctest__component_CIBasic>? {
        var result: UnsafeMutablePointer<__x_ABI_Ctest__component_CIBasic>?
        _ = try perform(as: __x_ABI_C__FIIterator_1___x_ABI_Ctest__zcomponent__CIBasic.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Current(pThis, &result))
        }
        return result
    }

    internal func get_HasCurrentImpl() throws -> boolean {
        var result: boolean = 0
        _ = try perform(as: __x_ABI_C__FIIterator_1___x_ABI_Ctest__zcomponent__CIBasic.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_HasCurrent(pThis, &result))
        }
        return result
    }

    internal func MoveNextImpl() throws -> boolean {
        var result: boolean = 0
        _ = try perform(as: __x_ABI_C__FIIterator_1___x_ABI_Ctest__zcomponent__CIBasic.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.MoveNext(pThis, &result))
        }
        return result
    }

}

internal class __x_ABI_C__FIIterator_1___x_ABI_Ctest__zcomponent__CIBasicImpl : IIterator, AbiInterfaceImpl {
    typealias T = AnyIBasic?
    typealias SwiftProjection = AnyIIterator<AnyIBasic?>
    typealias CABI = __x_ABI_C__FIIterator_1___x_ABI_Ctest__zcomponent__CIBasic
    typealias SwiftABI = IIteratorIBasic

    private (set) public var _default: SwiftABI

    static func from(abi: UnsafeMutablePointer<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        return __x_ABI_C__FIIterator_1___x_ABI_Ctest__zcomponent__CIBasicImpl(abi)
    }

    internal init(_ fromAbi: UnsafeMutablePointer<CABI>) {
        _default = SwiftABI(fromAbi)
    }

    static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIIterator_1___x_ABI_Ctest__zcomponent__CIBasicVTable) { $0 }
        return.init(lpVtbl: vtblPtr)
    }

    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iiterator-1.movenext)
    public func moveNext() -> Bool {
        let result = try! _default.MoveNextImpl()
        return .init(from: result)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iiterator-1.current)
    public var current : AnyIBasic? {
        get {
            let result = try! _default.get_CurrentImpl()
            return __ABI_test_component.IBasicWrapper.unwrapFrom(abi: result)
        }

    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iiterator-1.hascurrent)
    public var hasCurrent : Bool {
        get {
            let result = try! _default.get_HasCurrentImpl()
            return .init(from: result)
        }

    }

    public func queryInterface(_ iid: test_component.IID) -> IUnknownRef? { nil }
}

private var IID___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectable: test_component.IID {
    .init(Data1: 0x09335560, Data2: 0x6c6b, Data3: 0x5a26, Data4: ( 0x93,0x48,0x97,0xb7,0x81,0x13,0x2b,0x20 ))// 09335560-6c6b-5a26-9348-97b781132b20
}

internal var __x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectableVTable: __x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectableVtbl = .init(
    QueryInterface: {
        guard let pUnk = $0, let riid = $1, let ppvObject = $2 else { return E_INVALIDARG }
        ppvObject.pointee = nil

        switch riid.pointee {
            case IUnknown.IID, IInspectable.IID, ISwiftImplemented.IID, IAgileObject.IID, __x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectableWrapper.IID:
                _ = pUnk.pointee.lpVtbl.pointee.AddRef(pUnk)
                ppvObject.pointee = UnsafeMutableRawPointer(pUnk)
                return S_OK
            default:
                guard let instance = __x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectableWrapper.tryUnwrapFrom(raw: pUnk),
                      let iUnknownRef = instance.queryInterface(riid.pointee) else { return failWith(err: E_NOINTERFACE )}
                ppvObject.pointee = UnsafeMutableRawPointer(iUnknownRef.ref)
                return S_OK

        }
    },

    AddRef: {
         guard let wrapper = __x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectableWrapper.fromRaw($0) else { return 1 }
         _ = wrapper.retain()
         return ULONG(_getRetainCount(wrapper.takeUnretainedValue()))
    },

    Release: {
        guard let wrapper = __x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectableWrapper.fromRaw($0) else { return 1 }
        return ULONG(_getRetainCount(wrapper.takeRetainedValue()))
    },

    GetIids: {
        let size = MemoryLayout<test_component.IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: test_component.IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = test_component.__x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectableWrapper.IID
        $1!.pointee = 3
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.Collections.IKeyValuePair`2<String, Any>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    get_Key: {
        guard let __unwrapped__instance = __x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectableWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.key
        $1?.initialize(to: try! HString(result).detach())
        return S_OK
    },

    get_Value: {
        guard let __unwrapped__instance = __x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectableWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.value
        let resultWrapper = __ABI_.AnyWrapper(result)
        resultWrapper?.copyTo($1)
        return S_OK
    }
)
typealias __x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectableWrapper = InterfaceWrapperBase<test_component.__x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectableImpl>
internal class IKeyValuePairString_Any: test_component.IInspectable {
    override public class var IID: test_component.IID { IID___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectable }

    internal func get_KeyImpl() throws -> HSTRING? {
        var result: HSTRING?
        _ = try perform(as: __x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectable.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Key(pThis, &result))
        }
        return result
    }

    internal func get_ValueImpl() throws -> UnsafeMutablePointer<C_IInspectable>? {
        var result: UnsafeMutablePointer<C_IInspectable>?
        _ = try perform(as: __x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectable.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Value(pThis, &result))
        }
        return result
    }

}

internal class __x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectableImpl : IKeyValuePair, AbiInterfaceImpl {
    typealias K = String
    typealias V = Any?
    typealias SwiftProjection = AnyIKeyValuePair<String, Any?>
    typealias CABI = __x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectable
    typealias SwiftABI = IKeyValuePairString_Any

    private (set) public var _default: SwiftABI

    static func from(abi: UnsafeMutablePointer<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        return __x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectableImpl(abi)
    }

    internal init(_ fromAbi: UnsafeMutablePointer<CABI>) {
        _default = SwiftABI(fromAbi)
    }

    static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectableVTable) { $0 }
        return.init(lpVtbl: vtblPtr)
    }

    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ikeyvaluepair-2.key)
    public var key : String {
        get {
            let result = try! _default.get_KeyImpl()
            return .init(from: result)
        }

    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ikeyvaluepair-2.value)
    public var value : Any? {
        get {
            let result = try! _default.get_ValueImpl()
            return __ABI_.AnyWrapper.unwrapFrom(abi: result)
        }

    }

    public func queryInterface(_ iid: test_component.IID) -> IUnknownRef? { nil }
}

private var IID___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING: test_component.IID {
    .init(Data1: 0x60310303, Data2: 0x49c5, Data3: 0x52e6, Data4: ( 0xab,0xc6,0xa9,0xb3,0x6e,0xcc,0xc7,0x16 ))// 60310303-49c5-52e6-abc6-a9b36eccc716
}

internal var __x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRINGVTable: __x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRINGVtbl = .init(
    QueryInterface: {
        guard let pUnk = $0, let riid = $1, let ppvObject = $2 else { return E_INVALIDARG }
        ppvObject.pointee = nil

        switch riid.pointee {
            case IUnknown.IID, IInspectable.IID, ISwiftImplemented.IID, IAgileObject.IID, __x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRINGWrapper.IID:
                _ = pUnk.pointee.lpVtbl.pointee.AddRef(pUnk)
                ppvObject.pointee = UnsafeMutableRawPointer(pUnk)
                return S_OK
            default:
                guard let instance = __x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRINGWrapper.tryUnwrapFrom(raw: pUnk),
                      let iUnknownRef = instance.queryInterface(riid.pointee) else { return failWith(err: E_NOINTERFACE )}
                ppvObject.pointee = UnsafeMutableRawPointer(iUnknownRef.ref)
                return S_OK

        }
    },

    AddRef: {
         guard let wrapper = __x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRINGWrapper.fromRaw($0) else { return 1 }
         _ = wrapper.retain()
         return ULONG(_getRetainCount(wrapper.takeUnretainedValue()))
    },

    Release: {
        guard let wrapper = __x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRINGWrapper.fromRaw($0) else { return 1 }
        return ULONG(_getRetainCount(wrapper.takeRetainedValue()))
    },

    GetIids: {
        let size = MemoryLayout<test_component.IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: test_component.IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = test_component.__x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRINGWrapper.IID
        $1!.pointee = 3
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.Collections.IKeyValuePair`2<String, String>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    get_Key: {
        guard let __unwrapped__instance = __x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRINGWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.key
        $1?.initialize(to: try! HString(result).detach())
        return S_OK
    },

    get_Value: {
        guard let __unwrapped__instance = __x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRINGWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.value
        $1?.initialize(to: try! HString(result).detach())
        return S_OK
    }
)
typealias __x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRINGWrapper = InterfaceWrapperBase<test_component.__x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRINGImpl>
internal class IKeyValuePairString_String: test_component.IInspectable {
    override public class var IID: test_component.IID { IID___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING }

    internal func get_KeyImpl() throws -> HSTRING? {
        var result: HSTRING?
        _ = try perform(as: __x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Key(pThis, &result))
        }
        return result
    }

    internal func get_ValueImpl() throws -> HSTRING? {
        var result: HSTRING?
        _ = try perform(as: __x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Value(pThis, &result))
        }
        return result
    }

}

internal class __x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRINGImpl : IKeyValuePair, AbiInterfaceImpl {
    typealias K = String
    typealias V = String
    typealias SwiftProjection = AnyIKeyValuePair<String, String>
    typealias CABI = __x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING
    typealias SwiftABI = IKeyValuePairString_String

    private (set) public var _default: SwiftABI

    static func from(abi: UnsafeMutablePointer<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        return __x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRINGImpl(abi)
    }

    internal init(_ fromAbi: UnsafeMutablePointer<CABI>) {
        _default = SwiftABI(fromAbi)
    }

    static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRINGVTable) { $0 }
        return.init(lpVtbl: vtblPtr)
    }

    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ikeyvaluepair-2.key)
    public var key : String {
        get {
            let result = try! _default.get_KeyImpl()
            return .init(from: result)
        }

    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ikeyvaluepair-2.value)
    public var value : String {
        get {
            let result = try! _default.get_ValueImpl()
            return .init(from: result)
        }

    }

    public func queryInterface(_ iid: test_component.IID) -> IUnknownRef? { nil }
}

private var IID___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_Ctest__zcomponent__CBase: test_component.IID {
    .init(Data1: 0xc6bff2b3, Data2: 0x09a5, Data3: 0x5fcf, Data4: ( 0xb0,0x78,0x69,0x43,0xdd,0x21,0x5d,0xe7 ))// c6bff2b3-09a5-5fcf-b078-6943dd215de7
}

internal var __x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_Ctest__zcomponent__CBaseVTable: __x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_Ctest__zcomponent__CBaseVtbl = .init(
    QueryInterface: {
        guard let pUnk = $0, let riid = $1, let ppvObject = $2 else { return E_INVALIDARG }
        ppvObject.pointee = nil

        switch riid.pointee {
            case IUnknown.IID, IInspectable.IID, ISwiftImplemented.IID, IAgileObject.IID, __x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_Ctest__zcomponent__CBaseWrapper.IID:
                _ = pUnk.pointee.lpVtbl.pointee.AddRef(pUnk)
                ppvObject.pointee = UnsafeMutableRawPointer(pUnk)
                return S_OK
            default:
                guard let instance = __x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_Ctest__zcomponent__CBaseWrapper.tryUnwrapFrom(raw: pUnk),
                      let iUnknownRef = instance.queryInterface(riid.pointee) else { return failWith(err: E_NOINTERFACE )}
                ppvObject.pointee = UnsafeMutableRawPointer(iUnknownRef.ref)
                return S_OK

        }
    },

    AddRef: {
         guard let wrapper = __x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_Ctest__zcomponent__CBaseWrapper.fromRaw($0) else { return 1 }
         _ = wrapper.retain()
         return ULONG(_getRetainCount(wrapper.takeUnretainedValue()))
    },

    Release: {
        guard let wrapper = __x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_Ctest__zcomponent__CBaseWrapper.fromRaw($0) else { return 1 }
        return ULONG(_getRetainCount(wrapper.takeRetainedValue()))
    },

    GetIids: {
        let size = MemoryLayout<test_component.IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: test_component.IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = test_component.__x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_Ctest__zcomponent__CBaseWrapper.IID
        $1!.pointee = 3
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.Collections.IKeyValuePair`2<String, test_component.Base>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    get_Key: {
        guard let __unwrapped__instance = __x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_Ctest__zcomponent__CBaseWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.key
        $1?.initialize(to: try! HString(result).detach())
        return S_OK
    },

    get_Value: {
        guard let __unwrapped__instance = __x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_Ctest__zcomponent__CBaseWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.value
        result?.copyTo($1)
        return S_OK
    }
)
typealias __x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_Ctest__zcomponent__CBaseWrapper = InterfaceWrapperBase<test_component.__x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_Ctest__zcomponent__CBaseImpl>
internal class IKeyValuePairString_Base: test_component.IInspectable {
    override public class var IID: test_component.IID { IID___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_Ctest__zcomponent__CBase }

    internal func get_KeyImpl() throws -> HSTRING? {
        var result: HSTRING?
        _ = try perform(as: __x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_Ctest__zcomponent__CBase.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Key(pThis, &result))
        }
        return result
    }

    internal func get_ValueImpl() throws -> UnsafeMutablePointer<__x_ABI_Ctest__component_CIBase>? {
        var result: UnsafeMutablePointer<__x_ABI_Ctest__component_CIBase>?
        _ = try perform(as: __x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_Ctest__zcomponent__CBase.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Value(pThis, &result))
        }
        return result
    }

}

internal class __x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_Ctest__zcomponent__CBaseImpl : IKeyValuePair, AbiInterfaceImpl {
    typealias K = String
    typealias V = Base?
    typealias SwiftProjection = AnyIKeyValuePair<String, Base?>
    typealias CABI = __x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_Ctest__zcomponent__CBase
    typealias SwiftABI = IKeyValuePairString_Base

    private (set) public var _default: SwiftABI

    static func from(abi: UnsafeMutablePointer<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        return __x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_Ctest__zcomponent__CBaseImpl(abi)
    }

    internal init(_ fromAbi: UnsafeMutablePointer<CABI>) {
        _default = SwiftABI(fromAbi)
    }

    static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_Ctest__zcomponent__CBaseVTable) { $0 }
        return.init(lpVtbl: vtblPtr)
    }

    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ikeyvaluepair-2.key)
    public var key : String {
        get {
            let result = try! _default.get_KeyImpl()
            return .init(from: result)
        }

    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ikeyvaluepair-2.value)
    public var value : Base? {
        get {
            let result = try! _default.get_ValueImpl()
            return .from(abi: result)
        }

    }

    public func queryInterface(_ iid: test_component.IID) -> IUnknownRef? { nil }
}

private var IID___x_ABI_C__FIMapChangedEventArgs_1_HSTRING: test_component.IID {
    .init(Data1: 0x60141efb, Data2: 0xf2f9, Data3: 0x5377, Data4: ( 0x96,0xfd,0xf8,0xc6,0x0d,0x95,0x58,0xb5 ))// 60141efb-f2f9-5377-96fd-f8c60d9558b5
}

internal var __x_ABI_C__FIMapChangedEventArgs_1_HSTRINGVTable: __x_ABI_C__FIMapChangedEventArgs_1_HSTRINGVtbl = .init(
    QueryInterface: {
        guard let pUnk = $0, let riid = $1, let ppvObject = $2 else { return E_INVALIDARG }
        ppvObject.pointee = nil

        switch riid.pointee {
            case IUnknown.IID, IInspectable.IID, ISwiftImplemented.IID, IAgileObject.IID, __x_ABI_C__FIMapChangedEventArgs_1_HSTRINGWrapper.IID:
                _ = pUnk.pointee.lpVtbl.pointee.AddRef(pUnk)
                ppvObject.pointee = UnsafeMutableRawPointer(pUnk)
                return S_OK
            default:
                guard let instance = __x_ABI_C__FIMapChangedEventArgs_1_HSTRINGWrapper.tryUnwrapFrom(raw: pUnk),
                      let iUnknownRef = instance.queryInterface(riid.pointee) else { return failWith(err: E_NOINTERFACE )}
                ppvObject.pointee = UnsafeMutableRawPointer(iUnknownRef.ref)
                return S_OK

        }
    },

    AddRef: {
         guard let wrapper = __x_ABI_C__FIMapChangedEventArgs_1_HSTRINGWrapper.fromRaw($0) else { return 1 }
         _ = wrapper.retain()
         return ULONG(_getRetainCount(wrapper.takeUnretainedValue()))
    },

    Release: {
        guard let wrapper = __x_ABI_C__FIMapChangedEventArgs_1_HSTRINGWrapper.fromRaw($0) else { return 1 }
        return ULONG(_getRetainCount(wrapper.takeRetainedValue()))
    },

    GetIids: {
        let size = MemoryLayout<test_component.IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: test_component.IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = test_component.__x_ABI_C__FIMapChangedEventArgs_1_HSTRINGWrapper.IID
        $1!.pointee = 3
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.Collections.IMapChangedEventArgs`1<String>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    get_CollectionChange: {
        guard let __unwrapped__instance = __x_ABI_C__FIMapChangedEventArgs_1_HSTRINGWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.collectionChange
        $1?.initialize(to: result)
        return S_OK
    },

    get_Key: {
        guard let __unwrapped__instance = __x_ABI_C__FIMapChangedEventArgs_1_HSTRINGWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.key
        $1?.initialize(to: try! HString(result).detach())
        return S_OK
    }
)
typealias __x_ABI_C__FIMapChangedEventArgs_1_HSTRINGWrapper = InterfaceWrapperBase<test_component.__x_ABI_C__FIMapChangedEventArgs_1_HSTRINGImpl>
internal class IMapChangedEventArgsString: test_component.IInspectable {
    override public class var IID: test_component.IID { IID___x_ABI_C__FIMapChangedEventArgs_1_HSTRING }

    internal func get_CollectionChangeImpl() throws -> __x_ABI_CWindows_CFoundation_CCollections_CCollectionChange {
        var result: __x_ABI_CWindows_CFoundation_CCollections_CCollectionChange = .init(0)
        _ = try perform(as: __x_ABI_C__FIMapChangedEventArgs_1_HSTRING.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_CollectionChange(pThis, &result))
        }
        return result
    }

    internal func get_KeyImpl() throws -> HSTRING? {
        var result: HSTRING?
        _ = try perform(as: __x_ABI_C__FIMapChangedEventArgs_1_HSTRING.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Key(pThis, &result))
        }
        return result
    }

}

internal class __x_ABI_C__FIMapChangedEventArgs_1_HSTRINGImpl : IMapChangedEventArgs, AbiInterfaceImpl {
    typealias K = String
    typealias SwiftProjection = AnyIMapChangedEventArgs<String>
    typealias CABI = __x_ABI_C__FIMapChangedEventArgs_1_HSTRING
    typealias SwiftABI = IMapChangedEventArgsString

    private (set) public var _default: SwiftABI

    static func from(abi: UnsafeMutablePointer<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        return __x_ABI_C__FIMapChangedEventArgs_1_HSTRINGImpl(abi)
    }

    internal init(_ fromAbi: UnsafeMutablePointer<CABI>) {
        _default = SwiftABI(fromAbi)
    }

    static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIMapChangedEventArgs_1_HSTRINGVTable) { $0 }
        return.init(lpVtbl: vtblPtr)
    }

    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.imapchangedeventargs-1.collectionchange)
    public var collectionChange : test_component.CollectionChange {
        get {
            let result = try! _default.get_CollectionChangeImpl()
            return result
        }

    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.imapchangedeventargs-1.key)
    public var key : String {
        get {
            let result = try! _default.get_KeyImpl()
            return .init(from: result)
        }

    }

    public func queryInterface(_ iid: test_component.IID) -> IUnknownRef? { nil }
}

private var IID___x_ABI_C__FIMapView_2_HSTRING_IInspectable: test_component.IID {
    .init(Data1: 0xbb78502a, Data2: 0xf79d, Data3: 0x54fa, Data4: ( 0x92,0xc9,0x90,0xc5,0x03,0x9f,0xdf,0x7e ))// bb78502a-f79d-54fa-92c9-90c5039fdf7e
}

internal var __x_ABI_C__FIMapView_2_HSTRING_IInspectableVTable: __x_ABI_C__FIMapView_2_HSTRING_IInspectableVtbl = .init(
    QueryInterface: {
        guard let pUnk = $0, let riid = $1, let ppvObject = $2 else { return E_INVALIDARG }
        ppvObject.pointee = nil

        switch riid.pointee {
            case IUnknown.IID, IInspectable.IID, ISwiftImplemented.IID, IAgileObject.IID, __x_ABI_C__FIMapView_2_HSTRING_IInspectableWrapper.IID:
                _ = pUnk.pointee.lpVtbl.pointee.AddRef(pUnk)
                ppvObject.pointee = UnsafeMutableRawPointer(pUnk)
                return S_OK
            default:
                guard let instance = __x_ABI_C__FIMapView_2_HSTRING_IInspectableWrapper.tryUnwrapFrom(raw: pUnk),
                      let iUnknownRef = instance.queryInterface(riid.pointee) else { return failWith(err: E_NOINTERFACE )}
                ppvObject.pointee = UnsafeMutableRawPointer(iUnknownRef.ref)
                return S_OK

        }
    },

    AddRef: {
         guard let wrapper = __x_ABI_C__FIMapView_2_HSTRING_IInspectableWrapper.fromRaw($0) else { return 1 }
         _ = wrapper.retain()
         return ULONG(_getRetainCount(wrapper.takeUnretainedValue()))
    },

    Release: {
        guard let wrapper = __x_ABI_C__FIMapView_2_HSTRING_IInspectableWrapper.fromRaw($0) else { return 1 }
        return ULONG(_getRetainCount(wrapper.takeRetainedValue()))
    },

    GetIids: {
        let size = MemoryLayout<test_component.IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 4).assumingMemoryBound(to: test_component.IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = test_component.__x_ABI_C__FIMapView_2_HSTRING_IInspectableWrapper.IID
        iids[3] = test_component.__x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectableWrapper.IID
        $1!.pointee = 4
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.Collections.IMapView`2<String, Any>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    Lookup: {
        guard let __unwrapped__instance = __x_ABI_C__FIMapView_2_HSTRING_IInspectableWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let key: String = .init(from: $1)
        let result = __unwrapped__instance.lookup(key)
        let resultWrapper = __ABI_.AnyWrapper(result)
        resultWrapper?.copyTo($2)
        return S_OK
    },

    get_Size: {
        guard let __unwrapped__instance = __x_ABI_C__FIMapView_2_HSTRING_IInspectableWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.size
        $1?.initialize(to: result)
        return S_OK
    },

    HasKey: {
        guard let __unwrapped__instance = __x_ABI_C__FIMapView_2_HSTRING_IInspectableWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let key: String = .init(from: $1)
        let result = __unwrapped__instance.hasKey(key)
        $2?.initialize(to: .init(from: result))
        return S_OK
    },

    Split: {
        guard let __unwrapped__instance = __x_ABI_C__FIMapView_2_HSTRING_IInspectableWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        var first: test_component.AnyIMapView<String, Any?>?
        var second: test_component.AnyIMapView<String, Any?>?
        __unwrapped__instance.split(&first, &second)
        let firstWrapper = test_component.__x_ABI_C__FIMapView_2_HSTRING_IInspectableWrapper(first)
        firstWrapper?.copyTo($1)
        let secondWrapper = test_component.__x_ABI_C__FIMapView_2_HSTRING_IInspectableWrapper(second)
        secondWrapper?.copyTo($2)
        return S_OK
    }
)
typealias __x_ABI_C__FIMapView_2_HSTRING_IInspectableWrapper = InterfaceWrapperBase<test_component.__x_ABI_C__FIMapView_2_HSTRING_IInspectableImpl>
internal class IMapViewString_Any: test_component.IInspectable {
    override public class var IID: test_component.IID { IID___x_ABI_C__FIMapView_2_HSTRING_IInspectable }

    internal func LookupImpl(_ key: HSTRING?) throws -> UnsafeMutablePointer<C_IInspectable>? {
        var result: UnsafeMutablePointer<C_IInspectable>?
        _ = try perform(as: __x_ABI_C__FIMapView_2_HSTRING_IInspectable.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Lookup(pThis, key, &result))
        }
        return result
    }

    internal func get_SizeImpl() throws -> UINT32 {
        var result: UINT32 = 0
        _ = try perform(as: __x_ABI_C__FIMapView_2_HSTRING_IInspectable.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Size(pThis, &result))
        }
        return result
    }

    internal func HasKeyImpl(_ key: HSTRING?) throws -> boolean {
        var result: boolean = 0
        _ = try perform(as: __x_ABI_C__FIMapView_2_HSTRING_IInspectable.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.HasKey(pThis, key, &result))
        }
        return result
    }

    internal func SplitImpl(_ first: inout UnsafeMutablePointer<__x_ABI_C__FIMapView_2_HSTRING_IInspectable>?, _ second: inout UnsafeMutablePointer<__x_ABI_C__FIMapView_2_HSTRING_IInspectable>?) throws {
        _ = try perform(as: __x_ABI_C__FIMapView_2_HSTRING_IInspectable.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Split(pThis, &first, &second))
        }
    }

}

internal class __x_ABI_C__FIMapView_2_HSTRING_IInspectableImpl : IMapView, AbiInterfaceImpl {
    typealias T = AnyIKeyValuePair<String, Any?>?
    typealias K = String
    typealias V = Any?
    typealias SwiftProjection = AnyIMapView<String, Any?>
    typealias CABI = __x_ABI_C__FIMapView_2_HSTRING_IInspectable
    typealias SwiftABI = IMapViewString_Any

    private (set) public var _default: SwiftABI

    static func from(abi: UnsafeMutablePointer<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        return __x_ABI_C__FIMapView_2_HSTRING_IInspectableImpl(abi)
    }

    internal init(_ fromAbi: UnsafeMutablePointer<CABI>) {
        _default = SwiftABI(fromAbi)
    }

    static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIMapView_2_HSTRING_IInspectableVTable) { $0 }
        return.init(lpVtbl: vtblPtr)
    }

    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.imapview-2.lookup)
    public func lookup(_ key: String) -> Any? {
        let _key = try! HString(key)
        let result = try! _default.LookupImpl(_key.get())
        return __ABI_.AnyWrapper.unwrapFrom(abi: result)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.imapview-2.haskey)
    public func hasKey(_ key: String) -> Bool {
        let _key = try! HString(key)
        let result = try! _default.HasKeyImpl(_key.get())
        return .init(from: result)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.imapview-2.split)
    public func split(_ first: inout AnyIMapView<String, Any?>?, _ second: inout AnyIMapView<String, Any?>?) {
        var _first: UnsafeMutablePointer<__x_ABI_C__FIMapView_2_HSTRING_IInspectable>?
        var _second: UnsafeMutablePointer<__x_ABI_C__FIMapView_2_HSTRING_IInspectable>?
        try! _default.SplitImpl(&_first, &_second)
        first = test_component.__x_ABI_C__FIMapView_2_HSTRING_IInspectableImpl.from(abi: _first)
        second = test_component.__x_ABI_C__FIMapView_2_HSTRING_IInspectableImpl.from(abi: _second)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.imapview-2.size)
    public var size : UInt32 {
        get {
            let result = try! _default.get_SizeImpl()
            return result
        }

    }

    internal lazy var _IIterable: IIterableIKeyValuePairString_Any = try! _default.QueryInterface()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.imapview-2.first)
    public func first() -> AnyIIterator<AnyIKeyValuePair<String, Any?>?>? {
        let result = try! _IIterable.FirstImpl()
        return test_component.__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectableWrapper.unwrapFrom(abi: result)
    }

    public func queryInterface(_ iid: test_component.IID) -> IUnknownRef? { nil }
}

private var IID___x_ABI_C__FIMapView_2_HSTRING_HSTRING: test_component.IID {
    .init(Data1: 0xac7f26f2, Data2: 0xfeb7, Data3: 0x5b2a, Data4: ( 0x8a,0xc4,0x34,0x5b,0xc6,0x2c,0xae,0xde ))// ac7f26f2-feb7-5b2a-8ac4-345bc62caede
}

internal var __x_ABI_C__FIMapView_2_HSTRING_HSTRINGVTable: __x_ABI_C__FIMapView_2_HSTRING_HSTRINGVtbl = .init(
    QueryInterface: {
        guard let pUnk = $0, let riid = $1, let ppvObject = $2 else { return E_INVALIDARG }
        ppvObject.pointee = nil

        switch riid.pointee {
            case IUnknown.IID, IInspectable.IID, ISwiftImplemented.IID, IAgileObject.IID, __x_ABI_C__FIMapView_2_HSTRING_HSTRINGWrapper.IID:
                _ = pUnk.pointee.lpVtbl.pointee.AddRef(pUnk)
                ppvObject.pointee = UnsafeMutableRawPointer(pUnk)
                return S_OK
            default:
                guard let instance = __x_ABI_C__FIMapView_2_HSTRING_HSTRINGWrapper.tryUnwrapFrom(raw: pUnk),
                      let iUnknownRef = instance.queryInterface(riid.pointee) else { return failWith(err: E_NOINTERFACE )}
                ppvObject.pointee = UnsafeMutableRawPointer(iUnknownRef.ref)
                return S_OK

        }
    },

    AddRef: {
         guard let wrapper = __x_ABI_C__FIMapView_2_HSTRING_HSTRINGWrapper.fromRaw($0) else { return 1 }
         _ = wrapper.retain()
         return ULONG(_getRetainCount(wrapper.takeUnretainedValue()))
    },

    Release: {
        guard let wrapper = __x_ABI_C__FIMapView_2_HSTRING_HSTRINGWrapper.fromRaw($0) else { return 1 }
        return ULONG(_getRetainCount(wrapper.takeRetainedValue()))
    },

    GetIids: {
        let size = MemoryLayout<test_component.IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 4).assumingMemoryBound(to: test_component.IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = test_component.__x_ABI_C__FIMapView_2_HSTRING_HSTRINGWrapper.IID
        iids[3] = test_component.__x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRINGWrapper.IID
        $1!.pointee = 4
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.Collections.IMapView`2<String, String>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    Lookup: {
        guard let __unwrapped__instance = __x_ABI_C__FIMapView_2_HSTRING_HSTRINGWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let key: String = .init(from: $1)
        let result = __unwrapped__instance.lookup(key)
        $2?.initialize(to: try! HString(result).detach())
        return S_OK
    },

    get_Size: {
        guard let __unwrapped__instance = __x_ABI_C__FIMapView_2_HSTRING_HSTRINGWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.size
        $1?.initialize(to: result)
        return S_OK
    },

    HasKey: {
        guard let __unwrapped__instance = __x_ABI_C__FIMapView_2_HSTRING_HSTRINGWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let key: String = .init(from: $1)
        let result = __unwrapped__instance.hasKey(key)
        $2?.initialize(to: .init(from: result))
        return S_OK
    },

    Split: {
        guard let __unwrapped__instance = __x_ABI_C__FIMapView_2_HSTRING_HSTRINGWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        var first: test_component.AnyIMapView<String, String>?
        var second: test_component.AnyIMapView<String, String>?
        __unwrapped__instance.split(&first, &second)
        let firstWrapper = test_component.__x_ABI_C__FIMapView_2_HSTRING_HSTRINGWrapper(first)
        firstWrapper?.copyTo($1)
        let secondWrapper = test_component.__x_ABI_C__FIMapView_2_HSTRING_HSTRINGWrapper(second)
        secondWrapper?.copyTo($2)
        return S_OK
    }
)
typealias __x_ABI_C__FIMapView_2_HSTRING_HSTRINGWrapper = InterfaceWrapperBase<test_component.__x_ABI_C__FIMapView_2_HSTRING_HSTRINGImpl>
internal class IMapViewString_String: test_component.IInspectable {
    override public class var IID: test_component.IID { IID___x_ABI_C__FIMapView_2_HSTRING_HSTRING }

    internal func LookupImpl(_ key: HSTRING?) throws -> HSTRING? {
        var result: HSTRING?
        _ = try perform(as: __x_ABI_C__FIMapView_2_HSTRING_HSTRING.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Lookup(pThis, key, &result))
        }
        return result
    }

    internal func get_SizeImpl() throws -> UINT32 {
        var result: UINT32 = 0
        _ = try perform(as: __x_ABI_C__FIMapView_2_HSTRING_HSTRING.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Size(pThis, &result))
        }
        return result
    }

    internal func HasKeyImpl(_ key: HSTRING?) throws -> boolean {
        var result: boolean = 0
        _ = try perform(as: __x_ABI_C__FIMapView_2_HSTRING_HSTRING.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.HasKey(pThis, key, &result))
        }
        return result
    }

    internal func SplitImpl(_ first: inout UnsafeMutablePointer<__x_ABI_C__FIMapView_2_HSTRING_HSTRING>?, _ second: inout UnsafeMutablePointer<__x_ABI_C__FIMapView_2_HSTRING_HSTRING>?) throws {
        _ = try perform(as: __x_ABI_C__FIMapView_2_HSTRING_HSTRING.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Split(pThis, &first, &second))
        }
    }

}

internal class __x_ABI_C__FIMapView_2_HSTRING_HSTRINGImpl : IMapView, AbiInterfaceImpl {
    typealias T = AnyIKeyValuePair<String, String>?
    typealias K = String
    typealias V = String
    typealias SwiftProjection = AnyIMapView<String, String>
    typealias CABI = __x_ABI_C__FIMapView_2_HSTRING_HSTRING
    typealias SwiftABI = IMapViewString_String

    private (set) public var _default: SwiftABI

    static func from(abi: UnsafeMutablePointer<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        return __x_ABI_C__FIMapView_2_HSTRING_HSTRINGImpl(abi)
    }

    internal init(_ fromAbi: UnsafeMutablePointer<CABI>) {
        _default = SwiftABI(fromAbi)
    }

    static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIMapView_2_HSTRING_HSTRINGVTable) { $0 }
        return.init(lpVtbl: vtblPtr)
    }

    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.imapview-2.lookup)
    public func lookup(_ key: String) -> String {
        let _key = try! HString(key)
        let result = try! _default.LookupImpl(_key.get())
        return .init(from: result)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.imapview-2.haskey)
    public func hasKey(_ key: String) -> Bool {
        let _key = try! HString(key)
        let result = try! _default.HasKeyImpl(_key.get())
        return .init(from: result)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.imapview-2.split)
    public func split(_ first: inout AnyIMapView<String, String>?, _ second: inout AnyIMapView<String, String>?) {
        var _first: UnsafeMutablePointer<__x_ABI_C__FIMapView_2_HSTRING_HSTRING>?
        var _second: UnsafeMutablePointer<__x_ABI_C__FIMapView_2_HSTRING_HSTRING>?
        try! _default.SplitImpl(&_first, &_second)
        first = test_component.__x_ABI_C__FIMapView_2_HSTRING_HSTRINGImpl.from(abi: _first)
        second = test_component.__x_ABI_C__FIMapView_2_HSTRING_HSTRINGImpl.from(abi: _second)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.imapview-2.size)
    public var size : UInt32 {
        get {
            let result = try! _default.get_SizeImpl()
            return result
        }

    }

    internal lazy var _IIterable: IIterableIKeyValuePairString_String = try! _default.QueryInterface()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.imapview-2.first)
    public func first() -> AnyIIterator<AnyIKeyValuePair<String, String>?>? {
        let result = try! _IIterable.FirstImpl()
        return test_component.__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRINGWrapper.unwrapFrom(abi: result)
    }

    public func queryInterface(_ iid: test_component.IID) -> IUnknownRef? { nil }
}

private var IID___x_ABI_C__FIMapView_2_HSTRING___x_ABI_Ctest__zcomponent__CBase: test_component.IID {
    .init(Data1: 0x8c4e7f37, Data2: 0x8bf0, Data3: 0x515a, Data4: ( 0x82,0xc1,0x06,0x45,0x55,0x0b,0xf6,0x0b ))// 8c4e7f37-8bf0-515a-82c1-0645550bf60b
}

internal var __x_ABI_C__FIMapView_2_HSTRING___x_ABI_Ctest__zcomponent__CBaseVTable: __x_ABI_C__FIMapView_2_HSTRING___x_ABI_Ctest__zcomponent__CBaseVtbl = .init(
    QueryInterface: {
        guard let pUnk = $0, let riid = $1, let ppvObject = $2 else { return E_INVALIDARG }
        ppvObject.pointee = nil

        switch riid.pointee {
            case IUnknown.IID, IInspectable.IID, ISwiftImplemented.IID, IAgileObject.IID, __x_ABI_C__FIMapView_2_HSTRING___x_ABI_Ctest__zcomponent__CBaseWrapper.IID:
                _ = pUnk.pointee.lpVtbl.pointee.AddRef(pUnk)
                ppvObject.pointee = UnsafeMutableRawPointer(pUnk)
                return S_OK
            default:
                guard let instance = __x_ABI_C__FIMapView_2_HSTRING___x_ABI_Ctest__zcomponent__CBaseWrapper.tryUnwrapFrom(raw: pUnk),
                      let iUnknownRef = instance.queryInterface(riid.pointee) else { return failWith(err: E_NOINTERFACE )}
                ppvObject.pointee = UnsafeMutableRawPointer(iUnknownRef.ref)
                return S_OK

        }
    },

    AddRef: {
         guard let wrapper = __x_ABI_C__FIMapView_2_HSTRING___x_ABI_Ctest__zcomponent__CBaseWrapper.fromRaw($0) else { return 1 }
         _ = wrapper.retain()
         return ULONG(_getRetainCount(wrapper.takeUnretainedValue()))
    },

    Release: {
        guard let wrapper = __x_ABI_C__FIMapView_2_HSTRING___x_ABI_Ctest__zcomponent__CBaseWrapper.fromRaw($0) else { return 1 }
        return ULONG(_getRetainCount(wrapper.takeRetainedValue()))
    },

    GetIids: {
        let size = MemoryLayout<test_component.IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 4).assumingMemoryBound(to: test_component.IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = test_component.__x_ABI_C__FIMapView_2_HSTRING___x_ABI_Ctest__zcomponent__CBaseWrapper.IID
        iids[3] = test_component.__x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_Ctest__zcomponent__CBaseWrapper.IID
        $1!.pointee = 4
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.Collections.IMapView`2<String, test_component.Base>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    Lookup: {
        guard let __unwrapped__instance = __x_ABI_C__FIMapView_2_HSTRING___x_ABI_Ctest__zcomponent__CBaseWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let key: String = .init(from: $1)
        let result = __unwrapped__instance.lookup(key)
        result?.copyTo($2)
        return S_OK
    },

    get_Size: {
        guard let __unwrapped__instance = __x_ABI_C__FIMapView_2_HSTRING___x_ABI_Ctest__zcomponent__CBaseWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.size
        $1?.initialize(to: result)
        return S_OK
    },

    HasKey: {
        guard let __unwrapped__instance = __x_ABI_C__FIMapView_2_HSTRING___x_ABI_Ctest__zcomponent__CBaseWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let key: String = .init(from: $1)
        let result = __unwrapped__instance.hasKey(key)
        $2?.initialize(to: .init(from: result))
        return S_OK
    },

    Split: {
        guard let __unwrapped__instance = __x_ABI_C__FIMapView_2_HSTRING___x_ABI_Ctest__zcomponent__CBaseWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        var first: test_component.AnyIMapView<String, test_component.Base?>?
        var second: test_component.AnyIMapView<String, test_component.Base?>?
        __unwrapped__instance.split(&first, &second)
        let firstWrapper = test_component.__x_ABI_C__FIMapView_2_HSTRING___x_ABI_Ctest__zcomponent__CBaseWrapper(first)
        firstWrapper?.copyTo($1)
        let secondWrapper = test_component.__x_ABI_C__FIMapView_2_HSTRING___x_ABI_Ctest__zcomponent__CBaseWrapper(second)
        secondWrapper?.copyTo($2)
        return S_OK
    }
)
typealias __x_ABI_C__FIMapView_2_HSTRING___x_ABI_Ctest__zcomponent__CBaseWrapper = InterfaceWrapperBase<test_component.__x_ABI_C__FIMapView_2_HSTRING___x_ABI_Ctest__zcomponent__CBaseImpl>
internal class IMapViewString_Base: test_component.IInspectable {
    override public class var IID: test_component.IID { IID___x_ABI_C__FIMapView_2_HSTRING___x_ABI_Ctest__zcomponent__CBase }

    internal func LookupImpl(_ key: HSTRING?) throws -> UnsafeMutablePointer<__x_ABI_Ctest__component_CIBase>? {
        var result: UnsafeMutablePointer<__x_ABI_Ctest__component_CIBase>?
        _ = try perform(as: __x_ABI_C__FIMapView_2_HSTRING___x_ABI_Ctest__zcomponent__CBase.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Lookup(pThis, key, &result))
        }
        return result
    }

    internal func get_SizeImpl() throws -> UINT32 {
        var result: UINT32 = 0
        _ = try perform(as: __x_ABI_C__FIMapView_2_HSTRING___x_ABI_Ctest__zcomponent__CBase.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Size(pThis, &result))
        }
        return result
    }

    internal func HasKeyImpl(_ key: HSTRING?) throws -> boolean {
        var result: boolean = 0
        _ = try perform(as: __x_ABI_C__FIMapView_2_HSTRING___x_ABI_Ctest__zcomponent__CBase.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.HasKey(pThis, key, &result))
        }
        return result
    }

    internal func SplitImpl(_ first: inout UnsafeMutablePointer<__x_ABI_C__FIMapView_2_HSTRING___x_ABI_Ctest__zcomponent__CBase>?, _ second: inout UnsafeMutablePointer<__x_ABI_C__FIMapView_2_HSTRING___x_ABI_Ctest__zcomponent__CBase>?) throws {
        _ = try perform(as: __x_ABI_C__FIMapView_2_HSTRING___x_ABI_Ctest__zcomponent__CBase.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Split(pThis, &first, &second))
        }
    }

}

internal class __x_ABI_C__FIMapView_2_HSTRING___x_ABI_Ctest__zcomponent__CBaseImpl : IMapView, AbiInterfaceImpl {
    typealias T = AnyIKeyValuePair<String, Base?>?
    typealias K = String
    typealias V = Base?
    typealias SwiftProjection = AnyIMapView<String, Base?>
    typealias CABI = __x_ABI_C__FIMapView_2_HSTRING___x_ABI_Ctest__zcomponent__CBase
    typealias SwiftABI = IMapViewString_Base

    private (set) public var _default: SwiftABI

    static func from(abi: UnsafeMutablePointer<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        return __x_ABI_C__FIMapView_2_HSTRING___x_ABI_Ctest__zcomponent__CBaseImpl(abi)
    }

    internal init(_ fromAbi: UnsafeMutablePointer<CABI>) {
        _default = SwiftABI(fromAbi)
    }

    static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIMapView_2_HSTRING___x_ABI_Ctest__zcomponent__CBaseVTable) { $0 }
        return.init(lpVtbl: vtblPtr)
    }

    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.imapview-2.lookup)
    public func lookup(_ key: String) -> Base? {
        let _key = try! HString(key)
        let result = try! _default.LookupImpl(_key.get())
        return .from(abi: result)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.imapview-2.haskey)
    public func hasKey(_ key: String) -> Bool {
        let _key = try! HString(key)
        let result = try! _default.HasKeyImpl(_key.get())
        return .init(from: result)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.imapview-2.split)
    public func split(_ first: inout AnyIMapView<String, Base?>?, _ second: inout AnyIMapView<String, Base?>?) {
        var _first: UnsafeMutablePointer<__x_ABI_C__FIMapView_2_HSTRING___x_ABI_Ctest__zcomponent__CBase>?
        var _second: UnsafeMutablePointer<__x_ABI_C__FIMapView_2_HSTRING___x_ABI_Ctest__zcomponent__CBase>?
        try! _default.SplitImpl(&_first, &_second)
        first = test_component.__x_ABI_C__FIMapView_2_HSTRING___x_ABI_Ctest__zcomponent__CBaseImpl.from(abi: _first)
        second = test_component.__x_ABI_C__FIMapView_2_HSTRING___x_ABI_Ctest__zcomponent__CBaseImpl.from(abi: _second)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.imapview-2.size)
    public var size : UInt32 {
        get {
            let result = try! _default.get_SizeImpl()
            return result
        }

    }

    internal lazy var _IIterable: IIterableIKeyValuePairString_Base = try! _default.QueryInterface()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.imapview-2.first)
    public func first() -> AnyIIterator<AnyIKeyValuePair<String, Base?>?>? {
        let result = try! _IIterable.FirstImpl()
        return test_component.__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_Ctest__zcomponent__CBaseWrapper.unwrapFrom(abi: result)
    }

    public func queryInterface(_ iid: test_component.IID) -> IUnknownRef? { nil }
}

private var IID___x_ABI_C__FIMap_2_HSTRING_IInspectable: test_component.IID {
    .init(Data1: 0x1b0d3570, Data2: 0x0877, Data3: 0x5ec2, Data4: ( 0x8a,0x2c,0x3b,0x95,0x39,0x50,0x6a,0xca ))// 1b0d3570-0877-5ec2-8a2c-3b9539506aca
}

internal var __x_ABI_C__FIMap_2_HSTRING_IInspectableVTable: __x_ABI_C__FIMap_2_HSTRING_IInspectableVtbl = .init(
    QueryInterface: {
        guard let pUnk = $0, let riid = $1, let ppvObject = $2 else { return E_INVALIDARG }
        ppvObject.pointee = nil

        switch riid.pointee {
            case IUnknown.IID, IInspectable.IID, ISwiftImplemented.IID, IAgileObject.IID, __x_ABI_C__FIMap_2_HSTRING_IInspectableWrapper.IID:
                _ = pUnk.pointee.lpVtbl.pointee.AddRef(pUnk)
                ppvObject.pointee = UnsafeMutableRawPointer(pUnk)
                return S_OK
            default:
                guard let instance = __x_ABI_C__FIMap_2_HSTRING_IInspectableWrapper.tryUnwrapFrom(raw: pUnk),
                      let iUnknownRef = instance.queryInterface(riid.pointee) else { return failWith(err: E_NOINTERFACE )}
                ppvObject.pointee = UnsafeMutableRawPointer(iUnknownRef.ref)
                return S_OK

        }
    },

    AddRef: {
         guard let wrapper = __x_ABI_C__FIMap_2_HSTRING_IInspectableWrapper.fromRaw($0) else { return 1 }
         _ = wrapper.retain()
         return ULONG(_getRetainCount(wrapper.takeUnretainedValue()))
    },

    Release: {
        guard let wrapper = __x_ABI_C__FIMap_2_HSTRING_IInspectableWrapper.fromRaw($0) else { return 1 }
        return ULONG(_getRetainCount(wrapper.takeRetainedValue()))
    },

    GetIids: {
        let size = MemoryLayout<test_component.IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 4).assumingMemoryBound(to: test_component.IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = test_component.__x_ABI_C__FIMap_2_HSTRING_IInspectableWrapper.IID
        iids[3] = test_component.__x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectableWrapper.IID
        $1!.pointee = 4
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.Collections.IMap`2<String, Any>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    Lookup: {
        guard let __unwrapped__instance = __x_ABI_C__FIMap_2_HSTRING_IInspectableWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let key: String = .init(from: $1)
        let result = __unwrapped__instance.lookup(key)
        let resultWrapper = __ABI_.AnyWrapper(result)
        resultWrapper?.copyTo($2)
        return S_OK
    },

    get_Size: {
        guard let __unwrapped__instance = __x_ABI_C__FIMap_2_HSTRING_IInspectableWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.size
        $1?.initialize(to: result)
        return S_OK
    },

    HasKey: {
        guard let __unwrapped__instance = __x_ABI_C__FIMap_2_HSTRING_IInspectableWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let key: String = .init(from: $1)
        let result = __unwrapped__instance.hasKey(key)
        $2?.initialize(to: .init(from: result))
        return S_OK
    },

    GetView: {
        guard let __unwrapped__instance = __x_ABI_C__FIMap_2_HSTRING_IInspectableWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.getView()
        let resultWrapper = test_component.__x_ABI_C__FIMapView_2_HSTRING_IInspectableWrapper(result)
        resultWrapper?.copyTo($1)
        return S_OK
    },

    Insert: {
        guard let __unwrapped__instance = __x_ABI_C__FIMap_2_HSTRING_IInspectableWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let key: String = .init(from: $1)
        let value: Any? = __ABI_.AnyWrapper.unwrapFrom(abi: $2)
        let result = __unwrapped__instance.insert(key, value)
        $3?.initialize(to: .init(from: result))
        return S_OK
    },

    Remove: {
        guard let __unwrapped__instance = __x_ABI_C__FIMap_2_HSTRING_IInspectableWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let key: String = .init(from: $1)
        __unwrapped__instance.remove(key)
        return S_OK
    },

    Clear: {
        guard let __unwrapped__instance = __x_ABI_C__FIMap_2_HSTRING_IInspectableWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        __unwrapped__instance.clear()
        return S_OK
    }
)
typealias __x_ABI_C__FIMap_2_HSTRING_IInspectableWrapper = InterfaceWrapperBase<test_component.__x_ABI_C__FIMap_2_HSTRING_IInspectableImpl>
internal class IMapString_Any: test_component.IInspectable {
    override public class var IID: test_component.IID { IID___x_ABI_C__FIMap_2_HSTRING_IInspectable }

    internal func LookupImpl(_ key: HSTRING?) throws -> UnsafeMutablePointer<C_IInspectable>? {
        var result: UnsafeMutablePointer<C_IInspectable>?
        _ = try perform(as: __x_ABI_C__FIMap_2_HSTRING_IInspectable.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Lookup(pThis, key, &result))
        }
        return result
    }

    internal func get_SizeImpl() throws -> UINT32 {
        var result: UINT32 = 0
        _ = try perform(as: __x_ABI_C__FIMap_2_HSTRING_IInspectable.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Size(pThis, &result))
        }
        return result
    }

    internal func HasKeyImpl(_ key: HSTRING?) throws -> boolean {
        var result: boolean = 0
        _ = try perform(as: __x_ABI_C__FIMap_2_HSTRING_IInspectable.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.HasKey(pThis, key, &result))
        }
        return result
    }

    internal func GetViewImpl() throws -> UnsafeMutablePointer<__x_ABI_C__FIMapView_2_HSTRING_IInspectable>? {
        var result: UnsafeMutablePointer<__x_ABI_C__FIMapView_2_HSTRING_IInspectable>?
        _ = try perform(as: __x_ABI_C__FIMap_2_HSTRING_IInspectable.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetView(pThis, &result))
        }
        return result
    }

    internal func InsertImpl(_ key: HSTRING?, _ value: UnsafeMutablePointer<C_IInspectable>?) throws -> boolean {
        var result: boolean = 0
        _ = try perform(as: __x_ABI_C__FIMap_2_HSTRING_IInspectable.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Insert(pThis, key, value, &result))
        }
        return result
    }

    internal func RemoveImpl(_ key: HSTRING?) throws {
        _ = try perform(as: __x_ABI_C__FIMap_2_HSTRING_IInspectable.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Remove(pThis, key))
        }
    }

    internal func ClearImpl() throws {
        _ = try perform(as: __x_ABI_C__FIMap_2_HSTRING_IInspectable.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Clear(pThis))
        }
    }

}

internal class __x_ABI_C__FIMap_2_HSTRING_IInspectableImpl : IMap, AbiInterfaceImpl {
    typealias T = AnyIKeyValuePair<String, Any?>?
    typealias K = String
    typealias V = Any?
    typealias SwiftProjection = AnyIMap<String, Any?>
    typealias CABI = __x_ABI_C__FIMap_2_HSTRING_IInspectable
    typealias SwiftABI = IMapString_Any

    private (set) public var _default: SwiftABI

    static func from(abi: UnsafeMutablePointer<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        return __x_ABI_C__FIMap_2_HSTRING_IInspectableImpl(abi)
    }

    internal init(_ fromAbi: UnsafeMutablePointer<CABI>) {
        _default = SwiftABI(fromAbi)
    }

    static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIMap_2_HSTRING_IInspectableVTable) { $0 }
        return.init(lpVtbl: vtblPtr)
    }

    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.imap-2.lookup)
    public func lookup(_ key: String) -> Any? {
        let _key = try! HString(key)
        let result = try! _default.LookupImpl(_key.get())
        return __ABI_.AnyWrapper.unwrapFrom(abi: result)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.imap-2.haskey)
    public func hasKey(_ key: String) -> Bool {
        let _key = try! HString(key)
        let result = try! _default.HasKeyImpl(_key.get())
        return .init(from: result)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.imap-2.getview)
    public func getView() -> AnyIMapView<String, Any?>? {
        let result = try! _default.GetViewImpl()
        return test_component.__x_ABI_C__FIMapView_2_HSTRING_IInspectableWrapper.unwrapFrom(abi: result)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.imap-2.insert)
    public func insert(_ key: String, _ value: Any?) -> Bool {
        let _key = try! HString(key)
        let valueWrapper = __ABI_.AnyWrapper(value)
        let _value = try! valueWrapper?.toABI { $0 }
        let result = try! _default.InsertImpl(_key.get(), _value)
        return .init(from: result)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.imap-2.remove)
    public func remove(_ key: String) {
        let _key = try! HString(key)
        try! _default.RemoveImpl(_key.get())
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.imap-2.clear)
    public func clear() {
        try! _default.ClearImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.imap-2.size)
    public var size : UInt32 {
        get {
            let result = try! _default.get_SizeImpl()
            return result
        }

    }

    internal lazy var _IIterable: IIterableIKeyValuePairString_Any = try! _default.QueryInterface()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.imap-2.first)
    public func first() -> AnyIIterator<AnyIKeyValuePair<String, Any?>?>? {
        let result = try! _IIterable.FirstImpl()
        return test_component.__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectableWrapper.unwrapFrom(abi: result)
    }

    public func queryInterface(_ iid: test_component.IID) -> IUnknownRef? { nil }
}

private var IID___x_ABI_C__FIMap_2_HSTRING_HSTRING: test_component.IID {
    .init(Data1: 0xf6d1f700, Data2: 0x49c2, Data3: 0x52ae, Data4: ( 0x81,0x54,0x82,0x6f,0x99,0x08,0x77,0x3c ))// f6d1f700-49c2-52ae-8154-826f9908773c
}

internal var __x_ABI_C__FIMap_2_HSTRING_HSTRINGVTable: __x_ABI_C__FIMap_2_HSTRING_HSTRINGVtbl = .init(
    QueryInterface: {
        guard let pUnk = $0, let riid = $1, let ppvObject = $2 else { return E_INVALIDARG }
        ppvObject.pointee = nil

        switch riid.pointee {
            case IUnknown.IID, IInspectable.IID, ISwiftImplemented.IID, IAgileObject.IID, __x_ABI_C__FIMap_2_HSTRING_HSTRINGWrapper.IID:
                _ = pUnk.pointee.lpVtbl.pointee.AddRef(pUnk)
                ppvObject.pointee = UnsafeMutableRawPointer(pUnk)
                return S_OK
            default:
                guard let instance = __x_ABI_C__FIMap_2_HSTRING_HSTRINGWrapper.tryUnwrapFrom(raw: pUnk),
                      let iUnknownRef = instance.queryInterface(riid.pointee) else { return failWith(err: E_NOINTERFACE )}
                ppvObject.pointee = UnsafeMutableRawPointer(iUnknownRef.ref)
                return S_OK

        }
    },

    AddRef: {
         guard let wrapper = __x_ABI_C__FIMap_2_HSTRING_HSTRINGWrapper.fromRaw($0) else { return 1 }
         _ = wrapper.retain()
         return ULONG(_getRetainCount(wrapper.takeUnretainedValue()))
    },

    Release: {
        guard let wrapper = __x_ABI_C__FIMap_2_HSTRING_HSTRINGWrapper.fromRaw($0) else { return 1 }
        return ULONG(_getRetainCount(wrapper.takeRetainedValue()))
    },

    GetIids: {
        let size = MemoryLayout<test_component.IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 4).assumingMemoryBound(to: test_component.IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = test_component.__x_ABI_C__FIMap_2_HSTRING_HSTRINGWrapper.IID
        iids[3] = test_component.__x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRINGWrapper.IID
        $1!.pointee = 4
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.Collections.IMap`2<String, String>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    Lookup: {
        guard let __unwrapped__instance = __x_ABI_C__FIMap_2_HSTRING_HSTRINGWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let key: String = .init(from: $1)
        let result = __unwrapped__instance.lookup(key)
        $2?.initialize(to: try! HString(result).detach())
        return S_OK
    },

    get_Size: {
        guard let __unwrapped__instance = __x_ABI_C__FIMap_2_HSTRING_HSTRINGWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.size
        $1?.initialize(to: result)
        return S_OK
    },

    HasKey: {
        guard let __unwrapped__instance = __x_ABI_C__FIMap_2_HSTRING_HSTRINGWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let key: String = .init(from: $1)
        let result = __unwrapped__instance.hasKey(key)
        $2?.initialize(to: .init(from: result))
        return S_OK
    },

    GetView: {
        guard let __unwrapped__instance = __x_ABI_C__FIMap_2_HSTRING_HSTRINGWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.getView()
        let resultWrapper = test_component.__x_ABI_C__FIMapView_2_HSTRING_HSTRINGWrapper(result)
        resultWrapper?.copyTo($1)
        return S_OK
    },

    Insert: {
        guard let __unwrapped__instance = __x_ABI_C__FIMap_2_HSTRING_HSTRINGWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let key: String = .init(from: $1)
        let value: String = .init(from: $2)
        let result = __unwrapped__instance.insert(key, value)
        $3?.initialize(to: .init(from: result))
        return S_OK
    },

    Remove: {
        guard let __unwrapped__instance = __x_ABI_C__FIMap_2_HSTRING_HSTRINGWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let key: String = .init(from: $1)
        __unwrapped__instance.remove(key)
        return S_OK
    },

    Clear: {
        guard let __unwrapped__instance = __x_ABI_C__FIMap_2_HSTRING_HSTRINGWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        __unwrapped__instance.clear()
        return S_OK
    }
)
typealias __x_ABI_C__FIMap_2_HSTRING_HSTRINGWrapper = InterfaceWrapperBase<test_component.__x_ABI_C__FIMap_2_HSTRING_HSTRINGImpl>
internal class IMapString_String: test_component.IInspectable {
    override public class var IID: test_component.IID { IID___x_ABI_C__FIMap_2_HSTRING_HSTRING }

    internal func LookupImpl(_ key: HSTRING?) throws -> HSTRING? {
        var result: HSTRING?
        _ = try perform(as: __x_ABI_C__FIMap_2_HSTRING_HSTRING.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Lookup(pThis, key, &result))
        }
        return result
    }

    internal func get_SizeImpl() throws -> UINT32 {
        var result: UINT32 = 0
        _ = try perform(as: __x_ABI_C__FIMap_2_HSTRING_HSTRING.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Size(pThis, &result))
        }
        return result
    }

    internal func HasKeyImpl(_ key: HSTRING?) throws -> boolean {
        var result: boolean = 0
        _ = try perform(as: __x_ABI_C__FIMap_2_HSTRING_HSTRING.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.HasKey(pThis, key, &result))
        }
        return result
    }

    internal func GetViewImpl() throws -> UnsafeMutablePointer<__x_ABI_C__FIMapView_2_HSTRING_HSTRING>? {
        var result: UnsafeMutablePointer<__x_ABI_C__FIMapView_2_HSTRING_HSTRING>?
        _ = try perform(as: __x_ABI_C__FIMap_2_HSTRING_HSTRING.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetView(pThis, &result))
        }
        return result
    }

    internal func InsertImpl(_ key: HSTRING?, _ value: HSTRING?) throws -> boolean {
        var result: boolean = 0
        _ = try perform(as: __x_ABI_C__FIMap_2_HSTRING_HSTRING.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Insert(pThis, key, value, &result))
        }
        return result
    }

    internal func RemoveImpl(_ key: HSTRING?) throws {
        _ = try perform(as: __x_ABI_C__FIMap_2_HSTRING_HSTRING.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Remove(pThis, key))
        }
    }

    internal func ClearImpl() throws {
        _ = try perform(as: __x_ABI_C__FIMap_2_HSTRING_HSTRING.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Clear(pThis))
        }
    }

}

internal class __x_ABI_C__FIMap_2_HSTRING_HSTRINGImpl : IMap, AbiInterfaceImpl {
    typealias T = AnyIKeyValuePair<String, String>?
    typealias K = String
    typealias V = String
    typealias SwiftProjection = AnyIMap<String, String>
    typealias CABI = __x_ABI_C__FIMap_2_HSTRING_HSTRING
    typealias SwiftABI = IMapString_String

    private (set) public var _default: SwiftABI

    static func from(abi: UnsafeMutablePointer<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        return __x_ABI_C__FIMap_2_HSTRING_HSTRINGImpl(abi)
    }

    internal init(_ fromAbi: UnsafeMutablePointer<CABI>) {
        _default = SwiftABI(fromAbi)
    }

    static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIMap_2_HSTRING_HSTRINGVTable) { $0 }
        return.init(lpVtbl: vtblPtr)
    }

    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.imap-2.lookup)
    public func lookup(_ key: String) -> String {
        let _key = try! HString(key)
        let result = try! _default.LookupImpl(_key.get())
        return .init(from: result)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.imap-2.haskey)
    public func hasKey(_ key: String) -> Bool {
        let _key = try! HString(key)
        let result = try! _default.HasKeyImpl(_key.get())
        return .init(from: result)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.imap-2.getview)
    public func getView() -> AnyIMapView<String, String>? {
        let result = try! _default.GetViewImpl()
        return test_component.__x_ABI_C__FIMapView_2_HSTRING_HSTRINGWrapper.unwrapFrom(abi: result)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.imap-2.insert)
    public func insert(_ key: String, _ value: String) -> Bool {
        let _key = try! HString(key)
        let _value = try! HString(value)
        let result = try! _default.InsertImpl(_key.get(), _value.get())
        return .init(from: result)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.imap-2.remove)
    public func remove(_ key: String) {
        let _key = try! HString(key)
        try! _default.RemoveImpl(_key.get())
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.imap-2.clear)
    public func clear() {
        try! _default.ClearImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.imap-2.size)
    public var size : UInt32 {
        get {
            let result = try! _default.get_SizeImpl()
            return result
        }

    }

    internal lazy var _IIterable: IIterableIKeyValuePairString_String = try! _default.QueryInterface()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.imap-2.first)
    public func first() -> AnyIIterator<AnyIKeyValuePair<String, String>?>? {
        let result = try! _IIterable.FirstImpl()
        return test_component.__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRINGWrapper.unwrapFrom(abi: result)
    }

    public func queryInterface(_ iid: test_component.IID) -> IUnknownRef? { nil }
}

private var IID___x_ABI_C__FIMap_2_HSTRING___x_ABI_Ctest__zcomponent__CBase: test_component.IID {
    .init(Data1: 0x73430fe6, Data2: 0xa622, Data3: 0x5945, Data4: ( 0xa5,0x86,0x6f,0x3a,0x84,0xef,0x15,0xe3 ))// 73430fe6-a622-5945-a586-6f3a84ef15e3
}

internal var __x_ABI_C__FIMap_2_HSTRING___x_ABI_Ctest__zcomponent__CBaseVTable: __x_ABI_C__FIMap_2_HSTRING___x_ABI_Ctest__zcomponent__CBaseVtbl = .init(
    QueryInterface: {
        guard let pUnk = $0, let riid = $1, let ppvObject = $2 else { return E_INVALIDARG }
        ppvObject.pointee = nil

        switch riid.pointee {
            case IUnknown.IID, IInspectable.IID, ISwiftImplemented.IID, IAgileObject.IID, __x_ABI_C__FIMap_2_HSTRING___x_ABI_Ctest__zcomponent__CBaseWrapper.IID:
                _ = pUnk.pointee.lpVtbl.pointee.AddRef(pUnk)
                ppvObject.pointee = UnsafeMutableRawPointer(pUnk)
                return S_OK
            default:
                guard let instance = __x_ABI_C__FIMap_2_HSTRING___x_ABI_Ctest__zcomponent__CBaseWrapper.tryUnwrapFrom(raw: pUnk),
                      let iUnknownRef = instance.queryInterface(riid.pointee) else { return failWith(err: E_NOINTERFACE )}
                ppvObject.pointee = UnsafeMutableRawPointer(iUnknownRef.ref)
                return S_OK

        }
    },

    AddRef: {
         guard let wrapper = __x_ABI_C__FIMap_2_HSTRING___x_ABI_Ctest__zcomponent__CBaseWrapper.fromRaw($0) else { return 1 }
         _ = wrapper.retain()
         return ULONG(_getRetainCount(wrapper.takeUnretainedValue()))
    },

    Release: {
        guard let wrapper = __x_ABI_C__FIMap_2_HSTRING___x_ABI_Ctest__zcomponent__CBaseWrapper.fromRaw($0) else { return 1 }
        return ULONG(_getRetainCount(wrapper.takeRetainedValue()))
    },

    GetIids: {
        let size = MemoryLayout<test_component.IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 4).assumingMemoryBound(to: test_component.IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = test_component.__x_ABI_C__FIMap_2_HSTRING___x_ABI_Ctest__zcomponent__CBaseWrapper.IID
        iids[3] = test_component.__x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_Ctest__zcomponent__CBaseWrapper.IID
        $1!.pointee = 4
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.Collections.IMap`2<String, test_component.Base>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    Lookup: {
        guard let __unwrapped__instance = __x_ABI_C__FIMap_2_HSTRING___x_ABI_Ctest__zcomponent__CBaseWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let key: String = .init(from: $1)
        let result = __unwrapped__instance.lookup(key)
        result?.copyTo($2)
        return S_OK
    },

    get_Size: {
        guard let __unwrapped__instance = __x_ABI_C__FIMap_2_HSTRING___x_ABI_Ctest__zcomponent__CBaseWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.size
        $1?.initialize(to: result)
        return S_OK
    },

    HasKey: {
        guard let __unwrapped__instance = __x_ABI_C__FIMap_2_HSTRING___x_ABI_Ctest__zcomponent__CBaseWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let key: String = .init(from: $1)
        let result = __unwrapped__instance.hasKey(key)
        $2?.initialize(to: .init(from: result))
        return S_OK
    },

    GetView: {
        guard let __unwrapped__instance = __x_ABI_C__FIMap_2_HSTRING___x_ABI_Ctest__zcomponent__CBaseWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.getView()
        let resultWrapper = test_component.__x_ABI_C__FIMapView_2_HSTRING___x_ABI_Ctest__zcomponent__CBaseWrapper(result)
        resultWrapper?.copyTo($1)
        return S_OK
    },

    Insert: {
        guard let __unwrapped__instance = __x_ABI_C__FIMap_2_HSTRING___x_ABI_Ctest__zcomponent__CBaseWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let key: String = .init(from: $1)
        let value: test_component.Base? = .from(abi: $2)
        let result = __unwrapped__instance.insert(key, value)
        $3?.initialize(to: .init(from: result))
        return S_OK
    },

    Remove: {
        guard let __unwrapped__instance = __x_ABI_C__FIMap_2_HSTRING___x_ABI_Ctest__zcomponent__CBaseWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let key: String = .init(from: $1)
        __unwrapped__instance.remove(key)
        return S_OK
    },

    Clear: {
        guard let __unwrapped__instance = __x_ABI_C__FIMap_2_HSTRING___x_ABI_Ctest__zcomponent__CBaseWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        __unwrapped__instance.clear()
        return S_OK
    }
)
typealias __x_ABI_C__FIMap_2_HSTRING___x_ABI_Ctest__zcomponent__CBaseWrapper = InterfaceWrapperBase<test_component.__x_ABI_C__FIMap_2_HSTRING___x_ABI_Ctest__zcomponent__CBaseImpl>
internal class IMapString_Base: test_component.IInspectable {
    override public class var IID: test_component.IID { IID___x_ABI_C__FIMap_2_HSTRING___x_ABI_Ctest__zcomponent__CBase }

    internal func LookupImpl(_ key: HSTRING?) throws -> UnsafeMutablePointer<__x_ABI_Ctest__component_CIBase>? {
        var result: UnsafeMutablePointer<__x_ABI_Ctest__component_CIBase>?
        _ = try perform(as: __x_ABI_C__FIMap_2_HSTRING___x_ABI_Ctest__zcomponent__CBase.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Lookup(pThis, key, &result))
        }
        return result
    }

    internal func get_SizeImpl() throws -> UINT32 {
        var result: UINT32 = 0
        _ = try perform(as: __x_ABI_C__FIMap_2_HSTRING___x_ABI_Ctest__zcomponent__CBase.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Size(pThis, &result))
        }
        return result
    }

    internal func HasKeyImpl(_ key: HSTRING?) throws -> boolean {
        var result: boolean = 0
        _ = try perform(as: __x_ABI_C__FIMap_2_HSTRING___x_ABI_Ctest__zcomponent__CBase.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.HasKey(pThis, key, &result))
        }
        return result
    }

    internal func GetViewImpl() throws -> UnsafeMutablePointer<__x_ABI_C__FIMapView_2_HSTRING___x_ABI_Ctest__zcomponent__CBase>? {
        var result: UnsafeMutablePointer<__x_ABI_C__FIMapView_2_HSTRING___x_ABI_Ctest__zcomponent__CBase>?
        _ = try perform(as: __x_ABI_C__FIMap_2_HSTRING___x_ABI_Ctest__zcomponent__CBase.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetView(pThis, &result))
        }
        return result
    }

    internal func InsertImpl(_ key: HSTRING?, _ value: UnsafeMutablePointer<__x_ABI_Ctest__component_CIBase>?) throws -> boolean {
        var result: boolean = 0
        _ = try perform(as: __x_ABI_C__FIMap_2_HSTRING___x_ABI_Ctest__zcomponent__CBase.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Insert(pThis, key, value, &result))
        }
        return result
    }

    internal func RemoveImpl(_ key: HSTRING?) throws {
        _ = try perform(as: __x_ABI_C__FIMap_2_HSTRING___x_ABI_Ctest__zcomponent__CBase.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Remove(pThis, key))
        }
    }

    internal func ClearImpl() throws {
        _ = try perform(as: __x_ABI_C__FIMap_2_HSTRING___x_ABI_Ctest__zcomponent__CBase.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Clear(pThis))
        }
    }

}

internal class __x_ABI_C__FIMap_2_HSTRING___x_ABI_Ctest__zcomponent__CBaseImpl : IMap, AbiInterfaceImpl {
    typealias T = AnyIKeyValuePair<String, Base?>?
    typealias K = String
    typealias V = Base?
    typealias SwiftProjection = AnyIMap<String, Base?>
    typealias CABI = __x_ABI_C__FIMap_2_HSTRING___x_ABI_Ctest__zcomponent__CBase
    typealias SwiftABI = IMapString_Base

    private (set) public var _default: SwiftABI

    static func from(abi: UnsafeMutablePointer<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        return __x_ABI_C__FIMap_2_HSTRING___x_ABI_Ctest__zcomponent__CBaseImpl(abi)
    }

    internal init(_ fromAbi: UnsafeMutablePointer<CABI>) {
        _default = SwiftABI(fromAbi)
    }

    static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIMap_2_HSTRING___x_ABI_Ctest__zcomponent__CBaseVTable) { $0 }
        return.init(lpVtbl: vtblPtr)
    }

    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.imap-2.lookup)
    public func lookup(_ key: String) -> Base? {
        let _key = try! HString(key)
        let result = try! _default.LookupImpl(_key.get())
        return .from(abi: result)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.imap-2.haskey)
    public func hasKey(_ key: String) -> Bool {
        let _key = try! HString(key)
        let result = try! _default.HasKeyImpl(_key.get())
        return .init(from: result)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.imap-2.getview)
    public func getView() -> AnyIMapView<String, Base?>? {
        let result = try! _default.GetViewImpl()
        return test_component.__x_ABI_C__FIMapView_2_HSTRING___x_ABI_Ctest__zcomponent__CBaseWrapper.unwrapFrom(abi: result)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.imap-2.insert)
    public func insert(_ key: String, _ value: Base?) -> Bool {
        let _key = try! HString(key)
        let result = try! _default.InsertImpl(_key.get(), RawPointer(value))
        return .init(from: result)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.imap-2.remove)
    public func remove(_ key: String) {
        let _key = try! HString(key)
        try! _default.RemoveImpl(_key.get())
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.imap-2.clear)
    public func clear() {
        try! _default.ClearImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.imap-2.size)
    public var size : UInt32 {
        get {
            let result = try! _default.get_SizeImpl()
            return result
        }

    }

    internal lazy var _IIterable: IIterableIKeyValuePairString_Base = try! _default.QueryInterface()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.imap-2.first)
    public func first() -> AnyIIterator<AnyIKeyValuePair<String, Base?>?>? {
        let result = try! _IIterable.FirstImpl()
        return test_component.__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_Ctest__zcomponent__CBaseWrapper.unwrapFrom(abi: result)
    }

    public func queryInterface(_ iid: test_component.IID) -> IUnknownRef? { nil }
}

private var IID___x_ABI_C__FIObservableMap_2_HSTRING_IInspectable: test_component.IID {
    .init(Data1: 0x236aac9d, Data2: 0xfb12, Data3: 0x5c4d, Data4: ( 0xa4,0x1c,0x9e,0x44,0x5f,0xb4,0xd7,0xec ))// 236aac9d-fb12-5c4d-a41c-9e445fb4d7ec
}

internal var __x_ABI_C__FIObservableMap_2_HSTRING_IInspectableVTable: __x_ABI_C__FIObservableMap_2_HSTRING_IInspectableVtbl = .init(
    QueryInterface: {
        guard let pUnk = $0, let riid = $1, let ppvObject = $2 else { return E_INVALIDARG }
        ppvObject.pointee = nil

        switch riid.pointee {
            case IUnknown.IID, IInspectable.IID, ISwiftImplemented.IID, IAgileObject.IID, __x_ABI_C__FIObservableMap_2_HSTRING_IInspectableWrapper.IID:
                _ = pUnk.pointee.lpVtbl.pointee.AddRef(pUnk)
                ppvObject.pointee = UnsafeMutableRawPointer(pUnk)
                return S_OK
            default:
                guard let instance = __x_ABI_C__FIObservableMap_2_HSTRING_IInspectableWrapper.tryUnwrapFrom(raw: pUnk),
                      let iUnknownRef = instance.queryInterface(riid.pointee) else { return failWith(err: E_NOINTERFACE )}
                ppvObject.pointee = UnsafeMutableRawPointer(iUnknownRef.ref)
                return S_OK

        }
    },

    AddRef: {
         guard let wrapper = __x_ABI_C__FIObservableMap_2_HSTRING_IInspectableWrapper.fromRaw($0) else { return 1 }
         _ = wrapper.retain()
         return ULONG(_getRetainCount(wrapper.takeUnretainedValue()))
    },

    Release: {
        guard let wrapper = __x_ABI_C__FIObservableMap_2_HSTRING_IInspectableWrapper.fromRaw($0) else { return 1 }
        return ULONG(_getRetainCount(wrapper.takeRetainedValue()))
    },

    GetIids: {
        let size = MemoryLayout<test_component.IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 5).assumingMemoryBound(to: test_component.IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = test_component.__x_ABI_C__FIObservableMap_2_HSTRING_IInspectableWrapper.IID
        iids[3] = test_component.__x_ABI_C__FIMap_2_HSTRING_IInspectableWrapper.IID
        iids[4] = test_component.__x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectableWrapper.IID
        $1!.pointee = 5
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.Collections.IObservableMap`2<String, Any>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    add_MapChanged: {
        guard let __unwrapped__instance = __x_ABI_C__FIObservableMap_2_HSTRING_IInspectableWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        guard let vhnd = test_component.__x_ABI_C__FMapChangedEventHandler_2_HSTRING_IInspectableWrapper.unwrapFrom(abi: $1) else { return E_INVALIDARG }
        let result = __unwrapped__instance.mapChanged.addHandler(vhnd)
        $2?.initialize(to: .from(swift: result))
        return S_OK
    },

    remove_MapChanged: {
        guard let __unwrapped__instance = __x_ABI_C__FIObservableMap_2_HSTRING_IInspectableWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let token: EventRegistrationToken = $1
        __unwrapped__instance.mapChanged.removeHandler(token)
        return S_OK
    }
)
typealias __x_ABI_C__FIObservableMap_2_HSTRING_IInspectableWrapper = InterfaceWrapperBase<test_component.__x_ABI_C__FIObservableMap_2_HSTRING_IInspectableImpl>
internal class IObservableMapString_Any: test_component.IInspectable {
    override public class var IID: test_component.IID { IID___x_ABI_C__FIObservableMap_2_HSTRING_IInspectable }

    internal func add_MapChangedImpl(_ vhnd: UnsafeMutablePointer<__x_ABI_C__FMapChangedEventHandler_2_HSTRING_IInspectable>?) throws -> EventRegistrationToken {
        var result: EventRegistrationToken = .init()
        _ = try perform(as: __x_ABI_C__FIObservableMap_2_HSTRING_IInspectable.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.add_MapChanged(pThis, vhnd, &result))
        }
        return result
    }

    internal func remove_MapChangedImpl(_ token: EventRegistrationToken) throws {
        _ = try perform(as: __x_ABI_C__FIObservableMap_2_HSTRING_IInspectable.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.remove_MapChanged(pThis, token))
        }
    }

}

internal class __x_ABI_C__FIObservableMap_2_HSTRING_IInspectableImpl : IObservableMap, AbiInterfaceImpl {
    typealias K = String
    typealias V = Any?
    typealias T = AnyIKeyValuePair<String, Any?>?
    typealias SwiftProjection = AnyIObservableMap<String, Any?>
    typealias CABI = __x_ABI_C__FIObservableMap_2_HSTRING_IInspectable
    typealias SwiftABI = IObservableMapString_Any

    private (set) public var _default: SwiftABI

    static func from(abi: UnsafeMutablePointer<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        return __x_ABI_C__FIObservableMap_2_HSTRING_IInspectableImpl(abi)
    }

    internal init(_ fromAbi: UnsafeMutablePointer<CABI>) {
        _default = SwiftABI(fromAbi)
    }

    static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIObservableMap_2_HSTRING_IInspectableVTable) { $0 }
        return.init(lpVtbl: vtblPtr)
    }

    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iobservablemap-2.mapchanged)
    public lazy var mapChanged : Event<MapChangedEventHandler<String, Any?>> = {
      .init(
        add: { [weak this = _default] in
          guard let this else { return .init() }
          let wrapper = test_component.__x_ABI_C__FMapChangedEventHandler_2_HSTRING_IInspectableWrapper($0)
          let abi = try! wrapper?.toABI { $0 }
          return try! this.add_MapChangedImpl(abi)
        },
        remove: { [weak this = _default] in
         try? this?.remove_MapChangedImpl($0) 
       }
      )
    }()

    internal lazy var _IMap: IMapString_Any = try! _default.QueryInterface()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iobservablemap-2.lookup)
    public func lookup(_ key: String) -> Any? {
        let _key = try! HString(key)
        let result = try! _IMap.LookupImpl(_key.get())
        return __ABI_.AnyWrapper.unwrapFrom(abi: result)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iobservablemap-2.haskey)
    public func hasKey(_ key: String) -> Bool {
        let _key = try! HString(key)
        let result = try! _IMap.HasKeyImpl(_key.get())
        return .init(from: result)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iobservablemap-2.getview)
    public func getView() -> AnyIMapView<String, Any?>? {
        let result = try! _IMap.GetViewImpl()
        return test_component.__x_ABI_C__FIMapView_2_HSTRING_IInspectableWrapper.unwrapFrom(abi: result)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iobservablemap-2.insert)
    public func insert(_ key: String, _ value: Any?) -> Bool {
        let _key = try! HString(key)
        let valueWrapper = __ABI_.AnyWrapper(value)
        let _value = try! valueWrapper?.toABI { $0 }
        let result = try! _IMap.InsertImpl(_key.get(), _value)
        return .init(from: result)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iobservablemap-2.remove)
    public func remove(_ key: String) {
        let _key = try! HString(key)
        try! _IMap.RemoveImpl(_key.get())
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iobservablemap-2.clear)
    public func clear() {
        try! _IMap.ClearImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iobservablemap-2.size)
    public var size : UInt32 {
        get {
            let result = try! _IMap.get_SizeImpl()
            return result
        }

    }

    internal lazy var _IIterable: IIterableIKeyValuePairString_Any = try! _default.QueryInterface()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iobservablemap-2.first)
    public func first() -> AnyIIterator<AnyIKeyValuePair<String, Any?>?>? {
        let result = try! _IIterable.FirstImpl()
        return test_component.__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectableWrapper.unwrapFrom(abi: result)
    }

    public func queryInterface(_ iid: test_component.IID) -> IUnknownRef? { nil }
}

private var IID___x_ABI_C__FIObservableMap_2_HSTRING_HSTRING: test_component.IID {
    .init(Data1: 0x1e036276, Data2: 0x2f60, Data3: 0x55f6, Data4: ( 0xb7,0xf3,0xf8,0x60,0x79,0xe6,0x90,0x0b ))// 1e036276-2f60-55f6-b7f3-f86079e6900b
}

internal var __x_ABI_C__FIObservableMap_2_HSTRING_HSTRINGVTable: __x_ABI_C__FIObservableMap_2_HSTRING_HSTRINGVtbl = .init(
    QueryInterface: {
        guard let pUnk = $0, let riid = $1, let ppvObject = $2 else { return E_INVALIDARG }
        ppvObject.pointee = nil

        switch riid.pointee {
            case IUnknown.IID, IInspectable.IID, ISwiftImplemented.IID, IAgileObject.IID, __x_ABI_C__FIObservableMap_2_HSTRING_HSTRINGWrapper.IID:
                _ = pUnk.pointee.lpVtbl.pointee.AddRef(pUnk)
                ppvObject.pointee = UnsafeMutableRawPointer(pUnk)
                return S_OK
            default:
                guard let instance = __x_ABI_C__FIObservableMap_2_HSTRING_HSTRINGWrapper.tryUnwrapFrom(raw: pUnk),
                      let iUnknownRef = instance.queryInterface(riid.pointee) else { return failWith(err: E_NOINTERFACE )}
                ppvObject.pointee = UnsafeMutableRawPointer(iUnknownRef.ref)
                return S_OK

        }
    },

    AddRef: {
         guard let wrapper = __x_ABI_C__FIObservableMap_2_HSTRING_HSTRINGWrapper.fromRaw($0) else { return 1 }
         _ = wrapper.retain()
         return ULONG(_getRetainCount(wrapper.takeUnretainedValue()))
    },

    Release: {
        guard let wrapper = __x_ABI_C__FIObservableMap_2_HSTRING_HSTRINGWrapper.fromRaw($0) else { return 1 }
        return ULONG(_getRetainCount(wrapper.takeRetainedValue()))
    },

    GetIids: {
        let size = MemoryLayout<test_component.IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 5).assumingMemoryBound(to: test_component.IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = test_component.__x_ABI_C__FIObservableMap_2_HSTRING_HSTRINGWrapper.IID
        iids[3] = test_component.__x_ABI_C__FIMap_2_HSTRING_HSTRINGWrapper.IID
        iids[4] = test_component.__x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRINGWrapper.IID
        $1!.pointee = 5
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.Collections.IObservableMap`2<String, String>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    add_MapChanged: {
        guard let __unwrapped__instance = __x_ABI_C__FIObservableMap_2_HSTRING_HSTRINGWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        guard let vhnd = test_component.__x_ABI_C__FMapChangedEventHandler_2_HSTRING_HSTRINGWrapper.unwrapFrom(abi: $1) else { return E_INVALIDARG }
        let result = __unwrapped__instance.mapChanged.addHandler(vhnd)
        $2?.initialize(to: .from(swift: result))
        return S_OK
    },

    remove_MapChanged: {
        guard let __unwrapped__instance = __x_ABI_C__FIObservableMap_2_HSTRING_HSTRINGWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let token: EventRegistrationToken = $1
        __unwrapped__instance.mapChanged.removeHandler(token)
        return S_OK
    }
)
typealias __x_ABI_C__FIObservableMap_2_HSTRING_HSTRINGWrapper = InterfaceWrapperBase<test_component.__x_ABI_C__FIObservableMap_2_HSTRING_HSTRINGImpl>
internal class IObservableMapString_String: test_component.IInspectable {
    override public class var IID: test_component.IID { IID___x_ABI_C__FIObservableMap_2_HSTRING_HSTRING }

    internal func add_MapChangedImpl(_ vhnd: UnsafeMutablePointer<__x_ABI_C__FMapChangedEventHandler_2_HSTRING_HSTRING>?) throws -> EventRegistrationToken {
        var result: EventRegistrationToken = .init()
        _ = try perform(as: __x_ABI_C__FIObservableMap_2_HSTRING_HSTRING.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.add_MapChanged(pThis, vhnd, &result))
        }
        return result
    }

    internal func remove_MapChangedImpl(_ token: EventRegistrationToken) throws {
        _ = try perform(as: __x_ABI_C__FIObservableMap_2_HSTRING_HSTRING.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.remove_MapChanged(pThis, token))
        }
    }

}

internal class __x_ABI_C__FIObservableMap_2_HSTRING_HSTRINGImpl : IObservableMap, AbiInterfaceImpl {
    typealias K = String
    typealias V = String
    typealias T = AnyIKeyValuePair<String, String>?
    typealias SwiftProjection = AnyIObservableMap<String, String>
    typealias CABI = __x_ABI_C__FIObservableMap_2_HSTRING_HSTRING
    typealias SwiftABI = IObservableMapString_String

    private (set) public var _default: SwiftABI

    static func from(abi: UnsafeMutablePointer<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        return __x_ABI_C__FIObservableMap_2_HSTRING_HSTRINGImpl(abi)
    }

    internal init(_ fromAbi: UnsafeMutablePointer<CABI>) {
        _default = SwiftABI(fromAbi)
    }

    static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIObservableMap_2_HSTRING_HSTRINGVTable) { $0 }
        return.init(lpVtbl: vtblPtr)
    }

    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iobservablemap-2.mapchanged)
    public lazy var mapChanged : Event<MapChangedEventHandler<String, String>> = {
      .init(
        add: { [weak this = _default] in
          guard let this else { return .init() }
          let wrapper = test_component.__x_ABI_C__FMapChangedEventHandler_2_HSTRING_HSTRINGWrapper($0)
          let abi = try! wrapper?.toABI { $0 }
          return try! this.add_MapChangedImpl(abi)
        },
        remove: { [weak this = _default] in
         try? this?.remove_MapChangedImpl($0) 
       }
      )
    }()

    internal lazy var _IMap: IMapString_String = try! _default.QueryInterface()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iobservablemap-2.lookup)
    public func lookup(_ key: String) -> String {
        let _key = try! HString(key)
        let result = try! _IMap.LookupImpl(_key.get())
        return .init(from: result)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iobservablemap-2.haskey)
    public func hasKey(_ key: String) -> Bool {
        let _key = try! HString(key)
        let result = try! _IMap.HasKeyImpl(_key.get())
        return .init(from: result)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iobservablemap-2.getview)
    public func getView() -> AnyIMapView<String, String>? {
        let result = try! _IMap.GetViewImpl()
        return test_component.__x_ABI_C__FIMapView_2_HSTRING_HSTRINGWrapper.unwrapFrom(abi: result)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iobservablemap-2.insert)
    public func insert(_ key: String, _ value: String) -> Bool {
        let _key = try! HString(key)
        let _value = try! HString(value)
        let result = try! _IMap.InsertImpl(_key.get(), _value.get())
        return .init(from: result)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iobservablemap-2.remove)
    public func remove(_ key: String) {
        let _key = try! HString(key)
        try! _IMap.RemoveImpl(_key.get())
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iobservablemap-2.clear)
    public func clear() {
        try! _IMap.ClearImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iobservablemap-2.size)
    public var size : UInt32 {
        get {
            let result = try! _IMap.get_SizeImpl()
            return result
        }

    }

    internal lazy var _IIterable: IIterableIKeyValuePairString_String = try! _default.QueryInterface()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iobservablemap-2.first)
    public func first() -> AnyIIterator<AnyIKeyValuePair<String, String>?>? {
        let result = try! _IIterable.FirstImpl()
        return test_component.__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRINGWrapper.unwrapFrom(abi: result)
    }

    public func queryInterface(_ iid: test_component.IID) -> IUnknownRef? { nil }
}

private var IID___x_ABI_C__FIObservableVector_1___x_ABI_Ctest__zcomponent__CBase: test_component.IID {
    .init(Data1: 0x04ca85dc, Data2: 0x5d3e, Data3: 0x573d, Data4: ( 0xb4,0xe3,0x46,0xde,0x30,0x3f,0x6c,0x35 ))// 04ca85dc-5d3e-573d-b4e3-46de303f6c35
}

internal var __x_ABI_C__FIObservableVector_1___x_ABI_Ctest__zcomponent__CBaseVTable: __x_ABI_C__FIObservableVector_1___x_ABI_Ctest__zcomponent__CBaseVtbl = .init(
    QueryInterface: {
        guard let pUnk = $0, let riid = $1, let ppvObject = $2 else { return E_INVALIDARG }
        ppvObject.pointee = nil

        switch riid.pointee {
            case IUnknown.IID, IInspectable.IID, ISwiftImplemented.IID, IAgileObject.IID, __x_ABI_C__FIObservableVector_1___x_ABI_Ctest__zcomponent__CBaseWrapper.IID:
                _ = pUnk.pointee.lpVtbl.pointee.AddRef(pUnk)
                ppvObject.pointee = UnsafeMutableRawPointer(pUnk)
                return S_OK
            default:
                guard let instance = __x_ABI_C__FIObservableVector_1___x_ABI_Ctest__zcomponent__CBaseWrapper.tryUnwrapFrom(raw: pUnk),
                      let iUnknownRef = instance.queryInterface(riid.pointee) else { return failWith(err: E_NOINTERFACE )}
                ppvObject.pointee = UnsafeMutableRawPointer(iUnknownRef.ref)
                return S_OK

        }
    },

    AddRef: {
         guard let wrapper = __x_ABI_C__FIObservableVector_1___x_ABI_Ctest__zcomponent__CBaseWrapper.fromRaw($0) else { return 1 }
         _ = wrapper.retain()
         return ULONG(_getRetainCount(wrapper.takeUnretainedValue()))
    },

    Release: {
        guard let wrapper = __x_ABI_C__FIObservableVector_1___x_ABI_Ctest__zcomponent__CBaseWrapper.fromRaw($0) else { return 1 }
        return ULONG(_getRetainCount(wrapper.takeRetainedValue()))
    },

    GetIids: {
        let size = MemoryLayout<test_component.IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 5).assumingMemoryBound(to: test_component.IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = test_component.__x_ABI_C__FIObservableVector_1___x_ABI_Ctest__zcomponent__CBaseWrapper.IID
        iids[3] = test_component.__x_ABI_C__FIVector_1___x_ABI_Ctest__zcomponent__CBaseWrapper.IID
        iids[4] = test_component.__x_ABI_C__FIIterable_1___x_ABI_Ctest__zcomponent__CBaseWrapper.IID
        $1!.pointee = 5
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.Collections.IObservableVector`1<test_component.Base>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    add_VectorChanged: {
        guard let __unwrapped__instance = __x_ABI_C__FIObservableVector_1___x_ABI_Ctest__zcomponent__CBaseWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        guard let vhnd = test_component.__x_ABI_C__FVectorChangedEventHandler_1___x_ABI_Ctest__zcomponent__CBaseWrapper.unwrapFrom(abi: $1) else { return E_INVALIDARG }
        let result = __unwrapped__instance.vectorChanged.addHandler(vhnd)
        $2?.initialize(to: .from(swift: result))
        return S_OK
    },

    remove_VectorChanged: {
        guard let __unwrapped__instance = __x_ABI_C__FIObservableVector_1___x_ABI_Ctest__zcomponent__CBaseWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let token: EventRegistrationToken = $1
        __unwrapped__instance.vectorChanged.removeHandler(token)
        return S_OK
    }
)
typealias __x_ABI_C__FIObservableVector_1___x_ABI_Ctest__zcomponent__CBaseWrapper = InterfaceWrapperBase<test_component.__x_ABI_C__FIObservableVector_1___x_ABI_Ctest__zcomponent__CBaseImpl>
internal class IObservableVectorBase: test_component.IInspectable {
    override public class var IID: test_component.IID { IID___x_ABI_C__FIObservableVector_1___x_ABI_Ctest__zcomponent__CBase }

    internal func add_VectorChangedImpl(_ vhnd: UnsafeMutablePointer<__x_ABI_C__FVectorChangedEventHandler_1___x_ABI_Ctest__zcomponent__CBase>?) throws -> EventRegistrationToken {
        var result: EventRegistrationToken = .init()
        _ = try perform(as: __x_ABI_C__FIObservableVector_1___x_ABI_Ctest__zcomponent__CBase.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.add_VectorChanged(pThis, vhnd, &result))
        }
        return result
    }

    internal func remove_VectorChangedImpl(_ token: EventRegistrationToken) throws {
        _ = try perform(as: __x_ABI_C__FIObservableVector_1___x_ABI_Ctest__zcomponent__CBase.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.remove_VectorChanged(pThis, token))
        }
    }

}

internal class __x_ABI_C__FIObservableVector_1___x_ABI_Ctest__zcomponent__CBaseImpl : IObservableVector, AbiInterfaceImpl {
    typealias T = Base?
    typealias SwiftProjection = AnyIObservableVector<Base?>
    typealias CABI = __x_ABI_C__FIObservableVector_1___x_ABI_Ctest__zcomponent__CBase
    typealias SwiftABI = IObservableVectorBase

    private (set) public var _default: SwiftABI

    static func from(abi: UnsafeMutablePointer<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        return __x_ABI_C__FIObservableVector_1___x_ABI_Ctest__zcomponent__CBaseImpl(abi)
    }

    internal init(_ fromAbi: UnsafeMutablePointer<CABI>) {
        _default = SwiftABI(fromAbi)
    }

    static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIObservableVector_1___x_ABI_Ctest__zcomponent__CBaseVTable) { $0 }
        return.init(lpVtbl: vtblPtr)
    }

    // MARK: Collection
    typealias Element = T
    var startIndex: Int { 0 }
    var endIndex: Int { Int(size) }
    func index(after i: Int) -> Int {
        i+1
    }

    func index(of: Element) -> Int? { 
        var index: UInt32 = 0
        let result = indexOf(of, &index)
        guard result else { return nil }
        return Int(index)
    }
    var count: Int { Int(size) }


    subscript(position: Int) -> Element {
        get {
            getAt(UInt32(position))
        }
        set(newValue) {
            setAt(UInt32(position), newValue)
        }
    }

    func removeLast() {
        removeAtEnd()
    }

    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iobservablevector-1.vectorchanged)
    public lazy var vectorChanged : Event<VectorChangedEventHandler<Base?>> = {
      .init(
        add: { [weak this = _default] in
          guard let this else { return .init() }
          let wrapper = test_component.__x_ABI_C__FVectorChangedEventHandler_1___x_ABI_Ctest__zcomponent__CBaseWrapper($0)
          let abi = try! wrapper?.toABI { $0 }
          return try! this.add_VectorChangedImpl(abi)
        },
        remove: { [weak this = _default] in
         try? this?.remove_VectorChangedImpl($0) 
       }
      )
    }()

    internal lazy var _IVector: IVectorBase = try! _default.QueryInterface()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iobservablevector-1.getat)
    public func getAt(_ index: UInt32) -> Base? {
        let result = try! _IVector.GetAtImpl(index)
        return .from(abi: result)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iobservablevector-1.getview)
    public func getView() -> AnyIVectorView<Base?>? {
        let result = try! _IVector.GetViewImpl()
        return test_component.__x_ABI_C__FIVectorView_1___x_ABI_Ctest__zcomponent__CBaseWrapper.unwrapFrom(abi: result)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iobservablevector-1.indexof)
    public func indexOf(_ value: Base?, _ index: inout UInt32) -> Bool {
        let result = try! _IVector.IndexOfImpl(RawPointer(value), &index)
        return .init(from: result)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iobservablevector-1.setat)
    public func setAt(_ index: UInt32, _ value: Base?) {
        try! _IVector.SetAtImpl(index, RawPointer(value))
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iobservablevector-1.insertat)
    public func insertAt(_ index: UInt32, _ value: Base?) {
        try! _IVector.InsertAtImpl(index, RawPointer(value))
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iobservablevector-1.removeat)
    public func removeAt(_ index: UInt32) {
        try! _IVector.RemoveAtImpl(index)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iobservablevector-1.append)
    public func append(_ value: Base?) {
        try! _IVector.AppendImpl(RawPointer(value))
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iobservablevector-1.removeatend)
    public func removeAtEnd() {
        try! _IVector.RemoveAtEndImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iobservablevector-1.clear)
    public func clear() {
        try! _IVector.ClearImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iobservablevector-1.size)
    public var size : UInt32 {
        get {
            let result = try! _IVector.get_SizeImpl()
            return result
        }

    }

    internal lazy var _IIterable: IIterableBase = try! _default.QueryInterface()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iobservablevector-1.first)
    public func first() -> AnyIIterator<Base?>? {
        let result = try! _IIterable.FirstImpl()
        return test_component.__x_ABI_C__FIIterator_1___x_ABI_Ctest__zcomponent__CBaseWrapper.unwrapFrom(abi: result)
    }

    public func queryInterface(_ iid: test_component.IID) -> IUnknownRef? { nil }
}

private var IID___x_ABI_C__FIObservableVector_1___x_ABI_Ctest__zcomponent__CIBasic: test_component.IID {
    .init(Data1: 0xd0fc0651, Data2: 0x9791, Data3: 0x5130, Data4: ( 0xa7,0x41,0xb0,0xef,0xea,0xfa,0xbc,0xa9 ))// d0fc0651-9791-5130-a741-b0efeafabca9
}

internal var __x_ABI_C__FIObservableVector_1___x_ABI_Ctest__zcomponent__CIBasicVTable: __x_ABI_C__FIObservableVector_1___x_ABI_Ctest__zcomponent__CIBasicVtbl = .init(
    QueryInterface: {
        guard let pUnk = $0, let riid = $1, let ppvObject = $2 else { return E_INVALIDARG }
        ppvObject.pointee = nil

        switch riid.pointee {
            case IUnknown.IID, IInspectable.IID, ISwiftImplemented.IID, IAgileObject.IID, __x_ABI_C__FIObservableVector_1___x_ABI_Ctest__zcomponent__CIBasicWrapper.IID:
                _ = pUnk.pointee.lpVtbl.pointee.AddRef(pUnk)
                ppvObject.pointee = UnsafeMutableRawPointer(pUnk)
                return S_OK
            default:
                guard let instance = __x_ABI_C__FIObservableVector_1___x_ABI_Ctest__zcomponent__CIBasicWrapper.tryUnwrapFrom(raw: pUnk),
                      let iUnknownRef = instance.queryInterface(riid.pointee) else { return failWith(err: E_NOINTERFACE )}
                ppvObject.pointee = UnsafeMutableRawPointer(iUnknownRef.ref)
                return S_OK

        }
    },

    AddRef: {
         guard let wrapper = __x_ABI_C__FIObservableVector_1___x_ABI_Ctest__zcomponent__CIBasicWrapper.fromRaw($0) else { return 1 }
         _ = wrapper.retain()
         return ULONG(_getRetainCount(wrapper.takeUnretainedValue()))
    },

    Release: {
        guard let wrapper = __x_ABI_C__FIObservableVector_1___x_ABI_Ctest__zcomponent__CIBasicWrapper.fromRaw($0) else { return 1 }
        return ULONG(_getRetainCount(wrapper.takeRetainedValue()))
    },

    GetIids: {
        let size = MemoryLayout<test_component.IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 5).assumingMemoryBound(to: test_component.IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = test_component.__x_ABI_C__FIObservableVector_1___x_ABI_Ctest__zcomponent__CIBasicWrapper.IID
        iids[3] = test_component.__x_ABI_C__FIVector_1___x_ABI_Ctest__zcomponent__CIBasicWrapper.IID
        iids[4] = test_component.__x_ABI_C__FIIterable_1___x_ABI_Ctest__zcomponent__CIBasicWrapper.IID
        $1!.pointee = 5
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.Collections.IObservableVector`1<test_component.IBasic>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    add_VectorChanged: {
        guard let __unwrapped__instance = __x_ABI_C__FIObservableVector_1___x_ABI_Ctest__zcomponent__CIBasicWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        guard let vhnd = test_component.__x_ABI_C__FVectorChangedEventHandler_1___x_ABI_Ctest__zcomponent__CIBasicWrapper.unwrapFrom(abi: $1) else { return E_INVALIDARG }
        let result = __unwrapped__instance.vectorChanged.addHandler(vhnd)
        $2?.initialize(to: .from(swift: result))
        return S_OK
    },

    remove_VectorChanged: {
        guard let __unwrapped__instance = __x_ABI_C__FIObservableVector_1___x_ABI_Ctest__zcomponent__CIBasicWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let token: EventRegistrationToken = $1
        __unwrapped__instance.vectorChanged.removeHandler(token)
        return S_OK
    }
)
typealias __x_ABI_C__FIObservableVector_1___x_ABI_Ctest__zcomponent__CIBasicWrapper = InterfaceWrapperBase<test_component.__x_ABI_C__FIObservableVector_1___x_ABI_Ctest__zcomponent__CIBasicImpl>
internal class IObservableVectorIBasic: test_component.IInspectable {
    override public class var IID: test_component.IID { IID___x_ABI_C__FIObservableVector_1___x_ABI_Ctest__zcomponent__CIBasic }

    internal func add_VectorChangedImpl(_ vhnd: UnsafeMutablePointer<__x_ABI_C__FVectorChangedEventHandler_1___x_ABI_Ctest__zcomponent__CIBasic>?) throws -> EventRegistrationToken {
        var result: EventRegistrationToken = .init()
        _ = try perform(as: __x_ABI_C__FIObservableVector_1___x_ABI_Ctest__zcomponent__CIBasic.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.add_VectorChanged(pThis, vhnd, &result))
        }
        return result
    }

    internal func remove_VectorChangedImpl(_ token: EventRegistrationToken) throws {
        _ = try perform(as: __x_ABI_C__FIObservableVector_1___x_ABI_Ctest__zcomponent__CIBasic.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.remove_VectorChanged(pThis, token))
        }
    }

}

internal class __x_ABI_C__FIObservableVector_1___x_ABI_Ctest__zcomponent__CIBasicImpl : IObservableVector, AbiInterfaceImpl {
    typealias T = AnyIBasic?
    typealias SwiftProjection = AnyIObservableVector<AnyIBasic?>
    typealias CABI = __x_ABI_C__FIObservableVector_1___x_ABI_Ctest__zcomponent__CIBasic
    typealias SwiftABI = IObservableVectorIBasic

    private (set) public var _default: SwiftABI

    static func from(abi: UnsafeMutablePointer<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        return __x_ABI_C__FIObservableVector_1___x_ABI_Ctest__zcomponent__CIBasicImpl(abi)
    }

    internal init(_ fromAbi: UnsafeMutablePointer<CABI>) {
        _default = SwiftABI(fromAbi)
    }

    static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIObservableVector_1___x_ABI_Ctest__zcomponent__CIBasicVTable) { $0 }
        return.init(lpVtbl: vtblPtr)
    }

    // MARK: Collection
    typealias Element = T
    var startIndex: Int { 0 }
    var endIndex: Int { Int(size) }
    func index(after i: Int) -> Int {
        i+1
    }

    func index(of: Element) -> Int? { 
        var index: UInt32 = 0
        let result = indexOf(of, &index)
        guard result else { return nil }
        return Int(index)
    }
    var count: Int { Int(size) }


    subscript(position: Int) -> Element {
        get {
            getAt(UInt32(position))
        }
        set(newValue) {
            setAt(UInt32(position), newValue)
        }
    }

    func removeLast() {
        removeAtEnd()
    }

    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iobservablevector-1.vectorchanged)
    public lazy var vectorChanged : Event<VectorChangedEventHandler<IBasic?>> = {
      .init(
        add: { [weak this = _default] in
          guard let this else { return .init() }
          let wrapper = test_component.__x_ABI_C__FVectorChangedEventHandler_1___x_ABI_Ctest__zcomponent__CIBasicWrapper($0)
          let abi = try! wrapper?.toABI { $0 }
          return try! this.add_VectorChangedImpl(abi)
        },
        remove: { [weak this = _default] in
         try? this?.remove_VectorChangedImpl($0) 
       }
      )
    }()

    internal lazy var _IVector: IVectorIBasic = try! _default.QueryInterface()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iobservablevector-1.getat)
    public func getAt(_ index: UInt32) -> AnyIBasic? {
        let result = try! _IVector.GetAtImpl(index)
        return __ABI_test_component.IBasicWrapper.unwrapFrom(abi: result)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iobservablevector-1.getview)
    public func getView() -> AnyIVectorView<AnyIBasic?>? {
        let result = try! _IVector.GetViewImpl()
        return test_component.__x_ABI_C__FIVectorView_1___x_ABI_Ctest__zcomponent__CIBasicWrapper.unwrapFrom(abi: result)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iobservablevector-1.indexof)
    public func indexOf(_ value: AnyIBasic?, _ index: inout UInt32) -> Bool {
        let valueWrapper = __ABI_test_component.IBasicWrapper(value)
        let _value = try! valueWrapper?.toABI { $0 }
        let result = try! _IVector.IndexOfImpl(_value, &index)
        return .init(from: result)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iobservablevector-1.setat)
    public func setAt(_ index: UInt32, _ value: AnyIBasic?) {
        let valueWrapper = __ABI_test_component.IBasicWrapper(value)
        let _value = try! valueWrapper?.toABI { $0 }
        try! _IVector.SetAtImpl(index, _value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iobservablevector-1.insertat)
    public func insertAt(_ index: UInt32, _ value: AnyIBasic?) {
        let valueWrapper = __ABI_test_component.IBasicWrapper(value)
        let _value = try! valueWrapper?.toABI { $0 }
        try! _IVector.InsertAtImpl(index, _value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iobservablevector-1.removeat)
    public func removeAt(_ index: UInt32) {
        try! _IVector.RemoveAtImpl(index)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iobservablevector-1.append)
    public func append(_ value: AnyIBasic?) {
        let valueWrapper = __ABI_test_component.IBasicWrapper(value)
        let _value = try! valueWrapper?.toABI { $0 }
        try! _IVector.AppendImpl(_value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iobservablevector-1.removeatend)
    public func removeAtEnd() {
        try! _IVector.RemoveAtEndImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iobservablevector-1.clear)
    public func clear() {
        try! _IVector.ClearImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iobservablevector-1.size)
    public var size : UInt32 {
        get {
            let result = try! _IVector.get_SizeImpl()
            return result
        }

    }

    internal lazy var _IIterable: IIterableIBasic = try! _default.QueryInterface()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iobservablevector-1.first)
    public func first() -> AnyIIterator<AnyIBasic?>? {
        let result = try! _IIterable.FirstImpl()
        return test_component.__x_ABI_C__FIIterator_1___x_ABI_Ctest__zcomponent__CIBasicWrapper.unwrapFrom(abi: result)
    }

    public func queryInterface(_ iid: test_component.IID) -> IUnknownRef? { nil }
}

private var IID___x_ABI_C__FIVectorView_1_IInspectable: test_component.IID {
    .init(Data1: 0xa6487363, Data2: 0xb074, Data3: 0x5c60, Data4: ( 0xab,0x16,0x86,0x6d,0xce,0x4e,0xe5,0x4d ))// a6487363-b074-5c60-ab16-866dce4ee54d
}

internal var __x_ABI_C__FIVectorView_1_IInspectableVTable: __x_ABI_C__FIVectorView_1_IInspectableVtbl = .init(
    QueryInterface: {
        guard let pUnk = $0, let riid = $1, let ppvObject = $2 else { return E_INVALIDARG }
        ppvObject.pointee = nil

        switch riid.pointee {
            case IUnknown.IID, IInspectable.IID, ISwiftImplemented.IID, IAgileObject.IID, __x_ABI_C__FIVectorView_1_IInspectableWrapper.IID:
                _ = pUnk.pointee.lpVtbl.pointee.AddRef(pUnk)
                ppvObject.pointee = UnsafeMutableRawPointer(pUnk)
                return S_OK
            default:
                guard let instance = __x_ABI_C__FIVectorView_1_IInspectableWrapper.tryUnwrapFrom(raw: pUnk),
                      let iUnknownRef = instance.queryInterface(riid.pointee) else { return failWith(err: E_NOINTERFACE )}
                ppvObject.pointee = UnsafeMutableRawPointer(iUnknownRef.ref)
                return S_OK

        }
    },

    AddRef: {
         guard let wrapper = __x_ABI_C__FIVectorView_1_IInspectableWrapper.fromRaw($0) else { return 1 }
         _ = wrapper.retain()
         return ULONG(_getRetainCount(wrapper.takeUnretainedValue()))
    },

    Release: {
        guard let wrapper = __x_ABI_C__FIVectorView_1_IInspectableWrapper.fromRaw($0) else { return 1 }
        return ULONG(_getRetainCount(wrapper.takeRetainedValue()))
    },

    GetIids: {
        let size = MemoryLayout<test_component.IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 4).assumingMemoryBound(to: test_component.IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = test_component.__x_ABI_C__FIVectorView_1_IInspectableWrapper.IID
        iids[3] = test_component.__x_ABI_C__FIIterable_1_IInspectableWrapper.IID
        $1!.pointee = 4
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.Collections.IVectorView`1<Any>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    GetAt: {
        guard let __unwrapped__instance = __x_ABI_C__FIVectorView_1_IInspectableWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let index: UInt32 = $1
        let result = __unwrapped__instance.getAt(index)
        let resultWrapper = __ABI_.AnyWrapper(result)
        resultWrapper?.copyTo($2)
        return S_OK
    },

    get_Size: {
        guard let __unwrapped__instance = __x_ABI_C__FIVectorView_1_IInspectableWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.size
        $1?.initialize(to: result)
        return S_OK
    },

    IndexOf: {
        guard let __unwrapped__instance = __x_ABI_C__FIVectorView_1_IInspectableWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let value: Any? = __ABI_.AnyWrapper.unwrapFrom(abi: $1)
        var index: UInt32 = 0
        let result = __unwrapped__instance.indexOf(value, &index)
        $2?.initialize(to: index)
        $3?.initialize(to: .init(from: result))
        return S_OK
    },

    GetMany: { _, _, _, _, _ in return failWith(err: E_NOTIMPL) }
)
typealias __x_ABI_C__FIVectorView_1_IInspectableWrapper = InterfaceWrapperBase<test_component.__x_ABI_C__FIVectorView_1_IInspectableImpl>
internal class IVectorViewAny: test_component.IInspectable {
    override public class var IID: test_component.IID { IID___x_ABI_C__FIVectorView_1_IInspectable }

    internal func GetAtImpl(_ index: UINT32) throws -> UnsafeMutablePointer<C_IInspectable>? {
        var result: UnsafeMutablePointer<C_IInspectable>?
        _ = try perform(as: __x_ABI_C__FIVectorView_1_IInspectable.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetAt(pThis, index, &result))
        }
        return result
    }

    internal func get_SizeImpl() throws -> UINT32 {
        var result: UINT32 = 0
        _ = try perform(as: __x_ABI_C__FIVectorView_1_IInspectable.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Size(pThis, &result))
        }
        return result
    }

    internal func IndexOfImpl(_ value: UnsafeMutablePointer<C_IInspectable>?, _ index: inout UINT32) throws -> boolean {
        var result: boolean = 0
        _ = try perform(as: __x_ABI_C__FIVectorView_1_IInspectable.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.IndexOf(pThis, value, &index, &result))
        }
        return result
    }

}

internal class __x_ABI_C__FIVectorView_1_IInspectableImpl : IVectorView, AbiInterfaceImpl {
    typealias T = Any?
    typealias SwiftProjection = AnyIVectorView<Any?>
    typealias CABI = __x_ABI_C__FIVectorView_1_IInspectable
    typealias SwiftABI = IVectorViewAny

    private (set) public var _default: SwiftABI

    static func from(abi: UnsafeMutablePointer<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        return __x_ABI_C__FIVectorView_1_IInspectableImpl(abi)
    }

    internal init(_ fromAbi: UnsafeMutablePointer<CABI>) {
        _default = SwiftABI(fromAbi)
    }

    static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIVectorView_1_IInspectableVTable) { $0 }
        return.init(lpVtbl: vtblPtr)
    }

    // MARK: Collection
    typealias Element = T
    var startIndex: Int { 0 }
    var endIndex: Int { Int(size) }
    func index(after i: Int) -> Int {
        i+1
    }

    func index(of: Element) -> Int? { 
        var index: UInt32 = 0
        let result = indexOf(of, &index)
        guard result else { return nil }
        return Int(index)
    }
    var count: Int { Int(size) }

    subscript(position: Int) -> Element {
        get {
            getAt(UInt32(position))
        }
    }
    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivectorview-1.getat)
    public func getAt(_ index: UInt32) -> Any? {
        let result = try! _default.GetAtImpl(index)
        return __ABI_.AnyWrapper.unwrapFrom(abi: result)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivectorview-1.indexof)
    public func indexOf(_ value: Any?, _ index: inout UInt32) -> Bool {
        let valueWrapper = __ABI_.AnyWrapper(value)
        let _value = try! valueWrapper?.toABI { $0 }
        let result = try! _default.IndexOfImpl(_value, &index)
        return .init(from: result)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivectorview-1.size)
    public var size : UInt32 {
        get {
            let result = try! _default.get_SizeImpl()
            return result
        }

    }

    internal lazy var _IIterable: IIterableAny = try! _default.QueryInterface()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivectorview-1.first)
    public func first() -> AnyIIterator<Any?>? {
        let result = try! _IIterable.FirstImpl()
        return test_component.__x_ABI_C__FIIterator_1_IInspectableWrapper.unwrapFrom(abi: result)
    }

    public func queryInterface(_ iid: test_component.IID) -> IUnknownRef? { nil }
}

private var IID___x_ABI_C__FIVectorView_1_HSTRING: test_component.IID {
    .init(Data1: 0x2f13c006, Data2: 0xa03a, Data3: 0x5f69, Data4: ( 0xb0,0x90,0x75,0xa4,0x3e,0x33,0x42,0x3e ))// 2f13c006-a03a-5f69-b090-75a43e33423e
}

internal var __x_ABI_C__FIVectorView_1_HSTRINGVTable: __x_ABI_C__FIVectorView_1_HSTRINGVtbl = .init(
    QueryInterface: {
        guard let pUnk = $0, let riid = $1, let ppvObject = $2 else { return E_INVALIDARG }
        ppvObject.pointee = nil

        switch riid.pointee {
            case IUnknown.IID, IInspectable.IID, ISwiftImplemented.IID, IAgileObject.IID, __x_ABI_C__FIVectorView_1_HSTRINGWrapper.IID:
                _ = pUnk.pointee.lpVtbl.pointee.AddRef(pUnk)
                ppvObject.pointee = UnsafeMutableRawPointer(pUnk)
                return S_OK
            default:
                guard let instance = __x_ABI_C__FIVectorView_1_HSTRINGWrapper.tryUnwrapFrom(raw: pUnk),
                      let iUnknownRef = instance.queryInterface(riid.pointee) else { return failWith(err: E_NOINTERFACE )}
                ppvObject.pointee = UnsafeMutableRawPointer(iUnknownRef.ref)
                return S_OK

        }
    },

    AddRef: {
         guard let wrapper = __x_ABI_C__FIVectorView_1_HSTRINGWrapper.fromRaw($0) else { return 1 }
         _ = wrapper.retain()
         return ULONG(_getRetainCount(wrapper.takeUnretainedValue()))
    },

    Release: {
        guard let wrapper = __x_ABI_C__FIVectorView_1_HSTRINGWrapper.fromRaw($0) else { return 1 }
        return ULONG(_getRetainCount(wrapper.takeRetainedValue()))
    },

    GetIids: {
        let size = MemoryLayout<test_component.IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 4).assumingMemoryBound(to: test_component.IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = test_component.__x_ABI_C__FIVectorView_1_HSTRINGWrapper.IID
        iids[3] = test_component.__x_ABI_C__FIIterable_1_HSTRINGWrapper.IID
        $1!.pointee = 4
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.Collections.IVectorView`1<String>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    GetAt: {
        guard let __unwrapped__instance = __x_ABI_C__FIVectorView_1_HSTRINGWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let index: UInt32 = $1
        let result = __unwrapped__instance.getAt(index)
        $2?.initialize(to: try! HString(result).detach())
        return S_OK
    },

    get_Size: {
        guard let __unwrapped__instance = __x_ABI_C__FIVectorView_1_HSTRINGWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.size
        $1?.initialize(to: result)
        return S_OK
    },

    IndexOf: {
        guard let __unwrapped__instance = __x_ABI_C__FIVectorView_1_HSTRINGWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let value: String = .init(from: $1)
        var index: UInt32 = 0
        let result = __unwrapped__instance.indexOf(value, &index)
        $2?.initialize(to: index)
        $3?.initialize(to: .init(from: result))
        return S_OK
    },

    GetMany: { _, _, _, _, _ in return failWith(err: E_NOTIMPL) }
)
typealias __x_ABI_C__FIVectorView_1_HSTRINGWrapper = InterfaceWrapperBase<test_component.__x_ABI_C__FIVectorView_1_HSTRINGImpl>
internal class IVectorViewString: test_component.IInspectable {
    override public class var IID: test_component.IID { IID___x_ABI_C__FIVectorView_1_HSTRING }

    internal func GetAtImpl(_ index: UINT32) throws -> HSTRING? {
        var result: HSTRING?
        _ = try perform(as: __x_ABI_C__FIVectorView_1_HSTRING.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetAt(pThis, index, &result))
        }
        return result
    }

    internal func get_SizeImpl() throws -> UINT32 {
        var result: UINT32 = 0
        _ = try perform(as: __x_ABI_C__FIVectorView_1_HSTRING.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Size(pThis, &result))
        }
        return result
    }

    internal func IndexOfImpl(_ value: HSTRING?, _ index: inout UINT32) throws -> boolean {
        var result: boolean = 0
        _ = try perform(as: __x_ABI_C__FIVectorView_1_HSTRING.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.IndexOf(pThis, value, &index, &result))
        }
        return result
    }

}

internal class __x_ABI_C__FIVectorView_1_HSTRINGImpl : IVectorView, AbiInterfaceImpl {
    typealias T = String
    typealias SwiftProjection = AnyIVectorView<String>
    typealias CABI = __x_ABI_C__FIVectorView_1_HSTRING
    typealias SwiftABI = IVectorViewString

    private (set) public var _default: SwiftABI

    static func from(abi: UnsafeMutablePointer<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        return __x_ABI_C__FIVectorView_1_HSTRINGImpl(abi)
    }

    internal init(_ fromAbi: UnsafeMutablePointer<CABI>) {
        _default = SwiftABI(fromAbi)
    }

    static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIVectorView_1_HSTRINGVTable) { $0 }
        return.init(lpVtbl: vtblPtr)
    }

    // MARK: Collection
    typealias Element = T
    var startIndex: Int { 0 }
    var endIndex: Int { Int(size) }
    func index(after i: Int) -> Int {
        i+1
    }

    func index(of: Element) -> Int? { 
        var index: UInt32 = 0
        let result = indexOf(of, &index)
        guard result else { return nil }
        return Int(index)
    }
    var count: Int { Int(size) }

    subscript(position: Int) -> Element {
        get {
            getAt(UInt32(position))
        }
    }
    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivectorview-1.getat)
    public func getAt(_ index: UInt32) -> String {
        let result = try! _default.GetAtImpl(index)
        return .init(from: result)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivectorview-1.indexof)
    public func indexOf(_ value: String, _ index: inout UInt32) -> Bool {
        let _value = try! HString(value)
        let result = try! _default.IndexOfImpl(_value.get(), &index)
        return .init(from: result)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivectorview-1.size)
    public var size : UInt32 {
        get {
            let result = try! _default.get_SizeImpl()
            return result
        }

    }

    internal lazy var _IIterable: IIterableString = try! _default.QueryInterface()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivectorview-1.first)
    public func first() -> AnyIIterator<String>? {
        let result = try! _IIterable.FirstImpl()
        return test_component.__x_ABI_C__FIIterator_1_HSTRINGWrapper.unwrapFrom(abi: result)
    }

    public func queryInterface(_ iid: test_component.IID) -> IUnknownRef? { nil }
}

private var IID___x_ABI_C__FIVectorView_1___x_ABI_Ctest__zcomponent__CBase: test_component.IID {
    .init(Data1: 0x92c07225, Data2: 0x1151, Data3: 0x51be, Data4: ( 0x83,0x03,0xf0,0x11,0x9f,0x4a,0xac,0xe6 ))// 92c07225-1151-51be-8303-f0119f4aace6
}

internal var __x_ABI_C__FIVectorView_1___x_ABI_Ctest__zcomponent__CBaseVTable: __x_ABI_C__FIVectorView_1___x_ABI_Ctest__zcomponent__CBaseVtbl = .init(
    QueryInterface: {
        guard let pUnk = $0, let riid = $1, let ppvObject = $2 else { return E_INVALIDARG }
        ppvObject.pointee = nil

        switch riid.pointee {
            case IUnknown.IID, IInspectable.IID, ISwiftImplemented.IID, IAgileObject.IID, __x_ABI_C__FIVectorView_1___x_ABI_Ctest__zcomponent__CBaseWrapper.IID:
                _ = pUnk.pointee.lpVtbl.pointee.AddRef(pUnk)
                ppvObject.pointee = UnsafeMutableRawPointer(pUnk)
                return S_OK
            default:
                guard let instance = __x_ABI_C__FIVectorView_1___x_ABI_Ctest__zcomponent__CBaseWrapper.tryUnwrapFrom(raw: pUnk),
                      let iUnknownRef = instance.queryInterface(riid.pointee) else { return failWith(err: E_NOINTERFACE )}
                ppvObject.pointee = UnsafeMutableRawPointer(iUnknownRef.ref)
                return S_OK

        }
    },

    AddRef: {
         guard let wrapper = __x_ABI_C__FIVectorView_1___x_ABI_Ctest__zcomponent__CBaseWrapper.fromRaw($0) else { return 1 }
         _ = wrapper.retain()
         return ULONG(_getRetainCount(wrapper.takeUnretainedValue()))
    },

    Release: {
        guard let wrapper = __x_ABI_C__FIVectorView_1___x_ABI_Ctest__zcomponent__CBaseWrapper.fromRaw($0) else { return 1 }
        return ULONG(_getRetainCount(wrapper.takeRetainedValue()))
    },

    GetIids: {
        let size = MemoryLayout<test_component.IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 4).assumingMemoryBound(to: test_component.IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = test_component.__x_ABI_C__FIVectorView_1___x_ABI_Ctest__zcomponent__CBaseWrapper.IID
        iids[3] = test_component.__x_ABI_C__FIIterable_1___x_ABI_Ctest__zcomponent__CBaseWrapper.IID
        $1!.pointee = 4
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.Collections.IVectorView`1<test_component.Base>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    GetAt: {
        guard let __unwrapped__instance = __x_ABI_C__FIVectorView_1___x_ABI_Ctest__zcomponent__CBaseWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let index: UInt32 = $1
        let result = __unwrapped__instance.getAt(index)
        result?.copyTo($2)
        return S_OK
    },

    get_Size: {
        guard let __unwrapped__instance = __x_ABI_C__FIVectorView_1___x_ABI_Ctest__zcomponent__CBaseWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.size
        $1?.initialize(to: result)
        return S_OK
    },

    IndexOf: {
        guard let __unwrapped__instance = __x_ABI_C__FIVectorView_1___x_ABI_Ctest__zcomponent__CBaseWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let value: test_component.Base? = .from(abi: $1)
        var index: UInt32 = 0
        let result = __unwrapped__instance.indexOf(value, &index)
        $2?.initialize(to: index)
        $3?.initialize(to: .init(from: result))
        return S_OK
    },

    GetMany: { _, _, _, _, _ in return failWith(err: E_NOTIMPL) }
)
typealias __x_ABI_C__FIVectorView_1___x_ABI_Ctest__zcomponent__CBaseWrapper = InterfaceWrapperBase<test_component.__x_ABI_C__FIVectorView_1___x_ABI_Ctest__zcomponent__CBaseImpl>
internal class IVectorViewBase: test_component.IInspectable {
    override public class var IID: test_component.IID { IID___x_ABI_C__FIVectorView_1___x_ABI_Ctest__zcomponent__CBase }

    internal func GetAtImpl(_ index: UINT32) throws -> UnsafeMutablePointer<__x_ABI_Ctest__component_CIBase>? {
        var result: UnsafeMutablePointer<__x_ABI_Ctest__component_CIBase>?
        _ = try perform(as: __x_ABI_C__FIVectorView_1___x_ABI_Ctest__zcomponent__CBase.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetAt(pThis, index, &result))
        }
        return result
    }

    internal func get_SizeImpl() throws -> UINT32 {
        var result: UINT32 = 0
        _ = try perform(as: __x_ABI_C__FIVectorView_1___x_ABI_Ctest__zcomponent__CBase.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Size(pThis, &result))
        }
        return result
    }

    internal func IndexOfImpl(_ value: UnsafeMutablePointer<__x_ABI_Ctest__component_CIBase>?, _ index: inout UINT32) throws -> boolean {
        var result: boolean = 0
        _ = try perform(as: __x_ABI_C__FIVectorView_1___x_ABI_Ctest__zcomponent__CBase.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.IndexOf(pThis, value, &index, &result))
        }
        return result
    }

}

internal class __x_ABI_C__FIVectorView_1___x_ABI_Ctest__zcomponent__CBaseImpl : IVectorView, AbiInterfaceImpl {
    typealias T = Base?
    typealias SwiftProjection = AnyIVectorView<Base?>
    typealias CABI = __x_ABI_C__FIVectorView_1___x_ABI_Ctest__zcomponent__CBase
    typealias SwiftABI = IVectorViewBase

    private (set) public var _default: SwiftABI

    static func from(abi: UnsafeMutablePointer<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        return __x_ABI_C__FIVectorView_1___x_ABI_Ctest__zcomponent__CBaseImpl(abi)
    }

    internal init(_ fromAbi: UnsafeMutablePointer<CABI>) {
        _default = SwiftABI(fromAbi)
    }

    static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIVectorView_1___x_ABI_Ctest__zcomponent__CBaseVTable) { $0 }
        return.init(lpVtbl: vtblPtr)
    }

    // MARK: Collection
    typealias Element = T
    var startIndex: Int { 0 }
    var endIndex: Int { Int(size) }
    func index(after i: Int) -> Int {
        i+1
    }

    func index(of: Element) -> Int? { 
        var index: UInt32 = 0
        let result = indexOf(of, &index)
        guard result else { return nil }
        return Int(index)
    }
    var count: Int { Int(size) }

    subscript(position: Int) -> Element {
        get {
            getAt(UInt32(position))
        }
    }
    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivectorview-1.getat)
    public func getAt(_ index: UInt32) -> Base? {
        let result = try! _default.GetAtImpl(index)
        return .from(abi: result)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivectorview-1.indexof)
    public func indexOf(_ value: Base?, _ index: inout UInt32) -> Bool {
        let result = try! _default.IndexOfImpl(RawPointer(value), &index)
        return .init(from: result)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivectorview-1.size)
    public var size : UInt32 {
        get {
            let result = try! _default.get_SizeImpl()
            return result
        }

    }

    internal lazy var _IIterable: IIterableBase = try! _default.QueryInterface()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivectorview-1.first)
    public func first() -> AnyIIterator<Base?>? {
        let result = try! _IIterable.FirstImpl()
        return test_component.__x_ABI_C__FIIterator_1___x_ABI_Ctest__zcomponent__CBaseWrapper.unwrapFrom(abi: result)
    }

    public func queryInterface(_ iid: test_component.IID) -> IUnknownRef? { nil }
}

private var IID___x_ABI_C__FIVectorView_1___x_ABI_Ctest__zcomponent__CIBasic: test_component.IID {
    .init(Data1: 0x90050e25, Data2: 0xb754, Data3: 0x51a3, Data4: ( 0x83,0x44,0x87,0xdf,0x43,0xe9,0x03,0xb7 ))// 90050e25-b754-51a3-8344-87df43e903b7
}

internal var __x_ABI_C__FIVectorView_1___x_ABI_Ctest__zcomponent__CIBasicVTable: __x_ABI_C__FIVectorView_1___x_ABI_Ctest__zcomponent__CIBasicVtbl = .init(
    QueryInterface: {
        guard let pUnk = $0, let riid = $1, let ppvObject = $2 else { return E_INVALIDARG }
        ppvObject.pointee = nil

        switch riid.pointee {
            case IUnknown.IID, IInspectable.IID, ISwiftImplemented.IID, IAgileObject.IID, __x_ABI_C__FIVectorView_1___x_ABI_Ctest__zcomponent__CIBasicWrapper.IID:
                _ = pUnk.pointee.lpVtbl.pointee.AddRef(pUnk)
                ppvObject.pointee = UnsafeMutableRawPointer(pUnk)
                return S_OK
            default:
                guard let instance = __x_ABI_C__FIVectorView_1___x_ABI_Ctest__zcomponent__CIBasicWrapper.tryUnwrapFrom(raw: pUnk),
                      let iUnknownRef = instance.queryInterface(riid.pointee) else { return failWith(err: E_NOINTERFACE )}
                ppvObject.pointee = UnsafeMutableRawPointer(iUnknownRef.ref)
                return S_OK

        }
    },

    AddRef: {
         guard let wrapper = __x_ABI_C__FIVectorView_1___x_ABI_Ctest__zcomponent__CIBasicWrapper.fromRaw($0) else { return 1 }
         _ = wrapper.retain()
         return ULONG(_getRetainCount(wrapper.takeUnretainedValue()))
    },

    Release: {
        guard let wrapper = __x_ABI_C__FIVectorView_1___x_ABI_Ctest__zcomponent__CIBasicWrapper.fromRaw($0) else { return 1 }
        return ULONG(_getRetainCount(wrapper.takeRetainedValue()))
    },

    GetIids: {
        let size = MemoryLayout<test_component.IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 4).assumingMemoryBound(to: test_component.IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = test_component.__x_ABI_C__FIVectorView_1___x_ABI_Ctest__zcomponent__CIBasicWrapper.IID
        iids[3] = test_component.__x_ABI_C__FIIterable_1___x_ABI_Ctest__zcomponent__CIBasicWrapper.IID
        $1!.pointee = 4
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.Collections.IVectorView`1<test_component.IBasic>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    GetAt: {
        guard let __unwrapped__instance = __x_ABI_C__FIVectorView_1___x_ABI_Ctest__zcomponent__CIBasicWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let index: UInt32 = $1
        let result = __unwrapped__instance.getAt(index)
        let resultWrapper = __ABI_test_component.IBasicWrapper(result)
        resultWrapper?.copyTo($2)
        return S_OK
    },

    get_Size: {
        guard let __unwrapped__instance = __x_ABI_C__FIVectorView_1___x_ABI_Ctest__zcomponent__CIBasicWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.size
        $1?.initialize(to: result)
        return S_OK
    },

    IndexOf: {
        guard let __unwrapped__instance = __x_ABI_C__FIVectorView_1___x_ABI_Ctest__zcomponent__CIBasicWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let value: test_component.AnyIBasic? = __ABI_test_component.IBasicWrapper.unwrapFrom(abi: $1)
        var index: UInt32 = 0
        let result = __unwrapped__instance.indexOf(value, &index)
        $2?.initialize(to: index)
        $3?.initialize(to: .init(from: result))
        return S_OK
    },

    GetMany: { _, _, _, _, _ in return failWith(err: E_NOTIMPL) }
)
typealias __x_ABI_C__FIVectorView_1___x_ABI_Ctest__zcomponent__CIBasicWrapper = InterfaceWrapperBase<test_component.__x_ABI_C__FIVectorView_1___x_ABI_Ctest__zcomponent__CIBasicImpl>
internal class IVectorViewIBasic: test_component.IInspectable {
    override public class var IID: test_component.IID { IID___x_ABI_C__FIVectorView_1___x_ABI_Ctest__zcomponent__CIBasic }

    internal func GetAtImpl(_ index: UINT32) throws -> UnsafeMutablePointer<__x_ABI_Ctest__component_CIBasic>? {
        var result: UnsafeMutablePointer<__x_ABI_Ctest__component_CIBasic>?
        _ = try perform(as: __x_ABI_C__FIVectorView_1___x_ABI_Ctest__zcomponent__CIBasic.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetAt(pThis, index, &result))
        }
        return result
    }

    internal func get_SizeImpl() throws -> UINT32 {
        var result: UINT32 = 0
        _ = try perform(as: __x_ABI_C__FIVectorView_1___x_ABI_Ctest__zcomponent__CIBasic.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Size(pThis, &result))
        }
        return result
    }

    internal func IndexOfImpl(_ value: UnsafeMutablePointer<__x_ABI_Ctest__component_CIBasic>?, _ index: inout UINT32) throws -> boolean {
        var result: boolean = 0
        _ = try perform(as: __x_ABI_C__FIVectorView_1___x_ABI_Ctest__zcomponent__CIBasic.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.IndexOf(pThis, value, &index, &result))
        }
        return result
    }

}

internal class __x_ABI_C__FIVectorView_1___x_ABI_Ctest__zcomponent__CIBasicImpl : IVectorView, AbiInterfaceImpl {
    typealias T = AnyIBasic?
    typealias SwiftProjection = AnyIVectorView<AnyIBasic?>
    typealias CABI = __x_ABI_C__FIVectorView_1___x_ABI_Ctest__zcomponent__CIBasic
    typealias SwiftABI = IVectorViewIBasic

    private (set) public var _default: SwiftABI

    static func from(abi: UnsafeMutablePointer<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        return __x_ABI_C__FIVectorView_1___x_ABI_Ctest__zcomponent__CIBasicImpl(abi)
    }

    internal init(_ fromAbi: UnsafeMutablePointer<CABI>) {
        _default = SwiftABI(fromAbi)
    }

    static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIVectorView_1___x_ABI_Ctest__zcomponent__CIBasicVTable) { $0 }
        return.init(lpVtbl: vtblPtr)
    }

    // MARK: Collection
    typealias Element = T
    var startIndex: Int { 0 }
    var endIndex: Int { Int(size) }
    func index(after i: Int) -> Int {
        i+1
    }

    func index(of: Element) -> Int? { 
        var index: UInt32 = 0
        let result = indexOf(of, &index)
        guard result else { return nil }
        return Int(index)
    }
    var count: Int { Int(size) }

    subscript(position: Int) -> Element {
        get {
            getAt(UInt32(position))
        }
    }
    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivectorview-1.getat)
    public func getAt(_ index: UInt32) -> AnyIBasic? {
        let result = try! _default.GetAtImpl(index)
        return __ABI_test_component.IBasicWrapper.unwrapFrom(abi: result)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivectorview-1.indexof)
    public func indexOf(_ value: AnyIBasic?, _ index: inout UInt32) -> Bool {
        let valueWrapper = __ABI_test_component.IBasicWrapper(value)
        let _value = try! valueWrapper?.toABI { $0 }
        let result = try! _default.IndexOfImpl(_value, &index)
        return .init(from: result)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivectorview-1.size)
    public var size : UInt32 {
        get {
            let result = try! _default.get_SizeImpl()
            return result
        }

    }

    internal lazy var _IIterable: IIterableIBasic = try! _default.QueryInterface()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivectorview-1.first)
    public func first() -> AnyIIterator<AnyIBasic?>? {
        let result = try! _IIterable.FirstImpl()
        return test_component.__x_ABI_C__FIIterator_1___x_ABI_Ctest__zcomponent__CIBasicWrapper.unwrapFrom(abi: result)
    }

    public func queryInterface(_ iid: test_component.IID) -> IUnknownRef? { nil }
}

private var IID___x_ABI_C__FIVector_1_IInspectable: test_component.IID {
    .init(Data1: 0xb32bdca4, Data2: 0x5e52, Data3: 0x5b27, Data4: ( 0xbc,0x5d,0xd6,0x6a,0x1a,0x26,0x8c,0x2a ))// b32bdca4-5e52-5b27-bc5d-d66a1a268c2a
}

internal var __x_ABI_C__FIVector_1_IInspectableVTable: __x_ABI_C__FIVector_1_IInspectableVtbl = .init(
    QueryInterface: {
        guard let pUnk = $0, let riid = $1, let ppvObject = $2 else { return E_INVALIDARG }
        ppvObject.pointee = nil

        switch riid.pointee {
            case IUnknown.IID, IInspectable.IID, ISwiftImplemented.IID, IAgileObject.IID, __x_ABI_C__FIVector_1_IInspectableWrapper.IID:
                _ = pUnk.pointee.lpVtbl.pointee.AddRef(pUnk)
                ppvObject.pointee = UnsafeMutableRawPointer(pUnk)
                return S_OK
            default:
                guard let instance = __x_ABI_C__FIVector_1_IInspectableWrapper.tryUnwrapFrom(raw: pUnk),
                      let iUnknownRef = instance.queryInterface(riid.pointee) else { return failWith(err: E_NOINTERFACE )}
                ppvObject.pointee = UnsafeMutableRawPointer(iUnknownRef.ref)
                return S_OK

        }
    },

    AddRef: {
         guard let wrapper = __x_ABI_C__FIVector_1_IInspectableWrapper.fromRaw($0) else { return 1 }
         _ = wrapper.retain()
         return ULONG(_getRetainCount(wrapper.takeUnretainedValue()))
    },

    Release: {
        guard let wrapper = __x_ABI_C__FIVector_1_IInspectableWrapper.fromRaw($0) else { return 1 }
        return ULONG(_getRetainCount(wrapper.takeRetainedValue()))
    },

    GetIids: {
        let size = MemoryLayout<test_component.IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 4).assumingMemoryBound(to: test_component.IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = test_component.__x_ABI_C__FIVector_1_IInspectableWrapper.IID
        iids[3] = test_component.__x_ABI_C__FIIterable_1_IInspectableWrapper.IID
        $1!.pointee = 4
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.Collections.IVector`1<Any>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    GetAt: {
        guard let __unwrapped__instance = __x_ABI_C__FIVector_1_IInspectableWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let index: UInt32 = $1
        let result = __unwrapped__instance.getAt(index)
        let resultWrapper = __ABI_.AnyWrapper(result)
        resultWrapper?.copyTo($2)
        return S_OK
    },

    get_Size: {
        guard let __unwrapped__instance = __x_ABI_C__FIVector_1_IInspectableWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.size
        $1?.initialize(to: result)
        return S_OK
    },

    GetView: {
        guard let __unwrapped__instance = __x_ABI_C__FIVector_1_IInspectableWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.getView()
        let resultWrapper = test_component.__x_ABI_C__FIVectorView_1_IInspectableWrapper(result)
        resultWrapper?.copyTo($1)
        return S_OK
    },

    IndexOf: {
        guard let __unwrapped__instance = __x_ABI_C__FIVector_1_IInspectableWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let value: Any? = __ABI_.AnyWrapper.unwrapFrom(abi: $1)
        var index: UInt32 = 0
        let result = __unwrapped__instance.indexOf(value, &index)
        $2?.initialize(to: index)
        $3?.initialize(to: .init(from: result))
        return S_OK
    },

    SetAt: {
        guard let __unwrapped__instance = __x_ABI_C__FIVector_1_IInspectableWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let index: UInt32 = $1
        let value: Any? = __ABI_.AnyWrapper.unwrapFrom(abi: $2)
        __unwrapped__instance.setAt(index, value)
        return S_OK
    },

    InsertAt: {
        guard let __unwrapped__instance = __x_ABI_C__FIVector_1_IInspectableWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let index: UInt32 = $1
        let value: Any? = __ABI_.AnyWrapper.unwrapFrom(abi: $2)
        __unwrapped__instance.insertAt(index, value)
        return S_OK
    },

    RemoveAt: {
        guard let __unwrapped__instance = __x_ABI_C__FIVector_1_IInspectableWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let index: UInt32 = $1
        __unwrapped__instance.removeAt(index)
        return S_OK
    },

    Append: {
        guard let __unwrapped__instance = __x_ABI_C__FIVector_1_IInspectableWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let value: Any? = __ABI_.AnyWrapper.unwrapFrom(abi: $1)
        __unwrapped__instance.append(value)
        return S_OK
    },

    RemoveAtEnd: {
        guard let __unwrapped__instance = __x_ABI_C__FIVector_1_IInspectableWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        __unwrapped__instance.removeAtEnd()
        return S_OK
    },

    Clear: {
        guard let __unwrapped__instance = __x_ABI_C__FIVector_1_IInspectableWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        __unwrapped__instance.clear()
        return S_OK
    },

    GetMany: { _, _, _, _, _ in return failWith(err: E_NOTIMPL) },

    ReplaceAll: { _, _, _ in return failWith(err: E_NOTIMPL) }
)
typealias __x_ABI_C__FIVector_1_IInspectableWrapper = InterfaceWrapperBase<test_component.__x_ABI_C__FIVector_1_IInspectableImpl>
internal class IVectorAny: test_component.IInspectable {
    override public class var IID: test_component.IID { IID___x_ABI_C__FIVector_1_IInspectable }

    internal func GetAtImpl(_ index: UINT32) throws -> UnsafeMutablePointer<C_IInspectable>? {
        var result: UnsafeMutablePointer<C_IInspectable>?
        _ = try perform(as: __x_ABI_C__FIVector_1_IInspectable.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetAt(pThis, index, &result))
        }
        return result
    }

    internal func get_SizeImpl() throws -> UINT32 {
        var result: UINT32 = 0
        _ = try perform(as: __x_ABI_C__FIVector_1_IInspectable.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Size(pThis, &result))
        }
        return result
    }

    internal func GetViewImpl() throws -> UnsafeMutablePointer<__x_ABI_C__FIVectorView_1_IInspectable>? {
        var result: UnsafeMutablePointer<__x_ABI_C__FIVectorView_1_IInspectable>?
        _ = try perform(as: __x_ABI_C__FIVector_1_IInspectable.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetView(pThis, &result))
        }
        return result
    }

    internal func IndexOfImpl(_ value: UnsafeMutablePointer<C_IInspectable>?, _ index: inout UINT32) throws -> boolean {
        var result: boolean = 0
        _ = try perform(as: __x_ABI_C__FIVector_1_IInspectable.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.IndexOf(pThis, value, &index, &result))
        }
        return result
    }

    internal func SetAtImpl(_ index: UINT32, _ value: UnsafeMutablePointer<C_IInspectable>?) throws {
        _ = try perform(as: __x_ABI_C__FIVector_1_IInspectable.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.SetAt(pThis, index, value))
        }
    }

    internal func InsertAtImpl(_ index: UINT32, _ value: UnsafeMutablePointer<C_IInspectable>?) throws {
        _ = try perform(as: __x_ABI_C__FIVector_1_IInspectable.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.InsertAt(pThis, index, value))
        }
    }

    internal func RemoveAtImpl(_ index: UINT32) throws {
        _ = try perform(as: __x_ABI_C__FIVector_1_IInspectable.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.RemoveAt(pThis, index))
        }
    }

    internal func AppendImpl(_ value: UnsafeMutablePointer<C_IInspectable>?) throws {
        _ = try perform(as: __x_ABI_C__FIVector_1_IInspectable.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Append(pThis, value))
        }
    }

    internal func RemoveAtEndImpl() throws {
        _ = try perform(as: __x_ABI_C__FIVector_1_IInspectable.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.RemoveAtEnd(pThis))
        }
    }

    internal func ClearImpl() throws {
        _ = try perform(as: __x_ABI_C__FIVector_1_IInspectable.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Clear(pThis))
        }
    }

}

internal class __x_ABI_C__FIVector_1_IInspectableImpl : IVector, AbiInterfaceImpl {
    typealias T = Any?
    typealias SwiftProjection = AnyIVector<Any?>
    typealias CABI = __x_ABI_C__FIVector_1_IInspectable
    typealias SwiftABI = IVectorAny

    private (set) public var _default: SwiftABI

    static func from(abi: UnsafeMutablePointer<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        return __x_ABI_C__FIVector_1_IInspectableImpl(abi)
    }

    internal init(_ fromAbi: UnsafeMutablePointer<CABI>) {
        _default = SwiftABI(fromAbi)
    }

    static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIVector_1_IInspectableVTable) { $0 }
        return.init(lpVtbl: vtblPtr)
    }

    // MARK: Collection
    typealias Element = T
    var startIndex: Int { 0 }
    var endIndex: Int { Int(size) }
    func index(after i: Int) -> Int {
        i+1
    }

    func index(of: Element) -> Int? { 
        var index: UInt32 = 0
        let result = indexOf(of, &index)
        guard result else { return nil }
        return Int(index)
    }
    var count: Int { Int(size) }


    subscript(position: Int) -> Element {
        get {
            getAt(UInt32(position))
        }
        set(newValue) {
            setAt(UInt32(position), newValue)
        }
    }

    func removeLast() {
        removeAtEnd()
    }

    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivector-1.getat)
    public func getAt(_ index: UInt32) -> Any? {
        let result = try! _default.GetAtImpl(index)
        return __ABI_.AnyWrapper.unwrapFrom(abi: result)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivector-1.getview)
    public func getView() -> AnyIVectorView<Any?>? {
        let result = try! _default.GetViewImpl()
        return test_component.__x_ABI_C__FIVectorView_1_IInspectableWrapper.unwrapFrom(abi: result)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivector-1.indexof)
    public func indexOf(_ value: Any?, _ index: inout UInt32) -> Bool {
        let valueWrapper = __ABI_.AnyWrapper(value)
        let _value = try! valueWrapper?.toABI { $0 }
        let result = try! _default.IndexOfImpl(_value, &index)
        return .init(from: result)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivector-1.setat)
    public func setAt(_ index: UInt32, _ value: Any?) {
        let valueWrapper = __ABI_.AnyWrapper(value)
        let _value = try! valueWrapper?.toABI { $0 }
        try! _default.SetAtImpl(index, _value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivector-1.insertat)
    public func insertAt(_ index: UInt32, _ value: Any?) {
        let valueWrapper = __ABI_.AnyWrapper(value)
        let _value = try! valueWrapper?.toABI { $0 }
        try! _default.InsertAtImpl(index, _value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivector-1.removeat)
    public func removeAt(_ index: UInt32) {
        try! _default.RemoveAtImpl(index)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivector-1.append)
    public func append(_ value: Any?) {
        let valueWrapper = __ABI_.AnyWrapper(value)
        let _value = try! valueWrapper?.toABI { $0 }
        try! _default.AppendImpl(_value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivector-1.removeatend)
    public func removeAtEnd() {
        try! _default.RemoveAtEndImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivector-1.clear)
    public func clear() {
        try! _default.ClearImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivector-1.size)
    public var size : UInt32 {
        get {
            let result = try! _default.get_SizeImpl()
            return result
        }

    }

    internal lazy var _IIterable: IIterableAny = try! _default.QueryInterface()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivector-1.first)
    public func first() -> AnyIIterator<Any?>? {
        let result = try! _IIterable.FirstImpl()
        return test_component.__x_ABI_C__FIIterator_1_IInspectableWrapper.unwrapFrom(abi: result)
    }

    public func queryInterface(_ iid: test_component.IID) -> IUnknownRef? { nil }
}

private var IID___x_ABI_C__FIVector_1_HSTRING: test_component.IID {
    .init(Data1: 0x98b9acc1, Data2: 0x4b56, Data3: 0x532e, Data4: ( 0xac,0x73,0x03,0xd5,0x29,0x1c,0xca,0x90 ))// 98b9acc1-4b56-532e-ac73-03d5291cca90
}

internal var __x_ABI_C__FIVector_1_HSTRINGVTable: __x_ABI_C__FIVector_1_HSTRINGVtbl = .init(
    QueryInterface: {
        guard let pUnk = $0, let riid = $1, let ppvObject = $2 else { return E_INVALIDARG }
        ppvObject.pointee = nil

        switch riid.pointee {
            case IUnknown.IID, IInspectable.IID, ISwiftImplemented.IID, IAgileObject.IID, __x_ABI_C__FIVector_1_HSTRINGWrapper.IID:
                _ = pUnk.pointee.lpVtbl.pointee.AddRef(pUnk)
                ppvObject.pointee = UnsafeMutableRawPointer(pUnk)
                return S_OK
            default:
                guard let instance = __x_ABI_C__FIVector_1_HSTRINGWrapper.tryUnwrapFrom(raw: pUnk),
                      let iUnknownRef = instance.queryInterface(riid.pointee) else { return failWith(err: E_NOINTERFACE )}
                ppvObject.pointee = UnsafeMutableRawPointer(iUnknownRef.ref)
                return S_OK

        }
    },

    AddRef: {
         guard let wrapper = __x_ABI_C__FIVector_1_HSTRINGWrapper.fromRaw($0) else { return 1 }
         _ = wrapper.retain()
         return ULONG(_getRetainCount(wrapper.takeUnretainedValue()))
    },

    Release: {
        guard let wrapper = __x_ABI_C__FIVector_1_HSTRINGWrapper.fromRaw($0) else { return 1 }
        return ULONG(_getRetainCount(wrapper.takeRetainedValue()))
    },

    GetIids: {
        let size = MemoryLayout<test_component.IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 4).assumingMemoryBound(to: test_component.IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = test_component.__x_ABI_C__FIVector_1_HSTRINGWrapper.IID
        iids[3] = test_component.__x_ABI_C__FIIterable_1_HSTRINGWrapper.IID
        $1!.pointee = 4
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.Collections.IVector`1<String>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    GetAt: {
        guard let __unwrapped__instance = __x_ABI_C__FIVector_1_HSTRINGWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let index: UInt32 = $1
        let result = __unwrapped__instance.getAt(index)
        $2?.initialize(to: try! HString(result).detach())
        return S_OK
    },

    get_Size: {
        guard let __unwrapped__instance = __x_ABI_C__FIVector_1_HSTRINGWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.size
        $1?.initialize(to: result)
        return S_OK
    },

    GetView: {
        guard let __unwrapped__instance = __x_ABI_C__FIVector_1_HSTRINGWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.getView()
        let resultWrapper = test_component.__x_ABI_C__FIVectorView_1_HSTRINGWrapper(result)
        resultWrapper?.copyTo($1)
        return S_OK
    },

    IndexOf: {
        guard let __unwrapped__instance = __x_ABI_C__FIVector_1_HSTRINGWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let value: String = .init(from: $1)
        var index: UInt32 = 0
        let result = __unwrapped__instance.indexOf(value, &index)
        $2?.initialize(to: index)
        $3?.initialize(to: .init(from: result))
        return S_OK
    },

    SetAt: {
        guard let __unwrapped__instance = __x_ABI_C__FIVector_1_HSTRINGWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let index: UInt32 = $1
        let value: String = .init(from: $2)
        __unwrapped__instance.setAt(index, value)
        return S_OK
    },

    InsertAt: {
        guard let __unwrapped__instance = __x_ABI_C__FIVector_1_HSTRINGWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let index: UInt32 = $1
        let value: String = .init(from: $2)
        __unwrapped__instance.insertAt(index, value)
        return S_OK
    },

    RemoveAt: {
        guard let __unwrapped__instance = __x_ABI_C__FIVector_1_HSTRINGWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let index: UInt32 = $1
        __unwrapped__instance.removeAt(index)
        return S_OK
    },

    Append: {
        guard let __unwrapped__instance = __x_ABI_C__FIVector_1_HSTRINGWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let value: String = .init(from: $1)
        __unwrapped__instance.append(value)
        return S_OK
    },

    RemoveAtEnd: {
        guard let __unwrapped__instance = __x_ABI_C__FIVector_1_HSTRINGWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        __unwrapped__instance.removeAtEnd()
        return S_OK
    },

    Clear: {
        guard let __unwrapped__instance = __x_ABI_C__FIVector_1_HSTRINGWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        __unwrapped__instance.clear()
        return S_OK
    },

    GetMany: { _, _, _, _, _ in return failWith(err: E_NOTIMPL) },

    ReplaceAll: { _, _, _ in return failWith(err: E_NOTIMPL) }
)
typealias __x_ABI_C__FIVector_1_HSTRINGWrapper = InterfaceWrapperBase<test_component.__x_ABI_C__FIVector_1_HSTRINGImpl>
internal class IVectorString: test_component.IInspectable {
    override public class var IID: test_component.IID { IID___x_ABI_C__FIVector_1_HSTRING }

    internal func GetAtImpl(_ index: UINT32) throws -> HSTRING? {
        var result: HSTRING?
        _ = try perform(as: __x_ABI_C__FIVector_1_HSTRING.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetAt(pThis, index, &result))
        }
        return result
    }

    internal func get_SizeImpl() throws -> UINT32 {
        var result: UINT32 = 0
        _ = try perform(as: __x_ABI_C__FIVector_1_HSTRING.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Size(pThis, &result))
        }
        return result
    }

    internal func GetViewImpl() throws -> UnsafeMutablePointer<__x_ABI_C__FIVectorView_1_HSTRING>? {
        var result: UnsafeMutablePointer<__x_ABI_C__FIVectorView_1_HSTRING>?
        _ = try perform(as: __x_ABI_C__FIVector_1_HSTRING.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetView(pThis, &result))
        }
        return result
    }

    internal func IndexOfImpl(_ value: HSTRING?, _ index: inout UINT32) throws -> boolean {
        var result: boolean = 0
        _ = try perform(as: __x_ABI_C__FIVector_1_HSTRING.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.IndexOf(pThis, value, &index, &result))
        }
        return result
    }

    internal func SetAtImpl(_ index: UINT32, _ value: HSTRING?) throws {
        _ = try perform(as: __x_ABI_C__FIVector_1_HSTRING.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.SetAt(pThis, index, value))
        }
    }

    internal func InsertAtImpl(_ index: UINT32, _ value: HSTRING?) throws {
        _ = try perform(as: __x_ABI_C__FIVector_1_HSTRING.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.InsertAt(pThis, index, value))
        }
    }

    internal func RemoveAtImpl(_ index: UINT32) throws {
        _ = try perform(as: __x_ABI_C__FIVector_1_HSTRING.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.RemoveAt(pThis, index))
        }
    }

    internal func AppendImpl(_ value: HSTRING?) throws {
        _ = try perform(as: __x_ABI_C__FIVector_1_HSTRING.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Append(pThis, value))
        }
    }

    internal func RemoveAtEndImpl() throws {
        _ = try perform(as: __x_ABI_C__FIVector_1_HSTRING.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.RemoveAtEnd(pThis))
        }
    }

    internal func ClearImpl() throws {
        _ = try perform(as: __x_ABI_C__FIVector_1_HSTRING.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Clear(pThis))
        }
    }

}

internal class __x_ABI_C__FIVector_1_HSTRINGImpl : IVector, AbiInterfaceImpl {
    typealias T = String
    typealias SwiftProjection = AnyIVector<String>
    typealias CABI = __x_ABI_C__FIVector_1_HSTRING
    typealias SwiftABI = IVectorString

    private (set) public var _default: SwiftABI

    static func from(abi: UnsafeMutablePointer<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        return __x_ABI_C__FIVector_1_HSTRINGImpl(abi)
    }

    internal init(_ fromAbi: UnsafeMutablePointer<CABI>) {
        _default = SwiftABI(fromAbi)
    }

    static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIVector_1_HSTRINGVTable) { $0 }
        return.init(lpVtbl: vtblPtr)
    }

    // MARK: Collection
    typealias Element = T
    var startIndex: Int { 0 }
    var endIndex: Int { Int(size) }
    func index(after i: Int) -> Int {
        i+1
    }

    func index(of: Element) -> Int? { 
        var index: UInt32 = 0
        let result = indexOf(of, &index)
        guard result else { return nil }
        return Int(index)
    }
    var count: Int { Int(size) }


    subscript(position: Int) -> Element {
        get {
            getAt(UInt32(position))
        }
        set(newValue) {
            setAt(UInt32(position), newValue)
        }
    }

    func removeLast() {
        removeAtEnd()
    }

    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivector-1.getat)
    public func getAt(_ index: UInt32) -> String {
        let result = try! _default.GetAtImpl(index)
        return .init(from: result)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivector-1.getview)
    public func getView() -> AnyIVectorView<String>? {
        let result = try! _default.GetViewImpl()
        return test_component.__x_ABI_C__FIVectorView_1_HSTRINGWrapper.unwrapFrom(abi: result)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivector-1.indexof)
    public func indexOf(_ value: String, _ index: inout UInt32) -> Bool {
        let _value = try! HString(value)
        let result = try! _default.IndexOfImpl(_value.get(), &index)
        return .init(from: result)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivector-1.setat)
    public func setAt(_ index: UInt32, _ value: String) {
        let _value = try! HString(value)
        try! _default.SetAtImpl(index, _value.get())
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivector-1.insertat)
    public func insertAt(_ index: UInt32, _ value: String) {
        let _value = try! HString(value)
        try! _default.InsertAtImpl(index, _value.get())
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivector-1.removeat)
    public func removeAt(_ index: UInt32) {
        try! _default.RemoveAtImpl(index)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivector-1.append)
    public func append(_ value: String) {
        let _value = try! HString(value)
        try! _default.AppendImpl(_value.get())
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivector-1.removeatend)
    public func removeAtEnd() {
        try! _default.RemoveAtEndImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivector-1.clear)
    public func clear() {
        try! _default.ClearImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivector-1.size)
    public var size : UInt32 {
        get {
            let result = try! _default.get_SizeImpl()
            return result
        }

    }

    internal lazy var _IIterable: IIterableString = try! _default.QueryInterface()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivector-1.first)
    public func first() -> AnyIIterator<String>? {
        let result = try! _IIterable.FirstImpl()
        return test_component.__x_ABI_C__FIIterator_1_HSTRINGWrapper.unwrapFrom(abi: result)
    }

    public func queryInterface(_ iid: test_component.IID) -> IUnknownRef? { nil }
}

private var IID___x_ABI_C__FIVector_1___x_ABI_Ctest__zcomponent__CBase: test_component.IID {
    .init(Data1: 0xcb559561, Data2: 0x6732, Data3: 0x54ba, Data4: ( 0xa0,0x75,0xb5,0x03,0x46,0x27,0x5b,0x9e ))// cb559561-6732-54ba-a075-b50346275b9e
}

internal var __x_ABI_C__FIVector_1___x_ABI_Ctest__zcomponent__CBaseVTable: __x_ABI_C__FIVector_1___x_ABI_Ctest__zcomponent__CBaseVtbl = .init(
    QueryInterface: {
        guard let pUnk = $0, let riid = $1, let ppvObject = $2 else { return E_INVALIDARG }
        ppvObject.pointee = nil

        switch riid.pointee {
            case IUnknown.IID, IInspectable.IID, ISwiftImplemented.IID, IAgileObject.IID, __x_ABI_C__FIVector_1___x_ABI_Ctest__zcomponent__CBaseWrapper.IID:
                _ = pUnk.pointee.lpVtbl.pointee.AddRef(pUnk)
                ppvObject.pointee = UnsafeMutableRawPointer(pUnk)
                return S_OK
            default:
                guard let instance = __x_ABI_C__FIVector_1___x_ABI_Ctest__zcomponent__CBaseWrapper.tryUnwrapFrom(raw: pUnk),
                      let iUnknownRef = instance.queryInterface(riid.pointee) else { return failWith(err: E_NOINTERFACE )}
                ppvObject.pointee = UnsafeMutableRawPointer(iUnknownRef.ref)
                return S_OK

        }
    },

    AddRef: {
         guard let wrapper = __x_ABI_C__FIVector_1___x_ABI_Ctest__zcomponent__CBaseWrapper.fromRaw($0) else { return 1 }
         _ = wrapper.retain()
         return ULONG(_getRetainCount(wrapper.takeUnretainedValue()))
    },

    Release: {
        guard let wrapper = __x_ABI_C__FIVector_1___x_ABI_Ctest__zcomponent__CBaseWrapper.fromRaw($0) else { return 1 }
        return ULONG(_getRetainCount(wrapper.takeRetainedValue()))
    },

    GetIids: {
        let size = MemoryLayout<test_component.IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 4).assumingMemoryBound(to: test_component.IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = test_component.__x_ABI_C__FIVector_1___x_ABI_Ctest__zcomponent__CBaseWrapper.IID
        iids[3] = test_component.__x_ABI_C__FIIterable_1___x_ABI_Ctest__zcomponent__CBaseWrapper.IID
        $1!.pointee = 4
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.Collections.IVector`1<test_component.Base>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    GetAt: {
        guard let __unwrapped__instance = __x_ABI_C__FIVector_1___x_ABI_Ctest__zcomponent__CBaseWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let index: UInt32 = $1
        let result = __unwrapped__instance.getAt(index)
        result?.copyTo($2)
        return S_OK
    },

    get_Size: {
        guard let __unwrapped__instance = __x_ABI_C__FIVector_1___x_ABI_Ctest__zcomponent__CBaseWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.size
        $1?.initialize(to: result)
        return S_OK
    },

    GetView: {
        guard let __unwrapped__instance = __x_ABI_C__FIVector_1___x_ABI_Ctest__zcomponent__CBaseWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.getView()
        let resultWrapper = test_component.__x_ABI_C__FIVectorView_1___x_ABI_Ctest__zcomponent__CBaseWrapper(result)
        resultWrapper?.copyTo($1)
        return S_OK
    },

    IndexOf: {
        guard let __unwrapped__instance = __x_ABI_C__FIVector_1___x_ABI_Ctest__zcomponent__CBaseWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let value: test_component.Base? = .from(abi: $1)
        var index: UInt32 = 0
        let result = __unwrapped__instance.indexOf(value, &index)
        $2?.initialize(to: index)
        $3?.initialize(to: .init(from: result))
        return S_OK
    },

    SetAt: {
        guard let __unwrapped__instance = __x_ABI_C__FIVector_1___x_ABI_Ctest__zcomponent__CBaseWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let index: UInt32 = $1
        let value: test_component.Base? = .from(abi: $2)
        __unwrapped__instance.setAt(index, value)
        return S_OK
    },

    InsertAt: {
        guard let __unwrapped__instance = __x_ABI_C__FIVector_1___x_ABI_Ctest__zcomponent__CBaseWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let index: UInt32 = $1
        let value: test_component.Base? = .from(abi: $2)
        __unwrapped__instance.insertAt(index, value)
        return S_OK
    },

    RemoveAt: {
        guard let __unwrapped__instance = __x_ABI_C__FIVector_1___x_ABI_Ctest__zcomponent__CBaseWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let index: UInt32 = $1
        __unwrapped__instance.removeAt(index)
        return S_OK
    },

    Append: {
        guard let __unwrapped__instance = __x_ABI_C__FIVector_1___x_ABI_Ctest__zcomponent__CBaseWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let value: test_component.Base? = .from(abi: $1)
        __unwrapped__instance.append(value)
        return S_OK
    },

    RemoveAtEnd: {
        guard let __unwrapped__instance = __x_ABI_C__FIVector_1___x_ABI_Ctest__zcomponent__CBaseWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        __unwrapped__instance.removeAtEnd()
        return S_OK
    },

    Clear: {
        guard let __unwrapped__instance = __x_ABI_C__FIVector_1___x_ABI_Ctest__zcomponent__CBaseWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        __unwrapped__instance.clear()
        return S_OK
    },

    GetMany: { _, _, _, _, _ in return failWith(err: E_NOTIMPL) },

    ReplaceAll: { _, _, _ in return failWith(err: E_NOTIMPL) }
)
typealias __x_ABI_C__FIVector_1___x_ABI_Ctest__zcomponent__CBaseWrapper = InterfaceWrapperBase<test_component.__x_ABI_C__FIVector_1___x_ABI_Ctest__zcomponent__CBaseImpl>
internal class IVectorBase: test_component.IInspectable {
    override public class var IID: test_component.IID { IID___x_ABI_C__FIVector_1___x_ABI_Ctest__zcomponent__CBase }

    internal func GetAtImpl(_ index: UINT32) throws -> UnsafeMutablePointer<__x_ABI_Ctest__component_CIBase>? {
        var result: UnsafeMutablePointer<__x_ABI_Ctest__component_CIBase>?
        _ = try perform(as: __x_ABI_C__FIVector_1___x_ABI_Ctest__zcomponent__CBase.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetAt(pThis, index, &result))
        }
        return result
    }

    internal func get_SizeImpl() throws -> UINT32 {
        var result: UINT32 = 0
        _ = try perform(as: __x_ABI_C__FIVector_1___x_ABI_Ctest__zcomponent__CBase.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Size(pThis, &result))
        }
        return result
    }

    internal func GetViewImpl() throws -> UnsafeMutablePointer<__x_ABI_C__FIVectorView_1___x_ABI_Ctest__zcomponent__CBase>? {
        var result: UnsafeMutablePointer<__x_ABI_C__FIVectorView_1___x_ABI_Ctest__zcomponent__CBase>?
        _ = try perform(as: __x_ABI_C__FIVector_1___x_ABI_Ctest__zcomponent__CBase.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetView(pThis, &result))
        }
        return result
    }

    internal func IndexOfImpl(_ value: UnsafeMutablePointer<__x_ABI_Ctest__component_CIBase>?, _ index: inout UINT32) throws -> boolean {
        var result: boolean = 0
        _ = try perform(as: __x_ABI_C__FIVector_1___x_ABI_Ctest__zcomponent__CBase.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.IndexOf(pThis, value, &index, &result))
        }
        return result
    }

    internal func SetAtImpl(_ index: UINT32, _ value: UnsafeMutablePointer<__x_ABI_Ctest__component_CIBase>?) throws {
        _ = try perform(as: __x_ABI_C__FIVector_1___x_ABI_Ctest__zcomponent__CBase.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.SetAt(pThis, index, value))
        }
    }

    internal func InsertAtImpl(_ index: UINT32, _ value: UnsafeMutablePointer<__x_ABI_Ctest__component_CIBase>?) throws {
        _ = try perform(as: __x_ABI_C__FIVector_1___x_ABI_Ctest__zcomponent__CBase.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.InsertAt(pThis, index, value))
        }
    }

    internal func RemoveAtImpl(_ index: UINT32) throws {
        _ = try perform(as: __x_ABI_C__FIVector_1___x_ABI_Ctest__zcomponent__CBase.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.RemoveAt(pThis, index))
        }
    }

    internal func AppendImpl(_ value: UnsafeMutablePointer<__x_ABI_Ctest__component_CIBase>?) throws {
        _ = try perform(as: __x_ABI_C__FIVector_1___x_ABI_Ctest__zcomponent__CBase.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Append(pThis, value))
        }
    }

    internal func RemoveAtEndImpl() throws {
        _ = try perform(as: __x_ABI_C__FIVector_1___x_ABI_Ctest__zcomponent__CBase.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.RemoveAtEnd(pThis))
        }
    }

    internal func ClearImpl() throws {
        _ = try perform(as: __x_ABI_C__FIVector_1___x_ABI_Ctest__zcomponent__CBase.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Clear(pThis))
        }
    }

}

internal class __x_ABI_C__FIVector_1___x_ABI_Ctest__zcomponent__CBaseImpl : IVector, AbiInterfaceImpl {
    typealias T = Base?
    typealias SwiftProjection = AnyIVector<Base?>
    typealias CABI = __x_ABI_C__FIVector_1___x_ABI_Ctest__zcomponent__CBase
    typealias SwiftABI = IVectorBase

    private (set) public var _default: SwiftABI

    static func from(abi: UnsafeMutablePointer<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        return __x_ABI_C__FIVector_1___x_ABI_Ctest__zcomponent__CBaseImpl(abi)
    }

    internal init(_ fromAbi: UnsafeMutablePointer<CABI>) {
        _default = SwiftABI(fromAbi)
    }

    static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIVector_1___x_ABI_Ctest__zcomponent__CBaseVTable) { $0 }
        return.init(lpVtbl: vtblPtr)
    }

    // MARK: Collection
    typealias Element = T
    var startIndex: Int { 0 }
    var endIndex: Int { Int(size) }
    func index(after i: Int) -> Int {
        i+1
    }

    func index(of: Element) -> Int? { 
        var index: UInt32 = 0
        let result = indexOf(of, &index)
        guard result else { return nil }
        return Int(index)
    }
    var count: Int { Int(size) }


    subscript(position: Int) -> Element {
        get {
            getAt(UInt32(position))
        }
        set(newValue) {
            setAt(UInt32(position), newValue)
        }
    }

    func removeLast() {
        removeAtEnd()
    }

    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivector-1.getat)
    public func getAt(_ index: UInt32) -> Base? {
        let result = try! _default.GetAtImpl(index)
        return .from(abi: result)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivector-1.getview)
    public func getView() -> AnyIVectorView<Base?>? {
        let result = try! _default.GetViewImpl()
        return test_component.__x_ABI_C__FIVectorView_1___x_ABI_Ctest__zcomponent__CBaseWrapper.unwrapFrom(abi: result)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivector-1.indexof)
    public func indexOf(_ value: Base?, _ index: inout UInt32) -> Bool {
        let result = try! _default.IndexOfImpl(RawPointer(value), &index)
        return .init(from: result)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivector-1.setat)
    public func setAt(_ index: UInt32, _ value: Base?) {
        try! _default.SetAtImpl(index, RawPointer(value))
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivector-1.insertat)
    public func insertAt(_ index: UInt32, _ value: Base?) {
        try! _default.InsertAtImpl(index, RawPointer(value))
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivector-1.removeat)
    public func removeAt(_ index: UInt32) {
        try! _default.RemoveAtImpl(index)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivector-1.append)
    public func append(_ value: Base?) {
        try! _default.AppendImpl(RawPointer(value))
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivector-1.removeatend)
    public func removeAtEnd() {
        try! _default.RemoveAtEndImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivector-1.clear)
    public func clear() {
        try! _default.ClearImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivector-1.size)
    public var size : UInt32 {
        get {
            let result = try! _default.get_SizeImpl()
            return result
        }

    }

    internal lazy var _IIterable: IIterableBase = try! _default.QueryInterface()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivector-1.first)
    public func first() -> AnyIIterator<Base?>? {
        let result = try! _IIterable.FirstImpl()
        return test_component.__x_ABI_C__FIIterator_1___x_ABI_Ctest__zcomponent__CBaseWrapper.unwrapFrom(abi: result)
    }

    public func queryInterface(_ iid: test_component.IID) -> IUnknownRef? { nil }
}

private var IID___x_ABI_C__FIVector_1___x_ABI_Ctest__zcomponent__CIBasic: test_component.IID {
    .init(Data1: 0x966413d6, Data2: 0x6520, Data3: 0x5148, Data4: ( 0x9f,0xf1,0xf7,0x35,0x9c,0xb4,0x1c,0x6a ))// 966413d6-6520-5148-9ff1-f7359cb41c6a
}

internal var __x_ABI_C__FIVector_1___x_ABI_Ctest__zcomponent__CIBasicVTable: __x_ABI_C__FIVector_1___x_ABI_Ctest__zcomponent__CIBasicVtbl = .init(
    QueryInterface: {
        guard let pUnk = $0, let riid = $1, let ppvObject = $2 else { return E_INVALIDARG }
        ppvObject.pointee = nil

        switch riid.pointee {
            case IUnknown.IID, IInspectable.IID, ISwiftImplemented.IID, IAgileObject.IID, __x_ABI_C__FIVector_1___x_ABI_Ctest__zcomponent__CIBasicWrapper.IID:
                _ = pUnk.pointee.lpVtbl.pointee.AddRef(pUnk)
                ppvObject.pointee = UnsafeMutableRawPointer(pUnk)
                return S_OK
            default:
                guard let instance = __x_ABI_C__FIVector_1___x_ABI_Ctest__zcomponent__CIBasicWrapper.tryUnwrapFrom(raw: pUnk),
                      let iUnknownRef = instance.queryInterface(riid.pointee) else { return failWith(err: E_NOINTERFACE )}
                ppvObject.pointee = UnsafeMutableRawPointer(iUnknownRef.ref)
                return S_OK

        }
    },

    AddRef: {
         guard let wrapper = __x_ABI_C__FIVector_1___x_ABI_Ctest__zcomponent__CIBasicWrapper.fromRaw($0) else { return 1 }
         _ = wrapper.retain()
         return ULONG(_getRetainCount(wrapper.takeUnretainedValue()))
    },

    Release: {
        guard let wrapper = __x_ABI_C__FIVector_1___x_ABI_Ctest__zcomponent__CIBasicWrapper.fromRaw($0) else { return 1 }
        return ULONG(_getRetainCount(wrapper.takeRetainedValue()))
    },

    GetIids: {
        let size = MemoryLayout<test_component.IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 4).assumingMemoryBound(to: test_component.IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = test_component.__x_ABI_C__FIVector_1___x_ABI_Ctest__zcomponent__CIBasicWrapper.IID
        iids[3] = test_component.__x_ABI_C__FIIterable_1___x_ABI_Ctest__zcomponent__CIBasicWrapper.IID
        $1!.pointee = 4
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.Collections.IVector`1<test_component.IBasic>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    GetAt: {
        guard let __unwrapped__instance = __x_ABI_C__FIVector_1___x_ABI_Ctest__zcomponent__CIBasicWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let index: UInt32 = $1
        let result = __unwrapped__instance.getAt(index)
        let resultWrapper = __ABI_test_component.IBasicWrapper(result)
        resultWrapper?.copyTo($2)
        return S_OK
    },

    get_Size: {
        guard let __unwrapped__instance = __x_ABI_C__FIVector_1___x_ABI_Ctest__zcomponent__CIBasicWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.size
        $1?.initialize(to: result)
        return S_OK
    },

    GetView: {
        guard let __unwrapped__instance = __x_ABI_C__FIVector_1___x_ABI_Ctest__zcomponent__CIBasicWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.getView()
        let resultWrapper = test_component.__x_ABI_C__FIVectorView_1___x_ABI_Ctest__zcomponent__CIBasicWrapper(result)
        resultWrapper?.copyTo($1)
        return S_OK
    },

    IndexOf: {
        guard let __unwrapped__instance = __x_ABI_C__FIVector_1___x_ABI_Ctest__zcomponent__CIBasicWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let value: test_component.AnyIBasic? = __ABI_test_component.IBasicWrapper.unwrapFrom(abi: $1)
        var index: UInt32 = 0
        let result = __unwrapped__instance.indexOf(value, &index)
        $2?.initialize(to: index)
        $3?.initialize(to: .init(from: result))
        return S_OK
    },

    SetAt: {
        guard let __unwrapped__instance = __x_ABI_C__FIVector_1___x_ABI_Ctest__zcomponent__CIBasicWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let index: UInt32 = $1
        let value: test_component.AnyIBasic? = __ABI_test_component.IBasicWrapper.unwrapFrom(abi: $2)
        __unwrapped__instance.setAt(index, value)
        return S_OK
    },

    InsertAt: {
        guard let __unwrapped__instance = __x_ABI_C__FIVector_1___x_ABI_Ctest__zcomponent__CIBasicWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let index: UInt32 = $1
        let value: test_component.AnyIBasic? = __ABI_test_component.IBasicWrapper.unwrapFrom(abi: $2)
        __unwrapped__instance.insertAt(index, value)
        return S_OK
    },

    RemoveAt: {
        guard let __unwrapped__instance = __x_ABI_C__FIVector_1___x_ABI_Ctest__zcomponent__CIBasicWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let index: UInt32 = $1
        __unwrapped__instance.removeAt(index)
        return S_OK
    },

    Append: {
        guard let __unwrapped__instance = __x_ABI_C__FIVector_1___x_ABI_Ctest__zcomponent__CIBasicWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let value: test_component.AnyIBasic? = __ABI_test_component.IBasicWrapper.unwrapFrom(abi: $1)
        __unwrapped__instance.append(value)
        return S_OK
    },

    RemoveAtEnd: {
        guard let __unwrapped__instance = __x_ABI_C__FIVector_1___x_ABI_Ctest__zcomponent__CIBasicWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        __unwrapped__instance.removeAtEnd()
        return S_OK
    },

    Clear: {
        guard let __unwrapped__instance = __x_ABI_C__FIVector_1___x_ABI_Ctest__zcomponent__CIBasicWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        __unwrapped__instance.clear()
        return S_OK
    },

    GetMany: { _, _, _, _, _ in return failWith(err: E_NOTIMPL) },

    ReplaceAll: { _, _, _ in return failWith(err: E_NOTIMPL) }
)
typealias __x_ABI_C__FIVector_1___x_ABI_Ctest__zcomponent__CIBasicWrapper = InterfaceWrapperBase<test_component.__x_ABI_C__FIVector_1___x_ABI_Ctest__zcomponent__CIBasicImpl>
internal class IVectorIBasic: test_component.IInspectable {
    override public class var IID: test_component.IID { IID___x_ABI_C__FIVector_1___x_ABI_Ctest__zcomponent__CIBasic }

    internal func GetAtImpl(_ index: UINT32) throws -> UnsafeMutablePointer<__x_ABI_Ctest__component_CIBasic>? {
        var result: UnsafeMutablePointer<__x_ABI_Ctest__component_CIBasic>?
        _ = try perform(as: __x_ABI_C__FIVector_1___x_ABI_Ctest__zcomponent__CIBasic.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetAt(pThis, index, &result))
        }
        return result
    }

    internal func get_SizeImpl() throws -> UINT32 {
        var result: UINT32 = 0
        _ = try perform(as: __x_ABI_C__FIVector_1___x_ABI_Ctest__zcomponent__CIBasic.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Size(pThis, &result))
        }
        return result
    }

    internal func GetViewImpl() throws -> UnsafeMutablePointer<__x_ABI_C__FIVectorView_1___x_ABI_Ctest__zcomponent__CIBasic>? {
        var result: UnsafeMutablePointer<__x_ABI_C__FIVectorView_1___x_ABI_Ctest__zcomponent__CIBasic>?
        _ = try perform(as: __x_ABI_C__FIVector_1___x_ABI_Ctest__zcomponent__CIBasic.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetView(pThis, &result))
        }
        return result
    }

    internal func IndexOfImpl(_ value: UnsafeMutablePointer<__x_ABI_Ctest__component_CIBasic>?, _ index: inout UINT32) throws -> boolean {
        var result: boolean = 0
        _ = try perform(as: __x_ABI_C__FIVector_1___x_ABI_Ctest__zcomponent__CIBasic.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.IndexOf(pThis, value, &index, &result))
        }
        return result
    }

    internal func SetAtImpl(_ index: UINT32, _ value: UnsafeMutablePointer<__x_ABI_Ctest__component_CIBasic>?) throws {
        _ = try perform(as: __x_ABI_C__FIVector_1___x_ABI_Ctest__zcomponent__CIBasic.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.SetAt(pThis, index, value))
        }
    }

    internal func InsertAtImpl(_ index: UINT32, _ value: UnsafeMutablePointer<__x_ABI_Ctest__component_CIBasic>?) throws {
        _ = try perform(as: __x_ABI_C__FIVector_1___x_ABI_Ctest__zcomponent__CIBasic.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.InsertAt(pThis, index, value))
        }
    }

    internal func RemoveAtImpl(_ index: UINT32) throws {
        _ = try perform(as: __x_ABI_C__FIVector_1___x_ABI_Ctest__zcomponent__CIBasic.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.RemoveAt(pThis, index))
        }
    }

    internal func AppendImpl(_ value: UnsafeMutablePointer<__x_ABI_Ctest__component_CIBasic>?) throws {
        _ = try perform(as: __x_ABI_C__FIVector_1___x_ABI_Ctest__zcomponent__CIBasic.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Append(pThis, value))
        }
    }

    internal func RemoveAtEndImpl() throws {
        _ = try perform(as: __x_ABI_C__FIVector_1___x_ABI_Ctest__zcomponent__CIBasic.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.RemoveAtEnd(pThis))
        }
    }

    internal func ClearImpl() throws {
        _ = try perform(as: __x_ABI_C__FIVector_1___x_ABI_Ctest__zcomponent__CIBasic.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Clear(pThis))
        }
    }

}

internal class __x_ABI_C__FIVector_1___x_ABI_Ctest__zcomponent__CIBasicImpl : IVector, AbiInterfaceImpl {
    typealias T = AnyIBasic?
    typealias SwiftProjection = AnyIVector<AnyIBasic?>
    typealias CABI = __x_ABI_C__FIVector_1___x_ABI_Ctest__zcomponent__CIBasic
    typealias SwiftABI = IVectorIBasic

    private (set) public var _default: SwiftABI

    static func from(abi: UnsafeMutablePointer<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        return __x_ABI_C__FIVector_1___x_ABI_Ctest__zcomponent__CIBasicImpl(abi)
    }

    internal init(_ fromAbi: UnsafeMutablePointer<CABI>) {
        _default = SwiftABI(fromAbi)
    }

    static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIVector_1___x_ABI_Ctest__zcomponent__CIBasicVTable) { $0 }
        return.init(lpVtbl: vtblPtr)
    }

    // MARK: Collection
    typealias Element = T
    var startIndex: Int { 0 }
    var endIndex: Int { Int(size) }
    func index(after i: Int) -> Int {
        i+1
    }

    func index(of: Element) -> Int? { 
        var index: UInt32 = 0
        let result = indexOf(of, &index)
        guard result else { return nil }
        return Int(index)
    }
    var count: Int { Int(size) }


    subscript(position: Int) -> Element {
        get {
            getAt(UInt32(position))
        }
        set(newValue) {
            setAt(UInt32(position), newValue)
        }
    }

    func removeLast() {
        removeAtEnd()
    }

    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivector-1.getat)
    public func getAt(_ index: UInt32) -> AnyIBasic? {
        let result = try! _default.GetAtImpl(index)
        return __ABI_test_component.IBasicWrapper.unwrapFrom(abi: result)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivector-1.getview)
    public func getView() -> AnyIVectorView<AnyIBasic?>? {
        let result = try! _default.GetViewImpl()
        return test_component.__x_ABI_C__FIVectorView_1___x_ABI_Ctest__zcomponent__CIBasicWrapper.unwrapFrom(abi: result)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivector-1.indexof)
    public func indexOf(_ value: AnyIBasic?, _ index: inout UInt32) -> Bool {
        let valueWrapper = __ABI_test_component.IBasicWrapper(value)
        let _value = try! valueWrapper?.toABI { $0 }
        let result = try! _default.IndexOfImpl(_value, &index)
        return .init(from: result)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivector-1.setat)
    public func setAt(_ index: UInt32, _ value: AnyIBasic?) {
        let valueWrapper = __ABI_test_component.IBasicWrapper(value)
        let _value = try! valueWrapper?.toABI { $0 }
        try! _default.SetAtImpl(index, _value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivector-1.insertat)
    public func insertAt(_ index: UInt32, _ value: AnyIBasic?) {
        let valueWrapper = __ABI_test_component.IBasicWrapper(value)
        let _value = try! valueWrapper?.toABI { $0 }
        try! _default.InsertAtImpl(index, _value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivector-1.removeat)
    public func removeAt(_ index: UInt32) {
        try! _default.RemoveAtImpl(index)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivector-1.append)
    public func append(_ value: AnyIBasic?) {
        let valueWrapper = __ABI_test_component.IBasicWrapper(value)
        let _value = try! valueWrapper?.toABI { $0 }
        try! _default.AppendImpl(_value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivector-1.removeatend)
    public func removeAtEnd() {
        try! _default.RemoveAtEndImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivector-1.clear)
    public func clear() {
        try! _default.ClearImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivector-1.size)
    public var size : UInt32 {
        get {
            let result = try! _default.get_SizeImpl()
            return result
        }

    }

    internal lazy var _IIterable: IIterableIBasic = try! _default.QueryInterface()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivector-1.first)
    public func first() -> AnyIIterator<AnyIBasic?>? {
        let result = try! _IIterable.FirstImpl()
        return test_component.__x_ABI_C__FIIterator_1___x_ABI_Ctest__zcomponent__CIBasicWrapper.unwrapFrom(abi: result)
    }

    public func queryInterface(_ iid: test_component.IID) -> IUnknownRef? { nil }
}

private var IID___x_ABI_C__FMapChangedEventHandler_2_HSTRING_IInspectable: test_component.IID {
    .init(Data1: 0x24f981e5, Data2: 0xddca, Data3: 0x538d, Data4: ( 0xaa,0xda,0xa5,0x99,0x06,0x08,0x4c,0xf1 ))// 24f981e5-ddca-538d-aada-a59906084cf1
}

internal extension WinRTDelegateBridge where CABI == __x_ABI_C__FMapChangedEventHandler_2_HSTRING_IInspectable {
    static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &test_component.__x_ABI_C__FMapChangedEventHandler_2_HSTRING_IInspectableVTable) { $0 }
        return .init(lpVtbl:vtblPtr)
    }
}

internal var __x_ABI_C__FMapChangedEventHandler_2_HSTRING_IInspectableVTable: __x_ABI_C__FMapChangedEventHandler_2_HSTRING_IInspectableVtbl = .init(
    QueryInterface: {
        guard let pUnk = $0, let riid = $1, let ppvObject = $2 else { return E_INVALIDARG }
        ppvObject.pointee = nil

        switch riid.pointee {
            case IUnknown.IID, IInspectable.IID, ISwiftImplemented.IID, IAgileObject.IID, __x_ABI_C__FMapChangedEventHandler_2_HSTRING_IInspectableWrapper.IID:
                _ = pUnk.pointee.lpVtbl.pointee.AddRef(pUnk)
                ppvObject.pointee = UnsafeMutableRawPointer(pUnk)
                return S_OK
            default:
                return failWith(err: E_NOINTERFACE)
        }
    },

    AddRef: {
         guard let wrapper = __x_ABI_C__FMapChangedEventHandler_2_HSTRING_IInspectableWrapper.fromRaw($0) else { return 1 }
         _ = wrapper.retain()
         return ULONG(_getRetainCount(wrapper.takeUnretainedValue()))
    },

    Release: {
        guard let wrapper = __x_ABI_C__FMapChangedEventHandler_2_HSTRING_IInspectableWrapper.fromRaw($0) else { return 1 }
        return ULONG(_getRetainCount(wrapper.takeRetainedValue()))
    },

    Invoke: {
        guard let __unwrapped__instance = __x_ABI_C__FMapChangedEventHandler_2_HSTRING_IInspectableWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let sender: test_component.AnyIObservableMap<String, Any?>? = test_component.__x_ABI_C__FIObservableMap_2_HSTRING_IInspectableWrapper.unwrapFrom(abi: $1)
        let event: test_component.AnyIMapChangedEventArgs<String>? = test_component.__x_ABI_C__FIMapChangedEventArgs_1_HSTRINGWrapper.unwrapFrom(abi: $2)
        __unwrapped__instance(sender, event)
        return S_OK
    }
)
typealias __x_ABI_C__FMapChangedEventHandler_2_HSTRING_IInspectableWrapper = InterfaceWrapperBase<test_component.__x_ABI_C__FMapChangedEventHandler_2_HSTRING_IInspectableImpl>
internal class MapChangedEventHandlerString_Any: test_component.IUnknown {
    override public class var IID: test_component.IID { IID___x_ABI_C__FMapChangedEventHandler_2_HSTRING_IInspectable }

    internal func InvokeImpl(_ sender: UnsafeMutablePointer<__x_ABI_C__FIObservableMap_2_HSTRING_IInspectable>?, _ event: UnsafeMutablePointer<__x_ABI_C__FIMapChangedEventArgs_1_HSTRING>?) throws {
        _ = try perform(as: __x_ABI_C__FMapChangedEventHandler_2_HSTRING_IInspectable.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Invoke(pThis, sender, event))
        }
    }

}

internal class __x_ABI_C__FMapChangedEventHandler_2_HSTRING_IInspectableImpl : WinRTDelegateBridge {
    internal typealias Handler = MapChangedEventHandler<String, Any?>
    internal typealias CABI = __x_ABI_C__FMapChangedEventHandler_2_HSTRING_IInspectable
    internal typealias SwiftABI = test_component.MapChangedEventHandlerString_Any

    internal static func from(abi: UnsafeMutablePointer<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        let _default = SwiftABI(abi)
        let handler: Handler = { (sender, event) in
            let senderWrapper = test_component.__x_ABI_C__FIObservableMap_2_HSTRING_IInspectableWrapper(sender)
            let _sender = try! senderWrapper?.toABI { $0 }
            let eventWrapper = test_component.__x_ABI_C__FIMapChangedEventArgs_1_HSTRINGWrapper(event)
            let _event = try! eventWrapper?.toABI { $0 }
            try! _default.InvokeImpl(_sender, _event)
        }
        return handler
    }
}
private var IID___x_ABI_C__FMapChangedEventHandler_2_HSTRING_HSTRING: test_component.IID {
    .init(Data1: 0xe2663f37, Data2: 0x2e1b, Data3: 0x500c, Data4: ( 0xad,0x68,0xc3,0xed,0x7a,0x8f,0x74,0xc8 ))// e2663f37-2e1b-500c-ad68-c3ed7a8f74c8
}

internal extension WinRTDelegateBridge where CABI == __x_ABI_C__FMapChangedEventHandler_2_HSTRING_HSTRING {
    static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &test_component.__x_ABI_C__FMapChangedEventHandler_2_HSTRING_HSTRINGVTable) { $0 }
        return .init(lpVtbl:vtblPtr)
    }
}

internal var __x_ABI_C__FMapChangedEventHandler_2_HSTRING_HSTRINGVTable: __x_ABI_C__FMapChangedEventHandler_2_HSTRING_HSTRINGVtbl = .init(
    QueryInterface: {
        guard let pUnk = $0, let riid = $1, let ppvObject = $2 else { return E_INVALIDARG }
        ppvObject.pointee = nil

        switch riid.pointee {
            case IUnknown.IID, IInspectable.IID, ISwiftImplemented.IID, IAgileObject.IID, __x_ABI_C__FMapChangedEventHandler_2_HSTRING_HSTRINGWrapper.IID:
                _ = pUnk.pointee.lpVtbl.pointee.AddRef(pUnk)
                ppvObject.pointee = UnsafeMutableRawPointer(pUnk)
                return S_OK
            default:
                return failWith(err: E_NOINTERFACE)
        }
    },

    AddRef: {
         guard let wrapper = __x_ABI_C__FMapChangedEventHandler_2_HSTRING_HSTRINGWrapper.fromRaw($0) else { return 1 }
         _ = wrapper.retain()
         return ULONG(_getRetainCount(wrapper.takeUnretainedValue()))
    },

    Release: {
        guard let wrapper = __x_ABI_C__FMapChangedEventHandler_2_HSTRING_HSTRINGWrapper.fromRaw($0) else { return 1 }
        return ULONG(_getRetainCount(wrapper.takeRetainedValue()))
    },

    Invoke: {
        guard let __unwrapped__instance = __x_ABI_C__FMapChangedEventHandler_2_HSTRING_HSTRINGWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let sender: test_component.AnyIObservableMap<String, String>? = test_component.__x_ABI_C__FIObservableMap_2_HSTRING_HSTRINGWrapper.unwrapFrom(abi: $1)
        let event: test_component.AnyIMapChangedEventArgs<String>? = test_component.__x_ABI_C__FIMapChangedEventArgs_1_HSTRINGWrapper.unwrapFrom(abi: $2)
        __unwrapped__instance(sender, event)
        return S_OK
    }
)
typealias __x_ABI_C__FMapChangedEventHandler_2_HSTRING_HSTRINGWrapper = InterfaceWrapperBase<test_component.__x_ABI_C__FMapChangedEventHandler_2_HSTRING_HSTRINGImpl>
internal class MapChangedEventHandlerString_String: test_component.IUnknown {
    override public class var IID: test_component.IID { IID___x_ABI_C__FMapChangedEventHandler_2_HSTRING_HSTRING }

    internal func InvokeImpl(_ sender: UnsafeMutablePointer<__x_ABI_C__FIObservableMap_2_HSTRING_HSTRING>?, _ event: UnsafeMutablePointer<__x_ABI_C__FIMapChangedEventArgs_1_HSTRING>?) throws {
        _ = try perform(as: __x_ABI_C__FMapChangedEventHandler_2_HSTRING_HSTRING.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Invoke(pThis, sender, event))
        }
    }

}

internal class __x_ABI_C__FMapChangedEventHandler_2_HSTRING_HSTRINGImpl : WinRTDelegateBridge {
    internal typealias Handler = MapChangedEventHandler<String, String>
    internal typealias CABI = __x_ABI_C__FMapChangedEventHandler_2_HSTRING_HSTRING
    internal typealias SwiftABI = test_component.MapChangedEventHandlerString_String

    internal static func from(abi: UnsafeMutablePointer<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        let _default = SwiftABI(abi)
        let handler: Handler = { (sender, event) in
            let senderWrapper = test_component.__x_ABI_C__FIObservableMap_2_HSTRING_HSTRINGWrapper(sender)
            let _sender = try! senderWrapper?.toABI { $0 }
            let eventWrapper = test_component.__x_ABI_C__FIMapChangedEventArgs_1_HSTRINGWrapper(event)
            let _event = try! eventWrapper?.toABI { $0 }
            try! _default.InvokeImpl(_sender, _event)
        }
        return handler
    }
}
private var IID___x_ABI_C__FVectorChangedEventHandler_1___x_ABI_Ctest__zcomponent__CBase: test_component.IID {
    .init(Data1: 0x4175f8a0, Data2: 0x51bf, Data3: 0x561d, Data4: ( 0xbe,0xaf,0x41,0x55,0x41,0xdb,0xbf,0x69 ))// 4175f8a0-51bf-561d-beaf-415541dbbf69
}

internal extension WinRTDelegateBridge where CABI == __x_ABI_C__FVectorChangedEventHandler_1___x_ABI_Ctest__zcomponent__CBase {
    static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &test_component.__x_ABI_C__FVectorChangedEventHandler_1___x_ABI_Ctest__zcomponent__CBaseVTable) { $0 }
        return .init(lpVtbl:vtblPtr)
    }
}

internal var __x_ABI_C__FVectorChangedEventHandler_1___x_ABI_Ctest__zcomponent__CBaseVTable: __x_ABI_C__FVectorChangedEventHandler_1___x_ABI_Ctest__zcomponent__CBaseVtbl = .init(
    QueryInterface: {
        guard let pUnk = $0, let riid = $1, let ppvObject = $2 else { return E_INVALIDARG }
        ppvObject.pointee = nil

        switch riid.pointee {
            case IUnknown.IID, IInspectable.IID, ISwiftImplemented.IID, IAgileObject.IID, __x_ABI_C__FVectorChangedEventHandler_1___x_ABI_Ctest__zcomponent__CBaseWrapper.IID:
                _ = pUnk.pointee.lpVtbl.pointee.AddRef(pUnk)
                ppvObject.pointee = UnsafeMutableRawPointer(pUnk)
                return S_OK
            default:
                return failWith(err: E_NOINTERFACE)
        }
    },

    AddRef: {
         guard let wrapper = __x_ABI_C__FVectorChangedEventHandler_1___x_ABI_Ctest__zcomponent__CBaseWrapper.fromRaw($0) else { return 1 }
         _ = wrapper.retain()
         return ULONG(_getRetainCount(wrapper.takeUnretainedValue()))
    },

    Release: {
        guard let wrapper = __x_ABI_C__FVectorChangedEventHandler_1___x_ABI_Ctest__zcomponent__CBaseWrapper.fromRaw($0) else { return 1 }
        return ULONG(_getRetainCount(wrapper.takeRetainedValue()))
    },

    Invoke: {
        guard let __unwrapped__instance = __x_ABI_C__FVectorChangedEventHandler_1___x_ABI_Ctest__zcomponent__CBaseWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let sender: test_component.AnyIObservableVector<test_component.Base?>? = test_component.__x_ABI_C__FIObservableVector_1___x_ABI_Ctest__zcomponent__CBaseWrapper.unwrapFrom(abi: $1)
        let event: test_component.AnyIVectorChangedEventArgs? = __ABI_Windows_Foundation_Collections.IVectorChangedEventArgsWrapper.unwrapFrom(abi: $2)
        __unwrapped__instance(sender, event)
        return S_OK
    }
)
typealias __x_ABI_C__FVectorChangedEventHandler_1___x_ABI_Ctest__zcomponent__CBaseWrapper = InterfaceWrapperBase<test_component.__x_ABI_C__FVectorChangedEventHandler_1___x_ABI_Ctest__zcomponent__CBaseImpl>
internal class VectorChangedEventHandlerBase: test_component.IUnknown {
    override public class var IID: test_component.IID { IID___x_ABI_C__FVectorChangedEventHandler_1___x_ABI_Ctest__zcomponent__CBase }

    internal func InvokeImpl(_ sender: UnsafeMutablePointer<__x_ABI_C__FIObservableVector_1___x_ABI_Ctest__zcomponent__CBase>?, _ event: UnsafeMutablePointer<__x_ABI_CWindows_CFoundation_CCollections_CIVectorChangedEventArgs>?) throws {
        _ = try perform(as: __x_ABI_C__FVectorChangedEventHandler_1___x_ABI_Ctest__zcomponent__CBase.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Invoke(pThis, sender, event))
        }
    }

}

internal class __x_ABI_C__FVectorChangedEventHandler_1___x_ABI_Ctest__zcomponent__CBaseImpl : WinRTDelegateBridge {
    internal typealias Handler = VectorChangedEventHandler<Base?>
    internal typealias CABI = __x_ABI_C__FVectorChangedEventHandler_1___x_ABI_Ctest__zcomponent__CBase
    internal typealias SwiftABI = test_component.VectorChangedEventHandlerBase

    internal static func from(abi: UnsafeMutablePointer<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        let _default = SwiftABI(abi)
        let handler: Handler = { (sender, event) in
            let senderWrapper = test_component.__x_ABI_C__FIObservableVector_1___x_ABI_Ctest__zcomponent__CBaseWrapper(sender)
            let _sender = try! senderWrapper?.toABI { $0 }
            let eventWrapper = __ABI_Windows_Foundation_Collections.IVectorChangedEventArgsWrapper(event)
            let _event = try! eventWrapper?.toABI { $0 }
            try! _default.InvokeImpl(_sender, _event)
        }
        return handler
    }
}
private var IID___x_ABI_C__FVectorChangedEventHandler_1___x_ABI_Ctest__zcomponent__CIBasic: test_component.IID {
    .init(Data1: 0xea4e2c41, Data2: 0x3051, Data3: 0x539a, Data4: ( 0xa0,0xde,0x7e,0x2e,0x2c,0xb0,0xdb,0xf8 ))// ea4e2c41-3051-539a-a0de-7e2e2cb0dbf8
}

internal extension WinRTDelegateBridge where CABI == __x_ABI_C__FVectorChangedEventHandler_1___x_ABI_Ctest__zcomponent__CIBasic {
    static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &test_component.__x_ABI_C__FVectorChangedEventHandler_1___x_ABI_Ctest__zcomponent__CIBasicVTable) { $0 }
        return .init(lpVtbl:vtblPtr)
    }
}

internal var __x_ABI_C__FVectorChangedEventHandler_1___x_ABI_Ctest__zcomponent__CIBasicVTable: __x_ABI_C__FVectorChangedEventHandler_1___x_ABI_Ctest__zcomponent__CIBasicVtbl = .init(
    QueryInterface: {
        guard let pUnk = $0, let riid = $1, let ppvObject = $2 else { return E_INVALIDARG }
        ppvObject.pointee = nil

        switch riid.pointee {
            case IUnknown.IID, IInspectable.IID, ISwiftImplemented.IID, IAgileObject.IID, __x_ABI_C__FVectorChangedEventHandler_1___x_ABI_Ctest__zcomponent__CIBasicWrapper.IID:
                _ = pUnk.pointee.lpVtbl.pointee.AddRef(pUnk)
                ppvObject.pointee = UnsafeMutableRawPointer(pUnk)
                return S_OK
            default:
                return failWith(err: E_NOINTERFACE)
        }
    },

    AddRef: {
         guard let wrapper = __x_ABI_C__FVectorChangedEventHandler_1___x_ABI_Ctest__zcomponent__CIBasicWrapper.fromRaw($0) else { return 1 }
         _ = wrapper.retain()
         return ULONG(_getRetainCount(wrapper.takeUnretainedValue()))
    },

    Release: {
        guard let wrapper = __x_ABI_C__FVectorChangedEventHandler_1___x_ABI_Ctest__zcomponent__CIBasicWrapper.fromRaw($0) else { return 1 }
        return ULONG(_getRetainCount(wrapper.takeRetainedValue()))
    },

    Invoke: {
        guard let __unwrapped__instance = __x_ABI_C__FVectorChangedEventHandler_1___x_ABI_Ctest__zcomponent__CIBasicWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let sender: test_component.AnyIObservableVector<test_component.AnyIBasic?>? = test_component.__x_ABI_C__FIObservableVector_1___x_ABI_Ctest__zcomponent__CIBasicWrapper.unwrapFrom(abi: $1)
        let event: test_component.AnyIVectorChangedEventArgs? = __ABI_Windows_Foundation_Collections.IVectorChangedEventArgsWrapper.unwrapFrom(abi: $2)
        __unwrapped__instance(sender, event)
        return S_OK
    }
)
typealias __x_ABI_C__FVectorChangedEventHandler_1___x_ABI_Ctest__zcomponent__CIBasicWrapper = InterfaceWrapperBase<test_component.__x_ABI_C__FVectorChangedEventHandler_1___x_ABI_Ctest__zcomponent__CIBasicImpl>
internal class VectorChangedEventHandlerIBasic: test_component.IUnknown {
    override public class var IID: test_component.IID { IID___x_ABI_C__FVectorChangedEventHandler_1___x_ABI_Ctest__zcomponent__CIBasic }

    internal func InvokeImpl(_ sender: UnsafeMutablePointer<__x_ABI_C__FIObservableVector_1___x_ABI_Ctest__zcomponent__CIBasic>?, _ event: UnsafeMutablePointer<__x_ABI_CWindows_CFoundation_CCollections_CIVectorChangedEventArgs>?) throws {
        _ = try perform(as: __x_ABI_C__FVectorChangedEventHandler_1___x_ABI_Ctest__zcomponent__CIBasic.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Invoke(pThis, sender, event))
        }
    }

}

internal class __x_ABI_C__FVectorChangedEventHandler_1___x_ABI_Ctest__zcomponent__CIBasicImpl : WinRTDelegateBridge {
    internal typealias Handler = VectorChangedEventHandler<AnyIBasic?>
    internal typealias CABI = __x_ABI_C__FVectorChangedEventHandler_1___x_ABI_Ctest__zcomponent__CIBasic
    internal typealias SwiftABI = test_component.VectorChangedEventHandlerIBasic

    internal static func from(abi: UnsafeMutablePointer<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        let _default = SwiftABI(abi)
        let handler: Handler = { (sender, event) in
            let senderWrapper = test_component.__x_ABI_C__FIObservableVector_1___x_ABI_Ctest__zcomponent__CIBasicWrapper(sender)
            let _sender = try! senderWrapper?.toABI { $0 }
            let eventWrapper = __ABI_Windows_Foundation_Collections.IVectorChangedEventArgsWrapper(event)
            let _event = try! eventWrapper?.toABI { $0 }
            try! _default.InvokeImpl(_sender, _event)
        }
        return handler
    }
}
private var IID___x_ABI_C__FIEventHandler_1_IInspectable: test_component.IID {
    .init(Data1: 0xc50898f6, Data2: 0xc536, Data3: 0x5f47, Data4: ( 0x85,0x83,0x8b,0x2c,0x24,0x38,0xa1,0x3b ))// c50898f6-c536-5f47-8583-8b2c2438a13b
}

internal extension WinRTDelegateBridge where CABI == __x_ABI_C__FIEventHandler_1_IInspectable {
    static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &test_component.__x_ABI_C__FIEventHandler_1_IInspectableVTable) { $0 }
        return .init(lpVtbl:vtblPtr)
    }
}

internal var __x_ABI_C__FIEventHandler_1_IInspectableVTable: __x_ABI_C__FIEventHandler_1_IInspectableVtbl = .init(
    QueryInterface: {
        guard let pUnk = $0, let riid = $1, let ppvObject = $2 else { return E_INVALIDARG }
        ppvObject.pointee = nil

        switch riid.pointee {
            case IUnknown.IID, IInspectable.IID, ISwiftImplemented.IID, IAgileObject.IID, __x_ABI_C__FIEventHandler_1_IInspectableWrapper.IID:
                _ = pUnk.pointee.lpVtbl.pointee.AddRef(pUnk)
                ppvObject.pointee = UnsafeMutableRawPointer(pUnk)
                return S_OK
            default:
                return failWith(err: E_NOINTERFACE)
        }
    },

    AddRef: {
         guard let wrapper = __x_ABI_C__FIEventHandler_1_IInspectableWrapper.fromRaw($0) else { return 1 }
         _ = wrapper.retain()
         return ULONG(_getRetainCount(wrapper.takeUnretainedValue()))
    },

    Release: {
        guard let wrapper = __x_ABI_C__FIEventHandler_1_IInspectableWrapper.fromRaw($0) else { return 1 }
        return ULONG(_getRetainCount(wrapper.takeRetainedValue()))
    },

    Invoke: {
        guard let __unwrapped__instance = __x_ABI_C__FIEventHandler_1_IInspectableWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let sender: Any? = __ABI_.AnyWrapper.unwrapFrom(abi: $1)
        let args: Any? = __ABI_.AnyWrapper.unwrapFrom(abi: $2)
        __unwrapped__instance(sender, args)
        return S_OK
    }
)
typealias __x_ABI_C__FIEventHandler_1_IInspectableWrapper = InterfaceWrapperBase<test_component.__x_ABI_C__FIEventHandler_1_IInspectableImpl>
internal class EventHandlerAny: test_component.IUnknown {
    override public class var IID: test_component.IID { IID___x_ABI_C__FIEventHandler_1_IInspectable }

    internal func InvokeImpl(_ sender: UnsafeMutablePointer<C_IInspectable>?, _ args: UnsafeMutablePointer<C_IInspectable>?) throws {
        _ = try perform(as: __x_ABI_C__FIEventHandler_1_IInspectable.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Invoke(pThis, sender, args))
        }
    }

}

internal class __x_ABI_C__FIEventHandler_1_IInspectableImpl : WinRTDelegateBridge {
    internal typealias Handler = EventHandler<Any?>
    internal typealias CABI = __x_ABI_C__FIEventHandler_1_IInspectable
    internal typealias SwiftABI = test_component.EventHandlerAny

    internal static func from(abi: UnsafeMutablePointer<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        let _default = SwiftABI(abi)
        let handler: Handler = { (sender, args) in
            let senderWrapper = __ABI_.AnyWrapper(sender)
            let _sender = try! senderWrapper?.toABI { $0 }
            let argsWrapper = __ABI_.AnyWrapper(args)
            let _args = try! argsWrapper?.toABI { $0 }
            try! _default.InvokeImpl(_sender, _args)
        }
        return handler
    }
}
private var IID___x_ABI_C__FIAsyncOperationWithProgress_2_int_double: test_component.IID {
    .init(Data1: 0x17c0e85a, Data2: 0x64cb, Data3: 0x593a, Data4: ( 0x8e,0x4d,0x90,0x1c,0xa8,0x38,0xaa,0x92 ))// 17c0e85a-64cb-593a-8e4d-901ca838aa92
}

internal var __x_ABI_C__FIAsyncOperationWithProgress_2_int_doubleVTable: __x_ABI_C__FIAsyncOperationWithProgress_2_int_doubleVtbl = .init(
    QueryInterface: {
        guard let pUnk = $0, let riid = $1, let ppvObject = $2 else { return E_INVALIDARG }
        ppvObject.pointee = nil

        switch riid.pointee {
            case IUnknown.IID, IInspectable.IID, ISwiftImplemented.IID, IAgileObject.IID, __x_ABI_C__FIAsyncOperationWithProgress_2_int_doubleWrapper.IID:
                _ = pUnk.pointee.lpVtbl.pointee.AddRef(pUnk)
                ppvObject.pointee = UnsafeMutableRawPointer(pUnk)
                return S_OK
            default:
                guard let instance = __x_ABI_C__FIAsyncOperationWithProgress_2_int_doubleWrapper.tryUnwrapFrom(raw: pUnk),
                      let iUnknownRef = instance.queryInterface(riid.pointee) else { return failWith(err: E_NOINTERFACE )}
                ppvObject.pointee = UnsafeMutableRawPointer(iUnknownRef.ref)
                return S_OK

        }
    },

    AddRef: {
         guard let wrapper = __x_ABI_C__FIAsyncOperationWithProgress_2_int_doubleWrapper.fromRaw($0) else { return 1 }
         _ = wrapper.retain()
         return ULONG(_getRetainCount(wrapper.takeUnretainedValue()))
    },

    Release: {
        guard let wrapper = __x_ABI_C__FIAsyncOperationWithProgress_2_int_doubleWrapper.fromRaw($0) else { return 1 }
        return ULONG(_getRetainCount(wrapper.takeRetainedValue()))
    },

    GetIids: {
        let size = MemoryLayout<test_component.IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 4).assumingMemoryBound(to: test_component.IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = test_component.__x_ABI_C__FIAsyncOperationWithProgress_2_int_doubleWrapper.IID
        iids[3] = __ABI_Windows_Foundation.IAsyncInfoWrapper.IID
        $1!.pointee = 4
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.IAsyncOperationWithProgress`2<Int32, Double>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    put_Progress: {
        guard let __unwrapped__instance = __x_ABI_C__FIAsyncOperationWithProgress_2_int_doubleWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        guard let handler = test_component.__x_ABI_C__FIAsyncOperationProgressHandler_2_int_doubleWrapper.unwrapFrom(abi: $1) else { return E_INVALIDARG }
        __unwrapped__instance.progress = handler
        return S_OK
    },

    get_Progress: {
        guard let __unwrapped__instance = __x_ABI_C__FIAsyncOperationWithProgress_2_int_doubleWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.progress
        let resultWrapper = test_component.__x_ABI_C__FIAsyncOperationProgressHandler_2_int_doubleWrapper(result)
        resultWrapper?.copyTo($1)
        return S_OK
    },

    put_Completed: {
        guard let __unwrapped__instance = __x_ABI_C__FIAsyncOperationWithProgress_2_int_doubleWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        guard let handler = test_component.__x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2_int_doubleWrapper.unwrapFrom(abi: $1) else { return E_INVALIDARG }
        __unwrapped__instance.completed = handler
        return S_OK
    },

    get_Completed: {
        guard let __unwrapped__instance = __x_ABI_C__FIAsyncOperationWithProgress_2_int_doubleWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.completed
        let resultWrapper = test_component.__x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2_int_doubleWrapper(result)
        resultWrapper?.copyTo($1)
        return S_OK
    },

    GetResults: {
        do {
            guard let __unwrapped__instance = __x_ABI_C__FIAsyncOperationWithProgress_2_int_doubleWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let result = try __unwrapped__instance.getResults()
            $1?.initialize(to: result)
            return S_OK
        } catch { return failWith(err: E_FAIL) } 
    }
)
typealias __x_ABI_C__FIAsyncOperationWithProgress_2_int_doubleWrapper = InterfaceWrapperBase<test_component.__x_ABI_C__FIAsyncOperationWithProgress_2_int_doubleImpl>
internal class IAsyncOperationWithProgressInt32_Double: test_component.IInspectable {
    override public class var IID: test_component.IID { IID___x_ABI_C__FIAsyncOperationWithProgress_2_int_double }

    internal func put_ProgressImpl(_ handler: UnsafeMutablePointer<__x_ABI_C__FIAsyncOperationProgressHandler_2_int_double>?) throws {
        _ = try perform(as: __x_ABI_C__FIAsyncOperationWithProgress_2_int_double.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Progress(pThis, handler))
        }
    }

    internal func get_ProgressImpl() throws -> UnsafeMutablePointer<__x_ABI_C__FIAsyncOperationProgressHandler_2_int_double>? {
        var result: UnsafeMutablePointer<__x_ABI_C__FIAsyncOperationProgressHandler_2_int_double>?
        _ = try perform(as: __x_ABI_C__FIAsyncOperationWithProgress_2_int_double.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Progress(pThis, &result))
        }
        return result
    }

    internal func put_CompletedImpl(_ handler: UnsafeMutablePointer<__x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2_int_double>?) throws {
        _ = try perform(as: __x_ABI_C__FIAsyncOperationWithProgress_2_int_double.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Completed(pThis, handler))
        }
    }

    internal func get_CompletedImpl() throws -> UnsafeMutablePointer<__x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2_int_double>? {
        var result: UnsafeMutablePointer<__x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2_int_double>?
        _ = try perform(as: __x_ABI_C__FIAsyncOperationWithProgress_2_int_double.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Completed(pThis, &result))
        }
        return result
    }

    internal func GetResultsImpl() throws -> INT32 {
        var result: INT32 = 0
        _ = try perform(as: __x_ABI_C__FIAsyncOperationWithProgress_2_int_double.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetResults(pThis, &result))
        }
        return result
    }

}

internal class __x_ABI_C__FIAsyncOperationWithProgress_2_int_doubleImpl : IAsyncOperationWithProgress, AbiInterfaceImpl {
    typealias TResult = Int32
    typealias TProgress = Double
    typealias SwiftProjection = AnyIAsyncOperationWithProgress<Int32, Double>
    typealias CABI = __x_ABI_C__FIAsyncOperationWithProgress_2_int_double
    typealias SwiftABI = IAsyncOperationWithProgressInt32_Double

    private (set) public var _default: SwiftABI

    static func from(abi: UnsafeMutablePointer<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        return __x_ABI_C__FIAsyncOperationWithProgress_2_int_doubleImpl(abi)
    }

    internal init(_ fromAbi: UnsafeMutablePointer<CABI>) {
        _default = SwiftABI(fromAbi)
    }

    static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIAsyncOperationWithProgress_2_int_doubleVTable) { $0 }
        return.init(lpVtbl: vtblPtr)
    }

    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperationwithprogress-2.getresults)
    public func getResults() throws -> Int32 {
        let result = try _default.GetResultsImpl()
        return result
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperationwithprogress-2.progress)
    public var progress : AsyncOperationProgressHandler<Int32, Double>? {
        get {
            let result = try! _default.get_ProgressImpl()
            return test_component.__x_ABI_C__FIAsyncOperationProgressHandler_2_int_doubleWrapper.unwrapFrom(abi: result)
        }

        set {
            let wrapper = test_component.__x_ABI_C__FIAsyncOperationProgressHandler_2_int_doubleWrapper(newValue)
            let _newValue = try! wrapper?.toABI { $0 }
            try! _default.put_ProgressImpl(_newValue)
        }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperationwithprogress-2.completed)
    public var completed : AsyncOperationWithProgressCompletedHandler<Int32, Double>? {
        get {
            let result = try! _default.get_CompletedImpl()
            return test_component.__x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2_int_doubleWrapper.unwrapFrom(abi: result)
        }

        set {
            let wrapper = test_component.__x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2_int_doubleWrapper(newValue)
            let _newValue = try! wrapper?.toABI { $0 }
            try! _default.put_CompletedImpl(_newValue)
        }
    }

    internal lazy var _IAsyncInfo: __ABI_Windows_Foundation.IAsyncInfo = try! _default.QueryInterface()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperationwithprogress-2.cancel)
    public func cancel() throws {
        try _IAsyncInfo.CancelImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperationwithprogress-2.close)
    public func close() throws {
        try _IAsyncInfo.CloseImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperationwithprogress-2.errorcode)
    public var errorCode : HRESULT {
        get {
            let result = try! _IAsyncInfo.get_ErrorCodeImpl()
            return result
        }

    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperationwithprogress-2.id)
    public var id : UInt32 {
        get {
            let result = try! _IAsyncInfo.get_IdImpl()
            return result
        }

    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperationwithprogress-2.status)
    public var status : test_component.AsyncStatus {
        get {
            let result = try! _IAsyncInfo.get_StatusImpl()
            return result
        }

    }

    public func queryInterface(_ iid: test_component.IID) -> IUnknownRef? { nil }
}

private var IID___x_ABI_C__FIAsyncOperation_1_int: test_component.IID {
    .init(Data1: 0x968b9665, Data2: 0x06ed, Data3: 0x5774, Data4: ( 0x8f,0x53,0x8e,0xde,0xab,0xd5,0xf7,0xb5 ))// 968b9665-06ed-5774-8f53-8edeabd5f7b5
}

internal var __x_ABI_C__FIAsyncOperation_1_intVTable: __x_ABI_C__FIAsyncOperation_1_intVtbl = .init(
    QueryInterface: {
        guard let pUnk = $0, let riid = $1, let ppvObject = $2 else { return E_INVALIDARG }
        ppvObject.pointee = nil

        switch riid.pointee {
            case IUnknown.IID, IInspectable.IID, ISwiftImplemented.IID, IAgileObject.IID, __x_ABI_C__FIAsyncOperation_1_intWrapper.IID:
                _ = pUnk.pointee.lpVtbl.pointee.AddRef(pUnk)
                ppvObject.pointee = UnsafeMutableRawPointer(pUnk)
                return S_OK
            default:
                guard let instance = __x_ABI_C__FIAsyncOperation_1_intWrapper.tryUnwrapFrom(raw: pUnk),
                      let iUnknownRef = instance.queryInterface(riid.pointee) else { return failWith(err: E_NOINTERFACE )}
                ppvObject.pointee = UnsafeMutableRawPointer(iUnknownRef.ref)
                return S_OK

        }
    },

    AddRef: {
         guard let wrapper = __x_ABI_C__FIAsyncOperation_1_intWrapper.fromRaw($0) else { return 1 }
         _ = wrapper.retain()
         return ULONG(_getRetainCount(wrapper.takeUnretainedValue()))
    },

    Release: {
        guard let wrapper = __x_ABI_C__FIAsyncOperation_1_intWrapper.fromRaw($0) else { return 1 }
        return ULONG(_getRetainCount(wrapper.takeRetainedValue()))
    },

    GetIids: {
        let size = MemoryLayout<test_component.IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 4).assumingMemoryBound(to: test_component.IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = test_component.__x_ABI_C__FIAsyncOperation_1_intWrapper.IID
        iids[3] = __ABI_Windows_Foundation.IAsyncInfoWrapper.IID
        $1!.pointee = 4
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.IAsyncOperation`1<Int32>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    put_Completed: {
        guard let __unwrapped__instance = __x_ABI_C__FIAsyncOperation_1_intWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        guard let handler = test_component.__x_ABI_C__FIAsyncOperationCompletedHandler_1_intWrapper.unwrapFrom(abi: $1) else { return E_INVALIDARG }
        __unwrapped__instance.completed = handler
        return S_OK
    },

    get_Completed: {
        guard let __unwrapped__instance = __x_ABI_C__FIAsyncOperation_1_intWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.completed
        let resultWrapper = test_component.__x_ABI_C__FIAsyncOperationCompletedHandler_1_intWrapper(result)
        resultWrapper?.copyTo($1)
        return S_OK
    },

    GetResults: {
        do {
            guard let __unwrapped__instance = __x_ABI_C__FIAsyncOperation_1_intWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let result = try __unwrapped__instance.getResults()
            $1?.initialize(to: result)
            return S_OK
        } catch { return failWith(err: E_FAIL) } 
    }
)
typealias __x_ABI_C__FIAsyncOperation_1_intWrapper = InterfaceWrapperBase<test_component.__x_ABI_C__FIAsyncOperation_1_intImpl>
internal class IAsyncOperationInt32: test_component.IInspectable {
    override public class var IID: test_component.IID { IID___x_ABI_C__FIAsyncOperation_1_int }

    internal func put_CompletedImpl(_ handler: UnsafeMutablePointer<__x_ABI_C__FIAsyncOperationCompletedHandler_1_int>?) throws {
        _ = try perform(as: __x_ABI_C__FIAsyncOperation_1_int.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Completed(pThis, handler))
        }
    }

    internal func get_CompletedImpl() throws -> UnsafeMutablePointer<__x_ABI_C__FIAsyncOperationCompletedHandler_1_int>? {
        var result: UnsafeMutablePointer<__x_ABI_C__FIAsyncOperationCompletedHandler_1_int>?
        _ = try perform(as: __x_ABI_C__FIAsyncOperation_1_int.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Completed(pThis, &result))
        }
        return result
    }

    internal func GetResultsImpl() throws -> INT32 {
        var result: INT32 = 0
        _ = try perform(as: __x_ABI_C__FIAsyncOperation_1_int.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetResults(pThis, &result))
        }
        return result
    }

}

internal class __x_ABI_C__FIAsyncOperation_1_intImpl : IAsyncOperation, AbiInterfaceImpl {
    typealias TResult = Int32
    typealias SwiftProjection = AnyIAsyncOperation<Int32>
    typealias CABI = __x_ABI_C__FIAsyncOperation_1_int
    typealias SwiftABI = IAsyncOperationInt32

    private (set) public var _default: SwiftABI

    static func from(abi: UnsafeMutablePointer<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        return __x_ABI_C__FIAsyncOperation_1_intImpl(abi)
    }

    internal init(_ fromAbi: UnsafeMutablePointer<CABI>) {
        _default = SwiftABI(fromAbi)
    }

    static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIAsyncOperation_1_intVTable) { $0 }
        return.init(lpVtbl: vtblPtr)
    }

    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.getresults)
    public func getResults() throws -> Int32 {
        let result = try _default.GetResultsImpl()
        return result
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.completed)
    public var completed : AsyncOperationCompletedHandler<Int32>? {
        get {
            let result = try! _default.get_CompletedImpl()
            return test_component.__x_ABI_C__FIAsyncOperationCompletedHandler_1_intWrapper.unwrapFrom(abi: result)
        }

        set {
            let wrapper = test_component.__x_ABI_C__FIAsyncOperationCompletedHandler_1_intWrapper(newValue)
            let _newValue = try! wrapper?.toABI { $0 }
            try! _default.put_CompletedImpl(_newValue)
        }
    }

    internal lazy var _IAsyncInfo: __ABI_Windows_Foundation.IAsyncInfo = try! _default.QueryInterface()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.cancel)
    public func cancel() throws {
        try _IAsyncInfo.CancelImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.close)
    public func close() throws {
        try _IAsyncInfo.CloseImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.errorcode)
    public var errorCode : HRESULT {
        get {
            let result = try! _IAsyncInfo.get_ErrorCodeImpl()
            return result
        }

    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.id)
    public var id : UInt32 {
        get {
            let result = try! _IAsyncInfo.get_IdImpl()
            return result
        }

    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.status)
    public var status : test_component.AsyncStatus {
        get {
            let result = try! _IAsyncInfo.get_StatusImpl()
            return result
        }

    }

    public func queryInterface(_ iid: test_component.IID) -> IUnknownRef? { nil }
}

private var IID___x_ABI_C__FIReference_1_GUID: test_component.IID {
    .init(Data1: 0x7d50f649, Data2: 0x632c, Data3: 0x51f9, Data4: ( 0x84,0x9a,0xee,0x49,0x42,0x89,0x33,0xea ))// 7d50f649-632c-51f9-849a-ee49428933ea
}

internal extension GUID {
    init?(ref: UnsafeMutablePointer<__x_ABI_C__FIReference_1_GUID>?) {
        guard let val = ref else { return nil }
        var result: GUID = .init()
        try! CHECKED(val.pointee.lpVtbl.pointee.get_Value(val, &result))
        self = result
    }
} 
internal var __x_ABI_C__FIReference_1_GUIDVTable: __x_ABI_C__FIReference_1_GUIDVtbl = .init(
    QueryInterface: {
        guard let pUnk = $0, let riid = $1, let ppvObject = $2 else { return E_INVALIDARG }
        ppvObject.pointee = nil

        switch riid.pointee {
            case IUnknown.IID, IInspectable.IID, ISwiftImplemented.IID, IAgileObject.IID, __x_ABI_C__FIReference_1_GUIDWrapper.IID:
                _ = pUnk.pointee.lpVtbl.pointee.AddRef(pUnk)
                ppvObject.pointee = UnsafeMutableRawPointer(pUnk)
                return S_OK
            default:
                guard let instance = __x_ABI_C__FIReference_1_GUIDWrapper.tryUnwrapFrom(raw: pUnk),
                      let iUnknownRef = instance.queryInterface(riid.pointee) else { return failWith(err: E_NOINTERFACE )}
                ppvObject.pointee = UnsafeMutableRawPointer(iUnknownRef.ref)
                return S_OK

        }
    },

    AddRef: {
         guard let wrapper = __x_ABI_C__FIReference_1_GUIDWrapper.fromRaw($0) else { return 1 }
         _ = wrapper.retain()
         return ULONG(_getRetainCount(wrapper.takeUnretainedValue()))
    },

    Release: {
        guard let wrapper = __x_ABI_C__FIReference_1_GUIDWrapper.fromRaw($0) else { return 1 }
        return ULONG(_getRetainCount(wrapper.takeRetainedValue()))
    },

    GetIids: {
        let size = MemoryLayout<test_component.IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 4).assumingMemoryBound(to: test_component.IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = test_component.__x_ABI_C__FIReference_1_GUIDWrapper.IID
        iids[3] = __ABI_Windows_Foundation.IPropertyValueWrapper.IID
        $1!.pointee = 4
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.IReference`1<GUID>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    get_Value: {
        guard let __unwrapped__instance = __x_ABI_C__FIReference_1_GUIDWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.value as! GUID
        $1?.initialize(to: result)
        return S_OK
    }
)
internal class __x_ABI_C__FIReference_1_GUIDWrapper: WinRTWrapperBase<__x_ABI_C__FIReference_1_GUID, IReference> {
    override class var IID: test_component.IID { IID___x_ABI_C__FIReference_1_GUID }
    init?(_ value: GUID?) {
        guard let value = value else { return nil }
        let abi = withUnsafeMutablePointer(to: &__x_ABI_C__FIReference_1_GUIDVTable) {
            __x_ABI_C__FIReference_1_GUID(lpVtbl:$0)
        }
        super.init(abi, __IMPL_Windows_Foundation.IPropertyValueImpl(value: value))
    }
}
private var IID___x_ABI_C__FIReference_1_int: test_component.IID {
    .init(Data1: 0x548cefbd, Data2: 0xbc8a, Data3: 0x5fa0, Data4: ( 0x8d,0xf2,0x95,0x74,0x40,0xfc,0x8b,0xf4 ))// 548cefbd-bc8a-5fa0-8df2-957440fc8bf4
}

internal extension Int32 {
    init?(ref: UnsafeMutablePointer<__x_ABI_C__FIReference_1_int>?) {
        guard let val = ref else { return nil }
        var result: INT32 = 0
        try! CHECKED(val.pointee.lpVtbl.pointee.get_Value(val, &result))
        self = result
    }
} 
internal var __x_ABI_C__FIReference_1_intVTable: __x_ABI_C__FIReference_1_intVtbl = .init(
    QueryInterface: {
        guard let pUnk = $0, let riid = $1, let ppvObject = $2 else { return E_INVALIDARG }
        ppvObject.pointee = nil

        switch riid.pointee {
            case IUnknown.IID, IInspectable.IID, ISwiftImplemented.IID, IAgileObject.IID, __x_ABI_C__FIReference_1_intWrapper.IID:
                _ = pUnk.pointee.lpVtbl.pointee.AddRef(pUnk)
                ppvObject.pointee = UnsafeMutableRawPointer(pUnk)
                return S_OK
            default:
                guard let instance = __x_ABI_C__FIReference_1_intWrapper.tryUnwrapFrom(raw: pUnk),
                      let iUnknownRef = instance.queryInterface(riid.pointee) else { return failWith(err: E_NOINTERFACE )}
                ppvObject.pointee = UnsafeMutableRawPointer(iUnknownRef.ref)
                return S_OK

        }
    },

    AddRef: {
         guard let wrapper = __x_ABI_C__FIReference_1_intWrapper.fromRaw($0) else { return 1 }
         _ = wrapper.retain()
         return ULONG(_getRetainCount(wrapper.takeUnretainedValue()))
    },

    Release: {
        guard let wrapper = __x_ABI_C__FIReference_1_intWrapper.fromRaw($0) else { return 1 }
        return ULONG(_getRetainCount(wrapper.takeRetainedValue()))
    },

    GetIids: {
        let size = MemoryLayout<test_component.IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 4).assumingMemoryBound(to: test_component.IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = test_component.__x_ABI_C__FIReference_1_intWrapper.IID
        iids[3] = __ABI_Windows_Foundation.IPropertyValueWrapper.IID
        $1!.pointee = 4
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.IReference`1<Int32>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    get_Value: {
        guard let __unwrapped__instance = __x_ABI_C__FIReference_1_intWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.value as! Int32
        $1?.initialize(to: result)
        return S_OK
    }
)
internal class __x_ABI_C__FIReference_1_intWrapper: WinRTWrapperBase<__x_ABI_C__FIReference_1_int, IReference> {
    override class var IID: test_component.IID { IID___x_ABI_C__FIReference_1_int }
    init?(_ value: Int32?) {
        guard let value = value else { return nil }
        let abi = withUnsafeMutablePointer(to: &__x_ABI_C__FIReference_1_intVTable) {
            __x_ABI_C__FIReference_1_int(lpVtbl:$0)
        }
        super.init(abi, __IMPL_Windows_Foundation.IPropertyValueImpl(value: value))
    }
}
private var IID___x_ABI_C__FIReference_1___x_ABI_Ctest__zcomponent__CSigned: test_component.IID {
    .init(Data1: 0x5888a1ed, Data2: 0xabae, Data3: 0x584f, Data4: ( 0xbf,0x08,0x13,0x1b,0x25,0x42,0x80,0x6b ))// 5888a1ed-abae-584f-bf08-131b2542806b
}

internal extension test_component.Signed {
    init?(ref: UnsafeMutablePointer<__x_ABI_C__FIReference_1___x_ABI_Ctest__zcomponent__CSigned>?) {
        guard let val = ref else { return nil }
        var result: Signed = .init(0)
        try! CHECKED(val.pointee.lpVtbl.pointee.get_Value(val, &result))
        self = result
    }
} 
internal var __x_ABI_C__FIReference_1___x_ABI_Ctest__zcomponent__CSignedVTable: __x_ABI_C__FIReference_1___x_ABI_Ctest__zcomponent__CSignedVtbl = .init(
    QueryInterface: {
        guard let pUnk = $0, let riid = $1, let ppvObject = $2 else { return E_INVALIDARG }
        ppvObject.pointee = nil

        switch riid.pointee {
            case IUnknown.IID, IInspectable.IID, ISwiftImplemented.IID, IAgileObject.IID, __x_ABI_C__FIReference_1___x_ABI_Ctest__zcomponent__CSignedWrapper.IID:
                _ = pUnk.pointee.lpVtbl.pointee.AddRef(pUnk)
                ppvObject.pointee = UnsafeMutableRawPointer(pUnk)
                return S_OK
            default:
                guard let instance = __x_ABI_C__FIReference_1___x_ABI_Ctest__zcomponent__CSignedWrapper.tryUnwrapFrom(raw: pUnk),
                      let iUnknownRef = instance.queryInterface(riid.pointee) else { return failWith(err: E_NOINTERFACE )}
                ppvObject.pointee = UnsafeMutableRawPointer(iUnknownRef.ref)
                return S_OK

        }
    },

    AddRef: {
         guard let wrapper = __x_ABI_C__FIReference_1___x_ABI_Ctest__zcomponent__CSignedWrapper.fromRaw($0) else { return 1 }
         _ = wrapper.retain()
         return ULONG(_getRetainCount(wrapper.takeUnretainedValue()))
    },

    Release: {
        guard let wrapper = __x_ABI_C__FIReference_1___x_ABI_Ctest__zcomponent__CSignedWrapper.fromRaw($0) else { return 1 }
        return ULONG(_getRetainCount(wrapper.takeRetainedValue()))
    },

    GetIids: {
        let size = MemoryLayout<test_component.IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 4).assumingMemoryBound(to: test_component.IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = test_component.__x_ABI_C__FIReference_1___x_ABI_Ctest__zcomponent__CSignedWrapper.IID
        iids[3] = __ABI_Windows_Foundation.IPropertyValueWrapper.IID
        $1!.pointee = 4
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.IReference`1<test_component.Signed>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    get_Value: {
        guard let __unwrapped__instance = __x_ABI_C__FIReference_1___x_ABI_Ctest__zcomponent__CSignedWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.value as! test_component.Signed
        $1?.initialize(to: result)
        return S_OK
    }
)
internal class __x_ABI_C__FIReference_1___x_ABI_Ctest__zcomponent__CSignedWrapper: WinRTWrapperBase<__x_ABI_C__FIReference_1___x_ABI_Ctest__zcomponent__CSigned, IReference> {
    override class var IID: test_component.IID { IID___x_ABI_C__FIReference_1___x_ABI_Ctest__zcomponent__CSigned }
    init?(_ value: test_component.Signed?) {
        guard let value = value else { return nil }
        let abi = withUnsafeMutablePointer(to: &__x_ABI_C__FIReference_1___x_ABI_Ctest__zcomponent__CSignedVTable) {
            __x_ABI_C__FIReference_1___x_ABI_Ctest__zcomponent__CSigned(lpVtbl:$0)
        }
        super.init(abi, __IMPL_Windows_Foundation.IPropertyValueImpl(value: value))
    }
}
private var IID___x_ABI_C__FITypedEventHandler_2___x_ABI_Ctest__zcomponent__CClass___x_ABI_Ctest__zcomponent__CDeferrableEventArgs: test_component.IID {
    .init(Data1: 0x60e30bb2, Data2: 0x55fe, Data3: 0x5e7e, Data4: ( 0xb1,0xe6,0xf9,0xba,0x28,0x90,0x0a,0x82 ))// 60e30bb2-55fe-5e7e-b1e6-f9ba28900a82
}

internal extension WinRTDelegateBridge where CABI == __x_ABI_C__FITypedEventHandler_2___x_ABI_Ctest__zcomponent__CClass___x_ABI_Ctest__zcomponent__CDeferrableEventArgs {
    static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &test_component.__x_ABI_C__FITypedEventHandler_2___x_ABI_Ctest__zcomponent__CClass___x_ABI_Ctest__zcomponent__CDeferrableEventArgsVTable) { $0 }
        return .init(lpVtbl:vtblPtr)
    }
}

internal var __x_ABI_C__FITypedEventHandler_2___x_ABI_Ctest__zcomponent__CClass___x_ABI_Ctest__zcomponent__CDeferrableEventArgsVTable: __x_ABI_C__FITypedEventHandler_2___x_ABI_Ctest__zcomponent__CClass___x_ABI_Ctest__zcomponent__CDeferrableEventArgsVtbl = .init(
    QueryInterface: {
        guard let pUnk = $0, let riid = $1, let ppvObject = $2 else { return E_INVALIDARG }
        ppvObject.pointee = nil

        switch riid.pointee {
            case IUnknown.IID, IInspectable.IID, ISwiftImplemented.IID, IAgileObject.IID, __x_ABI_C__FITypedEventHandler_2___x_ABI_Ctest__zcomponent__CClass___x_ABI_Ctest__zcomponent__CDeferrableEventArgsWrapper.IID:
                _ = pUnk.pointee.lpVtbl.pointee.AddRef(pUnk)
                ppvObject.pointee = UnsafeMutableRawPointer(pUnk)
                return S_OK
            default:
                return failWith(err: E_NOINTERFACE)
        }
    },

    AddRef: {
         guard let wrapper = __x_ABI_C__FITypedEventHandler_2___x_ABI_Ctest__zcomponent__CClass___x_ABI_Ctest__zcomponent__CDeferrableEventArgsWrapper.fromRaw($0) else { return 1 }
         _ = wrapper.retain()
         return ULONG(_getRetainCount(wrapper.takeUnretainedValue()))
    },

    Release: {
        guard let wrapper = __x_ABI_C__FITypedEventHandler_2___x_ABI_Ctest__zcomponent__CClass___x_ABI_Ctest__zcomponent__CDeferrableEventArgsWrapper.fromRaw($0) else { return 1 }
        return ULONG(_getRetainCount(wrapper.takeRetainedValue()))
    },

    Invoke: {
        guard let __unwrapped__instance = __x_ABI_C__FITypedEventHandler_2___x_ABI_Ctest__zcomponent__CClass___x_ABI_Ctest__zcomponent__CDeferrableEventArgsWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let sender: test_component.Class? = .from(abi: $1)
        let args: test_component.DeferrableEventArgs? = .from(abi: $2)
        __unwrapped__instance(sender, args)
        return S_OK
    }
)
typealias __x_ABI_C__FITypedEventHandler_2___x_ABI_Ctest__zcomponent__CClass___x_ABI_Ctest__zcomponent__CDeferrableEventArgsWrapper = InterfaceWrapperBase<test_component.__x_ABI_C__FITypedEventHandler_2___x_ABI_Ctest__zcomponent__CClass___x_ABI_Ctest__zcomponent__CDeferrableEventArgsImpl>
internal class TypedEventHandlerClass_DeferrableEventArgs: test_component.IUnknown {
    override public class var IID: test_component.IID { IID___x_ABI_C__FITypedEventHandler_2___x_ABI_Ctest__zcomponent__CClass___x_ABI_Ctest__zcomponent__CDeferrableEventArgs }

    internal func InvokeImpl(_ sender: UnsafeMutablePointer<__x_ABI_Ctest__component_CIClass>?, _ args: UnsafeMutablePointer<__x_ABI_Ctest__component_CIDeferrableEventArgs>?) throws {
        _ = try perform(as: __x_ABI_C__FITypedEventHandler_2___x_ABI_Ctest__zcomponent__CClass___x_ABI_Ctest__zcomponent__CDeferrableEventArgs.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Invoke(pThis, sender, args))
        }
    }

}

internal class __x_ABI_C__FITypedEventHandler_2___x_ABI_Ctest__zcomponent__CClass___x_ABI_Ctest__zcomponent__CDeferrableEventArgsImpl : WinRTDelegateBridge {
    internal typealias Handler = TypedEventHandler<Class?, DeferrableEventArgs?>
    internal typealias CABI = __x_ABI_C__FITypedEventHandler_2___x_ABI_Ctest__zcomponent__CClass___x_ABI_Ctest__zcomponent__CDeferrableEventArgs
    internal typealias SwiftABI = test_component.TypedEventHandlerClass_DeferrableEventArgs

    internal static func from(abi: UnsafeMutablePointer<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        let _default = SwiftABI(abi)
        let handler: Handler = { (sender, args) in
            try! _default.InvokeImpl(RawPointer(sender), RawPointer(args))
        }
        return handler
    }
}
private var IID___x_ABI_C__FITypedEventHandler_2___x_ABI_Ctest__zcomponent__CSimple___x_ABI_Ctest__zcomponent__CSimpleEventArgs: test_component.IID {
    .init(Data1: 0xa0dda56b, Data2: 0x12f6, Data3: 0x52f4, Data4: ( 0x90,0x3d,0x55,0xce,0x8f,0xa7,0x7e,0xac ))// a0dda56b-12f6-52f4-903d-55ce8fa77eac
}

internal extension WinRTDelegateBridge where CABI == __x_ABI_C__FITypedEventHandler_2___x_ABI_Ctest__zcomponent__CSimple___x_ABI_Ctest__zcomponent__CSimpleEventArgs {
    static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &test_component.__x_ABI_C__FITypedEventHandler_2___x_ABI_Ctest__zcomponent__CSimple___x_ABI_Ctest__zcomponent__CSimpleEventArgsVTable) { $0 }
        return .init(lpVtbl:vtblPtr)
    }
}

internal var __x_ABI_C__FITypedEventHandler_2___x_ABI_Ctest__zcomponent__CSimple___x_ABI_Ctest__zcomponent__CSimpleEventArgsVTable: __x_ABI_C__FITypedEventHandler_2___x_ABI_Ctest__zcomponent__CSimple___x_ABI_Ctest__zcomponent__CSimpleEventArgsVtbl = .init(
    QueryInterface: {
        guard let pUnk = $0, let riid = $1, let ppvObject = $2 else { return E_INVALIDARG }
        ppvObject.pointee = nil

        switch riid.pointee {
            case IUnknown.IID, IInspectable.IID, ISwiftImplemented.IID, IAgileObject.IID, __x_ABI_C__FITypedEventHandler_2___x_ABI_Ctest__zcomponent__CSimple___x_ABI_Ctest__zcomponent__CSimpleEventArgsWrapper.IID:
                _ = pUnk.pointee.lpVtbl.pointee.AddRef(pUnk)
                ppvObject.pointee = UnsafeMutableRawPointer(pUnk)
                return S_OK
            default:
                return failWith(err: E_NOINTERFACE)
        }
    },

    AddRef: {
         guard let wrapper = __x_ABI_C__FITypedEventHandler_2___x_ABI_Ctest__zcomponent__CSimple___x_ABI_Ctest__zcomponent__CSimpleEventArgsWrapper.fromRaw($0) else { return 1 }
         _ = wrapper.retain()
         return ULONG(_getRetainCount(wrapper.takeUnretainedValue()))
    },

    Release: {
        guard let wrapper = __x_ABI_C__FITypedEventHandler_2___x_ABI_Ctest__zcomponent__CSimple___x_ABI_Ctest__zcomponent__CSimpleEventArgsWrapper.fromRaw($0) else { return 1 }
        return ULONG(_getRetainCount(wrapper.takeRetainedValue()))
    },

    Invoke: {
        guard let __unwrapped__instance = __x_ABI_C__FITypedEventHandler_2___x_ABI_Ctest__zcomponent__CSimple___x_ABI_Ctest__zcomponent__CSimpleEventArgsWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let sender: test_component.Simple? = .from(abi: $1)
        let args: test_component.SimpleEventArgs = .from(abi: $2)
        __unwrapped__instance(sender, args)
        return S_OK
    }
)
typealias __x_ABI_C__FITypedEventHandler_2___x_ABI_Ctest__zcomponent__CSimple___x_ABI_Ctest__zcomponent__CSimpleEventArgsWrapper = InterfaceWrapperBase<test_component.__x_ABI_C__FITypedEventHandler_2___x_ABI_Ctest__zcomponent__CSimple___x_ABI_Ctest__zcomponent__CSimpleEventArgsImpl>
internal class TypedEventHandlerSimple_SimpleEventArgs: test_component.IUnknown {
    override public class var IID: test_component.IID { IID___x_ABI_C__FITypedEventHandler_2___x_ABI_Ctest__zcomponent__CSimple___x_ABI_Ctest__zcomponent__CSimpleEventArgs }

    internal func InvokeImpl(_ sender: UnsafeMutablePointer<__x_ABI_Ctest__component_CISimple>?, _ args: __x_ABI_Ctest__component_CSimpleEventArgs) throws {
        _ = try perform(as: __x_ABI_C__FITypedEventHandler_2___x_ABI_Ctest__zcomponent__CSimple___x_ABI_Ctest__zcomponent__CSimpleEventArgs.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Invoke(pThis, sender, args))
        }
    }

}

internal class __x_ABI_C__FITypedEventHandler_2___x_ABI_Ctest__zcomponent__CSimple___x_ABI_Ctest__zcomponent__CSimpleEventArgsImpl : WinRTDelegateBridge {
    internal typealias Handler = TypedEventHandler<Simple?, SimpleEventArgs>
    internal typealias CABI = __x_ABI_C__FITypedEventHandler_2___x_ABI_Ctest__zcomponent__CSimple___x_ABI_Ctest__zcomponent__CSimpleEventArgs
    internal typealias SwiftABI = test_component.TypedEventHandlerSimple_SimpleEventArgs

    internal static func from(abi: UnsafeMutablePointer<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        let _default = SwiftABI(abi)
        let handler: Handler = { (sender, args) in
            try! _default.InvokeImpl(RawPointer(sender), .from(swift: args))
        }
        return handler
    }
}

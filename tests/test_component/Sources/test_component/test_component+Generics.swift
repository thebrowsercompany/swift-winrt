// WARNING: Please don't edit this file. It was generated by Swift/WinRT v0.0.1
import Ctest_component

private var IID___x_ABI_C__FIIterable_1_IInspectable: IID {
    IID(Data1: 0x092b849b, Data2: 0x60b1, Data3: 0x52be, Data4: ( 0xa4,0x4a,0x6f,0xe8,0xe9,0x33,0xcb,0xe4 ))// 092b849b-60b1-52be-a44a-6fe8e933cbe4
}

private var IID___x_ABI_C__FIIterable_1_HSTRING: IID {
    IID(Data1: 0xe2fcc7c1, Data2: 0x3bfc, Data3: 0x5a0b, Data4: ( 0xb2,0xb0,0x72,0xe7,0x69,0xd1,0xcb,0x7e ))// e2fcc7c1-3bfc-5a0b-b2b0-72e769d1cb7e
}

private var IID___x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING: IID {
    IID(Data1: 0xe9bdaaf0, Data2: 0xcbf6, Data3: 0x5c72, Data4: ( 0xbe,0x90,0x29,0xcb,0xf3,0xa1,0x31,0x9b ))// e9bdaaf0-cbf6-5c72-be90-29cbf3a1319b
}

private var IID___x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_Ctest__zcomponent__CBase: IID {
    IID(Data1: 0x9ee59ac2, Data2: 0xef36, Data3: 0x560b, Data4: ( 0x8a,0xdc,0xd3,0xea,0x78,0xbd,0x58,0x2b ))// 9ee59ac2-ef36-560b-8adc-d3ea78bd582b
}

private var IID___x_ABI_C__FIIterable_1___x_ABI_Ctest__zcomponent__CBase: IID {
    IID(Data1: 0xb826dcab, Data2: 0xca2a, Data3: 0x5fbc, Data4: ( 0x8c,0xbd,0xed,0x75,0x9a,0x9a,0x1c,0x00 ))// b826dcab-ca2a-5fbc-8cbd-ed759a9a1c00
}

private var IID___x_ABI_C__FIIterator_1_IInspectable: IID {
    IID(Data1: 0x44a94f2d, Data2: 0x04f8, Data3: 0x5091, Data4: ( 0xb3,0x36,0xbe,0x78,0x92,0xdd,0x10,0xbe ))// 44a94f2d-04f8-5091-b336-be7892dd10be
}

private var IID___x_ABI_C__FIIterator_1_HSTRING: IID {
    IID(Data1: 0x8c304ebb, Data2: 0x6615, Data3: 0x50a4, Data4: ( 0x88,0x29,0x87,0x9e,0xcd,0x44,0x32,0x36 ))// 8c304ebb-6615-50a4-8829-879ecd443236
}

private var IID___x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING: IID {
    IID(Data1: 0x05eb86f1, Data2: 0x7140, Data3: 0x5517, Data4: ( 0xb8,0x8d,0xcb,0xae,0xbe,0x57,0xe6,0xb1 ))// 05eb86f1-7140-5517-b88d-cbaebe57e6b1
}

private var IID___x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_Ctest__zcomponent__CBase: IID {
    IID(Data1: 0xbe30f8a4, Data2: 0x7d2e, Data3: 0x55fa, Data4: ( 0x91,0xd0,0xf0,0x21,0xdf,0xe4,0x6d,0x06 ))// be30f8a4-7d2e-55fa-91d0-f021dfe46d06
}

private var IID___x_ABI_C__FIIterator_1___x_ABI_Ctest__zcomponent__CBase: IID {
    IID(Data1: 0xa8f692bf, Data2: 0xebba, Data3: 0x5b53, Data4: ( 0x90,0xd3,0x89,0x00,0x9b,0xcc,0x98,0x14 ))// a8f692bf-ebba-5b53-90d3-89009bcc9814
}

private var IID___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING: IID {
    IID(Data1: 0x60310303, Data2: 0x49c5, Data3: 0x52e6, Data4: ( 0xab,0xc6,0xa9,0xb3,0x6e,0xcc,0xc7,0x16 ))// 60310303-49c5-52e6-abc6-a9b36eccc716
}

private var IID___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_Ctest__zcomponent__CBase: IID {
    IID(Data1: 0xc6bff2b3, Data2: 0x09a5, Data3: 0x5fcf, Data4: ( 0xb0,0x78,0x69,0x43,0xdd,0x21,0x5d,0xe7 ))// c6bff2b3-09a5-5fcf-b078-6943dd215de7
}

private var IID___x_ABI_C__FIMapView_2_HSTRING_HSTRING: IID {
    IID(Data1: 0xac7f26f2, Data2: 0xfeb7, Data3: 0x5b2a, Data4: ( 0x8a,0xc4,0x34,0x5b,0xc6,0x2c,0xae,0xde ))// ac7f26f2-feb7-5b2a-8ac4-345bc62caede
}

internal var __x_ABI_C__FIMapView_2_HSTRING_HSTRINGVTable: __x_ABI_C__FIMapView_2_HSTRING_HSTRINGVtbl = .init(
    QueryInterface: {
        guard let pUnk = $0, let riid = $1, let ppvObject = $2 else { return E_INVALIDARG }

        guard riid.pointee == IUnknown.IID ||
              riid.pointee == IInspectable.IID || 
              riid.pointee == ISwiftImplemented.IID ||
              riid.pointee == IAgileObject.IID ||
              riid.pointee == test_component.__x_ABI_C__FIMapView_2_HSTRING_HSTRINGWrapper.IID else { 
                guard let instance = WinRTWrapperBase<Ctest_component.IInspectable, AnyObject>.tryUnwrapFrom(raw: $0) as? any WinRTClass,
                      let cDefault: UnsafeMutablePointer<Ctest_component.IInspectable> = instance._getABI() else { return E_NOINTERFACE }
                return cDefault.pointee.lpVtbl.pointee.QueryInterface(cDefault, riid, ppvObject) 

        }
        _ = pUnk.pointee.lpVtbl.pointee.AddRef(pUnk)
        ppvObject.pointee = UnsafeMutableRawPointer(pUnk)
        return S_OK
    },

    AddRef: {
         guard let wrapper = __x_ABI_C__FIMapView_2_HSTRING_HSTRINGWrapper.fromRaw($0) else { return 1 }
         _ = wrapper.retain()
         return ULONG(_getRetainCount(wrapper.takeUnretainedValue()))
    },

    Release: {
        guard let wrapper = __x_ABI_C__FIMapView_2_HSTRING_HSTRINGWrapper.fromRaw($0) else { return 1 }
        return ULONG(_getRetainCount(wrapper.takeRetainedValue()))
    },

    GetIids: {
        let size = MemoryLayout<IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = test_component.__x_ABI_C__FIMapView_2_HSTRING_HSTRINGWrapper.IID
        $1!.pointee = 3
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.Collections.IMapView`2<String, String>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    Lookup: {
        guard let __unwrapped__instance = __x_ABI_C__FIMapView_2_HSTRING_HSTRINGWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let key: String = .init(from: $1)
        let result = __unwrapped__instance.lookup(key)
        $2?.initialize(to: try! HString(result).detach())
        return S_OK
    },

    get_Size: {
        guard let __unwrapped__instance = __x_ABI_C__FIMapView_2_HSTRING_HSTRINGWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.size
        $1?.initialize(to: result)
        return S_OK
    },

    HasKey: {
        guard let __unwrapped__instance = __x_ABI_C__FIMapView_2_HSTRING_HSTRINGWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let key: String = .init(from: $1)
        let result = __unwrapped__instance.hasKey(key)
        $2?.initialize(to: .init(from: result))
        return S_OK
    },

    Split: {
        guard let __unwrapped__instance = __x_ABI_C__FIMapView_2_HSTRING_HSTRINGWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        var first: test_component.AnyIMapView<String, String>?
        var second: test_component.AnyIMapView<String, String>?
        __unwrapped__instance.split(&first, &second)
        let firstWrapper = test_component.__x_ABI_C__FIMapView_2_HSTRING_HSTRINGWrapper(first)
        firstWrapper?.copyTo($1)
        let secondWrapper = test_component.__x_ABI_C__FIMapView_2_HSTRING_HSTRINGWrapper(second)
        secondWrapper?.copyTo($2)
        return S_OK
    }
)
typealias __x_ABI_C__FIMapView_2_HSTRING_HSTRINGWrapper = InterfaceWrapperBase<test_component.__x_ABI_C__FIMapView_2_HSTRING_HSTRINGImpl>
internal class IMapViewString_String: test_component.IInspectable {
    override public class var IID: IID { IID___x_ABI_C__FIMapView_2_HSTRING_HSTRING }

    internal func LookupImpl(_ key: HSTRING?) throws -> HSTRING? {
        var result: HSTRING?
        _ = try perform(as: __x_ABI_C__FIMapView_2_HSTRING_HSTRING.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Lookup(pThis, key, &result))
        }
        return result
    }

    internal func get_SizeImpl() throws -> UINT32 {
        var result: UINT32 = 0
        _ = try perform(as: __x_ABI_C__FIMapView_2_HSTRING_HSTRING.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Size(pThis, &result))
        }
        return result
    }

    internal func HasKeyImpl(_ key: HSTRING?) throws -> boolean {
        var result: boolean = 0
        _ = try perform(as: __x_ABI_C__FIMapView_2_HSTRING_HSTRING.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.HasKey(pThis, key, &result))
        }
        return result
    }

    internal func SplitImpl(_ first: inout UnsafeMutablePointer<__x_ABI_C__FIMapView_2_HSTRING_HSTRING>?, _ second: inout UnsafeMutablePointer<__x_ABI_C__FIMapView_2_HSTRING_HSTRING>?) throws {
        _ = try perform(as: __x_ABI_C__FIMapView_2_HSTRING_HSTRING.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Split(pThis, &first, &second))
        }
    }

}

internal class __x_ABI_C__FIMapView_2_HSTRING_HSTRINGImpl : IMapView, AbiInterfaceImpl {
    typealias Key = String
    typealias Value = String
    typealias SwiftProjection = AnyIMapView<String, String>
    typealias CABI = __x_ABI_C__FIMapView_2_HSTRING_HSTRING
    typealias SwiftABI = IMapViewString_String

    private (set) public var _default: SwiftABI

    static func from(abi: UnsafeMutablePointer<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        return __x_ABI_C__FIMapView_2_HSTRING_HSTRINGImpl(abi)
    }

    internal init(_ fromAbi: UnsafeMutablePointer<CABI>) {
        _default = SwiftABI(fromAbi)
    }

    static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIMapView_2_HSTRING_HSTRINGVTable) { $0 }
        return.init(lpVtbl: vtblPtr)
    }

    // MARK: WinRT
    public func lookup(_ key: String) -> String {
        let _key = try! HString(key)
        let result = try! _default.LookupImpl(_key.get())
        return .init(from: result)
    }

    public func hasKey(_ key: String) -> Bool {
        let _key = try! HString(key)
        let result = try! _default.HasKeyImpl(_key.get())
        return .init(from: result)
    }

    public func split(_ first: inout AnyIMapView<String, String>?, _ second: inout AnyIMapView<String, String>?) {
        var _first: UnsafeMutablePointer<__x_ABI_C__FIMapView_2_HSTRING_HSTRING>?
        var _second: UnsafeMutablePointer<__x_ABI_C__FIMapView_2_HSTRING_HSTRING>?
        try! _default.SplitImpl(&_first, &_second)
        first = test_component.__x_ABI_C__FIMapView_2_HSTRING_HSTRINGImpl.from(abi: _first)
        second = test_component.__x_ABI_C__FIMapView_2_HSTRING_HSTRINGImpl.from(abi: _second)
    }

    public var size : UInt32 {
        get {
            let result = try! _default.get_SizeImpl()
            return result
        }

    }

}

private var IID___x_ABI_C__FIMapView_2_HSTRING___x_ABI_Ctest__zcomponent__CBase: IID {
    IID(Data1: 0x8c4e7f37, Data2: 0x8bf0, Data3: 0x515a, Data4: ( 0x82,0xc1,0x06,0x45,0x55,0x0b,0xf6,0x0b ))// 8c4e7f37-8bf0-515a-82c1-0645550bf60b
}

internal var __x_ABI_C__FIMapView_2_HSTRING___x_ABI_Ctest__zcomponent__CBaseVTable: __x_ABI_C__FIMapView_2_HSTRING___x_ABI_Ctest__zcomponent__CBaseVtbl = .init(
    QueryInterface: {
        guard let pUnk = $0, let riid = $1, let ppvObject = $2 else { return E_INVALIDARG }

        guard riid.pointee == IUnknown.IID ||
              riid.pointee == IInspectable.IID || 
              riid.pointee == ISwiftImplemented.IID ||
              riid.pointee == IAgileObject.IID ||
              riid.pointee == test_component.__x_ABI_C__FIMapView_2_HSTRING___x_ABI_Ctest__zcomponent__CBaseWrapper.IID else { 
                guard let instance = WinRTWrapperBase<Ctest_component.IInspectable, AnyObject>.tryUnwrapFrom(raw: $0) as? any WinRTClass,
                      let cDefault: UnsafeMutablePointer<Ctest_component.IInspectable> = instance._getABI() else { return E_NOINTERFACE }
                return cDefault.pointee.lpVtbl.pointee.QueryInterface(cDefault, riid, ppvObject) 

        }
        _ = pUnk.pointee.lpVtbl.pointee.AddRef(pUnk)
        ppvObject.pointee = UnsafeMutableRawPointer(pUnk)
        return S_OK
    },

    AddRef: {
         guard let wrapper = __x_ABI_C__FIMapView_2_HSTRING___x_ABI_Ctest__zcomponent__CBaseWrapper.fromRaw($0) else { return 1 }
         _ = wrapper.retain()
         return ULONG(_getRetainCount(wrapper.takeUnretainedValue()))
    },

    Release: {
        guard let wrapper = __x_ABI_C__FIMapView_2_HSTRING___x_ABI_Ctest__zcomponent__CBaseWrapper.fromRaw($0) else { return 1 }
        return ULONG(_getRetainCount(wrapper.takeRetainedValue()))
    },

    GetIids: {
        let size = MemoryLayout<IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = test_component.__x_ABI_C__FIMapView_2_HSTRING___x_ABI_Ctest__zcomponent__CBaseWrapper.IID
        $1!.pointee = 3
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.Collections.IMapView`2<String, test_component.Base>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    Lookup: {
        guard let __unwrapped__instance = __x_ABI_C__FIMapView_2_HSTRING___x_ABI_Ctest__zcomponent__CBaseWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let key: String = .init(from: $1)
        let result = __unwrapped__instance.lookup(key)
        result?.copyTo($2)
        return S_OK
    },

    get_Size: {
        guard let __unwrapped__instance = __x_ABI_C__FIMapView_2_HSTRING___x_ABI_Ctest__zcomponent__CBaseWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.size
        $1?.initialize(to: result)
        return S_OK
    },

    HasKey: {
        guard let __unwrapped__instance = __x_ABI_C__FIMapView_2_HSTRING___x_ABI_Ctest__zcomponent__CBaseWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let key: String = .init(from: $1)
        let result = __unwrapped__instance.hasKey(key)
        $2?.initialize(to: .init(from: result))
        return S_OK
    },

    Split: {
        guard let __unwrapped__instance = __x_ABI_C__FIMapView_2_HSTRING___x_ABI_Ctest__zcomponent__CBaseWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        var first: test_component.AnyIMapView<String, test_component.Base?>?
        var second: test_component.AnyIMapView<String, test_component.Base?>?
        __unwrapped__instance.split(&first, &second)
        let firstWrapper = test_component.__x_ABI_C__FIMapView_2_HSTRING___x_ABI_Ctest__zcomponent__CBaseWrapper(first)
        firstWrapper?.copyTo($1)
        let secondWrapper = test_component.__x_ABI_C__FIMapView_2_HSTRING___x_ABI_Ctest__zcomponent__CBaseWrapper(second)
        secondWrapper?.copyTo($2)
        return S_OK
    }
)
typealias __x_ABI_C__FIMapView_2_HSTRING___x_ABI_Ctest__zcomponent__CBaseWrapper = InterfaceWrapperBase<test_component.__x_ABI_C__FIMapView_2_HSTRING___x_ABI_Ctest__zcomponent__CBaseImpl>
internal class IMapViewString_Base: test_component.IInspectable {
    override public class var IID: IID { IID___x_ABI_C__FIMapView_2_HSTRING___x_ABI_Ctest__zcomponent__CBase }

    internal func LookupImpl(_ key: HSTRING?) throws -> UnsafeMutablePointer<__x_ABI_Ctest__component_CIBase>? {
        var result: UnsafeMutablePointer<__x_ABI_Ctest__component_CIBase>?
        _ = try perform(as: __x_ABI_C__FIMapView_2_HSTRING___x_ABI_Ctest__zcomponent__CBase.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Lookup(pThis, key, &result))
        }
        return result
    }

    internal func get_SizeImpl() throws -> UINT32 {
        var result: UINT32 = 0
        _ = try perform(as: __x_ABI_C__FIMapView_2_HSTRING___x_ABI_Ctest__zcomponent__CBase.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Size(pThis, &result))
        }
        return result
    }

    internal func HasKeyImpl(_ key: HSTRING?) throws -> boolean {
        var result: boolean = 0
        _ = try perform(as: __x_ABI_C__FIMapView_2_HSTRING___x_ABI_Ctest__zcomponent__CBase.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.HasKey(pThis, key, &result))
        }
        return result
    }

    internal func SplitImpl(_ first: inout UnsafeMutablePointer<__x_ABI_C__FIMapView_2_HSTRING___x_ABI_Ctest__zcomponent__CBase>?, _ second: inout UnsafeMutablePointer<__x_ABI_C__FIMapView_2_HSTRING___x_ABI_Ctest__zcomponent__CBase>?) throws {
        _ = try perform(as: __x_ABI_C__FIMapView_2_HSTRING___x_ABI_Ctest__zcomponent__CBase.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Split(pThis, &first, &second))
        }
    }

}

internal class __x_ABI_C__FIMapView_2_HSTRING___x_ABI_Ctest__zcomponent__CBaseImpl : IMapView, AbiInterfaceImpl {
    typealias Key = String
    typealias Value = Base?
    typealias SwiftProjection = AnyIMapView<String, Base?>
    typealias CABI = __x_ABI_C__FIMapView_2_HSTRING___x_ABI_Ctest__zcomponent__CBase
    typealias SwiftABI = IMapViewString_Base

    private (set) public var _default: SwiftABI

    static func from(abi: UnsafeMutablePointer<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        return __x_ABI_C__FIMapView_2_HSTRING___x_ABI_Ctest__zcomponent__CBaseImpl(abi)
    }

    internal init(_ fromAbi: UnsafeMutablePointer<CABI>) {
        _default = SwiftABI(fromAbi)
    }

    static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIMapView_2_HSTRING___x_ABI_Ctest__zcomponent__CBaseVTable) { $0 }
        return.init(lpVtbl: vtblPtr)
    }

    // MARK: WinRT
    public func lookup(_ key: String) -> Base? {
        let _key = try! HString(key)
        let result = try! _default.LookupImpl(_key.get())
        return .from(abi: result)
    }

    public func hasKey(_ key: String) -> Bool {
        let _key = try! HString(key)
        let result = try! _default.HasKeyImpl(_key.get())
        return .init(from: result)
    }

    public func split(_ first: inout AnyIMapView<String, Base?>?, _ second: inout AnyIMapView<String, Base?>?) {
        var _first: UnsafeMutablePointer<__x_ABI_C__FIMapView_2_HSTRING___x_ABI_Ctest__zcomponent__CBase>?
        var _second: UnsafeMutablePointer<__x_ABI_C__FIMapView_2_HSTRING___x_ABI_Ctest__zcomponent__CBase>?
        try! _default.SplitImpl(&_first, &_second)
        first = test_component.__x_ABI_C__FIMapView_2_HSTRING___x_ABI_Ctest__zcomponent__CBaseImpl.from(abi: _first)
        second = test_component.__x_ABI_C__FIMapView_2_HSTRING___x_ABI_Ctest__zcomponent__CBaseImpl.from(abi: _second)
    }

    public var size : UInt32 {
        get {
            let result = try! _default.get_SizeImpl()
            return result
        }

    }

}

private var IID___x_ABI_C__FIMap_2_HSTRING_HSTRING: IID {
    IID(Data1: 0xf6d1f700, Data2: 0x49c2, Data3: 0x52ae, Data4: ( 0x81,0x54,0x82,0x6f,0x99,0x08,0x77,0x3c ))// f6d1f700-49c2-52ae-8154-826f9908773c
}

internal var __x_ABI_C__FIMap_2_HSTRING_HSTRINGVTable: __x_ABI_C__FIMap_2_HSTRING_HSTRINGVtbl = .init(
    QueryInterface: {
        guard let pUnk = $0, let riid = $1, let ppvObject = $2 else { return E_INVALIDARG }

        guard riid.pointee == IUnknown.IID ||
              riid.pointee == IInspectable.IID || 
              riid.pointee == ISwiftImplemented.IID ||
              riid.pointee == IAgileObject.IID ||
              riid.pointee == test_component.__x_ABI_C__FIMap_2_HSTRING_HSTRINGWrapper.IID else { 
                guard let instance = WinRTWrapperBase<Ctest_component.IInspectable, AnyObject>.tryUnwrapFrom(raw: $0) as? any WinRTClass,
                      let cDefault: UnsafeMutablePointer<Ctest_component.IInspectable> = instance._getABI() else { return E_NOINTERFACE }
                return cDefault.pointee.lpVtbl.pointee.QueryInterface(cDefault, riid, ppvObject) 

        }
        _ = pUnk.pointee.lpVtbl.pointee.AddRef(pUnk)
        ppvObject.pointee = UnsafeMutableRawPointer(pUnk)
        return S_OK
    },

    AddRef: {
         guard let wrapper = __x_ABI_C__FIMap_2_HSTRING_HSTRINGWrapper.fromRaw($0) else { return 1 }
         _ = wrapper.retain()
         return ULONG(_getRetainCount(wrapper.takeUnretainedValue()))
    },

    Release: {
        guard let wrapper = __x_ABI_C__FIMap_2_HSTRING_HSTRINGWrapper.fromRaw($0) else { return 1 }
        return ULONG(_getRetainCount(wrapper.takeRetainedValue()))
    },

    GetIids: {
        let size = MemoryLayout<IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = test_component.__x_ABI_C__FIMap_2_HSTRING_HSTRINGWrapper.IID
        $1!.pointee = 3
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.Collections.IMap`2<String, String>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    Lookup: {
        guard let __unwrapped__instance = __x_ABI_C__FIMap_2_HSTRING_HSTRINGWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let key: String = .init(from: $1)
        let result = __unwrapped__instance.lookup(key)
        $2?.initialize(to: try! HString(result).detach())
        return S_OK
    },

    get_Size: {
        guard let __unwrapped__instance = __x_ABI_C__FIMap_2_HSTRING_HSTRINGWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.size
        $1?.initialize(to: result)
        return S_OK
    },

    HasKey: {
        guard let __unwrapped__instance = __x_ABI_C__FIMap_2_HSTRING_HSTRINGWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let key: String = .init(from: $1)
        let result = __unwrapped__instance.hasKey(key)
        $2?.initialize(to: .init(from: result))
        return S_OK
    },

    GetView: {
        guard let __unwrapped__instance = __x_ABI_C__FIMap_2_HSTRING_HSTRINGWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.getView()
        let resultWrapper = test_component.__x_ABI_C__FIMapView_2_HSTRING_HSTRINGWrapper(result)
        resultWrapper?.copyTo($1)
        return S_OK
    },

    Insert: {
        guard let __unwrapped__instance = __x_ABI_C__FIMap_2_HSTRING_HSTRINGWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let key: String = .init(from: $1)
        let value: String = .init(from: $2)
        let result = __unwrapped__instance.insert(key, value)
        $3?.initialize(to: .init(from: result))
        return S_OK
    },

    Remove: {
        guard let __unwrapped__instance = __x_ABI_C__FIMap_2_HSTRING_HSTRINGWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let key: String = .init(from: $1)
        __unwrapped__instance.remove(key)
        return S_OK
    },

    Clear: {
        guard let __unwrapped__instance = __x_ABI_C__FIMap_2_HSTRING_HSTRINGWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        __unwrapped__instance.clear()
        return S_OK
    }
)
typealias __x_ABI_C__FIMap_2_HSTRING_HSTRINGWrapper = InterfaceWrapperBase<test_component.__x_ABI_C__FIMap_2_HSTRING_HSTRINGImpl>
internal class IMapString_String: test_component.IInspectable {
    override public class var IID: IID { IID___x_ABI_C__FIMap_2_HSTRING_HSTRING }

    internal func LookupImpl(_ key: HSTRING?) throws -> HSTRING? {
        var result: HSTRING?
        _ = try perform(as: __x_ABI_C__FIMap_2_HSTRING_HSTRING.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Lookup(pThis, key, &result))
        }
        return result
    }

    internal func get_SizeImpl() throws -> UINT32 {
        var result: UINT32 = 0
        _ = try perform(as: __x_ABI_C__FIMap_2_HSTRING_HSTRING.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Size(pThis, &result))
        }
        return result
    }

    internal func HasKeyImpl(_ key: HSTRING?) throws -> boolean {
        var result: boolean = 0
        _ = try perform(as: __x_ABI_C__FIMap_2_HSTRING_HSTRING.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.HasKey(pThis, key, &result))
        }
        return result
    }

    internal func GetViewImpl() throws -> UnsafeMutablePointer<__x_ABI_C__FIMapView_2_HSTRING_HSTRING>? {
        var result: UnsafeMutablePointer<__x_ABI_C__FIMapView_2_HSTRING_HSTRING>?
        _ = try perform(as: __x_ABI_C__FIMap_2_HSTRING_HSTRING.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetView(pThis, &result))
        }
        return result
    }

    internal func InsertImpl(_ key: HSTRING?, _ value: HSTRING?) throws -> boolean {
        var result: boolean = 0
        _ = try perform(as: __x_ABI_C__FIMap_2_HSTRING_HSTRING.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Insert(pThis, key, value, &result))
        }
        return result
    }

    internal func RemoveImpl(_ key: HSTRING?) throws {
        _ = try perform(as: __x_ABI_C__FIMap_2_HSTRING_HSTRING.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Remove(pThis, key))
        }
    }

    internal func ClearImpl() throws {
        _ = try perform(as: __x_ABI_C__FIMap_2_HSTRING_HSTRING.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Clear(pThis))
        }
    }

}

internal class __x_ABI_C__FIMap_2_HSTRING_HSTRINGImpl : IMap, AbiInterfaceImpl {
    typealias Key = String
    typealias Value = String
    typealias SwiftProjection = AnyIMap<String, String>
    typealias CABI = __x_ABI_C__FIMap_2_HSTRING_HSTRING
    typealias SwiftABI = IMapString_String

    private (set) public var _default: SwiftABI

    static func from(abi: UnsafeMutablePointer<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        return __x_ABI_C__FIMap_2_HSTRING_HSTRINGImpl(abi)
    }

    internal init(_ fromAbi: UnsafeMutablePointer<CABI>) {
        _default = SwiftABI(fromAbi)
    }

    static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIMap_2_HSTRING_HSTRINGVTable) { $0 }
        return.init(lpVtbl: vtblPtr)
    }

    // MARK: WinRT
    public func lookup(_ key: String) -> String {
        let _key = try! HString(key)
        let result = try! _default.LookupImpl(_key.get())
        return .init(from: result)
    }

    public func hasKey(_ key: String) -> Bool {
        let _key = try! HString(key)
        let result = try! _default.HasKeyImpl(_key.get())
        return .init(from: result)
    }

    public func getView() -> AnyIMapView<String, String>? {
        let result = try! _default.GetViewImpl()
        return test_component.__x_ABI_C__FIMapView_2_HSTRING_HSTRINGWrapper.unwrapFrom(abi: result)
    }

    public func insert(_ key: String, _ value: String) -> Bool {
        let _key = try! HString(key)
        let _value = try! HString(value)
        let result = try! _default.InsertImpl(_key.get(), _value.get())
        return .init(from: result)
    }

    public func remove(_ key: String) {
        let _key = try! HString(key)
        try! _default.RemoveImpl(_key.get())
    }

    public func clear() {
        try! _default.ClearImpl()
    }

    public var size : UInt32 {
        get {
            let result = try! _default.get_SizeImpl()
            return result
        }

    }

}

private var IID___x_ABI_C__FIMap_2_HSTRING___x_ABI_Ctest__zcomponent__CBase: IID {
    IID(Data1: 0x73430fe6, Data2: 0xa622, Data3: 0x5945, Data4: ( 0xa5,0x86,0x6f,0x3a,0x84,0xef,0x15,0xe3 ))// 73430fe6-a622-5945-a586-6f3a84ef15e3
}

internal var __x_ABI_C__FIMap_2_HSTRING___x_ABI_Ctest__zcomponent__CBaseVTable: __x_ABI_C__FIMap_2_HSTRING___x_ABI_Ctest__zcomponent__CBaseVtbl = .init(
    QueryInterface: {
        guard let pUnk = $0, let riid = $1, let ppvObject = $2 else { return E_INVALIDARG }

        guard riid.pointee == IUnknown.IID ||
              riid.pointee == IInspectable.IID || 
              riid.pointee == ISwiftImplemented.IID ||
              riid.pointee == IAgileObject.IID ||
              riid.pointee == test_component.__x_ABI_C__FIMap_2_HSTRING___x_ABI_Ctest__zcomponent__CBaseWrapper.IID else { 
                guard let instance = WinRTWrapperBase<Ctest_component.IInspectable, AnyObject>.tryUnwrapFrom(raw: $0) as? any WinRTClass,
                      let cDefault: UnsafeMutablePointer<Ctest_component.IInspectable> = instance._getABI() else { return E_NOINTERFACE }
                return cDefault.pointee.lpVtbl.pointee.QueryInterface(cDefault, riid, ppvObject) 

        }
        _ = pUnk.pointee.lpVtbl.pointee.AddRef(pUnk)
        ppvObject.pointee = UnsafeMutableRawPointer(pUnk)
        return S_OK
    },

    AddRef: {
         guard let wrapper = __x_ABI_C__FIMap_2_HSTRING___x_ABI_Ctest__zcomponent__CBaseWrapper.fromRaw($0) else { return 1 }
         _ = wrapper.retain()
         return ULONG(_getRetainCount(wrapper.takeUnretainedValue()))
    },

    Release: {
        guard let wrapper = __x_ABI_C__FIMap_2_HSTRING___x_ABI_Ctest__zcomponent__CBaseWrapper.fromRaw($0) else { return 1 }
        return ULONG(_getRetainCount(wrapper.takeRetainedValue()))
    },

    GetIids: {
        let size = MemoryLayout<IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = test_component.__x_ABI_C__FIMap_2_HSTRING___x_ABI_Ctest__zcomponent__CBaseWrapper.IID
        $1!.pointee = 3
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.Collections.IMap`2<String, test_component.Base>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    Lookup: {
        guard let __unwrapped__instance = __x_ABI_C__FIMap_2_HSTRING___x_ABI_Ctest__zcomponent__CBaseWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let key: String = .init(from: $1)
        let result = __unwrapped__instance.lookup(key)
        result?.copyTo($2)
        return S_OK
    },

    get_Size: {
        guard let __unwrapped__instance = __x_ABI_C__FIMap_2_HSTRING___x_ABI_Ctest__zcomponent__CBaseWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.size
        $1?.initialize(to: result)
        return S_OK
    },

    HasKey: {
        guard let __unwrapped__instance = __x_ABI_C__FIMap_2_HSTRING___x_ABI_Ctest__zcomponent__CBaseWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let key: String = .init(from: $1)
        let result = __unwrapped__instance.hasKey(key)
        $2?.initialize(to: .init(from: result))
        return S_OK
    },

    GetView: {
        guard let __unwrapped__instance = __x_ABI_C__FIMap_2_HSTRING___x_ABI_Ctest__zcomponent__CBaseWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.getView()
        let resultWrapper = test_component.__x_ABI_C__FIMapView_2_HSTRING___x_ABI_Ctest__zcomponent__CBaseWrapper(result)
        resultWrapper?.copyTo($1)
        return S_OK
    },

    Insert: {
        guard let __unwrapped__instance = __x_ABI_C__FIMap_2_HSTRING___x_ABI_Ctest__zcomponent__CBaseWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let key: String = .init(from: $1)
        let value: test_component.Base? = .from(abi: $2)
        let result = __unwrapped__instance.insert(key, value)
        $3?.initialize(to: .init(from: result))
        return S_OK
    },

    Remove: {
        guard let __unwrapped__instance = __x_ABI_C__FIMap_2_HSTRING___x_ABI_Ctest__zcomponent__CBaseWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let key: String = .init(from: $1)
        __unwrapped__instance.remove(key)
        return S_OK
    },

    Clear: {
        guard let __unwrapped__instance = __x_ABI_C__FIMap_2_HSTRING___x_ABI_Ctest__zcomponent__CBaseWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        __unwrapped__instance.clear()
        return S_OK
    }
)
typealias __x_ABI_C__FIMap_2_HSTRING___x_ABI_Ctest__zcomponent__CBaseWrapper = InterfaceWrapperBase<test_component.__x_ABI_C__FIMap_2_HSTRING___x_ABI_Ctest__zcomponent__CBaseImpl>
internal class IMapString_Base: test_component.IInspectable {
    override public class var IID: IID { IID___x_ABI_C__FIMap_2_HSTRING___x_ABI_Ctest__zcomponent__CBase }

    internal func LookupImpl(_ key: HSTRING?) throws -> UnsafeMutablePointer<__x_ABI_Ctest__component_CIBase>? {
        var result: UnsafeMutablePointer<__x_ABI_Ctest__component_CIBase>?
        _ = try perform(as: __x_ABI_C__FIMap_2_HSTRING___x_ABI_Ctest__zcomponent__CBase.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Lookup(pThis, key, &result))
        }
        return result
    }

    internal func get_SizeImpl() throws -> UINT32 {
        var result: UINT32 = 0
        _ = try perform(as: __x_ABI_C__FIMap_2_HSTRING___x_ABI_Ctest__zcomponent__CBase.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Size(pThis, &result))
        }
        return result
    }

    internal func HasKeyImpl(_ key: HSTRING?) throws -> boolean {
        var result: boolean = 0
        _ = try perform(as: __x_ABI_C__FIMap_2_HSTRING___x_ABI_Ctest__zcomponent__CBase.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.HasKey(pThis, key, &result))
        }
        return result
    }

    internal func GetViewImpl() throws -> UnsafeMutablePointer<__x_ABI_C__FIMapView_2_HSTRING___x_ABI_Ctest__zcomponent__CBase>? {
        var result: UnsafeMutablePointer<__x_ABI_C__FIMapView_2_HSTRING___x_ABI_Ctest__zcomponent__CBase>?
        _ = try perform(as: __x_ABI_C__FIMap_2_HSTRING___x_ABI_Ctest__zcomponent__CBase.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetView(pThis, &result))
        }
        return result
    }

    internal func InsertImpl(_ key: HSTRING?, _ value: UnsafeMutablePointer<__x_ABI_Ctest__component_CIBase>?) throws -> boolean {
        var result: boolean = 0
        _ = try perform(as: __x_ABI_C__FIMap_2_HSTRING___x_ABI_Ctest__zcomponent__CBase.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Insert(pThis, key, value, &result))
        }
        return result
    }

    internal func RemoveImpl(_ key: HSTRING?) throws {
        _ = try perform(as: __x_ABI_C__FIMap_2_HSTRING___x_ABI_Ctest__zcomponent__CBase.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Remove(pThis, key))
        }
    }

    internal func ClearImpl() throws {
        _ = try perform(as: __x_ABI_C__FIMap_2_HSTRING___x_ABI_Ctest__zcomponent__CBase.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Clear(pThis))
        }
    }

}

internal class __x_ABI_C__FIMap_2_HSTRING___x_ABI_Ctest__zcomponent__CBaseImpl : IMap, AbiInterfaceImpl {
    typealias Key = String
    typealias Value = Base?
    typealias SwiftProjection = AnyIMap<String, Base?>
    typealias CABI = __x_ABI_C__FIMap_2_HSTRING___x_ABI_Ctest__zcomponent__CBase
    typealias SwiftABI = IMapString_Base

    private (set) public var _default: SwiftABI

    static func from(abi: UnsafeMutablePointer<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        return __x_ABI_C__FIMap_2_HSTRING___x_ABI_Ctest__zcomponent__CBaseImpl(abi)
    }

    internal init(_ fromAbi: UnsafeMutablePointer<CABI>) {
        _default = SwiftABI(fromAbi)
    }

    static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIMap_2_HSTRING___x_ABI_Ctest__zcomponent__CBaseVTable) { $0 }
        return.init(lpVtbl: vtblPtr)
    }

    // MARK: WinRT
    public func lookup(_ key: String) -> Base? {
        let _key = try! HString(key)
        let result = try! _default.LookupImpl(_key.get())
        return .from(abi: result)
    }

    public func hasKey(_ key: String) -> Bool {
        let _key = try! HString(key)
        let result = try! _default.HasKeyImpl(_key.get())
        return .init(from: result)
    }

    public func getView() -> AnyIMapView<String, Base?>? {
        let result = try! _default.GetViewImpl()
        return test_component.__x_ABI_C__FIMapView_2_HSTRING___x_ABI_Ctest__zcomponent__CBaseWrapper.unwrapFrom(abi: result)
    }

    public func insert(_ key: String, _ value: Base?) -> Bool {
        let _key = try! HString(key)
        let result = try! _default.InsertImpl(_key.get(), RawPointer(value))
        return .init(from: result)
    }

    public func remove(_ key: String) {
        let _key = try! HString(key)
        try! _default.RemoveImpl(_key.get())
    }

    public func clear() {
        try! _default.ClearImpl()
    }

    public var size : UInt32 {
        get {
            let result = try! _default.get_SizeImpl()
            return result
        }

    }

}

private var IID___x_ABI_C__FIVectorView_1_IInspectable: IID {
    IID(Data1: 0xa6487363, Data2: 0xb074, Data3: 0x5c60, Data4: ( 0xab,0x16,0x86,0x6d,0xce,0x4e,0xe5,0x4d ))// a6487363-b074-5c60-ab16-866dce4ee54d
}

internal var __x_ABI_C__FIVectorView_1_IInspectableVTable: __x_ABI_C__FIVectorView_1_IInspectableVtbl = .init(
    QueryInterface: {
        guard let pUnk = $0, let riid = $1, let ppvObject = $2 else { return E_INVALIDARG }

        guard riid.pointee == IUnknown.IID ||
              riid.pointee == IInspectable.IID || 
              riid.pointee == ISwiftImplemented.IID ||
              riid.pointee == IAgileObject.IID ||
              riid.pointee == test_component.__x_ABI_C__FIVectorView_1_IInspectableWrapper.IID else { 
                guard let instance = WinRTWrapperBase<Ctest_component.IInspectable, AnyObject>.tryUnwrapFrom(raw: $0) as? any WinRTClass,
                      let cDefault: UnsafeMutablePointer<Ctest_component.IInspectable> = instance._getABI() else { return E_NOINTERFACE }
                return cDefault.pointee.lpVtbl.pointee.QueryInterface(cDefault, riid, ppvObject) 

        }
        _ = pUnk.pointee.lpVtbl.pointee.AddRef(pUnk)
        ppvObject.pointee = UnsafeMutableRawPointer(pUnk)
        return S_OK
    },

    AddRef: {
         guard let wrapper = __x_ABI_C__FIVectorView_1_IInspectableWrapper.fromRaw($0) else { return 1 }
         _ = wrapper.retain()
         return ULONG(_getRetainCount(wrapper.takeUnretainedValue()))
    },

    Release: {
        guard let wrapper = __x_ABI_C__FIVectorView_1_IInspectableWrapper.fromRaw($0) else { return 1 }
        return ULONG(_getRetainCount(wrapper.takeRetainedValue()))
    },

    GetIids: {
        let size = MemoryLayout<IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = test_component.__x_ABI_C__FIVectorView_1_IInspectableWrapper.IID
        $1!.pointee = 3
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.Collections.IVectorView`1<Any>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    GetAt: {
        guard let __unwrapped__instance = __x_ABI_C__FIVectorView_1_IInspectableWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let index: UInt32 = $1
        let result = __unwrapped__instance.getAt(index)
        let resultWrapper = __ABI_.AnyWrapper(result)
        resultWrapper?.copyTo($2)
        return S_OK
    },

    get_Size: {
        guard let __unwrapped__instance = __x_ABI_C__FIVectorView_1_IInspectableWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.size
        $1?.initialize(to: result)
        return S_OK
    },

    IndexOf: {
        guard let __unwrapped__instance = __x_ABI_C__FIVectorView_1_IInspectableWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let value: Any? = __ABI_.AnyWrapper.unwrapFrom(abi: $1)
        var index: UInt32 = 0
        let result = __unwrapped__instance.indexOf(value, &index)
        $2?.initialize(to: index)
        $3?.initialize(to: .init(from: result))
        return S_OK
    },

    GetMany: { _, _, _, _, _ in return failWith(err: E_NOTIMPL) }
)
typealias __x_ABI_C__FIVectorView_1_IInspectableWrapper = InterfaceWrapperBase<test_component.__x_ABI_C__FIVectorView_1_IInspectableImpl>
internal class IVectorViewAny: test_component.IInspectable {
    override public class var IID: IID { IID___x_ABI_C__FIVectorView_1_IInspectable }

    internal func GetAtImpl(_ index: UINT32) throws -> UnsafeMutablePointer<Ctest_component.IInspectable>? {
        var result: UnsafeMutablePointer<Ctest_component.IInspectable>?
        _ = try perform(as: __x_ABI_C__FIVectorView_1_IInspectable.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetAt(pThis, index, &result))
        }
        return result
    }

    internal func get_SizeImpl() throws -> UINT32 {
        var result: UINT32 = 0
        _ = try perform(as: __x_ABI_C__FIVectorView_1_IInspectable.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Size(pThis, &result))
        }
        return result
    }

    internal func IndexOfImpl(_ value: UnsafeMutablePointer<Ctest_component.IInspectable>?, _ index: inout UINT32) throws -> boolean {
        var result: boolean = 0
        _ = try perform(as: __x_ABI_C__FIVectorView_1_IInspectable.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.IndexOf(pThis, value, &index, &result))
        }
        return result
    }

}

internal class __x_ABI_C__FIVectorView_1_IInspectableImpl : IVectorView, AbiInterfaceImpl {
    typealias Element = Any?
    typealias SwiftProjection = AnyIVectorView<Any?>
    typealias CABI = __x_ABI_C__FIVectorView_1_IInspectable
    typealias SwiftABI = IVectorViewAny

    private (set) public var _default: SwiftABI

    static func from(abi: UnsafeMutablePointer<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        return __x_ABI_C__FIVectorView_1_IInspectableImpl(abi)
    }

    internal init(_ fromAbi: UnsafeMutablePointer<CABI>) {
        _default = SwiftABI(fromAbi)
    }

    static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIVectorView_1_IInspectableVTable) { $0 }
        return.init(lpVtbl: vtblPtr)
    }

    // MARK: Collection
    var startIndex: Int { 0 }
    var endIndex: Int { Int(size) }
    func index(after i: Int) -> Int {
        i+1
    }

    func index(of: Element) -> Int? { 
        var index: UInt32 = 0
        let result = indexOf(of, &index)
        guard result else { return nil }
        return Int(index)
    }
    var count: Int { Int(size) }

    subscript(position: Int) -> Element {
        get {
            getAt(UInt32(position))
        }
    }
    // MARK: WinRT
    public func getAt(_ index: UInt32) -> Any? {
        let result = try! _default.GetAtImpl(index)
        return __ABI_.AnyWrapper.unwrapFrom(abi: result)
    }

    public func indexOf(_ value: Any?, _ index: inout UInt32) -> Bool {
        let valueWrapper = __ABI_.AnyWrapper(value)
        let _value = try! valueWrapper?.toABI { $0 }
        let result = try! _default.IndexOfImpl(_value, &index)
        return .init(from: result)
    }

    public var size : UInt32 {
        get {
            let result = try! _default.get_SizeImpl()
            return result
        }

    }

}

private var IID___x_ABI_C__FIVectorView_1_HSTRING: IID {
    IID(Data1: 0x2f13c006, Data2: 0xa03a, Data3: 0x5f69, Data4: ( 0xb0,0x90,0x75,0xa4,0x3e,0x33,0x42,0x3e ))// 2f13c006-a03a-5f69-b090-75a43e33423e
}

internal var __x_ABI_C__FIVectorView_1_HSTRINGVTable: __x_ABI_C__FIVectorView_1_HSTRINGVtbl = .init(
    QueryInterface: {
        guard let pUnk = $0, let riid = $1, let ppvObject = $2 else { return E_INVALIDARG }

        guard riid.pointee == IUnknown.IID ||
              riid.pointee == IInspectable.IID || 
              riid.pointee == ISwiftImplemented.IID ||
              riid.pointee == IAgileObject.IID ||
              riid.pointee == test_component.__x_ABI_C__FIVectorView_1_HSTRINGWrapper.IID else { 
                guard let instance = WinRTWrapperBase<Ctest_component.IInspectable, AnyObject>.tryUnwrapFrom(raw: $0) as? any WinRTClass,
                      let cDefault: UnsafeMutablePointer<Ctest_component.IInspectable> = instance._getABI() else { return E_NOINTERFACE }
                return cDefault.pointee.lpVtbl.pointee.QueryInterface(cDefault, riid, ppvObject) 

        }
        _ = pUnk.pointee.lpVtbl.pointee.AddRef(pUnk)
        ppvObject.pointee = UnsafeMutableRawPointer(pUnk)
        return S_OK
    },

    AddRef: {
         guard let wrapper = __x_ABI_C__FIVectorView_1_HSTRINGWrapper.fromRaw($0) else { return 1 }
         _ = wrapper.retain()
         return ULONG(_getRetainCount(wrapper.takeUnretainedValue()))
    },

    Release: {
        guard let wrapper = __x_ABI_C__FIVectorView_1_HSTRINGWrapper.fromRaw($0) else { return 1 }
        return ULONG(_getRetainCount(wrapper.takeRetainedValue()))
    },

    GetIids: {
        let size = MemoryLayout<IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = test_component.__x_ABI_C__FIVectorView_1_HSTRINGWrapper.IID
        $1!.pointee = 3
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.Collections.IVectorView`1<String>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    GetAt: {
        guard let __unwrapped__instance = __x_ABI_C__FIVectorView_1_HSTRINGWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let index: UInt32 = $1
        let result = __unwrapped__instance.getAt(index)
        $2?.initialize(to: try! HString(result).detach())
        return S_OK
    },

    get_Size: {
        guard let __unwrapped__instance = __x_ABI_C__FIVectorView_1_HSTRINGWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.size
        $1?.initialize(to: result)
        return S_OK
    },

    IndexOf: {
        guard let __unwrapped__instance = __x_ABI_C__FIVectorView_1_HSTRINGWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let value: String = .init(from: $1)
        var index: UInt32 = 0
        let result = __unwrapped__instance.indexOf(value, &index)
        $2?.initialize(to: index)
        $3?.initialize(to: .init(from: result))
        return S_OK
    },

    GetMany: { _, _, _, _, _ in return failWith(err: E_NOTIMPL) }
)
typealias __x_ABI_C__FIVectorView_1_HSTRINGWrapper = InterfaceWrapperBase<test_component.__x_ABI_C__FIVectorView_1_HSTRINGImpl>
internal class IVectorViewString: test_component.IInspectable {
    override public class var IID: IID { IID___x_ABI_C__FIVectorView_1_HSTRING }

    internal func GetAtImpl(_ index: UINT32) throws -> HSTRING? {
        var result: HSTRING?
        _ = try perform(as: __x_ABI_C__FIVectorView_1_HSTRING.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetAt(pThis, index, &result))
        }
        return result
    }

    internal func get_SizeImpl() throws -> UINT32 {
        var result: UINT32 = 0
        _ = try perform(as: __x_ABI_C__FIVectorView_1_HSTRING.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Size(pThis, &result))
        }
        return result
    }

    internal func IndexOfImpl(_ value: HSTRING?, _ index: inout UINT32) throws -> boolean {
        var result: boolean = 0
        _ = try perform(as: __x_ABI_C__FIVectorView_1_HSTRING.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.IndexOf(pThis, value, &index, &result))
        }
        return result
    }

}

internal class __x_ABI_C__FIVectorView_1_HSTRINGImpl : IVectorView, AbiInterfaceImpl {
    typealias Element = String
    typealias SwiftProjection = AnyIVectorView<String>
    typealias CABI = __x_ABI_C__FIVectorView_1_HSTRING
    typealias SwiftABI = IVectorViewString

    private (set) public var _default: SwiftABI

    static func from(abi: UnsafeMutablePointer<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        return __x_ABI_C__FIVectorView_1_HSTRINGImpl(abi)
    }

    internal init(_ fromAbi: UnsafeMutablePointer<CABI>) {
        _default = SwiftABI(fromAbi)
    }

    static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIVectorView_1_HSTRINGVTable) { $0 }
        return.init(lpVtbl: vtblPtr)
    }

    // MARK: Collection
    var startIndex: Int { 0 }
    var endIndex: Int { Int(size) }
    func index(after i: Int) -> Int {
        i+1
    }

    func index(of: Element) -> Int? { 
        var index: UInt32 = 0
        let result = indexOf(of, &index)
        guard result else { return nil }
        return Int(index)
    }
    var count: Int { Int(size) }

    subscript(position: Int) -> Element {
        get {
            getAt(UInt32(position))
        }
    }
    // MARK: WinRT
    public func getAt(_ index: UInt32) -> String {
        let result = try! _default.GetAtImpl(index)
        return .init(from: result)
    }

    public func indexOf(_ value: String, _ index: inout UInt32) -> Bool {
        let _value = try! HString(value)
        let result = try! _default.IndexOfImpl(_value.get(), &index)
        return .init(from: result)
    }

    public var size : UInt32 {
        get {
            let result = try! _default.get_SizeImpl()
            return result
        }

    }

}

private var IID___x_ABI_C__FIVectorView_1___x_ABI_Ctest__zcomponent__CBase: IID {
    IID(Data1: 0x92c07225, Data2: 0x1151, Data3: 0x51be, Data4: ( 0x83,0x03,0xf0,0x11,0x9f,0x4a,0xac,0xe6 ))// 92c07225-1151-51be-8303-f0119f4aace6
}

internal var __x_ABI_C__FIVectorView_1___x_ABI_Ctest__zcomponent__CBaseVTable: __x_ABI_C__FIVectorView_1___x_ABI_Ctest__zcomponent__CBaseVtbl = .init(
    QueryInterface: {
        guard let pUnk = $0, let riid = $1, let ppvObject = $2 else { return E_INVALIDARG }

        guard riid.pointee == IUnknown.IID ||
              riid.pointee == IInspectable.IID || 
              riid.pointee == ISwiftImplemented.IID ||
              riid.pointee == IAgileObject.IID ||
              riid.pointee == test_component.__x_ABI_C__FIVectorView_1___x_ABI_Ctest__zcomponent__CBaseWrapper.IID else { 
                guard let instance = WinRTWrapperBase<Ctest_component.IInspectable, AnyObject>.tryUnwrapFrom(raw: $0) as? any WinRTClass,
                      let cDefault: UnsafeMutablePointer<Ctest_component.IInspectable> = instance._getABI() else { return E_NOINTERFACE }
                return cDefault.pointee.lpVtbl.pointee.QueryInterface(cDefault, riid, ppvObject) 

        }
        _ = pUnk.pointee.lpVtbl.pointee.AddRef(pUnk)
        ppvObject.pointee = UnsafeMutableRawPointer(pUnk)
        return S_OK
    },

    AddRef: {
         guard let wrapper = __x_ABI_C__FIVectorView_1___x_ABI_Ctest__zcomponent__CBaseWrapper.fromRaw($0) else { return 1 }
         _ = wrapper.retain()
         return ULONG(_getRetainCount(wrapper.takeUnretainedValue()))
    },

    Release: {
        guard let wrapper = __x_ABI_C__FIVectorView_1___x_ABI_Ctest__zcomponent__CBaseWrapper.fromRaw($0) else { return 1 }
        return ULONG(_getRetainCount(wrapper.takeRetainedValue()))
    },

    GetIids: {
        let size = MemoryLayout<IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = test_component.__x_ABI_C__FIVectorView_1___x_ABI_Ctest__zcomponent__CBaseWrapper.IID
        $1!.pointee = 3
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.Collections.IVectorView`1<test_component.Base>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    GetAt: {
        guard let __unwrapped__instance = __x_ABI_C__FIVectorView_1___x_ABI_Ctest__zcomponent__CBaseWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let index: UInt32 = $1
        let result = __unwrapped__instance.getAt(index)
        result?.copyTo($2)
        return S_OK
    },

    get_Size: {
        guard let __unwrapped__instance = __x_ABI_C__FIVectorView_1___x_ABI_Ctest__zcomponent__CBaseWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.size
        $1?.initialize(to: result)
        return S_OK
    },

    IndexOf: {
        guard let __unwrapped__instance = __x_ABI_C__FIVectorView_1___x_ABI_Ctest__zcomponent__CBaseWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let value: test_component.Base? = .from(abi: $1)
        var index: UInt32 = 0
        let result = __unwrapped__instance.indexOf(value, &index)
        $2?.initialize(to: index)
        $3?.initialize(to: .init(from: result))
        return S_OK
    },

    GetMany: { _, _, _, _, _ in return failWith(err: E_NOTIMPL) }
)
typealias __x_ABI_C__FIVectorView_1___x_ABI_Ctest__zcomponent__CBaseWrapper = InterfaceWrapperBase<test_component.__x_ABI_C__FIVectorView_1___x_ABI_Ctest__zcomponent__CBaseImpl>
internal class IVectorViewBase: test_component.IInspectable {
    override public class var IID: IID { IID___x_ABI_C__FIVectorView_1___x_ABI_Ctest__zcomponent__CBase }

    internal func GetAtImpl(_ index: UINT32) throws -> UnsafeMutablePointer<__x_ABI_Ctest__component_CIBase>? {
        var result: UnsafeMutablePointer<__x_ABI_Ctest__component_CIBase>?
        _ = try perform(as: __x_ABI_C__FIVectorView_1___x_ABI_Ctest__zcomponent__CBase.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetAt(pThis, index, &result))
        }
        return result
    }

    internal func get_SizeImpl() throws -> UINT32 {
        var result: UINT32 = 0
        _ = try perform(as: __x_ABI_C__FIVectorView_1___x_ABI_Ctest__zcomponent__CBase.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Size(pThis, &result))
        }
        return result
    }

    internal func IndexOfImpl(_ value: UnsafeMutablePointer<__x_ABI_Ctest__component_CIBase>?, _ index: inout UINT32) throws -> boolean {
        var result: boolean = 0
        _ = try perform(as: __x_ABI_C__FIVectorView_1___x_ABI_Ctest__zcomponent__CBase.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.IndexOf(pThis, value, &index, &result))
        }
        return result
    }

}

internal class __x_ABI_C__FIVectorView_1___x_ABI_Ctest__zcomponent__CBaseImpl : IVectorView, AbiInterfaceImpl {
    typealias Element = Base?
    typealias SwiftProjection = AnyIVectorView<Base?>
    typealias CABI = __x_ABI_C__FIVectorView_1___x_ABI_Ctest__zcomponent__CBase
    typealias SwiftABI = IVectorViewBase

    private (set) public var _default: SwiftABI

    static func from(abi: UnsafeMutablePointer<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        return __x_ABI_C__FIVectorView_1___x_ABI_Ctest__zcomponent__CBaseImpl(abi)
    }

    internal init(_ fromAbi: UnsafeMutablePointer<CABI>) {
        _default = SwiftABI(fromAbi)
    }

    static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIVectorView_1___x_ABI_Ctest__zcomponent__CBaseVTable) { $0 }
        return.init(lpVtbl: vtblPtr)
    }

    // MARK: Collection
    var startIndex: Int { 0 }
    var endIndex: Int { Int(size) }
    func index(after i: Int) -> Int {
        i+1
    }

    func index(of: Element) -> Int? { 
        var index: UInt32 = 0
        let result = indexOf(of, &index)
        guard result else { return nil }
        return Int(index)
    }
    var count: Int { Int(size) }

    subscript(position: Int) -> Element {
        get {
            getAt(UInt32(position))
        }
    }
    // MARK: WinRT
    public func getAt(_ index: UInt32) -> Base? {
        let result = try! _default.GetAtImpl(index)
        return .from(abi: result)
    }

    public func indexOf(_ value: Base?, _ index: inout UInt32) -> Bool {
        let result = try! _default.IndexOfImpl(RawPointer(value), &index)
        return .init(from: result)
    }

    public var size : UInt32 {
        get {
            let result = try! _default.get_SizeImpl()
            return result
        }

    }

}

private var IID___x_ABI_C__FIVector_1_IInspectable: IID {
    IID(Data1: 0xb32bdca4, Data2: 0x5e52, Data3: 0x5b27, Data4: ( 0xbc,0x5d,0xd6,0x6a,0x1a,0x26,0x8c,0x2a ))// b32bdca4-5e52-5b27-bc5d-d66a1a268c2a
}

internal var __x_ABI_C__FIVector_1_IInspectableVTable: __x_ABI_C__FIVector_1_IInspectableVtbl = .init(
    QueryInterface: {
        guard let pUnk = $0, let riid = $1, let ppvObject = $2 else { return E_INVALIDARG }

        guard riid.pointee == IUnknown.IID ||
              riid.pointee == IInspectable.IID || 
              riid.pointee == ISwiftImplemented.IID ||
              riid.pointee == IAgileObject.IID ||
              riid.pointee == test_component.__x_ABI_C__FIVector_1_IInspectableWrapper.IID else { 
                guard let instance = WinRTWrapperBase<Ctest_component.IInspectable, AnyObject>.tryUnwrapFrom(raw: $0) as? any WinRTClass,
                      let cDefault: UnsafeMutablePointer<Ctest_component.IInspectable> = instance._getABI() else { return E_NOINTERFACE }
                return cDefault.pointee.lpVtbl.pointee.QueryInterface(cDefault, riid, ppvObject) 

        }
        _ = pUnk.pointee.lpVtbl.pointee.AddRef(pUnk)
        ppvObject.pointee = UnsafeMutableRawPointer(pUnk)
        return S_OK
    },

    AddRef: {
         guard let wrapper = __x_ABI_C__FIVector_1_IInspectableWrapper.fromRaw($0) else { return 1 }
         _ = wrapper.retain()
         return ULONG(_getRetainCount(wrapper.takeUnretainedValue()))
    },

    Release: {
        guard let wrapper = __x_ABI_C__FIVector_1_IInspectableWrapper.fromRaw($0) else { return 1 }
        return ULONG(_getRetainCount(wrapper.takeRetainedValue()))
    },

    GetIids: {
        let size = MemoryLayout<IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = test_component.__x_ABI_C__FIVector_1_IInspectableWrapper.IID
        $1!.pointee = 3
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.Collections.IVector`1<Any>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    GetAt: {
        guard let __unwrapped__instance = __x_ABI_C__FIVector_1_IInspectableWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let index: UInt32 = $1
        let result = __unwrapped__instance.getAt(index)
        let resultWrapper = __ABI_.AnyWrapper(result)
        resultWrapper?.copyTo($2)
        return S_OK
    },

    get_Size: {
        guard let __unwrapped__instance = __x_ABI_C__FIVector_1_IInspectableWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.size
        $1?.initialize(to: result)
        return S_OK
    },

    GetView: {
        guard let __unwrapped__instance = __x_ABI_C__FIVector_1_IInspectableWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.getView()
        let resultWrapper = test_component.__x_ABI_C__FIVectorView_1_IInspectableWrapper(result)
        resultWrapper?.copyTo($1)
        return S_OK
    },

    IndexOf: {
        guard let __unwrapped__instance = __x_ABI_C__FIVector_1_IInspectableWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let value: Any? = __ABI_.AnyWrapper.unwrapFrom(abi: $1)
        var index: UInt32 = 0
        let result = __unwrapped__instance.indexOf(value, &index)
        $2?.initialize(to: index)
        $3?.initialize(to: .init(from: result))
        return S_OK
    },

    SetAt: {
        guard let __unwrapped__instance = __x_ABI_C__FIVector_1_IInspectableWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let index: UInt32 = $1
        let value: Any? = __ABI_.AnyWrapper.unwrapFrom(abi: $2)
        __unwrapped__instance.setAt(index, value)
        return S_OK
    },

    InsertAt: {
        guard let __unwrapped__instance = __x_ABI_C__FIVector_1_IInspectableWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let index: UInt32 = $1
        let value: Any? = __ABI_.AnyWrapper.unwrapFrom(abi: $2)
        __unwrapped__instance.insertAt(index, value)
        return S_OK
    },

    RemoveAt: {
        guard let __unwrapped__instance = __x_ABI_C__FIVector_1_IInspectableWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let index: UInt32 = $1
        __unwrapped__instance.removeAt(index)
        return S_OK
    },

    Append: {
        guard let __unwrapped__instance = __x_ABI_C__FIVector_1_IInspectableWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let value: Any? = __ABI_.AnyWrapper.unwrapFrom(abi: $1)
        __unwrapped__instance.append(value)
        return S_OK
    },

    RemoveAtEnd: {
        guard let __unwrapped__instance = __x_ABI_C__FIVector_1_IInspectableWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        __unwrapped__instance.removeAtEnd()
        return S_OK
    },

    Clear: {
        guard let __unwrapped__instance = __x_ABI_C__FIVector_1_IInspectableWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        __unwrapped__instance.clear()
        return S_OK
    },

    GetMany: { _, _, _, _, _ in return failWith(err: E_NOTIMPL) },

    ReplaceAll: { _, _, _ in return failWith(err: E_NOTIMPL) }
)
typealias __x_ABI_C__FIVector_1_IInspectableWrapper = InterfaceWrapperBase<test_component.__x_ABI_C__FIVector_1_IInspectableImpl>
internal class IVectorAny: test_component.IInspectable {
    override public class var IID: IID { IID___x_ABI_C__FIVector_1_IInspectable }

    internal func GetAtImpl(_ index: UINT32) throws -> UnsafeMutablePointer<Ctest_component.IInspectable>? {
        var result: UnsafeMutablePointer<Ctest_component.IInspectable>?
        _ = try perform(as: __x_ABI_C__FIVector_1_IInspectable.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetAt(pThis, index, &result))
        }
        return result
    }

    internal func get_SizeImpl() throws -> UINT32 {
        var result: UINT32 = 0
        _ = try perform(as: __x_ABI_C__FIVector_1_IInspectable.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Size(pThis, &result))
        }
        return result
    }

    internal func GetViewImpl() throws -> UnsafeMutablePointer<__x_ABI_C__FIVectorView_1_IInspectable>? {
        var result: UnsafeMutablePointer<__x_ABI_C__FIVectorView_1_IInspectable>?
        _ = try perform(as: __x_ABI_C__FIVector_1_IInspectable.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetView(pThis, &result))
        }
        return result
    }

    internal func IndexOfImpl(_ value: UnsafeMutablePointer<Ctest_component.IInspectable>?, _ index: inout UINT32) throws -> boolean {
        var result: boolean = 0
        _ = try perform(as: __x_ABI_C__FIVector_1_IInspectable.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.IndexOf(pThis, value, &index, &result))
        }
        return result
    }

    internal func SetAtImpl(_ index: UINT32, _ value: UnsafeMutablePointer<Ctest_component.IInspectable>?) throws {
        _ = try perform(as: __x_ABI_C__FIVector_1_IInspectable.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.SetAt(pThis, index, value))
        }
    }

    internal func InsertAtImpl(_ index: UINT32, _ value: UnsafeMutablePointer<Ctest_component.IInspectable>?) throws {
        _ = try perform(as: __x_ABI_C__FIVector_1_IInspectable.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.InsertAt(pThis, index, value))
        }
    }

    internal func RemoveAtImpl(_ index: UINT32) throws {
        _ = try perform(as: __x_ABI_C__FIVector_1_IInspectable.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.RemoveAt(pThis, index))
        }
    }

    internal func AppendImpl(_ value: UnsafeMutablePointer<Ctest_component.IInspectable>?) throws {
        _ = try perform(as: __x_ABI_C__FIVector_1_IInspectable.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Append(pThis, value))
        }
    }

    internal func RemoveAtEndImpl() throws {
        _ = try perform(as: __x_ABI_C__FIVector_1_IInspectable.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.RemoveAtEnd(pThis))
        }
    }

    internal func ClearImpl() throws {
        _ = try perform(as: __x_ABI_C__FIVector_1_IInspectable.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Clear(pThis))
        }
    }

}

internal class __x_ABI_C__FIVector_1_IInspectableImpl : IVector, AbiInterfaceImpl {
    typealias Element = Any?
    typealias SwiftProjection = AnyIVector<Any?>
    typealias CABI = __x_ABI_C__FIVector_1_IInspectable
    typealias SwiftABI = IVectorAny

    private (set) public var _default: SwiftABI

    static func from(abi: UnsafeMutablePointer<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        return __x_ABI_C__FIVector_1_IInspectableImpl(abi)
    }

    internal init(_ fromAbi: UnsafeMutablePointer<CABI>) {
        _default = SwiftABI(fromAbi)
    }

    static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIVector_1_IInspectableVTable) { $0 }
        return.init(lpVtbl: vtblPtr)
    }

    // MARK: Collection
    var startIndex: Int { 0 }
    var endIndex: Int { Int(size) }
    func index(after i: Int) -> Int {
        i+1
    }

    func index(of: Element) -> Int? { 
        var index: UInt32 = 0
        let result = indexOf(of, &index)
        guard result else { return nil }
        return Int(index)
    }
    var count: Int { Int(size) }


    subscript(position: Int) -> Element {
        get {
            getAt(UInt32(position))
        }
        set(newValue) {
            setAt(UInt32(position), newValue)
        }
    }

    func removeLast() {
        removeAtEnd()
    }

    // MARK: WinRT
    public func getAt(_ index: UInt32) -> Any? {
        let result = try! _default.GetAtImpl(index)
        return __ABI_.AnyWrapper.unwrapFrom(abi: result)
    }

    public func getView() -> AnyIVectorView<Any?>? {
        let result = try! _default.GetViewImpl()
        return test_component.__x_ABI_C__FIVectorView_1_IInspectableWrapper.unwrapFrom(abi: result)
    }

    public func indexOf(_ value: Any?, _ index: inout UInt32) -> Bool {
        let valueWrapper = __ABI_.AnyWrapper(value)
        let _value = try! valueWrapper?.toABI { $0 }
        let result = try! _default.IndexOfImpl(_value, &index)
        return .init(from: result)
    }

    public func setAt(_ index: UInt32, _ value: Any?) {
        let valueWrapper = __ABI_.AnyWrapper(value)
        let _value = try! valueWrapper?.toABI { $0 }
        try! _default.SetAtImpl(index, _value)
    }

    public func insertAt(_ index: UInt32, _ value: Any?) {
        let valueWrapper = __ABI_.AnyWrapper(value)
        let _value = try! valueWrapper?.toABI { $0 }
        try! _default.InsertAtImpl(index, _value)
    }

    public func removeAt(_ index: UInt32) {
        try! _default.RemoveAtImpl(index)
    }

    public func append(_ value: Any?) {
        let valueWrapper = __ABI_.AnyWrapper(value)
        let _value = try! valueWrapper?.toABI { $0 }
        try! _default.AppendImpl(_value)
    }

    public func removeAtEnd() {
        try! _default.RemoveAtEndImpl()
    }

    public func clear() {
        try! _default.ClearImpl()
    }

    public var size : UInt32 {
        get {
            let result = try! _default.get_SizeImpl()
            return result
        }

    }

}

private var IID___x_ABI_C__FIVector_1_HSTRING: IID {
    IID(Data1: 0x98b9acc1, Data2: 0x4b56, Data3: 0x532e, Data4: ( 0xac,0x73,0x03,0xd5,0x29,0x1c,0xca,0x90 ))// 98b9acc1-4b56-532e-ac73-03d5291cca90
}

internal var __x_ABI_C__FIVector_1_HSTRINGVTable: __x_ABI_C__FIVector_1_HSTRINGVtbl = .init(
    QueryInterface: {
        guard let pUnk = $0, let riid = $1, let ppvObject = $2 else { return E_INVALIDARG }

        guard riid.pointee == IUnknown.IID ||
              riid.pointee == IInspectable.IID || 
              riid.pointee == ISwiftImplemented.IID ||
              riid.pointee == IAgileObject.IID ||
              riid.pointee == test_component.__x_ABI_C__FIVector_1_HSTRINGWrapper.IID else { 
                guard let instance = WinRTWrapperBase<Ctest_component.IInspectable, AnyObject>.tryUnwrapFrom(raw: $0) as? any WinRTClass,
                      let cDefault: UnsafeMutablePointer<Ctest_component.IInspectable> = instance._getABI() else { return E_NOINTERFACE }
                return cDefault.pointee.lpVtbl.pointee.QueryInterface(cDefault, riid, ppvObject) 

        }
        _ = pUnk.pointee.lpVtbl.pointee.AddRef(pUnk)
        ppvObject.pointee = UnsafeMutableRawPointer(pUnk)
        return S_OK
    },

    AddRef: {
         guard let wrapper = __x_ABI_C__FIVector_1_HSTRINGWrapper.fromRaw($0) else { return 1 }
         _ = wrapper.retain()
         return ULONG(_getRetainCount(wrapper.takeUnretainedValue()))
    },

    Release: {
        guard let wrapper = __x_ABI_C__FIVector_1_HSTRINGWrapper.fromRaw($0) else { return 1 }
        return ULONG(_getRetainCount(wrapper.takeRetainedValue()))
    },

    GetIids: {
        let size = MemoryLayout<IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = test_component.__x_ABI_C__FIVector_1_HSTRINGWrapper.IID
        $1!.pointee = 3
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.Collections.IVector`1<String>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    GetAt: {
        guard let __unwrapped__instance = __x_ABI_C__FIVector_1_HSTRINGWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let index: UInt32 = $1
        let result = __unwrapped__instance.getAt(index)
        $2?.initialize(to: try! HString(result).detach())
        return S_OK
    },

    get_Size: {
        guard let __unwrapped__instance = __x_ABI_C__FIVector_1_HSTRINGWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.size
        $1?.initialize(to: result)
        return S_OK
    },

    GetView: {
        guard let __unwrapped__instance = __x_ABI_C__FIVector_1_HSTRINGWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.getView()
        let resultWrapper = test_component.__x_ABI_C__FIVectorView_1_HSTRINGWrapper(result)
        resultWrapper?.copyTo($1)
        return S_OK
    },

    IndexOf: {
        guard let __unwrapped__instance = __x_ABI_C__FIVector_1_HSTRINGWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let value: String = .init(from: $1)
        var index: UInt32 = 0
        let result = __unwrapped__instance.indexOf(value, &index)
        $2?.initialize(to: index)
        $3?.initialize(to: .init(from: result))
        return S_OK
    },

    SetAt: {
        guard let __unwrapped__instance = __x_ABI_C__FIVector_1_HSTRINGWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let index: UInt32 = $1
        let value: String = .init(from: $2)
        __unwrapped__instance.setAt(index, value)
        return S_OK
    },

    InsertAt: {
        guard let __unwrapped__instance = __x_ABI_C__FIVector_1_HSTRINGWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let index: UInt32 = $1
        let value: String = .init(from: $2)
        __unwrapped__instance.insertAt(index, value)
        return S_OK
    },

    RemoveAt: {
        guard let __unwrapped__instance = __x_ABI_C__FIVector_1_HSTRINGWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let index: UInt32 = $1
        __unwrapped__instance.removeAt(index)
        return S_OK
    },

    Append: {
        guard let __unwrapped__instance = __x_ABI_C__FIVector_1_HSTRINGWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let value: String = .init(from: $1)
        __unwrapped__instance.append(value)
        return S_OK
    },

    RemoveAtEnd: {
        guard let __unwrapped__instance = __x_ABI_C__FIVector_1_HSTRINGWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        __unwrapped__instance.removeAtEnd()
        return S_OK
    },

    Clear: {
        guard let __unwrapped__instance = __x_ABI_C__FIVector_1_HSTRINGWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        __unwrapped__instance.clear()
        return S_OK
    },

    GetMany: { _, _, _, _, _ in return failWith(err: E_NOTIMPL) },

    ReplaceAll: { _, _, _ in return failWith(err: E_NOTIMPL) }
)
typealias __x_ABI_C__FIVector_1_HSTRINGWrapper = InterfaceWrapperBase<test_component.__x_ABI_C__FIVector_1_HSTRINGImpl>
internal class IVectorString: test_component.IInspectable {
    override public class var IID: IID { IID___x_ABI_C__FIVector_1_HSTRING }

    internal func GetAtImpl(_ index: UINT32) throws -> HSTRING? {
        var result: HSTRING?
        _ = try perform(as: __x_ABI_C__FIVector_1_HSTRING.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetAt(pThis, index, &result))
        }
        return result
    }

    internal func get_SizeImpl() throws -> UINT32 {
        var result: UINT32 = 0
        _ = try perform(as: __x_ABI_C__FIVector_1_HSTRING.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Size(pThis, &result))
        }
        return result
    }

    internal func GetViewImpl() throws -> UnsafeMutablePointer<__x_ABI_C__FIVectorView_1_HSTRING>? {
        var result: UnsafeMutablePointer<__x_ABI_C__FIVectorView_1_HSTRING>?
        _ = try perform(as: __x_ABI_C__FIVector_1_HSTRING.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetView(pThis, &result))
        }
        return result
    }

    internal func IndexOfImpl(_ value: HSTRING?, _ index: inout UINT32) throws -> boolean {
        var result: boolean = 0
        _ = try perform(as: __x_ABI_C__FIVector_1_HSTRING.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.IndexOf(pThis, value, &index, &result))
        }
        return result
    }

    internal func SetAtImpl(_ index: UINT32, _ value: HSTRING?) throws {
        _ = try perform(as: __x_ABI_C__FIVector_1_HSTRING.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.SetAt(pThis, index, value))
        }
    }

    internal func InsertAtImpl(_ index: UINT32, _ value: HSTRING?) throws {
        _ = try perform(as: __x_ABI_C__FIVector_1_HSTRING.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.InsertAt(pThis, index, value))
        }
    }

    internal func RemoveAtImpl(_ index: UINT32) throws {
        _ = try perform(as: __x_ABI_C__FIVector_1_HSTRING.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.RemoveAt(pThis, index))
        }
    }

    internal func AppendImpl(_ value: HSTRING?) throws {
        _ = try perform(as: __x_ABI_C__FIVector_1_HSTRING.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Append(pThis, value))
        }
    }

    internal func RemoveAtEndImpl() throws {
        _ = try perform(as: __x_ABI_C__FIVector_1_HSTRING.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.RemoveAtEnd(pThis))
        }
    }

    internal func ClearImpl() throws {
        _ = try perform(as: __x_ABI_C__FIVector_1_HSTRING.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Clear(pThis))
        }
    }

}

internal class __x_ABI_C__FIVector_1_HSTRINGImpl : IVector, AbiInterfaceImpl {
    typealias Element = String
    typealias SwiftProjection = AnyIVector<String>
    typealias CABI = __x_ABI_C__FIVector_1_HSTRING
    typealias SwiftABI = IVectorString

    private (set) public var _default: SwiftABI

    static func from(abi: UnsafeMutablePointer<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        return __x_ABI_C__FIVector_1_HSTRINGImpl(abi)
    }

    internal init(_ fromAbi: UnsafeMutablePointer<CABI>) {
        _default = SwiftABI(fromAbi)
    }

    static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIVector_1_HSTRINGVTable) { $0 }
        return.init(lpVtbl: vtblPtr)
    }

    // MARK: Collection
    var startIndex: Int { 0 }
    var endIndex: Int { Int(size) }
    func index(after i: Int) -> Int {
        i+1
    }

    func index(of: Element) -> Int? { 
        var index: UInt32 = 0
        let result = indexOf(of, &index)
        guard result else { return nil }
        return Int(index)
    }
    var count: Int { Int(size) }


    subscript(position: Int) -> Element {
        get {
            getAt(UInt32(position))
        }
        set(newValue) {
            setAt(UInt32(position), newValue)
        }
    }

    func removeLast() {
        removeAtEnd()
    }

    // MARK: WinRT
    public func getAt(_ index: UInt32) -> String {
        let result = try! _default.GetAtImpl(index)
        return .init(from: result)
    }

    public func getView() -> AnyIVectorView<String>? {
        let result = try! _default.GetViewImpl()
        return test_component.__x_ABI_C__FIVectorView_1_HSTRINGWrapper.unwrapFrom(abi: result)
    }

    public func indexOf(_ value: String, _ index: inout UInt32) -> Bool {
        let _value = try! HString(value)
        let result = try! _default.IndexOfImpl(_value.get(), &index)
        return .init(from: result)
    }

    public func setAt(_ index: UInt32, _ value: String) {
        let _value = try! HString(value)
        try! _default.SetAtImpl(index, _value.get())
    }

    public func insertAt(_ index: UInt32, _ value: String) {
        let _value = try! HString(value)
        try! _default.InsertAtImpl(index, _value.get())
    }

    public func removeAt(_ index: UInt32) {
        try! _default.RemoveAtImpl(index)
    }

    public func append(_ value: String) {
        let _value = try! HString(value)
        try! _default.AppendImpl(_value.get())
    }

    public func removeAtEnd() {
        try! _default.RemoveAtEndImpl()
    }

    public func clear() {
        try! _default.ClearImpl()
    }

    public var size : UInt32 {
        get {
            let result = try! _default.get_SizeImpl()
            return result
        }

    }

}

private var IID___x_ABI_C__FIVector_1___x_ABI_Ctest__zcomponent__CBase: IID {
    IID(Data1: 0xcb559561, Data2: 0x6732, Data3: 0x54ba, Data4: ( 0xa0,0x75,0xb5,0x03,0x46,0x27,0x5b,0x9e ))// cb559561-6732-54ba-a075-b50346275b9e
}

internal var __x_ABI_C__FIVector_1___x_ABI_Ctest__zcomponent__CBaseVTable: __x_ABI_C__FIVector_1___x_ABI_Ctest__zcomponent__CBaseVtbl = .init(
    QueryInterface: {
        guard let pUnk = $0, let riid = $1, let ppvObject = $2 else { return E_INVALIDARG }

        guard riid.pointee == IUnknown.IID ||
              riid.pointee == IInspectable.IID || 
              riid.pointee == ISwiftImplemented.IID ||
              riid.pointee == IAgileObject.IID ||
              riid.pointee == test_component.__x_ABI_C__FIVector_1___x_ABI_Ctest__zcomponent__CBaseWrapper.IID else { 
                guard let instance = WinRTWrapperBase<Ctest_component.IInspectable, AnyObject>.tryUnwrapFrom(raw: $0) as? any WinRTClass,
                      let cDefault: UnsafeMutablePointer<Ctest_component.IInspectable> = instance._getABI() else { return E_NOINTERFACE }
                return cDefault.pointee.lpVtbl.pointee.QueryInterface(cDefault, riid, ppvObject) 

        }
        _ = pUnk.pointee.lpVtbl.pointee.AddRef(pUnk)
        ppvObject.pointee = UnsafeMutableRawPointer(pUnk)
        return S_OK
    },

    AddRef: {
         guard let wrapper = __x_ABI_C__FIVector_1___x_ABI_Ctest__zcomponent__CBaseWrapper.fromRaw($0) else { return 1 }
         _ = wrapper.retain()
         return ULONG(_getRetainCount(wrapper.takeUnretainedValue()))
    },

    Release: {
        guard let wrapper = __x_ABI_C__FIVector_1___x_ABI_Ctest__zcomponent__CBaseWrapper.fromRaw($0) else { return 1 }
        return ULONG(_getRetainCount(wrapper.takeRetainedValue()))
    },

    GetIids: {
        let size = MemoryLayout<IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = test_component.__x_ABI_C__FIVector_1___x_ABI_Ctest__zcomponent__CBaseWrapper.IID
        $1!.pointee = 3
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.Collections.IVector`1<test_component.Base>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    GetAt: {
        guard let __unwrapped__instance = __x_ABI_C__FIVector_1___x_ABI_Ctest__zcomponent__CBaseWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let index: UInt32 = $1
        let result = __unwrapped__instance.getAt(index)
        result?.copyTo($2)
        return S_OK
    },

    get_Size: {
        guard let __unwrapped__instance = __x_ABI_C__FIVector_1___x_ABI_Ctest__zcomponent__CBaseWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.size
        $1?.initialize(to: result)
        return S_OK
    },

    GetView: {
        guard let __unwrapped__instance = __x_ABI_C__FIVector_1___x_ABI_Ctest__zcomponent__CBaseWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.getView()
        let resultWrapper = test_component.__x_ABI_C__FIVectorView_1___x_ABI_Ctest__zcomponent__CBaseWrapper(result)
        resultWrapper?.copyTo($1)
        return S_OK
    },

    IndexOf: {
        guard let __unwrapped__instance = __x_ABI_C__FIVector_1___x_ABI_Ctest__zcomponent__CBaseWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let value: test_component.Base? = .from(abi: $1)
        var index: UInt32 = 0
        let result = __unwrapped__instance.indexOf(value, &index)
        $2?.initialize(to: index)
        $3?.initialize(to: .init(from: result))
        return S_OK
    },

    SetAt: {
        guard let __unwrapped__instance = __x_ABI_C__FIVector_1___x_ABI_Ctest__zcomponent__CBaseWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let index: UInt32 = $1
        let value: test_component.Base? = .from(abi: $2)
        __unwrapped__instance.setAt(index, value)
        return S_OK
    },

    InsertAt: {
        guard let __unwrapped__instance = __x_ABI_C__FIVector_1___x_ABI_Ctest__zcomponent__CBaseWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let index: UInt32 = $1
        let value: test_component.Base? = .from(abi: $2)
        __unwrapped__instance.insertAt(index, value)
        return S_OK
    },

    RemoveAt: {
        guard let __unwrapped__instance = __x_ABI_C__FIVector_1___x_ABI_Ctest__zcomponent__CBaseWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let index: UInt32 = $1
        __unwrapped__instance.removeAt(index)
        return S_OK
    },

    Append: {
        guard let __unwrapped__instance = __x_ABI_C__FIVector_1___x_ABI_Ctest__zcomponent__CBaseWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let value: test_component.Base? = .from(abi: $1)
        __unwrapped__instance.append(value)
        return S_OK
    },

    RemoveAtEnd: {
        guard let __unwrapped__instance = __x_ABI_C__FIVector_1___x_ABI_Ctest__zcomponent__CBaseWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        __unwrapped__instance.removeAtEnd()
        return S_OK
    },

    Clear: {
        guard let __unwrapped__instance = __x_ABI_C__FIVector_1___x_ABI_Ctest__zcomponent__CBaseWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        __unwrapped__instance.clear()
        return S_OK
    },

    GetMany: { _, _, _, _, _ in return failWith(err: E_NOTIMPL) },

    ReplaceAll: { _, _, _ in return failWith(err: E_NOTIMPL) }
)
typealias __x_ABI_C__FIVector_1___x_ABI_Ctest__zcomponent__CBaseWrapper = InterfaceWrapperBase<test_component.__x_ABI_C__FIVector_1___x_ABI_Ctest__zcomponent__CBaseImpl>
internal class IVectorBase: test_component.IInspectable {
    override public class var IID: IID { IID___x_ABI_C__FIVector_1___x_ABI_Ctest__zcomponent__CBase }

    internal func GetAtImpl(_ index: UINT32) throws -> UnsafeMutablePointer<__x_ABI_Ctest__component_CIBase>? {
        var result: UnsafeMutablePointer<__x_ABI_Ctest__component_CIBase>?
        _ = try perform(as: __x_ABI_C__FIVector_1___x_ABI_Ctest__zcomponent__CBase.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetAt(pThis, index, &result))
        }
        return result
    }

    internal func get_SizeImpl() throws -> UINT32 {
        var result: UINT32 = 0
        _ = try perform(as: __x_ABI_C__FIVector_1___x_ABI_Ctest__zcomponent__CBase.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Size(pThis, &result))
        }
        return result
    }

    internal func GetViewImpl() throws -> UnsafeMutablePointer<__x_ABI_C__FIVectorView_1___x_ABI_Ctest__zcomponent__CBase>? {
        var result: UnsafeMutablePointer<__x_ABI_C__FIVectorView_1___x_ABI_Ctest__zcomponent__CBase>?
        _ = try perform(as: __x_ABI_C__FIVector_1___x_ABI_Ctest__zcomponent__CBase.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetView(pThis, &result))
        }
        return result
    }

    internal func IndexOfImpl(_ value: UnsafeMutablePointer<__x_ABI_Ctest__component_CIBase>?, _ index: inout UINT32) throws -> boolean {
        var result: boolean = 0
        _ = try perform(as: __x_ABI_C__FIVector_1___x_ABI_Ctest__zcomponent__CBase.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.IndexOf(pThis, value, &index, &result))
        }
        return result
    }

    internal func SetAtImpl(_ index: UINT32, _ value: UnsafeMutablePointer<__x_ABI_Ctest__component_CIBase>?) throws {
        _ = try perform(as: __x_ABI_C__FIVector_1___x_ABI_Ctest__zcomponent__CBase.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.SetAt(pThis, index, value))
        }
    }

    internal func InsertAtImpl(_ index: UINT32, _ value: UnsafeMutablePointer<__x_ABI_Ctest__component_CIBase>?) throws {
        _ = try perform(as: __x_ABI_C__FIVector_1___x_ABI_Ctest__zcomponent__CBase.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.InsertAt(pThis, index, value))
        }
    }

    internal func RemoveAtImpl(_ index: UINT32) throws {
        _ = try perform(as: __x_ABI_C__FIVector_1___x_ABI_Ctest__zcomponent__CBase.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.RemoveAt(pThis, index))
        }
    }

    internal func AppendImpl(_ value: UnsafeMutablePointer<__x_ABI_Ctest__component_CIBase>?) throws {
        _ = try perform(as: __x_ABI_C__FIVector_1___x_ABI_Ctest__zcomponent__CBase.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Append(pThis, value))
        }
    }

    internal func RemoveAtEndImpl() throws {
        _ = try perform(as: __x_ABI_C__FIVector_1___x_ABI_Ctest__zcomponent__CBase.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.RemoveAtEnd(pThis))
        }
    }

    internal func ClearImpl() throws {
        _ = try perform(as: __x_ABI_C__FIVector_1___x_ABI_Ctest__zcomponent__CBase.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Clear(pThis))
        }
    }

}

internal class __x_ABI_C__FIVector_1___x_ABI_Ctest__zcomponent__CBaseImpl : IVector, AbiInterfaceImpl {
    typealias Element = Base?
    typealias SwiftProjection = AnyIVector<Base?>
    typealias CABI = __x_ABI_C__FIVector_1___x_ABI_Ctest__zcomponent__CBase
    typealias SwiftABI = IVectorBase

    private (set) public var _default: SwiftABI

    static func from(abi: UnsafeMutablePointer<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        return __x_ABI_C__FIVector_1___x_ABI_Ctest__zcomponent__CBaseImpl(abi)
    }

    internal init(_ fromAbi: UnsafeMutablePointer<CABI>) {
        _default = SwiftABI(fromAbi)
    }

    static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIVector_1___x_ABI_Ctest__zcomponent__CBaseVTable) { $0 }
        return.init(lpVtbl: vtblPtr)
    }

    // MARK: Collection
    var startIndex: Int { 0 }
    var endIndex: Int { Int(size) }
    func index(after i: Int) -> Int {
        i+1
    }

    func index(of: Element) -> Int? { 
        var index: UInt32 = 0
        let result = indexOf(of, &index)
        guard result else { return nil }
        return Int(index)
    }
    var count: Int { Int(size) }


    subscript(position: Int) -> Element {
        get {
            getAt(UInt32(position))
        }
        set(newValue) {
            setAt(UInt32(position), newValue)
        }
    }

    func removeLast() {
        removeAtEnd()
    }

    // MARK: WinRT
    public func getAt(_ index: UInt32) -> Base? {
        let result = try! _default.GetAtImpl(index)
        return .from(abi: result)
    }

    public func getView() -> AnyIVectorView<Base?>? {
        let result = try! _default.GetViewImpl()
        return test_component.__x_ABI_C__FIVectorView_1___x_ABI_Ctest__zcomponent__CBaseWrapper.unwrapFrom(abi: result)
    }

    public func indexOf(_ value: Base?, _ index: inout UInt32) -> Bool {
        let result = try! _default.IndexOfImpl(RawPointer(value), &index)
        return .init(from: result)
    }

    public func setAt(_ index: UInt32, _ value: Base?) {
        try! _default.SetAtImpl(index, RawPointer(value))
    }

    public func insertAt(_ index: UInt32, _ value: Base?) {
        try! _default.InsertAtImpl(index, RawPointer(value))
    }

    public func removeAt(_ index: UInt32) {
        try! _default.RemoveAtImpl(index)
    }

    public func append(_ value: Base?) {
        try! _default.AppendImpl(RawPointer(value))
    }

    public func removeAtEnd() {
        try! _default.RemoveAtEndImpl()
    }

    public func clear() {
        try! _default.ClearImpl()
    }

    public var size : UInt32 {
        get {
            let result = try! _default.get_SizeImpl()
            return result
        }

    }

}

private var IID___x_ABI_C__FIEventHandler_1_IInspectable: IID {
    IID(Data1: 0xc50898f6, Data2: 0xc536, Data3: 0x5f47, Data4: ( 0x85,0x83,0x8b,0x2c,0x24,0x38,0xa1,0x3b ))// c50898f6-c536-5f47-8583-8b2c2438a13b
}

internal extension WinRTDelegateBridge where CABI == __x_ABI_C__FIEventHandler_1_IInspectable {
    static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &test_component.__x_ABI_C__FIEventHandler_1_IInspectableVTable) { $0 }
        return .init(lpVtbl:vtblPtr)
    }
}

internal var __x_ABI_C__FIEventHandler_1_IInspectableVTable: __x_ABI_C__FIEventHandler_1_IInspectableVtbl = .init(
    QueryInterface: {
        guard let pUnk = $0, let riid = $1, let ppvObject = $2 else { return E_INVALIDARG }

        guard riid.pointee == IUnknown.IID ||
              riid.pointee == IInspectable.IID || 
              riid.pointee == ISwiftImplemented.IID ||
              riid.pointee == IAgileObject.IID ||
              riid.pointee == test_component.__x_ABI_C__FIEventHandler_1_IInspectableWrapper.IID else { 
                return E_NOINTERFACE

        }
        _ = pUnk.pointee.lpVtbl.pointee.AddRef(pUnk)
        ppvObject.pointee = UnsafeMutableRawPointer(pUnk)
        return S_OK
    },

    AddRef: {
         guard let wrapper = __x_ABI_C__FIEventHandler_1_IInspectableWrapper.fromRaw($0) else { return 1 }
         _ = wrapper.retain()
         return ULONG(_getRetainCount(wrapper.takeUnretainedValue()))
    },

    Release: {
        guard let wrapper = __x_ABI_C__FIEventHandler_1_IInspectableWrapper.fromRaw($0) else { return 1 }
        return ULONG(_getRetainCount(wrapper.takeRetainedValue()))
    },

    Invoke: {
        guard let __unwrapped__instance = __x_ABI_C__FIEventHandler_1_IInspectableWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let sender: Any? = __ABI_.AnyWrapper.unwrapFrom(abi: $1)
        let args: Any? = __ABI_.AnyWrapper.unwrapFrom(abi: $2)
        __unwrapped__instance(sender, args)
        return S_OK
    }
)

typealias __x_ABI_C__FIEventHandler_1_IInspectableWrapper = InterfaceWrapperBase<test_component.__x_ABI_C__FIEventHandler_1_IInspectableImpl>
internal class EventHandlerAny: test_component.IUnknown {
    override public class var IID: IID { IID___x_ABI_C__FIEventHandler_1_IInspectable }

    internal func InvokeImpl(_ sender: UnsafeMutablePointer<Ctest_component.IInspectable>?, _ args: UnsafeMutablePointer<Ctest_component.IInspectable>?) throws {
        _ = try perform(as: __x_ABI_C__FIEventHandler_1_IInspectable.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Invoke(pThis, sender, args))
        }
    }

}

internal class __x_ABI_C__FIEventHandler_1_IInspectableImpl : WinRTDelegateBridge {
    internal typealias Handler = EventHandler<Any?>
    internal typealias CABI = __x_ABI_C__FIEventHandler_1_IInspectable
    internal typealias SwiftABI = test_component.EventHandlerAny

    internal static func from(abi: UnsafeMutablePointer<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        let _default = SwiftABI(abi)
        let handler: Handler = { (sender, args) in
            let senderWrapper = __ABI_.AnyWrapper(sender)
            let _sender = try! senderWrapper?.toABI { $0 }
            let argsWrapper = __ABI_.AnyWrapper(args)
            let _args = try! argsWrapper?.toABI { $0 }
            try! _default.InvokeImpl(_sender, _args)
        }
        return handler
    }
}
private var IID___x_ABI_C__FIReference_1_int: IID {
    IID(Data1: 0x548cefbd, Data2: 0xbc8a, Data3: 0x5fa0, Data4: ( 0x8d,0xf2,0x95,0x74,0x40,0xfc,0x8b,0xf4 ))// 548cefbd-bc8a-5fa0-8df2-957440fc8bf4
}

internal extension Int32 {
    init?(ref: UnsafeMutablePointer<__x_ABI_C__FIReference_1_int>?) {
        guard let val = ref else { return nil }
        var result: INT32 = 0
        try! CHECKED(val.pointee.lpVtbl.pointee.get_Value(val, &result))
        self = result
    }
} 
internal var __x_ABI_C__FIReference_1_intVTable: __x_ABI_C__FIReference_1_intVtbl = .init(
    QueryInterface: {
        guard let pUnk = $0, let riid = $1, let ppvObject = $2 else { return E_INVALIDARG }
        if riid.pointee == __ABI_Windows_Foundation.IPropertyValueWrapper.IID {
            guard let instance = __x_ABI_C__FIReference_1_intWrapper.tryUnwrapFrom(raw: pUnk) else { return E_NOINTERFACE }
            guard let inner = __ABI_Windows_Foundation.IPropertyValueWrapper(instance) else { return E_INVALIDARG }
            let pThis = try! inner.toABI { $0 }
            return pThis.pointee.lpVtbl.pointee.QueryInterface(pThis, riid, ppvObject)
        }

        guard riid.pointee == IUnknown.IID ||
              riid.pointee == IInspectable.IID || 
              riid.pointee == ISwiftImplemented.IID ||
              riid.pointee == IAgileObject.IID ||
              riid.pointee == test_component.__x_ABI_C__FIReference_1_intWrapper.IID else { 
                guard let instance = WinRTWrapperBase<Ctest_component.IInspectable, AnyObject>.tryUnwrapFrom(raw: $0) as? any WinRTClass,
                      let cDefault: UnsafeMutablePointer<Ctest_component.IInspectable> = instance._getABI() else { return E_NOINTERFACE }
                return cDefault.pointee.lpVtbl.pointee.QueryInterface(cDefault, riid, ppvObject) 

        }
        _ = pUnk.pointee.lpVtbl.pointee.AddRef(pUnk)
        ppvObject.pointee = UnsafeMutableRawPointer(pUnk)
        return S_OK
    },

    AddRef: {
         guard let wrapper = __x_ABI_C__FIReference_1_intWrapper.fromRaw($0) else { return 1 }
         _ = wrapper.retain()
         return ULONG(_getRetainCount(wrapper.takeUnretainedValue()))
    },

    Release: {
        guard let wrapper = __x_ABI_C__FIReference_1_intWrapper.fromRaw($0) else { return 1 }
        return ULONG(_getRetainCount(wrapper.takeRetainedValue()))
    },

    GetIids: {
        let size = MemoryLayout<IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 4).assumingMemoryBound(to: IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = test_component.__x_ABI_C__FIReference_1_intWrapper.IID
        iids[3] = __ABI_Windows_Foundation.IPropertyValueWrapper.IID
        $1!.pointee = 4
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.IReference`1<Int32>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    get_Value: {
        guard let __unwrapped__instance = __x_ABI_C__FIReference_1_intWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.value as! Int32
        $1?.initialize(to: result)
        return S_OK
    }
)
internal class __x_ABI_C__FIReference_1_intWrapper: WinRTWrapperBase<__x_ABI_C__FIReference_1_int, IReference> {
    override class var IID: IID { IID___x_ABI_C__FIReference_1_int }
    init?(_ value: Int32?) {
        guard let value = value else { return nil }
        let abi = withUnsafeMutablePointer(to: &__x_ABI_C__FIReference_1_intVTable) {
            __x_ABI_C__FIReference_1_int(lpVtbl:$0)
        }
        super.init(abi, __IMPL_Windows_Foundation.IPropertyValueImpl(value: value))
    }
}
private var IID___x_ABI_C__FIReference_1_GUID: IID {
    IID(Data1: 0x7d50f649, Data2: 0x632c, Data3: 0x51f9, Data4: ( 0x84,0x9a,0xee,0x49,0x42,0x89,0x33,0xea ))// 7d50f649-632c-51f9-849a-ee49428933ea
}

internal extension UUID {
    init?(ref: UnsafeMutablePointer<__x_ABI_C__FIReference_1_GUID>?) {
        guard let val = ref else { return nil }
        var result: GUID = .init()
        try! CHECKED(val.pointee.lpVtbl.pointee.get_Value(val, &result))
        self = result
    }
} 
internal var __x_ABI_C__FIReference_1_GUIDVTable: __x_ABI_C__FIReference_1_GUIDVtbl = .init(
    QueryInterface: {
        guard let pUnk = $0, let riid = $1, let ppvObject = $2 else { return E_INVALIDARG }
        if riid.pointee == __ABI_Windows_Foundation.IPropertyValueWrapper.IID {
            guard let instance = __x_ABI_C__FIReference_1_GUIDWrapper.tryUnwrapFrom(raw: pUnk) else { return E_NOINTERFACE }
            guard let inner = __ABI_Windows_Foundation.IPropertyValueWrapper(instance) else { return E_INVALIDARG }
            let pThis = try! inner.toABI { $0 }
            return pThis.pointee.lpVtbl.pointee.QueryInterface(pThis, riid, ppvObject)
        }

        guard riid.pointee == IUnknown.IID ||
              riid.pointee == IInspectable.IID || 
              riid.pointee == ISwiftImplemented.IID ||
              riid.pointee == IAgileObject.IID ||
              riid.pointee == test_component.__x_ABI_C__FIReference_1_GUIDWrapper.IID else { 
                guard let instance = WinRTWrapperBase<Ctest_component.IInspectable, AnyObject>.tryUnwrapFrom(raw: $0) as? any WinRTClass,
                      let cDefault: UnsafeMutablePointer<Ctest_component.IInspectable> = instance._getABI() else { return E_NOINTERFACE }
                return cDefault.pointee.lpVtbl.pointee.QueryInterface(cDefault, riid, ppvObject) 

        }
        _ = pUnk.pointee.lpVtbl.pointee.AddRef(pUnk)
        ppvObject.pointee = UnsafeMutableRawPointer(pUnk)
        return S_OK
    },

    AddRef: {
         guard let wrapper = __x_ABI_C__FIReference_1_GUIDWrapper.fromRaw($0) else { return 1 }
         _ = wrapper.retain()
         return ULONG(_getRetainCount(wrapper.takeUnretainedValue()))
    },

    Release: {
        guard let wrapper = __x_ABI_C__FIReference_1_GUIDWrapper.fromRaw($0) else { return 1 }
        return ULONG(_getRetainCount(wrapper.takeRetainedValue()))
    },

    GetIids: {
        let size = MemoryLayout<IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 4).assumingMemoryBound(to: IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = test_component.__x_ABI_C__FIReference_1_GUIDWrapper.IID
        iids[3] = __ABI_Windows_Foundation.IPropertyValueWrapper.IID
        $1!.pointee = 4
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.IReference`1<UUID>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    get_Value: {
        guard let __unwrapped__instance = __x_ABI_C__FIReference_1_GUIDWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.value as! UUID
        $1?.initialize(to: result)
        return S_OK
    }
)
internal class __x_ABI_C__FIReference_1_GUIDWrapper: WinRTWrapperBase<__x_ABI_C__FIReference_1_GUID, IReference> {
    override class var IID: IID { IID___x_ABI_C__FIReference_1_GUID }
    init?(_ value: UUID?) {
        guard let value = value else { return nil }
        let abi = withUnsafeMutablePointer(to: &__x_ABI_C__FIReference_1_GUIDVTable) {
            __x_ABI_C__FIReference_1_GUID(lpVtbl:$0)
        }
        super.init(abi, __IMPL_Windows_Foundation.IPropertyValueImpl(value: value))
    }
}
private var IID___x_ABI_C__FIReference_1___x_ABI_Ctest__zcomponent__CSigned: IID {
    IID(Data1: 0x5888a1ed, Data2: 0xabae, Data3: 0x584f, Data4: ( 0xbf,0x08,0x13,0x1b,0x25,0x42,0x80,0x6b ))// 5888a1ed-abae-584f-bf08-131b2542806b
}

internal extension test_component.Signed {
    init?(ref: UnsafeMutablePointer<__x_ABI_C__FIReference_1___x_ABI_Ctest__zcomponent__CSigned>?) {
        guard let val = ref else { return nil }
        var result: Signed = .init(0)
        try! CHECKED(val.pointee.lpVtbl.pointee.get_Value(val, &result))
        self = result
    }
} 
internal var __x_ABI_C__FIReference_1___x_ABI_Ctest__zcomponent__CSignedVTable: __x_ABI_C__FIReference_1___x_ABI_Ctest__zcomponent__CSignedVtbl = .init(
    QueryInterface: {
        guard let pUnk = $0, let riid = $1, let ppvObject = $2 else { return E_INVALIDARG }
        if riid.pointee == __ABI_Windows_Foundation.IPropertyValueWrapper.IID {
            guard let instance = __x_ABI_C__FIReference_1___x_ABI_Ctest__zcomponent__CSignedWrapper.tryUnwrapFrom(raw: pUnk) else { return E_NOINTERFACE }
            guard let inner = __ABI_Windows_Foundation.IPropertyValueWrapper(instance) else { return E_INVALIDARG }
            let pThis = try! inner.toABI { $0 }
            return pThis.pointee.lpVtbl.pointee.QueryInterface(pThis, riid, ppvObject)
        }

        guard riid.pointee == IUnknown.IID ||
              riid.pointee == IInspectable.IID || 
              riid.pointee == ISwiftImplemented.IID ||
              riid.pointee == IAgileObject.IID ||
              riid.pointee == test_component.__x_ABI_C__FIReference_1___x_ABI_Ctest__zcomponent__CSignedWrapper.IID else { 
                guard let instance = WinRTWrapperBase<Ctest_component.IInspectable, AnyObject>.tryUnwrapFrom(raw: $0) as? any WinRTClass,
                      let cDefault: UnsafeMutablePointer<Ctest_component.IInspectable> = instance._getABI() else { return E_NOINTERFACE }
                return cDefault.pointee.lpVtbl.pointee.QueryInterface(cDefault, riid, ppvObject) 

        }
        _ = pUnk.pointee.lpVtbl.pointee.AddRef(pUnk)
        ppvObject.pointee = UnsafeMutableRawPointer(pUnk)
        return S_OK
    },

    AddRef: {
         guard let wrapper = __x_ABI_C__FIReference_1___x_ABI_Ctest__zcomponent__CSignedWrapper.fromRaw($0) else { return 1 }
         _ = wrapper.retain()
         return ULONG(_getRetainCount(wrapper.takeUnretainedValue()))
    },

    Release: {
        guard let wrapper = __x_ABI_C__FIReference_1___x_ABI_Ctest__zcomponent__CSignedWrapper.fromRaw($0) else { return 1 }
        return ULONG(_getRetainCount(wrapper.takeRetainedValue()))
    },

    GetIids: {
        let size = MemoryLayout<IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 4).assumingMemoryBound(to: IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = test_component.__x_ABI_C__FIReference_1___x_ABI_Ctest__zcomponent__CSignedWrapper.IID
        iids[3] = __ABI_Windows_Foundation.IPropertyValueWrapper.IID
        $1!.pointee = 4
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.IReference`1<test_component.Signed>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    get_Value: {
        guard let __unwrapped__instance = __x_ABI_C__FIReference_1___x_ABI_Ctest__zcomponent__CSignedWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.value as! test_component.Signed
        $1?.initialize(to: result)
        return S_OK
    }
)
internal class __x_ABI_C__FIReference_1___x_ABI_Ctest__zcomponent__CSignedWrapper: WinRTWrapperBase<__x_ABI_C__FIReference_1___x_ABI_Ctest__zcomponent__CSigned, IReference> {
    override class var IID: IID { IID___x_ABI_C__FIReference_1___x_ABI_Ctest__zcomponent__CSigned }
    init?(_ value: test_component.Signed?) {
        guard let value = value else { return nil }
        let abi = withUnsafeMutablePointer(to: &__x_ABI_C__FIReference_1___x_ABI_Ctest__zcomponent__CSignedVTable) {
            __x_ABI_C__FIReference_1___x_ABI_Ctest__zcomponent__CSigned(lpVtbl:$0)
        }
        super.init(abi, __IMPL_Windows_Foundation.IPropertyValueImpl(value: value))
    }
}
private var IID___x_ABI_C__FITypedEventHandler_2___x_ABI_Ctest__zcomponent__CSimple___x_ABI_Ctest__zcomponent__CSimpleEventArgs: IID {
    IID(Data1: 0xa10c006a, Data2: 0x749e, Data3: 0x5162, Data4: ( 0xaf,0x9c,0xb0,0x18,0x23,0xa0,0x5c,0x8f ))// a10c006a-749e-5162-af9c-b01823a05c8f
}

internal extension WinRTDelegateBridge where CABI == __x_ABI_C__FITypedEventHandler_2___x_ABI_Ctest__zcomponent__CSimple___x_ABI_Ctest__zcomponent__CSimpleEventArgs {
    static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &test_component.__x_ABI_C__FITypedEventHandler_2___x_ABI_Ctest__zcomponent__CSimple___x_ABI_Ctest__zcomponent__CSimpleEventArgsVTable) { $0 }
        return .init(lpVtbl:vtblPtr)
    }
}

internal var __x_ABI_C__FITypedEventHandler_2___x_ABI_Ctest__zcomponent__CSimple___x_ABI_Ctest__zcomponent__CSimpleEventArgsVTable: __x_ABI_C__FITypedEventHandler_2___x_ABI_Ctest__zcomponent__CSimple___x_ABI_Ctest__zcomponent__CSimpleEventArgsVtbl = .init(
    QueryInterface: {
        guard let pUnk = $0, let riid = $1, let ppvObject = $2 else { return E_INVALIDARG }

        guard riid.pointee == IUnknown.IID ||
              riid.pointee == IInspectable.IID || 
              riid.pointee == ISwiftImplemented.IID ||
              riid.pointee == IAgileObject.IID ||
              riid.pointee == test_component.__x_ABI_C__FITypedEventHandler_2___x_ABI_Ctest__zcomponent__CSimple___x_ABI_Ctest__zcomponent__CSimpleEventArgsWrapper.IID else { 
                return E_NOINTERFACE

        }
        _ = pUnk.pointee.lpVtbl.pointee.AddRef(pUnk)
        ppvObject.pointee = UnsafeMutableRawPointer(pUnk)
        return S_OK
    },

    AddRef: {
         guard let wrapper = __x_ABI_C__FITypedEventHandler_2___x_ABI_Ctest__zcomponent__CSimple___x_ABI_Ctest__zcomponent__CSimpleEventArgsWrapper.fromRaw($0) else { return 1 }
         _ = wrapper.retain()
         return ULONG(_getRetainCount(wrapper.takeUnretainedValue()))
    },

    Release: {
        guard let wrapper = __x_ABI_C__FITypedEventHandler_2___x_ABI_Ctest__zcomponent__CSimple___x_ABI_Ctest__zcomponent__CSimpleEventArgsWrapper.fromRaw($0) else { return 1 }
        return ULONG(_getRetainCount(wrapper.takeRetainedValue()))
    },

    Invoke: {
        guard let __unwrapped__instance = __x_ABI_C__FITypedEventHandler_2___x_ABI_Ctest__zcomponent__CSimple___x_ABI_Ctest__zcomponent__CSimpleEventArgsWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let sender: test_component.Simple? = .from(abi: $1)
        let args: test_component.SimpleEventArgs = .from(abi: $2)
        __unwrapped__instance(sender, args)
        return S_OK
    }
)

typealias __x_ABI_C__FITypedEventHandler_2___x_ABI_Ctest__zcomponent__CSimple___x_ABI_Ctest__zcomponent__CSimpleEventArgsWrapper = InterfaceWrapperBase<test_component.__x_ABI_C__FITypedEventHandler_2___x_ABI_Ctest__zcomponent__CSimple___x_ABI_Ctest__zcomponent__CSimpleEventArgsImpl>
internal class TypedEventHandlerSimple_SimpleEventArgs: test_component.IUnknown {
    override public class var IID: IID { IID___x_ABI_C__FITypedEventHandler_2___x_ABI_Ctest__zcomponent__CSimple___x_ABI_Ctest__zcomponent__CSimpleEventArgs }

    internal func InvokeImpl(_ sender: UnsafeMutablePointer<__x_ABI_Ctest__component_CISimple>?, _ args: __x_ABI_Ctest__component_CSimpleEventArgs) throws {
        _ = try perform(as: __x_ABI_C__FITypedEventHandler_2___x_ABI_Ctest__zcomponent__CSimple___x_ABI_Ctest__zcomponent__CSimpleEventArgs.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Invoke(pThis, sender, args))
        }
    }

}

internal class __x_ABI_C__FITypedEventHandler_2___x_ABI_Ctest__zcomponent__CSimple___x_ABI_Ctest__zcomponent__CSimpleEventArgsImpl : WinRTDelegateBridge {
    internal typealias Handler = TypedEventHandler<Simple?, SimpleEventArgs>
    internal typealias CABI = __x_ABI_C__FITypedEventHandler_2___x_ABI_Ctest__zcomponent__CSimple___x_ABI_Ctest__zcomponent__CSimpleEventArgs
    internal typealias SwiftABI = test_component.TypedEventHandlerSimple_SimpleEventArgs

    internal static func from(abi: UnsafeMutablePointer<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        let _default = SwiftABI(abi)
        let handler: Handler = { (sender, args) in
            try! _default.InvokeImpl(RawPointer(sender), .from(swift: args))
        }
        return handler
    }
}

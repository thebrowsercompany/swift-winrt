// WARNING: Please don't edit this file. It was generated by Swift/WinRT v0.0.1
// swiftlint:disable all
import Foundation
import Ctest_component
@_spi(WinRTInternal) @_spi(WinRTImplements) import WindowsFoundation
import CWindowsFoundation
import CWinRT

public protocol IIAmImplementable : WinRTInterface {
    func inInt32(_ value: Int32) throws -> String
    func inString(_ value: String) throws -> String
    func inObject(_ value: Any!) throws -> String
    func inBlittableStructRef(_ value: test_component.BlittableStruct) throws -> String
    func inNonBlittableStructRef(_ value: test_component.NonBlittableStruct) throws -> String
    func inEnum(_ value: test_component.Signed) throws -> String
    func outInt32(_ value: inout Int32) throws
    func outString(_ value: inout String) throws
    func outObject(_ value: inout Any!) throws
    func outBlittableStruct(_ value: inout test_component.BlittableStruct) throws
    func outNonBlittableStruct(_ value: inout test_component.NonBlittableStruct) throws
    func outEnum(_ value: inout test_component.Signed) throws
    func returnObject() throws -> Any!
    func returnEnum() throws -> test_component.Signed
    func fireEvent(_ data: String) throws
    var enumProperty: test_component.Fruit { get set }
    var id: Foundation.UUID? { get set }
    var implementableEvent: Event<test_component.InDelegate> { get }
}

public extension EventSource where Handler == test_component.InDelegate {
    func invoke(_ value: String) throws {
        for handler in getInvocationList() {
            try handler(value)
        }
    }
}

extension IIAmImplementable {
    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        switch iid {
            case __ABI_test_component.IIAmImplementableWrapper.IID:
                let wrapper = __ABI_test_component.IIAmImplementableWrapper(self)
                return wrapper!.queryInterface(iid)
            default: return nil
        }
    }
}
public typealias AnyIIAmImplementable = any IIAmImplementable

// MARK: - IIAmImplementable Internals

@_spi(WinRTInternal)
extension __IMPL_test_component {
    public enum IIAmImplementableBridge : AbiInterfaceBridge {
        public typealias CABI = __x_ABI_Ctest__component_CIIAmImplementable
        public typealias SwiftABI = __ABI_test_component.IIAmImplementable
        public typealias SwiftProjection = AnyIIAmImplementable
        public static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
            guard let abi = abi else { return nil }
            return IIAmImplementableImpl(abi)
        }

        public static func makeAbi() -> CABI {
            let vtblPtr = withUnsafeMutablePointer(to: &__ABI_test_component.IIAmImplementableVTable) { $0 }
            return .init(lpVtbl: vtblPtr)
        }
    }

    fileprivate class IIAmImplementableImpl: IIAmImplementable, WinRTAbiImpl {
        fileprivate typealias Bridge = IIAmImplementableBridge
        fileprivate let _default: Bridge.SwiftABI
        fileprivate var thisPtr: WindowsFoundation.IInspectable { _default }
        fileprivate init(_ fromAbi: ComPtr<Bridge.CABI>) {
            _default = Bridge.SwiftABI(fromAbi)
        }

        fileprivate func inInt32(_ value: Int32) throws -> String {
            try _default.InInt32(value)
        }

        fileprivate func inString(_ value: String) throws -> String {
            try _default.InString(value)
        }

        fileprivate func inObject(_ value: Any!) throws -> String {
            try _default.InObject(value)
        }

        fileprivate func inBlittableStructRef(_ value: BlittableStruct) throws -> String {
            try _default.InBlittableStructRef(value)
        }

        fileprivate func inNonBlittableStructRef(_ value: NonBlittableStruct) throws -> String {
            try _default.InNonBlittableStructRef(value)
        }

        fileprivate func inEnum(_ value: Signed) throws -> String {
            try _default.InEnum(value)
        }

        fileprivate func outInt32(_ value: inout Int32) throws {
            try _default.OutInt32(&value)
        }

        fileprivate func outString(_ value: inout String) throws {
            try _default.OutString(&value)
        }

        fileprivate func outObject(_ value: inout Any!) throws {
            try _default.OutObject(&value)
        }

        fileprivate func outBlittableStruct(_ value: inout BlittableStruct) throws {
            try _default.OutBlittableStruct(&value)
        }

        fileprivate func outNonBlittableStruct(_ value: inout NonBlittableStruct) throws {
            try _default.OutNonBlittableStruct(&value)
        }

        fileprivate func outEnum(_ value: inout Signed) throws {
            try _default.OutEnum(&value)
        }

        fileprivate func returnObject() throws -> Any! {
            try _default.ReturnObject()
        }

        fileprivate func returnEnum() throws -> Signed {
            try _default.ReturnEnum()
        }

        fileprivate func fireEvent(_ data: String) throws {
            try _default.FireEvent(data)
        }

        fileprivate var enumProperty : Fruit {
            get { try! _default.get_EnumProperty() }
            set { try! _default.put_EnumProperty(newValue) }
        }

        fileprivate var id : Foundation.UUID? {
            get { try! _default.get_Id() }
            set { try! _default.put_Id(newValue) }
        }

        fileprivate lazy var implementableEvent : Event<test_component.InDelegate> = {
          .init(
            add: { [weak self] in
              guard let this = self?._default else { return .init() }
              return try! this.add_ImplementableEvent($0)
            },
            remove: { [weak self] in
             try? self?._default.remove_ImplementableEvent($0)
           }
          )
        }()

    }

}
@_spi(WinRTInternal)
extension __ABI_test_component {
    private static let IID___x_ABI_Ctest__component_CIIAmImplementable: WindowsFoundation.IID = .init(
        Data1: 0x8FC8D4FE, Data2: 0x967E, Data3: 0x5135, Data4: ( 0x9B,0xD2,0x31,0x50,0x3A,0xB9,0xD1,0x45 ) // 8FC8D4FE-967E-5135-9BD2-31503AB9D145
    ) 

    public class IIAmImplementable: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_Ctest__component_CIIAmImplementable }

        open func InInt32(_ value: Int32) throws -> String {
            var result: HSTRING?
            _ = try perform(as: __x_ABI_Ctest__component_CIIAmImplementable.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.InInt32(pThis, value, &result))
            }
            return .init(from: result)
        }

        open func InString(_ value: String) throws -> String {
            var result: HSTRING?
            let _value = try! HString(value)
            _ = try perform(as: __x_ABI_Ctest__component_CIIAmImplementable.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.InString(pThis, _value.get(), &result))
            }
            return .init(from: result)
        }

        open func InObject(_ value: Any?) throws -> String {
            var result: HSTRING?
            let valueWrapper = __ABI_.AnyWrapper(value)
            let _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_Ctest__component_CIIAmImplementable.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.InObject(pThis, _value, &result))
            }
            return .init(from: result)
        }

        open func InBlittableStructRef(_ value: test_component.BlittableStruct) throws -> String {
            var result: HSTRING?
            var _value: __x_ABI_Ctest__component_CBlittableStruct = .from(swift: value)
            _ = try perform(as: __x_ABI_Ctest__component_CIIAmImplementable.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.InBlittableStructRef(pThis, &_value, &result))
            }
            return .init(from: result)
        }

        open func InNonBlittableStructRef(_ value: test_component.NonBlittableStruct) throws -> String {
            var result: HSTRING?
            let _value = __ABI_test_component._ABI_NonBlittableStruct(from: value)
            _ = try perform(as: __x_ABI_Ctest__component_CIIAmImplementable.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.InNonBlittableStructRef(pThis, &_value.val, &result))
            }
            return .init(from: result)
        }

        open func InEnum(_ value: test_component.Signed) throws -> String {
            var result: HSTRING?
            _ = try perform(as: __x_ABI_Ctest__component_CIIAmImplementable.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.InEnum(pThis, value, &result))
            }
            return .init(from: result)
        }

        open func OutInt32(_ value: inout Int32) throws {
            _ = try perform(as: __x_ABI_Ctest__component_CIIAmImplementable.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.OutInt32(pThis, &value))
            }
        }

        open func OutString(_ value: inout String) throws {
            var _value: HSTRING?
            _ = try perform(as: __x_ABI_Ctest__component_CIIAmImplementable.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.OutString(pThis, &_value))
            }
            value = .init(from: _value)
            WindowsDeleteString(_value)
        }

        open func OutObject(_ value: inout Any?) throws {
            let (_value) = try ComPtrs.initialize { (_valueAbi) in
                _ = try perform(as: __x_ABI_Ctest__component_CIIAmImplementable.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.OutObject(pThis, &_valueAbi))
                }
            }
            value = __ABI_.AnyWrapper.unwrapFrom(abi: _value)
        }

        open func OutBlittableStruct(_ value: inout test_component.BlittableStruct) throws {
            var _value: __x_ABI_Ctest__component_CBlittableStruct = .init()
            _ = try perform(as: __x_ABI_Ctest__component_CIIAmImplementable.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.OutBlittableStruct(pThis, &_value))
            }
            value = .from(abi: _value)
        }

        open func OutNonBlittableStruct(_ value: inout test_component.NonBlittableStruct) throws {
            let _value: __ABI_test_component._ABI_NonBlittableStruct = .init()
            _ = try perform(as: __x_ABI_Ctest__component_CIIAmImplementable.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.OutNonBlittableStruct(pThis, &_value.val))
            }
            value = .from(abi: _value.val)
        }

        open func OutEnum(_ value: inout test_component.Signed) throws {
            _ = try perform(as: __x_ABI_Ctest__component_CIIAmImplementable.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.OutEnum(pThis, &value))
            }
        }

        open func ReturnObject() throws -> Any? {
            let (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_Ctest__component_CIIAmImplementable.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.ReturnObject(pThis, &resultAbi))
                }
            }
            return __ABI_.AnyWrapper.unwrapFrom(abi: result)
        }

        open func ReturnEnum() throws -> test_component.Signed {
            var result: __x_ABI_Ctest__component_CSigned = .init(0)
            _ = try perform(as: __x_ABI_Ctest__component_CIIAmImplementable.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.ReturnEnum(pThis, &result))
            }
            return result
        }

        open func get_EnumProperty() throws -> test_component.Fruit {
            var value: __x_ABI_Ctest__component_CFruit = .init(0)
            _ = try perform(as: __x_ABI_Ctest__component_CIIAmImplementable.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_EnumProperty(pThis, &value))
            }
            return value
        }

        open func put_EnumProperty(_ value: test_component.Fruit) throws {
            _ = try perform(as: __x_ABI_Ctest__component_CIIAmImplementable.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_EnumProperty(pThis, value))
            }
        }

        open func get_Id() throws -> Foundation.UUID? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_Ctest__component_CIIAmImplementable.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Id(pThis, &valueAbi))
                }
            }
            return test_component.__x_ABI_C__FIReference_1_GUIDWrapper.unwrapFrom(abi: value)
        }

        open func put_Id(_ value: Foundation.UUID?) throws {
            let valueWrapper = test_component.__x_ABI_C__FIReference_1_GUIDWrapper(value)
            let _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_Ctest__component_CIIAmImplementable.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Id(pThis, _value))
            }
        }

        open func add_ImplementableEvent(_ handler: test_component.InDelegate?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = __ABI_test_component_Delegates.InDelegateWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_Ctest__component_CIIAmImplementable.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_ImplementableEvent(pThis, _handler, &token))
            }
            return token
        }

        open func remove_ImplementableEvent(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_Ctest__component_CIIAmImplementable.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_ImplementableEvent(pThis, token))
            }
        }

        open func FireEvent(_ data: String) throws {
            let _data = try! HString(data)
            _ = try perform(as: __x_ABI_Ctest__component_CIIAmImplementable.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.FireEvent(pThis, _data.get()))
            }
        }

    }

    internal static var IIAmImplementableVTable: __x_ABI_Ctest__component_CIIAmImplementableVtbl = .init(
        QueryInterface: { IIAmImplementableWrapper.queryInterface($0, $1, $2) },
        AddRef: { IIAmImplementableWrapper.addRef($0) },
        Release: { IIAmImplementableWrapper.release($0) },
        GetIids: {
            let size = MemoryLayout<WindowsFoundation.IID>.size
            let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: WindowsFoundation.IID.self)
            iids[0] = IUnknown.IID
            iids[1] = IInspectable.IID
            iids[2] = __ABI_test_component.IIAmImplementableWrapper.IID
            $1!.pointee = 3
            $2!.pointee = iids
            return S_OK
        },

        GetRuntimeClassName: {
            _ = $0
            let hstring = try! HString("test_component.IIAmImplementable").detach()
            $1!.pointee = hstring
            return S_OK
        },

        GetTrustLevel: {
            _ = $0
            $1!.pointee = TrustLevel(rawValue: 0)
            return S_OK
        },

        InInt32: {
            do {
                guard let __unwrapped__instance = IIAmImplementableWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let value: Int32 = $1
                let result = try __unwrapped__instance.inInt32(value)
                $2?.initialize(to: try! HString(result).detach())
                return S_OK
            } catch { return failWith(error: error) }
        },

        InString: {
            do {
                guard let __unwrapped__instance = IIAmImplementableWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let value: String = .init(from: $1)
                let result = try __unwrapped__instance.inString(value)
                $2?.initialize(to: try! HString(result).detach())
                return S_OK
            } catch { return failWith(error: error) }
        },

        InObject: {
            do {
                guard let __unwrapped__instance = IIAmImplementableWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let value: Any? = __ABI_.AnyWrapper.unwrapFrom(abi: ComPtr($1))
                let result = try __unwrapped__instance.inObject(value)
                $2?.initialize(to: try! HString(result).detach())
                return S_OK
            } catch { return failWith(error: error) }
        },

        InBlittableStructRef: {
            do {
                guard let __unwrapped__instance = IIAmImplementableWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let value: test_component.BlittableStruct = .from(abi: $1!.pointee)
                let result = try __unwrapped__instance.inBlittableStructRef(value)
                $2?.initialize(to: try! HString(result).detach())
                return S_OK
            } catch { return failWith(error: error) }
        },

        InNonBlittableStructRef: {
            do {
                guard let __unwrapped__instance = IIAmImplementableWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let value: test_component.NonBlittableStruct = .from(abi: $1!.pointee)
                let result = try __unwrapped__instance.inNonBlittableStructRef(value)
                $2?.initialize(to: try! HString(result).detach())
                return S_OK
            } catch { return failWith(error: error) }
        },

        InEnum: {
            do {
                guard let __unwrapped__instance = IIAmImplementableWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let value: test_component.Signed = $1
                let result = try __unwrapped__instance.inEnum(value)
                $2?.initialize(to: try! HString(result).detach())
                return S_OK
            } catch { return failWith(error: error) }
        },

        OutInt32: {
            do {
                guard let __unwrapped__instance = IIAmImplementableWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                var value: Int32 = 0
                try __unwrapped__instance.outInt32(&value)
                $1?.initialize(to: value)
                return S_OK
            } catch { return failWith(error: error) }
        },

        OutString: {
            do {
                guard let __unwrapped__instance = IIAmImplementableWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                var value: String = ""
                try __unwrapped__instance.outString(&value)
                $1?.initialize(to: try! HString(value).detach())
                return S_OK
            } catch { return failWith(error: error) }
        },

        OutObject: {
            do {
                guard let __unwrapped__instance = IIAmImplementableWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                var value: Any?
                try __unwrapped__instance.outObject(&value)
                let valueWrapper = __ABI_.AnyWrapper(value)
                valueWrapper?.copyTo($1)
                return S_OK
            } catch { return failWith(error: error) }
        },

        OutBlittableStruct: {
            do {
                guard let __unwrapped__instance = IIAmImplementableWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                var value: test_component.BlittableStruct = .init()
                try __unwrapped__instance.outBlittableStruct(&value)
                $1?.initialize(to: .from(swift: value))
                return S_OK
            } catch { return failWith(error: error) }
        },

        OutNonBlittableStruct: {
            do {
                guard let __unwrapped__instance = IIAmImplementableWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                var value: test_component.NonBlittableStruct = .init()
                try __unwrapped__instance.outNonBlittableStruct(&value)
                let _value = __ABI_test_component._ABI_NonBlittableStruct(from: value)
                	$1?.initialize(to: _value.detach())
                return S_OK
            } catch { return failWith(error: error) }
        },

        OutEnum: {
            do {
                guard let __unwrapped__instance = IIAmImplementableWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                var value: test_component.Signed = .init(0)
                try __unwrapped__instance.outEnum(&value)
                $1?.initialize(to: value)
                return S_OK
            } catch { return failWith(error: error) }
        },

        ReturnObject: {
            do {
                guard let __unwrapped__instance = IIAmImplementableWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let result = try __unwrapped__instance.returnObject()
                let resultWrapper = __ABI_.AnyWrapper(result)
                resultWrapper?.copyTo($1)
                return S_OK
            } catch { return failWith(error: error) }
        },

        ReturnEnum: {
            do {
                guard let __unwrapped__instance = IIAmImplementableWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let result = try __unwrapped__instance.returnEnum()
                $1?.initialize(to: result)
                return S_OK
            } catch { return failWith(error: error) }
        },

        get_EnumProperty: {
            guard let __unwrapped__instance = IIAmImplementableWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value = __unwrapped__instance.enumProperty
            $1?.initialize(to: value)
            return S_OK
        },

        put_EnumProperty: {
            guard let __unwrapped__instance = IIAmImplementableWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value: test_component.Fruit = $1
            __unwrapped__instance.enumProperty = value
            return S_OK
        },

        get_Id: {
            guard let __unwrapped__instance = IIAmImplementableWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value = __unwrapped__instance.id
            let valueWrapper = test_component.__x_ABI_C__FIReference_1_GUIDWrapper(value)
            valueWrapper?.copyTo($1)
            return S_OK
        },

        put_Id: {
            guard let __unwrapped__instance = IIAmImplementableWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value: Foundation.UUID? = test_component.__x_ABI_C__FIReference_1_GUIDWrapper.unwrapFrom(abi: ComPtr($1))
            __unwrapped__instance.id = value
            return S_OK
        },

        add_ImplementableEvent: {
            guard let __unwrapped__instance = IIAmImplementableWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            guard let handler = __ABI_test_component_Delegates.InDelegateWrapper.unwrapFrom(abi: ComPtr($1)) else { return E_INVALIDARG }
            let token = __unwrapped__instance.implementableEvent.addHandler(handler)
            $2?.initialize(to: .from(swift: token))
            return S_OK
        },

        remove_ImplementableEvent: {
            guard let __unwrapped__instance = IIAmImplementableWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let token: EventRegistrationToken = $1
            __unwrapped__instance.implementableEvent.removeHandler(token)
            return S_OK
        },

        FireEvent: {
            do {
                guard let __unwrapped__instance = IIAmImplementableWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let data: String = .init(from: $1)
                try __unwrapped__instance.fireEvent(data)
                return S_OK
            } catch { return failWith(error: error) }
        }
    )

    public typealias IIAmImplementableWrapper = InterfaceWrapperBase<__IMPL_test_component.IIAmImplementableBridge>
}
@_spi(WinRTInternal)
public class IIAmImplementableMaker: MakeFromAbi {
    public typealias SwiftType = AnyIIAmImplementable
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        let swiftAbi: __ABI_test_component.IIAmImplementable = try! abi.QueryInterface()
        return __IMPL_test_component.IIAmImplementableBridge.from(abi: RawPointer(swiftAbi))!
    }
}

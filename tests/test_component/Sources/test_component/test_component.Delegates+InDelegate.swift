// WARNING: Please don't edit this file. It was generated by Swift/WinRT v0.0.1
// swiftlint:disable all
import Foundation
import Ctest_component

public typealias InDelegate = (String) throws -> ()

// MARK: - InDelegate Internals

@_spi(WinRTInternal)
extension __IMPL_test_component_Delegates {
    public class InDelegateBridge : WinRTDelegateBridge {
        public typealias Handler = InDelegate
        public typealias CABI = __x_ABI_Ctest__component_CDelegates_CIInDelegate
        public typealias SwiftABI = __ABI_test_component_Delegates.InDelegate

        public static func from(abi: ComPtr<CABI>?) -> Handler? {
            guard let abi = abi else { return nil }
            let _default = SwiftABI(abi)
            let handler: Handler = { (value) in
                try _default.Invoke(value)
            }
            return handler
        }
    }
}
@_spi(WinRTInternal)
extension __ABI_test_component_Delegates {
    private static let IID___x_ABI_Ctest__component_CDelegates_CIInDelegate: test_component.IID = .init(
        Data1: 0x419EF389, Data2: 0xAF4B, Data3: 0x5676, Data4: ( 0xBC,0xEE,0xE0,0xD7,0x9A,0x5C,0xCA,0xDE ) // 419EF389-AF4B-5676-BCEE-E0D79A5CCADE
    ) 

    public class InDelegate: test_component.IUnknown {
        override public class var IID: test_component.IID { IID___x_ABI_Ctest__component_CDelegates_CIInDelegate }

        open func Invoke(_ value: String) throws {
            let _value = try! HString(value)
            _ = try perform(as: __x_ABI_Ctest__component_CDelegates_CIInDelegate.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Invoke(pThis, _value.get()))
            }
        }

    }


    typealias InDelegateWrapper = InterfaceWrapperBase<__IMPL_test_component_Delegates.InDelegateBridge>
    internal static var InDelegateVTable: __x_ABI_Ctest__component_CDelegates_CIInDelegateVtbl = .init(
        QueryInterface: { InDelegateWrapper.queryInterface($0, $1, $2) },
        AddRef: { InDelegateWrapper.addRef($0) },
        Release: { InDelegateWrapper.release($0) },
        Invoke: {
            do {
                guard let __unwrapped__instance = InDelegateWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let value: String = .init(from: $1)
                try __unwrapped__instance(value)
                return S_OK
            } catch { return failWith(error: error) }
        }
    )
}
@_spi(WinRTInternal)
public extension WinRTDelegateBridge where CABI == __x_ABI_Ctest__component_CDelegates_CIInDelegate {
    static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__ABI_test_component_Delegates.InDelegateVTable) { $0 }
        return .init(lpVtbl:vtblPtr)
    }
}


// WARNING: Please don't edit this file. It was generated by Swift/WinRT v0.0.1
import Ctest_component

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CInterop_CIBindableVector: IID {
    IID(Data1: 0x824DB44F, Data2: 0x10AD, Data3: 0x5ACC, Data4: ( 0x80,0x0B,0xC9,0x36,0xE5,0x19,0xEE,0x07 ))// 824DB44F-10AD-5ACC-800B-C936E519EE07
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CInterop_CINotifyCollectionChanged: IID {
    IID(Data1: 0x530155E1, Data2: 0x28A5, Data3: 0x5693, Data4: ( 0x87,0xCE,0x30,0x72,0x4D,0x95,0xA0,0x6D ))// 530155E1-28A5-5693-87CE-30724D95A06D
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CInterop_CINotifyCollectionChangedEventArgs: IID {
    IID(Data1: 0xFD6A394C, Data2: 0x0B32, Data3: 0x5010, Data4: ( 0xAF,0x82,0xAE,0xDC,0x67,0x62,0xBF,0xC5 ))// FD6A394C-0B32-5010-AF82-AEDC6762BFC5
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CInterop_CINotifyCollectionChangedEventArgsFactory: IID {
    IID(Data1: 0x39E24D3D, Data2: 0x6CB6, Data3: 0x5DCE, Data4: ( 0xBB,0xDE,0x0D,0xFE,0xD1,0x3F,0x9A,0x03 ))// 39E24D3D-6CB6-5DCE-BBDE-0DFED13F9A03
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CInterop_CINotifyCollectionChangedEventHandler: IID {
    IID(Data1: 0x8B0909DC, Data2: 0x2005, Data3: 0x5D93, Data4: ( 0xBF,0x8A,0x72,0x5F,0x01,0x7B,0xAA,0x8D ))// 8B0909DC-2005-5D93-BF8A-725F017BAA8D
}

public enum __ABI_Microsoft_UI_Xaml_Interop {
    open class IBindableVector: test_component.IInspectable {
        override public class var IID: IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CInterop_CIBindableVector }

        open func GetAtImpl(_ index: UINT32) throws -> UnsafeMutablePointer<Ctest_component.IInspectable>? {
            var result: UnsafeMutablePointer<Ctest_component.IInspectable>?
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CInterop_CIBindableVector.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetAt(pThis, index, &result))
            }
            return result
        }

        open func get_SizeImpl() throws -> UINT32 {
            var value: UINT32 = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CInterop_CIBindableVector.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Size(pThis, &value))
            }
            return value
        }

    }

    internal static var IBindableVectorVTable: __x_ABI_CMicrosoft_CUI_CXaml_CInterop_CIBindableVectorVtbl = .init(
        QueryInterface: {
            guard let pUnk = $0, let riid = $1, let ppvObject = $2 else { return E_INVALIDARG }

            guard riid.pointee == IUnknown.IID ||
                  riid.pointee == IInspectable.IID || 
                  riid.pointee == ISwiftImplemented.IID ||
                  riid.pointee == IAgileObject.IID ||
                  riid.pointee == __ABI_Microsoft_UI_Xaml_Interop.IBindableVectorWrapper.IID else { 
                    guard let instance = WinRTWrapperBase<Ctest_component.IInspectable, AnyObject>.tryUnwrapFrom(raw: $0) as? any WinRTClass,
                          let cDefault: UnsafeMutablePointer<Ctest_component.IInspectable> = instance._getABI() else { return E_NOINTERFACE }
                    return cDefault.pointee.lpVtbl.pointee.QueryInterface(cDefault, riid, ppvObject) 

            }
            _ = pUnk.pointee.lpVtbl.pointee.AddRef(pUnk)
            ppvObject.pointee = UnsafeMutableRawPointer(pUnk)
            return S_OK
        },

        AddRef: {
             guard let wrapper = IBindableVectorWrapper.fromRaw($0) else { return 1 }
             _ = wrapper.retain()
             return ULONG(_getRetainCount(wrapper.takeUnretainedValue()))
        },

        Release: {
            guard let wrapper = IBindableVectorWrapper.fromRaw($0) else { return 1 }
            return ULONG(_getRetainCount(wrapper.takeRetainedValue()))
        },

        GetIids: {
            let size = MemoryLayout<IID>.size
            let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: IID.self)
            iids[0] = IUnknown.IID
            iids[1] = IInspectable.IID
            iids[2] = __ABI_Microsoft_UI_Xaml_Interop.IBindableVectorWrapper.IID
            $1!.pointee = 3
            $2!.pointee = iids
            return S_OK
        },

        GetRuntimeClassName: {
            _ = $0
            let hstring = try! HString("Microsoft.UI.Xaml.Interop.IBindableVector").detach()
            $1!.pointee = hstring
            return S_OK
        },

        GetTrustLevel: {
            _ = $0
            $1!.pointee = TrustLevel(rawValue: 0)
            return S_OK
        },

        GetAt: {
            do {
                guard let __unwrapped__instance = IBindableVectorWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let index: UInt32 = $1
                let result = try __unwrapped__instance.getAt(index)
                let resultWrapper = __ABI_.AnyWrapper(result)
                resultWrapper?.copyTo($2)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        get_Size: {
            guard let __unwrapped__instance = IBindableVectorWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value = __unwrapped__instance.size
            $1?.initialize(to: value)
            return S_OK
        }
    )

    public typealias IBindableVectorWrapper = InterfaceWrapperBase<__IMPL_Microsoft_UI_Xaml_Interop.IBindableVectorImpl>
    open class INotifyCollectionChanged: test_component.IInspectable {
        override public class var IID: IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CInterop_CINotifyCollectionChanged }

        open func add_CollectionChangedImpl(_ handler: UnsafeMutablePointer<__x_ABI_CMicrosoft_CUI_CXaml_CInterop_CINotifyCollectionChangedEventHandler>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CInterop_CINotifyCollectionChanged.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_CollectionChanged(pThis, handler, &token))
            }
            return token
        }

        open func remove_CollectionChangedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CInterop_CINotifyCollectionChanged.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_CollectionChanged(pThis, token))
            }
        }

    }

    internal static var INotifyCollectionChangedVTable: __x_ABI_CMicrosoft_CUI_CXaml_CInterop_CINotifyCollectionChangedVtbl = .init(
        QueryInterface: {
            guard let pUnk = $0, let riid = $1, let ppvObject = $2 else { return E_INVALIDARG }

            guard riid.pointee == IUnknown.IID ||
                  riid.pointee == IInspectable.IID || 
                  riid.pointee == ISwiftImplemented.IID ||
                  riid.pointee == IAgileObject.IID ||
                  riid.pointee == __ABI_Microsoft_UI_Xaml_Interop.INotifyCollectionChangedWrapper.IID else { 
                    guard let instance = WinRTWrapperBase<Ctest_component.IInspectable, AnyObject>.tryUnwrapFrom(raw: $0) as? any WinRTClass,
                          let cDefault: UnsafeMutablePointer<Ctest_component.IInspectable> = instance._getABI() else { return E_NOINTERFACE }
                    return cDefault.pointee.lpVtbl.pointee.QueryInterface(cDefault, riid, ppvObject) 

            }
            _ = pUnk.pointee.lpVtbl.pointee.AddRef(pUnk)
            ppvObject.pointee = UnsafeMutableRawPointer(pUnk)
            return S_OK
        },

        AddRef: {
             guard let wrapper = INotifyCollectionChangedWrapper.fromRaw($0) else { return 1 }
             _ = wrapper.retain()
             return ULONG(_getRetainCount(wrapper.takeUnretainedValue()))
        },

        Release: {
            guard let wrapper = INotifyCollectionChangedWrapper.fromRaw($0) else { return 1 }
            return ULONG(_getRetainCount(wrapper.takeRetainedValue()))
        },

        GetIids: {
            let size = MemoryLayout<IID>.size
            let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: IID.self)
            iids[0] = IUnknown.IID
            iids[1] = IInspectable.IID
            iids[2] = __ABI_Microsoft_UI_Xaml_Interop.INotifyCollectionChangedWrapper.IID
            $1!.pointee = 3
            $2!.pointee = iids
            return S_OK
        },

        GetRuntimeClassName: {
            _ = $0
            let hstring = try! HString("Microsoft.UI.Xaml.Interop.INotifyCollectionChanged").detach()
            $1!.pointee = hstring
            return S_OK
        },

        GetTrustLevel: {
            _ = $0
            $1!.pointee = TrustLevel(rawValue: 0)
            return S_OK
        },

        add_CollectionChanged: {
            guard let __unwrapped__instance = INotifyCollectionChangedWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            guard let handler = __ABI_Microsoft_UI_Xaml_Interop.NotifyCollectionChangedEventHandlerWrapper.unwrapFrom(abi: $1) else { return E_INVALIDARG }
            let token = __unwrapped__instance.collectionChanged.addHandler(handler)
            $2?.initialize(to: .from(swift: token))
            return S_OK
        },

        remove_CollectionChanged: {
            guard let __unwrapped__instance = INotifyCollectionChangedWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let token: EventRegistrationToken = $1
            __unwrapped__instance.collectionChanged.removeHandler(token)
            return S_OK
        }
    )

    public typealias INotifyCollectionChangedWrapper = InterfaceWrapperBase<__IMPL_Microsoft_UI_Xaml_Interop.INotifyCollectionChangedImpl>
    open class INotifyCollectionChangedEventArgs: test_component.IInspectable {
        override public class var IID: IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CInterop_CINotifyCollectionChangedEventArgs }

        internal func get_ActionImpl() throws -> __x_ABI_CMicrosoft_CUI_CXaml_CInterop_CNotifyCollectionChangedAction {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CInterop_CNotifyCollectionChangedAction = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CInterop_CINotifyCollectionChangedEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Action(pThis, &value))
            }
            return value
        }

        internal func get_NewItemsImpl() throws -> UnsafeMutablePointer<__x_ABI_CMicrosoft_CUI_CXaml_CInterop_CIBindableVector>? {
            var value: UnsafeMutablePointer<__x_ABI_CMicrosoft_CUI_CXaml_CInterop_CIBindableVector>?
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CInterop_CINotifyCollectionChangedEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_NewItems(pThis, &value))
            }
            return value
        }

        internal func get_NewStartingIndexImpl() throws -> INT32 {
            var value: INT32 = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CInterop_CINotifyCollectionChangedEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_NewStartingIndex(pThis, &value))
            }
            return value
        }

    }

    open class INotifyCollectionChangedEventArgsFactory: test_component.IInspectable {
        override public class var IID: IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CInterop_CINotifyCollectionChangedEventArgsFactory }

        internal func CreateInstanceImpl(_ action: __x_ABI_CMicrosoft_CUI_CXaml_CInterop_CNotifyCollectionChangedAction, _ newItems: UnsafeMutablePointer<__x_ABI_CMicrosoft_CUI_CXaml_CInterop_CIBindableVector>?, _ newStartingIndex: INT32) throws -> UnsafeMutablePointer<__x_ABI_CMicrosoft_CUI_CXaml_CInterop_CINotifyCollectionChangedEventArgs>? {
            var value: UnsafeMutablePointer<__x_ABI_CMicrosoft_CUI_CXaml_CInterop_CINotifyCollectionChangedEventArgs>?
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CInterop_CINotifyCollectionChangedEventArgsFactory.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance(pThis, action, newItems, newStartingIndex, &value))
            }
            return value
        }

    }

}
// MARK - NotifyCollectionChangedEventHandler
extension __ABI_Microsoft_UI_Xaml_Interop {
    open class NotifyCollectionChangedEventHandler: test_component.IUnknown {
        override public class var IID: IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CInterop_CINotifyCollectionChangedEventHandler }

        open func InvokeImpl(_ sender: UnsafeMutablePointer<Ctest_component.IInspectable>?, _ args: UnsafeMutablePointer<__x_ABI_CMicrosoft_CUI_CXaml_CInterop_CINotifyCollectionChangedEventArgs>?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CInterop_CINotifyCollectionChangedEventHandler.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Invoke(pThis, sender, args))
            }
        }

    }


    typealias NotifyCollectionChangedEventHandlerWrapper = InterfaceWrapperBase<__IMPL_Microsoft_UI_Xaml_Interop.NotifyCollectionChangedEventHandlerImpl>
    internal static var NotifyCollectionChangedEventHandlerVTable: __x_ABI_CMicrosoft_CUI_CXaml_CInterop_CINotifyCollectionChangedEventHandlerVtbl = .init(
        QueryInterface: {
            guard let pUnk = $0, let riid = $1, let ppvObject = $2 else { return E_INVALIDARG }

            guard riid.pointee == IUnknown.IID ||
                  riid.pointee == IInspectable.IID || 
                  riid.pointee == ISwiftImplemented.IID ||
                  riid.pointee == IAgileObject.IID ||
                  riid.pointee == __ABI_Microsoft_UI_Xaml_Interop.NotifyCollectionChangedEventHandlerWrapper.IID else { 
                    return E_NOINTERFACE

            }
            _ = pUnk.pointee.lpVtbl.pointee.AddRef(pUnk)
            ppvObject.pointee = UnsafeMutableRawPointer(pUnk)
            return S_OK
        },

        AddRef: {
             guard let wrapper = NotifyCollectionChangedEventHandlerWrapper.fromRaw($0) else { return 1 }
             _ = wrapper.retain()
             return ULONG(_getRetainCount(wrapper.takeUnretainedValue()))
        },

        Release: {
            guard let wrapper = NotifyCollectionChangedEventHandlerWrapper.fromRaw($0) else { return 1 }
            return ULONG(_getRetainCount(wrapper.takeRetainedValue()))
        },

        Invoke: {
            guard let __unwrapped__instance = NotifyCollectionChangedEventHandlerWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let sender: Any? = __ABI_.AnyWrapper.unwrapFrom(abi: $1)
            let args: test_component.NotifyCollectionChangedEventArgs? = .from(abi: $2)
            __unwrapped__instance(sender, args)
            return S_OK
        }
    )
}
public extension WinRTDelegateBridge where CABI == __x_ABI_CMicrosoft_CUI_CXaml_CInterop_CINotifyCollectionChangedEventHandler {
    static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__ABI_Microsoft_UI_Xaml_Interop.NotifyCollectionChangedEventHandlerVTable) { $0 }
        return .init(lpVtbl:vtblPtr)
    }
}


// WARNING: Please don't edit this file. It was generated by Swift/WinRT v0.0.1
// swiftlint:disable all
import Foundation
import Ctest_component

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ipropertyset)
public protocol IPropertySet : IObservableMap<String, Any?>, IMap<String, Any?>, IIterable<AnyIKeyValuePair<String, Any?>?> {
}

extension IPropertySet {
    public func queryInterface(_ iid: test_component.IID) -> IUnknownRef? {
        switch iid {
            case __ABI_Windows_Foundation_Collections.IPropertySetWrapper.IID:
                let wrapper = __ABI_Windows_Foundation_Collections.IPropertySetWrapper(self)
                return wrapper!.queryInterface(iid)
            case test_component.__x_ABI_C__FIObservableMap_2_HSTRING_IInspectableWrapper.IID:
                let wrapper = test_component.__x_ABI_C__FIObservableMap_2_HSTRING_IInspectableWrapper(self)
                return wrapper!.queryInterface(iid)
            case test_component.__x_ABI_C__FIMap_2_HSTRING_IInspectableWrapper.IID:
                let wrapper = test_component.__x_ABI_C__FIMap_2_HSTRING_IInspectableWrapper(self)
                return wrapper!.queryInterface(iid)
            case test_component.__x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectableWrapper.IID:
                let wrapper = test_component.__x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectableWrapper(self)
                return wrapper!.queryInterface(iid)
            default: return nil
        }
    }
}
public typealias AnyIPropertySet = any IPropertySet


// MARK: - Internals

@_spi(WinRTInternal)
extension __IMPL_Windows_Foundation_Collections {
    public enum IPropertySetBridge : AbiInterfaceBridge {
        public typealias CABI = __x_ABI_CWindows_CFoundation_CCollections_CIPropertySet
        public typealias SwiftABI = __ABI_Windows_Foundation_Collections.IPropertySet
        public typealias SwiftProjection = AnyIPropertySet
        public static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
            guard let abi = abi else { return nil }
            return IPropertySetImpl(abi)
        }

        public static func makeAbi() -> CABI {
            let vtblPtr = withUnsafeMutablePointer(to: &__ABI_Windows_Foundation_Collections.IPropertySetVTable) { $0 }
            return .init(lpVtbl: vtblPtr)
        }
    }

    fileprivate class IPropertySetImpl: IPropertySet, WinRTAbiImpl {
        fileprivate typealias Bridge = IPropertySetBridge
        fileprivate let _default: Bridge.SwiftABI
        fileprivate var thisPtr: test_component.IInspectable { _default }
        fileprivate init(_ fromAbi: ComPtr<Bridge.CABI>) {
            _default = Bridge.SwiftABI(fromAbi)
        }

        public typealias K = String
        public typealias V = Any?
        public typealias T = AnyIKeyValuePair<String, Any?>?
        private lazy var _IObservableMap: IObservableMapString_Any! = getInterfaceForCaching()
        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ipropertyset.mapchanged)
        fileprivate lazy var mapChanged : Event<MapChangedEventHandler<String, Any?>> = {
          .init(
            add: { [weak self] in
              guard let this = self?._IObservableMap else { return .init() }
              return try! this.add_MapChanged($0)
            },
            remove: { [weak self] in
             try? self?._IObservableMap.remove_MapChanged($0)
           }
          )
        }()

        private lazy var _IMap: IMapString_Any! = getInterfaceForCaching()
        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ipropertyset.lookup)
        fileprivate func lookup(_ key: String) -> Any? {
            try! _IMap.Lookup(key)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ipropertyset.haskey)
        fileprivate func hasKey(_ key: String) -> Bool {
            try! _IMap.HasKey(key)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ipropertyset.getview)
        fileprivate func getView() -> AnyIMapView<String, Any?>? {
            try! _IMap.GetView()
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ipropertyset.insert)
        fileprivate func insert(_ key: String, _ value: Any?) -> Bool {
            try! _IMap.Insert(key, value)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ipropertyset.remove)
        fileprivate func remove(_ key: String) {
            try! _IMap.Remove(key)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ipropertyset.clear)
        fileprivate func clear() {
            try! _IMap.Clear()
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ipropertyset.size)
        fileprivate var size : UInt32 {
            get { try! _IMap.get_Size() }
        }

        private lazy var _IIterable: IIterableIKeyValuePairString_Any! = getInterfaceForCaching()
        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ipropertyset.first)
        fileprivate func first() -> AnyIIterator<AnyIKeyValuePair<String, Any?>?>? {
            try! _IIterable.First()
        }

    }

}
@_spi(WinRTInternal)
extension __ABI_Windows_Foundation_Collections {
    private static let IID___x_ABI_CWindows_CFoundation_CCollections_CIPropertySet: test_component.IID = .init(
        Data1: 0x8A43ED9F, Data2: 0xF4E6, Data3: 0x4421, Data4: ( 0xAC,0xF9,0x1D,0xAB,0x29,0x86,0x82,0x0C ) // 8A43ED9F-F4E6-4421-ACF9-1DAB2986820C
    ) 
    public class IPropertySet: test_component.IInspectable {
        override public class var IID: test_component.IID { IID___x_ABI_CWindows_CFoundation_CCollections_CIPropertySet }

    }

    internal static var IPropertySetVTable: __x_ABI_CWindows_CFoundation_CCollections_CIPropertySetVtbl = .init(
        QueryInterface: { IPropertySetWrapper.queryInterface($0, $1, $2) },
        AddRef: { IPropertySetWrapper.addRef($0) },
        Release: { IPropertySetWrapper.release($0) },
        GetIids: {
            let size = MemoryLayout<test_component.IID>.size
            let iids = CoTaskMemAlloc(UInt64(size) * 6).assumingMemoryBound(to: test_component.IID.self)
            iids[0] = IUnknown.IID
            iids[1] = IInspectable.IID
            iids[2] = __ABI_Windows_Foundation_Collections.IPropertySetWrapper.IID
            iids[3] = test_component.__x_ABI_C__FIObservableMap_2_HSTRING_IInspectableWrapper.IID
            iids[4] = test_component.__x_ABI_C__FIMap_2_HSTRING_IInspectableWrapper.IID
            iids[5] = test_component.__x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectableWrapper.IID
            $1!.pointee = 6
            $2!.pointee = iids
            return S_OK
        },

        GetRuntimeClassName: {
            _ = $0
            let hstring = try! HString("Windows.Foundation.Collections.IPropertySet").detach()
            $1!.pointee = hstring
            return S_OK
        },

        GetTrustLevel: {
            _ = $0
            $1!.pointee = TrustLevel(rawValue: 0)
            return S_OK
        }
    )

    public typealias IPropertySetWrapper = InterfaceWrapperBase<__IMPL_Windows_Foundation_Collections.IPropertySetBridge>
}
@_spi(WinRTInternal)
public class IPropertySetMaker: MakeFromAbi {
    public typealias SwiftType = AnyIPropertySet
    public static func from(abi: test_component.IInspectable) -> SwiftType {
        let swiftAbi: __ABI_Windows_Foundation_Collections.IPropertySet = try! abi.QueryInterface()
        return __IMPL_Windows_Foundation_Collections.IPropertySetBridge.from(abi: RawPointer(swiftAbi))!
    }
}

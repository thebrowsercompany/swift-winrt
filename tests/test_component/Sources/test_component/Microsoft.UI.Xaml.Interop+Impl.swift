// WARNING: Please don't edit this file. It was generated by Swift/WinRT v0.0.1
import Ctest_component

public enum __IMPL_Microsoft_UI_Xaml_Interop {
    public class IBindableVectorImpl : IBindableVector, WinRTAbiBridge {
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CInterop_CIBindableVector
        public typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Interop.IBindableVector
        public typealias SwiftProjection = AnyIBindableVector
        private (set) public var _default: SwiftABI
        public var thisPtr: test_component.IInspectable { _default }
        public static func from(abi: UnsafeMutablePointer<CABI>?) -> SwiftProjection? {
            guard let abi = abi else { return nil }
            return IBindableVectorImpl(abi)
        }
        public init(_ fromAbi: UnsafeMutablePointer<CABI>) {
            _default = SwiftABI(fromAbi)
        }

        public static func makeAbi() -> CABI {
            let vtblPtr = withUnsafeMutablePointer(to: &__ABI_Microsoft_UI_Xaml_Interop.IBindableVectorVTable) { $0 }
            return .init(lpVtbl: vtblPtr)
        }
        public func getAt(_ index: UInt32) throws -> Any! {
            let result = try _default.GetAtImpl(index)
            return __ABI_.AnyWrapper.unwrapFrom(abi: result)
        }

        public var size : UInt32 {
            get {
                let value = try! _default.get_SizeImpl()
                return value
            }

        }

    }

    public class INotifyCollectionChangedImpl : INotifyCollectionChanged, WinRTAbiBridge {
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CInterop_CINotifyCollectionChanged
        public typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Interop.INotifyCollectionChanged
        public typealias SwiftProjection = AnyINotifyCollectionChanged
        private (set) public var _default: SwiftABI
        public var thisPtr: test_component.IInspectable { _default }
        public static func from(abi: UnsafeMutablePointer<CABI>?) -> SwiftProjection? {
            guard let abi = abi else { return nil }
            return INotifyCollectionChangedImpl(abi)
        }
        public init(_ fromAbi: UnsafeMutablePointer<CABI>) {
            _default = SwiftABI(fromAbi)
        }

        public static func makeAbi() -> CABI {
            let vtblPtr = withUnsafeMutablePointer(to: &__ABI_Microsoft_UI_Xaml_Interop.INotifyCollectionChangedVTable) { $0 }
            return .init(lpVtbl: vtblPtr)
        }
        public lazy var collectionChanged : Event<NotifyCollectionChangedEventHandler> = {
          .init(
            add: { [weak this = _default] in
              guard let this else { return .init() }
              let wrapper = __ABI_Microsoft_UI_Xaml_Interop.NotifyCollectionChangedEventHandlerWrapper($0)
              let abi = try! wrapper?.toABI { $0 }
              return try! this.add_CollectionChangedImpl(abi)
            },
            remove: { [weak this = _default] in
             try? this?.remove_CollectionChangedImpl($0) 
           }
          )
        }()

    }

    public class NotifyCollectionChangedEventHandlerImpl : WinRTDelegateBridge {
        public typealias Handler = NotifyCollectionChangedEventHandler
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CInterop_CINotifyCollectionChangedEventHandler
        public typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Interop.NotifyCollectionChangedEventHandler

        public static func from(abi: UnsafeMutablePointer<CABI>?) -> SwiftProjection? {
            guard let abi = abi else { return nil }
            let _default = SwiftABI(abi)
            let handler: Handler = { (sender, args) in
                let senderWrapper = __ABI_.AnyWrapper(sender)
                let _sender = try! senderWrapper?.toABI { $0 }
                try! _default.InvokeImpl(_sender, RawPointer(args))
            }
            return handler
        }
    }
}
@_spi(__MakeFromAbi_DoNotImport)
public class IBindableVector_MakeFromAbi : MakeFromAbi {
    public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CInterop_CIBindableVector
    public typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Interop.IBindableVector
    public typealias SwiftProjection = AnyIBindableVector
    public static func from(abi: UnsafeMutableRawPointer?) -> SwiftProjection? {
        guard let abi else { return nil }
        let swiftAbi: SwiftABI = try! test_component.IInspectable(abi).QueryInterface()
        return __IMPL_Microsoft_UI_Xaml_Interop.IBindableVectorImpl(RawPointer(swiftAbi)!)
    }
}

@_spi(__MakeFromAbi_DoNotImport)
public class INotifyCollectionChanged_MakeFromAbi : MakeFromAbi {
    public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CInterop_CINotifyCollectionChanged
    public typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Interop.INotifyCollectionChanged
    public typealias SwiftProjection = AnyINotifyCollectionChanged
    public static func from(abi: UnsafeMutableRawPointer?) -> SwiftProjection? {
        guard let abi else { return nil }
        let swiftAbi: SwiftABI = try! test_component.IInspectable(abi).QueryInterface()
        return __IMPL_Microsoft_UI_Xaml_Interop.INotifyCollectionChangedImpl(RawPointer(swiftAbi)!)
    }
}


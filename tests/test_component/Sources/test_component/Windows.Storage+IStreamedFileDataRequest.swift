// WARNING: Please don't edit this file. It was generated by Swift/WinRT v0.0.1
// swiftlint:disable all
import Foundation
import Ctest_component

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.istreamedfiledatarequest)
public protocol IStreamedFileDataRequest : WinRTInterface {
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.istreamedfiledatarequest.failandclose)
    func failAndClose(_ failureMode: test_component.StreamedFileFailureMode) throws
}

extension IStreamedFileDataRequest {
    public func queryInterface(_ iid: test_component.IID) -> IUnknownRef? {
        switch iid {
            case __ABI_Windows_Storage.IStreamedFileDataRequestWrapper.IID:
                let wrapper = __ABI_Windows_Storage.IStreamedFileDataRequestWrapper(self)
                return wrapper!.queryInterface(iid)
            default: return nil
        }
    }
}
public typealias AnyIStreamedFileDataRequest = any IStreamedFileDataRequest

// MARK: - IStreamedFileDataRequest Internals

@_spi(WinRTInternal)
extension __IMPL_Windows_Storage {
    public enum IStreamedFileDataRequestBridge : AbiInterfaceBridge {
        public typealias CABI = __x_ABI_CWindows_CStorage_CIStreamedFileDataRequest
        public typealias SwiftABI = __ABI_Windows_Storage.IStreamedFileDataRequest
        public typealias SwiftProjection = AnyIStreamedFileDataRequest
        public static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
            guard let abi = abi else { return nil }
            return IStreamedFileDataRequestImpl(abi)
        }

        public static func makeAbi() -> CABI {
            let vtblPtr = withUnsafeMutablePointer(to: &__ABI_Windows_Storage.IStreamedFileDataRequestVTable) { $0 }
            return .init(lpVtbl: vtblPtr)
        }
    }

    fileprivate class IStreamedFileDataRequestImpl: IStreamedFileDataRequest, WinRTAbiImpl {
        fileprivate typealias Bridge = IStreamedFileDataRequestBridge
        fileprivate let _default: Bridge.SwiftABI
        fileprivate var thisPtr: test_component.IInspectable { _default }
        fileprivate init(_ fromAbi: ComPtr<Bridge.CABI>) {
            _default = Bridge.SwiftABI(fromAbi)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.istreamedfiledatarequest.failandclose)
        fileprivate func failAndClose(_ failureMode: StreamedFileFailureMode) throws {
            try _default.FailAndClose(failureMode)
        }

    }

}
@_spi(WinRTInternal)
extension __ABI_Windows_Storage {
    private static let IID___x_ABI_CWindows_CStorage_CIStreamedFileDataRequest: test_component.IID = .init(
        Data1: 0x1673FCCE, Data2: 0xDABD, Data3: 0x4D50, Data4: ( 0xBE,0xEE,0x18,0x0B,0x8A,0x81,0x91,0xB6 ) // 1673FCCE-DABD-4D50-BEEE-180B8A8191B6
    ) 

    public class IStreamedFileDataRequest: test_component.IInspectable {
        override public class var IID: test_component.IID { IID___x_ABI_CWindows_CStorage_CIStreamedFileDataRequest }

        open func FailAndClose(_ failureMode: test_component.StreamedFileFailureMode) throws {
            _ = try perform(as: __x_ABI_CWindows_CStorage_CIStreamedFileDataRequest.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.FailAndClose(pThis, failureMode))
            }
        }

    }

    internal static var IStreamedFileDataRequestVTable: __x_ABI_CWindows_CStorage_CIStreamedFileDataRequestVtbl = .init(
        QueryInterface: { IStreamedFileDataRequestWrapper.queryInterface($0, $1, $2) },
        AddRef: { IStreamedFileDataRequestWrapper.addRef($0) },
        Release: { IStreamedFileDataRequestWrapper.release($0) },
        GetIids: {
            let size = MemoryLayout<test_component.IID>.size
            let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: test_component.IID.self)
            iids[0] = IUnknown.IID
            iids[1] = IInspectable.IID
            iids[2] = __ABI_Windows_Storage.IStreamedFileDataRequestWrapper.IID
            $1!.pointee = 3
            $2!.pointee = iids
            return S_OK
        },

        GetRuntimeClassName: {
            _ = $0
            let hstring = try! HString("Windows.Storage.IStreamedFileDataRequest").detach()
            $1!.pointee = hstring
            return S_OK
        },

        GetTrustLevel: {
            _ = $0
            $1!.pointee = TrustLevel(rawValue: 0)
            return S_OK
        },

        FailAndClose: {
            do {
                guard let __unwrapped__instance = IStreamedFileDataRequestWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let failureMode: test_component.StreamedFileFailureMode = $1
                try __unwrapped__instance.failAndClose(failureMode)
                return S_OK
            } catch { return failWith(error: error) }
        }
    )

    public typealias IStreamedFileDataRequestWrapper = InterfaceWrapperBase<__IMPL_Windows_Storage.IStreamedFileDataRequestBridge>
}
@_spi(WinRTInternal)
public class IStreamedFileDataRequestMaker: MakeFromAbi {
    public typealias SwiftType = AnyIStreamedFileDataRequest
    public static func from(abi: test_component.IInspectable) -> SwiftType {
        let swiftAbi: __ABI_Windows_Storage.IStreamedFileDataRequest = try! abi.QueryInterface()
        return __IMPL_Windows_Storage.IStreamedFileDataRequestBridge.from(abi: RawPointer(swiftAbi))!
    }
}

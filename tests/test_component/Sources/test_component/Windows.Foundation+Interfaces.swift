// WARNING: Please don't edit this file. It was generated by Swift/WinRT v0.0.1
// swiftlint:disable all
import Foundation
import Ctest_component

// MARK: - IAsyncAction

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncaction)
public protocol IAsyncAction : IAsyncInfo {
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncaction.getresults)
    func getResults() throws
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncaction.completed)
    var completed: test_component.AsyncActionCompletedHandler! { get set }
}

extension IAsyncAction {
    public func queryInterface(_ iid: test_component.IID) -> IUnknownRef? {
        switch iid {
            case __ABI_Windows_Foundation.IAsyncActionWrapper.IID:
                let wrapper = __ABI_Windows_Foundation.IAsyncActionWrapper(self)
                return wrapper!.queryInterface(iid)
            case __ABI_Windows_Foundation.IAsyncInfoWrapper.IID:
                let wrapper = __ABI_Windows_Foundation.IAsyncInfoWrapper(self)
                return wrapper!.queryInterface(iid)
            default: return nil
        }
    }
}
public typealias AnyIAsyncAction = any IAsyncAction

public extension IAsyncAction {
    func get() async throws {
        if status == .started {
            let event = WaitableEvent()
            completed = { _, _ in
                Task { await event.signal() }
            }
            await event.wait()
        }
        return try getResults()
    }
}

// MARK: - IAsyncAction Internals

@_spi(WinRTInternal)
extension __IMPL_Windows_Foundation {
    public enum IAsyncActionBridge : AbiInterfaceBridge {
        public typealias CABI = __x_ABI_CWindows_CFoundation_CIAsyncAction
        public typealias SwiftABI = __ABI_Windows_Foundation.IAsyncAction
        public typealias SwiftProjection = AnyIAsyncAction
        public static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
            guard let abi = abi else { return nil }
            return IAsyncActionImpl(abi)
        }

        public static func makeAbi() -> CABI {
            let vtblPtr = withUnsafeMutablePointer(to: &__ABI_Windows_Foundation.IAsyncActionVTable) { $0 }
            return .init(lpVtbl: vtblPtr)
        }
    }

    fileprivate class IAsyncActionImpl: IAsyncAction, WinRTAbiImpl {
        fileprivate typealias Bridge = IAsyncActionBridge
        fileprivate let _default: Bridge.SwiftABI
        fileprivate var thisPtr: test_component.IInspectable { _default }
        fileprivate init(_ fromAbi: ComPtr<Bridge.CABI>) {
            _default = Bridge.SwiftABI(fromAbi)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncaction.getresults)
        fileprivate func getResults() throws {
            try _default.GetResults()
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncaction.completed)
        fileprivate var completed : AsyncActionCompletedHandler! {
            get { try! _default.get_Completed() }
            set { try! _default.put_Completed(newValue) }
        }

        private lazy var _IAsyncInfo: __ABI_Windows_Foundation.IAsyncInfo! = getInterfaceForCaching()
        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncaction.cancel)
        fileprivate func cancel() throws {
            try _IAsyncInfo.Cancel()
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncaction.close)
        fileprivate func close() throws {
            try _IAsyncInfo.Close()
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncaction.errorcode)
        fileprivate var errorCode : HRESULT {
            get { try! _IAsyncInfo.get_ErrorCode() }
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncaction.id)
        fileprivate var id : UInt32 {
            get { try! _IAsyncInfo.get_Id() }
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncaction.status)
        fileprivate var status : AsyncStatus {
            get { try! _IAsyncInfo.get_Status() }
        }

    }

}
@_spi(WinRTInternal)
extension __ABI_Windows_Foundation {
    private static let IID___x_ABI_CWindows_CFoundation_CIAsyncAction: test_component.IID = .init(
        Data1: 0x5A648006, Data2: 0x843A, Data3: 0x4DA9, Data4: ( 0x86,0x5B,0x9D,0x26,0xE5,0xDF,0xAD,0x7B ) // 5A648006-843A-4DA9-865B-9D26E5DFAD7B
    ) 

    public class IAsyncAction: test_component.IInspectable {
        override public class var IID: test_component.IID { IID___x_ABI_CWindows_CFoundation_CIAsyncAction }

        open func put_Completed(_ handler: test_component.AsyncActionCompletedHandler?) throws {
            let handlerWrapper = __ABI_Windows_Foundation.AsyncActionCompletedHandlerWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CWindows_CFoundation_CIAsyncAction.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Completed(pThis, _handler))
            }
        }

        open func get_Completed() throws -> test_component.AsyncActionCompletedHandler? {
            let (handler) = try ComPtrs.initialize { handlerAbi in
                _ = try perform(as: __x_ABI_CWindows_CFoundation_CIAsyncAction.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Completed(pThis, &handlerAbi))
                }
            }
            return __ABI_Windows_Foundation.AsyncActionCompletedHandlerWrapper.unwrapFrom(abi: handler)
        }

        open func GetResults() throws {
            _ = try perform(as: __x_ABI_CWindows_CFoundation_CIAsyncAction.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetResults(pThis))
            }
        }

    }

    internal static var IAsyncActionVTable: __x_ABI_CWindows_CFoundation_CIAsyncActionVtbl = .init(
        QueryInterface: { IAsyncActionWrapper.queryInterface($0, $1, $2) },
        AddRef: { IAsyncActionWrapper.addRef($0) },
        Release: { IAsyncActionWrapper.release($0) },
        GetIids: {
            let size = MemoryLayout<test_component.IID>.size
            let iids = CoTaskMemAlloc(UInt64(size) * 4).assumingMemoryBound(to: test_component.IID.self)
            iids[0] = IUnknown.IID
            iids[1] = IInspectable.IID
            iids[2] = __ABI_Windows_Foundation.IAsyncActionWrapper.IID
            iids[3] = __ABI_Windows_Foundation.IAsyncInfoWrapper.IID
            $1!.pointee = 4
            $2!.pointee = iids
            return S_OK
        },

        GetRuntimeClassName: {
            _ = $0
            let hstring = try! HString("Windows.Foundation.IAsyncAction").detach()
            $1!.pointee = hstring
            return S_OK
        },

        GetTrustLevel: {
            _ = $0
            $1!.pointee = TrustLevel(rawValue: 0)
            return S_OK
        },

        put_Completed: {
            guard let __unwrapped__instance = IAsyncActionWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            guard let handler = __ABI_Windows_Foundation.AsyncActionCompletedHandlerWrapper.unwrapFrom(abi: ComPtr($1)) else { return E_INVALIDARG }
            __unwrapped__instance.completed = handler
            return S_OK
        },

        get_Completed: {
            guard let __unwrapped__instance = IAsyncActionWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let handler = __unwrapped__instance.completed
            let handlerWrapper = __ABI_Windows_Foundation.AsyncActionCompletedHandlerWrapper(handler)
            handlerWrapper?.copyTo($1)
            return S_OK
        },

        GetResults: {
            do {
                guard let __unwrapped__instance = IAsyncActionWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                try __unwrapped__instance.getResults()
                return S_OK
            } catch { return failWith(error: error) }
        }
    )

    public typealias IAsyncActionWrapper = InterfaceWrapperBase<__IMPL_Windows_Foundation.IAsyncActionBridge>
}
@_spi(WinRTInternal)
public class IAsyncActionMaker: MakeFromAbi {
    public typealias SwiftType = AnyIAsyncAction
    public static func from(abi: test_component.IInspectable) -> SwiftType {
        let swiftAbi: __ABI_Windows_Foundation.IAsyncAction = try! abi.QueryInterface()
        return __IMPL_Windows_Foundation.IAsyncActionBridge.from(abi: RawPointer(swiftAbi))!
    }
}
// MARK: - IAsyncInfo

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncinfo)
public protocol IAsyncInfo : WinRTInterface {
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncinfo.cancel)
    func cancel() throws
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncinfo.close)
    func close() throws
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncinfo.errorcode)
    var errorCode: HRESULT { get }
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncinfo.id)
    var id: UInt32 { get }
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncinfo.status)
    var status: test_component.AsyncStatus { get }
}

extension IAsyncInfo {
    public func queryInterface(_ iid: test_component.IID) -> IUnknownRef? {
        switch iid {
            case __ABI_Windows_Foundation.IAsyncInfoWrapper.IID:
                let wrapper = __ABI_Windows_Foundation.IAsyncInfoWrapper(self)
                return wrapper!.queryInterface(iid)
            default: return nil
        }
    }
}
public typealias AnyIAsyncInfo = any IAsyncInfo

// MARK: - IAsyncInfo Internals

@_spi(WinRTInternal)
extension __IMPL_Windows_Foundation {
    public enum IAsyncInfoBridge : AbiInterfaceBridge {
        public typealias CABI = __x_ABI_CWindows_CFoundation_CIAsyncInfo
        public typealias SwiftABI = __ABI_Windows_Foundation.IAsyncInfo
        public typealias SwiftProjection = AnyIAsyncInfo
        public static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
            guard let abi = abi else { return nil }
            return IAsyncInfoImpl(abi)
        }

        public static func makeAbi() -> CABI {
            let vtblPtr = withUnsafeMutablePointer(to: &__ABI_Windows_Foundation.IAsyncInfoVTable) { $0 }
            return .init(lpVtbl: vtblPtr)
        }
    }

    fileprivate class IAsyncInfoImpl: IAsyncInfo, WinRTAbiImpl {
        fileprivate typealias Bridge = IAsyncInfoBridge
        fileprivate let _default: Bridge.SwiftABI
        fileprivate var thisPtr: test_component.IInspectable { _default }
        fileprivate init(_ fromAbi: ComPtr<Bridge.CABI>) {
            _default = Bridge.SwiftABI(fromAbi)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncinfo.cancel)
        fileprivate func cancel() throws {
            try _default.Cancel()
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncinfo.close)
        fileprivate func close() throws {
            try _default.Close()
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncinfo.errorcode)
        fileprivate var errorCode : HRESULT {
            get { try! _default.get_ErrorCode() }
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncinfo.id)
        fileprivate var id : UInt32 {
            get { try! _default.get_Id() }
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncinfo.status)
        fileprivate var status : AsyncStatus {
            get { try! _default.get_Status() }
        }

    }

}
@_spi(WinRTInternal)
extension __ABI_Windows_Foundation {
    private static let IID___x_ABI_CWindows_CFoundation_CIAsyncInfo: test_component.IID = .init(
        Data1: 0x00000036, Data2: 0x0000, Data3: 0x0000, Data4: ( 0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x46 ) // 00000036-0000-0000-C000-000000000046
    ) 

    public class IAsyncInfo: test_component.IInspectable {
        override public class var IID: test_component.IID { IID___x_ABI_CWindows_CFoundation_CIAsyncInfo }

        open func get_Id() throws -> UInt32 {
            var result: UINT32 = 0
            _ = try perform(as: __x_ABI_CWindows_CFoundation_CIAsyncInfo.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Id(pThis, &result))
            }
            return result
        }

        open func get_Status() throws -> test_component.AsyncStatus {
            var result: __x_ABI_CWindows_CFoundation_CAsyncStatus = .init(0)
            _ = try perform(as: __x_ABI_CWindows_CFoundation_CIAsyncInfo.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Status(pThis, &result))
            }
            return result
        }

        open func get_ErrorCode() throws -> HRESULT {
            var result: HRESULT = 0
            _ = try perform(as: __x_ABI_CWindows_CFoundation_CIAsyncInfo.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ErrorCode(pThis, &result))
            }
            return result
        }

        open func Cancel() throws {
            _ = try perform(as: __x_ABI_CWindows_CFoundation_CIAsyncInfo.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Cancel(pThis))
            }
        }

        open func Close() throws {
            _ = try perform(as: __x_ABI_CWindows_CFoundation_CIAsyncInfo.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Close(pThis))
            }
        }

    }

    internal static var IAsyncInfoVTable: __x_ABI_CWindows_CFoundation_CIAsyncInfoVtbl = .init(
        QueryInterface: { IAsyncInfoWrapper.queryInterface($0, $1, $2) },
        AddRef: { IAsyncInfoWrapper.addRef($0) },
        Release: { IAsyncInfoWrapper.release($0) },
        GetIids: {
            let size = MemoryLayout<test_component.IID>.size
            let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: test_component.IID.self)
            iids[0] = IUnknown.IID
            iids[1] = IInspectable.IID
            iids[2] = __ABI_Windows_Foundation.IAsyncInfoWrapper.IID
            $1!.pointee = 3
            $2!.pointee = iids
            return S_OK
        },

        GetRuntimeClassName: {
            _ = $0
            let hstring = try! HString("Windows.Foundation.IAsyncInfo").detach()
            $1!.pointee = hstring
            return S_OK
        },

        GetTrustLevel: {
            _ = $0
            $1!.pointee = TrustLevel(rawValue: 0)
            return S_OK
        },

        get_Id: {
            guard let __unwrapped__instance = IAsyncInfoWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let result = __unwrapped__instance.id
            $1?.initialize(to: result)
            return S_OK
        },

        get_Status: {
            guard let __unwrapped__instance = IAsyncInfoWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let result = __unwrapped__instance.status
            $1?.initialize(to: result)
            return S_OK
        },

        get_ErrorCode: {
            guard let __unwrapped__instance = IAsyncInfoWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let result = __unwrapped__instance.errorCode
            $1?.initialize(to: result)
            return S_OK
        },

        Cancel: {
            do {
                guard let __unwrapped__instance = IAsyncInfoWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                try __unwrapped__instance.cancel()
                return S_OK
            } catch { return failWith(error: error) }
        },

        Close: {
            do {
                guard let __unwrapped__instance = IAsyncInfoWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                try __unwrapped__instance.close()
                return S_OK
            } catch { return failWith(error: error) }
        }
    )

    public typealias IAsyncInfoWrapper = InterfaceWrapperBase<__IMPL_Windows_Foundation.IAsyncInfoBridge>
}
@_spi(WinRTInternal)
public class IAsyncInfoMaker: MakeFromAbi {
    public typealias SwiftType = AnyIAsyncInfo
    public static func from(abi: test_component.IInspectable) -> SwiftType {
        let swiftAbi: __ABI_Windows_Foundation.IAsyncInfo = try! abi.QueryInterface()
        return __IMPL_Windows_Foundation.IAsyncInfoBridge.from(abi: RawPointer(swiftAbi))!
    }
}
// MARK: - IAsyncOperationWithProgress`2

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperationwithprogress-2)
public protocol IAsyncOperationWithProgress<TResult,TProgress> : IAsyncInfo {
    associatedtype TResult
    associatedtype TProgress
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperationwithprogress-2.getresults)
    func getResults() throws -> TResult
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperationwithprogress-2.progress)
    var progress: test_component.AsyncOperationProgressHandler<TResult, TProgress>? { get set }
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperationwithprogress-2.completed)
    var completed: test_component.AsyncOperationWithProgressCompletedHandler<TResult, TProgress>? { get set }
}

public typealias AnyIAsyncOperationWithProgress<TResult,TProgress> = any IAsyncOperationWithProgress<TResult,TProgress>

public extension IAsyncOperationWithProgress {
    func get() async throws -> TResult {
        if status == .started {
            let event = WaitableEvent()
            completed = { _, _ in
                Task { await event.signal() }
            }
            await event.wait()
        }
        return try getResults()
    }
}

// MARK: - IAsyncOperationWithProgress Internals

@_spi(WinRTInternal)
extension __IMPL_Windows_Foundation {
}
@_spi(WinRTInternal)
extension __ABI_Windows_Foundation {
    private static let IID___x_ABI_C__FIAsyncOperationWithProgress_2_TResult_TProgress: test_component.IID = .init(
        Data1: 0xB5D036D7, Data2: 0xE297, Data3: 0x498F, Data4: ( 0xBA,0x60,0x02,0x89,0xE7,0x6E,0x23,0xDD ) // B5D036D7-E297-498F-BA60-0289E76E23DD
    ) 

}
// MARK: - IAsyncOperation`1

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1)
public protocol IAsyncOperation<TResult> : IAsyncInfo {
    associatedtype TResult
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.getresults)
    func getResults() throws -> TResult
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.completed)
    var completed: test_component.AsyncOperationCompletedHandler<TResult>? { get set }
}

public typealias AnyIAsyncOperation<TResult> = any IAsyncOperation<TResult>

public extension IAsyncOperation {
    func get() async throws -> TResult {
        if status == .started {
            let event = WaitableEvent()
            completed = { _, _ in
                Task { await event.signal() }
            }
            await event.wait()
        }
        return try getResults()
    }
}

// MARK: - IAsyncOperation Internals

@_spi(WinRTInternal)
extension __IMPL_Windows_Foundation {
}
@_spi(WinRTInternal)
extension __ABI_Windows_Foundation {
    private static let IID___x_ABI_C__FIAsyncOperation_1_TResult: test_component.IID = .init(
        Data1: 0x9FC2B0BB, Data2: 0xE446, Data3: 0x44E2, Data4: ( 0xAA,0x61,0x9C,0xAB,0x8F,0x63,0x6A,0xF2 ) // 9FC2B0BB-E446-44E2-AA61-9CAB8F636AF2
    ) 

}
// MARK: - IClosable

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iclosable)
public protocol IClosable : WinRTInterface {
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iclosable.close)
    func close() throws
}

extension IClosable {
    public func queryInterface(_ iid: test_component.IID) -> IUnknownRef? {
        switch iid {
            case __ABI_Windows_Foundation.IClosableWrapper.IID:
                let wrapper = __ABI_Windows_Foundation.IClosableWrapper(self)
                return wrapper!.queryInterface(iid)
            default: return nil
        }
    }
}
public typealias AnyIClosable = any IClosable

// MARK: - IClosable Internals

@_spi(WinRTInternal)
extension __IMPL_Windows_Foundation {
    public enum IClosableBridge : AbiInterfaceBridge {
        public typealias CABI = __x_ABI_CWindows_CFoundation_CIClosable
        public typealias SwiftABI = __ABI_Windows_Foundation.IClosable
        public typealias SwiftProjection = AnyIClosable
        public static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
            guard let abi = abi else { return nil }
            return IClosableImpl(abi)
        }

        public static func makeAbi() -> CABI {
            let vtblPtr = withUnsafeMutablePointer(to: &__ABI_Windows_Foundation.IClosableVTable) { $0 }
            return .init(lpVtbl: vtblPtr)
        }
    }

    fileprivate class IClosableImpl: IClosable, WinRTAbiImpl {
        fileprivate typealias Bridge = IClosableBridge
        fileprivate let _default: Bridge.SwiftABI
        fileprivate var thisPtr: test_component.IInspectable { _default }
        fileprivate init(_ fromAbi: ComPtr<Bridge.CABI>) {
            _default = Bridge.SwiftABI(fromAbi)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iclosable.close)
        fileprivate func close() throws {
            try _default.Close()
        }

    }

}
@_spi(WinRTInternal)
extension __ABI_Windows_Foundation {
    private static let IID___x_ABI_CWindows_CFoundation_CIClosable: test_component.IID = .init(
        Data1: 0x30D5A829, Data2: 0x7FA4, Data3: 0x4026, Data4: ( 0x83,0xBB,0xD7,0x5B,0xAE,0x4E,0xA9,0x9E ) // 30D5A829-7FA4-4026-83BB-D75BAE4EA99E
    ) 

    public class IClosable: test_component.IInspectable {
        override public class var IID: test_component.IID { IID___x_ABI_CWindows_CFoundation_CIClosable }

        open func Close() throws {
            _ = try perform(as: __x_ABI_CWindows_CFoundation_CIClosable.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Close(pThis))
            }
        }

    }

    internal static var IClosableVTable: __x_ABI_CWindows_CFoundation_CIClosableVtbl = .init(
        QueryInterface: { IClosableWrapper.queryInterface($0, $1, $2) },
        AddRef: { IClosableWrapper.addRef($0) },
        Release: { IClosableWrapper.release($0) },
        GetIids: {
            let size = MemoryLayout<test_component.IID>.size
            let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: test_component.IID.self)
            iids[0] = IUnknown.IID
            iids[1] = IInspectable.IID
            iids[2] = __ABI_Windows_Foundation.IClosableWrapper.IID
            $1!.pointee = 3
            $2!.pointee = iids
            return S_OK
        },

        GetRuntimeClassName: {
            _ = $0
            let hstring = try! HString("Windows.Foundation.IClosable").detach()
            $1!.pointee = hstring
            return S_OK
        },

        GetTrustLevel: {
            _ = $0
            $1!.pointee = TrustLevel(rawValue: 0)
            return S_OK
        },

        Close: {
            do {
                guard let __unwrapped__instance = IClosableWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                try __unwrapped__instance.close()
                return S_OK
            } catch { return failWith(error: error) }
        }
    )

    public typealias IClosableWrapper = InterfaceWrapperBase<__IMPL_Windows_Foundation.IClosableBridge>
}
@_spi(WinRTInternal)
public class IClosableMaker: MakeFromAbi {
    public typealias SwiftType = AnyIClosable
    public static func from(abi: test_component.IInspectable) -> SwiftType {
        let swiftAbi: __ABI_Windows_Foundation.IClosable = try! abi.QueryInterface()
        return __IMPL_Windows_Foundation.IClosableBridge.from(abi: RawPointer(swiftAbi))!
    }
}
// MARK: - IMemoryBuffer

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.imemorybuffer)
public protocol IMemoryBuffer : IClosable {
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.imemorybuffer.createreference)
    func createReference() throws -> test_component.AnyIMemoryBufferReference!
}

extension IMemoryBuffer {
    public func queryInterface(_ iid: test_component.IID) -> IUnknownRef? {
        switch iid {
            case __ABI_Windows_Foundation.IMemoryBufferWrapper.IID:
                let wrapper = __ABI_Windows_Foundation.IMemoryBufferWrapper(self)
                return wrapper!.queryInterface(iid)
            case __ABI_Windows_Foundation.IClosableWrapper.IID:
                let wrapper = __ABI_Windows_Foundation.IClosableWrapper(self)
                return wrapper!.queryInterface(iid)
            default: return nil
        }
    }
}
public typealias AnyIMemoryBuffer = any IMemoryBuffer

// MARK: - IMemoryBuffer Internals

@_spi(WinRTInternal)
extension __IMPL_Windows_Foundation {
    public enum IMemoryBufferBridge : AbiInterfaceBridge {
        public typealias CABI = __x_ABI_CWindows_CFoundation_CIMemoryBuffer
        public typealias SwiftABI = __ABI_Windows_Foundation.IMemoryBuffer
        public typealias SwiftProjection = AnyIMemoryBuffer
        public static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
            guard let abi = abi else { return nil }
            return IMemoryBufferImpl(abi)
        }

        public static func makeAbi() -> CABI {
            let vtblPtr = withUnsafeMutablePointer(to: &__ABI_Windows_Foundation.IMemoryBufferVTable) { $0 }
            return .init(lpVtbl: vtblPtr)
        }
    }

    fileprivate class IMemoryBufferImpl: IMemoryBuffer, WinRTAbiImpl {
        fileprivate typealias Bridge = IMemoryBufferBridge
        fileprivate let _default: Bridge.SwiftABI
        fileprivate var thisPtr: test_component.IInspectable { _default }
        fileprivate init(_ fromAbi: ComPtr<Bridge.CABI>) {
            _default = Bridge.SwiftABI(fromAbi)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.imemorybuffer.createreference)
        fileprivate func createReference() throws -> AnyIMemoryBufferReference! {
            try _default.CreateReference()
        }

        private lazy var _IClosable: __ABI_Windows_Foundation.IClosable! = getInterfaceForCaching()
        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.imemorybuffer.close)
        fileprivate func close() throws {
            try _IClosable.Close()
        }

    }

}
@_spi(WinRTInternal)
extension __ABI_Windows_Foundation {
    private static let IID___x_ABI_CWindows_CFoundation_CIMemoryBuffer: test_component.IID = .init(
        Data1: 0xFBC4DD2A, Data2: 0x245B, Data3: 0x11E4, Data4: ( 0xAF,0x98,0x68,0x94,0x23,0x26,0x0C,0xF8 ) // FBC4DD2A-245B-11E4-AF98-689423260CF8
    ) 

    public class IMemoryBuffer: test_component.IInspectable {
        override public class var IID: test_component.IID { IID___x_ABI_CWindows_CFoundation_CIMemoryBuffer }

        open func CreateReference() throws -> test_component.AnyIMemoryBufferReference? {
            let (reference) = try ComPtrs.initialize { referenceAbi in
                _ = try perform(as: __x_ABI_CWindows_CFoundation_CIMemoryBuffer.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateReference(pThis, &referenceAbi))
                }
            }
            return __ABI_Windows_Foundation.IMemoryBufferReferenceWrapper.unwrapFrom(abi: reference)
        }

    }

    internal static var IMemoryBufferVTable: __x_ABI_CWindows_CFoundation_CIMemoryBufferVtbl = .init(
        QueryInterface: { IMemoryBufferWrapper.queryInterface($0, $1, $2) },
        AddRef: { IMemoryBufferWrapper.addRef($0) },
        Release: { IMemoryBufferWrapper.release($0) },
        GetIids: {
            let size = MemoryLayout<test_component.IID>.size
            let iids = CoTaskMemAlloc(UInt64(size) * 4).assumingMemoryBound(to: test_component.IID.self)
            iids[0] = IUnknown.IID
            iids[1] = IInspectable.IID
            iids[2] = __ABI_Windows_Foundation.IMemoryBufferWrapper.IID
            iids[3] = __ABI_Windows_Foundation.IClosableWrapper.IID
            $1!.pointee = 4
            $2!.pointee = iids
            return S_OK
        },

        GetRuntimeClassName: {
            _ = $0
            let hstring = try! HString("Windows.Foundation.IMemoryBuffer").detach()
            $1!.pointee = hstring
            return S_OK
        },

        GetTrustLevel: {
            _ = $0
            $1!.pointee = TrustLevel(rawValue: 0)
            return S_OK
        },

        CreateReference: {
            do {
                guard let __unwrapped__instance = IMemoryBufferWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let reference = try __unwrapped__instance.createReference()
                let referenceWrapper = __ABI_Windows_Foundation.IMemoryBufferReferenceWrapper(reference)
                referenceWrapper?.copyTo($1)
                return S_OK
            } catch { return failWith(error: error) }
        }
    )

    public typealias IMemoryBufferWrapper = InterfaceWrapperBase<__IMPL_Windows_Foundation.IMemoryBufferBridge>
}
@_spi(WinRTInternal)
public class IMemoryBufferMaker: MakeFromAbi {
    public typealias SwiftType = AnyIMemoryBuffer
    public static func from(abi: test_component.IInspectable) -> SwiftType {
        let swiftAbi: __ABI_Windows_Foundation.IMemoryBuffer = try! abi.QueryInterface()
        return __IMPL_Windows_Foundation.IMemoryBufferBridge.from(abi: RawPointer(swiftAbi))!
    }
}
// MARK: - IMemoryBufferReference

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.imemorybufferreference)
public protocol IMemoryBufferReference : IClosable, IMemoryBufferByteAccess {
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.imemorybufferreference.capacity)
    var capacity: UInt32 { get }
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.imemorybufferreference.closed)
    var closed: Event<TypedEventHandler<IMemoryBufferReference?, Any?>> { get }
}

extension IMemoryBufferReference {
    public func queryInterface(_ iid: test_component.IID) -> IUnknownRef? {
        switch iid {
            case __ABI_Windows_Foundation.IMemoryBufferReferenceWrapper.IID:
                let wrapper = __ABI_Windows_Foundation.IMemoryBufferReferenceWrapper(self)
                return wrapper!.queryInterface(iid)
            case __ABI_Windows_Foundation.IClosableWrapper.IID:
                let wrapper = __ABI_Windows_Foundation.IClosableWrapper(self)
                return wrapper!.queryInterface(iid)
            case __ABI_.IMemoryBufferByteAccessWrapper.IID:
                let wrapper = __ABI_.IMemoryBufferByteAccessWrapper(self)
                return wrapper!.queryInterface(iid)
            default: return nil
        }
    }
}
extension IMemoryBufferReference {
    public var data: Data {
        guard let buffer = try? buffer, let ptr = buffer.baseAddress else { return Data() }
        return Data(bytesNoCopy: ptr, count: buffer.count, deallocator: .none)
    }
}
public typealias AnyIMemoryBufferReference = any IMemoryBufferReference

// MARK: - IMemoryBufferReference Internals

@_spi(WinRTInternal)
extension __IMPL_Windows_Foundation {
    public enum IMemoryBufferReferenceBridge : AbiInterfaceBridge {
        public typealias CABI = __x_ABI_CWindows_CFoundation_CIMemoryBufferReference
        public typealias SwiftABI = __ABI_Windows_Foundation.IMemoryBufferReference
        public typealias SwiftProjection = AnyIMemoryBufferReference
        public static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
            guard let abi = abi else { return nil }
            return IMemoryBufferReferenceImpl(abi)
        }

        public static func makeAbi() -> CABI {
            let vtblPtr = withUnsafeMutablePointer(to: &__ABI_Windows_Foundation.IMemoryBufferReferenceVTable) { $0 }
            return .init(lpVtbl: vtblPtr)
        }
    }

    fileprivate class IMemoryBufferReferenceImpl: IMemoryBufferReference, WinRTAbiImpl {
        fileprivate typealias Bridge = IMemoryBufferReferenceBridge
        fileprivate let _default: Bridge.SwiftABI
        fileprivate var thisPtr: test_component.IInspectable { _default }
        fileprivate init(_ fromAbi: ComPtr<Bridge.CABI>) {
            _default = Bridge.SwiftABI(fromAbi)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.imemorybufferreference.capacity)
        fileprivate var capacity : UInt32 {
            get { try! _default.get_Capacity() }
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.imemorybufferreference.closed)
        fileprivate lazy var closed : Event<TypedEventHandler<IMemoryBufferReference?, Any?>> = {
          .init(
            add: { [weak self] in
              guard let this = self?._default else { return .init() }
              return try! this.add_Closed($0)
            },
            remove: { [weak self] in
             try? self?._default.remove_Closed($0)
           }
          )
        }()

        private lazy var _IClosable: __ABI_Windows_Foundation.IClosable! = getInterfaceForCaching()
        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.imemorybufferreference.close)
        fileprivate func close() throws {
            try _IClosable.Close()
        }

        private lazy var _IMemoryBufferByteAccess: __ABI_.IMemoryBufferByteAccess! = getInterfaceForCaching()
        fileprivate var buffer: UnsafeMutableBufferPointer<UInt8>? {
            get throws {
                let bufferByteAccess: test_component.__ABI_.IMemoryBufferByteAccess = try _IMemoryBufferByteAccess.QueryInterface()
                return try bufferByteAccess.Buffer()
            }
        }
    }

}
@_spi(WinRTInternal)
extension __ABI_Windows_Foundation {
    private static let IID___x_ABI_CWindows_CFoundation_CIMemoryBufferReference: test_component.IID = .init(
        Data1: 0xFBC4DD29, Data2: 0x245B, Data3: 0x11E4, Data4: ( 0xAF,0x98,0x68,0x94,0x23,0x26,0x0C,0xF8 ) // FBC4DD29-245B-11E4-AF98-689423260CF8
    ) 

    public class IMemoryBufferReference: test_component.IInspectable {
        override public class var IID: test_component.IID { IID___x_ABI_CWindows_CFoundation_CIMemoryBufferReference }

        open func get_Capacity() throws -> UInt32 {
            var value: UINT32 = 0
            _ = try perform(as: __x_ABI_CWindows_CFoundation_CIMemoryBufferReference.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Capacity(pThis, &value))
            }
            return value
        }

        open func add_Closed(_ handler: TypedEventHandler<test_component.AnyIMemoryBufferReference?, Any?>?) throws -> EventRegistrationToken {
            var cookie: EventRegistrationToken = .init()
            let handlerWrapper = test_component.__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CFoundation__CIMemoryBufferReference_IInspectableWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CWindows_CFoundation_CIMemoryBufferReference.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_Closed(pThis, _handler, &cookie))
            }
            return cookie
        }

        open func remove_Closed(_ cookie: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CWindows_CFoundation_CIMemoryBufferReference.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_Closed(pThis, cookie))
            }
        }

    }

    internal static var IMemoryBufferReferenceVTable: __x_ABI_CWindows_CFoundation_CIMemoryBufferReferenceVtbl = .init(
        QueryInterface: { IMemoryBufferReferenceWrapper.queryInterface($0, $1, $2) },
        AddRef: { IMemoryBufferReferenceWrapper.addRef($0) },
        Release: { IMemoryBufferReferenceWrapper.release($0) },
        GetIids: {
            let size = MemoryLayout<test_component.IID>.size
            let iids = CoTaskMemAlloc(UInt64(size) * 5).assumingMemoryBound(to: test_component.IID.self)
            iids[0] = IUnknown.IID
            iids[1] = IInspectable.IID
            iids[2] = __ABI_Windows_Foundation.IMemoryBufferReferenceWrapper.IID
            iids[3] = __ABI_Windows_Foundation.IClosableWrapper.IID
            iids[4] = __ABI_.IMemoryBufferByteAccessWrapper.IID
            $1!.pointee = 5
            $2!.pointee = iids
            return S_OK
        },

        GetRuntimeClassName: {
            _ = $0
            let hstring = try! HString("Windows.Foundation.IMemoryBufferReference").detach()
            $1!.pointee = hstring
            return S_OK
        },

        GetTrustLevel: {
            _ = $0
            $1!.pointee = TrustLevel(rawValue: 0)
            return S_OK
        },

        get_Capacity: {
            guard let __unwrapped__instance = IMemoryBufferReferenceWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value = __unwrapped__instance.capacity
            $1?.initialize(to: value)
            return S_OK
        },

        add_Closed: {
            guard let __unwrapped__instance = IMemoryBufferReferenceWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            guard let handler = test_component.__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CFoundation__CIMemoryBufferReference_IInspectableWrapper.unwrapFrom(abi: ComPtr($1)) else { return E_INVALIDARG }
            let cookie = __unwrapped__instance.closed.addHandler(handler)
            $2?.initialize(to: .from(swift: cookie))
            return S_OK
        },

        remove_Closed: {
            guard let __unwrapped__instance = IMemoryBufferReferenceWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let cookie: EventRegistrationToken = $1
            __unwrapped__instance.closed.removeHandler(cookie)
            return S_OK
        }
    )

    public typealias IMemoryBufferReferenceWrapper = InterfaceWrapperBase<__IMPL_Windows_Foundation.IMemoryBufferReferenceBridge>
}
@_spi(WinRTInternal)
public class IMemoryBufferReferenceMaker: MakeFromAbi {
    public typealias SwiftType = AnyIMemoryBufferReference
    public static func from(abi: test_component.IInspectable) -> SwiftType {
        let swiftAbi: __ABI_Windows_Foundation.IMemoryBufferReference = try! abi.QueryInterface()
        return __IMPL_Windows_Foundation.IMemoryBufferReferenceBridge.from(abi: RawPointer(swiftAbi))!
    }
}
// MARK: - IPropertyValue

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.ipropertyvalue)
public protocol IPropertyValue : WinRTInterface {
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.ipropertyvalue.getuint8)
    func getUInt8() throws -> UInt8
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.ipropertyvalue.getint16)
    func getInt16() throws -> Int16
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.ipropertyvalue.getuint16)
    func getUInt16() throws -> UInt16
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.ipropertyvalue.getint32)
    func getInt32() throws -> Int32
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.ipropertyvalue.getuint32)
    func getUInt32() throws -> UInt32
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.ipropertyvalue.getint64)
    func getInt64() throws -> Int64
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.ipropertyvalue.getuint64)
    func getUInt64() throws -> UInt64
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.ipropertyvalue.getsingle)
    func getSingle() throws -> Float
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.ipropertyvalue.getdouble)
    func getDouble() throws -> Double
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.ipropertyvalue.getchar16)
    func getChar16() throws -> Character
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.ipropertyvalue.getboolean)
    func getBoolean() throws -> Bool
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.ipropertyvalue.getstring)
    func getString() throws -> String
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.ipropertyvalue.getguid)
    func getGuid() throws -> Foundation.UUID
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.ipropertyvalue.getdatetime)
    func getDateTime() throws -> test_component.DateTime
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.ipropertyvalue.gettimespan)
    func getTimeSpan() throws -> test_component.TimeSpan
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.ipropertyvalue.getpoint)
    func getPoint() throws -> test_component.Point
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.ipropertyvalue.getsize)
    func getSize() throws -> test_component.Size
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.ipropertyvalue.getrect)
    func getRect() throws -> test_component.Rect
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.ipropertyvalue.getuint8array)
    func getUInt8Array(_ value: inout [UInt8]) throws
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.ipropertyvalue.getint16array)
    func getInt16Array(_ value: inout [Int16]) throws
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.ipropertyvalue.getuint16array)
    func getUInt16Array(_ value: inout [UInt16]) throws
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.ipropertyvalue.getint32array)
    func getInt32Array(_ value: inout [Int32]) throws
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.ipropertyvalue.getuint32array)
    func getUInt32Array(_ value: inout [UInt32]) throws
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.ipropertyvalue.getint64array)
    func getInt64Array(_ value: inout [Int64]) throws
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.ipropertyvalue.getuint64array)
    func getUInt64Array(_ value: inout [UInt64]) throws
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.ipropertyvalue.getsinglearray)
    func getSingleArray(_ value: inout [Float]) throws
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.ipropertyvalue.getdoublearray)
    func getDoubleArray(_ value: inout [Double]) throws
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.ipropertyvalue.getchar16array)
    func getChar16Array(_ value: inout [Character]) throws
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.ipropertyvalue.getbooleanarray)
    func getBooleanArray(_ value: inout [Bool]) throws
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.ipropertyvalue.getstringarray)
    func getStringArray(_ value: inout [String]) throws
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.ipropertyvalue.getinspectablearray)
    func getInspectableArray(_ value: inout [Any?]) throws
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.ipropertyvalue.getguidarray)
    func getGuidArray(_ value: inout [Foundation.UUID]) throws
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.ipropertyvalue.getdatetimearray)
    func getDateTimeArray(_ value: inout [test_component.DateTime]) throws
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.ipropertyvalue.gettimespanarray)
    func getTimeSpanArray(_ value: inout [test_component.TimeSpan]) throws
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.ipropertyvalue.getpointarray)
    func getPointArray(_ value: inout [test_component.Point]) throws
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.ipropertyvalue.getsizearray)
    func getSizeArray(_ value: inout [test_component.Size]) throws
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.ipropertyvalue.getrectarray)
    func getRectArray(_ value: inout [test_component.Rect]) throws
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.ipropertyvalue.isnumericscalar)
    var isNumericScalar: Bool { get }
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.ipropertyvalue.type)
    var type: test_component.PropertyType { get }
}

public typealias AnyIPropertyValue = any IPropertyValue

// MARK: - IPropertyValue Internals

@_spi(WinRTInternal)
extension __IMPL_Windows_Foundation {
    public enum IPropertyValueBridge : AbiInterfaceBridge {
        public typealias CABI = __x_ABI_CWindows_CFoundation_CIPropertyValue
        public typealias SwiftABI = __ABI_Windows_Foundation.IPropertyValue
        public typealias SwiftProjection = AnyIPropertyValue
        public static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
            guard let abi = abi else { return nil }
            return IPropertyValueImpl(abi)
        }

        public static func makeAbi() -> CABI {
            let vtblPtr = withUnsafeMutablePointer(to: &__ABI_Windows_Foundation.IPropertyValueVTable) { $0 }
            return .init(lpVtbl: vtblPtr)
        }
    }

    public class IPropertyValueImpl : IPropertyValue, IReference {
        public typealias T = Any
        var _value: Any
        var propertyType : PropertyType

        fileprivate init(_ abi: ComPtr<__x_ABI_CWindows_CFoundation_CIPropertyValue>) { fatalError("not implemented") }
        public init(value: Any) {
            _value = value
            propertyType = switch value {
                case is UInt8: .uint8
                case is Int16: .int16
                case is UInt16: .uint16
                case is Int32: .int32
                case is UInt32: .uint32
                case is Int64: .int64
                case is UInt64: .uint64
                case is Float: .single
                case is Double: .double
                case is Character: .char16
                case is Bool: .boolean
                case is String: .string
                case is DateTime: .dateTime
                case is TimeSpan: .timeSpan
                case is Foundation.UUID: .guid
                case is Point: .point
                case is Size: .size
                case is Rect: .rect
                case is IWinRTObject: .inspectable
                case is IInspectable: .inspectable
                case is [UInt8]: .uint8Array
                case is [Int16]: .int16Array
                case is [UInt16]: .uint16Array
                case is [Int32]: .int32Array
                case is [UInt32]: .uint32Array
                case is [Int64]: .int64Array
                case is [UInt64]: .uint64Array
                case is [Float]: .singleArray
                case is [Double]: .doubleArray
                case is [Character]: .char16Array
                case is [Bool]: .booleanArray
                case is [String]: .stringArray
                case is [DateTime]: .dateTimeArray
                case is [TimeSpan]: .timeSpanArray
                case is [Foundation.UUID]: .guidArray
                case is [Point]: .pointArray
                case is [Size]: .sizeArray
                case is [Rect]: .rectArray
                case is [Any?]: .inspectableArray
                default: .otherType
                }
        }

        public var type: PropertyType { propertyType }
        public var isNumericScalar: Bool {
            switch propertyType {
                case .int16, .int32, .int64, .uint8, .uint16, .uint32, .uint64, .single, .double: return true
                default: return false
            }
        }

        public var value: Any { _value }

        public func getUInt8() -> UInt8 { _value as! UInt8 }
        public func getInt16() -> Int16 { _value as! Int16 }
        public func getUInt16() -> UInt16 { _value as! UInt16 }
        public func getInt32() -> Int32 { _value as! Int32 }
        public func getUInt32() -> UInt32 { _value as! UInt32 }
        public func getInt64() -> Int64 { _value as! Int64 }
        public func getUInt64() -> UInt64 { _value as! UInt64 }
        public func getSingle() -> Float { _value as! Float }
        public func getDouble() -> Double { _value as! Double }
        public func getChar16() -> Character { _value as! Character }
        public func getBoolean() -> Bool { _value as! Bool }
        public func getString() -> String { _value as! String }
        public func getGuid() -> Foundation.UUID { _value as! Foundation.UUID }
        public func getDateTime() -> DateTime { _value as! DateTime }
        public func getTimeSpan() -> TimeSpan { _value as! TimeSpan }
        public func getPoint() -> Point { _value as! Point }
        public func getSize() -> Size { _value as! Size }
        public func getRect() -> Rect { _value as! Rect }
        public func getUInt8Array(_ value: inout [UInt8]) { value = _value as! [UInt8] }
        public func getInt16Array(_ value: inout [Int16]) { value = _value as! [Int16] }
        public func getUInt16Array(_ value: inout [UInt16]) { value = _value as! [UInt16] }
        public func getInt32Array(_ value: inout [Int32]) { value = _value as! [Int32] }
        public func getUInt32Array(_ value: inout [UInt32])  { value = _value as! [UInt32] }
        public func getInt64Array(_ value: inout [Int64]) { value = _value as! [Int64] }
        public func getUInt64Array(_ value: inout [UInt64]) { value = _value as! [UInt64] }
        public func getSingleArray(_ value: inout [Float]) { value = _value as! [Float] }
        public func getDoubleArray(_ value: inout [Double]) { value = _value as! [Double] }
        public func getChar16Array(_ value: inout [Character]) { value = _value as! [Character] }
        public func getBooleanArray(_ value: inout [Bool]) { value = _value as! [Bool] }
        public func getStringArray(_ value: inout [String]) { value = _value as! [String] }
        public func getGuidArray(_ value: inout [Foundation.UUID]) { value = _value as! [Foundation.UUID] }
        public func getDateTimeArray(_ value: inout [DateTime]) { value = _value as! [DateTime] }
        public func getTimeSpanArray(_ value: inout [TimeSpan]) { value = _value as! [TimeSpan] }
        public func getPointArray(_ value: inout [Point]) { value = _value as! [Point] }
        public func getSizeArray(_ value: inout [Size]) { value = _value as! [Size] }
        public func getRectArray(_ value: inout [Rect]) { value = _value as! [Rect] }
        public func getInspectableArray(_ value: inout [Any?]) { value = _value as! [Any?] }
        
        public func queryInterface(_ iid: test_component.IID) -> IUnknownRef? {
            guard iid == __ABI_Windows_Foundation.IPropertyValueWrapper.IID else { return nil }
            guard let thisAsIPropValue = __ABI_Windows_Foundation.IPropertyValueWrapper(self) else { fatalError("creating non-nil wrapper shouldn't fail") }
            return thisAsIPropValue.queryInterface(iid)
        }

    }

}
@_spi(WinRTInternal)
extension __ABI_Windows_Foundation {
    private static let IID___x_ABI_CWindows_CFoundation_CIPropertyValue: test_component.IID = .init(
        Data1: 0x4BD682DD, Data2: 0x7554, Data3: 0x40E9, Data4: ( 0x9A,0x9B,0x82,0x65,0x4E,0xDE,0x7E,0x62 ) // 4BD682DD-7554-40E9-9A9B-82654EDE7E62
    ) 

    public class IPropertyValue: test_component.IInspectable {
        override public class var IID: test_component.IID { IID___x_ABI_CWindows_CFoundation_CIPropertyValue }

        open func get_Type() throws -> test_component.PropertyType {
            var value: __x_ABI_CWindows_CFoundation_CPropertyType = .init(0)
            _ = try perform(as: __x_ABI_CWindows_CFoundation_CIPropertyValue.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Type(pThis, &value))
            }
            return value
        }

        open func get_IsNumericScalar() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CWindows_CFoundation_CIPropertyValue.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsNumericScalar(pThis, &value))
            }
            return .init(from: value)
        }

        open func GetUInt8() throws -> UInt8 {
            var value: UINT8 = 0
            _ = try perform(as: __x_ABI_CWindows_CFoundation_CIPropertyValue.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetUInt8(pThis, &value))
            }
            return value
        }

        open func GetInt16() throws -> Int16 {
            var value: INT16 = 0
            _ = try perform(as: __x_ABI_CWindows_CFoundation_CIPropertyValue.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetInt16(pThis, &value))
            }
            return value
        }

        open func GetUInt16() throws -> UInt16 {
            var value: UINT16 = 0
            _ = try perform(as: __x_ABI_CWindows_CFoundation_CIPropertyValue.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetUInt16(pThis, &value))
            }
            return value
        }

        open func GetInt32() throws -> Int32 {
            var value: INT32 = 0
            _ = try perform(as: __x_ABI_CWindows_CFoundation_CIPropertyValue.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetInt32(pThis, &value))
            }
            return value
        }

        open func GetUInt32() throws -> UInt32 {
            var value: UINT32 = 0
            _ = try perform(as: __x_ABI_CWindows_CFoundation_CIPropertyValue.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetUInt32(pThis, &value))
            }
            return value
        }

        open func GetInt64() throws -> Int64 {
            var value: INT64 = 0
            _ = try perform(as: __x_ABI_CWindows_CFoundation_CIPropertyValue.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetInt64(pThis, &value))
            }
            return value
        }

        open func GetUInt64() throws -> UInt64 {
            var value: UINT64 = 0
            _ = try perform(as: __x_ABI_CWindows_CFoundation_CIPropertyValue.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetUInt64(pThis, &value))
            }
            return value
        }

        open func GetSingle() throws -> Float {
            var value: FLOAT = 0.0
            _ = try perform(as: __x_ABI_CWindows_CFoundation_CIPropertyValue.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetSingle(pThis, &value))
            }
            return value
        }

        open func GetDouble() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CWindows_CFoundation_CIPropertyValue.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetDouble(pThis, &value))
            }
            return value
        }

        open func GetChar16() throws -> Character {
            var value: WCHAR = 0
            _ = try perform(as: __x_ABI_CWindows_CFoundation_CIPropertyValue.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetChar16(pThis, &value))
            }
            return .init(from: value)
        }

        open func GetBoolean() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CWindows_CFoundation_CIPropertyValue.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetBoolean(pThis, &value))
            }
            return .init(from: value)
        }

        open func GetString() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CWindows_CFoundation_CIPropertyValue.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetString(pThis, &value))
            }
            return .init(from: value)
        }

        open func GetGuid() throws -> Foundation.UUID {
            var value: test_component.GUID = .init()
            _ = try perform(as: __x_ABI_CWindows_CFoundation_CIPropertyValue.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetGuid(pThis, &value))
            }
            return .init(from: value)
        }

        open func GetDateTime() throws -> test_component.DateTime {
            var value: __x_ABI_CWindows_CFoundation_CDateTime = .init()
            _ = try perform(as: __x_ABI_CWindows_CFoundation_CIPropertyValue.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetDateTime(pThis, &value))
            }
            return .from(abi: value)
        }

        open func GetTimeSpan() throws -> test_component.TimeSpan {
            var value: __x_ABI_CWindows_CFoundation_CTimeSpan = .init()
            _ = try perform(as: __x_ABI_CWindows_CFoundation_CIPropertyValue.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetTimeSpan(pThis, &value))
            }
            return .from(abi: value)
        }

        open func GetPoint() throws -> test_component.Point {
            var value: __x_ABI_CWindows_CFoundation_CPoint = .init()
            _ = try perform(as: __x_ABI_CWindows_CFoundation_CIPropertyValue.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetPoint(pThis, &value))
            }
            return .from(abi: value)
        }

        open func GetSize() throws -> test_component.Size {
            var value: __x_ABI_CWindows_CFoundation_CSize = .init()
            _ = try perform(as: __x_ABI_CWindows_CFoundation_CIPropertyValue.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetSize(pThis, &value))
            }
            return .from(abi: value)
        }

        open func GetRect() throws -> test_component.Rect {
            var value: __x_ABI_CWindows_CFoundation_CRect = .init()
            _ = try perform(as: __x_ABI_CWindows_CFoundation_CIPropertyValue.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetRect(pThis, &value))
            }
            return .from(abi: value)
        }

        open func GetUInt8Array(_ value: inout [UInt8]) throws {
            var _value: WinRTArrayAbi<UINT8> = (0, nil)
            _ = try perform(as: __x_ABI_CWindows_CFoundation_CIPropertyValue.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetUInt8Array(pThis, &_value.count, &_value.start))
            }
            defer { CoTaskMemFree(_value.start) }
            value = .from(abi: _value)
        }

        open func GetInt16Array(_ value: inout [Int16]) throws {
            var _value: WinRTArrayAbi<INT16> = (0, nil)
            _ = try perform(as: __x_ABI_CWindows_CFoundation_CIPropertyValue.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetInt16Array(pThis, &_value.count, &_value.start))
            }
            defer { CoTaskMemFree(_value.start) }
            value = .from(abi: _value)
        }

        open func GetUInt16Array(_ value: inout [UInt16]) throws {
            var _value: WinRTArrayAbi<UINT16> = (0, nil)
            _ = try perform(as: __x_ABI_CWindows_CFoundation_CIPropertyValue.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetUInt16Array(pThis, &_value.count, &_value.start))
            }
            defer { CoTaskMemFree(_value.start) }
            value = .from(abi: _value)
        }

        open func GetInt32Array(_ value: inout [Int32]) throws {
            var _value: WinRTArrayAbi<INT32> = (0, nil)
            _ = try perform(as: __x_ABI_CWindows_CFoundation_CIPropertyValue.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetInt32Array(pThis, &_value.count, &_value.start))
            }
            defer { CoTaskMemFree(_value.start) }
            value = .from(abi: _value)
        }

        open func GetUInt32Array(_ value: inout [UInt32]) throws {
            var _value: WinRTArrayAbi<UINT32> = (0, nil)
            _ = try perform(as: __x_ABI_CWindows_CFoundation_CIPropertyValue.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetUInt32Array(pThis, &_value.count, &_value.start))
            }
            defer { CoTaskMemFree(_value.start) }
            value = .from(abi: _value)
        }

        open func GetInt64Array(_ value: inout [Int64]) throws {
            var _value: WinRTArrayAbi<INT64> = (0, nil)
            _ = try perform(as: __x_ABI_CWindows_CFoundation_CIPropertyValue.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetInt64Array(pThis, &_value.count, &_value.start))
            }
            defer { CoTaskMemFree(_value.start) }
            value = .from(abi: _value)
        }

        open func GetUInt64Array(_ value: inout [UInt64]) throws {
            var _value: WinRTArrayAbi<UINT64> = (0, nil)
            _ = try perform(as: __x_ABI_CWindows_CFoundation_CIPropertyValue.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetUInt64Array(pThis, &_value.count, &_value.start))
            }
            defer { CoTaskMemFree(_value.start) }
            value = .from(abi: _value)
        }

        open func GetSingleArray(_ value: inout [Float]) throws {
            var _value: WinRTArrayAbi<FLOAT> = (0, nil)
            _ = try perform(as: __x_ABI_CWindows_CFoundation_CIPropertyValue.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetSingleArray(pThis, &_value.count, &_value.start))
            }
            defer { CoTaskMemFree(_value.start) }
            value = .from(abi: _value)
        }

        open func GetDoubleArray(_ value: inout [Double]) throws {
            var _value: WinRTArrayAbi<DOUBLE> = (0, nil)
            _ = try perform(as: __x_ABI_CWindows_CFoundation_CIPropertyValue.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetDoubleArray(pThis, &_value.count, &_value.start))
            }
            defer { CoTaskMemFree(_value.start) }
            value = .from(abi: _value)
        }

        open func GetChar16Array(_ value: inout [Character]) throws {
            var _value: WinRTArrayAbi<WCHAR> = (0, nil)
            _ = try perform(as: __x_ABI_CWindows_CFoundation_CIPropertyValue.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetChar16Array(pThis, &_value.count, &_value.start))
            }
            defer { CoTaskMemFree(_value.start) }
            value = .from(abi: _value)
        }

        open func GetBooleanArray(_ value: inout [Bool]) throws {
            var _value: WinRTArrayAbi<boolean> = (0, nil)
            _ = try perform(as: __x_ABI_CWindows_CFoundation_CIPropertyValue.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetBooleanArray(pThis, &_value.count, &_value.start))
            }
            defer { CoTaskMemFree(_value.start) }
            value = .from(abi: _value)
        }

        open func GetStringArray(_ value: inout [String]) throws {
            var _value: WinRTArrayAbi<HSTRING?> = (0, nil)
            _ = try perform(as: __x_ABI_CWindows_CFoundation_CIPropertyValue.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetStringArray(pThis, &_value.count, &_value.start))
            }
            defer { CoTaskMemFree(_value.start) }
            value = .from(abi: _value)
        }

        open func GetInspectableArray(_ value: inout [Any?]) throws {
            var _value: WinRTArrayAbi<UnsafeMutablePointer<C_IInspectable>?> = (0, nil)
            _ = try perform(as: __x_ABI_CWindows_CFoundation_CIPropertyValue.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetInspectableArray(pThis, &_value.count, &_value.start))
            }
            defer { CoTaskMemFree(_value.start) }
            value = .from(abiBridge: __IMPL_.AnyBridge.self, abi: _value)
        }

        open func GetGuidArray(_ value: inout [Foundation.UUID]) throws {
            var _value: WinRTArrayAbi<test_component.GUID> = (0, nil)
            _ = try perform(as: __x_ABI_CWindows_CFoundation_CIPropertyValue.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetGuidArray(pThis, &_value.count, &_value.start))
            }
            defer { CoTaskMemFree(_value.start) }
            value = .from(abi: _value)
        }

        open func GetDateTimeArray(_ value: inout [test_component.DateTime]) throws {
            var _value: WinRTArrayAbi<__x_ABI_CWindows_CFoundation_CDateTime> = (0, nil)
            _ = try perform(as: __x_ABI_CWindows_CFoundation_CIPropertyValue.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetDateTimeArray(pThis, &_value.count, &_value.start))
            }
            defer { CoTaskMemFree(_value.start) }
            value = .from(abi: _value)
        }

        open func GetTimeSpanArray(_ value: inout [test_component.TimeSpan]) throws {
            var _value: WinRTArrayAbi<__x_ABI_CWindows_CFoundation_CTimeSpan> = (0, nil)
            _ = try perform(as: __x_ABI_CWindows_CFoundation_CIPropertyValue.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetTimeSpanArray(pThis, &_value.count, &_value.start))
            }
            defer { CoTaskMemFree(_value.start) }
            value = .from(abi: _value)
        }

        open func GetPointArray(_ value: inout [test_component.Point]) throws {
            var _value: WinRTArrayAbi<__x_ABI_CWindows_CFoundation_CPoint> = (0, nil)
            _ = try perform(as: __x_ABI_CWindows_CFoundation_CIPropertyValue.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetPointArray(pThis, &_value.count, &_value.start))
            }
            defer { CoTaskMemFree(_value.start) }
            value = .from(abi: _value)
        }

        open func GetSizeArray(_ value: inout [test_component.Size]) throws {
            var _value: WinRTArrayAbi<__x_ABI_CWindows_CFoundation_CSize> = (0, nil)
            _ = try perform(as: __x_ABI_CWindows_CFoundation_CIPropertyValue.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetSizeArray(pThis, &_value.count, &_value.start))
            }
            defer { CoTaskMemFree(_value.start) }
            value = .from(abi: _value)
        }

        open func GetRectArray(_ value: inout [test_component.Rect]) throws {
            var _value: WinRTArrayAbi<__x_ABI_CWindows_CFoundation_CRect> = (0, nil)
            _ = try perform(as: __x_ABI_CWindows_CFoundation_CIPropertyValue.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetRectArray(pThis, &_value.count, &_value.start))
            }
            defer { CoTaskMemFree(_value.start) }
            value = .from(abi: _value)
        }

    }

    internal static var IPropertyValueVTable: __x_ABI_CWindows_CFoundation_CIPropertyValueVtbl = .init(
        QueryInterface: { IPropertyValueWrapper.queryInterface($0, $1, $2) },
        AddRef: { IPropertyValueWrapper.addRef($0) },
        Release: { IPropertyValueWrapper.release($0) },
        GetIids: {
            let size = MemoryLayout<test_component.IID>.size
            let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: test_component.IID.self)
            iids[0] = IUnknown.IID
            iids[1] = IInspectable.IID
            iids[2] = __ABI_Windows_Foundation.IPropertyValueWrapper.IID
            $1!.pointee = 3
            $2!.pointee = iids
            return S_OK
        },

        GetRuntimeClassName: {
            _ = $0
            let hstring = try! HString("Windows.Foundation.IPropertyValue").detach()
            $1!.pointee = hstring
            return S_OK
        },

        GetTrustLevel: {
            _ = $0
            $1!.pointee = TrustLevel(rawValue: 0)
            return S_OK
        },

        get_Type: {
            guard let __unwrapped__instance = IPropertyValueWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value = __unwrapped__instance.type
            $1?.initialize(to: value)
            return S_OK
        },

        get_IsNumericScalar: {
            guard let __unwrapped__instance = IPropertyValueWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value = __unwrapped__instance.isNumericScalar
            $1?.initialize(to: .init(from: value))
            return S_OK
        },

        GetUInt8: {
            do {
                guard let __unwrapped__instance = IPropertyValueWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let value = try __unwrapped__instance.getUInt8()
                $1?.initialize(to: value)
                return S_OK
            } catch { return failWith(error: error) }
        },

        GetInt16: {
            do {
                guard let __unwrapped__instance = IPropertyValueWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let value = try __unwrapped__instance.getInt16()
                $1?.initialize(to: value)
                return S_OK
            } catch { return failWith(error: error) }
        },

        GetUInt16: {
            do {
                guard let __unwrapped__instance = IPropertyValueWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let value = try __unwrapped__instance.getUInt16()
                $1?.initialize(to: value)
                return S_OK
            } catch { return failWith(error: error) }
        },

        GetInt32: {
            do {
                guard let __unwrapped__instance = IPropertyValueWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let value = try __unwrapped__instance.getInt32()
                $1?.initialize(to: value)
                return S_OK
            } catch { return failWith(error: error) }
        },

        GetUInt32: {
            do {
                guard let __unwrapped__instance = IPropertyValueWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let value = try __unwrapped__instance.getUInt32()
                $1?.initialize(to: value)
                return S_OK
            } catch { return failWith(error: error) }
        },

        GetInt64: {
            do {
                guard let __unwrapped__instance = IPropertyValueWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let value = try __unwrapped__instance.getInt64()
                $1?.initialize(to: value)
                return S_OK
            } catch { return failWith(error: error) }
        },

        GetUInt64: {
            do {
                guard let __unwrapped__instance = IPropertyValueWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let value = try __unwrapped__instance.getUInt64()
                $1?.initialize(to: value)
                return S_OK
            } catch { return failWith(error: error) }
        },

        GetSingle: {
            do {
                guard let __unwrapped__instance = IPropertyValueWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let value = try __unwrapped__instance.getSingle()
                $1?.initialize(to: value)
                return S_OK
            } catch { return failWith(error: error) }
        },

        GetDouble: {
            do {
                guard let __unwrapped__instance = IPropertyValueWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let value = try __unwrapped__instance.getDouble()
                $1?.initialize(to: value)
                return S_OK
            } catch { return failWith(error: error) }
        },

        GetChar16: {
            do {
                guard let __unwrapped__instance = IPropertyValueWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let value = try __unwrapped__instance.getChar16()
                $1?.initialize(to: .init(from: value))
                return S_OK
            } catch { return failWith(error: error) }
        },

        GetBoolean: {
            do {
                guard let __unwrapped__instance = IPropertyValueWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let value = try __unwrapped__instance.getBoolean()
                $1?.initialize(to: .init(from: value))
                return S_OK
            } catch { return failWith(error: error) }
        },

        GetString: {
            do {
                guard let __unwrapped__instance = IPropertyValueWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let value = try __unwrapped__instance.getString()
                $1?.initialize(to: try! HString(value).detach())
                return S_OK
            } catch { return failWith(error: error) }
        },

        GetGuid: {
            do {
                guard let __unwrapped__instance = IPropertyValueWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let value = try __unwrapped__instance.getGuid()
                $1?.initialize(to: .init(from: value))
                return S_OK
            } catch { return failWith(error: error) }
        },

        GetDateTime: {
            do {
                guard let __unwrapped__instance = IPropertyValueWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let value = try __unwrapped__instance.getDateTime()
                $1?.initialize(to: .from(swift: value))
                return S_OK
            } catch { return failWith(error: error) }
        },

        GetTimeSpan: {
            do {
                guard let __unwrapped__instance = IPropertyValueWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let value = try __unwrapped__instance.getTimeSpan()
                $1?.initialize(to: .from(swift: value))
                return S_OK
            } catch { return failWith(error: error) }
        },

        GetPoint: {
            do {
                guard let __unwrapped__instance = IPropertyValueWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let value = try __unwrapped__instance.getPoint()
                $1?.initialize(to: .from(swift: value))
                return S_OK
            } catch { return failWith(error: error) }
        },

        GetSize: {
            do {
                guard let __unwrapped__instance = IPropertyValueWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let value = try __unwrapped__instance.getSize()
                $1?.initialize(to: .from(swift: value))
                return S_OK
            } catch { return failWith(error: error) }
        },

        GetRect: {
            do {
                guard let __unwrapped__instance = IPropertyValueWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let value = try __unwrapped__instance.getRect()
                $1?.initialize(to: .from(swift: value))
                return S_OK
            } catch { return failWith(error: error) }
        },

        GetUInt8Array: {
            do {
                guard let __unwrapped__instance = IPropertyValueWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                var value = [UInt8]()
                try __unwrapped__instance.getUInt8Array(&value)
                $1?.initialize(to: UInt32(value.count))
                value.fill(abi: $2)
                return S_OK
            } catch { return failWith(error: error) }
        },

        GetInt16Array: {
            do {
                guard let __unwrapped__instance = IPropertyValueWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                var value = [Int16]()
                try __unwrapped__instance.getInt16Array(&value)
                $1?.initialize(to: UInt32(value.count))
                value.fill(abi: $2)
                return S_OK
            } catch { return failWith(error: error) }
        },

        GetUInt16Array: {
            do {
                guard let __unwrapped__instance = IPropertyValueWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                var value = [UInt16]()
                try __unwrapped__instance.getUInt16Array(&value)
                $1?.initialize(to: UInt32(value.count))
                value.fill(abi: $2)
                return S_OK
            } catch { return failWith(error: error) }
        },

        GetInt32Array: {
            do {
                guard let __unwrapped__instance = IPropertyValueWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                var value = [Int32]()
                try __unwrapped__instance.getInt32Array(&value)
                $1?.initialize(to: UInt32(value.count))
                value.fill(abi: $2)
                return S_OK
            } catch { return failWith(error: error) }
        },

        GetUInt32Array: {
            do {
                guard let __unwrapped__instance = IPropertyValueWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                var value = [UInt32]()
                try __unwrapped__instance.getUInt32Array(&value)
                $1?.initialize(to: UInt32(value.count))
                value.fill(abi: $2)
                return S_OK
            } catch { return failWith(error: error) }
        },

        GetInt64Array: {
            do {
                guard let __unwrapped__instance = IPropertyValueWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                var value = [Int64]()
                try __unwrapped__instance.getInt64Array(&value)
                $1?.initialize(to: UInt32(value.count))
                value.fill(abi: $2)
                return S_OK
            } catch { return failWith(error: error) }
        },

        GetUInt64Array: {
            do {
                guard let __unwrapped__instance = IPropertyValueWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                var value = [UInt64]()
                try __unwrapped__instance.getUInt64Array(&value)
                $1?.initialize(to: UInt32(value.count))
                value.fill(abi: $2)
                return S_OK
            } catch { return failWith(error: error) }
        },

        GetSingleArray: {
            do {
                guard let __unwrapped__instance = IPropertyValueWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                var value = [Float]()
                try __unwrapped__instance.getSingleArray(&value)
                $1?.initialize(to: UInt32(value.count))
                value.fill(abi: $2)
                return S_OK
            } catch { return failWith(error: error) }
        },

        GetDoubleArray: {
            do {
                guard let __unwrapped__instance = IPropertyValueWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                var value = [Double]()
                try __unwrapped__instance.getDoubleArray(&value)
                $1?.initialize(to: UInt32(value.count))
                value.fill(abi: $2)
                return S_OK
            } catch { return failWith(error: error) }
        },

        GetChar16Array: {
            do {
                guard let __unwrapped__instance = IPropertyValueWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                var value = [Character]()
                try __unwrapped__instance.getChar16Array(&value)
                $1?.initialize(to: UInt32(value.count))
                do {
                    try value.fill(abi: $2)
                } catch { return failWith(error: error) }
                return S_OK
            } catch { return failWith(error: error) }
        },

        GetBooleanArray: {
            do {
                guard let __unwrapped__instance = IPropertyValueWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                var value = [Bool]()
                try __unwrapped__instance.getBooleanArray(&value)
                $1?.initialize(to: UInt32(value.count))
                do {
                    try value.fill(abi: $2)
                } catch { return failWith(error: error) }
                return S_OK
            } catch { return failWith(error: error) }
        },

        GetStringArray: {
            do {
                guard let __unwrapped__instance = IPropertyValueWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                var value = [String]()
                try __unwrapped__instance.getStringArray(&value)
                $1?.initialize(to: UInt32(value.count))
                do {
                    try value.fill(abi: $2)
                } catch { return failWith(error: error) }
                return S_OK
            } catch { return failWith(error: error) }
        },

        GetInspectableArray: {
            do {
                guard let __unwrapped__instance = IPropertyValueWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                var value = [Any?]()
                try __unwrapped__instance.getInspectableArray(&value)
                $1?.initialize(to: UInt32(value.count))
                value.fill(abi: $2, abiBridge: __IMPL_.AnyBridge.self)
                return S_OK
            } catch { return failWith(error: error) }
        },

        GetGuidArray: {
            do {
                guard let __unwrapped__instance = IPropertyValueWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                var value = [Foundation.UUID]()
                try __unwrapped__instance.getGuidArray(&value)
                $1?.initialize(to: UInt32(value.count))
                do {
                    try value.fill(abi: $2)
                } catch { return failWith(error: error) }
                return S_OK
            } catch { return failWith(error: error) }
        },

        GetDateTimeArray: {
            do {
                guard let __unwrapped__instance = IPropertyValueWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                var value = [test_component.DateTime]()
                try __unwrapped__instance.getDateTimeArray(&value)
                $1?.initialize(to: UInt32(value.count))
                do {
                    try value.fill(abi: $2)
                } catch { return failWith(error: error) }
                return S_OK
            } catch { return failWith(error: error) }
        },

        GetTimeSpanArray: {
            do {
                guard let __unwrapped__instance = IPropertyValueWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                var value = [test_component.TimeSpan]()
                try __unwrapped__instance.getTimeSpanArray(&value)
                $1?.initialize(to: UInt32(value.count))
                do {
                    try value.fill(abi: $2)
                } catch { return failWith(error: error) }
                return S_OK
            } catch { return failWith(error: error) }
        },

        GetPointArray: {
            do {
                guard let __unwrapped__instance = IPropertyValueWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                var value = [test_component.Point]()
                try __unwrapped__instance.getPointArray(&value)
                $1?.initialize(to: UInt32(value.count))
                do {
                    try value.fill(abi: $2)
                } catch { return failWith(error: error) }
                return S_OK
            } catch { return failWith(error: error) }
        },

        GetSizeArray: {
            do {
                guard let __unwrapped__instance = IPropertyValueWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                var value = [test_component.Size]()
                try __unwrapped__instance.getSizeArray(&value)
                $1?.initialize(to: UInt32(value.count))
                do {
                    try value.fill(abi: $2)
                } catch { return failWith(error: error) }
                return S_OK
            } catch { return failWith(error: error) }
        },

        GetRectArray: {
            do {
                guard let __unwrapped__instance = IPropertyValueWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                var value = [test_component.Rect]()
                try __unwrapped__instance.getRectArray(&value)
                $1?.initialize(to: UInt32(value.count))
                do {
                    try value.fill(abi: $2)
                } catch { return failWith(error: error) }
                return S_OK
            } catch { return failWith(error: error) }
        }
    )

    public typealias IPropertyValueWrapper = InterfaceWrapperBase<__IMPL_Windows_Foundation.IPropertyValueBridge>
}
// MARK: - IReference`1

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.ireference-1)
public protocol IReference<T> : IPropertyValue {
    associatedtype T
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.ireference-1.value)
    var value: T { get }
}

public typealias AnyIReference<T> = any IReference<T>

// MARK: - IReference Internals

@_spi(WinRTInternal)
extension __IMPL_Windows_Foundation {
}
@_spi(WinRTInternal)
extension __ABI_Windows_Foundation {
    private static let IID___x_ABI_C__FIReference_1_T: test_component.IID = .init(
        Data1: 0x61C17706, Data2: 0x2D65, Data3: 0x11E0, Data4: ( 0x9A,0xE8,0xD4,0x85,0x64,0x01,0x54,0x72 ) // 61C17706-2D65-11E0-9AE8-D48564015472
    ) 

}
// MARK: - IStringable

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.istringable)
public protocol IStringable : WinRTInterface {
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.istringable.tostring)
    func toString() throws -> String
}

extension IStringable {
    public func queryInterface(_ iid: test_component.IID) -> IUnknownRef? {
        switch iid {
            case __ABI_Windows_Foundation.IStringableWrapper.IID:
                let wrapper = __ABI_Windows_Foundation.IStringableWrapper(self)
                return wrapper!.queryInterface(iid)
            default: return nil
        }
    }
}
public typealias AnyIStringable = any IStringable

// MARK: - IStringable Internals

@_spi(WinRTInternal)
extension __IMPL_Windows_Foundation {
    public enum IStringableBridge : AbiInterfaceBridge {
        public typealias CABI = __x_ABI_CWindows_CFoundation_CIStringable
        public typealias SwiftABI = __ABI_Windows_Foundation.IStringable
        public typealias SwiftProjection = AnyIStringable
        public static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
            guard let abi = abi else { return nil }
            return IStringableImpl(abi)
        }

        public static func makeAbi() -> CABI {
            let vtblPtr = withUnsafeMutablePointer(to: &__ABI_Windows_Foundation.IStringableVTable) { $0 }
            return .init(lpVtbl: vtblPtr)
        }
    }

    fileprivate class IStringableImpl: IStringable, WinRTAbiImpl {
        fileprivate typealias Bridge = IStringableBridge
        fileprivate let _default: Bridge.SwiftABI
        fileprivate var thisPtr: test_component.IInspectable { _default }
        fileprivate init(_ fromAbi: ComPtr<Bridge.CABI>) {
            _default = Bridge.SwiftABI(fromAbi)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.istringable.tostring)
        fileprivate func toString() throws -> String {
            try _default.ToString()
        }

    }

}
@_spi(WinRTInternal)
extension __ABI_Windows_Foundation {
    private static let IID___x_ABI_CWindows_CFoundation_CIStringable: test_component.IID = .init(
        Data1: 0x96369F54, Data2: 0x8EB6, Data3: 0x48F0, Data4: ( 0xAB,0xCE,0xC1,0xB2,0x11,0xE6,0x27,0xC3 ) // 96369F54-8EB6-48F0-ABCE-C1B211E627C3
    ) 

    public class IStringable: test_component.IInspectable {
        override public class var IID: test_component.IID { IID___x_ABI_CWindows_CFoundation_CIStringable }

        open func ToString() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CWindows_CFoundation_CIStringable.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.ToString(pThis, &value))
            }
            return .init(from: value)
        }

    }

    internal static var IStringableVTable: __x_ABI_CWindows_CFoundation_CIStringableVtbl = .init(
        QueryInterface: { IStringableWrapper.queryInterface($0, $1, $2) },
        AddRef: { IStringableWrapper.addRef($0) },
        Release: { IStringableWrapper.release($0) },
        GetIids: {
            let size = MemoryLayout<test_component.IID>.size
            let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: test_component.IID.self)
            iids[0] = IUnknown.IID
            iids[1] = IInspectable.IID
            iids[2] = __ABI_Windows_Foundation.IStringableWrapper.IID
            $1!.pointee = 3
            $2!.pointee = iids
            return S_OK
        },

        GetRuntimeClassName: {
            _ = $0
            let hstring = try! HString("Windows.Foundation.IStringable").detach()
            $1!.pointee = hstring
            return S_OK
        },

        GetTrustLevel: {
            _ = $0
            $1!.pointee = TrustLevel(rawValue: 0)
            return S_OK
        },

        ToString: {
            do {
                guard let __unwrapped__instance = IStringableWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let value = try __unwrapped__instance.toString()
                $1?.initialize(to: try! HString(value).detach())
                return S_OK
            } catch { return failWith(error: error) }
        }
    )

    public typealias IStringableWrapper = InterfaceWrapperBase<__IMPL_Windows_Foundation.IStringableBridge>
}
@_spi(WinRTInternal)
public class IStringableMaker: MakeFromAbi {
    public typealias SwiftType = AnyIStringable
    public static func from(abi: test_component.IInspectable) -> SwiftType {
        let swiftAbi: __ABI_Windows_Foundation.IStringable = try! abi.QueryInterface()
        return __IMPL_Windows_Foundation.IStringableBridge.from(abi: RawPointer(swiftAbi))!
    }
}
// MARK: - IWwwFormUrlDecoderEntry

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iwwwformurldecoderentry)
public protocol IWwwFormUrlDecoderEntry : WinRTInterface {
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iwwwformurldecoderentry.name)
    var name: String { get }
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iwwwformurldecoderentry.value)
    var value: String { get }
}

extension IWwwFormUrlDecoderEntry {
    public func queryInterface(_ iid: test_component.IID) -> IUnknownRef? {
        switch iid {
            case __ABI_Windows_Foundation.IWwwFormUrlDecoderEntryWrapper.IID:
                let wrapper = __ABI_Windows_Foundation.IWwwFormUrlDecoderEntryWrapper(self)
                return wrapper!.queryInterface(iid)
            default: return nil
        }
    }
}
public typealias AnyIWwwFormUrlDecoderEntry = any IWwwFormUrlDecoderEntry

// MARK: - IWwwFormUrlDecoderEntry Internals

@_spi(WinRTInternal)
extension __IMPL_Windows_Foundation {
    public enum IWwwFormUrlDecoderEntryBridge : AbiInterfaceBridge {
        public typealias CABI = __x_ABI_CWindows_CFoundation_CIWwwFormUrlDecoderEntry
        public typealias SwiftABI = __ABI_Windows_Foundation.IWwwFormUrlDecoderEntry
        public typealias SwiftProjection = AnyIWwwFormUrlDecoderEntry
        public static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
            guard let abi = abi else { return nil }
            return IWwwFormUrlDecoderEntryImpl(abi)
        }

        public static func makeAbi() -> CABI {
            let vtblPtr = withUnsafeMutablePointer(to: &__ABI_Windows_Foundation.IWwwFormUrlDecoderEntryVTable) { $0 }
            return .init(lpVtbl: vtblPtr)
        }
    }

    fileprivate class IWwwFormUrlDecoderEntryImpl: IWwwFormUrlDecoderEntry, WinRTAbiImpl {
        fileprivate typealias Bridge = IWwwFormUrlDecoderEntryBridge
        fileprivate let _default: Bridge.SwiftABI
        fileprivate var thisPtr: test_component.IInspectable { _default }
        fileprivate init(_ fromAbi: ComPtr<Bridge.CABI>) {
            _default = Bridge.SwiftABI(fromAbi)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iwwwformurldecoderentry.name)
        fileprivate var name : String {
            get { try! _default.get_Name() }
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iwwwformurldecoderentry.value)
        fileprivate var value : String {
            get { try! _default.get_Value() }
        }

    }

}
@_spi(WinRTInternal)
extension __ABI_Windows_Foundation {
    private static let IID___x_ABI_CWindows_CFoundation_CIWwwFormUrlDecoderEntry: test_component.IID = .init(
        Data1: 0x125E7431, Data2: 0xF678, Data3: 0x4E8E, Data4: ( 0xB6,0x70,0x20,0xA9,0xB0,0x6C,0x51,0x2D ) // 125E7431-F678-4E8E-B670-20A9B06C512D
    ) 

    public class IWwwFormUrlDecoderEntry: test_component.IInspectable {
        override public class var IID: test_component.IID { IID___x_ABI_CWindows_CFoundation_CIWwwFormUrlDecoderEntry }

        open func get_Name() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CWindows_CFoundation_CIWwwFormUrlDecoderEntry.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Name(pThis, &value))
            }
            return .init(from: value)
        }

        open func get_Value() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CWindows_CFoundation_CIWwwFormUrlDecoderEntry.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Value(pThis, &value))
            }
            return .init(from: value)
        }

    }

    internal static var IWwwFormUrlDecoderEntryVTable: __x_ABI_CWindows_CFoundation_CIWwwFormUrlDecoderEntryVtbl = .init(
        QueryInterface: { IWwwFormUrlDecoderEntryWrapper.queryInterface($0, $1, $2) },
        AddRef: { IWwwFormUrlDecoderEntryWrapper.addRef($0) },
        Release: { IWwwFormUrlDecoderEntryWrapper.release($0) },
        GetIids: {
            let size = MemoryLayout<test_component.IID>.size
            let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: test_component.IID.self)
            iids[0] = IUnknown.IID
            iids[1] = IInspectable.IID
            iids[2] = __ABI_Windows_Foundation.IWwwFormUrlDecoderEntryWrapper.IID
            $1!.pointee = 3
            $2!.pointee = iids
            return S_OK
        },

        GetRuntimeClassName: {
            _ = $0
            let hstring = try! HString("Windows.Foundation.IWwwFormUrlDecoderEntry").detach()
            $1!.pointee = hstring
            return S_OK
        },

        GetTrustLevel: {
            _ = $0
            $1!.pointee = TrustLevel(rawValue: 0)
            return S_OK
        },

        get_Name: {
            guard let __unwrapped__instance = IWwwFormUrlDecoderEntryWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value = __unwrapped__instance.name
            $1?.initialize(to: try! HString(value).detach())
            return S_OK
        },

        get_Value: {
            guard let __unwrapped__instance = IWwwFormUrlDecoderEntryWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value = __unwrapped__instance.value
            $1?.initialize(to: try! HString(value).detach())
            return S_OK
        }
    )

    public typealias IWwwFormUrlDecoderEntryWrapper = InterfaceWrapperBase<__IMPL_Windows_Foundation.IWwwFormUrlDecoderEntryBridge>
}
@_spi(WinRTInternal)
public class IWwwFormUrlDecoderEntryMaker: MakeFromAbi {
    public typealias SwiftType = AnyIWwwFormUrlDecoderEntry
    public static func from(abi: test_component.IInspectable) -> SwiftType {
        let swiftAbi: __ABI_Windows_Foundation.IWwwFormUrlDecoderEntry = try! abi.QueryInterface()
        return __IMPL_Windows_Foundation.IWwwFormUrlDecoderEntryBridge.from(abi: RawPointer(swiftAbi))!
    }
}

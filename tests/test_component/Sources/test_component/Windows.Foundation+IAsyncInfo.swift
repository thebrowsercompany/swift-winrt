// WARNING: Please don't edit this file. It was generated by Swift/WinRT v0.0.1
// swiftlint:disable all
import Foundation
import Ctest_component

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncinfo)
public protocol IAsyncInfo : WinRTInterface {
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncinfo.cancel)
    func cancel() throws
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncinfo.close)
    func close() throws
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncinfo.errorcode)
    var errorCode: HRESULT { get }
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncinfo.id)
    var id: UInt32 { get }
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncinfo.status)
    var status: test_component.AsyncStatus { get }
}

extension IAsyncInfo {
    public func queryInterface(_ iid: test_component.IID) -> IUnknownRef? {
        switch iid {
            case __ABI_Windows_Foundation.IAsyncInfoWrapper.IID:
                let wrapper = __ABI_Windows_Foundation.IAsyncInfoWrapper(self)
                return wrapper!.queryInterface(iid)
            default: return nil
        }
    }
}
public typealias AnyIAsyncInfo = any IAsyncInfo


// MARK: - Internals

@_spi(WinRTInternal)
extension __IMPL_Windows_Foundation {
    public enum IAsyncInfoBridge : AbiInterfaceBridge {
        public typealias CABI = __x_ABI_CWindows_CFoundation_CIAsyncInfo
        public typealias SwiftABI = __ABI_Windows_Foundation.IAsyncInfo
        public typealias SwiftProjection = AnyIAsyncInfo
        public static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
            guard let abi = abi else { return nil }
            return IAsyncInfoImpl(abi)
        }

        public static func makeAbi() -> CABI {
            let vtblPtr = withUnsafeMutablePointer(to: &__ABI_Windows_Foundation.IAsyncInfoVTable) { $0 }
            return .init(lpVtbl: vtblPtr)
        }
    }

    fileprivate class IAsyncInfoImpl: IAsyncInfo, WinRTAbiImpl {
        fileprivate typealias Bridge = IAsyncInfoBridge
        fileprivate let _default: Bridge.SwiftABI
        fileprivate var thisPtr: test_component.IInspectable { _default }
        fileprivate init(_ fromAbi: ComPtr<Bridge.CABI>) {
            _default = Bridge.SwiftABI(fromAbi)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncinfo.cancel)
        fileprivate func cancel() throws {
            try _default.Cancel()
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncinfo.close)
        fileprivate func close() throws {
            try _default.Close()
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncinfo.errorcode)
        fileprivate var errorCode : HRESULT {
            get { try! _default.get_ErrorCode() }
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncinfo.id)
        fileprivate var id : UInt32 {
            get { try! _default.get_Id() }
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncinfo.status)
        fileprivate var status : AsyncStatus {
            get { try! _default.get_Status() }
        }

    }

}
@_spi(WinRTInternal)
extension __ABI_Windows_Foundation {
    private static let IID___x_ABI_CWindows_CFoundation_CIAsyncInfo: test_component.IID = .init(
        Data1: 0x00000036, Data2: 0x0000, Data3: 0x0000, Data4: ( 0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x46 ) // 00000036-0000-0000-C000-000000000046
    ) 
    public class IAsyncInfo: test_component.IInspectable {
        override public class var IID: test_component.IID { IID___x_ABI_CWindows_CFoundation_CIAsyncInfo }

        open func get_Id() throws -> UInt32 {
            var result: UINT32 = 0
            _ = try perform(as: __x_ABI_CWindows_CFoundation_CIAsyncInfo.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Id(pThis, &result))
            }
            return result
        }

        open func get_Status() throws -> test_component.AsyncStatus {
            var result: __x_ABI_CWindows_CFoundation_CAsyncStatus = .init(0)
            _ = try perform(as: __x_ABI_CWindows_CFoundation_CIAsyncInfo.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Status(pThis, &result))
            }
            return result
        }

        open func get_ErrorCode() throws -> HRESULT {
            var result: HRESULT = 0
            _ = try perform(as: __x_ABI_CWindows_CFoundation_CIAsyncInfo.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ErrorCode(pThis, &result))
            }
            return result
        }

        open func Cancel() throws {
            _ = try perform(as: __x_ABI_CWindows_CFoundation_CIAsyncInfo.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Cancel(pThis))
            }
        }

        open func Close() throws {
            _ = try perform(as: __x_ABI_CWindows_CFoundation_CIAsyncInfo.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Close(pThis))
            }
        }

    }

    internal static var IAsyncInfoVTable: __x_ABI_CWindows_CFoundation_CIAsyncInfoVtbl = .init(
        QueryInterface: { IAsyncInfoWrapper.queryInterface($0, $1, $2) },
        AddRef: { IAsyncInfoWrapper.addRef($0) },
        Release: { IAsyncInfoWrapper.release($0) },
        GetIids: {
            let size = MemoryLayout<test_component.IID>.size
            let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: test_component.IID.self)
            iids[0] = IUnknown.IID
            iids[1] = IInspectable.IID
            iids[2] = __ABI_Windows_Foundation.IAsyncInfoWrapper.IID
            $1!.pointee = 3
            $2!.pointee = iids
            return S_OK
        },

        GetRuntimeClassName: {
            _ = $0
            let hstring = try! HString("Windows.Foundation.IAsyncInfo").detach()
            $1!.pointee = hstring
            return S_OK
        },

        GetTrustLevel: {
            _ = $0
            $1!.pointee = TrustLevel(rawValue: 0)
            return S_OK
        },

        get_Id: {
            guard let __unwrapped__instance = IAsyncInfoWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let result = __unwrapped__instance.id
            $1?.initialize(to: result)
            return S_OK
        },

        get_Status: {
            guard let __unwrapped__instance = IAsyncInfoWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let result = __unwrapped__instance.status
            $1?.initialize(to: result)
            return S_OK
        },

        get_ErrorCode: {
            guard let __unwrapped__instance = IAsyncInfoWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let result = __unwrapped__instance.errorCode
            $1?.initialize(to: result)
            return S_OK
        },

        Cancel: {
            do {
                guard let __unwrapped__instance = IAsyncInfoWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                try __unwrapped__instance.cancel()
                return S_OK
            } catch { return failWith(error: error) }
        },

        Close: {
            do {
                guard let __unwrapped__instance = IAsyncInfoWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                try __unwrapped__instance.close()
                return S_OK
            } catch { return failWith(error: error) }
        }
    )

    public typealias IAsyncInfoWrapper = InterfaceWrapperBase<__IMPL_Windows_Foundation.IAsyncInfoBridge>
}
@_spi(WinRTInternal)
public class IAsyncInfoMaker: MakeFromAbi {
    public typealias SwiftType = AnyIAsyncInfo
    public static func from(abi: test_component.IInspectable) -> SwiftType {
        let swiftAbi: __ABI_Windows_Foundation.IAsyncInfo = try! abi.QueryInterface()
        return __IMPL_Windows_Foundation.IAsyncInfoBridge.from(abi: RawPointer(swiftAbi))!
    }
}

// WARNING: Please don't edit this file. It was generated by Swift/WinRT v0.0.1
// swiftlint:disable all
import Foundation
import Ctest_component

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.creationcollisionoption)
public typealias CreationCollisionOption = __x_ABI_CWindows_CStorage_CCreationCollisionOption
/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.fileaccessmode)
public typealias FileAccessMode = __x_ABI_CWindows_CStorage_CFileAccessMode
/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.fileattributes)
public typealias FileAttributes = __x_ABI_CWindows_CStorage_CFileAttributes
/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.namecollisionoption)
public typealias NameCollisionOption = __x_ABI_CWindows_CStorage_CNameCollisionOption
/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.storagedeleteoption)
public typealias StorageDeleteOption = __x_ABI_CWindows_CStorage_CStorageDeleteOption
/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.storageitemtypes)
public typealias StorageItemTypes = __x_ABI_CWindows_CStorage_CStorageItemTypes
/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.storagelibrarychangetype)
public typealias StorageLibraryChangeType = __x_ABI_CWindows_CStorage_CStorageLibraryChangeType
/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.storageopenoptions)
public typealias StorageOpenOptions = __x_ABI_CWindows_CStorage_CStorageOpenOptions
/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.streamedfilefailuremode)
public typealias StreamedFileFailureMode = __x_ABI_CWindows_CStorage_CStreamedFileFailureMode
/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.pathio)
public final class PathIO {
    private static let _IPathIOStatics: __ABI_Windows_Storage.IPathIOStatics = try! RoGetActivationFactory("Windows.Storage.PathIO")
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.pathio.readtextasync)
    public static func readTextAsync(_ absolutePath: String) -> AnyIAsyncOperation<String>! {
        return try! _IPathIOStatics.ReadTextAsyncImpl(absolutePath)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.pathio.readtextasync)
    public static func readTextAsync(_ absolutePath: String, _ encoding: test_component.UnicodeEncoding) -> AnyIAsyncOperation<String>! {
        return try! _IPathIOStatics.ReadTextWithEncodingAsyncImpl(absolutePath, encoding)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.pathio.writetextasync)
    public static func writeTextAsync(_ absolutePath: String, _ contents: String) -> test_component.AnyIAsyncAction! {
        return try! _IPathIOStatics.WriteTextAsyncImpl(absolutePath, contents)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.pathio.writetextasync)
    public static func writeTextAsync(_ absolutePath: String, _ contents: String, _ encoding: test_component.UnicodeEncoding) -> test_component.AnyIAsyncAction! {
        return try! _IPathIOStatics.WriteTextWithEncodingAsyncImpl(absolutePath, contents, encoding)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.pathio.appendtextasync)
    public static func appendTextAsync(_ absolutePath: String, _ contents: String) -> test_component.AnyIAsyncAction! {
        return try! _IPathIOStatics.AppendTextAsyncImpl(absolutePath, contents)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.pathio.appendtextasync)
    public static func appendTextAsync(_ absolutePath: String, _ contents: String, _ encoding: test_component.UnicodeEncoding) -> test_component.AnyIAsyncAction! {
        return try! _IPathIOStatics.AppendTextWithEncodingAsyncImpl(absolutePath, contents, encoding)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.pathio.readlinesasync)
    public static func readLinesAsync(_ absolutePath: String) -> AnyIAsyncOperation<AnyIVector<String>?>! {
        return try! _IPathIOStatics.ReadLinesAsyncImpl(absolutePath)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.pathio.readlinesasync)
    public static func readLinesAsync(_ absolutePath: String, _ encoding: test_component.UnicodeEncoding) -> AnyIAsyncOperation<AnyIVector<String>?>! {
        return try! _IPathIOStatics.ReadLinesWithEncodingAsyncImpl(absolutePath, encoding)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.pathio.writelinesasync)
    public static func writeLinesAsync(_ absolutePath: String, _ lines: AnyIIterable<String>!) -> test_component.AnyIAsyncAction! {
        return try! _IPathIOStatics.WriteLinesAsyncImpl(absolutePath, lines)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.pathio.writelinesasync)
    public static func writeLinesAsync(_ absolutePath: String, _ lines: AnyIIterable<String>!, _ encoding: test_component.UnicodeEncoding) -> test_component.AnyIAsyncAction! {
        return try! _IPathIOStatics.WriteLinesWithEncodingAsyncImpl(absolutePath, lines, encoding)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.pathio.appendlinesasync)
    public static func appendLinesAsync(_ absolutePath: String, _ lines: AnyIIterable<String>!) -> test_component.AnyIAsyncAction! {
        return try! _IPathIOStatics.AppendLinesAsyncImpl(absolutePath, lines)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.pathio.appendlinesasync)
    public static func appendLinesAsync(_ absolutePath: String, _ lines: AnyIIterable<String>!, _ encoding: test_component.UnicodeEncoding) -> test_component.AnyIAsyncAction! {
        return try! _IPathIOStatics.AppendLinesWithEncodingAsyncImpl(absolutePath, lines, encoding)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.pathio.readbufferasync)
    public static func readBufferAsync(_ absolutePath: String) -> AnyIAsyncOperation<test_component.AnyIBuffer?>! {
        return try! _IPathIOStatics.ReadBufferAsyncImpl(absolutePath)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.pathio.writebufferasync)
    public static func writeBufferAsync(_ absolutePath: String, _ buffer: test_component.AnyIBuffer!) -> test_component.AnyIAsyncAction! {
        return try! _IPathIOStatics.WriteBufferAsyncImpl(absolutePath, buffer)
    }

}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.storagefile)
public final class StorageFile : WinRTClass, IStorageItem, test_component.IRandomAccessStreamReference, test_component.IInputStreamReference, IStorageFile, IStorageItemProperties, IStorageItemProperties2, IStorageItem2, IStorageItemPropertiesWithProvider, IStorageFilePropertiesWithAvailability, IStorageFile2 {
    private typealias SwiftABI = __ABI_Windows_Storage.IStorageFile
    private typealias CABI = __x_ABI_CWindows_CStorage_CIStorageFile
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CStorage_CIStorageFile>?) -> StorageFile? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: test_component.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: test_component.IInspectable) {
        super.init(fromAbi)
    }

    override public func queryInterface(_ iid: test_component.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static let _IStorageFileStatics: __ABI_Windows_Storage.IStorageFileStatics = try! RoGetActivationFactory("Windows.Storage.StorageFile")
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.storagefile.getfilefrompathasync)
    public static func getFileFromPathAsync(_ path: String) -> AnyIAsyncOperation<StorageFile?>! {
        return try! _IStorageFileStatics.GetFileFromPathAsyncImpl(path)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.storagefile.getfilefromapplicationuriasync)
    public static func getFileFromApplicationUriAsync(_ uri: test_component.Uri!) -> AnyIAsyncOperation<StorageFile?>! {
        return try! _IStorageFileStatics.GetFileFromApplicationUriAsyncImpl(uri)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.storagefile.createstreamedfileasync)
    public static func createStreamedFileAsync(_ displayNameWithExtension: String, _ dataRequested: StreamedFileDataRequestedHandler!, _ thumbnail: test_component.AnyIRandomAccessStreamReference!) -> AnyIAsyncOperation<StorageFile?>! {
        return try! _IStorageFileStatics.CreateStreamedFileAsyncImpl(displayNameWithExtension, dataRequested, thumbnail)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.storagefile.replacewithstreamedfileasync)
    public static func replaceWithStreamedFileAsync(_ fileToReplace: AnyIStorageFile!, _ dataRequested: StreamedFileDataRequestedHandler!, _ thumbnail: test_component.AnyIRandomAccessStreamReference!) -> AnyIAsyncOperation<StorageFile?>! {
        return try! _IStorageFileStatics.ReplaceWithStreamedFileAsyncImpl(fileToReplace, dataRequested, thumbnail)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.storagefile.createstreamedfilefromuriasync)
    public static func createStreamedFileFromUriAsync(_ displayNameWithExtension: String, _ uri: test_component.Uri!, _ thumbnail: test_component.AnyIRandomAccessStreamReference!) -> AnyIAsyncOperation<StorageFile?>! {
        return try! _IStorageFileStatics.CreateStreamedFileFromUriAsyncImpl(displayNameWithExtension, uri, thumbnail)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.storagefile.replacewithstreamedfilefromuriasync)
    public static func replaceWithStreamedFileFromUriAsync(_ fileToReplace: AnyIStorageFile!, _ uri: test_component.Uri!, _ thumbnail: test_component.AnyIRandomAccessStreamReference!) -> AnyIAsyncOperation<StorageFile?>! {
        return try! _IStorageFileStatics.ReplaceWithStreamedFileFromUriAsyncImpl(fileToReplace, uri, thumbnail)
    }

    private lazy var _IStorageItem: __ABI_Windows_Storage.IStorageItem! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.storagefile.renameasync)
    public func renameAsync(_ desiredName: String) throws -> test_component.AnyIAsyncAction! {
        try _IStorageItem.RenameAsyncOverloadDefaultOptionsImpl(desiredName)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.storagefile.renameasync)
    public func renameAsync(_ desiredName: String, _ option: NameCollisionOption) throws -> test_component.AnyIAsyncAction! {
        try _IStorageItem.RenameAsyncImpl(desiredName, option)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.storagefile.deleteasync)
    public func deleteAsync() throws -> test_component.AnyIAsyncAction! {
        try _IStorageItem.DeleteAsyncOverloadDefaultOptionsImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.storagefile.deleteasync)
    public func deleteAsync(_ option: StorageDeleteOption) throws -> test_component.AnyIAsyncAction! {
        try _IStorageItem.DeleteAsyncImpl(option)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.storagefile.getbasicpropertiesasync)
    public func getBasicPropertiesAsync() throws -> AnyIAsyncOperation<test_component.BasicProperties?>! {
        try _IStorageItem.GetBasicPropertiesAsyncImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.storagefile.isoftype)
    public func isOfType(_ type: StorageItemTypes) throws -> Bool {
        try _IStorageItem.IsOfTypeImpl(type)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.storagefile.attributes)
    public var attributes : FileAttributes {
        get { try! _IStorageItem.get_AttributesImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.storagefile.datecreated)
    public var dateCreated : test_component.DateTime {
        get { try! _IStorageItem.get_DateCreatedImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.storagefile.name)
    public var name : String {
        get { try! _IStorageItem.get_NameImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.storagefile.path)
    public var path : String {
        get { try! _IStorageItem.get_PathImpl() }
    }

    private lazy var _IRandomAccessStreamReference: __ABI_Windows_Storage_Streams.IRandomAccessStreamReference! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.storagefile.openreadasync)
    public func openReadAsync() throws -> AnyIAsyncOperation<test_component.AnyIRandomAccessStreamWithContentType?>! {
        try _IRandomAccessStreamReference.OpenReadAsyncImpl()
    }

    private lazy var _IInputStreamReference: __ABI_Windows_Storage_Streams.IInputStreamReference! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.storagefile.opensequentialreadasync)
    public func openSequentialReadAsync() throws -> AnyIAsyncOperation<test_component.AnyIInputStream?>! {
        try _IInputStreamReference.OpenSequentialReadAsyncImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.storagefile.openasync)
    public func openAsync(_ accessMode: FileAccessMode) throws -> AnyIAsyncOperation<test_component.AnyIRandomAccessStream?>! {
        try _default.OpenAsyncImpl(accessMode)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.storagefile.opentransactedwriteasync)
    public func openTransactedWriteAsync() throws -> AnyIAsyncOperation<StorageStreamTransaction?>! {
        try _default.OpenTransactedWriteAsyncImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.storagefile.copyasync)
    public func copyAsync(_ destinationFolder: AnyIStorageFolder!) throws -> AnyIAsyncOperation<StorageFile?>! {
        try _default.CopyOverloadDefaultNameAndOptionsImpl(destinationFolder)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.storagefile.copyasync)
    public func copyAsync(_ destinationFolder: AnyIStorageFolder!, _ desiredNewName: String) throws -> AnyIAsyncOperation<StorageFile?>! {
        try _default.CopyOverloadDefaultOptionsImpl(destinationFolder, desiredNewName)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.storagefile.copyasync)
    public func copyAsync(_ destinationFolder: AnyIStorageFolder!, _ desiredNewName: String, _ option: NameCollisionOption) throws -> AnyIAsyncOperation<StorageFile?>! {
        try _default.CopyOverloadImpl(destinationFolder, desiredNewName, option)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.storagefile.copyandreplaceasync)
    public func copyAndReplaceAsync(_ fileToReplace: AnyIStorageFile!) throws -> test_component.AnyIAsyncAction! {
        try _default.CopyAndReplaceAsyncImpl(fileToReplace)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.storagefile.moveasync)
    public func moveAsync(_ destinationFolder: AnyIStorageFolder!) throws -> test_component.AnyIAsyncAction! {
        try _default.MoveOverloadDefaultNameAndOptionsImpl(destinationFolder)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.storagefile.moveasync)
    public func moveAsync(_ destinationFolder: AnyIStorageFolder!, _ desiredNewName: String) throws -> test_component.AnyIAsyncAction! {
        try _default.MoveOverloadDefaultOptionsImpl(destinationFolder, desiredNewName)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.storagefile.moveasync)
    public func moveAsync(_ destinationFolder: AnyIStorageFolder!, _ desiredNewName: String, _ option: NameCollisionOption) throws -> test_component.AnyIAsyncAction! {
        try _default.MoveOverloadImpl(destinationFolder, desiredNewName, option)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.storagefile.moveandreplaceasync)
    public func moveAndReplaceAsync(_ fileToReplace: AnyIStorageFile!) throws -> test_component.AnyIAsyncAction! {
        try _default.MoveAndReplaceAsyncImpl(fileToReplace)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.storagefile.contenttype)
    public var contentType : String {
        get { try! _default.get_ContentTypeImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.storagefile.filetype)
    public var fileType : String {
        get { try! _default.get_FileTypeImpl() }
    }

    private lazy var _IStorageItemProperties: __ABI_Windows_Storage.IStorageItemProperties! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.storagefile.getthumbnailasync)
    public func getThumbnailAsync(_ mode: test_component.ThumbnailMode) throws -> AnyIAsyncOperation<test_component.StorageItemThumbnail?>! {
        try _IStorageItemProperties.GetThumbnailAsyncOverloadDefaultSizeDefaultOptionsImpl(mode)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.storagefile.getthumbnailasync)
    public func getThumbnailAsync(_ mode: test_component.ThumbnailMode, _ requestedSize: UInt32) throws -> AnyIAsyncOperation<test_component.StorageItemThumbnail?>! {
        try _IStorageItemProperties.GetThumbnailAsyncOverloadDefaultOptionsImpl(mode, requestedSize)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.storagefile.getthumbnailasync)
    public func getThumbnailAsync(_ mode: test_component.ThumbnailMode, _ requestedSize: UInt32, _ options: test_component.ThumbnailOptions) throws -> AnyIAsyncOperation<test_component.StorageItemThumbnail?>! {
        try _IStorageItemProperties.GetThumbnailAsyncImpl(mode, requestedSize, options)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.storagefile.displayname)
    public var displayName : String {
        get { try! _IStorageItemProperties.get_DisplayNameImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.storagefile.displaytype)
    public var displayType : String {
        get { try! _IStorageItemProperties.get_DisplayTypeImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.storagefile.folderrelativeid)
    public var folderRelativeId : String {
        get { try! _IStorageItemProperties.get_FolderRelativeIdImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.storagefile.properties)
    public var properties : test_component.StorageItemContentProperties! {
        get { try! _IStorageItemProperties.get_PropertiesImpl() }
    }

    private lazy var _IStorageItemProperties2: __ABI_Windows_Storage.IStorageItemProperties2! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.storagefile.getscaledimageasthumbnailasync)
    public func getScaledImageAsThumbnailAsync(_ mode: test_component.ThumbnailMode) throws -> AnyIAsyncOperation<test_component.StorageItemThumbnail?>! {
        try _IStorageItemProperties2.GetScaledImageAsThumbnailAsyncOverloadDefaultSizeDefaultOptionsImpl(mode)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.storagefile.getscaledimageasthumbnailasync)
    public func getScaledImageAsThumbnailAsync(_ mode: test_component.ThumbnailMode, _ requestedSize: UInt32) throws -> AnyIAsyncOperation<test_component.StorageItemThumbnail?>! {
        try _IStorageItemProperties2.GetScaledImageAsThumbnailAsyncOverloadDefaultOptionsImpl(mode, requestedSize)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.storagefile.getscaledimageasthumbnailasync)
    public func getScaledImageAsThumbnailAsync(_ mode: test_component.ThumbnailMode, _ requestedSize: UInt32, _ options: test_component.ThumbnailOptions) throws -> AnyIAsyncOperation<test_component.StorageItemThumbnail?>! {
        try _IStorageItemProperties2.GetScaledImageAsThumbnailAsyncImpl(mode, requestedSize, options)
    }

    private lazy var _IStorageItem2: __ABI_Windows_Storage.IStorageItem2! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.storagefile.getparentasync)
    public func getParentAsync() throws -> AnyIAsyncOperation<StorageFolder?>! {
        try _IStorageItem2.GetParentAsyncImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.storagefile.isequal)
    public func isEqual(_ item: AnyIStorageItem!) throws -> Bool {
        try _IStorageItem2.IsEqualImpl(item)
    }

    private lazy var _IStorageItemPropertiesWithProvider: __ABI_Windows_Storage.IStorageItemPropertiesWithProvider! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.storagefile.provider)
    public var provider : StorageProvider! {
        get { try! _IStorageItemPropertiesWithProvider.get_ProviderImpl() }
    }

    private lazy var _IStorageFilePropertiesWithAvailability: __ABI_Windows_Storage.IStorageFilePropertiesWithAvailability! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.storagefile.isavailable)
    public var isAvailable : Bool {
        get { try! _IStorageFilePropertiesWithAvailability.get_IsAvailableImpl() }
    }

    private lazy var _IStorageFile2: __ABI_Windows_Storage.IStorageFile2! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.storagefile.openasync)
    public func openAsync(_ accessMode: FileAccessMode, _ options: StorageOpenOptions) throws -> AnyIAsyncOperation<test_component.AnyIRandomAccessStream?>! {
        try _IStorageFile2.OpenWithOptionsAsyncImpl(accessMode, options)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.storagefile.opentransactedwriteasync)
    public func openTransactedWriteAsync(_ options: StorageOpenOptions) throws -> AnyIAsyncOperation<StorageStreamTransaction?>! {
        try _IStorageFile2.OpenTransactedWriteWithOptionsAsyncImpl(options)
    }

    deinit {
        _IStorageItem = nil
        _IRandomAccessStreamReference = nil
        _IInputStreamReference = nil
        _default = nil
        _IStorageItemProperties = nil
        _IStorageItemProperties2 = nil
        _IStorageItem2 = nil
        _IStorageItemPropertiesWithProvider = nil
        _IStorageFilePropertiesWithAvailability = nil
        _IStorageFile2 = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.storagefolder)
public final class StorageFolder : WinRTClass, IStorageItem, IStorageFolder, test_component.IStorageFolderQueryOperations, IStorageItemProperties, IStorageItemProperties2, IStorageItem2, IStorageFolder2, IStorageItemPropertiesWithProvider {
    private typealias SwiftABI = __ABI_Windows_Storage.IStorageFolder
    private typealias CABI = __x_ABI_CWindows_CStorage_CIStorageFolder
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CStorage_CIStorageFolder>?) -> StorageFolder? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: test_component.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: test_component.IInspectable) {
        super.init(fromAbi)
    }

    override public func queryInterface(_ iid: test_component.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static let _IStorageFolderStatics: __ABI_Windows_Storage.IStorageFolderStatics = try! RoGetActivationFactory("Windows.Storage.StorageFolder")
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.storagefolder.getfolderfrompathasync)
    public static func getFolderFromPathAsync(_ path: String) -> AnyIAsyncOperation<StorageFolder?>! {
        return try! _IStorageFolderStatics.GetFolderFromPathAsyncImpl(path)
    }

    private lazy var _IStorageItem: __ABI_Windows_Storage.IStorageItem! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.storagefolder.renameasync)
    public func renameAsync(_ desiredName: String) throws -> test_component.AnyIAsyncAction! {
        try _IStorageItem.RenameAsyncOverloadDefaultOptionsImpl(desiredName)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.storagefolder.renameasync)
    public func renameAsync(_ desiredName: String, _ option: NameCollisionOption) throws -> test_component.AnyIAsyncAction! {
        try _IStorageItem.RenameAsyncImpl(desiredName, option)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.storagefolder.deleteasync)
    public func deleteAsync() throws -> test_component.AnyIAsyncAction! {
        try _IStorageItem.DeleteAsyncOverloadDefaultOptionsImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.storagefolder.deleteasync)
    public func deleteAsync(_ option: StorageDeleteOption) throws -> test_component.AnyIAsyncAction! {
        try _IStorageItem.DeleteAsyncImpl(option)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.storagefolder.getbasicpropertiesasync)
    public func getBasicPropertiesAsync() throws -> AnyIAsyncOperation<test_component.BasicProperties?>! {
        try _IStorageItem.GetBasicPropertiesAsyncImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.storagefolder.isoftype)
    public func isOfType(_ type: StorageItemTypes) throws -> Bool {
        try _IStorageItem.IsOfTypeImpl(type)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.storagefolder.attributes)
    public var attributes : FileAttributes {
        get { try! _IStorageItem.get_AttributesImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.storagefolder.datecreated)
    public var dateCreated : test_component.DateTime {
        get { try! _IStorageItem.get_DateCreatedImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.storagefolder.name)
    public var name : String {
        get { try! _IStorageItem.get_NameImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.storagefolder.path)
    public var path : String {
        get { try! _IStorageItem.get_PathImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.storagefolder.createfileasync)
    public func createFileAsync(_ desiredName: String) throws -> AnyIAsyncOperation<StorageFile?>! {
        try _default.CreateFileAsyncOverloadDefaultOptionsImpl(desiredName)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.storagefolder.createfileasync)
    public func createFileAsync(_ desiredName: String, _ options: CreationCollisionOption) throws -> AnyIAsyncOperation<StorageFile?>! {
        try _default.CreateFileAsyncImpl(desiredName, options)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.storagefolder.createfolderasync)
    public func createFolderAsync(_ desiredName: String) throws -> AnyIAsyncOperation<StorageFolder?>! {
        try _default.CreateFolderAsyncOverloadDefaultOptionsImpl(desiredName)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.storagefolder.createfolderasync)
    public func createFolderAsync(_ desiredName: String, _ options: CreationCollisionOption) throws -> AnyIAsyncOperation<StorageFolder?>! {
        try _default.CreateFolderAsyncImpl(desiredName, options)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.storagefolder.getfileasync)
    public func getFileAsync(_ name: String) throws -> AnyIAsyncOperation<StorageFile?>! {
        try _default.GetFileAsyncImpl(name)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.storagefolder.getfolderasync)
    public func getFolderAsync(_ name: String) throws -> AnyIAsyncOperation<StorageFolder?>! {
        try _default.GetFolderAsyncImpl(name)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.storagefolder.getitemasync)
    public func getItemAsync(_ name: String) throws -> AnyIAsyncOperation<AnyIStorageItem?>! {
        try _default.GetItemAsyncImpl(name)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.storagefolder.getfilesasync)
    public func getFilesAsync() throws -> AnyIAsyncOperation<AnyIVectorView<StorageFile?>?>! {
        try _default.GetFilesAsyncOverloadDefaultOptionsStartAndCountImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.storagefolder.getfoldersasync)
    public func getFoldersAsync() throws -> AnyIAsyncOperation<AnyIVectorView<StorageFolder?>?>! {
        try _default.GetFoldersAsyncOverloadDefaultOptionsStartAndCountImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.storagefolder.getitemsasync)
    public func getItemsAsync() throws -> AnyIAsyncOperation<AnyIVectorView<AnyIStorageItem?>?>! {
        try _default.GetItemsAsyncOverloadDefaultStartAndCountImpl()
    }

    private lazy var _IStorageFolderQueryOperations: __ABI_Windows_Storage_Search.IStorageFolderQueryOperations! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.storagefolder.getindexedstateasync)
    public func getIndexedStateAsync() throws -> AnyIAsyncOperation<test_component.IndexedState>! {
        try _IStorageFolderQueryOperations.GetIndexedStateAsyncImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.storagefolder.createfilequery)
    public func createFileQuery() throws -> test_component.StorageFileQueryResult! {
        try _IStorageFolderQueryOperations.CreateFileQueryOverloadDefaultImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.storagefolder.createfilequery)
    public func createFileQuery(_ query: test_component.CommonFileQuery) throws -> test_component.StorageFileQueryResult! {
        try _IStorageFolderQueryOperations.CreateFileQueryImpl(query)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.storagefolder.createfilequerywithoptions)
    public func createFileQueryWithOptions(_ queryOptions: test_component.QueryOptions!) throws -> test_component.StorageFileQueryResult! {
        try _IStorageFolderQueryOperations.CreateFileQueryWithOptionsImpl(queryOptions)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.storagefolder.createfolderquery)
    public func createFolderQuery() throws -> test_component.StorageFolderQueryResult! {
        try _IStorageFolderQueryOperations.CreateFolderQueryOverloadDefaultImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.storagefolder.createfolderquery)
    public func createFolderQuery(_ query: test_component.CommonFolderQuery) throws -> test_component.StorageFolderQueryResult! {
        try _IStorageFolderQueryOperations.CreateFolderQueryImpl(query)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.storagefolder.createfolderquerywithoptions)
    public func createFolderQueryWithOptions(_ queryOptions: test_component.QueryOptions!) throws -> test_component.StorageFolderQueryResult! {
        try _IStorageFolderQueryOperations.CreateFolderQueryWithOptionsImpl(queryOptions)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.storagefolder.createitemquery)
    public func createItemQuery() throws -> test_component.StorageItemQueryResult! {
        try _IStorageFolderQueryOperations.CreateItemQueryImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.storagefolder.createitemquerywithoptions)
    public func createItemQueryWithOptions(_ queryOptions: test_component.QueryOptions!) throws -> test_component.StorageItemQueryResult! {
        try _IStorageFolderQueryOperations.CreateItemQueryWithOptionsImpl(queryOptions)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.storagefolder.getfilesasync)
    public func getFilesAsync(_ query: test_component.CommonFileQuery, _ startIndex: UInt32, _ maxItemsToRetrieve: UInt32) throws -> AnyIAsyncOperation<AnyIVectorView<StorageFile?>?>! {
        try _IStorageFolderQueryOperations.GetFilesAsyncImpl(query, startIndex, maxItemsToRetrieve)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.storagefolder.getfilesasync)
    public func getFilesAsync(_ query: test_component.CommonFileQuery) throws -> AnyIAsyncOperation<AnyIVectorView<StorageFile?>?>! {
        try _IStorageFolderQueryOperations.GetFilesAsyncOverloadDefaultStartAndCountImpl(query)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.storagefolder.getfoldersasync)
    public func getFoldersAsync(_ query: test_component.CommonFolderQuery, _ startIndex: UInt32, _ maxItemsToRetrieve: UInt32) throws -> AnyIAsyncOperation<AnyIVectorView<StorageFolder?>?>! {
        try _IStorageFolderQueryOperations.GetFoldersAsyncImpl(query, startIndex, maxItemsToRetrieve)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.storagefolder.getfoldersasync)
    public func getFoldersAsync(_ query: test_component.CommonFolderQuery) throws -> AnyIAsyncOperation<AnyIVectorView<StorageFolder?>?>! {
        try _IStorageFolderQueryOperations.GetFoldersAsyncOverloadDefaultStartAndCountImpl(query)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.storagefolder.getitemsasync)
    public func getItemsAsync(_ startIndex: UInt32, _ maxItemsToRetrieve: UInt32) throws -> AnyIAsyncOperation<AnyIVectorView<AnyIStorageItem?>?>! {
        try _IStorageFolderQueryOperations.GetItemsAsyncImpl(startIndex, maxItemsToRetrieve)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.storagefolder.arequeryoptionssupported)
    public func areQueryOptionsSupported(_ queryOptions: test_component.QueryOptions!) throws -> Bool {
        try _IStorageFolderQueryOperations.AreQueryOptionsSupportedImpl(queryOptions)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.storagefolder.iscommonfolderquerysupported)
    public func isCommonFolderQuerySupported(_ query: test_component.CommonFolderQuery) throws -> Bool {
        try _IStorageFolderQueryOperations.IsCommonFolderQuerySupportedImpl(query)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.storagefolder.iscommonfilequerysupported)
    public func isCommonFileQuerySupported(_ query: test_component.CommonFileQuery) throws -> Bool {
        try _IStorageFolderQueryOperations.IsCommonFileQuerySupportedImpl(query)
    }

    private lazy var _IStorageItemProperties: __ABI_Windows_Storage.IStorageItemProperties! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.storagefolder.getthumbnailasync)
    public func getThumbnailAsync(_ mode: test_component.ThumbnailMode) throws -> AnyIAsyncOperation<test_component.StorageItemThumbnail?>! {
        try _IStorageItemProperties.GetThumbnailAsyncOverloadDefaultSizeDefaultOptionsImpl(mode)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.storagefolder.getthumbnailasync)
    public func getThumbnailAsync(_ mode: test_component.ThumbnailMode, _ requestedSize: UInt32) throws -> AnyIAsyncOperation<test_component.StorageItemThumbnail?>! {
        try _IStorageItemProperties.GetThumbnailAsyncOverloadDefaultOptionsImpl(mode, requestedSize)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.storagefolder.getthumbnailasync)
    public func getThumbnailAsync(_ mode: test_component.ThumbnailMode, _ requestedSize: UInt32, _ options: test_component.ThumbnailOptions) throws -> AnyIAsyncOperation<test_component.StorageItemThumbnail?>! {
        try _IStorageItemProperties.GetThumbnailAsyncImpl(mode, requestedSize, options)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.storagefolder.displayname)
    public var displayName : String {
        get { try! _IStorageItemProperties.get_DisplayNameImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.storagefolder.displaytype)
    public var displayType : String {
        get { try! _IStorageItemProperties.get_DisplayTypeImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.storagefolder.folderrelativeid)
    public var folderRelativeId : String {
        get { try! _IStorageItemProperties.get_FolderRelativeIdImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.storagefolder.properties)
    public var properties : test_component.StorageItemContentProperties! {
        get { try! _IStorageItemProperties.get_PropertiesImpl() }
    }

    private lazy var _IStorageItemProperties2: __ABI_Windows_Storage.IStorageItemProperties2! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.storagefolder.getscaledimageasthumbnailasync)
    public func getScaledImageAsThumbnailAsync(_ mode: test_component.ThumbnailMode) throws -> AnyIAsyncOperation<test_component.StorageItemThumbnail?>! {
        try _IStorageItemProperties2.GetScaledImageAsThumbnailAsyncOverloadDefaultSizeDefaultOptionsImpl(mode)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.storagefolder.getscaledimageasthumbnailasync)
    public func getScaledImageAsThumbnailAsync(_ mode: test_component.ThumbnailMode, _ requestedSize: UInt32) throws -> AnyIAsyncOperation<test_component.StorageItemThumbnail?>! {
        try _IStorageItemProperties2.GetScaledImageAsThumbnailAsyncOverloadDefaultOptionsImpl(mode, requestedSize)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.storagefolder.getscaledimageasthumbnailasync)
    public func getScaledImageAsThumbnailAsync(_ mode: test_component.ThumbnailMode, _ requestedSize: UInt32, _ options: test_component.ThumbnailOptions) throws -> AnyIAsyncOperation<test_component.StorageItemThumbnail?>! {
        try _IStorageItemProperties2.GetScaledImageAsThumbnailAsyncImpl(mode, requestedSize, options)
    }

    private lazy var _IStorageItem2: __ABI_Windows_Storage.IStorageItem2! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.storagefolder.getparentasync)
    public func getParentAsync() throws -> AnyIAsyncOperation<StorageFolder?>! {
        try _IStorageItem2.GetParentAsyncImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.storagefolder.isequal)
    public func isEqual(_ item: AnyIStorageItem!) throws -> Bool {
        try _IStorageItem2.IsEqualImpl(item)
    }

    private lazy var _IStorageFolder2: __ABI_Windows_Storage.IStorageFolder2! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.storagefolder.trygetitemasync)
    public func tryGetItemAsync(_ name: String) throws -> AnyIAsyncOperation<AnyIStorageItem?>! {
        try _IStorageFolder2.TryGetItemAsyncImpl(name)
    }

    private lazy var _IStorageItemPropertiesWithProvider: __ABI_Windows_Storage.IStorageItemPropertiesWithProvider! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.storagefolder.provider)
    public var provider : StorageProvider! {
        get { try! _IStorageItemPropertiesWithProvider.get_ProviderImpl() }
    }

    private lazy var _IStorageFolder3: __ABI_Windows_Storage.IStorageFolder3! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.storagefolder.trygetchangetracker)
    public func tryGetChangeTracker() throws -> StorageLibraryChangeTracker! {
        try _IStorageFolder3.TryGetChangeTrackerImpl()
    }

    deinit {
        _IStorageItem = nil
        _default = nil
        _IStorageFolderQueryOperations = nil
        _IStorageItemProperties = nil
        _IStorageItemProperties2 = nil
        _IStorageItem2 = nil
        _IStorageFolder2 = nil
        _IStorageItemPropertiesWithProvider = nil
        _IStorageFolder3 = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.storagelibrarychange)
public final class StorageLibraryChange : WinRTClass {
    private typealias SwiftABI = __ABI_Windows_Storage.IStorageLibraryChange
    private typealias CABI = __x_ABI_CWindows_CStorage_CIStorageLibraryChange
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CStorage_CIStorageLibraryChange>?) -> StorageLibraryChange? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: test_component.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: test_component.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.storagelibrarychange.isoftype)
    public func isOfType(_ type: StorageItemTypes) throws -> Bool {
        try _default.IsOfTypeImpl(type)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.storagelibrarychange.getstorageitemasync)
    public func getStorageItemAsync() throws -> AnyIAsyncOperation<AnyIStorageItem?>! {
        try _default.GetStorageItemAsyncImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.storagelibrarychange.changetype)
    public var changeType : StorageLibraryChangeType {
        get { try! _default.get_ChangeTypeImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.storagelibrarychange.path)
    public var path : String {
        get { try! _default.get_PathImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.storagelibrarychange.previouspath)
    public var previousPath : String {
        get { try! _default.get_PreviousPathImpl() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.storagelibrarychangereader)
public final class StorageLibraryChangeReader : WinRTClass {
    private typealias SwiftABI = __ABI_Windows_Storage.IStorageLibraryChangeReader
    private typealias CABI = __x_ABI_CWindows_CStorage_CIStorageLibraryChangeReader
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CStorage_CIStorageLibraryChangeReader>?) -> StorageLibraryChangeReader? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: test_component.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: test_component.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.storagelibrarychangereader.readbatchasync)
    public func readBatchAsync() throws -> AnyIAsyncOperation<AnyIVectorView<StorageLibraryChange?>?>! {
        try _default.ReadBatchAsyncImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.storagelibrarychangereader.acceptchangesasync)
    public func acceptChangesAsync() throws -> test_component.AnyIAsyncAction! {
        try _default.AcceptChangesAsyncImpl()
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.storagelibrarychangetracker)
public final class StorageLibraryChangeTracker : WinRTClass {
    private typealias SwiftABI = __ABI_Windows_Storage.IStorageLibraryChangeTracker
    private typealias CABI = __x_ABI_CWindows_CStorage_CIStorageLibraryChangeTracker
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CStorage_CIStorageLibraryChangeTracker>?) -> StorageLibraryChangeTracker? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: test_component.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: test_component.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.storagelibrarychangetracker.getchangereader)
    public func getChangeReader() throws -> StorageLibraryChangeReader! {
        try _default.GetChangeReaderImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.storagelibrarychangetracker.enable)
    public func enable() throws {
        try _default.EnableImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.storagelibrarychangetracker.reset)
    public func reset() throws {
        try _default.ResetImpl()
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.storageprovider)
public final class StorageProvider : WinRTClass {
    private typealias SwiftABI = __ABI_Windows_Storage.IStorageProvider
    private typealias CABI = __x_ABI_CWindows_CStorage_CIStorageProvider
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CStorage_CIStorageProvider>?) -> StorageProvider? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: test_component.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: test_component.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.storageprovider.displayname)
    public var displayName : String {
        get { try! _default.get_DisplayNameImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.storageprovider.id)
    public var id : String {
        get { try! _default.get_IdImpl() }
    }

    private lazy var _IStorageProvider2: __ABI_Windows_Storage.IStorageProvider2! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.storageprovider.ispropertysupportedforpartialfileasync)
    public func isPropertySupportedForPartialFileAsync(_ propertyCanonicalName: String) throws -> AnyIAsyncOperation<Bool>! {
        try _IStorageProvider2.IsPropertySupportedForPartialFileAsyncImpl(propertyCanonicalName)
    }

    deinit {
        _default = nil
        _IStorageProvider2 = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.storagestreamtransaction)
public final class StorageStreamTransaction : WinRTClass, test_component.IClosable {
    private typealias SwiftABI = __ABI_Windows_Storage.IStorageStreamTransaction
    private typealias CABI = __x_ABI_CWindows_CStorage_CIStorageStreamTransaction
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CStorage_CIStorageStreamTransaction>?) -> StorageStreamTransaction? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: test_component.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: test_component.IInspectable) {
        super.init(fromAbi)
    }

    override public func queryInterface(_ iid: test_component.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private lazy var _IClosable: __ABI_Windows_Foundation.IClosable! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.storagestreamtransaction.close)
    public func close() throws {
        try _IClosable.CloseImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.storagestreamtransaction.commitasync)
    public func commitAsync() throws -> test_component.AnyIAsyncAction! {
        try _default.CommitAsyncImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.storagestreamtransaction.stream)
    public var stream : test_component.AnyIRandomAccessStream! {
        get { try! _default.get_StreamImpl() }
    }

    deinit {
        _IClosable = nil
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.streamedfiledatarequest)
public final class StreamedFileDataRequest : WinRTClass, test_component.IClosable, test_component.IOutputStream, IStreamedFileDataRequest {
    private typealias SwiftABI = __ABI_Windows_Storage_Streams.IOutputStream
    private typealias CABI = __x_ABI_CWindows_CStorage_CStreams_CIOutputStream
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CStorage_CStreams_CIOutputStream>?) -> StreamedFileDataRequest? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: test_component.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: test_component.IInspectable) {
        super.init(fromAbi)
    }

    override public func queryInterface(_ iid: test_component.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private lazy var _IClosable: __ABI_Windows_Foundation.IClosable! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.streamedfiledatarequest.close)
    public func close() throws {
        try _IClosable.CloseImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.streamedfiledatarequest.writeasync)
    public func writeAsync(_ buffer: test_component.AnyIBuffer!) throws -> AnyIAsyncOperationWithProgress<UInt32, UInt32>! {
        try _default.WriteAsyncImpl(buffer)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.streamedfiledatarequest.flushasync)
    public func flushAsync() throws -> AnyIAsyncOperation<Bool>! {
        try _default.FlushAsyncImpl()
    }

    private lazy var _IStreamedFileDataRequest: __ABI_Windows_Storage.IStreamedFileDataRequest! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.streamedfiledatarequest.failandclose)
    public func failAndClose(_ failureMode: StreamedFileFailureMode) throws {
        try _IStreamedFileDataRequest.FailAndCloseImpl(failureMode)
    }

    deinit {
        _IClosable = nil
        _default = nil
        _IStreamedFileDataRequest = nil
    }
}

public typealias StreamedFileDataRequestedHandler = (StreamedFileDataRequest?) throws -> ()
/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.istoragefile)
public protocol IStorageFile : IStorageItem, test_component.IRandomAccessStreamReference, test_component.IInputStreamReference {
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.istoragefile.openasync)
    func openAsync(_ accessMode: test_component.FileAccessMode) throws -> test_component.AnyIAsyncOperation<test_component.AnyIRandomAccessStream?>!
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.istoragefile.opentransactedwriteasync)
    func openTransactedWriteAsync() throws -> test_component.AnyIAsyncOperation<test_component.StorageStreamTransaction?>!
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.istoragefile.copyasync)
    func copyAsync(_ destinationFolder: test_component.AnyIStorageFolder!) throws -> test_component.AnyIAsyncOperation<test_component.StorageFile?>!
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.istoragefile.copyasync)
    func copyAsync(_ destinationFolder: test_component.AnyIStorageFolder!, _ desiredNewName: String) throws -> test_component.AnyIAsyncOperation<test_component.StorageFile?>!
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.istoragefile.copyasync)
    func copyAsync(_ destinationFolder: test_component.AnyIStorageFolder!, _ desiredNewName: String, _ option: test_component.NameCollisionOption) throws -> test_component.AnyIAsyncOperation<test_component.StorageFile?>!
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.istoragefile.copyandreplaceasync)
    func copyAndReplaceAsync(_ fileToReplace: test_component.AnyIStorageFile!) throws -> test_component.AnyIAsyncAction!
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.istoragefile.moveasync)
    func moveAsync(_ destinationFolder: test_component.AnyIStorageFolder!) throws -> test_component.AnyIAsyncAction!
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.istoragefile.moveasync)
    func moveAsync(_ destinationFolder: test_component.AnyIStorageFolder!, _ desiredNewName: String) throws -> test_component.AnyIAsyncAction!
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.istoragefile.moveasync)
    func moveAsync(_ destinationFolder: test_component.AnyIStorageFolder!, _ desiredNewName: String, _ option: test_component.NameCollisionOption) throws -> test_component.AnyIAsyncAction!
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.istoragefile.moveandreplaceasync)
    func moveAndReplaceAsync(_ fileToReplace: test_component.AnyIStorageFile!) throws -> test_component.AnyIAsyncAction!
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.istoragefile.contenttype)
    var contentType: String { get }
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.istoragefile.filetype)
    var fileType: String { get }
}

extension IStorageFile {
    public func queryInterface(_ iid: test_component.IID) -> IUnknownRef? {
        switch iid {
            case __ABI_Windows_Storage.IStorageFileWrapper.IID:
                let wrapper = __ABI_Windows_Storage.IStorageFileWrapper(self)
                return wrapper!.queryInterface(iid)
            case __ABI_Windows_Storage.IStorageItemWrapper.IID:
                let wrapper = __ABI_Windows_Storage.IStorageItemWrapper(self)
                return wrapper!.queryInterface(iid)
            case __ABI_Windows_Storage_Streams.IRandomAccessStreamReferenceWrapper.IID:
                let wrapper = __ABI_Windows_Storage_Streams.IRandomAccessStreamReferenceWrapper(self)
                return wrapper!.queryInterface(iid)
            case __ABI_Windows_Storage_Streams.IInputStreamReferenceWrapper.IID:
                let wrapper = __ABI_Windows_Storage_Streams.IInputStreamReferenceWrapper(self)
                return wrapper!.queryInterface(iid)
            default: return nil
        }
    }
}
public typealias AnyIStorageFile = any IStorageFile

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.istoragefile2)
public protocol IStorageFile2 : WinRTInterface {
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.istoragefile2.openasync)
    func openAsync(_ accessMode: test_component.FileAccessMode, _ options: test_component.StorageOpenOptions) throws -> test_component.AnyIAsyncOperation<test_component.AnyIRandomAccessStream?>!
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.istoragefile2.opentransactedwriteasync)
    func openTransactedWriteAsync(_ options: test_component.StorageOpenOptions) throws -> test_component.AnyIAsyncOperation<test_component.StorageStreamTransaction?>!
}

extension IStorageFile2 {
    public func queryInterface(_ iid: test_component.IID) -> IUnknownRef? {
        switch iid {
            case __ABI_Windows_Storage.IStorageFile2Wrapper.IID:
                let wrapper = __ABI_Windows_Storage.IStorageFile2Wrapper(self)
                return wrapper!.queryInterface(iid)
            default: return nil
        }
    }
}
public typealias AnyIStorageFile2 = any IStorageFile2

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.istoragefilepropertieswithavailability)
public protocol IStorageFilePropertiesWithAvailability : WinRTInterface {
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.istoragefilepropertieswithavailability.isavailable)
    var isAvailable: Bool { get }
}

extension IStorageFilePropertiesWithAvailability {
    public func queryInterface(_ iid: test_component.IID) -> IUnknownRef? {
        switch iid {
            case __ABI_Windows_Storage.IStorageFilePropertiesWithAvailabilityWrapper.IID:
                let wrapper = __ABI_Windows_Storage.IStorageFilePropertiesWithAvailabilityWrapper(self)
                return wrapper!.queryInterface(iid)
            default: return nil
        }
    }
}
public typealias AnyIStorageFilePropertiesWithAvailability = any IStorageFilePropertiesWithAvailability

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.istoragefolder)
public protocol IStorageFolder : IStorageItem {
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.istoragefolder.createfileasync)
    func createFileAsync(_ desiredName: String) throws -> test_component.AnyIAsyncOperation<test_component.StorageFile?>!
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.istoragefolder.createfileasync)
    func createFileAsync(_ desiredName: String, _ options: test_component.CreationCollisionOption) throws -> test_component.AnyIAsyncOperation<test_component.StorageFile?>!
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.istoragefolder.createfolderasync)
    func createFolderAsync(_ desiredName: String) throws -> test_component.AnyIAsyncOperation<test_component.StorageFolder?>!
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.istoragefolder.createfolderasync)
    func createFolderAsync(_ desiredName: String, _ options: test_component.CreationCollisionOption) throws -> test_component.AnyIAsyncOperation<test_component.StorageFolder?>!
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.istoragefolder.getfileasync)
    func getFileAsync(_ name: String) throws -> test_component.AnyIAsyncOperation<test_component.StorageFile?>!
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.istoragefolder.getfolderasync)
    func getFolderAsync(_ name: String) throws -> test_component.AnyIAsyncOperation<test_component.StorageFolder?>!
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.istoragefolder.getitemasync)
    func getItemAsync(_ name: String) throws -> test_component.AnyIAsyncOperation<test_component.AnyIStorageItem?>!
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.istoragefolder.getfilesasync)
    func getFilesAsync() throws -> test_component.AnyIAsyncOperation<test_component.AnyIVectorView<test_component.StorageFile?>?>!
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.istoragefolder.getfoldersasync)
    func getFoldersAsync() throws -> test_component.AnyIAsyncOperation<test_component.AnyIVectorView<test_component.StorageFolder?>?>!
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.istoragefolder.getitemsasync)
    func getItemsAsync() throws -> test_component.AnyIAsyncOperation<test_component.AnyIVectorView<test_component.AnyIStorageItem?>?>!
}

extension IStorageFolder {
    public func queryInterface(_ iid: test_component.IID) -> IUnknownRef? {
        switch iid {
            case __ABI_Windows_Storage.IStorageFolderWrapper.IID:
                let wrapper = __ABI_Windows_Storage.IStorageFolderWrapper(self)
                return wrapper!.queryInterface(iid)
            case __ABI_Windows_Storage.IStorageItemWrapper.IID:
                let wrapper = __ABI_Windows_Storage.IStorageItemWrapper(self)
                return wrapper!.queryInterface(iid)
            default: return nil
        }
    }
}
public typealias AnyIStorageFolder = any IStorageFolder

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.istoragefolder2)
public protocol IStorageFolder2 : WinRTInterface {
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.istoragefolder2.trygetitemasync)
    func tryGetItemAsync(_ name: String) throws -> test_component.AnyIAsyncOperation<test_component.AnyIStorageItem?>!
}

extension IStorageFolder2 {
    public func queryInterface(_ iid: test_component.IID) -> IUnknownRef? {
        switch iid {
            case __ABI_Windows_Storage.IStorageFolder2Wrapper.IID:
                let wrapper = __ABI_Windows_Storage.IStorageFolder2Wrapper(self)
                return wrapper!.queryInterface(iid)
            default: return nil
        }
    }
}
public typealias AnyIStorageFolder2 = any IStorageFolder2

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.istorageitem)
public protocol IStorageItem : WinRTInterface {
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.istorageitem.renameasync)
    func renameAsync(_ desiredName: String) throws -> test_component.AnyIAsyncAction!
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.istorageitem.renameasync)
    func renameAsync(_ desiredName: String, _ option: test_component.NameCollisionOption) throws -> test_component.AnyIAsyncAction!
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.istorageitem.deleteasync)
    func deleteAsync() throws -> test_component.AnyIAsyncAction!
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.istorageitem.deleteasync)
    func deleteAsync(_ option: test_component.StorageDeleteOption) throws -> test_component.AnyIAsyncAction!
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.istorageitem.getbasicpropertiesasync)
    func getBasicPropertiesAsync() throws -> test_component.AnyIAsyncOperation<test_component.BasicProperties?>!
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.istorageitem.isoftype)
    func isOfType(_ type: test_component.StorageItemTypes) throws -> Bool
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.istorageitem.attributes)
    var attributes: test_component.FileAttributes { get }
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.istorageitem.datecreated)
    var dateCreated: test_component.DateTime { get }
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.istorageitem.name)
    var name: String { get }
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.istorageitem.path)
    var path: String { get }
}

extension IStorageItem {
    public func queryInterface(_ iid: test_component.IID) -> IUnknownRef? {
        switch iid {
            case __ABI_Windows_Storage.IStorageItemWrapper.IID:
                let wrapper = __ABI_Windows_Storage.IStorageItemWrapper(self)
                return wrapper!.queryInterface(iid)
            default: return nil
        }
    }
}
public typealias AnyIStorageItem = any IStorageItem

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.istorageitem2)
public protocol IStorageItem2 : IStorageItem {
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.istorageitem2.getparentasync)
    func getParentAsync() throws -> test_component.AnyIAsyncOperation<test_component.StorageFolder?>!
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.istorageitem2.isequal)
    func isEqual(_ item: test_component.AnyIStorageItem!) throws -> Bool
}

extension IStorageItem2 {
    public func queryInterface(_ iid: test_component.IID) -> IUnknownRef? {
        switch iid {
            case __ABI_Windows_Storage.IStorageItem2Wrapper.IID:
                let wrapper = __ABI_Windows_Storage.IStorageItem2Wrapper(self)
                return wrapper!.queryInterface(iid)
            case __ABI_Windows_Storage.IStorageItemWrapper.IID:
                let wrapper = __ABI_Windows_Storage.IStorageItemWrapper(self)
                return wrapper!.queryInterface(iid)
            default: return nil
        }
    }
}
public typealias AnyIStorageItem2 = any IStorageItem2

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.istorageitemproperties)
public protocol IStorageItemProperties : WinRTInterface {
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.istorageitemproperties.getthumbnailasync)
    func getThumbnailAsync(_ mode: test_component.ThumbnailMode) throws -> test_component.AnyIAsyncOperation<test_component.StorageItemThumbnail?>!
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.istorageitemproperties.getthumbnailasync)
    func getThumbnailAsync(_ mode: test_component.ThumbnailMode, _ requestedSize: UInt32) throws -> test_component.AnyIAsyncOperation<test_component.StorageItemThumbnail?>!
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.istorageitemproperties.getthumbnailasync)
    func getThumbnailAsync(_ mode: test_component.ThumbnailMode, _ requestedSize: UInt32, _ options: test_component.ThumbnailOptions) throws -> test_component.AnyIAsyncOperation<test_component.StorageItemThumbnail?>!
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.istorageitemproperties.displayname)
    var displayName: String { get }
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.istorageitemproperties.displaytype)
    var displayType: String { get }
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.istorageitemproperties.folderrelativeid)
    var folderRelativeId: String { get }
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.istorageitemproperties.properties)
    var properties: test_component.StorageItemContentProperties! { get }
}

extension IStorageItemProperties {
    public func queryInterface(_ iid: test_component.IID) -> IUnknownRef? {
        switch iid {
            case __ABI_Windows_Storage.IStorageItemPropertiesWrapper.IID:
                let wrapper = __ABI_Windows_Storage.IStorageItemPropertiesWrapper(self)
                return wrapper!.queryInterface(iid)
            default: return nil
        }
    }
}
public typealias AnyIStorageItemProperties = any IStorageItemProperties

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.istorageitemproperties2)
public protocol IStorageItemProperties2 : IStorageItemProperties {
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.istorageitemproperties2.getscaledimageasthumbnailasync)
    func getScaledImageAsThumbnailAsync(_ mode: test_component.ThumbnailMode) throws -> test_component.AnyIAsyncOperation<test_component.StorageItemThumbnail?>!
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.istorageitemproperties2.getscaledimageasthumbnailasync)
    func getScaledImageAsThumbnailAsync(_ mode: test_component.ThumbnailMode, _ requestedSize: UInt32) throws -> test_component.AnyIAsyncOperation<test_component.StorageItemThumbnail?>!
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.istorageitemproperties2.getscaledimageasthumbnailasync)
    func getScaledImageAsThumbnailAsync(_ mode: test_component.ThumbnailMode, _ requestedSize: UInt32, _ options: test_component.ThumbnailOptions) throws -> test_component.AnyIAsyncOperation<test_component.StorageItemThumbnail?>!
}

extension IStorageItemProperties2 {
    public func queryInterface(_ iid: test_component.IID) -> IUnknownRef? {
        switch iid {
            case __ABI_Windows_Storage.IStorageItemProperties2Wrapper.IID:
                let wrapper = __ABI_Windows_Storage.IStorageItemProperties2Wrapper(self)
                return wrapper!.queryInterface(iid)
            case __ABI_Windows_Storage.IStorageItemPropertiesWrapper.IID:
                let wrapper = __ABI_Windows_Storage.IStorageItemPropertiesWrapper(self)
                return wrapper!.queryInterface(iid)
            default: return nil
        }
    }
}
public typealias AnyIStorageItemProperties2 = any IStorageItemProperties2

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.istorageitempropertieswithprovider)
public protocol IStorageItemPropertiesWithProvider : IStorageItemProperties {
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.istorageitempropertieswithprovider.provider)
    var provider: test_component.StorageProvider! { get }
}

extension IStorageItemPropertiesWithProvider {
    public func queryInterface(_ iid: test_component.IID) -> IUnknownRef? {
        switch iid {
            case __ABI_Windows_Storage.IStorageItemPropertiesWithProviderWrapper.IID:
                let wrapper = __ABI_Windows_Storage.IStorageItemPropertiesWithProviderWrapper(self)
                return wrapper!.queryInterface(iid)
            case __ABI_Windows_Storage.IStorageItemPropertiesWrapper.IID:
                let wrapper = __ABI_Windows_Storage.IStorageItemPropertiesWrapper(self)
                return wrapper!.queryInterface(iid)
            default: return nil
        }
    }
}
public typealias AnyIStorageItemPropertiesWithProvider = any IStorageItemPropertiesWithProvider

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.istreamedfiledatarequest)
public protocol IStreamedFileDataRequest : WinRTInterface {
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.istreamedfiledatarequest.failandclose)
    func failAndClose(_ failureMode: test_component.StreamedFileFailureMode) throws
}

extension IStreamedFileDataRequest {
    public func queryInterface(_ iid: test_component.IID) -> IUnknownRef? {
        switch iid {
            case __ABI_Windows_Storage.IStreamedFileDataRequestWrapper.IID:
                let wrapper = __ABI_Windows_Storage.IStreamedFileDataRequestWrapper(self)
                return wrapper!.queryInterface(iid)
            default: return nil
        }
    }
}
public typealias AnyIStreamedFileDataRequest = any IStreamedFileDataRequest

extension test_component.CreationCollisionOption {
    public static var generateUniqueName : test_component.CreationCollisionOption {
        __x_ABI_CWindows_CStorage_CCreationCollisionOption_GenerateUniqueName
    }
    public static var replaceExisting : test_component.CreationCollisionOption {
        __x_ABI_CWindows_CStorage_CCreationCollisionOption_ReplaceExisting
    }
    public static var failIfExists : test_component.CreationCollisionOption {
        __x_ABI_CWindows_CStorage_CCreationCollisionOption_FailIfExists
    }
    public static var openIfExists : test_component.CreationCollisionOption {
        __x_ABI_CWindows_CStorage_CCreationCollisionOption_OpenIfExists
    }
}
extension test_component.CreationCollisionOption: @retroactive Hashable, @retroactive Codable {}

extension test_component.FileAccessMode {
    public static var read : test_component.FileAccessMode {
        __x_ABI_CWindows_CStorage_CFileAccessMode_Read
    }
    public static var readWrite : test_component.FileAccessMode {
        __x_ABI_CWindows_CStorage_CFileAccessMode_ReadWrite
    }
}
extension test_component.FileAccessMode: @retroactive Hashable, @retroactive Codable {}

extension test_component.FileAttributes {
    public static var normal : test_component.FileAttributes {
        __x_ABI_CWindows_CStorage_CFileAttributes_Normal
    }
    public static var readOnly : test_component.FileAttributes {
        __x_ABI_CWindows_CStorage_CFileAttributes_ReadOnly
    }
    public static var directory : test_component.FileAttributes {
        __x_ABI_CWindows_CStorage_CFileAttributes_Directory
    }
    public static var archive : test_component.FileAttributes {
        __x_ABI_CWindows_CStorage_CFileAttributes_Archive
    }
    public static var temporary : test_component.FileAttributes {
        __x_ABI_CWindows_CStorage_CFileAttributes_Temporary
    }
    public static var locallyIncomplete : test_component.FileAttributes {
        __x_ABI_CWindows_CStorage_CFileAttributes_LocallyIncomplete
    }
}
extension test_component.FileAttributes: @retroactive Hashable, @retroactive Codable {}

extension test_component.NameCollisionOption {
    public static var generateUniqueName : test_component.NameCollisionOption {
        __x_ABI_CWindows_CStorage_CNameCollisionOption_GenerateUniqueName
    }
    public static var replaceExisting : test_component.NameCollisionOption {
        __x_ABI_CWindows_CStorage_CNameCollisionOption_ReplaceExisting
    }
    public static var failIfExists : test_component.NameCollisionOption {
        __x_ABI_CWindows_CStorage_CNameCollisionOption_FailIfExists
    }
}
extension test_component.NameCollisionOption: @retroactive Hashable, @retroactive Codable {}

extension test_component.StorageDeleteOption {
    public static var `default` : test_component.StorageDeleteOption {
        __x_ABI_CWindows_CStorage_CStorageDeleteOption_Default
    }
    public static var permanentDelete : test_component.StorageDeleteOption {
        __x_ABI_CWindows_CStorage_CStorageDeleteOption_PermanentDelete
    }
}
extension test_component.StorageDeleteOption: @retroactive Hashable, @retroactive Codable {}

extension test_component.StorageItemTypes {
    public static var none : test_component.StorageItemTypes {
        __x_ABI_CWindows_CStorage_CStorageItemTypes_None
    }
    public static var file : test_component.StorageItemTypes {
        __x_ABI_CWindows_CStorage_CStorageItemTypes_File
    }
    public static var folder : test_component.StorageItemTypes {
        __x_ABI_CWindows_CStorage_CStorageItemTypes_Folder
    }
}
extension test_component.StorageItemTypes: @retroactive Hashable, @retroactive Codable {}

extension test_component.StorageLibraryChangeType {
    public static var created : test_component.StorageLibraryChangeType {
        __x_ABI_CWindows_CStorage_CStorageLibraryChangeType_Created
    }
    public static var deleted : test_component.StorageLibraryChangeType {
        __x_ABI_CWindows_CStorage_CStorageLibraryChangeType_Deleted
    }
    public static var movedOrRenamed : test_component.StorageLibraryChangeType {
        __x_ABI_CWindows_CStorage_CStorageLibraryChangeType_MovedOrRenamed
    }
    public static var contentsChanged : test_component.StorageLibraryChangeType {
        __x_ABI_CWindows_CStorage_CStorageLibraryChangeType_ContentsChanged
    }
    public static var movedOutOfLibrary : test_component.StorageLibraryChangeType {
        __x_ABI_CWindows_CStorage_CStorageLibraryChangeType_MovedOutOfLibrary
    }
    public static var movedIntoLibrary : test_component.StorageLibraryChangeType {
        __x_ABI_CWindows_CStorage_CStorageLibraryChangeType_MovedIntoLibrary
    }
    public static var contentsReplaced : test_component.StorageLibraryChangeType {
        __x_ABI_CWindows_CStorage_CStorageLibraryChangeType_ContentsReplaced
    }
    public static var indexingStatusChanged : test_component.StorageLibraryChangeType {
        __x_ABI_CWindows_CStorage_CStorageLibraryChangeType_IndexingStatusChanged
    }
    public static var encryptionChanged : test_component.StorageLibraryChangeType {
        __x_ABI_CWindows_CStorage_CStorageLibraryChangeType_EncryptionChanged
    }
    public static var changeTrackingLost : test_component.StorageLibraryChangeType {
        __x_ABI_CWindows_CStorage_CStorageLibraryChangeType_ChangeTrackingLost
    }
}
extension test_component.StorageLibraryChangeType: @retroactive Hashable, @retroactive Codable {}

extension test_component.StorageOpenOptions {
    public static var none : test_component.StorageOpenOptions {
        __x_ABI_CWindows_CStorage_CStorageOpenOptions_None
    }
    public static var allowOnlyReaders : test_component.StorageOpenOptions {
        __x_ABI_CWindows_CStorage_CStorageOpenOptions_AllowOnlyReaders
    }
    public static var allowReadersAndWriters : test_component.StorageOpenOptions {
        __x_ABI_CWindows_CStorage_CStorageOpenOptions_AllowReadersAndWriters
    }
}
extension test_component.StorageOpenOptions: @retroactive Hashable, @retroactive Codable {}

extension test_component.StreamedFileFailureMode {
    public static var failed : test_component.StreamedFileFailureMode {
        __x_ABI_CWindows_CStorage_CStreamedFileFailureMode_Failed
    }
    public static var currentlyUnavailable : test_component.StreamedFileFailureMode {
        __x_ABI_CWindows_CStorage_CStreamedFileFailureMode_CurrentlyUnavailable
    }
    public static var incomplete : test_component.StreamedFileFailureMode {
        __x_ABI_CWindows_CStorage_CStreamedFileFailureMode_Incomplete
    }
}
extension test_component.StreamedFileFailureMode: @retroactive Hashable, @retroactive Codable {}


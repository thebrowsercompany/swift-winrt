// WARNING: Please don't edit this file. It was generated by Swift/WinRT v0.0.1
// swiftlint:disable all
import Foundation
import Ctest_component

public typealias InObjectDelegate = (Any?) throws -> ()

// MARK: - Internals

@_spi(WinRTInternal)
extension __IMPL_test_component_Delegates {
    public class InObjectDelegateBridge : WinRTDelegateBridge {
        public typealias Handler = InObjectDelegate
        public typealias CABI = __x_ABI_Ctest__component_CDelegates_CIInObjectDelegate
        public typealias SwiftABI = __ABI_test_component_Delegates.InObjectDelegate

        public static func from(abi: ComPtr<CABI>?) -> Handler? {
            guard let abi = abi else { return nil }
            let _default = SwiftABI(abi)
            let handler: Handler = { (value) in
                try _default.Invoke(value)
            }
            return handler
        }
    }
}
@_spi(WinRTInternal)
extension __ABI_test_component_Delegates {
    private static let IID___x_ABI_Ctest__component_CDelegates_CIInObjectDelegate: test_component.IID = .init(
        Data1: 0x68F889F8, Data2: 0x1A16, Data3: 0x5F6D, Data4: ( 0x8A,0x04,0x24,0x58,0x38,0xEA,0xF3,0xD4 ) // 68F889F8-1A16-5F6D-8A04-245838EAF3D4
    ) 
    public class InObjectDelegate: test_component.IUnknown {
        override public class var IID: test_component.IID { IID___x_ABI_Ctest__component_CDelegates_CIInObjectDelegate }

        open func Invoke(_ value: Any?) throws {
            let valueWrapper = __ABI_.AnyWrapper(value)
            let _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_Ctest__component_CDelegates_CIInObjectDelegate.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Invoke(pThis, _value))
            }
        }

    }


    typealias InObjectDelegateWrapper = InterfaceWrapperBase<__IMPL_test_component_Delegates.InObjectDelegateBridge>
    internal static var InObjectDelegateVTable: __x_ABI_Ctest__component_CDelegates_CIInObjectDelegateVtbl = .init(
        QueryInterface: { InObjectDelegateWrapper.queryInterface($0, $1, $2) },
        AddRef: { InObjectDelegateWrapper.addRef($0) },
        Release: { InObjectDelegateWrapper.release($0) },
        Invoke: {
            do {
                guard let __unwrapped__instance = InObjectDelegateWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let value: Any? = __ABI_.AnyWrapper.unwrapFrom(abi: ComPtr($1))
                try __unwrapped__instance(value)
                return S_OK
            } catch { return failWith(error: error) }
        }
    )
}
@_spi(WinRTInternal)
public extension WinRTDelegateBridge where CABI == __x_ABI_Ctest__component_CDelegates_CIInObjectDelegate {
    static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__ABI_test_component_Delegates.InObjectDelegateVTable) { $0 }
        return .init(lpVtbl:vtblPtr)
    }
}


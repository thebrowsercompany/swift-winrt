// WARNING: Please don't edit this file. It was generated by Swift/WinRT v0.0.1
// swiftlint:disable all
import Foundation
import Ctest_component

@_spi(WinRTInternal)
public enum __IMPL_Windows_Storage_Search {
    public enum IStorageFolderQueryOperationsBridge : AbiInterfaceBridge {
        public typealias CABI = __x_ABI_CWindows_CStorage_CSearch_CIStorageFolderQueryOperations
        public typealias SwiftABI = __ABI_Windows_Storage_Search.IStorageFolderQueryOperations
        public typealias SwiftProjection = AnyIStorageFolderQueryOperations
        public static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
            guard let abi = abi else { return nil }
            return IStorageFolderQueryOperationsImpl(abi)
        }

        public static func makeAbi() -> CABI {
            let vtblPtr = withUnsafeMutablePointer(to: &__ABI_Windows_Storage_Search.IStorageFolderQueryOperationsVTable) { $0 }
            return .init(lpVtbl: vtblPtr)
        }
    }

    fileprivate class IStorageFolderQueryOperationsImpl: IStorageFolderQueryOperations, WinRTAbiImpl {
        fileprivate typealias Bridge = IStorageFolderQueryOperationsBridge
        fileprivate let _default: Bridge.SwiftABI
        fileprivate var thisPtr: test_component.IInspectable { _default }
        fileprivate init(_ fromAbi: ComPtr<Bridge.CABI>) {
            _default = Bridge.SwiftABI(fromAbi)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.search.istoragefolderqueryoperations.getindexedstateasync)
        fileprivate func getIndexedStateAsync() throws -> AnyIAsyncOperation<IndexedState>! {
            try _default.GetIndexedStateAsync()
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.search.istoragefolderqueryoperations.createfilequery)
        fileprivate func createFileQuery() throws -> StorageFileQueryResult! {
            try _default.CreateFileQueryOverloadDefault()
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.search.istoragefolderqueryoperations.createfilequery)
        fileprivate func createFileQuery(_ query: CommonFileQuery) throws -> StorageFileQueryResult! {
            try _default.CreateFileQuery(query)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.search.istoragefolderqueryoperations.createfilequerywithoptions)
        fileprivate func createFileQueryWithOptions(_ queryOptions: QueryOptions!) throws -> StorageFileQueryResult! {
            try _default.CreateFileQueryWithOptions(queryOptions)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.search.istoragefolderqueryoperations.createfolderquery)
        fileprivate func createFolderQuery() throws -> StorageFolderQueryResult! {
            try _default.CreateFolderQueryOverloadDefault()
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.search.istoragefolderqueryoperations.createfolderquery)
        fileprivate func createFolderQuery(_ query: CommonFolderQuery) throws -> StorageFolderQueryResult! {
            try _default.CreateFolderQuery(query)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.search.istoragefolderqueryoperations.createfolderquerywithoptions)
        fileprivate func createFolderQueryWithOptions(_ queryOptions: QueryOptions!) throws -> StorageFolderQueryResult! {
            try _default.CreateFolderQueryWithOptions(queryOptions)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.search.istoragefolderqueryoperations.createitemquery)
        fileprivate func createItemQuery() throws -> StorageItemQueryResult! {
            try _default.CreateItemQuery()
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.search.istoragefolderqueryoperations.createitemquerywithoptions)
        fileprivate func createItemQueryWithOptions(_ queryOptions: QueryOptions!) throws -> StorageItemQueryResult! {
            try _default.CreateItemQueryWithOptions(queryOptions)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.search.istoragefolderqueryoperations.getfilesasync)
        fileprivate func getFilesAsync(_ query: CommonFileQuery, _ startIndex: UInt32, _ maxItemsToRetrieve: UInt32) throws -> AnyIAsyncOperation<AnyIVectorView<test_component.StorageFile?>?>! {
            try _default.GetFilesAsync(query, startIndex, maxItemsToRetrieve)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.search.istoragefolderqueryoperations.getfilesasync)
        fileprivate func getFilesAsync(_ query: CommonFileQuery) throws -> AnyIAsyncOperation<AnyIVectorView<test_component.StorageFile?>?>! {
            try _default.GetFilesAsyncOverloadDefaultStartAndCount(query)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.search.istoragefolderqueryoperations.getfoldersasync)
        fileprivate func getFoldersAsync(_ query: CommonFolderQuery, _ startIndex: UInt32, _ maxItemsToRetrieve: UInt32) throws -> AnyIAsyncOperation<AnyIVectorView<test_component.StorageFolder?>?>! {
            try _default.GetFoldersAsync(query, startIndex, maxItemsToRetrieve)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.search.istoragefolderqueryoperations.getfoldersasync)
        fileprivate func getFoldersAsync(_ query: CommonFolderQuery) throws -> AnyIAsyncOperation<AnyIVectorView<test_component.StorageFolder?>?>! {
            try _default.GetFoldersAsyncOverloadDefaultStartAndCount(query)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.search.istoragefolderqueryoperations.getitemsasync)
        fileprivate func getItemsAsync(_ startIndex: UInt32, _ maxItemsToRetrieve: UInt32) throws -> AnyIAsyncOperation<AnyIVectorView<test_component.AnyIStorageItem?>?>! {
            try _default.GetItemsAsync(startIndex, maxItemsToRetrieve)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.search.istoragefolderqueryoperations.arequeryoptionssupported)
        fileprivate func areQueryOptionsSupported(_ queryOptions: QueryOptions!) throws -> Bool {
            try _default.AreQueryOptionsSupported(queryOptions)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.search.istoragefolderqueryoperations.iscommonfolderquerysupported)
        fileprivate func isCommonFolderQuerySupported(_ query: CommonFolderQuery) throws -> Bool {
            try _default.IsCommonFolderQuerySupported(query)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.search.istoragefolderqueryoperations.iscommonfilequerysupported)
        fileprivate func isCommonFileQuerySupported(_ query: CommonFileQuery) throws -> Bool {
            try _default.IsCommonFileQuerySupported(query)
        }

    }

    public enum IStorageQueryResultBaseBridge : AbiInterfaceBridge {
        public typealias CABI = __x_ABI_CWindows_CStorage_CSearch_CIStorageQueryResultBase
        public typealias SwiftABI = __ABI_Windows_Storage_Search.IStorageQueryResultBase
        public typealias SwiftProjection = AnyIStorageQueryResultBase
        public static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
            guard let abi = abi else { return nil }
            return IStorageQueryResultBaseImpl(abi)
        }

        public static func makeAbi() -> CABI {
            let vtblPtr = withUnsafeMutablePointer(to: &__ABI_Windows_Storage_Search.IStorageQueryResultBaseVTable) { $0 }
            return .init(lpVtbl: vtblPtr)
        }
    }

    fileprivate class IStorageQueryResultBaseImpl: IStorageQueryResultBase, WinRTAbiImpl {
        fileprivate typealias Bridge = IStorageQueryResultBaseBridge
        fileprivate let _default: Bridge.SwiftABI
        fileprivate var thisPtr: test_component.IInspectable { _default }
        fileprivate init(_ fromAbi: ComPtr<Bridge.CABI>) {
            _default = Bridge.SwiftABI(fromAbi)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.search.istoragequeryresultbase.getitemcountasync)
        fileprivate func getItemCountAsync() throws -> AnyIAsyncOperation<UInt32>! {
            try _default.GetItemCountAsync()
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.search.istoragequeryresultbase.findstartindexasync)
        fileprivate func findStartIndexAsync(_ value: Any!) throws -> AnyIAsyncOperation<UInt32>! {
            try _default.FindStartIndexAsync(value)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.search.istoragequeryresultbase.getcurrentqueryoptions)
        fileprivate func getCurrentQueryOptions() throws -> QueryOptions! {
            try _default.GetCurrentQueryOptions()
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.search.istoragequeryresultbase.applynewqueryoptions)
        fileprivate func applyNewQueryOptions(_ newQueryOptions: QueryOptions!) throws {
            try _default.ApplyNewQueryOptions(newQueryOptions)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.search.istoragequeryresultbase.folder)
        fileprivate var folder : test_component.StorageFolder! {
            get { try! _default.get_Folder() }
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.search.istoragequeryresultbase.contentschanged)
        fileprivate lazy var contentsChanged : Event<TypedEventHandler<IStorageQueryResultBase?, Any?>> = {
          .init(
            add: { [weak self] in
              guard let this = self?._default else { return .init() }
              return try! this.add_ContentsChanged($0)
            },
            remove: { [weak self] in
             try? self?._default.remove_ContentsChanged($0)
           }
          )
        }()

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.search.istoragequeryresultbase.optionschanged)
        fileprivate lazy var optionsChanged : Event<TypedEventHandler<IStorageQueryResultBase?, Any?>> = {
          .init(
            add: { [weak self] in
              guard let this = self?._default else { return .init() }
              return try! this.add_OptionsChanged($0)
            },
            remove: { [weak self] in
             try? self?._default.remove_OptionsChanged($0)
           }
          )
        }()

    }

    public enum QueryOptionsBridge: AbiBridge {
        public typealias SwiftProjection = QueryOptions
        public typealias CABI = __x_ABI_CWindows_CStorage_CSearch_CIQueryOptions
        public static func from(abi: ComPtr<__x_ABI_CWindows_CStorage_CSearch_CIQueryOptions>?) -> QueryOptions? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: test_component.IInspectable(abi))
        }
    }

    public enum StorageFileQueryResultBridge: AbiBridge {
        public typealias SwiftProjection = StorageFileQueryResult
        public typealias CABI = __x_ABI_CWindows_CStorage_CSearch_CIStorageFileQueryResult
        public static func from(abi: ComPtr<__x_ABI_CWindows_CStorage_CSearch_CIStorageFileQueryResult>?) -> StorageFileQueryResult? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: test_component.IInspectable(abi))
        }
    }

    public enum StorageFolderQueryResultBridge: AbiBridge {
        public typealias SwiftProjection = StorageFolderQueryResult
        public typealias CABI = __x_ABI_CWindows_CStorage_CSearch_CIStorageFolderQueryResult
        public static func from(abi: ComPtr<__x_ABI_CWindows_CStorage_CSearch_CIStorageFolderQueryResult>?) -> StorageFolderQueryResult? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: test_component.IInspectable(abi))
        }
    }

    public enum StorageItemQueryResultBridge: AbiBridge {
        public typealias SwiftProjection = StorageItemQueryResult
        public typealias CABI = __x_ABI_CWindows_CStorage_CSearch_CIStorageItemQueryResult
        public static func from(abi: ComPtr<__x_ABI_CWindows_CStorage_CSearch_CIStorageItemQueryResult>?) -> StorageItemQueryResult? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: test_component.IInspectable(abi))
        }
    }

}
@_spi(WinRTInternal)
extension SortEntry: WinRTBridgeable {
    public typealias ABI = __x_ABI_CWindows_CStorage_CSearch_CSortEntry
    public static func from(abi: ABI) -> Self {
        .init(propertyName: .init(from: abi.PropertyName), ascendingOrder: .init(from: abi.AscendingOrder))
    }
    public func toABI() -> ABI {
        __ABI_Windows_Storage_Search._ABI_SortEntry(from: self).detach()
    }
}


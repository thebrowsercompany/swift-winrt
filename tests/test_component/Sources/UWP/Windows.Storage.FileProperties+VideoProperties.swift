// WARNING: Please don't edit this file. It was generated by Swift/WinRT v0.0.1
// swiftlint:disable all
import Foundation
import CUWP
@_spi(WinRTInternal) @_spi(WinRTImplements) import WindowsFoundation
import CWindowsFoundation
import CWinRT

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.fileproperties.videoproperties)
public final class VideoProperties : WinRTClass, IStorageItemExtraProperties {
    private typealias SwiftABI = __ABI_Windows_Storage_FileProperties.IVideoProperties
    private typealias CABI = __x_ABI_CWindows_CStorage_CFileProperties_CIVideoProperties
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private lazy var _IStorageItemExtraProperties: __ABI_Windows_Storage_FileProperties.IStorageItemExtraProperties! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.fileproperties.videoproperties.retrievepropertiesasync)
    public func retrievePropertiesAsync(_ propertiesToRetrieve: WindowsFoundation.AnyIIterable<String>!) throws -> WindowsFoundation.AnyIAsyncOperation<WindowsFoundation.AnyIMap<String, Any?>?>! {
        try _IStorageItemExtraProperties.RetrievePropertiesAsync(propertiesToRetrieve)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.fileproperties.videoproperties.savepropertiesasync)
    public func savePropertiesAsync(_ propertiesToSave: WindowsFoundation.AnyIIterable<WindowsFoundation.AnyIKeyValuePair<String, Any?>?>!) throws -> WindowsFoundation.AnyIAsyncAction! {
        try _IStorageItemExtraProperties.SavePropertiesAsync(propertiesToSave)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.fileproperties.videoproperties.savepropertiesasync)
    public func savePropertiesAsync() throws -> WindowsFoundation.AnyIAsyncAction! {
        try _IStorageItemExtraProperties.SavePropertiesAsyncOverloadDefault()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.fileproperties.videoproperties.bitrate)
    public var bitrate : UInt32 {
        get { try! _default.get_Bitrate() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.fileproperties.videoproperties.directors)
    public var directors : WindowsFoundation.AnyIVector<String>! {
        get { try! _default.get_Directors() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.fileproperties.videoproperties.duration)
    public var duration : WindowsFoundation.TimeSpan {
        get { try! _default.get_Duration() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.fileproperties.videoproperties.height)
    public var height : UInt32 {
        get { try! _default.get_Height() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.fileproperties.videoproperties.keywords)
    public var keywords : WindowsFoundation.AnyIVector<String>! {
        get { try! _default.get_Keywords() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.fileproperties.videoproperties.latitude)
    public var latitude : Double? {
        get { try! _default.get_Latitude() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.fileproperties.videoproperties.longitude)
    public var longitude : Double? {
        get { try! _default.get_Longitude() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.fileproperties.videoproperties.orientation)
    public var orientation : VideoOrientation {
        get { try! _default.get_Orientation() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.fileproperties.videoproperties.producers)
    public var producers : WindowsFoundation.AnyIVector<String>! {
        get { try! _default.get_Producers() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.fileproperties.videoproperties.publisher)
    public var publisher : String {
        get { try! _default.get_Publisher() }
        set { try! _default.put_Publisher(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.fileproperties.videoproperties.rating)
    public var rating : UInt32 {
        get { try! _default.get_Rating() }
        set { try! _default.put_Rating(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.fileproperties.videoproperties.subtitle)
    public var subtitle : String {
        get { try! _default.get_Subtitle() }
        set { try! _default.put_Subtitle(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.fileproperties.videoproperties.title)
    public var title : String {
        get { try! _default.get_Title() }
        set { try! _default.put_Title(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.fileproperties.videoproperties.width)
    public var width : UInt32 {
        get { try! _default.get_Width() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.fileproperties.videoproperties.writers)
    public var writers : WindowsFoundation.AnyIVector<String>! {
        get { try! _default.get_Writers() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.fileproperties.videoproperties.year)
    public var year : UInt32 {
        get { try! _default.get_Year() }
        set { try! _default.put_Year(newValue) }
    }

    deinit {
        _IStorageItemExtraProperties = nil
        _default = nil
    }
}

// MARK: - VideoProperties Internals

@_spi(WinRTInternal)
extension __IMPL_Windows_Storage_FileProperties {
    public enum VideoPropertiesBridge: AbiBridge {
        public typealias SwiftProjection = VideoProperties
        public typealias CABI = __x_ABI_CWindows_CStorage_CFileProperties_CIVideoProperties
        public static func from(abi: ComPtr<__x_ABI_CWindows_CStorage_CFileProperties_CIVideoProperties>?) -> VideoProperties? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

}
@_spi(WinRTInternal)
public class VideoPropertiesMaker: MakeFromAbi {
    public typealias SwiftType = VideoProperties
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return VideoProperties(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
extension __ABI_Windows_Storage_FileProperties {
    private static let IID___x_ABI_CWindows_CStorage_CFileProperties_CIVideoProperties: WindowsFoundation.IID = .init(
        Data1: 0x719AE507, Data2: 0x68DE, Data3: 0x4DB8, Data4: ( 0x97,0xDE,0x49,0x99,0x8C,0x05,0x9F,0x2F ) // 719AE507-68DE-4DB8-97DE-49998C059F2F
    ) 

    public class IVideoProperties: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CStorage_CFileProperties_CIVideoProperties }

        public func get_Rating() throws -> UInt32 {
            var value: UINT32 = 0
            _ = try perform(as: __x_ABI_CWindows_CStorage_CFileProperties_CIVideoProperties.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Rating(pThis, &value))
            }
            return value
        }

        public func put_Rating(_ value: UInt32) throws {
            _ = try perform(as: __x_ABI_CWindows_CStorage_CFileProperties_CIVideoProperties.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Rating(pThis, value))
            }
        }

        public func get_Keywords() throws -> WindowsFoundation.AnyIVector<String>? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CStorage_CFileProperties_CIVideoProperties.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Keywords(pThis, &valueAbi))
                }
            }
            return UWP.__x_ABI_C__FIVector_1_HSTRINGWrapper.unwrapFrom(abi: value)
        }

        public func get_Width() throws -> UInt32 {
            var value: UINT32 = 0
            _ = try perform(as: __x_ABI_CWindows_CStorage_CFileProperties_CIVideoProperties.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Width(pThis, &value))
            }
            return value
        }

        public func get_Height() throws -> UInt32 {
            var value: UINT32 = 0
            _ = try perform(as: __x_ABI_CWindows_CStorage_CFileProperties_CIVideoProperties.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Height(pThis, &value))
            }
            return value
        }

        public func get_Duration() throws -> WindowsFoundation.TimeSpan {
            var value: __x_ABI_CWindows_CFoundation_CTimeSpan = .init()
            _ = try perform(as: __x_ABI_CWindows_CStorage_CFileProperties_CIVideoProperties.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Duration(pThis, &value))
            }
            return .from(abi: value)
        }

        public func get_Latitude() throws -> Double? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CStorage_CFileProperties_CIVideoProperties.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Latitude(pThis, &valueAbi))
                }
            }
            return UWP.__x_ABI_C__FIReference_1_doubleWrapper.unwrapFrom(abi: value)
        }

        public func get_Longitude() throws -> Double? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CStorage_CFileProperties_CIVideoProperties.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Longitude(pThis, &valueAbi))
                }
            }
            return UWP.__x_ABI_C__FIReference_1_doubleWrapper.unwrapFrom(abi: value)
        }

        public func get_Title() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CWindows_CStorage_CFileProperties_CIVideoProperties.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Title(pThis, &value))
            }
            return .init(from: value)
        }

        public func put_Title(_ value: String) throws {
            let _value = try! HString(value)
            _ = try perform(as: __x_ABI_CWindows_CStorage_CFileProperties_CIVideoProperties.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Title(pThis, _value.get()))
            }
        }

        public func get_Subtitle() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CWindows_CStorage_CFileProperties_CIVideoProperties.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Subtitle(pThis, &value))
            }
            return .init(from: value)
        }

        public func put_Subtitle(_ value: String) throws {
            let _value = try! HString(value)
            _ = try perform(as: __x_ABI_CWindows_CStorage_CFileProperties_CIVideoProperties.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Subtitle(pThis, _value.get()))
            }
        }

        public func get_Producers() throws -> WindowsFoundation.AnyIVector<String>? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CStorage_CFileProperties_CIVideoProperties.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Producers(pThis, &valueAbi))
                }
            }
            return UWP.__x_ABI_C__FIVector_1_HSTRINGWrapper.unwrapFrom(abi: value)
        }

        public func get_Publisher() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CWindows_CStorage_CFileProperties_CIVideoProperties.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Publisher(pThis, &value))
            }
            return .init(from: value)
        }

        public func put_Publisher(_ value: String) throws {
            let _value = try! HString(value)
            _ = try perform(as: __x_ABI_CWindows_CStorage_CFileProperties_CIVideoProperties.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Publisher(pThis, _value.get()))
            }
        }

        public func get_Writers() throws -> WindowsFoundation.AnyIVector<String>? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CStorage_CFileProperties_CIVideoProperties.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Writers(pThis, &valueAbi))
                }
            }
            return UWP.__x_ABI_C__FIVector_1_HSTRINGWrapper.unwrapFrom(abi: value)
        }

        public func get_Year() throws -> UInt32 {
            var value: UINT32 = 0
            _ = try perform(as: __x_ABI_CWindows_CStorage_CFileProperties_CIVideoProperties.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Year(pThis, &value))
            }
            return value
        }

        public func put_Year(_ value: UInt32) throws {
            _ = try perform(as: __x_ABI_CWindows_CStorage_CFileProperties_CIVideoProperties.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Year(pThis, value))
            }
        }

        public func get_Bitrate() throws -> UInt32 {
            var value: UINT32 = 0
            _ = try perform(as: __x_ABI_CWindows_CStorage_CFileProperties_CIVideoProperties.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Bitrate(pThis, &value))
            }
            return value
        }

        public func get_Directors() throws -> WindowsFoundation.AnyIVector<String>? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CStorage_CFileProperties_CIVideoProperties.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Directors(pThis, &valueAbi))
                }
            }
            return UWP.__x_ABI_C__FIVector_1_HSTRINGWrapper.unwrapFrom(abi: value)
        }

        public func get_Orientation() throws -> UWP.VideoOrientation {
            var value: __x_ABI_CWindows_CStorage_CFileProperties_CVideoOrientation = .init(0)
            _ = try perform(as: __x_ABI_CWindows_CStorage_CFileProperties_CIVideoProperties.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Orientation(pThis, &value))
            }
            return value
        }

    }

}

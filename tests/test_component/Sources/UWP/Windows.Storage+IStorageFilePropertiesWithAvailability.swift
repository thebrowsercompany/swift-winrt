// WARNING: Please don't edit this file. It was generated by Swift/WinRT v0.0.1
// swiftlint:disable all
import Foundation
@_spi(WinRTInternal) @_spi(WinRTImplements) import WindowsFoundation
import CWinRT

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.istoragefilepropertieswithavailability)
public protocol IStorageFilePropertiesWithAvailability : WinRTInterface {
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.istoragefilepropertieswithavailability.isavailable)
    var isAvailable: Bool { get }
}

extension IStorageFilePropertiesWithAvailability {
    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        switch iid {
            case __ABI_Windows_Storage.IStorageFilePropertiesWithAvailabilityWrapper.IID:
                let wrapper = __ABI_Windows_Storage.IStorageFilePropertiesWithAvailabilityWrapper(self)
                return wrapper!.queryInterface(iid)
            default: return nil
        }
    }
}
public typealias AnyIStorageFilePropertiesWithAvailability = any IStorageFilePropertiesWithAvailability

// MARK: - IStorageFilePropertiesWithAvailability Internals

@_spi(WinRTInternal)
extension __IMPL_Windows_Storage {
    public enum IStorageFilePropertiesWithAvailabilityBridge : AbiInterfaceBridge {
        public typealias CABI = __x_ABI_CWindows_CStorage_CIStorageFilePropertiesWithAvailability
        public typealias SwiftABI = __ABI_Windows_Storage.IStorageFilePropertiesWithAvailability
        public typealias SwiftProjection = AnyIStorageFilePropertiesWithAvailability
        public static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
            guard let abi = abi else { return nil }
            return IStorageFilePropertiesWithAvailabilityImpl(abi)
        }

        public static func makeAbi() -> CABI {
            let vtblPtr = withUnsafeMutablePointer(to: &__ABI_Windows_Storage.IStorageFilePropertiesWithAvailabilityVTable) { $0 }
            return .init(lpVtbl: vtblPtr)
        }
    }

    fileprivate class IStorageFilePropertiesWithAvailabilityImpl: IStorageFilePropertiesWithAvailability, WinRTAbiImpl {
        fileprivate typealias Bridge = IStorageFilePropertiesWithAvailabilityBridge
        fileprivate let _default: Bridge.SwiftABI
        fileprivate var thisPtr: WindowsFoundation.IInspectable { _default }
        fileprivate init(_ fromAbi: ComPtr<Bridge.CABI>) {
            _default = Bridge.SwiftABI(fromAbi)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.istoragefilepropertieswithavailability.isavailable)
        fileprivate var isAvailable : Bool {
            get { try! _default.get_IsAvailable() }
        }

    }

}
@_spi(WinRTInternal)
extension __ABI_Windows_Storage {
    private static let IID___x_ABI_CWindows_CStorage_CIStorageFilePropertiesWithAvailability: WindowsFoundation.IID = .init(
        Data1: 0xAFCBBE9B, Data2: 0x582B, Data3: 0x4133, Data4: ( 0x96,0x48,0xE4,0x4C,0xA4,0x6E,0xE4,0x91 ) // AFCBBE9B-582B-4133-9648-E44CA46EE491
    ) 

    public class IStorageFilePropertiesWithAvailability: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CStorage_CIStorageFilePropertiesWithAvailability }

        open func get_IsAvailable() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CWindows_CStorage_CIStorageFilePropertiesWithAvailability.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsAvailable(pThis, &value))
            }
            return .init(from: value)
        }

    }

    internal static var IStorageFilePropertiesWithAvailabilityVTable: __x_ABI_CWindows_CStorage_CIStorageFilePropertiesWithAvailabilityVtbl = .init(
        QueryInterface: { IStorageFilePropertiesWithAvailabilityWrapper.queryInterface($0, $1, $2) },
        AddRef: { IStorageFilePropertiesWithAvailabilityWrapper.addRef($0) },
        Release: { IStorageFilePropertiesWithAvailabilityWrapper.release($0) },
        GetIids: {
            let size = MemoryLayout<WindowsFoundation.IID>.size
            let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: WindowsFoundation.IID.self)
            iids[0] = IUnknown.IID
            iids[1] = IInspectable.IID
            iids[2] = __ABI_Windows_Storage.IStorageFilePropertiesWithAvailabilityWrapper.IID
            $1!.pointee = 3
            $2!.pointee = iids
            return S_OK
        },

        GetRuntimeClassName: {
            _ = $0
            let hstring = try! HString("Windows.Storage.IStorageFilePropertiesWithAvailability").detach()
            $1!.pointee = hstring
            return S_OK
        },

        GetTrustLevel: {
            _ = $0
            $1!.pointee = TrustLevel(rawValue: 0)
            return S_OK
        },

        get_IsAvailable: {
            guard let __unwrapped__instance = IStorageFilePropertiesWithAvailabilityWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value = __unwrapped__instance.isAvailable
            $1?.initialize(to: .init(from: value))
            return S_OK
        }
    )

    public typealias IStorageFilePropertiesWithAvailabilityWrapper = InterfaceWrapperBase<__IMPL_Windows_Storage.IStorageFilePropertiesWithAvailabilityBridge>
}
@_spi(WinRTInternal)
public class IStorageFilePropertiesWithAvailabilityMaker: MakeFromAbi {
    public typealias SwiftType = AnyIStorageFilePropertiesWithAvailability
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        let swiftAbi: __ABI_Windows_Storage.IStorageFilePropertiesWithAvailability = try! abi.QueryInterface()
        return __IMPL_Windows_Storage.IStorageFilePropertiesWithAvailabilityBridge.from(abi: RawPointer(swiftAbi))!
    }
}

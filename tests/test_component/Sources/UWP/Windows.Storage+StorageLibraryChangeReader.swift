// WARNING: Please don't edit this file. It was generated by Swift/WinRT v0.0.1
// swiftlint:disable all
import Foundation
@_spi(WinRTInternal) @_spi(WinRTImplements) import WindowsFoundation
import CWinRT

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.storagelibrarychangereader)
public final class StorageLibraryChangeReader : WinRTClass {
    private typealias SwiftABI = __ABI_Windows_Storage.IStorageLibraryChangeReader
    private typealias CABI = __x_ABI_CWindows_CStorage_CIStorageLibraryChangeReader
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.storagelibrarychangereader.readbatchasync)
    public func readBatchAsync() throws -> WindowsFoundation.AnyIAsyncOperation<WindowsFoundation.AnyIVectorView<StorageLibraryChange?>?>! {
        try _default.ReadBatchAsync()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.storagelibrarychangereader.acceptchangesasync)
    public func acceptChangesAsync() throws -> WindowsFoundation.AnyIAsyncAction! {
        try _default.AcceptChangesAsync()
    }

    private lazy var _IStorageLibraryChangeReader2: __ABI_Windows_Storage.IStorageLibraryChangeReader2! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.storagelibrarychangereader.getlastchangeid)
    public func getLastChangeId() throws -> UInt64 {
        try _IStorageLibraryChangeReader2.GetLastChangeId()
    }

    deinit {
        _default = nil
        _IStorageLibraryChangeReader2 = nil
    }
}

// MARK: - StorageLibraryChangeReader Internals

@_spi(WinRTInternal)
extension __IMPL_Windows_Storage {
    public enum StorageLibraryChangeReaderBridge: AbiBridge {
        public typealias SwiftProjection = StorageLibraryChangeReader
        public typealias CABI = __x_ABI_CWindows_CStorage_CIStorageLibraryChangeReader
        public static func from(abi: ComPtr<__x_ABI_CWindows_CStorage_CIStorageLibraryChangeReader>?) -> StorageLibraryChangeReader? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

}
@_spi(WinRTInternal)
public class StorageLibraryChangeReaderMaker: MakeFromAbi {
    public typealias SwiftType = StorageLibraryChangeReader
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return StorageLibraryChangeReader(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
extension __ABI_Windows_Storage {
    private static let IID___x_ABI_CWindows_CStorage_CIStorageLibraryChangeReader: WindowsFoundation.IID = .init(
        Data1: 0xF205BC83, Data2: 0xFCA2, Data3: 0x41F9, Data4: ( 0x89,0x54,0xEE,0x2E,0x99,0x1E,0xB9,0x6F ) // F205BC83-FCA2-41F9-8954-EE2E991EB96F
    ) 

    public class IStorageLibraryChangeReader: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CStorage_CIStorageLibraryChangeReader }

        public func ReadBatchAsync() throws -> WindowsFoundation.AnyIAsyncOperation<WindowsFoundation.AnyIVectorView<UWP.StorageLibraryChange?>?>? {
            let (operation) = try ComPtrs.initialize { operationAbi in
                _ = try perform(as: __x_ABI_CWindows_CStorage_CIStorageLibraryChangeReader.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.ReadBatchAsync(pThis, &operationAbi))
                }
            }
            return UWP.__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CStorageLibraryChangeWrapper.unwrapFrom(abi: operation)
        }

        public func AcceptChangesAsync() throws -> WindowsFoundation.AnyIAsyncAction? {
            let (operation) = try ComPtrs.initialize { operationAbi in
                _ = try perform(as: __x_ABI_CWindows_CStorage_CIStorageLibraryChangeReader.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.AcceptChangesAsync(pThis, &operationAbi))
                }
            }
            return __ABI_Windows_Foundation.IAsyncActionWrapper.unwrapFrom(abi: operation)
        }

    }

    private static let IID___x_ABI_CWindows_CStorage_CIStorageLibraryChangeReader2: WindowsFoundation.IID = .init(
        Data1: 0xABF4868B, Data2: 0xFBCC, Data3: 0x4A4F, Data4: ( 0x99,0x9E,0xE7,0xAB,0x7C,0x64,0x6D,0xBE ) // ABF4868B-FBCC-4A4F-999E-E7AB7C646DBE
    ) 

    public class IStorageLibraryChangeReader2: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CStorage_CIStorageLibraryChangeReader2 }

        public func GetLastChangeId() throws -> UInt64 {
            var result: UINT64 = 0
            _ = try perform(as: __x_ABI_CWindows_CStorage_CIStorageLibraryChangeReader2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetLastChangeId(pThis, &result))
            }
            return result
        }

    }

}

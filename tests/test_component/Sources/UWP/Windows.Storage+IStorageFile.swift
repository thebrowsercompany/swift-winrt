// WARNING: Please don't edit this file. It was generated by Swift/WinRT v0.0.1
// swiftlint:disable all
import Foundation
import CUWP
@_spi(WinRTInternal) @_spi(WinRTImplements) import WindowsFoundation
import CWindowsFoundation
import CWinRT

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.istoragefile)
public protocol IStorageFile : IStorageItem, UWP.IRandomAccessStreamReference, UWP.IInputStreamReference {
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.istoragefile.openasync)
    func openAsync(_ accessMode: UWP.FileAccessMode) throws -> WindowsFoundation.AnyIAsyncOperation<UWP.AnyIRandomAccessStream?>!
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.istoragefile.opentransactedwriteasync)
    func openTransactedWriteAsync() throws -> WindowsFoundation.AnyIAsyncOperation<UWP.StorageStreamTransaction?>!
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.istoragefile.copyasync)
    func copyAsync(_ destinationFolder: UWP.AnyIStorageFolder!) throws -> WindowsFoundation.AnyIAsyncOperation<UWP.StorageFile?>!
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.istoragefile.copyasync)
    func copyAsync(_ destinationFolder: UWP.AnyIStorageFolder!, _ desiredNewName: String) throws -> WindowsFoundation.AnyIAsyncOperation<UWP.StorageFile?>!
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.istoragefile.copyasync)
    func copyAsync(_ destinationFolder: UWP.AnyIStorageFolder!, _ desiredNewName: String, _ option: UWP.NameCollisionOption) throws -> WindowsFoundation.AnyIAsyncOperation<UWP.StorageFile?>!
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.istoragefile.copyandreplaceasync)
    func copyAndReplaceAsync(_ fileToReplace: UWP.AnyIStorageFile!) throws -> WindowsFoundation.AnyIAsyncAction!
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.istoragefile.moveasync)
    func moveAsync(_ destinationFolder: UWP.AnyIStorageFolder!) throws -> WindowsFoundation.AnyIAsyncAction!
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.istoragefile.moveasync)
    func moveAsync(_ destinationFolder: UWP.AnyIStorageFolder!, _ desiredNewName: String) throws -> WindowsFoundation.AnyIAsyncAction!
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.istoragefile.moveasync)
    func moveAsync(_ destinationFolder: UWP.AnyIStorageFolder!, _ desiredNewName: String, _ option: UWP.NameCollisionOption) throws -> WindowsFoundation.AnyIAsyncAction!
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.istoragefile.moveandreplaceasync)
    func moveAndReplaceAsync(_ fileToReplace: UWP.AnyIStorageFile!) throws -> WindowsFoundation.AnyIAsyncAction!
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.istoragefile.contenttype)
    var contentType: String { get }
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.istoragefile.filetype)
    var fileType: String { get }
}

extension IStorageFile {
    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        switch iid {
            case __ABI_Windows_Storage.IStorageFileWrapper.IID:
                let wrapper = __ABI_Windows_Storage.IStorageFileWrapper(self)
                return wrapper!.queryInterface(iid)
            case __ABI_Windows_Storage.IStorageItemWrapper.IID:
                let wrapper = __ABI_Windows_Storage.IStorageItemWrapper(self)
                return wrapper!.queryInterface(iid)
            case __ABI_Windows_Storage_Streams.IRandomAccessStreamReferenceWrapper.IID:
                let wrapper = __ABI_Windows_Storage_Streams.IRandomAccessStreamReferenceWrapper(self)
                return wrapper!.queryInterface(iid)
            case __ABI_Windows_Storage_Streams.IInputStreamReferenceWrapper.IID:
                let wrapper = __ABI_Windows_Storage_Streams.IInputStreamReferenceWrapper(self)
                return wrapper!.queryInterface(iid)
            default: return nil
        }
    }
}
public typealias AnyIStorageFile = any IStorageFile

// MARK: - IStorageFile Internals

@_spi(WinRTInternal)
extension __IMPL_Windows_Storage {
    public enum IStorageFileBridge : AbiInterfaceBridge {
        public typealias CABI = __x_ABI_CWindows_CStorage_CIStorageFile
        public typealias SwiftABI = __ABI_Windows_Storage.IStorageFile
        public typealias SwiftProjection = AnyIStorageFile
        public static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
            guard let abi = abi else { return nil }
            return IStorageFileImpl(abi)
        }

        public static func makeAbi() -> CABI {
            let vtblPtr = withUnsafeMutablePointer(to: &__ABI_Windows_Storage.IStorageFileVTable) { $0 }
            return .init(lpVtbl: vtblPtr)
        }
    }

    fileprivate class IStorageFileImpl: IStorageFile, WinRTAbiImpl {
        fileprivate typealias Bridge = IStorageFileBridge
        fileprivate let _default: Bridge.SwiftABI
        fileprivate var thisPtr: WindowsFoundation.IInspectable { _default }
        fileprivate init(_ fromAbi: ComPtr<Bridge.CABI>) {
            _default = Bridge.SwiftABI(fromAbi)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.istoragefile.openasync)
        fileprivate func openAsync(_ accessMode: FileAccessMode) throws -> WindowsFoundation.AnyIAsyncOperation<UWP.AnyIRandomAccessStream?>! {
            try _default.OpenAsync(accessMode)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.istoragefile.opentransactedwriteasync)
        fileprivate func openTransactedWriteAsync() throws -> WindowsFoundation.AnyIAsyncOperation<StorageStreamTransaction?>! {
            try _default.OpenTransactedWriteAsync()
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.istoragefile.copyasync)
        fileprivate func copyAsync(_ destinationFolder: AnyIStorageFolder!) throws -> WindowsFoundation.AnyIAsyncOperation<StorageFile?>! {
            try _default.CopyOverloadDefaultNameAndOptions(destinationFolder)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.istoragefile.copyasync)
        fileprivate func copyAsync(_ destinationFolder: AnyIStorageFolder!, _ desiredNewName: String) throws -> WindowsFoundation.AnyIAsyncOperation<StorageFile?>! {
            try _default.CopyOverloadDefaultOptions(destinationFolder, desiredNewName)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.istoragefile.copyasync)
        fileprivate func copyAsync(_ destinationFolder: AnyIStorageFolder!, _ desiredNewName: String, _ option: NameCollisionOption) throws -> WindowsFoundation.AnyIAsyncOperation<StorageFile?>! {
            try _default.CopyOverload(destinationFolder, desiredNewName, option)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.istoragefile.copyandreplaceasync)
        fileprivate func copyAndReplaceAsync(_ fileToReplace: AnyIStorageFile!) throws -> WindowsFoundation.AnyIAsyncAction! {
            try _default.CopyAndReplaceAsync(fileToReplace)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.istoragefile.moveasync)
        fileprivate func moveAsync(_ destinationFolder: AnyIStorageFolder!) throws -> WindowsFoundation.AnyIAsyncAction! {
            try _default.MoveOverloadDefaultNameAndOptions(destinationFolder)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.istoragefile.moveasync)
        fileprivate func moveAsync(_ destinationFolder: AnyIStorageFolder!, _ desiredNewName: String) throws -> WindowsFoundation.AnyIAsyncAction! {
            try _default.MoveOverloadDefaultOptions(destinationFolder, desiredNewName)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.istoragefile.moveasync)
        fileprivate func moveAsync(_ destinationFolder: AnyIStorageFolder!, _ desiredNewName: String, _ option: NameCollisionOption) throws -> WindowsFoundation.AnyIAsyncAction! {
            try _default.MoveOverload(destinationFolder, desiredNewName, option)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.istoragefile.moveandreplaceasync)
        fileprivate func moveAndReplaceAsync(_ fileToReplace: AnyIStorageFile!) throws -> WindowsFoundation.AnyIAsyncAction! {
            try _default.MoveAndReplaceAsync(fileToReplace)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.istoragefile.contenttype)
        fileprivate var contentType : String {
            get { try! _default.get_ContentType() }
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.istoragefile.filetype)
        fileprivate var fileType : String {
            get { try! _default.get_FileType() }
        }

        private lazy var _IStorageItem: __ABI_Windows_Storage.IStorageItem! = getInterfaceForCaching()
        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.istoragefile.renameasync)
        fileprivate func renameAsync(_ desiredName: String) throws -> WindowsFoundation.AnyIAsyncAction! {
            try _IStorageItem.RenameAsyncOverloadDefaultOptions(desiredName)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.istoragefile.renameasync)
        fileprivate func renameAsync(_ desiredName: String, _ option: NameCollisionOption) throws -> WindowsFoundation.AnyIAsyncAction! {
            try _IStorageItem.RenameAsync(desiredName, option)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.istoragefile.deleteasync)
        fileprivate func deleteAsync() throws -> WindowsFoundation.AnyIAsyncAction! {
            try _IStorageItem.DeleteAsyncOverloadDefaultOptions()
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.istoragefile.deleteasync)
        fileprivate func deleteAsync(_ option: StorageDeleteOption) throws -> WindowsFoundation.AnyIAsyncAction! {
            try _IStorageItem.DeleteAsync(option)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.istoragefile.getbasicpropertiesasync)
        fileprivate func getBasicPropertiesAsync() throws -> WindowsFoundation.AnyIAsyncOperation<UWP.BasicProperties?>! {
            try _IStorageItem.GetBasicPropertiesAsync()
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.istoragefile.isoftype)
        fileprivate func isOfType(_ type: StorageItemTypes) throws -> Bool {
            try _IStorageItem.IsOfType(type)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.istoragefile.attributes)
        fileprivate var attributes : FileAttributes {
            get { try! _IStorageItem.get_Attributes() }
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.istoragefile.datecreated)
        fileprivate var dateCreated : WindowsFoundation.DateTime {
            get { try! _IStorageItem.get_DateCreated() }
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.istoragefile.name)
        fileprivate var name : String {
            get { try! _IStorageItem.get_Name() }
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.istoragefile.path)
        fileprivate var path : String {
            get { try! _IStorageItem.get_Path() }
        }

        private lazy var _IRandomAccessStreamReference: __ABI_Windows_Storage_Streams.IRandomAccessStreamReference! = getInterfaceForCaching()
        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.istoragefile.openreadasync)
        fileprivate func openReadAsync() throws -> WindowsFoundation.AnyIAsyncOperation<UWP.AnyIRandomAccessStreamWithContentType?>! {
            try _IRandomAccessStreamReference.OpenReadAsync()
        }

        private lazy var _IInputStreamReference: __ABI_Windows_Storage_Streams.IInputStreamReference! = getInterfaceForCaching()
        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.istoragefile.opensequentialreadasync)
        fileprivate func openSequentialReadAsync() throws -> WindowsFoundation.AnyIAsyncOperation<UWP.AnyIInputStream?>! {
            try _IInputStreamReference.OpenSequentialReadAsync()
        }

    }

}
@_spi(WinRTInternal)
extension __ABI_Windows_Storage {
    private static let IID___x_ABI_CWindows_CStorage_CIStorageFile: WindowsFoundation.IID = .init(
        Data1: 0xFA3F6186, Data2: 0x4214, Data3: 0x428C, Data4: ( 0xA6,0x4C,0x14,0xC9,0xAC,0x73,0x15,0xEA ) // FA3F6186-4214-428C-A64C-14C9AC7315EA
    ) 

    public class IStorageFile: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CStorage_CIStorageFile }

        open func get_FileType() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CWindows_CStorage_CIStorageFile.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_FileType(pThis, &value))
            }
            return .init(from: value)
        }

        open func get_ContentType() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CWindows_CStorage_CIStorageFile.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ContentType(pThis, &value))
            }
            return .init(from: value)
        }

        open func OpenAsync(_ accessMode: UWP.FileAccessMode) throws -> WindowsFoundation.AnyIAsyncOperation<UWP.AnyIRandomAccessStream?>? {
            let (operation) = try ComPtrs.initialize { operationAbi in
                _ = try perform(as: __x_ABI_CWindows_CStorage_CIStorageFile.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.OpenAsync(pThis, accessMode, &operationAbi))
                }
            }
            return UWP.__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStreams__CIRandomAccessStreamWrapper.unwrapFrom(abi: operation)
        }

        open func OpenTransactedWriteAsync() throws -> WindowsFoundation.AnyIAsyncOperation<UWP.StorageStreamTransaction?>? {
            let (operation) = try ComPtrs.initialize { operationAbi in
                _ = try perform(as: __x_ABI_CWindows_CStorage_CIStorageFile.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.OpenTransactedWriteAsync(pThis, &operationAbi))
                }
            }
            return UWP.__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStorageStreamTransactionWrapper.unwrapFrom(abi: operation)
        }

        open func CopyOverloadDefaultNameAndOptions(_ destinationFolder: UWP.AnyIStorageFolder?) throws -> WindowsFoundation.AnyIAsyncOperation<UWP.StorageFile?>? {
            let (operation) = try ComPtrs.initialize { operationAbi in
                let destinationFolderWrapper = __ABI_Windows_Storage.IStorageFolderWrapper(destinationFolder)
                let _destinationFolder = try! destinationFolderWrapper?.toABI { $0 }
                _ = try perform(as: __x_ABI_CWindows_CStorage_CIStorageFile.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CopyOverloadDefaultNameAndOptions(pThis, _destinationFolder, &operationAbi))
                }
            }
            return UWP.__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStorageFileWrapper.unwrapFrom(abi: operation)
        }

        open func CopyOverloadDefaultOptions(_ destinationFolder: UWP.AnyIStorageFolder?, _ desiredNewName: String) throws -> WindowsFoundation.AnyIAsyncOperation<UWP.StorageFile?>? {
            let (operation) = try ComPtrs.initialize { operationAbi in
                let destinationFolderWrapper = __ABI_Windows_Storage.IStorageFolderWrapper(destinationFolder)
                let _destinationFolder = try! destinationFolderWrapper?.toABI { $0 }
                let _desiredNewName = try! HString(desiredNewName)
                _ = try perform(as: __x_ABI_CWindows_CStorage_CIStorageFile.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CopyOverloadDefaultOptions(pThis, _destinationFolder, _desiredNewName.get(), &operationAbi))
                }
            }
            return UWP.__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStorageFileWrapper.unwrapFrom(abi: operation)
        }

        open func CopyOverload(_ destinationFolder: UWP.AnyIStorageFolder?, _ desiredNewName: String, _ option: UWP.NameCollisionOption) throws -> WindowsFoundation.AnyIAsyncOperation<UWP.StorageFile?>? {
            let (operation) = try ComPtrs.initialize { operationAbi in
                let destinationFolderWrapper = __ABI_Windows_Storage.IStorageFolderWrapper(destinationFolder)
                let _destinationFolder = try! destinationFolderWrapper?.toABI { $0 }
                let _desiredNewName = try! HString(desiredNewName)
                _ = try perform(as: __x_ABI_CWindows_CStorage_CIStorageFile.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CopyOverload(pThis, _destinationFolder, _desiredNewName.get(), option, &operationAbi))
                }
            }
            return UWP.__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStorageFileWrapper.unwrapFrom(abi: operation)
        }

        open func CopyAndReplaceAsync(_ fileToReplace: UWP.AnyIStorageFile?) throws -> WindowsFoundation.AnyIAsyncAction? {
            let (operation) = try ComPtrs.initialize { operationAbi in
                let fileToReplaceWrapper = __ABI_Windows_Storage.IStorageFileWrapper(fileToReplace)
                let _fileToReplace = try! fileToReplaceWrapper?.toABI { $0 }
                _ = try perform(as: __x_ABI_CWindows_CStorage_CIStorageFile.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CopyAndReplaceAsync(pThis, _fileToReplace, &operationAbi))
                }
            }
            return __ABI_Windows_Foundation.IAsyncActionWrapper.unwrapFrom(abi: operation)
        }

        open func MoveOverloadDefaultNameAndOptions(_ destinationFolder: UWP.AnyIStorageFolder?) throws -> WindowsFoundation.AnyIAsyncAction? {
            let (operation) = try ComPtrs.initialize { operationAbi in
                let destinationFolderWrapper = __ABI_Windows_Storage.IStorageFolderWrapper(destinationFolder)
                let _destinationFolder = try! destinationFolderWrapper?.toABI { $0 }
                _ = try perform(as: __x_ABI_CWindows_CStorage_CIStorageFile.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.MoveOverloadDefaultNameAndOptions(pThis, _destinationFolder, &operationAbi))
                }
            }
            return __ABI_Windows_Foundation.IAsyncActionWrapper.unwrapFrom(abi: operation)
        }

        open func MoveOverloadDefaultOptions(_ destinationFolder: UWP.AnyIStorageFolder?, _ desiredNewName: String) throws -> WindowsFoundation.AnyIAsyncAction? {
            let (operation) = try ComPtrs.initialize { operationAbi in
                let destinationFolderWrapper = __ABI_Windows_Storage.IStorageFolderWrapper(destinationFolder)
                let _destinationFolder = try! destinationFolderWrapper?.toABI { $0 }
                let _desiredNewName = try! HString(desiredNewName)
                _ = try perform(as: __x_ABI_CWindows_CStorage_CIStorageFile.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.MoveOverloadDefaultOptions(pThis, _destinationFolder, _desiredNewName.get(), &operationAbi))
                }
            }
            return __ABI_Windows_Foundation.IAsyncActionWrapper.unwrapFrom(abi: operation)
        }

        open func MoveOverload(_ destinationFolder: UWP.AnyIStorageFolder?, _ desiredNewName: String, _ option: UWP.NameCollisionOption) throws -> WindowsFoundation.AnyIAsyncAction? {
            let (operation) = try ComPtrs.initialize { operationAbi in
                let destinationFolderWrapper = __ABI_Windows_Storage.IStorageFolderWrapper(destinationFolder)
                let _destinationFolder = try! destinationFolderWrapper?.toABI { $0 }
                let _desiredNewName = try! HString(desiredNewName)
                _ = try perform(as: __x_ABI_CWindows_CStorage_CIStorageFile.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.MoveOverload(pThis, _destinationFolder, _desiredNewName.get(), option, &operationAbi))
                }
            }
            return __ABI_Windows_Foundation.IAsyncActionWrapper.unwrapFrom(abi: operation)
        }

        open func MoveAndReplaceAsync(_ fileToReplace: UWP.AnyIStorageFile?) throws -> WindowsFoundation.AnyIAsyncAction? {
            let (operation) = try ComPtrs.initialize { operationAbi in
                let fileToReplaceWrapper = __ABI_Windows_Storage.IStorageFileWrapper(fileToReplace)
                let _fileToReplace = try! fileToReplaceWrapper?.toABI { $0 }
                _ = try perform(as: __x_ABI_CWindows_CStorage_CIStorageFile.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.MoveAndReplaceAsync(pThis, _fileToReplace, &operationAbi))
                }
            }
            return __ABI_Windows_Foundation.IAsyncActionWrapper.unwrapFrom(abi: operation)
        }

    }

    internal static var IStorageFileVTable: __x_ABI_CWindows_CStorage_CIStorageFileVtbl = .init(
        QueryInterface: { IStorageFileWrapper.queryInterface($0, $1, $2) },
        AddRef: { IStorageFileWrapper.addRef($0) },
        Release: { IStorageFileWrapper.release($0) },
        GetIids: {
            let size = MemoryLayout<WindowsFoundation.IID>.size
            let iids = CoTaskMemAlloc(UInt64(size) * 6).assumingMemoryBound(to: WindowsFoundation.IID.self)
            iids[0] = IUnknown.IID
            iids[1] = IInspectable.IID
            iids[2] = __ABI_Windows_Storage.IStorageFileWrapper.IID
            iids[3] = __ABI_Windows_Storage.IStorageItemWrapper.IID
            iids[4] = __ABI_Windows_Storage_Streams.IRandomAccessStreamReferenceWrapper.IID
            iids[5] = __ABI_Windows_Storage_Streams.IInputStreamReferenceWrapper.IID
            $1!.pointee = 6
            $2!.pointee = iids
            return S_OK
        },

        GetRuntimeClassName: {
            _ = $0
            let hstring = try! HString("Windows.Storage.IStorageFile").detach()
            $1!.pointee = hstring
            return S_OK
        },

        GetTrustLevel: {
            _ = $0
            $1!.pointee = TrustLevel(rawValue: 0)
            return S_OK
        },

        get_FileType: {
            guard let __unwrapped__instance = IStorageFileWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value = __unwrapped__instance.fileType
            $1?.initialize(to: try! HString(value).detach())
            return S_OK
        },

        get_ContentType: {
            guard let __unwrapped__instance = IStorageFileWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value = __unwrapped__instance.contentType
            $1?.initialize(to: try! HString(value).detach())
            return S_OK
        },

        OpenAsync: {
            do {
                guard let __unwrapped__instance = IStorageFileWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let accessMode: UWP.FileAccessMode = $1
                let operation = try __unwrapped__instance.openAsync(accessMode)
                let operationWrapper = UWP.__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStreams__CIRandomAccessStreamWrapper(operation)
                operationWrapper?.copyTo($2)
                return S_OK
            } catch { return failWith(error: error) }
        },

        OpenTransactedWriteAsync: {
            do {
                guard let __unwrapped__instance = IStorageFileWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let operation = try __unwrapped__instance.openTransactedWriteAsync()
                let operationWrapper = UWP.__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStorageStreamTransactionWrapper(operation)
                operationWrapper?.copyTo($1)
                return S_OK
            } catch { return failWith(error: error) }
        },

        CopyOverloadDefaultNameAndOptions: {
            do {
                guard let __unwrapped__instance = IStorageFileWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let destinationFolder: UWP.AnyIStorageFolder? = __ABI_Windows_Storage.IStorageFolderWrapper.unwrapFrom(abi: ComPtr($1))
                let operation = try __unwrapped__instance.copyAsync(destinationFolder)
                let operationWrapper = UWP.__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStorageFileWrapper(operation)
                operationWrapper?.copyTo($2)
                return S_OK
            } catch { return failWith(error: error) }
        },

        CopyOverloadDefaultOptions: {
            do {
                guard let __unwrapped__instance = IStorageFileWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let destinationFolder: UWP.AnyIStorageFolder? = __ABI_Windows_Storage.IStorageFolderWrapper.unwrapFrom(abi: ComPtr($1))
                let desiredNewName: String = .init(from: $2)
                let operation = try __unwrapped__instance.copyAsync(destinationFolder, desiredNewName)
                let operationWrapper = UWP.__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStorageFileWrapper(operation)
                operationWrapper?.copyTo($3)
                return S_OK
            } catch { return failWith(error: error) }
        },

        CopyOverload: {
            do {
                guard let __unwrapped__instance = IStorageFileWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let destinationFolder: UWP.AnyIStorageFolder? = __ABI_Windows_Storage.IStorageFolderWrapper.unwrapFrom(abi: ComPtr($1))
                let desiredNewName: String = .init(from: $2)
                let option: UWP.NameCollisionOption = $3
                let operation = try __unwrapped__instance.copyAsync(destinationFolder, desiredNewName, option)
                let operationWrapper = UWP.__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStorageFileWrapper(operation)
                operationWrapper?.copyTo($4)
                return S_OK
            } catch { return failWith(error: error) }
        },

        CopyAndReplaceAsync: {
            do {
                guard let __unwrapped__instance = IStorageFileWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let fileToReplace: UWP.AnyIStorageFile? = __ABI_Windows_Storage.IStorageFileWrapper.unwrapFrom(abi: ComPtr($1))
                let operation = try __unwrapped__instance.copyAndReplaceAsync(fileToReplace)
                let operationWrapper = __ABI_Windows_Foundation.IAsyncActionWrapper(operation)
                operationWrapper?.copyTo($2)
                return S_OK
            } catch { return failWith(error: error) }
        },

        MoveOverloadDefaultNameAndOptions: {
            do {
                guard let __unwrapped__instance = IStorageFileWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let destinationFolder: UWP.AnyIStorageFolder? = __ABI_Windows_Storage.IStorageFolderWrapper.unwrapFrom(abi: ComPtr($1))
                let operation = try __unwrapped__instance.moveAsync(destinationFolder)
                let operationWrapper = __ABI_Windows_Foundation.IAsyncActionWrapper(operation)
                operationWrapper?.copyTo($2)
                return S_OK
            } catch { return failWith(error: error) }
        },

        MoveOverloadDefaultOptions: {
            do {
                guard let __unwrapped__instance = IStorageFileWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let destinationFolder: UWP.AnyIStorageFolder? = __ABI_Windows_Storage.IStorageFolderWrapper.unwrapFrom(abi: ComPtr($1))
                let desiredNewName: String = .init(from: $2)
                let operation = try __unwrapped__instance.moveAsync(destinationFolder, desiredNewName)
                let operationWrapper = __ABI_Windows_Foundation.IAsyncActionWrapper(operation)
                operationWrapper?.copyTo($3)
                return S_OK
            } catch { return failWith(error: error) }
        },

        MoveOverload: {
            do {
                guard let __unwrapped__instance = IStorageFileWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let destinationFolder: UWP.AnyIStorageFolder? = __ABI_Windows_Storage.IStorageFolderWrapper.unwrapFrom(abi: ComPtr($1))
                let desiredNewName: String = .init(from: $2)
                let option: UWP.NameCollisionOption = $3
                let operation = try __unwrapped__instance.moveAsync(destinationFolder, desiredNewName, option)
                let operationWrapper = __ABI_Windows_Foundation.IAsyncActionWrapper(operation)
                operationWrapper?.copyTo($4)
                return S_OK
            } catch { return failWith(error: error) }
        },

        MoveAndReplaceAsync: {
            do {
                guard let __unwrapped__instance = IStorageFileWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let fileToReplace: UWP.AnyIStorageFile? = __ABI_Windows_Storage.IStorageFileWrapper.unwrapFrom(abi: ComPtr($1))
                let operation = try __unwrapped__instance.moveAndReplaceAsync(fileToReplace)
                let operationWrapper = __ABI_Windows_Foundation.IAsyncActionWrapper(operation)
                operationWrapper?.copyTo($2)
                return S_OK
            } catch { return failWith(error: error) }
        }
    )

    public typealias IStorageFileWrapper = InterfaceWrapperBase<__IMPL_Windows_Storage.IStorageFileBridge>
}
@_spi(WinRTInternal)
public class IStorageFileMaker: MakeFromAbi {
    public typealias SwiftType = AnyIStorageFile
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        let swiftAbi: __ABI_Windows_Storage.IStorageFile = try! abi.QueryInterface()
        return __IMPL_Windows_Storage.IStorageFileBridge.from(abi: RawPointer(swiftAbi))!
    }
}

// WARNING: Please don't edit this file. It was generated by Swift/WinRT v0.0.1
// swiftlint:disable all
import Foundation
import CUWP
@_spi(WinRTInternal) @_spi(WinRTImplements) import WindowsFoundation
import CWindowsFoundation
import CWinRT

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.system.userwatcher)
public final class UserWatcher : WinRTClass {
    private typealias SwiftABI = __ABI_Windows_System.IUserWatcher
    private typealias CABI = __x_ABI_CWindows_CSystem_CIUserWatcher
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.system.userwatcher.start)
    public func start() throws {
        try _default.Start()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.system.userwatcher.stop)
    public func stop() throws {
        try _default.Stop()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.system.userwatcher.status)
    public var status : UserWatcherStatus {
        get { try! _default.get_Status() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.system.userwatcher.added)
    public lazy var added : Event<TypedEventHandler<UserWatcher?, UserChangedEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_Added($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_Added($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.system.userwatcher.authenticationstatuschanged)
    public lazy var authenticationStatusChanged : Event<TypedEventHandler<UserWatcher?, UserChangedEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_AuthenticationStatusChanged($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_AuthenticationStatusChanged($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.system.userwatcher.authenticationstatuschanging)
    public lazy var authenticationStatusChanging : Event<TypedEventHandler<UserWatcher?, UserAuthenticationStatusChangingEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_AuthenticationStatusChanging($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_AuthenticationStatusChanging($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.system.userwatcher.enumerationcompleted)
    public lazy var enumerationCompleted : Event<TypedEventHandler<UserWatcher?, Any?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_EnumerationCompleted($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_EnumerationCompleted($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.system.userwatcher.removed)
    public lazy var removed : Event<TypedEventHandler<UserWatcher?, UserChangedEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_Removed($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_Removed($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.system.userwatcher.stopped)
    public lazy var stopped : Event<TypedEventHandler<UserWatcher?, Any?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_Stopped($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_Stopped($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.system.userwatcher.updated)
    public lazy var updated : Event<TypedEventHandler<UserWatcher?, UserChangedEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_Updated($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_Updated($0)
       }
      )
    }()

    deinit {
        _default = nil
    }
}

// MARK: - UserWatcher Internals

@_spi(WinRTInternal)
extension __IMPL_Windows_System {
    public enum UserWatcherBridge: AbiBridge {
        public typealias SwiftProjection = UserWatcher
        public typealias CABI = __x_ABI_CWindows_CSystem_CIUserWatcher
        public static func from(abi: ComPtr<__x_ABI_CWindows_CSystem_CIUserWatcher>?) -> UserWatcher? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

}
@_spi(WinRTInternal)
public class UserWatcherMaker: MakeFromAbi {
    public typealias SwiftType = UserWatcher
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return UserWatcher(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
extension __ABI_Windows_System {
    private static let IID___x_ABI_CWindows_CSystem_CIUserWatcher: WindowsFoundation.IID = .init(
        Data1: 0x155EB23B, Data2: 0x242A, Data3: 0x45E0, Data4: ( 0xA2,0xE9,0x31,0x71,0xFC,0x6A,0x7F,0xBB ) // 155EB23B-242A-45E0-A2E9-3171FC6A7FBB
    ) 

    public class IUserWatcher: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CSystem_CIUserWatcher }

        public func get_Status() throws -> UWP.UserWatcherStatus {
            var value: __x_ABI_CWindows_CSystem_CUserWatcherStatus = .init(0)
            _ = try perform(as: __x_ABI_CWindows_CSystem_CIUserWatcher.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Status(pThis, &value))
            }
            return value
        }

        public func Start() throws {
            _ = try perform(as: __x_ABI_CWindows_CSystem_CIUserWatcher.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Start(pThis))
            }
        }

        public func Stop() throws {
            _ = try perform(as: __x_ABI_CWindows_CSystem_CIUserWatcher.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Stop(pThis))
            }
        }

        public func add_Added(_ handler: TypedEventHandler<UWP.UserWatcher?, UWP.UserChangedEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = UWP.__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CUserWatcher___x_ABI_CWindows__CSystem__CUserChangedEventArgsWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CWindows_CSystem_CIUserWatcher.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_Added(pThis, _handler, &token))
            }
            return token
        }

        public func remove_Added(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CWindows_CSystem_CIUserWatcher.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_Added(pThis, token))
            }
        }

        public func add_Removed(_ handler: TypedEventHandler<UWP.UserWatcher?, UWP.UserChangedEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = UWP.__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CUserWatcher___x_ABI_CWindows__CSystem__CUserChangedEventArgsWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CWindows_CSystem_CIUserWatcher.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_Removed(pThis, _handler, &token))
            }
            return token
        }

        public func remove_Removed(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CWindows_CSystem_CIUserWatcher.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_Removed(pThis, token))
            }
        }

        public func add_Updated(_ handler: TypedEventHandler<UWP.UserWatcher?, UWP.UserChangedEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = UWP.__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CUserWatcher___x_ABI_CWindows__CSystem__CUserChangedEventArgsWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CWindows_CSystem_CIUserWatcher.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_Updated(pThis, _handler, &token))
            }
            return token
        }

        public func remove_Updated(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CWindows_CSystem_CIUserWatcher.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_Updated(pThis, token))
            }
        }

        public func add_AuthenticationStatusChanged(_ handler: TypedEventHandler<UWP.UserWatcher?, UWP.UserChangedEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = UWP.__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CUserWatcher___x_ABI_CWindows__CSystem__CUserChangedEventArgsWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CWindows_CSystem_CIUserWatcher.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_AuthenticationStatusChanged(pThis, _handler, &token))
            }
            return token
        }

        public func remove_AuthenticationStatusChanged(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CWindows_CSystem_CIUserWatcher.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_AuthenticationStatusChanged(pThis, token))
            }
        }

        public func add_AuthenticationStatusChanging(_ handler: TypedEventHandler<UWP.UserWatcher?, UWP.UserAuthenticationStatusChangingEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = UWP.__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CUserWatcher___x_ABI_CWindows__CSystem__CUserAuthenticationStatusChangingEventArgsWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CWindows_CSystem_CIUserWatcher.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_AuthenticationStatusChanging(pThis, _handler, &token))
            }
            return token
        }

        public func remove_AuthenticationStatusChanging(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CWindows_CSystem_CIUserWatcher.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_AuthenticationStatusChanging(pThis, token))
            }
        }

        public func add_EnumerationCompleted(_ handler: TypedEventHandler<UWP.UserWatcher?, Any?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = UWP.__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CUserWatcher_IInspectableWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CWindows_CSystem_CIUserWatcher.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_EnumerationCompleted(pThis, _handler, &token))
            }
            return token
        }

        public func remove_EnumerationCompleted(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CWindows_CSystem_CIUserWatcher.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_EnumerationCompleted(pThis, token))
            }
        }

        public func add_Stopped(_ handler: TypedEventHandler<UWP.UserWatcher?, Any?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = UWP.__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CUserWatcher_IInspectableWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CWindows_CSystem_CIUserWatcher.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_Stopped(pThis, _handler, &token))
            }
            return token
        }

        public func remove_Stopped(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CWindows_CSystem_CIUserWatcher.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_Stopped(pThis, token))
            }
        }

    }

}

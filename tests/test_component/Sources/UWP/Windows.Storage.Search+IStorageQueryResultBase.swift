// WARNING: Please don't edit this file. It was generated by Swift/WinRT v0.0.1
// swiftlint:disable all
import Foundation
import CUWP
@_spi(WinRTInternal) @_spi(WinRTImplements) import WindowsFoundation
import CWindowsFoundation
import CWinRT

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.search.istoragequeryresultbase)
public protocol IStorageQueryResultBase : WinRTInterface {
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.search.istoragequeryresultbase.getitemcountasync)
    func getItemCountAsync() throws -> WindowsFoundation.AnyIAsyncOperation<UInt32>!
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.search.istoragequeryresultbase.findstartindexasync)
    func findStartIndexAsync(_ value: Any!) throws -> WindowsFoundation.AnyIAsyncOperation<UInt32>!
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.search.istoragequeryresultbase.getcurrentqueryoptions)
    func getCurrentQueryOptions() throws -> UWP.QueryOptions!
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.search.istoragequeryresultbase.applynewqueryoptions)
    func applyNewQueryOptions(_ newQueryOptions: UWP.QueryOptions!) throws
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.search.istoragequeryresultbase.folder)
    var folder: UWP.StorageFolder! { get }
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.search.istoragequeryresultbase.contentschanged)
    var contentsChanged: Event<TypedEventHandler<IStorageQueryResultBase?, Any?>> { get }
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.search.istoragequeryresultbase.optionschanged)
    var optionsChanged: Event<TypedEventHandler<IStorageQueryResultBase?, Any?>> { get }
}

extension IStorageQueryResultBase {
    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        switch iid {
            case __ABI_Windows_Storage_Search.IStorageQueryResultBaseWrapper.IID:
                let wrapper = __ABI_Windows_Storage_Search.IStorageQueryResultBaseWrapper(self)
                return wrapper!.queryInterface(iid)
            default: return nil
        }
    }
}
public typealias AnyIStorageQueryResultBase = any IStorageQueryResultBase

// MARK: - IStorageQueryResultBase Internals

@_spi(WinRTInternal)
extension __IMPL_Windows_Storage_Search {
    public enum IStorageQueryResultBaseBridge : AbiInterfaceBridge {
        public typealias CABI = __x_ABI_CWindows_CStorage_CSearch_CIStorageQueryResultBase
        public typealias SwiftABI = __ABI_Windows_Storage_Search.IStorageQueryResultBase
        public typealias SwiftProjection = AnyIStorageQueryResultBase
        public static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
            guard let abi = abi else { return nil }
            return IStorageQueryResultBaseImpl(abi)
        }

        public static func makeAbi() -> CABI {
            let vtblPtr = withUnsafeMutablePointer(to: &__ABI_Windows_Storage_Search.IStorageQueryResultBaseVTable) { $0 }
            return .init(lpVtbl: vtblPtr)
        }
    }

    fileprivate class IStorageQueryResultBaseImpl: IStorageQueryResultBase, WinRTAbiImpl {
        fileprivate typealias Bridge = IStorageQueryResultBaseBridge
        fileprivate let _default: Bridge.SwiftABI
        fileprivate var thisPtr: WindowsFoundation.IInspectable { _default }
        fileprivate init(_ fromAbi: ComPtr<Bridge.CABI>) {
            _default = Bridge.SwiftABI(fromAbi)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.search.istoragequeryresultbase.getitemcountasync)
        fileprivate func getItemCountAsync() throws -> WindowsFoundation.AnyIAsyncOperation<UInt32>! {
            try _default.GetItemCountAsync()
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.search.istoragequeryresultbase.findstartindexasync)
        fileprivate func findStartIndexAsync(_ value: Any!) throws -> WindowsFoundation.AnyIAsyncOperation<UInt32>! {
            try _default.FindStartIndexAsync(value)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.search.istoragequeryresultbase.getcurrentqueryoptions)
        fileprivate func getCurrentQueryOptions() throws -> QueryOptions! {
            try _default.GetCurrentQueryOptions()
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.search.istoragequeryresultbase.applynewqueryoptions)
        fileprivate func applyNewQueryOptions(_ newQueryOptions: QueryOptions!) throws {
            try _default.ApplyNewQueryOptions(newQueryOptions)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.search.istoragequeryresultbase.folder)
        fileprivate var folder : UWP.StorageFolder! {
            get { try! _default.get_Folder() }
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.search.istoragequeryresultbase.contentschanged)
        fileprivate lazy var contentsChanged : Event<TypedEventHandler<IStorageQueryResultBase?, Any?>> = {
          .init(
            add: { [weak self] in
              guard let this = self?._default else { return .init() }
              return try! this.add_ContentsChanged($0)
            },
            remove: { [weak self] in
             try? self?._default.remove_ContentsChanged($0)
           }
          )
        }()

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.search.istoragequeryresultbase.optionschanged)
        fileprivate lazy var optionsChanged : Event<TypedEventHandler<IStorageQueryResultBase?, Any?>> = {
          .init(
            add: { [weak self] in
              guard let this = self?._default else { return .init() }
              return try! this.add_OptionsChanged($0)
            },
            remove: { [weak self] in
             try? self?._default.remove_OptionsChanged($0)
           }
          )
        }()

    }

}
@_spi(WinRTInternal)
extension __ABI_Windows_Storage_Search {
    private static let IID___x_ABI_CWindows_CStorage_CSearch_CIStorageQueryResultBase: WindowsFoundation.IID = .init(
        Data1: 0xC297D70D, Data2: 0x7353, Data3: 0x47AB, Data4: ( 0xBA,0x58,0x8C,0x61,0x42,0x5D,0xC5,0x4B ) // C297D70D-7353-47AB-BA58-8C61425DC54B
    ) 

    public class IStorageQueryResultBase: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CStorage_CSearch_CIStorageQueryResultBase }

        open func GetItemCountAsync() throws -> WindowsFoundation.AnyIAsyncOperation<UInt32>? {
            let (operation) = try ComPtrs.initialize { operationAbi in
                _ = try perform(as: __x_ABI_CWindows_CStorage_CSearch_CIStorageQueryResultBase.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetItemCountAsync(pThis, &operationAbi))
                }
            }
            return UWP.__x_ABI_C__FIAsyncOperation_1_UINT32Wrapper.unwrapFrom(abi: operation)
        }

        open func get_Folder() throws -> UWP.StorageFolder? {
            let (container) = try ComPtrs.initialize { containerAbi in
                _ = try perform(as: __x_ABI_CWindows_CStorage_CSearch_CIStorageQueryResultBase.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Folder(pThis, &containerAbi))
                }
            }
            return __IMPL_Windows_Storage.StorageFolderBridge.from(abi: container)
        }

        open func add_ContentsChanged(_ handler: TypedEventHandler<UWP.AnyIStorageQueryResultBase?, Any?>?) throws -> EventRegistrationToken {
            var eventCookie: EventRegistrationToken = .init()
            let handlerWrapper = UWP.__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CStorage__CSearch__CIStorageQueryResultBase_IInspectableWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CWindows_CStorage_CSearch_CIStorageQueryResultBase.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_ContentsChanged(pThis, _handler, &eventCookie))
            }
            return eventCookie
        }

        open func remove_ContentsChanged(_ eventCookie: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CWindows_CStorage_CSearch_CIStorageQueryResultBase.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_ContentsChanged(pThis, eventCookie))
            }
        }

        open func add_OptionsChanged(_ changedHandler: TypedEventHandler<UWP.AnyIStorageQueryResultBase?, Any?>?) throws -> EventRegistrationToken {
            var eventCookie: EventRegistrationToken = .init()
            let changedHandlerWrapper = UWP.__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CStorage__CSearch__CIStorageQueryResultBase_IInspectableWrapper(changedHandler)
            let _changedHandler = try! changedHandlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CWindows_CStorage_CSearch_CIStorageQueryResultBase.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_OptionsChanged(pThis, _changedHandler, &eventCookie))
            }
            return eventCookie
        }

        open func remove_OptionsChanged(_ eventCookie: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CWindows_CStorage_CSearch_CIStorageQueryResultBase.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_OptionsChanged(pThis, eventCookie))
            }
        }

        open func FindStartIndexAsync(_ value: Any?) throws -> WindowsFoundation.AnyIAsyncOperation<UInt32>? {
            let (operation) = try ComPtrs.initialize { operationAbi in
                let valueWrapper = __ABI_.AnyWrapper(value)
                let _value = try! valueWrapper?.toABI { $0 }
                _ = try perform(as: __x_ABI_CWindows_CStorage_CSearch_CIStorageQueryResultBase.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.FindStartIndexAsync(pThis, _value, &operationAbi))
                }
            }
            return UWP.__x_ABI_C__FIAsyncOperation_1_UINT32Wrapper.unwrapFrom(abi: operation)
        }

        open func GetCurrentQueryOptions() throws -> UWP.QueryOptions? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CStorage_CSearch_CIStorageQueryResultBase.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetCurrentQueryOptions(pThis, &valueAbi))
                }
            }
            return __IMPL_Windows_Storage_Search.QueryOptionsBridge.from(abi: value)
        }

        open func ApplyNewQueryOptions(_ newQueryOptions: UWP.QueryOptions?) throws {
            _ = try perform(as: __x_ABI_CWindows_CStorage_CSearch_CIStorageQueryResultBase.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.ApplyNewQueryOptions(pThis, RawPointer(newQueryOptions)))
            }
        }

    }

    internal static var IStorageQueryResultBaseVTable: __x_ABI_CWindows_CStorage_CSearch_CIStorageQueryResultBaseVtbl = .init(
        QueryInterface: { IStorageQueryResultBaseWrapper.queryInterface($0, $1, $2) },
        AddRef: { IStorageQueryResultBaseWrapper.addRef($0) },
        Release: { IStorageQueryResultBaseWrapper.release($0) },
        GetIids: {
            let size = MemoryLayout<WindowsFoundation.IID>.size
            let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: WindowsFoundation.IID.self)
            iids[0] = IUnknown.IID
            iids[1] = IInspectable.IID
            iids[2] = __ABI_Windows_Storage_Search.IStorageQueryResultBaseWrapper.IID
            $1!.pointee = 3
            $2!.pointee = iids
            return S_OK
        },

        GetRuntimeClassName: {
            _ = $0
            let hstring = try! HString("Windows.Storage.Search.IStorageQueryResultBase").detach()
            $1!.pointee = hstring
            return S_OK
        },

        GetTrustLevel: {
            _ = $0
            $1!.pointee = TrustLevel(rawValue: 0)
            return S_OK
        },

        GetItemCountAsync: {
            do {
                guard let __unwrapped__instance = IStorageQueryResultBaseWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let operation = try __unwrapped__instance.getItemCountAsync()
                let operationWrapper = UWP.__x_ABI_C__FIAsyncOperation_1_UINT32Wrapper(operation)
                operationWrapper?.copyTo($1)
                return S_OK
            } catch { return failWith(error: error) }
        },

        get_Folder: {
            guard let __unwrapped__instance = IStorageQueryResultBaseWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let container = __unwrapped__instance.folder
            container?.copyTo($1)
            return S_OK
        },

        add_ContentsChanged: {
            guard let __unwrapped__instance = IStorageQueryResultBaseWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            guard let handler = UWP.__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CStorage__CSearch__CIStorageQueryResultBase_IInspectableWrapper.unwrapFrom(abi: ComPtr($1)) else { return E_INVALIDARG }
            let eventCookie = __unwrapped__instance.contentsChanged.addHandler(handler)
            $2?.initialize(to: .from(swift: eventCookie))
            return S_OK
        },

        remove_ContentsChanged: {
            guard let __unwrapped__instance = IStorageQueryResultBaseWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let eventCookie: EventRegistrationToken = $1
            __unwrapped__instance.contentsChanged.removeHandler(eventCookie)
            return S_OK
        },

        add_OptionsChanged: {
            guard let __unwrapped__instance = IStorageQueryResultBaseWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            guard let changedHandler = UWP.__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CStorage__CSearch__CIStorageQueryResultBase_IInspectableWrapper.unwrapFrom(abi: ComPtr($1)) else { return E_INVALIDARG }
            let eventCookie = __unwrapped__instance.optionsChanged.addHandler(changedHandler)
            $2?.initialize(to: .from(swift: eventCookie))
            return S_OK
        },

        remove_OptionsChanged: {
            guard let __unwrapped__instance = IStorageQueryResultBaseWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let eventCookie: EventRegistrationToken = $1
            __unwrapped__instance.optionsChanged.removeHandler(eventCookie)
            return S_OK
        },

        FindStartIndexAsync: {
            do {
                guard let __unwrapped__instance = IStorageQueryResultBaseWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let value: Any? = __ABI_.AnyWrapper.unwrapFrom(abi: ComPtr($1))
                let operation = try __unwrapped__instance.findStartIndexAsync(value)
                let operationWrapper = UWP.__x_ABI_C__FIAsyncOperation_1_UINT32Wrapper(operation)
                operationWrapper?.copyTo($2)
                return S_OK
            } catch { return failWith(error: error) }
        },

        GetCurrentQueryOptions: {
            do {
                guard let __unwrapped__instance = IStorageQueryResultBaseWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let value = try __unwrapped__instance.getCurrentQueryOptions()
                value?.copyTo($1)
                return S_OK
            } catch { return failWith(error: error) }
        },

        ApplyNewQueryOptions: {
            do {
                guard let __unwrapped__instance = IStorageQueryResultBaseWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let newQueryOptions: UWP.QueryOptions? = __IMPL_Windows_Storage_Search.QueryOptionsBridge.from(abi: ComPtr($1))
                try __unwrapped__instance.applyNewQueryOptions(newQueryOptions)
                return S_OK
            } catch { return failWith(error: error) }
        }
    )

    public typealias IStorageQueryResultBaseWrapper = InterfaceWrapperBase<__IMPL_Windows_Storage_Search.IStorageQueryResultBaseBridge>
}
@_spi(WinRTInternal)
public class IStorageQueryResultBaseMaker: MakeFromAbi {
    public typealias SwiftType = AnyIStorageQueryResultBase
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        let swiftAbi: __ABI_Windows_Storage_Search.IStorageQueryResultBase = try! abi.QueryInterface()
        return __IMPL_Windows_Storage_Search.IStorageQueryResultBaseBridge.from(abi: RawPointer(swiftAbi))!
    }
}

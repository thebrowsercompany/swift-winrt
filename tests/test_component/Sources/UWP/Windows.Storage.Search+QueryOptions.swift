// WARNING: Please don't edit this file. It was generated by Swift/WinRT v0.0.1
// swiftlint:disable all
import Foundation
@_spi(WinRTInternal) @_spi(WinRTImplements) import WindowsFoundation
import CWinRT

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.search.queryoptions)
public final class QueryOptions : WinRTClass {
    private typealias SwiftABI = __ABI_Windows_Storage_Search.IQueryOptions
    private typealias CABI = __x_ABI_CWindows_CStorage_CSearch_CIQueryOptions
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    private static let _defaultFactory: WindowsFoundation.IActivationFactory = try! RoGetActivationFactory("Windows.Storage.Search.QueryOptions")
    override public init() {
        super.init(try! Self._defaultFactory.ActivateInstance())
    }

    private static let _IQueryOptionsFactory: __ABI_Windows_Storage_Search.IQueryOptionsFactory = try! RoGetActivationFactory("Windows.Storage.Search.QueryOptions")
    public init(_ query: CommonFileQuery, _ fileTypeFilter: WindowsFoundation.AnyIIterable<String>!) {
        super.init(try! Self._IQueryOptionsFactory.CreateCommonFileQuery(query, fileTypeFilter))
    }

    public init(_ query: CommonFolderQuery) {
        super.init(try! Self._IQueryOptionsFactory.CreateCommonFolderQuery(query))
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.search.queryoptions.savetostring)
    public func saveToString() throws -> String {
        try _default.SaveToString()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.search.queryoptions.loadfromstring)
    public func loadFromString(_ value: String) throws {
        try _default.LoadFromString(value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.search.queryoptions.setthumbnailprefetch)
    public func setThumbnailPrefetch(_ mode: UWP.ThumbnailMode, _ requestedSize: UInt32, _ options: UWP.ThumbnailOptions) throws {
        try _default.SetThumbnailPrefetch(mode, requestedSize, options)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.search.queryoptions.setpropertyprefetch)
    public func setPropertyPrefetch(_ options: UWP.PropertyPrefetchOptions, _ propertiesToRetrieve: WindowsFoundation.AnyIIterable<String>!) throws {
        try _default.SetPropertyPrefetch(options, propertiesToRetrieve)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.search.queryoptions.applicationsearchfilter)
    public var applicationSearchFilter : String {
        get { try! _default.get_ApplicationSearchFilter() }
        set { try! _default.put_ApplicationSearchFilter(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.search.queryoptions.datestackoption)
    public var dateStackOption : DateStackOption {
        get { try! _default.get_DateStackOption() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.search.queryoptions.filetypefilter)
    public var fileTypeFilter : WindowsFoundation.AnyIVector<String>! {
        get { try! _default.get_FileTypeFilter() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.search.queryoptions.folderdepth)
    public var folderDepth : FolderDepth {
        get { try! _default.get_FolderDepth() }
        set { try! _default.put_FolderDepth(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.search.queryoptions.grouppropertyname)
    public var groupPropertyName : String {
        get { try! _default.get_GroupPropertyName() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.search.queryoptions.indexeroption)
    public var indexerOption : IndexerOption {
        get { try! _default.get_IndexerOption() }
        set { try! _default.put_IndexerOption(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.search.queryoptions.language)
    public var language : String {
        get { try! _default.get_Language() }
        set { try! _default.put_Language(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.search.queryoptions.sortorder)
    public var sortOrder : WindowsFoundation.AnyIVector<SortEntry>! {
        get { try! _default.get_SortOrder() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.search.queryoptions.usersearchfilter)
    public var userSearchFilter : String {
        get { try! _default.get_UserSearchFilter() }
        set { try! _default.put_UserSearchFilter(newValue) }
    }

    private lazy var _IQueryOptionsWithProviderFilter: __ABI_Windows_Storage_Search.IQueryOptionsWithProviderFilter! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.search.queryoptions.storageprovideridfilter)
    public var storageProviderIdFilter : WindowsFoundation.AnyIVector<String>! {
        get { try! _IQueryOptionsWithProviderFilter.get_StorageProviderIdFilter() }
    }

    deinit {
        _default = nil
        _IQueryOptionsWithProviderFilter = nil
    }
}

// MARK: - QueryOptions Internals

@_spi(WinRTInternal)
extension __IMPL_Windows_Storage_Search {
    public enum QueryOptionsBridge: AbiBridge {
        public typealias SwiftProjection = QueryOptions
        public typealias CABI = __x_ABI_CWindows_CStorage_CSearch_CIQueryOptions
        public static func from(abi: ComPtr<__x_ABI_CWindows_CStorage_CSearch_CIQueryOptions>?) -> QueryOptions? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

}
@_spi(WinRTInternal)
public class QueryOptionsMaker: MakeFromAbi {
    public typealias SwiftType = QueryOptions
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return QueryOptions(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
extension __ABI_Windows_Storage_Search {
    private static let IID___x_ABI_CWindows_CStorage_CSearch_CIQueryOptions: WindowsFoundation.IID = .init(
        Data1: 0x1E5E46EE, Data2: 0x0F45, Data3: 0x4838, Data4: ( 0xA8,0xE9,0xD0,0x47,0x9D,0x44,0x6C,0x30 ) // 1E5E46EE-0F45-4838-A8E9-D0479D446C30
    ) 

    public class IQueryOptions: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CStorage_CSearch_CIQueryOptions }

        public func get_FileTypeFilter() throws -> WindowsFoundation.AnyIVector<String>? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CStorage_CSearch_CIQueryOptions.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_FileTypeFilter(pThis, &valueAbi))
                }
            }
            return UWP.__x_ABI_C__FIVector_1_HSTRINGWrapper.unwrapFrom(abi: value)
        }

        public func get_FolderDepth() throws -> UWP.FolderDepth {
            var value: __x_ABI_CWindows_CStorage_CSearch_CFolderDepth = .init(0)
            _ = try perform(as: __x_ABI_CWindows_CStorage_CSearch_CIQueryOptions.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_FolderDepth(pThis, &value))
            }
            return value
        }

        public func put_FolderDepth(_ value: UWP.FolderDepth) throws {
            _ = try perform(as: __x_ABI_CWindows_CStorage_CSearch_CIQueryOptions.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_FolderDepth(pThis, value))
            }
        }

        public func get_ApplicationSearchFilter() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CWindows_CStorage_CSearch_CIQueryOptions.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ApplicationSearchFilter(pThis, &value))
            }
            return .init(from: value)
        }

        public func put_ApplicationSearchFilter(_ value: String) throws {
            let _value = try! HString(value)
            _ = try perform(as: __x_ABI_CWindows_CStorage_CSearch_CIQueryOptions.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_ApplicationSearchFilter(pThis, _value.get()))
            }
        }

        public func get_UserSearchFilter() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CWindows_CStorage_CSearch_CIQueryOptions.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_UserSearchFilter(pThis, &value))
            }
            return .init(from: value)
        }

        public func put_UserSearchFilter(_ value: String) throws {
            let _value = try! HString(value)
            _ = try perform(as: __x_ABI_CWindows_CStorage_CSearch_CIQueryOptions.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_UserSearchFilter(pThis, _value.get()))
            }
        }

        public func get_Language() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CWindows_CStorage_CSearch_CIQueryOptions.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Language(pThis, &value))
            }
            return .init(from: value)
        }

        public func put_Language(_ value: String) throws {
            let _value = try! HString(value)
            _ = try perform(as: __x_ABI_CWindows_CStorage_CSearch_CIQueryOptions.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Language(pThis, _value.get()))
            }
        }

        public func get_IndexerOption() throws -> UWP.IndexerOption {
            var value: __x_ABI_CWindows_CStorage_CSearch_CIndexerOption = .init(0)
            _ = try perform(as: __x_ABI_CWindows_CStorage_CSearch_CIQueryOptions.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IndexerOption(pThis, &value))
            }
            return value
        }

        public func put_IndexerOption(_ value: UWP.IndexerOption) throws {
            _ = try perform(as: __x_ABI_CWindows_CStorage_CSearch_CIQueryOptions.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_IndexerOption(pThis, value))
            }
        }

        public func get_SortOrder() throws -> WindowsFoundation.AnyIVector<UWP.SortEntry>? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CStorage_CSearch_CIQueryOptions.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_SortOrder(pThis, &valueAbi))
                }
            }
            return UWP.__x_ABI_C__FIVector_1___x_ABI_CWindows__CStorage__CSearch__CSortEntryWrapper.unwrapFrom(abi: value)
        }

        public func get_GroupPropertyName() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CWindows_CStorage_CSearch_CIQueryOptions.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_GroupPropertyName(pThis, &value))
            }
            return .init(from: value)
        }

        public func get_DateStackOption() throws -> UWP.DateStackOption {
            var value: __x_ABI_CWindows_CStorage_CSearch_CDateStackOption = .init(0)
            _ = try perform(as: __x_ABI_CWindows_CStorage_CSearch_CIQueryOptions.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_DateStackOption(pThis, &value))
            }
            return value
        }

        public func SaveToString() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CWindows_CStorage_CSearch_CIQueryOptions.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.SaveToString(pThis, &value))
            }
            return .init(from: value)
        }

        public func LoadFromString(_ value: String) throws {
            let _value = try! HString(value)
            _ = try perform(as: __x_ABI_CWindows_CStorage_CSearch_CIQueryOptions.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.LoadFromString(pThis, _value.get()))
            }
        }

        public func SetThumbnailPrefetch(_ mode: UWP.ThumbnailMode, _ requestedSize: UInt32, _ options: UWP.ThumbnailOptions) throws {
            _ = try perform(as: __x_ABI_CWindows_CStorage_CSearch_CIQueryOptions.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.SetThumbnailPrefetch(pThis, mode, requestedSize, options))
            }
        }

        public func SetPropertyPrefetch(_ options: UWP.PropertyPrefetchOptions, _ propertiesToRetrieve: WindowsFoundation.AnyIIterable<String>?) throws {
            let propertiesToRetrieveWrapper = UWP.__x_ABI_C__FIIterable_1_HSTRINGWrapper(propertiesToRetrieve)
            let _propertiesToRetrieve = try! propertiesToRetrieveWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CWindows_CStorage_CSearch_CIQueryOptions.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.SetPropertyPrefetch(pThis, options, _propertiesToRetrieve))
            }
        }

    }

    private static let IID___x_ABI_CWindows_CStorage_CSearch_CIQueryOptionsWithProviderFilter: WindowsFoundation.IID = .init(
        Data1: 0x5B9D1026, Data2: 0x15C4, Data3: 0x44DD, Data4: ( 0xB8,0x9A,0x47,0xA5,0x9B,0x7D,0x7C,0x4F ) // 5B9D1026-15C4-44DD-B89A-47A59B7D7C4F
    ) 

    public class IQueryOptionsWithProviderFilter: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CStorage_CSearch_CIQueryOptionsWithProviderFilter }

        public func get_StorageProviderIdFilter() throws -> WindowsFoundation.AnyIVector<String>? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CStorage_CSearch_CIQueryOptionsWithProviderFilter.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_StorageProviderIdFilter(pThis, &valueAbi))
                }
            }
            return UWP.__x_ABI_C__FIVector_1_HSTRINGWrapper.unwrapFrom(abi: value)
        }

    }

    private static let IID___x_ABI_CWindows_CStorage_CSearch_CIQueryOptionsFactory: WindowsFoundation.IID = .init(
        Data1: 0x032E1F8C, Data2: 0xA9C1, Data3: 0x4E71, Data4: ( 0x80,0x11,0x0D,0xEE,0x9D,0x48,0x11,0xA3 ) // 032E1F8C-A9C1-4E71-8011-0DEE9D4811A3
    ) 

    public class IQueryOptionsFactory: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CStorage_CSearch_CIQueryOptionsFactory }

        public func CreateCommonFileQuery(_ query: UWP.CommonFileQuery, _ fileTypeFilter: WindowsFoundation.AnyIIterable<String>?) throws -> IQueryOptions {
            let (queryOptions) = try ComPtrs.initialize { queryOptionsAbi in
                let fileTypeFilterWrapper = UWP.__x_ABI_C__FIIterable_1_HSTRINGWrapper(fileTypeFilter)
                let _fileTypeFilter = try! fileTypeFilterWrapper?.toABI { $0 }
                _ = try perform(as: __x_ABI_CWindows_CStorage_CSearch_CIQueryOptionsFactory.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateCommonFileQuery(pThis, query, _fileTypeFilter, &queryOptionsAbi))
                }
            }
            return IQueryOptions(queryOptions!)
        }

        public func CreateCommonFolderQuery(_ query: UWP.CommonFolderQuery) throws -> IQueryOptions {
            let (queryOptions) = try ComPtrs.initialize { queryOptionsAbi in
                _ = try perform(as: __x_ABI_CWindows_CStorage_CSearch_CIQueryOptionsFactory.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateCommonFolderQuery(pThis, query, &queryOptionsAbi))
                }
            }
            return IQueryOptions(queryOptions!)
        }

    }

}

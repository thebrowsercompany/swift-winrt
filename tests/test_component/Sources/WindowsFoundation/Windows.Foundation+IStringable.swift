// WARNING: Please don't edit this file. It was generated by Swift/WinRT v0.0.1
// swiftlint:disable all
import Foundation
import CWinRT

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.istringable)
public protocol IStringable : WinRTInterface {
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.istringable.tostring)
    func toString() throws -> String
}

extension IStringable {
    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        switch iid {
            case __ABI_Windows_Foundation.IStringableWrapper.IID:
                let wrapper = __ABI_Windows_Foundation.IStringableWrapper(self)
                return wrapper!.queryInterface(iid)
            default: return nil
        }
    }
}
public typealias AnyIStringable = any IStringable

// MARK: - IStringable Internals

@_spi(WinRTInternal)
extension __IMPL_Windows_Foundation {
    public enum IStringableBridge : AbiInterfaceBridge {
        public typealias CABI = __x_ABI_CWindows_CFoundation_CIStringable
        public typealias SwiftABI = __ABI_Windows_Foundation.IStringable
        public typealias SwiftProjection = AnyIStringable
        public static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
            guard let abi = abi else { return nil }
            return IStringableImpl(abi)
        }

        public static func makeAbi() -> CABI {
            let vtblPtr = withUnsafeMutablePointer(to: &__ABI_Windows_Foundation.IStringableVTable) { $0 }
            return .init(lpVtbl: vtblPtr)
        }
    }

    fileprivate class IStringableImpl: IStringable, WinRTAbiImpl {
        fileprivate typealias Bridge = IStringableBridge
        fileprivate let _default: Bridge.SwiftABI
        fileprivate var thisPtr: WindowsFoundation.IInspectable { _default }
        fileprivate init(_ fromAbi: ComPtr<Bridge.CABI>) {
            _default = Bridge.SwiftABI(fromAbi)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.istringable.tostring)
        fileprivate func toString() throws -> String {
            try _default.ToString()
        }

    }

}
@_spi(WinRTInternal)
extension __ABI_Windows_Foundation {
    private static let IID___x_ABI_CWindows_CFoundation_CIStringable: WindowsFoundation.IID = .init(
        Data1: 0x96369F54, Data2: 0x8EB6, Data3: 0x48F0, Data4: ( 0xAB,0xCE,0xC1,0xB2,0x11,0xE6,0x27,0xC3 ) // 96369F54-8EB6-48F0-ABCE-C1B211E627C3
    ) 

    public class IStringable: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CFoundation_CIStringable }

        open func ToString() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CWindows_CFoundation_CIStringable.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.ToString(pThis, &value))
            }
            return .init(from: value)
        }

    }

    internal static var IStringableVTable: __x_ABI_CWindows_CFoundation_CIStringableVtbl = .init(
        QueryInterface: { IStringableWrapper.queryInterface($0, $1, $2) },
        AddRef: { IStringableWrapper.addRef($0) },
        Release: { IStringableWrapper.release($0) },
        GetIids: {
            let size = MemoryLayout<WindowsFoundation.IID>.size
            let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: WindowsFoundation.IID.self)
            iids[0] = IUnknown.IID
            iids[1] = IInspectable.IID
            iids[2] = __ABI_Windows_Foundation.IStringableWrapper.IID
            $1!.pointee = 3
            $2!.pointee = iids
            return S_OK
        },

        GetRuntimeClassName: {
            _ = $0
            let hstring = try! HString("Windows.Foundation.IStringable").detach()
            $1!.pointee = hstring
            return S_OK
        },

        GetTrustLevel: {
            _ = $0
            $1!.pointee = TrustLevel(rawValue: 0)
            return S_OK
        },

        ToString: {
            do {
                guard let __unwrapped__instance = IStringableWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let value = try __unwrapped__instance.toString()
                $1?.initialize(to: try! HString(value).detach())
                return S_OK
            } catch { return failWith(error: error) }
        }
    )

    public typealias IStringableWrapper = InterfaceWrapperBase<__IMPL_Windows_Foundation.IStringableBridge>
}
@_spi(WinRTInternal)
public class IStringableMaker: MakeFromAbi {
    public typealias SwiftType = AnyIStringable
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        let swiftAbi: __ABI_Windows_Foundation.IStringable = try! abi.QueryInterface()
        return __IMPL_Windows_Foundation.IStringableBridge.from(abi: RawPointer(swiftAbi))!
    }
}

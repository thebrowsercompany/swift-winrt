// WARNING: Please don't edit this file. It was generated by Swift/WinRT v0.0.1
// swiftlint:disable all
import Foundation
import CWindowsFoundation
import CWinRT

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.deferral)
public final class Deferral : WinRTClass, IClosable {
    private typealias SwiftABI = __ABI_Windows_Foundation.IDeferral
    private typealias CABI = __x_ABI_CWindows_CFoundation_CIDeferral
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static let _IDeferralFactory: __ABI_Windows_Foundation.IDeferralFactory = try! RoGetActivationFactory("Windows.Foundation.Deferral")
    public init(_ handler: DeferralCompletedHandler!) {
        super.init(try! Self._IDeferralFactory.Create(handler))
    }

    private lazy var _IClosable: __ABI_Windows_Foundation.IClosable! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.deferral.close)
    public func close() throws {
        try _IClosable.Close()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.deferral.complete)
    public func complete() throws {
        try _default.Complete()
    }

    deinit {
        _IClosable = nil
        _default = nil
    }
}

// MARK: - Deferral Internals

@_spi(WinRTInternal)
extension __IMPL_Windows_Foundation {
    public enum DeferralBridge: AbiBridge {
        public typealias SwiftProjection = Deferral
        public typealias CABI = __x_ABI_CWindows_CFoundation_CIDeferral
        public static func from(abi: ComPtr<__x_ABI_CWindows_CFoundation_CIDeferral>?) -> Deferral? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

}
@_spi(WinRTInternal)
public class DeferralMaker: MakeFromAbi {
    public typealias SwiftType = Deferral
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return Deferral(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
extension __ABI_Windows_Foundation {
    private static let IID___x_ABI_CWindows_CFoundation_CIDeferral: WindowsFoundation.IID = .init(
        Data1: 0xD6269732, Data2: 0x3B7F, Data3: 0x46A7, Data4: ( 0xB4,0x0B,0x4F,0xDC,0xA2,0xA2,0xC6,0x93 ) // D6269732-3B7F-46A7-B40B-4FDCA2A2C693
    ) 

    public class IDeferral: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CFoundation_CIDeferral }

        public func Complete() throws {
            _ = try perform(as: __x_ABI_CWindows_CFoundation_CIDeferral.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Complete(pThis))
            }
        }

    }

    private static let IID___x_ABI_CWindows_CFoundation_CIDeferralFactory: WindowsFoundation.IID = .init(
        Data1: 0x65A1ECC5, Data2: 0x3FB5, Data3: 0x4832, Data4: ( 0x8C,0xA9,0xF0,0x61,0xB2,0x81,0xD1,0x3A ) // 65A1ECC5-3FB5-4832-8CA9-F061B281D13A
    ) 

    public class IDeferralFactory: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CFoundation_CIDeferralFactory }

        public func Create(_ handler: WindowsFoundation.DeferralCompletedHandler?) throws -> IDeferral {
            let (result) = try ComPtrs.initialize { resultAbi in
                let handlerWrapper = __ABI_Windows_Foundation.DeferralCompletedHandlerWrapper(handler)
                let _handler = try! handlerWrapper?.toABI { $0 }
                _ = try perform(as: __x_ABI_CWindows_CFoundation_CIDeferralFactory.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.Create(pThis, _handler, &resultAbi))
                }
            }
            return IDeferral(result!)
        }

    }

}

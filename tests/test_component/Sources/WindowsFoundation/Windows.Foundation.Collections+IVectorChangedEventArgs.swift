// WARNING: Please don't edit this file. It was generated by Swift/WinRT v0.0.1
// swiftlint:disable all
import Foundation
import CWindowsFoundation
import CWinRT

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivectorchangedeventargs)
public protocol IVectorChangedEventArgs : WinRTInterface {
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivectorchangedeventargs.collectionchange)
    var collectionChange: WindowsFoundation.CollectionChange { get }
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivectorchangedeventargs.index)
    var index: UInt32 { get }
}

extension IVectorChangedEventArgs {
    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        switch iid {
            case __ABI_Windows_Foundation_Collections.IVectorChangedEventArgsWrapper.IID:
                let wrapper = __ABI_Windows_Foundation_Collections.IVectorChangedEventArgsWrapper(self)
                return wrapper!.queryInterface(iid)
            default: return nil
        }
    }
}
public typealias AnyIVectorChangedEventArgs = any IVectorChangedEventArgs

// MARK: - IVectorChangedEventArgs Internals

@_spi(WinRTInternal)
extension __IMPL_Windows_Foundation_Collections {
    public enum IVectorChangedEventArgsBridge : AbiInterfaceBridge {
        public typealias CABI = __x_ABI_CWindows_CFoundation_CCollections_CIVectorChangedEventArgs
        public typealias SwiftABI = __ABI_Windows_Foundation_Collections.IVectorChangedEventArgs
        public typealias SwiftProjection = AnyIVectorChangedEventArgs
        public static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
            guard let abi = abi else { return nil }
            return IVectorChangedEventArgsImpl(abi)
        }

        public static func makeAbi() -> CABI {
            let vtblPtr = withUnsafeMutablePointer(to: &__ABI_Windows_Foundation_Collections.IVectorChangedEventArgsVTable) { $0 }
            return .init(lpVtbl: vtblPtr)
        }
    }

    fileprivate class IVectorChangedEventArgsImpl: IVectorChangedEventArgs, WinRTAbiImpl {
        fileprivate typealias Bridge = IVectorChangedEventArgsBridge
        fileprivate let _default: Bridge.SwiftABI
        fileprivate var thisPtr: WindowsFoundation.IInspectable { _default }
        fileprivate init(_ fromAbi: ComPtr<Bridge.CABI>) {
            _default = Bridge.SwiftABI(fromAbi)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivectorchangedeventargs.collectionchange)
        fileprivate var collectionChange : CollectionChange {
            get { try! _default.get_CollectionChange() }
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivectorchangedeventargs.index)
        fileprivate var index : UInt32 {
            get { try! _default.get_Index() }
        }

    }

}
@_spi(WinRTInternal)
extension __ABI_Windows_Foundation_Collections {
    private static let IID___x_ABI_CWindows_CFoundation_CCollections_CIVectorChangedEventArgs: WindowsFoundation.IID = .init(
        Data1: 0x575933DF, Data2: 0x34FE, Data3: 0x4480, Data4: ( 0xAF,0x15,0x07,0x69,0x1F,0x3D,0x5D,0x9B ) // 575933DF-34FE-4480-AF15-07691F3D5D9B
    ) 

    public class IVectorChangedEventArgs: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CFoundation_CCollections_CIVectorChangedEventArgs }

        open func get_CollectionChange() throws -> WindowsFoundation.CollectionChange {
            var value: __x_ABI_CWindows_CFoundation_CCollections_CCollectionChange = .init(0)
            _ = try perform(as: __x_ABI_CWindows_CFoundation_CCollections_CIVectorChangedEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_CollectionChange(pThis, &value))
            }
            return value
        }

        open func get_Index() throws -> UInt32 {
            var value: UINT32 = 0
            _ = try perform(as: __x_ABI_CWindows_CFoundation_CCollections_CIVectorChangedEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Index(pThis, &value))
            }
            return value
        }

    }

    internal static var IVectorChangedEventArgsVTable: __x_ABI_CWindows_CFoundation_CCollections_CIVectorChangedEventArgsVtbl = .init(
        QueryInterface: { IVectorChangedEventArgsWrapper.queryInterface($0, $1, $2) },
        AddRef: { IVectorChangedEventArgsWrapper.addRef($0) },
        Release: { IVectorChangedEventArgsWrapper.release($0) },
        GetIids: {
            let size = MemoryLayout<WindowsFoundation.IID>.size
            let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: WindowsFoundation.IID.self)
            iids[0] = IUnknown.IID
            iids[1] = IInspectable.IID
            iids[2] = __ABI_Windows_Foundation_Collections.IVectorChangedEventArgsWrapper.IID
            $1!.pointee = 3
            $2!.pointee = iids
            return S_OK
        },

        GetRuntimeClassName: {
            _ = $0
            let hstring = try! HString("Windows.Foundation.Collections.IVectorChangedEventArgs").detach()
            $1!.pointee = hstring
            return S_OK
        },

        GetTrustLevel: {
            _ = $0
            $1!.pointee = TrustLevel(rawValue: 0)
            return S_OK
        },

        get_CollectionChange: {
            guard let __unwrapped__instance = IVectorChangedEventArgsWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value = __unwrapped__instance.collectionChange
            $1?.initialize(to: value)
            return S_OK
        },

        get_Index: {
            guard let __unwrapped__instance = IVectorChangedEventArgsWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value = __unwrapped__instance.index
            $1?.initialize(to: value)
            return S_OK
        }
    )

    public typealias IVectorChangedEventArgsWrapper = InterfaceWrapperBase<__IMPL_Windows_Foundation_Collections.IVectorChangedEventArgsBridge>
}
@_spi(WinRTInternal)
public class IVectorChangedEventArgsMaker: MakeFromAbi {
    public typealias SwiftType = AnyIVectorChangedEventArgs
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        let swiftAbi: __ABI_Windows_Foundation_Collections.IVectorChangedEventArgs = try! abi.QueryInterface()
        return __IMPL_Windows_Foundation_Collections.IVectorChangedEventArgsBridge.from(abi: RawPointer(swiftAbi))!
    }
}

// WARNING: Please don't edit this file. It was generated by Swift/WinRT v0.0.1
// swiftlint:disable all
import Foundation
import CWindowsFoundation
import CWinRT

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.propertyset)
public final class PropertySet : WinRTClass, IObservableMap, IMap, IIterable, IPropertySet {
    public typealias K = String
    public typealias V = Any?
    public typealias T = AnyIKeyValuePair<String, Any?>?
    private typealias SwiftABI = __ABI_Windows_Foundation_Collections.IPropertySet
    private typealias CABI = __x_ABI_CWindows_CFoundation_CCollections_CIPropertySet
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static let _defaultFactory: WindowsFoundation.IActivationFactory = try! RoGetActivationFactory("Windows.Foundation.Collections.PropertySet")
    override public init() {
        super.init(try! Self._defaultFactory.ActivateInstance())
    }

    private lazy var _IObservableMap: IObservableMapString_Any! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.propertyset.mapchanged)
    public lazy var mapChanged : Event<MapChangedEventHandler<String, Any?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._IObservableMap else { return .init() }
          return try! this.add_MapChanged($0)
        },
        remove: { [weak self] in
         try? self?._IObservableMap.remove_MapChanged($0)
       }
      )
    }()

    private lazy var _IMap: IMapString_Any! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.propertyset.lookup)
    public func lookup(_ key: String) -> Any? {
        try! _IMap.Lookup(key)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.propertyset.haskey)
    public func hasKey(_ key: String) -> Bool {
        try! _IMap.HasKey(key)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.propertyset.getview)
    public func getView() -> AnyIMapView<String, Any?>? {
        try! _IMap.GetView()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.propertyset.insert)
    public func insert(_ key: String, _ value: Any?) -> Bool {
        try! _IMap.Insert(key, value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.propertyset.remove)
    public func remove(_ key: String) {
        try! _IMap.Remove(key)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.propertyset.clear)
    public func clear() {
        try! _IMap.Clear()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.propertyset.size)
    public var size : UInt32 {
        get { try! _IMap.get_Size() }
    }

    private lazy var _IIterable: IIterableIKeyValuePairString_Any! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.propertyset.first)
    public func first() -> AnyIIterator<AnyIKeyValuePair<String, Any?>?>? {
        try! _IIterable.First()
    }

    deinit {
        _IObservableMap = nil
        _IMap = nil
        _IIterable = nil
        _default = nil
    }
}

// MARK: - PropertySet Internals

@_spi(WinRTInternal)
extension __IMPL_Windows_Foundation_Collections {
    public enum PropertySetBridge: AbiBridge {
        public typealias SwiftProjection = PropertySet
        public typealias CABI = __x_ABI_CWindows_CFoundation_CCollections_CIPropertySet
        public static func from(abi: ComPtr<__x_ABI_CWindows_CFoundation_CCollections_CIPropertySet>?) -> PropertySet? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

}
@_spi(WinRTInternal)
public class PropertySetMaker: MakeFromAbi {
    public typealias SwiftType = PropertySet
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return PropertySet(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
extension __ABI_Windows_Foundation_Collections {
}

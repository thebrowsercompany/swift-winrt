// WARNING: Please don't edit this file. It was generated by Swift/WinRT v0.0.1

#pragma once
// Header files for imported files
#include "inspectable.h"
#include "AsyncInfo.h"
#include "EventToken.h"
#include "windowscontracts.h"
#include "Windows.Foundation.h"
#include "test_component.Delegates.h"
// Importing Collections header
#include "Windows.Foundation.Collections.h"

/* Forward Declarations */
#ifndef ____x_ABI_Ctest__component_CIVoidToVoidDelegate_FWD_DEFINED__
#define ____x_ABI_Ctest__component_CIVoidToVoidDelegate_FWD_DEFINED__
typedef interface __x_ABI_Ctest__component_CIVoidToVoidDelegate __x_ABI_Ctest__component_CIVoidToVoidDelegate;

#endif // ____x_ABI_Ctest__component_CIVoidToVoidDelegate_FWD_DEFINED__

    #ifndef ____x_ABI_Ctest__component_CIBase_FWD_DEFINED__
#define ____x_ABI_Ctest__component_CIBase_FWD_DEFINED__
    typedef interface __x_ABI_Ctest__component_CIBase __x_ABI_Ctest__component_CIBase;

#endif // ____x_ABI_Ctest__component_CIBase_FWD_DEFINED__

#ifndef ____x_ABI_Ctest__component_CIBaseNoOverrides_FWD_DEFINED__
#define ____x_ABI_Ctest__component_CIBaseNoOverrides_FWD_DEFINED__
    typedef interface __x_ABI_Ctest__component_CIBaseNoOverrides __x_ABI_Ctest__component_CIBaseNoOverrides;

#endif // ____x_ABI_Ctest__component_CIBaseNoOverrides_FWD_DEFINED__

#ifndef ____x_ABI_Ctest__component_CIBaseNoOverridesProtectedFactory_FWD_DEFINED__
#define ____x_ABI_Ctest__component_CIBaseNoOverridesProtectedFactory_FWD_DEFINED__
    typedef interface __x_ABI_Ctest__component_CIBaseNoOverridesProtectedFactory __x_ABI_Ctest__component_CIBaseNoOverridesProtectedFactory;

#endif // ____x_ABI_Ctest__component_CIBaseNoOverridesProtectedFactory_FWD_DEFINED__

#ifndef ____x_ABI_Ctest__component_CIBaseOverrides_FWD_DEFINED__
#define ____x_ABI_Ctest__component_CIBaseOverrides_FWD_DEFINED__
    typedef interface __x_ABI_Ctest__component_CIBaseOverrides __x_ABI_Ctest__component_CIBaseOverrides;

#endif // ____x_ABI_Ctest__component_CIBaseOverrides_FWD_DEFINED__

#ifndef ____x_ABI_Ctest__component_CIBaseProtectedFactory_FWD_DEFINED__
#define ____x_ABI_Ctest__component_CIBaseProtectedFactory_FWD_DEFINED__
    typedef interface __x_ABI_Ctest__component_CIBaseProtectedFactory __x_ABI_Ctest__component_CIBaseProtectedFactory;

#endif // ____x_ABI_Ctest__component_CIBaseProtectedFactory_FWD_DEFINED__

#ifndef ____x_ABI_Ctest__component_CIBasic_FWD_DEFINED__
#define ____x_ABI_Ctest__component_CIBasic_FWD_DEFINED__
    typedef interface __x_ABI_Ctest__component_CIBasic __x_ABI_Ctest__component_CIBasic;

#endif // ____x_ABI_Ctest__component_CIBasic_FWD_DEFINED__

#ifndef ____x_ABI_Ctest__component_CIClass_FWD_DEFINED__
#define ____x_ABI_Ctest__component_CIClass_FWD_DEFINED__
    typedef interface __x_ABI_Ctest__component_CIClass __x_ABI_Ctest__component_CIClass;

#endif // ____x_ABI_Ctest__component_CIClass_FWD_DEFINED__

#ifndef ____x_ABI_Ctest__component_CIClassFactory_FWD_DEFINED__
#define ____x_ABI_Ctest__component_CIClassFactory_FWD_DEFINED__
    typedef interface __x_ABI_Ctest__component_CIClassFactory __x_ABI_Ctest__component_CIClassFactory;

#endif // ____x_ABI_Ctest__component_CIClassFactory_FWD_DEFINED__

#ifndef ____x_ABI_Ctest__component_CIClassFactory2_FWD_DEFINED__
#define ____x_ABI_Ctest__component_CIClassFactory2_FWD_DEFINED__
    typedef interface __x_ABI_Ctest__component_CIClassFactory2 __x_ABI_Ctest__component_CIClassFactory2;

#endif // ____x_ABI_Ctest__component_CIClassFactory2_FWD_DEFINED__

#ifndef ____x_ABI_Ctest__component_CIClassStatics_FWD_DEFINED__
#define ____x_ABI_Ctest__component_CIClassStatics_FWD_DEFINED__
    typedef interface __x_ABI_Ctest__component_CIClassStatics __x_ABI_Ctest__component_CIClassStatics;

#endif // ____x_ABI_Ctest__component_CIClassStatics_FWD_DEFINED__

#ifndef ____x_ABI_Ctest__component_CIClassStatics2_FWD_DEFINED__
#define ____x_ABI_Ctest__component_CIClassStatics2_FWD_DEFINED__
    typedef interface __x_ABI_Ctest__component_CIClassStatics2 __x_ABI_Ctest__component_CIClassStatics2;

#endif // ____x_ABI_Ctest__component_CIClassStatics2_FWD_DEFINED__

#ifndef ____x_ABI_Ctest__component_CIDerived_FWD_DEFINED__
#define ____x_ABI_Ctest__component_CIDerived_FWD_DEFINED__
    typedef interface __x_ABI_Ctest__component_CIDerived __x_ABI_Ctest__component_CIDerived;

#endif // ____x_ABI_Ctest__component_CIDerived_FWD_DEFINED__

#ifndef ____x_ABI_Ctest__component_CIIAmImplementable_FWD_DEFINED__
#define ____x_ABI_Ctest__component_CIIAmImplementable_FWD_DEFINED__
    typedef interface __x_ABI_Ctest__component_CIIAmImplementable __x_ABI_Ctest__component_CIIAmImplementable;

#endif // ____x_ABI_Ctest__component_CIIAmImplementable_FWD_DEFINED__

#ifndef ____x_ABI_Ctest__component_CINullValuesStatics_FWD_DEFINED__
#define ____x_ABI_Ctest__component_CINullValuesStatics_FWD_DEFINED__
    typedef interface __x_ABI_Ctest__component_CINullValuesStatics __x_ABI_Ctest__component_CINullValuesStatics;

#endif // ____x_ABI_Ctest__component_CINullValuesStatics_FWD_DEFINED__

#ifndef ____x_ABI_Ctest__component_CISimple_FWD_DEFINED__
#define ____x_ABI_Ctest__component_CISimple_FWD_DEFINED__
    typedef interface __x_ABI_Ctest__component_CISimple __x_ABI_Ctest__component_CISimple;

#endif // ____x_ABI_Ctest__component_CISimple_FWD_DEFINED__

#ifndef ____x_ABI_Ctest__component_CISimpleDelegate_FWD_DEFINED__
#define ____x_ABI_Ctest__component_CISimpleDelegate_FWD_DEFINED__
    typedef interface __x_ABI_Ctest__component_CISimpleDelegate __x_ABI_Ctest__component_CISimpleDelegate;

#endif // ____x_ABI_Ctest__component_CISimpleDelegate_FWD_DEFINED__

#ifndef ____x_ABI_Ctest__component_CISimpleStatics_FWD_DEFINED__
#define ____x_ABI_Ctest__component_CISimpleStatics_FWD_DEFINED__
    typedef interface __x_ABI_Ctest__component_CISimpleStatics __x_ABI_Ctest__component_CISimpleStatics;

#endif // ____x_ABI_Ctest__component_CISimpleStatics_FWD_DEFINED__

#ifndef ____x_ABI_Ctest__component_CIStaticClassStatics_FWD_DEFINED__
#define ____x_ABI_Ctest__component_CIStaticClassStatics_FWD_DEFINED__
    typedef interface __x_ABI_Ctest__component_CIStaticClassStatics __x_ABI_Ctest__component_CIStaticClassStatics;

#endif // ____x_ABI_Ctest__component_CIStaticClassStatics_FWD_DEFINED__

#ifndef ____x_ABI_Ctest__component_CIUnsealedDerived_FWD_DEFINED__
#define ____x_ABI_Ctest__component_CIUnsealedDerived_FWD_DEFINED__
    typedef interface __x_ABI_Ctest__component_CIUnsealedDerived __x_ABI_Ctest__component_CIUnsealedDerived;

#endif // ____x_ABI_Ctest__component_CIUnsealedDerived_FWD_DEFINED__

#ifndef ____x_ABI_Ctest__component_CIUnsealedDerived2_FWD_DEFINED__
#define ____x_ABI_Ctest__component_CIUnsealedDerived2_FWD_DEFINED__
    typedef interface __x_ABI_Ctest__component_CIUnsealedDerived2 __x_ABI_Ctest__component_CIUnsealedDerived2;

#endif // ____x_ABI_Ctest__component_CIUnsealedDerived2_FWD_DEFINED__

#ifndef ____x_ABI_Ctest__component_CIUnsealedDerived2ProtectedFactory_FWD_DEFINED__
#define ____x_ABI_Ctest__component_CIUnsealedDerived2ProtectedFactory_FWD_DEFINED__
    typedef interface __x_ABI_Ctest__component_CIUnsealedDerived2ProtectedFactory __x_ABI_Ctest__component_CIUnsealedDerived2ProtectedFactory;

#endif // ____x_ABI_Ctest__component_CIUnsealedDerived2ProtectedFactory_FWD_DEFINED__

#ifndef ____x_ABI_Ctest__component_CIUnsealedDerivedNoOverrides_FWD_DEFINED__
#define ____x_ABI_Ctest__component_CIUnsealedDerivedNoOverrides_FWD_DEFINED__
    typedef interface __x_ABI_Ctest__component_CIUnsealedDerivedNoOverrides __x_ABI_Ctest__component_CIUnsealedDerivedNoOverrides;

#endif // ____x_ABI_Ctest__component_CIUnsealedDerivedNoOverrides_FWD_DEFINED__

#ifndef ____x_ABI_Ctest__component_CIUnsealedDerivedNoOverridesProtectedFactory_FWD_DEFINED__
#define ____x_ABI_Ctest__component_CIUnsealedDerivedNoOverridesProtectedFactory_FWD_DEFINED__
    typedef interface __x_ABI_Ctest__component_CIUnsealedDerivedNoOverridesProtectedFactory __x_ABI_Ctest__component_CIUnsealedDerivedNoOverridesProtectedFactory;

#endif // ____x_ABI_Ctest__component_CIUnsealedDerivedNoOverridesProtectedFactory_FWD_DEFINED__

#ifndef ____x_ABI_Ctest__component_CIUnsealedDerivedOverloads2_FWD_DEFINED__
#define ____x_ABI_Ctest__component_CIUnsealedDerivedOverloads2_FWD_DEFINED__
    typedef interface __x_ABI_Ctest__component_CIUnsealedDerivedOverloads2 __x_ABI_Ctest__component_CIUnsealedDerivedOverloads2;

#endif // ____x_ABI_Ctest__component_CIUnsealedDerivedOverloads2_FWD_DEFINED__

#ifndef ____x_ABI_Ctest__component_CIUnsealedDerivedOverrides_FWD_DEFINED__
#define ____x_ABI_Ctest__component_CIUnsealedDerivedOverrides_FWD_DEFINED__
    typedef interface __x_ABI_Ctest__component_CIUnsealedDerivedOverrides __x_ABI_Ctest__component_CIUnsealedDerivedOverrides;

#endif // ____x_ABI_Ctest__component_CIUnsealedDerivedOverrides_FWD_DEFINED__

#ifndef ____x_ABI_Ctest__component_CIUnsealedDerivedProtectedFactory_FWD_DEFINED__
#define ____x_ABI_Ctest__component_CIUnsealedDerivedProtectedFactory_FWD_DEFINED__
    typedef interface __x_ABI_Ctest__component_CIUnsealedDerivedProtectedFactory __x_ABI_Ctest__component_CIUnsealedDerivedProtectedFactory;

#endif // ____x_ABI_Ctest__component_CIUnsealedDerivedProtectedFactory_FWD_DEFINED__

// Parameterized interface forward declarations (C)

// Collection interface definitions

#if !defined(____x_ABI_C__FIIterator_1_HSTRING_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterator_1_HSTRING_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterator_1_HSTRING __x_ABI_C__FIIterator_1_HSTRING;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterator_1_HSTRING;

    typedef struct __x_ABI_C__FIIterator_1_HSTRINGVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterator_1_HSTRING* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterator_1_HSTRING* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterator_1_HSTRING* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterator_1_HSTRING* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterator_1_HSTRING* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterator_1_HSTRING* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Current)(__x_ABI_C__FIIterator_1_HSTRING* This,
        HSTRING* result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__x_ABI_C__FIIterator_1_HSTRING* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__x_ABI_C__FIIterator_1_HSTRING* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIIterator_1_HSTRING* This,
        UINT32 itemsLength,
        HSTRING* items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIIterator_1_HSTRINGVtbl;

    interface __x_ABI_C__FIIterator_1_HSTRING
    {
        CONST_VTBL struct __x_ABI_C__FIIterator_1_HSTRINGVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterator_1_HSTRING_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterable_1_HSTRING_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterable_1_HSTRING_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterable_1_HSTRING __x_ABI_C__FIIterable_1_HSTRING;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterable_1_HSTRING;

    typedef struct __x_ABI_C__FIIterable_1_HSTRINGVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterable_1_HSTRING* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterable_1_HSTRING* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterable_1_HSTRING* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterable_1_HSTRING* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterable_1_HSTRING* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterable_1_HSTRING* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* First)(__x_ABI_C__FIIterable_1_HSTRING* This,
        __x_ABI_C__FIIterator_1_HSTRING** result);

        END_INTERFACE
    } __x_ABI_C__FIIterable_1_HSTRINGVtbl;

    interface __x_ABI_C__FIIterable_1_HSTRING
    {
        CONST_VTBL struct __x_ABI_C__FIIterable_1_HSTRINGVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterable_1_HSTRING_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING __x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING;

    typedef struct __x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRINGVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Key)(__x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING* This,
        HSTRING* result);
    HRESULT (STDMETHODCALLTYPE* get_Value)(__x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING* This,
        HSTRING* result);

        END_INTERFACE
    } __x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRINGVtbl;

    interface __x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING
    {
        CONST_VTBL struct __x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRINGVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING;

    typedef struct __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRINGVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Current)(__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING* This,
        __x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING** result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING* This,
        UINT32 itemsLength,
        __x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRINGVtbl;

    interface __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING
    {
        CONST_VTBL struct __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRINGVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING;

    typedef struct __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRINGVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* First)(__x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING* This,
        __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING** result);

        END_INTERFACE
    } __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRINGVtbl;

    interface __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING
    {
        CONST_VTBL struct __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRINGVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_Ctest__zcomponent__CBase_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_Ctest__zcomponent__CBase_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_Ctest__zcomponent__CBase __x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_Ctest__zcomponent__CBase;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_Ctest__zcomponent__CBase;

    typedef struct __x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_Ctest__zcomponent__CBaseVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_Ctest__zcomponent__CBase* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_Ctest__zcomponent__CBase* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_Ctest__zcomponent__CBase* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_Ctest__zcomponent__CBase* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_Ctest__zcomponent__CBase* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_Ctest__zcomponent__CBase* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Key)(__x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_Ctest__zcomponent__CBase* This,
        HSTRING* result);
    HRESULT (STDMETHODCALLTYPE* get_Value)(__x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_Ctest__zcomponent__CBase* This,
        __x_ABI_Ctest__component_CIBase** result);

        END_INTERFACE
    } __x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_Ctest__zcomponent__CBaseVtbl;

    interface __x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_Ctest__zcomponent__CBase
    {
        CONST_VTBL struct __x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_Ctest__zcomponent__CBaseVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_Ctest__zcomponent__CBase_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_Ctest__zcomponent__CBase_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_Ctest__zcomponent__CBase_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_Ctest__zcomponent__CBase __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_Ctest__zcomponent__CBase;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_Ctest__zcomponent__CBase;

    typedef struct __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_Ctest__zcomponent__CBaseVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_Ctest__zcomponent__CBase* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_Ctest__zcomponent__CBase* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_Ctest__zcomponent__CBase* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_Ctest__zcomponent__CBase* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_Ctest__zcomponent__CBase* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_Ctest__zcomponent__CBase* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Current)(__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_Ctest__zcomponent__CBase* This,
        __x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_Ctest__zcomponent__CBase** result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_Ctest__zcomponent__CBase* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_Ctest__zcomponent__CBase* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_Ctest__zcomponent__CBase* This,
        UINT32 itemsLength,
        __x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_Ctest__zcomponent__CBase** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_Ctest__zcomponent__CBaseVtbl;

    interface __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_Ctest__zcomponent__CBase
    {
        CONST_VTBL struct __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_Ctest__zcomponent__CBaseVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_Ctest__zcomponent__CBase_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_Ctest__zcomponent__CBase_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_Ctest__zcomponent__CBase_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_Ctest__zcomponent__CBase __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_Ctest__zcomponent__CBase;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_Ctest__zcomponent__CBase;

    typedef struct __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_Ctest__zcomponent__CBaseVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_Ctest__zcomponent__CBase* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_Ctest__zcomponent__CBase* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_Ctest__zcomponent__CBase* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_Ctest__zcomponent__CBase* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_Ctest__zcomponent__CBase* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_Ctest__zcomponent__CBase* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* First)(__x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_Ctest__zcomponent__CBase* This,
        __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_Ctest__zcomponent__CBase** result);

        END_INTERFACE
    } __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_Ctest__zcomponent__CBaseVtbl;

    interface __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_Ctest__zcomponent__CBase
    {
        CONST_VTBL struct __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_Ctest__zcomponent__CBaseVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_Ctest__zcomponent__CBase_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterator_1___x_ABI_Ctest__zcomponent__CBase_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterator_1___x_ABI_Ctest__zcomponent__CBase_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterator_1___x_ABI_Ctest__zcomponent__CBase __x_ABI_C__FIIterator_1___x_ABI_Ctest__zcomponent__CBase;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterator_1___x_ABI_Ctest__zcomponent__CBase;

    typedef struct __x_ABI_C__FIIterator_1___x_ABI_Ctest__zcomponent__CBaseVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterator_1___x_ABI_Ctest__zcomponent__CBase* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterator_1___x_ABI_Ctest__zcomponent__CBase* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterator_1___x_ABI_Ctest__zcomponent__CBase* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterator_1___x_ABI_Ctest__zcomponent__CBase* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterator_1___x_ABI_Ctest__zcomponent__CBase* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterator_1___x_ABI_Ctest__zcomponent__CBase* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Current)(__x_ABI_C__FIIterator_1___x_ABI_Ctest__zcomponent__CBase* This,
        __x_ABI_Ctest__component_CIBase** result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__x_ABI_C__FIIterator_1___x_ABI_Ctest__zcomponent__CBase* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__x_ABI_C__FIIterator_1___x_ABI_Ctest__zcomponent__CBase* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIIterator_1___x_ABI_Ctest__zcomponent__CBase* This,
        UINT32 itemsLength,
        __x_ABI_Ctest__component_CIBase** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIIterator_1___x_ABI_Ctest__zcomponent__CBaseVtbl;

    interface __x_ABI_C__FIIterator_1___x_ABI_Ctest__zcomponent__CBase
    {
        CONST_VTBL struct __x_ABI_C__FIIterator_1___x_ABI_Ctest__zcomponent__CBaseVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterator_1___x_ABI_Ctest__zcomponent__CBase_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterable_1___x_ABI_Ctest__zcomponent__CBase_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterable_1___x_ABI_Ctest__zcomponent__CBase_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterable_1___x_ABI_Ctest__zcomponent__CBase __x_ABI_C__FIIterable_1___x_ABI_Ctest__zcomponent__CBase;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterable_1___x_ABI_Ctest__zcomponent__CBase;

    typedef struct __x_ABI_C__FIIterable_1___x_ABI_Ctest__zcomponent__CBaseVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterable_1___x_ABI_Ctest__zcomponent__CBase* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterable_1___x_ABI_Ctest__zcomponent__CBase* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterable_1___x_ABI_Ctest__zcomponent__CBase* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterable_1___x_ABI_Ctest__zcomponent__CBase* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterable_1___x_ABI_Ctest__zcomponent__CBase* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterable_1___x_ABI_Ctest__zcomponent__CBase* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* First)(__x_ABI_C__FIIterable_1___x_ABI_Ctest__zcomponent__CBase* This,
        __x_ABI_C__FIIterator_1___x_ABI_Ctest__zcomponent__CBase** result);

        END_INTERFACE
    } __x_ABI_C__FIIterable_1___x_ABI_Ctest__zcomponent__CBaseVtbl;

    interface __x_ABI_C__FIIterable_1___x_ABI_Ctest__zcomponent__CBase
    {
        CONST_VTBL struct __x_ABI_C__FIIterable_1___x_ABI_Ctest__zcomponent__CBaseVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterable_1___x_ABI_Ctest__zcomponent__CBase_INTERFACE_DEFINED__
    
typedef interface __x_ABI_C__FIMapView_2_HSTRING_HSTRING __x_ABI_C__FIMapView_2_HSTRING_HSTRING;

#if !defined(____x_ABI_C__FIMapView_2_HSTRING_HSTRING_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIMapView_2_HSTRING_HSTRING_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIMapView_2_HSTRING_HSTRING __x_ABI_C__FIMapView_2_HSTRING_HSTRING;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIMapView_2_HSTRING_HSTRING;

    typedef struct __x_ABI_C__FIMapView_2_HSTRING_HSTRINGVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIMapView_2_HSTRING_HSTRING* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIMapView_2_HSTRING_HSTRING* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIMapView_2_HSTRING_HSTRING* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIMapView_2_HSTRING_HSTRING* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIMapView_2_HSTRING_HSTRING* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIMapView_2_HSTRING_HSTRING* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* Lookup)(__x_ABI_C__FIMapView_2_HSTRING_HSTRING* This,
        HSTRING key,
        HSTRING* result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIMapView_2_HSTRING_HSTRING* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* HasKey)(__x_ABI_C__FIMapView_2_HSTRING_HSTRING* This,
        HSTRING key,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* Split)(__x_ABI_C__FIMapView_2_HSTRING_HSTRING* This,
        __x_ABI_C__FIMapView_2_HSTRING_HSTRING** first,
        __x_ABI_C__FIMapView_2_HSTRING_HSTRING** second);

        END_INTERFACE
    } __x_ABI_C__FIMapView_2_HSTRING_HSTRINGVtbl;

    interface __x_ABI_C__FIMapView_2_HSTRING_HSTRING
    {
        CONST_VTBL struct __x_ABI_C__FIMapView_2_HSTRING_HSTRINGVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIMapView_2_HSTRING_HSTRING_INTERFACE_DEFINED__
    
typedef interface __x_ABI_C__FIMapView_2_HSTRING___x_ABI_Ctest__zcomponent__CBase __x_ABI_C__FIMapView_2_HSTRING___x_ABI_Ctest__zcomponent__CBase;

#if !defined(____x_ABI_C__FIMapView_2_HSTRING___x_ABI_Ctest__zcomponent__CBase_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIMapView_2_HSTRING___x_ABI_Ctest__zcomponent__CBase_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIMapView_2_HSTRING___x_ABI_Ctest__zcomponent__CBase __x_ABI_C__FIMapView_2_HSTRING___x_ABI_Ctest__zcomponent__CBase;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIMapView_2_HSTRING___x_ABI_Ctest__zcomponent__CBase;

    typedef struct __x_ABI_C__FIMapView_2_HSTRING___x_ABI_Ctest__zcomponent__CBaseVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIMapView_2_HSTRING___x_ABI_Ctest__zcomponent__CBase* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIMapView_2_HSTRING___x_ABI_Ctest__zcomponent__CBase* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIMapView_2_HSTRING___x_ABI_Ctest__zcomponent__CBase* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIMapView_2_HSTRING___x_ABI_Ctest__zcomponent__CBase* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIMapView_2_HSTRING___x_ABI_Ctest__zcomponent__CBase* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIMapView_2_HSTRING___x_ABI_Ctest__zcomponent__CBase* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* Lookup)(__x_ABI_C__FIMapView_2_HSTRING___x_ABI_Ctest__zcomponent__CBase* This,
        HSTRING key,
        __x_ABI_Ctest__component_CIBase** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIMapView_2_HSTRING___x_ABI_Ctest__zcomponent__CBase* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* HasKey)(__x_ABI_C__FIMapView_2_HSTRING___x_ABI_Ctest__zcomponent__CBase* This,
        HSTRING key,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* Split)(__x_ABI_C__FIMapView_2_HSTRING___x_ABI_Ctest__zcomponent__CBase* This,
        __x_ABI_C__FIMapView_2_HSTRING___x_ABI_Ctest__zcomponent__CBase** first,
        __x_ABI_C__FIMapView_2_HSTRING___x_ABI_Ctest__zcomponent__CBase** second);

        END_INTERFACE
    } __x_ABI_C__FIMapView_2_HSTRING___x_ABI_Ctest__zcomponent__CBaseVtbl;

    interface __x_ABI_C__FIMapView_2_HSTRING___x_ABI_Ctest__zcomponent__CBase
    {
        CONST_VTBL struct __x_ABI_C__FIMapView_2_HSTRING___x_ABI_Ctest__zcomponent__CBaseVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIMapView_2_HSTRING___x_ABI_Ctest__zcomponent__CBase_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIMap_2_HSTRING_HSTRING_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIMap_2_HSTRING_HSTRING_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIMap_2_HSTRING_HSTRING __x_ABI_C__FIMap_2_HSTRING_HSTRING;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIMap_2_HSTRING_HSTRING;

    typedef struct __x_ABI_C__FIMap_2_HSTRING_HSTRINGVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIMap_2_HSTRING_HSTRING* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIMap_2_HSTRING_HSTRING* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIMap_2_HSTRING_HSTRING* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIMap_2_HSTRING_HSTRING* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIMap_2_HSTRING_HSTRING* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIMap_2_HSTRING_HSTRING* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* Lookup)(__x_ABI_C__FIMap_2_HSTRING_HSTRING* This,
        HSTRING key,
        HSTRING* result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIMap_2_HSTRING_HSTRING* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* HasKey)(__x_ABI_C__FIMap_2_HSTRING_HSTRING* This,
        HSTRING key,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetView)(__x_ABI_C__FIMap_2_HSTRING_HSTRING* This,
        __x_ABI_C__FIMapView_2_HSTRING_HSTRING** result);
    HRESULT (STDMETHODCALLTYPE* Insert)(__x_ABI_C__FIMap_2_HSTRING_HSTRING* This,
        HSTRING key,
        HSTRING value,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* Remove)(__x_ABI_C__FIMap_2_HSTRING_HSTRING* This,
        HSTRING key);
    HRESULT (STDMETHODCALLTYPE* Clear)(__x_ABI_C__FIMap_2_HSTRING_HSTRING* This);

        END_INTERFACE
    } __x_ABI_C__FIMap_2_HSTRING_HSTRINGVtbl;

    interface __x_ABI_C__FIMap_2_HSTRING_HSTRING
    {
        CONST_VTBL struct __x_ABI_C__FIMap_2_HSTRING_HSTRINGVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIMap_2_HSTRING_HSTRING_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIMap_2_HSTRING___x_ABI_Ctest__zcomponent__CBase_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIMap_2_HSTRING___x_ABI_Ctest__zcomponent__CBase_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIMap_2_HSTRING___x_ABI_Ctest__zcomponent__CBase __x_ABI_C__FIMap_2_HSTRING___x_ABI_Ctest__zcomponent__CBase;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIMap_2_HSTRING___x_ABI_Ctest__zcomponent__CBase;

    typedef struct __x_ABI_C__FIMap_2_HSTRING___x_ABI_Ctest__zcomponent__CBaseVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIMap_2_HSTRING___x_ABI_Ctest__zcomponent__CBase* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIMap_2_HSTRING___x_ABI_Ctest__zcomponent__CBase* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIMap_2_HSTRING___x_ABI_Ctest__zcomponent__CBase* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIMap_2_HSTRING___x_ABI_Ctest__zcomponent__CBase* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIMap_2_HSTRING___x_ABI_Ctest__zcomponent__CBase* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIMap_2_HSTRING___x_ABI_Ctest__zcomponent__CBase* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* Lookup)(__x_ABI_C__FIMap_2_HSTRING___x_ABI_Ctest__zcomponent__CBase* This,
        HSTRING key,
        __x_ABI_Ctest__component_CIBase** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIMap_2_HSTRING___x_ABI_Ctest__zcomponent__CBase* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* HasKey)(__x_ABI_C__FIMap_2_HSTRING___x_ABI_Ctest__zcomponent__CBase* This,
        HSTRING key,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetView)(__x_ABI_C__FIMap_2_HSTRING___x_ABI_Ctest__zcomponent__CBase* This,
        __x_ABI_C__FIMapView_2_HSTRING___x_ABI_Ctest__zcomponent__CBase** result);
    HRESULT (STDMETHODCALLTYPE* Insert)(__x_ABI_C__FIMap_2_HSTRING___x_ABI_Ctest__zcomponent__CBase* This,
        HSTRING key,
        __x_ABI_Ctest__component_CIBase* value,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* Remove)(__x_ABI_C__FIMap_2_HSTRING___x_ABI_Ctest__zcomponent__CBase* This,
        HSTRING key);
    HRESULT (STDMETHODCALLTYPE* Clear)(__x_ABI_C__FIMap_2_HSTRING___x_ABI_Ctest__zcomponent__CBase* This);

        END_INTERFACE
    } __x_ABI_C__FIMap_2_HSTRING___x_ABI_Ctest__zcomponent__CBaseVtbl;

    interface __x_ABI_C__FIMap_2_HSTRING___x_ABI_Ctest__zcomponent__CBase
    {
        CONST_VTBL struct __x_ABI_C__FIMap_2_HSTRING___x_ABI_Ctest__zcomponent__CBaseVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIMap_2_HSTRING___x_ABI_Ctest__zcomponent__CBase_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVectorView_1_HSTRING_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVectorView_1_HSTRING_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVectorView_1_HSTRING __x_ABI_C__FIVectorView_1_HSTRING;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVectorView_1_HSTRING;

    typedef struct __x_ABI_C__FIVectorView_1_HSTRINGVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVectorView_1_HSTRING* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVectorView_1_HSTRING* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVectorView_1_HSTRING* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVectorView_1_HSTRING* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVectorView_1_HSTRING* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVectorView_1_HSTRING* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVectorView_1_HSTRING* This,
        UINT32 index,
        HSTRING* result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVectorView_1_HSTRING* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVectorView_1_HSTRING* This,
        HSTRING value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVectorView_1_HSTRING* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        HSTRING* items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIVectorView_1_HSTRINGVtbl;

    interface __x_ABI_C__FIVectorView_1_HSTRING
    {
        CONST_VTBL struct __x_ABI_C__FIVectorView_1_HSTRINGVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVectorView_1_HSTRING_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVectorView_1___x_ABI_Ctest__zcomponent__CBase_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVectorView_1___x_ABI_Ctest__zcomponent__CBase_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVectorView_1___x_ABI_Ctest__zcomponent__CBase __x_ABI_C__FIVectorView_1___x_ABI_Ctest__zcomponent__CBase;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVectorView_1___x_ABI_Ctest__zcomponent__CBase;

    typedef struct __x_ABI_C__FIVectorView_1___x_ABI_Ctest__zcomponent__CBaseVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVectorView_1___x_ABI_Ctest__zcomponent__CBase* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVectorView_1___x_ABI_Ctest__zcomponent__CBase* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVectorView_1___x_ABI_Ctest__zcomponent__CBase* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVectorView_1___x_ABI_Ctest__zcomponent__CBase* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVectorView_1___x_ABI_Ctest__zcomponent__CBase* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVectorView_1___x_ABI_Ctest__zcomponent__CBase* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVectorView_1___x_ABI_Ctest__zcomponent__CBase* This,
        UINT32 index,
        __x_ABI_Ctest__component_CIBase** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVectorView_1___x_ABI_Ctest__zcomponent__CBase* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVectorView_1___x_ABI_Ctest__zcomponent__CBase* This,
        __x_ABI_Ctest__component_CIBase* value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVectorView_1___x_ABI_Ctest__zcomponent__CBase* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        __x_ABI_Ctest__component_CIBase** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIVectorView_1___x_ABI_Ctest__zcomponent__CBaseVtbl;

    interface __x_ABI_C__FIVectorView_1___x_ABI_Ctest__zcomponent__CBase
    {
        CONST_VTBL struct __x_ABI_C__FIVectorView_1___x_ABI_Ctest__zcomponent__CBaseVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVectorView_1___x_ABI_Ctest__zcomponent__CBase_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVector_1_HSTRING_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVector_1_HSTRING_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVector_1_HSTRING __x_ABI_C__FIVector_1_HSTRING;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVector_1_HSTRING;

    typedef struct __x_ABI_C__FIVector_1_HSTRINGVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVector_1_HSTRING* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVector_1_HSTRING* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVector_1_HSTRING* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVector_1_HSTRING* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVector_1_HSTRING* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVector_1_HSTRING* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVector_1_HSTRING* This,
        UINT32 index,
        HSTRING* result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVector_1_HSTRING* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* GetView)(__x_ABI_C__FIVector_1_HSTRING* This,
        __x_ABI_C__FIVectorView_1_HSTRING** result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVector_1_HSTRING* This,
        HSTRING value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* SetAt)(__x_ABI_C__FIVector_1_HSTRING* This,
        UINT32 index,
        HSTRING value);
    HRESULT (STDMETHODCALLTYPE* InsertAt)(__x_ABI_C__FIVector_1_HSTRING* This,
        UINT32 index,
        HSTRING value);
    HRESULT (STDMETHODCALLTYPE* RemoveAt)(__x_ABI_C__FIVector_1_HSTRING* This,
        UINT32 index);
    HRESULT (STDMETHODCALLTYPE* Append)(__x_ABI_C__FIVector_1_HSTRING* This,
        HSTRING value);
    HRESULT (STDMETHODCALLTYPE* RemoveAtEnd)(__x_ABI_C__FIVector_1_HSTRING* This);
    HRESULT (STDMETHODCALLTYPE* Clear)(__x_ABI_C__FIVector_1_HSTRING* This);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVector_1_HSTRING* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        HSTRING* items,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* ReplaceAll)(__x_ABI_C__FIVector_1_HSTRING* This,
        UINT32 itemsLength,
        HSTRING* items);

        END_INTERFACE
    } __x_ABI_C__FIVector_1_HSTRINGVtbl;

    interface __x_ABI_C__FIVector_1_HSTRING
    {
        CONST_VTBL struct __x_ABI_C__FIVector_1_HSTRINGVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVector_1_HSTRING_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVector_1___x_ABI_Ctest__zcomponent__CBase_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVector_1___x_ABI_Ctest__zcomponent__CBase_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVector_1___x_ABI_Ctest__zcomponent__CBase __x_ABI_C__FIVector_1___x_ABI_Ctest__zcomponent__CBase;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVector_1___x_ABI_Ctest__zcomponent__CBase;

    typedef struct __x_ABI_C__FIVector_1___x_ABI_Ctest__zcomponent__CBaseVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVector_1___x_ABI_Ctest__zcomponent__CBase* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVector_1___x_ABI_Ctest__zcomponent__CBase* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVector_1___x_ABI_Ctest__zcomponent__CBase* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVector_1___x_ABI_Ctest__zcomponent__CBase* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVector_1___x_ABI_Ctest__zcomponent__CBase* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVector_1___x_ABI_Ctest__zcomponent__CBase* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVector_1___x_ABI_Ctest__zcomponent__CBase* This,
        UINT32 index,
        __x_ABI_Ctest__component_CIBase** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVector_1___x_ABI_Ctest__zcomponent__CBase* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* GetView)(__x_ABI_C__FIVector_1___x_ABI_Ctest__zcomponent__CBase* This,
        __x_ABI_C__FIVectorView_1___x_ABI_Ctest__zcomponent__CBase** result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVector_1___x_ABI_Ctest__zcomponent__CBase* This,
        __x_ABI_Ctest__component_CIBase* value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* SetAt)(__x_ABI_C__FIVector_1___x_ABI_Ctest__zcomponent__CBase* This,
        UINT32 index,
        __x_ABI_Ctest__component_CIBase* value);
    HRESULT (STDMETHODCALLTYPE* InsertAt)(__x_ABI_C__FIVector_1___x_ABI_Ctest__zcomponent__CBase* This,
        UINT32 index,
        __x_ABI_Ctest__component_CIBase* value);
    HRESULT (STDMETHODCALLTYPE* RemoveAt)(__x_ABI_C__FIVector_1___x_ABI_Ctest__zcomponent__CBase* This,
        UINT32 index);
    HRESULT (STDMETHODCALLTYPE* Append)(__x_ABI_C__FIVector_1___x_ABI_Ctest__zcomponent__CBase* This,
        __x_ABI_Ctest__component_CIBase* value);
    HRESULT (STDMETHODCALLTYPE* RemoveAtEnd)(__x_ABI_C__FIVector_1___x_ABI_Ctest__zcomponent__CBase* This);
    HRESULT (STDMETHODCALLTYPE* Clear)(__x_ABI_C__FIVector_1___x_ABI_Ctest__zcomponent__CBase* This);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVector_1___x_ABI_Ctest__zcomponent__CBase* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        __x_ABI_Ctest__component_CIBase** items,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* ReplaceAll)(__x_ABI_C__FIVector_1___x_ABI_Ctest__zcomponent__CBase* This,
        UINT32 itemsLength,
        __x_ABI_Ctest__component_CIBase** items);

        END_INTERFACE
    } __x_ABI_C__FIVector_1___x_ABI_Ctest__zcomponent__CBaseVtbl;

    interface __x_ABI_C__FIVector_1___x_ABI_Ctest__zcomponent__CBase
    {
        CONST_VTBL struct __x_ABI_C__FIVector_1___x_ABI_Ctest__zcomponent__CBaseVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVector_1___x_ABI_Ctest__zcomponent__CBase_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIEventHandler_1_IInspectable_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIEventHandler_1_IInspectable_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIEventHandler_1_IInspectable __x_ABI_C__FIEventHandler_1_IInspectable;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIEventHandler_1_IInspectable;

    typedef struct __x_ABI_C__FIEventHandler_1_IInspectableVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIEventHandler_1_IInspectable* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIEventHandler_1_IInspectable* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIEventHandler_1_IInspectable* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FIEventHandler_1_IInspectable* This,
        IInspectable* sender,
        IInspectable* args);

        END_INTERFACE
    } __x_ABI_C__FIEventHandler_1_IInspectableVtbl;

    interface __x_ABI_C__FIEventHandler_1_IInspectable
    {
        CONST_VTBL struct __x_ABI_C__FIEventHandler_1_IInspectableVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIEventHandler_1_IInspectable_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIReference_1_int_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIReference_1_int_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIReference_1_int __x_ABI_C__FIReference_1_int;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIReference_1_int;

    typedef struct __x_ABI_C__FIReference_1_intVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIReference_1_int* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIReference_1_int* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIReference_1_int* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIReference_1_int* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIReference_1_int* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIReference_1_int* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Value)(__x_ABI_C__FIReference_1_int* This,
        INT32* result);

        END_INTERFACE
    } __x_ABI_C__FIReference_1_intVtbl;

    interface __x_ABI_C__FIReference_1_int
    {
        CONST_VTBL struct __x_ABI_C__FIReference_1_intVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIReference_1_int_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIReference_1_GUID_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIReference_1_GUID_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIReference_1_GUID __x_ABI_C__FIReference_1_GUID;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIReference_1_GUID;

    typedef struct __x_ABI_C__FIReference_1_GUIDVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIReference_1_GUID* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIReference_1_GUID* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIReference_1_GUID* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIReference_1_GUID* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIReference_1_GUID* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIReference_1_GUID* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Value)(__x_ABI_C__FIReference_1_GUID* This,
        GUID* result);

        END_INTERFACE
    } __x_ABI_C__FIReference_1_GUIDVtbl;

    interface __x_ABI_C__FIReference_1_GUID
    {
        CONST_VTBL struct __x_ABI_C__FIReference_1_GUIDVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIReference_1_GUID_INTERFACE_DEFINED__
    
typedef enum __x_ABI_Ctest__component_CSigned __x_ABI_Ctest__component_CSigned;

#if !defined(____x_ABI_C__FIReference_1___x_ABI_Ctest__zcomponent__CSigned_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIReference_1___x_ABI_Ctest__zcomponent__CSigned_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIReference_1___x_ABI_Ctest__zcomponent__CSigned __x_ABI_C__FIReference_1___x_ABI_Ctest__zcomponent__CSigned;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIReference_1___x_ABI_Ctest__zcomponent__CSigned;

    typedef struct __x_ABI_C__FIReference_1___x_ABI_Ctest__zcomponent__CSignedVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIReference_1___x_ABI_Ctest__zcomponent__CSigned* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIReference_1___x_ABI_Ctest__zcomponent__CSigned* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIReference_1___x_ABI_Ctest__zcomponent__CSigned* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIReference_1___x_ABI_Ctest__zcomponent__CSigned* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIReference_1___x_ABI_Ctest__zcomponent__CSigned* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIReference_1___x_ABI_Ctest__zcomponent__CSigned* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Value)(__x_ABI_C__FIReference_1___x_ABI_Ctest__zcomponent__CSigned* This,
        enum __x_ABI_Ctest__component_CSigned* result);

        END_INTERFACE
    } __x_ABI_C__FIReference_1___x_ABI_Ctest__zcomponent__CSignedVtbl;

    interface __x_ABI_C__FIReference_1___x_ABI_Ctest__zcomponent__CSigned
    {
        CONST_VTBL struct __x_ABI_C__FIReference_1___x_ABI_Ctest__zcomponent__CSignedVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIReference_1___x_ABI_Ctest__zcomponent__CSigned_INTERFACE_DEFINED__
    
typedef struct __x_ABI_Ctest__component_CSimpleEventArgs __x_ABI_Ctest__component_CSimpleEventArgs;

#if !defined(____x_ABI_C__FITypedEventHandler_2___x_ABI_Ctest__zcomponent__CSimple___x_ABI_Ctest__zcomponent__CSimpleEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FITypedEventHandler_2___x_ABI_Ctest__zcomponent__CSimple___x_ABI_Ctest__zcomponent__CSimpleEventArgs_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FITypedEventHandler_2___x_ABI_Ctest__zcomponent__CSimple___x_ABI_Ctest__zcomponent__CSimpleEventArgs __x_ABI_C__FITypedEventHandler_2___x_ABI_Ctest__zcomponent__CSimple___x_ABI_Ctest__zcomponent__CSimpleEventArgs;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FITypedEventHandler_2___x_ABI_Ctest__zcomponent__CSimple___x_ABI_Ctest__zcomponent__CSimpleEventArgs;

    typedef struct __x_ABI_C__FITypedEventHandler_2___x_ABI_Ctest__zcomponent__CSimple___x_ABI_Ctest__zcomponent__CSimpleEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FITypedEventHandler_2___x_ABI_Ctest__zcomponent__CSimple___x_ABI_Ctest__zcomponent__CSimpleEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FITypedEventHandler_2___x_ABI_Ctest__zcomponent__CSimple___x_ABI_Ctest__zcomponent__CSimpleEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FITypedEventHandler_2___x_ABI_Ctest__zcomponent__CSimple___x_ABI_Ctest__zcomponent__CSimpleEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FITypedEventHandler_2___x_ABI_Ctest__zcomponent__CSimple___x_ABI_Ctest__zcomponent__CSimpleEventArgs* This,
        __x_ABI_Ctest__component_CISimple* sender,
        struct __x_ABI_Ctest__component_CSimpleEventArgs args);

        END_INTERFACE
    } __x_ABI_C__FITypedEventHandler_2___x_ABI_Ctest__zcomponent__CSimple___x_ABI_Ctest__zcomponent__CSimpleEventArgsVtbl;

    interface __x_ABI_C__FITypedEventHandler_2___x_ABI_Ctest__zcomponent__CSimple___x_ABI_Ctest__zcomponent__CSimpleEventArgs
    {
        CONST_VTBL struct __x_ABI_C__FITypedEventHandler_2___x_ABI_Ctest__zcomponent__CSimple___x_ABI_Ctest__zcomponent__CSimpleEventArgsVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FITypedEventHandler_2___x_ABI_Ctest__zcomponent__CSimple___x_ABI_Ctest__zcomponent__CSimpleEventArgs_INTERFACE_DEFINED__
    
#ifndef ____x_ABI_CWindows_CFoundation_CIClosable_FWD_DEFINED__
#define ____x_ABI_CWindows_CFoundation_CIClosable_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CFoundation_CIClosable __x_ABI_CWindows_CFoundation_CIClosable;

#endif // ____x_ABI_CWindows_CFoundation_CIClosable_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CFoundation_CIPropertyValue_FWD_DEFINED__
#define ____x_ABI_CWindows_CFoundation_CIPropertyValue_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CFoundation_CIPropertyValue __x_ABI_CWindows_CFoundation_CIPropertyValue;

#endif // ____x_ABI_CWindows_CFoundation_CIPropertyValue_FWD_DEFINED__

#ifndef ____x_ABI_Ctest__component_CDelegates_CIInDelegate_FWD_DEFINED__
#define ____x_ABI_Ctest__component_CDelegates_CIInDelegate_FWD_DEFINED__
typedef interface __x_ABI_Ctest__component_CDelegates_CIInDelegate __x_ABI_Ctest__component_CDelegates_CIInDelegate;

#endif // ____x_ABI_Ctest__component_CDelegates_CIInDelegate_FWD_DEFINED__

    #ifndef ____x_ABI_Ctest__component_CDelegates_CISignalDelegate_FWD_DEFINED__
#define ____x_ABI_Ctest__component_CDelegates_CISignalDelegate_FWD_DEFINED__
typedef interface __x_ABI_Ctest__component_CDelegates_CISignalDelegate __x_ABI_Ctest__component_CDelegates_CISignalDelegate;

#endif // ____x_ABI_Ctest__component_CDelegates_CISignalDelegate_FWD_DEFINED__

    typedef enum __x_ABI_Ctest__component_CFruit __x_ABI_Ctest__component_CFruit;

typedef enum __x_ABI_Ctest__component_CSwiftifiableNames __x_ABI_Ctest__component_CSwiftifiableNames;

typedef struct __x_ABI_Ctest__component_CBlittableStruct __x_ABI_Ctest__component_CBlittableStruct;

typedef struct __x_ABI_Ctest__component_CNonBlittableStruct __x_ABI_Ctest__component_CNonBlittableStruct;

enum __x_ABI_Ctest__component_CFruit
    {
        __x_ABI_Ctest__component_CFruit_Banana = 0,
    __x_ABI_Ctest__component_CFruit_Apple = 1,
    __x_ABI_Ctest__component_CFruit_Orange = 2,
    __x_ABI_Ctest__component_CFruit_Pineapple = 3,
};

enum __x_ABI_Ctest__component_CKeywords
    {
        __x_ABI_Ctest__component_CKeywords_As = 0,
    __x_ABI_Ctest__component_CKeywords_Break = 1,
    __x_ABI_Ctest__component_CKeywords_Case = 2,
    __x_ABI_Ctest__component_CKeywords_Catch = 3,
    __x_ABI_Ctest__component_CKeywords_Class = 4,
    __x_ABI_Ctest__component_CKeywords_Continue = 5,
    __x_ABI_Ctest__component_CKeywords_Default = 6,
    __x_ABI_Ctest__component_CKeywords_Defer = 7,
    __x_ABI_Ctest__component_CKeywords_Do = 8,
    __x_ABI_Ctest__component_CKeywords_Else = 9,
    __x_ABI_Ctest__component_CKeywords_Enum = 10,
    __x_ABI_Ctest__component_CKeywords_Extension = 11,
    __x_ABI_Ctest__component_CKeywords_Fallthrough = 12,
    __x_ABI_Ctest__component_CKeywords_False = 13,
    __x_ABI_Ctest__component_CKeywords_For = 14,
    __x_ABI_Ctest__component_CKeywords_Func = 15,
    __x_ABI_Ctest__component_CKeywords_If = 16,
    __x_ABI_Ctest__component_CKeywords_Import = 17,
    __x_ABI_Ctest__component_CKeywords_In = 18,
    __x_ABI_Ctest__component_CKeywords_Internal = 19,
    __x_ABI_Ctest__component_CKeywords_Is = 20,
    __x_ABI_Ctest__component_CKeywords_Let = 21,
    __x_ABI_Ctest__component_CKeywords_Nil = 22,
    __x_ABI_Ctest__component_CKeywords_Private = 23,
    __x_ABI_Ctest__component_CKeywords_Protocol = 24,
    __x_ABI_Ctest__component_CKeywords_Public = 25,
    __x_ABI_Ctest__component_CKeywords_Repeat = 26,
    __x_ABI_Ctest__component_CKeywords_Rethrows = 27,
    __x_ABI_Ctest__component_CKeywords_Return = 28,
    __x_ABI_Ctest__component_CKeywords_Self = 29,
    __x_ABI_Ctest__component_CKeywords_Static = 30,
    __x_ABI_Ctest__component_CKeywords_Struct = 31,
    __x_ABI_Ctest__component_CKeywords_Super = 32,
    __x_ABI_Ctest__component_CKeywords_Switch = 33,
    __x_ABI_Ctest__component_CKeywords_Throw = 34,
    __x_ABI_Ctest__component_CKeywords_Throws = 35,
    __x_ABI_Ctest__component_CKeywords_True = 36,
    __x_ABI_Ctest__component_CKeywords_Try = 37,
    __x_ABI_Ctest__component_CKeywords_Var = 38,
    __x_ABI_Ctest__component_CKeywords_Where = 39,
    __x_ABI_Ctest__component_CKeywords_While = 40,
};

enum __x_ABI_Ctest__component_CSigned
    {
        __x_ABI_Ctest__component_CSigned_First = -1,
    __x_ABI_Ctest__component_CSigned_Second = 0,
    __x_ABI_Ctest__component_CSigned_Third = 1,
};

enum __x_ABI_Ctest__component_CSwiftifiableNames
    {
        __x_ABI_Ctest__component_CSwiftifiableNames_camelCase = 0,
    __x_ABI_Ctest__component_CSwiftifiableNames_PascalCase = 1,
    __x_ABI_Ctest__component_CSwiftifiableNames_ESingleLetterPrefixed = 2,
    __x_ABI_Ctest__component_CSwiftifiableNames_LEADINGCaps = 3,
    __x_ABI_Ctest__component_CSwiftifiableNames_R8G8B8A8Typeless = 4,
    __x_ABI_Ctest__component_CSwiftifiableNames_UUID = 5,
};

enum __x_ABI_Ctest__component_CUnsigned
    {
        __x_ABI_Ctest__component_CUnsigned_First = 0,
    __x_ABI_Ctest__component_CUnsigned_Second = 0x1,
    __x_ABI_Ctest__component_CUnsigned_Third = 0x2,
};

struct __x_ABI_Ctest__component_CBlittableStruct
    {
        INT32 First;
    INT32 Second;
};

struct __x_ABI_Ctest__component_CNonBlittableBoolStruct
    {
        boolean First;
    boolean Second;
    boolean Third;
    boolean Fourth;
};

struct __x_ABI_Ctest__component_CNonBlittableStruct
    {
        HSTRING First;
    HSTRING Second;
    INT32 Third;
    HSTRING Fourth;
};

struct __x_ABI_Ctest__component_CSimpleEventArgs
    {
        INT32 Value;
};

struct __x_ABI_Ctest__component_CStructWithEnum
    {
        enum __x_ABI_Ctest__component_CSwiftifiableNames Names;
};

#if !defined(____x_ABI_Ctest__component_CIVoidToVoidDelegate_INTERFACE_DEFINED__)
    #define ____x_ABI_Ctest__component_CIVoidToVoidDelegate_INTERFACE_DEFINED__
    typedef struct __x_ABI_Ctest__component_CIVoidToVoidDelegateVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_Ctest__component_CIVoidToVoidDelegate* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_Ctest__component_CIVoidToVoidDelegate* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_Ctest__component_CIVoidToVoidDelegate* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_Ctest__component_CIVoidToVoidDelegate* This);

        END_INTERFACE
    } __x_ABI_Ctest__component_CIVoidToVoidDelegateVtbl;

    interface __x_ABI_Ctest__component_CIVoidToVoidDelegate
    {
        CONST_VTBL struct __x_ABI_Ctest__component_CIVoidToVoidDelegateVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_Ctest__component_CIVoidToVoidDelegate;
    #endif /* !defined(____x_ABI_Ctest__component_CIVoidToVoidDelegate_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_Ctest__component_CIBase_INTERFACE_DEFINED__)
    #define ____x_ABI_Ctest__component_CIBase_INTERFACE_DEFINED__
    extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_test_component_IBase[] = L"test_component.IBase";
    typedef struct __x_ABI_Ctest__component_CIBaseVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_Ctest__component_CIBase* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_Ctest__component_CIBase* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_Ctest__component_CIBase* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_Ctest__component_CIBase* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_Ctest__component_CIBase* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_Ctest__component_CIBase* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* DoTheThing)(__x_ABI_Ctest__component_CIBase* This);

        END_INTERFACE
    } __x_ABI_Ctest__component_CIBaseVtbl;

    interface __x_ABI_Ctest__component_CIBase
    {
        CONST_VTBL struct __x_ABI_Ctest__component_CIBaseVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_Ctest__component_CIBase;
#endif /* !defined(____x_ABI_Ctest__component_CIBase_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_Ctest__component_CIBaseNoOverrides_INTERFACE_DEFINED__)
    #define ____x_ABI_Ctest__component_CIBaseNoOverrides_INTERFACE_DEFINED__
    extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_test_component_IBaseNoOverrides[] = L"test_component.IBaseNoOverrides";
    typedef struct __x_ABI_Ctest__component_CIBaseNoOverridesVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_Ctest__component_CIBaseNoOverrides* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_Ctest__component_CIBaseNoOverrides* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_Ctest__component_CIBaseNoOverrides* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_Ctest__component_CIBaseNoOverrides* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_Ctest__component_CIBaseNoOverrides* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_Ctest__component_CIBaseNoOverrides* This,
            TrustLevel* trustLevel);
    
        END_INTERFACE
    } __x_ABI_Ctest__component_CIBaseNoOverridesVtbl;

    interface __x_ABI_Ctest__component_CIBaseNoOverrides
    {
        CONST_VTBL struct __x_ABI_Ctest__component_CIBaseNoOverridesVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_Ctest__component_CIBaseNoOverrides;
#endif /* !defined(____x_ABI_Ctest__component_CIBaseNoOverrides_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_Ctest__component_CIBaseNoOverridesProtectedFactory_INTERFACE_DEFINED__)
    #define ____x_ABI_Ctest__component_CIBaseNoOverridesProtectedFactory_INTERFACE_DEFINED__
    extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_test_component_IBaseNoOverridesProtectedFactory[] = L"test_component.IBaseNoOverridesProtectedFactory";
    typedef struct __x_ABI_Ctest__component_CIBaseNoOverridesProtectedFactoryVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_Ctest__component_CIBaseNoOverridesProtectedFactory* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_Ctest__component_CIBaseNoOverridesProtectedFactory* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_Ctest__component_CIBaseNoOverridesProtectedFactory* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_Ctest__component_CIBaseNoOverridesProtectedFactory* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_Ctest__component_CIBaseNoOverridesProtectedFactory* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_Ctest__component_CIBaseNoOverridesProtectedFactory* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* CreateInstance)(__x_ABI_Ctest__component_CIBaseNoOverridesProtectedFactory* This,
        IInspectable* baseInterface,
        IInspectable** innerInterface,
        __x_ABI_Ctest__component_CIBaseNoOverrides** value);

        END_INTERFACE
    } __x_ABI_Ctest__component_CIBaseNoOverridesProtectedFactoryVtbl;

    interface __x_ABI_Ctest__component_CIBaseNoOverridesProtectedFactory
    {
        CONST_VTBL struct __x_ABI_Ctest__component_CIBaseNoOverridesProtectedFactoryVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_Ctest__component_CIBaseNoOverridesProtectedFactory;
#endif /* !defined(____x_ABI_Ctest__component_CIBaseNoOverridesProtectedFactory_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_Ctest__component_CIBaseOverrides_INTERFACE_DEFINED__)
    #define ____x_ABI_Ctest__component_CIBaseOverrides_INTERFACE_DEFINED__
    extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_test_component_IBaseOverrides[] = L"test_component.IBaseOverrides";
    typedef struct __x_ABI_Ctest__component_CIBaseOverridesVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_Ctest__component_CIBaseOverrides* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_Ctest__component_CIBaseOverrides* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_Ctest__component_CIBaseOverrides* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_Ctest__component_CIBaseOverrides* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_Ctest__component_CIBaseOverrides* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_Ctest__component_CIBaseOverrides* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* OnDoTheThing)(__x_ABI_Ctest__component_CIBaseOverrides* This);

        END_INTERFACE
    } __x_ABI_Ctest__component_CIBaseOverridesVtbl;

    interface __x_ABI_Ctest__component_CIBaseOverrides
    {
        CONST_VTBL struct __x_ABI_Ctest__component_CIBaseOverridesVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_Ctest__component_CIBaseOverrides;
#endif /* !defined(____x_ABI_Ctest__component_CIBaseOverrides_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_Ctest__component_CIBaseProtectedFactory_INTERFACE_DEFINED__)
    #define ____x_ABI_Ctest__component_CIBaseProtectedFactory_INTERFACE_DEFINED__
    extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_test_component_IBaseProtectedFactory[] = L"test_component.IBaseProtectedFactory";
    typedef struct __x_ABI_Ctest__component_CIBaseProtectedFactoryVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_Ctest__component_CIBaseProtectedFactory* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_Ctest__component_CIBaseProtectedFactory* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_Ctest__component_CIBaseProtectedFactory* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_Ctest__component_CIBaseProtectedFactory* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_Ctest__component_CIBaseProtectedFactory* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_Ctest__component_CIBaseProtectedFactory* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* CreateInstance)(__x_ABI_Ctest__component_CIBaseProtectedFactory* This,
        IInspectable* baseInterface,
        IInspectable** innerInterface,
        __x_ABI_Ctest__component_CIBase** value);

        END_INTERFACE
    } __x_ABI_Ctest__component_CIBaseProtectedFactoryVtbl;

    interface __x_ABI_Ctest__component_CIBaseProtectedFactory
    {
        CONST_VTBL struct __x_ABI_Ctest__component_CIBaseProtectedFactoryVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_Ctest__component_CIBaseProtectedFactory;
#endif /* !defined(____x_ABI_Ctest__component_CIBaseProtectedFactory_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_Ctest__component_CIBasic_INTERFACE_DEFINED__)
    #define ____x_ABI_Ctest__component_CIBasic_INTERFACE_DEFINED__
    extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_test_component_IBasic[] = L"test_component.IBasic";
    typedef struct __x_ABI_Ctest__component_CIBasicVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_Ctest__component_CIBasic* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_Ctest__component_CIBasic* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_Ctest__component_CIBasic* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_Ctest__component_CIBasic* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_Ctest__component_CIBasic* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_Ctest__component_CIBasic* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* Method)(__x_ABI_Ctest__component_CIBasic* This);

        END_INTERFACE
    } __x_ABI_Ctest__component_CIBasicVtbl;

    interface __x_ABI_Ctest__component_CIBasic
    {
        CONST_VTBL struct __x_ABI_Ctest__component_CIBasicVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_Ctest__component_CIBasic;
#endif /* !defined(____x_ABI_Ctest__component_CIBasic_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_Ctest__component_CIClass_INTERFACE_DEFINED__)
    #define ____x_ABI_Ctest__component_CIClass_INTERFACE_DEFINED__
    extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_test_component_IClass[] = L"test_component.IClass";
    typedef struct __x_ABI_Ctest__component_CIClassVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_Ctest__component_CIClass* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_Ctest__component_CIClass* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_Ctest__component_CIClass* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_Ctest__component_CIClass* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_Ctest__component_CIClass* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_Ctest__component_CIClass* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Implementation)(__x_ABI_Ctest__component_CIClass* This,
        __x_ABI_Ctest__component_CIBasic** value);
    HRESULT (STDMETHODCALLTYPE* put_Implementation)(__x_ABI_Ctest__component_CIClass* This,
        __x_ABI_Ctest__component_CIBasic* value);
    HRESULT (STDMETHODCALLTYPE* SetDelegate)(__x_ABI_Ctest__component_CIClass* This,
        __x_ABI_Ctest__component_CISimpleDelegate* value);
    HRESULT (STDMETHODCALLTYPE* GetDelegate)(__x_ABI_Ctest__component_CIClass* This,
        __x_ABI_Ctest__component_CISimpleDelegate** result);
    HRESULT (STDMETHODCALLTYPE* Fail)(__x_ABI_Ctest__component_CIClass* This,
        HSTRING message);
    HRESULT (STDMETHODCALLTYPE* InInt32)(__x_ABI_Ctest__component_CIClass* This,
        INT32 value,
        HSTRING* result);
    HRESULT (STDMETHODCALLTYPE* InString)(__x_ABI_Ctest__component_CIClass* This,
        HSTRING value,
        HSTRING* result);
    HRESULT (STDMETHODCALLTYPE* InEnum)(__x_ABI_Ctest__component_CIClass* This,
        enum __x_ABI_Ctest__component_CSigned value,
        HSTRING* result);
    HRESULT (STDMETHODCALLTYPE* OutInt32)(__x_ABI_Ctest__component_CIClass* This,
        INT32* value);
    HRESULT (STDMETHODCALLTYPE* OutString)(__x_ABI_Ctest__component_CIClass* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* OutBlittableStruct)(__x_ABI_Ctest__component_CIClass* This,
        struct __x_ABI_Ctest__component_CBlittableStruct* value);
    HRESULT (STDMETHODCALLTYPE* OutNonBlittableStruct)(__x_ABI_Ctest__component_CIClass* This,
        struct __x_ABI_Ctest__component_CNonBlittableStruct* value);
    HRESULT (STDMETHODCALLTYPE* OutEnum)(__x_ABI_Ctest__component_CIClass* This,
        enum __x_ABI_Ctest__component_CSigned* value);
    HRESULT (STDMETHODCALLTYPE* ReturnEnum)(__x_ABI_Ctest__component_CIClass* This,
        enum __x_ABI_Ctest__component_CSigned* result);
    HRESULT (STDMETHODCALLTYPE* ReturnReferenceEnum)(__x_ABI_Ctest__component_CIClass* This,
        __x_ABI_C__FIReference_1___x_ABI_Ctest__zcomponent__CSigned** result);
    HRESULT (STDMETHODCALLTYPE* get_EnumProperty)(__x_ABI_Ctest__component_CIClass* This,
        enum __x_ABI_Ctest__component_CFruit* value);
    HRESULT (STDMETHODCALLTYPE* put_EnumProperty)(__x_ABI_Ctest__component_CIClass* This,
        enum __x_ABI_Ctest__component_CFruit value);
    HRESULT (STDMETHODCALLTYPE* ReturnStoredStringVector)(__x_ABI_Ctest__component_CIClass* This,
        __x_ABI_C__FIVector_1_HSTRING** result);
    HRESULT (STDMETHODCALLTYPE* ReturnMapFromStringToString)(__x_ABI_Ctest__component_CIClass* This,
        __x_ABI_C__FIMap_2_HSTRING_HSTRING** result);
    HRESULT (STDMETHODCALLTYPE* ReturnChar)(__x_ABI_Ctest__component_CIClass* This,
        WCHAR* result);
    HRESULT (STDMETHODCALLTYPE* InChar)(__x_ABI_Ctest__component_CIClass* This,
        WCHAR value,
        HSTRING* result);
    HRESULT (STDMETHODCALLTYPE* OutChar)(__x_ABI_Ctest__component_CIClass* This,
        WCHAR* value);
    HRESULT (STDMETHODCALLTYPE* get_StartValue)(__x_ABI_Ctest__component_CIClass* This,
        __x_ABI_C__FIReference_1_int** value);
    HRESULT (STDMETHODCALLTYPE* put_StartValue)(__x_ABI_Ctest__component_CIClass* This,
        __x_ABI_C__FIReference_1_int* value);
    HRESULT (STDMETHODCALLTYPE* get_Id)(__x_ABI_Ctest__component_CIClass* This,
        __x_ABI_C__FIReference_1_GUID** value);
    HRESULT (STDMETHODCALLTYPE* put_Id)(__x_ABI_Ctest__component_CIClass* This,
        __x_ABI_C__FIReference_1_GUID* value);
    HRESULT (STDMETHODCALLTYPE* get_BaseProperty)(__x_ABI_Ctest__component_CIClass* This,
        __x_ABI_Ctest__component_CIBase** value);
    HRESULT (STDMETHODCALLTYPE* put_BaseProperty)(__x_ABI_Ctest__component_CIClass* This,
        __x_ABI_Ctest__component_CIBase* value);
    HRESULT (STDMETHODCALLTYPE* get_BaseNoOverridesProperty)(__x_ABI_Ctest__component_CIClass* This,
        __x_ABI_Ctest__component_CIBaseNoOverrides** value);
    HRESULT (STDMETHODCALLTYPE* put_BaseNoOverridesProperty)(__x_ABI_Ctest__component_CIClass* This,
        __x_ABI_Ctest__component_CIBaseNoOverrides* value);

        END_INTERFACE
    } __x_ABI_Ctest__component_CIClassVtbl;

    interface __x_ABI_Ctest__component_CIClass
    {
        CONST_VTBL struct __x_ABI_Ctest__component_CIClassVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_Ctest__component_CIClass;
#endif /* !defined(____x_ABI_Ctest__component_CIClass_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_Ctest__component_CIClassFactory_INTERFACE_DEFINED__)
    #define ____x_ABI_Ctest__component_CIClassFactory_INTERFACE_DEFINED__
    extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_test_component_IClassFactory[] = L"test_component.IClassFactory";
    typedef struct __x_ABI_Ctest__component_CIClassFactoryVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_Ctest__component_CIClassFactory* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_Ctest__component_CIClassFactory* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_Ctest__component_CIClassFactory* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_Ctest__component_CIClassFactory* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_Ctest__component_CIClassFactory* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_Ctest__component_CIClassFactory* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* CreateInstance)(__x_ABI_Ctest__component_CIClassFactory* This,
        HSTRING name,
        __x_ABI_Ctest__component_CIClass** value);
    HRESULT (STDMETHODCALLTYPE* CreateInstance2)(__x_ABI_Ctest__component_CIClassFactory* This,
        HSTRING name,
        enum __x_ABI_Ctest__component_CFruit fruit,
        __x_ABI_Ctest__component_CIClass** value);
    HRESULT (STDMETHODCALLTYPE* CreateInstance3)(__x_ABI_Ctest__component_CIClassFactory* This,
        __x_ABI_C__FIMap_2_HSTRING_HSTRING* arg,
        INT32 dummy1,
        INT32 dummy2,
        INT32 dummy3,
        __x_ABI_Ctest__component_CIClass** value);
    HRESULT (STDMETHODCALLTYPE* CreateInstance4)(__x_ABI_Ctest__component_CIClassFactory* This,
        __x_ABI_C__FIMapView_2_HSTRING_HSTRING* arg,
        INT32 dummy1,
        INT32 dummy2,
        INT32 dummy3,
        INT32 dummy4,
        __x_ABI_Ctest__component_CIClass** value);
    HRESULT (STDMETHODCALLTYPE* CreateInstance5)(__x_ABI_Ctest__component_CIClassFactory* This,
        __x_ABI_C__FIVector_1_HSTRING* arg,
        INT32 dummy1,
        INT32 dummy2,
        INT32 dummy3,
        INT32 dummy4,
        INT32 dummy5,
        __x_ABI_Ctest__component_CIClass** value);
    HRESULT (STDMETHODCALLTYPE* CreateInstance6)(__x_ABI_Ctest__component_CIClassFactory* This,
        __x_ABI_C__FIVectorView_1_HSTRING* arg,
        INT32 dummy1,
        INT32 dummy2,
        INT32 dummy3,
        INT32 dummy4,
        INT32 dummy5,
        INT32 dummy6,
        __x_ABI_Ctest__component_CIClass** value);

        END_INTERFACE
    } __x_ABI_Ctest__component_CIClassFactoryVtbl;

    interface __x_ABI_Ctest__component_CIClassFactory
    {
        CONST_VTBL struct __x_ABI_Ctest__component_CIClassFactoryVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_Ctest__component_CIClassFactory;
#endif /* !defined(____x_ABI_Ctest__component_CIClassFactory_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_Ctest__component_CIClassFactory2_INTERFACE_DEFINED__)
    #define ____x_ABI_Ctest__component_CIClassFactory2_INTERFACE_DEFINED__
    extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_test_component_IClassFactory2[] = L"test_component.IClassFactory2";
    typedef struct __x_ABI_Ctest__component_CIClassFactory2Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_Ctest__component_CIClassFactory2* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_Ctest__component_CIClassFactory2* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_Ctest__component_CIClassFactory2* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_Ctest__component_CIClassFactory2* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_Ctest__component_CIClassFactory2* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_Ctest__component_CIClassFactory2* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* CreateInstance)(__x_ABI_Ctest__component_CIClassFactory2* This,
        HSTRING name,
        enum __x_ABI_Ctest__component_CFruit fruit,
        __x_ABI_Ctest__component_CIIAmImplementable* implementation,
        __x_ABI_Ctest__component_CIClass** value);

        END_INTERFACE
    } __x_ABI_Ctest__component_CIClassFactory2Vtbl;

    interface __x_ABI_Ctest__component_CIClassFactory2
    {
        CONST_VTBL struct __x_ABI_Ctest__component_CIClassFactory2Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_Ctest__component_CIClassFactory2;
#endif /* !defined(____x_ABI_Ctest__component_CIClassFactory2_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_Ctest__component_CIClassStatics_INTERFACE_DEFINED__)
    #define ____x_ABI_Ctest__component_CIClassStatics_INTERFACE_DEFINED__
    extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_test_component_IClassStatics[] = L"test_component.IClassStatics";
    typedef struct __x_ABI_Ctest__component_CIClassStaticsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_Ctest__component_CIClassStatics* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_Ctest__component_CIClassStatics* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_Ctest__component_CIClassStatics* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_Ctest__component_CIClassStatics* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_Ctest__component_CIClassStatics* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_Ctest__component_CIClassStatics* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* StaticTest)(__x_ABI_Ctest__component_CIClassStatics* This);
    HRESULT (STDMETHODCALLTYPE* StaticTestReturn)(__x_ABI_Ctest__component_CIClassStatics* This,
        INT32* result);
    HRESULT (STDMETHODCALLTYPE* get_StaticProperty)(__x_ABI_Ctest__component_CIClassStatics* This,
        INT32* value);
    HRESULT (STDMETHODCALLTYPE* InMap)(__x_ABI_Ctest__component_CIClassStatics* This,
        __x_ABI_C__FIMap_2_HSTRING_HSTRING* value,
        HSTRING* result);
    HRESULT (STDMETHODCALLTYPE* InMapView)(__x_ABI_Ctest__component_CIClassStatics* This,
        __x_ABI_C__FIMapView_2_HSTRING_HSTRING* value,
        HSTRING* result);
    HRESULT (STDMETHODCALLTYPE* InVector)(__x_ABI_Ctest__component_CIClassStatics* This,
        __x_ABI_C__FIVector_1_HSTRING* value,
        HSTRING* result);
    HRESULT (STDMETHODCALLTYPE* InVectorView)(__x_ABI_Ctest__component_CIClassStatics* This,
        __x_ABI_C__FIVectorView_1_HSTRING* value,
        HSTRING* result);

        END_INTERFACE
    } __x_ABI_Ctest__component_CIClassStaticsVtbl;

    interface __x_ABI_Ctest__component_CIClassStatics
    {
        CONST_VTBL struct __x_ABI_Ctest__component_CIClassStaticsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_Ctest__component_CIClassStatics;
#endif /* !defined(____x_ABI_Ctest__component_CIClassStatics_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_Ctest__component_CIClassStatics2_INTERFACE_DEFINED__)
    #define ____x_ABI_Ctest__component_CIClassStatics2_INTERFACE_DEFINED__
    extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_test_component_IClassStatics2[] = L"test_component.IClassStatics2";
    typedef struct __x_ABI_Ctest__component_CIClassStatics2Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_Ctest__component_CIClassStatics2* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_Ctest__component_CIClassStatics2* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_Ctest__component_CIClassStatics2* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_Ctest__component_CIClassStatics2* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_Ctest__component_CIClassStatics2* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_Ctest__component_CIClassStatics2* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* StaticTestReturnFloat)(__x_ABI_Ctest__component_CIClassStatics2* This,
        FLOAT* result);
    HRESULT (STDMETHODCALLTYPE* get_StaticPropertyFloat)(__x_ABI_Ctest__component_CIClassStatics2* This,
        FLOAT* value);
    HRESULT (STDMETHODCALLTYPE* put_StaticPropertyFloat)(__x_ABI_Ctest__component_CIClassStatics2* This,
        FLOAT value);

        END_INTERFACE
    } __x_ABI_Ctest__component_CIClassStatics2Vtbl;

    interface __x_ABI_Ctest__component_CIClassStatics2
    {
        CONST_VTBL struct __x_ABI_Ctest__component_CIClassStatics2Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_Ctest__component_CIClassStatics2;
#endif /* !defined(____x_ABI_Ctest__component_CIClassStatics2_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_Ctest__component_CIDerived_INTERFACE_DEFINED__)
    #define ____x_ABI_Ctest__component_CIDerived_INTERFACE_DEFINED__
    extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_test_component_IDerived[] = L"test_component.IDerived";
    typedef struct __x_ABI_Ctest__component_CIDerivedVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_Ctest__component_CIDerived* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_Ctest__component_CIDerived* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_Ctest__component_CIDerived* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_Ctest__component_CIDerived* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_Ctest__component_CIDerived* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_Ctest__component_CIDerived* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Prop)(__x_ABI_Ctest__component_CIDerived* This,
        INT32* value);
    HRESULT (STDMETHODCALLTYPE* put_Prop)(__x_ABI_Ctest__component_CIDerived* This,
        INT32 value);

        END_INTERFACE
    } __x_ABI_Ctest__component_CIDerivedVtbl;

    interface __x_ABI_Ctest__component_CIDerived
    {
        CONST_VTBL struct __x_ABI_Ctest__component_CIDerivedVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_Ctest__component_CIDerived;
#endif /* !defined(____x_ABI_Ctest__component_CIDerived_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_Ctest__component_CIIAmImplementable_INTERFACE_DEFINED__)
    #define ____x_ABI_Ctest__component_CIIAmImplementable_INTERFACE_DEFINED__
    extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_test_component_IIAmImplementable[] = L"test_component.IIAmImplementable";
    typedef struct __x_ABI_Ctest__component_CIIAmImplementableVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_Ctest__component_CIIAmImplementable* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_Ctest__component_CIIAmImplementable* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_Ctest__component_CIIAmImplementable* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_Ctest__component_CIIAmImplementable* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_Ctest__component_CIIAmImplementable* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_Ctest__component_CIIAmImplementable* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* InInt32)(__x_ABI_Ctest__component_CIIAmImplementable* This,
        INT32 value,
        HSTRING* result);
    HRESULT (STDMETHODCALLTYPE* InString)(__x_ABI_Ctest__component_CIIAmImplementable* This,
        HSTRING value,
        HSTRING* result);
    HRESULT (STDMETHODCALLTYPE* InEnum)(__x_ABI_Ctest__component_CIIAmImplementable* This,
        enum __x_ABI_Ctest__component_CSigned value,
        HSTRING* result);
    HRESULT (STDMETHODCALLTYPE* OutInt32)(__x_ABI_Ctest__component_CIIAmImplementable* This,
        INT32* value);
    HRESULT (STDMETHODCALLTYPE* OutString)(__x_ABI_Ctest__component_CIIAmImplementable* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* OutBlittableStruct)(__x_ABI_Ctest__component_CIIAmImplementable* This,
        struct __x_ABI_Ctest__component_CBlittableStruct* value);
    HRESULT (STDMETHODCALLTYPE* OutNonBlittableStruct)(__x_ABI_Ctest__component_CIIAmImplementable* This,
        struct __x_ABI_Ctest__component_CNonBlittableStruct* value);
    HRESULT (STDMETHODCALLTYPE* OutEnum)(__x_ABI_Ctest__component_CIIAmImplementable* This,
        enum __x_ABI_Ctest__component_CSigned* value);
    HRESULT (STDMETHODCALLTYPE* ReturnEnum)(__x_ABI_Ctest__component_CIIAmImplementable* This,
        enum __x_ABI_Ctest__component_CSigned* result);
    HRESULT (STDMETHODCALLTYPE* get_EnumProperty)(__x_ABI_Ctest__component_CIIAmImplementable* This,
        enum __x_ABI_Ctest__component_CFruit* value);
    HRESULT (STDMETHODCALLTYPE* put_EnumProperty)(__x_ABI_Ctest__component_CIIAmImplementable* This,
        enum __x_ABI_Ctest__component_CFruit value);
    HRESULT (STDMETHODCALLTYPE* get_Id)(__x_ABI_Ctest__component_CIIAmImplementable* This,
        __x_ABI_C__FIReference_1_GUID** value);
    HRESULT (STDMETHODCALLTYPE* put_Id)(__x_ABI_Ctest__component_CIIAmImplementable* This,
        __x_ABI_C__FIReference_1_GUID* value);
    HRESULT (STDMETHODCALLTYPE* add_ImplementableEvent)(__x_ABI_Ctest__component_CIIAmImplementable* This,
        __x_ABI_Ctest__component_CDelegates_CIInDelegate* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_ImplementableEvent)(__x_ABI_Ctest__component_CIIAmImplementable* This,
        EventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* FireEvent)(__x_ABI_Ctest__component_CIIAmImplementable* This);

        END_INTERFACE
    } __x_ABI_Ctest__component_CIIAmImplementableVtbl;

    interface __x_ABI_Ctest__component_CIIAmImplementable
    {
        CONST_VTBL struct __x_ABI_Ctest__component_CIIAmImplementableVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_Ctest__component_CIIAmImplementable;
#endif /* !defined(____x_ABI_Ctest__component_CIIAmImplementable_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_Ctest__component_CINullValuesStatics_INTERFACE_DEFINED__)
    #define ____x_ABI_Ctest__component_CINullValuesStatics_INTERFACE_DEFINED__
    extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_test_component_INullValuesStatics[] = L"test_component.INullValuesStatics";
    typedef struct __x_ABI_Ctest__component_CINullValuesStaticsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_Ctest__component_CINullValuesStatics* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_Ctest__component_CINullValuesStatics* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_Ctest__component_CINullValuesStatics* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_Ctest__component_CINullValuesStatics* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_Ctest__component_CINullValuesStatics* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_Ctest__component_CINullValuesStatics* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* IsObjectNull)(__x_ABI_Ctest__component_CINullValuesStatics* This,
        IInspectable* value,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* IsInterfaceNull)(__x_ABI_Ctest__component_CINullValuesStatics* This,
        __x_ABI_CWindows_CFoundation_CIClosable* value,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* IsGenericInterfaceNull)(__x_ABI_Ctest__component_CINullValuesStatics* This,
        __x_ABI_C__FIVector_1_HSTRING* value,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* IsClassNull)(__x_ABI_Ctest__component_CINullValuesStatics* This,
        __x_ABI_CWindows_CFoundation_CIClosable* value,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* IsDelegateNull)(__x_ABI_Ctest__component_CINullValuesStatics* This,
        __x_ABI_Ctest__component_CIVoidToVoidDelegate* value,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetNullObject)(__x_ABI_Ctest__component_CINullValuesStatics* This,
        IInspectable** result);
    HRESULT (STDMETHODCALLTYPE* GetNullInterface)(__x_ABI_Ctest__component_CINullValuesStatics* This,
        __x_ABI_CWindows_CFoundation_CIClosable** result);
    HRESULT (STDMETHODCALLTYPE* GetNullGenericInterface)(__x_ABI_Ctest__component_CINullValuesStatics* This,
        __x_ABI_C__FIVector_1_HSTRING** result);
    HRESULT (STDMETHODCALLTYPE* GetNullClass)(__x_ABI_Ctest__component_CINullValuesStatics* This,
        __x_ABI_CWindows_CFoundation_CIClosable** result);
    HRESULT (STDMETHODCALLTYPE* GetNullDelegate)(__x_ABI_Ctest__component_CINullValuesStatics* This,
        __x_ABI_Ctest__component_CIVoidToVoidDelegate** result);

        END_INTERFACE
    } __x_ABI_Ctest__component_CINullValuesStaticsVtbl;

    interface __x_ABI_Ctest__component_CINullValuesStatics
    {
        CONST_VTBL struct __x_ABI_Ctest__component_CINullValuesStaticsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_Ctest__component_CINullValuesStatics;
#endif /* !defined(____x_ABI_Ctest__component_CINullValuesStatics_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_Ctest__component_CISimple_INTERFACE_DEFINED__)
    #define ____x_ABI_Ctest__component_CISimple_INTERFACE_DEFINED__
    extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_test_component_ISimple[] = L"test_component.ISimple";
    typedef struct __x_ABI_Ctest__component_CISimpleVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_Ctest__component_CISimple* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_Ctest__component_CISimple* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_Ctest__component_CISimple* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_Ctest__component_CISimple* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_Ctest__component_CISimple* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_Ctest__component_CISimple* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* Method)(__x_ABI_Ctest__component_CISimple* This);
    HRESULT (STDMETHODCALLTYPE* ReturnBlittableStruct)(__x_ABI_Ctest__component_CISimple* This,
        struct __x_ABI_Ctest__component_CBlittableStruct* result);
    HRESULT (STDMETHODCALLTYPE* TakeBlittableStruct)(__x_ABI_Ctest__component_CISimple* This,
        struct __x_ABI_Ctest__component_CBlittableStruct value);
    HRESULT (STDMETHODCALLTYPE* get_BlittableStructProperty)(__x_ABI_Ctest__component_CISimple* This,
        struct __x_ABI_Ctest__component_CBlittableStruct* value);
    HRESULT (STDMETHODCALLTYPE* put_BlittableStructProperty)(__x_ABI_Ctest__component_CISimple* This,
        struct __x_ABI_Ctest__component_CBlittableStruct value);
    HRESULT (STDMETHODCALLTYPE* ReturnNonBlittableStruct)(__x_ABI_Ctest__component_CISimple* This,
        struct __x_ABI_Ctest__component_CNonBlittableStruct* result);
    HRESULT (STDMETHODCALLTYPE* TakeNonBlittableStruct)(__x_ABI_Ctest__component_CISimple* This,
        struct __x_ABI_Ctest__component_CNonBlittableStruct value);
    HRESULT (STDMETHODCALLTYPE* get_NonBlittableStructProperty)(__x_ABI_Ctest__component_CISimple* This,
        struct __x_ABI_Ctest__component_CNonBlittableStruct* value);
    HRESULT (STDMETHODCALLTYPE* put_NonBlittableStructProperty)(__x_ABI_Ctest__component_CISimple* This,
        struct __x_ABI_Ctest__component_CNonBlittableStruct value);
    HRESULT (STDMETHODCALLTYPE* get_StringProperty)(__x_ABI_Ctest__component_CISimple* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* put_StringProperty)(__x_ABI_Ctest__component_CISimple* This,
        HSTRING value);
    HRESULT (STDMETHODCALLTYPE* add_SignalEvent)(__x_ABI_Ctest__component_CISimple* This,
        __x_ABI_Ctest__component_CDelegates_CISignalDelegate* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_SignalEvent)(__x_ABI_Ctest__component_CISimple* This,
        EventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* add_InEvent)(__x_ABI_Ctest__component_CISimple* This,
        __x_ABI_Ctest__component_CDelegates_CIInDelegate* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_InEvent)(__x_ABI_Ctest__component_CISimple* This,
        EventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* add_SimpleEvent)(__x_ABI_Ctest__component_CISimple* This,
        __x_ABI_C__FITypedEventHandler_2___x_ABI_Ctest__zcomponent__CSimple___x_ABI_Ctest__zcomponent__CSimpleEventArgs* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_SimpleEvent)(__x_ABI_Ctest__component_CISimple* This,
        EventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* FireEvent)(__x_ABI_Ctest__component_CISimple* This);

        END_INTERFACE
    } __x_ABI_Ctest__component_CISimpleVtbl;

    interface __x_ABI_Ctest__component_CISimple
    {
        CONST_VTBL struct __x_ABI_Ctest__component_CISimpleVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_Ctest__component_CISimple;
#endif /* !defined(____x_ABI_Ctest__component_CISimple_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_Ctest__component_CISimpleDelegate_INTERFACE_DEFINED__)
    #define ____x_ABI_Ctest__component_CISimpleDelegate_INTERFACE_DEFINED__
    extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_test_component_ISimpleDelegate[] = L"test_component.ISimpleDelegate";
    typedef struct __x_ABI_Ctest__component_CISimpleDelegateVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_Ctest__component_CISimpleDelegate* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_Ctest__component_CISimpleDelegate* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_Ctest__component_CISimpleDelegate* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_Ctest__component_CISimpleDelegate* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_Ctest__component_CISimpleDelegate* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_Ctest__component_CISimpleDelegate* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* DoThis)(__x_ABI_Ctest__component_CISimpleDelegate* This);
    HRESULT (STDMETHODCALLTYPE* DoThat)(__x_ABI_Ctest__component_CISimpleDelegate* This,
        INT32 val);

        END_INTERFACE
    } __x_ABI_Ctest__component_CISimpleDelegateVtbl;

    interface __x_ABI_Ctest__component_CISimpleDelegate
    {
        CONST_VTBL struct __x_ABI_Ctest__component_CISimpleDelegateVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_Ctest__component_CISimpleDelegate;
#endif /* !defined(____x_ABI_Ctest__component_CISimpleDelegate_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_Ctest__component_CISimpleStatics_INTERFACE_DEFINED__)
    #define ____x_ABI_Ctest__component_CISimpleStatics_INTERFACE_DEFINED__
    extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_test_component_ISimpleStatics[] = L"test_component.ISimpleStatics";
    typedef struct __x_ABI_Ctest__component_CISimpleStaticsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_Ctest__component_CISimpleStatics* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_Ctest__component_CISimpleStatics* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_Ctest__component_CISimpleStatics* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_Ctest__component_CISimpleStatics* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_Ctest__component_CISimpleStatics* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_Ctest__component_CISimpleStatics* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* add_StaticEvent)(__x_ABI_Ctest__component_CISimpleStatics* This,
        __x_ABI_C__FIEventHandler_1_IInspectable* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_StaticEvent)(__x_ABI_Ctest__component_CISimpleStatics* This,
        EventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* FireStaticEvent)(__x_ABI_Ctest__component_CISimpleStatics* This);

        END_INTERFACE
    } __x_ABI_Ctest__component_CISimpleStaticsVtbl;

    interface __x_ABI_Ctest__component_CISimpleStatics
    {
        CONST_VTBL struct __x_ABI_Ctest__component_CISimpleStaticsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_Ctest__component_CISimpleStatics;
#endif /* !defined(____x_ABI_Ctest__component_CISimpleStatics_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_Ctest__component_CIStaticClassStatics_INTERFACE_DEFINED__)
    #define ____x_ABI_Ctest__component_CIStaticClassStatics_INTERFACE_DEFINED__
    extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_test_component_IStaticClassStatics[] = L"test_component.IStaticClassStatics";
    typedef struct __x_ABI_Ctest__component_CIStaticClassStaticsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_Ctest__component_CIStaticClassStatics* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_Ctest__component_CIStaticClassStatics* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_Ctest__component_CIStaticClassStatics* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_Ctest__component_CIStaticClassStatics* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_Ctest__component_CIStaticClassStatics* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_Ctest__component_CIStaticClassStatics* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_EnumProperty)(__x_ABI_Ctest__component_CIStaticClassStatics* This,
        enum __x_ABI_Ctest__component_CFruit* value);
    HRESULT (STDMETHODCALLTYPE* put_EnumProperty)(__x_ABI_Ctest__component_CIStaticClassStatics* This,
        enum __x_ABI_Ctest__component_CFruit value);
    HRESULT (STDMETHODCALLTYPE* InEnum)(__x_ABI_Ctest__component_CIStaticClassStatics* This,
        enum __x_ABI_Ctest__component_CSigned value,
        HSTRING* result);
    HRESULT (STDMETHODCALLTYPE* InNonBlittableStruct)(__x_ABI_Ctest__component_CIStaticClassStatics* This,
        struct __x_ABI_Ctest__component_CNonBlittableStruct value,
        HSTRING* result);
    HRESULT (STDMETHODCALLTYPE* TakeBase)(__x_ABI_Ctest__component_CIStaticClassStatics* This,
        __x_ABI_Ctest__component_CIBase* base);

        END_INTERFACE
    } __x_ABI_Ctest__component_CIStaticClassStaticsVtbl;

    interface __x_ABI_Ctest__component_CIStaticClassStatics
    {
        CONST_VTBL struct __x_ABI_Ctest__component_CIStaticClassStaticsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_Ctest__component_CIStaticClassStatics;
#endif /* !defined(____x_ABI_Ctest__component_CIStaticClassStatics_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_Ctest__component_CIUnsealedDerived_INTERFACE_DEFINED__)
    #define ____x_ABI_Ctest__component_CIUnsealedDerived_INTERFACE_DEFINED__
    extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_test_component_IUnsealedDerived[] = L"test_component.IUnsealedDerived";
    typedef struct __x_ABI_Ctest__component_CIUnsealedDerivedVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_Ctest__component_CIUnsealedDerived* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_Ctest__component_CIUnsealedDerived* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_Ctest__component_CIUnsealedDerived* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_Ctest__component_CIUnsealedDerived* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_Ctest__component_CIUnsealedDerived* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_Ctest__component_CIUnsealedDerived* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Prop)(__x_ABI_Ctest__component_CIUnsealedDerived* This,
        INT32* value);
    HRESULT (STDMETHODCALLTYPE* put_Prop)(__x_ABI_Ctest__component_CIUnsealedDerived* This,
        INT32 value);

        END_INTERFACE
    } __x_ABI_Ctest__component_CIUnsealedDerivedVtbl;

    interface __x_ABI_Ctest__component_CIUnsealedDerived
    {
        CONST_VTBL struct __x_ABI_Ctest__component_CIUnsealedDerivedVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_Ctest__component_CIUnsealedDerived;
#endif /* !defined(____x_ABI_Ctest__component_CIUnsealedDerived_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_Ctest__component_CIUnsealedDerived2_INTERFACE_DEFINED__)
    #define ____x_ABI_Ctest__component_CIUnsealedDerived2_INTERFACE_DEFINED__
    extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_test_component_IUnsealedDerived2[] = L"test_component.IUnsealedDerived2";
    typedef struct __x_ABI_Ctest__component_CIUnsealedDerived2Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_Ctest__component_CIUnsealedDerived2* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_Ctest__component_CIUnsealedDerived2* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_Ctest__component_CIUnsealedDerived2* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_Ctest__component_CIUnsealedDerived2* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_Ctest__component_CIUnsealedDerived2* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_Ctest__component_CIUnsealedDerived2* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* Method)(__x_ABI_Ctest__component_CIUnsealedDerived2* This);

        END_INTERFACE
    } __x_ABI_Ctest__component_CIUnsealedDerived2Vtbl;

    interface __x_ABI_Ctest__component_CIUnsealedDerived2
    {
        CONST_VTBL struct __x_ABI_Ctest__component_CIUnsealedDerived2Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_Ctest__component_CIUnsealedDerived2;
#endif /* !defined(____x_ABI_Ctest__component_CIUnsealedDerived2_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_Ctest__component_CIUnsealedDerived2ProtectedFactory_INTERFACE_DEFINED__)
    #define ____x_ABI_Ctest__component_CIUnsealedDerived2ProtectedFactory_INTERFACE_DEFINED__
    extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_test_component_IUnsealedDerived2ProtectedFactory[] = L"test_component.IUnsealedDerived2ProtectedFactory";
    typedef struct __x_ABI_Ctest__component_CIUnsealedDerived2ProtectedFactoryVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_Ctest__component_CIUnsealedDerived2ProtectedFactory* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_Ctest__component_CIUnsealedDerived2ProtectedFactory* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_Ctest__component_CIUnsealedDerived2ProtectedFactory* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_Ctest__component_CIUnsealedDerived2ProtectedFactory* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_Ctest__component_CIUnsealedDerived2ProtectedFactory* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_Ctest__component_CIUnsealedDerived2ProtectedFactory* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* CreateInstance)(__x_ABI_Ctest__component_CIUnsealedDerived2ProtectedFactory* This,
        IInspectable* baseInterface,
        IInspectable** innerInterface,
        __x_ABI_Ctest__component_CIUnsealedDerived2** value);

        END_INTERFACE
    } __x_ABI_Ctest__component_CIUnsealedDerived2ProtectedFactoryVtbl;

    interface __x_ABI_Ctest__component_CIUnsealedDerived2ProtectedFactory
    {
        CONST_VTBL struct __x_ABI_Ctest__component_CIUnsealedDerived2ProtectedFactoryVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_Ctest__component_CIUnsealedDerived2ProtectedFactory;
#endif /* !defined(____x_ABI_Ctest__component_CIUnsealedDerived2ProtectedFactory_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_Ctest__component_CIUnsealedDerivedNoOverrides_INTERFACE_DEFINED__)
    #define ____x_ABI_Ctest__component_CIUnsealedDerivedNoOverrides_INTERFACE_DEFINED__
    extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_test_component_IUnsealedDerivedNoOverrides[] = L"test_component.IUnsealedDerivedNoOverrides";
    typedef struct __x_ABI_Ctest__component_CIUnsealedDerivedNoOverridesVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_Ctest__component_CIUnsealedDerivedNoOverrides* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_Ctest__component_CIUnsealedDerivedNoOverrides* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_Ctest__component_CIUnsealedDerivedNoOverrides* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_Ctest__component_CIUnsealedDerivedNoOverrides* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_Ctest__component_CIUnsealedDerivedNoOverrides* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_Ctest__component_CIUnsealedDerivedNoOverrides* This,
            TrustLevel* trustLevel);
    
        END_INTERFACE
    } __x_ABI_Ctest__component_CIUnsealedDerivedNoOverridesVtbl;

    interface __x_ABI_Ctest__component_CIUnsealedDerivedNoOverrides
    {
        CONST_VTBL struct __x_ABI_Ctest__component_CIUnsealedDerivedNoOverridesVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_Ctest__component_CIUnsealedDerivedNoOverrides;
#endif /* !defined(____x_ABI_Ctest__component_CIUnsealedDerivedNoOverrides_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_Ctest__component_CIUnsealedDerivedNoOverridesProtectedFactory_INTERFACE_DEFINED__)
    #define ____x_ABI_Ctest__component_CIUnsealedDerivedNoOverridesProtectedFactory_INTERFACE_DEFINED__
    extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_test_component_IUnsealedDerivedNoOverridesProtectedFactory[] = L"test_component.IUnsealedDerivedNoOverridesProtectedFactory";
    typedef struct __x_ABI_Ctest__component_CIUnsealedDerivedNoOverridesProtectedFactoryVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_Ctest__component_CIUnsealedDerivedNoOverridesProtectedFactory* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_Ctest__component_CIUnsealedDerivedNoOverridesProtectedFactory* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_Ctest__component_CIUnsealedDerivedNoOverridesProtectedFactory* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_Ctest__component_CIUnsealedDerivedNoOverridesProtectedFactory* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_Ctest__component_CIUnsealedDerivedNoOverridesProtectedFactory* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_Ctest__component_CIUnsealedDerivedNoOverridesProtectedFactory* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* CreateInstance)(__x_ABI_Ctest__component_CIUnsealedDerivedNoOverridesProtectedFactory* This,
        IInspectable* baseInterface,
        IInspectable** innerInterface,
        __x_ABI_Ctest__component_CIUnsealedDerivedNoOverrides** value);

        END_INTERFACE
    } __x_ABI_Ctest__component_CIUnsealedDerivedNoOverridesProtectedFactoryVtbl;

    interface __x_ABI_Ctest__component_CIUnsealedDerivedNoOverridesProtectedFactory
    {
        CONST_VTBL struct __x_ABI_Ctest__component_CIUnsealedDerivedNoOverridesProtectedFactoryVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_Ctest__component_CIUnsealedDerivedNoOverridesProtectedFactory;
#endif /* !defined(____x_ABI_Ctest__component_CIUnsealedDerivedNoOverridesProtectedFactory_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_Ctest__component_CIUnsealedDerivedOverloads2_INTERFACE_DEFINED__)
    #define ____x_ABI_Ctest__component_CIUnsealedDerivedOverloads2_INTERFACE_DEFINED__
    extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_test_component_IUnsealedDerivedOverloads2[] = L"test_component.IUnsealedDerivedOverloads2";
    typedef struct __x_ABI_Ctest__component_CIUnsealedDerivedOverloads2Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_Ctest__component_CIUnsealedDerivedOverloads2* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_Ctest__component_CIUnsealedDerivedOverloads2* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_Ctest__component_CIUnsealedDerivedOverloads2* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_Ctest__component_CIUnsealedDerivedOverloads2* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_Ctest__component_CIUnsealedDerivedOverloads2* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_Ctest__component_CIUnsealedDerivedOverloads2* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* OnAfterDoTheThing)(__x_ABI_Ctest__component_CIUnsealedDerivedOverloads2* This);

        END_INTERFACE
    } __x_ABI_Ctest__component_CIUnsealedDerivedOverloads2Vtbl;

    interface __x_ABI_Ctest__component_CIUnsealedDerivedOverloads2
    {
        CONST_VTBL struct __x_ABI_Ctest__component_CIUnsealedDerivedOverloads2Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_Ctest__component_CIUnsealedDerivedOverloads2;
#endif /* !defined(____x_ABI_Ctest__component_CIUnsealedDerivedOverloads2_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_Ctest__component_CIUnsealedDerivedOverrides_INTERFACE_DEFINED__)
    #define ____x_ABI_Ctest__component_CIUnsealedDerivedOverrides_INTERFACE_DEFINED__
    extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_test_component_IUnsealedDerivedOverrides[] = L"test_component.IUnsealedDerivedOverrides";
    typedef struct __x_ABI_Ctest__component_CIUnsealedDerivedOverridesVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_Ctest__component_CIUnsealedDerivedOverrides* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_Ctest__component_CIUnsealedDerivedOverrides* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_Ctest__component_CIUnsealedDerivedOverrides* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_Ctest__component_CIUnsealedDerivedOverrides* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_Ctest__component_CIUnsealedDerivedOverrides* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_Ctest__component_CIUnsealedDerivedOverrides* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* OnBeforeDoTheThing)(__x_ABI_Ctest__component_CIUnsealedDerivedOverrides* This);

        END_INTERFACE
    } __x_ABI_Ctest__component_CIUnsealedDerivedOverridesVtbl;

    interface __x_ABI_Ctest__component_CIUnsealedDerivedOverrides
    {
        CONST_VTBL struct __x_ABI_Ctest__component_CIUnsealedDerivedOverridesVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_Ctest__component_CIUnsealedDerivedOverrides;
#endif /* !defined(____x_ABI_Ctest__component_CIUnsealedDerivedOverrides_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_Ctest__component_CIUnsealedDerivedProtectedFactory_INTERFACE_DEFINED__)
    #define ____x_ABI_Ctest__component_CIUnsealedDerivedProtectedFactory_INTERFACE_DEFINED__
    extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_test_component_IUnsealedDerivedProtectedFactory[] = L"test_component.IUnsealedDerivedProtectedFactory";
    typedef struct __x_ABI_Ctest__component_CIUnsealedDerivedProtectedFactoryVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_Ctest__component_CIUnsealedDerivedProtectedFactory* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_Ctest__component_CIUnsealedDerivedProtectedFactory* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_Ctest__component_CIUnsealedDerivedProtectedFactory* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_Ctest__component_CIUnsealedDerivedProtectedFactory* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_Ctest__component_CIUnsealedDerivedProtectedFactory* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_Ctest__component_CIUnsealedDerivedProtectedFactory* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* CreateInstance)(__x_ABI_Ctest__component_CIUnsealedDerivedProtectedFactory* This,
        IInspectable* baseInterface,
        IInspectable** innerInterface,
        __x_ABI_Ctest__component_CIUnsealedDerived** value);

        END_INTERFACE
    } __x_ABI_Ctest__component_CIUnsealedDerivedProtectedFactoryVtbl;

    interface __x_ABI_Ctest__component_CIUnsealedDerivedProtectedFactory
    {
        CONST_VTBL struct __x_ABI_Ctest__component_CIUnsealedDerivedProtectedFactoryVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_Ctest__component_CIUnsealedDerivedProtectedFactory;
#endif /* !defined(____x_ABI_Ctest__component_CIUnsealedDerivedProtectedFactory_INTERFACE_DEFINED__) */
    

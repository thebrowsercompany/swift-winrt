// WARNING: Please don't edit this file. It was generated by Swift/WinRT v0.0.1
import Ctest_component

public enum __IMPL_test_component {
    public class IBasicImpl : IBasic, AbiInterfaceImpl {
        public typealias c_ABI = __x_ABI_Ctest__component_CIBasic
        public typealias swift_ABI = __ABI_test_component.IBasic
        public typealias swift_Projection = IBasic
        private (set) public var _default: swift_ABI
        public static func from(abi: UnsafeMutablePointer<c_ABI>?) -> swift_Projection {
            return IBasicImpl(abi)
        }
        public init(_ fromAbi: UnsafeMutablePointer<c_ABI>?) {
            _default = swift_ABI(fromAbi)
        }

        public static func makeAbi() -> c_ABI {
            let vtblPtr = withUnsafeMutablePointer(to: &__ABI_test_component.IBasicVTable) { $0 }
            return .init(lpVtbl: vtblPtr)
        }
        public func Method() {
            try! _default.MethodImpl()
        }

    }

    public class IIAmImplementableImpl : IIAmImplementable, AbiInterfaceImpl {
        public typealias c_ABI = __x_ABI_Ctest__component_CIIAmImplementable
        public typealias swift_ABI = __ABI_test_component.IIAmImplementable
        public typealias swift_Projection = IIAmImplementable
        private (set) public var _default: swift_ABI
        public static func from(abi: UnsafeMutablePointer<c_ABI>?) -> swift_Projection {
            return IIAmImplementableImpl(abi)
        }
        public init(_ fromAbi: UnsafeMutablePointer<c_ABI>?) {
            _default = swift_ABI(fromAbi)
        }

        public static func makeAbi() -> c_ABI {
            let vtblPtr = withUnsafeMutablePointer(to: &__ABI_test_component.IIAmImplementableVTable) { $0 }
            return .init(lpVtbl: vtblPtr)
        }
        public func InInt32(_ value: Int32) -> String {
            let result = try! _default.InInt32Impl(value)
            return .init(from: result)
        }

        public func InString(_ value: String) -> String {
            let _value = try! HString(value)
            let result = try! _default.InStringImpl(_value.get())
            return .init(from: result)
        }

        public func InEnum(_ value: Signed) -> String {
            let result = try! _default.InEnumImpl(value)
            return .init(from: result)
        }

        public func OutInt32(_ value: inout Int32) {
            try! _default.OutInt32Impl(&value)
        }

        public func OutString(_ value: inout String?) {
            var _value: HSTRING?
            try! _default.OutStringImpl(&_value)
            value = .init(from: _value)
            WindowsDeleteString(_value)
        }

        public func OutBlittableStruct(_ value: inout BlittableStruct) {
            var _value: __x_ABI_Ctest__component_CBlittableStruct = .init()
            try! _default.OutBlittableStructImpl(&_value)
            value = .from(abi: _value)
        }

        public func OutNonBlittableStruct(_ value: inout NonBlittableStruct) {
            let _value: __ABI_test_component._ABI_NonBlittableStruct = .init()
            try! _default.OutNonBlittableStructImpl(&_value.val)
            value = .from(abi: _value.val)
        }

        public func OutEnum(_ value: inout Signed) {
            try! _default.OutEnumImpl(&value)
        }

        public func ReturnEnum() -> Signed {
            let result = try! _default.ReturnEnumImpl()
            return result
        }

        public func FireEvent() {
            try! _default.FireEventImpl()
        }

        public var EnumProperty : Fruit {
            get {
                let value = try! _default.get_EnumPropertyImpl()
                return value
            }

            set {
                try! _default.put_EnumPropertyImpl(newValue)
            }
        }

        public var ID : UUID? {
            get {
                let value = try! _default.get_IDImpl()
                return .init(ref: value)
            }

            set {
                let wrapper = __ABI_test_component.__x_ABI_C__FIReference_1_GUIDWrapper(newValue)
                let _newValue = try! wrapper?.to_abi { $0 }
                try! _default.put_IDImpl(_newValue)
            }
        }

    }

    public class ISimpleDelegateImpl : ISimpleDelegate, AbiInterfaceImpl {
        public typealias c_ABI = __x_ABI_Ctest__component_CISimpleDelegate
        public typealias swift_ABI = __ABI_test_component.ISimpleDelegate
        public typealias swift_Projection = ISimpleDelegate
        private (set) public var _default: swift_ABI
        public static func from(abi: UnsafeMutablePointer<c_ABI>?) -> swift_Projection {
            return ISimpleDelegateImpl(abi)
        }
        public init(_ fromAbi: UnsafeMutablePointer<c_ABI>?) {
            _default = swift_ABI(fromAbi)
        }

        public static func makeAbi() -> c_ABI {
            let vtblPtr = withUnsafeMutablePointer(to: &__ABI_test_component.ISimpleDelegateVTable) { $0 }
            return .init(lpVtbl: vtblPtr)
        }
        public func DoThis() {
            try! _default.DoThisImpl()
        }

        public func DoThat(_ val: Int32) {
            try! _default.DoThatImpl(val)
        }

    }

    internal class __x_ABI_C__FIVectorView_1_HSTRINGImpl : WinRTVectorView {
        typealias Element = String
        typealias c_ABI = __x_ABI_C__FIVectorView_1_HSTRING
        typealias swift_ABI = __ABI_test_component.IVectorViewString
        private (set) public var _default: swift_ABI
        static func from(abi: UnsafeMutablePointer<c_ABI>?) -> swift_Projection {
            return __x_ABI_C__FIVectorView_1_HSTRINGImpl(abi)
        }
        internal init(_ fromAbi: UnsafeMutablePointer<c_ABI>?) {
            _default = swift_ABI(fromAbi)
        }

        static func makeAbi() -> c_ABI {
            let vtblPtr = withUnsafeMutablePointer(to: &__ABI_test_component.__x_ABI_C__FIVectorView_1_HSTRINGVTable) { $0 }
            return .init(lpVtbl: vtblPtr)
        }

        // MARK: Collection
        var startIndex: Int { 0 }
        var endIndex: Int { Int(Size) }
        func index(after i: Int) -> Int {
            i+1
        }

        func index(of: Element) -> Int? { 
            var index: UInt32 = 0
            let result = IndexOf(of, &index)
            guard result else { return nil }
            return Int(index)
        }
        var count: Int { Int(Size) }

        subscript(position: Int) -> Element {
            get {
                GetAt(UInt32(position))
            }
        }
        // MARK: WinRT
        public func GetAt(_ index: UInt32) -> String {
            let result = try! _default.GetAtImpl(index)
            return .init(from: result)
        }

        public func IndexOf(_ value: String, _ index: inout UInt32) -> Bool {
            let _value = try! HString(value)
            let result = try! _default.IndexOfImpl(_value.get(), &index)
            return .init(from: result)
        }

        public var Size : UInt32 {
            get {
                let result = try! _default.get_SizeImpl()
                return result
            }

        }

    }

    internal class __x_ABI_C__FIVectorView_1___x_ABI_Ctest__zcomponent__CBaseImpl : WinRTVectorView {
        typealias Element = Base
        typealias c_ABI = __x_ABI_C__FIVectorView_1___x_ABI_Ctest__zcomponent__CBase
        typealias swift_ABI = __ABI_test_component.IVectorViewBase
        private (set) public var _default: swift_ABI
        static func from(abi: UnsafeMutablePointer<c_ABI>?) -> swift_Projection {
            return __x_ABI_C__FIVectorView_1___x_ABI_Ctest__zcomponent__CBaseImpl(abi)
        }
        internal init(_ fromAbi: UnsafeMutablePointer<c_ABI>?) {
            _default = swift_ABI(fromAbi)
        }

        static func makeAbi() -> c_ABI {
            let vtblPtr = withUnsafeMutablePointer(to: &__ABI_test_component.__x_ABI_C__FIVectorView_1___x_ABI_Ctest__zcomponent__CBaseVTable) { $0 }
            return .init(lpVtbl: vtblPtr)
        }

        // MARK: Collection
        var startIndex: Int { 0 }
        var endIndex: Int { Int(Size) }
        func index(after i: Int) -> Int {
            i+1
        }

        func index(of: Element) -> Int? { 
            var index: UInt32 = 0
            let result = IndexOf(of, &index)
            guard result else { return nil }
            return Int(index)
        }
        var count: Int { Int(Size) }

        subscript(position: Int) -> Element {
            get {
                GetAt(UInt32(position))
            }
        }
        // MARK: WinRT
        public func GetAt(_ index: UInt32) -> Base {
            let result = try! _default.GetAtImpl(index)
            return .from(abi: result)
        }

        public func IndexOf(_ value: Base, _ index: inout UInt32) -> Bool {
            let result = try! _default.IndexOfImpl(RawPointer(value), &index)
            return .init(from: result)
        }

        public var Size : UInt32 {
            get {
                let result = try! _default.get_SizeImpl()
                return result
            }

        }

    }

    internal class __x_ABI_C__FIVector_1_HSTRINGImpl : WinRTVector {
        typealias Element = String
        typealias c_ABI = __x_ABI_C__FIVector_1_HSTRING
        typealias swift_ABI = __ABI_test_component.IVectorString
        private (set) public var _default: swift_ABI
        static func from(abi: UnsafeMutablePointer<c_ABI>?) -> swift_Projection {
            return __x_ABI_C__FIVector_1_HSTRINGImpl(abi)
        }
        internal init(_ fromAbi: UnsafeMutablePointer<c_ABI>?) {
            _default = swift_ABI(fromAbi)
        }
        static func makeAbi() -> c_ABI {
            let vtblPtr = withUnsafeMutablePointer(to: &__ABI_test_component.__x_ABI_C__FIVector_1_HSTRINGVTable) { $0 }
            return .init(lpVtbl: vtblPtr)
        }

        // MARK: Collection
        var startIndex: Int { 0 }
        var endIndex: Int { Int(Size) }
        func index(after i: Int) -> Int {
            i+1
        }

        func index(of: Element) -> Int? { 
            var index: UInt32 = 0
            let result = IndexOf(of, &index)
            guard result else { return nil }
            return Int(index)
        }
        var count: Int { Int(Size) }

        func append(_ item: Element) {
            Append(item)
        }

        subscript(position: Int) -> Element {
            get {
                GetAt(UInt32(position))
            }
            set(newValue) {
                SetAt(UInt32(position), newValue)
            }
        }

        func removeLast() {
            RemoveAtEnd()
        }

        func clear() {
            Clear()
        }
        // MARK: WinRT
        public func GetAt(_ index: UInt32) -> String {
            let result = try! _default.GetAtImpl(index)
            return .init(from: result)
        }

        public func GetView() -> any IVectorView<String> {
            let result = try! _default.GetViewImpl()
            return __ABI_test_component.__x_ABI_C__FIVectorView_1_HSTRINGWrapper.unwrap_from(abi: result)
        }

        public func IndexOf(_ value: String, _ index: inout UInt32) -> Bool {
            let _value = try! HString(value)
            let result = try! _default.IndexOfImpl(_value.get(), &index)
            return .init(from: result)
        }

        public func SetAt(_ index: UInt32, _ value: String) {
            let _value = try! HString(value)
            try! _default.SetAtImpl(index, _value.get())
        }

        public func InsertAt(_ index: UInt32, _ value: String) {
            let _value = try! HString(value)
            try! _default.InsertAtImpl(index, _value.get())
        }

        public func RemoveAt(_ index: UInt32) {
            try! _default.RemoveAtImpl(index)
        }

        public func Append(_ value: String) {
            let _value = try! HString(value)
            try! _default.AppendImpl(_value.get())
        }

        public func RemoveAtEnd() {
            try! _default.RemoveAtEndImpl()
        }

        public func Clear() {
            try! _default.ClearImpl()
        }

        public var Size : UInt32 {
            get {
                let result = try! _default.get_SizeImpl()
                return result
            }

        }

    }

    internal class __x_ABI_C__FIVector_1___x_ABI_Ctest__zcomponent__CBaseImpl : WinRTVector {
        typealias Element = Base
        typealias c_ABI = __x_ABI_C__FIVector_1___x_ABI_Ctest__zcomponent__CBase
        typealias swift_ABI = __ABI_test_component.IVectorBase
        private (set) public var _default: swift_ABI
        static func from(abi: UnsafeMutablePointer<c_ABI>?) -> swift_Projection {
            return __x_ABI_C__FIVector_1___x_ABI_Ctest__zcomponent__CBaseImpl(abi)
        }
        internal init(_ fromAbi: UnsafeMutablePointer<c_ABI>?) {
            _default = swift_ABI(fromAbi)
        }
        static func makeAbi() -> c_ABI {
            let vtblPtr = withUnsafeMutablePointer(to: &__ABI_test_component.__x_ABI_C__FIVector_1___x_ABI_Ctest__zcomponent__CBaseVTable) { $0 }
            return .init(lpVtbl: vtblPtr)
        }

        // MARK: Collection
        var startIndex: Int { 0 }
        var endIndex: Int { Int(Size) }
        func index(after i: Int) -> Int {
            i+1
        }

        func index(of: Element) -> Int? { 
            var index: UInt32 = 0
            let result = IndexOf(of, &index)
            guard result else { return nil }
            return Int(index)
        }
        var count: Int { Int(Size) }

        func append(_ item: Element) {
            Append(item)
        }

        subscript(position: Int) -> Element {
            get {
                GetAt(UInt32(position))
            }
            set(newValue) {
                SetAt(UInt32(position), newValue)
            }
        }

        func removeLast() {
            RemoveAtEnd()
        }

        func clear() {
            Clear()
        }
        // MARK: WinRT
        public func GetAt(_ index: UInt32) -> Base {
            let result = try! _default.GetAtImpl(index)
            return .from(abi: result)
        }

        public func GetView() -> any IVectorView<test_component.Base> {
            let result = try! _default.GetViewImpl()
            return __ABI_test_component.__x_ABI_C__FIVectorView_1___x_ABI_Ctest__zcomponent__CBaseWrapper.unwrap_from(abi: result)
        }

        public func IndexOf(_ value: Base, _ index: inout UInt32) -> Bool {
            let result = try! _default.IndexOfImpl(RawPointer(value), &index)
            return .init(from: result)
        }

        public func SetAt(_ index: UInt32, _ value: Base) {
            try! _default.SetAtImpl(index, RawPointer(value))
        }

        public func InsertAt(_ index: UInt32, _ value: Base) {
            try! _default.InsertAtImpl(index, RawPointer(value))
        }

        public func RemoveAt(_ index: UInt32) {
            try! _default.RemoveAtImpl(index)
        }

        public func Append(_ value: Base) {
            try! _default.AppendImpl(RawPointer(value))
        }

        public func RemoveAtEnd() {
            try! _default.RemoveAtEndImpl()
        }

        public func Clear() {
            try! _default.ClearImpl()
        }

        public var Size : UInt32 {
            get {
                let result = try! _default.get_SizeImpl()
                return result
            }

        }

    }

    internal class __x_ABI_C__FIEventHandler_1_IInspectableImpl : WinRTDelegate {
        internal typealias Data = (test_component.IInspectable, test_component.IInspectable)
        internal typealias Return = ()
        internal var token: EventRegistrationToken?
        internal var handler: (Data) -> Return
        internal required init(handler: @escaping (Data) -> Return){
            self.handler = handler
        }
    }
    internal class __x_ABI_C__FITypedEventHandler_2___x_ABI_Ctest__zcomponent__CSimple___x_ABI_Ctest__zcomponent__CSimpleEventArgsImpl : WinRTDelegate {
        internal typealias Data = (Simple, SimpleEventArgs)
        internal typealias Return = ()
        internal var token: EventRegistrationToken?
        internal var handler: (Data) -> Return
        internal required init(handler: @escaping (Data) -> Return){
            self.handler = handler
        }
    }
}
fileprivate extension Int32 {
    init?(ref: UnsafeMutablePointer<__x_ABI_C__FIReference_1_int>?) {
        guard let val = ref else { return nil }
        var result: INT32 = .init()
        try! CHECKED(val.pointee.lpVtbl.pointee.get_Value(val, &result))
        self = result
    }
} 
fileprivate extension UUID {
    init?(ref: UnsafeMutablePointer<__x_ABI_C__FIReference_1_GUID>?) {
        guard let val = ref else { return nil }
        var result: GUID = .init()
        try! CHECKED(val.pointee.lpVtbl.pointee.get_Value(val, &result))
        self = result
    }
} 

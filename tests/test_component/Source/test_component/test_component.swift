// WARNING: Please don't edit this file. It was generated by Swift/WinRT v0.0.1
import Ctest_component

public typealias Fruit = __x_ABI_Ctest__component_CFruit
public typealias Signed = __x_ABI_Ctest__component_CSigned
public typealias Unsigned = __x_ABI_Ctest__component_CUnsigned
open class Base : UnsealedWinRTClass {
    private (set) public var _inner: UnsafeMutablePointer<Ctest_component.IInspectable>?
    private typealias swift_ABI = __ABI_test_component.IBase
    private typealias c_ABI = __x_ABI_Ctest__component_CIBase
    private var _default: swift_ABI = .init(UnsafeMutableRawPointer.none)
    open func _get_abi<T>() -> UnsafeMutablePointer<T>? {
        if T.self == c_ABI.self {
            return RawPointer(_default)
        }   
        if T.self == Ctest_component.IInspectable.self {
            return RawPointer(_default)
        }
        return nil
    }

    public static func from(abi: UnsafeMutablePointer<__x_ABI_Ctest__component_CIBase>?) -> Base {
        UnsealedWinRTClassWrapper<Composable>.unwrap_from(base: abi!)
    }

    public init(fromAbi: test_component.IInspectable) {
        _default = try! fromAbi.QueryInterface()
    }

    private static var _IBaseProtectedFactory : __ABI_test_component.IBaseProtectedFactory =  try! RoGetActivationFactory(HString("test_component.Base"))
    public init() {
        self._default = MakeComposed(Self._IBaseProtectedFactory, &_inner, self)
    }

    public init<Factory: ComposableActivationFactory>(_ factory : Factory) {
        self._default = try! MakeComposed(factory, &_inner, self as! Factory.Composable.Default.swift_Projection).QueryInterface()
        _ = self._default.Release() // release to reset reference count since QI caused an AddRef on ourselves
    }
    public func DoTheThing() {
        try! _default.DoTheThingImpl()
    }

    internal lazy var _IBaseOverrides: __ABI_test_component.IBaseOverrides = try! IUnknown(_inner).QueryInterface()
    open func OnDoTheThing() {
        try! _IBaseOverrides.OnDoTheThingImpl()
    }

    internal class IBaseOverrides : ComposableImpl {
        internal typealias c_ABI = __x_ABI_Ctest__component_CIBaseOverrides
        internal typealias swift_ABI = __ABI_test_component.IBaseOverrides
        internal class Default : MakeComposedAbi {
            internal typealias swift_Projection = Base
            internal typealias c_ABI = __x_ABI_Ctest__component_CIBase
            internal typealias swift_ABI = __ABI_test_component.IBase
            internal static func from(abi: UnsafeMutableRawPointer?) -> swift_Projection {
                .init(fromAbi: .init(abi!))
            }
        }
    }
    internal typealias Composable = IBaseOverrides
    open class var _makeFromAbi : any MakeFromAbi.Type { Composable.Default.self }
}

public final class BaseCollection : WinRTClass, IVector {
    public typealias Element = Base?
    private typealias swift_ABI = __ABI_test_component.IVectorBase
    private typealias c_ABI = __x_ABI_C__FIVector_1___x_ABI_Ctest__zcomponent__CBase
    private var _default: swift_ABI = .init(UnsafeMutableRawPointer.none)
    public func _get_abi<T>() -> UnsafeMutablePointer<T>? {
        if T.self == c_ABI.self {
            return RawPointer(_default)
        }   
        if T.self == Ctest_component.IInspectable.self {
            return RawPointer(_default)
        }
        return nil
    }

    public static func from(abi: UnsafeMutablePointer<__x_ABI_C__FIVector_1___x_ABI_Ctest__zcomponent__CBase>?) -> BaseCollection {
        .init(fromAbi: .init(abi))
    }

    public init(fromAbi: test_component.IInspectable) {
        _default = try! fromAbi.QueryInterface()
    }

    // MARK: Collection
    public var startIndex: Int { 0 }
    public var endIndex: Int { Int(Size) }
    public func index(after i: Int) -> Int {
        i+1
    }

    public func index(of: Element) -> Int? { 
        var index: UInt32 = 0
        let result = IndexOf(of, &index)
        guard result else { return nil }
        return Int(index)
    }
    public var count: Int { Int(Size) }

    public func append(_ item: Element) {
        Append(item)
    }

    public subscript(position: Int) -> Element {
        get {
            GetAt(UInt32(position))
        }
        set(newValue) {
            SetAt(UInt32(position), newValue)
        }
    }

    public func removeLast() {
        RemoveAtEnd()
    }

    public func clear() {
        Clear()
    }
    // MARK: WinRT
    public func GetAt(_ index: UInt32) -> Base? {
        let result = try! _default.GetAtImpl(index)
        return .from(abi: result)
    }

    public func GetView() -> (any IVectorView<Base?>)? {
        let result = try! _default.GetViewImpl()
        return __ABI_test_component.__x_ABI_C__FIVectorView_1___x_ABI_Ctest__zcomponent__CBaseWrapper.unwrap_from(abi: result)
    }

    public func IndexOf(_ value: Base?, _ index: inout UInt32) -> Bool {
        let result = try! _default.IndexOfImpl(RawPointer(value), &index)
        return .init(from: result)
    }

    public func SetAt(_ index: UInt32, _ value: Base?) {
        try! _default.SetAtImpl(index, RawPointer(value))
    }

    public func InsertAt(_ index: UInt32, _ value: Base?) {
        try! _default.InsertAtImpl(index, RawPointer(value))
    }

    public func RemoveAt(_ index: UInt32) {
        try! _default.RemoveAtImpl(index)
    }

    public func Append(_ value: Base?) {
        try! _default.AppendImpl(RawPointer(value))
    }

    public func RemoveAtEnd() {
        try! _default.RemoveAtEndImpl()
    }

    public func Clear() {
        try! _default.ClearImpl()
    }

    public var Size : UInt32 {
        get {
            let result = try! _default.get_SizeImpl()
            return result
        }

    }

}

public final class BaseMapCollection : WinRTClass, IMap {
    public typealias Key = String
    public typealias Value = Base?
    private typealias swift_ABI = __ABI_test_component.IMapString_Base
    private typealias c_ABI = __x_ABI_C__FIMap_2_HSTRING___x_ABI_Ctest__zcomponent__CBase
    private var _default: swift_ABI = .init(UnsafeMutableRawPointer.none)
    public func _get_abi<T>() -> UnsafeMutablePointer<T>? {
        if T.self == c_ABI.self {
            return RawPointer(_default)
        }   
        if T.self == Ctest_component.IInspectable.self {
            return RawPointer(_default)
        }
        return nil
    }

    public static func from(abi: UnsafeMutablePointer<__x_ABI_C__FIMap_2_HSTRING___x_ABI_Ctest__zcomponent__CBase>?) -> BaseMapCollection {
        .init(fromAbi: .init(abi))
    }

    public init(fromAbi: test_component.IInspectable) {
        _default = try! fromAbi.QueryInterface()
    }

    // MARK: WinRT
    public func Lookup(_ key: String) -> Base? {
        let _key = try! HString(key)
        let result = try! _default.LookupImpl(_key.get())
        return .from(abi: result)
    }

    public func HasKey(_ key: String) -> Bool {
        let _key = try! HString(key)
        let result = try! _default.HasKeyImpl(_key.get())
        return .init(from: result)
    }

    public func GetView() -> (any IMapView<String, Base?>)? {
        let result = try! _default.GetViewImpl()
        return __ABI_test_component.__x_ABI_C__FIMapView_2_HSTRING___x_ABI_Ctest__zcomponent__CBaseWrapper.unwrap_from(abi: result)
    }

    public func Insert(_ key: String, _ value: Base?) -> Bool {
        let _key = try! HString(key)
        let result = try! _default.InsertImpl(_key.get(), RawPointer(value))
        return .init(from: result)
    }

    public func Remove(_ key: String) {
        let _key = try! HString(key)
        try! _default.RemoveImpl(_key.get())
    }

    public func Clear() {
        try! _default.ClearImpl()
    }

    public var Size : UInt32 {
        get {
            let result = try! _default.get_SizeImpl()
            return result
        }

    }

}

open class BaseNoOverrides : UnsealedWinRTClass {
    private (set) public var _inner: UnsafeMutablePointer<Ctest_component.IInspectable>?
    private typealias swift_ABI = __ABI_test_component.IBaseNoOverrides
    private typealias c_ABI = __x_ABI_Ctest__component_CIBaseNoOverrides
    private var _default: swift_ABI = .init(UnsafeMutableRawPointer.none)
    open func _get_abi<T>() -> UnsafeMutablePointer<T>? {
        if T.self == c_ABI.self {
            return RawPointer(_default)
        }   
        if T.self == Ctest_component.IInspectable.self {
            return RawPointer(_default)
        }
        return nil
    }

    public static func from(abi: UnsafeMutablePointer<__x_ABI_Ctest__component_CIBaseNoOverrides>?) -> BaseNoOverrides {
        UnsealedWinRTClassWrapper<Composable>.unwrap_from(base: abi!)
    }

    public init(fromAbi: test_component.IInspectable) {
        _default = try! fromAbi.QueryInterface()
    }

    private static var _IBaseNoOverridesProtectedFactory : __ABI_test_component.IBaseNoOverridesProtectedFactory =  try! RoGetActivationFactory(HString("test_component.BaseNoOverrides"))
    public init() {
        self._default = MakeComposed(Self._IBaseNoOverridesProtectedFactory, &_inner, self)
    }

    public init<Factory: ComposableActivationFactory>(_ factory : Factory) {
        self._default = try! MakeComposed(factory, &_inner, self as! Factory.Composable.Default.swift_Projection).QueryInterface()
        _ = self._default.Release() // release to reset reference count since QI caused an AddRef on ourselves
    }
    internal class IBaseNoOverrides : ComposableImpl {
        internal typealias c_ABI = Ctest_component.IInspectable
        internal typealias swift_ABI = test_component.IInspectable
        internal class Default : MakeComposedAbi {
            internal typealias swift_Projection = BaseNoOverrides
            internal typealias c_ABI = __x_ABI_Ctest__component_CIBaseNoOverrides
            internal typealias swift_ABI = __ABI_test_component.IBaseNoOverrides
            internal static func from(abi: UnsafeMutableRawPointer?) -> swift_Projection {
                .init(fromAbi: .init(abi!))
            }
        }
    }
    internal typealias Composable = IBaseNoOverrides
    open class var _makeFromAbi : any MakeFromAbi.Type { Composable.Default.self }
}

public final class Class : WinRTClass, IBasic {
    private typealias swift_ABI = __ABI_test_component.IClass
    private typealias c_ABI = __x_ABI_Ctest__component_CIClass
    private var _default: swift_ABI = .init(UnsafeMutableRawPointer.none)
    public func _get_abi<T>() -> UnsafeMutablePointer<T>? {
        if T.self == c_ABI.self {
            return RawPointer(_default)
        }   
        if T.self == Ctest_component.IInspectable.self {
            return RawPointer(_default)
        }
        return nil
    }

    public static func from(abi: UnsafeMutablePointer<__x_ABI_Ctest__component_CIClass>?) -> Class {
        .init(fromAbi: .init(abi))
    }

    public init(fromAbi: test_component.IInspectable) {
        _default = try! fromAbi.QueryInterface()
    }

    public init() {
        try! _default = RoActivateInstance(HString("test_component.Class"))
    }

    private static let _IClassFactory: __ABI_test_component.IClassFactory = try! RoGetActivationFactory(HString("test_component.Class"))
    public init(_ name: String) {
        let _name = try! HString(name)
        let value = try! Self._IClassFactory.CreateInstanceImpl(_name.get())
        _default = __ABI_test_component.IClass(consuming: value)
    }

    public init(_ name: String, _ fruit: Fruit) {
        let _name = try! HString(name)
        let value = try! Self._IClassFactory.CreateInstance2Impl(_name.get(), fruit)
        _default = __ABI_test_component.IClass(consuming: value)
    }

    public init(_ arg: (any IMap<String, String>)?, _ dummy1: Int32, _ dummy2: Int32, _ dummy3: Int32) {
        let argWrapper = __ABI_test_component.__x_ABI_C__FIMap_2_HSTRING_HSTRINGWrapper(arg)
        let _arg = try! argWrapper?.to_abi { $0 }
        let value = try! Self._IClassFactory.CreateInstance3Impl(_arg, dummy1, dummy2, dummy3)
        _default = __ABI_test_component.IClass(consuming: value)
    }

    public init(_ arg: (any IMapView<String, String>)?, _ dummy1: Int32, _ dummy2: Int32, _ dummy3: Int32, _ dummy4: Int32) {
        let argWrapper = __ABI_test_component.__x_ABI_C__FIMapView_2_HSTRING_HSTRINGWrapper(arg)
        let _arg = try! argWrapper?.to_abi { $0 }
        let value = try! Self._IClassFactory.CreateInstance4Impl(_arg, dummy1, dummy2, dummy3, dummy4)
        _default = __ABI_test_component.IClass(consuming: value)
    }

    public init(_ arg: (any IVector<String>)?, _ dummy1: Int32, _ dummy2: Int32, _ dummy3: Int32, _ dummy4: Int32, _ dummy5: Int32) {
        let argWrapper = __ABI_test_component.__x_ABI_C__FIVector_1_HSTRINGWrapper(arg)
        let _arg = try! argWrapper?.to_abi { $0 }
        let value = try! Self._IClassFactory.CreateInstance5Impl(_arg, dummy1, dummy2, dummy3, dummy4, dummy5)
        _default = __ABI_test_component.IClass(consuming: value)
    }

    public init(_ arg: (any IVectorView<String>)?, _ dummy1: Int32, _ dummy2: Int32, _ dummy3: Int32, _ dummy4: Int32, _ dummy5: Int32, _ dummy6: Int32) {
        let argWrapper = __ABI_test_component.__x_ABI_C__FIVectorView_1_HSTRINGWrapper(arg)
        let _arg = try! argWrapper?.to_abi { $0 }
        let value = try! Self._IClassFactory.CreateInstance6Impl(_arg, dummy1, dummy2, dummy3, dummy4, dummy5, dummy6)
        _default = __ABI_test_component.IClass(consuming: value)
    }

    private static let _IClassFactory2: __ABI_test_component.IClassFactory2 = try! RoGetActivationFactory(HString("test_component.Class"))
    public init(_ name: String, _ fruit: Fruit, _ implementation: (any IIAmImplementable)?) {
        let _name = try! HString(name)
        let implementationWrapper = __ABI_test_component.IIAmImplementableWrapper(implementation)
        let _implementation = try! implementationWrapper?.to_abi { $0 }
        let value = try! Self._IClassFactory2.CreateInstanceImpl(_name.get(), fruit, _implementation)
        _default = __ABI_test_component.IClass(consuming: value)
    }

    private static let _IClassStatics: __ABI_test_component.IClassStatics = try! RoGetActivationFactory(HString("test_component.Class"))
    public static func StaticTest() {
        try! _IClassStatics.StaticTestImpl()
    }

    public static func StaticTestReturn() -> Int32 {
        let result = try! _IClassStatics.StaticTestReturnImpl()
        return result
    }

    public static func InMap(_ value: (any IMap<String, String>)?) -> String {
        let valueWrapper = __ABI_test_component.__x_ABI_C__FIMap_2_HSTRING_HSTRINGWrapper(value)
        let _value = try! valueWrapper?.to_abi { $0 }
        let result = try! _IClassStatics.InMapImpl(_value)
        return .init(from: result)
    }

    public static func InMapView(_ value: (any IMapView<String, String>)?) -> String {
        let valueWrapper = __ABI_test_component.__x_ABI_C__FIMapView_2_HSTRING_HSTRINGWrapper(value)
        let _value = try! valueWrapper?.to_abi { $0 }
        let result = try! _IClassStatics.InMapViewImpl(_value)
        return .init(from: result)
    }

    public static func InVector(_ value: (any IVector<String>)?) -> String {
        let valueWrapper = __ABI_test_component.__x_ABI_C__FIVector_1_HSTRINGWrapper(value)
        let _value = try! valueWrapper?.to_abi { $0 }
        let result = try! _IClassStatics.InVectorImpl(_value)
        return .init(from: result)
    }

    public static func InVectorView(_ value: (any IVectorView<String>)?) -> String {
        let valueWrapper = __ABI_test_component.__x_ABI_C__FIVectorView_1_HSTRINGWrapper(value)
        let _value = try! valueWrapper?.to_abi { $0 }
        let result = try! _IClassStatics.InVectorViewImpl(_value)
        return .init(from: result)
    }

    public static var StaticProperty : Int32 {
        get {
            let value = try! _IClassStatics.get_StaticPropertyImpl()
            return value
        }

    }

    private static let _IClassStatics2: __ABI_test_component.IClassStatics2 = try! RoGetActivationFactory(HString("test_component.Class"))
    public static func StaticTestReturnFloat() -> Float {
        let result = try! _IClassStatics2.StaticTestReturnFloatImpl()
        return result
    }

    public static var StaticPropertyFloat : Float {
        get {
            let value = try! _IClassStatics2.get_StaticPropertyFloatImpl()
            return value
        }

        set {
            try! _IClassStatics2.put_StaticPropertyFloatImpl(newValue)
        }
    }

    public func SetDelegate(_ value: (any ISimpleDelegate)?) {
        let valueWrapper = __ABI_test_component.ISimpleDelegateWrapper(value)
        let _value = try! valueWrapper?.to_abi { $0 }
        try! _default.SetDelegateImpl(_value)
    }

    public func GetDelegate() -> (any ISimpleDelegate)? {
        let result = try! _default.GetDelegateImpl()
        return __ABI_test_component.ISimpleDelegateWrapper.unwrap_from(abi: result)
    }

    public func InInt32(_ value: Int32) -> String {
        let result = try! _default.InInt32Impl(value)
        return .init(from: result)
    }

    public func InString(_ value: String) -> String {
        let _value = try! HString(value)
        let result = try! _default.InStringImpl(_value.get())
        return .init(from: result)
    }

    public func InEnum(_ value: Signed) -> String {
        let result = try! _default.InEnumImpl(value)
        return .init(from: result)
    }

    public func OutInt32(_ value: inout Int32) {
        try! _default.OutInt32Impl(&value)
    }

    public func OutString(_ value: inout String) {
        var _value: HSTRING?
        try! _default.OutStringImpl(&_value)
        value = .init(from: _value)
        WindowsDeleteString(_value)
    }

    public func OutBlittableStruct(_ value: inout BlittableStruct) {
        var _value: __x_ABI_Ctest__component_CBlittableStruct = .init()
        try! _default.OutBlittableStructImpl(&_value)
        value = .from(abi: _value)
    }

    public func OutNonBlittableStruct(_ value: inout NonBlittableStruct) {
        let _value: __ABI_test_component._ABI_NonBlittableStruct = .init()
        try! _default.OutNonBlittableStructImpl(&_value.val)
        value = .from(abi: _value.val)
    }

    public func OutEnum(_ value: inout Signed) {
        try! _default.OutEnumImpl(&value)
    }

    public func ReturnEnum() -> Signed {
        let result = try! _default.ReturnEnumImpl()
        return result
    }

    public func ReturnStoredStringVector() -> (any IVector<String>)? {
        let result = try! _default.ReturnStoredStringVectorImpl()
        return __ABI_test_component.__x_ABI_C__FIVector_1_HSTRINGWrapper.unwrap_from(abi: result)
    }

    public func ReturnMapFromStringToString() -> (any IMap<String, String>)? {
        let result = try! _default.ReturnMapFromStringToStringImpl()
        return __ABI_test_component.__x_ABI_C__FIMap_2_HSTRING_HSTRINGWrapper.unwrap_from(abi: result)
    }

    public func ReturnChar() -> Character {
        let result = try! _default.ReturnCharImpl()
        return .init(from: result)
    }

    public func InChar(_ value: Character) -> String {
        let result = try! _default.InCharImpl(.init(from: value))
        return .init(from: result)
    }

    public func OutChar(_ value: inout Character) {
        var _value: WCHAR = .init()
        try! _default.OutCharImpl(&_value)
        value = .init(from: _value)
    }

    public var BaseNoOverridesProperty : BaseNoOverrides? {
        get {
            let value = try! _default.get_BaseNoOverridesPropertyImpl()
            return .from(abi: value)
        }

        set {
            try! _default.put_BaseNoOverridesPropertyImpl(RawPointer(newValue))
        }
    }

    public var BaseProperty : Base? {
        get {
            let value = try! _default.get_BasePropertyImpl()
            return .from(abi: value)
        }

        set {
            try! _default.put_BasePropertyImpl(RawPointer(newValue))
        }
    }

    public var EnumProperty : Fruit {
        get {
            let value = try! _default.get_EnumPropertyImpl()
            return value
        }

        set {
            try! _default.put_EnumPropertyImpl(newValue)
        }
    }

    public var ID : UUID? {
        get {
            let value = try! _default.get_IDImpl()
            return .init(ref: value)
        }

        set {
            let wrapper = __ABI_test_component.__x_ABI_C__FIReference_1_GUIDWrapper(newValue)
            let _newValue = try! wrapper?.to_abi { $0 }
            try! _default.put_IDImpl(_newValue)
        }
    }

    public var Implementation : (any IBasic)? {
        get {
            let value = try! _default.get_ImplementationImpl()
            return __ABI_test_component.IBasicWrapper.unwrap_from(abi: value)
        }

        set {
            let wrapper = __ABI_test_component.IBasicWrapper(newValue)
            let _newValue = try! wrapper?.to_abi { $0 }
            try! _default.put_ImplementationImpl(_newValue)
        }
    }

    public var StartValue : Int32? {
        get {
            let value = try! _default.get_StartValueImpl()
            return .init(ref: value)
        }

        set {
            let wrapper = __ABI_test_component.__x_ABI_C__FIReference_1_intWrapper(newValue)
            let _newValue = try! wrapper?.to_abi { $0 }
            try! _default.put_StartValueImpl(_newValue)
        }
    }

    internal lazy var _IBasic: __ABI_test_component.IBasic = try! _default.QueryInterface()
    public func Method() {
        try! _IBasic.MethodImpl()
    }

}

public final class Derived : test_component.Base {
    private typealias swift_ABI = __ABI_test_component.IDerived
    private typealias c_ABI = __x_ABI_Ctest__component_CIDerived
    private var _default: swift_ABI = .init(UnsafeMutableRawPointer.none)
    override public func _get_abi<T>() -> UnsafeMutablePointer<T>? {
        if T.self == c_ABI.self {
            return RawPointer(_default)
        }   
        if T.self == Ctest_component.IInspectable.self {
            return RawPointer(_default)
        }
        return super._get_abi()
    }

    public static func from(abi: UnsafeMutablePointer<__x_ABI_Ctest__component_CIDerived>?) -> Derived {
        .init(fromAbi: .init(abi))
    }

    override public init(fromAbi: test_component.IInspectable) {
        _default = try! fromAbi.QueryInterface()
        super.init(fromAbi: fromAbi)
    }

    override public init() {
        try! _default = RoActivateInstance(HString("test_component.Derived"))
        super.init(fromAbi: try! _default.QueryInterface())
    }

    public var Prop : Int32 {
        get {
            let value = try! _default.get_PropImpl()
            return value
        }

        set {
            try! _default.put_PropImpl(newValue)
        }
    }

    internal class IBaseOverrides : ComposableImpl {
        internal typealias c_ABI = __x_ABI_Ctest__component_CIBaseOverrides
        internal typealias swift_ABI = __ABI_test_component.IBaseOverrides
        internal class Default : MakeComposedAbi {
            internal typealias swift_Projection = Derived
            internal typealias c_ABI = __x_ABI_Ctest__component_CIDerived
            internal typealias swift_ABI = __ABI_test_component.IDerived
            internal static func from(abi: UnsafeMutableRawPointer?) -> swift_Projection {
                .init(fromAbi: .init(abi!))
            }
        }
    }
    internal typealias Composable = IBaseOverrides
    override public class var _makeFromAbi : any MakeFromAbi.Type { Composable.Default.self }
}

public final class NoopClosable : WinRTClass, test_component.IClosable {
    private typealias swift_ABI = __ABI_Windows_Foundation.IClosable
    private typealias c_ABI = __x_ABI_CWindows_CFoundation_CIClosable
    private var _default: swift_ABI = .init(UnsafeMutableRawPointer.none)
    public func _get_abi<T>() -> UnsafeMutablePointer<T>? {
        if T.self == c_ABI.self {
            return RawPointer(_default)
        }   
        if T.self == Ctest_component.IInspectable.self {
            return RawPointer(_default)
        }
        return nil
    }

    public static func from(abi: UnsafeMutablePointer<__x_ABI_CWindows_CFoundation_CIClosable>?) -> NoopClosable {
        .init(fromAbi: .init(abi))
    }

    public init(fromAbi: test_component.IInspectable) {
        _default = try! fromAbi.QueryInterface()
    }

    public init() {
        try! _default = RoActivateInstance(HString("test_component.NoopClosable"))
    }

    public func Close() {
        try! _default.CloseImpl()
    }

}

public final class NullValues {
    private static let _INullValuesStatics: __ABI_test_component.INullValuesStatics = try! RoGetActivationFactory(HString("test_component.NullValues"))
    public static func IsObjectNull(_ value: test_component.IInspectable?) -> Bool {
        let result = try! _INullValuesStatics.IsObjectNullImpl(RawPointer(value))
        return .init(from: result)
    }

    public static func IsInterfaceNull(_ value: (any test_component.IClosable)?) -> Bool {
        let valueWrapper = __ABI_Windows_Foundation.IClosableWrapper(value)
        let _value = try! valueWrapper?.to_abi { $0 }
        let result = try! _INullValuesStatics.IsInterfaceNullImpl(_value)
        return .init(from: result)
    }

    public static func IsGenericInterfaceNull(_ value: (any IVector<String>)?) -> Bool {
        let valueWrapper = __ABI_test_component.__x_ABI_C__FIVector_1_HSTRINGWrapper(value)
        let _value = try! valueWrapper?.to_abi { $0 }
        let result = try! _INullValuesStatics.IsGenericInterfaceNullImpl(_value)
        return .init(from: result)
    }

    public static func IsClassNull(_ value: NoopClosable?) -> Bool {
        let result = try! _INullValuesStatics.IsClassNullImpl(RawPointer(value))
        return .init(from: result)
    }

    public static func IsDelegateNull(_ value: VoidToVoidDelegate?) -> Bool {
        let valueWrapper = __ABI_test_component.VoidToVoidDelegateWrapper(value!)
        let _value = try! valueWrapper.to_abi { $0 }
        let result = try! _INullValuesStatics.IsDelegateNullImpl(_value)
        return .init(from: result)
    }

    public static func GetNullObject() -> test_component.IInspectable? {
        let result = try! _INullValuesStatics.GetNullObjectImpl()
        return .init(result)
    }

    public static func GetNullInterface() -> (any test_component.IClosable)? {
        let result = try! _INullValuesStatics.GetNullInterfaceImpl()
        return __ABI_Windows_Foundation.IClosableWrapper.unwrap_from(abi: result)
    }

    public static func GetNullGenericInterface() -> (any IVector<String>)? {
        let result = try! _INullValuesStatics.GetNullGenericInterfaceImpl()
        return __ABI_test_component.__x_ABI_C__FIVector_1_HSTRINGWrapper.unwrap_from(abi: result)
    }

    public static func GetNullClass() -> NoopClosable? {
        let result = try! _INullValuesStatics.GetNullClassImpl()
        return .from(abi: result)
    }

    public static func GetNullDelegate() -> VoidToVoidDelegate? {
        let result = try! _INullValuesStatics.GetNullDelegateImpl()
        let _result = __ABI_test_component.VoidToVoidDelegateWrapper.try_unwrap_from(abi: result)
        return _result!
    }

}

public final class Simple : WinRTClass {
    private typealias swift_ABI = __ABI_test_component.ISimple
    private typealias c_ABI = __x_ABI_Ctest__component_CISimple
    private var _default: swift_ABI = .init(UnsafeMutableRawPointer.none)
    public func _get_abi<T>() -> UnsafeMutablePointer<T>? {
        if T.self == c_ABI.self {
            return RawPointer(_default)
        }   
        if T.self == Ctest_component.IInspectable.self {
            return RawPointer(_default)
        }
        return nil
    }

    public static func from(abi: UnsafeMutablePointer<__x_ABI_Ctest__component_CISimple>?) -> Simple {
        .init(fromAbi: .init(abi))
    }

    public init(fromAbi: test_component.IInspectable) {
        _default = try! fromAbi.QueryInterface()
    }

    public init() {
        try! _default = RoActivateInstance(HString("test_component.Simple"))
    }

    private static let _ISimpleStatics: __ABI_test_component.ISimpleStatics = try! RoGetActivationFactory(HString("test_component.Simple"))
    public static func FireStaticEvent() {
        try! _ISimpleStatics.FireStaticEventImpl()
    }

    private static let _StaticEventRegistrar = StaticEventRegistrar()
    public static var StaticEvent : Event<(test_component.IInspectable?, test_component.IInspectable?),()> = EventImpl<__IMPL_test_component.__x_ABI_C__FIEventHandler_1_IInspectableImpl>(register: _StaticEventRegistrar, owner:_ISimpleStatics)
    private class StaticEventRegistrar : IEventRegistration {
        func add(delegate: any WinRTDelegate, for impl: test_component.IInspectable){
            let wrapper = __ABI_test_component.__x_ABI_C__FIEventHandler_1_IInspectableWrapper(delegate as! __IMPL_test_component.__x_ABI_C__FIEventHandler_1_IInspectableImpl)
            let abi = try! wrapper.to_abi { $0 }
            let impl:__ABI_test_component.ISimpleStatics = try! impl.QueryInterface()
            delegate.token = try! impl.add_StaticEventImpl(abi)
        }

        func remove(delegate: any WinRTDelegate, for impl: test_component.IInspectable){
            let impl: __ABI_test_component.ISimpleStatics = try! impl.QueryInterface()
                if let token = delegate.token {
                try! impl.remove_StaticEventImpl(token)
            }
        }
    }
    public func Method() {
        try! _default.MethodImpl()
    }

    public func ReturnBlittableStruct() -> BlittableStruct {
        let result = try! _default.ReturnBlittableStructImpl()
        return .from(abi: result)
    }

    public func TakeBlittableStruct(_ value: BlittableStruct) {
        try! _default.TakeBlittableStructImpl(.from(swift: value))
    }

    public func ReturnNonBlittableStruct() -> NonBlittableStruct {
        let result = try! _default.ReturnNonBlittableStructImpl()
        return .from(abi: result)
    }

    public func TakeNonBlittableStruct(_ value: NonBlittableStruct) {
        let _value = __ABI_test_component._ABI_NonBlittableStruct(from: value)
        try! _default.TakeNonBlittableStructImpl(_value.val)
    }

    public func FireEvent() {
        try! _default.FireEventImpl()
    }

    public var BlittableStructProperty : BlittableStruct {
        get {
            let value = try! _default.get_BlittableStructPropertyImpl()
            return .from(abi: value)
        }

        set {
            try! _default.put_BlittableStructPropertyImpl(.from(swift: newValue))
        }
    }

    public var NonBlittableStructProperty : NonBlittableStruct {
        get {
            let value = try! _default.get_NonBlittableStructPropertyImpl()
            return .from(abi: value)
        }

        set {
            let _newValue = __ABI_test_component._ABI_NonBlittableStruct(from: newValue)
            try! _default.put_NonBlittableStructPropertyImpl(_newValue.val)
        }
    }

    public var StringProperty : String {
        get {
            let value = try! _default.get_StringPropertyImpl()
            return .init(from: value)
        }

        set {
            let _newValue = try! HString(newValue)
            try! _default.put_StringPropertyImpl(_newValue.get())
        }
    }

    private static let _InEventRegistrar = InEventRegistrar()
    public lazy var InEvent : Event<(String),()> = EventImpl<__IMPL_test_component_Delegates.InDelegateImpl>(register: Self._InEventRegistrar, owner:_default)
    private class InEventRegistrar : IEventRegistration {
        func add(delegate: any WinRTDelegate, for impl: test_component.IInspectable){
            let wrapper = __ABI_test_component_Delegates.InDelegateWrapper(delegate as! __IMPL_test_component_Delegates.InDelegateImpl)
            let abi = try! wrapper.to_abi { $0 }
            let impl:__ABI_test_component.ISimple = try! impl.QueryInterface()
            delegate.token = try! impl.add_InEventImpl(abi)
        }

        func remove(delegate: any WinRTDelegate, for impl: test_component.IInspectable){
            let impl: __ABI_test_component.ISimple = try! impl.QueryInterface()
                if let token = delegate.token {
                try! impl.remove_InEventImpl(token)
            }
        }
    }
    private static let _SignalEventRegistrar = SignalEventRegistrar()
    public lazy var SignalEvent : Event<(),()> = EventImpl<__IMPL_test_component_Delegates.SignalDelegateImpl>(register: Self._SignalEventRegistrar, owner:_default)
    private class SignalEventRegistrar : IEventRegistration {
        func add(delegate: any WinRTDelegate, for impl: test_component.IInspectable){
            let wrapper = __ABI_test_component_Delegates.SignalDelegateWrapper(delegate as! __IMPL_test_component_Delegates.SignalDelegateImpl)
            let abi = try! wrapper.to_abi { $0 }
            let impl:__ABI_test_component.ISimple = try! impl.QueryInterface()
            delegate.token = try! impl.add_SignalEventImpl(abi)
        }

        func remove(delegate: any WinRTDelegate, for impl: test_component.IInspectable){
            let impl: __ABI_test_component.ISimple = try! impl.QueryInterface()
                if let token = delegate.token {
                try! impl.remove_SignalEventImpl(token)
            }
        }
    }
    private static let _SimpleEventRegistrar = SimpleEventRegistrar()
    public lazy var SimpleEvent : Event<(Simple?, SimpleEventArgs),()> = EventImpl<__IMPL_test_component.__x_ABI_C__FITypedEventHandler_2___x_ABI_Ctest__zcomponent__CSimple___x_ABI_Ctest__zcomponent__CSimpleEventArgsImpl>(register: Self._SimpleEventRegistrar, owner:_default)
    private class SimpleEventRegistrar : IEventRegistration {
        func add(delegate: any WinRTDelegate, for impl: test_component.IInspectable){
            let wrapper = __ABI_test_component.__x_ABI_C__FITypedEventHandler_2___x_ABI_Ctest__zcomponent__CSimple___x_ABI_Ctest__zcomponent__CSimpleEventArgsWrapper(delegate as! __IMPL_test_component.__x_ABI_C__FITypedEventHandler_2___x_ABI_Ctest__zcomponent__CSimple___x_ABI_Ctest__zcomponent__CSimpleEventArgsImpl)
            let abi = try! wrapper.to_abi { $0 }
            let impl:__ABI_test_component.ISimple = try! impl.QueryInterface()
            delegate.token = try! impl.add_SimpleEventImpl(abi)
        }

        func remove(delegate: any WinRTDelegate, for impl: test_component.IInspectable){
            let impl: __ABI_test_component.ISimple = try! impl.QueryInterface()
                if let token = delegate.token {
                try! impl.remove_SimpleEventImpl(token)
            }
        }
    }
}

public final class StaticClass {
    private static let _IStaticClassStatics: __ABI_test_component.IStaticClassStatics = try! RoGetActivationFactory(HString("test_component.StaticClass"))
    public static func InEnum(_ value: Signed) -> String {
        let result = try! _IStaticClassStatics.InEnumImpl(value)
        return .init(from: result)
    }

    public static func InNonBlittableStruct(_ value: NonBlittableStruct) -> String {
        let _value = __ABI_test_component._ABI_NonBlittableStruct(from: value)
        let result = try! _IStaticClassStatics.InNonBlittableStructImpl(_value.val)
        return .init(from: result)
    }

    public static func TakeBase(_ base: Base?) {
        try! _IStaticClassStatics.TakeBaseImpl(RawPointer(base))
    }

    public static var EnumProperty : Fruit {
        get {
            let value = try! _IStaticClassStatics.get_EnumPropertyImpl()
            return value
        }

        set {
            try! _IStaticClassStatics.put_EnumPropertyImpl(newValue)
        }
    }

}

open class UnsealedDerived : test_component.Base {
    private typealias swift_ABI = __ABI_test_component.IUnsealedDerived
    private typealias c_ABI = __x_ABI_Ctest__component_CIUnsealedDerived
    private var _default: swift_ABI = .init(UnsafeMutableRawPointer.none)
    override open func _get_abi<T>() -> UnsafeMutablePointer<T>? {
        if T.self == c_ABI.self {
            return RawPointer(_default)
        }   
        if T.self == Ctest_component.IInspectable.self {
            return RawPointer(_default)
        }
        return super._get_abi()
    }

    public static func from(abi: UnsafeMutablePointer<__x_ABI_Ctest__component_CIUnsealedDerived>?) -> UnsealedDerived {
        UnsealedWinRTClassWrapper<Composable>.unwrap_from(base: abi!)
    }

    override public init(fromAbi: test_component.IInspectable) {
        _default = try! fromAbi.QueryInterface()
        super.init(fromAbi: fromAbi)
    }

    private static var _IUnsealedDerivedProtectedFactory : __ABI_test_component.IUnsealedDerivedProtectedFactory =  try! RoGetActivationFactory(HString("test_component.UnsealedDerived"))
    override public init() {
        super.init(Self._IUnsealedDerivedProtectedFactory) 
        let parentDefault: UnsafeMutablePointer<Ctest_component.IInspectable>? = super._get_abi()
        self._default = try! IInspectable(parentDefault).QueryInterface()
        _ = self._default.Release() // release to reset reference count since QI caused an AddRef on ourselves
    }

    override public init<Factory: ComposableActivationFactory>(_ factory: Factory) {
        super.init(factory)
        let parentDefault: UnsafeMutablePointer<Ctest_component.IInspectable>? = super._get_abi()
        self._default = try! IInspectable(parentDefault).QueryInterface()
        _ = self._default.Release() // release to reset reference count since QI caused an AddRef on ourselves
    }
    public var Prop : Int32 {
        get {
            let value = try! _default.get_PropImpl()
            return value
        }

        set {
            try! _default.put_PropImpl(newValue)
        }
    }

    internal lazy var _IUnsealedDerivedOverloads2: __ABI_test_component.IUnsealedDerivedOverloads2 = try! IUnknown(_inner).QueryInterface()
    open func OnAfterDoTheThing() {
        try! _IUnsealedDerivedOverloads2.OnAfterDoTheThingImpl()
    }

    internal class IUnsealedDerivedOverloads2 : ComposableImpl {
        internal typealias c_ABI = __x_ABI_Ctest__component_CIUnsealedDerivedOverloads2
        internal typealias swift_ABI = __ABI_test_component.IUnsealedDerivedOverloads2
        internal class Default : MakeComposedAbi {
            internal typealias swift_Projection = UnsealedDerived
            internal typealias c_ABI = __x_ABI_Ctest__component_CIUnsealedDerived
            internal typealias swift_ABI = __ABI_test_component.IUnsealedDerived
            internal static func from(abi: UnsafeMutableRawPointer?) -> swift_Projection {
                .init(fromAbi: .init(abi!))
            }
        }
    }
    internal typealias Composable = IUnsealedDerivedOverloads2
    override open class var _makeFromAbi : any MakeFromAbi.Type { Composable.Default.self }
    internal lazy var _IUnsealedDerivedOverrides: __ABI_test_component.IUnsealedDerivedOverrides = try! IUnknown(_inner).QueryInterface()
    open func OnBeforeDoTheThing() {
        try! _IUnsealedDerivedOverrides.OnBeforeDoTheThingImpl()
    }

    internal class IUnsealedDerivedOverrides : ComposableImpl {
        internal typealias c_ABI = __x_ABI_Ctest__component_CIUnsealedDerivedOverrides
        internal typealias swift_ABI = __ABI_test_component.IUnsealedDerivedOverrides
        internal class Default : MakeComposedAbi {
            internal typealias swift_Projection = UnsealedDerived
            internal typealias c_ABI = __x_ABI_Ctest__component_CIUnsealedDerived
            internal typealias swift_ABI = __ABI_test_component.IUnsealedDerived
            internal static func from(abi: UnsafeMutableRawPointer?) -> swift_Projection {
                .init(fromAbi: .init(abi!))
            }
        }
    }
}

open class UnsealedDerived2 : test_component.UnsealedDerived {
    private typealias swift_ABI = __ABI_test_component.IUnsealedDerived2
    private typealias c_ABI = __x_ABI_Ctest__component_CIUnsealedDerived2
    private var _default: swift_ABI = .init(UnsafeMutableRawPointer.none)
    override open func _get_abi<T>() -> UnsafeMutablePointer<T>? {
        if T.self == c_ABI.self {
            return RawPointer(_default)
        }   
        if T.self == Ctest_component.IInspectable.self {
            return RawPointer(_default)
        }
        return super._get_abi()
    }

    public static func from(abi: UnsafeMutablePointer<__x_ABI_Ctest__component_CIUnsealedDerived2>?) -> UnsealedDerived2 {
        UnsealedWinRTClassWrapper<Composable>.unwrap_from(base: abi!)
    }

    override public init(fromAbi: test_component.IInspectable) {
        _default = try! fromAbi.QueryInterface()
        super.init(fromAbi: fromAbi)
    }

    private static var _IUnsealedDerived2ProtectedFactory : __ABI_test_component.IUnsealedDerived2ProtectedFactory =  try! RoGetActivationFactory(HString("test_component.UnsealedDerived2"))
    override public init() {
        super.init(Self._IUnsealedDerived2ProtectedFactory) 
        let parentDefault: UnsafeMutablePointer<Ctest_component.IInspectable>? = super._get_abi()
        self._default = try! IInspectable(parentDefault).QueryInterface()
        _ = self._default.Release() // release to reset reference count since QI caused an AddRef on ourselves
    }

    override public init<Factory: ComposableActivationFactory>(_ factory: Factory) {
        super.init(factory)
        let parentDefault: UnsafeMutablePointer<Ctest_component.IInspectable>? = super._get_abi()
        self._default = try! IInspectable(parentDefault).QueryInterface()
        _ = self._default.Release() // release to reset reference count since QI caused an AddRef on ourselves
    }
    public func Method() {
        try! _default.MethodImpl()
    }

    internal class IUnsealedDerivedOverloads2 : ComposableImpl {
        internal typealias c_ABI = __x_ABI_Ctest__component_CIUnsealedDerivedOverloads2
        internal typealias swift_ABI = __ABI_test_component.IUnsealedDerivedOverloads2
        internal class Default : MakeComposedAbi {
            internal typealias swift_Projection = UnsealedDerived2
            internal typealias c_ABI = __x_ABI_Ctest__component_CIUnsealedDerived2
            internal typealias swift_ABI = __ABI_test_component.IUnsealedDerived2
            internal static func from(abi: UnsafeMutableRawPointer?) -> swift_Projection {
                .init(fromAbi: .init(abi!))
            }
        }
    }
    internal typealias Composable = IUnsealedDerivedOverloads2
    override open class var _makeFromAbi : any MakeFromAbi.Type { Composable.Default.self }
}

open class UnsealedDerivedNoOverrides : test_component.BaseNoOverrides {
    private typealias swift_ABI = __ABI_test_component.IUnsealedDerivedNoOverrides
    private typealias c_ABI = __x_ABI_Ctest__component_CIUnsealedDerivedNoOverrides
    private var _default: swift_ABI = .init(UnsafeMutableRawPointer.none)
    override open func _get_abi<T>() -> UnsafeMutablePointer<T>? {
        if T.self == c_ABI.self {
            return RawPointer(_default)
        }   
        if T.self == Ctest_component.IInspectable.self {
            return RawPointer(_default)
        }
        return super._get_abi()
    }

    public static func from(abi: UnsafeMutablePointer<__x_ABI_Ctest__component_CIUnsealedDerivedNoOverrides>?) -> UnsealedDerivedNoOverrides {
        UnsealedWinRTClassWrapper<Composable>.unwrap_from(base: abi!)
    }

    override public init(fromAbi: test_component.IInspectable) {
        _default = try! fromAbi.QueryInterface()
        super.init(fromAbi: fromAbi)
    }

    private static var _IUnsealedDerivedNoOverridesProtectedFactory : __ABI_test_component.IUnsealedDerivedNoOverridesProtectedFactory =  try! RoGetActivationFactory(HString("test_component.UnsealedDerivedNoOverrides"))
    override public init() {
        super.init(Self._IUnsealedDerivedNoOverridesProtectedFactory) 
        let parentDefault: UnsafeMutablePointer<Ctest_component.IInspectable>? = super._get_abi()
        self._default = try! IInspectable(parentDefault).QueryInterface()
        _ = self._default.Release() // release to reset reference count since QI caused an AddRef on ourselves
    }

    override public init<Factory: ComposableActivationFactory>(_ factory: Factory) {
        super.init(factory)
        let parentDefault: UnsafeMutablePointer<Ctest_component.IInspectable>? = super._get_abi()
        self._default = try! IInspectable(parentDefault).QueryInterface()
        _ = self._default.Release() // release to reset reference count since QI caused an AddRef on ourselves
    }
    internal class IUnsealedDerivedNoOverrides : ComposableImpl {
        internal typealias c_ABI = Ctest_component.IInspectable
        internal typealias swift_ABI = test_component.IInspectable
        internal class Default : MakeComposedAbi {
            internal typealias swift_Projection = UnsealedDerivedNoOverrides
            internal typealias c_ABI = __x_ABI_Ctest__component_CIUnsealedDerivedNoOverrides
            internal typealias swift_ABI = __ABI_test_component.IUnsealedDerivedNoOverrides
            internal static func from(abi: UnsafeMutableRawPointer?) -> swift_Projection {
                .init(fromAbi: .init(abi!))
            }
        }
    }
    internal typealias Composable = IUnsealedDerivedNoOverrides
    override open class var _makeFromAbi : any MakeFromAbi.Type { Composable.Default.self }
}

public typealias VoidToVoidDelegate = __IMPL_test_component.VoidToVoidDelegateImpl
public struct BlittableStruct {
    public var First: Int32 = 0
    public var Second: Int32 = 0
    public init() {}
    public init(First: Int32, Second: Int32) {
        self.First = First
        self.Second = Second
    }
    public static func from(abi: __x_ABI_Ctest__component_CBlittableStruct) -> BlittableStruct {
        .init(First: abi.First, Second: abi.Second)
    }
}

public struct NonBlittableBoolStruct {
    public var First: Bool = false
    public var Second: Bool = false
    public var Third: Bool = false
    public var Fourth: Bool = false
    public init() {}
    public init(First: Bool, Second: Bool, Third: Bool, Fourth: Bool) {
        self.First = First
        self.Second = Second
        self.Third = Third
        self.Fourth = Fourth
    }
    public static func from(abi: __x_ABI_Ctest__component_CNonBlittableBoolStruct) -> NonBlittableBoolStruct {
        .init(First: .init(from: abi.First), Second: .init(from: abi.Second), Third: .init(from: abi.Third), Fourth: .init(from: abi.Fourth))
    }
}

public struct NonBlittableStruct {
    public var First: String = ""
    public var Second: String = ""
    public var Third: Int32 = 0
    public var Fourth: String = ""
    public init() {}
    public init(First: String, Second: String, Third: Int32, Fourth: String) {
        self.First = First
        self.Second = Second
        self.Third = Third
        self.Fourth = Fourth
    }
    public static func from(abi: __x_ABI_Ctest__component_CNonBlittableStruct) -> NonBlittableStruct {
        .init(First: .init(from: abi.First), Second: .init(from: abi.Second), Third: abi.Third, Fourth: .init(from: abi.Fourth))
    }
}

public struct SimpleEventArgs {
    public var Value: Int32 = 0
    public init() {}
    public init(Value: Int32) {
        self.Value = Value
    }
    public static func from(abi: __x_ABI_Ctest__component_CSimpleEventArgs) -> SimpleEventArgs {
        .init(Value: abi.Value)
    }
}

public protocol IBasic : IWinRTObject { 
        func Method()
}
extension IBasic {
    public static var none: any IBasic {
        __IMPL_test_component.IBasicImpl(nil)
    }
}

public protocol IIAmImplementable : IWinRTObject { 
        func InInt32(_ value: Int32) -> String
        func InString(_ value: String) -> String
        func InEnum(_ value: test_component.Signed) -> String
        func OutInt32(_ value: inout Int32)
        func OutString(_ value: inout String)
        func OutBlittableStruct(_ value: inout test_component.BlittableStruct)
        func OutNonBlittableStruct(_ value: inout test_component.NonBlittableStruct)
        func OutEnum(_ value: inout test_component.Signed)
        func ReturnEnum() -> test_component.Signed
        func FireEvent()
        var EnumProperty: test_component.Fruit { get set }
        var ID: UUID? { get set }
}
extension IIAmImplementable {
    public static var none: any IIAmImplementable {
        __IMPL_test_component.IIAmImplementableImpl(nil)
    }
}

public protocol ISimpleDelegate : IWinRTObject { 
        func DoThis()
        func DoThat(_ val: Int32)
}
extension ISimpleDelegate {
    public static var none: any ISimpleDelegate {
        __IMPL_test_component.ISimpleDelegateImpl(nil)
    }
}

extension test_component.Fruit {
    public static var Banana : test_component.Fruit {
        __x_ABI_Ctest__component_CFruit_Banana
    }
    public static var Apple : test_component.Fruit {
        __x_ABI_Ctest__component_CFruit_Apple
    }
    public static var Orange : test_component.Fruit {
        __x_ABI_Ctest__component_CFruit_Orange
    }
    public static var Pineapple : test_component.Fruit {
        __x_ABI_Ctest__component_CFruit_Pineapple
    }
}

extension test_component.Signed {
    public static var First : test_component.Signed {
        __x_ABI_Ctest__component_CSigned_First
    }
    public static var Second : test_component.Signed {
        __x_ABI_Ctest__component_CSigned_Second
    }
    public static var Third : test_component.Signed {
        __x_ABI_Ctest__component_CSigned_Third
    }
}

extension test_component.Unsigned {
    public static var First : test_component.Unsigned {
        __x_ABI_Ctest__component_CUnsigned_First
    }
    public static var Second : test_component.Unsigned {
        __x_ABI_Ctest__component_CUnsigned_Second
    }
    public static var Third : test_component.Unsigned {
        __x_ABI_Ctest__component_CUnsigned_Third
    }
}

fileprivate extension Int32 {
    init?(ref: UnsafeMutablePointer<__x_ABI_C__FIReference_1_int>?) {
        guard let val = ref else { return nil }
        var result: INT32 = .init()
        try! CHECKED(val.pointee.lpVtbl.pointee.get_Value(val, &result))
        self = result
    }
} 
fileprivate extension UUID {
    init?(ref: UnsafeMutablePointer<__x_ABI_C__FIReference_1_GUID>?) {
        guard let val = ref else { return nil }
        var result: GUID = .init()
        try! CHECKED(val.pointee.lpVtbl.pointee.get_Value(val, &result))
        self = result
    }
} 

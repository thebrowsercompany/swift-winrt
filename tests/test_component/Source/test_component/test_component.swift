// WARNING: Please don't edit this file. It was generated by Swift/WinRT v0.0.1
import Ctest_component

public typealias Fruit = __x_ABI_Ctest__component_CFruit
public typealias Signed = __x_ABI_Ctest__component_CSigned
public typealias SwiftifiableNames = __x_ABI_Ctest__component_CSwiftifiableNames
public typealias Unsigned = __x_ABI_Ctest__component_CUnsigned
open class Base : UnsealedWinRTClass {
    private (set) public var _inner: UnsafeMutablePointer<Ctest_component.IInspectable>?
    private typealias SwiftABI = __ABI_test_component.IBase
    private typealias CABI = __x_ABI_Ctest__component_CIBase
    private var _default: SwiftABI!
    open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }   
        if T.self == Ctest_component.IInspectable.self {
            return RawPointer(_default)
        }
        return nil
    }

    public static func from(abi: UnsafeMutablePointer<__x_ABI_Ctest__component_CIBase>?) -> Base? {
        guard let abi = abi else { return nil }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    public init(fromAbi: test_component.IInspectable) {
        _default = try! fromAbi.QueryInterface()
    }

    private static var _IBaseProtectedFactory : __ABI_test_component.IBaseProtectedFactory =  try! RoGetActivationFactory(HString("test_component.Base"))
    public init() {
        self._default = MakeComposed(Self._IBaseProtectedFactory, &_inner, self)
    }

    public init<Factory: ComposableActivationFactory>(_ factory : Factory) {
        self._default = try! MakeComposed(factory, &_inner, self as! Factory.Composable.Default.SwiftProjection).QueryInterface()
        _ = self._default.Release() // release to reset reference count since QI caused an AddRef on ourselves
    }
    public func doTheThing() {
        try! _default.DoTheThingImpl()
    }

    internal lazy var _IBaseOverrides: __ABI_test_component.IBaseOverrides = try! IUnknown(_inner!).QueryInterface()
    open func onDoTheThing() {
        try! _IBaseOverrides.OnDoTheThingImpl()
    }

    internal class IBaseOverrides : ComposableImpl {
        internal typealias CABI = __x_ABI_Ctest__component_CIBaseOverrides
        internal typealias SwiftABI = __ABI_test_component.IBaseOverrides
        internal class Default : MakeComposedAbi {
            internal typealias SwiftProjection = Base
            internal typealias CABI = __x_ABI_Ctest__component_CIBase
            internal typealias SwiftABI = __ABI_test_component.IBase
            internal static func from(abi: UnsafeMutableRawPointer?) -> SwiftProjection? {
                guard let abi = abi else { return nil }
                return .init(fromAbi: .init(abi))
            }
        }
    }
    internal typealias Composable = IBaseOverrides
    open class var _makeFromAbi : any MakeFromAbi.Type { Composable.Default.self }
}

public final class BaseCollection : WinRTClass, IVector {
    public typealias Element = Base?
    private typealias SwiftABI = __ABI_test_component.IVectorBase
    private typealias CABI = __x_ABI_C__FIVector_1___x_ABI_Ctest__zcomponent__CBase
    private var _default: SwiftABI!
    public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }   
        if T.self == Ctest_component.IInspectable.self {
            return RawPointer(_default)
        }
        return nil
    }

    public static func from(abi: UnsafeMutablePointer<__x_ABI_C__FIVector_1___x_ABI_Ctest__zcomponent__CBase>?) -> BaseCollection? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: .init(abi))
    }

    public init(fromAbi: test_component.IInspectable) {
        _default = try! fromAbi.QueryInterface()
    }

    // MARK: Collection
    public var startIndex: Int { 0 }
    public var endIndex: Int { Int(size) }
    public func index(after i: Int) -> Int {
        i+1
    }

    public func index(of: Element) -> Int? { 
        var index: UInt32 = 0
        let result = indexOf(of, &index)
        guard result else { return nil }
        return Int(index)
    }
    public var count: Int { Int(size) }


    public subscript(position: Int) -> Element {
        get {
            getAt(UInt32(position))
        }
        set(newValue) {
            setAt(UInt32(position), newValue)
        }
    }

    public func removeLast() {
        removeAtEnd()
    }

    // MARK: WinRT
    public func getAt(_ index: UInt32) -> Base? {
        let result = try! _default.GetAtImpl(index)
        return .from(abi: result)
    }

    public func getView() -> (any IVectorView<Base?>)? {
        let result = try! _default.GetViewImpl()
        return __ABI_test_component.__x_ABI_C__FIVectorView_1___x_ABI_Ctest__zcomponent__CBaseWrapper.unwrapFrom(abi: result)
    }

    public func indexOf(_ value: Base?, _ index: inout UInt32) -> Bool {
        let result = try! _default.IndexOfImpl(RawPointer(value), &index)
        return .init(from: result)
    }

    public func setAt(_ index: UInt32, _ value: Base?) {
        try! _default.SetAtImpl(index, RawPointer(value))
    }

    public func insertAt(_ index: UInt32, _ value: Base?) {
        try! _default.InsertAtImpl(index, RawPointer(value))
    }

    public func removeAt(_ index: UInt32) {
        try! _default.RemoveAtImpl(index)
    }

    public func append(_ value: Base?) {
        try! _default.AppendImpl(RawPointer(value))
    }

    public func removeAtEnd() {
        try! _default.RemoveAtEndImpl()
    }

    public func clear() {
        try! _default.ClearImpl()
    }

    public var size : UInt32 {
        get {
            let result = try! _default.get_SizeImpl()
            return result
        }

    }

}

public final class BaseMapCollection : WinRTClass, IMap {
    public typealias Key = String
    public typealias Value = Base?
    private typealias SwiftABI = __ABI_test_component.IMapString_Base
    private typealias CABI = __x_ABI_C__FIMap_2_HSTRING___x_ABI_Ctest__zcomponent__CBase
    private var _default: SwiftABI!
    public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }   
        if T.self == Ctest_component.IInspectable.self {
            return RawPointer(_default)
        }
        return nil
    }

    public static func from(abi: UnsafeMutablePointer<__x_ABI_C__FIMap_2_HSTRING___x_ABI_Ctest__zcomponent__CBase>?) -> BaseMapCollection? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: .init(abi))
    }

    public init(fromAbi: test_component.IInspectable) {
        _default = try! fromAbi.QueryInterface()
    }

    // MARK: WinRT
    public func lookup(_ key: String) -> Base? {
        let _key = try! HString(key)
        let result = try! _default.LookupImpl(_key.get())
        return .from(abi: result)
    }

    public func hasKey(_ key: String) -> Bool {
        let _key = try! HString(key)
        let result = try! _default.HasKeyImpl(_key.get())
        return .init(from: result)
    }

    public func getView() -> (any IMapView<String, Base?>)? {
        let result = try! _default.GetViewImpl()
        return __ABI_test_component.__x_ABI_C__FIMapView_2_HSTRING___x_ABI_Ctest__zcomponent__CBaseWrapper.unwrapFrom(abi: result)
    }

    public func insert(_ key: String, _ value: Base?) -> Bool {
        let _key = try! HString(key)
        let result = try! _default.InsertImpl(_key.get(), RawPointer(value))
        return .init(from: result)
    }

    public func remove(_ key: String) {
        let _key = try! HString(key)
        try! _default.RemoveImpl(_key.get())
    }

    public func clear() {
        try! _default.ClearImpl()
    }

    public var size : UInt32 {
        get {
            let result = try! _default.get_SizeImpl()
            return result
        }

    }

}

open class BaseNoOverrides : UnsealedWinRTClass {
    private (set) public var _inner: UnsafeMutablePointer<Ctest_component.IInspectable>?
    private typealias SwiftABI = __ABI_test_component.IBaseNoOverrides
    private typealias CABI = __x_ABI_Ctest__component_CIBaseNoOverrides
    private var _default: SwiftABI!
    open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }   
        if T.self == Ctest_component.IInspectable.self {
            return RawPointer(_default)
        }
        return nil
    }

    public static func from(abi: UnsafeMutablePointer<__x_ABI_Ctest__component_CIBaseNoOverrides>?) -> BaseNoOverrides? {
        guard let abi = abi else { return nil }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    public init(fromAbi: test_component.IInspectable) {
        _default = try! fromAbi.QueryInterface()
    }

    private static var _IBaseNoOverridesProtectedFactory : __ABI_test_component.IBaseNoOverridesProtectedFactory =  try! RoGetActivationFactory(HString("test_component.BaseNoOverrides"))
    public init() {
        self._default = MakeComposed(Self._IBaseNoOverridesProtectedFactory, &_inner, self)
    }

    public init<Factory: ComposableActivationFactory>(_ factory : Factory) {
        self._default = try! MakeComposed(factory, &_inner, self as! Factory.Composable.Default.SwiftProjection).QueryInterface()
        _ = self._default.Release() // release to reset reference count since QI caused an AddRef on ourselves
    }
    internal class IBaseNoOverrides : ComposableImpl {
        internal typealias CABI = Ctest_component.IInspectable
        internal typealias SwiftABI = test_component.IInspectable
        internal class Default : MakeComposedAbi {
            internal typealias SwiftProjection = BaseNoOverrides
            internal typealias CABI = __x_ABI_Ctest__component_CIBaseNoOverrides
            internal typealias SwiftABI = __ABI_test_component.IBaseNoOverrides
            internal static func from(abi: UnsafeMutableRawPointer?) -> SwiftProjection? {
                guard let abi = abi else { return nil }
                return .init(fromAbi: .init(abi))
            }
        }
    }
    internal typealias Composable = IBaseNoOverrides
    open class var _makeFromAbi : any MakeFromAbi.Type { Composable.Default.self }
}

public final class Class : WinRTClass, IBasic {
    private typealias SwiftABI = __ABI_test_component.IClass
    private typealias CABI = __x_ABI_Ctest__component_CIClass
    private var _default: SwiftABI!
    public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }   
        if T.self == Ctest_component.IInspectable.self {
            return RawPointer(_default)
        }
        return nil
    }

    public static func from(abi: UnsafeMutablePointer<__x_ABI_Ctest__component_CIClass>?) -> Class? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: .init(abi))
    }

    public init(fromAbi: test_component.IInspectable) {
        _default = try! fromAbi.QueryInterface()
    }

    public init() {
        try! _default = RoActivateInstance(HString("test_component.Class"))
    }

    private static let _IClassFactory: __ABI_test_component.IClassFactory = try! RoGetActivationFactory(HString("test_component.Class"))
    public init(_ name: String) {
        let _name = try! HString(name)
        let value = try! Self._IClassFactory.CreateInstanceImpl(_name.get())
        _default = __ABI_test_component.IClass(consuming: value!)
    }

    public init(_ name: String, _ fruit: Fruit) {
        let _name = try! HString(name)
        let value = try! Self._IClassFactory.CreateInstance2Impl(_name.get(), fruit)
        _default = __ABI_test_component.IClass(consuming: value!)
    }

    public init(_ arg: (any IMap<String, String>)!, _ dummy1: Int32, _ dummy2: Int32, _ dummy3: Int32) {
        let argWrapper = __ABI_test_component.__x_ABI_C__FIMap_2_HSTRING_HSTRINGWrapper(arg)
        let _arg = try! argWrapper?.toABI { $0 }
        let value = try! Self._IClassFactory.CreateInstance3Impl(_arg, dummy1, dummy2, dummy3)
        _default = __ABI_test_component.IClass(consuming: value!)
    }

    public init(_ arg: (any IMapView<String, String>)!, _ dummy1: Int32, _ dummy2: Int32, _ dummy3: Int32, _ dummy4: Int32) {
        let argWrapper = __ABI_test_component.__x_ABI_C__FIMapView_2_HSTRING_HSTRINGWrapper(arg)
        let _arg = try! argWrapper?.toABI { $0 }
        let value = try! Self._IClassFactory.CreateInstance4Impl(_arg, dummy1, dummy2, dummy3, dummy4)
        _default = __ABI_test_component.IClass(consuming: value!)
    }

    public init(_ arg: (any IVector<String>)!, _ dummy1: Int32, _ dummy2: Int32, _ dummy3: Int32, _ dummy4: Int32, _ dummy5: Int32) {
        let argWrapper = __ABI_test_component.__x_ABI_C__FIVector_1_HSTRINGWrapper(arg)
        let _arg = try! argWrapper?.toABI { $0 }
        let value = try! Self._IClassFactory.CreateInstance5Impl(_arg, dummy1, dummy2, dummy3, dummy4, dummy5)
        _default = __ABI_test_component.IClass(consuming: value!)
    }

    public init(_ arg: (any IVectorView<String>)!, _ dummy1: Int32, _ dummy2: Int32, _ dummy3: Int32, _ dummy4: Int32, _ dummy5: Int32, _ dummy6: Int32) {
        let argWrapper = __ABI_test_component.__x_ABI_C__FIVectorView_1_HSTRINGWrapper(arg)
        let _arg = try! argWrapper?.toABI { $0 }
        let value = try! Self._IClassFactory.CreateInstance6Impl(_arg, dummy1, dummy2, dummy3, dummy4, dummy5, dummy6)
        _default = __ABI_test_component.IClass(consuming: value!)
    }

    private static let _IClassFactory2: __ABI_test_component.IClassFactory2 = try! RoGetActivationFactory(HString("test_component.Class"))
    public init(_ name: String, _ fruit: Fruit, _ implementation: (any IIAmImplementable)!) {
        let _name = try! HString(name)
        let implementationWrapper = __ABI_test_component.IIAmImplementableWrapper(implementation)
        let _implementation = try! implementationWrapper?.toABI { $0 }
        let value = try! Self._IClassFactory2.CreateInstanceImpl(_name.get(), fruit, _implementation)
        _default = __ABI_test_component.IClass(consuming: value!)
    }

    private static let _IClassStatics: __ABI_test_component.IClassStatics = try! RoGetActivationFactory(HString("test_component.Class"))
    public static func staticTest() {
        try! _IClassStatics.StaticTestImpl()
    }

    public static func staticTestReturn() -> Int32 {
        let result = try! _IClassStatics.StaticTestReturnImpl()
        return result
    }

    public static func inMap(_ value: (any IMap<String, String>)!) -> String {
        let valueWrapper = __ABI_test_component.__x_ABI_C__FIMap_2_HSTRING_HSTRINGWrapper(value)
        let _value = try! valueWrapper?.toABI { $0 }
        let result = try! _IClassStatics.InMapImpl(_value)
        return .init(from: result)
    }

    public static func inMapView(_ value: (any IMapView<String, String>)!) -> String {
        let valueWrapper = __ABI_test_component.__x_ABI_C__FIMapView_2_HSTRING_HSTRINGWrapper(value)
        let _value = try! valueWrapper?.toABI { $0 }
        let result = try! _IClassStatics.InMapViewImpl(_value)
        return .init(from: result)
    }

    public static func inVector(_ value: (any IVector<String>)!) -> String {
        let valueWrapper = __ABI_test_component.__x_ABI_C__FIVector_1_HSTRINGWrapper(value)
        let _value = try! valueWrapper?.toABI { $0 }
        let result = try! _IClassStatics.InVectorImpl(_value)
        return .init(from: result)
    }

    public static func inVectorView(_ value: (any IVectorView<String>)!) -> String {
        let valueWrapper = __ABI_test_component.__x_ABI_C__FIVectorView_1_HSTRINGWrapper(value)
        let _value = try! valueWrapper?.toABI { $0 }
        let result = try! _IClassStatics.InVectorViewImpl(_value)
        return .init(from: result)
    }

    public static var staticProperty : Int32 {
        get {
            let value = try! _IClassStatics.get_StaticPropertyImpl()
            return value
        }

    }

    private static let _IClassStatics2: __ABI_test_component.IClassStatics2 = try! RoGetActivationFactory(HString("test_component.Class"))
    public static func staticTestReturnFloat() -> Float {
        let result = try! _IClassStatics2.StaticTestReturnFloatImpl()
        return result
    }

    public static var staticPropertyFloat : Float {
        get {
            let value = try! _IClassStatics2.get_StaticPropertyFloatImpl()
            return value
        }

        set {
            try! _IClassStatics2.put_StaticPropertyFloatImpl(newValue)
        }
    }

    public func setDelegate(_ value: (any ISimpleDelegate)!) {
        let valueWrapper = __ABI_test_component.ISimpleDelegateWrapper(value)
        let _value = try! valueWrapper?.toABI { $0 }
        try! _default.SetDelegateImpl(_value)
    }

    public func getDelegate() -> (any ISimpleDelegate)! {
        let result = try! _default.GetDelegateImpl()
        return __ABI_test_component.ISimpleDelegateWrapper.unwrapFrom(abi: result)
    }

    public func inInt32(_ value: Int32) -> String {
        let result = try! _default.InInt32Impl(value)
        return .init(from: result)
    }

    public func inString(_ value: String) -> String {
        let _value = try! HString(value)
        let result = try! _default.InStringImpl(_value.get())
        return .init(from: result)
    }

    public func inEnum(_ value: Signed) -> String {
        let result = try! _default.InEnumImpl(value)
        return .init(from: result)
    }

    public func outInt32(_ value: inout Int32) {
        try! _default.OutInt32Impl(&value)
    }

    public func outString(_ value: inout String) {
        var _value: HSTRING?
        try! _default.OutStringImpl(&_value)
        value = .init(from: _value)
        WindowsDeleteString(_value)
    }

    public func outBlittableStruct(_ value: inout BlittableStruct) {
        var _value: __x_ABI_Ctest__component_CBlittableStruct = .init()
        try! _default.OutBlittableStructImpl(&_value)
        value = .from(abi: _value)
    }

    public func outNonBlittableStruct(_ value: inout NonBlittableStruct) {
        let _value: __ABI_test_component._ABI_NonBlittableStruct = .init()
        try! _default.OutNonBlittableStructImpl(&_value.val)
        value = .from(abi: _value.val)
    }

    public func outEnum(_ value: inout Signed) {
        try! _default.OutEnumImpl(&value)
    }

    public func returnEnum() -> Signed {
        let result = try! _default.ReturnEnumImpl()
        return result
    }

    public func returnStoredStringVector() -> (any IVector<String>)! {
        let result = try! _default.ReturnStoredStringVectorImpl()
        return __ABI_test_component.__x_ABI_C__FIVector_1_HSTRINGWrapper.unwrapFrom(abi: result)
    }

    public func returnMapFromStringToString() -> (any IMap<String, String>)! {
        let result = try! _default.ReturnMapFromStringToStringImpl()
        return __ABI_test_component.__x_ABI_C__FIMap_2_HSTRING_HSTRINGWrapper.unwrapFrom(abi: result)
    }

    public func returnChar() -> Character {
        let result = try! _default.ReturnCharImpl()
        return .init(from: result)
    }

    public func inChar(_ value: Character) -> String {
        let result = try! _default.InCharImpl(.init(from: value))
        return .init(from: result)
    }

    public func outChar(_ value: inout Character) {
        var _value: WCHAR = .init()
        try! _default.OutCharImpl(&_value)
        value = .init(from: _value)
    }

    public var baseNoOverridesProperty : BaseNoOverrides! {
        get {
            let value = try! _default.get_BaseNoOverridesPropertyImpl()
            return .from(abi: value)
        }

        set {
            try! _default.put_BaseNoOverridesPropertyImpl(RawPointer(newValue))
        }
    }

    public var baseProperty : Base! {
        get {
            let value = try! _default.get_BasePropertyImpl()
            return .from(abi: value)
        }

        set {
            try! _default.put_BasePropertyImpl(RawPointer(newValue))
        }
    }

    public var enumProperty : Fruit {
        get {
            let value = try! _default.get_EnumPropertyImpl()
            return value
        }

        set {
            try! _default.put_EnumPropertyImpl(newValue)
        }
    }

    public var id : UUID? {
        get {
            let value = try! _default.get_IdImpl()
            return .init(ref: value)
        }

        set {
            let wrapper = __ABI_test_component.__x_ABI_C__FIReference_1_GUIDWrapper(newValue)
            let _newValue = try! wrapper?.toABI { $0 }
            try! _default.put_IdImpl(_newValue)
        }
    }

    public var implementation : (any IBasic)! {
        get {
            let value = try! _default.get_ImplementationImpl()
            return __ABI_test_component.IBasicWrapper.unwrapFrom(abi: value)
        }

        set {
            let wrapper = __ABI_test_component.IBasicWrapper(newValue)
            let _newValue = try! wrapper?.toABI { $0 }
            try! _default.put_ImplementationImpl(_newValue)
        }
    }

    public var startValue : Int32? {
        get {
            let value = try! _default.get_StartValueImpl()
            return .init(ref: value)
        }

        set {
            let wrapper = __ABI_test_component.__x_ABI_C__FIReference_1_intWrapper(newValue)
            let _newValue = try! wrapper?.toABI { $0 }
            try! _default.put_StartValueImpl(_newValue)
        }
    }

    internal lazy var _IBasic: __ABI_test_component.IBasic = try! _default.QueryInterface()
    public func method() {
        try! _IBasic.MethodImpl()
    }

}

public final class Derived : test_component.Base {
    private typealias SwiftABI = __ABI_test_component.IDerived
    private typealias CABI = __x_ABI_Ctest__component_CIDerived
    private var _default: SwiftABI!
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }   
        if T.self == Ctest_component.IInspectable.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    public static func from(abi: UnsafeMutablePointer<__x_ABI_Ctest__component_CIDerived>?) -> Derived? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: .init(abi))
    }

    override public init(fromAbi: test_component.IInspectable) {
        _default = try! fromAbi.QueryInterface()
        super.init(fromAbi: fromAbi)
    }

    override public init() {
        try! _default = RoActivateInstance(HString("test_component.Derived"))
        super.init(fromAbi: try! _default.QueryInterface())
    }

    public var prop : Int32 {
        get {
            let value = try! _default.get_PropImpl()
            return value
        }

        set {
            try! _default.put_PropImpl(newValue)
        }
    }

    internal class IBaseOverrides : ComposableImpl {
        internal typealias CABI = __x_ABI_Ctest__component_CIBaseOverrides
        internal typealias SwiftABI = __ABI_test_component.IBaseOverrides
        internal class Default : MakeComposedAbi {
            internal typealias SwiftProjection = Derived
            internal typealias CABI = __x_ABI_Ctest__component_CIDerived
            internal typealias SwiftABI = __ABI_test_component.IDerived
            internal static func from(abi: UnsafeMutableRawPointer?) -> SwiftProjection? {
                guard let abi = abi else { return nil }
                return .init(fromAbi: .init(abi))
            }
        }
    }
    internal typealias Composable = IBaseOverrides
    override public class var _makeFromAbi : any MakeFromAbi.Type { Composable.Default.self }
}

public final class NoopClosable : WinRTClass, test_component.IClosable {
    private typealias SwiftABI = __ABI_Windows_Foundation.IClosable
    private typealias CABI = __x_ABI_CWindows_CFoundation_CIClosable
    private var _default: SwiftABI!
    public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }   
        if T.self == Ctest_component.IInspectable.self {
            return RawPointer(_default)
        }
        return nil
    }

    public static func from(abi: UnsafeMutablePointer<__x_ABI_CWindows_CFoundation_CIClosable>?) -> NoopClosable? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: .init(abi))
    }

    public init(fromAbi: test_component.IInspectable) {
        _default = try! fromAbi.QueryInterface()
    }

    public init() {
        try! _default = RoActivateInstance(HString("test_component.NoopClosable"))
    }

    public func close() {
        try! _default.CloseImpl()
    }

}

public final class NullValues {
    private static let _INullValuesStatics: __ABI_test_component.INullValuesStatics = try! RoGetActivationFactory(HString("test_component.NullValues"))
    public static func isObjectNull(_ value: test_component.IInspectable!) -> Bool {
        let result = try! _INullValuesStatics.IsObjectNullImpl(RawPointer(value))
        return .init(from: result)
    }

    public static func isInterfaceNull(_ value: (any test_component.IClosable)!) -> Bool {
        let valueWrapper = __ABI_Windows_Foundation.IClosableWrapper(value)
        let _value = try! valueWrapper?.toABI { $0 }
        let result = try! _INullValuesStatics.IsInterfaceNullImpl(_value)
        return .init(from: result)
    }

    public static func isGenericInterfaceNull(_ value: (any IVector<String>)!) -> Bool {
        let valueWrapper = __ABI_test_component.__x_ABI_C__FIVector_1_HSTRINGWrapper(value)
        let _value = try! valueWrapper?.toABI { $0 }
        let result = try! _INullValuesStatics.IsGenericInterfaceNullImpl(_value)
        return .init(from: result)
    }

    public static func isClassNull(_ value: NoopClosable!) -> Bool {
        let result = try! _INullValuesStatics.IsClassNullImpl(RawPointer(value))
        return .init(from: result)
    }

    public static func isDelegateNull(_ value: VoidToVoidDelegate!) -> Bool {
        let valueWrapper = __ABI_test_component.VoidToVoidDelegateWrapper(value)
        let _value = try! valueWrapper?.toABI { $0 }
        let result = try! _INullValuesStatics.IsDelegateNullImpl(_value)
        return .init(from: result)
    }

    public static func getNullObject() -> test_component.IInspectable! {
        let result = try! _INullValuesStatics.GetNullObjectImpl()
        return .from(result)
    }

    public static func getNullInterface() -> (any test_component.IClosable)! {
        let result = try! _INullValuesStatics.GetNullInterfaceImpl()
        return __ABI_Windows_Foundation.IClosableWrapper.unwrapFrom(abi: result)
    }

    public static func getNullGenericInterface() -> (any IVector<String>)! {
        let result = try! _INullValuesStatics.GetNullGenericInterfaceImpl()
        return __ABI_test_component.__x_ABI_C__FIVector_1_HSTRINGWrapper.unwrapFrom(abi: result)
    }

    public static func getNullClass() -> NoopClosable! {
        let result = try! _INullValuesStatics.GetNullClassImpl()
        return .from(abi: result)
    }

    public static func getNullDelegate() -> VoidToVoidDelegate! {
        let result = try! _INullValuesStatics.GetNullDelegateImpl()
        let _result = __ABI_test_component.VoidToVoidDelegateWrapper.tryUnwrapFrom(abi: result)
        return _result
    }

}

public final class Simple : WinRTClass {
    private typealias SwiftABI = __ABI_test_component.ISimple
    private typealias CABI = __x_ABI_Ctest__component_CISimple
    private var _default: SwiftABI!
    public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }   
        if T.self == Ctest_component.IInspectable.self {
            return RawPointer(_default)
        }
        return nil
    }

    public static func from(abi: UnsafeMutablePointer<__x_ABI_Ctest__component_CISimple>?) -> Simple? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: .init(abi))
    }

    public init(fromAbi: test_component.IInspectable) {
        _default = try! fromAbi.QueryInterface()
    }

    public init() {
        try! _default = RoActivateInstance(HString("test_component.Simple"))
    }

    private static let _ISimpleStatics: __ABI_test_component.ISimpleStatics = try! RoGetActivationFactory(HString("test_component.Simple"))
    public static func fireStaticEvent() {
        try! _ISimpleStatics.FireStaticEventImpl()
    }

    private static let _StaticEventRegistrar = StaticEventRegistrar()
    public static var staticEvent : Event<(test_component.IInspectable?, test_component.IInspectable?),()> = EventImpl<__IMPL_test_component.__x_ABI_C__FIEventHandler_1_IInspectableImpl>(register: _StaticEventRegistrar, owner:_ISimpleStatics)
    private class StaticEventRegistrar : IEventRegistration {
        func add(delegate: any WinRTDelegate, for impl: test_component.IInspectable){
            let wrapper = __ABI_test_component.__x_ABI_C__FIEventHandler_1_IInspectableWrapper(delegate as? __IMPL_test_component.__x_ABI_C__FIEventHandler_1_IInspectableImpl)
            let abi = try! wrapper?.toABI { $0 }
            let impl:__ABI_test_component.ISimpleStatics = try! impl.QueryInterface()
            delegate.token = try! impl.add_StaticEventImpl(abi)
        }

        func remove(delegate: any WinRTDelegate, for impl: test_component.IInspectable){
            let impl: __ABI_test_component.ISimpleStatics = try! impl.QueryInterface()
                if let token = delegate.token {
                try! impl.remove_StaticEventImpl(token)
            }
        }
    }
    public func method() {
        try! _default.MethodImpl()
    }

    public func returnBlittableStruct() -> BlittableStruct {
        let result = try! _default.ReturnBlittableStructImpl()
        return .from(abi: result)
    }

    public func takeBlittableStruct(_ value: BlittableStruct) {
        try! _default.TakeBlittableStructImpl(.from(swift: value))
    }

    public func returnNonBlittableStruct() -> NonBlittableStruct {
        let result = try! _default.ReturnNonBlittableStructImpl()
        return .from(abi: result)
    }

    public func takeNonBlittableStruct(_ value: NonBlittableStruct) {
        let _value = __ABI_test_component._ABI_NonBlittableStruct(from: value)
        try! _default.TakeNonBlittableStructImpl(_value.val)
    }

    public func fireEvent() {
        try! _default.FireEventImpl()
    }

    public var blittableStructProperty : BlittableStruct {
        get {
            let value = try! _default.get_BlittableStructPropertyImpl()
            return .from(abi: value)
        }

        set {
            try! _default.put_BlittableStructPropertyImpl(.from(swift: newValue))
        }
    }

    public var nonBlittableStructProperty : NonBlittableStruct {
        get {
            let value = try! _default.get_NonBlittableStructPropertyImpl()
            return .from(abi: value)
        }

        set {
            let _newValue = __ABI_test_component._ABI_NonBlittableStruct(from: newValue)
            try! _default.put_NonBlittableStructPropertyImpl(_newValue.val)
        }
    }

    public var stringProperty : String {
        get {
            let value = try! _default.get_StringPropertyImpl()
            return .init(from: value)
        }

        set {
            let _newValue = try! HString(newValue)
            try! _default.put_StringPropertyImpl(_newValue.get())
        }
    }

    private static let _InEventRegistrar = InEventRegistrar()
    public lazy var inEvent : Event<(String),()> = EventImpl<__IMPL_test_component_Delegates.InDelegateImpl>(register: Self._InEventRegistrar, owner:_default)
    private class InEventRegistrar : IEventRegistration {
        func add(delegate: any WinRTDelegate, for impl: test_component.IInspectable){
            let wrapper = __ABI_test_component_Delegates.InDelegateWrapper(delegate as? __IMPL_test_component_Delegates.InDelegateImpl)
            let abi = try! wrapper?.toABI { $0 }
            let impl:__ABI_test_component.ISimple = try! impl.QueryInterface()
            delegate.token = try! impl.add_InEventImpl(abi)
        }

        func remove(delegate: any WinRTDelegate, for impl: test_component.IInspectable){
            let impl: __ABI_test_component.ISimple = try! impl.QueryInterface()
                if let token = delegate.token {
                try! impl.remove_InEventImpl(token)
            }
        }
    }
    private static let _SignalEventRegistrar = SignalEventRegistrar()
    public lazy var signalEvent : Event<(),()> = EventImpl<__IMPL_test_component_Delegates.SignalDelegateImpl>(register: Self._SignalEventRegistrar, owner:_default)
    private class SignalEventRegistrar : IEventRegistration {
        func add(delegate: any WinRTDelegate, for impl: test_component.IInspectable){
            let wrapper = __ABI_test_component_Delegates.SignalDelegateWrapper(delegate as? __IMPL_test_component_Delegates.SignalDelegateImpl)
            let abi = try! wrapper?.toABI { $0 }
            let impl:__ABI_test_component.ISimple = try! impl.QueryInterface()
            delegate.token = try! impl.add_SignalEventImpl(abi)
        }

        func remove(delegate: any WinRTDelegate, for impl: test_component.IInspectable){
            let impl: __ABI_test_component.ISimple = try! impl.QueryInterface()
                if let token = delegate.token {
                try! impl.remove_SignalEventImpl(token)
            }
        }
    }
    private static let _SimpleEventRegistrar = SimpleEventRegistrar()
    public lazy var simpleEvent : Event<(Simple?, SimpleEventArgs),()> = EventImpl<__IMPL_test_component.__x_ABI_C__FITypedEventHandler_2___x_ABI_Ctest__zcomponent__CSimple___x_ABI_Ctest__zcomponent__CSimpleEventArgsImpl>(register: Self._SimpleEventRegistrar, owner:_default)
    private class SimpleEventRegistrar : IEventRegistration {
        func add(delegate: any WinRTDelegate, for impl: test_component.IInspectable){
            let wrapper = __ABI_test_component.__x_ABI_C__FITypedEventHandler_2___x_ABI_Ctest__zcomponent__CSimple___x_ABI_Ctest__zcomponent__CSimpleEventArgsWrapper(delegate as? __IMPL_test_component.__x_ABI_C__FITypedEventHandler_2___x_ABI_Ctest__zcomponent__CSimple___x_ABI_Ctest__zcomponent__CSimpleEventArgsImpl)
            let abi = try! wrapper?.toABI { $0 }
            let impl:__ABI_test_component.ISimple = try! impl.QueryInterface()
            delegate.token = try! impl.add_SimpleEventImpl(abi)
        }

        func remove(delegate: any WinRTDelegate, for impl: test_component.IInspectable){
            let impl: __ABI_test_component.ISimple = try! impl.QueryInterface()
                if let token = delegate.token {
                try! impl.remove_SimpleEventImpl(token)
            }
        }
    }
}

public final class StaticClass {
    private static let _IStaticClassStatics: __ABI_test_component.IStaticClassStatics = try! RoGetActivationFactory(HString("test_component.StaticClass"))
    public static func inEnum(_ value: Signed) -> String {
        let result = try! _IStaticClassStatics.InEnumImpl(value)
        return .init(from: result)
    }

    public static func inNonBlittableStruct(_ value: NonBlittableStruct) -> String {
        let _value = __ABI_test_component._ABI_NonBlittableStruct(from: value)
        let result = try! _IStaticClassStatics.InNonBlittableStructImpl(_value.val)
        return .init(from: result)
    }

    public static func takeBase(_ base: Base!) {
        try! _IStaticClassStatics.TakeBaseImpl(RawPointer(base))
    }

    public static var enumProperty : Fruit {
        get {
            let value = try! _IStaticClassStatics.get_EnumPropertyImpl()
            return value
        }

        set {
            try! _IStaticClassStatics.put_EnumPropertyImpl(newValue)
        }
    }

}

open class UnsealedDerived : test_component.Base {
    private typealias SwiftABI = __ABI_test_component.IUnsealedDerived
    private typealias CABI = __x_ABI_Ctest__component_CIUnsealedDerived
    private var _default: SwiftABI!
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }   
        if T.self == Ctest_component.IInspectable.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    public static func from(abi: UnsafeMutablePointer<__x_ABI_Ctest__component_CIUnsealedDerived>?) -> UnsealedDerived? {
        guard let abi = abi else { return nil }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    override public init(fromAbi: test_component.IInspectable) {
        _default = try! fromAbi.QueryInterface()
        super.init(fromAbi: fromAbi)
    }

    private static var _IUnsealedDerivedProtectedFactory : __ABI_test_component.IUnsealedDerivedProtectedFactory =  try! RoGetActivationFactory(HString("test_component.UnsealedDerived"))
    override public init() {
        super.init(Self._IUnsealedDerivedProtectedFactory) 
        let parentDefault: UnsafeMutablePointer<Ctest_component.IInspectable> = super._getABI()!
        self._default = try! IInspectable(parentDefault).QueryInterface()
        _ = self._default.Release() // release to reset reference count since QI caused an AddRef on ourselves
    }

    override public init<Factory: ComposableActivationFactory>(_ factory: Factory) {
        super.init(factory)
        let parentDefault: UnsafeMutablePointer<Ctest_component.IInspectable> = super._getABI()!
        self._default = try! IInspectable(parentDefault).QueryInterface()
        _ = self._default.Release() // release to reset reference count since QI caused an AddRef on ourselves
    }
    public var prop : Int32 {
        get {
            let value = try! _default.get_PropImpl()
            return value
        }

        set {
            try! _default.put_PropImpl(newValue)
        }
    }

    internal lazy var _IUnsealedDerivedOverloads2: __ABI_test_component.IUnsealedDerivedOverloads2 = try! IUnknown(_inner!).QueryInterface()
    open func onAfterDoTheThing() {
        try! _IUnsealedDerivedOverloads2.OnAfterDoTheThingImpl()
    }

    internal class IUnsealedDerivedOverloads2 : ComposableImpl {
        internal typealias CABI = __x_ABI_Ctest__component_CIUnsealedDerivedOverloads2
        internal typealias SwiftABI = __ABI_test_component.IUnsealedDerivedOverloads2
        internal class Default : MakeComposedAbi {
            internal typealias SwiftProjection = UnsealedDerived
            internal typealias CABI = __x_ABI_Ctest__component_CIUnsealedDerived
            internal typealias SwiftABI = __ABI_test_component.IUnsealedDerived
            internal static func from(abi: UnsafeMutableRawPointer?) -> SwiftProjection? {
                guard let abi = abi else { return nil }
                return .init(fromAbi: .init(abi))
            }
        }
    }
    internal typealias Composable = IUnsealedDerivedOverloads2
    override open class var _makeFromAbi : any MakeFromAbi.Type { Composable.Default.self }
    internal lazy var _IUnsealedDerivedOverrides: __ABI_test_component.IUnsealedDerivedOverrides = try! IUnknown(_inner!).QueryInterface()
    open func onBeforeDoTheThing() {
        try! _IUnsealedDerivedOverrides.OnBeforeDoTheThingImpl()
    }

    internal class IUnsealedDerivedOverrides : ComposableImpl {
        internal typealias CABI = __x_ABI_Ctest__component_CIUnsealedDerivedOverrides
        internal typealias SwiftABI = __ABI_test_component.IUnsealedDerivedOverrides
        internal class Default : MakeComposedAbi {
            internal typealias SwiftProjection = UnsealedDerived
            internal typealias CABI = __x_ABI_Ctest__component_CIUnsealedDerived
            internal typealias SwiftABI = __ABI_test_component.IUnsealedDerived
            internal static func from(abi: UnsafeMutableRawPointer?) -> SwiftProjection? {
                guard let abi = abi else { return nil }
                return .init(fromAbi: .init(abi))
            }
        }
    }
}

open class UnsealedDerived2 : test_component.UnsealedDerived {
    private typealias SwiftABI = __ABI_test_component.IUnsealedDerived2
    private typealias CABI = __x_ABI_Ctest__component_CIUnsealedDerived2
    private var _default: SwiftABI!
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }   
        if T.self == Ctest_component.IInspectable.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    public static func from(abi: UnsafeMutablePointer<__x_ABI_Ctest__component_CIUnsealedDerived2>?) -> UnsealedDerived2? {
        guard let abi = abi else { return nil }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    override public init(fromAbi: test_component.IInspectable) {
        _default = try! fromAbi.QueryInterface()
        super.init(fromAbi: fromAbi)
    }

    private static var _IUnsealedDerived2ProtectedFactory : __ABI_test_component.IUnsealedDerived2ProtectedFactory =  try! RoGetActivationFactory(HString("test_component.UnsealedDerived2"))
    override public init() {
        super.init(Self._IUnsealedDerived2ProtectedFactory) 
        let parentDefault: UnsafeMutablePointer<Ctest_component.IInspectable> = super._getABI()!
        self._default = try! IInspectable(parentDefault).QueryInterface()
        _ = self._default.Release() // release to reset reference count since QI caused an AddRef on ourselves
    }

    override public init<Factory: ComposableActivationFactory>(_ factory: Factory) {
        super.init(factory)
        let parentDefault: UnsafeMutablePointer<Ctest_component.IInspectable> = super._getABI()!
        self._default = try! IInspectable(parentDefault).QueryInterface()
        _ = self._default.Release() // release to reset reference count since QI caused an AddRef on ourselves
    }
    public func method() {
        try! _default.MethodImpl()
    }

    internal class IUnsealedDerivedOverloads2 : ComposableImpl {
        internal typealias CABI = __x_ABI_Ctest__component_CIUnsealedDerivedOverloads2
        internal typealias SwiftABI = __ABI_test_component.IUnsealedDerivedOverloads2
        internal class Default : MakeComposedAbi {
            internal typealias SwiftProjection = UnsealedDerived2
            internal typealias CABI = __x_ABI_Ctest__component_CIUnsealedDerived2
            internal typealias SwiftABI = __ABI_test_component.IUnsealedDerived2
            internal static func from(abi: UnsafeMutableRawPointer?) -> SwiftProjection? {
                guard let abi = abi else { return nil }
                return .init(fromAbi: .init(abi))
            }
        }
    }
    internal typealias Composable = IUnsealedDerivedOverloads2
    override open class var _makeFromAbi : any MakeFromAbi.Type { Composable.Default.self }
}

open class UnsealedDerivedNoOverrides : test_component.BaseNoOverrides {
    private typealias SwiftABI = __ABI_test_component.IUnsealedDerivedNoOverrides
    private typealias CABI = __x_ABI_Ctest__component_CIUnsealedDerivedNoOverrides
    private var _default: SwiftABI!
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }   
        if T.self == Ctest_component.IInspectable.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    public static func from(abi: UnsafeMutablePointer<__x_ABI_Ctest__component_CIUnsealedDerivedNoOverrides>?) -> UnsealedDerivedNoOverrides? {
        guard let abi = abi else { return nil }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    override public init(fromAbi: test_component.IInspectable) {
        _default = try! fromAbi.QueryInterface()
        super.init(fromAbi: fromAbi)
    }

    private static var _IUnsealedDerivedNoOverridesProtectedFactory : __ABI_test_component.IUnsealedDerivedNoOverridesProtectedFactory =  try! RoGetActivationFactory(HString("test_component.UnsealedDerivedNoOverrides"))
    override public init() {
        super.init(Self._IUnsealedDerivedNoOverridesProtectedFactory) 
        let parentDefault: UnsafeMutablePointer<Ctest_component.IInspectable> = super._getABI()!
        self._default = try! IInspectable(parentDefault).QueryInterface()
        _ = self._default.Release() // release to reset reference count since QI caused an AddRef on ourselves
    }

    override public init<Factory: ComposableActivationFactory>(_ factory: Factory) {
        super.init(factory)
        let parentDefault: UnsafeMutablePointer<Ctest_component.IInspectable> = super._getABI()!
        self._default = try! IInspectable(parentDefault).QueryInterface()
        _ = self._default.Release() // release to reset reference count since QI caused an AddRef on ourselves
    }
    internal class IUnsealedDerivedNoOverrides : ComposableImpl {
        internal typealias CABI = Ctest_component.IInspectable
        internal typealias SwiftABI = test_component.IInspectable
        internal class Default : MakeComposedAbi {
            internal typealias SwiftProjection = UnsealedDerivedNoOverrides
            internal typealias CABI = __x_ABI_Ctest__component_CIUnsealedDerivedNoOverrides
            internal typealias SwiftABI = __ABI_test_component.IUnsealedDerivedNoOverrides
            internal static func from(abi: UnsafeMutableRawPointer?) -> SwiftProjection? {
                guard let abi = abi else { return nil }
                return .init(fromAbi: .init(abi))
            }
        }
    }
    internal typealias Composable = IUnsealedDerivedNoOverrides
    override open class var _makeFromAbi : any MakeFromAbi.Type { Composable.Default.self }
}

public typealias VoidToVoidDelegate = __IMPL_test_component.VoidToVoidDelegateImpl
public struct BlittableStruct {
    public var first: Int32 = 0
    public var second: Int32 = 0
    public init() {}
    public init(first: Int32, second: Int32) {
        self.first = first
        self.second = second
    }
    public static func from(abi: __x_ABI_Ctest__component_CBlittableStruct) -> BlittableStruct {
        .init(first: abi.First, second: abi.Second)
    }
}

public struct NonBlittableBoolStruct {
    public var first: Bool = false
    public var second: Bool = false
    public var third: Bool = false
    public var fourth: Bool = false
    public init() {}
    public init(first: Bool, second: Bool, third: Bool, fourth: Bool) {
        self.first = first
        self.second = second
        self.third = third
        self.fourth = fourth
    }
    public static func from(abi: __x_ABI_Ctest__component_CNonBlittableBoolStruct) -> NonBlittableBoolStruct {
        .init(first: .init(from: abi.First), second: .init(from: abi.Second), third: .init(from: abi.Third), fourth: .init(from: abi.Fourth))
    }
}

public struct NonBlittableStruct {
    public var first: String = ""
    public var second: String = ""
    public var third: Int32 = 0
    public var fourth: String = ""
    public init() {}
    public init(first: String, second: String, third: Int32, fourth: String) {
        self.first = first
        self.second = second
        self.third = third
        self.fourth = fourth
    }
    public static func from(abi: __x_ABI_Ctest__component_CNonBlittableStruct) -> NonBlittableStruct {
        .init(first: .init(from: abi.First), second: .init(from: abi.Second), third: abi.Third, fourth: .init(from: abi.Fourth))
    }
}

public struct SimpleEventArgs {
    public var value: Int32 = 0
    public init() {}
    public init(value: Int32) {
        self.value = value
    }
    public static func from(abi: __x_ABI_Ctest__component_CSimpleEventArgs) -> SimpleEventArgs {
        .init(value: abi.Value)
    }
}

public protocol IBasic : IWinRTObject { 
        func method()
}
public protocol IIAmImplementable : IWinRTObject { 
        func inInt32(_ value: Int32) -> String
        func inString(_ value: String) -> String
        func inEnum(_ value: test_component.Signed) -> String
        func outInt32(_ value: inout Int32)
        func outString(_ value: inout String)
        func outBlittableStruct(_ value: inout test_component.BlittableStruct)
        func outNonBlittableStruct(_ value: inout test_component.NonBlittableStruct)
        func outEnum(_ value: inout test_component.Signed)
        func returnEnum() -> test_component.Signed
        func fireEvent()
        var enumProperty: test_component.Fruit { get set }
        var id: UUID? { get set }
}
public protocol ISimpleDelegate : IWinRTObject { 
        func doThis()
        func doThat(_ val: Int32)
}
extension test_component.Fruit {
    public static var banana : test_component.Fruit {
        __x_ABI_Ctest__component_CFruit_Banana
    }
    public static var apple : test_component.Fruit {
        __x_ABI_Ctest__component_CFruit_Apple
    }
    public static var orange : test_component.Fruit {
        __x_ABI_Ctest__component_CFruit_Orange
    }
    public static var pineapple : test_component.Fruit {
        __x_ABI_Ctest__component_CFruit_Pineapple
    }
}

extension test_component.Signed {
    public static var first : test_component.Signed {
        __x_ABI_Ctest__component_CSigned_First
    }
    public static var second : test_component.Signed {
        __x_ABI_Ctest__component_CSigned_Second
    }
    public static var third : test_component.Signed {
        __x_ABI_Ctest__component_CSigned_Third
    }
}

extension test_component.SwiftifiableNames {
    public static var camelCase : test_component.SwiftifiableNames {
        __x_ABI_Ctest__component_CSwiftifiableNames_camelCase
    }
    public static var pascalCase : test_component.SwiftifiableNames {
        __x_ABI_Ctest__component_CSwiftifiableNames_PascalCase
    }
    public static var esingleLetterPrefixed : test_component.SwiftifiableNames {
        __x_ABI_Ctest__component_CSwiftifiableNames_ESingleLetterPrefixed
    }
    public static var leadingCaps : test_component.SwiftifiableNames {
        __x_ABI_Ctest__component_CSwiftifiableNames_LEADINGCaps
    }
    public static var r8g8b8a8Typeless : test_component.SwiftifiableNames {
        __x_ABI_Ctest__component_CSwiftifiableNames_R8G8B8A8Typeless
    }
    public static var uuid : test_component.SwiftifiableNames {
        __x_ABI_Ctest__component_CSwiftifiableNames_UUID
    }
}

extension test_component.Unsigned {
    public static var first : test_component.Unsigned {
        __x_ABI_Ctest__component_CUnsigned_First
    }
    public static var second : test_component.Unsigned {
        __x_ABI_Ctest__component_CUnsigned_Second
    }
    public static var third : test_component.Unsigned {
        __x_ABI_Ctest__component_CUnsigned_Third
    }
}

fileprivate extension Int32 {
    init?(ref: UnsafeMutablePointer<__x_ABI_C__FIReference_1_int>?) {
        guard let val = ref else { return nil }
        var result: INT32 = .init()
        try! CHECKED(val.pointee.lpVtbl.pointee.get_Value(val, &result))
        self = result
    }
} 
fileprivate extension UUID {
    init?(ref: UnsafeMutablePointer<__x_ABI_C__FIReference_1_GUID>?) {
        guard let val = ref else { return nil }
        var result: GUID = .init()
        try! CHECKED(val.pointee.lpVtbl.pointee.get_Value(val, &result))
        self = result
    }
} 

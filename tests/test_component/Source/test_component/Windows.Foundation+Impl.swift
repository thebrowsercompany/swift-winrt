// WARNING: Please don't edit this file. It was generated by Swift/WinRT v0.0.1
import Ctest_component

public enum __IMPL_Windows_Foundation {
    public class IClosableImpl : IClosable, AbiInterfaceImpl {
        public typealias c_ABI = __x_ABI_CWindows_CFoundation_CIClosable
        public typealias swift_ABI = __ABI_Windows_Foundation.IClosable
        public typealias swift_Projection = any IClosable
        private (set) public var _default: swift_ABI
        public static func from(abi: UnsafeMutablePointer<c_ABI>?) -> swift_Projection {
            return IClosableImpl(abi)
        }
        public init(_ fromAbi: UnsafeMutablePointer<c_ABI>?) {
            _default = swift_ABI(fromAbi)
        }

        public static func makeAbi() -> c_ABI {
            let vtblPtr = withUnsafeMutablePointer(to: &__ABI_Windows_Foundation.IClosableVTable) { $0 }
            return .init(lpVtbl: vtblPtr)
        }
        public func Close() {
            try! _default.CloseImpl()
        }

    }

    public class IPropertyValueImpl : IPropertyValue, IReference {
        var _value: Any
        var propertyType : PropertyType

        public init(value: Any) {
            _value = value
            if _value is Int32 {
                propertyType = .Int32
            } else if _value is UInt8 {
                propertyType = .UInt8
            } else if _value is Int16 {
                propertyType = .Int16
            } else if _value is UInt32 {
                propertyType = .UInt32
            } else if _value is Int64 {
                propertyType = .Int64
            } else if _value is UInt64 {
                propertyType = .UInt64
            } else if _value is Float {
                propertyType = .Single
            } else if _value is Double {
                propertyType = .Double
            } else if _value is Character {
                propertyType = .Char16
            } else if _value is Bool {
                propertyType = .Boolean
            } else if _value is DateTime {
                propertyType = .DateTime
            } else if _value is TimeSpan {
                propertyType = .TimeSpan
            } else if _value is IWinRTObject {
                propertyType = .Inspectable
            } else if _value is IInspectable {
                propertyType = .Inspectable
            } else {
                propertyType = .OtherType
            }
        }

        public var `Type`: PropertyType { propertyType }
        public var IsNumericScalar: Bool { 
            switch propertyType {
                case .Int16, .Int32, .UInt16, .UInt8, .Int64, .UInt64, .Single, .Double: return true
                default: return false
            }
        }

        public var Value: Any { _value }

        public func GetUInt8() -> UInt8 { _value as! UInt8 }
        public func GetInt16() -> Int16 { _value as! Int16 }
        public func GetUInt16() -> UInt16 { _value as! UInt16 }
        public func GetInt32() -> Int32 { _value as! Int32 }
        public func GetUInt32() -> UInt32 { _value as! UInt32 }
        public func GetInt64() -> Int64 { _value as! Int64 }
        public func GetUInt64() -> UInt64 { _value as! UInt64 }
        public func GetSingle() -> Float { _value as! Float }
        public func GetDouble() -> Double { _value as! Double }
        public func GetChar16() -> Character { _value as! Character }
        public func GetBoolean() -> Bool { _value as! Bool }
        public func GetString() -> String { _value as! String }
        public func GetGuid() -> UUID { _value as! UUID }
        public func GetDateTime() -> DateTime { _value as! DateTime } 
        public func GetTimeSpan() -> TimeSpan { _value as! TimeSpan }
        public func GetPoint() -> Point { _value as! Point }
        public func GetSize() -> Size { _value as! Size }
        public func GetRect() -> Rect { _value as! Rect }
    }

}

// WARNING: Please don't edit this file. It was generated by Swift/WinRT v0.0.1
import Ctest_component

private var IID___x_ABI_Ctest__component_CIBase: IID {
    IID(Data1: 0xE9FE0BB2, Data2: 0xE1F6, Data3: 0x5E39, Data4: ( 0x92,0xBB,0x2F,0x19,0xFF,0xDE,0x3F,0xDC ))// E9FE0BB2-E1F6-5E39-92BB-2F19FFDE3FDC
}

private var IID___x_ABI_Ctest__component_CIBaseNoOverrides: IID {
    IID(Data1: 0xCAC21C05, Data2: 0xB599, Data3: 0x5D37, Data4: ( 0xA9,0x3A,0xD6,0x0C,0xBD,0xD1,0xD0,0xE8 ))// CAC21C05-B599-5D37-A93A-D60CBDD1D0E8
}

private var IID___x_ABI_Ctest__component_CIBaseNoOverridesProtectedFactory: IID {
    IID(Data1: 0x92FC0572, Data2: 0x825F, Data3: 0x5B3F, Data4: ( 0x9B,0x0B,0xF0,0x80,0xA1,0x66,0xEF,0x06 ))// 92FC0572-825F-5B3F-9B0B-F080A166EF06
}

private var IID___x_ABI_Ctest__component_CIBaseOverrides: IID {
    IID(Data1: 0xEE3CBD78, Data2: 0x04B7, Data3: 0x534F, Data4: ( 0xA7,0x15,0x53,0xDA,0xF5,0x35,0x01,0x3C ))// EE3CBD78-04B7-534F-A715-53DAF535013C
}

private var IID___x_ABI_Ctest__component_CIBaseProtectedFactory: IID {
    IID(Data1: 0x05CAD233, Data2: 0x20A7, Data3: 0x581F, Data4: ( 0xBD,0x44,0x0D,0x13,0x6C,0x31,0x0E,0x0F ))// 05CAD233-20A7-581F-BD44-0D136C310E0F
}

private var IID___x_ABI_Ctest__component_CIBasic: IID {
    IID(Data1: 0x636060A1, Data2: 0xE41D, Data3: 0x59DF, Data4: ( 0xA5,0xD3,0xFB,0x7C,0xE7,0xE1,0x79,0x2F ))// 636060A1-E41D-59DF-A5D3-FB7CE7E1792F
}

private var IID___x_ABI_Ctest__component_CIClass: IID {
    IID(Data1: 0x02E67BD0, Data2: 0x9D58, Data3: 0x5FD3, Data4: ( 0xBF,0xFB,0x65,0x07,0x19,0x3B,0x7E,0xBA ))// 02E67BD0-9D58-5FD3-BFFB-6507193B7EBA
}

private var IID___x_ABI_Ctest__component_CIClassFactory: IID {
    IID(Data1: 0x78914881, Data2: 0xB900, Data3: 0x582A, Data4: ( 0x94,0xB8,0x58,0x19,0x84,0xC0,0xF7,0x8A ))// 78914881-B900-582A-94B8-581984C0F78A
}

private var IID___x_ABI_Ctest__component_CIClassFactory2: IID {
    IID(Data1: 0xF5F62EBE, Data2: 0x931B, Data3: 0x519B, Data4: ( 0x95,0x1A,0xF1,0x4A,0x4B,0xC7,0x83,0xB1 ))// F5F62EBE-931B-519B-951A-F14A4BC783B1
}

private var IID___x_ABI_Ctest__component_CIClassStatics: IID {
    IID(Data1: 0x102C428D, Data2: 0xFBD3, Data3: 0x5649, Data4: ( 0xB1,0xB2,0x80,0xBC,0xC7,0xB0,0x04,0xE1 ))// 102C428D-FBD3-5649-B1B2-80BCC7B004E1
}

private var IID___x_ABI_Ctest__component_CIClassStatics2: IID {
    IID(Data1: 0xB341C098, Data2: 0x033D, Data3: 0x5445, Data4: ( 0x86,0x80,0x70,0x3A,0x93,0xBC,0xDF,0x81 ))// B341C098-033D-5445-8680-703A93BCDF81
}

private var IID___x_ABI_Ctest__component_CIDerived: IID {
    IID(Data1: 0x864F4DCB, Data2: 0xC4FF, Data3: 0x5FBB, Data4: ( 0xB4,0x5D,0xA7,0x3E,0x25,0x7B,0x48,0xA2 ))// 864F4DCB-C4FF-5FBB-B45D-A73E257B48A2
}

private var IID___x_ABI_Ctest__component_CIIAmImplementable: IID {
    IID(Data1: 0x87F63CC3, Data2: 0x16CC, Data3: 0x5C68, Data4: ( 0x85,0xEE,0xBE,0xCA,0x3F,0x6B,0xF9,0xB2 ))// 87F63CC3-16CC-5C68-85EE-BECA3F6BF9B2
}

private var IID___x_ABI_Ctest__component_CINullValuesStatics: IID {
    IID(Data1: 0x4F2BB96B, Data2: 0xB91D, Data3: 0x51E5, Data4: ( 0xA5,0x89,0x26,0x52,0xC1,0x65,0xA8,0xB5 ))// 4F2BB96B-B91D-51E5-A589-2652C165A8B5
}

private var IID___x_ABI_Ctest__component_CISimple: IID {
    IID(Data1: 0xCC8E220C, Data2: 0xBBF0, Data3: 0x50B8, Data4: ( 0xB1,0x8E,0x98,0xE7,0xCC,0x2E,0xED,0xDB ))// CC8E220C-BBF0-50B8-B18E-98E7CC2EEDDB
}

private var IID___x_ABI_Ctest__component_CISimpleDelegate: IID {
    IID(Data1: 0xB73AD784, Data2: 0xEADD, Data3: 0x54B7, Data4: ( 0xA6,0x8E,0x8A,0xC5,0x6E,0xAB,0x73,0x87 ))// B73AD784-EADD-54B7-A68E-8AC56EAB7387
}

private var IID___x_ABI_Ctest__component_CISimpleStatics: IID {
    IID(Data1: 0xC8DCADA0, Data2: 0xFD8E, Data3: 0x5E27, Data4: ( 0x95,0x51,0xA3,0x68,0xFE,0x1D,0x11,0xB2 ))// C8DCADA0-FD8E-5E27-9551-A368FE1D11B2
}

private var IID___x_ABI_Ctest__component_CIStaticClassStatics: IID {
    IID(Data1: 0x92E618EF, Data2: 0xFF6E, Data3: 0x5975, Data4: ( 0x86,0x8C,0x99,0xAD,0xC1,0x1D,0x36,0xDE ))// 92E618EF-FF6E-5975-868C-99ADC11D36DE
}

private var IID___x_ABI_Ctest__component_CIUnsealedDerived: IID {
    IID(Data1: 0xB4FA333D, Data2: 0x9BCA, Data3: 0x592D, Data4: ( 0x9D,0xCB,0x18,0xAF,0x96,0xD7,0x6A,0x03 ))// B4FA333D-9BCA-592D-9DCB-18AF96D76A03
}

private var IID___x_ABI_Ctest__component_CIUnsealedDerived2: IID {
    IID(Data1: 0xA58C23CF, Data2: 0x4DC4, Data3: 0x59C5, Data4: ( 0x8D,0xE3,0x9F,0x06,0x3B,0x21,0x8D,0xDE ))// A58C23CF-4DC4-59C5-8DE3-9F063B218DDE
}

private var IID___x_ABI_Ctest__component_CIUnsealedDerived2ProtectedFactory: IID {
    IID(Data1: 0x0978D147, Data2: 0x77BF, Data3: 0x5E0A, Data4: ( 0xA1,0x64,0xCA,0x95,0x1B,0xCA,0xB8,0xB4 ))// 0978D147-77BF-5E0A-A164-CA951BCAB8B4
}

private var IID___x_ABI_Ctest__component_CIUnsealedDerivedNoOverrides: IID {
    IID(Data1: 0x3CD27E28, Data2: 0x2DFF, Data3: 0x5A17, Data4: ( 0x82,0x63,0x1B,0xFA,0x75,0x04,0x34,0xAA ))// 3CD27E28-2DFF-5A17-8263-1BFA750434AA
}

private var IID___x_ABI_Ctest__component_CIUnsealedDerivedNoOverridesProtectedFactory: IID {
    IID(Data1: 0x8D27A3F3, Data2: 0xD785, Data3: 0x53E3, Data4: ( 0x83,0x19,0x6A,0x50,0x97,0xB1,0x04,0xAB ))// 8D27A3F3-D785-53E3-8319-6A5097B104AB
}

private var IID___x_ABI_Ctest__component_CIUnsealedDerivedOverloads2: IID {
    IID(Data1: 0xF4CE1AD9, Data2: 0x36B9, Data3: 0x5DC7, Data4: ( 0xA0,0x07,0x3A,0xCD,0xF4,0x22,0xE7,0x05 ))// F4CE1AD9-36B9-5DC7-A007-3ACDF422E705
}

private var IID___x_ABI_Ctest__component_CIUnsealedDerivedOverrides: IID {
    IID(Data1: 0x828DCEE6, Data2: 0xF93A, Data3: 0x5A4D, Data4: ( 0xBC,0xEE,0xF7,0xC1,0xDE,0xE4,0xEB,0x4E ))// 828DCEE6-F93A-5A4D-BCEE-F7C1DEE4EB4E
}

private var IID___x_ABI_Ctest__component_CIUnsealedDerivedProtectedFactory: IID {
    IID(Data1: 0x84D1FBFC, Data2: 0x0633, Data3: 0x572C, Data4: ( 0xAA,0x3D,0xA8,0xB9,0xBA,0x1D,0x30,0x76 ))// 84D1FBFC-0633-572C-AA3D-A8B9BA1D3076
}

private var IID___x_ABI_Ctest__component_CIVoidToVoidDelegate: IID {
    IID(Data1: 0x5ED7E415, Data2: 0x84E7, Data3: 0x5E4C, Data4: ( 0x8F,0x68,0xD4,0x65,0x3C,0x39,0xEE,0x46 ))// 5ED7E415-84E7-5E4C-8F68-D4653C39EE46
}

private var IID___x_ABI_C__FIIterable_1_HSTRING: IID {
    IID(Data1: 0xe2fcc7c1, Data2: 0x3bfc, Data3: 0x5a0b, Data4: ( 0xb2,0xb0,0x72,0xe7,0x69,0xd1,0xcb,0x7e ))// e2fcc7c1-3bfc-5a0b-b2b0-72e769d1cb7e
}

private var IID___x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING: IID {
    IID(Data1: 0xe9bdaaf0, Data2: 0xcbf6, Data3: 0x5c72, Data4: ( 0xbe,0x90,0x29,0xcb,0xf3,0xa1,0x31,0x9b ))// e9bdaaf0-cbf6-5c72-be90-29cbf3a1319b
}

private var IID___x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_Ctest__zcomponent__CBase: IID {
    IID(Data1: 0x9ee59ac2, Data2: 0xef36, Data3: 0x560b, Data4: ( 0x8a,0xdc,0xd3,0xea,0x78,0xbd,0x58,0x2b ))// 9ee59ac2-ef36-560b-8adc-d3ea78bd582b
}

private var IID___x_ABI_C__FIIterable_1___x_ABI_Ctest__zcomponent__CBase: IID {
    IID(Data1: 0xb826dcab, Data2: 0xca2a, Data3: 0x5fbc, Data4: ( 0x8c,0xbd,0xed,0x75,0x9a,0x9a,0x1c,0x00 ))// b826dcab-ca2a-5fbc-8cbd-ed759a9a1c00
}

private var IID___x_ABI_C__FIIterator_1_HSTRING: IID {
    IID(Data1: 0x8c304ebb, Data2: 0x6615, Data3: 0x50a4, Data4: ( 0x88,0x29,0x87,0x9e,0xcd,0x44,0x32,0x36 ))// 8c304ebb-6615-50a4-8829-879ecd443236
}

private var IID___x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING: IID {
    IID(Data1: 0x05eb86f1, Data2: 0x7140, Data3: 0x5517, Data4: ( 0xb8,0x8d,0xcb,0xae,0xbe,0x57,0xe6,0xb1 ))// 05eb86f1-7140-5517-b88d-cbaebe57e6b1
}

private var IID___x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_Ctest__zcomponent__CBase: IID {
    IID(Data1: 0xbe30f8a4, Data2: 0x7d2e, Data3: 0x55fa, Data4: ( 0x91,0xd0,0xf0,0x21,0xdf,0xe4,0x6d,0x06 ))// be30f8a4-7d2e-55fa-91d0-f021dfe46d06
}

private var IID___x_ABI_C__FIIterator_1___x_ABI_Ctest__zcomponent__CBase: IID {
    IID(Data1: 0xa8f692bf, Data2: 0xebba, Data3: 0x5b53, Data4: ( 0x90,0xd3,0x89,0x00,0x9b,0xcc,0x98,0x14 ))// a8f692bf-ebba-5b53-90d3-89009bcc9814
}

private var IID___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING: IID {
    IID(Data1: 0x60310303, Data2: 0x49c5, Data3: 0x52e6, Data4: ( 0xab,0xc6,0xa9,0xb3,0x6e,0xcc,0xc7,0x16 ))// 60310303-49c5-52e6-abc6-a9b36eccc716
}

private var IID___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_Ctest__zcomponent__CBase: IID {
    IID(Data1: 0xc6bff2b3, Data2: 0x09a5, Data3: 0x5fcf, Data4: ( 0xb0,0x78,0x69,0x43,0xdd,0x21,0x5d,0xe7 ))// c6bff2b3-09a5-5fcf-b078-6943dd215de7
}

private var IID___x_ABI_C__FIMapView_2_HSTRING_HSTRING: IID {
    IID(Data1: 0xac7f26f2, Data2: 0xfeb7, Data3: 0x5b2a, Data4: ( 0x8a,0xc4,0x34,0x5b,0xc6,0x2c,0xae,0xde ))// ac7f26f2-feb7-5b2a-8ac4-345bc62caede
}

private var IID___x_ABI_C__FIMapView_2_HSTRING___x_ABI_Ctest__zcomponent__CBase: IID {
    IID(Data1: 0x8c4e7f37, Data2: 0x8bf0, Data3: 0x515a, Data4: ( 0x82,0xc1,0x06,0x45,0x55,0x0b,0xf6,0x0b ))// 8c4e7f37-8bf0-515a-82c1-0645550bf60b
}

private var IID___x_ABI_C__FIMap_2_HSTRING_HSTRING: IID {
    IID(Data1: 0xf6d1f700, Data2: 0x49c2, Data3: 0x52ae, Data4: ( 0x81,0x54,0x82,0x6f,0x99,0x08,0x77,0x3c ))// f6d1f700-49c2-52ae-8154-826f9908773c
}

private var IID___x_ABI_C__FIMap_2_HSTRING___x_ABI_Ctest__zcomponent__CBase: IID {
    IID(Data1: 0x73430fe6, Data2: 0xa622, Data3: 0x5945, Data4: ( 0xa5,0x86,0x6f,0x3a,0x84,0xef,0x15,0xe3 ))// 73430fe6-a622-5945-a586-6f3a84ef15e3
}

private var IID___x_ABI_C__FIVectorView_1_HSTRING: IID {
    IID(Data1: 0x2f13c006, Data2: 0xa03a, Data3: 0x5f69, Data4: ( 0xb0,0x90,0x75,0xa4,0x3e,0x33,0x42,0x3e ))// 2f13c006-a03a-5f69-b090-75a43e33423e
}

private var IID___x_ABI_C__FIVectorView_1___x_ABI_Ctest__zcomponent__CBase: IID {
    IID(Data1: 0x92c07225, Data2: 0x1151, Data3: 0x51be, Data4: ( 0x83,0x03,0xf0,0x11,0x9f,0x4a,0xac,0xe6 ))// 92c07225-1151-51be-8303-f0119f4aace6
}

private var IID___x_ABI_C__FIVector_1_HSTRING: IID {
    IID(Data1: 0x98b9acc1, Data2: 0x4b56, Data3: 0x532e, Data4: ( 0xac,0x73,0x03,0xd5,0x29,0x1c,0xca,0x90 ))// 98b9acc1-4b56-532e-ac73-03d5291cca90
}

private var IID___x_ABI_C__FIVector_1___x_ABI_Ctest__zcomponent__CBase: IID {
    IID(Data1: 0xcb559561, Data2: 0x6732, Data3: 0x54ba, Data4: ( 0xa0,0x75,0xb5,0x03,0x46,0x27,0x5b,0x9e ))// cb559561-6732-54ba-a075-b50346275b9e
}

private var IID___x_ABI_C__FIEventHandler_1_IInspectable: IID {
    IID(Data1: 0xc50898f6, Data2: 0xc536, Data3: 0x5f47, Data4: ( 0x85,0x83,0x8b,0x2c,0x24,0x38,0xa1,0x3b ))// c50898f6-c536-5f47-8583-8b2c2438a13b
}

private var IID___x_ABI_C__FIReference_1_int: IID {
    IID(Data1: 0x548cefbd, Data2: 0xbc8a, Data3: 0x5fa0, Data4: ( 0x8d,0xf2,0x95,0x74,0x40,0xfc,0x8b,0xf4 ))// 548cefbd-bc8a-5fa0-8df2-957440fc8bf4
}

private var IID___x_ABI_C__FIReference_1_GUID: IID {
    IID(Data1: 0x7d50f649, Data2: 0x632c, Data3: 0x51f9, Data4: ( 0x84,0x9a,0xee,0x49,0x42,0x89,0x33,0xea ))// 7d50f649-632c-51f9-849a-ee49428933ea
}

private var IID___x_ABI_C__FITypedEventHandler_2___x_ABI_Ctest__zcomponent__CSimple___x_ABI_Ctest__zcomponent__CSimpleEventArgs: IID {
    IID(Data1: 0xf23463b2, Data2: 0x72e7, Data3: 0x5551, Data4: ( 0xab,0xf3,0x13,0xbf,0x6b,0xce,0xd6,0x2e ))// f23463b2-72e7-5551-abf3-13bf6bced62e
}

public enum __ABI_test_component {
    internal static var __x_ABI_C__FIMapView_2_HSTRING_HSTRINGVTable: __x_ABI_C__FIMapView_2_HSTRING_HSTRINGVtbl = .init(
        QueryInterface: {
            guard let pUnk = $0, let riid = $1, let ppvObject = $2 else { return E_INVALIDARG }

            guard riid.pointee == IUnknown.IID ||
                  riid.pointee == IInspectable.IID || 
                  riid.pointee == ISwiftImplemented.IID ||
                  riid.pointee == IIAgileObject.IID ||
                  riid.pointee == __ABI_test_component.__x_ABI_C__FIMapView_2_HSTRING_HSTRINGWrapper.IID else { 
                ppvObject.pointee = nil
                        return E_NOINTERFACE

            }
            _ = pUnk.pointee.lpVtbl.pointee.AddRef(pUnk)
            ppvObject.pointee = UnsafeMutableRawPointer(pUnk)
            return S_OK
        },

        AddRef: {
             guard let wrapper = __x_ABI_C__FIMapView_2_HSTRING_HSTRINGWrapper.from_raw($0) else { return 1 }
             _ = wrapper.retain()
             return ULONG(_getRetainCount(wrapper.takeUnretainedValue().swiftObj))
        },

        Release: {
            guard let wrapper = __x_ABI_C__FIMapView_2_HSTRING_HSTRINGWrapper.from_raw($0) else { return 1 }
            return ULONG(_getRetainCount(wrapper.takeRetainedValue()))
        },

        GetIids: {
            let size = MemoryLayout<IID>.size
            let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: IID.self)
            iids[0] = IUnknown.IID
            iids[1] = IInspectable.IID
            iids[2] = __ABI_test_component.__x_ABI_C__FIMapView_2_HSTRING_HSTRINGWrapper.IID
            $1!.pointee = 3
            $2!.pointee = iids
            return S_OK
        },

        GetRuntimeClassName: {
            _ = $0
            let hstring = try! HString("Windows.Foundation.Collections.IMapView`2<String, String>").detach()
            $1!.pointee = hstring
            return S_OK
        },

        GetTrustLevel: {
            _ = $0
            $1!.pointee = TrustLevel(rawValue: 0)
            return S_OK
        },

        Lookup: {
            guard let __unwrapped__instance = __x_ABI_C__FIMapView_2_HSTRING_HSTRINGWrapper.try_unwrap_from(raw: $0) else { return E_INVALIDARG }
            let key: String = .init(from: $1)
            let result = __unwrapped__instance.Lookup(key)
            $2?.initialize(to: try! HString(result).detach())
            return S_OK
        },

        get_Size: {
            guard let __unwrapped__instance = __x_ABI_C__FIMapView_2_HSTRING_HSTRINGWrapper.try_unwrap_from(raw: $0) else { return E_INVALIDARG }
            let result = __unwrapped__instance.Size
            $1?.initialize(to: result)
            return S_OK
        },

        HasKey: {
            guard let __unwrapped__instance = __x_ABI_C__FIMapView_2_HSTRING_HSTRINGWrapper.try_unwrap_from(raw: $0) else { return E_INVALIDARG }
            let key: String = .init(from: $1)
            let result = __unwrapped__instance.HasKey(key)
            $2?.initialize(to: .init(from: result))
            return S_OK
        },

        Split: {
            guard let __unwrapped__instance = __x_ABI_C__FIMapView_2_HSTRING_HSTRINGWrapper.try_unwrap_from(raw: $0) else { return E_INVALIDARG }
            var first: (any test_component.IMapView<String, String>)?
            var second: (any test_component.IMapView<String, String>)?
            __unwrapped__instance.Split(&first, &second)
            let firstWrapper = __ABI_test_component.__x_ABI_C__FIMapView_2_HSTRING_HSTRINGWrapper(first)
            let _first = try! firstWrapper?.to_abi { $0 }
            $1?.initialize(to: _first)
            let secondWrapper = __ABI_test_component.__x_ABI_C__FIMapView_2_HSTRING_HSTRINGWrapper(second)
            let _second = try! secondWrapper?.to_abi { $0 }
            $2?.initialize(to: _second)
            return S_OK
        }
    )
    typealias __x_ABI_C__FIMapView_2_HSTRING_HSTRINGWrapper = InterfaceWrapperBase<__IMPL_test_component.__x_ABI_C__FIMapView_2_HSTRING_HSTRINGImpl>
    internal class IMapViewString_String: test_component.IInspectable {
        override public class var IID: IID { IID___x_ABI_C__FIMapView_2_HSTRING_HSTRING }

        internal func LookupImpl(_ key: HSTRING?) throws -> HSTRING? {
            var result: HSTRING?
            _ = try perform(as: __x_ABI_C__FIMapView_2_HSTRING_HSTRING.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Lookup(pThis, key, &result))
            }
            return result
        }

        internal func get_SizeImpl() throws -> UINT32 {
            var result: UINT32 = 0
            _ = try perform(as: __x_ABI_C__FIMapView_2_HSTRING_HSTRING.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Size(pThis, &result))
            }
            return result
        }

        internal func HasKeyImpl(_ key: HSTRING?) throws -> boolean {
            var result: boolean = 0
            _ = try perform(as: __x_ABI_C__FIMapView_2_HSTRING_HSTRING.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.HasKey(pThis, key, &result))
            }
            return result
        }

        internal func SplitImpl(_ first: inout UnsafeMutablePointer<__x_ABI_C__FIMapView_2_HSTRING_HSTRING>?, _ second: inout UnsafeMutablePointer<__x_ABI_C__FIMapView_2_HSTRING_HSTRING>?) throws {
            _ = try perform(as: __x_ABI_C__FIMapView_2_HSTRING_HSTRING.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Split(pThis, &first, &second))
            }
        }

    }

    internal static var __x_ABI_C__FIMapView_2_HSTRING___x_ABI_Ctest__zcomponent__CBaseVTable: __x_ABI_C__FIMapView_2_HSTRING___x_ABI_Ctest__zcomponent__CBaseVtbl = .init(
        QueryInterface: {
            guard let pUnk = $0, let riid = $1, let ppvObject = $2 else { return E_INVALIDARG }

            guard riid.pointee == IUnknown.IID ||
                  riid.pointee == IInspectable.IID || 
                  riid.pointee == ISwiftImplemented.IID ||
                  riid.pointee == IIAgileObject.IID ||
                  riid.pointee == __ABI_test_component.__x_ABI_C__FIMapView_2_HSTRING___x_ABI_Ctest__zcomponent__CBaseWrapper.IID else { 
                ppvObject.pointee = nil
                        return E_NOINTERFACE

            }
            _ = pUnk.pointee.lpVtbl.pointee.AddRef(pUnk)
            ppvObject.pointee = UnsafeMutableRawPointer(pUnk)
            return S_OK
        },

        AddRef: {
             guard let wrapper = __x_ABI_C__FIMapView_2_HSTRING___x_ABI_Ctest__zcomponent__CBaseWrapper.from_raw($0) else { return 1 }
             _ = wrapper.retain()
             return ULONG(_getRetainCount(wrapper.takeUnretainedValue().swiftObj))
        },

        Release: {
            guard let wrapper = __x_ABI_C__FIMapView_2_HSTRING___x_ABI_Ctest__zcomponent__CBaseWrapper.from_raw($0) else { return 1 }
            return ULONG(_getRetainCount(wrapper.takeRetainedValue()))
        },

        GetIids: {
            let size = MemoryLayout<IID>.size
            let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: IID.self)
            iids[0] = IUnknown.IID
            iids[1] = IInspectable.IID
            iids[2] = __ABI_test_component.__x_ABI_C__FIMapView_2_HSTRING___x_ABI_Ctest__zcomponent__CBaseWrapper.IID
            $1!.pointee = 3
            $2!.pointee = iids
            return S_OK
        },

        GetRuntimeClassName: {
            _ = $0
            let hstring = try! HString("Windows.Foundation.Collections.IMapView`2<String, test_component.Base>").detach()
            $1!.pointee = hstring
            return S_OK
        },

        GetTrustLevel: {
            _ = $0
            $1!.pointee = TrustLevel(rawValue: 0)
            return S_OK
        },

        Lookup: {
            guard let __unwrapped__instance = __x_ABI_C__FIMapView_2_HSTRING___x_ABI_Ctest__zcomponent__CBaseWrapper.try_unwrap_from(raw: $0) else { return E_INVALIDARG }
            let key: String = .init(from: $1)
            let result = __unwrapped__instance.Lookup(key)
            $2?.initialize(to: RawPointer(result))
            return S_OK
        },

        get_Size: {
            guard let __unwrapped__instance = __x_ABI_C__FIMapView_2_HSTRING___x_ABI_Ctest__zcomponent__CBaseWrapper.try_unwrap_from(raw: $0) else { return E_INVALIDARG }
            let result = __unwrapped__instance.Size
            $1?.initialize(to: result)
            return S_OK
        },

        HasKey: {
            guard let __unwrapped__instance = __x_ABI_C__FIMapView_2_HSTRING___x_ABI_Ctest__zcomponent__CBaseWrapper.try_unwrap_from(raw: $0) else { return E_INVALIDARG }
            let key: String = .init(from: $1)
            let result = __unwrapped__instance.HasKey(key)
            $2?.initialize(to: .init(from: result))
            return S_OK
        },

        Split: {
            guard let __unwrapped__instance = __x_ABI_C__FIMapView_2_HSTRING___x_ABI_Ctest__zcomponent__CBaseWrapper.try_unwrap_from(raw: $0) else { return E_INVALIDARG }
            var first: (any test_component.IMapView<String, test_component.Base?>)?
            var second: (any test_component.IMapView<String, test_component.Base?>)?
            __unwrapped__instance.Split(&first, &second)
            let firstWrapper = __ABI_test_component.__x_ABI_C__FIMapView_2_HSTRING___x_ABI_Ctest__zcomponent__CBaseWrapper(first)
            let _first = try! firstWrapper?.to_abi { $0 }
            $1?.initialize(to: _first)
            let secondWrapper = __ABI_test_component.__x_ABI_C__FIMapView_2_HSTRING___x_ABI_Ctest__zcomponent__CBaseWrapper(second)
            let _second = try! secondWrapper?.to_abi { $0 }
            $2?.initialize(to: _second)
            return S_OK
        }
    )
    typealias __x_ABI_C__FIMapView_2_HSTRING___x_ABI_Ctest__zcomponent__CBaseWrapper = InterfaceWrapperBase<__IMPL_test_component.__x_ABI_C__FIMapView_2_HSTRING___x_ABI_Ctest__zcomponent__CBaseImpl>
    internal class IMapViewString_Base: test_component.IInspectable {
        override public class var IID: IID { IID___x_ABI_C__FIMapView_2_HSTRING___x_ABI_Ctest__zcomponent__CBase }

        internal func LookupImpl(_ key: HSTRING?) throws -> UnsafeMutablePointer<__x_ABI_Ctest__component_CIBase>? {
            var result: UnsafeMutablePointer<__x_ABI_Ctest__component_CIBase>?
            _ = try perform(as: __x_ABI_C__FIMapView_2_HSTRING___x_ABI_Ctest__zcomponent__CBase.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Lookup(pThis, key, &result))
            }
            return result
        }

        internal func get_SizeImpl() throws -> UINT32 {
            var result: UINT32 = 0
            _ = try perform(as: __x_ABI_C__FIMapView_2_HSTRING___x_ABI_Ctest__zcomponent__CBase.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Size(pThis, &result))
            }
            return result
        }

        internal func HasKeyImpl(_ key: HSTRING?) throws -> boolean {
            var result: boolean = 0
            _ = try perform(as: __x_ABI_C__FIMapView_2_HSTRING___x_ABI_Ctest__zcomponent__CBase.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.HasKey(pThis, key, &result))
            }
            return result
        }

        internal func SplitImpl(_ first: inout UnsafeMutablePointer<__x_ABI_C__FIMapView_2_HSTRING___x_ABI_Ctest__zcomponent__CBase>?, _ second: inout UnsafeMutablePointer<__x_ABI_C__FIMapView_2_HSTRING___x_ABI_Ctest__zcomponent__CBase>?) throws {
            _ = try perform(as: __x_ABI_C__FIMapView_2_HSTRING___x_ABI_Ctest__zcomponent__CBase.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Split(pThis, &first, &second))
            }
        }

    }

    internal static var __x_ABI_C__FIMap_2_HSTRING_HSTRINGVTable: __x_ABI_C__FIMap_2_HSTRING_HSTRINGVtbl = .init(
        QueryInterface: {
            guard let pUnk = $0, let riid = $1, let ppvObject = $2 else { return E_INVALIDARG }

            guard riid.pointee == IUnknown.IID ||
                  riid.pointee == IInspectable.IID || 
                  riid.pointee == ISwiftImplemented.IID ||
                  riid.pointee == IIAgileObject.IID ||
                  riid.pointee == __ABI_test_component.__x_ABI_C__FIMap_2_HSTRING_HSTRINGWrapper.IID else { 
                ppvObject.pointee = nil
                        return E_NOINTERFACE

            }
            _ = pUnk.pointee.lpVtbl.pointee.AddRef(pUnk)
            ppvObject.pointee = UnsafeMutableRawPointer(pUnk)
            return S_OK
        },

        AddRef: {
             guard let wrapper = __x_ABI_C__FIMap_2_HSTRING_HSTRINGWrapper.from_raw($0) else { return 1 }
             _ = wrapper.retain()
             return ULONG(_getRetainCount(wrapper.takeUnretainedValue().swiftObj))
        },

        Release: {
            guard let wrapper = __x_ABI_C__FIMap_2_HSTRING_HSTRINGWrapper.from_raw($0) else { return 1 }
            return ULONG(_getRetainCount(wrapper.takeRetainedValue()))
        },

        GetIids: {
            let size = MemoryLayout<IID>.size
            let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: IID.self)
            iids[0] = IUnknown.IID
            iids[1] = IInspectable.IID
            iids[2] = __ABI_test_component.__x_ABI_C__FIMap_2_HSTRING_HSTRINGWrapper.IID
            $1!.pointee = 3
            $2!.pointee = iids
            return S_OK
        },

        GetRuntimeClassName: {
            _ = $0
            let hstring = try! HString("Windows.Foundation.Collections.IMap`2<String, String>").detach()
            $1!.pointee = hstring
            return S_OK
        },

        GetTrustLevel: {
            _ = $0
            $1!.pointee = TrustLevel(rawValue: 0)
            return S_OK
        },

        Lookup: {
            guard let __unwrapped__instance = __x_ABI_C__FIMap_2_HSTRING_HSTRINGWrapper.try_unwrap_from(raw: $0) else { return E_INVALIDARG }
            let key: String = .init(from: $1)
            let result = __unwrapped__instance.Lookup(key)
            $2?.initialize(to: try! HString(result).detach())
            return S_OK
        },

        get_Size: {
            guard let __unwrapped__instance = __x_ABI_C__FIMap_2_HSTRING_HSTRINGWrapper.try_unwrap_from(raw: $0) else { return E_INVALIDARG }
            let result = __unwrapped__instance.Size
            $1?.initialize(to: result)
            return S_OK
        },

        HasKey: {
            guard let __unwrapped__instance = __x_ABI_C__FIMap_2_HSTRING_HSTRINGWrapper.try_unwrap_from(raw: $0) else { return E_INVALIDARG }
            let key: String = .init(from: $1)
            let result = __unwrapped__instance.HasKey(key)
            $2?.initialize(to: .init(from: result))
            return S_OK
        },

        GetView: {
            guard let __unwrapped__instance = __x_ABI_C__FIMap_2_HSTRING_HSTRINGWrapper.try_unwrap_from(raw: $0) else { return E_INVALIDARG }
            let result = __unwrapped__instance.GetView()
            let resultWrapper = __ABI_test_component.__x_ABI_C__FIMapView_2_HSTRING_HSTRINGWrapper(result)
            let _result = try! resultWrapper?.to_abi { $0 }
            $1?.initialize(to: _result)
            return S_OK
        },

        Insert: {
            guard let __unwrapped__instance = __x_ABI_C__FIMap_2_HSTRING_HSTRINGWrapper.try_unwrap_from(raw: $0) else { return E_INVALIDARG }
            let key: String = .init(from: $1)
            let value: String = .init(from: $2)
            let result = __unwrapped__instance.Insert(key, value)
            $3?.initialize(to: .init(from: result))
            return S_OK
        },

        Remove: {
            guard let __unwrapped__instance = __x_ABI_C__FIMap_2_HSTRING_HSTRINGWrapper.try_unwrap_from(raw: $0) else { return E_INVALIDARG }
            let key: String = .init(from: $1)
            __unwrapped__instance.Remove(key)
            return S_OK
        },

        Clear: {
            guard let __unwrapped__instance = __x_ABI_C__FIMap_2_HSTRING_HSTRINGWrapper.try_unwrap_from(raw: $0) else { return E_INVALIDARG }
            __unwrapped__instance.Clear()
            return S_OK
        }
    )
    typealias __x_ABI_C__FIMap_2_HSTRING_HSTRINGWrapper = InterfaceWrapperBase<__IMPL_test_component.__x_ABI_C__FIMap_2_HSTRING_HSTRINGImpl>
    internal class IMapString_String: test_component.IInspectable {
        override public class var IID: IID { IID___x_ABI_C__FIMap_2_HSTRING_HSTRING }

        internal func LookupImpl(_ key: HSTRING?) throws -> HSTRING? {
            var result: HSTRING?
            _ = try perform(as: __x_ABI_C__FIMap_2_HSTRING_HSTRING.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Lookup(pThis, key, &result))
            }
            return result
        }

        internal func get_SizeImpl() throws -> UINT32 {
            var result: UINT32 = 0
            _ = try perform(as: __x_ABI_C__FIMap_2_HSTRING_HSTRING.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Size(pThis, &result))
            }
            return result
        }

        internal func HasKeyImpl(_ key: HSTRING?) throws -> boolean {
            var result: boolean = 0
            _ = try perform(as: __x_ABI_C__FIMap_2_HSTRING_HSTRING.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.HasKey(pThis, key, &result))
            }
            return result
        }

        internal func GetViewImpl() throws -> UnsafeMutablePointer<__x_ABI_C__FIMapView_2_HSTRING_HSTRING>? {
            var result: UnsafeMutablePointer<__x_ABI_C__FIMapView_2_HSTRING_HSTRING>?
            _ = try perform(as: __x_ABI_C__FIMap_2_HSTRING_HSTRING.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetView(pThis, &result))
            }
            return result
        }

        internal func InsertImpl(_ key: HSTRING?, _ value: HSTRING?) throws -> boolean {
            var result: boolean = 0
            _ = try perform(as: __x_ABI_C__FIMap_2_HSTRING_HSTRING.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Insert(pThis, key, value, &result))
            }
            return result
        }

        internal func RemoveImpl(_ key: HSTRING?) throws {
            _ = try perform(as: __x_ABI_C__FIMap_2_HSTRING_HSTRING.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Remove(pThis, key))
            }
        }

        internal func ClearImpl() throws {
            _ = try perform(as: __x_ABI_C__FIMap_2_HSTRING_HSTRING.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Clear(pThis))
            }
        }

    }

    internal static var __x_ABI_C__FIMap_2_HSTRING___x_ABI_Ctest__zcomponent__CBaseVTable: __x_ABI_C__FIMap_2_HSTRING___x_ABI_Ctest__zcomponent__CBaseVtbl = .init(
        QueryInterface: {
            guard let pUnk = $0, let riid = $1, let ppvObject = $2 else { return E_INVALIDARG }

            guard riid.pointee == IUnknown.IID ||
                  riid.pointee == IInspectable.IID || 
                  riid.pointee == ISwiftImplemented.IID ||
                  riid.pointee == IIAgileObject.IID ||
                  riid.pointee == __ABI_test_component.__x_ABI_C__FIMap_2_HSTRING___x_ABI_Ctest__zcomponent__CBaseWrapper.IID else { 
                ppvObject.pointee = nil
                        return E_NOINTERFACE

            }
            _ = pUnk.pointee.lpVtbl.pointee.AddRef(pUnk)
            ppvObject.pointee = UnsafeMutableRawPointer(pUnk)
            return S_OK
        },

        AddRef: {
             guard let wrapper = __x_ABI_C__FIMap_2_HSTRING___x_ABI_Ctest__zcomponent__CBaseWrapper.from_raw($0) else { return 1 }
             _ = wrapper.retain()
             return ULONG(_getRetainCount(wrapper.takeUnretainedValue().swiftObj))
        },

        Release: {
            guard let wrapper = __x_ABI_C__FIMap_2_HSTRING___x_ABI_Ctest__zcomponent__CBaseWrapper.from_raw($0) else { return 1 }
            return ULONG(_getRetainCount(wrapper.takeRetainedValue()))
        },

        GetIids: {
            let size = MemoryLayout<IID>.size
            let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: IID.self)
            iids[0] = IUnknown.IID
            iids[1] = IInspectable.IID
            iids[2] = __ABI_test_component.__x_ABI_C__FIMap_2_HSTRING___x_ABI_Ctest__zcomponent__CBaseWrapper.IID
            $1!.pointee = 3
            $2!.pointee = iids
            return S_OK
        },

        GetRuntimeClassName: {
            _ = $0
            let hstring = try! HString("Windows.Foundation.Collections.IMap`2<String, test_component.Base>").detach()
            $1!.pointee = hstring
            return S_OK
        },

        GetTrustLevel: {
            _ = $0
            $1!.pointee = TrustLevel(rawValue: 0)
            return S_OK
        },

        Lookup: {
            guard let __unwrapped__instance = __x_ABI_C__FIMap_2_HSTRING___x_ABI_Ctest__zcomponent__CBaseWrapper.try_unwrap_from(raw: $0) else { return E_INVALIDARG }
            let key: String = .init(from: $1)
            let result = __unwrapped__instance.Lookup(key)
            $2?.initialize(to: RawPointer(result))
            return S_OK
        },

        get_Size: {
            guard let __unwrapped__instance = __x_ABI_C__FIMap_2_HSTRING___x_ABI_Ctest__zcomponent__CBaseWrapper.try_unwrap_from(raw: $0) else { return E_INVALIDARG }
            let result = __unwrapped__instance.Size
            $1?.initialize(to: result)
            return S_OK
        },

        HasKey: {
            guard let __unwrapped__instance = __x_ABI_C__FIMap_2_HSTRING___x_ABI_Ctest__zcomponent__CBaseWrapper.try_unwrap_from(raw: $0) else { return E_INVALIDARG }
            let key: String = .init(from: $1)
            let result = __unwrapped__instance.HasKey(key)
            $2?.initialize(to: .init(from: result))
            return S_OK
        },

        GetView: {
            guard let __unwrapped__instance = __x_ABI_C__FIMap_2_HSTRING___x_ABI_Ctest__zcomponent__CBaseWrapper.try_unwrap_from(raw: $0) else { return E_INVALIDARG }
            let result = __unwrapped__instance.GetView()
            let resultWrapper = __ABI_test_component.__x_ABI_C__FIMapView_2_HSTRING___x_ABI_Ctest__zcomponent__CBaseWrapper(result)
            let _result = try! resultWrapper?.to_abi { $0 }
            $1?.initialize(to: _result)
            return S_OK
        },

        Insert: {
            guard let __unwrapped__instance = __x_ABI_C__FIMap_2_HSTRING___x_ABI_Ctest__zcomponent__CBaseWrapper.try_unwrap_from(raw: $0) else { return E_INVALIDARG }
            let key: String = .init(from: $1)
            let value: test_component.Base? = .from(abi: $2)
            let result = __unwrapped__instance.Insert(key, value)
            $3?.initialize(to: .init(from: result))
            return S_OK
        },

        Remove: {
            guard let __unwrapped__instance = __x_ABI_C__FIMap_2_HSTRING___x_ABI_Ctest__zcomponent__CBaseWrapper.try_unwrap_from(raw: $0) else { return E_INVALIDARG }
            let key: String = .init(from: $1)
            __unwrapped__instance.Remove(key)
            return S_OK
        },

        Clear: {
            guard let __unwrapped__instance = __x_ABI_C__FIMap_2_HSTRING___x_ABI_Ctest__zcomponent__CBaseWrapper.try_unwrap_from(raw: $0) else { return E_INVALIDARG }
            __unwrapped__instance.Clear()
            return S_OK
        }
    )
    typealias __x_ABI_C__FIMap_2_HSTRING___x_ABI_Ctest__zcomponent__CBaseWrapper = InterfaceWrapperBase<__IMPL_test_component.__x_ABI_C__FIMap_2_HSTRING___x_ABI_Ctest__zcomponent__CBaseImpl>
    internal class IMapString_Base: test_component.IInspectable {
        override public class var IID: IID { IID___x_ABI_C__FIMap_2_HSTRING___x_ABI_Ctest__zcomponent__CBase }

        internal func LookupImpl(_ key: HSTRING?) throws -> UnsafeMutablePointer<__x_ABI_Ctest__component_CIBase>? {
            var result: UnsafeMutablePointer<__x_ABI_Ctest__component_CIBase>?
            _ = try perform(as: __x_ABI_C__FIMap_2_HSTRING___x_ABI_Ctest__zcomponent__CBase.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Lookup(pThis, key, &result))
            }
            return result
        }

        internal func get_SizeImpl() throws -> UINT32 {
            var result: UINT32 = 0
            _ = try perform(as: __x_ABI_C__FIMap_2_HSTRING___x_ABI_Ctest__zcomponent__CBase.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Size(pThis, &result))
            }
            return result
        }

        internal func HasKeyImpl(_ key: HSTRING?) throws -> boolean {
            var result: boolean = 0
            _ = try perform(as: __x_ABI_C__FIMap_2_HSTRING___x_ABI_Ctest__zcomponent__CBase.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.HasKey(pThis, key, &result))
            }
            return result
        }

        internal func GetViewImpl() throws -> UnsafeMutablePointer<__x_ABI_C__FIMapView_2_HSTRING___x_ABI_Ctest__zcomponent__CBase>? {
            var result: UnsafeMutablePointer<__x_ABI_C__FIMapView_2_HSTRING___x_ABI_Ctest__zcomponent__CBase>?
            _ = try perform(as: __x_ABI_C__FIMap_2_HSTRING___x_ABI_Ctest__zcomponent__CBase.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetView(pThis, &result))
            }
            return result
        }

        internal func InsertImpl(_ key: HSTRING?, _ value: UnsafeMutablePointer<__x_ABI_Ctest__component_CIBase>?) throws -> boolean {
            var result: boolean = 0
            _ = try perform(as: __x_ABI_C__FIMap_2_HSTRING___x_ABI_Ctest__zcomponent__CBase.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Insert(pThis, key, value, &result))
            }
            return result
        }

        internal func RemoveImpl(_ key: HSTRING?) throws {
            _ = try perform(as: __x_ABI_C__FIMap_2_HSTRING___x_ABI_Ctest__zcomponent__CBase.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Remove(pThis, key))
            }
        }

        internal func ClearImpl() throws {
            _ = try perform(as: __x_ABI_C__FIMap_2_HSTRING___x_ABI_Ctest__zcomponent__CBase.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Clear(pThis))
            }
        }

    }

    internal static var __x_ABI_C__FIVectorView_1_HSTRINGVTable: __x_ABI_C__FIVectorView_1_HSTRINGVtbl = .init(
        QueryInterface: {
            guard let pUnk = $0, let riid = $1, let ppvObject = $2 else { return E_INVALIDARG }

            guard riid.pointee == IUnknown.IID ||
                  riid.pointee == IInspectable.IID || 
                  riid.pointee == ISwiftImplemented.IID ||
                  riid.pointee == IIAgileObject.IID ||
                  riid.pointee == __ABI_test_component.__x_ABI_C__FIVectorView_1_HSTRINGWrapper.IID else { 
                ppvObject.pointee = nil
                        return E_NOINTERFACE

            }
            _ = pUnk.pointee.lpVtbl.pointee.AddRef(pUnk)
            ppvObject.pointee = UnsafeMutableRawPointer(pUnk)
            return S_OK
        },

        AddRef: {
             guard let wrapper = __x_ABI_C__FIVectorView_1_HSTRINGWrapper.from_raw($0) else { return 1 }
             _ = wrapper.retain()
             return ULONG(_getRetainCount(wrapper.takeUnretainedValue().swiftObj))
        },

        Release: {
            guard let wrapper = __x_ABI_C__FIVectorView_1_HSTRINGWrapper.from_raw($0) else { return 1 }
            return ULONG(_getRetainCount(wrapper.takeRetainedValue()))
        },

        GetIids: {
            let size = MemoryLayout<IID>.size
            let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: IID.self)
            iids[0] = IUnknown.IID
            iids[1] = IInspectable.IID
            iids[2] = __ABI_test_component.__x_ABI_C__FIVectorView_1_HSTRINGWrapper.IID
            $1!.pointee = 3
            $2!.pointee = iids
            return S_OK
        },

        GetRuntimeClassName: {
            _ = $0
            let hstring = try! HString("Windows.Foundation.Collections.IVectorView`1<String>").detach()
            $1!.pointee = hstring
            return S_OK
        },

        GetTrustLevel: {
            _ = $0
            $1!.pointee = TrustLevel(rawValue: 0)
            return S_OK
        },

        GetAt: {
            guard let __unwrapped__instance = __x_ABI_C__FIVectorView_1_HSTRINGWrapper.try_unwrap_from(raw: $0) else { return E_INVALIDARG }
            let index: UInt32 = $1
            let result = __unwrapped__instance.GetAt(index)
            $2?.initialize(to: try! HString(result).detach())
            return S_OK
        },

        get_Size: {
            guard let __unwrapped__instance = __x_ABI_C__FIVectorView_1_HSTRINGWrapper.try_unwrap_from(raw: $0) else { return E_INVALIDARG }
            let result = __unwrapped__instance.Size
            $1?.initialize(to: result)
            return S_OK
        },

        IndexOf: {
            guard let __unwrapped__instance = __x_ABI_C__FIVectorView_1_HSTRINGWrapper.try_unwrap_from(raw: $0) else { return E_INVALIDARG }
            let value: String = .init(from: $1)
            var index: UInt32 = 0
            let result = __unwrapped__instance.IndexOf(value, &index)
            $2?.initialize(to: index)
            $3?.initialize(to: .init(from: result))
            return S_OK
        },

        GetMany: { _, _, _, _, _ in return failWith(err: E_NOTIMPL) }
    )
    typealias __x_ABI_C__FIVectorView_1_HSTRINGWrapper = InterfaceWrapperBase<__IMPL_test_component.__x_ABI_C__FIVectorView_1_HSTRINGImpl>
    internal class IVectorViewString: test_component.IInspectable {
        override public class var IID: IID { IID___x_ABI_C__FIVectorView_1_HSTRING }

        internal func GetAtImpl(_ index: UINT32) throws -> HSTRING? {
            var result: HSTRING?
            _ = try perform(as: __x_ABI_C__FIVectorView_1_HSTRING.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetAt(pThis, index, &result))
            }
            return result
        }

        internal func get_SizeImpl() throws -> UINT32 {
            var result: UINT32 = 0
            _ = try perform(as: __x_ABI_C__FIVectorView_1_HSTRING.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Size(pThis, &result))
            }
            return result
        }

        internal func IndexOfImpl(_ value: HSTRING?, _ index: inout UINT32) throws -> boolean {
            var result: boolean = 0
            _ = try perform(as: __x_ABI_C__FIVectorView_1_HSTRING.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.IndexOf(pThis, value, &index, &result))
            }
            return result
        }

    }

    internal static var __x_ABI_C__FIVectorView_1___x_ABI_Ctest__zcomponent__CBaseVTable: __x_ABI_C__FIVectorView_1___x_ABI_Ctest__zcomponent__CBaseVtbl = .init(
        QueryInterface: {
            guard let pUnk = $0, let riid = $1, let ppvObject = $2 else { return E_INVALIDARG }

            guard riid.pointee == IUnknown.IID ||
                  riid.pointee == IInspectable.IID || 
                  riid.pointee == ISwiftImplemented.IID ||
                  riid.pointee == IIAgileObject.IID ||
                  riid.pointee == __ABI_test_component.__x_ABI_C__FIVectorView_1___x_ABI_Ctest__zcomponent__CBaseWrapper.IID else { 
                ppvObject.pointee = nil
                        return E_NOINTERFACE

            }
            _ = pUnk.pointee.lpVtbl.pointee.AddRef(pUnk)
            ppvObject.pointee = UnsafeMutableRawPointer(pUnk)
            return S_OK
        },

        AddRef: {
             guard let wrapper = __x_ABI_C__FIVectorView_1___x_ABI_Ctest__zcomponent__CBaseWrapper.from_raw($0) else { return 1 }
             _ = wrapper.retain()
             return ULONG(_getRetainCount(wrapper.takeUnretainedValue().swiftObj))
        },

        Release: {
            guard let wrapper = __x_ABI_C__FIVectorView_1___x_ABI_Ctest__zcomponent__CBaseWrapper.from_raw($0) else { return 1 }
            return ULONG(_getRetainCount(wrapper.takeRetainedValue()))
        },

        GetIids: {
            let size = MemoryLayout<IID>.size
            let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: IID.self)
            iids[0] = IUnknown.IID
            iids[1] = IInspectable.IID
            iids[2] = __ABI_test_component.__x_ABI_C__FIVectorView_1___x_ABI_Ctest__zcomponent__CBaseWrapper.IID
            $1!.pointee = 3
            $2!.pointee = iids
            return S_OK
        },

        GetRuntimeClassName: {
            _ = $0
            let hstring = try! HString("Windows.Foundation.Collections.IVectorView`1<test_component.Base>").detach()
            $1!.pointee = hstring
            return S_OK
        },

        GetTrustLevel: {
            _ = $0
            $1!.pointee = TrustLevel(rawValue: 0)
            return S_OK
        },

        GetAt: {
            guard let __unwrapped__instance = __x_ABI_C__FIVectorView_1___x_ABI_Ctest__zcomponent__CBaseWrapper.try_unwrap_from(raw: $0) else { return E_INVALIDARG }
            let index: UInt32 = $1
            let result = __unwrapped__instance.GetAt(index)
            $2?.initialize(to: RawPointer(result))
            return S_OK
        },

        get_Size: {
            guard let __unwrapped__instance = __x_ABI_C__FIVectorView_1___x_ABI_Ctest__zcomponent__CBaseWrapper.try_unwrap_from(raw: $0) else { return E_INVALIDARG }
            let result = __unwrapped__instance.Size
            $1?.initialize(to: result)
            return S_OK
        },

        IndexOf: {
            guard let __unwrapped__instance = __x_ABI_C__FIVectorView_1___x_ABI_Ctest__zcomponent__CBaseWrapper.try_unwrap_from(raw: $0) else { return E_INVALIDARG }
            let value: test_component.Base? = .from(abi: $1)
            var index: UInt32 = 0
            let result = __unwrapped__instance.IndexOf(value, &index)
            $2?.initialize(to: index)
            $3?.initialize(to: .init(from: result))
            return S_OK
        },

        GetMany: { _, _, _, _, _ in return failWith(err: E_NOTIMPL) }
    )
    typealias __x_ABI_C__FIVectorView_1___x_ABI_Ctest__zcomponent__CBaseWrapper = InterfaceWrapperBase<__IMPL_test_component.__x_ABI_C__FIVectorView_1___x_ABI_Ctest__zcomponent__CBaseImpl>
    internal class IVectorViewBase: test_component.IInspectable {
        override public class var IID: IID { IID___x_ABI_C__FIVectorView_1___x_ABI_Ctest__zcomponent__CBase }

        internal func GetAtImpl(_ index: UINT32) throws -> UnsafeMutablePointer<__x_ABI_Ctest__component_CIBase>? {
            var result: UnsafeMutablePointer<__x_ABI_Ctest__component_CIBase>?
            _ = try perform(as: __x_ABI_C__FIVectorView_1___x_ABI_Ctest__zcomponent__CBase.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetAt(pThis, index, &result))
            }
            return result
        }

        internal func get_SizeImpl() throws -> UINT32 {
            var result: UINT32 = 0
            _ = try perform(as: __x_ABI_C__FIVectorView_1___x_ABI_Ctest__zcomponent__CBase.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Size(pThis, &result))
            }
            return result
        }

        internal func IndexOfImpl(_ value: UnsafeMutablePointer<__x_ABI_Ctest__component_CIBase>?, _ index: inout UINT32) throws -> boolean {
            var result: boolean = 0
            _ = try perform(as: __x_ABI_C__FIVectorView_1___x_ABI_Ctest__zcomponent__CBase.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.IndexOf(pThis, value, &index, &result))
            }
            return result
        }

    }

    internal static var __x_ABI_C__FIVector_1_HSTRINGVTable: __x_ABI_C__FIVector_1_HSTRINGVtbl = .init(
        QueryInterface: {
            guard let pUnk = $0, let riid = $1, let ppvObject = $2 else { return E_INVALIDARG }

            guard riid.pointee == IUnknown.IID ||
                  riid.pointee == IInspectable.IID || 
                  riid.pointee == ISwiftImplemented.IID ||
                  riid.pointee == IIAgileObject.IID ||
                  riid.pointee == __ABI_test_component.__x_ABI_C__FIVector_1_HSTRINGWrapper.IID else { 
                ppvObject.pointee = nil
                        return E_NOINTERFACE

            }
            _ = pUnk.pointee.lpVtbl.pointee.AddRef(pUnk)
            ppvObject.pointee = UnsafeMutableRawPointer(pUnk)
            return S_OK
        },

        AddRef: {
             guard let wrapper = __x_ABI_C__FIVector_1_HSTRINGWrapper.from_raw($0) else { return 1 }
             _ = wrapper.retain()
             return ULONG(_getRetainCount(wrapper.takeUnretainedValue().swiftObj))
        },

        Release: {
            guard let wrapper = __x_ABI_C__FIVector_1_HSTRINGWrapper.from_raw($0) else { return 1 }
            return ULONG(_getRetainCount(wrapper.takeRetainedValue()))
        },

        GetIids: {
            let size = MemoryLayout<IID>.size
            let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: IID.self)
            iids[0] = IUnknown.IID
            iids[1] = IInspectable.IID
            iids[2] = __ABI_test_component.__x_ABI_C__FIVector_1_HSTRINGWrapper.IID
            $1!.pointee = 3
            $2!.pointee = iids
            return S_OK
        },

        GetRuntimeClassName: {
            _ = $0
            let hstring = try! HString("Windows.Foundation.Collections.IVector`1<String>").detach()
            $1!.pointee = hstring
            return S_OK
        },

        GetTrustLevel: {
            _ = $0
            $1!.pointee = TrustLevel(rawValue: 0)
            return S_OK
        },

        GetAt: {
            guard let __unwrapped__instance = __x_ABI_C__FIVector_1_HSTRINGWrapper.try_unwrap_from(raw: $0) else { return E_INVALIDARG }
            let index: UInt32 = $1
            let result = __unwrapped__instance.GetAt(index)
            $2?.initialize(to: try! HString(result).detach())
            return S_OK
        },

        get_Size: {
            guard let __unwrapped__instance = __x_ABI_C__FIVector_1_HSTRINGWrapper.try_unwrap_from(raw: $0) else { return E_INVALIDARG }
            let result = __unwrapped__instance.Size
            $1?.initialize(to: result)
            return S_OK
        },

        GetView: {
            guard let __unwrapped__instance = __x_ABI_C__FIVector_1_HSTRINGWrapper.try_unwrap_from(raw: $0) else { return E_INVALIDARG }
            let result = __unwrapped__instance.GetView()
            let resultWrapper = __ABI_test_component.__x_ABI_C__FIVectorView_1_HSTRINGWrapper(result)
            let _result = try! resultWrapper?.to_abi { $0 }
            $1?.initialize(to: _result)
            return S_OK
        },

        IndexOf: {
            guard let __unwrapped__instance = __x_ABI_C__FIVector_1_HSTRINGWrapper.try_unwrap_from(raw: $0) else { return E_INVALIDARG }
            let value: String = .init(from: $1)
            var index: UInt32 = 0
            let result = __unwrapped__instance.IndexOf(value, &index)
            $2?.initialize(to: index)
            $3?.initialize(to: .init(from: result))
            return S_OK
        },

        SetAt: {
            guard let __unwrapped__instance = __x_ABI_C__FIVector_1_HSTRINGWrapper.try_unwrap_from(raw: $0) else { return E_INVALIDARG }
            let index: UInt32 = $1
            let value: String = .init(from: $2)
            __unwrapped__instance.SetAt(index, value)
            return S_OK
        },

        InsertAt: {
            guard let __unwrapped__instance = __x_ABI_C__FIVector_1_HSTRINGWrapper.try_unwrap_from(raw: $0) else { return E_INVALIDARG }
            let index: UInt32 = $1
            let value: String = .init(from: $2)
            __unwrapped__instance.InsertAt(index, value)
            return S_OK
        },

        RemoveAt: {
            guard let __unwrapped__instance = __x_ABI_C__FIVector_1_HSTRINGWrapper.try_unwrap_from(raw: $0) else { return E_INVALIDARG }
            let index: UInt32 = $1
            __unwrapped__instance.RemoveAt(index)
            return S_OK
        },

        Append: {
            guard let __unwrapped__instance = __x_ABI_C__FIVector_1_HSTRINGWrapper.try_unwrap_from(raw: $0) else { return E_INVALIDARG }
            let value: String = .init(from: $1)
            __unwrapped__instance.Append(value)
            return S_OK
        },

        RemoveAtEnd: {
            guard let __unwrapped__instance = __x_ABI_C__FIVector_1_HSTRINGWrapper.try_unwrap_from(raw: $0) else { return E_INVALIDARG }
            __unwrapped__instance.RemoveAtEnd()
            return S_OK
        },

        Clear: {
            guard let __unwrapped__instance = __x_ABI_C__FIVector_1_HSTRINGWrapper.try_unwrap_from(raw: $0) else { return E_INVALIDARG }
            __unwrapped__instance.Clear()
            return S_OK
        },

        GetMany: { _, _, _, _, _ in return failWith(err: E_NOTIMPL) },

        ReplaceAll: { _, _, _ in return failWith(err: E_NOTIMPL) }
    )
    typealias __x_ABI_C__FIVector_1_HSTRINGWrapper = InterfaceWrapperBase<__IMPL_test_component.__x_ABI_C__FIVector_1_HSTRINGImpl>
    internal class IVectorString: test_component.IInspectable {
        override public class var IID: IID { IID___x_ABI_C__FIVector_1_HSTRING }

        internal func GetAtImpl(_ index: UINT32) throws -> HSTRING? {
            var result: HSTRING?
            _ = try perform(as: __x_ABI_C__FIVector_1_HSTRING.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetAt(pThis, index, &result))
            }
            return result
        }

        internal func get_SizeImpl() throws -> UINT32 {
            var result: UINT32 = 0
            _ = try perform(as: __x_ABI_C__FIVector_1_HSTRING.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Size(pThis, &result))
            }
            return result
        }

        internal func GetViewImpl() throws -> UnsafeMutablePointer<__x_ABI_C__FIVectorView_1_HSTRING>? {
            var result: UnsafeMutablePointer<__x_ABI_C__FIVectorView_1_HSTRING>?
            _ = try perform(as: __x_ABI_C__FIVector_1_HSTRING.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetView(pThis, &result))
            }
            return result
        }

        internal func IndexOfImpl(_ value: HSTRING?, _ index: inout UINT32) throws -> boolean {
            var result: boolean = 0
            _ = try perform(as: __x_ABI_C__FIVector_1_HSTRING.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.IndexOf(pThis, value, &index, &result))
            }
            return result
        }

        internal func SetAtImpl(_ index: UINT32, _ value: HSTRING?) throws {
            _ = try perform(as: __x_ABI_C__FIVector_1_HSTRING.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.SetAt(pThis, index, value))
            }
        }

        internal func InsertAtImpl(_ index: UINT32, _ value: HSTRING?) throws {
            _ = try perform(as: __x_ABI_C__FIVector_1_HSTRING.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.InsertAt(pThis, index, value))
            }
        }

        internal func RemoveAtImpl(_ index: UINT32) throws {
            _ = try perform(as: __x_ABI_C__FIVector_1_HSTRING.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.RemoveAt(pThis, index))
            }
        }

        internal func AppendImpl(_ value: HSTRING?) throws {
            _ = try perform(as: __x_ABI_C__FIVector_1_HSTRING.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Append(pThis, value))
            }
        }

        internal func RemoveAtEndImpl() throws {
            _ = try perform(as: __x_ABI_C__FIVector_1_HSTRING.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.RemoveAtEnd(pThis))
            }
        }

        internal func ClearImpl() throws {
            _ = try perform(as: __x_ABI_C__FIVector_1_HSTRING.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Clear(pThis))
            }
        }

    }

    internal static var __x_ABI_C__FIVector_1___x_ABI_Ctest__zcomponent__CBaseVTable: __x_ABI_C__FIVector_1___x_ABI_Ctest__zcomponent__CBaseVtbl = .init(
        QueryInterface: {
            guard let pUnk = $0, let riid = $1, let ppvObject = $2 else { return E_INVALIDARG }

            guard riid.pointee == IUnknown.IID ||
                  riid.pointee == IInspectable.IID || 
                  riid.pointee == ISwiftImplemented.IID ||
                  riid.pointee == IIAgileObject.IID ||
                  riid.pointee == __ABI_test_component.__x_ABI_C__FIVector_1___x_ABI_Ctest__zcomponent__CBaseWrapper.IID else { 
                ppvObject.pointee = nil
                        return E_NOINTERFACE

            }
            _ = pUnk.pointee.lpVtbl.pointee.AddRef(pUnk)
            ppvObject.pointee = UnsafeMutableRawPointer(pUnk)
            return S_OK
        },

        AddRef: {
             guard let wrapper = __x_ABI_C__FIVector_1___x_ABI_Ctest__zcomponent__CBaseWrapper.from_raw($0) else { return 1 }
             _ = wrapper.retain()
             return ULONG(_getRetainCount(wrapper.takeUnretainedValue().swiftObj))
        },

        Release: {
            guard let wrapper = __x_ABI_C__FIVector_1___x_ABI_Ctest__zcomponent__CBaseWrapper.from_raw($0) else { return 1 }
            return ULONG(_getRetainCount(wrapper.takeRetainedValue()))
        },

        GetIids: {
            let size = MemoryLayout<IID>.size
            let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: IID.self)
            iids[0] = IUnknown.IID
            iids[1] = IInspectable.IID
            iids[2] = __ABI_test_component.__x_ABI_C__FIVector_1___x_ABI_Ctest__zcomponent__CBaseWrapper.IID
            $1!.pointee = 3
            $2!.pointee = iids
            return S_OK
        },

        GetRuntimeClassName: {
            _ = $0
            let hstring = try! HString("Windows.Foundation.Collections.IVector`1<test_component.Base>").detach()
            $1!.pointee = hstring
            return S_OK
        },

        GetTrustLevel: {
            _ = $0
            $1!.pointee = TrustLevel(rawValue: 0)
            return S_OK
        },

        GetAt: {
            guard let __unwrapped__instance = __x_ABI_C__FIVector_1___x_ABI_Ctest__zcomponent__CBaseWrapper.try_unwrap_from(raw: $0) else { return E_INVALIDARG }
            let index: UInt32 = $1
            let result = __unwrapped__instance.GetAt(index)
            $2?.initialize(to: RawPointer(result))
            return S_OK
        },

        get_Size: {
            guard let __unwrapped__instance = __x_ABI_C__FIVector_1___x_ABI_Ctest__zcomponent__CBaseWrapper.try_unwrap_from(raw: $0) else { return E_INVALIDARG }
            let result = __unwrapped__instance.Size
            $1?.initialize(to: result)
            return S_OK
        },

        GetView: {
            guard let __unwrapped__instance = __x_ABI_C__FIVector_1___x_ABI_Ctest__zcomponent__CBaseWrapper.try_unwrap_from(raw: $0) else { return E_INVALIDARG }
            let result = __unwrapped__instance.GetView()
            let resultWrapper = __ABI_test_component.__x_ABI_C__FIVectorView_1___x_ABI_Ctest__zcomponent__CBaseWrapper(result)
            let _result = try! resultWrapper?.to_abi { $0 }
            $1?.initialize(to: _result)
            return S_OK
        },

        IndexOf: {
            guard let __unwrapped__instance = __x_ABI_C__FIVector_1___x_ABI_Ctest__zcomponent__CBaseWrapper.try_unwrap_from(raw: $0) else { return E_INVALIDARG }
            let value: test_component.Base? = .from(abi: $1)
            var index: UInt32 = 0
            let result = __unwrapped__instance.IndexOf(value, &index)
            $2?.initialize(to: index)
            $3?.initialize(to: .init(from: result))
            return S_OK
        },

        SetAt: {
            guard let __unwrapped__instance = __x_ABI_C__FIVector_1___x_ABI_Ctest__zcomponent__CBaseWrapper.try_unwrap_from(raw: $0) else { return E_INVALIDARG }
            let index: UInt32 = $1
            let value: test_component.Base? = .from(abi: $2)
            __unwrapped__instance.SetAt(index, value)
            return S_OK
        },

        InsertAt: {
            guard let __unwrapped__instance = __x_ABI_C__FIVector_1___x_ABI_Ctest__zcomponent__CBaseWrapper.try_unwrap_from(raw: $0) else { return E_INVALIDARG }
            let index: UInt32 = $1
            let value: test_component.Base? = .from(abi: $2)
            __unwrapped__instance.InsertAt(index, value)
            return S_OK
        },

        RemoveAt: {
            guard let __unwrapped__instance = __x_ABI_C__FIVector_1___x_ABI_Ctest__zcomponent__CBaseWrapper.try_unwrap_from(raw: $0) else { return E_INVALIDARG }
            let index: UInt32 = $1
            __unwrapped__instance.RemoveAt(index)
            return S_OK
        },

        Append: {
            guard let __unwrapped__instance = __x_ABI_C__FIVector_1___x_ABI_Ctest__zcomponent__CBaseWrapper.try_unwrap_from(raw: $0) else { return E_INVALIDARG }
            let value: test_component.Base? = .from(abi: $1)
            __unwrapped__instance.Append(value)
            return S_OK
        },

        RemoveAtEnd: {
            guard let __unwrapped__instance = __x_ABI_C__FIVector_1___x_ABI_Ctest__zcomponent__CBaseWrapper.try_unwrap_from(raw: $0) else { return E_INVALIDARG }
            __unwrapped__instance.RemoveAtEnd()
            return S_OK
        },

        Clear: {
            guard let __unwrapped__instance = __x_ABI_C__FIVector_1___x_ABI_Ctest__zcomponent__CBaseWrapper.try_unwrap_from(raw: $0) else { return E_INVALIDARG }
            __unwrapped__instance.Clear()
            return S_OK
        },

        GetMany: { _, _, _, _, _ in return failWith(err: E_NOTIMPL) },

        ReplaceAll: { _, _, _ in return failWith(err: E_NOTIMPL) }
    )
    typealias __x_ABI_C__FIVector_1___x_ABI_Ctest__zcomponent__CBaseWrapper = InterfaceWrapperBase<__IMPL_test_component.__x_ABI_C__FIVector_1___x_ABI_Ctest__zcomponent__CBaseImpl>
    internal class IVectorBase: test_component.IInspectable {
        override public class var IID: IID { IID___x_ABI_C__FIVector_1___x_ABI_Ctest__zcomponent__CBase }

        internal func GetAtImpl(_ index: UINT32) throws -> UnsafeMutablePointer<__x_ABI_Ctest__component_CIBase>? {
            var result: UnsafeMutablePointer<__x_ABI_Ctest__component_CIBase>?
            _ = try perform(as: __x_ABI_C__FIVector_1___x_ABI_Ctest__zcomponent__CBase.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetAt(pThis, index, &result))
            }
            return result
        }

        internal func get_SizeImpl() throws -> UINT32 {
            var result: UINT32 = 0
            _ = try perform(as: __x_ABI_C__FIVector_1___x_ABI_Ctest__zcomponent__CBase.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Size(pThis, &result))
            }
            return result
        }

        internal func GetViewImpl() throws -> UnsafeMutablePointer<__x_ABI_C__FIVectorView_1___x_ABI_Ctest__zcomponent__CBase>? {
            var result: UnsafeMutablePointer<__x_ABI_C__FIVectorView_1___x_ABI_Ctest__zcomponent__CBase>?
            _ = try perform(as: __x_ABI_C__FIVector_1___x_ABI_Ctest__zcomponent__CBase.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetView(pThis, &result))
            }
            return result
        }

        internal func IndexOfImpl(_ value: UnsafeMutablePointer<__x_ABI_Ctest__component_CIBase>?, _ index: inout UINT32) throws -> boolean {
            var result: boolean = 0
            _ = try perform(as: __x_ABI_C__FIVector_1___x_ABI_Ctest__zcomponent__CBase.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.IndexOf(pThis, value, &index, &result))
            }
            return result
        }

        internal func SetAtImpl(_ index: UINT32, _ value: UnsafeMutablePointer<__x_ABI_Ctest__component_CIBase>?) throws {
            _ = try perform(as: __x_ABI_C__FIVector_1___x_ABI_Ctest__zcomponent__CBase.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.SetAt(pThis, index, value))
            }
        }

        internal func InsertAtImpl(_ index: UINT32, _ value: UnsafeMutablePointer<__x_ABI_Ctest__component_CIBase>?) throws {
            _ = try perform(as: __x_ABI_C__FIVector_1___x_ABI_Ctest__zcomponent__CBase.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.InsertAt(pThis, index, value))
            }
        }

        internal func RemoveAtImpl(_ index: UINT32) throws {
            _ = try perform(as: __x_ABI_C__FIVector_1___x_ABI_Ctest__zcomponent__CBase.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.RemoveAt(pThis, index))
            }
        }

        internal func AppendImpl(_ value: UnsafeMutablePointer<__x_ABI_Ctest__component_CIBase>?) throws {
            _ = try perform(as: __x_ABI_C__FIVector_1___x_ABI_Ctest__zcomponent__CBase.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Append(pThis, value))
            }
        }

        internal func RemoveAtEndImpl() throws {
            _ = try perform(as: __x_ABI_C__FIVector_1___x_ABI_Ctest__zcomponent__CBase.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.RemoveAtEnd(pThis))
            }
        }

        internal func ClearImpl() throws {
            _ = try perform(as: __x_ABI_C__FIVector_1___x_ABI_Ctest__zcomponent__CBase.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Clear(pThis))
            }
        }

    }

    internal static var __x_ABI_C__FIEventHandler_1_IInspectableVTable: __x_ABI_C__FIEventHandler_1_IInspectableVtbl = .init(
        QueryInterface: {
            guard let pUnk = $0, let riid = $1, let ppvObject = $2 else { return E_INVALIDARG }

            guard riid.pointee == IUnknown.IID ||
                  riid.pointee == IInspectable.IID || 
                  riid.pointee == ISwiftImplemented.IID ||
                  riid.pointee == IIAgileObject.IID ||
                  riid.pointee == __ABI_test_component.__x_ABI_C__FIEventHandler_1_IInspectableWrapper.IID else { 
                ppvObject.pointee = nil
                        return E_NOINTERFACE

            }
            _ = pUnk.pointee.lpVtbl.pointee.AddRef(pUnk)
            ppvObject.pointee = UnsafeMutableRawPointer(pUnk)
            return S_OK
        },

        AddRef: {
             guard let wrapper = __x_ABI_C__FIEventHandler_1_IInspectableWrapper.from_raw($0) else { return 1 }
             _ = wrapper.retain()
             return ULONG(_getRetainCount(wrapper.takeUnretainedValue().swiftObj))
        },

        Release: {
            guard let wrapper = __x_ABI_C__FIEventHandler_1_IInspectableWrapper.from_raw($0) else { return 1 }
            return ULONG(_getRetainCount(wrapper.takeRetainedValue()))
        },

        Invoke: {
            guard let __unwrapped__instance = __x_ABI_C__FIEventHandler_1_IInspectableWrapper.try_unwrap_from(raw: $0) else { return E_INVALIDARG }
            let sender: test_component.IInspectable? = .from($1)
            let args: test_component.IInspectable? = .from($2)
            __unwrapped__instance.handler((sender, args))
            return S_OK
        }
    )

    class __x_ABI_C__FIEventHandler_1_IInspectableWrapper : WinRTWrapperBase<__x_ABI_C__FIEventHandler_1_IInspectable, __IMPL_test_component.__x_ABI_C__FIEventHandler_1_IInspectableImpl> {
        override class var IID: IID { IID___x_ABI_C__FIEventHandler_1_IInspectable }
        init?(_ handler: __IMPL_test_component.__x_ABI_C__FIEventHandler_1_IInspectableImpl?){
            guard let handler = handler else { return nil }
            let abi = withUnsafeMutablePointer(to: &__x_ABI_C__FIEventHandler_1_IInspectableVTable) {
                __x_ABI_C__FIEventHandler_1_IInspectable(lpVtbl:$0)
            }
            super.init(abi, handler)
        }
    }
    internal static var __x_ABI_C__FIReference_1_intVTable: __x_ABI_C__FIReference_1_intVtbl = .init(
        QueryInterface: {
            guard let pUnk = $0, let riid = $1, let ppvObject = $2 else { return E_INVALIDARG }
            if riid.pointee == __ABI_Windows_Foundation.IPropertyValueWrapper.IID {
                guard let instance = __x_ABI_C__FIReference_1_intWrapper.try_unwrap_from(raw: pUnk) else { return E_NOINTERFACE }
                guard let inner = __ABI_Windows_Foundation.IPropertyValueWrapper(instance) else { return E_INVALIDARG }
                let pThis = try! inner.to_abi { $0 }
                return pThis.pointee.lpVtbl.pointee.QueryInterface(pThis, riid, ppvObject)
            }

            guard riid.pointee == IUnknown.IID ||
                  riid.pointee == IInspectable.IID || 
                  riid.pointee == ISwiftImplemented.IID ||
                  riid.pointee == IIAgileObject.IID ||
                  riid.pointee == __ABI_test_component.__x_ABI_C__FIReference_1_intWrapper.IID else { 
                ppvObject.pointee = nil
                        return E_NOINTERFACE

            }
            _ = pUnk.pointee.lpVtbl.pointee.AddRef(pUnk)
            ppvObject.pointee = UnsafeMutableRawPointer(pUnk)
            return S_OK
        },

        AddRef: {
             guard let wrapper = __x_ABI_C__FIReference_1_intWrapper.from_raw($0) else { return 1 }
             _ = wrapper.retain()
             return ULONG(_getRetainCount(wrapper.takeUnretainedValue().swiftObj))
        },

        Release: {
            guard let wrapper = __x_ABI_C__FIReference_1_intWrapper.from_raw($0) else { return 1 }
            return ULONG(_getRetainCount(wrapper.takeRetainedValue()))
        },

        GetIids: {
            let size = MemoryLayout<IID>.size
            let iids = CoTaskMemAlloc(UInt64(size) * 4).assumingMemoryBound(to: IID.self)
            iids[0] = IUnknown.IID
            iids[1] = IInspectable.IID
            iids[2] = __ABI_test_component.__x_ABI_C__FIReference_1_intWrapper.IID
            iids[3] = __ABI_Windows_Foundation.IPropertyValueWrapper.IID
            $1!.pointee = 4
            $2!.pointee = iids
            return S_OK
        },

        GetRuntimeClassName: {
            _ = $0
            let hstring = try! HString("Windows.Foundation.IReference`1<Int32>").detach()
            $1!.pointee = hstring
            return S_OK
        },

        GetTrustLevel: {
            _ = $0
            $1!.pointee = TrustLevel(rawValue: 0)
            return S_OK
        },

        get_Value: {
            guard let __unwrapped__instance = __x_ABI_C__FIReference_1_intWrapper.try_unwrap_from(raw: $0) else { return E_INVALIDARG }
            let result = __unwrapped__instance.Value as! Int32
            $1?.initialize(to: result)
            return S_OK
        }
    )
    internal class __x_ABI_C__FIReference_1_intWrapper: WinRTWrapperBase<__x_ABI_C__FIReference_1_int, IReference> {
        override class var IID: IID { IID___x_ABI_C__FIReference_1_int }
        init?(_ value: Int32?) {
            guard let value = value else { return nil }
            let abi = withUnsafeMutablePointer(to: &__x_ABI_C__FIReference_1_intVTable) {
                __x_ABI_C__FIReference_1_int(lpVtbl:$0)
            }
            super.init(abi, __IMPL_Windows_Foundation.IPropertyValueImpl(value: value))
        }
    }
    internal static var __x_ABI_C__FIReference_1_GUIDVTable: __x_ABI_C__FIReference_1_GUIDVtbl = .init(
        QueryInterface: {
            guard let pUnk = $0, let riid = $1, let ppvObject = $2 else { return E_INVALIDARG }
            if riid.pointee == __ABI_Windows_Foundation.IPropertyValueWrapper.IID {
                guard let instance = __x_ABI_C__FIReference_1_GUIDWrapper.try_unwrap_from(raw: pUnk) else { return E_NOINTERFACE }
                guard let inner = __ABI_Windows_Foundation.IPropertyValueWrapper(instance) else { return E_INVALIDARG }
                let pThis = try! inner.to_abi { $0 }
                return pThis.pointee.lpVtbl.pointee.QueryInterface(pThis, riid, ppvObject)
            }

            guard riid.pointee == IUnknown.IID ||
                  riid.pointee == IInspectable.IID || 
                  riid.pointee == ISwiftImplemented.IID ||
                  riid.pointee == IIAgileObject.IID ||
                  riid.pointee == __ABI_test_component.__x_ABI_C__FIReference_1_GUIDWrapper.IID else { 
                ppvObject.pointee = nil
                        return E_NOINTERFACE

            }
            _ = pUnk.pointee.lpVtbl.pointee.AddRef(pUnk)
            ppvObject.pointee = UnsafeMutableRawPointer(pUnk)
            return S_OK
        },

        AddRef: {
             guard let wrapper = __x_ABI_C__FIReference_1_GUIDWrapper.from_raw($0) else { return 1 }
             _ = wrapper.retain()
             return ULONG(_getRetainCount(wrapper.takeUnretainedValue().swiftObj))
        },

        Release: {
            guard let wrapper = __x_ABI_C__FIReference_1_GUIDWrapper.from_raw($0) else { return 1 }
            return ULONG(_getRetainCount(wrapper.takeRetainedValue()))
        },

        GetIids: {
            let size = MemoryLayout<IID>.size
            let iids = CoTaskMemAlloc(UInt64(size) * 4).assumingMemoryBound(to: IID.self)
            iids[0] = IUnknown.IID
            iids[1] = IInspectable.IID
            iids[2] = __ABI_test_component.__x_ABI_C__FIReference_1_GUIDWrapper.IID
            iids[3] = __ABI_Windows_Foundation.IPropertyValueWrapper.IID
            $1!.pointee = 4
            $2!.pointee = iids
            return S_OK
        },

        GetRuntimeClassName: {
            _ = $0
            let hstring = try! HString("Windows.Foundation.IReference`1<UUID>").detach()
            $1!.pointee = hstring
            return S_OK
        },

        GetTrustLevel: {
            _ = $0
            $1!.pointee = TrustLevel(rawValue: 0)
            return S_OK
        },

        get_Value: {
            guard let __unwrapped__instance = __x_ABI_C__FIReference_1_GUIDWrapper.try_unwrap_from(raw: $0) else { return E_INVALIDARG }
            let result = __unwrapped__instance.Value as! UUID
            $1?.initialize(to: result)
            return S_OK
        }
    )
    internal class __x_ABI_C__FIReference_1_GUIDWrapper: WinRTWrapperBase<__x_ABI_C__FIReference_1_GUID, IReference> {
        override class var IID: IID { IID___x_ABI_C__FIReference_1_GUID }
        init?(_ value: UUID?) {
            guard let value = value else { return nil }
            let abi = withUnsafeMutablePointer(to: &__x_ABI_C__FIReference_1_GUIDVTable) {
                __x_ABI_C__FIReference_1_GUID(lpVtbl:$0)
            }
            super.init(abi, __IMPL_Windows_Foundation.IPropertyValueImpl(value: value))
        }
    }
    internal static var __x_ABI_C__FITypedEventHandler_2___x_ABI_Ctest__zcomponent__CSimple___x_ABI_Ctest__zcomponent__CSimpleEventArgsVTable: __x_ABI_C__FITypedEventHandler_2___x_ABI_Ctest__zcomponent__CSimple___x_ABI_Ctest__zcomponent__CSimpleEventArgsVtbl = .init(
        QueryInterface: {
            guard let pUnk = $0, let riid = $1, let ppvObject = $2 else { return E_INVALIDARG }

            guard riid.pointee == IUnknown.IID ||
                  riid.pointee == IInspectable.IID || 
                  riid.pointee == ISwiftImplemented.IID ||
                  riid.pointee == IIAgileObject.IID ||
                  riid.pointee == __ABI_test_component.__x_ABI_C__FITypedEventHandler_2___x_ABI_Ctest__zcomponent__CSimple___x_ABI_Ctest__zcomponent__CSimpleEventArgsWrapper.IID else { 
                ppvObject.pointee = nil
                        return E_NOINTERFACE

            }
            _ = pUnk.pointee.lpVtbl.pointee.AddRef(pUnk)
            ppvObject.pointee = UnsafeMutableRawPointer(pUnk)
            return S_OK
        },

        AddRef: {
             guard let wrapper = __x_ABI_C__FITypedEventHandler_2___x_ABI_Ctest__zcomponent__CSimple___x_ABI_Ctest__zcomponent__CSimpleEventArgsWrapper.from_raw($0) else { return 1 }
             _ = wrapper.retain()
             return ULONG(_getRetainCount(wrapper.takeUnretainedValue().swiftObj))
        },

        Release: {
            guard let wrapper = __x_ABI_C__FITypedEventHandler_2___x_ABI_Ctest__zcomponent__CSimple___x_ABI_Ctest__zcomponent__CSimpleEventArgsWrapper.from_raw($0) else { return 1 }
            return ULONG(_getRetainCount(wrapper.takeRetainedValue()))
        },

        Invoke: {
            guard let __unwrapped__instance = __x_ABI_C__FITypedEventHandler_2___x_ABI_Ctest__zcomponent__CSimple___x_ABI_Ctest__zcomponent__CSimpleEventArgsWrapper.try_unwrap_from(raw: $0) else { return E_INVALIDARG }
            let sender: test_component.Simple? = .from(abi: $1)
            let args: test_component.SimpleEventArgs = .from(abi: $2)
            __unwrapped__instance.handler((sender, args))
            return S_OK
        }
    )

    class __x_ABI_C__FITypedEventHandler_2___x_ABI_Ctest__zcomponent__CSimple___x_ABI_Ctest__zcomponent__CSimpleEventArgsWrapper : WinRTWrapperBase<__x_ABI_C__FITypedEventHandler_2___x_ABI_Ctest__zcomponent__CSimple___x_ABI_Ctest__zcomponent__CSimpleEventArgs, __IMPL_test_component.__x_ABI_C__FITypedEventHandler_2___x_ABI_Ctest__zcomponent__CSimple___x_ABI_Ctest__zcomponent__CSimpleEventArgsImpl> {
        override class var IID: IID { IID___x_ABI_C__FITypedEventHandler_2___x_ABI_Ctest__zcomponent__CSimple___x_ABI_Ctest__zcomponent__CSimpleEventArgs }
        init?(_ handler: __IMPL_test_component.__x_ABI_C__FITypedEventHandler_2___x_ABI_Ctest__zcomponent__CSimple___x_ABI_Ctest__zcomponent__CSimpleEventArgsImpl?){
            guard let handler = handler else { return nil }
            let abi = withUnsafeMutablePointer(to: &__x_ABI_C__FITypedEventHandler_2___x_ABI_Ctest__zcomponent__CSimple___x_ABI_Ctest__zcomponent__CSimpleEventArgsVTable) {
                __x_ABI_C__FITypedEventHandler_2___x_ABI_Ctest__zcomponent__CSimple___x_ABI_Ctest__zcomponent__CSimpleEventArgs(lpVtbl:$0)
            }
            super.init(abi, handler)
        }
    }
    open class IBase: test_component.IInspectable {
        override public class var IID: IID { IID___x_ABI_Ctest__component_CIBase }

        internal func DoTheThingImpl() throws {
            _ = try perform(as: __x_ABI_Ctest__component_CIBase.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.DoTheThing(pThis))
            }
        }

    }

    open class IBaseNoOverrides: test_component.IInspectable {
        override public class var IID: IID { IID___x_ABI_Ctest__component_CIBaseNoOverrides }

    }

    internal class IBaseNoOverridesProtectedFactory: test_component.IInspectable, ComposableActivationFactory {
        internal typealias Composable = test_component.BaseNoOverrides.Composable

        override public class var IID: IID { IID___x_ABI_Ctest__component_CIBaseNoOverridesProtectedFactory }

        internal func CreateInstanceImpl(_ baseInterface: UnsafeMutablePointer<Ctest_component.IInspectable>?, _ innerInterface: inout UnsafeMutablePointer<Ctest_component.IInspectable>?) throws -> UnsafeMutablePointer<__x_ABI_Ctest__component_CIBaseNoOverrides>? {
            var value: UnsafeMutablePointer<__x_ABI_Ctest__component_CIBaseNoOverrides>?
            _ = try perform(as: __x_ABI_Ctest__component_CIBaseNoOverridesProtectedFactory.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance(pThis, baseInterface, &innerInterface, &value))
            }
            return value
        }

    }

    open class IBaseOverrides: test_component.IInspectable {
        override public class var IID: IID { IID___x_ABI_Ctest__component_CIBaseOverrides }

        internal func OnDoTheThingImpl() throws {
            _ = try perform(as: __x_ABI_Ctest__component_CIBaseOverrides.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.OnDoTheThing(pThis))
            }
        }

    }

    internal class IBaseProtectedFactory: test_component.IInspectable, ComposableActivationFactory {
        internal typealias Composable = test_component.Base.Composable

        override public class var IID: IID { IID___x_ABI_Ctest__component_CIBaseProtectedFactory }

        internal func CreateInstanceImpl(_ baseInterface: UnsafeMutablePointer<Ctest_component.IInspectable>?, _ innerInterface: inout UnsafeMutablePointer<Ctest_component.IInspectable>?) throws -> UnsafeMutablePointer<__x_ABI_Ctest__component_CIBase>? {
            var value: UnsafeMutablePointer<__x_ABI_Ctest__component_CIBase>?
            _ = try perform(as: __x_ABI_Ctest__component_CIBaseProtectedFactory.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance(pThis, baseInterface, &innerInterface, &value))
            }
            return value
        }

    }

    open class IBasic: test_component.IInspectable {
        override public class var IID: IID { IID___x_ABI_Ctest__component_CIBasic }

        open func MethodImpl() throws {
            _ = try perform(as: __x_ABI_Ctest__component_CIBasic.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Method(pThis))
            }
        }

    }

    internal static var IBasicVTable: __x_ABI_Ctest__component_CIBasicVtbl = .init(
        QueryInterface: {
            guard let pUnk = $0, let riid = $1, let ppvObject = $2 else { return E_INVALIDARG }

            guard riid.pointee == IUnknown.IID ||
                  riid.pointee == IInspectable.IID || 
                  riid.pointee == ISwiftImplemented.IID ||
                  riid.pointee == IIAgileObject.IID ||
                  riid.pointee == __ABI_test_component.IBasicWrapper.IID else { 
                ppvObject.pointee = nil
                        return E_NOINTERFACE

            }
            _ = pUnk.pointee.lpVtbl.pointee.AddRef(pUnk)
            ppvObject.pointee = UnsafeMutableRawPointer(pUnk)
            return S_OK
        },

        AddRef: {
             guard let wrapper = IBasicWrapper.from_raw($0) else { return 1 }
             _ = wrapper.retain()
             return ULONG(_getRetainCount(wrapper.takeUnretainedValue().swiftObj))
        },

        Release: {
            guard let wrapper = IBasicWrapper.from_raw($0) else { return 1 }
            return ULONG(_getRetainCount(wrapper.takeRetainedValue()))
        },

        GetIids: {
            let size = MemoryLayout<IID>.size
            let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: IID.self)
            iids[0] = IUnknown.IID
            iids[1] = IInspectable.IID
            iids[2] = __ABI_test_component.IBasicWrapper.IID
            $1!.pointee = 3
            $2!.pointee = iids
            return S_OK
        },

        GetRuntimeClassName: {
            _ = $0
            let hstring = try! HString("test_component.IBasic").detach()
            $1!.pointee = hstring
            return S_OK
        },

        GetTrustLevel: {
            _ = $0
            $1!.pointee = TrustLevel(rawValue: 0)
            return S_OK
        },

        Method: {
            guard let __unwrapped__instance = IBasicWrapper.try_unwrap_from(raw: $0) else { return E_INVALIDARG }
            __unwrapped__instance.Method()
            return S_OK
        }
    )

    public typealias IBasicWrapper = InterfaceWrapperBase<__IMPL_test_component.IBasicImpl>
    open class IClass: test_component.IInspectable {
        override public class var IID: IID { IID___x_ABI_Ctest__component_CIClass }

        internal func get_ImplementationImpl() throws -> UnsafeMutablePointer<__x_ABI_Ctest__component_CIBasic>? {
            var value: UnsafeMutablePointer<__x_ABI_Ctest__component_CIBasic>?
            _ = try perform(as: __x_ABI_Ctest__component_CIClass.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Implementation(pThis, &value))
            }
            return value
        }

        internal func put_ImplementationImpl(_ value: UnsafeMutablePointer<__x_ABI_Ctest__component_CIBasic>?) throws {
            _ = try perform(as: __x_ABI_Ctest__component_CIClass.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Implementation(pThis, value))
            }
        }

        internal func SetDelegateImpl(_ value: UnsafeMutablePointer<__x_ABI_Ctest__component_CISimpleDelegate>?) throws {
            _ = try perform(as: __x_ABI_Ctest__component_CIClass.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.SetDelegate(pThis, value))
            }
        }

        internal func GetDelegateImpl() throws -> UnsafeMutablePointer<__x_ABI_Ctest__component_CISimpleDelegate>? {
            var result: UnsafeMutablePointer<__x_ABI_Ctest__component_CISimpleDelegate>?
            _ = try perform(as: __x_ABI_Ctest__component_CIClass.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetDelegate(pThis, &result))
            }
            return result
        }

        internal func InInt32Impl(_ value: INT32) throws -> HSTRING? {
            var result: HSTRING?
            _ = try perform(as: __x_ABI_Ctest__component_CIClass.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.InInt32(pThis, value, &result))
            }
            return result
        }

        internal func InStringImpl(_ value: HSTRING?) throws -> HSTRING? {
            var result: HSTRING?
            _ = try perform(as: __x_ABI_Ctest__component_CIClass.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.InString(pThis, value, &result))
            }
            return result
        }

        internal func InEnumImpl(_ value: __x_ABI_Ctest__component_CSigned) throws -> HSTRING? {
            var result: HSTRING?
            _ = try perform(as: __x_ABI_Ctest__component_CIClass.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.InEnum(pThis, value, &result))
            }
            return result
        }

        internal func OutInt32Impl(_ value: inout INT32) throws {
            _ = try perform(as: __x_ABI_Ctest__component_CIClass.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.OutInt32(pThis, &value))
            }
        }

        internal func OutStringImpl(_ value: inout HSTRING?) throws {
            _ = try perform(as: __x_ABI_Ctest__component_CIClass.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.OutString(pThis, &value))
            }
        }

        internal func OutBlittableStructImpl(_ value: inout __x_ABI_Ctest__component_CBlittableStruct) throws {
            _ = try perform(as: __x_ABI_Ctest__component_CIClass.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.OutBlittableStruct(pThis, &value))
            }
        }

        internal func OutNonBlittableStructImpl(_ value: inout __x_ABI_Ctest__component_CNonBlittableStruct) throws {
            _ = try perform(as: __x_ABI_Ctest__component_CIClass.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.OutNonBlittableStruct(pThis, &value))
            }
        }

        internal func OutEnumImpl(_ value: inout __x_ABI_Ctest__component_CSigned) throws {
            _ = try perform(as: __x_ABI_Ctest__component_CIClass.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.OutEnum(pThis, &value))
            }
        }

        internal func ReturnEnumImpl() throws -> __x_ABI_Ctest__component_CSigned {
            var result: __x_ABI_Ctest__component_CSigned = .init(0)
            _ = try perform(as: __x_ABI_Ctest__component_CIClass.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.ReturnEnum(pThis, &result))
            }
            return result
        }

        internal func get_EnumPropertyImpl() throws -> __x_ABI_Ctest__component_CFruit {
            var value: __x_ABI_Ctest__component_CFruit = .init(0)
            _ = try perform(as: __x_ABI_Ctest__component_CIClass.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_EnumProperty(pThis, &value))
            }
            return value
        }

        internal func put_EnumPropertyImpl(_ value: __x_ABI_Ctest__component_CFruit) throws {
            _ = try perform(as: __x_ABI_Ctest__component_CIClass.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_EnumProperty(pThis, value))
            }
        }

        internal func ReturnStoredStringVectorImpl() throws -> UnsafeMutablePointer<__x_ABI_C__FIVector_1_HSTRING>? {
            var result: UnsafeMutablePointer<__x_ABI_C__FIVector_1_HSTRING>?
            _ = try perform(as: __x_ABI_Ctest__component_CIClass.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.ReturnStoredStringVector(pThis, &result))
            }
            return result
        }

        internal func ReturnMapFromStringToStringImpl() throws -> UnsafeMutablePointer<__x_ABI_C__FIMap_2_HSTRING_HSTRING>? {
            var result: UnsafeMutablePointer<__x_ABI_C__FIMap_2_HSTRING_HSTRING>?
            _ = try perform(as: __x_ABI_Ctest__component_CIClass.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.ReturnMapFromStringToString(pThis, &result))
            }
            return result
        }

        internal func ReturnCharImpl() throws -> WCHAR {
            var result: WCHAR = 0
            _ = try perform(as: __x_ABI_Ctest__component_CIClass.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.ReturnChar(pThis, &result))
            }
            return result
        }

        internal func InCharImpl(_ value: WCHAR) throws -> HSTRING? {
            var result: HSTRING?
            _ = try perform(as: __x_ABI_Ctest__component_CIClass.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.InChar(pThis, value, &result))
            }
            return result
        }

        internal func OutCharImpl(_ value: inout WCHAR) throws {
            _ = try perform(as: __x_ABI_Ctest__component_CIClass.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.OutChar(pThis, &value))
            }
        }

        internal func get_StartValueImpl() throws -> UnsafeMutablePointer<__x_ABI_C__FIReference_1_int>? {
            var value: UnsafeMutablePointer<__x_ABI_C__FIReference_1_int>?
            _ = try perform(as: __x_ABI_Ctest__component_CIClass.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_StartValue(pThis, &value))
            }
            return value
        }

        internal func put_StartValueImpl(_ value: UnsafeMutablePointer<__x_ABI_C__FIReference_1_int>?) throws {
            _ = try perform(as: __x_ABI_Ctest__component_CIClass.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_StartValue(pThis, value))
            }
        }

        internal func get_IDImpl() throws -> UnsafeMutablePointer<__x_ABI_C__FIReference_1_GUID>? {
            var value: UnsafeMutablePointer<__x_ABI_C__FIReference_1_GUID>?
            _ = try perform(as: __x_ABI_Ctest__component_CIClass.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ID(pThis, &value))
            }
            return value
        }

        internal func put_IDImpl(_ value: UnsafeMutablePointer<__x_ABI_C__FIReference_1_GUID>?) throws {
            _ = try perform(as: __x_ABI_Ctest__component_CIClass.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_ID(pThis, value))
            }
        }

        internal func get_BasePropertyImpl() throws -> UnsafeMutablePointer<__x_ABI_Ctest__component_CIBase>? {
            var value: UnsafeMutablePointer<__x_ABI_Ctest__component_CIBase>?
            _ = try perform(as: __x_ABI_Ctest__component_CIClass.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_BaseProperty(pThis, &value))
            }
            return value
        }

        internal func put_BasePropertyImpl(_ value: UnsafeMutablePointer<__x_ABI_Ctest__component_CIBase>?) throws {
            _ = try perform(as: __x_ABI_Ctest__component_CIClass.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_BaseProperty(pThis, value))
            }
        }

        internal func get_BaseNoOverridesPropertyImpl() throws -> UnsafeMutablePointer<__x_ABI_Ctest__component_CIBaseNoOverrides>? {
            var value: UnsafeMutablePointer<__x_ABI_Ctest__component_CIBaseNoOverrides>?
            _ = try perform(as: __x_ABI_Ctest__component_CIClass.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_BaseNoOverridesProperty(pThis, &value))
            }
            return value
        }

        internal func put_BaseNoOverridesPropertyImpl(_ value: UnsafeMutablePointer<__x_ABI_Ctest__component_CIBaseNoOverrides>?) throws {
            _ = try perform(as: __x_ABI_Ctest__component_CIClass.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_BaseNoOverridesProperty(pThis, value))
            }
        }

    }

    open class IClassFactory: test_component.IInspectable {
        override public class var IID: IID { IID___x_ABI_Ctest__component_CIClassFactory }

        internal func CreateInstanceImpl(_ name: HSTRING?) throws -> UnsafeMutablePointer<__x_ABI_Ctest__component_CIClass>? {
            var value: UnsafeMutablePointer<__x_ABI_Ctest__component_CIClass>?
            _ = try perform(as: __x_ABI_Ctest__component_CIClassFactory.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance(pThis, name, &value))
            }
            return value
        }

        internal func CreateInstance2Impl(_ name: HSTRING?, _ fruit: __x_ABI_Ctest__component_CFruit) throws -> UnsafeMutablePointer<__x_ABI_Ctest__component_CIClass>? {
            var value: UnsafeMutablePointer<__x_ABI_Ctest__component_CIClass>?
            _ = try perform(as: __x_ABI_Ctest__component_CIClassFactory.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance2(pThis, name, fruit, &value))
            }
            return value
        }

        internal func CreateInstance3Impl(_ arg: UnsafeMutablePointer<__x_ABI_C__FIMap_2_HSTRING_HSTRING>?, _ dummy1: INT32, _ dummy2: INT32, _ dummy3: INT32) throws -> UnsafeMutablePointer<__x_ABI_Ctest__component_CIClass>? {
            var value: UnsafeMutablePointer<__x_ABI_Ctest__component_CIClass>?
            _ = try perform(as: __x_ABI_Ctest__component_CIClassFactory.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance3(pThis, arg, dummy1, dummy2, dummy3, &value))
            }
            return value
        }

        internal func CreateInstance4Impl(_ arg: UnsafeMutablePointer<__x_ABI_C__FIMapView_2_HSTRING_HSTRING>?, _ dummy1: INT32, _ dummy2: INT32, _ dummy3: INT32, _ dummy4: INT32) throws -> UnsafeMutablePointer<__x_ABI_Ctest__component_CIClass>? {
            var value: UnsafeMutablePointer<__x_ABI_Ctest__component_CIClass>?
            _ = try perform(as: __x_ABI_Ctest__component_CIClassFactory.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance4(pThis, arg, dummy1, dummy2, dummy3, dummy4, &value))
            }
            return value
        }

        internal func CreateInstance5Impl(_ arg: UnsafeMutablePointer<__x_ABI_C__FIVector_1_HSTRING>?, _ dummy1: INT32, _ dummy2: INT32, _ dummy3: INT32, _ dummy4: INT32, _ dummy5: INT32) throws -> UnsafeMutablePointer<__x_ABI_Ctest__component_CIClass>? {
            var value: UnsafeMutablePointer<__x_ABI_Ctest__component_CIClass>?
            _ = try perform(as: __x_ABI_Ctest__component_CIClassFactory.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance5(pThis, arg, dummy1, dummy2, dummy3, dummy4, dummy5, &value))
            }
            return value
        }

        internal func CreateInstance6Impl(_ arg: UnsafeMutablePointer<__x_ABI_C__FIVectorView_1_HSTRING>?, _ dummy1: INT32, _ dummy2: INT32, _ dummy3: INT32, _ dummy4: INT32, _ dummy5: INT32, _ dummy6: INT32) throws -> UnsafeMutablePointer<__x_ABI_Ctest__component_CIClass>? {
            var value: UnsafeMutablePointer<__x_ABI_Ctest__component_CIClass>?
            _ = try perform(as: __x_ABI_Ctest__component_CIClassFactory.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance6(pThis, arg, dummy1, dummy2, dummy3, dummy4, dummy5, dummy6, &value))
            }
            return value
        }

    }

    open class IClassFactory2: test_component.IInspectable {
        override public class var IID: IID { IID___x_ABI_Ctest__component_CIClassFactory2 }

        internal func CreateInstanceImpl(_ name: HSTRING?, _ fruit: __x_ABI_Ctest__component_CFruit, _ implementation: UnsafeMutablePointer<__x_ABI_Ctest__component_CIIAmImplementable>?) throws -> UnsafeMutablePointer<__x_ABI_Ctest__component_CIClass>? {
            var value: UnsafeMutablePointer<__x_ABI_Ctest__component_CIClass>?
            _ = try perform(as: __x_ABI_Ctest__component_CIClassFactory2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance(pThis, name, fruit, implementation, &value))
            }
            return value
        }

    }

    open class IClassStatics: test_component.IInspectable {
        override public class var IID: IID { IID___x_ABI_Ctest__component_CIClassStatics }

        internal func StaticTestImpl() throws {
            _ = try perform(as: __x_ABI_Ctest__component_CIClassStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.StaticTest(pThis))
            }
        }

        internal func StaticTestReturnImpl() throws -> INT32 {
            var result: INT32 = 0
            _ = try perform(as: __x_ABI_Ctest__component_CIClassStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.StaticTestReturn(pThis, &result))
            }
            return result
        }

        internal func get_StaticPropertyImpl() throws -> INT32 {
            var value: INT32 = 0
            _ = try perform(as: __x_ABI_Ctest__component_CIClassStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_StaticProperty(pThis, &value))
            }
            return value
        }

        internal func InMapImpl(_ value: UnsafeMutablePointer<__x_ABI_C__FIMap_2_HSTRING_HSTRING>?) throws -> HSTRING? {
            var result: HSTRING?
            _ = try perform(as: __x_ABI_Ctest__component_CIClassStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.InMap(pThis, value, &result))
            }
            return result
        }

        internal func InMapViewImpl(_ value: UnsafeMutablePointer<__x_ABI_C__FIMapView_2_HSTRING_HSTRING>?) throws -> HSTRING? {
            var result: HSTRING?
            _ = try perform(as: __x_ABI_Ctest__component_CIClassStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.InMapView(pThis, value, &result))
            }
            return result
        }

        internal func InVectorImpl(_ value: UnsafeMutablePointer<__x_ABI_C__FIVector_1_HSTRING>?) throws -> HSTRING? {
            var result: HSTRING?
            _ = try perform(as: __x_ABI_Ctest__component_CIClassStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.InVector(pThis, value, &result))
            }
            return result
        }

        internal func InVectorViewImpl(_ value: UnsafeMutablePointer<__x_ABI_C__FIVectorView_1_HSTRING>?) throws -> HSTRING? {
            var result: HSTRING?
            _ = try perform(as: __x_ABI_Ctest__component_CIClassStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.InVectorView(pThis, value, &result))
            }
            return result
        }

    }

    open class IClassStatics2: test_component.IInspectable {
        override public class var IID: IID { IID___x_ABI_Ctest__component_CIClassStatics2 }

        internal func StaticTestReturnFloatImpl() throws -> FLOAT {
            var result: FLOAT = 0.0
            _ = try perform(as: __x_ABI_Ctest__component_CIClassStatics2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.StaticTestReturnFloat(pThis, &result))
            }
            return result
        }

        internal func get_StaticPropertyFloatImpl() throws -> FLOAT {
            var value: FLOAT = 0.0
            _ = try perform(as: __x_ABI_Ctest__component_CIClassStatics2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_StaticPropertyFloat(pThis, &value))
            }
            return value
        }

        internal func put_StaticPropertyFloatImpl(_ value: FLOAT) throws {
            _ = try perform(as: __x_ABI_Ctest__component_CIClassStatics2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_StaticPropertyFloat(pThis, value))
            }
        }

    }

    open class IDerived: test_component.IInspectable {
        override public class var IID: IID { IID___x_ABI_Ctest__component_CIDerived }

        internal func get_PropImpl() throws -> INT32 {
            var value: INT32 = 0
            _ = try perform(as: __x_ABI_Ctest__component_CIDerived.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Prop(pThis, &value))
            }
            return value
        }

        internal func put_PropImpl(_ value: INT32) throws {
            _ = try perform(as: __x_ABI_Ctest__component_CIDerived.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Prop(pThis, value))
            }
        }

    }

    open class IIAmImplementable: test_component.IInspectable {
        override public class var IID: IID { IID___x_ABI_Ctest__component_CIIAmImplementable }

        open func InInt32Impl(_ value: INT32) throws -> HSTRING? {
            var result: HSTRING?
            _ = try perform(as: __x_ABI_Ctest__component_CIIAmImplementable.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.InInt32(pThis, value, &result))
            }
            return result
        }

        open func InStringImpl(_ value: HSTRING?) throws -> HSTRING? {
            var result: HSTRING?
            _ = try perform(as: __x_ABI_Ctest__component_CIIAmImplementable.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.InString(pThis, value, &result))
            }
            return result
        }

        open func InEnumImpl(_ value: __x_ABI_Ctest__component_CSigned) throws -> HSTRING? {
            var result: HSTRING?
            _ = try perform(as: __x_ABI_Ctest__component_CIIAmImplementable.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.InEnum(pThis, value, &result))
            }
            return result
        }

        open func OutInt32Impl(_ value: inout INT32) throws {
            _ = try perform(as: __x_ABI_Ctest__component_CIIAmImplementable.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.OutInt32(pThis, &value))
            }
        }

        open func OutStringImpl(_ value: inout HSTRING?) throws {
            _ = try perform(as: __x_ABI_Ctest__component_CIIAmImplementable.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.OutString(pThis, &value))
            }
        }

        open func OutBlittableStructImpl(_ value: inout __x_ABI_Ctest__component_CBlittableStruct) throws {
            _ = try perform(as: __x_ABI_Ctest__component_CIIAmImplementable.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.OutBlittableStruct(pThis, &value))
            }
        }

        open func OutNonBlittableStructImpl(_ value: inout __x_ABI_Ctest__component_CNonBlittableStruct) throws {
            _ = try perform(as: __x_ABI_Ctest__component_CIIAmImplementable.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.OutNonBlittableStruct(pThis, &value))
            }
        }

        open func OutEnumImpl(_ value: inout __x_ABI_Ctest__component_CSigned) throws {
            _ = try perform(as: __x_ABI_Ctest__component_CIIAmImplementable.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.OutEnum(pThis, &value))
            }
        }

        open func ReturnEnumImpl() throws -> __x_ABI_Ctest__component_CSigned {
            var result: __x_ABI_Ctest__component_CSigned = .init(0)
            _ = try perform(as: __x_ABI_Ctest__component_CIIAmImplementable.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.ReturnEnum(pThis, &result))
            }
            return result
        }

        open func get_EnumPropertyImpl() throws -> __x_ABI_Ctest__component_CFruit {
            var value: __x_ABI_Ctest__component_CFruit = .init(0)
            _ = try perform(as: __x_ABI_Ctest__component_CIIAmImplementable.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_EnumProperty(pThis, &value))
            }
            return value
        }

        open func put_EnumPropertyImpl(_ value: __x_ABI_Ctest__component_CFruit) throws {
            _ = try perform(as: __x_ABI_Ctest__component_CIIAmImplementable.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_EnumProperty(pThis, value))
            }
        }

        open func get_IDImpl() throws -> UnsafeMutablePointer<__x_ABI_C__FIReference_1_GUID>? {
            var value: UnsafeMutablePointer<__x_ABI_C__FIReference_1_GUID>?
            _ = try perform(as: __x_ABI_Ctest__component_CIIAmImplementable.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ID(pThis, &value))
            }
            return value
        }

        open func put_IDImpl(_ value: UnsafeMutablePointer<__x_ABI_C__FIReference_1_GUID>?) throws {
            _ = try perform(as: __x_ABI_Ctest__component_CIIAmImplementable.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_ID(pThis, value))
            }
        }

        open func add_ImplementableEventImpl(_ handler: UnsafeMutablePointer<__x_ABI_Ctest__component_CDelegates_CIInDelegate>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            _ = try perform(as: __x_ABI_Ctest__component_CIIAmImplementable.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_ImplementableEvent(pThis, handler, &token))
            }
            return token
        }

        open func remove_ImplementableEventImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_Ctest__component_CIIAmImplementable.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_ImplementableEvent(pThis, token))
            }
        }

        open func FireEventImpl() throws {
            _ = try perform(as: __x_ABI_Ctest__component_CIIAmImplementable.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.FireEvent(pThis))
            }
        }

    }

    internal static var IIAmImplementableVTable: __x_ABI_Ctest__component_CIIAmImplementableVtbl = .init(
        QueryInterface: {
            guard let pUnk = $0, let riid = $1, let ppvObject = $2 else { return E_INVALIDARG }

            guard riid.pointee == IUnknown.IID ||
                  riid.pointee == IInspectable.IID || 
                  riid.pointee == ISwiftImplemented.IID ||
                  riid.pointee == IIAgileObject.IID ||
                  riid.pointee == __ABI_test_component.IIAmImplementableWrapper.IID else { 
                ppvObject.pointee = nil
                        return E_NOINTERFACE

            }
            _ = pUnk.pointee.lpVtbl.pointee.AddRef(pUnk)
            ppvObject.pointee = UnsafeMutableRawPointer(pUnk)
            return S_OK
        },

        AddRef: {
             guard let wrapper = IIAmImplementableWrapper.from_raw($0) else { return 1 }
             _ = wrapper.retain()
             return ULONG(_getRetainCount(wrapper.takeUnretainedValue().swiftObj))
        },

        Release: {
            guard let wrapper = IIAmImplementableWrapper.from_raw($0) else { return 1 }
            return ULONG(_getRetainCount(wrapper.takeRetainedValue()))
        },

        GetIids: {
            let size = MemoryLayout<IID>.size
            let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: IID.self)
            iids[0] = IUnknown.IID
            iids[1] = IInspectable.IID
            iids[2] = __ABI_test_component.IIAmImplementableWrapper.IID
            $1!.pointee = 3
            $2!.pointee = iids
            return S_OK
        },

        GetRuntimeClassName: {
            _ = $0
            let hstring = try! HString("test_component.IIAmImplementable").detach()
            $1!.pointee = hstring
            return S_OK
        },

        GetTrustLevel: {
            _ = $0
            $1!.pointee = TrustLevel(rawValue: 0)
            return S_OK
        },

        InInt32: {
            guard let __unwrapped__instance = IIAmImplementableWrapper.try_unwrap_from(raw: $0) else { return E_INVALIDARG }
            let value: Int32 = $1
            let result = __unwrapped__instance.InInt32(value)
            $2?.initialize(to: try! HString(result).detach())
            return S_OK
        },

        InString: {
            guard let __unwrapped__instance = IIAmImplementableWrapper.try_unwrap_from(raw: $0) else { return E_INVALIDARG }
            let value: String = .init(from: $1)
            let result = __unwrapped__instance.InString(value)
            $2?.initialize(to: try! HString(result).detach())
            return S_OK
        },

        InEnum: {
            guard let __unwrapped__instance = IIAmImplementableWrapper.try_unwrap_from(raw: $0) else { return E_INVALIDARG }
            let value: test_component.Signed = $1
            let result = __unwrapped__instance.InEnum(value)
            $2?.initialize(to: try! HString(result).detach())
            return S_OK
        },

        OutInt32: {
            guard let __unwrapped__instance = IIAmImplementableWrapper.try_unwrap_from(raw: $0) else { return E_INVALIDARG }
            var value: Int32 = 0
            __unwrapped__instance.OutInt32(&value)
            $1?.initialize(to: value)
            return S_OK
        },

        OutString: {
            guard let __unwrapped__instance = IIAmImplementableWrapper.try_unwrap_from(raw: $0) else { return E_INVALIDARG }
            var value: String = ""
            __unwrapped__instance.OutString(&value)
            $1?.initialize(to: try! HString(value).detach())
            return S_OK
        },

        OutBlittableStruct: {
            guard let __unwrapped__instance = IIAmImplementableWrapper.try_unwrap_from(raw: $0) else { return E_INVALIDARG }
            var value: test_component.BlittableStruct = .init()
            __unwrapped__instance.OutBlittableStruct(&value)
            $1?.initialize(to: .from(swift: value))
            return S_OK
        },

        OutNonBlittableStruct: {
            guard let __unwrapped__instance = IIAmImplementableWrapper.try_unwrap_from(raw: $0) else { return E_INVALIDARG }
            var value: test_component.NonBlittableStruct = .init()
            __unwrapped__instance.OutNonBlittableStruct(&value)
            let _value = __ABI_test_component._ABI_NonBlittableStruct(from: value)
            	$1?.initialize(to: _value.detach())
            return S_OK
        },

        OutEnum: {
            guard let __unwrapped__instance = IIAmImplementableWrapper.try_unwrap_from(raw: $0) else { return E_INVALIDARG }
            var value: test_component.Signed = .init(0)
            __unwrapped__instance.OutEnum(&value)
            $1?.initialize(to: value)
            return S_OK
        },

        ReturnEnum: {
            guard let __unwrapped__instance = IIAmImplementableWrapper.try_unwrap_from(raw: $0) else { return E_INVALIDARG }
            let result = __unwrapped__instance.ReturnEnum()
            $1?.initialize(to: result)
            return S_OK
        },

        get_EnumProperty: {
            guard let __unwrapped__instance = IIAmImplementableWrapper.try_unwrap_from(raw: $0) else { return E_INVALIDARG }
            let value = __unwrapped__instance.EnumProperty
            $1?.initialize(to: value)
            return S_OK
        },

        put_EnumProperty: {
            guard let __unwrapped__instance = IIAmImplementableWrapper.try_unwrap_from(raw: $0) else { return E_INVALIDARG }
            let value: test_component.Fruit = $1
            __unwrapped__instance.EnumProperty = value
            return S_OK
        },

        get_ID: {
            guard let __unwrapped__instance = IIAmImplementableWrapper.try_unwrap_from(raw: $0) else { return E_INVALIDARG }
            let value = __unwrapped__instance.ID
            let valueWrapper = __ABI_test_component.__x_ABI_C__FIReference_1_GUIDWrapper(value)
            let _value = try! valueWrapper?.to_abi { $0 }
            $1?.initialize(to: _value)
            return S_OK
        },

        put_ID: {
            guard let __unwrapped__instance = IIAmImplementableWrapper.try_unwrap_from(raw: $0) else { return E_INVALIDARG }
            let value: UUID? = .init(ref: $1)
            __unwrapped__instance.ID = value
            return S_OK
        },

        add_ImplementableEvent: { _, _, _ in return failWith(err: E_NOTIMPL) },

        remove_ImplementableEvent: { _, _ in return failWith(err: E_NOTIMPL) },

        FireEvent: {
            guard let __unwrapped__instance = IIAmImplementableWrapper.try_unwrap_from(raw: $0) else { return E_INVALIDARG }
            __unwrapped__instance.FireEvent()
            return S_OK
        }
    )

    public typealias IIAmImplementableWrapper = InterfaceWrapperBase<__IMPL_test_component.IIAmImplementableImpl>
    open class INullValuesStatics: test_component.IInspectable {
        override public class var IID: IID { IID___x_ABI_Ctest__component_CINullValuesStatics }

        internal func IsObjectNullImpl(_ value: UnsafeMutablePointer<Ctest_component.IInspectable>?) throws -> boolean {
            var result: boolean = 0
            _ = try perform(as: __x_ABI_Ctest__component_CINullValuesStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.IsObjectNull(pThis, value, &result))
            }
            return result
        }

        internal func IsInterfaceNullImpl(_ value: UnsafeMutablePointer<__x_ABI_CWindows_CFoundation_CIClosable>?) throws -> boolean {
            var result: boolean = 0
            _ = try perform(as: __x_ABI_Ctest__component_CINullValuesStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.IsInterfaceNull(pThis, value, &result))
            }
            return result
        }

        internal func IsGenericInterfaceNullImpl(_ value: UnsafeMutablePointer<__x_ABI_C__FIVector_1_HSTRING>?) throws -> boolean {
            var result: boolean = 0
            _ = try perform(as: __x_ABI_Ctest__component_CINullValuesStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.IsGenericInterfaceNull(pThis, value, &result))
            }
            return result
        }

        internal func IsClassNullImpl(_ value: UnsafeMutablePointer<__x_ABI_CWindows_CFoundation_CIClosable>?) throws -> boolean {
            var result: boolean = 0
            _ = try perform(as: __x_ABI_Ctest__component_CINullValuesStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.IsClassNull(pThis, value, &result))
            }
            return result
        }

        internal func IsDelegateNullImpl(_ value: UnsafeMutablePointer<__x_ABI_Ctest__component_CIVoidToVoidDelegate>?) throws -> boolean {
            var result: boolean = 0
            _ = try perform(as: __x_ABI_Ctest__component_CINullValuesStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.IsDelegateNull(pThis, value, &result))
            }
            return result
        }

        internal func GetNullObjectImpl() throws -> UnsafeMutablePointer<Ctest_component.IInspectable>? {
            var result: UnsafeMutablePointer<Ctest_component.IInspectable>?
            _ = try perform(as: __x_ABI_Ctest__component_CINullValuesStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetNullObject(pThis, &result))
            }
            return result
        }

        internal func GetNullInterfaceImpl() throws -> UnsafeMutablePointer<__x_ABI_CWindows_CFoundation_CIClosable>? {
            var result: UnsafeMutablePointer<__x_ABI_CWindows_CFoundation_CIClosable>?
            _ = try perform(as: __x_ABI_Ctest__component_CINullValuesStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetNullInterface(pThis, &result))
            }
            return result
        }

        internal func GetNullGenericInterfaceImpl() throws -> UnsafeMutablePointer<__x_ABI_C__FIVector_1_HSTRING>? {
            var result: UnsafeMutablePointer<__x_ABI_C__FIVector_1_HSTRING>?
            _ = try perform(as: __x_ABI_Ctest__component_CINullValuesStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetNullGenericInterface(pThis, &result))
            }
            return result
        }

        internal func GetNullClassImpl() throws -> UnsafeMutablePointer<__x_ABI_CWindows_CFoundation_CIClosable>? {
            var result: UnsafeMutablePointer<__x_ABI_CWindows_CFoundation_CIClosable>?
            _ = try perform(as: __x_ABI_Ctest__component_CINullValuesStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetNullClass(pThis, &result))
            }
            return result
        }

        internal func GetNullDelegateImpl() throws -> UnsafeMutablePointer<__x_ABI_Ctest__component_CIVoidToVoidDelegate>? {
            var result: UnsafeMutablePointer<__x_ABI_Ctest__component_CIVoidToVoidDelegate>?
            _ = try perform(as: __x_ABI_Ctest__component_CINullValuesStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetNullDelegate(pThis, &result))
            }
            return result
        }

    }

    open class ISimple: test_component.IInspectable {
        override public class var IID: IID { IID___x_ABI_Ctest__component_CISimple }

        internal func MethodImpl() throws {
            _ = try perform(as: __x_ABI_Ctest__component_CISimple.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Method(pThis))
            }
        }

        internal func ReturnBlittableStructImpl() throws -> __x_ABI_Ctest__component_CBlittableStruct {
            var result: __x_ABI_Ctest__component_CBlittableStruct = .init()
            _ = try perform(as: __x_ABI_Ctest__component_CISimple.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.ReturnBlittableStruct(pThis, &result))
            }
            return result
        }

        internal func TakeBlittableStructImpl(_ value: __x_ABI_Ctest__component_CBlittableStruct) throws {
            _ = try perform(as: __x_ABI_Ctest__component_CISimple.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.TakeBlittableStruct(pThis, value))
            }
        }

        internal func get_BlittableStructPropertyImpl() throws -> __x_ABI_Ctest__component_CBlittableStruct {
            var value: __x_ABI_Ctest__component_CBlittableStruct = .init()
            _ = try perform(as: __x_ABI_Ctest__component_CISimple.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_BlittableStructProperty(pThis, &value))
            }
            return value
        }

        internal func put_BlittableStructPropertyImpl(_ value: __x_ABI_Ctest__component_CBlittableStruct) throws {
            _ = try perform(as: __x_ABI_Ctest__component_CISimple.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_BlittableStructProperty(pThis, value))
            }
        }

        internal func ReturnNonBlittableStructImpl() throws -> __x_ABI_Ctest__component_CNonBlittableStruct {
            var result: __x_ABI_Ctest__component_CNonBlittableStruct = .init()
            _ = try perform(as: __x_ABI_Ctest__component_CISimple.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.ReturnNonBlittableStruct(pThis, &result))
            }
            return result
        }

        internal func TakeNonBlittableStructImpl(_ value: __x_ABI_Ctest__component_CNonBlittableStruct) throws {
            _ = try perform(as: __x_ABI_Ctest__component_CISimple.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.TakeNonBlittableStruct(pThis, value))
            }
        }

        internal func get_NonBlittableStructPropertyImpl() throws -> __x_ABI_Ctest__component_CNonBlittableStruct {
            var value: __x_ABI_Ctest__component_CNonBlittableStruct = .init()
            _ = try perform(as: __x_ABI_Ctest__component_CISimple.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_NonBlittableStructProperty(pThis, &value))
            }
            return value
        }

        internal func put_NonBlittableStructPropertyImpl(_ value: __x_ABI_Ctest__component_CNonBlittableStruct) throws {
            _ = try perform(as: __x_ABI_Ctest__component_CISimple.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_NonBlittableStructProperty(pThis, value))
            }
        }

        internal func get_StringPropertyImpl() throws -> HSTRING? {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_Ctest__component_CISimple.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_StringProperty(pThis, &value))
            }
            return value
        }

        internal func put_StringPropertyImpl(_ value: HSTRING?) throws {
            _ = try perform(as: __x_ABI_Ctest__component_CISimple.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_StringProperty(pThis, value))
            }
        }

        internal func add_SignalEventImpl(_ handler: UnsafeMutablePointer<__x_ABI_Ctest__component_CDelegates_CISignalDelegate>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            _ = try perform(as: __x_ABI_Ctest__component_CISimple.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_SignalEvent(pThis, handler, &token))
            }
            return token
        }

        internal func remove_SignalEventImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_Ctest__component_CISimple.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_SignalEvent(pThis, token))
            }
        }

        internal func add_InEventImpl(_ handler: UnsafeMutablePointer<__x_ABI_Ctest__component_CDelegates_CIInDelegate>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            _ = try perform(as: __x_ABI_Ctest__component_CISimple.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_InEvent(pThis, handler, &token))
            }
            return token
        }

        internal func remove_InEventImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_Ctest__component_CISimple.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_InEvent(pThis, token))
            }
        }

        internal func add_SimpleEventImpl(_ handler: UnsafeMutablePointer<__x_ABI_C__FITypedEventHandler_2___x_ABI_Ctest__zcomponent__CSimple___x_ABI_Ctest__zcomponent__CSimpleEventArgs>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            _ = try perform(as: __x_ABI_Ctest__component_CISimple.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_SimpleEvent(pThis, handler, &token))
            }
            return token
        }

        internal func remove_SimpleEventImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_Ctest__component_CISimple.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_SimpleEvent(pThis, token))
            }
        }

        internal func FireEventImpl() throws {
            _ = try perform(as: __x_ABI_Ctest__component_CISimple.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.FireEvent(pThis))
            }
        }

    }

    open class ISimpleDelegate: test_component.IInspectable {
        override public class var IID: IID { IID___x_ABI_Ctest__component_CISimpleDelegate }

        open func DoThisImpl() throws {
            _ = try perform(as: __x_ABI_Ctest__component_CISimpleDelegate.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.DoThis(pThis))
            }
        }

        open func DoThatImpl(_ val: INT32) throws {
            _ = try perform(as: __x_ABI_Ctest__component_CISimpleDelegate.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.DoThat(pThis, val))
            }
        }

    }

    internal static var ISimpleDelegateVTable: __x_ABI_Ctest__component_CISimpleDelegateVtbl = .init(
        QueryInterface: {
            guard let pUnk = $0, let riid = $1, let ppvObject = $2 else { return E_INVALIDARG }

            guard riid.pointee == IUnknown.IID ||
                  riid.pointee == IInspectable.IID || 
                  riid.pointee == ISwiftImplemented.IID ||
                  riid.pointee == IIAgileObject.IID ||
                  riid.pointee == __ABI_test_component.ISimpleDelegateWrapper.IID else { 
                ppvObject.pointee = nil
                        return E_NOINTERFACE

            }
            _ = pUnk.pointee.lpVtbl.pointee.AddRef(pUnk)
            ppvObject.pointee = UnsafeMutableRawPointer(pUnk)
            return S_OK
        },

        AddRef: {
             guard let wrapper = ISimpleDelegateWrapper.from_raw($0) else { return 1 }
             _ = wrapper.retain()
             return ULONG(_getRetainCount(wrapper.takeUnretainedValue().swiftObj))
        },

        Release: {
            guard let wrapper = ISimpleDelegateWrapper.from_raw($0) else { return 1 }
            return ULONG(_getRetainCount(wrapper.takeRetainedValue()))
        },

        GetIids: {
            let size = MemoryLayout<IID>.size
            let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: IID.self)
            iids[0] = IUnknown.IID
            iids[1] = IInspectable.IID
            iids[2] = __ABI_test_component.ISimpleDelegateWrapper.IID
            $1!.pointee = 3
            $2!.pointee = iids
            return S_OK
        },

        GetRuntimeClassName: {
            _ = $0
            let hstring = try! HString("test_component.ISimpleDelegate").detach()
            $1!.pointee = hstring
            return S_OK
        },

        GetTrustLevel: {
            _ = $0
            $1!.pointee = TrustLevel(rawValue: 0)
            return S_OK
        },

        DoThis: {
            guard let __unwrapped__instance = ISimpleDelegateWrapper.try_unwrap_from(raw: $0) else { return E_INVALIDARG }
            __unwrapped__instance.DoThis()
            return S_OK
        },

        DoThat: {
            guard let __unwrapped__instance = ISimpleDelegateWrapper.try_unwrap_from(raw: $0) else { return E_INVALIDARG }
            let val: Int32 = $1
            __unwrapped__instance.DoThat(val)
            return S_OK
        }
    )

    public typealias ISimpleDelegateWrapper = InterfaceWrapperBase<__IMPL_test_component.ISimpleDelegateImpl>
    open class ISimpleStatics: test_component.IInspectable {
        override public class var IID: IID { IID___x_ABI_Ctest__component_CISimpleStatics }

        internal func add_StaticEventImpl(_ handler: UnsafeMutablePointer<__x_ABI_C__FIEventHandler_1_IInspectable>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            _ = try perform(as: __x_ABI_Ctest__component_CISimpleStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_StaticEvent(pThis, handler, &token))
            }
            return token
        }

        internal func remove_StaticEventImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_Ctest__component_CISimpleStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_StaticEvent(pThis, token))
            }
        }

        internal func FireStaticEventImpl() throws {
            _ = try perform(as: __x_ABI_Ctest__component_CISimpleStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.FireStaticEvent(pThis))
            }
        }

    }

    open class IStaticClassStatics: test_component.IInspectable {
        override public class var IID: IID { IID___x_ABI_Ctest__component_CIStaticClassStatics }

        internal func get_EnumPropertyImpl() throws -> __x_ABI_Ctest__component_CFruit {
            var value: __x_ABI_Ctest__component_CFruit = .init(0)
            _ = try perform(as: __x_ABI_Ctest__component_CIStaticClassStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_EnumProperty(pThis, &value))
            }
            return value
        }

        internal func put_EnumPropertyImpl(_ value: __x_ABI_Ctest__component_CFruit) throws {
            _ = try perform(as: __x_ABI_Ctest__component_CIStaticClassStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_EnumProperty(pThis, value))
            }
        }

        internal func InEnumImpl(_ value: __x_ABI_Ctest__component_CSigned) throws -> HSTRING? {
            var result: HSTRING?
            _ = try perform(as: __x_ABI_Ctest__component_CIStaticClassStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.InEnum(pThis, value, &result))
            }
            return result
        }

        internal func InNonBlittableStructImpl(_ value: __x_ABI_Ctest__component_CNonBlittableStruct) throws -> HSTRING? {
            var result: HSTRING?
            _ = try perform(as: __x_ABI_Ctest__component_CIStaticClassStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.InNonBlittableStruct(pThis, value, &result))
            }
            return result
        }

        internal func TakeBaseImpl(_ base: UnsafeMutablePointer<__x_ABI_Ctest__component_CIBase>?) throws {
            _ = try perform(as: __x_ABI_Ctest__component_CIStaticClassStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.TakeBase(pThis, base))
            }
        }

    }

    open class IUnsealedDerived: test_component.IInspectable {
        override public class var IID: IID { IID___x_ABI_Ctest__component_CIUnsealedDerived }

        internal func get_PropImpl() throws -> INT32 {
            var value: INT32 = 0
            _ = try perform(as: __x_ABI_Ctest__component_CIUnsealedDerived.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Prop(pThis, &value))
            }
            return value
        }

        internal func put_PropImpl(_ value: INT32) throws {
            _ = try perform(as: __x_ABI_Ctest__component_CIUnsealedDerived.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Prop(pThis, value))
            }
        }

    }

    open class IUnsealedDerived2: test_component.IInspectable {
        override public class var IID: IID { IID___x_ABI_Ctest__component_CIUnsealedDerived2 }

        internal func MethodImpl() throws {
            _ = try perform(as: __x_ABI_Ctest__component_CIUnsealedDerived2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Method(pThis))
            }
        }

    }

    internal class IUnsealedDerived2ProtectedFactory: test_component.IInspectable, ComposableActivationFactory {
        internal typealias Composable = test_component.UnsealedDerived2.Composable

        override public class var IID: IID { IID___x_ABI_Ctest__component_CIUnsealedDerived2ProtectedFactory }

        internal func CreateInstanceImpl(_ baseInterface: UnsafeMutablePointer<Ctest_component.IInspectable>?, _ innerInterface: inout UnsafeMutablePointer<Ctest_component.IInspectable>?) throws -> UnsafeMutablePointer<__x_ABI_Ctest__component_CIUnsealedDerived2>? {
            var value: UnsafeMutablePointer<__x_ABI_Ctest__component_CIUnsealedDerived2>?
            _ = try perform(as: __x_ABI_Ctest__component_CIUnsealedDerived2ProtectedFactory.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance(pThis, baseInterface, &innerInterface, &value))
            }
            return value
        }

    }

    open class IUnsealedDerivedNoOverrides: test_component.IInspectable {
        override public class var IID: IID { IID___x_ABI_Ctest__component_CIUnsealedDerivedNoOverrides }

    }

    internal class IUnsealedDerivedNoOverridesProtectedFactory: test_component.IInspectable, ComposableActivationFactory {
        internal typealias Composable = test_component.UnsealedDerivedNoOverrides.Composable

        override public class var IID: IID { IID___x_ABI_Ctest__component_CIUnsealedDerivedNoOverridesProtectedFactory }

        internal func CreateInstanceImpl(_ baseInterface: UnsafeMutablePointer<Ctest_component.IInspectable>?, _ innerInterface: inout UnsafeMutablePointer<Ctest_component.IInspectable>?) throws -> UnsafeMutablePointer<__x_ABI_Ctest__component_CIUnsealedDerivedNoOverrides>? {
            var value: UnsafeMutablePointer<__x_ABI_Ctest__component_CIUnsealedDerivedNoOverrides>?
            _ = try perform(as: __x_ABI_Ctest__component_CIUnsealedDerivedNoOverridesProtectedFactory.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance(pThis, baseInterface, &innerInterface, &value))
            }
            return value
        }

    }

    open class IUnsealedDerivedOverloads2: test_component.IInspectable {
        override public class var IID: IID { IID___x_ABI_Ctest__component_CIUnsealedDerivedOverloads2 }

        internal func OnAfterDoTheThingImpl() throws {
            _ = try perform(as: __x_ABI_Ctest__component_CIUnsealedDerivedOverloads2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.OnAfterDoTheThing(pThis))
            }
        }

    }

    open class IUnsealedDerivedOverrides: test_component.IInspectable {
        override public class var IID: IID { IID___x_ABI_Ctest__component_CIUnsealedDerivedOverrides }

        internal func OnBeforeDoTheThingImpl() throws {
            _ = try perform(as: __x_ABI_Ctest__component_CIUnsealedDerivedOverrides.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.OnBeforeDoTheThing(pThis))
            }
        }

    }

    internal class IUnsealedDerivedProtectedFactory: test_component.IInspectable, ComposableActivationFactory {
        internal typealias Composable = test_component.UnsealedDerived.Composable

        override public class var IID: IID { IID___x_ABI_Ctest__component_CIUnsealedDerivedProtectedFactory }

        internal func CreateInstanceImpl(_ baseInterface: UnsafeMutablePointer<Ctest_component.IInspectable>?, _ innerInterface: inout UnsafeMutablePointer<Ctest_component.IInspectable>?) throws -> UnsafeMutablePointer<__x_ABI_Ctest__component_CIUnsealedDerived>? {
            var value: UnsafeMutablePointer<__x_ABI_Ctest__component_CIUnsealedDerived>?
            _ = try perform(as: __x_ABI_Ctest__component_CIUnsealedDerivedProtectedFactory.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance(pThis, baseInterface, &innerInterface, &value))
            }
            return value
        }

    }

    internal static var VoidToVoidDelegateVTable: __x_ABI_Ctest__component_CIVoidToVoidDelegateVtbl = .init(
        QueryInterface: {
            guard let pUnk = $0, let riid = $1, let ppvObject = $2 else { return E_INVALIDARG }

            guard riid.pointee == IUnknown.IID ||
                  riid.pointee == IInspectable.IID || 
                  riid.pointee == ISwiftImplemented.IID ||
                  riid.pointee == IIAgileObject.IID ||
                  riid.pointee == __ABI_test_component.VoidToVoidDelegateWrapper.IID else { 
                ppvObject.pointee = nil
                        return E_NOINTERFACE

            }
            _ = pUnk.pointee.lpVtbl.pointee.AddRef(pUnk)
            ppvObject.pointee = UnsafeMutableRawPointer(pUnk)
            return S_OK
        },

        AddRef: {
             guard let wrapper = VoidToVoidDelegateWrapper.from_raw($0) else { return 1 }
             _ = wrapper.retain()
             return ULONG(_getRetainCount(wrapper.takeUnretainedValue().swiftObj))
        },

        Release: {
            guard let wrapper = VoidToVoidDelegateWrapper.from_raw($0) else { return 1 }
            return ULONG(_getRetainCount(wrapper.takeRetainedValue()))
        },

        Invoke: {
            guard let __unwrapped__instance = VoidToVoidDelegateWrapper.try_unwrap_from(raw: $0) else { return E_INVALIDARG }
            __unwrapped__instance.handler(())
            return S_OK
        }
    )

    class VoidToVoidDelegateWrapper : WinRTWrapperBase<__x_ABI_Ctest__component_CIVoidToVoidDelegate, __IMPL_test_component.VoidToVoidDelegateImpl> {
        override class var IID: IID { IID___x_ABI_Ctest__component_CIVoidToVoidDelegate }
        init?(_ handler: __IMPL_test_component.VoidToVoidDelegateImpl?){
            guard let handler = handler else { return nil }
            let abi = withUnsafeMutablePointer(to: &VoidToVoidDelegateVTable) {
                __x_ABI_Ctest__component_CIVoidToVoidDelegate(lpVtbl:$0)
            }
            super.init(abi, handler)
        }
    }
    public class _ABI_NonBlittableBoolStruct {
        public var val: __x_ABI_Ctest__component_CNonBlittableBoolStruct = .init()
        public init() { }
        public init(from swift: test_component.NonBlittableBoolStruct) {
            val.First = .init(from: swift.First)
            val.Second = .init(from: swift.Second)
            val.Third = .init(from: swift.Third)
            val.Fourth = .init(from: swift.Fourth)
        }

        public func detach() -> __x_ABI_Ctest__component_CNonBlittableBoolStruct {
            let result = val
            return result
        }

        deinit {
        }
    }
    public class _ABI_NonBlittableStruct {
        public var val: __x_ABI_Ctest__component_CNonBlittableStruct = .init()
        public init() { }
        public init(from swift: test_component.NonBlittableStruct) {
            val.First = try! HString(swift.First).detach()
            val.Second = try! HString(swift.Second).detach()
            val.Third = swift.Third
            val.Fourth = try! HString(swift.Fourth).detach()
        }

        public func detach() -> __x_ABI_Ctest__component_CNonBlittableStruct {
            let result = val
            val.First = nil
            val.Second = nil
            val.Fourth = nil
            return result
        }

        deinit {
            WindowsDeleteString(val.First)
            WindowsDeleteString(val.Second)
            WindowsDeleteString(val.Fourth)
        }
    }
    internal typealias IBaseOverridesWrapper = UnsealedWinRTClassWrapper<test_component.Base.IBaseOverrides>
    internal static var IBaseOverridesVTable: __x_ABI_Ctest__component_CIBaseOverridesVtbl = .init(
        QueryInterface: {
            guard let pUnk = $0, let riid = $1, let ppvObject = $2 else { return E_INVALIDARG }

            guard riid.pointee == IUnknown.IID ||
                  riid.pointee == IInspectable.IID || 
                  riid.pointee == ISwiftImplemented.IID ||
                  riid.pointee == IIAgileObject.IID ||
                  riid.pointee == __ABI_test_component.IBaseOverridesWrapper.IID else { 
                    guard let instance = IBaseOverridesWrapper.try_unwrap_from(raw: $0),
                            let inner = instance._inner else { return E_INVALIDARG }
                        
                    return inner.pointee.lpVtbl.pointee.QueryInterface(inner, riid, ppvObject)

            }
            _ = pUnk.pointee.lpVtbl.pointee.AddRef(pUnk)
            ppvObject.pointee = UnsafeMutableRawPointer(pUnk)
            return S_OK
        },

        AddRef: {
             guard let wrapper = IBaseOverridesWrapper.from_raw($0) else { return 1 }
             _ = wrapper.retain()
             return ULONG(_getRetainCount(wrapper.takeUnretainedValue().swiftObj))
        },

        Release: {
            guard let wrapper = IBaseOverridesWrapper.from_raw($0) else { return 1 }
            return ULONG(_getRetainCount(wrapper.takeRetainedValue()))
        },

        GetIids: {
            let size = MemoryLayout<IID>.size
            let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: IID.self)
            iids[0] = IUnknown.IID
            iids[1] = IInspectable.IID
            iids[2] = __ABI_test_component.IBaseOverridesWrapper.IID
            $1!.pointee = 3
            $2!.pointee = iids
            return S_OK
        },

        GetRuntimeClassName: {
            guard let instance = IBaseOverridesWrapper.try_unwrap_from(raw: $0) else { return E_INVALIDARG }
            let hstring = instance.GetRuntimeClassName().detach()
            $1!.pointee = hstring
            return S_OK
        },

        GetTrustLevel: {
            _ = $0
            $1!.pointee = TrustLevel(rawValue: 0)
            return S_OK
        },

        OnDoTheThing: {
            guard let __unwrapped__instance = IBaseOverridesWrapper.try_unwrap_from(raw: $0) else { return E_INVALIDARG }
            __unwrapped__instance.OnDoTheThing()
            return S_OK
        }
    )
    internal typealias IUnsealedDerivedOverridesWrapper = UnsealedWinRTClassWrapper<test_component.UnsealedDerived.IUnsealedDerivedOverrides>
    internal static var IUnsealedDerivedOverridesVTable: __x_ABI_Ctest__component_CIUnsealedDerivedOverridesVtbl = .init(
        QueryInterface: {
            guard let pUnk = $0, let riid = $1, let ppvObject = $2 else { return E_INVALIDARG }
            if riid.pointee == __ABI_test_component.IBaseOverridesWrapper.IID {
                guard let instance = IUnsealedDerivedOverridesWrapper.try_unwrap_from(raw: pUnk) else { return E_NOINTERFACE }
                guard let inner = __ABI_test_component.IBaseOverridesWrapper(instance) else { return E_INVALIDARG }
                let pThis = try! inner.to_abi { $0 }
                return pThis.pointee.lpVtbl.pointee.QueryInterface(pThis, riid, ppvObject)
            }

            guard riid.pointee == IUnknown.IID ||
                  riid.pointee == IInspectable.IID || 
                  riid.pointee == ISwiftImplemented.IID ||
                  riid.pointee == IIAgileObject.IID ||
                  riid.pointee == __ABI_test_component.IUnsealedDerivedOverridesWrapper.IID else { 
                    guard let instance = IUnsealedDerivedOverridesWrapper.try_unwrap_from(raw: $0),
                            let inner = instance._inner else { return E_INVALIDARG }
                        
                    return inner.pointee.lpVtbl.pointee.QueryInterface(inner, riid, ppvObject)

            }
            _ = pUnk.pointee.lpVtbl.pointee.AddRef(pUnk)
            ppvObject.pointee = UnsafeMutableRawPointer(pUnk)
            return S_OK
        },

        AddRef: {
             guard let wrapper = IUnsealedDerivedOverridesWrapper.from_raw($0) else { return 1 }
             _ = wrapper.retain()
             return ULONG(_getRetainCount(wrapper.takeUnretainedValue().swiftObj))
        },

        Release: {
            guard let wrapper = IUnsealedDerivedOverridesWrapper.from_raw($0) else { return 1 }
            return ULONG(_getRetainCount(wrapper.takeRetainedValue()))
        },

        GetIids: {
            let size = MemoryLayout<IID>.size
            let iids = CoTaskMemAlloc(UInt64(size) * 4).assumingMemoryBound(to: IID.self)
            iids[0] = IUnknown.IID
            iids[1] = IInspectable.IID
            iids[2] = __ABI_test_component.IUnsealedDerivedOverridesWrapper.IID
            iids[3] = __ABI_test_component.IBaseOverridesWrapper.IID
            $1!.pointee = 4
            $2!.pointee = iids
            return S_OK
        },

        GetRuntimeClassName: {
            guard let instance = IUnsealedDerivedOverridesWrapper.try_unwrap_from(raw: $0) else { return E_INVALIDARG }
            let hstring = instance.GetRuntimeClassName().detach()
            $1!.pointee = hstring
            return S_OK
        },

        GetTrustLevel: {
            _ = $0
            $1!.pointee = TrustLevel(rawValue: 0)
            return S_OK
        },

        OnBeforeDoTheThing: {
            guard let __unwrapped__instance = IUnsealedDerivedOverridesWrapper.try_unwrap_from(raw: $0) else { return E_INVALIDARG }
            __unwrapped__instance.OnBeforeDoTheThing()
            return S_OK
        }
    )
    internal typealias IUnsealedDerivedOverloads2Wrapper = UnsealedWinRTClassWrapper<test_component.UnsealedDerived.IUnsealedDerivedOverloads2>
    internal static var IUnsealedDerivedOverloads2VTable: __x_ABI_Ctest__component_CIUnsealedDerivedOverloads2Vtbl = .init(
        QueryInterface: {
            guard let pUnk = $0, let riid = $1, let ppvObject = $2 else { return E_INVALIDARG }
            if riid.pointee == __ABI_test_component.IBaseOverridesWrapper.IID {
                guard let instance = IUnsealedDerivedOverloads2Wrapper.try_unwrap_from(raw: pUnk) else { return E_NOINTERFACE }
                guard let inner = __ABI_test_component.IBaseOverridesWrapper(instance) else { return E_INVALIDARG }
                let pThis = try! inner.to_abi { $0 }
                return pThis.pointee.lpVtbl.pointee.QueryInterface(pThis, riid, ppvObject)
            }
            if riid.pointee == __ABI_test_component.IUnsealedDerivedOverridesWrapper.IID {
                guard let instance = IUnsealedDerivedOverloads2Wrapper.try_unwrap_from(raw: pUnk) else { return E_NOINTERFACE }
                guard let inner = __ABI_test_component.IUnsealedDerivedOverridesWrapper(instance) else { return E_INVALIDARG }
                let pThis = try! inner.to_abi { $0 }
                return pThis.pointee.lpVtbl.pointee.QueryInterface(pThis, riid, ppvObject)
            }

            guard riid.pointee == IUnknown.IID ||
                  riid.pointee == IInspectable.IID || 
                  riid.pointee == ISwiftImplemented.IID ||
                  riid.pointee == IIAgileObject.IID ||
                  riid.pointee == __ABI_test_component.IUnsealedDerivedOverloads2Wrapper.IID else { 
                    guard let instance = IUnsealedDerivedOverloads2Wrapper.try_unwrap_from(raw: $0),
                            let inner = instance._inner else { return E_INVALIDARG }
                        
                    return inner.pointee.lpVtbl.pointee.QueryInterface(inner, riid, ppvObject)

            }
            _ = pUnk.pointee.lpVtbl.pointee.AddRef(pUnk)
            ppvObject.pointee = UnsafeMutableRawPointer(pUnk)
            return S_OK
        },

        AddRef: {
             guard let wrapper = IUnsealedDerivedOverloads2Wrapper.from_raw($0) else { return 1 }
             _ = wrapper.retain()
             return ULONG(_getRetainCount(wrapper.takeUnretainedValue().swiftObj))
        },

        Release: {
            guard let wrapper = IUnsealedDerivedOverloads2Wrapper.from_raw($0) else { return 1 }
            return ULONG(_getRetainCount(wrapper.takeRetainedValue()))
        },

        GetIids: {
            let size = MemoryLayout<IID>.size
            let iids = CoTaskMemAlloc(UInt64(size) * 5).assumingMemoryBound(to: IID.self)
            iids[0] = IUnknown.IID
            iids[1] = IInspectable.IID
            iids[2] = __ABI_test_component.IUnsealedDerivedOverloads2Wrapper.IID
            iids[3] = __ABI_test_component.IBaseOverridesWrapper.IID
            iids[4] = __ABI_test_component.IUnsealedDerivedOverridesWrapper.IID
            $1!.pointee = 5
            $2!.pointee = iids
            return S_OK
        },

        GetRuntimeClassName: {
            guard let instance = IUnsealedDerivedOverloads2Wrapper.try_unwrap_from(raw: $0) else { return E_INVALIDARG }
            let hstring = instance.GetRuntimeClassName().detach()
            $1!.pointee = hstring
            return S_OK
        },

        GetTrustLevel: {
            _ = $0
            $1!.pointee = TrustLevel(rawValue: 0)
            return S_OK
        },

        OnAfterDoTheThing: {
            guard let __unwrapped__instance = IUnsealedDerivedOverloads2Wrapper.try_unwrap_from(raw: $0) else { return E_INVALIDARG }
            __unwrapped__instance.OnAfterDoTheThing()
            return S_OK
        }
    )
}
fileprivate extension Int32 {
    init?(ref: UnsafeMutablePointer<__x_ABI_C__FIReference_1_int>?) {
        guard let val = ref else { return nil }
        var result: INT32 = .init()
        try! CHECKED(val.pointee.lpVtbl.pointee.get_Value(val, &result))
        self = result
    }
} 
fileprivate extension UUID {
    init?(ref: UnsafeMutablePointer<__x_ABI_C__FIReference_1_GUID>?) {
        guard let val = ref else { return nil }
        var result: GUID = .init()
        try! CHECKED(val.pointee.lpVtbl.pointee.get_Value(val, &result))
        self = result
    }
} 
extension __x_ABI_Ctest__component_CBlittableStruct {
    public static func from(swift: test_component.BlittableStruct) -> __x_ABI_Ctest__component_CBlittableStruct {
        .init(First: swift.First, Second: swift.Second)
    }
}
extension __x_ABI_Ctest__component_CSimpleEventArgs {
    public static func from(swift: test_component.SimpleEventArgs) -> __x_ABI_Ctest__component_CSimpleEventArgs {
        .init(Value: swift.Value)
    }
}
extension ComposableImpl where c_ABI == __x_ABI_Ctest__component_CIBaseOverrides {
    public static func makeAbi() -> c_ABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__ABI_test_component.IBaseOverridesVTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}
extension ComposableImpl where c_ABI == __x_ABI_Ctest__component_CIUnsealedDerivedOverloads2 {
    public static func makeAbi() -> c_ABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__ABI_test_component.IUnsealedDerivedOverloads2VTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}
extension ComposableImpl where c_ABI == __x_ABI_Ctest__component_CIUnsealedDerivedOverrides {
    public static func makeAbi() -> c_ABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__ABI_test_component.IUnsealedDerivedOverridesVTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}

// swift-tools-version: 6.2

// WARNING: Generated by a tool. Do not hand-edit!

import PackageDescription
/*
struct WinRTModule {
    let name: String
    var dependencies: [Target.Dependency] = []
}

let modules: [WinRTModule] = [
    WinRTModule(
        name: "UWP",
        dependencies: [
            "WindowsFoundation"
        ]
    ),
    WinRTModule(
        name: "WindowsFoundation"
    ),
    WinRTModule(
        name: "test_component",
        dependencies: [
            "WindowsFoundation",
            "UWP"
        ]
    )
]

let package = Package(
    name: "WinRT",
    products: modules.flatMap(\.asProducts),
    targets: [
      .target(
        name: "CWinRT"
      )
    ] + modules.flatMap(\.asTargets)
)

extension WinRTModule {
    var asProducts: [Product] {
        [
            .library(name: name, type: .dynamic, targets: [name]),
            .library(name: cname, targets: [cname]),
        ]
    }

    var asTargets: [Target] {
        [
            .target(
                name: name,
                dependencies: [
                    "CWinRT",
                    .byName(name: cname)
                ] + dependencies
            ),
            .target(
                name: cname,
                dependencies: [
                    "CWinRT"
                ] + dependencies.compactMap{  Target.Dependency(stringLiteral: "C\($0.name)")}
            ),
        ]
    }
    var cname: String { "C\(name)"}
}

extension Target.Dependency {
    var name: String {
        switch self {
            case .byNameItem(name: let name, condition: _): name
            case .productItem(name: let name, package: _, moduleAliases: _, condition: _): name
            case .targetItem(name: let name, condition: _): name
        }
    }
}
*/

// swift-tools-version: 6.3
// The swift-tools-version declares the minimum version of Swift required to build this package.

import PackageDescription

let package = Package(
    name: "swift-win-multic-sample",
    products: [
        // Products define the executables and libraries a package produces, making them visible to other packages.
        .library(
            name: "UWP",
            targets: ["UWP"]
        ),
        .library(
            name: "CUWP",
            targets: ["CUWP"]
        ),
        .library(
            name: "WindowsFoundation",
            targets: ["WindowsFoundation"]
        ),
        .library(
            name: "CWindowsFoundation",
            targets: ["CWindowsFoundation"]
        ),
        .library(
            name: "CWinRT",
            targets: ["CWinRT"]
        ),
        .library(
            name: "test_component",
            targets: ["test_component"]
        ),
        .library(
            name: "Ctest_component",
            targets: [ "Ctest_component" ]
        )
    ],
    targets: [
        .target(name: "CWinRT"),
        .target(
            name: "UWP",
            dependencies: [
                "CUWP",
                "WindowsFoundation"
            ]
        ),
        .target(
            name: "WindowsFoundation",
            dependencies: [
                "CWindowsFoundation"
            ]
        ),
        .target(
            name: "CUWP",
            dependencies: [
                "CWinRT",
                "CWindowsFoundation",
            ]
        ),
        .target(
            name: "CWindowsFoundation",
            dependencies: [
                "CWinRT"
            ]
        ),
        .target(
            name: "Ctest_component",
            dependencies: [
                "CWinRT",
                "CWindowsFoundation",
            ]
        ),
        .target(
            name: "test_component",
            dependencies: [
                "CWinRT",
                "Ctest_component",
                "UWP",
                "WindowsFoundation"
            ]
        ),
    ]
)

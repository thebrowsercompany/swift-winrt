import "Windows.Foundation.idl";

namespace test_component
{
    interface IAsyncOperationInt
    {
        void Complete(Int32 result);
        void CompleteWithError(HRESULT errorCode);
    }

    runtimeclass AsyncOperationInt : [default]IAsyncOperationInt, Windows.Foundation.IAsyncOperation<Int32> {}

    runtimeclass AsyncMethods
    {
        static Windows.Foundation.IAsyncOperation<Int32> GetCompletedAsync(Int32 result);
        static Windows.Foundation.IAsyncOperation<Int32> GetCompletedWithErrorAsync(HRESULT errorCode);
        static AsyncOperationInt GetPendingAsync();
    }
    
    /* just here to make sure things compile, get weird C++ linker error if try to put this on a class:
    Simple.cpp.obj : error LNK2001: unresolved external symbol 
    "public: struct winrt::Windows::Foundation::IAsyncOperationWithProgress<int,double> __cdecl winrt::test_component::implementation::Simple::OperationWithProgress(class std::chrono::time_point<struct winrt::clock,class std::chrono::duration<__int64,struct std::ratio<1,10000000> > >)"
    (?OperationWithProgress@Simple@implementation@test_component@winrt@@QEAA?AU?$IAsyncOperationWithProgress@HN@Foundation@Windows@4@V?$time_point@Uclock@winrt@@V?$duration@_JU?$ratio@$00$0JIJGIA@@std@@@chrono@std@@@chrono@std@@@Z)
    */
    interface IAsyncMethodsWithProgress
    {
        Windows.Foundation.IAsyncOperationWithProgress<Int32, Double> OperationWithProgress(Windows.Foundation.DateTime value);
    }
}
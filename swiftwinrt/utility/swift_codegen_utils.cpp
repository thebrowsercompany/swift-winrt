#include "pch.h"

#include "utility/swift_codegen_utils.h"

#include <algorithm>
#include <set>

#include "settings.h"
#include "types/typedef_base.h"
#include "type_writers.h"

namespace swiftwinrt
{
    void write_preamble(writer& w, bool swift_code)
    {
        if (settings.license)
        {
            w.write(R"(// Swift/WinRT v%
// Copyright (c) The Browser Company. All rights reserved.
)", SWIFTWINRT_VERSION_STRING);
        }
        else
        {
            w.write(R"(// WARNING: Please don't edit this file. It was generated by Swift/WinRT v%
)", SWIFTWINRT_VERSION_STRING);
            if (swift_code)
            {
                w.write("// swiftlint:disable all\n");
            }
        }

        if (swift_code && !w.type_namespace.empty() && !w.support.empty())
        {
            w.write("import Foundation\n");
            auto module = w.swift_module;
            if (!settings.test)
            {
                if (module != w.support)
                {
                    w.depends.emplace(w.support);
                }

                for (auto& import : w.depends)
                {
                    w.write("^@_spi(WinRTInternal) ^@_spi(WinRTImplements) import %\n", import);
                }
            }

            w.write("import %\n", w.c_mod);
        }

        w.write("\n");
    }

    std::string get_swift_module(std::string_view const& ns)
    {
        if (settings.test)
        {
            return settings.support;
        }

        if (ns.starts_with("Windows.Foundation"))
        {
            return "WindowsFoundation";
        }
        else if (ns.starts_with("Microsoft.UI.Xaml") || ns.starts_with("Windows.UI.Xaml"))
        {
            return "WinUI";
        }
        else if (ns.starts_with("Windows"))
        {
            return "UWP";
        }
        else if (ns.starts_with("Microsoft.Web.WebView2.Core"))
        {
            return "WebView2Core";
        }
        else if (ns.starts_with("Microsoft.Graphics.Canvas"))
        {
            return "Win2D";
        }
        else if (ns.starts_with("Microsoft"))
        {
            return "WinAppSDK";
        }

        auto mod = std::string(ns);
        mod.erase(std::remove(mod.begin(), mod.end(), '.'), mod.end());
        return mod;
    }

    std::string get_swift_module(winmd::reader::TypeDef const& type)
    {
        return get_swift_module(type.TypeNamespace());
    }

    std::string get_swift_namespace(writer const& w, std::string_view const& ns)
    {
        return get_swift_module(ns);
    }

    std::string get_swift_namespace(writer const& w, winmd::reader::TypeDef const& type)
    {
        return get_swift_namespace(w, type.TypeNamespace());
    }

    std::string get_full_swift_type_name(writer const& w, winmd::reader::TypeDef const& type)
    {
        bool use_full_name = w.full_type_names || !w.writing_generic;
        std::string result = use_full_name ? get_swift_namespace(w, type) : "";
        if (!result.empty())
        {
            result += '.';
        }

        result += type.TypeName();
        return result;
    }

    std::string get_full_swift_type_name(writer const& w, metadata_type const* type)
    {
        auto swift_full_name = type->swift_full_name();
        bool use_full_name = w.full_type_names || !w.writing_generic;

        if (auto typedef_base_ptr = dynamic_cast<const typedef_base*>(type))
        {
            auto last_ns_index = swift_full_name.find_last_of('.');
            auto ns = swift_full_name.substr(0, last_ns_index);
            auto type_name = swift_full_name.substr(last_ns_index + 1);

            std::string result = use_full_name ? get_swift_namespace(w, ns) : "";
            if (!result.empty())
            {
                result += '.';
            }

            result += type_name;
            return result;
        }
        else if (swift_full_name == "IInspectable" && use_full_name)
        {
            writer temp;
            return temp.write_temp("%.IInspectable", w.support);
        }

        return std::string(swift_full_name);
    }

    std::string get_full_swift_type_name(writer const& w, metadata_type const& type)
    {
        return get_full_swift_type_name(w, &type);
    }
}

// WARNING: Please don't edit this file. It was generated by Swift/WinRT v0.0.1

#pragma once
// Header files for imported files
#include <inspectable.h>
#include <EventToken.h>
#include <windowscontracts.h>
#include "Windows.Foundation.h"
#include "Windows.Networking.Sockets.h"
#include "Windows.Security.Cryptography.Certificates.h"
#include "Windows.Storage.Streams.h"
#include "Windows.Web.Http.Filters.h"
#include "Windows.Web.Http.Headers.h"
// Importing Collections header
#include "Windows.Foundation.Collections.h"

/* Forward Declarations */
#ifndef ____x_ABI_CWindows_CWeb_CHttp_CIHttpBufferContentFactory_FWD_DEFINED__
#define ____x_ABI_CWindows_CWeb_CHttp_CIHttpBufferContentFactory_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CWeb_CHttp_CIHttpBufferContentFactory __x_ABI_CWindows_CWeb_CHttp_CIHttpBufferContentFactory;

#endif // ____x_ABI_CWindows_CWeb_CHttp_CIHttpBufferContentFactory_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CWeb_CHttp_CIHttpClient_FWD_DEFINED__
#define ____x_ABI_CWindows_CWeb_CHttp_CIHttpClient_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CWeb_CHttp_CIHttpClient __x_ABI_CWindows_CWeb_CHttp_CIHttpClient;

#endif // ____x_ABI_CWindows_CWeb_CHttp_CIHttpClient_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CWeb_CHttp_CIHttpClient2_FWD_DEFINED__
#define ____x_ABI_CWindows_CWeb_CHttp_CIHttpClient2_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CWeb_CHttp_CIHttpClient2 __x_ABI_CWindows_CWeb_CHttp_CIHttpClient2;

#endif // ____x_ABI_CWindows_CWeb_CHttp_CIHttpClient2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CWeb_CHttp_CIHttpClientFactory_FWD_DEFINED__
#define ____x_ABI_CWindows_CWeb_CHttp_CIHttpClientFactory_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CWeb_CHttp_CIHttpClientFactory __x_ABI_CWindows_CWeb_CHttp_CIHttpClientFactory;

#endif // ____x_ABI_CWindows_CWeb_CHttp_CIHttpClientFactory_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CWeb_CHttp_CIHttpContent_FWD_DEFINED__
#define ____x_ABI_CWindows_CWeb_CHttp_CIHttpContent_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CWeb_CHttp_CIHttpContent __x_ABI_CWindows_CWeb_CHttp_CIHttpContent;

#endif // ____x_ABI_CWindows_CWeb_CHttp_CIHttpContent_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CWeb_CHttp_CIHttpCookie_FWD_DEFINED__
#define ____x_ABI_CWindows_CWeb_CHttp_CIHttpCookie_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CWeb_CHttp_CIHttpCookie __x_ABI_CWindows_CWeb_CHttp_CIHttpCookie;

#endif // ____x_ABI_CWindows_CWeb_CHttp_CIHttpCookie_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CWeb_CHttp_CIHttpCookieFactory_FWD_DEFINED__
#define ____x_ABI_CWindows_CWeb_CHttp_CIHttpCookieFactory_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CWeb_CHttp_CIHttpCookieFactory __x_ABI_CWindows_CWeb_CHttp_CIHttpCookieFactory;

#endif // ____x_ABI_CWindows_CWeb_CHttp_CIHttpCookieFactory_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CWeb_CHttp_CIHttpCookieManager_FWD_DEFINED__
#define ____x_ABI_CWindows_CWeb_CHttp_CIHttpCookieManager_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CWeb_CHttp_CIHttpCookieManager __x_ABI_CWindows_CWeb_CHttp_CIHttpCookieManager;

#endif // ____x_ABI_CWindows_CWeb_CHttp_CIHttpCookieManager_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CWeb_CHttp_CIHttpFormUrlEncodedContentFactory_FWD_DEFINED__
#define ____x_ABI_CWindows_CWeb_CHttp_CIHttpFormUrlEncodedContentFactory_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CWeb_CHttp_CIHttpFormUrlEncodedContentFactory __x_ABI_CWindows_CWeb_CHttp_CIHttpFormUrlEncodedContentFactory;

#endif // ____x_ABI_CWindows_CWeb_CHttp_CIHttpFormUrlEncodedContentFactory_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CWeb_CHttp_CIHttpGetBufferResult_FWD_DEFINED__
#define ____x_ABI_CWindows_CWeb_CHttp_CIHttpGetBufferResult_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CWeb_CHttp_CIHttpGetBufferResult __x_ABI_CWindows_CWeb_CHttp_CIHttpGetBufferResult;

#endif // ____x_ABI_CWindows_CWeb_CHttp_CIHttpGetBufferResult_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CWeb_CHttp_CIHttpGetInputStreamResult_FWD_DEFINED__
#define ____x_ABI_CWindows_CWeb_CHttp_CIHttpGetInputStreamResult_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CWeb_CHttp_CIHttpGetInputStreamResult __x_ABI_CWindows_CWeb_CHttp_CIHttpGetInputStreamResult;

#endif // ____x_ABI_CWindows_CWeb_CHttp_CIHttpGetInputStreamResult_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CWeb_CHttp_CIHttpGetStringResult_FWD_DEFINED__
#define ____x_ABI_CWindows_CWeb_CHttp_CIHttpGetStringResult_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CWeb_CHttp_CIHttpGetStringResult __x_ABI_CWindows_CWeb_CHttp_CIHttpGetStringResult;

#endif // ____x_ABI_CWindows_CWeb_CHttp_CIHttpGetStringResult_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CWeb_CHttp_CIHttpMethod_FWD_DEFINED__
#define ____x_ABI_CWindows_CWeb_CHttp_CIHttpMethod_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CWeb_CHttp_CIHttpMethod __x_ABI_CWindows_CWeb_CHttp_CIHttpMethod;

#endif // ____x_ABI_CWindows_CWeb_CHttp_CIHttpMethod_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CWeb_CHttp_CIHttpMethodFactory_FWD_DEFINED__
#define ____x_ABI_CWindows_CWeb_CHttp_CIHttpMethodFactory_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CWeb_CHttp_CIHttpMethodFactory __x_ABI_CWindows_CWeb_CHttp_CIHttpMethodFactory;

#endif // ____x_ABI_CWindows_CWeb_CHttp_CIHttpMethodFactory_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CWeb_CHttp_CIHttpMethodStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CWeb_CHttp_CIHttpMethodStatics_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CWeb_CHttp_CIHttpMethodStatics __x_ABI_CWindows_CWeb_CHttp_CIHttpMethodStatics;

#endif // ____x_ABI_CWindows_CWeb_CHttp_CIHttpMethodStatics_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CWeb_CHttp_CIHttpMultipartContent_FWD_DEFINED__
#define ____x_ABI_CWindows_CWeb_CHttp_CIHttpMultipartContent_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CWeb_CHttp_CIHttpMultipartContent __x_ABI_CWindows_CWeb_CHttp_CIHttpMultipartContent;

#endif // ____x_ABI_CWindows_CWeb_CHttp_CIHttpMultipartContent_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CWeb_CHttp_CIHttpMultipartContentFactory_FWD_DEFINED__
#define ____x_ABI_CWindows_CWeb_CHttp_CIHttpMultipartContentFactory_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CWeb_CHttp_CIHttpMultipartContentFactory __x_ABI_CWindows_CWeb_CHttp_CIHttpMultipartContentFactory;

#endif // ____x_ABI_CWindows_CWeb_CHttp_CIHttpMultipartContentFactory_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CWeb_CHttp_CIHttpMultipartFormDataContent_FWD_DEFINED__
#define ____x_ABI_CWindows_CWeb_CHttp_CIHttpMultipartFormDataContent_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CWeb_CHttp_CIHttpMultipartFormDataContent __x_ABI_CWindows_CWeb_CHttp_CIHttpMultipartFormDataContent;

#endif // ____x_ABI_CWindows_CWeb_CHttp_CIHttpMultipartFormDataContent_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CWeb_CHttp_CIHttpMultipartFormDataContentFactory_FWD_DEFINED__
#define ____x_ABI_CWindows_CWeb_CHttp_CIHttpMultipartFormDataContentFactory_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CWeb_CHttp_CIHttpMultipartFormDataContentFactory __x_ABI_CWindows_CWeb_CHttp_CIHttpMultipartFormDataContentFactory;

#endif // ____x_ABI_CWindows_CWeb_CHttp_CIHttpMultipartFormDataContentFactory_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CWeb_CHttp_CIHttpRequestMessage_FWD_DEFINED__
#define ____x_ABI_CWindows_CWeb_CHttp_CIHttpRequestMessage_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CWeb_CHttp_CIHttpRequestMessage __x_ABI_CWindows_CWeb_CHttp_CIHttpRequestMessage;

#endif // ____x_ABI_CWindows_CWeb_CHttp_CIHttpRequestMessage_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CWeb_CHttp_CIHttpRequestMessageFactory_FWD_DEFINED__
#define ____x_ABI_CWindows_CWeb_CHttp_CIHttpRequestMessageFactory_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CWeb_CHttp_CIHttpRequestMessageFactory __x_ABI_CWindows_CWeb_CHttp_CIHttpRequestMessageFactory;

#endif // ____x_ABI_CWindows_CWeb_CHttp_CIHttpRequestMessageFactory_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CWeb_CHttp_CIHttpRequestResult_FWD_DEFINED__
#define ____x_ABI_CWindows_CWeb_CHttp_CIHttpRequestResult_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CWeb_CHttp_CIHttpRequestResult __x_ABI_CWindows_CWeb_CHttp_CIHttpRequestResult;

#endif // ____x_ABI_CWindows_CWeb_CHttp_CIHttpRequestResult_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CWeb_CHttp_CIHttpResponseMessage_FWD_DEFINED__
#define ____x_ABI_CWindows_CWeb_CHttp_CIHttpResponseMessage_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CWeb_CHttp_CIHttpResponseMessage __x_ABI_CWindows_CWeb_CHttp_CIHttpResponseMessage;

#endif // ____x_ABI_CWindows_CWeb_CHttp_CIHttpResponseMessage_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CWeb_CHttp_CIHttpResponseMessageFactory_FWD_DEFINED__
#define ____x_ABI_CWindows_CWeb_CHttp_CIHttpResponseMessageFactory_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CWeb_CHttp_CIHttpResponseMessageFactory __x_ABI_CWindows_CWeb_CHttp_CIHttpResponseMessageFactory;

#endif // ____x_ABI_CWindows_CWeb_CHttp_CIHttpResponseMessageFactory_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CWeb_CHttp_CIHttpStreamContentFactory_FWD_DEFINED__
#define ____x_ABI_CWindows_CWeb_CHttp_CIHttpStreamContentFactory_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CWeb_CHttp_CIHttpStreamContentFactory __x_ABI_CWindows_CWeb_CHttp_CIHttpStreamContentFactory;

#endif // ____x_ABI_CWindows_CWeb_CHttp_CIHttpStreamContentFactory_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CWeb_CHttp_CIHttpStringContentFactory_FWD_DEFINED__
#define ____x_ABI_CWindows_CWeb_CHttp_CIHttpStringContentFactory_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CWeb_CHttp_CIHttpStringContentFactory __x_ABI_CWindows_CWeb_CHttp_CIHttpStringContentFactory;

#endif // ____x_ABI_CWindows_CWeb_CHttp_CIHttpStringContentFactory_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CWeb_CHttp_CIHttpTransportInformation_FWD_DEFINED__
#define ____x_ABI_CWindows_CWeb_CHttp_CIHttpTransportInformation_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CWeb_CHttp_CIHttpTransportInformation __x_ABI_CWindows_CWeb_CHttp_CIHttpTransportInformation;

#endif // ____x_ABI_CWindows_CWeb_CHttp_CIHttpTransportInformation_FWD_DEFINED__

// Parameterized interface forward declarations (C)

// Collection interface definitions

typedef interface __x_ABI_C__FIAsyncOperationProgressHandler_2_HSTRING_UINT64 __x_ABI_C__FIAsyncOperationProgressHandler_2_HSTRING_UINT64;

typedef interface __x_ABI_C__FIAsyncOperationWithProgress_2_HSTRING_UINT64 __x_ABI_C__FIAsyncOperationWithProgress_2_HSTRING_UINT64;

#if !defined(____x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2_HSTRING_UINT64_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2_HSTRING_UINT64_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2_HSTRING_UINT64 __x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2_HSTRING_UINT64;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2_HSTRING_UINT64;

    typedef struct __x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2_HSTRING_UINT64Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2_HSTRING_UINT64* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2_HSTRING_UINT64* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2_HSTRING_UINT64* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2_HSTRING_UINT64* This,
        __x_ABI_C__FIAsyncOperationWithProgress_2_HSTRING_UINT64* asyncInfo,
        enum __x_ABI_CWindows_CFoundation_CAsyncStatus asyncStatus);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2_HSTRING_UINT64Vtbl;

    interface __x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2_HSTRING_UINT64
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2_HSTRING_UINT64Vtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2_HSTRING_UINT64_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIAsyncOperationWithProgress_2_HSTRING_UINT64_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperationWithProgress_2_HSTRING_UINT64_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperationWithProgress_2_HSTRING_UINT64 __x_ABI_C__FIAsyncOperationWithProgress_2_HSTRING_UINT64;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperationWithProgress_2_HSTRING_UINT64;

    typedef struct __x_ABI_C__FIAsyncOperationWithProgress_2_HSTRING_UINT64Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperationWithProgress_2_HSTRING_UINT64* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperationWithProgress_2_HSTRING_UINT64* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperationWithProgress_2_HSTRING_UINT64* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIAsyncOperationWithProgress_2_HSTRING_UINT64* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIAsyncOperationWithProgress_2_HSTRING_UINT64* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIAsyncOperationWithProgress_2_HSTRING_UINT64* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* put_Progress)(__x_ABI_C__FIAsyncOperationWithProgress_2_HSTRING_UINT64* This,
        __x_ABI_C__FIAsyncOperationProgressHandler_2_HSTRING_UINT64* handler);
    HRESULT (STDMETHODCALLTYPE* get_Progress)(__x_ABI_C__FIAsyncOperationWithProgress_2_HSTRING_UINT64* This,
        __x_ABI_C__FIAsyncOperationProgressHandler_2_HSTRING_UINT64** result);
    HRESULT (STDMETHODCALLTYPE* put_Completed)(__x_ABI_C__FIAsyncOperationWithProgress_2_HSTRING_UINT64* This,
        __x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2_HSTRING_UINT64* handler);
    HRESULT (STDMETHODCALLTYPE* get_Completed)(__x_ABI_C__FIAsyncOperationWithProgress_2_HSTRING_UINT64* This,
        __x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2_HSTRING_UINT64** result);
    HRESULT (STDMETHODCALLTYPE* GetResults)(__x_ABI_C__FIAsyncOperationWithProgress_2_HSTRING_UINT64* This,
        HSTRING* result);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperationWithProgress_2_HSTRING_UINT64Vtbl;

    interface __x_ABI_C__FIAsyncOperationWithProgress_2_HSTRING_UINT64
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperationWithProgress_2_HSTRING_UINT64Vtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperationWithProgress_2_HSTRING_UINT64_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIAsyncOperationProgressHandler_2_HSTRING_UINT64_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperationProgressHandler_2_HSTRING_UINT64_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperationProgressHandler_2_HSTRING_UINT64 __x_ABI_C__FIAsyncOperationProgressHandler_2_HSTRING_UINT64;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperationProgressHandler_2_HSTRING_UINT64;

    typedef struct __x_ABI_C__FIAsyncOperationProgressHandler_2_HSTRING_UINT64Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperationProgressHandler_2_HSTRING_UINT64* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperationProgressHandler_2_HSTRING_UINT64* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperationProgressHandler_2_HSTRING_UINT64* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FIAsyncOperationProgressHandler_2_HSTRING_UINT64* This,
        __x_ABI_C__FIAsyncOperationWithProgress_2_HSTRING_UINT64* asyncInfo,
        UINT64 progressInfo);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperationProgressHandler_2_HSTRING_UINT64Vtbl;

    interface __x_ABI_C__FIAsyncOperationProgressHandler_2_HSTRING_UINT64
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperationProgressHandler_2_HSTRING_UINT64Vtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperationProgressHandler_2_HSTRING_UINT64_INTERFACE_DEFINED__
    
typedef struct __x_ABI_CWindows_CWeb_CHttp_CHttpProgress __x_ABI_CWindows_CWeb_CHttp_CHttpProgress;

typedef interface __x_ABI_C__FIAsyncOperationProgressHandler_2_HSTRING___x_ABI_CWindows__CWeb__CHttp__CHttpProgress __x_ABI_C__FIAsyncOperationProgressHandler_2_HSTRING___x_ABI_CWindows__CWeb__CHttp__CHttpProgress;

typedef interface __x_ABI_C__FIAsyncOperationWithProgress_2_HSTRING___x_ABI_CWindows__CWeb__CHttp__CHttpProgress __x_ABI_C__FIAsyncOperationWithProgress_2_HSTRING___x_ABI_CWindows__CWeb__CHttp__CHttpProgress;

#if !defined(____x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2_HSTRING___x_ABI_CWindows__CWeb__CHttp__CHttpProgress_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2_HSTRING___x_ABI_CWindows__CWeb__CHttp__CHttpProgress_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2_HSTRING___x_ABI_CWindows__CWeb__CHttp__CHttpProgress __x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2_HSTRING___x_ABI_CWindows__CWeb__CHttp__CHttpProgress;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2_HSTRING___x_ABI_CWindows__CWeb__CHttp__CHttpProgress;

    typedef struct __x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2_HSTRING___x_ABI_CWindows__CWeb__CHttp__CHttpProgressVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2_HSTRING___x_ABI_CWindows__CWeb__CHttp__CHttpProgress* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2_HSTRING___x_ABI_CWindows__CWeb__CHttp__CHttpProgress* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2_HSTRING___x_ABI_CWindows__CWeb__CHttp__CHttpProgress* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2_HSTRING___x_ABI_CWindows__CWeb__CHttp__CHttpProgress* This,
        __x_ABI_C__FIAsyncOperationWithProgress_2_HSTRING___x_ABI_CWindows__CWeb__CHttp__CHttpProgress* asyncInfo,
        enum __x_ABI_CWindows_CFoundation_CAsyncStatus asyncStatus);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2_HSTRING___x_ABI_CWindows__CWeb__CHttp__CHttpProgressVtbl;

    interface __x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2_HSTRING___x_ABI_CWindows__CWeb__CHttp__CHttpProgress
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2_HSTRING___x_ABI_CWindows__CWeb__CHttp__CHttpProgressVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2_HSTRING___x_ABI_CWindows__CWeb__CHttp__CHttpProgress_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIAsyncOperationWithProgress_2_HSTRING___x_ABI_CWindows__CWeb__CHttp__CHttpProgress_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperationWithProgress_2_HSTRING___x_ABI_CWindows__CWeb__CHttp__CHttpProgress_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperationWithProgress_2_HSTRING___x_ABI_CWindows__CWeb__CHttp__CHttpProgress __x_ABI_C__FIAsyncOperationWithProgress_2_HSTRING___x_ABI_CWindows__CWeb__CHttp__CHttpProgress;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperationWithProgress_2_HSTRING___x_ABI_CWindows__CWeb__CHttp__CHttpProgress;

    typedef struct __x_ABI_C__FIAsyncOperationWithProgress_2_HSTRING___x_ABI_CWindows__CWeb__CHttp__CHttpProgressVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperationWithProgress_2_HSTRING___x_ABI_CWindows__CWeb__CHttp__CHttpProgress* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperationWithProgress_2_HSTRING___x_ABI_CWindows__CWeb__CHttp__CHttpProgress* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperationWithProgress_2_HSTRING___x_ABI_CWindows__CWeb__CHttp__CHttpProgress* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIAsyncOperationWithProgress_2_HSTRING___x_ABI_CWindows__CWeb__CHttp__CHttpProgress* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIAsyncOperationWithProgress_2_HSTRING___x_ABI_CWindows__CWeb__CHttp__CHttpProgress* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIAsyncOperationWithProgress_2_HSTRING___x_ABI_CWindows__CWeb__CHttp__CHttpProgress* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* put_Progress)(__x_ABI_C__FIAsyncOperationWithProgress_2_HSTRING___x_ABI_CWindows__CWeb__CHttp__CHttpProgress* This,
        __x_ABI_C__FIAsyncOperationProgressHandler_2_HSTRING___x_ABI_CWindows__CWeb__CHttp__CHttpProgress* handler);
    HRESULT (STDMETHODCALLTYPE* get_Progress)(__x_ABI_C__FIAsyncOperationWithProgress_2_HSTRING___x_ABI_CWindows__CWeb__CHttp__CHttpProgress* This,
        __x_ABI_C__FIAsyncOperationProgressHandler_2_HSTRING___x_ABI_CWindows__CWeb__CHttp__CHttpProgress** result);
    HRESULT (STDMETHODCALLTYPE* put_Completed)(__x_ABI_C__FIAsyncOperationWithProgress_2_HSTRING___x_ABI_CWindows__CWeb__CHttp__CHttpProgress* This,
        __x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2_HSTRING___x_ABI_CWindows__CWeb__CHttp__CHttpProgress* handler);
    HRESULT (STDMETHODCALLTYPE* get_Completed)(__x_ABI_C__FIAsyncOperationWithProgress_2_HSTRING___x_ABI_CWindows__CWeb__CHttp__CHttpProgress* This,
        __x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2_HSTRING___x_ABI_CWindows__CWeb__CHttp__CHttpProgress** result);
    HRESULT (STDMETHODCALLTYPE* GetResults)(__x_ABI_C__FIAsyncOperationWithProgress_2_HSTRING___x_ABI_CWindows__CWeb__CHttp__CHttpProgress* This,
        HSTRING* result);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperationWithProgress_2_HSTRING___x_ABI_CWindows__CWeb__CHttp__CHttpProgressVtbl;

    interface __x_ABI_C__FIAsyncOperationWithProgress_2_HSTRING___x_ABI_CWindows__CWeb__CHttp__CHttpProgress
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperationWithProgress_2_HSTRING___x_ABI_CWindows__CWeb__CHttp__CHttpProgressVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperationWithProgress_2_HSTRING___x_ABI_CWindows__CWeb__CHttp__CHttpProgress_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIAsyncOperationProgressHandler_2_HSTRING___x_ABI_CWindows__CWeb__CHttp__CHttpProgress_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperationProgressHandler_2_HSTRING___x_ABI_CWindows__CWeb__CHttp__CHttpProgress_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperationProgressHandler_2_HSTRING___x_ABI_CWindows__CWeb__CHttp__CHttpProgress __x_ABI_C__FIAsyncOperationProgressHandler_2_HSTRING___x_ABI_CWindows__CWeb__CHttp__CHttpProgress;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperationProgressHandler_2_HSTRING___x_ABI_CWindows__CWeb__CHttp__CHttpProgress;

    typedef struct __x_ABI_C__FIAsyncOperationProgressHandler_2_HSTRING___x_ABI_CWindows__CWeb__CHttp__CHttpProgressVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperationProgressHandler_2_HSTRING___x_ABI_CWindows__CWeb__CHttp__CHttpProgress* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperationProgressHandler_2_HSTRING___x_ABI_CWindows__CWeb__CHttp__CHttpProgress* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperationProgressHandler_2_HSTRING___x_ABI_CWindows__CWeb__CHttp__CHttpProgress* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FIAsyncOperationProgressHandler_2_HSTRING___x_ABI_CWindows__CWeb__CHttp__CHttpProgress* This,
        __x_ABI_C__FIAsyncOperationWithProgress_2_HSTRING___x_ABI_CWindows__CWeb__CHttp__CHttpProgress* asyncInfo,
        struct __x_ABI_CWindows_CWeb_CHttp_CHttpProgress progressInfo);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperationProgressHandler_2_HSTRING___x_ABI_CWindows__CWeb__CHttp__CHttpProgressVtbl;

    interface __x_ABI_C__FIAsyncOperationProgressHandler_2_HSTRING___x_ABI_CWindows__CWeb__CHttp__CHttpProgress
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperationProgressHandler_2_HSTRING___x_ABI_CWindows__CWeb__CHttp__CHttpProgressVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperationProgressHandler_2_HSTRING___x_ABI_CWindows__CWeb__CHttp__CHttpProgress_INTERFACE_DEFINED__
    
typedef interface __x_ABI_C__FIAsyncOperationProgressHandler_2_UINT64_UINT64 __x_ABI_C__FIAsyncOperationProgressHandler_2_UINT64_UINT64;

typedef interface __x_ABI_C__FIAsyncOperationWithProgress_2_UINT64_UINT64 __x_ABI_C__FIAsyncOperationWithProgress_2_UINT64_UINT64;

#if !defined(____x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2_UINT64_UINT64_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2_UINT64_UINT64_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2_UINT64_UINT64 __x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2_UINT64_UINT64;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2_UINT64_UINT64;

    typedef struct __x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2_UINT64_UINT64Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2_UINT64_UINT64* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2_UINT64_UINT64* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2_UINT64_UINT64* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2_UINT64_UINT64* This,
        __x_ABI_C__FIAsyncOperationWithProgress_2_UINT64_UINT64* asyncInfo,
        enum __x_ABI_CWindows_CFoundation_CAsyncStatus asyncStatus);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2_UINT64_UINT64Vtbl;

    interface __x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2_UINT64_UINT64
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2_UINT64_UINT64Vtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2_UINT64_UINT64_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIAsyncOperationWithProgress_2_UINT64_UINT64_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperationWithProgress_2_UINT64_UINT64_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperationWithProgress_2_UINT64_UINT64 __x_ABI_C__FIAsyncOperationWithProgress_2_UINT64_UINT64;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperationWithProgress_2_UINT64_UINT64;

    typedef struct __x_ABI_C__FIAsyncOperationWithProgress_2_UINT64_UINT64Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperationWithProgress_2_UINT64_UINT64* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperationWithProgress_2_UINT64_UINT64* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperationWithProgress_2_UINT64_UINT64* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIAsyncOperationWithProgress_2_UINT64_UINT64* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIAsyncOperationWithProgress_2_UINT64_UINT64* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIAsyncOperationWithProgress_2_UINT64_UINT64* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* put_Progress)(__x_ABI_C__FIAsyncOperationWithProgress_2_UINT64_UINT64* This,
        __x_ABI_C__FIAsyncOperationProgressHandler_2_UINT64_UINT64* handler);
    HRESULT (STDMETHODCALLTYPE* get_Progress)(__x_ABI_C__FIAsyncOperationWithProgress_2_UINT64_UINT64* This,
        __x_ABI_C__FIAsyncOperationProgressHandler_2_UINT64_UINT64** result);
    HRESULT (STDMETHODCALLTYPE* put_Completed)(__x_ABI_C__FIAsyncOperationWithProgress_2_UINT64_UINT64* This,
        __x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2_UINT64_UINT64* handler);
    HRESULT (STDMETHODCALLTYPE* get_Completed)(__x_ABI_C__FIAsyncOperationWithProgress_2_UINT64_UINT64* This,
        __x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2_UINT64_UINT64** result);
    HRESULT (STDMETHODCALLTYPE* GetResults)(__x_ABI_C__FIAsyncOperationWithProgress_2_UINT64_UINT64* This,
        UINT64* result);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperationWithProgress_2_UINT64_UINT64Vtbl;

    interface __x_ABI_C__FIAsyncOperationWithProgress_2_UINT64_UINT64
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperationWithProgress_2_UINT64_UINT64Vtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperationWithProgress_2_UINT64_UINT64_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIAsyncOperationProgressHandler_2_UINT64_UINT64_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperationProgressHandler_2_UINT64_UINT64_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperationProgressHandler_2_UINT64_UINT64 __x_ABI_C__FIAsyncOperationProgressHandler_2_UINT64_UINT64;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperationProgressHandler_2_UINT64_UINT64;

    typedef struct __x_ABI_C__FIAsyncOperationProgressHandler_2_UINT64_UINT64Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperationProgressHandler_2_UINT64_UINT64* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperationProgressHandler_2_UINT64_UINT64* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperationProgressHandler_2_UINT64_UINT64* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FIAsyncOperationProgressHandler_2_UINT64_UINT64* This,
        __x_ABI_C__FIAsyncOperationWithProgress_2_UINT64_UINT64* asyncInfo,
        UINT64 progressInfo);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperationProgressHandler_2_UINT64_UINT64Vtbl;

    interface __x_ABI_C__FIAsyncOperationProgressHandler_2_UINT64_UINT64
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperationProgressHandler_2_UINT64_UINT64Vtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperationProgressHandler_2_UINT64_UINT64_INTERFACE_DEFINED__
    
#ifndef ____x_ABI_CWindows_CStorage_CStreams_CIBuffer_FWD_DEFINED__
#define ____x_ABI_CWindows_CStorage_CStreams_CIBuffer_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CStorage_CStreams_CIBuffer __x_ABI_CWindows_CStorage_CStreams_CIBuffer;

#endif // ____x_ABI_CWindows_CStorage_CStreams_CIBuffer_FWD_DEFINED__

typedef interface __x_ABI_C__FIAsyncOperationProgressHandler_2___x_ABI_CWindows__CStorage__CStreams__CIBuffer_UINT64 __x_ABI_C__FIAsyncOperationProgressHandler_2___x_ABI_CWindows__CStorage__CStreams__CIBuffer_UINT64;

typedef interface __x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CStorage__CStreams__CIBuffer_UINT64 __x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CStorage__CStreams__CIBuffer_UINT64;

#if !defined(____x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2___x_ABI_CWindows__CStorage__CStreams__CIBuffer_UINT64_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2___x_ABI_CWindows__CStorage__CStreams__CIBuffer_UINT64_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2___x_ABI_CWindows__CStorage__CStreams__CIBuffer_UINT64 __x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2___x_ABI_CWindows__CStorage__CStreams__CIBuffer_UINT64;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2___x_ABI_CWindows__CStorage__CStreams__CIBuffer_UINT64;

    typedef struct __x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2___x_ABI_CWindows__CStorage__CStreams__CIBuffer_UINT64Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2___x_ABI_CWindows__CStorage__CStreams__CIBuffer_UINT64* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2___x_ABI_CWindows__CStorage__CStreams__CIBuffer_UINT64* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2___x_ABI_CWindows__CStorage__CStreams__CIBuffer_UINT64* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2___x_ABI_CWindows__CStorage__CStreams__CIBuffer_UINT64* This,
        __x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CStorage__CStreams__CIBuffer_UINT64* asyncInfo,
        enum __x_ABI_CWindows_CFoundation_CAsyncStatus asyncStatus);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2___x_ABI_CWindows__CStorage__CStreams__CIBuffer_UINT64Vtbl;

    interface __x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2___x_ABI_CWindows__CStorage__CStreams__CIBuffer_UINT64
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2___x_ABI_CWindows__CStorage__CStreams__CIBuffer_UINT64Vtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2___x_ABI_CWindows__CStorage__CStreams__CIBuffer_UINT64_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CStorage__CStreams__CIBuffer_UINT64_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CStorage__CStreams__CIBuffer_UINT64_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CStorage__CStreams__CIBuffer_UINT64 __x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CStorage__CStreams__CIBuffer_UINT64;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CStorage__CStreams__CIBuffer_UINT64;

    typedef struct __x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CStorage__CStreams__CIBuffer_UINT64Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CStorage__CStreams__CIBuffer_UINT64* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CStorage__CStreams__CIBuffer_UINT64* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CStorage__CStreams__CIBuffer_UINT64* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CStorage__CStreams__CIBuffer_UINT64* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CStorage__CStreams__CIBuffer_UINT64* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CStorage__CStreams__CIBuffer_UINT64* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* put_Progress)(__x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CStorage__CStreams__CIBuffer_UINT64* This,
        __x_ABI_C__FIAsyncOperationProgressHandler_2___x_ABI_CWindows__CStorage__CStreams__CIBuffer_UINT64* handler);
    HRESULT (STDMETHODCALLTYPE* get_Progress)(__x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CStorage__CStreams__CIBuffer_UINT64* This,
        __x_ABI_C__FIAsyncOperationProgressHandler_2___x_ABI_CWindows__CStorage__CStreams__CIBuffer_UINT64** result);
    HRESULT (STDMETHODCALLTYPE* put_Completed)(__x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CStorage__CStreams__CIBuffer_UINT64* This,
        __x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2___x_ABI_CWindows__CStorage__CStreams__CIBuffer_UINT64* handler);
    HRESULT (STDMETHODCALLTYPE* get_Completed)(__x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CStorage__CStreams__CIBuffer_UINT64* This,
        __x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2___x_ABI_CWindows__CStorage__CStreams__CIBuffer_UINT64** result);
    HRESULT (STDMETHODCALLTYPE* GetResults)(__x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CStorage__CStreams__CIBuffer_UINT64* This,
        __x_ABI_CWindows_CStorage_CStreams_CIBuffer** result);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CStorage__CStreams__CIBuffer_UINT64Vtbl;

    interface __x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CStorage__CStreams__CIBuffer_UINT64
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CStorage__CStreams__CIBuffer_UINT64Vtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CStorage__CStreams__CIBuffer_UINT64_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIAsyncOperationProgressHandler_2___x_ABI_CWindows__CStorage__CStreams__CIBuffer_UINT64_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperationProgressHandler_2___x_ABI_CWindows__CStorage__CStreams__CIBuffer_UINT64_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperationProgressHandler_2___x_ABI_CWindows__CStorage__CStreams__CIBuffer_UINT64 __x_ABI_C__FIAsyncOperationProgressHandler_2___x_ABI_CWindows__CStorage__CStreams__CIBuffer_UINT64;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperationProgressHandler_2___x_ABI_CWindows__CStorage__CStreams__CIBuffer_UINT64;

    typedef struct __x_ABI_C__FIAsyncOperationProgressHandler_2___x_ABI_CWindows__CStorage__CStreams__CIBuffer_UINT64Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperationProgressHandler_2___x_ABI_CWindows__CStorage__CStreams__CIBuffer_UINT64* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperationProgressHandler_2___x_ABI_CWindows__CStorage__CStreams__CIBuffer_UINT64* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperationProgressHandler_2___x_ABI_CWindows__CStorage__CStreams__CIBuffer_UINT64* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FIAsyncOperationProgressHandler_2___x_ABI_CWindows__CStorage__CStreams__CIBuffer_UINT64* This,
        __x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CStorage__CStreams__CIBuffer_UINT64* asyncInfo,
        UINT64 progressInfo);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperationProgressHandler_2___x_ABI_CWindows__CStorage__CStreams__CIBuffer_UINT64Vtbl;

    interface __x_ABI_C__FIAsyncOperationProgressHandler_2___x_ABI_CWindows__CStorage__CStreams__CIBuffer_UINT64
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperationProgressHandler_2___x_ABI_CWindows__CStorage__CStreams__CIBuffer_UINT64Vtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperationProgressHandler_2___x_ABI_CWindows__CStorage__CStreams__CIBuffer_UINT64_INTERFACE_DEFINED__
    
typedef interface __x_ABI_C__FIAsyncOperationProgressHandler_2___x_ABI_CWindows__CStorage__CStreams__CIBuffer___x_ABI_CWindows__CWeb__CHttp__CHttpProgress __x_ABI_C__FIAsyncOperationProgressHandler_2___x_ABI_CWindows__CStorage__CStreams__CIBuffer___x_ABI_CWindows__CWeb__CHttp__CHttpProgress;

typedef interface __x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CStorage__CStreams__CIBuffer___x_ABI_CWindows__CWeb__CHttp__CHttpProgress __x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CStorage__CStreams__CIBuffer___x_ABI_CWindows__CWeb__CHttp__CHttpProgress;

#if !defined(____x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2___x_ABI_CWindows__CStorage__CStreams__CIBuffer___x_ABI_CWindows__CWeb__CHttp__CHttpProgress_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2___x_ABI_CWindows__CStorage__CStreams__CIBuffer___x_ABI_CWindows__CWeb__CHttp__CHttpProgress_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2___x_ABI_CWindows__CStorage__CStreams__CIBuffer___x_ABI_CWindows__CWeb__CHttp__CHttpProgress __x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2___x_ABI_CWindows__CStorage__CStreams__CIBuffer___x_ABI_CWindows__CWeb__CHttp__CHttpProgress;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2___x_ABI_CWindows__CStorage__CStreams__CIBuffer___x_ABI_CWindows__CWeb__CHttp__CHttpProgress;

    typedef struct __x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2___x_ABI_CWindows__CStorage__CStreams__CIBuffer___x_ABI_CWindows__CWeb__CHttp__CHttpProgressVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2___x_ABI_CWindows__CStorage__CStreams__CIBuffer___x_ABI_CWindows__CWeb__CHttp__CHttpProgress* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2___x_ABI_CWindows__CStorage__CStreams__CIBuffer___x_ABI_CWindows__CWeb__CHttp__CHttpProgress* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2___x_ABI_CWindows__CStorage__CStreams__CIBuffer___x_ABI_CWindows__CWeb__CHttp__CHttpProgress* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2___x_ABI_CWindows__CStorage__CStreams__CIBuffer___x_ABI_CWindows__CWeb__CHttp__CHttpProgress* This,
        __x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CStorage__CStreams__CIBuffer___x_ABI_CWindows__CWeb__CHttp__CHttpProgress* asyncInfo,
        enum __x_ABI_CWindows_CFoundation_CAsyncStatus asyncStatus);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2___x_ABI_CWindows__CStorage__CStreams__CIBuffer___x_ABI_CWindows__CWeb__CHttp__CHttpProgressVtbl;

    interface __x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2___x_ABI_CWindows__CStorage__CStreams__CIBuffer___x_ABI_CWindows__CWeb__CHttp__CHttpProgress
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2___x_ABI_CWindows__CStorage__CStreams__CIBuffer___x_ABI_CWindows__CWeb__CHttp__CHttpProgressVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2___x_ABI_CWindows__CStorage__CStreams__CIBuffer___x_ABI_CWindows__CWeb__CHttp__CHttpProgress_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CStorage__CStreams__CIBuffer___x_ABI_CWindows__CWeb__CHttp__CHttpProgress_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CStorage__CStreams__CIBuffer___x_ABI_CWindows__CWeb__CHttp__CHttpProgress_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CStorage__CStreams__CIBuffer___x_ABI_CWindows__CWeb__CHttp__CHttpProgress __x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CStorage__CStreams__CIBuffer___x_ABI_CWindows__CWeb__CHttp__CHttpProgress;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CStorage__CStreams__CIBuffer___x_ABI_CWindows__CWeb__CHttp__CHttpProgress;

    typedef struct __x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CStorage__CStreams__CIBuffer___x_ABI_CWindows__CWeb__CHttp__CHttpProgressVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CStorage__CStreams__CIBuffer___x_ABI_CWindows__CWeb__CHttp__CHttpProgress* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CStorage__CStreams__CIBuffer___x_ABI_CWindows__CWeb__CHttp__CHttpProgress* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CStorage__CStreams__CIBuffer___x_ABI_CWindows__CWeb__CHttp__CHttpProgress* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CStorage__CStreams__CIBuffer___x_ABI_CWindows__CWeb__CHttp__CHttpProgress* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CStorage__CStreams__CIBuffer___x_ABI_CWindows__CWeb__CHttp__CHttpProgress* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CStorage__CStreams__CIBuffer___x_ABI_CWindows__CWeb__CHttp__CHttpProgress* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* put_Progress)(__x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CStorage__CStreams__CIBuffer___x_ABI_CWindows__CWeb__CHttp__CHttpProgress* This,
        __x_ABI_C__FIAsyncOperationProgressHandler_2___x_ABI_CWindows__CStorage__CStreams__CIBuffer___x_ABI_CWindows__CWeb__CHttp__CHttpProgress* handler);
    HRESULT (STDMETHODCALLTYPE* get_Progress)(__x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CStorage__CStreams__CIBuffer___x_ABI_CWindows__CWeb__CHttp__CHttpProgress* This,
        __x_ABI_C__FIAsyncOperationProgressHandler_2___x_ABI_CWindows__CStorage__CStreams__CIBuffer___x_ABI_CWindows__CWeb__CHttp__CHttpProgress** result);
    HRESULT (STDMETHODCALLTYPE* put_Completed)(__x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CStorage__CStreams__CIBuffer___x_ABI_CWindows__CWeb__CHttp__CHttpProgress* This,
        __x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2___x_ABI_CWindows__CStorage__CStreams__CIBuffer___x_ABI_CWindows__CWeb__CHttp__CHttpProgress* handler);
    HRESULT (STDMETHODCALLTYPE* get_Completed)(__x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CStorage__CStreams__CIBuffer___x_ABI_CWindows__CWeb__CHttp__CHttpProgress* This,
        __x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2___x_ABI_CWindows__CStorage__CStreams__CIBuffer___x_ABI_CWindows__CWeb__CHttp__CHttpProgress** result);
    HRESULT (STDMETHODCALLTYPE* GetResults)(__x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CStorage__CStreams__CIBuffer___x_ABI_CWindows__CWeb__CHttp__CHttpProgress* This,
        __x_ABI_CWindows_CStorage_CStreams_CIBuffer** result);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CStorage__CStreams__CIBuffer___x_ABI_CWindows__CWeb__CHttp__CHttpProgressVtbl;

    interface __x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CStorage__CStreams__CIBuffer___x_ABI_CWindows__CWeb__CHttp__CHttpProgress
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CStorage__CStreams__CIBuffer___x_ABI_CWindows__CWeb__CHttp__CHttpProgressVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CStorage__CStreams__CIBuffer___x_ABI_CWindows__CWeb__CHttp__CHttpProgress_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIAsyncOperationProgressHandler_2___x_ABI_CWindows__CStorage__CStreams__CIBuffer___x_ABI_CWindows__CWeb__CHttp__CHttpProgress_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperationProgressHandler_2___x_ABI_CWindows__CStorage__CStreams__CIBuffer___x_ABI_CWindows__CWeb__CHttp__CHttpProgress_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperationProgressHandler_2___x_ABI_CWindows__CStorage__CStreams__CIBuffer___x_ABI_CWindows__CWeb__CHttp__CHttpProgress __x_ABI_C__FIAsyncOperationProgressHandler_2___x_ABI_CWindows__CStorage__CStreams__CIBuffer___x_ABI_CWindows__CWeb__CHttp__CHttpProgress;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperationProgressHandler_2___x_ABI_CWindows__CStorage__CStreams__CIBuffer___x_ABI_CWindows__CWeb__CHttp__CHttpProgress;

    typedef struct __x_ABI_C__FIAsyncOperationProgressHandler_2___x_ABI_CWindows__CStorage__CStreams__CIBuffer___x_ABI_CWindows__CWeb__CHttp__CHttpProgressVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperationProgressHandler_2___x_ABI_CWindows__CStorage__CStreams__CIBuffer___x_ABI_CWindows__CWeb__CHttp__CHttpProgress* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperationProgressHandler_2___x_ABI_CWindows__CStorage__CStreams__CIBuffer___x_ABI_CWindows__CWeb__CHttp__CHttpProgress* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperationProgressHandler_2___x_ABI_CWindows__CStorage__CStreams__CIBuffer___x_ABI_CWindows__CWeb__CHttp__CHttpProgress* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FIAsyncOperationProgressHandler_2___x_ABI_CWindows__CStorage__CStreams__CIBuffer___x_ABI_CWindows__CWeb__CHttp__CHttpProgress* This,
        __x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CStorage__CStreams__CIBuffer___x_ABI_CWindows__CWeb__CHttp__CHttpProgress* asyncInfo,
        struct __x_ABI_CWindows_CWeb_CHttp_CHttpProgress progressInfo);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperationProgressHandler_2___x_ABI_CWindows__CStorage__CStreams__CIBuffer___x_ABI_CWindows__CWeb__CHttp__CHttpProgressVtbl;

    interface __x_ABI_C__FIAsyncOperationProgressHandler_2___x_ABI_CWindows__CStorage__CStreams__CIBuffer___x_ABI_CWindows__CWeb__CHttp__CHttpProgress
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperationProgressHandler_2___x_ABI_CWindows__CStorage__CStreams__CIBuffer___x_ABI_CWindows__CWeb__CHttp__CHttpProgressVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperationProgressHandler_2___x_ABI_CWindows__CStorage__CStreams__CIBuffer___x_ABI_CWindows__CWeb__CHttp__CHttpProgress_INTERFACE_DEFINED__
    
#ifndef ____x_ABI_CWindows_CStorage_CStreams_CIInputStream_FWD_DEFINED__
#define ____x_ABI_CWindows_CStorage_CStreams_CIInputStream_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CStorage_CStreams_CIInputStream __x_ABI_CWindows_CStorage_CStreams_CIInputStream;

#endif // ____x_ABI_CWindows_CStorage_CStreams_CIInputStream_FWD_DEFINED__

typedef interface __x_ABI_C__FIAsyncOperationProgressHandler_2___x_ABI_CWindows__CStorage__CStreams__CIInputStream_UINT64 __x_ABI_C__FIAsyncOperationProgressHandler_2___x_ABI_CWindows__CStorage__CStreams__CIInputStream_UINT64;

typedef interface __x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CStorage__CStreams__CIInputStream_UINT64 __x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CStorage__CStreams__CIInputStream_UINT64;

#if !defined(____x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2___x_ABI_CWindows__CStorage__CStreams__CIInputStream_UINT64_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2___x_ABI_CWindows__CStorage__CStreams__CIInputStream_UINT64_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2___x_ABI_CWindows__CStorage__CStreams__CIInputStream_UINT64 __x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2___x_ABI_CWindows__CStorage__CStreams__CIInputStream_UINT64;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2___x_ABI_CWindows__CStorage__CStreams__CIInputStream_UINT64;

    typedef struct __x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2___x_ABI_CWindows__CStorage__CStreams__CIInputStream_UINT64Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2___x_ABI_CWindows__CStorage__CStreams__CIInputStream_UINT64* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2___x_ABI_CWindows__CStorage__CStreams__CIInputStream_UINT64* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2___x_ABI_CWindows__CStorage__CStreams__CIInputStream_UINT64* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2___x_ABI_CWindows__CStorage__CStreams__CIInputStream_UINT64* This,
        __x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CStorage__CStreams__CIInputStream_UINT64* asyncInfo,
        enum __x_ABI_CWindows_CFoundation_CAsyncStatus asyncStatus);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2___x_ABI_CWindows__CStorage__CStreams__CIInputStream_UINT64Vtbl;

    interface __x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2___x_ABI_CWindows__CStorage__CStreams__CIInputStream_UINT64
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2___x_ABI_CWindows__CStorage__CStreams__CIInputStream_UINT64Vtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2___x_ABI_CWindows__CStorage__CStreams__CIInputStream_UINT64_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CStorage__CStreams__CIInputStream_UINT64_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CStorage__CStreams__CIInputStream_UINT64_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CStorage__CStreams__CIInputStream_UINT64 __x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CStorage__CStreams__CIInputStream_UINT64;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CStorage__CStreams__CIInputStream_UINT64;

    typedef struct __x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CStorage__CStreams__CIInputStream_UINT64Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CStorage__CStreams__CIInputStream_UINT64* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CStorage__CStreams__CIInputStream_UINT64* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CStorage__CStreams__CIInputStream_UINT64* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CStorage__CStreams__CIInputStream_UINT64* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CStorage__CStreams__CIInputStream_UINT64* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CStorage__CStreams__CIInputStream_UINT64* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* put_Progress)(__x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CStorage__CStreams__CIInputStream_UINT64* This,
        __x_ABI_C__FIAsyncOperationProgressHandler_2___x_ABI_CWindows__CStorage__CStreams__CIInputStream_UINT64* handler);
    HRESULT (STDMETHODCALLTYPE* get_Progress)(__x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CStorage__CStreams__CIInputStream_UINT64* This,
        __x_ABI_C__FIAsyncOperationProgressHandler_2___x_ABI_CWindows__CStorage__CStreams__CIInputStream_UINT64** result);
    HRESULT (STDMETHODCALLTYPE* put_Completed)(__x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CStorage__CStreams__CIInputStream_UINT64* This,
        __x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2___x_ABI_CWindows__CStorage__CStreams__CIInputStream_UINT64* handler);
    HRESULT (STDMETHODCALLTYPE* get_Completed)(__x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CStorage__CStreams__CIInputStream_UINT64* This,
        __x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2___x_ABI_CWindows__CStorage__CStreams__CIInputStream_UINT64** result);
    HRESULT (STDMETHODCALLTYPE* GetResults)(__x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CStorage__CStreams__CIInputStream_UINT64* This,
        __x_ABI_CWindows_CStorage_CStreams_CIInputStream** result);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CStorage__CStreams__CIInputStream_UINT64Vtbl;

    interface __x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CStorage__CStreams__CIInputStream_UINT64
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CStorage__CStreams__CIInputStream_UINT64Vtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CStorage__CStreams__CIInputStream_UINT64_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIAsyncOperationProgressHandler_2___x_ABI_CWindows__CStorage__CStreams__CIInputStream_UINT64_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperationProgressHandler_2___x_ABI_CWindows__CStorage__CStreams__CIInputStream_UINT64_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperationProgressHandler_2___x_ABI_CWindows__CStorage__CStreams__CIInputStream_UINT64 __x_ABI_C__FIAsyncOperationProgressHandler_2___x_ABI_CWindows__CStorage__CStreams__CIInputStream_UINT64;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperationProgressHandler_2___x_ABI_CWindows__CStorage__CStreams__CIInputStream_UINT64;

    typedef struct __x_ABI_C__FIAsyncOperationProgressHandler_2___x_ABI_CWindows__CStorage__CStreams__CIInputStream_UINT64Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperationProgressHandler_2___x_ABI_CWindows__CStorage__CStreams__CIInputStream_UINT64* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperationProgressHandler_2___x_ABI_CWindows__CStorage__CStreams__CIInputStream_UINT64* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperationProgressHandler_2___x_ABI_CWindows__CStorage__CStreams__CIInputStream_UINT64* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FIAsyncOperationProgressHandler_2___x_ABI_CWindows__CStorage__CStreams__CIInputStream_UINT64* This,
        __x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CStorage__CStreams__CIInputStream_UINT64* asyncInfo,
        UINT64 progressInfo);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperationProgressHandler_2___x_ABI_CWindows__CStorage__CStreams__CIInputStream_UINT64Vtbl;

    interface __x_ABI_C__FIAsyncOperationProgressHandler_2___x_ABI_CWindows__CStorage__CStreams__CIInputStream_UINT64
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperationProgressHandler_2___x_ABI_CWindows__CStorage__CStreams__CIInputStream_UINT64Vtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperationProgressHandler_2___x_ABI_CWindows__CStorage__CStreams__CIInputStream_UINT64_INTERFACE_DEFINED__
    
typedef interface __x_ABI_C__FIAsyncOperationProgressHandler_2___x_ABI_CWindows__CStorage__CStreams__CIInputStream___x_ABI_CWindows__CWeb__CHttp__CHttpProgress __x_ABI_C__FIAsyncOperationProgressHandler_2___x_ABI_CWindows__CStorage__CStreams__CIInputStream___x_ABI_CWindows__CWeb__CHttp__CHttpProgress;

typedef interface __x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CStorage__CStreams__CIInputStream___x_ABI_CWindows__CWeb__CHttp__CHttpProgress __x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CStorage__CStreams__CIInputStream___x_ABI_CWindows__CWeb__CHttp__CHttpProgress;

#if !defined(____x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2___x_ABI_CWindows__CStorage__CStreams__CIInputStream___x_ABI_CWindows__CWeb__CHttp__CHttpProgress_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2___x_ABI_CWindows__CStorage__CStreams__CIInputStream___x_ABI_CWindows__CWeb__CHttp__CHttpProgress_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2___x_ABI_CWindows__CStorage__CStreams__CIInputStream___x_ABI_CWindows__CWeb__CHttp__CHttpProgress __x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2___x_ABI_CWindows__CStorage__CStreams__CIInputStream___x_ABI_CWindows__CWeb__CHttp__CHttpProgress;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2___x_ABI_CWindows__CStorage__CStreams__CIInputStream___x_ABI_CWindows__CWeb__CHttp__CHttpProgress;

    typedef struct __x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2___x_ABI_CWindows__CStorage__CStreams__CIInputStream___x_ABI_CWindows__CWeb__CHttp__CHttpProgressVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2___x_ABI_CWindows__CStorage__CStreams__CIInputStream___x_ABI_CWindows__CWeb__CHttp__CHttpProgress* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2___x_ABI_CWindows__CStorage__CStreams__CIInputStream___x_ABI_CWindows__CWeb__CHttp__CHttpProgress* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2___x_ABI_CWindows__CStorage__CStreams__CIInputStream___x_ABI_CWindows__CWeb__CHttp__CHttpProgress* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2___x_ABI_CWindows__CStorage__CStreams__CIInputStream___x_ABI_CWindows__CWeb__CHttp__CHttpProgress* This,
        __x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CStorage__CStreams__CIInputStream___x_ABI_CWindows__CWeb__CHttp__CHttpProgress* asyncInfo,
        enum __x_ABI_CWindows_CFoundation_CAsyncStatus asyncStatus);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2___x_ABI_CWindows__CStorage__CStreams__CIInputStream___x_ABI_CWindows__CWeb__CHttp__CHttpProgressVtbl;

    interface __x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2___x_ABI_CWindows__CStorage__CStreams__CIInputStream___x_ABI_CWindows__CWeb__CHttp__CHttpProgress
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2___x_ABI_CWindows__CStorage__CStreams__CIInputStream___x_ABI_CWindows__CWeb__CHttp__CHttpProgressVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2___x_ABI_CWindows__CStorage__CStreams__CIInputStream___x_ABI_CWindows__CWeb__CHttp__CHttpProgress_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CStorage__CStreams__CIInputStream___x_ABI_CWindows__CWeb__CHttp__CHttpProgress_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CStorage__CStreams__CIInputStream___x_ABI_CWindows__CWeb__CHttp__CHttpProgress_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CStorage__CStreams__CIInputStream___x_ABI_CWindows__CWeb__CHttp__CHttpProgress __x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CStorage__CStreams__CIInputStream___x_ABI_CWindows__CWeb__CHttp__CHttpProgress;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CStorage__CStreams__CIInputStream___x_ABI_CWindows__CWeb__CHttp__CHttpProgress;

    typedef struct __x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CStorage__CStreams__CIInputStream___x_ABI_CWindows__CWeb__CHttp__CHttpProgressVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CStorage__CStreams__CIInputStream___x_ABI_CWindows__CWeb__CHttp__CHttpProgress* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CStorage__CStreams__CIInputStream___x_ABI_CWindows__CWeb__CHttp__CHttpProgress* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CStorage__CStreams__CIInputStream___x_ABI_CWindows__CWeb__CHttp__CHttpProgress* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CStorage__CStreams__CIInputStream___x_ABI_CWindows__CWeb__CHttp__CHttpProgress* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CStorage__CStreams__CIInputStream___x_ABI_CWindows__CWeb__CHttp__CHttpProgress* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CStorage__CStreams__CIInputStream___x_ABI_CWindows__CWeb__CHttp__CHttpProgress* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* put_Progress)(__x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CStorage__CStreams__CIInputStream___x_ABI_CWindows__CWeb__CHttp__CHttpProgress* This,
        __x_ABI_C__FIAsyncOperationProgressHandler_2___x_ABI_CWindows__CStorage__CStreams__CIInputStream___x_ABI_CWindows__CWeb__CHttp__CHttpProgress* handler);
    HRESULT (STDMETHODCALLTYPE* get_Progress)(__x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CStorage__CStreams__CIInputStream___x_ABI_CWindows__CWeb__CHttp__CHttpProgress* This,
        __x_ABI_C__FIAsyncOperationProgressHandler_2___x_ABI_CWindows__CStorage__CStreams__CIInputStream___x_ABI_CWindows__CWeb__CHttp__CHttpProgress** result);
    HRESULT (STDMETHODCALLTYPE* put_Completed)(__x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CStorage__CStreams__CIInputStream___x_ABI_CWindows__CWeb__CHttp__CHttpProgress* This,
        __x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2___x_ABI_CWindows__CStorage__CStreams__CIInputStream___x_ABI_CWindows__CWeb__CHttp__CHttpProgress* handler);
    HRESULT (STDMETHODCALLTYPE* get_Completed)(__x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CStorage__CStreams__CIInputStream___x_ABI_CWindows__CWeb__CHttp__CHttpProgress* This,
        __x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2___x_ABI_CWindows__CStorage__CStreams__CIInputStream___x_ABI_CWindows__CWeb__CHttp__CHttpProgress** result);
    HRESULT (STDMETHODCALLTYPE* GetResults)(__x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CStorage__CStreams__CIInputStream___x_ABI_CWindows__CWeb__CHttp__CHttpProgress* This,
        __x_ABI_CWindows_CStorage_CStreams_CIInputStream** result);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CStorage__CStreams__CIInputStream___x_ABI_CWindows__CWeb__CHttp__CHttpProgressVtbl;

    interface __x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CStorage__CStreams__CIInputStream___x_ABI_CWindows__CWeb__CHttp__CHttpProgress
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CStorage__CStreams__CIInputStream___x_ABI_CWindows__CWeb__CHttp__CHttpProgressVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CStorage__CStreams__CIInputStream___x_ABI_CWindows__CWeb__CHttp__CHttpProgress_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIAsyncOperationProgressHandler_2___x_ABI_CWindows__CStorage__CStreams__CIInputStream___x_ABI_CWindows__CWeb__CHttp__CHttpProgress_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperationProgressHandler_2___x_ABI_CWindows__CStorage__CStreams__CIInputStream___x_ABI_CWindows__CWeb__CHttp__CHttpProgress_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperationProgressHandler_2___x_ABI_CWindows__CStorage__CStreams__CIInputStream___x_ABI_CWindows__CWeb__CHttp__CHttpProgress __x_ABI_C__FIAsyncOperationProgressHandler_2___x_ABI_CWindows__CStorage__CStreams__CIInputStream___x_ABI_CWindows__CWeb__CHttp__CHttpProgress;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperationProgressHandler_2___x_ABI_CWindows__CStorage__CStreams__CIInputStream___x_ABI_CWindows__CWeb__CHttp__CHttpProgress;

    typedef struct __x_ABI_C__FIAsyncOperationProgressHandler_2___x_ABI_CWindows__CStorage__CStreams__CIInputStream___x_ABI_CWindows__CWeb__CHttp__CHttpProgressVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperationProgressHandler_2___x_ABI_CWindows__CStorage__CStreams__CIInputStream___x_ABI_CWindows__CWeb__CHttp__CHttpProgress* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperationProgressHandler_2___x_ABI_CWindows__CStorage__CStreams__CIInputStream___x_ABI_CWindows__CWeb__CHttp__CHttpProgress* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperationProgressHandler_2___x_ABI_CWindows__CStorage__CStreams__CIInputStream___x_ABI_CWindows__CWeb__CHttp__CHttpProgress* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FIAsyncOperationProgressHandler_2___x_ABI_CWindows__CStorage__CStreams__CIInputStream___x_ABI_CWindows__CWeb__CHttp__CHttpProgress* This,
        __x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CStorage__CStreams__CIInputStream___x_ABI_CWindows__CWeb__CHttp__CHttpProgress* asyncInfo,
        struct __x_ABI_CWindows_CWeb_CHttp_CHttpProgress progressInfo);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperationProgressHandler_2___x_ABI_CWindows__CStorage__CStreams__CIInputStream___x_ABI_CWindows__CWeb__CHttp__CHttpProgressVtbl;

    interface __x_ABI_C__FIAsyncOperationProgressHandler_2___x_ABI_CWindows__CStorage__CStreams__CIInputStream___x_ABI_CWindows__CWeb__CHttp__CHttpProgress
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperationProgressHandler_2___x_ABI_CWindows__CStorage__CStreams__CIInputStream___x_ABI_CWindows__CWeb__CHttp__CHttpProgressVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperationProgressHandler_2___x_ABI_CWindows__CStorage__CStreams__CIInputStream___x_ABI_CWindows__CWeb__CHttp__CHttpProgress_INTERFACE_DEFINED__
    
typedef interface __x_ABI_C__FIAsyncOperationProgressHandler_2___x_ABI_CWindows__CWeb__CHttp__CHttpGetBufferResult___x_ABI_CWindows__CWeb__CHttp__CHttpProgress __x_ABI_C__FIAsyncOperationProgressHandler_2___x_ABI_CWindows__CWeb__CHttp__CHttpGetBufferResult___x_ABI_CWindows__CWeb__CHttp__CHttpProgress;

typedef interface __x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CWeb__CHttp__CHttpGetBufferResult___x_ABI_CWindows__CWeb__CHttp__CHttpProgress __x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CWeb__CHttp__CHttpGetBufferResult___x_ABI_CWindows__CWeb__CHttp__CHttpProgress;

#if !defined(____x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2___x_ABI_CWindows__CWeb__CHttp__CHttpGetBufferResult___x_ABI_CWindows__CWeb__CHttp__CHttpProgress_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2___x_ABI_CWindows__CWeb__CHttp__CHttpGetBufferResult___x_ABI_CWindows__CWeb__CHttp__CHttpProgress_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2___x_ABI_CWindows__CWeb__CHttp__CHttpGetBufferResult___x_ABI_CWindows__CWeb__CHttp__CHttpProgress __x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2___x_ABI_CWindows__CWeb__CHttp__CHttpGetBufferResult___x_ABI_CWindows__CWeb__CHttp__CHttpProgress;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2___x_ABI_CWindows__CWeb__CHttp__CHttpGetBufferResult___x_ABI_CWindows__CWeb__CHttp__CHttpProgress;

    typedef struct __x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2___x_ABI_CWindows__CWeb__CHttp__CHttpGetBufferResult___x_ABI_CWindows__CWeb__CHttp__CHttpProgressVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2___x_ABI_CWindows__CWeb__CHttp__CHttpGetBufferResult___x_ABI_CWindows__CWeb__CHttp__CHttpProgress* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2___x_ABI_CWindows__CWeb__CHttp__CHttpGetBufferResult___x_ABI_CWindows__CWeb__CHttp__CHttpProgress* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2___x_ABI_CWindows__CWeb__CHttp__CHttpGetBufferResult___x_ABI_CWindows__CWeb__CHttp__CHttpProgress* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2___x_ABI_CWindows__CWeb__CHttp__CHttpGetBufferResult___x_ABI_CWindows__CWeb__CHttp__CHttpProgress* This,
        __x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CWeb__CHttp__CHttpGetBufferResult___x_ABI_CWindows__CWeb__CHttp__CHttpProgress* asyncInfo,
        enum __x_ABI_CWindows_CFoundation_CAsyncStatus asyncStatus);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2___x_ABI_CWindows__CWeb__CHttp__CHttpGetBufferResult___x_ABI_CWindows__CWeb__CHttp__CHttpProgressVtbl;

    interface __x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2___x_ABI_CWindows__CWeb__CHttp__CHttpGetBufferResult___x_ABI_CWindows__CWeb__CHttp__CHttpProgress
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2___x_ABI_CWindows__CWeb__CHttp__CHttpGetBufferResult___x_ABI_CWindows__CWeb__CHttp__CHttpProgressVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2___x_ABI_CWindows__CWeb__CHttp__CHttpGetBufferResult___x_ABI_CWindows__CWeb__CHttp__CHttpProgress_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CWeb__CHttp__CHttpGetBufferResult___x_ABI_CWindows__CWeb__CHttp__CHttpProgress_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CWeb__CHttp__CHttpGetBufferResult___x_ABI_CWindows__CWeb__CHttp__CHttpProgress_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CWeb__CHttp__CHttpGetBufferResult___x_ABI_CWindows__CWeb__CHttp__CHttpProgress __x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CWeb__CHttp__CHttpGetBufferResult___x_ABI_CWindows__CWeb__CHttp__CHttpProgress;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CWeb__CHttp__CHttpGetBufferResult___x_ABI_CWindows__CWeb__CHttp__CHttpProgress;

    typedef struct __x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CWeb__CHttp__CHttpGetBufferResult___x_ABI_CWindows__CWeb__CHttp__CHttpProgressVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CWeb__CHttp__CHttpGetBufferResult___x_ABI_CWindows__CWeb__CHttp__CHttpProgress* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CWeb__CHttp__CHttpGetBufferResult___x_ABI_CWindows__CWeb__CHttp__CHttpProgress* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CWeb__CHttp__CHttpGetBufferResult___x_ABI_CWindows__CWeb__CHttp__CHttpProgress* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CWeb__CHttp__CHttpGetBufferResult___x_ABI_CWindows__CWeb__CHttp__CHttpProgress* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CWeb__CHttp__CHttpGetBufferResult___x_ABI_CWindows__CWeb__CHttp__CHttpProgress* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CWeb__CHttp__CHttpGetBufferResult___x_ABI_CWindows__CWeb__CHttp__CHttpProgress* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* put_Progress)(__x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CWeb__CHttp__CHttpGetBufferResult___x_ABI_CWindows__CWeb__CHttp__CHttpProgress* This,
        __x_ABI_C__FIAsyncOperationProgressHandler_2___x_ABI_CWindows__CWeb__CHttp__CHttpGetBufferResult___x_ABI_CWindows__CWeb__CHttp__CHttpProgress* handler);
    HRESULT (STDMETHODCALLTYPE* get_Progress)(__x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CWeb__CHttp__CHttpGetBufferResult___x_ABI_CWindows__CWeb__CHttp__CHttpProgress* This,
        __x_ABI_C__FIAsyncOperationProgressHandler_2___x_ABI_CWindows__CWeb__CHttp__CHttpGetBufferResult___x_ABI_CWindows__CWeb__CHttp__CHttpProgress** result);
    HRESULT (STDMETHODCALLTYPE* put_Completed)(__x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CWeb__CHttp__CHttpGetBufferResult___x_ABI_CWindows__CWeb__CHttp__CHttpProgress* This,
        __x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2___x_ABI_CWindows__CWeb__CHttp__CHttpGetBufferResult___x_ABI_CWindows__CWeb__CHttp__CHttpProgress* handler);
    HRESULT (STDMETHODCALLTYPE* get_Completed)(__x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CWeb__CHttp__CHttpGetBufferResult___x_ABI_CWindows__CWeb__CHttp__CHttpProgress* This,
        __x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2___x_ABI_CWindows__CWeb__CHttp__CHttpGetBufferResult___x_ABI_CWindows__CWeb__CHttp__CHttpProgress** result);
    HRESULT (STDMETHODCALLTYPE* GetResults)(__x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CWeb__CHttp__CHttpGetBufferResult___x_ABI_CWindows__CWeb__CHttp__CHttpProgress* This,
        __x_ABI_CWindows_CWeb_CHttp_CIHttpGetBufferResult** result);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CWeb__CHttp__CHttpGetBufferResult___x_ABI_CWindows__CWeb__CHttp__CHttpProgressVtbl;

    interface __x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CWeb__CHttp__CHttpGetBufferResult___x_ABI_CWindows__CWeb__CHttp__CHttpProgress
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CWeb__CHttp__CHttpGetBufferResult___x_ABI_CWindows__CWeb__CHttp__CHttpProgressVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CWeb__CHttp__CHttpGetBufferResult___x_ABI_CWindows__CWeb__CHttp__CHttpProgress_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIAsyncOperationProgressHandler_2___x_ABI_CWindows__CWeb__CHttp__CHttpGetBufferResult___x_ABI_CWindows__CWeb__CHttp__CHttpProgress_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperationProgressHandler_2___x_ABI_CWindows__CWeb__CHttp__CHttpGetBufferResult___x_ABI_CWindows__CWeb__CHttp__CHttpProgress_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperationProgressHandler_2___x_ABI_CWindows__CWeb__CHttp__CHttpGetBufferResult___x_ABI_CWindows__CWeb__CHttp__CHttpProgress __x_ABI_C__FIAsyncOperationProgressHandler_2___x_ABI_CWindows__CWeb__CHttp__CHttpGetBufferResult___x_ABI_CWindows__CWeb__CHttp__CHttpProgress;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperationProgressHandler_2___x_ABI_CWindows__CWeb__CHttp__CHttpGetBufferResult___x_ABI_CWindows__CWeb__CHttp__CHttpProgress;

    typedef struct __x_ABI_C__FIAsyncOperationProgressHandler_2___x_ABI_CWindows__CWeb__CHttp__CHttpGetBufferResult___x_ABI_CWindows__CWeb__CHttp__CHttpProgressVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperationProgressHandler_2___x_ABI_CWindows__CWeb__CHttp__CHttpGetBufferResult___x_ABI_CWindows__CWeb__CHttp__CHttpProgress* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperationProgressHandler_2___x_ABI_CWindows__CWeb__CHttp__CHttpGetBufferResult___x_ABI_CWindows__CWeb__CHttp__CHttpProgress* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperationProgressHandler_2___x_ABI_CWindows__CWeb__CHttp__CHttpGetBufferResult___x_ABI_CWindows__CWeb__CHttp__CHttpProgress* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FIAsyncOperationProgressHandler_2___x_ABI_CWindows__CWeb__CHttp__CHttpGetBufferResult___x_ABI_CWindows__CWeb__CHttp__CHttpProgress* This,
        __x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CWeb__CHttp__CHttpGetBufferResult___x_ABI_CWindows__CWeb__CHttp__CHttpProgress* asyncInfo,
        struct __x_ABI_CWindows_CWeb_CHttp_CHttpProgress progressInfo);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperationProgressHandler_2___x_ABI_CWindows__CWeb__CHttp__CHttpGetBufferResult___x_ABI_CWindows__CWeb__CHttp__CHttpProgressVtbl;

    interface __x_ABI_C__FIAsyncOperationProgressHandler_2___x_ABI_CWindows__CWeb__CHttp__CHttpGetBufferResult___x_ABI_CWindows__CWeb__CHttp__CHttpProgress
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperationProgressHandler_2___x_ABI_CWindows__CWeb__CHttp__CHttpGetBufferResult___x_ABI_CWindows__CWeb__CHttp__CHttpProgressVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperationProgressHandler_2___x_ABI_CWindows__CWeb__CHttp__CHttpGetBufferResult___x_ABI_CWindows__CWeb__CHttp__CHttpProgress_INTERFACE_DEFINED__
    
typedef interface __x_ABI_C__FIAsyncOperationProgressHandler_2___x_ABI_CWindows__CWeb__CHttp__CHttpGetInputStreamResult___x_ABI_CWindows__CWeb__CHttp__CHttpProgress __x_ABI_C__FIAsyncOperationProgressHandler_2___x_ABI_CWindows__CWeb__CHttp__CHttpGetInputStreamResult___x_ABI_CWindows__CWeb__CHttp__CHttpProgress;

typedef interface __x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CWeb__CHttp__CHttpGetInputStreamResult___x_ABI_CWindows__CWeb__CHttp__CHttpProgress __x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CWeb__CHttp__CHttpGetInputStreamResult___x_ABI_CWindows__CWeb__CHttp__CHttpProgress;

#if !defined(____x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2___x_ABI_CWindows__CWeb__CHttp__CHttpGetInputStreamResult___x_ABI_CWindows__CWeb__CHttp__CHttpProgress_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2___x_ABI_CWindows__CWeb__CHttp__CHttpGetInputStreamResult___x_ABI_CWindows__CWeb__CHttp__CHttpProgress_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2___x_ABI_CWindows__CWeb__CHttp__CHttpGetInputStreamResult___x_ABI_CWindows__CWeb__CHttp__CHttpProgress __x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2___x_ABI_CWindows__CWeb__CHttp__CHttpGetInputStreamResult___x_ABI_CWindows__CWeb__CHttp__CHttpProgress;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2___x_ABI_CWindows__CWeb__CHttp__CHttpGetInputStreamResult___x_ABI_CWindows__CWeb__CHttp__CHttpProgress;

    typedef struct __x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2___x_ABI_CWindows__CWeb__CHttp__CHttpGetInputStreamResult___x_ABI_CWindows__CWeb__CHttp__CHttpProgressVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2___x_ABI_CWindows__CWeb__CHttp__CHttpGetInputStreamResult___x_ABI_CWindows__CWeb__CHttp__CHttpProgress* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2___x_ABI_CWindows__CWeb__CHttp__CHttpGetInputStreamResult___x_ABI_CWindows__CWeb__CHttp__CHttpProgress* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2___x_ABI_CWindows__CWeb__CHttp__CHttpGetInputStreamResult___x_ABI_CWindows__CWeb__CHttp__CHttpProgress* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2___x_ABI_CWindows__CWeb__CHttp__CHttpGetInputStreamResult___x_ABI_CWindows__CWeb__CHttp__CHttpProgress* This,
        __x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CWeb__CHttp__CHttpGetInputStreamResult___x_ABI_CWindows__CWeb__CHttp__CHttpProgress* asyncInfo,
        enum __x_ABI_CWindows_CFoundation_CAsyncStatus asyncStatus);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2___x_ABI_CWindows__CWeb__CHttp__CHttpGetInputStreamResult___x_ABI_CWindows__CWeb__CHttp__CHttpProgressVtbl;

    interface __x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2___x_ABI_CWindows__CWeb__CHttp__CHttpGetInputStreamResult___x_ABI_CWindows__CWeb__CHttp__CHttpProgress
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2___x_ABI_CWindows__CWeb__CHttp__CHttpGetInputStreamResult___x_ABI_CWindows__CWeb__CHttp__CHttpProgressVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2___x_ABI_CWindows__CWeb__CHttp__CHttpGetInputStreamResult___x_ABI_CWindows__CWeb__CHttp__CHttpProgress_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CWeb__CHttp__CHttpGetInputStreamResult___x_ABI_CWindows__CWeb__CHttp__CHttpProgress_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CWeb__CHttp__CHttpGetInputStreamResult___x_ABI_CWindows__CWeb__CHttp__CHttpProgress_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CWeb__CHttp__CHttpGetInputStreamResult___x_ABI_CWindows__CWeb__CHttp__CHttpProgress __x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CWeb__CHttp__CHttpGetInputStreamResult___x_ABI_CWindows__CWeb__CHttp__CHttpProgress;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CWeb__CHttp__CHttpGetInputStreamResult___x_ABI_CWindows__CWeb__CHttp__CHttpProgress;

    typedef struct __x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CWeb__CHttp__CHttpGetInputStreamResult___x_ABI_CWindows__CWeb__CHttp__CHttpProgressVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CWeb__CHttp__CHttpGetInputStreamResult___x_ABI_CWindows__CWeb__CHttp__CHttpProgress* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CWeb__CHttp__CHttpGetInputStreamResult___x_ABI_CWindows__CWeb__CHttp__CHttpProgress* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CWeb__CHttp__CHttpGetInputStreamResult___x_ABI_CWindows__CWeb__CHttp__CHttpProgress* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CWeb__CHttp__CHttpGetInputStreamResult___x_ABI_CWindows__CWeb__CHttp__CHttpProgress* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CWeb__CHttp__CHttpGetInputStreamResult___x_ABI_CWindows__CWeb__CHttp__CHttpProgress* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CWeb__CHttp__CHttpGetInputStreamResult___x_ABI_CWindows__CWeb__CHttp__CHttpProgress* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* put_Progress)(__x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CWeb__CHttp__CHttpGetInputStreamResult___x_ABI_CWindows__CWeb__CHttp__CHttpProgress* This,
        __x_ABI_C__FIAsyncOperationProgressHandler_2___x_ABI_CWindows__CWeb__CHttp__CHttpGetInputStreamResult___x_ABI_CWindows__CWeb__CHttp__CHttpProgress* handler);
    HRESULT (STDMETHODCALLTYPE* get_Progress)(__x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CWeb__CHttp__CHttpGetInputStreamResult___x_ABI_CWindows__CWeb__CHttp__CHttpProgress* This,
        __x_ABI_C__FIAsyncOperationProgressHandler_2___x_ABI_CWindows__CWeb__CHttp__CHttpGetInputStreamResult___x_ABI_CWindows__CWeb__CHttp__CHttpProgress** result);
    HRESULT (STDMETHODCALLTYPE* put_Completed)(__x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CWeb__CHttp__CHttpGetInputStreamResult___x_ABI_CWindows__CWeb__CHttp__CHttpProgress* This,
        __x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2___x_ABI_CWindows__CWeb__CHttp__CHttpGetInputStreamResult___x_ABI_CWindows__CWeb__CHttp__CHttpProgress* handler);
    HRESULT (STDMETHODCALLTYPE* get_Completed)(__x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CWeb__CHttp__CHttpGetInputStreamResult___x_ABI_CWindows__CWeb__CHttp__CHttpProgress* This,
        __x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2___x_ABI_CWindows__CWeb__CHttp__CHttpGetInputStreamResult___x_ABI_CWindows__CWeb__CHttp__CHttpProgress** result);
    HRESULT (STDMETHODCALLTYPE* GetResults)(__x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CWeb__CHttp__CHttpGetInputStreamResult___x_ABI_CWindows__CWeb__CHttp__CHttpProgress* This,
        __x_ABI_CWindows_CWeb_CHttp_CIHttpGetInputStreamResult** result);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CWeb__CHttp__CHttpGetInputStreamResult___x_ABI_CWindows__CWeb__CHttp__CHttpProgressVtbl;

    interface __x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CWeb__CHttp__CHttpGetInputStreamResult___x_ABI_CWindows__CWeb__CHttp__CHttpProgress
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CWeb__CHttp__CHttpGetInputStreamResult___x_ABI_CWindows__CWeb__CHttp__CHttpProgressVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CWeb__CHttp__CHttpGetInputStreamResult___x_ABI_CWindows__CWeb__CHttp__CHttpProgress_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIAsyncOperationProgressHandler_2___x_ABI_CWindows__CWeb__CHttp__CHttpGetInputStreamResult___x_ABI_CWindows__CWeb__CHttp__CHttpProgress_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperationProgressHandler_2___x_ABI_CWindows__CWeb__CHttp__CHttpGetInputStreamResult___x_ABI_CWindows__CWeb__CHttp__CHttpProgress_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperationProgressHandler_2___x_ABI_CWindows__CWeb__CHttp__CHttpGetInputStreamResult___x_ABI_CWindows__CWeb__CHttp__CHttpProgress __x_ABI_C__FIAsyncOperationProgressHandler_2___x_ABI_CWindows__CWeb__CHttp__CHttpGetInputStreamResult___x_ABI_CWindows__CWeb__CHttp__CHttpProgress;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperationProgressHandler_2___x_ABI_CWindows__CWeb__CHttp__CHttpGetInputStreamResult___x_ABI_CWindows__CWeb__CHttp__CHttpProgress;

    typedef struct __x_ABI_C__FIAsyncOperationProgressHandler_2___x_ABI_CWindows__CWeb__CHttp__CHttpGetInputStreamResult___x_ABI_CWindows__CWeb__CHttp__CHttpProgressVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperationProgressHandler_2___x_ABI_CWindows__CWeb__CHttp__CHttpGetInputStreamResult___x_ABI_CWindows__CWeb__CHttp__CHttpProgress* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperationProgressHandler_2___x_ABI_CWindows__CWeb__CHttp__CHttpGetInputStreamResult___x_ABI_CWindows__CWeb__CHttp__CHttpProgress* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperationProgressHandler_2___x_ABI_CWindows__CWeb__CHttp__CHttpGetInputStreamResult___x_ABI_CWindows__CWeb__CHttp__CHttpProgress* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FIAsyncOperationProgressHandler_2___x_ABI_CWindows__CWeb__CHttp__CHttpGetInputStreamResult___x_ABI_CWindows__CWeb__CHttp__CHttpProgress* This,
        __x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CWeb__CHttp__CHttpGetInputStreamResult___x_ABI_CWindows__CWeb__CHttp__CHttpProgress* asyncInfo,
        struct __x_ABI_CWindows_CWeb_CHttp_CHttpProgress progressInfo);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperationProgressHandler_2___x_ABI_CWindows__CWeb__CHttp__CHttpGetInputStreamResult___x_ABI_CWindows__CWeb__CHttp__CHttpProgressVtbl;

    interface __x_ABI_C__FIAsyncOperationProgressHandler_2___x_ABI_CWindows__CWeb__CHttp__CHttpGetInputStreamResult___x_ABI_CWindows__CWeb__CHttp__CHttpProgress
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperationProgressHandler_2___x_ABI_CWindows__CWeb__CHttp__CHttpGetInputStreamResult___x_ABI_CWindows__CWeb__CHttp__CHttpProgressVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperationProgressHandler_2___x_ABI_CWindows__CWeb__CHttp__CHttpGetInputStreamResult___x_ABI_CWindows__CWeb__CHttp__CHttpProgress_INTERFACE_DEFINED__
    
typedef interface __x_ABI_C__FIAsyncOperationProgressHandler_2___x_ABI_CWindows__CWeb__CHttp__CHttpGetStringResult___x_ABI_CWindows__CWeb__CHttp__CHttpProgress __x_ABI_C__FIAsyncOperationProgressHandler_2___x_ABI_CWindows__CWeb__CHttp__CHttpGetStringResult___x_ABI_CWindows__CWeb__CHttp__CHttpProgress;

typedef interface __x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CWeb__CHttp__CHttpGetStringResult___x_ABI_CWindows__CWeb__CHttp__CHttpProgress __x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CWeb__CHttp__CHttpGetStringResult___x_ABI_CWindows__CWeb__CHttp__CHttpProgress;

#if !defined(____x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2___x_ABI_CWindows__CWeb__CHttp__CHttpGetStringResult___x_ABI_CWindows__CWeb__CHttp__CHttpProgress_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2___x_ABI_CWindows__CWeb__CHttp__CHttpGetStringResult___x_ABI_CWindows__CWeb__CHttp__CHttpProgress_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2___x_ABI_CWindows__CWeb__CHttp__CHttpGetStringResult___x_ABI_CWindows__CWeb__CHttp__CHttpProgress __x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2___x_ABI_CWindows__CWeb__CHttp__CHttpGetStringResult___x_ABI_CWindows__CWeb__CHttp__CHttpProgress;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2___x_ABI_CWindows__CWeb__CHttp__CHttpGetStringResult___x_ABI_CWindows__CWeb__CHttp__CHttpProgress;

    typedef struct __x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2___x_ABI_CWindows__CWeb__CHttp__CHttpGetStringResult___x_ABI_CWindows__CWeb__CHttp__CHttpProgressVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2___x_ABI_CWindows__CWeb__CHttp__CHttpGetStringResult___x_ABI_CWindows__CWeb__CHttp__CHttpProgress* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2___x_ABI_CWindows__CWeb__CHttp__CHttpGetStringResult___x_ABI_CWindows__CWeb__CHttp__CHttpProgress* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2___x_ABI_CWindows__CWeb__CHttp__CHttpGetStringResult___x_ABI_CWindows__CWeb__CHttp__CHttpProgress* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2___x_ABI_CWindows__CWeb__CHttp__CHttpGetStringResult___x_ABI_CWindows__CWeb__CHttp__CHttpProgress* This,
        __x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CWeb__CHttp__CHttpGetStringResult___x_ABI_CWindows__CWeb__CHttp__CHttpProgress* asyncInfo,
        enum __x_ABI_CWindows_CFoundation_CAsyncStatus asyncStatus);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2___x_ABI_CWindows__CWeb__CHttp__CHttpGetStringResult___x_ABI_CWindows__CWeb__CHttp__CHttpProgressVtbl;

    interface __x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2___x_ABI_CWindows__CWeb__CHttp__CHttpGetStringResult___x_ABI_CWindows__CWeb__CHttp__CHttpProgress
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2___x_ABI_CWindows__CWeb__CHttp__CHttpGetStringResult___x_ABI_CWindows__CWeb__CHttp__CHttpProgressVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2___x_ABI_CWindows__CWeb__CHttp__CHttpGetStringResult___x_ABI_CWindows__CWeb__CHttp__CHttpProgress_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CWeb__CHttp__CHttpGetStringResult___x_ABI_CWindows__CWeb__CHttp__CHttpProgress_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CWeb__CHttp__CHttpGetStringResult___x_ABI_CWindows__CWeb__CHttp__CHttpProgress_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CWeb__CHttp__CHttpGetStringResult___x_ABI_CWindows__CWeb__CHttp__CHttpProgress __x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CWeb__CHttp__CHttpGetStringResult___x_ABI_CWindows__CWeb__CHttp__CHttpProgress;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CWeb__CHttp__CHttpGetStringResult___x_ABI_CWindows__CWeb__CHttp__CHttpProgress;

    typedef struct __x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CWeb__CHttp__CHttpGetStringResult___x_ABI_CWindows__CWeb__CHttp__CHttpProgressVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CWeb__CHttp__CHttpGetStringResult___x_ABI_CWindows__CWeb__CHttp__CHttpProgress* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CWeb__CHttp__CHttpGetStringResult___x_ABI_CWindows__CWeb__CHttp__CHttpProgress* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CWeb__CHttp__CHttpGetStringResult___x_ABI_CWindows__CWeb__CHttp__CHttpProgress* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CWeb__CHttp__CHttpGetStringResult___x_ABI_CWindows__CWeb__CHttp__CHttpProgress* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CWeb__CHttp__CHttpGetStringResult___x_ABI_CWindows__CWeb__CHttp__CHttpProgress* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CWeb__CHttp__CHttpGetStringResult___x_ABI_CWindows__CWeb__CHttp__CHttpProgress* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* put_Progress)(__x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CWeb__CHttp__CHttpGetStringResult___x_ABI_CWindows__CWeb__CHttp__CHttpProgress* This,
        __x_ABI_C__FIAsyncOperationProgressHandler_2___x_ABI_CWindows__CWeb__CHttp__CHttpGetStringResult___x_ABI_CWindows__CWeb__CHttp__CHttpProgress* handler);
    HRESULT (STDMETHODCALLTYPE* get_Progress)(__x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CWeb__CHttp__CHttpGetStringResult___x_ABI_CWindows__CWeb__CHttp__CHttpProgress* This,
        __x_ABI_C__FIAsyncOperationProgressHandler_2___x_ABI_CWindows__CWeb__CHttp__CHttpGetStringResult___x_ABI_CWindows__CWeb__CHttp__CHttpProgress** result);
    HRESULT (STDMETHODCALLTYPE* put_Completed)(__x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CWeb__CHttp__CHttpGetStringResult___x_ABI_CWindows__CWeb__CHttp__CHttpProgress* This,
        __x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2___x_ABI_CWindows__CWeb__CHttp__CHttpGetStringResult___x_ABI_CWindows__CWeb__CHttp__CHttpProgress* handler);
    HRESULT (STDMETHODCALLTYPE* get_Completed)(__x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CWeb__CHttp__CHttpGetStringResult___x_ABI_CWindows__CWeb__CHttp__CHttpProgress* This,
        __x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2___x_ABI_CWindows__CWeb__CHttp__CHttpGetStringResult___x_ABI_CWindows__CWeb__CHttp__CHttpProgress** result);
    HRESULT (STDMETHODCALLTYPE* GetResults)(__x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CWeb__CHttp__CHttpGetStringResult___x_ABI_CWindows__CWeb__CHttp__CHttpProgress* This,
        __x_ABI_CWindows_CWeb_CHttp_CIHttpGetStringResult** result);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CWeb__CHttp__CHttpGetStringResult___x_ABI_CWindows__CWeb__CHttp__CHttpProgressVtbl;

    interface __x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CWeb__CHttp__CHttpGetStringResult___x_ABI_CWindows__CWeb__CHttp__CHttpProgress
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CWeb__CHttp__CHttpGetStringResult___x_ABI_CWindows__CWeb__CHttp__CHttpProgressVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CWeb__CHttp__CHttpGetStringResult___x_ABI_CWindows__CWeb__CHttp__CHttpProgress_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIAsyncOperationProgressHandler_2___x_ABI_CWindows__CWeb__CHttp__CHttpGetStringResult___x_ABI_CWindows__CWeb__CHttp__CHttpProgress_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperationProgressHandler_2___x_ABI_CWindows__CWeb__CHttp__CHttpGetStringResult___x_ABI_CWindows__CWeb__CHttp__CHttpProgress_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperationProgressHandler_2___x_ABI_CWindows__CWeb__CHttp__CHttpGetStringResult___x_ABI_CWindows__CWeb__CHttp__CHttpProgress __x_ABI_C__FIAsyncOperationProgressHandler_2___x_ABI_CWindows__CWeb__CHttp__CHttpGetStringResult___x_ABI_CWindows__CWeb__CHttp__CHttpProgress;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperationProgressHandler_2___x_ABI_CWindows__CWeb__CHttp__CHttpGetStringResult___x_ABI_CWindows__CWeb__CHttp__CHttpProgress;

    typedef struct __x_ABI_C__FIAsyncOperationProgressHandler_2___x_ABI_CWindows__CWeb__CHttp__CHttpGetStringResult___x_ABI_CWindows__CWeb__CHttp__CHttpProgressVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperationProgressHandler_2___x_ABI_CWindows__CWeb__CHttp__CHttpGetStringResult___x_ABI_CWindows__CWeb__CHttp__CHttpProgress* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperationProgressHandler_2___x_ABI_CWindows__CWeb__CHttp__CHttpGetStringResult___x_ABI_CWindows__CWeb__CHttp__CHttpProgress* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperationProgressHandler_2___x_ABI_CWindows__CWeb__CHttp__CHttpGetStringResult___x_ABI_CWindows__CWeb__CHttp__CHttpProgress* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FIAsyncOperationProgressHandler_2___x_ABI_CWindows__CWeb__CHttp__CHttpGetStringResult___x_ABI_CWindows__CWeb__CHttp__CHttpProgress* This,
        __x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CWeb__CHttp__CHttpGetStringResult___x_ABI_CWindows__CWeb__CHttp__CHttpProgress* asyncInfo,
        struct __x_ABI_CWindows_CWeb_CHttp_CHttpProgress progressInfo);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperationProgressHandler_2___x_ABI_CWindows__CWeb__CHttp__CHttpGetStringResult___x_ABI_CWindows__CWeb__CHttp__CHttpProgressVtbl;

    interface __x_ABI_C__FIAsyncOperationProgressHandler_2___x_ABI_CWindows__CWeb__CHttp__CHttpGetStringResult___x_ABI_CWindows__CWeb__CHttp__CHttpProgress
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperationProgressHandler_2___x_ABI_CWindows__CWeb__CHttp__CHttpGetStringResult___x_ABI_CWindows__CWeb__CHttp__CHttpProgressVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperationProgressHandler_2___x_ABI_CWindows__CWeb__CHttp__CHttpGetStringResult___x_ABI_CWindows__CWeb__CHttp__CHttpProgress_INTERFACE_DEFINED__
    
typedef interface __x_ABI_C__FIAsyncOperationProgressHandler_2___x_ABI_CWindows__CWeb__CHttp__CHttpRequestResult___x_ABI_CWindows__CWeb__CHttp__CHttpProgress __x_ABI_C__FIAsyncOperationProgressHandler_2___x_ABI_CWindows__CWeb__CHttp__CHttpRequestResult___x_ABI_CWindows__CWeb__CHttp__CHttpProgress;

typedef interface __x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CWeb__CHttp__CHttpRequestResult___x_ABI_CWindows__CWeb__CHttp__CHttpProgress __x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CWeb__CHttp__CHttpRequestResult___x_ABI_CWindows__CWeb__CHttp__CHttpProgress;

#if !defined(____x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2___x_ABI_CWindows__CWeb__CHttp__CHttpRequestResult___x_ABI_CWindows__CWeb__CHttp__CHttpProgress_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2___x_ABI_CWindows__CWeb__CHttp__CHttpRequestResult___x_ABI_CWindows__CWeb__CHttp__CHttpProgress_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2___x_ABI_CWindows__CWeb__CHttp__CHttpRequestResult___x_ABI_CWindows__CWeb__CHttp__CHttpProgress __x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2___x_ABI_CWindows__CWeb__CHttp__CHttpRequestResult___x_ABI_CWindows__CWeb__CHttp__CHttpProgress;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2___x_ABI_CWindows__CWeb__CHttp__CHttpRequestResult___x_ABI_CWindows__CWeb__CHttp__CHttpProgress;

    typedef struct __x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2___x_ABI_CWindows__CWeb__CHttp__CHttpRequestResult___x_ABI_CWindows__CWeb__CHttp__CHttpProgressVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2___x_ABI_CWindows__CWeb__CHttp__CHttpRequestResult___x_ABI_CWindows__CWeb__CHttp__CHttpProgress* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2___x_ABI_CWindows__CWeb__CHttp__CHttpRequestResult___x_ABI_CWindows__CWeb__CHttp__CHttpProgress* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2___x_ABI_CWindows__CWeb__CHttp__CHttpRequestResult___x_ABI_CWindows__CWeb__CHttp__CHttpProgress* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2___x_ABI_CWindows__CWeb__CHttp__CHttpRequestResult___x_ABI_CWindows__CWeb__CHttp__CHttpProgress* This,
        __x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CWeb__CHttp__CHttpRequestResult___x_ABI_CWindows__CWeb__CHttp__CHttpProgress* asyncInfo,
        enum __x_ABI_CWindows_CFoundation_CAsyncStatus asyncStatus);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2___x_ABI_CWindows__CWeb__CHttp__CHttpRequestResult___x_ABI_CWindows__CWeb__CHttp__CHttpProgressVtbl;

    interface __x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2___x_ABI_CWindows__CWeb__CHttp__CHttpRequestResult___x_ABI_CWindows__CWeb__CHttp__CHttpProgress
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2___x_ABI_CWindows__CWeb__CHttp__CHttpRequestResult___x_ABI_CWindows__CWeb__CHttp__CHttpProgressVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2___x_ABI_CWindows__CWeb__CHttp__CHttpRequestResult___x_ABI_CWindows__CWeb__CHttp__CHttpProgress_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CWeb__CHttp__CHttpRequestResult___x_ABI_CWindows__CWeb__CHttp__CHttpProgress_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CWeb__CHttp__CHttpRequestResult___x_ABI_CWindows__CWeb__CHttp__CHttpProgress_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CWeb__CHttp__CHttpRequestResult___x_ABI_CWindows__CWeb__CHttp__CHttpProgress __x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CWeb__CHttp__CHttpRequestResult___x_ABI_CWindows__CWeb__CHttp__CHttpProgress;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CWeb__CHttp__CHttpRequestResult___x_ABI_CWindows__CWeb__CHttp__CHttpProgress;

    typedef struct __x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CWeb__CHttp__CHttpRequestResult___x_ABI_CWindows__CWeb__CHttp__CHttpProgressVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CWeb__CHttp__CHttpRequestResult___x_ABI_CWindows__CWeb__CHttp__CHttpProgress* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CWeb__CHttp__CHttpRequestResult___x_ABI_CWindows__CWeb__CHttp__CHttpProgress* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CWeb__CHttp__CHttpRequestResult___x_ABI_CWindows__CWeb__CHttp__CHttpProgress* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CWeb__CHttp__CHttpRequestResult___x_ABI_CWindows__CWeb__CHttp__CHttpProgress* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CWeb__CHttp__CHttpRequestResult___x_ABI_CWindows__CWeb__CHttp__CHttpProgress* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CWeb__CHttp__CHttpRequestResult___x_ABI_CWindows__CWeb__CHttp__CHttpProgress* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* put_Progress)(__x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CWeb__CHttp__CHttpRequestResult___x_ABI_CWindows__CWeb__CHttp__CHttpProgress* This,
        __x_ABI_C__FIAsyncOperationProgressHandler_2___x_ABI_CWindows__CWeb__CHttp__CHttpRequestResult___x_ABI_CWindows__CWeb__CHttp__CHttpProgress* handler);
    HRESULT (STDMETHODCALLTYPE* get_Progress)(__x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CWeb__CHttp__CHttpRequestResult___x_ABI_CWindows__CWeb__CHttp__CHttpProgress* This,
        __x_ABI_C__FIAsyncOperationProgressHandler_2___x_ABI_CWindows__CWeb__CHttp__CHttpRequestResult___x_ABI_CWindows__CWeb__CHttp__CHttpProgress** result);
    HRESULT (STDMETHODCALLTYPE* put_Completed)(__x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CWeb__CHttp__CHttpRequestResult___x_ABI_CWindows__CWeb__CHttp__CHttpProgress* This,
        __x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2___x_ABI_CWindows__CWeb__CHttp__CHttpRequestResult___x_ABI_CWindows__CWeb__CHttp__CHttpProgress* handler);
    HRESULT (STDMETHODCALLTYPE* get_Completed)(__x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CWeb__CHttp__CHttpRequestResult___x_ABI_CWindows__CWeb__CHttp__CHttpProgress* This,
        __x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2___x_ABI_CWindows__CWeb__CHttp__CHttpRequestResult___x_ABI_CWindows__CWeb__CHttp__CHttpProgress** result);
    HRESULT (STDMETHODCALLTYPE* GetResults)(__x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CWeb__CHttp__CHttpRequestResult___x_ABI_CWindows__CWeb__CHttp__CHttpProgress* This,
        __x_ABI_CWindows_CWeb_CHttp_CIHttpRequestResult** result);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CWeb__CHttp__CHttpRequestResult___x_ABI_CWindows__CWeb__CHttp__CHttpProgressVtbl;

    interface __x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CWeb__CHttp__CHttpRequestResult___x_ABI_CWindows__CWeb__CHttp__CHttpProgress
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CWeb__CHttp__CHttpRequestResult___x_ABI_CWindows__CWeb__CHttp__CHttpProgressVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CWeb__CHttp__CHttpRequestResult___x_ABI_CWindows__CWeb__CHttp__CHttpProgress_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIAsyncOperationProgressHandler_2___x_ABI_CWindows__CWeb__CHttp__CHttpRequestResult___x_ABI_CWindows__CWeb__CHttp__CHttpProgress_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperationProgressHandler_2___x_ABI_CWindows__CWeb__CHttp__CHttpRequestResult___x_ABI_CWindows__CWeb__CHttp__CHttpProgress_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperationProgressHandler_2___x_ABI_CWindows__CWeb__CHttp__CHttpRequestResult___x_ABI_CWindows__CWeb__CHttp__CHttpProgress __x_ABI_C__FIAsyncOperationProgressHandler_2___x_ABI_CWindows__CWeb__CHttp__CHttpRequestResult___x_ABI_CWindows__CWeb__CHttp__CHttpProgress;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperationProgressHandler_2___x_ABI_CWindows__CWeb__CHttp__CHttpRequestResult___x_ABI_CWindows__CWeb__CHttp__CHttpProgress;

    typedef struct __x_ABI_C__FIAsyncOperationProgressHandler_2___x_ABI_CWindows__CWeb__CHttp__CHttpRequestResult___x_ABI_CWindows__CWeb__CHttp__CHttpProgressVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperationProgressHandler_2___x_ABI_CWindows__CWeb__CHttp__CHttpRequestResult___x_ABI_CWindows__CWeb__CHttp__CHttpProgress* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperationProgressHandler_2___x_ABI_CWindows__CWeb__CHttp__CHttpRequestResult___x_ABI_CWindows__CWeb__CHttp__CHttpProgress* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperationProgressHandler_2___x_ABI_CWindows__CWeb__CHttp__CHttpRequestResult___x_ABI_CWindows__CWeb__CHttp__CHttpProgress* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FIAsyncOperationProgressHandler_2___x_ABI_CWindows__CWeb__CHttp__CHttpRequestResult___x_ABI_CWindows__CWeb__CHttp__CHttpProgress* This,
        __x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CWeb__CHttp__CHttpRequestResult___x_ABI_CWindows__CWeb__CHttp__CHttpProgress* asyncInfo,
        struct __x_ABI_CWindows_CWeb_CHttp_CHttpProgress progressInfo);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperationProgressHandler_2___x_ABI_CWindows__CWeb__CHttp__CHttpRequestResult___x_ABI_CWindows__CWeb__CHttp__CHttpProgressVtbl;

    interface __x_ABI_C__FIAsyncOperationProgressHandler_2___x_ABI_CWindows__CWeb__CHttp__CHttpRequestResult___x_ABI_CWindows__CWeb__CHttp__CHttpProgress
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperationProgressHandler_2___x_ABI_CWindows__CWeb__CHttp__CHttpRequestResult___x_ABI_CWindows__CWeb__CHttp__CHttpProgressVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperationProgressHandler_2___x_ABI_CWindows__CWeb__CHttp__CHttpRequestResult___x_ABI_CWindows__CWeb__CHttp__CHttpProgress_INTERFACE_DEFINED__
    
typedef interface __x_ABI_C__FIAsyncOperationProgressHandler_2___x_ABI_CWindows__CWeb__CHttp__CHttpResponseMessage___x_ABI_CWindows__CWeb__CHttp__CHttpProgress __x_ABI_C__FIAsyncOperationProgressHandler_2___x_ABI_CWindows__CWeb__CHttp__CHttpResponseMessage___x_ABI_CWindows__CWeb__CHttp__CHttpProgress;

typedef interface __x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CWeb__CHttp__CHttpResponseMessage___x_ABI_CWindows__CWeb__CHttp__CHttpProgress __x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CWeb__CHttp__CHttpResponseMessage___x_ABI_CWindows__CWeb__CHttp__CHttpProgress;

#if !defined(____x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2___x_ABI_CWindows__CWeb__CHttp__CHttpResponseMessage___x_ABI_CWindows__CWeb__CHttp__CHttpProgress_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2___x_ABI_CWindows__CWeb__CHttp__CHttpResponseMessage___x_ABI_CWindows__CWeb__CHttp__CHttpProgress_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2___x_ABI_CWindows__CWeb__CHttp__CHttpResponseMessage___x_ABI_CWindows__CWeb__CHttp__CHttpProgress __x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2___x_ABI_CWindows__CWeb__CHttp__CHttpResponseMessage___x_ABI_CWindows__CWeb__CHttp__CHttpProgress;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2___x_ABI_CWindows__CWeb__CHttp__CHttpResponseMessage___x_ABI_CWindows__CWeb__CHttp__CHttpProgress;

    typedef struct __x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2___x_ABI_CWindows__CWeb__CHttp__CHttpResponseMessage___x_ABI_CWindows__CWeb__CHttp__CHttpProgressVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2___x_ABI_CWindows__CWeb__CHttp__CHttpResponseMessage___x_ABI_CWindows__CWeb__CHttp__CHttpProgress* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2___x_ABI_CWindows__CWeb__CHttp__CHttpResponseMessage___x_ABI_CWindows__CWeb__CHttp__CHttpProgress* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2___x_ABI_CWindows__CWeb__CHttp__CHttpResponseMessage___x_ABI_CWindows__CWeb__CHttp__CHttpProgress* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2___x_ABI_CWindows__CWeb__CHttp__CHttpResponseMessage___x_ABI_CWindows__CWeb__CHttp__CHttpProgress* This,
        __x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CWeb__CHttp__CHttpResponseMessage___x_ABI_CWindows__CWeb__CHttp__CHttpProgress* asyncInfo,
        enum __x_ABI_CWindows_CFoundation_CAsyncStatus asyncStatus);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2___x_ABI_CWindows__CWeb__CHttp__CHttpResponseMessage___x_ABI_CWindows__CWeb__CHttp__CHttpProgressVtbl;

    interface __x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2___x_ABI_CWindows__CWeb__CHttp__CHttpResponseMessage___x_ABI_CWindows__CWeb__CHttp__CHttpProgress
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2___x_ABI_CWindows__CWeb__CHttp__CHttpResponseMessage___x_ABI_CWindows__CWeb__CHttp__CHttpProgressVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2___x_ABI_CWindows__CWeb__CHttp__CHttpResponseMessage___x_ABI_CWindows__CWeb__CHttp__CHttpProgress_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CWeb__CHttp__CHttpResponseMessage___x_ABI_CWindows__CWeb__CHttp__CHttpProgress_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CWeb__CHttp__CHttpResponseMessage___x_ABI_CWindows__CWeb__CHttp__CHttpProgress_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CWeb__CHttp__CHttpResponseMessage___x_ABI_CWindows__CWeb__CHttp__CHttpProgress __x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CWeb__CHttp__CHttpResponseMessage___x_ABI_CWindows__CWeb__CHttp__CHttpProgress;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CWeb__CHttp__CHttpResponseMessage___x_ABI_CWindows__CWeb__CHttp__CHttpProgress;

    typedef struct __x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CWeb__CHttp__CHttpResponseMessage___x_ABI_CWindows__CWeb__CHttp__CHttpProgressVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CWeb__CHttp__CHttpResponseMessage___x_ABI_CWindows__CWeb__CHttp__CHttpProgress* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CWeb__CHttp__CHttpResponseMessage___x_ABI_CWindows__CWeb__CHttp__CHttpProgress* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CWeb__CHttp__CHttpResponseMessage___x_ABI_CWindows__CWeb__CHttp__CHttpProgress* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CWeb__CHttp__CHttpResponseMessage___x_ABI_CWindows__CWeb__CHttp__CHttpProgress* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CWeb__CHttp__CHttpResponseMessage___x_ABI_CWindows__CWeb__CHttp__CHttpProgress* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CWeb__CHttp__CHttpResponseMessage___x_ABI_CWindows__CWeb__CHttp__CHttpProgress* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* put_Progress)(__x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CWeb__CHttp__CHttpResponseMessage___x_ABI_CWindows__CWeb__CHttp__CHttpProgress* This,
        __x_ABI_C__FIAsyncOperationProgressHandler_2___x_ABI_CWindows__CWeb__CHttp__CHttpResponseMessage___x_ABI_CWindows__CWeb__CHttp__CHttpProgress* handler);
    HRESULT (STDMETHODCALLTYPE* get_Progress)(__x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CWeb__CHttp__CHttpResponseMessage___x_ABI_CWindows__CWeb__CHttp__CHttpProgress* This,
        __x_ABI_C__FIAsyncOperationProgressHandler_2___x_ABI_CWindows__CWeb__CHttp__CHttpResponseMessage___x_ABI_CWindows__CWeb__CHttp__CHttpProgress** result);
    HRESULT (STDMETHODCALLTYPE* put_Completed)(__x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CWeb__CHttp__CHttpResponseMessage___x_ABI_CWindows__CWeb__CHttp__CHttpProgress* This,
        __x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2___x_ABI_CWindows__CWeb__CHttp__CHttpResponseMessage___x_ABI_CWindows__CWeb__CHttp__CHttpProgress* handler);
    HRESULT (STDMETHODCALLTYPE* get_Completed)(__x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CWeb__CHttp__CHttpResponseMessage___x_ABI_CWindows__CWeb__CHttp__CHttpProgress* This,
        __x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2___x_ABI_CWindows__CWeb__CHttp__CHttpResponseMessage___x_ABI_CWindows__CWeb__CHttp__CHttpProgress** result);
    HRESULT (STDMETHODCALLTYPE* GetResults)(__x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CWeb__CHttp__CHttpResponseMessage___x_ABI_CWindows__CWeb__CHttp__CHttpProgress* This,
        __x_ABI_CWindows_CWeb_CHttp_CIHttpResponseMessage** result);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CWeb__CHttp__CHttpResponseMessage___x_ABI_CWindows__CWeb__CHttp__CHttpProgressVtbl;

    interface __x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CWeb__CHttp__CHttpResponseMessage___x_ABI_CWindows__CWeb__CHttp__CHttpProgress
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CWeb__CHttp__CHttpResponseMessage___x_ABI_CWindows__CWeb__CHttp__CHttpProgressVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CWeb__CHttp__CHttpResponseMessage___x_ABI_CWindows__CWeb__CHttp__CHttpProgress_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIAsyncOperationProgressHandler_2___x_ABI_CWindows__CWeb__CHttp__CHttpResponseMessage___x_ABI_CWindows__CWeb__CHttp__CHttpProgress_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperationProgressHandler_2___x_ABI_CWindows__CWeb__CHttp__CHttpResponseMessage___x_ABI_CWindows__CWeb__CHttp__CHttpProgress_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperationProgressHandler_2___x_ABI_CWindows__CWeb__CHttp__CHttpResponseMessage___x_ABI_CWindows__CWeb__CHttp__CHttpProgress __x_ABI_C__FIAsyncOperationProgressHandler_2___x_ABI_CWindows__CWeb__CHttp__CHttpResponseMessage___x_ABI_CWindows__CWeb__CHttp__CHttpProgress;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperationProgressHandler_2___x_ABI_CWindows__CWeb__CHttp__CHttpResponseMessage___x_ABI_CWindows__CWeb__CHttp__CHttpProgress;

    typedef struct __x_ABI_C__FIAsyncOperationProgressHandler_2___x_ABI_CWindows__CWeb__CHttp__CHttpResponseMessage___x_ABI_CWindows__CWeb__CHttp__CHttpProgressVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperationProgressHandler_2___x_ABI_CWindows__CWeb__CHttp__CHttpResponseMessage___x_ABI_CWindows__CWeb__CHttp__CHttpProgress* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperationProgressHandler_2___x_ABI_CWindows__CWeb__CHttp__CHttpResponseMessage___x_ABI_CWindows__CWeb__CHttp__CHttpProgress* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperationProgressHandler_2___x_ABI_CWindows__CWeb__CHttp__CHttpResponseMessage___x_ABI_CWindows__CWeb__CHttp__CHttpProgress* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FIAsyncOperationProgressHandler_2___x_ABI_CWindows__CWeb__CHttp__CHttpResponseMessage___x_ABI_CWindows__CWeb__CHttp__CHttpProgress* This,
        __x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CWeb__CHttp__CHttpResponseMessage___x_ABI_CWindows__CWeb__CHttp__CHttpProgress* asyncInfo,
        struct __x_ABI_CWindows_CWeb_CHttp_CHttpProgress progressInfo);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperationProgressHandler_2___x_ABI_CWindows__CWeb__CHttp__CHttpResponseMessage___x_ABI_CWindows__CWeb__CHttp__CHttpProgressVtbl;

    interface __x_ABI_C__FIAsyncOperationProgressHandler_2___x_ABI_CWindows__CWeb__CHttp__CHttpResponseMessage___x_ABI_CWindows__CWeb__CHttp__CHttpProgress
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperationProgressHandler_2___x_ABI_CWindows__CWeb__CHttp__CHttpResponseMessage___x_ABI_CWindows__CWeb__CHttp__CHttpProgressVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperationProgressHandler_2___x_ABI_CWindows__CWeb__CHttp__CHttpResponseMessage___x_ABI_CWindows__CWeb__CHttp__CHttpProgress_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectable_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectable_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectable __x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectable;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectable;

    typedef struct __x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectableVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectable* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectable* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectable* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectable* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectable* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectable* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Key)(__x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectable* This,
        HSTRING* result);
    HRESULT (STDMETHODCALLTYPE* get_Value)(__x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectable* This,
        IInspectable** result);

        END_INTERFACE
    } __x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectableVtbl;

    interface __x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectable
    {
        CONST_VTBL struct __x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectableVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectable_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectable_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectable_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectable __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectable;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectable;

    typedef struct __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectableVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectable* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectable* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectable* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectable* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectable* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectable* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Current)(__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectable* This,
        __x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectable** result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectable* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectable* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectable* This,
        UINT32 itemsLength,
        __x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectable** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectableVtbl;

    interface __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectable
    {
        CONST_VTBL struct __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectableVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectable_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectable_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectable_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectable __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectable;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectable;

    typedef struct __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectableVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectable* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectable* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectable* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectable* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectable* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectable* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* First)(__x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectable* This,
        __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectable** result);

        END_INTERFACE
    } __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectableVtbl;

    interface __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectable
    {
        CONST_VTBL struct __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectableVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectable_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING __x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING;

    typedef struct __x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRINGVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Key)(__x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING* This,
        HSTRING* result);
    HRESULT (STDMETHODCALLTYPE* get_Value)(__x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING* This,
        HSTRING* result);

        END_INTERFACE
    } __x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRINGVtbl;

    interface __x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING
    {
        CONST_VTBL struct __x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRINGVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING;

    typedef struct __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRINGVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Current)(__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING* This,
        __x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING** result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING* This,
        UINT32 itemsLength,
        __x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRINGVtbl;

    interface __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING
    {
        CONST_VTBL struct __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRINGVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING;

    typedef struct __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRINGVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* First)(__x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING* This,
        __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING** result);

        END_INTERFACE
    } __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRINGVtbl;

    interface __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING
    {
        CONST_VTBL struct __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRINGVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING_INTERFACE_DEFINED__
    
#ifndef ____x_ABI_CWindows_CSecurity_CCryptography_CCertificates_CICertificate_FWD_DEFINED__
#define ____x_ABI_CWindows_CSecurity_CCryptography_CCertificates_CICertificate_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CSecurity_CCryptography_CCertificates_CICertificate __x_ABI_CWindows_CSecurity_CCryptography_CCertificates_CICertificate;

#endif // ____x_ABI_CWindows_CSecurity_CCryptography_CCertificates_CICertificate_FWD_DEFINED__

#if !defined(____x_ABI_C__FIIterator_1___x_ABI_CWindows__CSecurity__CCryptography__CCertificates__CCertificate_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CSecurity__CCryptography__CCertificates__CCertificate_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CSecurity__CCryptography__CCertificates__CCertificate __x_ABI_C__FIIterator_1___x_ABI_CWindows__CSecurity__CCryptography__CCertificates__CCertificate;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterator_1___x_ABI_CWindows__CSecurity__CCryptography__CCertificates__CCertificate;

    typedef struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CSecurity__CCryptography__CCertificates__CCertificateVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CSecurity__CCryptography__CCertificates__CCertificate* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CSecurity__CCryptography__CCertificates__CCertificate* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CSecurity__CCryptography__CCertificates__CCertificate* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CSecurity__CCryptography__CCertificates__CCertificate* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CSecurity__CCryptography__CCertificates__CCertificate* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CSecurity__CCryptography__CCertificates__CCertificate* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Current)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CSecurity__CCryptography__CCertificates__CCertificate* This,
        __x_ABI_CWindows_CSecurity_CCryptography_CCertificates_CICertificate** result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CSecurity__CCryptography__CCertificates__CCertificate* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CSecurity__CCryptography__CCertificates__CCertificate* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CSecurity__CCryptography__CCertificates__CCertificate* This,
        UINT32 itemsLength,
        __x_ABI_CWindows_CSecurity_CCryptography_CCertificates_CICertificate** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIIterator_1___x_ABI_CWindows__CSecurity__CCryptography__CCertificates__CCertificateVtbl;

    interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CSecurity__CCryptography__CCertificates__CCertificate
    {
        CONST_VTBL struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CSecurity__CCryptography__CCertificates__CCertificateVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CSecurity__CCryptography__CCertificates__CCertificate_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterable_1___x_ABI_CWindows__CSecurity__CCryptography__CCertificates__CCertificate_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CSecurity__CCryptography__CCertificates__CCertificate_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CSecurity__CCryptography__CCertificates__CCertificate __x_ABI_C__FIIterable_1___x_ABI_CWindows__CSecurity__CCryptography__CCertificates__CCertificate;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterable_1___x_ABI_CWindows__CSecurity__CCryptography__CCertificates__CCertificate;

    typedef struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CSecurity__CCryptography__CCertificates__CCertificateVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CSecurity__CCryptography__CCertificates__CCertificate* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CSecurity__CCryptography__CCertificates__CCertificate* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CSecurity__CCryptography__CCertificates__CCertificate* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CSecurity__CCryptography__CCertificates__CCertificate* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CSecurity__CCryptography__CCertificates__CCertificate* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CSecurity__CCryptography__CCertificates__CCertificate* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* First)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CSecurity__CCryptography__CCertificates__CCertificate* This,
        __x_ABI_C__FIIterator_1___x_ABI_CWindows__CSecurity__CCryptography__CCertificates__CCertificate** result);

        END_INTERFACE
    } __x_ABI_C__FIIterable_1___x_ABI_CWindows__CSecurity__CCryptography__CCertificates__CCertificateVtbl;

    interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CSecurity__CCryptography__CCertificates__CCertificate
    {
        CONST_VTBL struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CSecurity__CCryptography__CCertificates__CCertificateVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CSecurity__CCryptography__CCertificates__CCertificate_INTERFACE_DEFINED__
    
typedef enum __x_ABI_CWindows_CSecurity_CCryptography_CCertificates_CChainValidationResult __x_ABI_CWindows_CSecurity_CCryptography_CCertificates_CChainValidationResult;

#if !defined(____x_ABI_C__FIIterator_1___x_ABI_CWindows__CSecurity__CCryptography__CCertificates__CChainValidationResult_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CSecurity__CCryptography__CCertificates__CChainValidationResult_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CSecurity__CCryptography__CCertificates__CChainValidationResult __x_ABI_C__FIIterator_1___x_ABI_CWindows__CSecurity__CCryptography__CCertificates__CChainValidationResult;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterator_1___x_ABI_CWindows__CSecurity__CCryptography__CCertificates__CChainValidationResult;

    typedef struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CSecurity__CCryptography__CCertificates__CChainValidationResultVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CSecurity__CCryptography__CCertificates__CChainValidationResult* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CSecurity__CCryptography__CCertificates__CChainValidationResult* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CSecurity__CCryptography__CCertificates__CChainValidationResult* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CSecurity__CCryptography__CCertificates__CChainValidationResult* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CSecurity__CCryptography__CCertificates__CChainValidationResult* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CSecurity__CCryptography__CCertificates__CChainValidationResult* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Current)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CSecurity__CCryptography__CCertificates__CChainValidationResult* This,
        enum __x_ABI_CWindows_CSecurity_CCryptography_CCertificates_CChainValidationResult* result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CSecurity__CCryptography__CCertificates__CChainValidationResult* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CSecurity__CCryptography__CCertificates__CChainValidationResult* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CSecurity__CCryptography__CCertificates__CChainValidationResult* This,
        UINT32 itemsLength,
        enum __x_ABI_CWindows_CSecurity_CCryptography_CCertificates_CChainValidationResult* items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIIterator_1___x_ABI_CWindows__CSecurity__CCryptography__CCertificates__CChainValidationResultVtbl;

    interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CSecurity__CCryptography__CCertificates__CChainValidationResult
    {
        CONST_VTBL struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CSecurity__CCryptography__CCertificates__CChainValidationResultVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CSecurity__CCryptography__CCertificates__CChainValidationResult_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterable_1___x_ABI_CWindows__CSecurity__CCryptography__CCertificates__CChainValidationResult_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CSecurity__CCryptography__CCertificates__CChainValidationResult_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CSecurity__CCryptography__CCertificates__CChainValidationResult __x_ABI_C__FIIterable_1___x_ABI_CWindows__CSecurity__CCryptography__CCertificates__CChainValidationResult;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterable_1___x_ABI_CWindows__CSecurity__CCryptography__CCertificates__CChainValidationResult;

    typedef struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CSecurity__CCryptography__CCertificates__CChainValidationResultVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CSecurity__CCryptography__CCertificates__CChainValidationResult* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CSecurity__CCryptography__CCertificates__CChainValidationResult* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CSecurity__CCryptography__CCertificates__CChainValidationResult* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CSecurity__CCryptography__CCertificates__CChainValidationResult* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CSecurity__CCryptography__CCertificates__CChainValidationResult* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CSecurity__CCryptography__CCertificates__CChainValidationResult* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* First)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CSecurity__CCryptography__CCertificates__CChainValidationResult* This,
        __x_ABI_C__FIIterator_1___x_ABI_CWindows__CSecurity__CCryptography__CCertificates__CChainValidationResult** result);

        END_INTERFACE
    } __x_ABI_C__FIIterable_1___x_ABI_CWindows__CSecurity__CCryptography__CCertificates__CChainValidationResultVtbl;

    interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CSecurity__CCryptography__CCertificates__CChainValidationResult
    {
        CONST_VTBL struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CSecurity__CCryptography__CCertificates__CChainValidationResultVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CSecurity__CCryptography__CCertificates__CChainValidationResult_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CHttpCookie_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CHttpCookie_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CHttpCookie __x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CHttpCookie;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CHttpCookie;

    typedef struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CHttpCookieVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CHttpCookie* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CHttpCookie* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CHttpCookie* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CHttpCookie* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CHttpCookie* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CHttpCookie* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Current)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CHttpCookie* This,
        __x_ABI_CWindows_CWeb_CHttp_CIHttpCookie** result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CHttpCookie* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CHttpCookie* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CHttpCookie* This,
        UINT32 itemsLength,
        __x_ABI_CWindows_CWeb_CHttp_CIHttpCookie** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CHttpCookieVtbl;

    interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CHttpCookie
    {
        CONST_VTBL struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CHttpCookieVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CHttpCookie_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterable_1___x_ABI_CWindows__CWeb__CHttp__CHttpCookie_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CWeb__CHttp__CHttpCookie_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CWeb__CHttp__CHttpCookie __x_ABI_C__FIIterable_1___x_ABI_CWindows__CWeb__CHttp__CHttpCookie;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterable_1___x_ABI_CWindows__CWeb__CHttp__CHttpCookie;

    typedef struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CWeb__CHttp__CHttpCookieVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CWeb__CHttp__CHttpCookie* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CWeb__CHttp__CHttpCookie* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CWeb__CHttp__CHttpCookie* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CWeb__CHttp__CHttpCookie* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CWeb__CHttp__CHttpCookie* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CWeb__CHttp__CHttpCookie* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* First)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CWeb__CHttp__CHttpCookie* This,
        __x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CHttpCookie** result);

        END_INTERFACE
    } __x_ABI_C__FIIterable_1___x_ABI_CWindows__CWeb__CHttp__CHttpCookieVtbl;

    interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CWeb__CHttp__CHttpCookie
    {
        CONST_VTBL struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CWeb__CHttp__CHttpCookieVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CWeb__CHttp__CHttpCookie_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CIHttpContent_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CIHttpContent_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CIHttpContent __x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CIHttpContent;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CIHttpContent;

    typedef struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CIHttpContentVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CIHttpContent* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CIHttpContent* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CIHttpContent* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CIHttpContent* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CIHttpContent* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CIHttpContent* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Current)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CIHttpContent* This,
        __x_ABI_CWindows_CWeb_CHttp_CIHttpContent** result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CIHttpContent* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CIHttpContent* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CIHttpContent* This,
        UINT32 itemsLength,
        __x_ABI_CWindows_CWeb_CHttp_CIHttpContent** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CIHttpContentVtbl;

    interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CIHttpContent
    {
        CONST_VTBL struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CIHttpContentVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CIHttpContent_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterable_1___x_ABI_CWindows__CWeb__CHttp__CIHttpContent_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CWeb__CHttp__CIHttpContent_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CWeb__CHttp__CIHttpContent __x_ABI_C__FIIterable_1___x_ABI_CWindows__CWeb__CHttp__CIHttpContent;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterable_1___x_ABI_CWindows__CWeb__CHttp__CIHttpContent;

    typedef struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CWeb__CHttp__CIHttpContentVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CWeb__CHttp__CIHttpContent* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CWeb__CHttp__CIHttpContent* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CWeb__CHttp__CIHttpContent* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CWeb__CHttp__CIHttpContent* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CWeb__CHttp__CIHttpContent* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CWeb__CHttp__CIHttpContent* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* First)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CWeb__CHttp__CIHttpContent* This,
        __x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CIHttpContent** result);

        END_INTERFACE
    } __x_ABI_C__FIIterable_1___x_ABI_CWindows__CWeb__CHttp__CIHttpContentVtbl;

    interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CWeb__CHttp__CIHttpContent
    {
        CONST_VTBL struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CWeb__CHttp__CIHttpContentVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CWeb__CHttp__CIHttpContent_INTERFACE_DEFINED__
    
typedef interface __x_ABI_C__FIMapView_2_HSTRING_IInspectable __x_ABI_C__FIMapView_2_HSTRING_IInspectable;

#if !defined(____x_ABI_C__FIMapView_2_HSTRING_IInspectable_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIMapView_2_HSTRING_IInspectable_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIMapView_2_HSTRING_IInspectable __x_ABI_C__FIMapView_2_HSTRING_IInspectable;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIMapView_2_HSTRING_IInspectable;

    typedef struct __x_ABI_C__FIMapView_2_HSTRING_IInspectableVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIMapView_2_HSTRING_IInspectable* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIMapView_2_HSTRING_IInspectable* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIMapView_2_HSTRING_IInspectable* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIMapView_2_HSTRING_IInspectable* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIMapView_2_HSTRING_IInspectable* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIMapView_2_HSTRING_IInspectable* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* Lookup)(__x_ABI_C__FIMapView_2_HSTRING_IInspectable* This,
        HSTRING key,
        IInspectable** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIMapView_2_HSTRING_IInspectable* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* HasKey)(__x_ABI_C__FIMapView_2_HSTRING_IInspectable* This,
        HSTRING key,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* Split)(__x_ABI_C__FIMapView_2_HSTRING_IInspectable* This,
        __x_ABI_C__FIMapView_2_HSTRING_IInspectable** first,
        __x_ABI_C__FIMapView_2_HSTRING_IInspectable** second);

        END_INTERFACE
    } __x_ABI_C__FIMapView_2_HSTRING_IInspectableVtbl;

    interface __x_ABI_C__FIMapView_2_HSTRING_IInspectable
    {
        CONST_VTBL struct __x_ABI_C__FIMapView_2_HSTRING_IInspectableVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIMapView_2_HSTRING_IInspectable_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIMap_2_HSTRING_IInspectable_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIMap_2_HSTRING_IInspectable_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIMap_2_HSTRING_IInspectable __x_ABI_C__FIMap_2_HSTRING_IInspectable;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIMap_2_HSTRING_IInspectable;

    typedef struct __x_ABI_C__FIMap_2_HSTRING_IInspectableVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIMap_2_HSTRING_IInspectable* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIMap_2_HSTRING_IInspectable* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIMap_2_HSTRING_IInspectable* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIMap_2_HSTRING_IInspectable* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIMap_2_HSTRING_IInspectable* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIMap_2_HSTRING_IInspectable* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* Lookup)(__x_ABI_C__FIMap_2_HSTRING_IInspectable* This,
        HSTRING key,
        IInspectable** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIMap_2_HSTRING_IInspectable* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* HasKey)(__x_ABI_C__FIMap_2_HSTRING_IInspectable* This,
        HSTRING key,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetView)(__x_ABI_C__FIMap_2_HSTRING_IInspectable* This,
        __x_ABI_C__FIMapView_2_HSTRING_IInspectable** result);
    HRESULT (STDMETHODCALLTYPE* Insert)(__x_ABI_C__FIMap_2_HSTRING_IInspectable* This,
        HSTRING key,
        IInspectable* value,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* Remove)(__x_ABI_C__FIMap_2_HSTRING_IInspectable* This,
        HSTRING key);
    HRESULT (STDMETHODCALLTYPE* Clear)(__x_ABI_C__FIMap_2_HSTRING_IInspectable* This);

        END_INTERFACE
    } __x_ABI_C__FIMap_2_HSTRING_IInspectableVtbl;

    interface __x_ABI_C__FIMap_2_HSTRING_IInspectable
    {
        CONST_VTBL struct __x_ABI_C__FIMap_2_HSTRING_IInspectableVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIMap_2_HSTRING_IInspectable_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSecurity__CCryptography__CCertificates__CCertificate_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSecurity__CCryptography__CCertificates__CCertificate_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSecurity__CCryptography__CCertificates__CCertificate __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSecurity__CCryptography__CCertificates__CCertificate;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSecurity__CCryptography__CCertificates__CCertificate;

    typedef struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSecurity__CCryptography__CCertificates__CCertificateVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSecurity__CCryptography__CCertificates__CCertificate* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSecurity__CCryptography__CCertificates__CCertificate* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSecurity__CCryptography__CCertificates__CCertificate* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSecurity__CCryptography__CCertificates__CCertificate* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSecurity__CCryptography__CCertificates__CCertificate* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSecurity__CCryptography__CCertificates__CCertificate* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSecurity__CCryptography__CCertificates__CCertificate* This,
        UINT32 index,
        __x_ABI_CWindows_CSecurity_CCryptography_CCertificates_CICertificate** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSecurity__CCryptography__CCertificates__CCertificate* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSecurity__CCryptography__CCertificates__CCertificate* This,
        __x_ABI_CWindows_CSecurity_CCryptography_CCertificates_CICertificate* value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSecurity__CCryptography__CCertificates__CCertificate* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        __x_ABI_CWindows_CSecurity_CCryptography_CCertificates_CICertificate** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSecurity__CCryptography__CCertificates__CCertificateVtbl;

    interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSecurity__CCryptography__CCertificates__CCertificate
    {
        CONST_VTBL struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSecurity__CCryptography__CCertificates__CCertificateVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSecurity__CCryptography__CCertificates__CCertificate_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSecurity__CCryptography__CCertificates__CChainValidationResult_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSecurity__CCryptography__CCertificates__CChainValidationResult_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSecurity__CCryptography__CCertificates__CChainValidationResult __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSecurity__CCryptography__CCertificates__CChainValidationResult;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSecurity__CCryptography__CCertificates__CChainValidationResult;

    typedef struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSecurity__CCryptography__CCertificates__CChainValidationResultVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSecurity__CCryptography__CCertificates__CChainValidationResult* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSecurity__CCryptography__CCertificates__CChainValidationResult* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSecurity__CCryptography__CCertificates__CChainValidationResult* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSecurity__CCryptography__CCertificates__CChainValidationResult* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSecurity__CCryptography__CCertificates__CChainValidationResult* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSecurity__CCryptography__CCertificates__CChainValidationResult* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSecurity__CCryptography__CCertificates__CChainValidationResult* This,
        UINT32 index,
        enum __x_ABI_CWindows_CSecurity_CCryptography_CCertificates_CChainValidationResult* result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSecurity__CCryptography__CCertificates__CChainValidationResult* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSecurity__CCryptography__CCertificates__CChainValidationResult* This,
        enum __x_ABI_CWindows_CSecurity_CCryptography_CCertificates_CChainValidationResult value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSecurity__CCryptography__CCertificates__CChainValidationResult* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        enum __x_ABI_CWindows_CSecurity_CCryptography_CCertificates_CChainValidationResult* items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSecurity__CCryptography__CCertificates__CChainValidationResultVtbl;

    interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSecurity__CCryptography__CCertificates__CChainValidationResult
    {
        CONST_VTBL struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSecurity__CCryptography__CCertificates__CChainValidationResultVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSecurity__CCryptography__CCertificates__CChainValidationResult_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CHttp__CHttpCookie_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CHttp__CHttpCookie_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CHttp__CHttpCookie __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CHttp__CHttpCookie;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CHttp__CHttpCookie;

    typedef struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CHttp__CHttpCookieVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CHttp__CHttpCookie* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CHttp__CHttpCookie* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CHttp__CHttpCookie* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CHttp__CHttpCookie* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CHttp__CHttpCookie* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CHttp__CHttpCookie* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CHttp__CHttpCookie* This,
        UINT32 index,
        __x_ABI_CWindows_CWeb_CHttp_CIHttpCookie** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CHttp__CHttpCookie* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CHttp__CHttpCookie* This,
        __x_ABI_CWindows_CWeb_CHttp_CIHttpCookie* value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CHttp__CHttpCookie* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        __x_ABI_CWindows_CWeb_CHttp_CIHttpCookie** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CHttp__CHttpCookieVtbl;

    interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CHttp__CHttpCookie
    {
        CONST_VTBL struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CHttp__CHttpCookieVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CHttp__CHttpCookie_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIReference_1_UINT64_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIReference_1_UINT64_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIReference_1_UINT64 __x_ABI_C__FIReference_1_UINT64;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIReference_1_UINT64;

    typedef struct __x_ABI_C__FIReference_1_UINT64Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIReference_1_UINT64* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIReference_1_UINT64* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIReference_1_UINT64* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIReference_1_UINT64* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIReference_1_UINT64* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIReference_1_UINT64* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Value)(__x_ABI_C__FIReference_1_UINT64* This,
        UINT64* result);

        END_INTERFACE
    } __x_ABI_C__FIReference_1_UINT64Vtbl;

    interface __x_ABI_C__FIReference_1_UINT64
    {
        CONST_VTBL struct __x_ABI_C__FIReference_1_UINT64Vtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIReference_1_UINT64_INTERFACE_DEFINED__
    
typedef struct __x_ABI_CWindows_CFoundation_CDateTime __x_ABI_CWindows_CFoundation_CDateTime;

#if !defined(____x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CDateTime_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CDateTime_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CDateTime __x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CDateTime;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CDateTime;

    typedef struct __x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CDateTimeVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CDateTime* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CDateTime* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CDateTime* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CDateTime* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CDateTime* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CDateTime* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Value)(__x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CDateTime* This,
        struct __x_ABI_CWindows_CFoundation_CDateTime* result);

        END_INTERFACE
    } __x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CDateTimeVtbl;

    interface __x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CDateTime
    {
        CONST_VTBL struct __x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CDateTimeVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CDateTime_INTERFACE_DEFINED__
    
typedef enum __x_ABI_CWindows_CFoundation_CAsyncStatus __x_ABI_CWindows_CFoundation_CAsyncStatus;

#ifndef ____x_ABI_CWindows_CFoundation_CIAsyncInfo_FWD_DEFINED__
#define ____x_ABI_CWindows_CFoundation_CIAsyncInfo_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CFoundation_CIAsyncInfo __x_ABI_CWindows_CFoundation_CIAsyncInfo;

#endif // ____x_ABI_CWindows_CFoundation_CIAsyncInfo_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CFoundation_CIClosable_FWD_DEFINED__
#define ____x_ABI_CWindows_CFoundation_CIClosable_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CFoundation_CIClosable __x_ABI_CWindows_CFoundation_CIClosable;

#endif // ____x_ABI_CWindows_CFoundation_CIClosable_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CFoundation_CIPropertyValue_FWD_DEFINED__
#define ____x_ABI_CWindows_CFoundation_CIPropertyValue_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CFoundation_CIPropertyValue __x_ABI_CWindows_CFoundation_CIPropertyValue;

#endif // ____x_ABI_CWindows_CFoundation_CIPropertyValue_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CFoundation_CIStringable_FWD_DEFINED__
#define ____x_ABI_CWindows_CFoundation_CIStringable_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CFoundation_CIStringable __x_ABI_CWindows_CFoundation_CIStringable;

#endif // ____x_ABI_CWindows_CFoundation_CIStringable_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CFoundation_CIUriRuntimeClass_FWD_DEFINED__
#define ____x_ABI_CWindows_CFoundation_CIUriRuntimeClass_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CFoundation_CIUriRuntimeClass __x_ABI_CWindows_CFoundation_CIUriRuntimeClass;

#endif // ____x_ABI_CWindows_CFoundation_CIUriRuntimeClass_FWD_DEFINED__

typedef enum __x_ABI_CWindows_CNetworking_CSockets_CSocketSslErrorSeverity __x_ABI_CWindows_CNetworking_CSockets_CSocketSslErrorSeverity;

#ifndef ____x_ABI_CWindows_CStorage_CStreams_CIOutputStream_FWD_DEFINED__
#define ____x_ABI_CWindows_CStorage_CStreams_CIOutputStream_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CStorage_CStreams_CIOutputStream __x_ABI_CWindows_CStorage_CStreams_CIOutputStream;

#endif // ____x_ABI_CWindows_CStorage_CStreams_CIOutputStream_FWD_DEFINED__

typedef enum __x_ABI_CWindows_CStorage_CStreams_CUnicodeEncoding __x_ABI_CWindows_CStorage_CStreams_CUnicodeEncoding;

#ifndef ____x_ABI_CWindows_CWeb_CHttp_CFilters_CIHttpFilter_FWD_DEFINED__
#define ____x_ABI_CWindows_CWeb_CHttp_CFilters_CIHttpFilter_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CWeb_CHttp_CFilters_CIHttpFilter __x_ABI_CWindows_CWeb_CHttp_CFilters_CIHttpFilter;

#endif // ____x_ABI_CWindows_CWeb_CHttp_CFilters_CIHttpFilter_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentHeaderCollection_FWD_DEFINED__
#define ____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentHeaderCollection_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentHeaderCollection __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentHeaderCollection;

#endif // ____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentHeaderCollection_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpRequestHeaderCollection_FWD_DEFINED__
#define ____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpRequestHeaderCollection_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpRequestHeaderCollection __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpRequestHeaderCollection;

#endif // ____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpRequestHeaderCollection_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpResponseHeaderCollection_FWD_DEFINED__
#define ____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpResponseHeaderCollection_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpResponseHeaderCollection __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpResponseHeaderCollection;

#endif // ____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpResponseHeaderCollection_FWD_DEFINED__

typedef enum __x_ABI_CWindows_CWeb_CHttp_CHttpCompletionOption __x_ABI_CWindows_CWeb_CHttp_CHttpCompletionOption;

typedef enum __x_ABI_CWindows_CWeb_CHttp_CHttpProgressStage __x_ABI_CWindows_CWeb_CHttp_CHttpProgressStage;

typedef enum __x_ABI_CWindows_CWeb_CHttp_CHttpResponseMessageSource __x_ABI_CWindows_CWeb_CHttp_CHttpResponseMessageSource;

typedef enum __x_ABI_CWindows_CWeb_CHttp_CHttpStatusCode __x_ABI_CWindows_CWeb_CHttp_CHttpStatusCode;

typedef enum __x_ABI_CWindows_CWeb_CHttp_CHttpVersion __x_ABI_CWindows_CWeb_CHttp_CHttpVersion;

enum __x_ABI_CWindows_CWeb_CHttp_CHttpCompletionOption
    {
        __x_ABI_CWindows_CWeb_CHttp_CHttpCompletionOption_ResponseContentRead = 0,
    __x_ABI_CWindows_CWeb_CHttp_CHttpCompletionOption_ResponseHeadersRead = 1,
};

enum __x_ABI_CWindows_CWeb_CHttp_CHttpProgressStage
    {
        __x_ABI_CWindows_CWeb_CHttp_CHttpProgressStage_None = 0,
    __x_ABI_CWindows_CWeb_CHttp_CHttpProgressStage_DetectingProxy = 10,
    __x_ABI_CWindows_CWeb_CHttp_CHttpProgressStage_ResolvingName = 20,
    __x_ABI_CWindows_CWeb_CHttp_CHttpProgressStage_ConnectingToServer = 30,
    __x_ABI_CWindows_CWeb_CHttp_CHttpProgressStage_NegotiatingSsl = 40,
    __x_ABI_CWindows_CWeb_CHttp_CHttpProgressStage_SendingHeaders = 50,
    __x_ABI_CWindows_CWeb_CHttp_CHttpProgressStage_SendingContent = 60,
    __x_ABI_CWindows_CWeb_CHttp_CHttpProgressStage_WaitingForResponse = 70,
    __x_ABI_CWindows_CWeb_CHttp_CHttpProgressStage_ReceivingHeaders = 80,
    __x_ABI_CWindows_CWeb_CHttp_CHttpProgressStage_ReceivingContent = 90,
};

enum __x_ABI_CWindows_CWeb_CHttp_CHttpResponseMessageSource
    {
        __x_ABI_CWindows_CWeb_CHttp_CHttpResponseMessageSource_None = 0,
    __x_ABI_CWindows_CWeb_CHttp_CHttpResponseMessageSource_Cache = 1,
    __x_ABI_CWindows_CWeb_CHttp_CHttpResponseMessageSource_Network = 2,
};

enum __x_ABI_CWindows_CWeb_CHttp_CHttpStatusCode
    {
        __x_ABI_CWindows_CWeb_CHttp_CHttpStatusCode_None = 0,
    __x_ABI_CWindows_CWeb_CHttp_CHttpStatusCode_Continue = 100,
    __x_ABI_CWindows_CWeb_CHttp_CHttpStatusCode_SwitchingProtocols = 101,
    __x_ABI_CWindows_CWeb_CHttp_CHttpStatusCode_Processing = 102,
    __x_ABI_CWindows_CWeb_CHttp_CHttpStatusCode_Ok = 200,
    __x_ABI_CWindows_CWeb_CHttp_CHttpStatusCode_Created = 201,
    __x_ABI_CWindows_CWeb_CHttp_CHttpStatusCode_Accepted = 202,
    __x_ABI_CWindows_CWeb_CHttp_CHttpStatusCode_NonAuthoritativeInformation = 203,
    __x_ABI_CWindows_CWeb_CHttp_CHttpStatusCode_NoContent = 204,
    __x_ABI_CWindows_CWeb_CHttp_CHttpStatusCode_ResetContent = 205,
    __x_ABI_CWindows_CWeb_CHttp_CHttpStatusCode_PartialContent = 206,
    __x_ABI_CWindows_CWeb_CHttp_CHttpStatusCode_MultiStatus = 207,
    __x_ABI_CWindows_CWeb_CHttp_CHttpStatusCode_AlreadyReported = 208,
    __x_ABI_CWindows_CWeb_CHttp_CHttpStatusCode_IMUsed = 226,
    __x_ABI_CWindows_CWeb_CHttp_CHttpStatusCode_MultipleChoices = 300,
    __x_ABI_CWindows_CWeb_CHttp_CHttpStatusCode_MovedPermanently = 301,
    __x_ABI_CWindows_CWeb_CHttp_CHttpStatusCode_Found = 302,
    __x_ABI_CWindows_CWeb_CHttp_CHttpStatusCode_SeeOther = 303,
    __x_ABI_CWindows_CWeb_CHttp_CHttpStatusCode_NotModified = 304,
    __x_ABI_CWindows_CWeb_CHttp_CHttpStatusCode_UseProxy = 305,
    __x_ABI_CWindows_CWeb_CHttp_CHttpStatusCode_TemporaryRedirect = 307,
    __x_ABI_CWindows_CWeb_CHttp_CHttpStatusCode_PermanentRedirect = 308,
    __x_ABI_CWindows_CWeb_CHttp_CHttpStatusCode_BadRequest = 400,
    __x_ABI_CWindows_CWeb_CHttp_CHttpStatusCode_Unauthorized = 401,
    __x_ABI_CWindows_CWeb_CHttp_CHttpStatusCode_PaymentRequired = 402,
    __x_ABI_CWindows_CWeb_CHttp_CHttpStatusCode_Forbidden = 403,
    __x_ABI_CWindows_CWeb_CHttp_CHttpStatusCode_NotFound = 404,
    __x_ABI_CWindows_CWeb_CHttp_CHttpStatusCode_MethodNotAllowed = 405,
    __x_ABI_CWindows_CWeb_CHttp_CHttpStatusCode_NotAcceptable = 406,
    __x_ABI_CWindows_CWeb_CHttp_CHttpStatusCode_ProxyAuthenticationRequired = 407,
    __x_ABI_CWindows_CWeb_CHttp_CHttpStatusCode_RequestTimeout = 408,
    __x_ABI_CWindows_CWeb_CHttp_CHttpStatusCode_Conflict = 409,
    __x_ABI_CWindows_CWeb_CHttp_CHttpStatusCode_Gone = 410,
    __x_ABI_CWindows_CWeb_CHttp_CHttpStatusCode_LengthRequired = 411,
    __x_ABI_CWindows_CWeb_CHttp_CHttpStatusCode_PreconditionFailed = 412,
    __x_ABI_CWindows_CWeb_CHttp_CHttpStatusCode_RequestEntityTooLarge = 413,
    __x_ABI_CWindows_CWeb_CHttp_CHttpStatusCode_RequestUriTooLong = 414,
    __x_ABI_CWindows_CWeb_CHttp_CHttpStatusCode_UnsupportedMediaType = 415,
    __x_ABI_CWindows_CWeb_CHttp_CHttpStatusCode_RequestedRangeNotSatisfiable = 416,
    __x_ABI_CWindows_CWeb_CHttp_CHttpStatusCode_ExpectationFailed = 417,
    __x_ABI_CWindows_CWeb_CHttp_CHttpStatusCode_UnprocessableEntity = 422,
    __x_ABI_CWindows_CWeb_CHttp_CHttpStatusCode_Locked = 423,
    __x_ABI_CWindows_CWeb_CHttp_CHttpStatusCode_FailedDependency = 424,
    __x_ABI_CWindows_CWeb_CHttp_CHttpStatusCode_UpgradeRequired = 426,
    __x_ABI_CWindows_CWeb_CHttp_CHttpStatusCode_PreconditionRequired = 428,
    __x_ABI_CWindows_CWeb_CHttp_CHttpStatusCode_TooManyRequests = 429,
    __x_ABI_CWindows_CWeb_CHttp_CHttpStatusCode_RequestHeaderFieldsTooLarge = 431,
    __x_ABI_CWindows_CWeb_CHttp_CHttpStatusCode_InternalServerError = 500,
    __x_ABI_CWindows_CWeb_CHttp_CHttpStatusCode_NotImplemented = 501,
    __x_ABI_CWindows_CWeb_CHttp_CHttpStatusCode_BadGateway = 502,
    __x_ABI_CWindows_CWeb_CHttp_CHttpStatusCode_ServiceUnavailable = 503,
    __x_ABI_CWindows_CWeb_CHttp_CHttpStatusCode_GatewayTimeout = 504,
    __x_ABI_CWindows_CWeb_CHttp_CHttpStatusCode_HttpVersionNotSupported = 505,
    __x_ABI_CWindows_CWeb_CHttp_CHttpStatusCode_VariantAlsoNegotiates = 506,
    __x_ABI_CWindows_CWeb_CHttp_CHttpStatusCode_InsufficientStorage = 507,
    __x_ABI_CWindows_CWeb_CHttp_CHttpStatusCode_LoopDetected = 508,
    __x_ABI_CWindows_CWeb_CHttp_CHttpStatusCode_NotExtended = 510,
    __x_ABI_CWindows_CWeb_CHttp_CHttpStatusCode_NetworkAuthenticationRequired = 511,
};

enum __x_ABI_CWindows_CWeb_CHttp_CHttpVersion
    {
        __x_ABI_CWindows_CWeb_CHttp_CHttpVersion_None = 0,
    __x_ABI_CWindows_CWeb_CHttp_CHttpVersion_Http10 = 1,
    __x_ABI_CWindows_CWeb_CHttp_CHttpVersion_Http11 = 2,
    __x_ABI_CWindows_CWeb_CHttp_CHttpVersion_Http20 = 3,
};

struct __x_ABI_CWindows_CWeb_CHttp_CHttpProgress
    {
        enum __x_ABI_CWindows_CWeb_CHttp_CHttpProgressStage Stage;
    UINT64 BytesSent;
    __x_ABI_C__FIReference_1_UINT64* TotalBytesToSend;
    UINT64 BytesReceived;
    __x_ABI_C__FIReference_1_UINT64* TotalBytesToReceive;
    UINT32 Retries;
};

#if !defined(____x_ABI_CWindows_CWeb_CHttp_CIHttpBufferContentFactory_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CWeb_CHttp_CIHttpBufferContentFactory_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CWeb_CHttp_CIHttpBufferContentFactoryVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CWeb_CHttp_CIHttpBufferContentFactory* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CWeb_CHttp_CIHttpBufferContentFactory* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CWeb_CHttp_CIHttpBufferContentFactory* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CWeb_CHttp_CIHttpBufferContentFactory* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CWeb_CHttp_CIHttpBufferContentFactory* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CWeb_CHttp_CIHttpBufferContentFactory* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* CreateFromBuffer)(__x_ABI_CWindows_CWeb_CHttp_CIHttpBufferContentFactory* This,
        __x_ABI_CWindows_CStorage_CStreams_CIBuffer* content,
        __x_ABI_CWindows_CWeb_CHttp_CIHttpContent** value);
    HRESULT (STDMETHODCALLTYPE* CreateFromBufferWithOffset)(__x_ABI_CWindows_CWeb_CHttp_CIHttpBufferContentFactory* This,
        __x_ABI_CWindows_CStorage_CStreams_CIBuffer* content,
        UINT32 offset,
        UINT32 count,
        __x_ABI_CWindows_CWeb_CHttp_CIHttpContent** value);

        END_INTERFACE
    } __x_ABI_CWindows_CWeb_CHttp_CIHttpBufferContentFactoryVtbl;

    interface __x_ABI_CWindows_CWeb_CHttp_CIHttpBufferContentFactory
    {
        CONST_VTBL struct __x_ABI_CWindows_CWeb_CHttp_CIHttpBufferContentFactoryVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CWeb_CHttp_CIHttpBufferContentFactory;
#endif /* !defined(____x_ABI_CWindows_CWeb_CHttp_CIHttpBufferContentFactory_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CWeb_CHttp_CIHttpClient_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CWeb_CHttp_CIHttpClient_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CWeb_CHttp_CIHttpClientVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CWeb_CHttp_CIHttpClient* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CWeb_CHttp_CIHttpClient* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CWeb_CHttp_CIHttpClient* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CWeb_CHttp_CIHttpClient* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CWeb_CHttp_CIHttpClient* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CWeb_CHttp_CIHttpClient* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* DeleteAsync)(__x_ABI_CWindows_CWeb_CHttp_CIHttpClient* This,
        __x_ABI_CWindows_CFoundation_CIUriRuntimeClass* uri,
        __x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CWeb__CHttp__CHttpResponseMessage___x_ABI_CWindows__CWeb__CHttp__CHttpProgress** operation);
    HRESULT (STDMETHODCALLTYPE* GetAsync)(__x_ABI_CWindows_CWeb_CHttp_CIHttpClient* This,
        __x_ABI_CWindows_CFoundation_CIUriRuntimeClass* uri,
        __x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CWeb__CHttp__CHttpResponseMessage___x_ABI_CWindows__CWeb__CHttp__CHttpProgress** operation);
    HRESULT (STDMETHODCALLTYPE* GetWithOptionAsync)(__x_ABI_CWindows_CWeb_CHttp_CIHttpClient* This,
        __x_ABI_CWindows_CFoundation_CIUriRuntimeClass* uri,
        enum __x_ABI_CWindows_CWeb_CHttp_CHttpCompletionOption completionOption,
        __x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CWeb__CHttp__CHttpResponseMessage___x_ABI_CWindows__CWeb__CHttp__CHttpProgress** operation);
    HRESULT (STDMETHODCALLTYPE* GetBufferAsync)(__x_ABI_CWindows_CWeb_CHttp_CIHttpClient* This,
        __x_ABI_CWindows_CFoundation_CIUriRuntimeClass* uri,
        __x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CStorage__CStreams__CIBuffer___x_ABI_CWindows__CWeb__CHttp__CHttpProgress** operation);
    HRESULT (STDMETHODCALLTYPE* GetInputStreamAsync)(__x_ABI_CWindows_CWeb_CHttp_CIHttpClient* This,
        __x_ABI_CWindows_CFoundation_CIUriRuntimeClass* uri,
        __x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CStorage__CStreams__CIInputStream___x_ABI_CWindows__CWeb__CHttp__CHttpProgress** operation);
    HRESULT (STDMETHODCALLTYPE* GetStringAsync)(__x_ABI_CWindows_CWeb_CHttp_CIHttpClient* This,
        __x_ABI_CWindows_CFoundation_CIUriRuntimeClass* uri,
        __x_ABI_C__FIAsyncOperationWithProgress_2_HSTRING___x_ABI_CWindows__CWeb__CHttp__CHttpProgress** operation);
    HRESULT (STDMETHODCALLTYPE* PostAsync)(__x_ABI_CWindows_CWeb_CHttp_CIHttpClient* This,
        __x_ABI_CWindows_CFoundation_CIUriRuntimeClass* uri,
        __x_ABI_CWindows_CWeb_CHttp_CIHttpContent* content,
        __x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CWeb__CHttp__CHttpResponseMessage___x_ABI_CWindows__CWeb__CHttp__CHttpProgress** operation);
    HRESULT (STDMETHODCALLTYPE* PutAsync)(__x_ABI_CWindows_CWeb_CHttp_CIHttpClient* This,
        __x_ABI_CWindows_CFoundation_CIUriRuntimeClass* uri,
        __x_ABI_CWindows_CWeb_CHttp_CIHttpContent* content,
        __x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CWeb__CHttp__CHttpResponseMessage___x_ABI_CWindows__CWeb__CHttp__CHttpProgress** operation);
    HRESULT (STDMETHODCALLTYPE* SendRequestAsync)(__x_ABI_CWindows_CWeb_CHttp_CIHttpClient* This,
        __x_ABI_CWindows_CWeb_CHttp_CIHttpRequestMessage* request,
        __x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CWeb__CHttp__CHttpResponseMessage___x_ABI_CWindows__CWeb__CHttp__CHttpProgress** operation);
    HRESULT (STDMETHODCALLTYPE* SendRequestWithOptionAsync)(__x_ABI_CWindows_CWeb_CHttp_CIHttpClient* This,
        __x_ABI_CWindows_CWeb_CHttp_CIHttpRequestMessage* request,
        enum __x_ABI_CWindows_CWeb_CHttp_CHttpCompletionOption completionOption,
        __x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CWeb__CHttp__CHttpResponseMessage___x_ABI_CWindows__CWeb__CHttp__CHttpProgress** operation);
    HRESULT (STDMETHODCALLTYPE* get_DefaultRequestHeaders)(__x_ABI_CWindows_CWeb_CHttp_CIHttpClient* This,
        __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpRequestHeaderCollection** value);

        END_INTERFACE
    } __x_ABI_CWindows_CWeb_CHttp_CIHttpClientVtbl;

    interface __x_ABI_CWindows_CWeb_CHttp_CIHttpClient
    {
        CONST_VTBL struct __x_ABI_CWindows_CWeb_CHttp_CIHttpClientVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CWeb_CHttp_CIHttpClient;
#endif /* !defined(____x_ABI_CWindows_CWeb_CHttp_CIHttpClient_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CWeb_CHttp_CIHttpClient2_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CWeb_CHttp_CIHttpClient2_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CWeb_CHttp_CIHttpClient2Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CWeb_CHttp_CIHttpClient2* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CWeb_CHttp_CIHttpClient2* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CWeb_CHttp_CIHttpClient2* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CWeb_CHttp_CIHttpClient2* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CWeb_CHttp_CIHttpClient2* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CWeb_CHttp_CIHttpClient2* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* TryDeleteAsync)(__x_ABI_CWindows_CWeb_CHttp_CIHttpClient2* This,
        __x_ABI_CWindows_CFoundation_CIUriRuntimeClass* uri,
        __x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CWeb__CHttp__CHttpRequestResult___x_ABI_CWindows__CWeb__CHttp__CHttpProgress** operation);
    HRESULT (STDMETHODCALLTYPE* TryGetAsync)(__x_ABI_CWindows_CWeb_CHttp_CIHttpClient2* This,
        __x_ABI_CWindows_CFoundation_CIUriRuntimeClass* uri,
        __x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CWeb__CHttp__CHttpRequestResult___x_ABI_CWindows__CWeb__CHttp__CHttpProgress** operation);
    HRESULT (STDMETHODCALLTYPE* TryGetAsync2)(__x_ABI_CWindows_CWeb_CHttp_CIHttpClient2* This,
        __x_ABI_CWindows_CFoundation_CIUriRuntimeClass* uri,
        enum __x_ABI_CWindows_CWeb_CHttp_CHttpCompletionOption completionOption,
        __x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CWeb__CHttp__CHttpRequestResult___x_ABI_CWindows__CWeb__CHttp__CHttpProgress** operation);
    HRESULT (STDMETHODCALLTYPE* TryGetBufferAsync)(__x_ABI_CWindows_CWeb_CHttp_CIHttpClient2* This,
        __x_ABI_CWindows_CFoundation_CIUriRuntimeClass* uri,
        __x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CWeb__CHttp__CHttpGetBufferResult___x_ABI_CWindows__CWeb__CHttp__CHttpProgress** operation);
    HRESULT (STDMETHODCALLTYPE* TryGetInputStreamAsync)(__x_ABI_CWindows_CWeb_CHttp_CIHttpClient2* This,
        __x_ABI_CWindows_CFoundation_CIUriRuntimeClass* uri,
        __x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CWeb__CHttp__CHttpGetInputStreamResult___x_ABI_CWindows__CWeb__CHttp__CHttpProgress** operation);
    HRESULT (STDMETHODCALLTYPE* TryGetStringAsync)(__x_ABI_CWindows_CWeb_CHttp_CIHttpClient2* This,
        __x_ABI_CWindows_CFoundation_CIUriRuntimeClass* uri,
        __x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CWeb__CHttp__CHttpGetStringResult___x_ABI_CWindows__CWeb__CHttp__CHttpProgress** operation);
    HRESULT (STDMETHODCALLTYPE* TryPostAsync)(__x_ABI_CWindows_CWeb_CHttp_CIHttpClient2* This,
        __x_ABI_CWindows_CFoundation_CIUriRuntimeClass* uri,
        __x_ABI_CWindows_CWeb_CHttp_CIHttpContent* content,
        __x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CWeb__CHttp__CHttpRequestResult___x_ABI_CWindows__CWeb__CHttp__CHttpProgress** operation);
    HRESULT (STDMETHODCALLTYPE* TryPutAsync)(__x_ABI_CWindows_CWeb_CHttp_CIHttpClient2* This,
        __x_ABI_CWindows_CFoundation_CIUriRuntimeClass* uri,
        __x_ABI_CWindows_CWeb_CHttp_CIHttpContent* content,
        __x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CWeb__CHttp__CHttpRequestResult___x_ABI_CWindows__CWeb__CHttp__CHttpProgress** operation);
    HRESULT (STDMETHODCALLTYPE* TrySendRequestAsync)(__x_ABI_CWindows_CWeb_CHttp_CIHttpClient2* This,
        __x_ABI_CWindows_CWeb_CHttp_CIHttpRequestMessage* request,
        __x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CWeb__CHttp__CHttpRequestResult___x_ABI_CWindows__CWeb__CHttp__CHttpProgress** operation);
    HRESULT (STDMETHODCALLTYPE* TrySendRequestAsync2)(__x_ABI_CWindows_CWeb_CHttp_CIHttpClient2* This,
        __x_ABI_CWindows_CWeb_CHttp_CIHttpRequestMessage* request,
        enum __x_ABI_CWindows_CWeb_CHttp_CHttpCompletionOption completionOption,
        __x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CWeb__CHttp__CHttpRequestResult___x_ABI_CWindows__CWeb__CHttp__CHttpProgress** operation);

        END_INTERFACE
    } __x_ABI_CWindows_CWeb_CHttp_CIHttpClient2Vtbl;

    interface __x_ABI_CWindows_CWeb_CHttp_CIHttpClient2
    {
        CONST_VTBL struct __x_ABI_CWindows_CWeb_CHttp_CIHttpClient2Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CWeb_CHttp_CIHttpClient2;
#endif /* !defined(____x_ABI_CWindows_CWeb_CHttp_CIHttpClient2_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CWeb_CHttp_CIHttpClientFactory_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CWeb_CHttp_CIHttpClientFactory_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CWeb_CHttp_CIHttpClientFactoryVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CWeb_CHttp_CIHttpClientFactory* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CWeb_CHttp_CIHttpClientFactory* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CWeb_CHttp_CIHttpClientFactory* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CWeb_CHttp_CIHttpClientFactory* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CWeb_CHttp_CIHttpClientFactory* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CWeb_CHttp_CIHttpClientFactory* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* Create)(__x_ABI_CWindows_CWeb_CHttp_CIHttpClientFactory* This,
        __x_ABI_CWindows_CWeb_CHttp_CFilters_CIHttpFilter* filter,
        __x_ABI_CWindows_CWeb_CHttp_CIHttpClient** value);

        END_INTERFACE
    } __x_ABI_CWindows_CWeb_CHttp_CIHttpClientFactoryVtbl;

    interface __x_ABI_CWindows_CWeb_CHttp_CIHttpClientFactory
    {
        CONST_VTBL struct __x_ABI_CWindows_CWeb_CHttp_CIHttpClientFactoryVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CWeb_CHttp_CIHttpClientFactory;
#endif /* !defined(____x_ABI_CWindows_CWeb_CHttp_CIHttpClientFactory_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CWeb_CHttp_CIHttpContent_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CWeb_CHttp_CIHttpContent_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CWeb_CHttp_CIHttpContentVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CWeb_CHttp_CIHttpContent* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CWeb_CHttp_CIHttpContent* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CWeb_CHttp_CIHttpContent* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CWeb_CHttp_CIHttpContent* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CWeb_CHttp_CIHttpContent* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CWeb_CHttp_CIHttpContent* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Headers)(__x_ABI_CWindows_CWeb_CHttp_CIHttpContent* This,
        __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentHeaderCollection** value);
    HRESULT (STDMETHODCALLTYPE* BufferAllAsync)(__x_ABI_CWindows_CWeb_CHttp_CIHttpContent* This,
        __x_ABI_C__FIAsyncOperationWithProgress_2_UINT64_UINT64** operation);
    HRESULT (STDMETHODCALLTYPE* ReadAsBufferAsync)(__x_ABI_CWindows_CWeb_CHttp_CIHttpContent* This,
        __x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CStorage__CStreams__CIBuffer_UINT64** operation);
    HRESULT (STDMETHODCALLTYPE* ReadAsInputStreamAsync)(__x_ABI_CWindows_CWeb_CHttp_CIHttpContent* This,
        __x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CStorage__CStreams__CIInputStream_UINT64** operation);
    HRESULT (STDMETHODCALLTYPE* ReadAsStringAsync)(__x_ABI_CWindows_CWeb_CHttp_CIHttpContent* This,
        __x_ABI_C__FIAsyncOperationWithProgress_2_HSTRING_UINT64** operation);
    HRESULT (STDMETHODCALLTYPE* TryComputeLength)(__x_ABI_CWindows_CWeb_CHttp_CIHttpContent* This,
        UINT64* length,
        boolean* succeeded);
    HRESULT (STDMETHODCALLTYPE* WriteToStreamAsync)(__x_ABI_CWindows_CWeb_CHttp_CIHttpContent* This,
        __x_ABI_CWindows_CStorage_CStreams_CIOutputStream* outputStream,
        __x_ABI_C__FIAsyncOperationWithProgress_2_UINT64_UINT64** operation);

        END_INTERFACE
    } __x_ABI_CWindows_CWeb_CHttp_CIHttpContentVtbl;

    interface __x_ABI_CWindows_CWeb_CHttp_CIHttpContent
    {
        CONST_VTBL struct __x_ABI_CWindows_CWeb_CHttp_CIHttpContentVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CWeb_CHttp_CIHttpContent;
#endif /* !defined(____x_ABI_CWindows_CWeb_CHttp_CIHttpContent_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CWeb_CHttp_CIHttpCookie_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CWeb_CHttp_CIHttpCookie_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CWeb_CHttp_CIHttpCookieVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CWeb_CHttp_CIHttpCookie* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CWeb_CHttp_CIHttpCookie* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CWeb_CHttp_CIHttpCookie* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CWeb_CHttp_CIHttpCookie* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CWeb_CHttp_CIHttpCookie* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CWeb_CHttp_CIHttpCookie* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Name)(__x_ABI_CWindows_CWeb_CHttp_CIHttpCookie* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_Domain)(__x_ABI_CWindows_CWeb_CHttp_CIHttpCookie* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_Path)(__x_ABI_CWindows_CWeb_CHttp_CIHttpCookie* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_Expires)(__x_ABI_CWindows_CWeb_CHttp_CIHttpCookie* This,
        __x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CDateTime** value);
    HRESULT (STDMETHODCALLTYPE* put_Expires)(__x_ABI_CWindows_CWeb_CHttp_CIHttpCookie* This,
        __x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CDateTime* value);
    HRESULT (STDMETHODCALLTYPE* get_HttpOnly)(__x_ABI_CWindows_CWeb_CHttp_CIHttpCookie* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* put_HttpOnly)(__x_ABI_CWindows_CWeb_CHttp_CIHttpCookie* This,
        boolean value);
    HRESULT (STDMETHODCALLTYPE* get_Secure)(__x_ABI_CWindows_CWeb_CHttp_CIHttpCookie* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* put_Secure)(__x_ABI_CWindows_CWeb_CHttp_CIHttpCookie* This,
        boolean value);
    HRESULT (STDMETHODCALLTYPE* get_Value)(__x_ABI_CWindows_CWeb_CHttp_CIHttpCookie* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* put_Value)(__x_ABI_CWindows_CWeb_CHttp_CIHttpCookie* This,
        HSTRING value);

        END_INTERFACE
    } __x_ABI_CWindows_CWeb_CHttp_CIHttpCookieVtbl;

    interface __x_ABI_CWindows_CWeb_CHttp_CIHttpCookie
    {
        CONST_VTBL struct __x_ABI_CWindows_CWeb_CHttp_CIHttpCookieVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CWeb_CHttp_CIHttpCookie;
#endif /* !defined(____x_ABI_CWindows_CWeb_CHttp_CIHttpCookie_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CWeb_CHttp_CIHttpCookieFactory_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CWeb_CHttp_CIHttpCookieFactory_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CWeb_CHttp_CIHttpCookieFactoryVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CWeb_CHttp_CIHttpCookieFactory* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CWeb_CHttp_CIHttpCookieFactory* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CWeb_CHttp_CIHttpCookieFactory* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CWeb_CHttp_CIHttpCookieFactory* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CWeb_CHttp_CIHttpCookieFactory* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CWeb_CHttp_CIHttpCookieFactory* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* Create)(__x_ABI_CWindows_CWeb_CHttp_CIHttpCookieFactory* This,
        HSTRING name,
        HSTRING domain,
        HSTRING path,
        __x_ABI_CWindows_CWeb_CHttp_CIHttpCookie** value);

        END_INTERFACE
    } __x_ABI_CWindows_CWeb_CHttp_CIHttpCookieFactoryVtbl;

    interface __x_ABI_CWindows_CWeb_CHttp_CIHttpCookieFactory
    {
        CONST_VTBL struct __x_ABI_CWindows_CWeb_CHttp_CIHttpCookieFactoryVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CWeb_CHttp_CIHttpCookieFactory;
#endif /* !defined(____x_ABI_CWindows_CWeb_CHttp_CIHttpCookieFactory_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CWeb_CHttp_CIHttpCookieManager_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CWeb_CHttp_CIHttpCookieManager_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CWeb_CHttp_CIHttpCookieManagerVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CWeb_CHttp_CIHttpCookieManager* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CWeb_CHttp_CIHttpCookieManager* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CWeb_CHttp_CIHttpCookieManager* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CWeb_CHttp_CIHttpCookieManager* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CWeb_CHttp_CIHttpCookieManager* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CWeb_CHttp_CIHttpCookieManager* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* SetCookie)(__x_ABI_CWindows_CWeb_CHttp_CIHttpCookieManager* This,
        __x_ABI_CWindows_CWeb_CHttp_CIHttpCookie* cookie,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* SetCookieWithThirdParty)(__x_ABI_CWindows_CWeb_CHttp_CIHttpCookieManager* This,
        __x_ABI_CWindows_CWeb_CHttp_CIHttpCookie* cookie,
        boolean thirdParty,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* DeleteCookie)(__x_ABI_CWindows_CWeb_CHttp_CIHttpCookieManager* This,
        __x_ABI_CWindows_CWeb_CHttp_CIHttpCookie* cookie);
    HRESULT (STDMETHODCALLTYPE* GetCookies)(__x_ABI_CWindows_CWeb_CHttp_CIHttpCookieManager* This,
        __x_ABI_CWindows_CFoundation_CIUriRuntimeClass* uri,
        __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CHttp__CHttpCookie** result);

        END_INTERFACE
    } __x_ABI_CWindows_CWeb_CHttp_CIHttpCookieManagerVtbl;

    interface __x_ABI_CWindows_CWeb_CHttp_CIHttpCookieManager
    {
        CONST_VTBL struct __x_ABI_CWindows_CWeb_CHttp_CIHttpCookieManagerVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CWeb_CHttp_CIHttpCookieManager;
#endif /* !defined(____x_ABI_CWindows_CWeb_CHttp_CIHttpCookieManager_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CWeb_CHttp_CIHttpFormUrlEncodedContentFactory_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CWeb_CHttp_CIHttpFormUrlEncodedContentFactory_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CWeb_CHttp_CIHttpFormUrlEncodedContentFactoryVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CWeb_CHttp_CIHttpFormUrlEncodedContentFactory* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CWeb_CHttp_CIHttpFormUrlEncodedContentFactory* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CWeb_CHttp_CIHttpFormUrlEncodedContentFactory* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CWeb_CHttp_CIHttpFormUrlEncodedContentFactory* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CWeb_CHttp_CIHttpFormUrlEncodedContentFactory* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CWeb_CHttp_CIHttpFormUrlEncodedContentFactory* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* Create)(__x_ABI_CWindows_CWeb_CHttp_CIHttpFormUrlEncodedContentFactory* This,
        __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING* content,
        __x_ABI_CWindows_CWeb_CHttp_CIHttpContent** value);

        END_INTERFACE
    } __x_ABI_CWindows_CWeb_CHttp_CIHttpFormUrlEncodedContentFactoryVtbl;

    interface __x_ABI_CWindows_CWeb_CHttp_CIHttpFormUrlEncodedContentFactory
    {
        CONST_VTBL struct __x_ABI_CWindows_CWeb_CHttp_CIHttpFormUrlEncodedContentFactoryVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CWeb_CHttp_CIHttpFormUrlEncodedContentFactory;
#endif /* !defined(____x_ABI_CWindows_CWeb_CHttp_CIHttpFormUrlEncodedContentFactory_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CWeb_CHttp_CIHttpGetBufferResult_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CWeb_CHttp_CIHttpGetBufferResult_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CWeb_CHttp_CIHttpGetBufferResultVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CWeb_CHttp_CIHttpGetBufferResult* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CWeb_CHttp_CIHttpGetBufferResult* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CWeb_CHttp_CIHttpGetBufferResult* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CWeb_CHttp_CIHttpGetBufferResult* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CWeb_CHttp_CIHttpGetBufferResult* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CWeb_CHttp_CIHttpGetBufferResult* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_ExtendedError)(__x_ABI_CWindows_CWeb_CHttp_CIHttpGetBufferResult* This,
        HRESULT* value);
    HRESULT (STDMETHODCALLTYPE* get_RequestMessage)(__x_ABI_CWindows_CWeb_CHttp_CIHttpGetBufferResult* This,
        __x_ABI_CWindows_CWeb_CHttp_CIHttpRequestMessage** value);
    HRESULT (STDMETHODCALLTYPE* get_ResponseMessage)(__x_ABI_CWindows_CWeb_CHttp_CIHttpGetBufferResult* This,
        __x_ABI_CWindows_CWeb_CHttp_CIHttpResponseMessage** value);
    HRESULT (STDMETHODCALLTYPE* get_Succeeded)(__x_ABI_CWindows_CWeb_CHttp_CIHttpGetBufferResult* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* get_Value)(__x_ABI_CWindows_CWeb_CHttp_CIHttpGetBufferResult* This,
        __x_ABI_CWindows_CStorage_CStreams_CIBuffer** value);

        END_INTERFACE
    } __x_ABI_CWindows_CWeb_CHttp_CIHttpGetBufferResultVtbl;

    interface __x_ABI_CWindows_CWeb_CHttp_CIHttpGetBufferResult
    {
        CONST_VTBL struct __x_ABI_CWindows_CWeb_CHttp_CIHttpGetBufferResultVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CWeb_CHttp_CIHttpGetBufferResult;
#endif /* !defined(____x_ABI_CWindows_CWeb_CHttp_CIHttpGetBufferResult_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CWeb_CHttp_CIHttpGetInputStreamResult_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CWeb_CHttp_CIHttpGetInputStreamResult_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CWeb_CHttp_CIHttpGetInputStreamResultVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CWeb_CHttp_CIHttpGetInputStreamResult* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CWeb_CHttp_CIHttpGetInputStreamResult* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CWeb_CHttp_CIHttpGetInputStreamResult* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CWeb_CHttp_CIHttpGetInputStreamResult* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CWeb_CHttp_CIHttpGetInputStreamResult* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CWeb_CHttp_CIHttpGetInputStreamResult* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_ExtendedError)(__x_ABI_CWindows_CWeb_CHttp_CIHttpGetInputStreamResult* This,
        HRESULT* value);
    HRESULT (STDMETHODCALLTYPE* get_RequestMessage)(__x_ABI_CWindows_CWeb_CHttp_CIHttpGetInputStreamResult* This,
        __x_ABI_CWindows_CWeb_CHttp_CIHttpRequestMessage** value);
    HRESULT (STDMETHODCALLTYPE* get_ResponseMessage)(__x_ABI_CWindows_CWeb_CHttp_CIHttpGetInputStreamResult* This,
        __x_ABI_CWindows_CWeb_CHttp_CIHttpResponseMessage** value);
    HRESULT (STDMETHODCALLTYPE* get_Succeeded)(__x_ABI_CWindows_CWeb_CHttp_CIHttpGetInputStreamResult* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* get_Value)(__x_ABI_CWindows_CWeb_CHttp_CIHttpGetInputStreamResult* This,
        __x_ABI_CWindows_CStorage_CStreams_CIInputStream** value);

        END_INTERFACE
    } __x_ABI_CWindows_CWeb_CHttp_CIHttpGetInputStreamResultVtbl;

    interface __x_ABI_CWindows_CWeb_CHttp_CIHttpGetInputStreamResult
    {
        CONST_VTBL struct __x_ABI_CWindows_CWeb_CHttp_CIHttpGetInputStreamResultVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CWeb_CHttp_CIHttpGetInputStreamResult;
#endif /* !defined(____x_ABI_CWindows_CWeb_CHttp_CIHttpGetInputStreamResult_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CWeb_CHttp_CIHttpGetStringResult_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CWeb_CHttp_CIHttpGetStringResult_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CWeb_CHttp_CIHttpGetStringResultVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CWeb_CHttp_CIHttpGetStringResult* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CWeb_CHttp_CIHttpGetStringResult* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CWeb_CHttp_CIHttpGetStringResult* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CWeb_CHttp_CIHttpGetStringResult* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CWeb_CHttp_CIHttpGetStringResult* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CWeb_CHttp_CIHttpGetStringResult* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_ExtendedError)(__x_ABI_CWindows_CWeb_CHttp_CIHttpGetStringResult* This,
        HRESULT* value);
    HRESULT (STDMETHODCALLTYPE* get_RequestMessage)(__x_ABI_CWindows_CWeb_CHttp_CIHttpGetStringResult* This,
        __x_ABI_CWindows_CWeb_CHttp_CIHttpRequestMessage** value);
    HRESULT (STDMETHODCALLTYPE* get_ResponseMessage)(__x_ABI_CWindows_CWeb_CHttp_CIHttpGetStringResult* This,
        __x_ABI_CWindows_CWeb_CHttp_CIHttpResponseMessage** value);
    HRESULT (STDMETHODCALLTYPE* get_Succeeded)(__x_ABI_CWindows_CWeb_CHttp_CIHttpGetStringResult* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* get_Value)(__x_ABI_CWindows_CWeb_CHttp_CIHttpGetStringResult* This,
        HSTRING* value);

        END_INTERFACE
    } __x_ABI_CWindows_CWeb_CHttp_CIHttpGetStringResultVtbl;

    interface __x_ABI_CWindows_CWeb_CHttp_CIHttpGetStringResult
    {
        CONST_VTBL struct __x_ABI_CWindows_CWeb_CHttp_CIHttpGetStringResultVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CWeb_CHttp_CIHttpGetStringResult;
#endif /* !defined(____x_ABI_CWindows_CWeb_CHttp_CIHttpGetStringResult_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CWeb_CHttp_CIHttpMethod_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CWeb_CHttp_CIHttpMethod_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CWeb_CHttp_CIHttpMethodVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CWeb_CHttp_CIHttpMethod* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CWeb_CHttp_CIHttpMethod* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CWeb_CHttp_CIHttpMethod* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CWeb_CHttp_CIHttpMethod* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CWeb_CHttp_CIHttpMethod* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CWeb_CHttp_CIHttpMethod* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Method)(__x_ABI_CWindows_CWeb_CHttp_CIHttpMethod* This,
        HSTRING* value);

        END_INTERFACE
    } __x_ABI_CWindows_CWeb_CHttp_CIHttpMethodVtbl;

    interface __x_ABI_CWindows_CWeb_CHttp_CIHttpMethod
    {
        CONST_VTBL struct __x_ABI_CWindows_CWeb_CHttp_CIHttpMethodVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CWeb_CHttp_CIHttpMethod;
#endif /* !defined(____x_ABI_CWindows_CWeb_CHttp_CIHttpMethod_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CWeb_CHttp_CIHttpMethodFactory_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CWeb_CHttp_CIHttpMethodFactory_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CWeb_CHttp_CIHttpMethodFactoryVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CWeb_CHttp_CIHttpMethodFactory* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CWeb_CHttp_CIHttpMethodFactory* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CWeb_CHttp_CIHttpMethodFactory* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CWeb_CHttp_CIHttpMethodFactory* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CWeb_CHttp_CIHttpMethodFactory* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CWeb_CHttp_CIHttpMethodFactory* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* Create)(__x_ABI_CWindows_CWeb_CHttp_CIHttpMethodFactory* This,
        HSTRING method,
        __x_ABI_CWindows_CWeb_CHttp_CIHttpMethod** value);

        END_INTERFACE
    } __x_ABI_CWindows_CWeb_CHttp_CIHttpMethodFactoryVtbl;

    interface __x_ABI_CWindows_CWeb_CHttp_CIHttpMethodFactory
    {
        CONST_VTBL struct __x_ABI_CWindows_CWeb_CHttp_CIHttpMethodFactoryVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CWeb_CHttp_CIHttpMethodFactory;
#endif /* !defined(____x_ABI_CWindows_CWeb_CHttp_CIHttpMethodFactory_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CWeb_CHttp_CIHttpMethodStatics_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CWeb_CHttp_CIHttpMethodStatics_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CWeb_CHttp_CIHttpMethodStaticsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CWeb_CHttp_CIHttpMethodStatics* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CWeb_CHttp_CIHttpMethodStatics* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CWeb_CHttp_CIHttpMethodStatics* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CWeb_CHttp_CIHttpMethodStatics* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CWeb_CHttp_CIHttpMethodStatics* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CWeb_CHttp_CIHttpMethodStatics* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Delete)(__x_ABI_CWindows_CWeb_CHttp_CIHttpMethodStatics* This,
        __x_ABI_CWindows_CWeb_CHttp_CIHttpMethod** value);
    HRESULT (STDMETHODCALLTYPE* get_Get)(__x_ABI_CWindows_CWeb_CHttp_CIHttpMethodStatics* This,
        __x_ABI_CWindows_CWeb_CHttp_CIHttpMethod** value);
    HRESULT (STDMETHODCALLTYPE* get_Head)(__x_ABI_CWindows_CWeb_CHttp_CIHttpMethodStatics* This,
        __x_ABI_CWindows_CWeb_CHttp_CIHttpMethod** value);
    HRESULT (STDMETHODCALLTYPE* get_Options)(__x_ABI_CWindows_CWeb_CHttp_CIHttpMethodStatics* This,
        __x_ABI_CWindows_CWeb_CHttp_CIHttpMethod** value);
    HRESULT (STDMETHODCALLTYPE* get_Patch)(__x_ABI_CWindows_CWeb_CHttp_CIHttpMethodStatics* This,
        __x_ABI_CWindows_CWeb_CHttp_CIHttpMethod** value);
    HRESULT (STDMETHODCALLTYPE* get_Post)(__x_ABI_CWindows_CWeb_CHttp_CIHttpMethodStatics* This,
        __x_ABI_CWindows_CWeb_CHttp_CIHttpMethod** value);
    HRESULT (STDMETHODCALLTYPE* get_Put)(__x_ABI_CWindows_CWeb_CHttp_CIHttpMethodStatics* This,
        __x_ABI_CWindows_CWeb_CHttp_CIHttpMethod** value);

        END_INTERFACE
    } __x_ABI_CWindows_CWeb_CHttp_CIHttpMethodStaticsVtbl;

    interface __x_ABI_CWindows_CWeb_CHttp_CIHttpMethodStatics
    {
        CONST_VTBL struct __x_ABI_CWindows_CWeb_CHttp_CIHttpMethodStaticsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CWeb_CHttp_CIHttpMethodStatics;
#endif /* !defined(____x_ABI_CWindows_CWeb_CHttp_CIHttpMethodStatics_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CWeb_CHttp_CIHttpMultipartContent_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CWeb_CHttp_CIHttpMultipartContent_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CWeb_CHttp_CIHttpMultipartContentVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CWeb_CHttp_CIHttpMultipartContent* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CWeb_CHttp_CIHttpMultipartContent* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CWeb_CHttp_CIHttpMultipartContent* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CWeb_CHttp_CIHttpMultipartContent* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CWeb_CHttp_CIHttpMultipartContent* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CWeb_CHttp_CIHttpMultipartContent* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* Add)(__x_ABI_CWindows_CWeb_CHttp_CIHttpMultipartContent* This,
        __x_ABI_CWindows_CWeb_CHttp_CIHttpContent* content);

        END_INTERFACE
    } __x_ABI_CWindows_CWeb_CHttp_CIHttpMultipartContentVtbl;

    interface __x_ABI_CWindows_CWeb_CHttp_CIHttpMultipartContent
    {
        CONST_VTBL struct __x_ABI_CWindows_CWeb_CHttp_CIHttpMultipartContentVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CWeb_CHttp_CIHttpMultipartContent;
#endif /* !defined(____x_ABI_CWindows_CWeb_CHttp_CIHttpMultipartContent_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CWeb_CHttp_CIHttpMultipartContentFactory_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CWeb_CHttp_CIHttpMultipartContentFactory_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CWeb_CHttp_CIHttpMultipartContentFactoryVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CWeb_CHttp_CIHttpMultipartContentFactory* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CWeb_CHttp_CIHttpMultipartContentFactory* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CWeb_CHttp_CIHttpMultipartContentFactory* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CWeb_CHttp_CIHttpMultipartContentFactory* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CWeb_CHttp_CIHttpMultipartContentFactory* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CWeb_CHttp_CIHttpMultipartContentFactory* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* CreateWithSubtype)(__x_ABI_CWindows_CWeb_CHttp_CIHttpMultipartContentFactory* This,
        HSTRING subtype,
        __x_ABI_CWindows_CWeb_CHttp_CIHttpContent** value);
    HRESULT (STDMETHODCALLTYPE* CreateWithSubtypeAndBoundary)(__x_ABI_CWindows_CWeb_CHttp_CIHttpMultipartContentFactory* This,
        HSTRING subtype,
        HSTRING boundary,
        __x_ABI_CWindows_CWeb_CHttp_CIHttpContent** value);

        END_INTERFACE
    } __x_ABI_CWindows_CWeb_CHttp_CIHttpMultipartContentFactoryVtbl;

    interface __x_ABI_CWindows_CWeb_CHttp_CIHttpMultipartContentFactory
    {
        CONST_VTBL struct __x_ABI_CWindows_CWeb_CHttp_CIHttpMultipartContentFactoryVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CWeb_CHttp_CIHttpMultipartContentFactory;
#endif /* !defined(____x_ABI_CWindows_CWeb_CHttp_CIHttpMultipartContentFactory_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CWeb_CHttp_CIHttpMultipartFormDataContent_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CWeb_CHttp_CIHttpMultipartFormDataContent_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CWeb_CHttp_CIHttpMultipartFormDataContentVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CWeb_CHttp_CIHttpMultipartFormDataContent* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CWeb_CHttp_CIHttpMultipartFormDataContent* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CWeb_CHttp_CIHttpMultipartFormDataContent* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CWeb_CHttp_CIHttpMultipartFormDataContent* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CWeb_CHttp_CIHttpMultipartFormDataContent* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CWeb_CHttp_CIHttpMultipartFormDataContent* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* Add)(__x_ABI_CWindows_CWeb_CHttp_CIHttpMultipartFormDataContent* This,
        __x_ABI_CWindows_CWeb_CHttp_CIHttpContent* content);
    HRESULT (STDMETHODCALLTYPE* AddWithName)(__x_ABI_CWindows_CWeb_CHttp_CIHttpMultipartFormDataContent* This,
        __x_ABI_CWindows_CWeb_CHttp_CIHttpContent* content,
        HSTRING name);
    HRESULT (STDMETHODCALLTYPE* AddWithNameAndFileName)(__x_ABI_CWindows_CWeb_CHttp_CIHttpMultipartFormDataContent* This,
        __x_ABI_CWindows_CWeb_CHttp_CIHttpContent* content,
        HSTRING name,
        HSTRING fileName);

        END_INTERFACE
    } __x_ABI_CWindows_CWeb_CHttp_CIHttpMultipartFormDataContentVtbl;

    interface __x_ABI_CWindows_CWeb_CHttp_CIHttpMultipartFormDataContent
    {
        CONST_VTBL struct __x_ABI_CWindows_CWeb_CHttp_CIHttpMultipartFormDataContentVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CWeb_CHttp_CIHttpMultipartFormDataContent;
#endif /* !defined(____x_ABI_CWindows_CWeb_CHttp_CIHttpMultipartFormDataContent_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CWeb_CHttp_CIHttpMultipartFormDataContentFactory_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CWeb_CHttp_CIHttpMultipartFormDataContentFactory_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CWeb_CHttp_CIHttpMultipartFormDataContentFactoryVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CWeb_CHttp_CIHttpMultipartFormDataContentFactory* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CWeb_CHttp_CIHttpMultipartFormDataContentFactory* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CWeb_CHttp_CIHttpMultipartFormDataContentFactory* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CWeb_CHttp_CIHttpMultipartFormDataContentFactory* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CWeb_CHttp_CIHttpMultipartFormDataContentFactory* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CWeb_CHttp_CIHttpMultipartFormDataContentFactory* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* CreateWithBoundary)(__x_ABI_CWindows_CWeb_CHttp_CIHttpMultipartFormDataContentFactory* This,
        HSTRING boundary,
        __x_ABI_CWindows_CWeb_CHttp_CIHttpContent** value);

        END_INTERFACE
    } __x_ABI_CWindows_CWeb_CHttp_CIHttpMultipartFormDataContentFactoryVtbl;

    interface __x_ABI_CWindows_CWeb_CHttp_CIHttpMultipartFormDataContentFactory
    {
        CONST_VTBL struct __x_ABI_CWindows_CWeb_CHttp_CIHttpMultipartFormDataContentFactoryVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CWeb_CHttp_CIHttpMultipartFormDataContentFactory;
#endif /* !defined(____x_ABI_CWindows_CWeb_CHttp_CIHttpMultipartFormDataContentFactory_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CWeb_CHttp_CIHttpRequestMessage_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CWeb_CHttp_CIHttpRequestMessage_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CWeb_CHttp_CIHttpRequestMessageVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CWeb_CHttp_CIHttpRequestMessage* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CWeb_CHttp_CIHttpRequestMessage* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CWeb_CHttp_CIHttpRequestMessage* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CWeb_CHttp_CIHttpRequestMessage* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CWeb_CHttp_CIHttpRequestMessage* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CWeb_CHttp_CIHttpRequestMessage* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Content)(__x_ABI_CWindows_CWeb_CHttp_CIHttpRequestMessage* This,
        __x_ABI_CWindows_CWeb_CHttp_CIHttpContent** value);
    HRESULT (STDMETHODCALLTYPE* put_Content)(__x_ABI_CWindows_CWeb_CHttp_CIHttpRequestMessage* This,
        __x_ABI_CWindows_CWeb_CHttp_CIHttpContent* value);
    HRESULT (STDMETHODCALLTYPE* get_Headers)(__x_ABI_CWindows_CWeb_CHttp_CIHttpRequestMessage* This,
        __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpRequestHeaderCollection** value);
    HRESULT (STDMETHODCALLTYPE* get_Method)(__x_ABI_CWindows_CWeb_CHttp_CIHttpRequestMessage* This,
        __x_ABI_CWindows_CWeb_CHttp_CIHttpMethod** value);
    HRESULT (STDMETHODCALLTYPE* put_Method)(__x_ABI_CWindows_CWeb_CHttp_CIHttpRequestMessage* This,
        __x_ABI_CWindows_CWeb_CHttp_CIHttpMethod* value);
    HRESULT (STDMETHODCALLTYPE* get_Properties)(__x_ABI_CWindows_CWeb_CHttp_CIHttpRequestMessage* This,
        __x_ABI_C__FIMap_2_HSTRING_IInspectable** value);
    HRESULT (STDMETHODCALLTYPE* get_RequestUri)(__x_ABI_CWindows_CWeb_CHttp_CIHttpRequestMessage* This,
        __x_ABI_CWindows_CFoundation_CIUriRuntimeClass** value);
    HRESULT (STDMETHODCALLTYPE* put_RequestUri)(__x_ABI_CWindows_CWeb_CHttp_CIHttpRequestMessage* This,
        __x_ABI_CWindows_CFoundation_CIUriRuntimeClass* value);
    HRESULT (STDMETHODCALLTYPE* get_TransportInformation)(__x_ABI_CWindows_CWeb_CHttp_CIHttpRequestMessage* This,
        __x_ABI_CWindows_CWeb_CHttp_CIHttpTransportInformation** value);

        END_INTERFACE
    } __x_ABI_CWindows_CWeb_CHttp_CIHttpRequestMessageVtbl;

    interface __x_ABI_CWindows_CWeb_CHttp_CIHttpRequestMessage
    {
        CONST_VTBL struct __x_ABI_CWindows_CWeb_CHttp_CIHttpRequestMessageVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CWeb_CHttp_CIHttpRequestMessage;
#endif /* !defined(____x_ABI_CWindows_CWeb_CHttp_CIHttpRequestMessage_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CWeb_CHttp_CIHttpRequestMessageFactory_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CWeb_CHttp_CIHttpRequestMessageFactory_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CWeb_CHttp_CIHttpRequestMessageFactoryVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CWeb_CHttp_CIHttpRequestMessageFactory* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CWeb_CHttp_CIHttpRequestMessageFactory* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CWeb_CHttp_CIHttpRequestMessageFactory* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CWeb_CHttp_CIHttpRequestMessageFactory* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CWeb_CHttp_CIHttpRequestMessageFactory* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CWeb_CHttp_CIHttpRequestMessageFactory* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* Create)(__x_ABI_CWindows_CWeb_CHttp_CIHttpRequestMessageFactory* This,
        __x_ABI_CWindows_CWeb_CHttp_CIHttpMethod* method,
        __x_ABI_CWindows_CFoundation_CIUriRuntimeClass* uri,
        __x_ABI_CWindows_CWeb_CHttp_CIHttpRequestMessage** value);

        END_INTERFACE
    } __x_ABI_CWindows_CWeb_CHttp_CIHttpRequestMessageFactoryVtbl;

    interface __x_ABI_CWindows_CWeb_CHttp_CIHttpRequestMessageFactory
    {
        CONST_VTBL struct __x_ABI_CWindows_CWeb_CHttp_CIHttpRequestMessageFactoryVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CWeb_CHttp_CIHttpRequestMessageFactory;
#endif /* !defined(____x_ABI_CWindows_CWeb_CHttp_CIHttpRequestMessageFactory_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CWeb_CHttp_CIHttpRequestResult_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CWeb_CHttp_CIHttpRequestResult_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CWeb_CHttp_CIHttpRequestResultVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CWeb_CHttp_CIHttpRequestResult* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CWeb_CHttp_CIHttpRequestResult* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CWeb_CHttp_CIHttpRequestResult* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CWeb_CHttp_CIHttpRequestResult* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CWeb_CHttp_CIHttpRequestResult* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CWeb_CHttp_CIHttpRequestResult* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_ExtendedError)(__x_ABI_CWindows_CWeb_CHttp_CIHttpRequestResult* This,
        HRESULT* value);
    HRESULT (STDMETHODCALLTYPE* get_RequestMessage)(__x_ABI_CWindows_CWeb_CHttp_CIHttpRequestResult* This,
        __x_ABI_CWindows_CWeb_CHttp_CIHttpRequestMessage** value);
    HRESULT (STDMETHODCALLTYPE* get_ResponseMessage)(__x_ABI_CWindows_CWeb_CHttp_CIHttpRequestResult* This,
        __x_ABI_CWindows_CWeb_CHttp_CIHttpResponseMessage** value);
    HRESULT (STDMETHODCALLTYPE* get_Succeeded)(__x_ABI_CWindows_CWeb_CHttp_CIHttpRequestResult* This,
        boolean* value);

        END_INTERFACE
    } __x_ABI_CWindows_CWeb_CHttp_CIHttpRequestResultVtbl;

    interface __x_ABI_CWindows_CWeb_CHttp_CIHttpRequestResult
    {
        CONST_VTBL struct __x_ABI_CWindows_CWeb_CHttp_CIHttpRequestResultVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CWeb_CHttp_CIHttpRequestResult;
#endif /* !defined(____x_ABI_CWindows_CWeb_CHttp_CIHttpRequestResult_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CWeb_CHttp_CIHttpResponseMessage_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CWeb_CHttp_CIHttpResponseMessage_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CWeb_CHttp_CIHttpResponseMessageVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CWeb_CHttp_CIHttpResponseMessage* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CWeb_CHttp_CIHttpResponseMessage* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CWeb_CHttp_CIHttpResponseMessage* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CWeb_CHttp_CIHttpResponseMessage* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CWeb_CHttp_CIHttpResponseMessage* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CWeb_CHttp_CIHttpResponseMessage* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Content)(__x_ABI_CWindows_CWeb_CHttp_CIHttpResponseMessage* This,
        __x_ABI_CWindows_CWeb_CHttp_CIHttpContent** value);
    HRESULT (STDMETHODCALLTYPE* put_Content)(__x_ABI_CWindows_CWeb_CHttp_CIHttpResponseMessage* This,
        __x_ABI_CWindows_CWeb_CHttp_CIHttpContent* value);
    HRESULT (STDMETHODCALLTYPE* get_Headers)(__x_ABI_CWindows_CWeb_CHttp_CIHttpResponseMessage* This,
        __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpResponseHeaderCollection** value);
    HRESULT (STDMETHODCALLTYPE* get_IsSuccessStatusCode)(__x_ABI_CWindows_CWeb_CHttp_CIHttpResponseMessage* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* get_ReasonPhrase)(__x_ABI_CWindows_CWeb_CHttp_CIHttpResponseMessage* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* put_ReasonPhrase)(__x_ABI_CWindows_CWeb_CHttp_CIHttpResponseMessage* This,
        HSTRING value);
    HRESULT (STDMETHODCALLTYPE* get_RequestMessage)(__x_ABI_CWindows_CWeb_CHttp_CIHttpResponseMessage* This,
        __x_ABI_CWindows_CWeb_CHttp_CIHttpRequestMessage** value);
    HRESULT (STDMETHODCALLTYPE* put_RequestMessage)(__x_ABI_CWindows_CWeb_CHttp_CIHttpResponseMessage* This,
        __x_ABI_CWindows_CWeb_CHttp_CIHttpRequestMessage* value);
    HRESULT (STDMETHODCALLTYPE* get_Source)(__x_ABI_CWindows_CWeb_CHttp_CIHttpResponseMessage* This,
        enum __x_ABI_CWindows_CWeb_CHttp_CHttpResponseMessageSource* value);
    HRESULT (STDMETHODCALLTYPE* put_Source)(__x_ABI_CWindows_CWeb_CHttp_CIHttpResponseMessage* This,
        enum __x_ABI_CWindows_CWeb_CHttp_CHttpResponseMessageSource value);
    HRESULT (STDMETHODCALLTYPE* get_StatusCode)(__x_ABI_CWindows_CWeb_CHttp_CIHttpResponseMessage* This,
        enum __x_ABI_CWindows_CWeb_CHttp_CHttpStatusCode* value);
    HRESULT (STDMETHODCALLTYPE* put_StatusCode)(__x_ABI_CWindows_CWeb_CHttp_CIHttpResponseMessage* This,
        enum __x_ABI_CWindows_CWeb_CHttp_CHttpStatusCode value);
    HRESULT (STDMETHODCALLTYPE* get_Version)(__x_ABI_CWindows_CWeb_CHttp_CIHttpResponseMessage* This,
        enum __x_ABI_CWindows_CWeb_CHttp_CHttpVersion* value);
    HRESULT (STDMETHODCALLTYPE* put_Version)(__x_ABI_CWindows_CWeb_CHttp_CIHttpResponseMessage* This,
        enum __x_ABI_CWindows_CWeb_CHttp_CHttpVersion value);
    HRESULT (STDMETHODCALLTYPE* EnsureSuccessStatusCode)(__x_ABI_CWindows_CWeb_CHttp_CIHttpResponseMessage* This,
        __x_ABI_CWindows_CWeb_CHttp_CIHttpResponseMessage** result);

        END_INTERFACE
    } __x_ABI_CWindows_CWeb_CHttp_CIHttpResponseMessageVtbl;

    interface __x_ABI_CWindows_CWeb_CHttp_CIHttpResponseMessage
    {
        CONST_VTBL struct __x_ABI_CWindows_CWeb_CHttp_CIHttpResponseMessageVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CWeb_CHttp_CIHttpResponseMessage;
#endif /* !defined(____x_ABI_CWindows_CWeb_CHttp_CIHttpResponseMessage_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CWeb_CHttp_CIHttpResponseMessageFactory_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CWeb_CHttp_CIHttpResponseMessageFactory_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CWeb_CHttp_CIHttpResponseMessageFactoryVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CWeb_CHttp_CIHttpResponseMessageFactory* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CWeb_CHttp_CIHttpResponseMessageFactory* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CWeb_CHttp_CIHttpResponseMessageFactory* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CWeb_CHttp_CIHttpResponseMessageFactory* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CWeb_CHttp_CIHttpResponseMessageFactory* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CWeb_CHttp_CIHttpResponseMessageFactory* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* Create)(__x_ABI_CWindows_CWeb_CHttp_CIHttpResponseMessageFactory* This,
        enum __x_ABI_CWindows_CWeb_CHttp_CHttpStatusCode statusCode,
        __x_ABI_CWindows_CWeb_CHttp_CIHttpResponseMessage** value);

        END_INTERFACE
    } __x_ABI_CWindows_CWeb_CHttp_CIHttpResponseMessageFactoryVtbl;

    interface __x_ABI_CWindows_CWeb_CHttp_CIHttpResponseMessageFactory
    {
        CONST_VTBL struct __x_ABI_CWindows_CWeb_CHttp_CIHttpResponseMessageFactoryVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CWeb_CHttp_CIHttpResponseMessageFactory;
#endif /* !defined(____x_ABI_CWindows_CWeb_CHttp_CIHttpResponseMessageFactory_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CWeb_CHttp_CIHttpStreamContentFactory_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CWeb_CHttp_CIHttpStreamContentFactory_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CWeb_CHttp_CIHttpStreamContentFactoryVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CWeb_CHttp_CIHttpStreamContentFactory* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CWeb_CHttp_CIHttpStreamContentFactory* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CWeb_CHttp_CIHttpStreamContentFactory* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CWeb_CHttp_CIHttpStreamContentFactory* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CWeb_CHttp_CIHttpStreamContentFactory* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CWeb_CHttp_CIHttpStreamContentFactory* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* CreateFromInputStream)(__x_ABI_CWindows_CWeb_CHttp_CIHttpStreamContentFactory* This,
        __x_ABI_CWindows_CStorage_CStreams_CIInputStream* content,
        __x_ABI_CWindows_CWeb_CHttp_CIHttpContent** value);

        END_INTERFACE
    } __x_ABI_CWindows_CWeb_CHttp_CIHttpStreamContentFactoryVtbl;

    interface __x_ABI_CWindows_CWeb_CHttp_CIHttpStreamContentFactory
    {
        CONST_VTBL struct __x_ABI_CWindows_CWeb_CHttp_CIHttpStreamContentFactoryVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CWeb_CHttp_CIHttpStreamContentFactory;
#endif /* !defined(____x_ABI_CWindows_CWeb_CHttp_CIHttpStreamContentFactory_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CWeb_CHttp_CIHttpStringContentFactory_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CWeb_CHttp_CIHttpStringContentFactory_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CWeb_CHttp_CIHttpStringContentFactoryVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CWeb_CHttp_CIHttpStringContentFactory* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CWeb_CHttp_CIHttpStringContentFactory* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CWeb_CHttp_CIHttpStringContentFactory* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CWeb_CHttp_CIHttpStringContentFactory* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CWeb_CHttp_CIHttpStringContentFactory* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CWeb_CHttp_CIHttpStringContentFactory* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* CreateFromString)(__x_ABI_CWindows_CWeb_CHttp_CIHttpStringContentFactory* This,
        HSTRING content,
        __x_ABI_CWindows_CWeb_CHttp_CIHttpContent** value);
    HRESULT (STDMETHODCALLTYPE* CreateFromStringWithEncoding)(__x_ABI_CWindows_CWeb_CHttp_CIHttpStringContentFactory* This,
        HSTRING content,
        enum __x_ABI_CWindows_CStorage_CStreams_CUnicodeEncoding encoding,
        __x_ABI_CWindows_CWeb_CHttp_CIHttpContent** value);
    HRESULT (STDMETHODCALLTYPE* CreateFromStringWithEncodingAndMediaType)(__x_ABI_CWindows_CWeb_CHttp_CIHttpStringContentFactory* This,
        HSTRING content,
        enum __x_ABI_CWindows_CStorage_CStreams_CUnicodeEncoding encoding,
        HSTRING mediaType,
        __x_ABI_CWindows_CWeb_CHttp_CIHttpContent** value);

        END_INTERFACE
    } __x_ABI_CWindows_CWeb_CHttp_CIHttpStringContentFactoryVtbl;

    interface __x_ABI_CWindows_CWeb_CHttp_CIHttpStringContentFactory
    {
        CONST_VTBL struct __x_ABI_CWindows_CWeb_CHttp_CIHttpStringContentFactoryVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CWeb_CHttp_CIHttpStringContentFactory;
#endif /* !defined(____x_ABI_CWindows_CWeb_CHttp_CIHttpStringContentFactory_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CWeb_CHttp_CIHttpTransportInformation_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CWeb_CHttp_CIHttpTransportInformation_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CWeb_CHttp_CIHttpTransportInformationVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CWeb_CHttp_CIHttpTransportInformation* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CWeb_CHttp_CIHttpTransportInformation* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CWeb_CHttp_CIHttpTransportInformation* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CWeb_CHttp_CIHttpTransportInformation* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CWeb_CHttp_CIHttpTransportInformation* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CWeb_CHttp_CIHttpTransportInformation* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_ServerCertificate)(__x_ABI_CWindows_CWeb_CHttp_CIHttpTransportInformation* This,
        __x_ABI_CWindows_CSecurity_CCryptography_CCertificates_CICertificate** value);
    HRESULT (STDMETHODCALLTYPE* get_ServerCertificateErrorSeverity)(__x_ABI_CWindows_CWeb_CHttp_CIHttpTransportInformation* This,
        enum __x_ABI_CWindows_CNetworking_CSockets_CSocketSslErrorSeverity* value);
    HRESULT (STDMETHODCALLTYPE* get_ServerCertificateErrors)(__x_ABI_CWindows_CWeb_CHttp_CIHttpTransportInformation* This,
        __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSecurity__CCryptography__CCertificates__CChainValidationResult** value);
    HRESULT (STDMETHODCALLTYPE* get_ServerIntermediateCertificates)(__x_ABI_CWindows_CWeb_CHttp_CIHttpTransportInformation* This,
        __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSecurity__CCryptography__CCertificates__CCertificate** value);

        END_INTERFACE
    } __x_ABI_CWindows_CWeb_CHttp_CIHttpTransportInformationVtbl;

    interface __x_ABI_CWindows_CWeb_CHttp_CIHttpTransportInformation
    {
        CONST_VTBL struct __x_ABI_CWindows_CWeb_CHttp_CIHttpTransportInformationVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CWeb_CHttp_CIHttpTransportInformation;
#endif /* !defined(____x_ABI_CWindows_CWeb_CHttp_CIHttpTransportInformation_INTERFACE_DEFINED__) */
    

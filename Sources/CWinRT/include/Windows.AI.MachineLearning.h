// WARNING: Please don't edit this file. It was generated by Swift/WinRT v0.0.1

#pragma once
// Header files for imported files
#include <inspectable.h>
#include <EventToken.h>
#include <windowscontracts.h>
#include "Windows.Foundation.h"
#include "Windows.Graphics.h"
#include "Windows.Graphics.DirectX.Direct3D11.h"
#include "Windows.Graphics.Imaging.h"
#include "Windows.Media.h"
#include "Windows.Storage.h"
#include "Windows.Storage.Streams.h"
// Importing Collections header
#include "Windows.Foundation.Collections.h"

/* Forward Declarations */
#ifndef ____x_ABI_CWindows_CAI_CMachineLearning_CIImageFeatureDescriptor_FWD_DEFINED__
#define ____x_ABI_CWindows_CAI_CMachineLearning_CIImageFeatureDescriptor_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CAI_CMachineLearning_CIImageFeatureDescriptor __x_ABI_CWindows_CAI_CMachineLearning_CIImageFeatureDescriptor;

#endif // ____x_ABI_CWindows_CAI_CMachineLearning_CIImageFeatureDescriptor_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CAI_CMachineLearning_CIImageFeatureValue_FWD_DEFINED__
#define ____x_ABI_CWindows_CAI_CMachineLearning_CIImageFeatureValue_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CAI_CMachineLearning_CIImageFeatureValue __x_ABI_CWindows_CAI_CMachineLearning_CIImageFeatureValue;

#endif // ____x_ABI_CWindows_CAI_CMachineLearning_CIImageFeatureValue_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CAI_CMachineLearning_CIImageFeatureValueStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CAI_CMachineLearning_CIImageFeatureValueStatics_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CAI_CMachineLearning_CIImageFeatureValueStatics __x_ABI_CWindows_CAI_CMachineLearning_CIImageFeatureValueStatics;

#endif // ____x_ABI_CWindows_CAI_CMachineLearning_CIImageFeatureValueStatics_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CAI_CMachineLearning_CILearningModel_FWD_DEFINED__
#define ____x_ABI_CWindows_CAI_CMachineLearning_CILearningModel_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CAI_CMachineLearning_CILearningModel __x_ABI_CWindows_CAI_CMachineLearning_CILearningModel;

#endif // ____x_ABI_CWindows_CAI_CMachineLearning_CILearningModel_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CAI_CMachineLearning_CILearningModelBinding_FWD_DEFINED__
#define ____x_ABI_CWindows_CAI_CMachineLearning_CILearningModelBinding_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CAI_CMachineLearning_CILearningModelBinding __x_ABI_CWindows_CAI_CMachineLearning_CILearningModelBinding;

#endif // ____x_ABI_CWindows_CAI_CMachineLearning_CILearningModelBinding_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CAI_CMachineLearning_CILearningModelBindingFactory_FWD_DEFINED__
#define ____x_ABI_CWindows_CAI_CMachineLearning_CILearningModelBindingFactory_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CAI_CMachineLearning_CILearningModelBindingFactory __x_ABI_CWindows_CAI_CMachineLearning_CILearningModelBindingFactory;

#endif // ____x_ABI_CWindows_CAI_CMachineLearning_CILearningModelBindingFactory_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CAI_CMachineLearning_CILearningModelDevice_FWD_DEFINED__
#define ____x_ABI_CWindows_CAI_CMachineLearning_CILearningModelDevice_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CAI_CMachineLearning_CILearningModelDevice __x_ABI_CWindows_CAI_CMachineLearning_CILearningModelDevice;

#endif // ____x_ABI_CWindows_CAI_CMachineLearning_CILearningModelDevice_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CAI_CMachineLearning_CILearningModelDeviceFactory_FWD_DEFINED__
#define ____x_ABI_CWindows_CAI_CMachineLearning_CILearningModelDeviceFactory_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CAI_CMachineLearning_CILearningModelDeviceFactory __x_ABI_CWindows_CAI_CMachineLearning_CILearningModelDeviceFactory;

#endif // ____x_ABI_CWindows_CAI_CMachineLearning_CILearningModelDeviceFactory_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CAI_CMachineLearning_CILearningModelDeviceStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CAI_CMachineLearning_CILearningModelDeviceStatics_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CAI_CMachineLearning_CILearningModelDeviceStatics __x_ABI_CWindows_CAI_CMachineLearning_CILearningModelDeviceStatics;

#endif // ____x_ABI_CWindows_CAI_CMachineLearning_CILearningModelDeviceStatics_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CAI_CMachineLearning_CILearningModelEvaluationResult_FWD_DEFINED__
#define ____x_ABI_CWindows_CAI_CMachineLearning_CILearningModelEvaluationResult_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CAI_CMachineLearning_CILearningModelEvaluationResult __x_ABI_CWindows_CAI_CMachineLearning_CILearningModelEvaluationResult;

#endif // ____x_ABI_CWindows_CAI_CMachineLearning_CILearningModelEvaluationResult_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CAI_CMachineLearning_CILearningModelFeatureDescriptor_FWD_DEFINED__
#define ____x_ABI_CWindows_CAI_CMachineLearning_CILearningModelFeatureDescriptor_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CAI_CMachineLearning_CILearningModelFeatureDescriptor __x_ABI_CWindows_CAI_CMachineLearning_CILearningModelFeatureDescriptor;

#endif // ____x_ABI_CWindows_CAI_CMachineLearning_CILearningModelFeatureDescriptor_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CAI_CMachineLearning_CILearningModelFeatureValue_FWD_DEFINED__
#define ____x_ABI_CWindows_CAI_CMachineLearning_CILearningModelFeatureValue_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CAI_CMachineLearning_CILearningModelFeatureValue __x_ABI_CWindows_CAI_CMachineLearning_CILearningModelFeatureValue;

#endif // ____x_ABI_CWindows_CAI_CMachineLearning_CILearningModelFeatureValue_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CAI_CMachineLearning_CILearningModelOperatorProvider_FWD_DEFINED__
#define ____x_ABI_CWindows_CAI_CMachineLearning_CILearningModelOperatorProvider_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CAI_CMachineLearning_CILearningModelOperatorProvider __x_ABI_CWindows_CAI_CMachineLearning_CILearningModelOperatorProvider;

#endif // ____x_ABI_CWindows_CAI_CMachineLearning_CILearningModelOperatorProvider_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CAI_CMachineLearning_CILearningModelSession_FWD_DEFINED__
#define ____x_ABI_CWindows_CAI_CMachineLearning_CILearningModelSession_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CAI_CMachineLearning_CILearningModelSession __x_ABI_CWindows_CAI_CMachineLearning_CILearningModelSession;

#endif // ____x_ABI_CWindows_CAI_CMachineLearning_CILearningModelSession_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CAI_CMachineLearning_CILearningModelSessionFactory_FWD_DEFINED__
#define ____x_ABI_CWindows_CAI_CMachineLearning_CILearningModelSessionFactory_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CAI_CMachineLearning_CILearningModelSessionFactory __x_ABI_CWindows_CAI_CMachineLearning_CILearningModelSessionFactory;

#endif // ____x_ABI_CWindows_CAI_CMachineLearning_CILearningModelSessionFactory_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CAI_CMachineLearning_CILearningModelSessionFactory2_FWD_DEFINED__
#define ____x_ABI_CWindows_CAI_CMachineLearning_CILearningModelSessionFactory2_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CAI_CMachineLearning_CILearningModelSessionFactory2 __x_ABI_CWindows_CAI_CMachineLearning_CILearningModelSessionFactory2;

#endif // ____x_ABI_CWindows_CAI_CMachineLearning_CILearningModelSessionFactory2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CAI_CMachineLearning_CILearningModelSessionOptions_FWD_DEFINED__
#define ____x_ABI_CWindows_CAI_CMachineLearning_CILearningModelSessionOptions_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CAI_CMachineLearning_CILearningModelSessionOptions __x_ABI_CWindows_CAI_CMachineLearning_CILearningModelSessionOptions;

#endif // ____x_ABI_CWindows_CAI_CMachineLearning_CILearningModelSessionOptions_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CAI_CMachineLearning_CILearningModelStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CAI_CMachineLearning_CILearningModelStatics_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CAI_CMachineLearning_CILearningModelStatics __x_ABI_CWindows_CAI_CMachineLearning_CILearningModelStatics;

#endif // ____x_ABI_CWindows_CAI_CMachineLearning_CILearningModelStatics_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CAI_CMachineLearning_CIMapFeatureDescriptor_FWD_DEFINED__
#define ____x_ABI_CWindows_CAI_CMachineLearning_CIMapFeatureDescriptor_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CAI_CMachineLearning_CIMapFeatureDescriptor __x_ABI_CWindows_CAI_CMachineLearning_CIMapFeatureDescriptor;

#endif // ____x_ABI_CWindows_CAI_CMachineLearning_CIMapFeatureDescriptor_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CAI_CMachineLearning_CISequenceFeatureDescriptor_FWD_DEFINED__
#define ____x_ABI_CWindows_CAI_CMachineLearning_CISequenceFeatureDescriptor_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CAI_CMachineLearning_CISequenceFeatureDescriptor __x_ABI_CWindows_CAI_CMachineLearning_CISequenceFeatureDescriptor;

#endif // ____x_ABI_CWindows_CAI_CMachineLearning_CISequenceFeatureDescriptor_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CAI_CMachineLearning_CITensor_FWD_DEFINED__
#define ____x_ABI_CWindows_CAI_CMachineLearning_CITensor_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CAI_CMachineLearning_CITensor __x_ABI_CWindows_CAI_CMachineLearning_CITensor;

#endif // ____x_ABI_CWindows_CAI_CMachineLearning_CITensor_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CAI_CMachineLearning_CITensorBoolean_FWD_DEFINED__
#define ____x_ABI_CWindows_CAI_CMachineLearning_CITensorBoolean_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CAI_CMachineLearning_CITensorBoolean __x_ABI_CWindows_CAI_CMachineLearning_CITensorBoolean;

#endif // ____x_ABI_CWindows_CAI_CMachineLearning_CITensorBoolean_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CAI_CMachineLearning_CITensorBooleanStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CAI_CMachineLearning_CITensorBooleanStatics_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CAI_CMachineLearning_CITensorBooleanStatics __x_ABI_CWindows_CAI_CMachineLearning_CITensorBooleanStatics;

#endif // ____x_ABI_CWindows_CAI_CMachineLearning_CITensorBooleanStatics_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CAI_CMachineLearning_CITensorBooleanStatics2_FWD_DEFINED__
#define ____x_ABI_CWindows_CAI_CMachineLearning_CITensorBooleanStatics2_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CAI_CMachineLearning_CITensorBooleanStatics2 __x_ABI_CWindows_CAI_CMachineLearning_CITensorBooleanStatics2;

#endif // ____x_ABI_CWindows_CAI_CMachineLearning_CITensorBooleanStatics2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CAI_CMachineLearning_CITensorDouble_FWD_DEFINED__
#define ____x_ABI_CWindows_CAI_CMachineLearning_CITensorDouble_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CAI_CMachineLearning_CITensorDouble __x_ABI_CWindows_CAI_CMachineLearning_CITensorDouble;

#endif // ____x_ABI_CWindows_CAI_CMachineLearning_CITensorDouble_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CAI_CMachineLearning_CITensorDoubleStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CAI_CMachineLearning_CITensorDoubleStatics_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CAI_CMachineLearning_CITensorDoubleStatics __x_ABI_CWindows_CAI_CMachineLearning_CITensorDoubleStatics;

#endif // ____x_ABI_CWindows_CAI_CMachineLearning_CITensorDoubleStatics_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CAI_CMachineLearning_CITensorDoubleStatics2_FWD_DEFINED__
#define ____x_ABI_CWindows_CAI_CMachineLearning_CITensorDoubleStatics2_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CAI_CMachineLearning_CITensorDoubleStatics2 __x_ABI_CWindows_CAI_CMachineLearning_CITensorDoubleStatics2;

#endif // ____x_ABI_CWindows_CAI_CMachineLearning_CITensorDoubleStatics2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CAI_CMachineLearning_CITensorFeatureDescriptor_FWD_DEFINED__
#define ____x_ABI_CWindows_CAI_CMachineLearning_CITensorFeatureDescriptor_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CAI_CMachineLearning_CITensorFeatureDescriptor __x_ABI_CWindows_CAI_CMachineLearning_CITensorFeatureDescriptor;

#endif // ____x_ABI_CWindows_CAI_CMachineLearning_CITensorFeatureDescriptor_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CAI_CMachineLearning_CITensorFloat_FWD_DEFINED__
#define ____x_ABI_CWindows_CAI_CMachineLearning_CITensorFloat_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CAI_CMachineLearning_CITensorFloat __x_ABI_CWindows_CAI_CMachineLearning_CITensorFloat;

#endif // ____x_ABI_CWindows_CAI_CMachineLearning_CITensorFloat_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CAI_CMachineLearning_CITensorFloat16Bit_FWD_DEFINED__
#define ____x_ABI_CWindows_CAI_CMachineLearning_CITensorFloat16Bit_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CAI_CMachineLearning_CITensorFloat16Bit __x_ABI_CWindows_CAI_CMachineLearning_CITensorFloat16Bit;

#endif // ____x_ABI_CWindows_CAI_CMachineLearning_CITensorFloat16Bit_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CAI_CMachineLearning_CITensorFloat16BitStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CAI_CMachineLearning_CITensorFloat16BitStatics_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CAI_CMachineLearning_CITensorFloat16BitStatics __x_ABI_CWindows_CAI_CMachineLearning_CITensorFloat16BitStatics;

#endif // ____x_ABI_CWindows_CAI_CMachineLearning_CITensorFloat16BitStatics_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CAI_CMachineLearning_CITensorFloat16BitStatics2_FWD_DEFINED__
#define ____x_ABI_CWindows_CAI_CMachineLearning_CITensorFloat16BitStatics2_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CAI_CMachineLearning_CITensorFloat16BitStatics2 __x_ABI_CWindows_CAI_CMachineLearning_CITensorFloat16BitStatics2;

#endif // ____x_ABI_CWindows_CAI_CMachineLearning_CITensorFloat16BitStatics2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CAI_CMachineLearning_CITensorFloatStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CAI_CMachineLearning_CITensorFloatStatics_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CAI_CMachineLearning_CITensorFloatStatics __x_ABI_CWindows_CAI_CMachineLearning_CITensorFloatStatics;

#endif // ____x_ABI_CWindows_CAI_CMachineLearning_CITensorFloatStatics_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CAI_CMachineLearning_CITensorFloatStatics2_FWD_DEFINED__
#define ____x_ABI_CWindows_CAI_CMachineLearning_CITensorFloatStatics2_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CAI_CMachineLearning_CITensorFloatStatics2 __x_ABI_CWindows_CAI_CMachineLearning_CITensorFloatStatics2;

#endif // ____x_ABI_CWindows_CAI_CMachineLearning_CITensorFloatStatics2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CAI_CMachineLearning_CITensorInt16Bit_FWD_DEFINED__
#define ____x_ABI_CWindows_CAI_CMachineLearning_CITensorInt16Bit_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CAI_CMachineLearning_CITensorInt16Bit __x_ABI_CWindows_CAI_CMachineLearning_CITensorInt16Bit;

#endif // ____x_ABI_CWindows_CAI_CMachineLearning_CITensorInt16Bit_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CAI_CMachineLearning_CITensorInt16BitStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CAI_CMachineLearning_CITensorInt16BitStatics_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CAI_CMachineLearning_CITensorInt16BitStatics __x_ABI_CWindows_CAI_CMachineLearning_CITensorInt16BitStatics;

#endif // ____x_ABI_CWindows_CAI_CMachineLearning_CITensorInt16BitStatics_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CAI_CMachineLearning_CITensorInt16BitStatics2_FWD_DEFINED__
#define ____x_ABI_CWindows_CAI_CMachineLearning_CITensorInt16BitStatics2_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CAI_CMachineLearning_CITensorInt16BitStatics2 __x_ABI_CWindows_CAI_CMachineLearning_CITensorInt16BitStatics2;

#endif // ____x_ABI_CWindows_CAI_CMachineLearning_CITensorInt16BitStatics2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CAI_CMachineLearning_CITensorInt32Bit_FWD_DEFINED__
#define ____x_ABI_CWindows_CAI_CMachineLearning_CITensorInt32Bit_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CAI_CMachineLearning_CITensorInt32Bit __x_ABI_CWindows_CAI_CMachineLearning_CITensorInt32Bit;

#endif // ____x_ABI_CWindows_CAI_CMachineLearning_CITensorInt32Bit_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CAI_CMachineLearning_CITensorInt32BitStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CAI_CMachineLearning_CITensorInt32BitStatics_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CAI_CMachineLearning_CITensorInt32BitStatics __x_ABI_CWindows_CAI_CMachineLearning_CITensorInt32BitStatics;

#endif // ____x_ABI_CWindows_CAI_CMachineLearning_CITensorInt32BitStatics_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CAI_CMachineLearning_CITensorInt32BitStatics2_FWD_DEFINED__
#define ____x_ABI_CWindows_CAI_CMachineLearning_CITensorInt32BitStatics2_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CAI_CMachineLearning_CITensorInt32BitStatics2 __x_ABI_CWindows_CAI_CMachineLearning_CITensorInt32BitStatics2;

#endif // ____x_ABI_CWindows_CAI_CMachineLearning_CITensorInt32BitStatics2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CAI_CMachineLearning_CITensorInt64Bit_FWD_DEFINED__
#define ____x_ABI_CWindows_CAI_CMachineLearning_CITensorInt64Bit_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CAI_CMachineLearning_CITensorInt64Bit __x_ABI_CWindows_CAI_CMachineLearning_CITensorInt64Bit;

#endif // ____x_ABI_CWindows_CAI_CMachineLearning_CITensorInt64Bit_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CAI_CMachineLearning_CITensorInt64BitStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CAI_CMachineLearning_CITensorInt64BitStatics_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CAI_CMachineLearning_CITensorInt64BitStatics __x_ABI_CWindows_CAI_CMachineLearning_CITensorInt64BitStatics;

#endif // ____x_ABI_CWindows_CAI_CMachineLearning_CITensorInt64BitStatics_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CAI_CMachineLearning_CITensorInt64BitStatics2_FWD_DEFINED__
#define ____x_ABI_CWindows_CAI_CMachineLearning_CITensorInt64BitStatics2_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CAI_CMachineLearning_CITensorInt64BitStatics2 __x_ABI_CWindows_CAI_CMachineLearning_CITensorInt64BitStatics2;

#endif // ____x_ABI_CWindows_CAI_CMachineLearning_CITensorInt64BitStatics2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CAI_CMachineLearning_CITensorInt8Bit_FWD_DEFINED__
#define ____x_ABI_CWindows_CAI_CMachineLearning_CITensorInt8Bit_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CAI_CMachineLearning_CITensorInt8Bit __x_ABI_CWindows_CAI_CMachineLearning_CITensorInt8Bit;

#endif // ____x_ABI_CWindows_CAI_CMachineLearning_CITensorInt8Bit_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CAI_CMachineLearning_CITensorInt8BitStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CAI_CMachineLearning_CITensorInt8BitStatics_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CAI_CMachineLearning_CITensorInt8BitStatics __x_ABI_CWindows_CAI_CMachineLearning_CITensorInt8BitStatics;

#endif // ____x_ABI_CWindows_CAI_CMachineLearning_CITensorInt8BitStatics_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CAI_CMachineLearning_CITensorInt8BitStatics2_FWD_DEFINED__
#define ____x_ABI_CWindows_CAI_CMachineLearning_CITensorInt8BitStatics2_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CAI_CMachineLearning_CITensorInt8BitStatics2 __x_ABI_CWindows_CAI_CMachineLearning_CITensorInt8BitStatics2;

#endif // ____x_ABI_CWindows_CAI_CMachineLearning_CITensorInt8BitStatics2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CAI_CMachineLearning_CITensorString_FWD_DEFINED__
#define ____x_ABI_CWindows_CAI_CMachineLearning_CITensorString_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CAI_CMachineLearning_CITensorString __x_ABI_CWindows_CAI_CMachineLearning_CITensorString;

#endif // ____x_ABI_CWindows_CAI_CMachineLearning_CITensorString_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CAI_CMachineLearning_CITensorStringStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CAI_CMachineLearning_CITensorStringStatics_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CAI_CMachineLearning_CITensorStringStatics __x_ABI_CWindows_CAI_CMachineLearning_CITensorStringStatics;

#endif // ____x_ABI_CWindows_CAI_CMachineLearning_CITensorStringStatics_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CAI_CMachineLearning_CITensorStringStatics2_FWD_DEFINED__
#define ____x_ABI_CWindows_CAI_CMachineLearning_CITensorStringStatics2_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CAI_CMachineLearning_CITensorStringStatics2 __x_ABI_CWindows_CAI_CMachineLearning_CITensorStringStatics2;

#endif // ____x_ABI_CWindows_CAI_CMachineLearning_CITensorStringStatics2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CAI_CMachineLearning_CITensorUInt16Bit_FWD_DEFINED__
#define ____x_ABI_CWindows_CAI_CMachineLearning_CITensorUInt16Bit_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CAI_CMachineLearning_CITensorUInt16Bit __x_ABI_CWindows_CAI_CMachineLearning_CITensorUInt16Bit;

#endif // ____x_ABI_CWindows_CAI_CMachineLearning_CITensorUInt16Bit_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CAI_CMachineLearning_CITensorUInt16BitStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CAI_CMachineLearning_CITensorUInt16BitStatics_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CAI_CMachineLearning_CITensorUInt16BitStatics __x_ABI_CWindows_CAI_CMachineLearning_CITensorUInt16BitStatics;

#endif // ____x_ABI_CWindows_CAI_CMachineLearning_CITensorUInt16BitStatics_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CAI_CMachineLearning_CITensorUInt16BitStatics2_FWD_DEFINED__
#define ____x_ABI_CWindows_CAI_CMachineLearning_CITensorUInt16BitStatics2_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CAI_CMachineLearning_CITensorUInt16BitStatics2 __x_ABI_CWindows_CAI_CMachineLearning_CITensorUInt16BitStatics2;

#endif // ____x_ABI_CWindows_CAI_CMachineLearning_CITensorUInt16BitStatics2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CAI_CMachineLearning_CITensorUInt32Bit_FWD_DEFINED__
#define ____x_ABI_CWindows_CAI_CMachineLearning_CITensorUInt32Bit_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CAI_CMachineLearning_CITensorUInt32Bit __x_ABI_CWindows_CAI_CMachineLearning_CITensorUInt32Bit;

#endif // ____x_ABI_CWindows_CAI_CMachineLearning_CITensorUInt32Bit_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CAI_CMachineLearning_CITensorUInt32BitStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CAI_CMachineLearning_CITensorUInt32BitStatics_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CAI_CMachineLearning_CITensorUInt32BitStatics __x_ABI_CWindows_CAI_CMachineLearning_CITensorUInt32BitStatics;

#endif // ____x_ABI_CWindows_CAI_CMachineLearning_CITensorUInt32BitStatics_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CAI_CMachineLearning_CITensorUInt32BitStatics2_FWD_DEFINED__
#define ____x_ABI_CWindows_CAI_CMachineLearning_CITensorUInt32BitStatics2_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CAI_CMachineLearning_CITensorUInt32BitStatics2 __x_ABI_CWindows_CAI_CMachineLearning_CITensorUInt32BitStatics2;

#endif // ____x_ABI_CWindows_CAI_CMachineLearning_CITensorUInt32BitStatics2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CAI_CMachineLearning_CITensorUInt64Bit_FWD_DEFINED__
#define ____x_ABI_CWindows_CAI_CMachineLearning_CITensorUInt64Bit_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CAI_CMachineLearning_CITensorUInt64Bit __x_ABI_CWindows_CAI_CMachineLearning_CITensorUInt64Bit;

#endif // ____x_ABI_CWindows_CAI_CMachineLearning_CITensorUInt64Bit_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CAI_CMachineLearning_CITensorUInt64BitStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CAI_CMachineLearning_CITensorUInt64BitStatics_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CAI_CMachineLearning_CITensorUInt64BitStatics __x_ABI_CWindows_CAI_CMachineLearning_CITensorUInt64BitStatics;

#endif // ____x_ABI_CWindows_CAI_CMachineLearning_CITensorUInt64BitStatics_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CAI_CMachineLearning_CITensorUInt64BitStatics2_FWD_DEFINED__
#define ____x_ABI_CWindows_CAI_CMachineLearning_CITensorUInt64BitStatics2_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CAI_CMachineLearning_CITensorUInt64BitStatics2 __x_ABI_CWindows_CAI_CMachineLearning_CITensorUInt64BitStatics2;

#endif // ____x_ABI_CWindows_CAI_CMachineLearning_CITensorUInt64BitStatics2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CAI_CMachineLearning_CITensorUInt8Bit_FWD_DEFINED__
#define ____x_ABI_CWindows_CAI_CMachineLearning_CITensorUInt8Bit_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CAI_CMachineLearning_CITensorUInt8Bit __x_ABI_CWindows_CAI_CMachineLearning_CITensorUInt8Bit;

#endif // ____x_ABI_CWindows_CAI_CMachineLearning_CITensorUInt8Bit_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CAI_CMachineLearning_CITensorUInt8BitStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CAI_CMachineLearning_CITensorUInt8BitStatics_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CAI_CMachineLearning_CITensorUInt8BitStatics __x_ABI_CWindows_CAI_CMachineLearning_CITensorUInt8BitStatics;

#endif // ____x_ABI_CWindows_CAI_CMachineLearning_CITensorUInt8BitStatics_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CAI_CMachineLearning_CITensorUInt8BitStatics2_FWD_DEFINED__
#define ____x_ABI_CWindows_CAI_CMachineLearning_CITensorUInt8BitStatics2_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CAI_CMachineLearning_CITensorUInt8BitStatics2 __x_ABI_CWindows_CAI_CMachineLearning_CITensorUInt8BitStatics2;

#endif // ____x_ABI_CWindows_CAI_CMachineLearning_CITensorUInt8BitStatics2_FWD_DEFINED__

// Parameterized interface forward declarations (C)

// Collection interface definitions

typedef interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CAI__CMachineLearning__CLearningModel __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CAI__CMachineLearning__CLearningModel;

#if !defined(____x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CAI__CMachineLearning__CLearningModel_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CAI__CMachineLearning__CLearningModel_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CAI__CMachineLearning__CLearningModel __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CAI__CMachineLearning__CLearningModel;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CAI__CMachineLearning__CLearningModel;

    typedef struct __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CAI__CMachineLearning__CLearningModelVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CAI__CMachineLearning__CLearningModel* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CAI__CMachineLearning__CLearningModel* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CAI__CMachineLearning__CLearningModel* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CAI__CMachineLearning__CLearningModel* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CAI__CMachineLearning__CLearningModel* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CAI__CMachineLearning__CLearningModel* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* put_Completed)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CAI__CMachineLearning__CLearningModel* This,
        __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CAI__CMachineLearning__CLearningModel* handler);
    HRESULT (STDMETHODCALLTYPE* get_Completed)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CAI__CMachineLearning__CLearningModel* This,
        __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CAI__CMachineLearning__CLearningModel** result);
    HRESULT (STDMETHODCALLTYPE* GetResults)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CAI__CMachineLearning__CLearningModel* This,
        __x_ABI_CWindows_CAI_CMachineLearning_CILearningModel** result);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CAI__CMachineLearning__CLearningModelVtbl;

    interface __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CAI__CMachineLearning__CLearningModel
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CAI__CMachineLearning__CLearningModelVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CAI__CMachineLearning__CLearningModel_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CAI__CMachineLearning__CLearningModel_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CAI__CMachineLearning__CLearningModel_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CAI__CMachineLearning__CLearningModel __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CAI__CMachineLearning__CLearningModel;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CAI__CMachineLearning__CLearningModel;

    typedef struct __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CAI__CMachineLearning__CLearningModelVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CAI__CMachineLearning__CLearningModel* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CAI__CMachineLearning__CLearningModel* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CAI__CMachineLearning__CLearningModel* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CAI__CMachineLearning__CLearningModel* This,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CAI__CMachineLearning__CLearningModel* asyncInfo,
        enum __x_ABI_CWindows_CFoundation_CAsyncStatus asyncStatus);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CAI__CMachineLearning__CLearningModelVtbl;

    interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CAI__CMachineLearning__CLearningModel
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CAI__CMachineLearning__CLearningModelVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CAI__CMachineLearning__CLearningModel_INTERFACE_DEFINED__
    
typedef interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CAI__CMachineLearning__CLearningModelEvaluationResult __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CAI__CMachineLearning__CLearningModelEvaluationResult;

#if !defined(____x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CAI__CMachineLearning__CLearningModelEvaluationResult_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CAI__CMachineLearning__CLearningModelEvaluationResult_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CAI__CMachineLearning__CLearningModelEvaluationResult __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CAI__CMachineLearning__CLearningModelEvaluationResult;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CAI__CMachineLearning__CLearningModelEvaluationResult;

    typedef struct __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CAI__CMachineLearning__CLearningModelEvaluationResultVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CAI__CMachineLearning__CLearningModelEvaluationResult* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CAI__CMachineLearning__CLearningModelEvaluationResult* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CAI__CMachineLearning__CLearningModelEvaluationResult* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CAI__CMachineLearning__CLearningModelEvaluationResult* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CAI__CMachineLearning__CLearningModelEvaluationResult* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CAI__CMachineLearning__CLearningModelEvaluationResult* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* put_Completed)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CAI__CMachineLearning__CLearningModelEvaluationResult* This,
        __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CAI__CMachineLearning__CLearningModelEvaluationResult* handler);
    HRESULT (STDMETHODCALLTYPE* get_Completed)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CAI__CMachineLearning__CLearningModelEvaluationResult* This,
        __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CAI__CMachineLearning__CLearningModelEvaluationResult** result);
    HRESULT (STDMETHODCALLTYPE* GetResults)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CAI__CMachineLearning__CLearningModelEvaluationResult* This,
        __x_ABI_CWindows_CAI_CMachineLearning_CILearningModelEvaluationResult** result);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CAI__CMachineLearning__CLearningModelEvaluationResultVtbl;

    interface __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CAI__CMachineLearning__CLearningModelEvaluationResult
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CAI__CMachineLearning__CLearningModelEvaluationResultVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CAI__CMachineLearning__CLearningModelEvaluationResult_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CAI__CMachineLearning__CLearningModelEvaluationResult_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CAI__CMachineLearning__CLearningModelEvaluationResult_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CAI__CMachineLearning__CLearningModelEvaluationResult __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CAI__CMachineLearning__CLearningModelEvaluationResult;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CAI__CMachineLearning__CLearningModelEvaluationResult;

    typedef struct __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CAI__CMachineLearning__CLearningModelEvaluationResultVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CAI__CMachineLearning__CLearningModelEvaluationResult* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CAI__CMachineLearning__CLearningModelEvaluationResult* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CAI__CMachineLearning__CLearningModelEvaluationResult* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CAI__CMachineLearning__CLearningModelEvaluationResult* This,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CAI__CMachineLearning__CLearningModelEvaluationResult* asyncInfo,
        enum __x_ABI_CWindows_CFoundation_CAsyncStatus asyncStatus);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CAI__CMachineLearning__CLearningModelEvaluationResultVtbl;

    interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CAI__CMachineLearning__CLearningModelEvaluationResult
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CAI__CMachineLearning__CLearningModelEvaluationResultVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CAI__CMachineLearning__CLearningModelEvaluationResult_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterator_1_boolean_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterator_1_boolean_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterator_1_boolean __x_ABI_C__FIIterator_1_boolean;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterator_1_boolean;

    typedef struct __x_ABI_C__FIIterator_1_booleanVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterator_1_boolean* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterator_1_boolean* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterator_1_boolean* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterator_1_boolean* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterator_1_boolean* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterator_1_boolean* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Current)(__x_ABI_C__FIIterator_1_boolean* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__x_ABI_C__FIIterator_1_boolean* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__x_ABI_C__FIIterator_1_boolean* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIIterator_1_boolean* This,
        UINT32 itemsLength,
        boolean* items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIIterator_1_booleanVtbl;

    interface __x_ABI_C__FIIterator_1_boolean
    {
        CONST_VTBL struct __x_ABI_C__FIIterator_1_booleanVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterator_1_boolean_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterable_1_boolean_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterable_1_boolean_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterable_1_boolean __x_ABI_C__FIIterable_1_boolean;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterable_1_boolean;

    typedef struct __x_ABI_C__FIIterable_1_booleanVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterable_1_boolean* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterable_1_boolean* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterable_1_boolean* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterable_1_boolean* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterable_1_boolean* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterable_1_boolean* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* First)(__x_ABI_C__FIIterable_1_boolean* This,
        __x_ABI_C__FIIterator_1_boolean** result);

        END_INTERFACE
    } __x_ABI_C__FIIterable_1_booleanVtbl;

    interface __x_ABI_C__FIIterable_1_boolean
    {
        CONST_VTBL struct __x_ABI_C__FIIterable_1_booleanVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterable_1_boolean_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterator_1_double_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterator_1_double_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterator_1_double __x_ABI_C__FIIterator_1_double;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterator_1_double;

    typedef struct __x_ABI_C__FIIterator_1_doubleVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterator_1_double* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterator_1_double* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterator_1_double* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterator_1_double* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterator_1_double* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterator_1_double* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Current)(__x_ABI_C__FIIterator_1_double* This,
        DOUBLE* result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__x_ABI_C__FIIterator_1_double* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__x_ABI_C__FIIterator_1_double* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIIterator_1_double* This,
        UINT32 itemsLength,
        DOUBLE* items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIIterator_1_doubleVtbl;

    interface __x_ABI_C__FIIterator_1_double
    {
        CONST_VTBL struct __x_ABI_C__FIIterator_1_doubleVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterator_1_double_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterable_1_double_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterable_1_double_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterable_1_double __x_ABI_C__FIIterable_1_double;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterable_1_double;

    typedef struct __x_ABI_C__FIIterable_1_doubleVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterable_1_double* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterable_1_double* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterable_1_double* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterable_1_double* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterable_1_double* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterable_1_double* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* First)(__x_ABI_C__FIIterable_1_double* This,
        __x_ABI_C__FIIterator_1_double** result);

        END_INTERFACE
    } __x_ABI_C__FIIterable_1_doubleVtbl;

    interface __x_ABI_C__FIIterable_1_double
    {
        CONST_VTBL struct __x_ABI_C__FIIterable_1_doubleVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterable_1_double_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterator_1_float_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterator_1_float_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterator_1_float __x_ABI_C__FIIterator_1_float;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterator_1_float;

    typedef struct __x_ABI_C__FIIterator_1_floatVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterator_1_float* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterator_1_float* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterator_1_float* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterator_1_float* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterator_1_float* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterator_1_float* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Current)(__x_ABI_C__FIIterator_1_float* This,
        FLOAT* result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__x_ABI_C__FIIterator_1_float* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__x_ABI_C__FIIterator_1_float* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIIterator_1_float* This,
        UINT32 itemsLength,
        FLOAT* items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIIterator_1_floatVtbl;

    interface __x_ABI_C__FIIterator_1_float
    {
        CONST_VTBL struct __x_ABI_C__FIIterator_1_floatVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterator_1_float_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterable_1_float_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterable_1_float_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterable_1_float __x_ABI_C__FIIterable_1_float;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterable_1_float;

    typedef struct __x_ABI_C__FIIterable_1_floatVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterable_1_float* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterable_1_float* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterable_1_float* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterable_1_float* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterable_1_float* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterable_1_float* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* First)(__x_ABI_C__FIIterable_1_float* This,
        __x_ABI_C__FIIterator_1_float** result);

        END_INTERFACE
    } __x_ABI_C__FIIterable_1_floatVtbl;

    interface __x_ABI_C__FIIterable_1_float
    {
        CONST_VTBL struct __x_ABI_C__FIIterable_1_floatVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterable_1_float_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterator_1_short_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterator_1_short_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterator_1_short __x_ABI_C__FIIterator_1_short;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterator_1_short;

    typedef struct __x_ABI_C__FIIterator_1_shortVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterator_1_short* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterator_1_short* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterator_1_short* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterator_1_short* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterator_1_short* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterator_1_short* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Current)(__x_ABI_C__FIIterator_1_short* This,
        INT16* result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__x_ABI_C__FIIterator_1_short* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__x_ABI_C__FIIterator_1_short* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIIterator_1_short* This,
        UINT32 itemsLength,
        INT16* items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIIterator_1_shortVtbl;

    interface __x_ABI_C__FIIterator_1_short
    {
        CONST_VTBL struct __x_ABI_C__FIIterator_1_shortVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterator_1_short_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterable_1_short_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterable_1_short_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterable_1_short __x_ABI_C__FIIterable_1_short;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterable_1_short;

    typedef struct __x_ABI_C__FIIterable_1_shortVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterable_1_short* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterable_1_short* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterable_1_short* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterable_1_short* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterable_1_short* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterable_1_short* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* First)(__x_ABI_C__FIIterable_1_short* This,
        __x_ABI_C__FIIterator_1_short** result);

        END_INTERFACE
    } __x_ABI_C__FIIterable_1_shortVtbl;

    interface __x_ABI_C__FIIterable_1_short
    {
        CONST_VTBL struct __x_ABI_C__FIIterable_1_shortVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterable_1_short_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterator_1_int_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterator_1_int_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterator_1_int __x_ABI_C__FIIterator_1_int;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterator_1_int;

    typedef struct __x_ABI_C__FIIterator_1_intVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterator_1_int* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterator_1_int* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterator_1_int* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterator_1_int* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterator_1_int* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterator_1_int* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Current)(__x_ABI_C__FIIterator_1_int* This,
        INT32* result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__x_ABI_C__FIIterator_1_int* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__x_ABI_C__FIIterator_1_int* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIIterator_1_int* This,
        UINT32 itemsLength,
        INT32* items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIIterator_1_intVtbl;

    interface __x_ABI_C__FIIterator_1_int
    {
        CONST_VTBL struct __x_ABI_C__FIIterator_1_intVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterator_1_int_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterable_1_int_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterable_1_int_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterable_1_int __x_ABI_C__FIIterable_1_int;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterable_1_int;

    typedef struct __x_ABI_C__FIIterable_1_intVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterable_1_int* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterable_1_int* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterable_1_int* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterable_1_int* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterable_1_int* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterable_1_int* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* First)(__x_ABI_C__FIIterable_1_int* This,
        __x_ABI_C__FIIterator_1_int** result);

        END_INTERFACE
    } __x_ABI_C__FIIterable_1_intVtbl;

    interface __x_ABI_C__FIIterable_1_int
    {
        CONST_VTBL struct __x_ABI_C__FIIterable_1_intVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterable_1_int_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterator_1___z__zint64_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterator_1___z__zint64_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterator_1___z__zint64 __x_ABI_C__FIIterator_1___z__zint64;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterator_1___z__zint64;

    typedef struct __x_ABI_C__FIIterator_1___z__zint64Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterator_1___z__zint64* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterator_1___z__zint64* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterator_1___z__zint64* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterator_1___z__zint64* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterator_1___z__zint64* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterator_1___z__zint64* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Current)(__x_ABI_C__FIIterator_1___z__zint64* This,
        INT64* result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__x_ABI_C__FIIterator_1___z__zint64* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__x_ABI_C__FIIterator_1___z__zint64* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIIterator_1___z__zint64* This,
        UINT32 itemsLength,
        INT64* items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIIterator_1___z__zint64Vtbl;

    interface __x_ABI_C__FIIterator_1___z__zint64
    {
        CONST_VTBL struct __x_ABI_C__FIIterator_1___z__zint64Vtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterator_1___z__zint64_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterable_1___z__zint64_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterable_1___z__zint64_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterable_1___z__zint64 __x_ABI_C__FIIterable_1___z__zint64;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterable_1___z__zint64;

    typedef struct __x_ABI_C__FIIterable_1___z__zint64Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterable_1___z__zint64* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterable_1___z__zint64* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterable_1___z__zint64* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterable_1___z__zint64* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterable_1___z__zint64* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterable_1___z__zint64* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* First)(__x_ABI_C__FIIterable_1___z__zint64* This,
        __x_ABI_C__FIIterator_1___z__zint64** result);

        END_INTERFACE
    } __x_ABI_C__FIIterable_1___z__zint64Vtbl;

    interface __x_ABI_C__FIIterable_1___z__zint64
    {
        CONST_VTBL struct __x_ABI_C__FIIterable_1___z__zint64Vtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterable_1___z__zint64_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterator_1_HSTRING_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterator_1_HSTRING_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterator_1_HSTRING __x_ABI_C__FIIterator_1_HSTRING;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterator_1_HSTRING;

    typedef struct __x_ABI_C__FIIterator_1_HSTRINGVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterator_1_HSTRING* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterator_1_HSTRING* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterator_1_HSTRING* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterator_1_HSTRING* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterator_1_HSTRING* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterator_1_HSTRING* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Current)(__x_ABI_C__FIIterator_1_HSTRING* This,
        HSTRING* result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__x_ABI_C__FIIterator_1_HSTRING* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__x_ABI_C__FIIterator_1_HSTRING* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIIterator_1_HSTRING* This,
        UINT32 itemsLength,
        HSTRING* items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIIterator_1_HSTRINGVtbl;

    interface __x_ABI_C__FIIterator_1_HSTRING
    {
        CONST_VTBL struct __x_ABI_C__FIIterator_1_HSTRINGVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterator_1_HSTRING_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterable_1_HSTRING_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterable_1_HSTRING_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterable_1_HSTRING __x_ABI_C__FIIterable_1_HSTRING;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterable_1_HSTRING;

    typedef struct __x_ABI_C__FIIterable_1_HSTRINGVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterable_1_HSTRING* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterable_1_HSTRING* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterable_1_HSTRING* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterable_1_HSTRING* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterable_1_HSTRING* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterable_1_HSTRING* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* First)(__x_ABI_C__FIIterable_1_HSTRING* This,
        __x_ABI_C__FIIterator_1_HSTRING** result);

        END_INTERFACE
    } __x_ABI_C__FIIterable_1_HSTRINGVtbl;

    interface __x_ABI_C__FIIterable_1_HSTRING
    {
        CONST_VTBL struct __x_ABI_C__FIIterable_1_HSTRINGVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterable_1_HSTRING_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterator_1_UINT16_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterator_1_UINT16_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterator_1_UINT16 __x_ABI_C__FIIterator_1_UINT16;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterator_1_UINT16;

    typedef struct __x_ABI_C__FIIterator_1_UINT16Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterator_1_UINT16* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterator_1_UINT16* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterator_1_UINT16* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterator_1_UINT16* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterator_1_UINT16* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterator_1_UINT16* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Current)(__x_ABI_C__FIIterator_1_UINT16* This,
        UINT16* result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__x_ABI_C__FIIterator_1_UINT16* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__x_ABI_C__FIIterator_1_UINT16* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIIterator_1_UINT16* This,
        UINT32 itemsLength,
        UINT16* items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIIterator_1_UINT16Vtbl;

    interface __x_ABI_C__FIIterator_1_UINT16
    {
        CONST_VTBL struct __x_ABI_C__FIIterator_1_UINT16Vtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterator_1_UINT16_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterable_1_UINT16_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterable_1_UINT16_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterable_1_UINT16 __x_ABI_C__FIIterable_1_UINT16;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterable_1_UINT16;

    typedef struct __x_ABI_C__FIIterable_1_UINT16Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterable_1_UINT16* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterable_1_UINT16* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterable_1_UINT16* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterable_1_UINT16* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterable_1_UINT16* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterable_1_UINT16* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* First)(__x_ABI_C__FIIterable_1_UINT16* This,
        __x_ABI_C__FIIterator_1_UINT16** result);

        END_INTERFACE
    } __x_ABI_C__FIIterable_1_UINT16Vtbl;

    interface __x_ABI_C__FIIterable_1_UINT16
    {
        CONST_VTBL struct __x_ABI_C__FIIterable_1_UINT16Vtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterable_1_UINT16_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterator_1_UINT32_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterator_1_UINT32_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterator_1_UINT32 __x_ABI_C__FIIterator_1_UINT32;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterator_1_UINT32;

    typedef struct __x_ABI_C__FIIterator_1_UINT32Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterator_1_UINT32* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterator_1_UINT32* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterator_1_UINT32* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterator_1_UINT32* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterator_1_UINT32* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterator_1_UINT32* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Current)(__x_ABI_C__FIIterator_1_UINT32* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__x_ABI_C__FIIterator_1_UINT32* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__x_ABI_C__FIIterator_1_UINT32* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIIterator_1_UINT32* This,
        UINT32 itemsLength,
        UINT32* items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIIterator_1_UINT32Vtbl;

    interface __x_ABI_C__FIIterator_1_UINT32
    {
        CONST_VTBL struct __x_ABI_C__FIIterator_1_UINT32Vtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterator_1_UINT32_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterable_1_UINT32_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterable_1_UINT32_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterable_1_UINT32 __x_ABI_C__FIIterable_1_UINT32;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterable_1_UINT32;

    typedef struct __x_ABI_C__FIIterable_1_UINT32Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterable_1_UINT32* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterable_1_UINT32* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterable_1_UINT32* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterable_1_UINT32* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterable_1_UINT32* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterable_1_UINT32* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* First)(__x_ABI_C__FIIterable_1_UINT32* This,
        __x_ABI_C__FIIterator_1_UINT32** result);

        END_INTERFACE
    } __x_ABI_C__FIIterable_1_UINT32Vtbl;

    interface __x_ABI_C__FIIterable_1_UINT32
    {
        CONST_VTBL struct __x_ABI_C__FIIterable_1_UINT32Vtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterable_1_UINT32_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterator_1_UINT64_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterator_1_UINT64_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterator_1_UINT64 __x_ABI_C__FIIterator_1_UINT64;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterator_1_UINT64;

    typedef struct __x_ABI_C__FIIterator_1_UINT64Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterator_1_UINT64* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterator_1_UINT64* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterator_1_UINT64* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterator_1_UINT64* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterator_1_UINT64* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterator_1_UINT64* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Current)(__x_ABI_C__FIIterator_1_UINT64* This,
        UINT64* result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__x_ABI_C__FIIterator_1_UINT64* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__x_ABI_C__FIIterator_1_UINT64* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIIterator_1_UINT64* This,
        UINT32 itemsLength,
        UINT64* items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIIterator_1_UINT64Vtbl;

    interface __x_ABI_C__FIIterator_1_UINT64
    {
        CONST_VTBL struct __x_ABI_C__FIIterator_1_UINT64Vtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterator_1_UINT64_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterable_1_UINT64_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterable_1_UINT64_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterable_1_UINT64 __x_ABI_C__FIIterable_1_UINT64;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterable_1_UINT64;

    typedef struct __x_ABI_C__FIIterable_1_UINT64Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterable_1_UINT64* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterable_1_UINT64* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterable_1_UINT64* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterable_1_UINT64* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterable_1_UINT64* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterable_1_UINT64* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* First)(__x_ABI_C__FIIterable_1_UINT64* This,
        __x_ABI_C__FIIterator_1_UINT64** result);

        END_INTERFACE
    } __x_ABI_C__FIIterable_1_UINT64Vtbl;

    interface __x_ABI_C__FIIterable_1_UINT64
    {
        CONST_VTBL struct __x_ABI_C__FIIterable_1_UINT64Vtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterable_1_UINT64_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterator_1_byte_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterator_1_byte_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterator_1_byte __x_ABI_C__FIIterator_1_byte;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterator_1_byte;

    typedef struct __x_ABI_C__FIIterator_1_byteVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterator_1_byte* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterator_1_byte* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterator_1_byte* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterator_1_byte* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterator_1_byte* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterator_1_byte* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Current)(__x_ABI_C__FIIterator_1_byte* This,
        BYTE* result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__x_ABI_C__FIIterator_1_byte* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__x_ABI_C__FIIterator_1_byte* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIIterator_1_byte* This,
        UINT32 itemsLength,
        BYTE* items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIIterator_1_byteVtbl;

    interface __x_ABI_C__FIIterator_1_byte
    {
        CONST_VTBL struct __x_ABI_C__FIIterator_1_byteVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterator_1_byte_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterable_1_byte_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterable_1_byte_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterable_1_byte __x_ABI_C__FIIterable_1_byte;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterable_1_byte;

    typedef struct __x_ABI_C__FIIterable_1_byteVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterable_1_byte* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterable_1_byte* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterable_1_byte* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterable_1_byte* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterable_1_byte* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterable_1_byte* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* First)(__x_ABI_C__FIIterable_1_byte* This,
        __x_ABI_C__FIIterator_1_byte** result);

        END_INTERFACE
    } __x_ABI_C__FIIterable_1_byteVtbl;

    interface __x_ABI_C__FIIterable_1_byte
    {
        CONST_VTBL struct __x_ABI_C__FIIterable_1_byteVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterable_1_byte_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterator_1___x_ABI_CWindows__CAI__CMachineLearning__CILearningModelFeatureDescriptor_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CAI__CMachineLearning__CILearningModelFeatureDescriptor_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CAI__CMachineLearning__CILearningModelFeatureDescriptor __x_ABI_C__FIIterator_1___x_ABI_CWindows__CAI__CMachineLearning__CILearningModelFeatureDescriptor;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterator_1___x_ABI_CWindows__CAI__CMachineLearning__CILearningModelFeatureDescriptor;

    typedef struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CAI__CMachineLearning__CILearningModelFeatureDescriptorVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CAI__CMachineLearning__CILearningModelFeatureDescriptor* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CAI__CMachineLearning__CILearningModelFeatureDescriptor* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CAI__CMachineLearning__CILearningModelFeatureDescriptor* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CAI__CMachineLearning__CILearningModelFeatureDescriptor* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CAI__CMachineLearning__CILearningModelFeatureDescriptor* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CAI__CMachineLearning__CILearningModelFeatureDescriptor* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Current)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CAI__CMachineLearning__CILearningModelFeatureDescriptor* This,
        __x_ABI_CWindows_CAI_CMachineLearning_CILearningModelFeatureDescriptor** result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CAI__CMachineLearning__CILearningModelFeatureDescriptor* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CAI__CMachineLearning__CILearningModelFeatureDescriptor* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CAI__CMachineLearning__CILearningModelFeatureDescriptor* This,
        UINT32 itemsLength,
        __x_ABI_CWindows_CAI_CMachineLearning_CILearningModelFeatureDescriptor** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIIterator_1___x_ABI_CWindows__CAI__CMachineLearning__CILearningModelFeatureDescriptorVtbl;

    interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CAI__CMachineLearning__CILearningModelFeatureDescriptor
    {
        CONST_VTBL struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CAI__CMachineLearning__CILearningModelFeatureDescriptorVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CAI__CMachineLearning__CILearningModelFeatureDescriptor_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterable_1___x_ABI_CWindows__CAI__CMachineLearning__CILearningModelFeatureDescriptor_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CAI__CMachineLearning__CILearningModelFeatureDescriptor_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CAI__CMachineLearning__CILearningModelFeatureDescriptor __x_ABI_C__FIIterable_1___x_ABI_CWindows__CAI__CMachineLearning__CILearningModelFeatureDescriptor;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterable_1___x_ABI_CWindows__CAI__CMachineLearning__CILearningModelFeatureDescriptor;

    typedef struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CAI__CMachineLearning__CILearningModelFeatureDescriptorVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CAI__CMachineLearning__CILearningModelFeatureDescriptor* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CAI__CMachineLearning__CILearningModelFeatureDescriptor* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CAI__CMachineLearning__CILearningModelFeatureDescriptor* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CAI__CMachineLearning__CILearningModelFeatureDescriptor* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CAI__CMachineLearning__CILearningModelFeatureDescriptor* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CAI__CMachineLearning__CILearningModelFeatureDescriptor* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* First)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CAI__CMachineLearning__CILearningModelFeatureDescriptor* This,
        __x_ABI_C__FIIterator_1___x_ABI_CWindows__CAI__CMachineLearning__CILearningModelFeatureDescriptor** result);

        END_INTERFACE
    } __x_ABI_C__FIIterable_1___x_ABI_CWindows__CAI__CMachineLearning__CILearningModelFeatureDescriptorVtbl;

    interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CAI__CMachineLearning__CILearningModelFeatureDescriptor
    {
        CONST_VTBL struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CAI__CMachineLearning__CILearningModelFeatureDescriptorVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CAI__CMachineLearning__CILearningModelFeatureDescriptor_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectable_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectable_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectable __x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectable;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectable;

    typedef struct __x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectableVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectable* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectable* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectable* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectable* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectable* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectable* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Key)(__x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectable* This,
        HSTRING* result);
    HRESULT (STDMETHODCALLTYPE* get_Value)(__x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectable* This,
        IInspectable** result);

        END_INTERFACE
    } __x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectableVtbl;

    interface __x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectable
    {
        CONST_VTBL struct __x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectableVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectable_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectable_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectable_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectable __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectable;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectable;

    typedef struct __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectableVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectable* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectable* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectable* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectable* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectable* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectable* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Current)(__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectable* This,
        __x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectable** result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectable* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectable* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectable* This,
        UINT32 itemsLength,
        __x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectable** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectableVtbl;

    interface __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectable
    {
        CONST_VTBL struct __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectableVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectable_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectable_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectable_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectable __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectable;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectable;

    typedef struct __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectableVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectable* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectable* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectable* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectable* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectable* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectable* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* First)(__x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectable* This,
        __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectable** result);

        END_INTERFACE
    } __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectableVtbl;

    interface __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectable
    {
        CONST_VTBL struct __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectableVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectable_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING __x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING;

    typedef struct __x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRINGVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Key)(__x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING* This,
        HSTRING* result);
    HRESULT (STDMETHODCALLTYPE* get_Value)(__x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING* This,
        HSTRING* result);

        END_INTERFACE
    } __x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRINGVtbl;

    interface __x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING
    {
        CONST_VTBL struct __x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRINGVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING;

    typedef struct __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRINGVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Current)(__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING* This,
        __x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING** result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING* This,
        UINT32 itemsLength,
        __x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRINGVtbl;

    interface __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING
    {
        CONST_VTBL struct __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRINGVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING;

    typedef struct __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRINGVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* First)(__x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING* This,
        __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING** result);

        END_INTERFACE
    } __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRINGVtbl;

    interface __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING
    {
        CONST_VTBL struct __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRINGVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING_INTERFACE_DEFINED__
    
typedef interface __x_ABI_C__FIMapView_2_HSTRING_IInspectable __x_ABI_C__FIMapView_2_HSTRING_IInspectable;

#if !defined(____x_ABI_C__FIMapView_2_HSTRING_IInspectable_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIMapView_2_HSTRING_IInspectable_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIMapView_2_HSTRING_IInspectable __x_ABI_C__FIMapView_2_HSTRING_IInspectable;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIMapView_2_HSTRING_IInspectable;

    typedef struct __x_ABI_C__FIMapView_2_HSTRING_IInspectableVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIMapView_2_HSTRING_IInspectable* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIMapView_2_HSTRING_IInspectable* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIMapView_2_HSTRING_IInspectable* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIMapView_2_HSTRING_IInspectable* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIMapView_2_HSTRING_IInspectable* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIMapView_2_HSTRING_IInspectable* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* Lookup)(__x_ABI_C__FIMapView_2_HSTRING_IInspectable* This,
        HSTRING key,
        IInspectable** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIMapView_2_HSTRING_IInspectable* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* HasKey)(__x_ABI_C__FIMapView_2_HSTRING_IInspectable* This,
        HSTRING key,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* Split)(__x_ABI_C__FIMapView_2_HSTRING_IInspectable* This,
        __x_ABI_C__FIMapView_2_HSTRING_IInspectable** first,
        __x_ABI_C__FIMapView_2_HSTRING_IInspectable** second);

        END_INTERFACE
    } __x_ABI_C__FIMapView_2_HSTRING_IInspectableVtbl;

    interface __x_ABI_C__FIMapView_2_HSTRING_IInspectable
    {
        CONST_VTBL struct __x_ABI_C__FIMapView_2_HSTRING_IInspectableVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIMapView_2_HSTRING_IInspectable_INTERFACE_DEFINED__
    
typedef interface __x_ABI_C__FIMapView_2_HSTRING_HSTRING __x_ABI_C__FIMapView_2_HSTRING_HSTRING;

#if !defined(____x_ABI_C__FIMapView_2_HSTRING_HSTRING_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIMapView_2_HSTRING_HSTRING_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIMapView_2_HSTRING_HSTRING __x_ABI_C__FIMapView_2_HSTRING_HSTRING;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIMapView_2_HSTRING_HSTRING;

    typedef struct __x_ABI_C__FIMapView_2_HSTRING_HSTRINGVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIMapView_2_HSTRING_HSTRING* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIMapView_2_HSTRING_HSTRING* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIMapView_2_HSTRING_HSTRING* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIMapView_2_HSTRING_HSTRING* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIMapView_2_HSTRING_HSTRING* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIMapView_2_HSTRING_HSTRING* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* Lookup)(__x_ABI_C__FIMapView_2_HSTRING_HSTRING* This,
        HSTRING key,
        HSTRING* result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIMapView_2_HSTRING_HSTRING* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* HasKey)(__x_ABI_C__FIMapView_2_HSTRING_HSTRING* This,
        HSTRING key,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* Split)(__x_ABI_C__FIMapView_2_HSTRING_HSTRING* This,
        __x_ABI_C__FIMapView_2_HSTRING_HSTRING** first,
        __x_ABI_C__FIMapView_2_HSTRING_HSTRING** second);

        END_INTERFACE
    } __x_ABI_C__FIMapView_2_HSTRING_HSTRINGVtbl;

    interface __x_ABI_C__FIMapView_2_HSTRING_HSTRING
    {
        CONST_VTBL struct __x_ABI_C__FIMapView_2_HSTRING_HSTRINGVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIMapView_2_HSTRING_HSTRING_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIMap_2_HSTRING_IInspectable_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIMap_2_HSTRING_IInspectable_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIMap_2_HSTRING_IInspectable __x_ABI_C__FIMap_2_HSTRING_IInspectable;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIMap_2_HSTRING_IInspectable;

    typedef struct __x_ABI_C__FIMap_2_HSTRING_IInspectableVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIMap_2_HSTRING_IInspectable* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIMap_2_HSTRING_IInspectable* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIMap_2_HSTRING_IInspectable* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIMap_2_HSTRING_IInspectable* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIMap_2_HSTRING_IInspectable* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIMap_2_HSTRING_IInspectable* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* Lookup)(__x_ABI_C__FIMap_2_HSTRING_IInspectable* This,
        HSTRING key,
        IInspectable** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIMap_2_HSTRING_IInspectable* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* HasKey)(__x_ABI_C__FIMap_2_HSTRING_IInspectable* This,
        HSTRING key,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetView)(__x_ABI_C__FIMap_2_HSTRING_IInspectable* This,
        __x_ABI_C__FIMapView_2_HSTRING_IInspectable** result);
    HRESULT (STDMETHODCALLTYPE* Insert)(__x_ABI_C__FIMap_2_HSTRING_IInspectable* This,
        HSTRING key,
        IInspectable* value,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* Remove)(__x_ABI_C__FIMap_2_HSTRING_IInspectable* This,
        HSTRING key);
    HRESULT (STDMETHODCALLTYPE* Clear)(__x_ABI_C__FIMap_2_HSTRING_IInspectable* This);

        END_INTERFACE
    } __x_ABI_C__FIMap_2_HSTRING_IInspectableVtbl;

    interface __x_ABI_C__FIMap_2_HSTRING_IInspectable
    {
        CONST_VTBL struct __x_ABI_C__FIMap_2_HSTRING_IInspectableVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIMap_2_HSTRING_IInspectable_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVectorView_1_boolean_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVectorView_1_boolean_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVectorView_1_boolean __x_ABI_C__FIVectorView_1_boolean;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVectorView_1_boolean;

    typedef struct __x_ABI_C__FIVectorView_1_booleanVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVectorView_1_boolean* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVectorView_1_boolean* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVectorView_1_boolean* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVectorView_1_boolean* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVectorView_1_boolean* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVectorView_1_boolean* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVectorView_1_boolean* This,
        UINT32 index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVectorView_1_boolean* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVectorView_1_boolean* This,
        boolean value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVectorView_1_boolean* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        boolean* items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIVectorView_1_booleanVtbl;

    interface __x_ABI_C__FIVectorView_1_boolean
    {
        CONST_VTBL struct __x_ABI_C__FIVectorView_1_booleanVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVectorView_1_boolean_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVectorView_1_double_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVectorView_1_double_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVectorView_1_double __x_ABI_C__FIVectorView_1_double;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVectorView_1_double;

    typedef struct __x_ABI_C__FIVectorView_1_doubleVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVectorView_1_double* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVectorView_1_double* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVectorView_1_double* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVectorView_1_double* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVectorView_1_double* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVectorView_1_double* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVectorView_1_double* This,
        UINT32 index,
        DOUBLE* result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVectorView_1_double* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVectorView_1_double* This,
        DOUBLE value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVectorView_1_double* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        DOUBLE* items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIVectorView_1_doubleVtbl;

    interface __x_ABI_C__FIVectorView_1_double
    {
        CONST_VTBL struct __x_ABI_C__FIVectorView_1_doubleVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVectorView_1_double_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVectorView_1_float_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVectorView_1_float_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVectorView_1_float __x_ABI_C__FIVectorView_1_float;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVectorView_1_float;

    typedef struct __x_ABI_C__FIVectorView_1_floatVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVectorView_1_float* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVectorView_1_float* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVectorView_1_float* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVectorView_1_float* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVectorView_1_float* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVectorView_1_float* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVectorView_1_float* This,
        UINT32 index,
        FLOAT* result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVectorView_1_float* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVectorView_1_float* This,
        FLOAT value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVectorView_1_float* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        FLOAT* items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIVectorView_1_floatVtbl;

    interface __x_ABI_C__FIVectorView_1_float
    {
        CONST_VTBL struct __x_ABI_C__FIVectorView_1_floatVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVectorView_1_float_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVectorView_1_short_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVectorView_1_short_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVectorView_1_short __x_ABI_C__FIVectorView_1_short;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVectorView_1_short;

    typedef struct __x_ABI_C__FIVectorView_1_shortVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVectorView_1_short* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVectorView_1_short* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVectorView_1_short* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVectorView_1_short* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVectorView_1_short* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVectorView_1_short* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVectorView_1_short* This,
        UINT32 index,
        INT16* result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVectorView_1_short* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVectorView_1_short* This,
        INT16 value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVectorView_1_short* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        INT16* items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIVectorView_1_shortVtbl;

    interface __x_ABI_C__FIVectorView_1_short
    {
        CONST_VTBL struct __x_ABI_C__FIVectorView_1_shortVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVectorView_1_short_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVectorView_1_int_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVectorView_1_int_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVectorView_1_int __x_ABI_C__FIVectorView_1_int;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVectorView_1_int;

    typedef struct __x_ABI_C__FIVectorView_1_intVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVectorView_1_int* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVectorView_1_int* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVectorView_1_int* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVectorView_1_int* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVectorView_1_int* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVectorView_1_int* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVectorView_1_int* This,
        UINT32 index,
        INT32* result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVectorView_1_int* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVectorView_1_int* This,
        INT32 value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVectorView_1_int* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        INT32* items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIVectorView_1_intVtbl;

    interface __x_ABI_C__FIVectorView_1_int
    {
        CONST_VTBL struct __x_ABI_C__FIVectorView_1_intVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVectorView_1_int_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVectorView_1___z__zint64_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVectorView_1___z__zint64_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVectorView_1___z__zint64 __x_ABI_C__FIVectorView_1___z__zint64;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVectorView_1___z__zint64;

    typedef struct __x_ABI_C__FIVectorView_1___z__zint64Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVectorView_1___z__zint64* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVectorView_1___z__zint64* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVectorView_1___z__zint64* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVectorView_1___z__zint64* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVectorView_1___z__zint64* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVectorView_1___z__zint64* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVectorView_1___z__zint64* This,
        UINT32 index,
        INT64* result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVectorView_1___z__zint64* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVectorView_1___z__zint64* This,
        INT64 value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVectorView_1___z__zint64* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        INT64* items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIVectorView_1___z__zint64Vtbl;

    interface __x_ABI_C__FIVectorView_1___z__zint64
    {
        CONST_VTBL struct __x_ABI_C__FIVectorView_1___z__zint64Vtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVectorView_1___z__zint64_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVectorView_1_HSTRING_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVectorView_1_HSTRING_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVectorView_1_HSTRING __x_ABI_C__FIVectorView_1_HSTRING;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVectorView_1_HSTRING;

    typedef struct __x_ABI_C__FIVectorView_1_HSTRINGVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVectorView_1_HSTRING* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVectorView_1_HSTRING* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVectorView_1_HSTRING* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVectorView_1_HSTRING* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVectorView_1_HSTRING* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVectorView_1_HSTRING* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVectorView_1_HSTRING* This,
        UINT32 index,
        HSTRING* result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVectorView_1_HSTRING* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVectorView_1_HSTRING* This,
        HSTRING value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVectorView_1_HSTRING* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        HSTRING* items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIVectorView_1_HSTRINGVtbl;

    interface __x_ABI_C__FIVectorView_1_HSTRING
    {
        CONST_VTBL struct __x_ABI_C__FIVectorView_1_HSTRINGVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVectorView_1_HSTRING_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVectorView_1_UINT16_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVectorView_1_UINT16_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVectorView_1_UINT16 __x_ABI_C__FIVectorView_1_UINT16;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVectorView_1_UINT16;

    typedef struct __x_ABI_C__FIVectorView_1_UINT16Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVectorView_1_UINT16* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVectorView_1_UINT16* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVectorView_1_UINT16* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVectorView_1_UINT16* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVectorView_1_UINT16* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVectorView_1_UINT16* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVectorView_1_UINT16* This,
        UINT32 index,
        UINT16* result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVectorView_1_UINT16* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVectorView_1_UINT16* This,
        UINT16 value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVectorView_1_UINT16* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        UINT16* items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIVectorView_1_UINT16Vtbl;

    interface __x_ABI_C__FIVectorView_1_UINT16
    {
        CONST_VTBL struct __x_ABI_C__FIVectorView_1_UINT16Vtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVectorView_1_UINT16_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVectorView_1_UINT32_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVectorView_1_UINT32_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVectorView_1_UINT32 __x_ABI_C__FIVectorView_1_UINT32;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVectorView_1_UINT32;

    typedef struct __x_ABI_C__FIVectorView_1_UINT32Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVectorView_1_UINT32* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVectorView_1_UINT32* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVectorView_1_UINT32* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVectorView_1_UINT32* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVectorView_1_UINT32* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVectorView_1_UINT32* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVectorView_1_UINT32* This,
        UINT32 index,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVectorView_1_UINT32* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVectorView_1_UINT32* This,
        UINT32 value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVectorView_1_UINT32* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        UINT32* items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIVectorView_1_UINT32Vtbl;

    interface __x_ABI_C__FIVectorView_1_UINT32
    {
        CONST_VTBL struct __x_ABI_C__FIVectorView_1_UINT32Vtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVectorView_1_UINT32_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVectorView_1_UINT64_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVectorView_1_UINT64_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVectorView_1_UINT64 __x_ABI_C__FIVectorView_1_UINT64;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVectorView_1_UINT64;

    typedef struct __x_ABI_C__FIVectorView_1_UINT64Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVectorView_1_UINT64* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVectorView_1_UINT64* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVectorView_1_UINT64* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVectorView_1_UINT64* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVectorView_1_UINT64* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVectorView_1_UINT64* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVectorView_1_UINT64* This,
        UINT32 index,
        UINT64* result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVectorView_1_UINT64* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVectorView_1_UINT64* This,
        UINT64 value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVectorView_1_UINT64* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        UINT64* items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIVectorView_1_UINT64Vtbl;

    interface __x_ABI_C__FIVectorView_1_UINT64
    {
        CONST_VTBL struct __x_ABI_C__FIVectorView_1_UINT64Vtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVectorView_1_UINT64_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVectorView_1_byte_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVectorView_1_byte_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVectorView_1_byte __x_ABI_C__FIVectorView_1_byte;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVectorView_1_byte;

    typedef struct __x_ABI_C__FIVectorView_1_byteVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVectorView_1_byte* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVectorView_1_byte* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVectorView_1_byte* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVectorView_1_byte* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVectorView_1_byte* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVectorView_1_byte* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVectorView_1_byte* This,
        UINT32 index,
        BYTE* result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVectorView_1_byte* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVectorView_1_byte* This,
        BYTE value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVectorView_1_byte* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        BYTE* items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIVectorView_1_byteVtbl;

    interface __x_ABI_C__FIVectorView_1_byte
    {
        CONST_VTBL struct __x_ABI_C__FIVectorView_1_byteVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVectorView_1_byte_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CAI__CMachineLearning__CILearningModelFeatureDescriptor_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CAI__CMachineLearning__CILearningModelFeatureDescriptor_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CAI__CMachineLearning__CILearningModelFeatureDescriptor __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CAI__CMachineLearning__CILearningModelFeatureDescriptor;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CAI__CMachineLearning__CILearningModelFeatureDescriptor;

    typedef struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CAI__CMachineLearning__CILearningModelFeatureDescriptorVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CAI__CMachineLearning__CILearningModelFeatureDescriptor* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CAI__CMachineLearning__CILearningModelFeatureDescriptor* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CAI__CMachineLearning__CILearningModelFeatureDescriptor* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CAI__CMachineLearning__CILearningModelFeatureDescriptor* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CAI__CMachineLearning__CILearningModelFeatureDescriptor* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CAI__CMachineLearning__CILearningModelFeatureDescriptor* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CAI__CMachineLearning__CILearningModelFeatureDescriptor* This,
        UINT32 index,
        __x_ABI_CWindows_CAI_CMachineLearning_CILearningModelFeatureDescriptor** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CAI__CMachineLearning__CILearningModelFeatureDescriptor* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CAI__CMachineLearning__CILearningModelFeatureDescriptor* This,
        __x_ABI_CWindows_CAI_CMachineLearning_CILearningModelFeatureDescriptor* value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CAI__CMachineLearning__CILearningModelFeatureDescriptor* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        __x_ABI_CWindows_CAI_CMachineLearning_CILearningModelFeatureDescriptor** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CAI__CMachineLearning__CILearningModelFeatureDescriptorVtbl;

    interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CAI__CMachineLearning__CILearningModelFeatureDescriptor
    {
        CONST_VTBL struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CAI__CMachineLearning__CILearningModelFeatureDescriptorVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CAI__CMachineLearning__CILearningModelFeatureDescriptor_INTERFACE_DEFINED__
    
typedef enum __x_ABI_CWindows_CFoundation_CAsyncStatus __x_ABI_CWindows_CFoundation_CAsyncStatus;

#ifndef ____x_ABI_CWindows_CFoundation_CCollections_CIPropertySet_FWD_DEFINED__
#define ____x_ABI_CWindows_CFoundation_CCollections_CIPropertySet_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CFoundation_CCollections_CIPropertySet __x_ABI_CWindows_CFoundation_CCollections_CIPropertySet;

#endif // ____x_ABI_CWindows_CFoundation_CCollections_CIPropertySet_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CFoundation_CIAsyncInfo_FWD_DEFINED__
#define ____x_ABI_CWindows_CFoundation_CIAsyncInfo_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CFoundation_CIAsyncInfo __x_ABI_CWindows_CFoundation_CIAsyncInfo;

#endif // ____x_ABI_CWindows_CFoundation_CIAsyncInfo_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CFoundation_CIClosable_FWD_DEFINED__
#define ____x_ABI_CWindows_CFoundation_CIClosable_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CFoundation_CIClosable __x_ABI_CWindows_CFoundation_CIClosable;

#endif // ____x_ABI_CWindows_CFoundation_CIClosable_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CFoundation_CIMemoryBuffer_FWD_DEFINED__
#define ____x_ABI_CWindows_CFoundation_CIMemoryBuffer_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CFoundation_CIMemoryBuffer __x_ABI_CWindows_CFoundation_CIMemoryBuffer;

#endif // ____x_ABI_CWindows_CFoundation_CIMemoryBuffer_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CGraphics_CDirectX_CDirect3D11_CIDirect3DDevice_FWD_DEFINED__
#define ____x_ABI_CWindows_CGraphics_CDirectX_CDirect3D11_CIDirect3DDevice_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CGraphics_CDirectX_CDirect3D11_CIDirect3DDevice __x_ABI_CWindows_CGraphics_CDirectX_CDirect3D11_CIDirect3DDevice;

#endif // ____x_ABI_CWindows_CGraphics_CDirectX_CDirect3D11_CIDirect3DDevice_FWD_DEFINED__

typedef struct __x_ABI_CWindows_CGraphics_CDisplayAdapterId __x_ABI_CWindows_CGraphics_CDisplayAdapterId;

typedef enum __x_ABI_CWindows_CGraphics_CImaging_CBitmapAlphaMode __x_ABI_CWindows_CGraphics_CImaging_CBitmapAlphaMode;

typedef enum __x_ABI_CWindows_CGraphics_CImaging_CBitmapPixelFormat __x_ABI_CWindows_CGraphics_CImaging_CBitmapPixelFormat;

#ifndef ____x_ABI_CWindows_CMedia_CIVideoFrame_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CIVideoFrame_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_CIVideoFrame __x_ABI_CWindows_CMedia_CIVideoFrame;

#endif // ____x_ABI_CWindows_CMedia_CIVideoFrame_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CStorage_CIStorageFile_FWD_DEFINED__
#define ____x_ABI_CWindows_CStorage_CIStorageFile_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CStorage_CIStorageFile __x_ABI_CWindows_CStorage_CIStorageFile;

#endif // ____x_ABI_CWindows_CStorage_CIStorageFile_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CStorage_CStreams_CIBuffer_FWD_DEFINED__
#define ____x_ABI_CWindows_CStorage_CStreams_CIBuffer_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CStorage_CStreams_CIBuffer __x_ABI_CWindows_CStorage_CStreams_CIBuffer;

#endif // ____x_ABI_CWindows_CStorage_CStreams_CIBuffer_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CStorage_CStreams_CIRandomAccessStreamReference_FWD_DEFINED__
#define ____x_ABI_CWindows_CStorage_CStreams_CIRandomAccessStreamReference_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CStorage_CStreams_CIRandomAccessStreamReference __x_ABI_CWindows_CStorage_CStreams_CIRandomAccessStreamReference;

#endif // ____x_ABI_CWindows_CStorage_CStreams_CIRandomAccessStreamReference_FWD_DEFINED__

typedef enum __x_ABI_CWindows_CAI_CMachineLearning_CLearningModelDeviceKind __x_ABI_CWindows_CAI_CMachineLearning_CLearningModelDeviceKind;

typedef enum __x_ABI_CWindows_CAI_CMachineLearning_CLearningModelFeatureKind __x_ABI_CWindows_CAI_CMachineLearning_CLearningModelFeatureKind;

typedef enum __x_ABI_CWindows_CAI_CMachineLearning_CTensorKind __x_ABI_CWindows_CAI_CMachineLearning_CTensorKind;

enum __x_ABI_CWindows_CAI_CMachineLearning_CLearningModelDeviceKind
    {
        __x_ABI_CWindows_CAI_CMachineLearning_CLearningModelDeviceKind_Default = 0,
    __x_ABI_CWindows_CAI_CMachineLearning_CLearningModelDeviceKind_Cpu = 1,
    __x_ABI_CWindows_CAI_CMachineLearning_CLearningModelDeviceKind_DirectX = 2,
    __x_ABI_CWindows_CAI_CMachineLearning_CLearningModelDeviceKind_DirectXHighPerformance = 3,
    __x_ABI_CWindows_CAI_CMachineLearning_CLearningModelDeviceKind_DirectXMinPower = 4,
};

enum __x_ABI_CWindows_CAI_CMachineLearning_CLearningModelFeatureKind
    {
        __x_ABI_CWindows_CAI_CMachineLearning_CLearningModelFeatureKind_Tensor = 0,
    __x_ABI_CWindows_CAI_CMachineLearning_CLearningModelFeatureKind_Sequence = 1,
    __x_ABI_CWindows_CAI_CMachineLearning_CLearningModelFeatureKind_Map = 2,
    __x_ABI_CWindows_CAI_CMachineLearning_CLearningModelFeatureKind_Image = 3,
};

enum __x_ABI_CWindows_CAI_CMachineLearning_CTensorKind
    {
        __x_ABI_CWindows_CAI_CMachineLearning_CTensorKind_Undefined = 0,
    __x_ABI_CWindows_CAI_CMachineLearning_CTensorKind_Float = 1,
    __x_ABI_CWindows_CAI_CMachineLearning_CTensorKind_UInt8 = 2,
    __x_ABI_CWindows_CAI_CMachineLearning_CTensorKind_Int8 = 3,
    __x_ABI_CWindows_CAI_CMachineLearning_CTensorKind_UInt16 = 4,
    __x_ABI_CWindows_CAI_CMachineLearning_CTensorKind_Int16 = 5,
    __x_ABI_CWindows_CAI_CMachineLearning_CTensorKind_Int32 = 6,
    __x_ABI_CWindows_CAI_CMachineLearning_CTensorKind_Int64 = 7,
    __x_ABI_CWindows_CAI_CMachineLearning_CTensorKind_String = 8,
    __x_ABI_CWindows_CAI_CMachineLearning_CTensorKind_Boolean = 9,
    __x_ABI_CWindows_CAI_CMachineLearning_CTensorKind_Float16 = 10,
    __x_ABI_CWindows_CAI_CMachineLearning_CTensorKind_Double = 11,
    __x_ABI_CWindows_CAI_CMachineLearning_CTensorKind_UInt32 = 12,
    __x_ABI_CWindows_CAI_CMachineLearning_CTensorKind_UInt64 = 13,
    __x_ABI_CWindows_CAI_CMachineLearning_CTensorKind_Complex64 = 14,
    __x_ABI_CWindows_CAI_CMachineLearning_CTensorKind_Complex128 = 15,
};

#if !defined(____x_ABI_CWindows_CAI_CMachineLearning_CIImageFeatureDescriptor_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CAI_CMachineLearning_CIImageFeatureDescriptor_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CAI_CMachineLearning_CIImageFeatureDescriptorVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CAI_CMachineLearning_CIImageFeatureDescriptor* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CAI_CMachineLearning_CIImageFeatureDescriptor* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CAI_CMachineLearning_CIImageFeatureDescriptor* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CAI_CMachineLearning_CIImageFeatureDescriptor* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CAI_CMachineLearning_CIImageFeatureDescriptor* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CAI_CMachineLearning_CIImageFeatureDescriptor* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_BitmapPixelFormat)(__x_ABI_CWindows_CAI_CMachineLearning_CIImageFeatureDescriptor* This,
        enum __x_ABI_CWindows_CGraphics_CImaging_CBitmapPixelFormat* value);
    HRESULT (STDMETHODCALLTYPE* get_BitmapAlphaMode)(__x_ABI_CWindows_CAI_CMachineLearning_CIImageFeatureDescriptor* This,
        enum __x_ABI_CWindows_CGraphics_CImaging_CBitmapAlphaMode* value);
    HRESULT (STDMETHODCALLTYPE* get_Width)(__x_ABI_CWindows_CAI_CMachineLearning_CIImageFeatureDescriptor* This,
        UINT32* value);
    HRESULT (STDMETHODCALLTYPE* get_Height)(__x_ABI_CWindows_CAI_CMachineLearning_CIImageFeatureDescriptor* This,
        UINT32* value);

        END_INTERFACE
    } __x_ABI_CWindows_CAI_CMachineLearning_CIImageFeatureDescriptorVtbl;

    interface __x_ABI_CWindows_CAI_CMachineLearning_CIImageFeatureDescriptor
    {
        CONST_VTBL struct __x_ABI_CWindows_CAI_CMachineLearning_CIImageFeatureDescriptorVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CAI_CMachineLearning_CIImageFeatureDescriptor;
#endif /* !defined(____x_ABI_CWindows_CAI_CMachineLearning_CIImageFeatureDescriptor_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CAI_CMachineLearning_CIImageFeatureValue_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CAI_CMachineLearning_CIImageFeatureValue_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CAI_CMachineLearning_CIImageFeatureValueVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CAI_CMachineLearning_CIImageFeatureValue* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CAI_CMachineLearning_CIImageFeatureValue* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CAI_CMachineLearning_CIImageFeatureValue* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CAI_CMachineLearning_CIImageFeatureValue* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CAI_CMachineLearning_CIImageFeatureValue* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CAI_CMachineLearning_CIImageFeatureValue* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_VideoFrame)(__x_ABI_CWindows_CAI_CMachineLearning_CIImageFeatureValue* This,
        __x_ABI_CWindows_CMedia_CIVideoFrame** value);

        END_INTERFACE
    } __x_ABI_CWindows_CAI_CMachineLearning_CIImageFeatureValueVtbl;

    interface __x_ABI_CWindows_CAI_CMachineLearning_CIImageFeatureValue
    {
        CONST_VTBL struct __x_ABI_CWindows_CAI_CMachineLearning_CIImageFeatureValueVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CAI_CMachineLearning_CIImageFeatureValue;
#endif /* !defined(____x_ABI_CWindows_CAI_CMachineLearning_CIImageFeatureValue_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CAI_CMachineLearning_CIImageFeatureValueStatics_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CAI_CMachineLearning_CIImageFeatureValueStatics_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CAI_CMachineLearning_CIImageFeatureValueStaticsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CAI_CMachineLearning_CIImageFeatureValueStatics* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CAI_CMachineLearning_CIImageFeatureValueStatics* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CAI_CMachineLearning_CIImageFeatureValueStatics* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CAI_CMachineLearning_CIImageFeatureValueStatics* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CAI_CMachineLearning_CIImageFeatureValueStatics* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CAI_CMachineLearning_CIImageFeatureValueStatics* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* CreateFromVideoFrame)(__x_ABI_CWindows_CAI_CMachineLearning_CIImageFeatureValueStatics* This,
        __x_ABI_CWindows_CMedia_CIVideoFrame* image,
        __x_ABI_CWindows_CAI_CMachineLearning_CIImageFeatureValue** result);

        END_INTERFACE
    } __x_ABI_CWindows_CAI_CMachineLearning_CIImageFeatureValueStaticsVtbl;

    interface __x_ABI_CWindows_CAI_CMachineLearning_CIImageFeatureValueStatics
    {
        CONST_VTBL struct __x_ABI_CWindows_CAI_CMachineLearning_CIImageFeatureValueStaticsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CAI_CMachineLearning_CIImageFeatureValueStatics;
#endif /* !defined(____x_ABI_CWindows_CAI_CMachineLearning_CIImageFeatureValueStatics_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CAI_CMachineLearning_CILearningModel_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CAI_CMachineLearning_CILearningModel_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CAI_CMachineLearning_CILearningModelVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CAI_CMachineLearning_CILearningModel* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CAI_CMachineLearning_CILearningModel* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CAI_CMachineLearning_CILearningModel* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CAI_CMachineLearning_CILearningModel* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CAI_CMachineLearning_CILearningModel* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CAI_CMachineLearning_CILearningModel* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Author)(__x_ABI_CWindows_CAI_CMachineLearning_CILearningModel* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_Name)(__x_ABI_CWindows_CAI_CMachineLearning_CILearningModel* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_Domain)(__x_ABI_CWindows_CAI_CMachineLearning_CILearningModel* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_Description)(__x_ABI_CWindows_CAI_CMachineLearning_CILearningModel* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_Version)(__x_ABI_CWindows_CAI_CMachineLearning_CILearningModel* This,
        INT64* value);
    HRESULT (STDMETHODCALLTYPE* get_Metadata)(__x_ABI_CWindows_CAI_CMachineLearning_CILearningModel* This,
        __x_ABI_C__FIMapView_2_HSTRING_HSTRING** value);
    HRESULT (STDMETHODCALLTYPE* get_InputFeatures)(__x_ABI_CWindows_CAI_CMachineLearning_CILearningModel* This,
        __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CAI__CMachineLearning__CILearningModelFeatureDescriptor** value);
    HRESULT (STDMETHODCALLTYPE* get_OutputFeatures)(__x_ABI_CWindows_CAI_CMachineLearning_CILearningModel* This,
        __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CAI__CMachineLearning__CILearningModelFeatureDescriptor** value);

        END_INTERFACE
    } __x_ABI_CWindows_CAI_CMachineLearning_CILearningModelVtbl;

    interface __x_ABI_CWindows_CAI_CMachineLearning_CILearningModel
    {
        CONST_VTBL struct __x_ABI_CWindows_CAI_CMachineLearning_CILearningModelVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CAI_CMachineLearning_CILearningModel;
#endif /* !defined(____x_ABI_CWindows_CAI_CMachineLearning_CILearningModel_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CAI_CMachineLearning_CILearningModelBinding_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CAI_CMachineLearning_CILearningModelBinding_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CAI_CMachineLearning_CILearningModelBindingVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CAI_CMachineLearning_CILearningModelBinding* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CAI_CMachineLearning_CILearningModelBinding* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CAI_CMachineLearning_CILearningModelBinding* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CAI_CMachineLearning_CILearningModelBinding* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CAI_CMachineLearning_CILearningModelBinding* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CAI_CMachineLearning_CILearningModelBinding* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* Bind)(__x_ABI_CWindows_CAI_CMachineLearning_CILearningModelBinding* This,
        HSTRING name,
        IInspectable* value);
    HRESULT (STDMETHODCALLTYPE* BindWithProperties)(__x_ABI_CWindows_CAI_CMachineLearning_CILearningModelBinding* This,
        HSTRING name,
        IInspectable* value,
        __x_ABI_CWindows_CFoundation_CCollections_CIPropertySet* props);
    HRESULT (STDMETHODCALLTYPE* Clear)(__x_ABI_CWindows_CAI_CMachineLearning_CILearningModelBinding* This);

        END_INTERFACE
    } __x_ABI_CWindows_CAI_CMachineLearning_CILearningModelBindingVtbl;

    interface __x_ABI_CWindows_CAI_CMachineLearning_CILearningModelBinding
    {
        CONST_VTBL struct __x_ABI_CWindows_CAI_CMachineLearning_CILearningModelBindingVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CAI_CMachineLearning_CILearningModelBinding;
#endif /* !defined(____x_ABI_CWindows_CAI_CMachineLearning_CILearningModelBinding_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CAI_CMachineLearning_CILearningModelBindingFactory_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CAI_CMachineLearning_CILearningModelBindingFactory_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CAI_CMachineLearning_CILearningModelBindingFactoryVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CAI_CMachineLearning_CILearningModelBindingFactory* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CAI_CMachineLearning_CILearningModelBindingFactory* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CAI_CMachineLearning_CILearningModelBindingFactory* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CAI_CMachineLearning_CILearningModelBindingFactory* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CAI_CMachineLearning_CILearningModelBindingFactory* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CAI_CMachineLearning_CILearningModelBindingFactory* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* CreateFromSession)(__x_ABI_CWindows_CAI_CMachineLearning_CILearningModelBindingFactory* This,
        __x_ABI_CWindows_CAI_CMachineLearning_CILearningModelSession* session,
        __x_ABI_CWindows_CAI_CMachineLearning_CILearningModelBinding** value);

        END_INTERFACE
    } __x_ABI_CWindows_CAI_CMachineLearning_CILearningModelBindingFactoryVtbl;

    interface __x_ABI_CWindows_CAI_CMachineLearning_CILearningModelBindingFactory
    {
        CONST_VTBL struct __x_ABI_CWindows_CAI_CMachineLearning_CILearningModelBindingFactoryVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CAI_CMachineLearning_CILearningModelBindingFactory;
#endif /* !defined(____x_ABI_CWindows_CAI_CMachineLearning_CILearningModelBindingFactory_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CAI_CMachineLearning_CILearningModelDevice_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CAI_CMachineLearning_CILearningModelDevice_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CAI_CMachineLearning_CILearningModelDeviceVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CAI_CMachineLearning_CILearningModelDevice* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CAI_CMachineLearning_CILearningModelDevice* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CAI_CMachineLearning_CILearningModelDevice* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CAI_CMachineLearning_CILearningModelDevice* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CAI_CMachineLearning_CILearningModelDevice* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CAI_CMachineLearning_CILearningModelDevice* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_AdapterId)(__x_ABI_CWindows_CAI_CMachineLearning_CILearningModelDevice* This,
        struct __x_ABI_CWindows_CGraphics_CDisplayAdapterId* value);
    HRESULT (STDMETHODCALLTYPE* get_Direct3D11Device)(__x_ABI_CWindows_CAI_CMachineLearning_CILearningModelDevice* This,
        __x_ABI_CWindows_CGraphics_CDirectX_CDirect3D11_CIDirect3DDevice** value);

        END_INTERFACE
    } __x_ABI_CWindows_CAI_CMachineLearning_CILearningModelDeviceVtbl;

    interface __x_ABI_CWindows_CAI_CMachineLearning_CILearningModelDevice
    {
        CONST_VTBL struct __x_ABI_CWindows_CAI_CMachineLearning_CILearningModelDeviceVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CAI_CMachineLearning_CILearningModelDevice;
#endif /* !defined(____x_ABI_CWindows_CAI_CMachineLearning_CILearningModelDevice_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CAI_CMachineLearning_CILearningModelDeviceFactory_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CAI_CMachineLearning_CILearningModelDeviceFactory_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CAI_CMachineLearning_CILearningModelDeviceFactoryVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CAI_CMachineLearning_CILearningModelDeviceFactory* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CAI_CMachineLearning_CILearningModelDeviceFactory* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CAI_CMachineLearning_CILearningModelDeviceFactory* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CAI_CMachineLearning_CILearningModelDeviceFactory* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CAI_CMachineLearning_CILearningModelDeviceFactory* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CAI_CMachineLearning_CILearningModelDeviceFactory* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* Create)(__x_ABI_CWindows_CAI_CMachineLearning_CILearningModelDeviceFactory* This,
        enum __x_ABI_CWindows_CAI_CMachineLearning_CLearningModelDeviceKind deviceKind,
        __x_ABI_CWindows_CAI_CMachineLearning_CILearningModelDevice** value);

        END_INTERFACE
    } __x_ABI_CWindows_CAI_CMachineLearning_CILearningModelDeviceFactoryVtbl;

    interface __x_ABI_CWindows_CAI_CMachineLearning_CILearningModelDeviceFactory
    {
        CONST_VTBL struct __x_ABI_CWindows_CAI_CMachineLearning_CILearningModelDeviceFactoryVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CAI_CMachineLearning_CILearningModelDeviceFactory;
#endif /* !defined(____x_ABI_CWindows_CAI_CMachineLearning_CILearningModelDeviceFactory_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CAI_CMachineLearning_CILearningModelDeviceStatics_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CAI_CMachineLearning_CILearningModelDeviceStatics_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CAI_CMachineLearning_CILearningModelDeviceStaticsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CAI_CMachineLearning_CILearningModelDeviceStatics* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CAI_CMachineLearning_CILearningModelDeviceStatics* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CAI_CMachineLearning_CILearningModelDeviceStatics* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CAI_CMachineLearning_CILearningModelDeviceStatics* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CAI_CMachineLearning_CILearningModelDeviceStatics* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CAI_CMachineLearning_CILearningModelDeviceStatics* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* CreateFromDirect3D11Device)(__x_ABI_CWindows_CAI_CMachineLearning_CILearningModelDeviceStatics* This,
        __x_ABI_CWindows_CGraphics_CDirectX_CDirect3D11_CIDirect3DDevice* device,
        __x_ABI_CWindows_CAI_CMachineLearning_CILearningModelDevice** result);

        END_INTERFACE
    } __x_ABI_CWindows_CAI_CMachineLearning_CILearningModelDeviceStaticsVtbl;

    interface __x_ABI_CWindows_CAI_CMachineLearning_CILearningModelDeviceStatics
    {
        CONST_VTBL struct __x_ABI_CWindows_CAI_CMachineLearning_CILearningModelDeviceStaticsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CAI_CMachineLearning_CILearningModelDeviceStatics;
#endif /* !defined(____x_ABI_CWindows_CAI_CMachineLearning_CILearningModelDeviceStatics_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CAI_CMachineLearning_CILearningModelEvaluationResult_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CAI_CMachineLearning_CILearningModelEvaluationResult_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CAI_CMachineLearning_CILearningModelEvaluationResultVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CAI_CMachineLearning_CILearningModelEvaluationResult* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CAI_CMachineLearning_CILearningModelEvaluationResult* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CAI_CMachineLearning_CILearningModelEvaluationResult* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CAI_CMachineLearning_CILearningModelEvaluationResult* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CAI_CMachineLearning_CILearningModelEvaluationResult* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CAI_CMachineLearning_CILearningModelEvaluationResult* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_CorrelationId)(__x_ABI_CWindows_CAI_CMachineLearning_CILearningModelEvaluationResult* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_ErrorStatus)(__x_ABI_CWindows_CAI_CMachineLearning_CILearningModelEvaluationResult* This,
        INT32* value);
    HRESULT (STDMETHODCALLTYPE* get_Succeeded)(__x_ABI_CWindows_CAI_CMachineLearning_CILearningModelEvaluationResult* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* get_Outputs)(__x_ABI_CWindows_CAI_CMachineLearning_CILearningModelEvaluationResult* This,
        __x_ABI_C__FIMapView_2_HSTRING_IInspectable** value);

        END_INTERFACE
    } __x_ABI_CWindows_CAI_CMachineLearning_CILearningModelEvaluationResultVtbl;

    interface __x_ABI_CWindows_CAI_CMachineLearning_CILearningModelEvaluationResult
    {
        CONST_VTBL struct __x_ABI_CWindows_CAI_CMachineLearning_CILearningModelEvaluationResultVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CAI_CMachineLearning_CILearningModelEvaluationResult;
#endif /* !defined(____x_ABI_CWindows_CAI_CMachineLearning_CILearningModelEvaluationResult_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CAI_CMachineLearning_CILearningModelFeatureDescriptor_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CAI_CMachineLearning_CILearningModelFeatureDescriptor_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CAI_CMachineLearning_CILearningModelFeatureDescriptorVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CAI_CMachineLearning_CILearningModelFeatureDescriptor* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CAI_CMachineLearning_CILearningModelFeatureDescriptor* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CAI_CMachineLearning_CILearningModelFeatureDescriptor* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CAI_CMachineLearning_CILearningModelFeatureDescriptor* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CAI_CMachineLearning_CILearningModelFeatureDescriptor* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CAI_CMachineLearning_CILearningModelFeatureDescriptor* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Name)(__x_ABI_CWindows_CAI_CMachineLearning_CILearningModelFeatureDescriptor* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_Description)(__x_ABI_CWindows_CAI_CMachineLearning_CILearningModelFeatureDescriptor* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_Kind)(__x_ABI_CWindows_CAI_CMachineLearning_CILearningModelFeatureDescriptor* This,
        enum __x_ABI_CWindows_CAI_CMachineLearning_CLearningModelFeatureKind* value);
    HRESULT (STDMETHODCALLTYPE* get_IsRequired)(__x_ABI_CWindows_CAI_CMachineLearning_CILearningModelFeatureDescriptor* This,
        boolean* value);

        END_INTERFACE
    } __x_ABI_CWindows_CAI_CMachineLearning_CILearningModelFeatureDescriptorVtbl;

    interface __x_ABI_CWindows_CAI_CMachineLearning_CILearningModelFeatureDescriptor
    {
        CONST_VTBL struct __x_ABI_CWindows_CAI_CMachineLearning_CILearningModelFeatureDescriptorVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CAI_CMachineLearning_CILearningModelFeatureDescriptor;
#endif /* !defined(____x_ABI_CWindows_CAI_CMachineLearning_CILearningModelFeatureDescriptor_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CAI_CMachineLearning_CILearningModelFeatureValue_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CAI_CMachineLearning_CILearningModelFeatureValue_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CAI_CMachineLearning_CILearningModelFeatureValueVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CAI_CMachineLearning_CILearningModelFeatureValue* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CAI_CMachineLearning_CILearningModelFeatureValue* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CAI_CMachineLearning_CILearningModelFeatureValue* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CAI_CMachineLearning_CILearningModelFeatureValue* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CAI_CMachineLearning_CILearningModelFeatureValue* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CAI_CMachineLearning_CILearningModelFeatureValue* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Kind)(__x_ABI_CWindows_CAI_CMachineLearning_CILearningModelFeatureValue* This,
        enum __x_ABI_CWindows_CAI_CMachineLearning_CLearningModelFeatureKind* value);

        END_INTERFACE
    } __x_ABI_CWindows_CAI_CMachineLearning_CILearningModelFeatureValueVtbl;

    interface __x_ABI_CWindows_CAI_CMachineLearning_CILearningModelFeatureValue
    {
        CONST_VTBL struct __x_ABI_CWindows_CAI_CMachineLearning_CILearningModelFeatureValueVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CAI_CMachineLearning_CILearningModelFeatureValue;
#endif /* !defined(____x_ABI_CWindows_CAI_CMachineLearning_CILearningModelFeatureValue_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CAI_CMachineLearning_CILearningModelOperatorProvider_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CAI_CMachineLearning_CILearningModelOperatorProvider_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CAI_CMachineLearning_CILearningModelOperatorProviderVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CAI_CMachineLearning_CILearningModelOperatorProvider* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CAI_CMachineLearning_CILearningModelOperatorProvider* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CAI_CMachineLearning_CILearningModelOperatorProvider* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CAI_CMachineLearning_CILearningModelOperatorProvider* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CAI_CMachineLearning_CILearningModelOperatorProvider* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CAI_CMachineLearning_CILearningModelOperatorProvider* This,
            TrustLevel* trustLevel);
    
        END_INTERFACE
    } __x_ABI_CWindows_CAI_CMachineLearning_CILearningModelOperatorProviderVtbl;

    interface __x_ABI_CWindows_CAI_CMachineLearning_CILearningModelOperatorProvider
    {
        CONST_VTBL struct __x_ABI_CWindows_CAI_CMachineLearning_CILearningModelOperatorProviderVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CAI_CMachineLearning_CILearningModelOperatorProvider;
#endif /* !defined(____x_ABI_CWindows_CAI_CMachineLearning_CILearningModelOperatorProvider_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CAI_CMachineLearning_CILearningModelSession_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CAI_CMachineLearning_CILearningModelSession_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CAI_CMachineLearning_CILearningModelSessionVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CAI_CMachineLearning_CILearningModelSession* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CAI_CMachineLearning_CILearningModelSession* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CAI_CMachineLearning_CILearningModelSession* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CAI_CMachineLearning_CILearningModelSession* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CAI_CMachineLearning_CILearningModelSession* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CAI_CMachineLearning_CILearningModelSession* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Model)(__x_ABI_CWindows_CAI_CMachineLearning_CILearningModelSession* This,
        __x_ABI_CWindows_CAI_CMachineLearning_CILearningModel** value);
    HRESULT (STDMETHODCALLTYPE* get_Device)(__x_ABI_CWindows_CAI_CMachineLearning_CILearningModelSession* This,
        __x_ABI_CWindows_CAI_CMachineLearning_CILearningModelDevice** value);
    HRESULT (STDMETHODCALLTYPE* get_EvaluationProperties)(__x_ABI_CWindows_CAI_CMachineLearning_CILearningModelSession* This,
        __x_ABI_CWindows_CFoundation_CCollections_CIPropertySet** value);
    HRESULT (STDMETHODCALLTYPE* EvaluateAsync)(__x_ABI_CWindows_CAI_CMachineLearning_CILearningModelSession* This,
        __x_ABI_CWindows_CAI_CMachineLearning_CILearningModelBinding* bindings,
        HSTRING correlationId,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CAI__CMachineLearning__CLearningModelEvaluationResult** operation);
    HRESULT (STDMETHODCALLTYPE* EvaluateFeaturesAsync)(__x_ABI_CWindows_CAI_CMachineLearning_CILearningModelSession* This,
        __x_ABI_C__FIMap_2_HSTRING_IInspectable* features,
        HSTRING correlationId,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CAI__CMachineLearning__CLearningModelEvaluationResult** operation);
    HRESULT (STDMETHODCALLTYPE* Evaluate)(__x_ABI_CWindows_CAI_CMachineLearning_CILearningModelSession* This,
        __x_ABI_CWindows_CAI_CMachineLearning_CILearningModelBinding* bindings,
        HSTRING correlationId,
        __x_ABI_CWindows_CAI_CMachineLearning_CILearningModelEvaluationResult** result);
    HRESULT (STDMETHODCALLTYPE* EvaluateFeatures)(__x_ABI_CWindows_CAI_CMachineLearning_CILearningModelSession* This,
        __x_ABI_C__FIMap_2_HSTRING_IInspectable* features,
        HSTRING correlationId,
        __x_ABI_CWindows_CAI_CMachineLearning_CILearningModelEvaluationResult** result);

        END_INTERFACE
    } __x_ABI_CWindows_CAI_CMachineLearning_CILearningModelSessionVtbl;

    interface __x_ABI_CWindows_CAI_CMachineLearning_CILearningModelSession
    {
        CONST_VTBL struct __x_ABI_CWindows_CAI_CMachineLearning_CILearningModelSessionVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CAI_CMachineLearning_CILearningModelSession;
#endif /* !defined(____x_ABI_CWindows_CAI_CMachineLearning_CILearningModelSession_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CAI_CMachineLearning_CILearningModelSessionFactory_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CAI_CMachineLearning_CILearningModelSessionFactory_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CAI_CMachineLearning_CILearningModelSessionFactoryVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CAI_CMachineLearning_CILearningModelSessionFactory* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CAI_CMachineLearning_CILearningModelSessionFactory* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CAI_CMachineLearning_CILearningModelSessionFactory* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CAI_CMachineLearning_CILearningModelSessionFactory* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CAI_CMachineLearning_CILearningModelSessionFactory* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CAI_CMachineLearning_CILearningModelSessionFactory* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* CreateFromModel)(__x_ABI_CWindows_CAI_CMachineLearning_CILearningModelSessionFactory* This,
        __x_ABI_CWindows_CAI_CMachineLearning_CILearningModel* model,
        __x_ABI_CWindows_CAI_CMachineLearning_CILearningModelSession** value);
    HRESULT (STDMETHODCALLTYPE* CreateFromModelOnDevice)(__x_ABI_CWindows_CAI_CMachineLearning_CILearningModelSessionFactory* This,
        __x_ABI_CWindows_CAI_CMachineLearning_CILearningModel* model,
        __x_ABI_CWindows_CAI_CMachineLearning_CILearningModelDevice* deviceToRunOn,
        __x_ABI_CWindows_CAI_CMachineLearning_CILearningModelSession** value);

        END_INTERFACE
    } __x_ABI_CWindows_CAI_CMachineLearning_CILearningModelSessionFactoryVtbl;

    interface __x_ABI_CWindows_CAI_CMachineLearning_CILearningModelSessionFactory
    {
        CONST_VTBL struct __x_ABI_CWindows_CAI_CMachineLearning_CILearningModelSessionFactoryVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CAI_CMachineLearning_CILearningModelSessionFactory;
#endif /* !defined(____x_ABI_CWindows_CAI_CMachineLearning_CILearningModelSessionFactory_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CAI_CMachineLearning_CILearningModelSessionFactory2_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CAI_CMachineLearning_CILearningModelSessionFactory2_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CAI_CMachineLearning_CILearningModelSessionFactory2Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CAI_CMachineLearning_CILearningModelSessionFactory2* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CAI_CMachineLearning_CILearningModelSessionFactory2* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CAI_CMachineLearning_CILearningModelSessionFactory2* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CAI_CMachineLearning_CILearningModelSessionFactory2* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CAI_CMachineLearning_CILearningModelSessionFactory2* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CAI_CMachineLearning_CILearningModelSessionFactory2* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* CreateFromModelOnDeviceWithSessionOptions)(__x_ABI_CWindows_CAI_CMachineLearning_CILearningModelSessionFactory2* This,
        __x_ABI_CWindows_CAI_CMachineLearning_CILearningModel* model,
        __x_ABI_CWindows_CAI_CMachineLearning_CILearningModelDevice* deviceToRunOn,
        __x_ABI_CWindows_CAI_CMachineLearning_CILearningModelSessionOptions* learningModelSessionOptions,
        __x_ABI_CWindows_CAI_CMachineLearning_CILearningModelSession** value);

        END_INTERFACE
    } __x_ABI_CWindows_CAI_CMachineLearning_CILearningModelSessionFactory2Vtbl;

    interface __x_ABI_CWindows_CAI_CMachineLearning_CILearningModelSessionFactory2
    {
        CONST_VTBL struct __x_ABI_CWindows_CAI_CMachineLearning_CILearningModelSessionFactory2Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CAI_CMachineLearning_CILearningModelSessionFactory2;
#endif /* !defined(____x_ABI_CWindows_CAI_CMachineLearning_CILearningModelSessionFactory2_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CAI_CMachineLearning_CILearningModelSessionOptions_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CAI_CMachineLearning_CILearningModelSessionOptions_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CAI_CMachineLearning_CILearningModelSessionOptionsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CAI_CMachineLearning_CILearningModelSessionOptions* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CAI_CMachineLearning_CILearningModelSessionOptions* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CAI_CMachineLearning_CILearningModelSessionOptions* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CAI_CMachineLearning_CILearningModelSessionOptions* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CAI_CMachineLearning_CILearningModelSessionOptions* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CAI_CMachineLearning_CILearningModelSessionOptions* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_BatchSizeOverride)(__x_ABI_CWindows_CAI_CMachineLearning_CILearningModelSessionOptions* This,
        UINT32* value);
    HRESULT (STDMETHODCALLTYPE* put_BatchSizeOverride)(__x_ABI_CWindows_CAI_CMachineLearning_CILearningModelSessionOptions* This,
        UINT32 value);

        END_INTERFACE
    } __x_ABI_CWindows_CAI_CMachineLearning_CILearningModelSessionOptionsVtbl;

    interface __x_ABI_CWindows_CAI_CMachineLearning_CILearningModelSessionOptions
    {
        CONST_VTBL struct __x_ABI_CWindows_CAI_CMachineLearning_CILearningModelSessionOptionsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CAI_CMachineLearning_CILearningModelSessionOptions;
#endif /* !defined(____x_ABI_CWindows_CAI_CMachineLearning_CILearningModelSessionOptions_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CAI_CMachineLearning_CILearningModelStatics_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CAI_CMachineLearning_CILearningModelStatics_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CAI_CMachineLearning_CILearningModelStaticsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CAI_CMachineLearning_CILearningModelStatics* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CAI_CMachineLearning_CILearningModelStatics* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CAI_CMachineLearning_CILearningModelStatics* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CAI_CMachineLearning_CILearningModelStatics* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CAI_CMachineLearning_CILearningModelStatics* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CAI_CMachineLearning_CILearningModelStatics* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* LoadFromStorageFileAsync)(__x_ABI_CWindows_CAI_CMachineLearning_CILearningModelStatics* This,
        __x_ABI_CWindows_CStorage_CIStorageFile* modelFile,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CAI__CMachineLearning__CLearningModel** operation);
    HRESULT (STDMETHODCALLTYPE* LoadFromStreamAsync)(__x_ABI_CWindows_CAI_CMachineLearning_CILearningModelStatics* This,
        __x_ABI_CWindows_CStorage_CStreams_CIRandomAccessStreamReference* modelStream,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CAI__CMachineLearning__CLearningModel** operation);
    HRESULT (STDMETHODCALLTYPE* LoadFromFilePath)(__x_ABI_CWindows_CAI_CMachineLearning_CILearningModelStatics* This,
        HSTRING filePath,
        __x_ABI_CWindows_CAI_CMachineLearning_CILearningModel** result);
    HRESULT (STDMETHODCALLTYPE* LoadFromStream)(__x_ABI_CWindows_CAI_CMachineLearning_CILearningModelStatics* This,
        __x_ABI_CWindows_CStorage_CStreams_CIRandomAccessStreamReference* modelStream,
        __x_ABI_CWindows_CAI_CMachineLearning_CILearningModel** result);
    HRESULT (STDMETHODCALLTYPE* LoadFromStorageFileWithOperatorProviderAsync)(__x_ABI_CWindows_CAI_CMachineLearning_CILearningModelStatics* This,
        __x_ABI_CWindows_CStorage_CIStorageFile* modelFile,
        __x_ABI_CWindows_CAI_CMachineLearning_CILearningModelOperatorProvider* operatorProvider,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CAI__CMachineLearning__CLearningModel** operation);
    HRESULT (STDMETHODCALLTYPE* LoadFromStreamWithOperatorProviderAsync)(__x_ABI_CWindows_CAI_CMachineLearning_CILearningModelStatics* This,
        __x_ABI_CWindows_CStorage_CStreams_CIRandomAccessStreamReference* modelStream,
        __x_ABI_CWindows_CAI_CMachineLearning_CILearningModelOperatorProvider* operatorProvider,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CAI__CMachineLearning__CLearningModel** operation);
    HRESULT (STDMETHODCALLTYPE* LoadFromFilePathWithOperatorProvider)(__x_ABI_CWindows_CAI_CMachineLearning_CILearningModelStatics* This,
        HSTRING filePath,
        __x_ABI_CWindows_CAI_CMachineLearning_CILearningModelOperatorProvider* operatorProvider,
        __x_ABI_CWindows_CAI_CMachineLearning_CILearningModel** result);
    HRESULT (STDMETHODCALLTYPE* LoadFromStreamWithOperatorProvider)(__x_ABI_CWindows_CAI_CMachineLearning_CILearningModelStatics* This,
        __x_ABI_CWindows_CStorage_CStreams_CIRandomAccessStreamReference* modelStream,
        __x_ABI_CWindows_CAI_CMachineLearning_CILearningModelOperatorProvider* operatorProvider,
        __x_ABI_CWindows_CAI_CMachineLearning_CILearningModel** result);

        END_INTERFACE
    } __x_ABI_CWindows_CAI_CMachineLearning_CILearningModelStaticsVtbl;

    interface __x_ABI_CWindows_CAI_CMachineLearning_CILearningModelStatics
    {
        CONST_VTBL struct __x_ABI_CWindows_CAI_CMachineLearning_CILearningModelStaticsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CAI_CMachineLearning_CILearningModelStatics;
#endif /* !defined(____x_ABI_CWindows_CAI_CMachineLearning_CILearningModelStatics_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CAI_CMachineLearning_CIMapFeatureDescriptor_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CAI_CMachineLearning_CIMapFeatureDescriptor_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CAI_CMachineLearning_CIMapFeatureDescriptorVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CAI_CMachineLearning_CIMapFeatureDescriptor* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CAI_CMachineLearning_CIMapFeatureDescriptor* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CAI_CMachineLearning_CIMapFeatureDescriptor* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CAI_CMachineLearning_CIMapFeatureDescriptor* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CAI_CMachineLearning_CIMapFeatureDescriptor* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CAI_CMachineLearning_CIMapFeatureDescriptor* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_KeyKind)(__x_ABI_CWindows_CAI_CMachineLearning_CIMapFeatureDescriptor* This,
        enum __x_ABI_CWindows_CAI_CMachineLearning_CTensorKind* value);
    HRESULT (STDMETHODCALLTYPE* get_ValueDescriptor)(__x_ABI_CWindows_CAI_CMachineLearning_CIMapFeatureDescriptor* This,
        __x_ABI_CWindows_CAI_CMachineLearning_CILearningModelFeatureDescriptor** value);

        END_INTERFACE
    } __x_ABI_CWindows_CAI_CMachineLearning_CIMapFeatureDescriptorVtbl;

    interface __x_ABI_CWindows_CAI_CMachineLearning_CIMapFeatureDescriptor
    {
        CONST_VTBL struct __x_ABI_CWindows_CAI_CMachineLearning_CIMapFeatureDescriptorVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CAI_CMachineLearning_CIMapFeatureDescriptor;
#endif /* !defined(____x_ABI_CWindows_CAI_CMachineLearning_CIMapFeatureDescriptor_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CAI_CMachineLearning_CISequenceFeatureDescriptor_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CAI_CMachineLearning_CISequenceFeatureDescriptor_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CAI_CMachineLearning_CISequenceFeatureDescriptorVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CAI_CMachineLearning_CISequenceFeatureDescriptor* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CAI_CMachineLearning_CISequenceFeatureDescriptor* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CAI_CMachineLearning_CISequenceFeatureDescriptor* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CAI_CMachineLearning_CISequenceFeatureDescriptor* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CAI_CMachineLearning_CISequenceFeatureDescriptor* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CAI_CMachineLearning_CISequenceFeatureDescriptor* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_ElementDescriptor)(__x_ABI_CWindows_CAI_CMachineLearning_CISequenceFeatureDescriptor* This,
        __x_ABI_CWindows_CAI_CMachineLearning_CILearningModelFeatureDescriptor** value);

        END_INTERFACE
    } __x_ABI_CWindows_CAI_CMachineLearning_CISequenceFeatureDescriptorVtbl;

    interface __x_ABI_CWindows_CAI_CMachineLearning_CISequenceFeatureDescriptor
    {
        CONST_VTBL struct __x_ABI_CWindows_CAI_CMachineLearning_CISequenceFeatureDescriptorVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CAI_CMachineLearning_CISequenceFeatureDescriptor;
#endif /* !defined(____x_ABI_CWindows_CAI_CMachineLearning_CISequenceFeatureDescriptor_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CAI_CMachineLearning_CITensor_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CAI_CMachineLearning_CITensor_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CAI_CMachineLearning_CITensorVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CAI_CMachineLearning_CITensor* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CAI_CMachineLearning_CITensor* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CAI_CMachineLearning_CITensor* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CAI_CMachineLearning_CITensor* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CAI_CMachineLearning_CITensor* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CAI_CMachineLearning_CITensor* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_TensorKind)(__x_ABI_CWindows_CAI_CMachineLearning_CITensor* This,
        enum __x_ABI_CWindows_CAI_CMachineLearning_CTensorKind* value);
    HRESULT (STDMETHODCALLTYPE* get_Shape)(__x_ABI_CWindows_CAI_CMachineLearning_CITensor* This,
        __x_ABI_C__FIVectorView_1___z__zint64** value);

        END_INTERFACE
    } __x_ABI_CWindows_CAI_CMachineLearning_CITensorVtbl;

    interface __x_ABI_CWindows_CAI_CMachineLearning_CITensor
    {
        CONST_VTBL struct __x_ABI_CWindows_CAI_CMachineLearning_CITensorVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CAI_CMachineLearning_CITensor;
#endif /* !defined(____x_ABI_CWindows_CAI_CMachineLearning_CITensor_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CAI_CMachineLearning_CITensorBoolean_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CAI_CMachineLearning_CITensorBoolean_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CAI_CMachineLearning_CITensorBooleanVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorBoolean* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorBoolean* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorBoolean* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorBoolean* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorBoolean* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorBoolean* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAsVectorView)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorBoolean* This,
        __x_ABI_C__FIVectorView_1_boolean** result);

        END_INTERFACE
    } __x_ABI_CWindows_CAI_CMachineLearning_CITensorBooleanVtbl;

    interface __x_ABI_CWindows_CAI_CMachineLearning_CITensorBoolean
    {
        CONST_VTBL struct __x_ABI_CWindows_CAI_CMachineLearning_CITensorBooleanVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CAI_CMachineLearning_CITensorBoolean;
#endif /* !defined(____x_ABI_CWindows_CAI_CMachineLearning_CITensorBoolean_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CAI_CMachineLearning_CITensorBooleanStatics_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CAI_CMachineLearning_CITensorBooleanStatics_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CAI_CMachineLearning_CITensorBooleanStaticsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorBooleanStatics* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorBooleanStatics* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorBooleanStatics* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorBooleanStatics* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorBooleanStatics* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorBooleanStatics* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* Create)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorBooleanStatics* This,
        __x_ABI_CWindows_CAI_CMachineLearning_CITensorBoolean** result);
    HRESULT (STDMETHODCALLTYPE* Create2)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorBooleanStatics* This,
        __x_ABI_C__FIIterable_1___z__zint64* shape,
        __x_ABI_CWindows_CAI_CMachineLearning_CITensorBoolean** result);
    HRESULT (STDMETHODCALLTYPE* CreateFromArray)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorBooleanStatics* This,
        __x_ABI_C__FIIterable_1___z__zint64* shape,
        UINT32 dataLength,
        boolean* data,
        __x_ABI_CWindows_CAI_CMachineLearning_CITensorBoolean** result);
    HRESULT (STDMETHODCALLTYPE* CreateFromIterable)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorBooleanStatics* This,
        __x_ABI_C__FIIterable_1___z__zint64* shape,
        __x_ABI_C__FIIterable_1_boolean* data,
        __x_ABI_CWindows_CAI_CMachineLearning_CITensorBoolean** result);

        END_INTERFACE
    } __x_ABI_CWindows_CAI_CMachineLearning_CITensorBooleanStaticsVtbl;

    interface __x_ABI_CWindows_CAI_CMachineLearning_CITensorBooleanStatics
    {
        CONST_VTBL struct __x_ABI_CWindows_CAI_CMachineLearning_CITensorBooleanStaticsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CAI_CMachineLearning_CITensorBooleanStatics;
#endif /* !defined(____x_ABI_CWindows_CAI_CMachineLearning_CITensorBooleanStatics_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CAI_CMachineLearning_CITensorBooleanStatics2_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CAI_CMachineLearning_CITensorBooleanStatics2_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CAI_CMachineLearning_CITensorBooleanStatics2Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorBooleanStatics2* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorBooleanStatics2* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorBooleanStatics2* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorBooleanStatics2* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorBooleanStatics2* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorBooleanStatics2* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* CreateFromShapeArrayAndDataArray)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorBooleanStatics2* This,
        UINT32 shapeLength,
        INT64* shape,
        UINT32 dataLength,
        boolean* data,
        __x_ABI_CWindows_CAI_CMachineLearning_CITensorBoolean** result);
    HRESULT (STDMETHODCALLTYPE* CreateFromBuffer)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorBooleanStatics2* This,
        UINT32 shapeLength,
        INT64* shape,
        __x_ABI_CWindows_CStorage_CStreams_CIBuffer* buffer,
        __x_ABI_CWindows_CAI_CMachineLearning_CITensorBoolean** result);

        END_INTERFACE
    } __x_ABI_CWindows_CAI_CMachineLearning_CITensorBooleanStatics2Vtbl;

    interface __x_ABI_CWindows_CAI_CMachineLearning_CITensorBooleanStatics2
    {
        CONST_VTBL struct __x_ABI_CWindows_CAI_CMachineLearning_CITensorBooleanStatics2Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CAI_CMachineLearning_CITensorBooleanStatics2;
#endif /* !defined(____x_ABI_CWindows_CAI_CMachineLearning_CITensorBooleanStatics2_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CAI_CMachineLearning_CITensorDouble_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CAI_CMachineLearning_CITensorDouble_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CAI_CMachineLearning_CITensorDoubleVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorDouble* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorDouble* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorDouble* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorDouble* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorDouble* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorDouble* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAsVectorView)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorDouble* This,
        __x_ABI_C__FIVectorView_1_double** result);

        END_INTERFACE
    } __x_ABI_CWindows_CAI_CMachineLearning_CITensorDoubleVtbl;

    interface __x_ABI_CWindows_CAI_CMachineLearning_CITensorDouble
    {
        CONST_VTBL struct __x_ABI_CWindows_CAI_CMachineLearning_CITensorDoubleVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CAI_CMachineLearning_CITensorDouble;
#endif /* !defined(____x_ABI_CWindows_CAI_CMachineLearning_CITensorDouble_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CAI_CMachineLearning_CITensorDoubleStatics_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CAI_CMachineLearning_CITensorDoubleStatics_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CAI_CMachineLearning_CITensorDoubleStaticsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorDoubleStatics* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorDoubleStatics* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorDoubleStatics* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorDoubleStatics* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorDoubleStatics* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorDoubleStatics* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* Create)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorDoubleStatics* This,
        __x_ABI_CWindows_CAI_CMachineLearning_CITensorDouble** result);
    HRESULT (STDMETHODCALLTYPE* Create2)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorDoubleStatics* This,
        __x_ABI_C__FIIterable_1___z__zint64* shape,
        __x_ABI_CWindows_CAI_CMachineLearning_CITensorDouble** result);
    HRESULT (STDMETHODCALLTYPE* CreateFromArray)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorDoubleStatics* This,
        __x_ABI_C__FIIterable_1___z__zint64* shape,
        UINT32 dataLength,
        DOUBLE* data,
        __x_ABI_CWindows_CAI_CMachineLearning_CITensorDouble** result);
    HRESULT (STDMETHODCALLTYPE* CreateFromIterable)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorDoubleStatics* This,
        __x_ABI_C__FIIterable_1___z__zint64* shape,
        __x_ABI_C__FIIterable_1_double* data,
        __x_ABI_CWindows_CAI_CMachineLearning_CITensorDouble** result);

        END_INTERFACE
    } __x_ABI_CWindows_CAI_CMachineLearning_CITensorDoubleStaticsVtbl;

    interface __x_ABI_CWindows_CAI_CMachineLearning_CITensorDoubleStatics
    {
        CONST_VTBL struct __x_ABI_CWindows_CAI_CMachineLearning_CITensorDoubleStaticsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CAI_CMachineLearning_CITensorDoubleStatics;
#endif /* !defined(____x_ABI_CWindows_CAI_CMachineLearning_CITensorDoubleStatics_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CAI_CMachineLearning_CITensorDoubleStatics2_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CAI_CMachineLearning_CITensorDoubleStatics2_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CAI_CMachineLearning_CITensorDoubleStatics2Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorDoubleStatics2* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorDoubleStatics2* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorDoubleStatics2* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorDoubleStatics2* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorDoubleStatics2* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorDoubleStatics2* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* CreateFromShapeArrayAndDataArray)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorDoubleStatics2* This,
        UINT32 shapeLength,
        INT64* shape,
        UINT32 dataLength,
        DOUBLE* data,
        __x_ABI_CWindows_CAI_CMachineLearning_CITensorDouble** result);
    HRESULT (STDMETHODCALLTYPE* CreateFromBuffer)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorDoubleStatics2* This,
        UINT32 shapeLength,
        INT64* shape,
        __x_ABI_CWindows_CStorage_CStreams_CIBuffer* buffer,
        __x_ABI_CWindows_CAI_CMachineLearning_CITensorDouble** result);

        END_INTERFACE
    } __x_ABI_CWindows_CAI_CMachineLearning_CITensorDoubleStatics2Vtbl;

    interface __x_ABI_CWindows_CAI_CMachineLearning_CITensorDoubleStatics2
    {
        CONST_VTBL struct __x_ABI_CWindows_CAI_CMachineLearning_CITensorDoubleStatics2Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CAI_CMachineLearning_CITensorDoubleStatics2;
#endif /* !defined(____x_ABI_CWindows_CAI_CMachineLearning_CITensorDoubleStatics2_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CAI_CMachineLearning_CITensorFeatureDescriptor_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CAI_CMachineLearning_CITensorFeatureDescriptor_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CAI_CMachineLearning_CITensorFeatureDescriptorVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorFeatureDescriptor* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorFeatureDescriptor* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorFeatureDescriptor* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorFeatureDescriptor* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorFeatureDescriptor* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorFeatureDescriptor* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_TensorKind)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorFeatureDescriptor* This,
        enum __x_ABI_CWindows_CAI_CMachineLearning_CTensorKind* value);
    HRESULT (STDMETHODCALLTYPE* get_Shape)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorFeatureDescriptor* This,
        __x_ABI_C__FIVectorView_1___z__zint64** value);

        END_INTERFACE
    } __x_ABI_CWindows_CAI_CMachineLearning_CITensorFeatureDescriptorVtbl;

    interface __x_ABI_CWindows_CAI_CMachineLearning_CITensorFeatureDescriptor
    {
        CONST_VTBL struct __x_ABI_CWindows_CAI_CMachineLearning_CITensorFeatureDescriptorVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CAI_CMachineLearning_CITensorFeatureDescriptor;
#endif /* !defined(____x_ABI_CWindows_CAI_CMachineLearning_CITensorFeatureDescriptor_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CAI_CMachineLearning_CITensorFloat_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CAI_CMachineLearning_CITensorFloat_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CAI_CMachineLearning_CITensorFloatVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorFloat* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorFloat* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorFloat* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorFloat* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorFloat* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorFloat* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAsVectorView)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorFloat* This,
        __x_ABI_C__FIVectorView_1_float** result);

        END_INTERFACE
    } __x_ABI_CWindows_CAI_CMachineLearning_CITensorFloatVtbl;

    interface __x_ABI_CWindows_CAI_CMachineLearning_CITensorFloat
    {
        CONST_VTBL struct __x_ABI_CWindows_CAI_CMachineLearning_CITensorFloatVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CAI_CMachineLearning_CITensorFloat;
#endif /* !defined(____x_ABI_CWindows_CAI_CMachineLearning_CITensorFloat_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CAI_CMachineLearning_CITensorFloat16Bit_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CAI_CMachineLearning_CITensorFloat16Bit_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CAI_CMachineLearning_CITensorFloat16BitVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorFloat16Bit* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorFloat16Bit* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorFloat16Bit* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorFloat16Bit* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorFloat16Bit* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorFloat16Bit* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAsVectorView)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorFloat16Bit* This,
        __x_ABI_C__FIVectorView_1_float** result);

        END_INTERFACE
    } __x_ABI_CWindows_CAI_CMachineLearning_CITensorFloat16BitVtbl;

    interface __x_ABI_CWindows_CAI_CMachineLearning_CITensorFloat16Bit
    {
        CONST_VTBL struct __x_ABI_CWindows_CAI_CMachineLearning_CITensorFloat16BitVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CAI_CMachineLearning_CITensorFloat16Bit;
#endif /* !defined(____x_ABI_CWindows_CAI_CMachineLearning_CITensorFloat16Bit_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CAI_CMachineLearning_CITensorFloat16BitStatics_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CAI_CMachineLearning_CITensorFloat16BitStatics_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CAI_CMachineLearning_CITensorFloat16BitStaticsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorFloat16BitStatics* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorFloat16BitStatics* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorFloat16BitStatics* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorFloat16BitStatics* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorFloat16BitStatics* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorFloat16BitStatics* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* Create)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorFloat16BitStatics* This,
        __x_ABI_CWindows_CAI_CMachineLearning_CITensorFloat16Bit** result);
    HRESULT (STDMETHODCALLTYPE* Create2)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorFloat16BitStatics* This,
        __x_ABI_C__FIIterable_1___z__zint64* shape,
        __x_ABI_CWindows_CAI_CMachineLearning_CITensorFloat16Bit** result);
    HRESULT (STDMETHODCALLTYPE* CreateFromArray)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorFloat16BitStatics* This,
        __x_ABI_C__FIIterable_1___z__zint64* shape,
        UINT32 dataLength,
        FLOAT* data,
        __x_ABI_CWindows_CAI_CMachineLearning_CITensorFloat16Bit** result);
    HRESULT (STDMETHODCALLTYPE* CreateFromIterable)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorFloat16BitStatics* This,
        __x_ABI_C__FIIterable_1___z__zint64* shape,
        __x_ABI_C__FIIterable_1_float* data,
        __x_ABI_CWindows_CAI_CMachineLearning_CITensorFloat16Bit** result);

        END_INTERFACE
    } __x_ABI_CWindows_CAI_CMachineLearning_CITensorFloat16BitStaticsVtbl;

    interface __x_ABI_CWindows_CAI_CMachineLearning_CITensorFloat16BitStatics
    {
        CONST_VTBL struct __x_ABI_CWindows_CAI_CMachineLearning_CITensorFloat16BitStaticsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CAI_CMachineLearning_CITensorFloat16BitStatics;
#endif /* !defined(____x_ABI_CWindows_CAI_CMachineLearning_CITensorFloat16BitStatics_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CAI_CMachineLearning_CITensorFloat16BitStatics2_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CAI_CMachineLearning_CITensorFloat16BitStatics2_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CAI_CMachineLearning_CITensorFloat16BitStatics2Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorFloat16BitStatics2* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorFloat16BitStatics2* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorFloat16BitStatics2* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorFloat16BitStatics2* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorFloat16BitStatics2* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorFloat16BitStatics2* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* CreateFromShapeArrayAndDataArray)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorFloat16BitStatics2* This,
        UINT32 shapeLength,
        INT64* shape,
        UINT32 dataLength,
        FLOAT* data,
        __x_ABI_CWindows_CAI_CMachineLearning_CITensorFloat16Bit** result);
    HRESULT (STDMETHODCALLTYPE* CreateFromBuffer)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorFloat16BitStatics2* This,
        UINT32 shapeLength,
        INT64* shape,
        __x_ABI_CWindows_CStorage_CStreams_CIBuffer* buffer,
        __x_ABI_CWindows_CAI_CMachineLearning_CITensorFloat16Bit** result);

        END_INTERFACE
    } __x_ABI_CWindows_CAI_CMachineLearning_CITensorFloat16BitStatics2Vtbl;

    interface __x_ABI_CWindows_CAI_CMachineLearning_CITensorFloat16BitStatics2
    {
        CONST_VTBL struct __x_ABI_CWindows_CAI_CMachineLearning_CITensorFloat16BitStatics2Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CAI_CMachineLearning_CITensorFloat16BitStatics2;
#endif /* !defined(____x_ABI_CWindows_CAI_CMachineLearning_CITensorFloat16BitStatics2_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CAI_CMachineLearning_CITensorFloatStatics_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CAI_CMachineLearning_CITensorFloatStatics_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CAI_CMachineLearning_CITensorFloatStaticsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorFloatStatics* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorFloatStatics* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorFloatStatics* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorFloatStatics* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorFloatStatics* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorFloatStatics* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* Create)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorFloatStatics* This,
        __x_ABI_CWindows_CAI_CMachineLearning_CITensorFloat** result);
    HRESULT (STDMETHODCALLTYPE* Create2)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorFloatStatics* This,
        __x_ABI_C__FIIterable_1___z__zint64* shape,
        __x_ABI_CWindows_CAI_CMachineLearning_CITensorFloat** result);
    HRESULT (STDMETHODCALLTYPE* CreateFromArray)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorFloatStatics* This,
        __x_ABI_C__FIIterable_1___z__zint64* shape,
        UINT32 dataLength,
        FLOAT* data,
        __x_ABI_CWindows_CAI_CMachineLearning_CITensorFloat** result);
    HRESULT (STDMETHODCALLTYPE* CreateFromIterable)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorFloatStatics* This,
        __x_ABI_C__FIIterable_1___z__zint64* shape,
        __x_ABI_C__FIIterable_1_float* data,
        __x_ABI_CWindows_CAI_CMachineLearning_CITensorFloat** result);

        END_INTERFACE
    } __x_ABI_CWindows_CAI_CMachineLearning_CITensorFloatStaticsVtbl;

    interface __x_ABI_CWindows_CAI_CMachineLearning_CITensorFloatStatics
    {
        CONST_VTBL struct __x_ABI_CWindows_CAI_CMachineLearning_CITensorFloatStaticsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CAI_CMachineLearning_CITensorFloatStatics;
#endif /* !defined(____x_ABI_CWindows_CAI_CMachineLearning_CITensorFloatStatics_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CAI_CMachineLearning_CITensorFloatStatics2_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CAI_CMachineLearning_CITensorFloatStatics2_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CAI_CMachineLearning_CITensorFloatStatics2Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorFloatStatics2* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorFloatStatics2* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorFloatStatics2* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorFloatStatics2* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorFloatStatics2* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorFloatStatics2* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* CreateFromShapeArrayAndDataArray)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorFloatStatics2* This,
        UINT32 shapeLength,
        INT64* shape,
        UINT32 dataLength,
        FLOAT* data,
        __x_ABI_CWindows_CAI_CMachineLearning_CITensorFloat** result);
    HRESULT (STDMETHODCALLTYPE* CreateFromBuffer)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorFloatStatics2* This,
        UINT32 shapeLength,
        INT64* shape,
        __x_ABI_CWindows_CStorage_CStreams_CIBuffer* buffer,
        __x_ABI_CWindows_CAI_CMachineLearning_CITensorFloat** result);

        END_INTERFACE
    } __x_ABI_CWindows_CAI_CMachineLearning_CITensorFloatStatics2Vtbl;

    interface __x_ABI_CWindows_CAI_CMachineLearning_CITensorFloatStatics2
    {
        CONST_VTBL struct __x_ABI_CWindows_CAI_CMachineLearning_CITensorFloatStatics2Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CAI_CMachineLearning_CITensorFloatStatics2;
#endif /* !defined(____x_ABI_CWindows_CAI_CMachineLearning_CITensorFloatStatics2_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CAI_CMachineLearning_CITensorInt16Bit_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CAI_CMachineLearning_CITensorInt16Bit_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CAI_CMachineLearning_CITensorInt16BitVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorInt16Bit* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorInt16Bit* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorInt16Bit* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorInt16Bit* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorInt16Bit* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorInt16Bit* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAsVectorView)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorInt16Bit* This,
        __x_ABI_C__FIVectorView_1_short** result);

        END_INTERFACE
    } __x_ABI_CWindows_CAI_CMachineLearning_CITensorInt16BitVtbl;

    interface __x_ABI_CWindows_CAI_CMachineLearning_CITensorInt16Bit
    {
        CONST_VTBL struct __x_ABI_CWindows_CAI_CMachineLearning_CITensorInt16BitVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CAI_CMachineLearning_CITensorInt16Bit;
#endif /* !defined(____x_ABI_CWindows_CAI_CMachineLearning_CITensorInt16Bit_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CAI_CMachineLearning_CITensorInt16BitStatics_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CAI_CMachineLearning_CITensorInt16BitStatics_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CAI_CMachineLearning_CITensorInt16BitStaticsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorInt16BitStatics* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorInt16BitStatics* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorInt16BitStatics* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorInt16BitStatics* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorInt16BitStatics* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorInt16BitStatics* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* Create)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorInt16BitStatics* This,
        __x_ABI_CWindows_CAI_CMachineLearning_CITensorInt16Bit** result);
    HRESULT (STDMETHODCALLTYPE* Create2)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorInt16BitStatics* This,
        __x_ABI_C__FIIterable_1___z__zint64* shape,
        __x_ABI_CWindows_CAI_CMachineLearning_CITensorInt16Bit** result);
    HRESULT (STDMETHODCALLTYPE* CreateFromArray)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorInt16BitStatics* This,
        __x_ABI_C__FIIterable_1___z__zint64* shape,
        UINT32 dataLength,
        INT16* data,
        __x_ABI_CWindows_CAI_CMachineLearning_CITensorInt16Bit** result);
    HRESULT (STDMETHODCALLTYPE* CreateFromIterable)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorInt16BitStatics* This,
        __x_ABI_C__FIIterable_1___z__zint64* shape,
        __x_ABI_C__FIIterable_1_short* data,
        __x_ABI_CWindows_CAI_CMachineLearning_CITensorInt16Bit** result);

        END_INTERFACE
    } __x_ABI_CWindows_CAI_CMachineLearning_CITensorInt16BitStaticsVtbl;

    interface __x_ABI_CWindows_CAI_CMachineLearning_CITensorInt16BitStatics
    {
        CONST_VTBL struct __x_ABI_CWindows_CAI_CMachineLearning_CITensorInt16BitStaticsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CAI_CMachineLearning_CITensorInt16BitStatics;
#endif /* !defined(____x_ABI_CWindows_CAI_CMachineLearning_CITensorInt16BitStatics_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CAI_CMachineLearning_CITensorInt16BitStatics2_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CAI_CMachineLearning_CITensorInt16BitStatics2_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CAI_CMachineLearning_CITensorInt16BitStatics2Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorInt16BitStatics2* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorInt16BitStatics2* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorInt16BitStatics2* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorInt16BitStatics2* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorInt16BitStatics2* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorInt16BitStatics2* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* CreateFromShapeArrayAndDataArray)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorInt16BitStatics2* This,
        UINT32 shapeLength,
        INT64* shape,
        UINT32 dataLength,
        INT16* data,
        __x_ABI_CWindows_CAI_CMachineLearning_CITensorInt16Bit** result);
    HRESULT (STDMETHODCALLTYPE* CreateFromBuffer)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorInt16BitStatics2* This,
        UINT32 shapeLength,
        INT64* shape,
        __x_ABI_CWindows_CStorage_CStreams_CIBuffer* buffer,
        __x_ABI_CWindows_CAI_CMachineLearning_CITensorInt16Bit** result);

        END_INTERFACE
    } __x_ABI_CWindows_CAI_CMachineLearning_CITensorInt16BitStatics2Vtbl;

    interface __x_ABI_CWindows_CAI_CMachineLearning_CITensorInt16BitStatics2
    {
        CONST_VTBL struct __x_ABI_CWindows_CAI_CMachineLearning_CITensorInt16BitStatics2Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CAI_CMachineLearning_CITensorInt16BitStatics2;
#endif /* !defined(____x_ABI_CWindows_CAI_CMachineLearning_CITensorInt16BitStatics2_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CAI_CMachineLearning_CITensorInt32Bit_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CAI_CMachineLearning_CITensorInt32Bit_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CAI_CMachineLearning_CITensorInt32BitVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorInt32Bit* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorInt32Bit* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorInt32Bit* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorInt32Bit* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorInt32Bit* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorInt32Bit* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAsVectorView)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorInt32Bit* This,
        __x_ABI_C__FIVectorView_1_int** result);

        END_INTERFACE
    } __x_ABI_CWindows_CAI_CMachineLearning_CITensorInt32BitVtbl;

    interface __x_ABI_CWindows_CAI_CMachineLearning_CITensorInt32Bit
    {
        CONST_VTBL struct __x_ABI_CWindows_CAI_CMachineLearning_CITensorInt32BitVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CAI_CMachineLearning_CITensorInt32Bit;
#endif /* !defined(____x_ABI_CWindows_CAI_CMachineLearning_CITensorInt32Bit_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CAI_CMachineLearning_CITensorInt32BitStatics_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CAI_CMachineLearning_CITensorInt32BitStatics_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CAI_CMachineLearning_CITensorInt32BitStaticsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorInt32BitStatics* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorInt32BitStatics* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorInt32BitStatics* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorInt32BitStatics* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorInt32BitStatics* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorInt32BitStatics* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* Create)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorInt32BitStatics* This,
        __x_ABI_CWindows_CAI_CMachineLearning_CITensorInt32Bit** result);
    HRESULT (STDMETHODCALLTYPE* Create2)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorInt32BitStatics* This,
        __x_ABI_C__FIIterable_1___z__zint64* shape,
        __x_ABI_CWindows_CAI_CMachineLearning_CITensorInt32Bit** result);
    HRESULT (STDMETHODCALLTYPE* CreateFromArray)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorInt32BitStatics* This,
        __x_ABI_C__FIIterable_1___z__zint64* shape,
        UINT32 dataLength,
        INT32* data,
        __x_ABI_CWindows_CAI_CMachineLearning_CITensorInt32Bit** result);
    HRESULT (STDMETHODCALLTYPE* CreateFromIterable)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorInt32BitStatics* This,
        __x_ABI_C__FIIterable_1___z__zint64* shape,
        __x_ABI_C__FIIterable_1_int* data,
        __x_ABI_CWindows_CAI_CMachineLearning_CITensorInt32Bit** result);

        END_INTERFACE
    } __x_ABI_CWindows_CAI_CMachineLearning_CITensorInt32BitStaticsVtbl;

    interface __x_ABI_CWindows_CAI_CMachineLearning_CITensorInt32BitStatics
    {
        CONST_VTBL struct __x_ABI_CWindows_CAI_CMachineLearning_CITensorInt32BitStaticsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CAI_CMachineLearning_CITensorInt32BitStatics;
#endif /* !defined(____x_ABI_CWindows_CAI_CMachineLearning_CITensorInt32BitStatics_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CAI_CMachineLearning_CITensorInt32BitStatics2_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CAI_CMachineLearning_CITensorInt32BitStatics2_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CAI_CMachineLearning_CITensorInt32BitStatics2Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorInt32BitStatics2* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorInt32BitStatics2* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorInt32BitStatics2* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorInt32BitStatics2* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorInt32BitStatics2* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorInt32BitStatics2* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* CreateFromShapeArrayAndDataArray)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorInt32BitStatics2* This,
        UINT32 shapeLength,
        INT64* shape,
        UINT32 dataLength,
        INT32* data,
        __x_ABI_CWindows_CAI_CMachineLearning_CITensorInt32Bit** result);
    HRESULT (STDMETHODCALLTYPE* CreateFromBuffer)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorInt32BitStatics2* This,
        UINT32 shapeLength,
        INT64* shape,
        __x_ABI_CWindows_CStorage_CStreams_CIBuffer* buffer,
        __x_ABI_CWindows_CAI_CMachineLearning_CITensorInt32Bit** result);

        END_INTERFACE
    } __x_ABI_CWindows_CAI_CMachineLearning_CITensorInt32BitStatics2Vtbl;

    interface __x_ABI_CWindows_CAI_CMachineLearning_CITensorInt32BitStatics2
    {
        CONST_VTBL struct __x_ABI_CWindows_CAI_CMachineLearning_CITensorInt32BitStatics2Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CAI_CMachineLearning_CITensorInt32BitStatics2;
#endif /* !defined(____x_ABI_CWindows_CAI_CMachineLearning_CITensorInt32BitStatics2_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CAI_CMachineLearning_CITensorInt64Bit_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CAI_CMachineLearning_CITensorInt64Bit_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CAI_CMachineLearning_CITensorInt64BitVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorInt64Bit* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorInt64Bit* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorInt64Bit* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorInt64Bit* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorInt64Bit* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorInt64Bit* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAsVectorView)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorInt64Bit* This,
        __x_ABI_C__FIVectorView_1___z__zint64** result);

        END_INTERFACE
    } __x_ABI_CWindows_CAI_CMachineLearning_CITensorInt64BitVtbl;

    interface __x_ABI_CWindows_CAI_CMachineLearning_CITensorInt64Bit
    {
        CONST_VTBL struct __x_ABI_CWindows_CAI_CMachineLearning_CITensorInt64BitVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CAI_CMachineLearning_CITensorInt64Bit;
#endif /* !defined(____x_ABI_CWindows_CAI_CMachineLearning_CITensorInt64Bit_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CAI_CMachineLearning_CITensorInt64BitStatics_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CAI_CMachineLearning_CITensorInt64BitStatics_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CAI_CMachineLearning_CITensorInt64BitStaticsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorInt64BitStatics* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorInt64BitStatics* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorInt64BitStatics* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorInt64BitStatics* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorInt64BitStatics* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorInt64BitStatics* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* Create)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorInt64BitStatics* This,
        __x_ABI_CWindows_CAI_CMachineLearning_CITensorInt64Bit** result);
    HRESULT (STDMETHODCALLTYPE* Create2)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorInt64BitStatics* This,
        __x_ABI_C__FIIterable_1___z__zint64* shape,
        __x_ABI_CWindows_CAI_CMachineLearning_CITensorInt64Bit** result);
    HRESULT (STDMETHODCALLTYPE* CreateFromArray)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorInt64BitStatics* This,
        __x_ABI_C__FIIterable_1___z__zint64* shape,
        UINT32 dataLength,
        INT64* data,
        __x_ABI_CWindows_CAI_CMachineLearning_CITensorInt64Bit** result);
    HRESULT (STDMETHODCALLTYPE* CreateFromIterable)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorInt64BitStatics* This,
        __x_ABI_C__FIIterable_1___z__zint64* shape,
        __x_ABI_C__FIIterable_1___z__zint64* data,
        __x_ABI_CWindows_CAI_CMachineLearning_CITensorInt64Bit** result);

        END_INTERFACE
    } __x_ABI_CWindows_CAI_CMachineLearning_CITensorInt64BitStaticsVtbl;

    interface __x_ABI_CWindows_CAI_CMachineLearning_CITensorInt64BitStatics
    {
        CONST_VTBL struct __x_ABI_CWindows_CAI_CMachineLearning_CITensorInt64BitStaticsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CAI_CMachineLearning_CITensorInt64BitStatics;
#endif /* !defined(____x_ABI_CWindows_CAI_CMachineLearning_CITensorInt64BitStatics_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CAI_CMachineLearning_CITensorInt64BitStatics2_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CAI_CMachineLearning_CITensorInt64BitStatics2_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CAI_CMachineLearning_CITensorInt64BitStatics2Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorInt64BitStatics2* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorInt64BitStatics2* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorInt64BitStatics2* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorInt64BitStatics2* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorInt64BitStatics2* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorInt64BitStatics2* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* CreateFromShapeArrayAndDataArray)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorInt64BitStatics2* This,
        UINT32 shapeLength,
        INT64* shape,
        UINT32 dataLength,
        INT64* data,
        __x_ABI_CWindows_CAI_CMachineLearning_CITensorInt64Bit** result);
    HRESULT (STDMETHODCALLTYPE* CreateFromBuffer)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorInt64BitStatics2* This,
        UINT32 shapeLength,
        INT64* shape,
        __x_ABI_CWindows_CStorage_CStreams_CIBuffer* buffer,
        __x_ABI_CWindows_CAI_CMachineLearning_CITensorInt64Bit** result);

        END_INTERFACE
    } __x_ABI_CWindows_CAI_CMachineLearning_CITensorInt64BitStatics2Vtbl;

    interface __x_ABI_CWindows_CAI_CMachineLearning_CITensorInt64BitStatics2
    {
        CONST_VTBL struct __x_ABI_CWindows_CAI_CMachineLearning_CITensorInt64BitStatics2Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CAI_CMachineLearning_CITensorInt64BitStatics2;
#endif /* !defined(____x_ABI_CWindows_CAI_CMachineLearning_CITensorInt64BitStatics2_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CAI_CMachineLearning_CITensorInt8Bit_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CAI_CMachineLearning_CITensorInt8Bit_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CAI_CMachineLearning_CITensorInt8BitVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorInt8Bit* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorInt8Bit* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorInt8Bit* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorInt8Bit* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorInt8Bit* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorInt8Bit* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAsVectorView)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorInt8Bit* This,
        __x_ABI_C__FIVectorView_1_byte** result);

        END_INTERFACE
    } __x_ABI_CWindows_CAI_CMachineLearning_CITensorInt8BitVtbl;

    interface __x_ABI_CWindows_CAI_CMachineLearning_CITensorInt8Bit
    {
        CONST_VTBL struct __x_ABI_CWindows_CAI_CMachineLearning_CITensorInt8BitVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CAI_CMachineLearning_CITensorInt8Bit;
#endif /* !defined(____x_ABI_CWindows_CAI_CMachineLearning_CITensorInt8Bit_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CAI_CMachineLearning_CITensorInt8BitStatics_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CAI_CMachineLearning_CITensorInt8BitStatics_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CAI_CMachineLearning_CITensorInt8BitStaticsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorInt8BitStatics* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorInt8BitStatics* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorInt8BitStatics* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorInt8BitStatics* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorInt8BitStatics* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorInt8BitStatics* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* Create)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorInt8BitStatics* This,
        __x_ABI_CWindows_CAI_CMachineLearning_CITensorInt8Bit** result);
    HRESULT (STDMETHODCALLTYPE* Create2)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorInt8BitStatics* This,
        __x_ABI_C__FIIterable_1___z__zint64* shape,
        __x_ABI_CWindows_CAI_CMachineLearning_CITensorInt8Bit** result);
    HRESULT (STDMETHODCALLTYPE* CreateFromArray)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorInt8BitStatics* This,
        __x_ABI_C__FIIterable_1___z__zint64* shape,
        UINT32 dataLength,
        BYTE* data,
        __x_ABI_CWindows_CAI_CMachineLearning_CITensorInt8Bit** result);
    HRESULT (STDMETHODCALLTYPE* CreateFromIterable)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorInt8BitStatics* This,
        __x_ABI_C__FIIterable_1___z__zint64* shape,
        __x_ABI_C__FIIterable_1_byte* data,
        __x_ABI_CWindows_CAI_CMachineLearning_CITensorInt8Bit** result);

        END_INTERFACE
    } __x_ABI_CWindows_CAI_CMachineLearning_CITensorInt8BitStaticsVtbl;

    interface __x_ABI_CWindows_CAI_CMachineLearning_CITensorInt8BitStatics
    {
        CONST_VTBL struct __x_ABI_CWindows_CAI_CMachineLearning_CITensorInt8BitStaticsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CAI_CMachineLearning_CITensorInt8BitStatics;
#endif /* !defined(____x_ABI_CWindows_CAI_CMachineLearning_CITensorInt8BitStatics_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CAI_CMachineLearning_CITensorInt8BitStatics2_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CAI_CMachineLearning_CITensorInt8BitStatics2_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CAI_CMachineLearning_CITensorInt8BitStatics2Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorInt8BitStatics2* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorInt8BitStatics2* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorInt8BitStatics2* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorInt8BitStatics2* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorInt8BitStatics2* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorInt8BitStatics2* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* CreateFromShapeArrayAndDataArray)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorInt8BitStatics2* This,
        UINT32 shapeLength,
        INT64* shape,
        UINT32 dataLength,
        BYTE* data,
        __x_ABI_CWindows_CAI_CMachineLearning_CITensorInt8Bit** result);
    HRESULT (STDMETHODCALLTYPE* CreateFromBuffer)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorInt8BitStatics2* This,
        UINT32 shapeLength,
        INT64* shape,
        __x_ABI_CWindows_CStorage_CStreams_CIBuffer* buffer,
        __x_ABI_CWindows_CAI_CMachineLearning_CITensorInt8Bit** result);

        END_INTERFACE
    } __x_ABI_CWindows_CAI_CMachineLearning_CITensorInt8BitStatics2Vtbl;

    interface __x_ABI_CWindows_CAI_CMachineLearning_CITensorInt8BitStatics2
    {
        CONST_VTBL struct __x_ABI_CWindows_CAI_CMachineLearning_CITensorInt8BitStatics2Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CAI_CMachineLearning_CITensorInt8BitStatics2;
#endif /* !defined(____x_ABI_CWindows_CAI_CMachineLearning_CITensorInt8BitStatics2_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CAI_CMachineLearning_CITensorString_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CAI_CMachineLearning_CITensorString_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CAI_CMachineLearning_CITensorStringVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorString* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorString* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorString* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorString* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorString* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorString* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAsVectorView)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorString* This,
        __x_ABI_C__FIVectorView_1_HSTRING** result);

        END_INTERFACE
    } __x_ABI_CWindows_CAI_CMachineLearning_CITensorStringVtbl;

    interface __x_ABI_CWindows_CAI_CMachineLearning_CITensorString
    {
        CONST_VTBL struct __x_ABI_CWindows_CAI_CMachineLearning_CITensorStringVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CAI_CMachineLearning_CITensorString;
#endif /* !defined(____x_ABI_CWindows_CAI_CMachineLearning_CITensorString_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CAI_CMachineLearning_CITensorStringStatics_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CAI_CMachineLearning_CITensorStringStatics_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CAI_CMachineLearning_CITensorStringStaticsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorStringStatics* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorStringStatics* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorStringStatics* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorStringStatics* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorStringStatics* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorStringStatics* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* Create)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorStringStatics* This,
        __x_ABI_CWindows_CAI_CMachineLearning_CITensorString** result);
    HRESULT (STDMETHODCALLTYPE* Create2)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorStringStatics* This,
        __x_ABI_C__FIIterable_1___z__zint64* shape,
        __x_ABI_CWindows_CAI_CMachineLearning_CITensorString** result);
    HRESULT (STDMETHODCALLTYPE* CreateFromArray)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorStringStatics* This,
        __x_ABI_C__FIIterable_1___z__zint64* shape,
        UINT32 dataLength,
        HSTRING* data,
        __x_ABI_CWindows_CAI_CMachineLearning_CITensorString** result);
    HRESULT (STDMETHODCALLTYPE* CreateFromIterable)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorStringStatics* This,
        __x_ABI_C__FIIterable_1___z__zint64* shape,
        __x_ABI_C__FIIterable_1_HSTRING* data,
        __x_ABI_CWindows_CAI_CMachineLearning_CITensorString** result);

        END_INTERFACE
    } __x_ABI_CWindows_CAI_CMachineLearning_CITensorStringStaticsVtbl;

    interface __x_ABI_CWindows_CAI_CMachineLearning_CITensorStringStatics
    {
        CONST_VTBL struct __x_ABI_CWindows_CAI_CMachineLearning_CITensorStringStaticsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CAI_CMachineLearning_CITensorStringStatics;
#endif /* !defined(____x_ABI_CWindows_CAI_CMachineLearning_CITensorStringStatics_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CAI_CMachineLearning_CITensorStringStatics2_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CAI_CMachineLearning_CITensorStringStatics2_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CAI_CMachineLearning_CITensorStringStatics2Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorStringStatics2* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorStringStatics2* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorStringStatics2* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorStringStatics2* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorStringStatics2* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorStringStatics2* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* CreateFromShapeArrayAndDataArray)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorStringStatics2* This,
        UINT32 shapeLength,
        INT64* shape,
        UINT32 dataLength,
        HSTRING* data,
        __x_ABI_CWindows_CAI_CMachineLearning_CITensorString** result);

        END_INTERFACE
    } __x_ABI_CWindows_CAI_CMachineLearning_CITensorStringStatics2Vtbl;

    interface __x_ABI_CWindows_CAI_CMachineLearning_CITensorStringStatics2
    {
        CONST_VTBL struct __x_ABI_CWindows_CAI_CMachineLearning_CITensorStringStatics2Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CAI_CMachineLearning_CITensorStringStatics2;
#endif /* !defined(____x_ABI_CWindows_CAI_CMachineLearning_CITensorStringStatics2_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CAI_CMachineLearning_CITensorUInt16Bit_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CAI_CMachineLearning_CITensorUInt16Bit_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CAI_CMachineLearning_CITensorUInt16BitVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorUInt16Bit* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorUInt16Bit* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorUInt16Bit* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorUInt16Bit* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorUInt16Bit* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorUInt16Bit* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAsVectorView)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorUInt16Bit* This,
        __x_ABI_C__FIVectorView_1_UINT16** result);

        END_INTERFACE
    } __x_ABI_CWindows_CAI_CMachineLearning_CITensorUInt16BitVtbl;

    interface __x_ABI_CWindows_CAI_CMachineLearning_CITensorUInt16Bit
    {
        CONST_VTBL struct __x_ABI_CWindows_CAI_CMachineLearning_CITensorUInt16BitVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CAI_CMachineLearning_CITensorUInt16Bit;
#endif /* !defined(____x_ABI_CWindows_CAI_CMachineLearning_CITensorUInt16Bit_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CAI_CMachineLearning_CITensorUInt16BitStatics_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CAI_CMachineLearning_CITensorUInt16BitStatics_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CAI_CMachineLearning_CITensorUInt16BitStaticsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorUInt16BitStatics* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorUInt16BitStatics* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorUInt16BitStatics* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorUInt16BitStatics* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorUInt16BitStatics* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorUInt16BitStatics* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* Create)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorUInt16BitStatics* This,
        __x_ABI_CWindows_CAI_CMachineLearning_CITensorUInt16Bit** result);
    HRESULT (STDMETHODCALLTYPE* Create2)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorUInt16BitStatics* This,
        __x_ABI_C__FIIterable_1___z__zint64* shape,
        __x_ABI_CWindows_CAI_CMachineLearning_CITensorUInt16Bit** result);
    HRESULT (STDMETHODCALLTYPE* CreateFromArray)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorUInt16BitStatics* This,
        __x_ABI_C__FIIterable_1___z__zint64* shape,
        UINT32 dataLength,
        UINT16* data,
        __x_ABI_CWindows_CAI_CMachineLearning_CITensorUInt16Bit** result);
    HRESULT (STDMETHODCALLTYPE* CreateFromIterable)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorUInt16BitStatics* This,
        __x_ABI_C__FIIterable_1___z__zint64* shape,
        __x_ABI_C__FIIterable_1_UINT16* data,
        __x_ABI_CWindows_CAI_CMachineLearning_CITensorUInt16Bit** result);

        END_INTERFACE
    } __x_ABI_CWindows_CAI_CMachineLearning_CITensorUInt16BitStaticsVtbl;

    interface __x_ABI_CWindows_CAI_CMachineLearning_CITensorUInt16BitStatics
    {
        CONST_VTBL struct __x_ABI_CWindows_CAI_CMachineLearning_CITensorUInt16BitStaticsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CAI_CMachineLearning_CITensorUInt16BitStatics;
#endif /* !defined(____x_ABI_CWindows_CAI_CMachineLearning_CITensorUInt16BitStatics_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CAI_CMachineLearning_CITensorUInt16BitStatics2_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CAI_CMachineLearning_CITensorUInt16BitStatics2_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CAI_CMachineLearning_CITensorUInt16BitStatics2Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorUInt16BitStatics2* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorUInt16BitStatics2* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorUInt16BitStatics2* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorUInt16BitStatics2* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorUInt16BitStatics2* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorUInt16BitStatics2* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* CreateFromShapeArrayAndDataArray)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorUInt16BitStatics2* This,
        UINT32 shapeLength,
        INT64* shape,
        UINT32 dataLength,
        UINT16* data,
        __x_ABI_CWindows_CAI_CMachineLearning_CITensorUInt16Bit** result);
    HRESULT (STDMETHODCALLTYPE* CreateFromBuffer)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorUInt16BitStatics2* This,
        UINT32 shapeLength,
        INT64* shape,
        __x_ABI_CWindows_CStorage_CStreams_CIBuffer* buffer,
        __x_ABI_CWindows_CAI_CMachineLearning_CITensorUInt16Bit** result);

        END_INTERFACE
    } __x_ABI_CWindows_CAI_CMachineLearning_CITensorUInt16BitStatics2Vtbl;

    interface __x_ABI_CWindows_CAI_CMachineLearning_CITensorUInt16BitStatics2
    {
        CONST_VTBL struct __x_ABI_CWindows_CAI_CMachineLearning_CITensorUInt16BitStatics2Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CAI_CMachineLearning_CITensorUInt16BitStatics2;
#endif /* !defined(____x_ABI_CWindows_CAI_CMachineLearning_CITensorUInt16BitStatics2_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CAI_CMachineLearning_CITensorUInt32Bit_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CAI_CMachineLearning_CITensorUInt32Bit_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CAI_CMachineLearning_CITensorUInt32BitVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorUInt32Bit* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorUInt32Bit* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorUInt32Bit* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorUInt32Bit* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorUInt32Bit* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorUInt32Bit* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAsVectorView)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorUInt32Bit* This,
        __x_ABI_C__FIVectorView_1_UINT32** result);

        END_INTERFACE
    } __x_ABI_CWindows_CAI_CMachineLearning_CITensorUInt32BitVtbl;

    interface __x_ABI_CWindows_CAI_CMachineLearning_CITensorUInt32Bit
    {
        CONST_VTBL struct __x_ABI_CWindows_CAI_CMachineLearning_CITensorUInt32BitVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CAI_CMachineLearning_CITensorUInt32Bit;
#endif /* !defined(____x_ABI_CWindows_CAI_CMachineLearning_CITensorUInt32Bit_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CAI_CMachineLearning_CITensorUInt32BitStatics_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CAI_CMachineLearning_CITensorUInt32BitStatics_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CAI_CMachineLearning_CITensorUInt32BitStaticsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorUInt32BitStatics* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorUInt32BitStatics* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorUInt32BitStatics* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorUInt32BitStatics* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorUInt32BitStatics* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorUInt32BitStatics* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* Create)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorUInt32BitStatics* This,
        __x_ABI_CWindows_CAI_CMachineLearning_CITensorUInt32Bit** result);
    HRESULT (STDMETHODCALLTYPE* Create2)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorUInt32BitStatics* This,
        __x_ABI_C__FIIterable_1___z__zint64* shape,
        __x_ABI_CWindows_CAI_CMachineLearning_CITensorUInt32Bit** result);
    HRESULT (STDMETHODCALLTYPE* CreateFromArray)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorUInt32BitStatics* This,
        __x_ABI_C__FIIterable_1___z__zint64* shape,
        UINT32 dataLength,
        UINT32* data,
        __x_ABI_CWindows_CAI_CMachineLearning_CITensorUInt32Bit** result);
    HRESULT (STDMETHODCALLTYPE* CreateFromIterable)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorUInt32BitStatics* This,
        __x_ABI_C__FIIterable_1___z__zint64* shape,
        __x_ABI_C__FIIterable_1_UINT32* data,
        __x_ABI_CWindows_CAI_CMachineLearning_CITensorUInt32Bit** result);

        END_INTERFACE
    } __x_ABI_CWindows_CAI_CMachineLearning_CITensorUInt32BitStaticsVtbl;

    interface __x_ABI_CWindows_CAI_CMachineLearning_CITensorUInt32BitStatics
    {
        CONST_VTBL struct __x_ABI_CWindows_CAI_CMachineLearning_CITensorUInt32BitStaticsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CAI_CMachineLearning_CITensorUInt32BitStatics;
#endif /* !defined(____x_ABI_CWindows_CAI_CMachineLearning_CITensorUInt32BitStatics_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CAI_CMachineLearning_CITensorUInt32BitStatics2_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CAI_CMachineLearning_CITensorUInt32BitStatics2_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CAI_CMachineLearning_CITensorUInt32BitStatics2Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorUInt32BitStatics2* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorUInt32BitStatics2* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorUInt32BitStatics2* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorUInt32BitStatics2* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorUInt32BitStatics2* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorUInt32BitStatics2* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* CreateFromShapeArrayAndDataArray)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorUInt32BitStatics2* This,
        UINT32 shapeLength,
        INT64* shape,
        UINT32 dataLength,
        UINT32* data,
        __x_ABI_CWindows_CAI_CMachineLearning_CITensorUInt32Bit** result);
    HRESULT (STDMETHODCALLTYPE* CreateFromBuffer)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorUInt32BitStatics2* This,
        UINT32 shapeLength,
        INT64* shape,
        __x_ABI_CWindows_CStorage_CStreams_CIBuffer* buffer,
        __x_ABI_CWindows_CAI_CMachineLearning_CITensorUInt32Bit** result);

        END_INTERFACE
    } __x_ABI_CWindows_CAI_CMachineLearning_CITensorUInt32BitStatics2Vtbl;

    interface __x_ABI_CWindows_CAI_CMachineLearning_CITensorUInt32BitStatics2
    {
        CONST_VTBL struct __x_ABI_CWindows_CAI_CMachineLearning_CITensorUInt32BitStatics2Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CAI_CMachineLearning_CITensorUInt32BitStatics2;
#endif /* !defined(____x_ABI_CWindows_CAI_CMachineLearning_CITensorUInt32BitStatics2_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CAI_CMachineLearning_CITensorUInt64Bit_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CAI_CMachineLearning_CITensorUInt64Bit_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CAI_CMachineLearning_CITensorUInt64BitVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorUInt64Bit* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorUInt64Bit* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorUInt64Bit* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorUInt64Bit* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorUInt64Bit* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorUInt64Bit* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAsVectorView)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorUInt64Bit* This,
        __x_ABI_C__FIVectorView_1_UINT64** result);

        END_INTERFACE
    } __x_ABI_CWindows_CAI_CMachineLearning_CITensorUInt64BitVtbl;

    interface __x_ABI_CWindows_CAI_CMachineLearning_CITensorUInt64Bit
    {
        CONST_VTBL struct __x_ABI_CWindows_CAI_CMachineLearning_CITensorUInt64BitVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CAI_CMachineLearning_CITensorUInt64Bit;
#endif /* !defined(____x_ABI_CWindows_CAI_CMachineLearning_CITensorUInt64Bit_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CAI_CMachineLearning_CITensorUInt64BitStatics_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CAI_CMachineLearning_CITensorUInt64BitStatics_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CAI_CMachineLearning_CITensorUInt64BitStaticsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorUInt64BitStatics* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorUInt64BitStatics* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorUInt64BitStatics* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorUInt64BitStatics* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorUInt64BitStatics* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorUInt64BitStatics* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* Create)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorUInt64BitStatics* This,
        __x_ABI_CWindows_CAI_CMachineLearning_CITensorUInt64Bit** result);
    HRESULT (STDMETHODCALLTYPE* Create2)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorUInt64BitStatics* This,
        __x_ABI_C__FIIterable_1___z__zint64* shape,
        __x_ABI_CWindows_CAI_CMachineLearning_CITensorUInt64Bit** result);
    HRESULT (STDMETHODCALLTYPE* CreateFromArray)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorUInt64BitStatics* This,
        __x_ABI_C__FIIterable_1___z__zint64* shape,
        UINT32 dataLength,
        UINT64* data,
        __x_ABI_CWindows_CAI_CMachineLearning_CITensorUInt64Bit** result);
    HRESULT (STDMETHODCALLTYPE* CreateFromIterable)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorUInt64BitStatics* This,
        __x_ABI_C__FIIterable_1___z__zint64* shape,
        __x_ABI_C__FIIterable_1_UINT64* data,
        __x_ABI_CWindows_CAI_CMachineLearning_CITensorUInt64Bit** result);

        END_INTERFACE
    } __x_ABI_CWindows_CAI_CMachineLearning_CITensorUInt64BitStaticsVtbl;

    interface __x_ABI_CWindows_CAI_CMachineLearning_CITensorUInt64BitStatics
    {
        CONST_VTBL struct __x_ABI_CWindows_CAI_CMachineLearning_CITensorUInt64BitStaticsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CAI_CMachineLearning_CITensorUInt64BitStatics;
#endif /* !defined(____x_ABI_CWindows_CAI_CMachineLearning_CITensorUInt64BitStatics_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CAI_CMachineLearning_CITensorUInt64BitStatics2_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CAI_CMachineLearning_CITensorUInt64BitStatics2_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CAI_CMachineLearning_CITensorUInt64BitStatics2Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorUInt64BitStatics2* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorUInt64BitStatics2* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorUInt64BitStatics2* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorUInt64BitStatics2* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorUInt64BitStatics2* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorUInt64BitStatics2* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* CreateFromShapeArrayAndDataArray)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorUInt64BitStatics2* This,
        UINT32 shapeLength,
        INT64* shape,
        UINT32 dataLength,
        UINT64* data,
        __x_ABI_CWindows_CAI_CMachineLearning_CITensorUInt64Bit** result);
    HRESULT (STDMETHODCALLTYPE* CreateFromBuffer)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorUInt64BitStatics2* This,
        UINT32 shapeLength,
        INT64* shape,
        __x_ABI_CWindows_CStorage_CStreams_CIBuffer* buffer,
        __x_ABI_CWindows_CAI_CMachineLearning_CITensorUInt64Bit** result);

        END_INTERFACE
    } __x_ABI_CWindows_CAI_CMachineLearning_CITensorUInt64BitStatics2Vtbl;

    interface __x_ABI_CWindows_CAI_CMachineLearning_CITensorUInt64BitStatics2
    {
        CONST_VTBL struct __x_ABI_CWindows_CAI_CMachineLearning_CITensorUInt64BitStatics2Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CAI_CMachineLearning_CITensorUInt64BitStatics2;
#endif /* !defined(____x_ABI_CWindows_CAI_CMachineLearning_CITensorUInt64BitStatics2_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CAI_CMachineLearning_CITensorUInt8Bit_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CAI_CMachineLearning_CITensorUInt8Bit_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CAI_CMachineLearning_CITensorUInt8BitVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorUInt8Bit* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorUInt8Bit* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorUInt8Bit* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorUInt8Bit* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorUInt8Bit* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorUInt8Bit* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAsVectorView)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorUInt8Bit* This,
        __x_ABI_C__FIVectorView_1_byte** result);

        END_INTERFACE
    } __x_ABI_CWindows_CAI_CMachineLearning_CITensorUInt8BitVtbl;

    interface __x_ABI_CWindows_CAI_CMachineLearning_CITensorUInt8Bit
    {
        CONST_VTBL struct __x_ABI_CWindows_CAI_CMachineLearning_CITensorUInt8BitVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CAI_CMachineLearning_CITensorUInt8Bit;
#endif /* !defined(____x_ABI_CWindows_CAI_CMachineLearning_CITensorUInt8Bit_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CAI_CMachineLearning_CITensorUInt8BitStatics_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CAI_CMachineLearning_CITensorUInt8BitStatics_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CAI_CMachineLearning_CITensorUInt8BitStaticsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorUInt8BitStatics* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorUInt8BitStatics* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorUInt8BitStatics* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorUInt8BitStatics* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorUInt8BitStatics* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorUInt8BitStatics* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* Create)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorUInt8BitStatics* This,
        __x_ABI_CWindows_CAI_CMachineLearning_CITensorUInt8Bit** result);
    HRESULT (STDMETHODCALLTYPE* Create2)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorUInt8BitStatics* This,
        __x_ABI_C__FIIterable_1___z__zint64* shape,
        __x_ABI_CWindows_CAI_CMachineLearning_CITensorUInt8Bit** result);
    HRESULT (STDMETHODCALLTYPE* CreateFromArray)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorUInt8BitStatics* This,
        __x_ABI_C__FIIterable_1___z__zint64* shape,
        UINT32 dataLength,
        BYTE* data,
        __x_ABI_CWindows_CAI_CMachineLearning_CITensorUInt8Bit** result);
    HRESULT (STDMETHODCALLTYPE* CreateFromIterable)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorUInt8BitStatics* This,
        __x_ABI_C__FIIterable_1___z__zint64* shape,
        __x_ABI_C__FIIterable_1_byte* data,
        __x_ABI_CWindows_CAI_CMachineLearning_CITensorUInt8Bit** result);

        END_INTERFACE
    } __x_ABI_CWindows_CAI_CMachineLearning_CITensorUInt8BitStaticsVtbl;

    interface __x_ABI_CWindows_CAI_CMachineLearning_CITensorUInt8BitStatics
    {
        CONST_VTBL struct __x_ABI_CWindows_CAI_CMachineLearning_CITensorUInt8BitStaticsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CAI_CMachineLearning_CITensorUInt8BitStatics;
#endif /* !defined(____x_ABI_CWindows_CAI_CMachineLearning_CITensorUInt8BitStatics_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CAI_CMachineLearning_CITensorUInt8BitStatics2_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CAI_CMachineLearning_CITensorUInt8BitStatics2_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CAI_CMachineLearning_CITensorUInt8BitStatics2Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorUInt8BitStatics2* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorUInt8BitStatics2* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorUInt8BitStatics2* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorUInt8BitStatics2* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorUInt8BitStatics2* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorUInt8BitStatics2* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* CreateFromShapeArrayAndDataArray)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorUInt8BitStatics2* This,
        UINT32 shapeLength,
        INT64* shape,
        UINT32 dataLength,
        BYTE* data,
        __x_ABI_CWindows_CAI_CMachineLearning_CITensorUInt8Bit** result);
    HRESULT (STDMETHODCALLTYPE* CreateFromBuffer)(__x_ABI_CWindows_CAI_CMachineLearning_CITensorUInt8BitStatics2* This,
        UINT32 shapeLength,
        INT64* shape,
        __x_ABI_CWindows_CStorage_CStreams_CIBuffer* buffer,
        __x_ABI_CWindows_CAI_CMachineLearning_CITensorUInt8Bit** result);

        END_INTERFACE
    } __x_ABI_CWindows_CAI_CMachineLearning_CITensorUInt8BitStatics2Vtbl;

    interface __x_ABI_CWindows_CAI_CMachineLearning_CITensorUInt8BitStatics2
    {
        CONST_VTBL struct __x_ABI_CWindows_CAI_CMachineLearning_CITensorUInt8BitStatics2Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CAI_CMachineLearning_CITensorUInt8BitStatics2;
#endif /* !defined(____x_ABI_CWindows_CAI_CMachineLearning_CITensorUInt8BitStatics2_INTERFACE_DEFINED__) */
    

// WARNING: Please don't edit this file. It was generated by Swift/WinRT v0.0.1

#pragma once
// Header files for imported files
#include <inspectable.h>
#include <EventToken.h>
#include <windowscontracts.h>
#include "Windows.Foundation.h"
#include "Windows.UI.Text.Core.h"
// Importing Collections header
#include "Windows.Foundation.Collections.h"

/* Forward Declarations */
#ifndef ____x_ABI_CWindows_CData_CText_CISelectableWordSegmentsTokenizingHandler_FWD_DEFINED__
#define ____x_ABI_CWindows_CData_CText_CISelectableWordSegmentsTokenizingHandler_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CData_CText_CISelectableWordSegmentsTokenizingHandler __x_ABI_CWindows_CData_CText_CISelectableWordSegmentsTokenizingHandler;

#endif // ____x_ABI_CWindows_CData_CText_CISelectableWordSegmentsTokenizingHandler_FWD_DEFINED__

    #ifndef ____x_ABI_CWindows_CData_CText_CIWordSegmentsTokenizingHandler_FWD_DEFINED__
#define ____x_ABI_CWindows_CData_CText_CIWordSegmentsTokenizingHandler_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CData_CText_CIWordSegmentsTokenizingHandler __x_ABI_CWindows_CData_CText_CIWordSegmentsTokenizingHandler;

#endif // ____x_ABI_CWindows_CData_CText_CIWordSegmentsTokenizingHandler_FWD_DEFINED__

    #ifndef ____x_ABI_CWindows_CData_CText_CIAlternateWordForm_FWD_DEFINED__
#define ____x_ABI_CWindows_CData_CText_CIAlternateWordForm_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CData_CText_CIAlternateWordForm __x_ABI_CWindows_CData_CText_CIAlternateWordForm;

#endif // ____x_ABI_CWindows_CData_CText_CIAlternateWordForm_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CData_CText_CISelectableWordSegment_FWD_DEFINED__
#define ____x_ABI_CWindows_CData_CText_CISelectableWordSegment_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CData_CText_CISelectableWordSegment __x_ABI_CWindows_CData_CText_CISelectableWordSegment;

#endif // ____x_ABI_CWindows_CData_CText_CISelectableWordSegment_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CData_CText_CISelectableWordsSegmenter_FWD_DEFINED__
#define ____x_ABI_CWindows_CData_CText_CISelectableWordsSegmenter_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CData_CText_CISelectableWordsSegmenter __x_ABI_CWindows_CData_CText_CISelectableWordsSegmenter;

#endif // ____x_ABI_CWindows_CData_CText_CISelectableWordsSegmenter_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CData_CText_CISelectableWordsSegmenterFactory_FWD_DEFINED__
#define ____x_ABI_CWindows_CData_CText_CISelectableWordsSegmenterFactory_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CData_CText_CISelectableWordsSegmenterFactory __x_ABI_CWindows_CData_CText_CISelectableWordsSegmenterFactory;

#endif // ____x_ABI_CWindows_CData_CText_CISelectableWordsSegmenterFactory_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CData_CText_CISemanticTextQuery_FWD_DEFINED__
#define ____x_ABI_CWindows_CData_CText_CISemanticTextQuery_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CData_CText_CISemanticTextQuery __x_ABI_CWindows_CData_CText_CISemanticTextQuery;

#endif // ____x_ABI_CWindows_CData_CText_CISemanticTextQuery_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CData_CText_CISemanticTextQueryFactory_FWD_DEFINED__
#define ____x_ABI_CWindows_CData_CText_CISemanticTextQueryFactory_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CData_CText_CISemanticTextQueryFactory __x_ABI_CWindows_CData_CText_CISemanticTextQueryFactory;

#endif // ____x_ABI_CWindows_CData_CText_CISemanticTextQueryFactory_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CData_CText_CITextConversionGenerator_FWD_DEFINED__
#define ____x_ABI_CWindows_CData_CText_CITextConversionGenerator_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CData_CText_CITextConversionGenerator __x_ABI_CWindows_CData_CText_CITextConversionGenerator;

#endif // ____x_ABI_CWindows_CData_CText_CITextConversionGenerator_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CData_CText_CITextConversionGeneratorFactory_FWD_DEFINED__
#define ____x_ABI_CWindows_CData_CText_CITextConversionGeneratorFactory_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CData_CText_CITextConversionGeneratorFactory __x_ABI_CWindows_CData_CText_CITextConversionGeneratorFactory;

#endif // ____x_ABI_CWindows_CData_CText_CITextConversionGeneratorFactory_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CData_CText_CITextPhoneme_FWD_DEFINED__
#define ____x_ABI_CWindows_CData_CText_CITextPhoneme_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CData_CText_CITextPhoneme __x_ABI_CWindows_CData_CText_CITextPhoneme;

#endif // ____x_ABI_CWindows_CData_CText_CITextPhoneme_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CData_CText_CITextPredictionGenerator_FWD_DEFINED__
#define ____x_ABI_CWindows_CData_CText_CITextPredictionGenerator_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CData_CText_CITextPredictionGenerator __x_ABI_CWindows_CData_CText_CITextPredictionGenerator;

#endif // ____x_ABI_CWindows_CData_CText_CITextPredictionGenerator_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CData_CText_CITextPredictionGenerator2_FWD_DEFINED__
#define ____x_ABI_CWindows_CData_CText_CITextPredictionGenerator2_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CData_CText_CITextPredictionGenerator2 __x_ABI_CWindows_CData_CText_CITextPredictionGenerator2;

#endif // ____x_ABI_CWindows_CData_CText_CITextPredictionGenerator2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CData_CText_CITextPredictionGeneratorFactory_FWD_DEFINED__
#define ____x_ABI_CWindows_CData_CText_CITextPredictionGeneratorFactory_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CData_CText_CITextPredictionGeneratorFactory __x_ABI_CWindows_CData_CText_CITextPredictionGeneratorFactory;

#endif // ____x_ABI_CWindows_CData_CText_CITextPredictionGeneratorFactory_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CData_CText_CITextReverseConversionGenerator_FWD_DEFINED__
#define ____x_ABI_CWindows_CData_CText_CITextReverseConversionGenerator_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CData_CText_CITextReverseConversionGenerator __x_ABI_CWindows_CData_CText_CITextReverseConversionGenerator;

#endif // ____x_ABI_CWindows_CData_CText_CITextReverseConversionGenerator_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CData_CText_CITextReverseConversionGenerator2_FWD_DEFINED__
#define ____x_ABI_CWindows_CData_CText_CITextReverseConversionGenerator2_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CData_CText_CITextReverseConversionGenerator2 __x_ABI_CWindows_CData_CText_CITextReverseConversionGenerator2;

#endif // ____x_ABI_CWindows_CData_CText_CITextReverseConversionGenerator2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CData_CText_CITextReverseConversionGeneratorFactory_FWD_DEFINED__
#define ____x_ABI_CWindows_CData_CText_CITextReverseConversionGeneratorFactory_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CData_CText_CITextReverseConversionGeneratorFactory __x_ABI_CWindows_CData_CText_CITextReverseConversionGeneratorFactory;

#endif // ____x_ABI_CWindows_CData_CText_CITextReverseConversionGeneratorFactory_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CData_CText_CIUnicodeCharactersStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CData_CText_CIUnicodeCharactersStatics_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CData_CText_CIUnicodeCharactersStatics __x_ABI_CWindows_CData_CText_CIUnicodeCharactersStatics;

#endif // ____x_ABI_CWindows_CData_CText_CIUnicodeCharactersStatics_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CData_CText_CIWordSegment_FWD_DEFINED__
#define ____x_ABI_CWindows_CData_CText_CIWordSegment_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CData_CText_CIWordSegment __x_ABI_CWindows_CData_CText_CIWordSegment;

#endif // ____x_ABI_CWindows_CData_CText_CIWordSegment_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CData_CText_CIWordsSegmenter_FWD_DEFINED__
#define ____x_ABI_CWindows_CData_CText_CIWordsSegmenter_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CData_CText_CIWordsSegmenter __x_ABI_CWindows_CData_CText_CIWordsSegmenter;

#endif // ____x_ABI_CWindows_CData_CText_CIWordsSegmenter_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CData_CText_CIWordsSegmenterFactory_FWD_DEFINED__
#define ____x_ABI_CWindows_CData_CText_CIWordsSegmenterFactory_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CData_CText_CIWordsSegmenterFactory __x_ABI_CWindows_CData_CText_CIWordsSegmenterFactory;

#endif // ____x_ABI_CWindows_CData_CText_CIWordsSegmenterFactory_FWD_DEFINED__

// Parameterized interface forward declarations (C)

// Collection interface definitions

typedef interface __x_ABI_C__FIAsyncOperationCompletedHandler_1_HSTRING __x_ABI_C__FIAsyncOperationCompletedHandler_1_HSTRING;

#if !defined(____x_ABI_C__FIAsyncOperation_1_HSTRING_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperation_1_HSTRING_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperation_1_HSTRING __x_ABI_C__FIAsyncOperation_1_HSTRING;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperation_1_HSTRING;

    typedef struct __x_ABI_C__FIAsyncOperation_1_HSTRINGVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperation_1_HSTRING* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperation_1_HSTRING* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperation_1_HSTRING* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIAsyncOperation_1_HSTRING* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIAsyncOperation_1_HSTRING* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIAsyncOperation_1_HSTRING* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* put_Completed)(__x_ABI_C__FIAsyncOperation_1_HSTRING* This,
        __x_ABI_C__FIAsyncOperationCompletedHandler_1_HSTRING* handler);
    HRESULT (STDMETHODCALLTYPE* get_Completed)(__x_ABI_C__FIAsyncOperation_1_HSTRING* This,
        __x_ABI_C__FIAsyncOperationCompletedHandler_1_HSTRING** result);
    HRESULT (STDMETHODCALLTYPE* GetResults)(__x_ABI_C__FIAsyncOperation_1_HSTRING* This,
        HSTRING* result);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperation_1_HSTRINGVtbl;

    interface __x_ABI_C__FIAsyncOperation_1_HSTRING
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperation_1_HSTRINGVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperation_1_HSTRING_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIAsyncOperationCompletedHandler_1_HSTRING_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperationCompletedHandler_1_HSTRING_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperationCompletedHandler_1_HSTRING __x_ABI_C__FIAsyncOperationCompletedHandler_1_HSTRING;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperationCompletedHandler_1_HSTRING;

    typedef struct __x_ABI_C__FIAsyncOperationCompletedHandler_1_HSTRINGVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperationCompletedHandler_1_HSTRING* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperationCompletedHandler_1_HSTRING* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperationCompletedHandler_1_HSTRING* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FIAsyncOperationCompletedHandler_1_HSTRING* This,
        __x_ABI_C__FIAsyncOperation_1_HSTRING* asyncInfo,
        enum __x_ABI_CWindows_CFoundation_CAsyncStatus asyncStatus);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperationCompletedHandler_1_HSTRINGVtbl;

    interface __x_ABI_C__FIAsyncOperationCompletedHandler_1_HSTRING
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperationCompletedHandler_1_HSTRINGVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperationCompletedHandler_1_HSTRING_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterator_1_HSTRING_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterator_1_HSTRING_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterator_1_HSTRING __x_ABI_C__FIIterator_1_HSTRING;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterator_1_HSTRING;

    typedef struct __x_ABI_C__FIIterator_1_HSTRINGVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterator_1_HSTRING* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterator_1_HSTRING* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterator_1_HSTRING* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterator_1_HSTRING* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterator_1_HSTRING* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterator_1_HSTRING* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Current)(__x_ABI_C__FIIterator_1_HSTRING* This,
        HSTRING* result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__x_ABI_C__FIIterator_1_HSTRING* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__x_ABI_C__FIIterator_1_HSTRING* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIIterator_1_HSTRING* This,
        UINT32 itemsLength,
        HSTRING* items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIIterator_1_HSTRINGVtbl;

    interface __x_ABI_C__FIIterator_1_HSTRING
    {
        CONST_VTBL struct __x_ABI_C__FIIterator_1_HSTRINGVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterator_1_HSTRING_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterable_1_HSTRING_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterable_1_HSTRING_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterable_1_HSTRING __x_ABI_C__FIIterable_1_HSTRING;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterable_1_HSTRING;

    typedef struct __x_ABI_C__FIIterable_1_HSTRINGVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterable_1_HSTRING* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterable_1_HSTRING* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterable_1_HSTRING* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterable_1_HSTRING* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterable_1_HSTRING* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterable_1_HSTRING* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* First)(__x_ABI_C__FIIterable_1_HSTRING* This,
        __x_ABI_C__FIIterator_1_HSTRING** result);

        END_INTERFACE
    } __x_ABI_C__FIIterable_1_HSTRINGVtbl;

    interface __x_ABI_C__FIIterable_1_HSTRING
    {
        CONST_VTBL struct __x_ABI_C__FIIterable_1_HSTRINGVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterable_1_HSTRING_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVectorView_1_HSTRING_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVectorView_1_HSTRING_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVectorView_1_HSTRING __x_ABI_C__FIVectorView_1_HSTRING;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVectorView_1_HSTRING;

    typedef struct __x_ABI_C__FIVectorView_1_HSTRINGVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVectorView_1_HSTRING* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVectorView_1_HSTRING* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVectorView_1_HSTRING* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVectorView_1_HSTRING* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVectorView_1_HSTRING* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVectorView_1_HSTRING* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVectorView_1_HSTRING* This,
        UINT32 index,
        HSTRING* result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVectorView_1_HSTRING* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVectorView_1_HSTRING* This,
        HSTRING value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVectorView_1_HSTRING* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        HSTRING* items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIVectorView_1_HSTRINGVtbl;

    interface __x_ABI_C__FIVectorView_1_HSTRING
    {
        CONST_VTBL struct __x_ABI_C__FIVectorView_1_HSTRINGVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVectorView_1_HSTRING_INTERFACE_DEFINED__
    
typedef interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1_HSTRING __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1_HSTRING;

#if !defined(____x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1_HSTRING_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1_HSTRING_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1_HSTRING __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1_HSTRING;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1_HSTRING;

    typedef struct __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1_HSTRINGVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1_HSTRING* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1_HSTRING* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1_HSTRING* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1_HSTRING* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1_HSTRING* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1_HSTRING* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* put_Completed)(__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1_HSTRING* This,
        __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1_HSTRING* handler);
    HRESULT (STDMETHODCALLTYPE* get_Completed)(__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1_HSTRING* This,
        __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1_HSTRING** result);
    HRESULT (STDMETHODCALLTYPE* GetResults)(__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1_HSTRING* This,
        __x_ABI_C__FIVectorView_1_HSTRING** result);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1_HSTRINGVtbl;

    interface __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1_HSTRING
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1_HSTRINGVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1_HSTRING_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1_HSTRING_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1_HSTRING_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1_HSTRING __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1_HSTRING;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1_HSTRING;

    typedef struct __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1_HSTRINGVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1_HSTRING* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1_HSTRING* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1_HSTRING* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1_HSTRING* This,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1_HSTRING* asyncInfo,
        enum __x_ABI_CWindows_CFoundation_CAsyncStatus asyncStatus);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1_HSTRINGVtbl;

    interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1_HSTRING
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1_HSTRINGVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1_HSTRING_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterator_1___x_ABI_CWindows__CData__CText__CTextPhoneme_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CData__CText__CTextPhoneme_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CData__CText__CTextPhoneme __x_ABI_C__FIIterator_1___x_ABI_CWindows__CData__CText__CTextPhoneme;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterator_1___x_ABI_CWindows__CData__CText__CTextPhoneme;

    typedef struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CData__CText__CTextPhonemeVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CData__CText__CTextPhoneme* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CData__CText__CTextPhoneme* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CData__CText__CTextPhoneme* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CData__CText__CTextPhoneme* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CData__CText__CTextPhoneme* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CData__CText__CTextPhoneme* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Current)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CData__CText__CTextPhoneme* This,
        __x_ABI_CWindows_CData_CText_CITextPhoneme** result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CData__CText__CTextPhoneme* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CData__CText__CTextPhoneme* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CData__CText__CTextPhoneme* This,
        UINT32 itemsLength,
        __x_ABI_CWindows_CData_CText_CITextPhoneme** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIIterator_1___x_ABI_CWindows__CData__CText__CTextPhonemeVtbl;

    interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CData__CText__CTextPhoneme
    {
        CONST_VTBL struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CData__CText__CTextPhonemeVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CData__CText__CTextPhoneme_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterable_1___x_ABI_CWindows__CData__CText__CTextPhoneme_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CData__CText__CTextPhoneme_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CData__CText__CTextPhoneme __x_ABI_C__FIIterable_1___x_ABI_CWindows__CData__CText__CTextPhoneme;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterable_1___x_ABI_CWindows__CData__CText__CTextPhoneme;

    typedef struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CData__CText__CTextPhonemeVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CData__CText__CTextPhoneme* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CData__CText__CTextPhoneme* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CData__CText__CTextPhoneme* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CData__CText__CTextPhoneme* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CData__CText__CTextPhoneme* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CData__CText__CTextPhoneme* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* First)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CData__CText__CTextPhoneme* This,
        __x_ABI_C__FIIterator_1___x_ABI_CWindows__CData__CText__CTextPhoneme** result);

        END_INTERFACE
    } __x_ABI_C__FIIterable_1___x_ABI_CWindows__CData__CText__CTextPhonemeVtbl;

    interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CData__CText__CTextPhoneme
    {
        CONST_VTBL struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CData__CText__CTextPhonemeVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CData__CText__CTextPhoneme_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CTextPhoneme_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CTextPhoneme_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CTextPhoneme __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CTextPhoneme;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CTextPhoneme;

    typedef struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CTextPhonemeVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CTextPhoneme* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CTextPhoneme* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CTextPhoneme* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CTextPhoneme* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CTextPhoneme* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CTextPhoneme* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CTextPhoneme* This,
        UINT32 index,
        __x_ABI_CWindows_CData_CText_CITextPhoneme** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CTextPhoneme* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CTextPhoneme* This,
        __x_ABI_CWindows_CData_CText_CITextPhoneme* value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CTextPhoneme* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        __x_ABI_CWindows_CData_CText_CITextPhoneme** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CTextPhonemeVtbl;

    interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CTextPhoneme
    {
        CONST_VTBL struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CTextPhonemeVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CTextPhoneme_INTERFACE_DEFINED__
    
typedef interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CTextPhoneme __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CTextPhoneme;

#if !defined(____x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CTextPhoneme_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CTextPhoneme_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CTextPhoneme __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CTextPhoneme;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CTextPhoneme;

    typedef struct __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CTextPhonemeVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CTextPhoneme* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CTextPhoneme* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CTextPhoneme* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CTextPhoneme* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CTextPhoneme* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CTextPhoneme* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* put_Completed)(__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CTextPhoneme* This,
        __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CTextPhoneme* handler);
    HRESULT (STDMETHODCALLTYPE* get_Completed)(__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CTextPhoneme* This,
        __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CTextPhoneme** result);
    HRESULT (STDMETHODCALLTYPE* GetResults)(__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CTextPhoneme* This,
        __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CTextPhoneme** result);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CTextPhonemeVtbl;

    interface __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CTextPhoneme
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CTextPhonemeVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CTextPhoneme_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CTextPhoneme_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CTextPhoneme_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CTextPhoneme __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CTextPhoneme;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CTextPhoneme;

    typedef struct __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CTextPhonemeVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CTextPhoneme* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CTextPhoneme* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CTextPhoneme* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CTextPhoneme* This,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CTextPhoneme* asyncInfo,
        enum __x_ABI_CWindows_CFoundation_CAsyncStatus asyncStatus);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CTextPhonemeVtbl;

    interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CTextPhoneme
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CTextPhonemeVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CTextPhoneme_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterator_1___x_ABI_CWindows__CData__CText__CAlternateWordForm_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CData__CText__CAlternateWordForm_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CData__CText__CAlternateWordForm __x_ABI_C__FIIterator_1___x_ABI_CWindows__CData__CText__CAlternateWordForm;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterator_1___x_ABI_CWindows__CData__CText__CAlternateWordForm;

    typedef struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CData__CText__CAlternateWordFormVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CData__CText__CAlternateWordForm* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CData__CText__CAlternateWordForm* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CData__CText__CAlternateWordForm* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CData__CText__CAlternateWordForm* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CData__CText__CAlternateWordForm* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CData__CText__CAlternateWordForm* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Current)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CData__CText__CAlternateWordForm* This,
        __x_ABI_CWindows_CData_CText_CIAlternateWordForm** result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CData__CText__CAlternateWordForm* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CData__CText__CAlternateWordForm* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CData__CText__CAlternateWordForm* This,
        UINT32 itemsLength,
        __x_ABI_CWindows_CData_CText_CIAlternateWordForm** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIIterator_1___x_ABI_CWindows__CData__CText__CAlternateWordFormVtbl;

    interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CData__CText__CAlternateWordForm
    {
        CONST_VTBL struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CData__CText__CAlternateWordFormVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CData__CText__CAlternateWordForm_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterable_1___x_ABI_CWindows__CData__CText__CAlternateWordForm_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CData__CText__CAlternateWordForm_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CData__CText__CAlternateWordForm __x_ABI_C__FIIterable_1___x_ABI_CWindows__CData__CText__CAlternateWordForm;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterable_1___x_ABI_CWindows__CData__CText__CAlternateWordForm;

    typedef struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CData__CText__CAlternateWordFormVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CData__CText__CAlternateWordForm* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CData__CText__CAlternateWordForm* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CData__CText__CAlternateWordForm* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CData__CText__CAlternateWordForm* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CData__CText__CAlternateWordForm* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CData__CText__CAlternateWordForm* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* First)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CData__CText__CAlternateWordForm* This,
        __x_ABI_C__FIIterator_1___x_ABI_CWindows__CData__CText__CAlternateWordForm** result);

        END_INTERFACE
    } __x_ABI_C__FIIterable_1___x_ABI_CWindows__CData__CText__CAlternateWordFormVtbl;

    interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CData__CText__CAlternateWordForm
    {
        CONST_VTBL struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CData__CText__CAlternateWordFormVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CData__CText__CAlternateWordForm_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterator_1___x_ABI_CWindows__CData__CText__CSelectableWordSegment_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CData__CText__CSelectableWordSegment_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CData__CText__CSelectableWordSegment __x_ABI_C__FIIterator_1___x_ABI_CWindows__CData__CText__CSelectableWordSegment;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterator_1___x_ABI_CWindows__CData__CText__CSelectableWordSegment;

    typedef struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CData__CText__CSelectableWordSegmentVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CData__CText__CSelectableWordSegment* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CData__CText__CSelectableWordSegment* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CData__CText__CSelectableWordSegment* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CData__CText__CSelectableWordSegment* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CData__CText__CSelectableWordSegment* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CData__CText__CSelectableWordSegment* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Current)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CData__CText__CSelectableWordSegment* This,
        __x_ABI_CWindows_CData_CText_CISelectableWordSegment** result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CData__CText__CSelectableWordSegment* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CData__CText__CSelectableWordSegment* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CData__CText__CSelectableWordSegment* This,
        UINT32 itemsLength,
        __x_ABI_CWindows_CData_CText_CISelectableWordSegment** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIIterator_1___x_ABI_CWindows__CData__CText__CSelectableWordSegmentVtbl;

    interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CData__CText__CSelectableWordSegment
    {
        CONST_VTBL struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CData__CText__CSelectableWordSegmentVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CData__CText__CSelectableWordSegment_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterable_1___x_ABI_CWindows__CData__CText__CSelectableWordSegment_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CData__CText__CSelectableWordSegment_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CData__CText__CSelectableWordSegment __x_ABI_C__FIIterable_1___x_ABI_CWindows__CData__CText__CSelectableWordSegment;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterable_1___x_ABI_CWindows__CData__CText__CSelectableWordSegment;

    typedef struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CData__CText__CSelectableWordSegmentVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CData__CText__CSelectableWordSegment* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CData__CText__CSelectableWordSegment* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CData__CText__CSelectableWordSegment* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CData__CText__CSelectableWordSegment* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CData__CText__CSelectableWordSegment* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CData__CText__CSelectableWordSegment* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* First)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CData__CText__CSelectableWordSegment* This,
        __x_ABI_C__FIIterator_1___x_ABI_CWindows__CData__CText__CSelectableWordSegment** result);

        END_INTERFACE
    } __x_ABI_C__FIIterable_1___x_ABI_CWindows__CData__CText__CSelectableWordSegmentVtbl;

    interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CData__CText__CSelectableWordSegment
    {
        CONST_VTBL struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CData__CText__CSelectableWordSegmentVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CData__CText__CSelectableWordSegment_INTERFACE_DEFINED__
    
typedef struct __x_ABI_CWindows_CData_CText_CTextSegment __x_ABI_CWindows_CData_CText_CTextSegment;

#if !defined(____x_ABI_C__FIIterator_1___x_ABI_CWindows__CData__CText__CTextSegment_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CData__CText__CTextSegment_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CData__CText__CTextSegment __x_ABI_C__FIIterator_1___x_ABI_CWindows__CData__CText__CTextSegment;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterator_1___x_ABI_CWindows__CData__CText__CTextSegment;

    typedef struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CData__CText__CTextSegmentVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CData__CText__CTextSegment* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CData__CText__CTextSegment* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CData__CText__CTextSegment* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CData__CText__CTextSegment* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CData__CText__CTextSegment* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CData__CText__CTextSegment* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Current)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CData__CText__CTextSegment* This,
        struct __x_ABI_CWindows_CData_CText_CTextSegment* result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CData__CText__CTextSegment* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CData__CText__CTextSegment* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CData__CText__CTextSegment* This,
        UINT32 itemsLength,
        struct __x_ABI_CWindows_CData_CText_CTextSegment* items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIIterator_1___x_ABI_CWindows__CData__CText__CTextSegmentVtbl;

    interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CData__CText__CTextSegment
    {
        CONST_VTBL struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CData__CText__CTextSegmentVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CData__CText__CTextSegment_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterable_1___x_ABI_CWindows__CData__CText__CTextSegment_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CData__CText__CTextSegment_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CData__CText__CTextSegment __x_ABI_C__FIIterable_1___x_ABI_CWindows__CData__CText__CTextSegment;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterable_1___x_ABI_CWindows__CData__CText__CTextSegment;

    typedef struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CData__CText__CTextSegmentVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CData__CText__CTextSegment* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CData__CText__CTextSegment* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CData__CText__CTextSegment* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CData__CText__CTextSegment* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CData__CText__CTextSegment* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CData__CText__CTextSegment* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* First)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CData__CText__CTextSegment* This,
        __x_ABI_C__FIIterator_1___x_ABI_CWindows__CData__CText__CTextSegment** result);

        END_INTERFACE
    } __x_ABI_C__FIIterable_1___x_ABI_CWindows__CData__CText__CTextSegmentVtbl;

    interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CData__CText__CTextSegment
    {
        CONST_VTBL struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CData__CText__CTextSegmentVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CData__CText__CTextSegment_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterator_1___x_ABI_CWindows__CData__CText__CWordSegment_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CData__CText__CWordSegment_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CData__CText__CWordSegment __x_ABI_C__FIIterator_1___x_ABI_CWindows__CData__CText__CWordSegment;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterator_1___x_ABI_CWindows__CData__CText__CWordSegment;

    typedef struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CData__CText__CWordSegmentVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CData__CText__CWordSegment* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CData__CText__CWordSegment* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CData__CText__CWordSegment* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CData__CText__CWordSegment* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CData__CText__CWordSegment* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CData__CText__CWordSegment* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Current)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CData__CText__CWordSegment* This,
        __x_ABI_CWindows_CData_CText_CIWordSegment** result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CData__CText__CWordSegment* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CData__CText__CWordSegment* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CData__CText__CWordSegment* This,
        UINT32 itemsLength,
        __x_ABI_CWindows_CData_CText_CIWordSegment** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIIterator_1___x_ABI_CWindows__CData__CText__CWordSegmentVtbl;

    interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CData__CText__CWordSegment
    {
        CONST_VTBL struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CData__CText__CWordSegmentVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CData__CText__CWordSegment_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterable_1___x_ABI_CWindows__CData__CText__CWordSegment_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CData__CText__CWordSegment_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CData__CText__CWordSegment __x_ABI_C__FIIterable_1___x_ABI_CWindows__CData__CText__CWordSegment;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterable_1___x_ABI_CWindows__CData__CText__CWordSegment;

    typedef struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CData__CText__CWordSegmentVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CData__CText__CWordSegment* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CData__CText__CWordSegment* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CData__CText__CWordSegment* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CData__CText__CWordSegment* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CData__CText__CWordSegment* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CData__CText__CWordSegment* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* First)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CData__CText__CWordSegment* This,
        __x_ABI_C__FIIterator_1___x_ABI_CWindows__CData__CText__CWordSegment** result);

        END_INTERFACE
    } __x_ABI_C__FIIterable_1___x_ABI_CWindows__CData__CText__CWordSegmentVtbl;

    interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CData__CText__CWordSegment
    {
        CONST_VTBL struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CData__CText__CWordSegmentVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CData__CText__CWordSegment_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CAlternateWordForm_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CAlternateWordForm_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CAlternateWordForm __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CAlternateWordForm;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CAlternateWordForm;

    typedef struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CAlternateWordFormVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CAlternateWordForm* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CAlternateWordForm* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CAlternateWordForm* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CAlternateWordForm* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CAlternateWordForm* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CAlternateWordForm* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CAlternateWordForm* This,
        UINT32 index,
        __x_ABI_CWindows_CData_CText_CIAlternateWordForm** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CAlternateWordForm* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CAlternateWordForm* This,
        __x_ABI_CWindows_CData_CText_CIAlternateWordForm* value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CAlternateWordForm* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        __x_ABI_CWindows_CData_CText_CIAlternateWordForm** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CAlternateWordFormVtbl;

    interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CAlternateWordForm
    {
        CONST_VTBL struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CAlternateWordFormVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CAlternateWordForm_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CSelectableWordSegment_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CSelectableWordSegment_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CSelectableWordSegment __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CSelectableWordSegment;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CSelectableWordSegment;

    typedef struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CSelectableWordSegmentVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CSelectableWordSegment* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CSelectableWordSegment* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CSelectableWordSegment* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CSelectableWordSegment* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CSelectableWordSegment* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CSelectableWordSegment* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CSelectableWordSegment* This,
        UINT32 index,
        __x_ABI_CWindows_CData_CText_CISelectableWordSegment** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CSelectableWordSegment* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CSelectableWordSegment* This,
        __x_ABI_CWindows_CData_CText_CISelectableWordSegment* value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CSelectableWordSegment* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        __x_ABI_CWindows_CData_CText_CISelectableWordSegment** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CSelectableWordSegmentVtbl;

    interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CSelectableWordSegment
    {
        CONST_VTBL struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CSelectableWordSegmentVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CSelectableWordSegment_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CTextSegment_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CTextSegment_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CTextSegment __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CTextSegment;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CTextSegment;

    typedef struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CTextSegmentVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CTextSegment* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CTextSegment* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CTextSegment* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CTextSegment* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CTextSegment* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CTextSegment* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CTextSegment* This,
        UINT32 index,
        struct __x_ABI_CWindows_CData_CText_CTextSegment* result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CTextSegment* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CTextSegment* This,
        struct __x_ABI_CWindows_CData_CText_CTextSegment value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CTextSegment* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        struct __x_ABI_CWindows_CData_CText_CTextSegment* items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CTextSegmentVtbl;

    interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CTextSegment
    {
        CONST_VTBL struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CTextSegmentVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CTextSegment_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CWordSegment_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CWordSegment_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CWordSegment __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CWordSegment;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CWordSegment;

    typedef struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CWordSegmentVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CWordSegment* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CWordSegment* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CWordSegment* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CWordSegment* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CWordSegment* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CWordSegment* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CWordSegment* This,
        UINT32 index,
        __x_ABI_CWindows_CData_CText_CIWordSegment** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CWordSegment* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CWordSegment* This,
        __x_ABI_CWindows_CData_CText_CIWordSegment* value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CWordSegment* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        __x_ABI_CWindows_CData_CText_CIWordSegment** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CWordSegmentVtbl;

    interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CWordSegment
    {
        CONST_VTBL struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CWordSegmentVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CWordSegment_INTERFACE_DEFINED__
    
typedef enum __x_ABI_CWindows_CFoundation_CAsyncStatus __x_ABI_CWindows_CFoundation_CAsyncStatus;

#ifndef ____x_ABI_CWindows_CFoundation_CIAsyncInfo_FWD_DEFINED__
#define ____x_ABI_CWindows_CFoundation_CIAsyncInfo_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CFoundation_CIAsyncInfo __x_ABI_CWindows_CFoundation_CIAsyncInfo;

#endif // ____x_ABI_CWindows_CFoundation_CIAsyncInfo_FWD_DEFINED__

typedef enum __x_ABI_CWindows_CUI_CText_CCore_CCoreTextInputScope __x_ABI_CWindows_CUI_CText_CCore_CCoreTextInputScope;

typedef enum __x_ABI_CWindows_CData_CText_CAlternateNormalizationFormat __x_ABI_CWindows_CData_CText_CAlternateNormalizationFormat;

typedef enum __x_ABI_CWindows_CData_CText_CTextPredictionOptions __x_ABI_CWindows_CData_CText_CTextPredictionOptions;

typedef enum __x_ABI_CWindows_CData_CText_CUnicodeGeneralCategory __x_ABI_CWindows_CData_CText_CUnicodeGeneralCategory;

typedef enum __x_ABI_CWindows_CData_CText_CUnicodeNumericType __x_ABI_CWindows_CData_CText_CUnicodeNumericType;

enum __x_ABI_CWindows_CData_CText_CAlternateNormalizationFormat
    {
        __x_ABI_CWindows_CData_CText_CAlternateNormalizationFormat_NotNormalized = 0,
    __x_ABI_CWindows_CData_CText_CAlternateNormalizationFormat_Number = 1,
    __x_ABI_CWindows_CData_CText_CAlternateNormalizationFormat_Currency = 3,
    __x_ABI_CWindows_CData_CText_CAlternateNormalizationFormat_Date = 4,
    __x_ABI_CWindows_CData_CText_CAlternateNormalizationFormat_Time = 5,
};

enum __x_ABI_CWindows_CData_CText_CTextPredictionOptions
    {
        __x_ABI_CWindows_CData_CText_CTextPredictionOptions_None = 0,
    __x_ABI_CWindows_CData_CText_CTextPredictionOptions_Predictions = 0x1,
    __x_ABI_CWindows_CData_CText_CTextPredictionOptions_Corrections = 0x2,
};

enum __x_ABI_CWindows_CData_CText_CUnicodeGeneralCategory
    {
        __x_ABI_CWindows_CData_CText_CUnicodeGeneralCategory_UppercaseLetter = 0,
    __x_ABI_CWindows_CData_CText_CUnicodeGeneralCategory_LowercaseLetter = 1,
    __x_ABI_CWindows_CData_CText_CUnicodeGeneralCategory_TitlecaseLetter = 2,
    __x_ABI_CWindows_CData_CText_CUnicodeGeneralCategory_ModifierLetter = 3,
    __x_ABI_CWindows_CData_CText_CUnicodeGeneralCategory_OtherLetter = 4,
    __x_ABI_CWindows_CData_CText_CUnicodeGeneralCategory_NonspacingMark = 5,
    __x_ABI_CWindows_CData_CText_CUnicodeGeneralCategory_SpacingCombiningMark = 6,
    __x_ABI_CWindows_CData_CText_CUnicodeGeneralCategory_EnclosingMark = 7,
    __x_ABI_CWindows_CData_CText_CUnicodeGeneralCategory_DecimalDigitNumber = 8,
    __x_ABI_CWindows_CData_CText_CUnicodeGeneralCategory_LetterNumber = 9,
    __x_ABI_CWindows_CData_CText_CUnicodeGeneralCategory_OtherNumber = 10,
    __x_ABI_CWindows_CData_CText_CUnicodeGeneralCategory_SpaceSeparator = 11,
    __x_ABI_CWindows_CData_CText_CUnicodeGeneralCategory_LineSeparator = 12,
    __x_ABI_CWindows_CData_CText_CUnicodeGeneralCategory_ParagraphSeparator = 13,
    __x_ABI_CWindows_CData_CText_CUnicodeGeneralCategory_Control = 14,
    __x_ABI_CWindows_CData_CText_CUnicodeGeneralCategory_Format = 15,
    __x_ABI_CWindows_CData_CText_CUnicodeGeneralCategory_Surrogate = 16,
    __x_ABI_CWindows_CData_CText_CUnicodeGeneralCategory_PrivateUse = 17,
    __x_ABI_CWindows_CData_CText_CUnicodeGeneralCategory_ConnectorPunctuation = 18,
    __x_ABI_CWindows_CData_CText_CUnicodeGeneralCategory_DashPunctuation = 19,
    __x_ABI_CWindows_CData_CText_CUnicodeGeneralCategory_OpenPunctuation = 20,
    __x_ABI_CWindows_CData_CText_CUnicodeGeneralCategory_ClosePunctuation = 21,
    __x_ABI_CWindows_CData_CText_CUnicodeGeneralCategory_InitialQuotePunctuation = 22,
    __x_ABI_CWindows_CData_CText_CUnicodeGeneralCategory_FinalQuotePunctuation = 23,
    __x_ABI_CWindows_CData_CText_CUnicodeGeneralCategory_OtherPunctuation = 24,
    __x_ABI_CWindows_CData_CText_CUnicodeGeneralCategory_MathSymbol = 25,
    __x_ABI_CWindows_CData_CText_CUnicodeGeneralCategory_CurrencySymbol = 26,
    __x_ABI_CWindows_CData_CText_CUnicodeGeneralCategory_ModifierSymbol = 27,
    __x_ABI_CWindows_CData_CText_CUnicodeGeneralCategory_OtherSymbol = 28,
    __x_ABI_CWindows_CData_CText_CUnicodeGeneralCategory_NotAssigned = 29,
};

enum __x_ABI_CWindows_CData_CText_CUnicodeNumericType
    {
        __x_ABI_CWindows_CData_CText_CUnicodeNumericType_None = 0,
    __x_ABI_CWindows_CData_CText_CUnicodeNumericType_Decimal = 1,
    __x_ABI_CWindows_CData_CText_CUnicodeNumericType_Digit = 2,
    __x_ABI_CWindows_CData_CText_CUnicodeNumericType_Numeric = 3,
};

struct __x_ABI_CWindows_CData_CText_CTextSegment
    {
        UINT32 StartPosition;
    UINT32 Length;
};

#if !defined(____x_ABI_CWindows_CData_CText_CISelectableWordSegmentsTokenizingHandler_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CData_CText_CISelectableWordSegmentsTokenizingHandler_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CData_CText_CISelectableWordSegmentsTokenizingHandlerVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CData_CText_CISelectableWordSegmentsTokenizingHandler* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CData_CText_CISelectableWordSegmentsTokenizingHandler* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CData_CText_CISelectableWordSegmentsTokenizingHandler* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_CWindows_CData_CText_CISelectableWordSegmentsTokenizingHandler* This,
        __x_ABI_C__FIIterable_1___x_ABI_CWindows__CData__CText__CSelectableWordSegment* precedingWords,
        __x_ABI_C__FIIterable_1___x_ABI_CWindows__CData__CText__CSelectableWordSegment* words);

        END_INTERFACE
    } __x_ABI_CWindows_CData_CText_CISelectableWordSegmentsTokenizingHandlerVtbl;

    interface __x_ABI_CWindows_CData_CText_CISelectableWordSegmentsTokenizingHandler
    {
        CONST_VTBL struct __x_ABI_CWindows_CData_CText_CISelectableWordSegmentsTokenizingHandlerVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CData_CText_CISelectableWordSegmentsTokenizingHandler;
    #endif /* !defined(____x_ABI_CWindows_CData_CText_CISelectableWordSegmentsTokenizingHandler_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CData_CText_CIWordSegmentsTokenizingHandler_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CData_CText_CIWordSegmentsTokenizingHandler_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CData_CText_CIWordSegmentsTokenizingHandlerVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CData_CText_CIWordSegmentsTokenizingHandler* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CData_CText_CIWordSegmentsTokenizingHandler* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CData_CText_CIWordSegmentsTokenizingHandler* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_CWindows_CData_CText_CIWordSegmentsTokenizingHandler* This,
        __x_ABI_C__FIIterable_1___x_ABI_CWindows__CData__CText__CWordSegment* precedingWords,
        __x_ABI_C__FIIterable_1___x_ABI_CWindows__CData__CText__CWordSegment* words);

        END_INTERFACE
    } __x_ABI_CWindows_CData_CText_CIWordSegmentsTokenizingHandlerVtbl;

    interface __x_ABI_CWindows_CData_CText_CIWordSegmentsTokenizingHandler
    {
        CONST_VTBL struct __x_ABI_CWindows_CData_CText_CIWordSegmentsTokenizingHandlerVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CData_CText_CIWordSegmentsTokenizingHandler;
    #endif /* !defined(____x_ABI_CWindows_CData_CText_CIWordSegmentsTokenizingHandler_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CData_CText_CIAlternateWordForm_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CData_CText_CIAlternateWordForm_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CData_CText_CIAlternateWordFormVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CData_CText_CIAlternateWordForm* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CData_CText_CIAlternateWordForm* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CData_CText_CIAlternateWordForm* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CData_CText_CIAlternateWordForm* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CData_CText_CIAlternateWordForm* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CData_CText_CIAlternateWordForm* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_SourceTextSegment)(__x_ABI_CWindows_CData_CText_CIAlternateWordForm* This,
        struct __x_ABI_CWindows_CData_CText_CTextSegment* value);
    HRESULT (STDMETHODCALLTYPE* get_AlternateText)(__x_ABI_CWindows_CData_CText_CIAlternateWordForm* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_NormalizationFormat)(__x_ABI_CWindows_CData_CText_CIAlternateWordForm* This,
        enum __x_ABI_CWindows_CData_CText_CAlternateNormalizationFormat* value);

        END_INTERFACE
    } __x_ABI_CWindows_CData_CText_CIAlternateWordFormVtbl;

    interface __x_ABI_CWindows_CData_CText_CIAlternateWordForm
    {
        CONST_VTBL struct __x_ABI_CWindows_CData_CText_CIAlternateWordFormVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CData_CText_CIAlternateWordForm;
#endif /* !defined(____x_ABI_CWindows_CData_CText_CIAlternateWordForm_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CData_CText_CISelectableWordSegment_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CData_CText_CISelectableWordSegment_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CData_CText_CISelectableWordSegmentVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CData_CText_CISelectableWordSegment* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CData_CText_CISelectableWordSegment* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CData_CText_CISelectableWordSegment* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CData_CText_CISelectableWordSegment* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CData_CText_CISelectableWordSegment* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CData_CText_CISelectableWordSegment* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Text)(__x_ABI_CWindows_CData_CText_CISelectableWordSegment* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_SourceTextSegment)(__x_ABI_CWindows_CData_CText_CISelectableWordSegment* This,
        struct __x_ABI_CWindows_CData_CText_CTextSegment* value);

        END_INTERFACE
    } __x_ABI_CWindows_CData_CText_CISelectableWordSegmentVtbl;

    interface __x_ABI_CWindows_CData_CText_CISelectableWordSegment
    {
        CONST_VTBL struct __x_ABI_CWindows_CData_CText_CISelectableWordSegmentVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CData_CText_CISelectableWordSegment;
#endif /* !defined(____x_ABI_CWindows_CData_CText_CISelectableWordSegment_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CData_CText_CISelectableWordsSegmenter_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CData_CText_CISelectableWordsSegmenter_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CData_CText_CISelectableWordsSegmenterVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CData_CText_CISelectableWordsSegmenter* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CData_CText_CISelectableWordsSegmenter* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CData_CText_CISelectableWordsSegmenter* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CData_CText_CISelectableWordsSegmenter* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CData_CText_CISelectableWordsSegmenter* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CData_CText_CISelectableWordsSegmenter* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_ResolvedLanguage)(__x_ABI_CWindows_CData_CText_CISelectableWordsSegmenter* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* GetTokenAt)(__x_ABI_CWindows_CData_CText_CISelectableWordsSegmenter* This,
        HSTRING text,
        UINT32 startIndex,
        __x_ABI_CWindows_CData_CText_CISelectableWordSegment** result);
    HRESULT (STDMETHODCALLTYPE* GetTokens)(__x_ABI_CWindows_CData_CText_CISelectableWordsSegmenter* This,
        HSTRING text,
        __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CSelectableWordSegment** result);
    HRESULT (STDMETHODCALLTYPE* Tokenize)(__x_ABI_CWindows_CData_CText_CISelectableWordsSegmenter* This,
        HSTRING text,
        UINT32 startIndex,
        __x_ABI_CWindows_CData_CText_CISelectableWordSegmentsTokenizingHandler* handler);

        END_INTERFACE
    } __x_ABI_CWindows_CData_CText_CISelectableWordsSegmenterVtbl;

    interface __x_ABI_CWindows_CData_CText_CISelectableWordsSegmenter
    {
        CONST_VTBL struct __x_ABI_CWindows_CData_CText_CISelectableWordsSegmenterVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CData_CText_CISelectableWordsSegmenter;
#endif /* !defined(____x_ABI_CWindows_CData_CText_CISelectableWordsSegmenter_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CData_CText_CISelectableWordsSegmenterFactory_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CData_CText_CISelectableWordsSegmenterFactory_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CData_CText_CISelectableWordsSegmenterFactoryVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CData_CText_CISelectableWordsSegmenterFactory* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CData_CText_CISelectableWordsSegmenterFactory* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CData_CText_CISelectableWordsSegmenterFactory* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CData_CText_CISelectableWordsSegmenterFactory* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CData_CText_CISelectableWordsSegmenterFactory* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CData_CText_CISelectableWordsSegmenterFactory* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* CreateWithLanguage)(__x_ABI_CWindows_CData_CText_CISelectableWordsSegmenterFactory* This,
        HSTRING language,
        __x_ABI_CWindows_CData_CText_CISelectableWordsSegmenter** result);

        END_INTERFACE
    } __x_ABI_CWindows_CData_CText_CISelectableWordsSegmenterFactoryVtbl;

    interface __x_ABI_CWindows_CData_CText_CISelectableWordsSegmenterFactory
    {
        CONST_VTBL struct __x_ABI_CWindows_CData_CText_CISelectableWordsSegmenterFactoryVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CData_CText_CISelectableWordsSegmenterFactory;
#endif /* !defined(____x_ABI_CWindows_CData_CText_CISelectableWordsSegmenterFactory_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CData_CText_CISemanticTextQuery_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CData_CText_CISemanticTextQuery_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CData_CText_CISemanticTextQueryVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CData_CText_CISemanticTextQuery* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CData_CText_CISemanticTextQuery* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CData_CText_CISemanticTextQuery* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CData_CText_CISemanticTextQuery* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CData_CText_CISemanticTextQuery* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CData_CText_CISemanticTextQuery* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* Find)(__x_ABI_CWindows_CData_CText_CISemanticTextQuery* This,
        HSTRING content,
        __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CTextSegment** result);
    HRESULT (STDMETHODCALLTYPE* FindInProperty)(__x_ABI_CWindows_CData_CText_CISemanticTextQuery* This,
        HSTRING propertyContent,
        HSTRING propertyName,
        __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CTextSegment** result);

        END_INTERFACE
    } __x_ABI_CWindows_CData_CText_CISemanticTextQueryVtbl;

    interface __x_ABI_CWindows_CData_CText_CISemanticTextQuery
    {
        CONST_VTBL struct __x_ABI_CWindows_CData_CText_CISemanticTextQueryVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CData_CText_CISemanticTextQuery;
#endif /* !defined(____x_ABI_CWindows_CData_CText_CISemanticTextQuery_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CData_CText_CISemanticTextQueryFactory_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CData_CText_CISemanticTextQueryFactory_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CData_CText_CISemanticTextQueryFactoryVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CData_CText_CISemanticTextQueryFactory* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CData_CText_CISemanticTextQueryFactory* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CData_CText_CISemanticTextQueryFactory* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CData_CText_CISemanticTextQueryFactory* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CData_CText_CISemanticTextQueryFactory* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CData_CText_CISemanticTextQueryFactory* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* Create)(__x_ABI_CWindows_CData_CText_CISemanticTextQueryFactory* This,
        HSTRING aqsFilter,
        __x_ABI_CWindows_CData_CText_CISemanticTextQuery** result);
    HRESULT (STDMETHODCALLTYPE* CreateWithLanguage)(__x_ABI_CWindows_CData_CText_CISemanticTextQueryFactory* This,
        HSTRING aqsFilter,
        HSTRING filterLanguage,
        __x_ABI_CWindows_CData_CText_CISemanticTextQuery** result);

        END_INTERFACE
    } __x_ABI_CWindows_CData_CText_CISemanticTextQueryFactoryVtbl;

    interface __x_ABI_CWindows_CData_CText_CISemanticTextQueryFactory
    {
        CONST_VTBL struct __x_ABI_CWindows_CData_CText_CISemanticTextQueryFactoryVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CData_CText_CISemanticTextQueryFactory;
#endif /* !defined(____x_ABI_CWindows_CData_CText_CISemanticTextQueryFactory_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CData_CText_CITextConversionGenerator_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CData_CText_CITextConversionGenerator_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CData_CText_CITextConversionGeneratorVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CData_CText_CITextConversionGenerator* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CData_CText_CITextConversionGenerator* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CData_CText_CITextConversionGenerator* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CData_CText_CITextConversionGenerator* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CData_CText_CITextConversionGenerator* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CData_CText_CITextConversionGenerator* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_ResolvedLanguage)(__x_ABI_CWindows_CData_CText_CITextConversionGenerator* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_LanguageAvailableButNotInstalled)(__x_ABI_CWindows_CData_CText_CITextConversionGenerator* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* GetCandidatesAsync)(__x_ABI_CWindows_CData_CText_CITextConversionGenerator* This,
        HSTRING input,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1_HSTRING** result);
    HRESULT (STDMETHODCALLTYPE* GetCandidatesWithMaxCountAsync)(__x_ABI_CWindows_CData_CText_CITextConversionGenerator* This,
        HSTRING input,
        UINT32 maxCandidates,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1_HSTRING** result);

        END_INTERFACE
    } __x_ABI_CWindows_CData_CText_CITextConversionGeneratorVtbl;

    interface __x_ABI_CWindows_CData_CText_CITextConversionGenerator
    {
        CONST_VTBL struct __x_ABI_CWindows_CData_CText_CITextConversionGeneratorVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CData_CText_CITextConversionGenerator;
#endif /* !defined(____x_ABI_CWindows_CData_CText_CITextConversionGenerator_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CData_CText_CITextConversionGeneratorFactory_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CData_CText_CITextConversionGeneratorFactory_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CData_CText_CITextConversionGeneratorFactoryVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CData_CText_CITextConversionGeneratorFactory* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CData_CText_CITextConversionGeneratorFactory* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CData_CText_CITextConversionGeneratorFactory* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CData_CText_CITextConversionGeneratorFactory* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CData_CText_CITextConversionGeneratorFactory* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CData_CText_CITextConversionGeneratorFactory* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* Create)(__x_ABI_CWindows_CData_CText_CITextConversionGeneratorFactory* This,
        HSTRING languageTag,
        __x_ABI_CWindows_CData_CText_CITextConversionGenerator** result);

        END_INTERFACE
    } __x_ABI_CWindows_CData_CText_CITextConversionGeneratorFactoryVtbl;

    interface __x_ABI_CWindows_CData_CText_CITextConversionGeneratorFactory
    {
        CONST_VTBL struct __x_ABI_CWindows_CData_CText_CITextConversionGeneratorFactoryVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CData_CText_CITextConversionGeneratorFactory;
#endif /* !defined(____x_ABI_CWindows_CData_CText_CITextConversionGeneratorFactory_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CData_CText_CITextPhoneme_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CData_CText_CITextPhoneme_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CData_CText_CITextPhonemeVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CData_CText_CITextPhoneme* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CData_CText_CITextPhoneme* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CData_CText_CITextPhoneme* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CData_CText_CITextPhoneme* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CData_CText_CITextPhoneme* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CData_CText_CITextPhoneme* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_DisplayText)(__x_ABI_CWindows_CData_CText_CITextPhoneme* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_ReadingText)(__x_ABI_CWindows_CData_CText_CITextPhoneme* This,
        HSTRING* value);

        END_INTERFACE
    } __x_ABI_CWindows_CData_CText_CITextPhonemeVtbl;

    interface __x_ABI_CWindows_CData_CText_CITextPhoneme
    {
        CONST_VTBL struct __x_ABI_CWindows_CData_CText_CITextPhonemeVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CData_CText_CITextPhoneme;
#endif /* !defined(____x_ABI_CWindows_CData_CText_CITextPhoneme_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CData_CText_CITextPredictionGenerator_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CData_CText_CITextPredictionGenerator_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CData_CText_CITextPredictionGeneratorVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CData_CText_CITextPredictionGenerator* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CData_CText_CITextPredictionGenerator* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CData_CText_CITextPredictionGenerator* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CData_CText_CITextPredictionGenerator* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CData_CText_CITextPredictionGenerator* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CData_CText_CITextPredictionGenerator* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_ResolvedLanguage)(__x_ABI_CWindows_CData_CText_CITextPredictionGenerator* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_LanguageAvailableButNotInstalled)(__x_ABI_CWindows_CData_CText_CITextPredictionGenerator* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* GetCandidatesAsync)(__x_ABI_CWindows_CData_CText_CITextPredictionGenerator* This,
        HSTRING input,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1_HSTRING** result);
    HRESULT (STDMETHODCALLTYPE* GetCandidatesWithMaxCountAsync)(__x_ABI_CWindows_CData_CText_CITextPredictionGenerator* This,
        HSTRING input,
        UINT32 maxCandidates,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1_HSTRING** result);

        END_INTERFACE
    } __x_ABI_CWindows_CData_CText_CITextPredictionGeneratorVtbl;

    interface __x_ABI_CWindows_CData_CText_CITextPredictionGenerator
    {
        CONST_VTBL struct __x_ABI_CWindows_CData_CText_CITextPredictionGeneratorVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CData_CText_CITextPredictionGenerator;
#endif /* !defined(____x_ABI_CWindows_CData_CText_CITextPredictionGenerator_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CData_CText_CITextPredictionGenerator2_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CData_CText_CITextPredictionGenerator2_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CData_CText_CITextPredictionGenerator2Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CData_CText_CITextPredictionGenerator2* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CData_CText_CITextPredictionGenerator2* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CData_CText_CITextPredictionGenerator2* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CData_CText_CITextPredictionGenerator2* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CData_CText_CITextPredictionGenerator2* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CData_CText_CITextPredictionGenerator2* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetCandidatesWithParametersAsync)(__x_ABI_CWindows_CData_CText_CITextPredictionGenerator2* This,
        HSTRING input,
        UINT32 maxCandidates,
        enum __x_ABI_CWindows_CData_CText_CTextPredictionOptions predictionOptions,
        __x_ABI_C__FIIterable_1_HSTRING* previousStrings,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1_HSTRING** result);
    HRESULT (STDMETHODCALLTYPE* GetNextWordCandidatesAsync)(__x_ABI_CWindows_CData_CText_CITextPredictionGenerator2* This,
        UINT32 maxCandidates,
        __x_ABI_C__FIIterable_1_HSTRING* previousStrings,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1_HSTRING** result);
    HRESULT (STDMETHODCALLTYPE* get_InputScope)(__x_ABI_CWindows_CData_CText_CITextPredictionGenerator2* This,
        enum __x_ABI_CWindows_CUI_CText_CCore_CCoreTextInputScope* value);
    HRESULT (STDMETHODCALLTYPE* put_InputScope)(__x_ABI_CWindows_CData_CText_CITextPredictionGenerator2* This,
        enum __x_ABI_CWindows_CUI_CText_CCore_CCoreTextInputScope value);

        END_INTERFACE
    } __x_ABI_CWindows_CData_CText_CITextPredictionGenerator2Vtbl;

    interface __x_ABI_CWindows_CData_CText_CITextPredictionGenerator2
    {
        CONST_VTBL struct __x_ABI_CWindows_CData_CText_CITextPredictionGenerator2Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CData_CText_CITextPredictionGenerator2;
#endif /* !defined(____x_ABI_CWindows_CData_CText_CITextPredictionGenerator2_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CData_CText_CITextPredictionGeneratorFactory_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CData_CText_CITextPredictionGeneratorFactory_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CData_CText_CITextPredictionGeneratorFactoryVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CData_CText_CITextPredictionGeneratorFactory* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CData_CText_CITextPredictionGeneratorFactory* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CData_CText_CITextPredictionGeneratorFactory* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CData_CText_CITextPredictionGeneratorFactory* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CData_CText_CITextPredictionGeneratorFactory* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CData_CText_CITextPredictionGeneratorFactory* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* Create)(__x_ABI_CWindows_CData_CText_CITextPredictionGeneratorFactory* This,
        HSTRING languageTag,
        __x_ABI_CWindows_CData_CText_CITextPredictionGenerator** result);

        END_INTERFACE
    } __x_ABI_CWindows_CData_CText_CITextPredictionGeneratorFactoryVtbl;

    interface __x_ABI_CWindows_CData_CText_CITextPredictionGeneratorFactory
    {
        CONST_VTBL struct __x_ABI_CWindows_CData_CText_CITextPredictionGeneratorFactoryVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CData_CText_CITextPredictionGeneratorFactory;
#endif /* !defined(____x_ABI_CWindows_CData_CText_CITextPredictionGeneratorFactory_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CData_CText_CITextReverseConversionGenerator_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CData_CText_CITextReverseConversionGenerator_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CData_CText_CITextReverseConversionGeneratorVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CData_CText_CITextReverseConversionGenerator* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CData_CText_CITextReverseConversionGenerator* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CData_CText_CITextReverseConversionGenerator* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CData_CText_CITextReverseConversionGenerator* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CData_CText_CITextReverseConversionGenerator* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CData_CText_CITextReverseConversionGenerator* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_ResolvedLanguage)(__x_ABI_CWindows_CData_CText_CITextReverseConversionGenerator* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_LanguageAvailableButNotInstalled)(__x_ABI_CWindows_CData_CText_CITextReverseConversionGenerator* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* ConvertBackAsync)(__x_ABI_CWindows_CData_CText_CITextReverseConversionGenerator* This,
        HSTRING input,
        __x_ABI_C__FIAsyncOperation_1_HSTRING** result);

        END_INTERFACE
    } __x_ABI_CWindows_CData_CText_CITextReverseConversionGeneratorVtbl;

    interface __x_ABI_CWindows_CData_CText_CITextReverseConversionGenerator
    {
        CONST_VTBL struct __x_ABI_CWindows_CData_CText_CITextReverseConversionGeneratorVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CData_CText_CITextReverseConversionGenerator;
#endif /* !defined(____x_ABI_CWindows_CData_CText_CITextReverseConversionGenerator_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CData_CText_CITextReverseConversionGenerator2_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CData_CText_CITextReverseConversionGenerator2_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CData_CText_CITextReverseConversionGenerator2Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CData_CText_CITextReverseConversionGenerator2* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CData_CText_CITextReverseConversionGenerator2* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CData_CText_CITextReverseConversionGenerator2* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CData_CText_CITextReverseConversionGenerator2* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CData_CText_CITextReverseConversionGenerator2* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CData_CText_CITextReverseConversionGenerator2* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetPhonemesAsync)(__x_ABI_CWindows_CData_CText_CITextReverseConversionGenerator2* This,
        HSTRING input,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CTextPhoneme** result);

        END_INTERFACE
    } __x_ABI_CWindows_CData_CText_CITextReverseConversionGenerator2Vtbl;

    interface __x_ABI_CWindows_CData_CText_CITextReverseConversionGenerator2
    {
        CONST_VTBL struct __x_ABI_CWindows_CData_CText_CITextReverseConversionGenerator2Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CData_CText_CITextReverseConversionGenerator2;
#endif /* !defined(____x_ABI_CWindows_CData_CText_CITextReverseConversionGenerator2_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CData_CText_CITextReverseConversionGeneratorFactory_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CData_CText_CITextReverseConversionGeneratorFactory_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CData_CText_CITextReverseConversionGeneratorFactoryVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CData_CText_CITextReverseConversionGeneratorFactory* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CData_CText_CITextReverseConversionGeneratorFactory* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CData_CText_CITextReverseConversionGeneratorFactory* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CData_CText_CITextReverseConversionGeneratorFactory* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CData_CText_CITextReverseConversionGeneratorFactory* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CData_CText_CITextReverseConversionGeneratorFactory* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* Create)(__x_ABI_CWindows_CData_CText_CITextReverseConversionGeneratorFactory* This,
        HSTRING languageTag,
        __x_ABI_CWindows_CData_CText_CITextReverseConversionGenerator** result);

        END_INTERFACE
    } __x_ABI_CWindows_CData_CText_CITextReverseConversionGeneratorFactoryVtbl;

    interface __x_ABI_CWindows_CData_CText_CITextReverseConversionGeneratorFactory
    {
        CONST_VTBL struct __x_ABI_CWindows_CData_CText_CITextReverseConversionGeneratorFactoryVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CData_CText_CITextReverseConversionGeneratorFactory;
#endif /* !defined(____x_ABI_CWindows_CData_CText_CITextReverseConversionGeneratorFactory_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CData_CText_CIUnicodeCharactersStatics_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CData_CText_CIUnicodeCharactersStatics_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CData_CText_CIUnicodeCharactersStaticsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CData_CText_CIUnicodeCharactersStatics* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CData_CText_CIUnicodeCharactersStatics* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CData_CText_CIUnicodeCharactersStatics* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CData_CText_CIUnicodeCharactersStatics* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CData_CText_CIUnicodeCharactersStatics* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CData_CText_CIUnicodeCharactersStatics* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetCodepointFromSurrogatePair)(__x_ABI_CWindows_CData_CText_CIUnicodeCharactersStatics* This,
        UINT32 highSurrogate,
        UINT32 lowSurrogate,
        UINT32* codepoint);
    HRESULT (STDMETHODCALLTYPE* GetSurrogatePairFromCodepoint)(__x_ABI_CWindows_CData_CText_CIUnicodeCharactersStatics* This,
        UINT32 codepoint,
        WCHAR* highSurrogate,
        WCHAR* lowSurrogate);
    HRESULT (STDMETHODCALLTYPE* IsHighSurrogate)(__x_ABI_CWindows_CData_CText_CIUnicodeCharactersStatics* This,
        UINT32 codepoint,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* IsLowSurrogate)(__x_ABI_CWindows_CData_CText_CIUnicodeCharactersStatics* This,
        UINT32 codepoint,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* IsSupplementary)(__x_ABI_CWindows_CData_CText_CIUnicodeCharactersStatics* This,
        UINT32 codepoint,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* IsNoncharacter)(__x_ABI_CWindows_CData_CText_CIUnicodeCharactersStatics* This,
        UINT32 codepoint,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* IsWhitespace)(__x_ABI_CWindows_CData_CText_CIUnicodeCharactersStatics* This,
        UINT32 codepoint,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* IsAlphabetic)(__x_ABI_CWindows_CData_CText_CIUnicodeCharactersStatics* This,
        UINT32 codepoint,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* IsCased)(__x_ABI_CWindows_CData_CText_CIUnicodeCharactersStatics* This,
        UINT32 codepoint,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* IsUppercase)(__x_ABI_CWindows_CData_CText_CIUnicodeCharactersStatics* This,
        UINT32 codepoint,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* IsLowercase)(__x_ABI_CWindows_CData_CText_CIUnicodeCharactersStatics* This,
        UINT32 codepoint,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* IsIdStart)(__x_ABI_CWindows_CData_CText_CIUnicodeCharactersStatics* This,
        UINT32 codepoint,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* IsIdContinue)(__x_ABI_CWindows_CData_CText_CIUnicodeCharactersStatics* This,
        UINT32 codepoint,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* IsGraphemeBase)(__x_ABI_CWindows_CData_CText_CIUnicodeCharactersStatics* This,
        UINT32 codepoint,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* IsGraphemeExtend)(__x_ABI_CWindows_CData_CText_CIUnicodeCharactersStatics* This,
        UINT32 codepoint,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* GetNumericType)(__x_ABI_CWindows_CData_CText_CIUnicodeCharactersStatics* This,
        UINT32 codepoint,
        enum __x_ABI_CWindows_CData_CText_CUnicodeNumericType* value);
    HRESULT (STDMETHODCALLTYPE* GetGeneralCategory)(__x_ABI_CWindows_CData_CText_CIUnicodeCharactersStatics* This,
        UINT32 codepoint,
        enum __x_ABI_CWindows_CData_CText_CUnicodeGeneralCategory* value);

        END_INTERFACE
    } __x_ABI_CWindows_CData_CText_CIUnicodeCharactersStaticsVtbl;

    interface __x_ABI_CWindows_CData_CText_CIUnicodeCharactersStatics
    {
        CONST_VTBL struct __x_ABI_CWindows_CData_CText_CIUnicodeCharactersStaticsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CData_CText_CIUnicodeCharactersStatics;
#endif /* !defined(____x_ABI_CWindows_CData_CText_CIUnicodeCharactersStatics_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CData_CText_CIWordSegment_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CData_CText_CIWordSegment_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CData_CText_CIWordSegmentVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CData_CText_CIWordSegment* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CData_CText_CIWordSegment* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CData_CText_CIWordSegment* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CData_CText_CIWordSegment* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CData_CText_CIWordSegment* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CData_CText_CIWordSegment* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Text)(__x_ABI_CWindows_CData_CText_CIWordSegment* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_SourceTextSegment)(__x_ABI_CWindows_CData_CText_CIWordSegment* This,
        struct __x_ABI_CWindows_CData_CText_CTextSegment* value);
    HRESULT (STDMETHODCALLTYPE* get_AlternateForms)(__x_ABI_CWindows_CData_CText_CIWordSegment* This,
        __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CAlternateWordForm** value);

        END_INTERFACE
    } __x_ABI_CWindows_CData_CText_CIWordSegmentVtbl;

    interface __x_ABI_CWindows_CData_CText_CIWordSegment
    {
        CONST_VTBL struct __x_ABI_CWindows_CData_CText_CIWordSegmentVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CData_CText_CIWordSegment;
#endif /* !defined(____x_ABI_CWindows_CData_CText_CIWordSegment_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CData_CText_CIWordsSegmenter_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CData_CText_CIWordsSegmenter_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CData_CText_CIWordsSegmenterVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CData_CText_CIWordsSegmenter* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CData_CText_CIWordsSegmenter* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CData_CText_CIWordsSegmenter* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CData_CText_CIWordsSegmenter* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CData_CText_CIWordsSegmenter* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CData_CText_CIWordsSegmenter* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_ResolvedLanguage)(__x_ABI_CWindows_CData_CText_CIWordsSegmenter* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* GetTokenAt)(__x_ABI_CWindows_CData_CText_CIWordsSegmenter* This,
        HSTRING text,
        UINT32 startIndex,
        __x_ABI_CWindows_CData_CText_CIWordSegment** result);
    HRESULT (STDMETHODCALLTYPE* GetTokens)(__x_ABI_CWindows_CData_CText_CIWordsSegmenter* This,
        HSTRING text,
        __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CWordSegment** result);
    HRESULT (STDMETHODCALLTYPE* Tokenize)(__x_ABI_CWindows_CData_CText_CIWordsSegmenter* This,
        HSTRING text,
        UINT32 startIndex,
        __x_ABI_CWindows_CData_CText_CIWordSegmentsTokenizingHandler* handler);

        END_INTERFACE
    } __x_ABI_CWindows_CData_CText_CIWordsSegmenterVtbl;

    interface __x_ABI_CWindows_CData_CText_CIWordsSegmenter
    {
        CONST_VTBL struct __x_ABI_CWindows_CData_CText_CIWordsSegmenterVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CData_CText_CIWordsSegmenter;
#endif /* !defined(____x_ABI_CWindows_CData_CText_CIWordsSegmenter_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CData_CText_CIWordsSegmenterFactory_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CData_CText_CIWordsSegmenterFactory_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CData_CText_CIWordsSegmenterFactoryVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CData_CText_CIWordsSegmenterFactory* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CData_CText_CIWordsSegmenterFactory* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CData_CText_CIWordsSegmenterFactory* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CData_CText_CIWordsSegmenterFactory* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CData_CText_CIWordsSegmenterFactory* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CData_CText_CIWordsSegmenterFactory* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* CreateWithLanguage)(__x_ABI_CWindows_CData_CText_CIWordsSegmenterFactory* This,
        HSTRING language,
        __x_ABI_CWindows_CData_CText_CIWordsSegmenter** result);

        END_INTERFACE
    } __x_ABI_CWindows_CData_CText_CIWordsSegmenterFactoryVtbl;

    interface __x_ABI_CWindows_CData_CText_CIWordsSegmenterFactory
    {
        CONST_VTBL struct __x_ABI_CWindows_CData_CText_CIWordsSegmenterFactoryVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CData_CText_CIWordsSegmenterFactory;
#endif /* !defined(____x_ABI_CWindows_CData_CText_CIWordsSegmenterFactory_INTERFACE_DEFINED__) */
    

// WARNING: Please don't edit this file. It was generated by Swift/WinRT v0.0.1

#pragma once
// Header files for imported files
#include <inspectable.h>
#include <EventToken.h>
#include <windowscontracts.h>
#include "Windows.Foundation.h"
#include "Windows.Devices.Geolocation.h"
#include "Windows.UI.Popups.h"
// Importing Collections header
#include "Windows.Foundation.Collections.h"

/* Forward Declarations */
#ifndef ____x_ABI_CWindows_CServices_CMaps_CIEnhancedWaypoint_FWD_DEFINED__
#define ____x_ABI_CWindows_CServices_CMaps_CIEnhancedWaypoint_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CServices_CMaps_CIEnhancedWaypoint __x_ABI_CWindows_CServices_CMaps_CIEnhancedWaypoint;

#endif // ____x_ABI_CWindows_CServices_CMaps_CIEnhancedWaypoint_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CServices_CMaps_CIEnhancedWaypointFactory_FWD_DEFINED__
#define ____x_ABI_CWindows_CServices_CMaps_CIEnhancedWaypointFactory_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CServices_CMaps_CIEnhancedWaypointFactory __x_ABI_CWindows_CServices_CMaps_CIEnhancedWaypointFactory;

#endif // ____x_ABI_CWindows_CServices_CMaps_CIEnhancedWaypointFactory_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CServices_CMaps_CIManeuverWarning_FWD_DEFINED__
#define ____x_ABI_CWindows_CServices_CMaps_CIManeuverWarning_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CServices_CMaps_CIManeuverWarning __x_ABI_CWindows_CServices_CMaps_CIManeuverWarning;

#endif // ____x_ABI_CWindows_CServices_CMaps_CIManeuverWarning_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CServices_CMaps_CIMapAddress_FWD_DEFINED__
#define ____x_ABI_CWindows_CServices_CMaps_CIMapAddress_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CServices_CMaps_CIMapAddress __x_ABI_CWindows_CServices_CMaps_CIMapAddress;

#endif // ____x_ABI_CWindows_CServices_CMaps_CIMapAddress_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CServices_CMaps_CIMapAddress2_FWD_DEFINED__
#define ____x_ABI_CWindows_CServices_CMaps_CIMapAddress2_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CServices_CMaps_CIMapAddress2 __x_ABI_CWindows_CServices_CMaps_CIMapAddress2;

#endif // ____x_ABI_CWindows_CServices_CMaps_CIMapAddress2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CServices_CMaps_CIMapLocation_FWD_DEFINED__
#define ____x_ABI_CWindows_CServices_CMaps_CIMapLocation_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CServices_CMaps_CIMapLocation __x_ABI_CWindows_CServices_CMaps_CIMapLocation;

#endif // ____x_ABI_CWindows_CServices_CMaps_CIMapLocation_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CServices_CMaps_CIMapLocationFinderResult_FWD_DEFINED__
#define ____x_ABI_CWindows_CServices_CMaps_CIMapLocationFinderResult_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CServices_CMaps_CIMapLocationFinderResult __x_ABI_CWindows_CServices_CMaps_CIMapLocationFinderResult;

#endif // ____x_ABI_CWindows_CServices_CMaps_CIMapLocationFinderResult_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CServices_CMaps_CIMapLocationFinderStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CServices_CMaps_CIMapLocationFinderStatics_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CServices_CMaps_CIMapLocationFinderStatics __x_ABI_CWindows_CServices_CMaps_CIMapLocationFinderStatics;

#endif // ____x_ABI_CWindows_CServices_CMaps_CIMapLocationFinderStatics_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CServices_CMaps_CIMapLocationFinderStatics2_FWD_DEFINED__
#define ____x_ABI_CWindows_CServices_CMaps_CIMapLocationFinderStatics2_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CServices_CMaps_CIMapLocationFinderStatics2 __x_ABI_CWindows_CServices_CMaps_CIMapLocationFinderStatics2;

#endif // ____x_ABI_CWindows_CServices_CMaps_CIMapLocationFinderStatics2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CServices_CMaps_CIMapManagerStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CServices_CMaps_CIMapManagerStatics_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CServices_CMaps_CIMapManagerStatics __x_ABI_CWindows_CServices_CMaps_CIMapManagerStatics;

#endif // ____x_ABI_CWindows_CServices_CMaps_CIMapManagerStatics_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CServices_CMaps_CIMapRoute_FWD_DEFINED__
#define ____x_ABI_CWindows_CServices_CMaps_CIMapRoute_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CServices_CMaps_CIMapRoute __x_ABI_CWindows_CServices_CMaps_CIMapRoute;

#endif // ____x_ABI_CWindows_CServices_CMaps_CIMapRoute_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CServices_CMaps_CIMapRoute2_FWD_DEFINED__
#define ____x_ABI_CWindows_CServices_CMaps_CIMapRoute2_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CServices_CMaps_CIMapRoute2 __x_ABI_CWindows_CServices_CMaps_CIMapRoute2;

#endif // ____x_ABI_CWindows_CServices_CMaps_CIMapRoute2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CServices_CMaps_CIMapRoute3_FWD_DEFINED__
#define ____x_ABI_CWindows_CServices_CMaps_CIMapRoute3_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CServices_CMaps_CIMapRoute3 __x_ABI_CWindows_CServices_CMaps_CIMapRoute3;

#endif // ____x_ABI_CWindows_CServices_CMaps_CIMapRoute3_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CServices_CMaps_CIMapRoute4_FWD_DEFINED__
#define ____x_ABI_CWindows_CServices_CMaps_CIMapRoute4_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CServices_CMaps_CIMapRoute4 __x_ABI_CWindows_CServices_CMaps_CIMapRoute4;

#endif // ____x_ABI_CWindows_CServices_CMaps_CIMapRoute4_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CServices_CMaps_CIMapRouteDrivingOptions_FWD_DEFINED__
#define ____x_ABI_CWindows_CServices_CMaps_CIMapRouteDrivingOptions_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CServices_CMaps_CIMapRouteDrivingOptions __x_ABI_CWindows_CServices_CMaps_CIMapRouteDrivingOptions;

#endif // ____x_ABI_CWindows_CServices_CMaps_CIMapRouteDrivingOptions_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CServices_CMaps_CIMapRouteDrivingOptions2_FWD_DEFINED__
#define ____x_ABI_CWindows_CServices_CMaps_CIMapRouteDrivingOptions2_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CServices_CMaps_CIMapRouteDrivingOptions2 __x_ABI_CWindows_CServices_CMaps_CIMapRouteDrivingOptions2;

#endif // ____x_ABI_CWindows_CServices_CMaps_CIMapRouteDrivingOptions2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CServices_CMaps_CIMapRouteFinderResult_FWD_DEFINED__
#define ____x_ABI_CWindows_CServices_CMaps_CIMapRouteFinderResult_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CServices_CMaps_CIMapRouteFinderResult __x_ABI_CWindows_CServices_CMaps_CIMapRouteFinderResult;

#endif // ____x_ABI_CWindows_CServices_CMaps_CIMapRouteFinderResult_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CServices_CMaps_CIMapRouteFinderResult2_FWD_DEFINED__
#define ____x_ABI_CWindows_CServices_CMaps_CIMapRouteFinderResult2_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CServices_CMaps_CIMapRouteFinderResult2 __x_ABI_CWindows_CServices_CMaps_CIMapRouteFinderResult2;

#endif // ____x_ABI_CWindows_CServices_CMaps_CIMapRouteFinderResult2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CServices_CMaps_CIMapRouteFinderStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CServices_CMaps_CIMapRouteFinderStatics_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CServices_CMaps_CIMapRouteFinderStatics __x_ABI_CWindows_CServices_CMaps_CIMapRouteFinderStatics;

#endif // ____x_ABI_CWindows_CServices_CMaps_CIMapRouteFinderStatics_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CServices_CMaps_CIMapRouteFinderStatics2_FWD_DEFINED__
#define ____x_ABI_CWindows_CServices_CMaps_CIMapRouteFinderStatics2_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CServices_CMaps_CIMapRouteFinderStatics2 __x_ABI_CWindows_CServices_CMaps_CIMapRouteFinderStatics2;

#endif // ____x_ABI_CWindows_CServices_CMaps_CIMapRouteFinderStatics2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CServices_CMaps_CIMapRouteFinderStatics3_FWD_DEFINED__
#define ____x_ABI_CWindows_CServices_CMaps_CIMapRouteFinderStatics3_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CServices_CMaps_CIMapRouteFinderStatics3 __x_ABI_CWindows_CServices_CMaps_CIMapRouteFinderStatics3;

#endif // ____x_ABI_CWindows_CServices_CMaps_CIMapRouteFinderStatics3_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CServices_CMaps_CIMapRouteLeg_FWD_DEFINED__
#define ____x_ABI_CWindows_CServices_CMaps_CIMapRouteLeg_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CServices_CMaps_CIMapRouteLeg __x_ABI_CWindows_CServices_CMaps_CIMapRouteLeg;

#endif // ____x_ABI_CWindows_CServices_CMaps_CIMapRouteLeg_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CServices_CMaps_CIMapRouteLeg2_FWD_DEFINED__
#define ____x_ABI_CWindows_CServices_CMaps_CIMapRouteLeg2_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CServices_CMaps_CIMapRouteLeg2 __x_ABI_CWindows_CServices_CMaps_CIMapRouteLeg2;

#endif // ____x_ABI_CWindows_CServices_CMaps_CIMapRouteLeg2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CServices_CMaps_CIMapRouteManeuver_FWD_DEFINED__
#define ____x_ABI_CWindows_CServices_CMaps_CIMapRouteManeuver_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CServices_CMaps_CIMapRouteManeuver __x_ABI_CWindows_CServices_CMaps_CIMapRouteManeuver;

#endif // ____x_ABI_CWindows_CServices_CMaps_CIMapRouteManeuver_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CServices_CMaps_CIMapRouteManeuver2_FWD_DEFINED__
#define ____x_ABI_CWindows_CServices_CMaps_CIMapRouteManeuver2_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CServices_CMaps_CIMapRouteManeuver2 __x_ABI_CWindows_CServices_CMaps_CIMapRouteManeuver2;

#endif // ____x_ABI_CWindows_CServices_CMaps_CIMapRouteManeuver2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CServices_CMaps_CIMapRouteManeuver3_FWD_DEFINED__
#define ____x_ABI_CWindows_CServices_CMaps_CIMapRouteManeuver3_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CServices_CMaps_CIMapRouteManeuver3 __x_ABI_CWindows_CServices_CMaps_CIMapRouteManeuver3;

#endif // ____x_ABI_CWindows_CServices_CMaps_CIMapRouteManeuver3_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CServices_CMaps_CIMapServiceStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CServices_CMaps_CIMapServiceStatics_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CServices_CMaps_CIMapServiceStatics __x_ABI_CWindows_CServices_CMaps_CIMapServiceStatics;

#endif // ____x_ABI_CWindows_CServices_CMaps_CIMapServiceStatics_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CServices_CMaps_CIMapServiceStatics2_FWD_DEFINED__
#define ____x_ABI_CWindows_CServices_CMaps_CIMapServiceStatics2_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CServices_CMaps_CIMapServiceStatics2 __x_ABI_CWindows_CServices_CMaps_CIMapServiceStatics2;

#endif // ____x_ABI_CWindows_CServices_CMaps_CIMapServiceStatics2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CServices_CMaps_CIMapServiceStatics3_FWD_DEFINED__
#define ____x_ABI_CWindows_CServices_CMaps_CIMapServiceStatics3_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CServices_CMaps_CIMapServiceStatics3 __x_ABI_CWindows_CServices_CMaps_CIMapServiceStatics3;

#endif // ____x_ABI_CWindows_CServices_CMaps_CIMapServiceStatics3_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CServices_CMaps_CIMapServiceStatics4_FWD_DEFINED__
#define ____x_ABI_CWindows_CServices_CMaps_CIMapServiceStatics4_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CServices_CMaps_CIMapServiceStatics4 __x_ABI_CWindows_CServices_CMaps_CIMapServiceStatics4;

#endif // ____x_ABI_CWindows_CServices_CMaps_CIMapServiceStatics4_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CServices_CMaps_CIPlaceInfo_FWD_DEFINED__
#define ____x_ABI_CWindows_CServices_CMaps_CIPlaceInfo_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CServices_CMaps_CIPlaceInfo __x_ABI_CWindows_CServices_CMaps_CIPlaceInfo;

#endif // ____x_ABI_CWindows_CServices_CMaps_CIPlaceInfo_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CServices_CMaps_CIPlaceInfoCreateOptions_FWD_DEFINED__
#define ____x_ABI_CWindows_CServices_CMaps_CIPlaceInfoCreateOptions_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CServices_CMaps_CIPlaceInfoCreateOptions __x_ABI_CWindows_CServices_CMaps_CIPlaceInfoCreateOptions;

#endif // ____x_ABI_CWindows_CServices_CMaps_CIPlaceInfoCreateOptions_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CServices_CMaps_CIPlaceInfoStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CServices_CMaps_CIPlaceInfoStatics_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CServices_CMaps_CIPlaceInfoStatics __x_ABI_CWindows_CServices_CMaps_CIPlaceInfoStatics;

#endif // ____x_ABI_CWindows_CServices_CMaps_CIPlaceInfoStatics_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CServices_CMaps_CIPlaceInfoStatics2_FWD_DEFINED__
#define ____x_ABI_CWindows_CServices_CMaps_CIPlaceInfoStatics2_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CServices_CMaps_CIPlaceInfoStatics2 __x_ABI_CWindows_CServices_CMaps_CIPlaceInfoStatics2;

#endif // ____x_ABI_CWindows_CServices_CMaps_CIPlaceInfoStatics2_FWD_DEFINED__

// Parameterized interface forward declarations (C)

// Collection interface definitions

typedef interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CServices__CMaps__CMapLocationFinderResult __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CServices__CMaps__CMapLocationFinderResult;

#if !defined(____x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CMaps__CMapLocationFinderResult_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CMaps__CMapLocationFinderResult_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CMaps__CMapLocationFinderResult __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CMaps__CMapLocationFinderResult;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CMaps__CMapLocationFinderResult;

    typedef struct __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CMaps__CMapLocationFinderResultVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CMaps__CMapLocationFinderResult* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CMaps__CMapLocationFinderResult* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CMaps__CMapLocationFinderResult* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CMaps__CMapLocationFinderResult* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CMaps__CMapLocationFinderResult* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CMaps__CMapLocationFinderResult* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* put_Completed)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CMaps__CMapLocationFinderResult* This,
        __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CServices__CMaps__CMapLocationFinderResult* handler);
    HRESULT (STDMETHODCALLTYPE* get_Completed)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CMaps__CMapLocationFinderResult* This,
        __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CServices__CMaps__CMapLocationFinderResult** result);
    HRESULT (STDMETHODCALLTYPE* GetResults)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CMaps__CMapLocationFinderResult* This,
        __x_ABI_CWindows_CServices_CMaps_CIMapLocationFinderResult** result);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CMaps__CMapLocationFinderResultVtbl;

    interface __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CMaps__CMapLocationFinderResult
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CMaps__CMapLocationFinderResultVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CMaps__CMapLocationFinderResult_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CServices__CMaps__CMapLocationFinderResult_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CServices__CMaps__CMapLocationFinderResult_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CServices__CMaps__CMapLocationFinderResult __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CServices__CMaps__CMapLocationFinderResult;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CServices__CMaps__CMapLocationFinderResult;

    typedef struct __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CServices__CMaps__CMapLocationFinderResultVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CServices__CMaps__CMapLocationFinderResult* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CServices__CMaps__CMapLocationFinderResult* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CServices__CMaps__CMapLocationFinderResult* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CServices__CMaps__CMapLocationFinderResult* This,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CMaps__CMapLocationFinderResult* asyncInfo,
        enum __x_ABI_CWindows_CFoundation_CAsyncStatus asyncStatus);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CServices__CMaps__CMapLocationFinderResultVtbl;

    interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CServices__CMaps__CMapLocationFinderResult
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CServices__CMaps__CMapLocationFinderResultVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CServices__CMaps__CMapLocationFinderResult_INTERFACE_DEFINED__
    
typedef interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CServices__CMaps__CMapRouteFinderResult __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CServices__CMaps__CMapRouteFinderResult;

#if !defined(____x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CMaps__CMapRouteFinderResult_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CMaps__CMapRouteFinderResult_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CMaps__CMapRouteFinderResult __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CMaps__CMapRouteFinderResult;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CMaps__CMapRouteFinderResult;

    typedef struct __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CMaps__CMapRouteFinderResultVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CMaps__CMapRouteFinderResult* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CMaps__CMapRouteFinderResult* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CMaps__CMapRouteFinderResult* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CMaps__CMapRouteFinderResult* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CMaps__CMapRouteFinderResult* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CMaps__CMapRouteFinderResult* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* put_Completed)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CMaps__CMapRouteFinderResult* This,
        __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CServices__CMaps__CMapRouteFinderResult* handler);
    HRESULT (STDMETHODCALLTYPE* get_Completed)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CMaps__CMapRouteFinderResult* This,
        __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CServices__CMaps__CMapRouteFinderResult** result);
    HRESULT (STDMETHODCALLTYPE* GetResults)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CMaps__CMapRouteFinderResult* This,
        __x_ABI_CWindows_CServices_CMaps_CIMapRouteFinderResult** result);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CMaps__CMapRouteFinderResultVtbl;

    interface __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CMaps__CMapRouteFinderResult
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CMaps__CMapRouteFinderResultVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CMaps__CMapRouteFinderResult_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CServices__CMaps__CMapRouteFinderResult_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CServices__CMaps__CMapRouteFinderResult_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CServices__CMaps__CMapRouteFinderResult __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CServices__CMaps__CMapRouteFinderResult;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CServices__CMaps__CMapRouteFinderResult;

    typedef struct __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CServices__CMaps__CMapRouteFinderResultVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CServices__CMaps__CMapRouteFinderResult* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CServices__CMaps__CMapRouteFinderResult* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CServices__CMaps__CMapRouteFinderResult* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CServices__CMaps__CMapRouteFinderResult* This,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CMaps__CMapRouteFinderResult* asyncInfo,
        enum __x_ABI_CWindows_CFoundation_CAsyncStatus asyncStatus);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CServices__CMaps__CMapRouteFinderResultVtbl;

    interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CServices__CMaps__CMapRouteFinderResult
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CServices__CMaps__CMapRouteFinderResultVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CServices__CMaps__CMapRouteFinderResult_INTERFACE_DEFINED__
    
#ifndef ____x_ABI_CWindows_CDevices_CGeolocation_CIGeopoint_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CGeolocation_CIGeopoint_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CDevices_CGeolocation_CIGeopoint __x_ABI_CWindows_CDevices_CGeolocation_CIGeopoint;

#endif // ____x_ABI_CWindows_CDevices_CGeolocation_CIGeopoint_FWD_DEFINED__

#if !defined(____x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CGeolocation__CGeopoint_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CGeolocation__CGeopoint_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CGeolocation__CGeopoint __x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CGeolocation__CGeopoint;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CGeolocation__CGeopoint;

    typedef struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CGeolocation__CGeopointVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CGeolocation__CGeopoint* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CGeolocation__CGeopoint* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CGeolocation__CGeopoint* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CGeolocation__CGeopoint* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CGeolocation__CGeopoint* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CGeolocation__CGeopoint* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Current)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CGeolocation__CGeopoint* This,
        __x_ABI_CWindows_CDevices_CGeolocation_CIGeopoint** result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CGeolocation__CGeopoint* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CGeolocation__CGeopoint* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CGeolocation__CGeopoint* This,
        UINT32 itemsLength,
        __x_ABI_CWindows_CDevices_CGeolocation_CIGeopoint** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CGeolocation__CGeopointVtbl;

    interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CGeolocation__CGeopoint
    {
        CONST_VTBL struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CGeolocation__CGeopointVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CGeolocation__CGeopoint_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CGeolocation__CGeopoint_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CGeolocation__CGeopoint_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CGeolocation__CGeopoint __x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CGeolocation__CGeopoint;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CGeolocation__CGeopoint;

    typedef struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CGeolocation__CGeopointVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CGeolocation__CGeopoint* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CGeolocation__CGeopoint* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CGeolocation__CGeopoint* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CGeolocation__CGeopoint* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CGeolocation__CGeopoint* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CGeolocation__CGeopoint* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* First)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CGeolocation__CGeopoint* This,
        __x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CGeolocation__CGeopoint** result);

        END_INTERFACE
    } __x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CGeolocation__CGeopointVtbl;

    interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CGeolocation__CGeopoint
    {
        CONST_VTBL struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CGeolocation__CGeopointVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CGeolocation__CGeopoint_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CMaps__CEnhancedWaypoint_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CMaps__CEnhancedWaypoint_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CMaps__CEnhancedWaypoint __x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CMaps__CEnhancedWaypoint;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CMaps__CEnhancedWaypoint;

    typedef struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CMaps__CEnhancedWaypointVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CMaps__CEnhancedWaypoint* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CMaps__CEnhancedWaypoint* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CMaps__CEnhancedWaypoint* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CMaps__CEnhancedWaypoint* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CMaps__CEnhancedWaypoint* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CMaps__CEnhancedWaypoint* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Current)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CMaps__CEnhancedWaypoint* This,
        __x_ABI_CWindows_CServices_CMaps_CIEnhancedWaypoint** result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CMaps__CEnhancedWaypoint* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CMaps__CEnhancedWaypoint* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CMaps__CEnhancedWaypoint* This,
        UINT32 itemsLength,
        __x_ABI_CWindows_CServices_CMaps_CIEnhancedWaypoint** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CMaps__CEnhancedWaypointVtbl;

    interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CMaps__CEnhancedWaypoint
    {
        CONST_VTBL struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CMaps__CEnhancedWaypointVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CMaps__CEnhancedWaypoint_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CMaps__CEnhancedWaypoint_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CMaps__CEnhancedWaypoint_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CMaps__CEnhancedWaypoint __x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CMaps__CEnhancedWaypoint;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CMaps__CEnhancedWaypoint;

    typedef struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CMaps__CEnhancedWaypointVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CMaps__CEnhancedWaypoint* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CMaps__CEnhancedWaypoint* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CMaps__CEnhancedWaypoint* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CMaps__CEnhancedWaypoint* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CMaps__CEnhancedWaypoint* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CMaps__CEnhancedWaypoint* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* First)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CMaps__CEnhancedWaypoint* This,
        __x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CMaps__CEnhancedWaypoint** result);

        END_INTERFACE
    } __x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CMaps__CEnhancedWaypointVtbl;

    interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CMaps__CEnhancedWaypoint
    {
        CONST_VTBL struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CMaps__CEnhancedWaypointVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CMaps__CEnhancedWaypoint_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CMaps__CManeuverWarning_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CMaps__CManeuverWarning_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CMaps__CManeuverWarning __x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CMaps__CManeuverWarning;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CMaps__CManeuverWarning;

    typedef struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CMaps__CManeuverWarningVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CMaps__CManeuverWarning* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CMaps__CManeuverWarning* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CMaps__CManeuverWarning* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CMaps__CManeuverWarning* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CMaps__CManeuverWarning* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CMaps__CManeuverWarning* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Current)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CMaps__CManeuverWarning* This,
        __x_ABI_CWindows_CServices_CMaps_CIManeuverWarning** result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CMaps__CManeuverWarning* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CMaps__CManeuverWarning* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CMaps__CManeuverWarning* This,
        UINT32 itemsLength,
        __x_ABI_CWindows_CServices_CMaps_CIManeuverWarning** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CMaps__CManeuverWarningVtbl;

    interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CMaps__CManeuverWarning
    {
        CONST_VTBL struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CMaps__CManeuverWarningVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CMaps__CManeuverWarning_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CMaps__CManeuverWarning_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CMaps__CManeuverWarning_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CMaps__CManeuverWarning __x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CMaps__CManeuverWarning;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CMaps__CManeuverWarning;

    typedef struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CMaps__CManeuverWarningVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CMaps__CManeuverWarning* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CMaps__CManeuverWarning* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CMaps__CManeuverWarning* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CMaps__CManeuverWarning* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CMaps__CManeuverWarning* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CMaps__CManeuverWarning* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* First)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CMaps__CManeuverWarning* This,
        __x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CMaps__CManeuverWarning** result);

        END_INTERFACE
    } __x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CMaps__CManeuverWarningVtbl;

    interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CMaps__CManeuverWarning
    {
        CONST_VTBL struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CMaps__CManeuverWarningVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CMaps__CManeuverWarning_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CMaps__CMapLocation_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CMaps__CMapLocation_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CMaps__CMapLocation __x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CMaps__CMapLocation;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CMaps__CMapLocation;

    typedef struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CMaps__CMapLocationVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CMaps__CMapLocation* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CMaps__CMapLocation* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CMaps__CMapLocation* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CMaps__CMapLocation* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CMaps__CMapLocation* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CMaps__CMapLocation* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Current)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CMaps__CMapLocation* This,
        __x_ABI_CWindows_CServices_CMaps_CIMapLocation** result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CMaps__CMapLocation* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CMaps__CMapLocation* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CMaps__CMapLocation* This,
        UINT32 itemsLength,
        __x_ABI_CWindows_CServices_CMaps_CIMapLocation** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CMaps__CMapLocationVtbl;

    interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CMaps__CMapLocation
    {
        CONST_VTBL struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CMaps__CMapLocationVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CMaps__CMapLocation_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CMaps__CMapLocation_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CMaps__CMapLocation_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CMaps__CMapLocation __x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CMaps__CMapLocation;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CMaps__CMapLocation;

    typedef struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CMaps__CMapLocationVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CMaps__CMapLocation* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CMaps__CMapLocation* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CMaps__CMapLocation* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CMaps__CMapLocation* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CMaps__CMapLocation* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CMaps__CMapLocation* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* First)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CMaps__CMapLocation* This,
        __x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CMaps__CMapLocation** result);

        END_INTERFACE
    } __x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CMaps__CMapLocationVtbl;

    interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CMaps__CMapLocation
    {
        CONST_VTBL struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CMaps__CMapLocationVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CMaps__CMapLocation_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CMaps__CMapRoute_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CMaps__CMapRoute_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CMaps__CMapRoute __x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CMaps__CMapRoute;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CMaps__CMapRoute;

    typedef struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CMaps__CMapRouteVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CMaps__CMapRoute* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CMaps__CMapRoute* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CMaps__CMapRoute* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CMaps__CMapRoute* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CMaps__CMapRoute* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CMaps__CMapRoute* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Current)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CMaps__CMapRoute* This,
        __x_ABI_CWindows_CServices_CMaps_CIMapRoute** result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CMaps__CMapRoute* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CMaps__CMapRoute* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CMaps__CMapRoute* This,
        UINT32 itemsLength,
        __x_ABI_CWindows_CServices_CMaps_CIMapRoute** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CMaps__CMapRouteVtbl;

    interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CMaps__CMapRoute
    {
        CONST_VTBL struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CMaps__CMapRouteVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CMaps__CMapRoute_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CMaps__CMapRoute_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CMaps__CMapRoute_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CMaps__CMapRoute __x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CMaps__CMapRoute;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CMaps__CMapRoute;

    typedef struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CMaps__CMapRouteVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CMaps__CMapRoute* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CMaps__CMapRoute* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CMaps__CMapRoute* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CMaps__CMapRoute* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CMaps__CMapRoute* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CMaps__CMapRoute* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* First)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CMaps__CMapRoute* This,
        __x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CMaps__CMapRoute** result);

        END_INTERFACE
    } __x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CMaps__CMapRouteVtbl;

    interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CMaps__CMapRoute
    {
        CONST_VTBL struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CMaps__CMapRouteVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CMaps__CMapRoute_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CMaps__CMapRouteLeg_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CMaps__CMapRouteLeg_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CMaps__CMapRouteLeg __x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CMaps__CMapRouteLeg;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CMaps__CMapRouteLeg;

    typedef struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CMaps__CMapRouteLegVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CMaps__CMapRouteLeg* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CMaps__CMapRouteLeg* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CMaps__CMapRouteLeg* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CMaps__CMapRouteLeg* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CMaps__CMapRouteLeg* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CMaps__CMapRouteLeg* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Current)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CMaps__CMapRouteLeg* This,
        __x_ABI_CWindows_CServices_CMaps_CIMapRouteLeg** result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CMaps__CMapRouteLeg* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CMaps__CMapRouteLeg* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CMaps__CMapRouteLeg* This,
        UINT32 itemsLength,
        __x_ABI_CWindows_CServices_CMaps_CIMapRouteLeg** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CMaps__CMapRouteLegVtbl;

    interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CMaps__CMapRouteLeg
    {
        CONST_VTBL struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CMaps__CMapRouteLegVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CMaps__CMapRouteLeg_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CMaps__CMapRouteLeg_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CMaps__CMapRouteLeg_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CMaps__CMapRouteLeg __x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CMaps__CMapRouteLeg;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CMaps__CMapRouteLeg;

    typedef struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CMaps__CMapRouteLegVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CMaps__CMapRouteLeg* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CMaps__CMapRouteLeg* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CMaps__CMapRouteLeg* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CMaps__CMapRouteLeg* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CMaps__CMapRouteLeg* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CMaps__CMapRouteLeg* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* First)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CMaps__CMapRouteLeg* This,
        __x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CMaps__CMapRouteLeg** result);

        END_INTERFACE
    } __x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CMaps__CMapRouteLegVtbl;

    interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CMaps__CMapRouteLeg
    {
        CONST_VTBL struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CMaps__CMapRouteLegVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CMaps__CMapRouteLeg_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CMaps__CMapRouteManeuver_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CMaps__CMapRouteManeuver_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CMaps__CMapRouteManeuver __x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CMaps__CMapRouteManeuver;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CMaps__CMapRouteManeuver;

    typedef struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CMaps__CMapRouteManeuverVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CMaps__CMapRouteManeuver* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CMaps__CMapRouteManeuver* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CMaps__CMapRouteManeuver* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CMaps__CMapRouteManeuver* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CMaps__CMapRouteManeuver* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CMaps__CMapRouteManeuver* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Current)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CMaps__CMapRouteManeuver* This,
        __x_ABI_CWindows_CServices_CMaps_CIMapRouteManeuver** result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CMaps__CMapRouteManeuver* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CMaps__CMapRouteManeuver* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CMaps__CMapRouteManeuver* This,
        UINT32 itemsLength,
        __x_ABI_CWindows_CServices_CMaps_CIMapRouteManeuver** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CMaps__CMapRouteManeuverVtbl;

    interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CMaps__CMapRouteManeuver
    {
        CONST_VTBL struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CMaps__CMapRouteManeuverVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CMaps__CMapRouteManeuver_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CMaps__CMapRouteManeuver_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CMaps__CMapRouteManeuver_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CMaps__CMapRouteManeuver __x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CMaps__CMapRouteManeuver;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CMaps__CMapRouteManeuver;

    typedef struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CMaps__CMapRouteManeuverVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CMaps__CMapRouteManeuver* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CMaps__CMapRouteManeuver* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CMaps__CMapRouteManeuver* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CMaps__CMapRouteManeuver* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CMaps__CMapRouteManeuver* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CMaps__CMapRouteManeuver* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* First)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CMaps__CMapRouteManeuver* This,
        __x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CMaps__CMapRouteManeuver** result);

        END_INTERFACE
    } __x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CMaps__CMapRouteManeuverVtbl;

    interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CMaps__CMapRouteManeuver
    {
        CONST_VTBL struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CMaps__CMapRouteManeuverVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CMaps__CMapRouteManeuver_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CMaps__CManeuverWarning_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CMaps__CManeuverWarning_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CMaps__CManeuverWarning __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CMaps__CManeuverWarning;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CMaps__CManeuverWarning;

    typedef struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CMaps__CManeuverWarningVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CMaps__CManeuverWarning* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CMaps__CManeuverWarning* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CMaps__CManeuverWarning* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CMaps__CManeuverWarning* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CMaps__CManeuverWarning* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CMaps__CManeuverWarning* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CMaps__CManeuverWarning* This,
        UINT32 index,
        __x_ABI_CWindows_CServices_CMaps_CIManeuverWarning** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CMaps__CManeuverWarning* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CMaps__CManeuverWarning* This,
        __x_ABI_CWindows_CServices_CMaps_CIManeuverWarning* value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CMaps__CManeuverWarning* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        __x_ABI_CWindows_CServices_CMaps_CIManeuverWarning** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CMaps__CManeuverWarningVtbl;

    interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CMaps__CManeuverWarning
    {
        CONST_VTBL struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CMaps__CManeuverWarningVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CMaps__CManeuverWarning_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CMaps__CMapLocation_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CMaps__CMapLocation_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CMaps__CMapLocation __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CMaps__CMapLocation;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CMaps__CMapLocation;

    typedef struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CMaps__CMapLocationVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CMaps__CMapLocation* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CMaps__CMapLocation* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CMaps__CMapLocation* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CMaps__CMapLocation* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CMaps__CMapLocation* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CMaps__CMapLocation* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CMaps__CMapLocation* This,
        UINT32 index,
        __x_ABI_CWindows_CServices_CMaps_CIMapLocation** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CMaps__CMapLocation* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CMaps__CMapLocation* This,
        __x_ABI_CWindows_CServices_CMaps_CIMapLocation* value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CMaps__CMapLocation* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        __x_ABI_CWindows_CServices_CMaps_CIMapLocation** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CMaps__CMapLocationVtbl;

    interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CMaps__CMapLocation
    {
        CONST_VTBL struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CMaps__CMapLocationVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CMaps__CMapLocation_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CMaps__CMapRoute_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CMaps__CMapRoute_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CMaps__CMapRoute __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CMaps__CMapRoute;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CMaps__CMapRoute;

    typedef struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CMaps__CMapRouteVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CMaps__CMapRoute* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CMaps__CMapRoute* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CMaps__CMapRoute* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CMaps__CMapRoute* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CMaps__CMapRoute* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CMaps__CMapRoute* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CMaps__CMapRoute* This,
        UINT32 index,
        __x_ABI_CWindows_CServices_CMaps_CIMapRoute** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CMaps__CMapRoute* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CMaps__CMapRoute* This,
        __x_ABI_CWindows_CServices_CMaps_CIMapRoute* value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CMaps__CMapRoute* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        __x_ABI_CWindows_CServices_CMaps_CIMapRoute** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CMaps__CMapRouteVtbl;

    interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CMaps__CMapRoute
    {
        CONST_VTBL struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CMaps__CMapRouteVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CMaps__CMapRoute_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CMaps__CMapRouteLeg_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CMaps__CMapRouteLeg_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CMaps__CMapRouteLeg __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CMaps__CMapRouteLeg;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CMaps__CMapRouteLeg;

    typedef struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CMaps__CMapRouteLegVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CMaps__CMapRouteLeg* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CMaps__CMapRouteLeg* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CMaps__CMapRouteLeg* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CMaps__CMapRouteLeg* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CMaps__CMapRouteLeg* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CMaps__CMapRouteLeg* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CMaps__CMapRouteLeg* This,
        UINT32 index,
        __x_ABI_CWindows_CServices_CMaps_CIMapRouteLeg** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CMaps__CMapRouteLeg* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CMaps__CMapRouteLeg* This,
        __x_ABI_CWindows_CServices_CMaps_CIMapRouteLeg* value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CMaps__CMapRouteLeg* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        __x_ABI_CWindows_CServices_CMaps_CIMapRouteLeg** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CMaps__CMapRouteLegVtbl;

    interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CMaps__CMapRouteLeg
    {
        CONST_VTBL struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CMaps__CMapRouteLegVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CMaps__CMapRouteLeg_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CMaps__CMapRouteManeuver_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CMaps__CMapRouteManeuver_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CMaps__CMapRouteManeuver __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CMaps__CMapRouteManeuver;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CMaps__CMapRouteManeuver;

    typedef struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CMaps__CMapRouteManeuverVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CMaps__CMapRouteManeuver* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CMaps__CMapRouteManeuver* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CMaps__CMapRouteManeuver* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CMaps__CMapRouteManeuver* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CMaps__CMapRouteManeuver* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CMaps__CMapRouteManeuver* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CMaps__CMapRouteManeuver* This,
        UINT32 index,
        __x_ABI_CWindows_CServices_CMaps_CIMapRouteManeuver** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CMaps__CMapRouteManeuver* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CMaps__CMapRouteManeuver* This,
        __x_ABI_CWindows_CServices_CMaps_CIMapRouteManeuver* value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CMaps__CMapRouteManeuver* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        __x_ABI_CWindows_CServices_CMaps_CIMapRouteManeuver** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CMaps__CMapRouteManeuverVtbl;

    interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CMaps__CMapRouteManeuver
    {
        CONST_VTBL struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CMaps__CMapRouteManeuverVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CMaps__CMapRouteManeuver_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIReference_1_double_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIReference_1_double_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIReference_1_double __x_ABI_C__FIReference_1_double;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIReference_1_double;

    typedef struct __x_ABI_C__FIReference_1_doubleVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIReference_1_double* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIReference_1_double* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIReference_1_double* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIReference_1_double* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIReference_1_double* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIReference_1_double* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Value)(__x_ABI_C__FIReference_1_double* This,
        DOUBLE* result);

        END_INTERFACE
    } __x_ABI_C__FIReference_1_doubleVtbl;

    interface __x_ABI_C__FIReference_1_double
    {
        CONST_VTBL struct __x_ABI_C__FIReference_1_doubleVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIReference_1_double_INTERFACE_DEFINED__
    
typedef struct __x_ABI_CWindows_CFoundation_CDateTime __x_ABI_CWindows_CFoundation_CDateTime;

#if !defined(____x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CDateTime_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CDateTime_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CDateTime __x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CDateTime;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CDateTime;

    typedef struct __x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CDateTimeVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CDateTime* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CDateTime* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CDateTime* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CDateTime* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CDateTime* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CDateTime* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Value)(__x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CDateTime* This,
        struct __x_ABI_CWindows_CFoundation_CDateTime* result);

        END_INTERFACE
    } __x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CDateTimeVtbl;

    interface __x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CDateTime
    {
        CONST_VTBL struct __x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CDateTimeVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CDateTime_INTERFACE_DEFINED__
    
#ifndef ____x_ABI_CWindows_CDevices_CGeolocation_CIGeoboundingBox_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CGeolocation_CIGeoboundingBox_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CDevices_CGeolocation_CIGeoboundingBox __x_ABI_CWindows_CDevices_CGeolocation_CIGeoboundingBox;

#endif // ____x_ABI_CWindows_CDevices_CGeolocation_CIGeoboundingBox_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CGeolocation_CIGeopath_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CGeolocation_CIGeopath_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CDevices_CGeolocation_CIGeopath __x_ABI_CWindows_CDevices_CGeolocation_CIGeopath;

#endif // ____x_ABI_CWindows_CDevices_CGeolocation_CIGeopath_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CGeolocation_CIGeoshape_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CGeolocation_CIGeoshape_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CDevices_CGeolocation_CIGeoshape __x_ABI_CWindows_CDevices_CGeolocation_CIGeoshape;

#endif // ____x_ABI_CWindows_CDevices_CGeolocation_CIGeoshape_FWD_DEFINED__

typedef enum __x_ABI_CWindows_CFoundation_CAsyncStatus __x_ABI_CWindows_CFoundation_CAsyncStatus;

#ifndef ____x_ABI_CWindows_CFoundation_CIAsyncInfo_FWD_DEFINED__
#define ____x_ABI_CWindows_CFoundation_CIAsyncInfo_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CFoundation_CIAsyncInfo __x_ABI_CWindows_CFoundation_CIAsyncInfo;

#endif // ____x_ABI_CWindows_CFoundation_CIAsyncInfo_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CFoundation_CIPropertyValue_FWD_DEFINED__
#define ____x_ABI_CWindows_CFoundation_CIPropertyValue_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CFoundation_CIPropertyValue __x_ABI_CWindows_CFoundation_CIPropertyValue;

#endif // ____x_ABI_CWindows_CFoundation_CIPropertyValue_FWD_DEFINED__

typedef struct __x_ABI_CWindows_CFoundation_CRect __x_ABI_CWindows_CFoundation_CRect;

typedef struct __x_ABI_CWindows_CFoundation_CTimeSpan __x_ABI_CWindows_CFoundation_CTimeSpan;

typedef enum __x_ABI_CWindows_CUI_CPopups_CPlacement __x_ABI_CWindows_CUI_CPopups_CPlacement;

typedef enum __x_ABI_CWindows_CServices_CMaps_CManeuverWarningKind __x_ABI_CWindows_CServices_CMaps_CManeuverWarningKind;

typedef enum __x_ABI_CWindows_CServices_CMaps_CManeuverWarningSeverity __x_ABI_CWindows_CServices_CMaps_CManeuverWarningSeverity;

typedef enum __x_ABI_CWindows_CServices_CMaps_CMapLocationDesiredAccuracy __x_ABI_CWindows_CServices_CMaps_CMapLocationDesiredAccuracy;

typedef enum __x_ABI_CWindows_CServices_CMaps_CMapLocationFinderStatus __x_ABI_CWindows_CServices_CMaps_CMapLocationFinderStatus;

typedef enum __x_ABI_CWindows_CServices_CMaps_CMapManeuverNotices __x_ABI_CWindows_CServices_CMaps_CMapManeuverNotices;

typedef enum __x_ABI_CWindows_CServices_CMaps_CMapRouteFinderStatus __x_ABI_CWindows_CServices_CMaps_CMapRouteFinderStatus;

typedef enum __x_ABI_CWindows_CServices_CMaps_CMapRouteManeuverKind __x_ABI_CWindows_CServices_CMaps_CMapRouteManeuverKind;

typedef enum __x_ABI_CWindows_CServices_CMaps_CMapRouteOptimization __x_ABI_CWindows_CServices_CMaps_CMapRouteOptimization;

typedef enum __x_ABI_CWindows_CServices_CMaps_CMapRouteRestrictions __x_ABI_CWindows_CServices_CMaps_CMapRouteRestrictions;

typedef enum __x_ABI_CWindows_CServices_CMaps_CMapServiceDataUsagePreference __x_ABI_CWindows_CServices_CMaps_CMapServiceDataUsagePreference;

typedef enum __x_ABI_CWindows_CServices_CMaps_CTrafficCongestion __x_ABI_CWindows_CServices_CMaps_CTrafficCongestion;

typedef enum __x_ABI_CWindows_CServices_CMaps_CWaypointKind __x_ABI_CWindows_CServices_CMaps_CWaypointKind;

enum __x_ABI_CWindows_CServices_CMaps_CManeuverWarningKind
    {
        __x_ABI_CWindows_CServices_CMaps_CManeuverWarningKind_None = 0,
    __x_ABI_CWindows_CServices_CMaps_CManeuverWarningKind_Accident = 1,
    __x_ABI_CWindows_CServices_CMaps_CManeuverWarningKind_AdministrativeDivisionChange = 2,
    __x_ABI_CWindows_CServices_CMaps_CManeuverWarningKind_Alert = 3,
    __x_ABI_CWindows_CServices_CMaps_CManeuverWarningKind_BlockedRoad = 4,
    __x_ABI_CWindows_CServices_CMaps_CManeuverWarningKind_CheckTimetable = 5,
    __x_ABI_CWindows_CServices_CMaps_CManeuverWarningKind_Congestion = 6,
    __x_ABI_CWindows_CServices_CMaps_CManeuverWarningKind_Construction = 7,
    __x_ABI_CWindows_CServices_CMaps_CManeuverWarningKind_CountryChange = 8,
    __x_ABI_CWindows_CServices_CMaps_CManeuverWarningKind_DisabledVehicle = 9,
    __x_ABI_CWindows_CServices_CMaps_CManeuverWarningKind_GateAccess = 10,
    __x_ABI_CWindows_CServices_CMaps_CManeuverWarningKind_GetOffTransit = 11,
    __x_ABI_CWindows_CServices_CMaps_CManeuverWarningKind_GetOnTransit = 12,
    __x_ABI_CWindows_CServices_CMaps_CManeuverWarningKind_IllegalUTurn = 13,
    __x_ABI_CWindows_CServices_CMaps_CManeuverWarningKind_MassTransit = 14,
    __x_ABI_CWindows_CServices_CMaps_CManeuverWarningKind_Miscellaneous = 15,
    __x_ABI_CWindows_CServices_CMaps_CManeuverWarningKind_NoIncident = 16,
    __x_ABI_CWindows_CServices_CMaps_CManeuverWarningKind_Other = 17,
    __x_ABI_CWindows_CServices_CMaps_CManeuverWarningKind_OtherNews = 18,
    __x_ABI_CWindows_CServices_CMaps_CManeuverWarningKind_OtherTrafficIncidents = 19,
    __x_ABI_CWindows_CServices_CMaps_CManeuverWarningKind_PlannedEvent = 20,
    __x_ABI_CWindows_CServices_CMaps_CManeuverWarningKind_PrivateRoad = 21,
    __x_ABI_CWindows_CServices_CMaps_CManeuverWarningKind_RestrictedTurn = 22,
    __x_ABI_CWindows_CServices_CMaps_CManeuverWarningKind_RoadClosures = 23,
    __x_ABI_CWindows_CServices_CMaps_CManeuverWarningKind_RoadHazard = 24,
    __x_ABI_CWindows_CServices_CMaps_CManeuverWarningKind_ScheduledConstruction = 25,
    __x_ABI_CWindows_CServices_CMaps_CManeuverWarningKind_SeasonalClosures = 26,
    __x_ABI_CWindows_CServices_CMaps_CManeuverWarningKind_Tollbooth = 27,
    __x_ABI_CWindows_CServices_CMaps_CManeuverWarningKind_TollRoad = 28,
    __x_ABI_CWindows_CServices_CMaps_CManeuverWarningKind_TollZoneEnter = 29,
    __x_ABI_CWindows_CServices_CMaps_CManeuverWarningKind_TollZoneExit = 30,
    __x_ABI_CWindows_CServices_CMaps_CManeuverWarningKind_TrafficFlow = 31,
    __x_ABI_CWindows_CServices_CMaps_CManeuverWarningKind_TransitLineChange = 32,
    __x_ABI_CWindows_CServices_CMaps_CManeuverWarningKind_UnpavedRoad = 33,
    __x_ABI_CWindows_CServices_CMaps_CManeuverWarningKind_UnscheduledConstruction = 34,
    __x_ABI_CWindows_CServices_CMaps_CManeuverWarningKind_Weather = 35,
};

enum __x_ABI_CWindows_CServices_CMaps_CManeuverWarningSeverity
    {
        __x_ABI_CWindows_CServices_CMaps_CManeuverWarningSeverity_None = 0,
    __x_ABI_CWindows_CServices_CMaps_CManeuverWarningSeverity_LowImpact = 1,
    __x_ABI_CWindows_CServices_CMaps_CManeuverWarningSeverity_Minor = 2,
    __x_ABI_CWindows_CServices_CMaps_CManeuverWarningSeverity_Moderate = 3,
    __x_ABI_CWindows_CServices_CMaps_CManeuverWarningSeverity_Serious = 4,
};

enum __x_ABI_CWindows_CServices_CMaps_CMapLocationDesiredAccuracy
    {
        __x_ABI_CWindows_CServices_CMaps_CMapLocationDesiredAccuracy_High = 0,
    __x_ABI_CWindows_CServices_CMaps_CMapLocationDesiredAccuracy_Low = 1,
};

enum __x_ABI_CWindows_CServices_CMaps_CMapLocationFinderStatus
    {
        __x_ABI_CWindows_CServices_CMaps_CMapLocationFinderStatus_Success = 0,
    __x_ABI_CWindows_CServices_CMaps_CMapLocationFinderStatus_UnknownError = 1,
    __x_ABI_CWindows_CServices_CMaps_CMapLocationFinderStatus_InvalidCredentials = 2,
    __x_ABI_CWindows_CServices_CMaps_CMapLocationFinderStatus_BadLocation = 3,
    __x_ABI_CWindows_CServices_CMaps_CMapLocationFinderStatus_IndexFailure = 4,
    __x_ABI_CWindows_CServices_CMaps_CMapLocationFinderStatus_NetworkFailure = 5,
    __x_ABI_CWindows_CServices_CMaps_CMapLocationFinderStatus_NotSupported = 6,
};

enum __x_ABI_CWindows_CServices_CMaps_CMapManeuverNotices
    {
        __x_ABI_CWindows_CServices_CMaps_CMapManeuverNotices_None = 0,
    __x_ABI_CWindows_CServices_CMaps_CMapManeuverNotices_Toll = 0x1,
    __x_ABI_CWindows_CServices_CMaps_CMapManeuverNotices_Unpaved = 0x2,
};

enum __x_ABI_CWindows_CServices_CMaps_CMapRouteFinderStatus
    {
        __x_ABI_CWindows_CServices_CMaps_CMapRouteFinderStatus_Success = 0,
    __x_ABI_CWindows_CServices_CMaps_CMapRouteFinderStatus_UnknownError = 1,
    __x_ABI_CWindows_CServices_CMaps_CMapRouteFinderStatus_InvalidCredentials = 2,
    __x_ABI_CWindows_CServices_CMaps_CMapRouteFinderStatus_NoRouteFound = 3,
    __x_ABI_CWindows_CServices_CMaps_CMapRouteFinderStatus_NoRouteFoundWithGivenOptions = 4,
    __x_ABI_CWindows_CServices_CMaps_CMapRouteFinderStatus_StartPointNotFound = 5,
    __x_ABI_CWindows_CServices_CMaps_CMapRouteFinderStatus_EndPointNotFound = 6,
    __x_ABI_CWindows_CServices_CMaps_CMapRouteFinderStatus_NoPedestrianRouteFound = 7,
    __x_ABI_CWindows_CServices_CMaps_CMapRouteFinderStatus_NetworkFailure = 8,
    __x_ABI_CWindows_CServices_CMaps_CMapRouteFinderStatus_NotSupported = 9,
};

enum __x_ABI_CWindows_CServices_CMaps_CMapRouteManeuverKind
    {
        __x_ABI_CWindows_CServices_CMaps_CMapRouteManeuverKind_None = 0,
    __x_ABI_CWindows_CServices_CMaps_CMapRouteManeuverKind_Start = 1,
    __x_ABI_CWindows_CServices_CMaps_CMapRouteManeuverKind_Stopover = 2,
    __x_ABI_CWindows_CServices_CMaps_CMapRouteManeuverKind_StopoverResume = 3,
    __x_ABI_CWindows_CServices_CMaps_CMapRouteManeuverKind_End = 4,
    __x_ABI_CWindows_CServices_CMaps_CMapRouteManeuverKind_GoStraight = 5,
    __x_ABI_CWindows_CServices_CMaps_CMapRouteManeuverKind_UTurnLeft = 6,
    __x_ABI_CWindows_CServices_CMaps_CMapRouteManeuverKind_UTurnRight = 7,
    __x_ABI_CWindows_CServices_CMaps_CMapRouteManeuverKind_TurnKeepLeft = 8,
    __x_ABI_CWindows_CServices_CMaps_CMapRouteManeuverKind_TurnKeepRight = 9,
    __x_ABI_CWindows_CServices_CMaps_CMapRouteManeuverKind_TurnLightLeft = 10,
    __x_ABI_CWindows_CServices_CMaps_CMapRouteManeuverKind_TurnLightRight = 11,
    __x_ABI_CWindows_CServices_CMaps_CMapRouteManeuverKind_TurnLeft = 12,
    __x_ABI_CWindows_CServices_CMaps_CMapRouteManeuverKind_TurnRight = 13,
    __x_ABI_CWindows_CServices_CMaps_CMapRouteManeuverKind_TurnHardLeft = 14,
    __x_ABI_CWindows_CServices_CMaps_CMapRouteManeuverKind_TurnHardRight = 15,
    __x_ABI_CWindows_CServices_CMaps_CMapRouteManeuverKind_FreewayEnterLeft = 16,
    __x_ABI_CWindows_CServices_CMaps_CMapRouteManeuverKind_FreewayEnterRight = 17,
    __x_ABI_CWindows_CServices_CMaps_CMapRouteManeuverKind_FreewayLeaveLeft = 18,
    __x_ABI_CWindows_CServices_CMaps_CMapRouteManeuverKind_FreewayLeaveRight = 19,
    __x_ABI_CWindows_CServices_CMaps_CMapRouteManeuverKind_FreewayContinueLeft = 20,
    __x_ABI_CWindows_CServices_CMaps_CMapRouteManeuverKind_FreewayContinueRight = 21,
    __x_ABI_CWindows_CServices_CMaps_CMapRouteManeuverKind_TrafficCircleLeft = 22,
    __x_ABI_CWindows_CServices_CMaps_CMapRouteManeuverKind_TrafficCircleRight = 23,
    __x_ABI_CWindows_CServices_CMaps_CMapRouteManeuverKind_TakeFerry = 24,
};

enum __x_ABI_CWindows_CServices_CMaps_CMapRouteOptimization
    {
        __x_ABI_CWindows_CServices_CMaps_CMapRouteOptimization_Time = 0,
    __x_ABI_CWindows_CServices_CMaps_CMapRouteOptimization_Distance = 1,
    __x_ABI_CWindows_CServices_CMaps_CMapRouteOptimization_TimeWithTraffic = 2,
    __x_ABI_CWindows_CServices_CMaps_CMapRouteOptimization_Scenic = 3,
};

enum __x_ABI_CWindows_CServices_CMaps_CMapRouteRestrictions
    {
        __x_ABI_CWindows_CServices_CMaps_CMapRouteRestrictions_None = 0,
    __x_ABI_CWindows_CServices_CMaps_CMapRouteRestrictions_Highways = 0x1,
    __x_ABI_CWindows_CServices_CMaps_CMapRouteRestrictions_TollRoads = 0x2,
    __x_ABI_CWindows_CServices_CMaps_CMapRouteRestrictions_Ferries = 0x4,
    __x_ABI_CWindows_CServices_CMaps_CMapRouteRestrictions_Tunnels = 0x8,
    __x_ABI_CWindows_CServices_CMaps_CMapRouteRestrictions_DirtRoads = 0x10,
    __x_ABI_CWindows_CServices_CMaps_CMapRouteRestrictions_Motorail = 0x20,
};

enum __x_ABI_CWindows_CServices_CMaps_CMapServiceDataUsagePreference
    {
        __x_ABI_CWindows_CServices_CMaps_CMapServiceDataUsagePreference_Default = 0,
    __x_ABI_CWindows_CServices_CMaps_CMapServiceDataUsagePreference_OfflineMapDataOnly = 1,
};

enum __x_ABI_CWindows_CServices_CMaps_CTrafficCongestion
    {
        __x_ABI_CWindows_CServices_CMaps_CTrafficCongestion_Unknown = 0,
    __x_ABI_CWindows_CServices_CMaps_CTrafficCongestion_Light = 1,
    __x_ABI_CWindows_CServices_CMaps_CTrafficCongestion_Mild = 2,
    __x_ABI_CWindows_CServices_CMaps_CTrafficCongestion_Medium = 3,
    __x_ABI_CWindows_CServices_CMaps_CTrafficCongestion_Heavy = 4,
};

enum __x_ABI_CWindows_CServices_CMaps_CWaypointKind
    {
        __x_ABI_CWindows_CServices_CMaps_CWaypointKind_Stop = 0,
    __x_ABI_CWindows_CServices_CMaps_CWaypointKind_Via = 1,
};

#if !defined(____x_ABI_CWindows_CServices_CMaps_CIEnhancedWaypoint_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CServices_CMaps_CIEnhancedWaypoint_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CServices_CMaps_CIEnhancedWaypointVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CServices_CMaps_CIEnhancedWaypoint* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CServices_CMaps_CIEnhancedWaypoint* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CServices_CMaps_CIEnhancedWaypoint* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CServices_CMaps_CIEnhancedWaypoint* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CServices_CMaps_CIEnhancedWaypoint* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CServices_CMaps_CIEnhancedWaypoint* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Point)(__x_ABI_CWindows_CServices_CMaps_CIEnhancedWaypoint* This,
        __x_ABI_CWindows_CDevices_CGeolocation_CIGeopoint** value);
    HRESULT (STDMETHODCALLTYPE* get_Kind)(__x_ABI_CWindows_CServices_CMaps_CIEnhancedWaypoint* This,
        enum __x_ABI_CWindows_CServices_CMaps_CWaypointKind* value);

        END_INTERFACE
    } __x_ABI_CWindows_CServices_CMaps_CIEnhancedWaypointVtbl;

    interface __x_ABI_CWindows_CServices_CMaps_CIEnhancedWaypoint
    {
        CONST_VTBL struct __x_ABI_CWindows_CServices_CMaps_CIEnhancedWaypointVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CServices_CMaps_CIEnhancedWaypoint;
#endif /* !defined(____x_ABI_CWindows_CServices_CMaps_CIEnhancedWaypoint_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CServices_CMaps_CIEnhancedWaypointFactory_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CServices_CMaps_CIEnhancedWaypointFactory_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CServices_CMaps_CIEnhancedWaypointFactoryVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CServices_CMaps_CIEnhancedWaypointFactory* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CServices_CMaps_CIEnhancedWaypointFactory* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CServices_CMaps_CIEnhancedWaypointFactory* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CServices_CMaps_CIEnhancedWaypointFactory* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CServices_CMaps_CIEnhancedWaypointFactory* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CServices_CMaps_CIEnhancedWaypointFactory* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* Create)(__x_ABI_CWindows_CServices_CMaps_CIEnhancedWaypointFactory* This,
        __x_ABI_CWindows_CDevices_CGeolocation_CIGeopoint* point,
        enum __x_ABI_CWindows_CServices_CMaps_CWaypointKind kind,
        __x_ABI_CWindows_CServices_CMaps_CIEnhancedWaypoint** value);

        END_INTERFACE
    } __x_ABI_CWindows_CServices_CMaps_CIEnhancedWaypointFactoryVtbl;

    interface __x_ABI_CWindows_CServices_CMaps_CIEnhancedWaypointFactory
    {
        CONST_VTBL struct __x_ABI_CWindows_CServices_CMaps_CIEnhancedWaypointFactoryVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CServices_CMaps_CIEnhancedWaypointFactory;
#endif /* !defined(____x_ABI_CWindows_CServices_CMaps_CIEnhancedWaypointFactory_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CServices_CMaps_CIManeuverWarning_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CServices_CMaps_CIManeuverWarning_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CServices_CMaps_CIManeuverWarningVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CServices_CMaps_CIManeuverWarning* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CServices_CMaps_CIManeuverWarning* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CServices_CMaps_CIManeuverWarning* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CServices_CMaps_CIManeuverWarning* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CServices_CMaps_CIManeuverWarning* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CServices_CMaps_CIManeuverWarning* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Kind)(__x_ABI_CWindows_CServices_CMaps_CIManeuverWarning* This,
        enum __x_ABI_CWindows_CServices_CMaps_CManeuverWarningKind* value);
    HRESULT (STDMETHODCALLTYPE* get_Severity)(__x_ABI_CWindows_CServices_CMaps_CIManeuverWarning* This,
        enum __x_ABI_CWindows_CServices_CMaps_CManeuverWarningSeverity* value);

        END_INTERFACE
    } __x_ABI_CWindows_CServices_CMaps_CIManeuverWarningVtbl;

    interface __x_ABI_CWindows_CServices_CMaps_CIManeuverWarning
    {
        CONST_VTBL struct __x_ABI_CWindows_CServices_CMaps_CIManeuverWarningVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CServices_CMaps_CIManeuverWarning;
#endif /* !defined(____x_ABI_CWindows_CServices_CMaps_CIManeuverWarning_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CServices_CMaps_CIMapAddress_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CServices_CMaps_CIMapAddress_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CServices_CMaps_CIMapAddressVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CServices_CMaps_CIMapAddress* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CServices_CMaps_CIMapAddress* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CServices_CMaps_CIMapAddress* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CServices_CMaps_CIMapAddress* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CServices_CMaps_CIMapAddress* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CServices_CMaps_CIMapAddress* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_BuildingName)(__x_ABI_CWindows_CServices_CMaps_CIMapAddress* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_BuildingFloor)(__x_ABI_CWindows_CServices_CMaps_CIMapAddress* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_BuildingRoom)(__x_ABI_CWindows_CServices_CMaps_CIMapAddress* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_BuildingWing)(__x_ABI_CWindows_CServices_CMaps_CIMapAddress* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_StreetNumber)(__x_ABI_CWindows_CServices_CMaps_CIMapAddress* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_Street)(__x_ABI_CWindows_CServices_CMaps_CIMapAddress* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_Neighborhood)(__x_ABI_CWindows_CServices_CMaps_CIMapAddress* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_District)(__x_ABI_CWindows_CServices_CMaps_CIMapAddress* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_Town)(__x_ABI_CWindows_CServices_CMaps_CIMapAddress* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_Region)(__x_ABI_CWindows_CServices_CMaps_CIMapAddress* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_RegionCode)(__x_ABI_CWindows_CServices_CMaps_CIMapAddress* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_Country)(__x_ABI_CWindows_CServices_CMaps_CIMapAddress* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_CountryCode)(__x_ABI_CWindows_CServices_CMaps_CIMapAddress* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_PostCode)(__x_ABI_CWindows_CServices_CMaps_CIMapAddress* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_Continent)(__x_ABI_CWindows_CServices_CMaps_CIMapAddress* This,
        HSTRING* value);

        END_INTERFACE
    } __x_ABI_CWindows_CServices_CMaps_CIMapAddressVtbl;

    interface __x_ABI_CWindows_CServices_CMaps_CIMapAddress
    {
        CONST_VTBL struct __x_ABI_CWindows_CServices_CMaps_CIMapAddressVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CServices_CMaps_CIMapAddress;
#endif /* !defined(____x_ABI_CWindows_CServices_CMaps_CIMapAddress_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CServices_CMaps_CIMapAddress2_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CServices_CMaps_CIMapAddress2_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CServices_CMaps_CIMapAddress2Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CServices_CMaps_CIMapAddress2* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CServices_CMaps_CIMapAddress2* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CServices_CMaps_CIMapAddress2* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CServices_CMaps_CIMapAddress2* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CServices_CMaps_CIMapAddress2* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CServices_CMaps_CIMapAddress2* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_FormattedAddress)(__x_ABI_CWindows_CServices_CMaps_CIMapAddress2* This,
        HSTRING* value);

        END_INTERFACE
    } __x_ABI_CWindows_CServices_CMaps_CIMapAddress2Vtbl;

    interface __x_ABI_CWindows_CServices_CMaps_CIMapAddress2
    {
        CONST_VTBL struct __x_ABI_CWindows_CServices_CMaps_CIMapAddress2Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CServices_CMaps_CIMapAddress2;
#endif /* !defined(____x_ABI_CWindows_CServices_CMaps_CIMapAddress2_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CServices_CMaps_CIMapLocation_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CServices_CMaps_CIMapLocation_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CServices_CMaps_CIMapLocationVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CServices_CMaps_CIMapLocation* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CServices_CMaps_CIMapLocation* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CServices_CMaps_CIMapLocation* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CServices_CMaps_CIMapLocation* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CServices_CMaps_CIMapLocation* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CServices_CMaps_CIMapLocation* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Point)(__x_ABI_CWindows_CServices_CMaps_CIMapLocation* This,
        __x_ABI_CWindows_CDevices_CGeolocation_CIGeopoint** value);
    HRESULT (STDMETHODCALLTYPE* get_DisplayName)(__x_ABI_CWindows_CServices_CMaps_CIMapLocation* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_Description)(__x_ABI_CWindows_CServices_CMaps_CIMapLocation* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_Address)(__x_ABI_CWindows_CServices_CMaps_CIMapLocation* This,
        __x_ABI_CWindows_CServices_CMaps_CIMapAddress** value);

        END_INTERFACE
    } __x_ABI_CWindows_CServices_CMaps_CIMapLocationVtbl;

    interface __x_ABI_CWindows_CServices_CMaps_CIMapLocation
    {
        CONST_VTBL struct __x_ABI_CWindows_CServices_CMaps_CIMapLocationVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CServices_CMaps_CIMapLocation;
#endif /* !defined(____x_ABI_CWindows_CServices_CMaps_CIMapLocation_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CServices_CMaps_CIMapLocationFinderResult_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CServices_CMaps_CIMapLocationFinderResult_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CServices_CMaps_CIMapLocationFinderResultVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CServices_CMaps_CIMapLocationFinderResult* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CServices_CMaps_CIMapLocationFinderResult* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CServices_CMaps_CIMapLocationFinderResult* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CServices_CMaps_CIMapLocationFinderResult* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CServices_CMaps_CIMapLocationFinderResult* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CServices_CMaps_CIMapLocationFinderResult* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Locations)(__x_ABI_CWindows_CServices_CMaps_CIMapLocationFinderResult* This,
        __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CMaps__CMapLocation** value);
    HRESULT (STDMETHODCALLTYPE* get_Status)(__x_ABI_CWindows_CServices_CMaps_CIMapLocationFinderResult* This,
        enum __x_ABI_CWindows_CServices_CMaps_CMapLocationFinderStatus* value);

        END_INTERFACE
    } __x_ABI_CWindows_CServices_CMaps_CIMapLocationFinderResultVtbl;

    interface __x_ABI_CWindows_CServices_CMaps_CIMapLocationFinderResult
    {
        CONST_VTBL struct __x_ABI_CWindows_CServices_CMaps_CIMapLocationFinderResultVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CServices_CMaps_CIMapLocationFinderResult;
#endif /* !defined(____x_ABI_CWindows_CServices_CMaps_CIMapLocationFinderResult_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CServices_CMaps_CIMapLocationFinderStatics_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CServices_CMaps_CIMapLocationFinderStatics_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CServices_CMaps_CIMapLocationFinderStaticsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CServices_CMaps_CIMapLocationFinderStatics* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CServices_CMaps_CIMapLocationFinderStatics* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CServices_CMaps_CIMapLocationFinderStatics* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CServices_CMaps_CIMapLocationFinderStatics* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CServices_CMaps_CIMapLocationFinderStatics* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CServices_CMaps_CIMapLocationFinderStatics* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* FindLocationsAtAsync)(__x_ABI_CWindows_CServices_CMaps_CIMapLocationFinderStatics* This,
        __x_ABI_CWindows_CDevices_CGeolocation_CIGeopoint* queryPoint,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CMaps__CMapLocationFinderResult** result);
    HRESULT (STDMETHODCALLTYPE* FindLocationsAsync)(__x_ABI_CWindows_CServices_CMaps_CIMapLocationFinderStatics* This,
        HSTRING searchText,
        __x_ABI_CWindows_CDevices_CGeolocation_CIGeopoint* referencePoint,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CMaps__CMapLocationFinderResult** result);
    HRESULT (STDMETHODCALLTYPE* FindLocationsWithMaxCountAsync)(__x_ABI_CWindows_CServices_CMaps_CIMapLocationFinderStatics* This,
        HSTRING searchText,
        __x_ABI_CWindows_CDevices_CGeolocation_CIGeopoint* referencePoint,
        UINT32 maxCount,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CMaps__CMapLocationFinderResult** result);

        END_INTERFACE
    } __x_ABI_CWindows_CServices_CMaps_CIMapLocationFinderStaticsVtbl;

    interface __x_ABI_CWindows_CServices_CMaps_CIMapLocationFinderStatics
    {
        CONST_VTBL struct __x_ABI_CWindows_CServices_CMaps_CIMapLocationFinderStaticsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CServices_CMaps_CIMapLocationFinderStatics;
#endif /* !defined(____x_ABI_CWindows_CServices_CMaps_CIMapLocationFinderStatics_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CServices_CMaps_CIMapLocationFinderStatics2_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CServices_CMaps_CIMapLocationFinderStatics2_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CServices_CMaps_CIMapLocationFinderStatics2Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CServices_CMaps_CIMapLocationFinderStatics2* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CServices_CMaps_CIMapLocationFinderStatics2* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CServices_CMaps_CIMapLocationFinderStatics2* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CServices_CMaps_CIMapLocationFinderStatics2* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CServices_CMaps_CIMapLocationFinderStatics2* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CServices_CMaps_CIMapLocationFinderStatics2* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* FindLocationsAtWithAccuracyAsync)(__x_ABI_CWindows_CServices_CMaps_CIMapLocationFinderStatics2* This,
        __x_ABI_CWindows_CDevices_CGeolocation_CIGeopoint* queryPoint,
        enum __x_ABI_CWindows_CServices_CMaps_CMapLocationDesiredAccuracy accuracy,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CMaps__CMapLocationFinderResult** result);

        END_INTERFACE
    } __x_ABI_CWindows_CServices_CMaps_CIMapLocationFinderStatics2Vtbl;

    interface __x_ABI_CWindows_CServices_CMaps_CIMapLocationFinderStatics2
    {
        CONST_VTBL struct __x_ABI_CWindows_CServices_CMaps_CIMapLocationFinderStatics2Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CServices_CMaps_CIMapLocationFinderStatics2;
#endif /* !defined(____x_ABI_CWindows_CServices_CMaps_CIMapLocationFinderStatics2_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CServices_CMaps_CIMapManagerStatics_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CServices_CMaps_CIMapManagerStatics_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CServices_CMaps_CIMapManagerStaticsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CServices_CMaps_CIMapManagerStatics* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CServices_CMaps_CIMapManagerStatics* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CServices_CMaps_CIMapManagerStatics* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CServices_CMaps_CIMapManagerStatics* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CServices_CMaps_CIMapManagerStatics* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CServices_CMaps_CIMapManagerStatics* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* ShowDownloadedMapsUI)(__x_ABI_CWindows_CServices_CMaps_CIMapManagerStatics* This);
    HRESULT (STDMETHODCALLTYPE* ShowMapsUpdateUI)(__x_ABI_CWindows_CServices_CMaps_CIMapManagerStatics* This);

        END_INTERFACE
    } __x_ABI_CWindows_CServices_CMaps_CIMapManagerStaticsVtbl;

    interface __x_ABI_CWindows_CServices_CMaps_CIMapManagerStatics
    {
        CONST_VTBL struct __x_ABI_CWindows_CServices_CMaps_CIMapManagerStaticsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CServices_CMaps_CIMapManagerStatics;
#endif /* !defined(____x_ABI_CWindows_CServices_CMaps_CIMapManagerStatics_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CServices_CMaps_CIMapRoute_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CServices_CMaps_CIMapRoute_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CServices_CMaps_CIMapRouteVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CServices_CMaps_CIMapRoute* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CServices_CMaps_CIMapRoute* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CServices_CMaps_CIMapRoute* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CServices_CMaps_CIMapRoute* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CServices_CMaps_CIMapRoute* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CServices_CMaps_CIMapRoute* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_BoundingBox)(__x_ABI_CWindows_CServices_CMaps_CIMapRoute* This,
        __x_ABI_CWindows_CDevices_CGeolocation_CIGeoboundingBox** value);
    HRESULT (STDMETHODCALLTYPE* get_LengthInMeters)(__x_ABI_CWindows_CServices_CMaps_CIMapRoute* This,
        DOUBLE* value);
    HRESULT (STDMETHODCALLTYPE* get_EstimatedDuration)(__x_ABI_CWindows_CServices_CMaps_CIMapRoute* This,
        struct __x_ABI_CWindows_CFoundation_CTimeSpan* value);
    HRESULT (STDMETHODCALLTYPE* get_Path)(__x_ABI_CWindows_CServices_CMaps_CIMapRoute* This,
        __x_ABI_CWindows_CDevices_CGeolocation_CIGeopath** value);
    HRESULT (STDMETHODCALLTYPE* get_Legs)(__x_ABI_CWindows_CServices_CMaps_CIMapRoute* This,
        __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CMaps__CMapRouteLeg** value);
    HRESULT (STDMETHODCALLTYPE* get_IsTrafficBased)(__x_ABI_CWindows_CServices_CMaps_CIMapRoute* This,
        boolean* value);

        END_INTERFACE
    } __x_ABI_CWindows_CServices_CMaps_CIMapRouteVtbl;

    interface __x_ABI_CWindows_CServices_CMaps_CIMapRoute
    {
        CONST_VTBL struct __x_ABI_CWindows_CServices_CMaps_CIMapRouteVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CServices_CMaps_CIMapRoute;
#endif /* !defined(____x_ABI_CWindows_CServices_CMaps_CIMapRoute_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CServices_CMaps_CIMapRoute2_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CServices_CMaps_CIMapRoute2_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CServices_CMaps_CIMapRoute2Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CServices_CMaps_CIMapRoute2* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CServices_CMaps_CIMapRoute2* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CServices_CMaps_CIMapRoute2* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CServices_CMaps_CIMapRoute2* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CServices_CMaps_CIMapRoute2* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CServices_CMaps_CIMapRoute2* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_ViolatedRestrictions)(__x_ABI_CWindows_CServices_CMaps_CIMapRoute2* This,
        enum __x_ABI_CWindows_CServices_CMaps_CMapRouteRestrictions* value);
    HRESULT (STDMETHODCALLTYPE* get_HasBlockedRoads)(__x_ABI_CWindows_CServices_CMaps_CIMapRoute2* This,
        boolean* value);

        END_INTERFACE
    } __x_ABI_CWindows_CServices_CMaps_CIMapRoute2Vtbl;

    interface __x_ABI_CWindows_CServices_CMaps_CIMapRoute2
    {
        CONST_VTBL struct __x_ABI_CWindows_CServices_CMaps_CIMapRoute2Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CServices_CMaps_CIMapRoute2;
#endif /* !defined(____x_ABI_CWindows_CServices_CMaps_CIMapRoute2_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CServices_CMaps_CIMapRoute3_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CServices_CMaps_CIMapRoute3_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CServices_CMaps_CIMapRoute3Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CServices_CMaps_CIMapRoute3* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CServices_CMaps_CIMapRoute3* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CServices_CMaps_CIMapRoute3* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CServices_CMaps_CIMapRoute3* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CServices_CMaps_CIMapRoute3* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CServices_CMaps_CIMapRoute3* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_DurationWithoutTraffic)(__x_ABI_CWindows_CServices_CMaps_CIMapRoute3* This,
        struct __x_ABI_CWindows_CFoundation_CTimeSpan* value);
    HRESULT (STDMETHODCALLTYPE* get_TrafficCongestion)(__x_ABI_CWindows_CServices_CMaps_CIMapRoute3* This,
        enum __x_ABI_CWindows_CServices_CMaps_CTrafficCongestion* value);

        END_INTERFACE
    } __x_ABI_CWindows_CServices_CMaps_CIMapRoute3Vtbl;

    interface __x_ABI_CWindows_CServices_CMaps_CIMapRoute3
    {
        CONST_VTBL struct __x_ABI_CWindows_CServices_CMaps_CIMapRoute3Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CServices_CMaps_CIMapRoute3;
#endif /* !defined(____x_ABI_CWindows_CServices_CMaps_CIMapRoute3_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CServices_CMaps_CIMapRoute4_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CServices_CMaps_CIMapRoute4_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CServices_CMaps_CIMapRoute4Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CServices_CMaps_CIMapRoute4* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CServices_CMaps_CIMapRoute4* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CServices_CMaps_CIMapRoute4* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CServices_CMaps_CIMapRoute4* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CServices_CMaps_CIMapRoute4* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CServices_CMaps_CIMapRoute4* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_IsScenic)(__x_ABI_CWindows_CServices_CMaps_CIMapRoute4* This,
        boolean* value);

        END_INTERFACE
    } __x_ABI_CWindows_CServices_CMaps_CIMapRoute4Vtbl;

    interface __x_ABI_CWindows_CServices_CMaps_CIMapRoute4
    {
        CONST_VTBL struct __x_ABI_CWindows_CServices_CMaps_CIMapRoute4Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CServices_CMaps_CIMapRoute4;
#endif /* !defined(____x_ABI_CWindows_CServices_CMaps_CIMapRoute4_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CServices_CMaps_CIMapRouteDrivingOptions_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CServices_CMaps_CIMapRouteDrivingOptions_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CServices_CMaps_CIMapRouteDrivingOptionsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CServices_CMaps_CIMapRouteDrivingOptions* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CServices_CMaps_CIMapRouteDrivingOptions* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CServices_CMaps_CIMapRouteDrivingOptions* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CServices_CMaps_CIMapRouteDrivingOptions* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CServices_CMaps_CIMapRouteDrivingOptions* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CServices_CMaps_CIMapRouteDrivingOptions* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_MaxAlternateRouteCount)(__x_ABI_CWindows_CServices_CMaps_CIMapRouteDrivingOptions* This,
        UINT32* value);
    HRESULT (STDMETHODCALLTYPE* put_MaxAlternateRouteCount)(__x_ABI_CWindows_CServices_CMaps_CIMapRouteDrivingOptions* This,
        UINT32 value);
    HRESULT (STDMETHODCALLTYPE* get_InitialHeading)(__x_ABI_CWindows_CServices_CMaps_CIMapRouteDrivingOptions* This,
        __x_ABI_C__FIReference_1_double** value);
    HRESULT (STDMETHODCALLTYPE* put_InitialHeading)(__x_ABI_CWindows_CServices_CMaps_CIMapRouteDrivingOptions* This,
        __x_ABI_C__FIReference_1_double* value);
    HRESULT (STDMETHODCALLTYPE* get_RouteOptimization)(__x_ABI_CWindows_CServices_CMaps_CIMapRouteDrivingOptions* This,
        enum __x_ABI_CWindows_CServices_CMaps_CMapRouteOptimization* value);
    HRESULT (STDMETHODCALLTYPE* put_RouteOptimization)(__x_ABI_CWindows_CServices_CMaps_CIMapRouteDrivingOptions* This,
        enum __x_ABI_CWindows_CServices_CMaps_CMapRouteOptimization value);
    HRESULT (STDMETHODCALLTYPE* get_RouteRestrictions)(__x_ABI_CWindows_CServices_CMaps_CIMapRouteDrivingOptions* This,
        enum __x_ABI_CWindows_CServices_CMaps_CMapRouteRestrictions* value);
    HRESULT (STDMETHODCALLTYPE* put_RouteRestrictions)(__x_ABI_CWindows_CServices_CMaps_CIMapRouteDrivingOptions* This,
        enum __x_ABI_CWindows_CServices_CMaps_CMapRouteRestrictions value);

        END_INTERFACE
    } __x_ABI_CWindows_CServices_CMaps_CIMapRouteDrivingOptionsVtbl;

    interface __x_ABI_CWindows_CServices_CMaps_CIMapRouteDrivingOptions
    {
        CONST_VTBL struct __x_ABI_CWindows_CServices_CMaps_CIMapRouteDrivingOptionsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CServices_CMaps_CIMapRouteDrivingOptions;
#endif /* !defined(____x_ABI_CWindows_CServices_CMaps_CIMapRouteDrivingOptions_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CServices_CMaps_CIMapRouteDrivingOptions2_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CServices_CMaps_CIMapRouteDrivingOptions2_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CServices_CMaps_CIMapRouteDrivingOptions2Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CServices_CMaps_CIMapRouteDrivingOptions2* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CServices_CMaps_CIMapRouteDrivingOptions2* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CServices_CMaps_CIMapRouteDrivingOptions2* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CServices_CMaps_CIMapRouteDrivingOptions2* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CServices_CMaps_CIMapRouteDrivingOptions2* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CServices_CMaps_CIMapRouteDrivingOptions2* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_DepartureTime)(__x_ABI_CWindows_CServices_CMaps_CIMapRouteDrivingOptions2* This,
        __x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CDateTime** value);
    HRESULT (STDMETHODCALLTYPE* put_DepartureTime)(__x_ABI_CWindows_CServices_CMaps_CIMapRouteDrivingOptions2* This,
        __x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CDateTime* value);

        END_INTERFACE
    } __x_ABI_CWindows_CServices_CMaps_CIMapRouteDrivingOptions2Vtbl;

    interface __x_ABI_CWindows_CServices_CMaps_CIMapRouteDrivingOptions2
    {
        CONST_VTBL struct __x_ABI_CWindows_CServices_CMaps_CIMapRouteDrivingOptions2Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CServices_CMaps_CIMapRouteDrivingOptions2;
#endif /* !defined(____x_ABI_CWindows_CServices_CMaps_CIMapRouteDrivingOptions2_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CServices_CMaps_CIMapRouteFinderResult_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CServices_CMaps_CIMapRouteFinderResult_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CServices_CMaps_CIMapRouteFinderResultVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CServices_CMaps_CIMapRouteFinderResult* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CServices_CMaps_CIMapRouteFinderResult* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CServices_CMaps_CIMapRouteFinderResult* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CServices_CMaps_CIMapRouteFinderResult* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CServices_CMaps_CIMapRouteFinderResult* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CServices_CMaps_CIMapRouteFinderResult* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Route)(__x_ABI_CWindows_CServices_CMaps_CIMapRouteFinderResult* This,
        __x_ABI_CWindows_CServices_CMaps_CIMapRoute** value);
    HRESULT (STDMETHODCALLTYPE* get_Status)(__x_ABI_CWindows_CServices_CMaps_CIMapRouteFinderResult* This,
        enum __x_ABI_CWindows_CServices_CMaps_CMapRouteFinderStatus* value);

        END_INTERFACE
    } __x_ABI_CWindows_CServices_CMaps_CIMapRouteFinderResultVtbl;

    interface __x_ABI_CWindows_CServices_CMaps_CIMapRouteFinderResult
    {
        CONST_VTBL struct __x_ABI_CWindows_CServices_CMaps_CIMapRouteFinderResultVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CServices_CMaps_CIMapRouteFinderResult;
#endif /* !defined(____x_ABI_CWindows_CServices_CMaps_CIMapRouteFinderResult_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CServices_CMaps_CIMapRouteFinderResult2_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CServices_CMaps_CIMapRouteFinderResult2_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CServices_CMaps_CIMapRouteFinderResult2Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CServices_CMaps_CIMapRouteFinderResult2* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CServices_CMaps_CIMapRouteFinderResult2* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CServices_CMaps_CIMapRouteFinderResult2* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CServices_CMaps_CIMapRouteFinderResult2* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CServices_CMaps_CIMapRouteFinderResult2* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CServices_CMaps_CIMapRouteFinderResult2* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_AlternateRoutes)(__x_ABI_CWindows_CServices_CMaps_CIMapRouteFinderResult2* This,
        __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CMaps__CMapRoute** value);

        END_INTERFACE
    } __x_ABI_CWindows_CServices_CMaps_CIMapRouteFinderResult2Vtbl;

    interface __x_ABI_CWindows_CServices_CMaps_CIMapRouteFinderResult2
    {
        CONST_VTBL struct __x_ABI_CWindows_CServices_CMaps_CIMapRouteFinderResult2Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CServices_CMaps_CIMapRouteFinderResult2;
#endif /* !defined(____x_ABI_CWindows_CServices_CMaps_CIMapRouteFinderResult2_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CServices_CMaps_CIMapRouteFinderStatics_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CServices_CMaps_CIMapRouteFinderStatics_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CServices_CMaps_CIMapRouteFinderStaticsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CServices_CMaps_CIMapRouteFinderStatics* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CServices_CMaps_CIMapRouteFinderStatics* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CServices_CMaps_CIMapRouteFinderStatics* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CServices_CMaps_CIMapRouteFinderStatics* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CServices_CMaps_CIMapRouteFinderStatics* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CServices_CMaps_CIMapRouteFinderStatics* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetDrivingRouteAsync)(__x_ABI_CWindows_CServices_CMaps_CIMapRouteFinderStatics* This,
        __x_ABI_CWindows_CDevices_CGeolocation_CIGeopoint* startPoint,
        __x_ABI_CWindows_CDevices_CGeolocation_CIGeopoint* endPoint,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CMaps__CMapRouteFinderResult** result);
    HRESULT (STDMETHODCALLTYPE* GetDrivingRouteWithOptimizationAsync)(__x_ABI_CWindows_CServices_CMaps_CIMapRouteFinderStatics* This,
        __x_ABI_CWindows_CDevices_CGeolocation_CIGeopoint* startPoint,
        __x_ABI_CWindows_CDevices_CGeolocation_CIGeopoint* endPoint,
        enum __x_ABI_CWindows_CServices_CMaps_CMapRouteOptimization optimization,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CMaps__CMapRouteFinderResult** result);
    HRESULT (STDMETHODCALLTYPE* GetDrivingRouteWithOptimizationAndRestrictionsAsync)(__x_ABI_CWindows_CServices_CMaps_CIMapRouteFinderStatics* This,
        __x_ABI_CWindows_CDevices_CGeolocation_CIGeopoint* startPoint,
        __x_ABI_CWindows_CDevices_CGeolocation_CIGeopoint* endPoint,
        enum __x_ABI_CWindows_CServices_CMaps_CMapRouteOptimization optimization,
        enum __x_ABI_CWindows_CServices_CMaps_CMapRouteRestrictions restrictions,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CMaps__CMapRouteFinderResult** result);
    HRESULT (STDMETHODCALLTYPE* GetDrivingRouteWithOptimizationRestrictionsAndHeadingAsync)(__x_ABI_CWindows_CServices_CMaps_CIMapRouteFinderStatics* This,
        __x_ABI_CWindows_CDevices_CGeolocation_CIGeopoint* startPoint,
        __x_ABI_CWindows_CDevices_CGeolocation_CIGeopoint* endPoint,
        enum __x_ABI_CWindows_CServices_CMaps_CMapRouteOptimization optimization,
        enum __x_ABI_CWindows_CServices_CMaps_CMapRouteRestrictions restrictions,
        DOUBLE headingInDegrees,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CMaps__CMapRouteFinderResult** result);
    HRESULT (STDMETHODCALLTYPE* GetDrivingRouteFromWaypointsAsync)(__x_ABI_CWindows_CServices_CMaps_CIMapRouteFinderStatics* This,
        __x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CGeolocation__CGeopoint* wayPoints,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CMaps__CMapRouteFinderResult** result);
    HRESULT (STDMETHODCALLTYPE* GetDrivingRouteFromWaypointsAndOptimizationAsync)(__x_ABI_CWindows_CServices_CMaps_CIMapRouteFinderStatics* This,
        __x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CGeolocation__CGeopoint* wayPoints,
        enum __x_ABI_CWindows_CServices_CMaps_CMapRouteOptimization optimization,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CMaps__CMapRouteFinderResult** result);
    HRESULT (STDMETHODCALLTYPE* GetDrivingRouteFromWaypointsOptimizationAndRestrictionsAsync)(__x_ABI_CWindows_CServices_CMaps_CIMapRouteFinderStatics* This,
        __x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CGeolocation__CGeopoint* wayPoints,
        enum __x_ABI_CWindows_CServices_CMaps_CMapRouteOptimization optimization,
        enum __x_ABI_CWindows_CServices_CMaps_CMapRouteRestrictions restrictions,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CMaps__CMapRouteFinderResult** result);
    HRESULT (STDMETHODCALLTYPE* GetDrivingRouteFromWaypointsOptimizationRestrictionsAndHeadingAsync)(__x_ABI_CWindows_CServices_CMaps_CIMapRouteFinderStatics* This,
        __x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CGeolocation__CGeopoint* wayPoints,
        enum __x_ABI_CWindows_CServices_CMaps_CMapRouteOptimization optimization,
        enum __x_ABI_CWindows_CServices_CMaps_CMapRouteRestrictions restrictions,
        DOUBLE headingInDegrees,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CMaps__CMapRouteFinderResult** result);
    HRESULT (STDMETHODCALLTYPE* GetWalkingRouteAsync)(__x_ABI_CWindows_CServices_CMaps_CIMapRouteFinderStatics* This,
        __x_ABI_CWindows_CDevices_CGeolocation_CIGeopoint* startPoint,
        __x_ABI_CWindows_CDevices_CGeolocation_CIGeopoint* endPoint,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CMaps__CMapRouteFinderResult** result);
    HRESULT (STDMETHODCALLTYPE* GetWalkingRouteFromWaypointsAsync)(__x_ABI_CWindows_CServices_CMaps_CIMapRouteFinderStatics* This,
        __x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CGeolocation__CGeopoint* wayPoints,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CMaps__CMapRouteFinderResult** result);

        END_INTERFACE
    } __x_ABI_CWindows_CServices_CMaps_CIMapRouteFinderStaticsVtbl;

    interface __x_ABI_CWindows_CServices_CMaps_CIMapRouteFinderStatics
    {
        CONST_VTBL struct __x_ABI_CWindows_CServices_CMaps_CIMapRouteFinderStaticsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CServices_CMaps_CIMapRouteFinderStatics;
#endif /* !defined(____x_ABI_CWindows_CServices_CMaps_CIMapRouteFinderStatics_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CServices_CMaps_CIMapRouteFinderStatics2_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CServices_CMaps_CIMapRouteFinderStatics2_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CServices_CMaps_CIMapRouteFinderStatics2Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CServices_CMaps_CIMapRouteFinderStatics2* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CServices_CMaps_CIMapRouteFinderStatics2* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CServices_CMaps_CIMapRouteFinderStatics2* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CServices_CMaps_CIMapRouteFinderStatics2* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CServices_CMaps_CIMapRouteFinderStatics2* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CServices_CMaps_CIMapRouteFinderStatics2* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetDrivingRouteWithOptionsAsync)(__x_ABI_CWindows_CServices_CMaps_CIMapRouteFinderStatics2* This,
        __x_ABI_CWindows_CDevices_CGeolocation_CIGeopoint* startPoint,
        __x_ABI_CWindows_CDevices_CGeolocation_CIGeopoint* endPoint,
        __x_ABI_CWindows_CServices_CMaps_CIMapRouteDrivingOptions* options,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CMaps__CMapRouteFinderResult** result);

        END_INTERFACE
    } __x_ABI_CWindows_CServices_CMaps_CIMapRouteFinderStatics2Vtbl;

    interface __x_ABI_CWindows_CServices_CMaps_CIMapRouteFinderStatics2
    {
        CONST_VTBL struct __x_ABI_CWindows_CServices_CMaps_CIMapRouteFinderStatics2Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CServices_CMaps_CIMapRouteFinderStatics2;
#endif /* !defined(____x_ABI_CWindows_CServices_CMaps_CIMapRouteFinderStatics2_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CServices_CMaps_CIMapRouteFinderStatics3_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CServices_CMaps_CIMapRouteFinderStatics3_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CServices_CMaps_CIMapRouteFinderStatics3Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CServices_CMaps_CIMapRouteFinderStatics3* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CServices_CMaps_CIMapRouteFinderStatics3* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CServices_CMaps_CIMapRouteFinderStatics3* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CServices_CMaps_CIMapRouteFinderStatics3* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CServices_CMaps_CIMapRouteFinderStatics3* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CServices_CMaps_CIMapRouteFinderStatics3* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetDrivingRouteFromEnhancedWaypointsAsync)(__x_ABI_CWindows_CServices_CMaps_CIMapRouteFinderStatics3* This,
        __x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CMaps__CEnhancedWaypoint* waypoints,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CMaps__CMapRouteFinderResult** result);
    HRESULT (STDMETHODCALLTYPE* GetDrivingRouteFromEnhancedWaypointsWithOptionsAsync)(__x_ABI_CWindows_CServices_CMaps_CIMapRouteFinderStatics3* This,
        __x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CMaps__CEnhancedWaypoint* waypoints,
        __x_ABI_CWindows_CServices_CMaps_CIMapRouteDrivingOptions* options,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CMaps__CMapRouteFinderResult** result);

        END_INTERFACE
    } __x_ABI_CWindows_CServices_CMaps_CIMapRouteFinderStatics3Vtbl;

    interface __x_ABI_CWindows_CServices_CMaps_CIMapRouteFinderStatics3
    {
        CONST_VTBL struct __x_ABI_CWindows_CServices_CMaps_CIMapRouteFinderStatics3Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CServices_CMaps_CIMapRouteFinderStatics3;
#endif /* !defined(____x_ABI_CWindows_CServices_CMaps_CIMapRouteFinderStatics3_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CServices_CMaps_CIMapRouteLeg_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CServices_CMaps_CIMapRouteLeg_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CServices_CMaps_CIMapRouteLegVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CServices_CMaps_CIMapRouteLeg* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CServices_CMaps_CIMapRouteLeg* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CServices_CMaps_CIMapRouteLeg* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CServices_CMaps_CIMapRouteLeg* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CServices_CMaps_CIMapRouteLeg* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CServices_CMaps_CIMapRouteLeg* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_BoundingBox)(__x_ABI_CWindows_CServices_CMaps_CIMapRouteLeg* This,
        __x_ABI_CWindows_CDevices_CGeolocation_CIGeoboundingBox** value);
    HRESULT (STDMETHODCALLTYPE* get_Path)(__x_ABI_CWindows_CServices_CMaps_CIMapRouteLeg* This,
        __x_ABI_CWindows_CDevices_CGeolocation_CIGeopath** value);
    HRESULT (STDMETHODCALLTYPE* get_LengthInMeters)(__x_ABI_CWindows_CServices_CMaps_CIMapRouteLeg* This,
        DOUBLE* value);
    HRESULT (STDMETHODCALLTYPE* get_EstimatedDuration)(__x_ABI_CWindows_CServices_CMaps_CIMapRouteLeg* This,
        struct __x_ABI_CWindows_CFoundation_CTimeSpan* value);
    HRESULT (STDMETHODCALLTYPE* get_Maneuvers)(__x_ABI_CWindows_CServices_CMaps_CIMapRouteLeg* This,
        __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CMaps__CMapRouteManeuver** value);

        END_INTERFACE
    } __x_ABI_CWindows_CServices_CMaps_CIMapRouteLegVtbl;

    interface __x_ABI_CWindows_CServices_CMaps_CIMapRouteLeg
    {
        CONST_VTBL struct __x_ABI_CWindows_CServices_CMaps_CIMapRouteLegVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CServices_CMaps_CIMapRouteLeg;
#endif /* !defined(____x_ABI_CWindows_CServices_CMaps_CIMapRouteLeg_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CServices_CMaps_CIMapRouteLeg2_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CServices_CMaps_CIMapRouteLeg2_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CServices_CMaps_CIMapRouteLeg2Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CServices_CMaps_CIMapRouteLeg2* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CServices_CMaps_CIMapRouteLeg2* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CServices_CMaps_CIMapRouteLeg2* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CServices_CMaps_CIMapRouteLeg2* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CServices_CMaps_CIMapRouteLeg2* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CServices_CMaps_CIMapRouteLeg2* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_DurationWithoutTraffic)(__x_ABI_CWindows_CServices_CMaps_CIMapRouteLeg2* This,
        struct __x_ABI_CWindows_CFoundation_CTimeSpan* value);
    HRESULT (STDMETHODCALLTYPE* get_TrafficCongestion)(__x_ABI_CWindows_CServices_CMaps_CIMapRouteLeg2* This,
        enum __x_ABI_CWindows_CServices_CMaps_CTrafficCongestion* value);

        END_INTERFACE
    } __x_ABI_CWindows_CServices_CMaps_CIMapRouteLeg2Vtbl;

    interface __x_ABI_CWindows_CServices_CMaps_CIMapRouteLeg2
    {
        CONST_VTBL struct __x_ABI_CWindows_CServices_CMaps_CIMapRouteLeg2Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CServices_CMaps_CIMapRouteLeg2;
#endif /* !defined(____x_ABI_CWindows_CServices_CMaps_CIMapRouteLeg2_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CServices_CMaps_CIMapRouteManeuver_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CServices_CMaps_CIMapRouteManeuver_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CServices_CMaps_CIMapRouteManeuverVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CServices_CMaps_CIMapRouteManeuver* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CServices_CMaps_CIMapRouteManeuver* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CServices_CMaps_CIMapRouteManeuver* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CServices_CMaps_CIMapRouteManeuver* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CServices_CMaps_CIMapRouteManeuver* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CServices_CMaps_CIMapRouteManeuver* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_StartingPoint)(__x_ABI_CWindows_CServices_CMaps_CIMapRouteManeuver* This,
        __x_ABI_CWindows_CDevices_CGeolocation_CIGeopoint** value);
    HRESULT (STDMETHODCALLTYPE* get_LengthInMeters)(__x_ABI_CWindows_CServices_CMaps_CIMapRouteManeuver* This,
        DOUBLE* value);
    HRESULT (STDMETHODCALLTYPE* get_InstructionText)(__x_ABI_CWindows_CServices_CMaps_CIMapRouteManeuver* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_Kind)(__x_ABI_CWindows_CServices_CMaps_CIMapRouteManeuver* This,
        enum __x_ABI_CWindows_CServices_CMaps_CMapRouteManeuverKind* value);
    HRESULT (STDMETHODCALLTYPE* get_ExitNumber)(__x_ABI_CWindows_CServices_CMaps_CIMapRouteManeuver* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_ManeuverNotices)(__x_ABI_CWindows_CServices_CMaps_CIMapRouteManeuver* This,
        enum __x_ABI_CWindows_CServices_CMaps_CMapManeuverNotices* value);

        END_INTERFACE
    } __x_ABI_CWindows_CServices_CMaps_CIMapRouteManeuverVtbl;

    interface __x_ABI_CWindows_CServices_CMaps_CIMapRouteManeuver
    {
        CONST_VTBL struct __x_ABI_CWindows_CServices_CMaps_CIMapRouteManeuverVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CServices_CMaps_CIMapRouteManeuver;
#endif /* !defined(____x_ABI_CWindows_CServices_CMaps_CIMapRouteManeuver_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CServices_CMaps_CIMapRouteManeuver2_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CServices_CMaps_CIMapRouteManeuver2_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CServices_CMaps_CIMapRouteManeuver2Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CServices_CMaps_CIMapRouteManeuver2* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CServices_CMaps_CIMapRouteManeuver2* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CServices_CMaps_CIMapRouteManeuver2* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CServices_CMaps_CIMapRouteManeuver2* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CServices_CMaps_CIMapRouteManeuver2* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CServices_CMaps_CIMapRouteManeuver2* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_StartHeading)(__x_ABI_CWindows_CServices_CMaps_CIMapRouteManeuver2* This,
        DOUBLE* value);
    HRESULT (STDMETHODCALLTYPE* get_EndHeading)(__x_ABI_CWindows_CServices_CMaps_CIMapRouteManeuver2* This,
        DOUBLE* value);
    HRESULT (STDMETHODCALLTYPE* get_StreetName)(__x_ABI_CWindows_CServices_CMaps_CIMapRouteManeuver2* This,
        HSTRING* value);

        END_INTERFACE
    } __x_ABI_CWindows_CServices_CMaps_CIMapRouteManeuver2Vtbl;

    interface __x_ABI_CWindows_CServices_CMaps_CIMapRouteManeuver2
    {
        CONST_VTBL struct __x_ABI_CWindows_CServices_CMaps_CIMapRouteManeuver2Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CServices_CMaps_CIMapRouteManeuver2;
#endif /* !defined(____x_ABI_CWindows_CServices_CMaps_CIMapRouteManeuver2_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CServices_CMaps_CIMapRouteManeuver3_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CServices_CMaps_CIMapRouteManeuver3_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CServices_CMaps_CIMapRouteManeuver3Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CServices_CMaps_CIMapRouteManeuver3* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CServices_CMaps_CIMapRouteManeuver3* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CServices_CMaps_CIMapRouteManeuver3* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CServices_CMaps_CIMapRouteManeuver3* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CServices_CMaps_CIMapRouteManeuver3* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CServices_CMaps_CIMapRouteManeuver3* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Warnings)(__x_ABI_CWindows_CServices_CMaps_CIMapRouteManeuver3* This,
        __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CMaps__CManeuverWarning** value);

        END_INTERFACE
    } __x_ABI_CWindows_CServices_CMaps_CIMapRouteManeuver3Vtbl;

    interface __x_ABI_CWindows_CServices_CMaps_CIMapRouteManeuver3
    {
        CONST_VTBL struct __x_ABI_CWindows_CServices_CMaps_CIMapRouteManeuver3Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CServices_CMaps_CIMapRouteManeuver3;
#endif /* !defined(____x_ABI_CWindows_CServices_CMaps_CIMapRouteManeuver3_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CServices_CMaps_CIMapServiceStatics_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CServices_CMaps_CIMapServiceStatics_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CServices_CMaps_CIMapServiceStaticsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CServices_CMaps_CIMapServiceStatics* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CServices_CMaps_CIMapServiceStatics* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CServices_CMaps_CIMapServiceStatics* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CServices_CMaps_CIMapServiceStatics* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CServices_CMaps_CIMapServiceStatics* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CServices_CMaps_CIMapServiceStatics* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* put_ServiceToken)(__x_ABI_CWindows_CServices_CMaps_CIMapServiceStatics* This,
        HSTRING value);
    HRESULT (STDMETHODCALLTYPE* get_ServiceToken)(__x_ABI_CWindows_CServices_CMaps_CIMapServiceStatics* This,
        HSTRING* value);

        END_INTERFACE
    } __x_ABI_CWindows_CServices_CMaps_CIMapServiceStaticsVtbl;

    interface __x_ABI_CWindows_CServices_CMaps_CIMapServiceStatics
    {
        CONST_VTBL struct __x_ABI_CWindows_CServices_CMaps_CIMapServiceStaticsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CServices_CMaps_CIMapServiceStatics;
#endif /* !defined(____x_ABI_CWindows_CServices_CMaps_CIMapServiceStatics_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CServices_CMaps_CIMapServiceStatics2_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CServices_CMaps_CIMapServiceStatics2_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CServices_CMaps_CIMapServiceStatics2Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CServices_CMaps_CIMapServiceStatics2* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CServices_CMaps_CIMapServiceStatics2* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CServices_CMaps_CIMapServiceStatics2* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CServices_CMaps_CIMapServiceStatics2* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CServices_CMaps_CIMapServiceStatics2* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CServices_CMaps_CIMapServiceStatics2* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_WorldViewRegionCode)(__x_ABI_CWindows_CServices_CMaps_CIMapServiceStatics2* This,
        HSTRING* value);

        END_INTERFACE
    } __x_ABI_CWindows_CServices_CMaps_CIMapServiceStatics2Vtbl;

    interface __x_ABI_CWindows_CServices_CMaps_CIMapServiceStatics2
    {
        CONST_VTBL struct __x_ABI_CWindows_CServices_CMaps_CIMapServiceStatics2Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CServices_CMaps_CIMapServiceStatics2;
#endif /* !defined(____x_ABI_CWindows_CServices_CMaps_CIMapServiceStatics2_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CServices_CMaps_CIMapServiceStatics3_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CServices_CMaps_CIMapServiceStatics3_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CServices_CMaps_CIMapServiceStatics3Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CServices_CMaps_CIMapServiceStatics3* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CServices_CMaps_CIMapServiceStatics3* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CServices_CMaps_CIMapServiceStatics3* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CServices_CMaps_CIMapServiceStatics3* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CServices_CMaps_CIMapServiceStatics3* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CServices_CMaps_CIMapServiceStatics3* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_DataAttributions)(__x_ABI_CWindows_CServices_CMaps_CIMapServiceStatics3* This,
        HSTRING* value);

        END_INTERFACE
    } __x_ABI_CWindows_CServices_CMaps_CIMapServiceStatics3Vtbl;

    interface __x_ABI_CWindows_CServices_CMaps_CIMapServiceStatics3
    {
        CONST_VTBL struct __x_ABI_CWindows_CServices_CMaps_CIMapServiceStatics3Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CServices_CMaps_CIMapServiceStatics3;
#endif /* !defined(____x_ABI_CWindows_CServices_CMaps_CIMapServiceStatics3_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CServices_CMaps_CIMapServiceStatics4_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CServices_CMaps_CIMapServiceStatics4_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CServices_CMaps_CIMapServiceStatics4Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CServices_CMaps_CIMapServiceStatics4* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CServices_CMaps_CIMapServiceStatics4* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CServices_CMaps_CIMapServiceStatics4* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CServices_CMaps_CIMapServiceStatics4* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CServices_CMaps_CIMapServiceStatics4* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CServices_CMaps_CIMapServiceStatics4* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* put_DataUsagePreference)(__x_ABI_CWindows_CServices_CMaps_CIMapServiceStatics4* This,
        enum __x_ABI_CWindows_CServices_CMaps_CMapServiceDataUsagePreference value);
    HRESULT (STDMETHODCALLTYPE* get_DataUsagePreference)(__x_ABI_CWindows_CServices_CMaps_CIMapServiceStatics4* This,
        enum __x_ABI_CWindows_CServices_CMaps_CMapServiceDataUsagePreference* value);

        END_INTERFACE
    } __x_ABI_CWindows_CServices_CMaps_CIMapServiceStatics4Vtbl;

    interface __x_ABI_CWindows_CServices_CMaps_CIMapServiceStatics4
    {
        CONST_VTBL struct __x_ABI_CWindows_CServices_CMaps_CIMapServiceStatics4Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CServices_CMaps_CIMapServiceStatics4;
#endif /* !defined(____x_ABI_CWindows_CServices_CMaps_CIMapServiceStatics4_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CServices_CMaps_CIPlaceInfo_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CServices_CMaps_CIPlaceInfo_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CServices_CMaps_CIPlaceInfoVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CServices_CMaps_CIPlaceInfo* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CServices_CMaps_CIPlaceInfo* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CServices_CMaps_CIPlaceInfo* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CServices_CMaps_CIPlaceInfo* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CServices_CMaps_CIPlaceInfo* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CServices_CMaps_CIPlaceInfo* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* Show)(__x_ABI_CWindows_CServices_CMaps_CIPlaceInfo* This,
        struct __x_ABI_CWindows_CFoundation_CRect selection);
    HRESULT (STDMETHODCALLTYPE* ShowWithPreferredPlacement)(__x_ABI_CWindows_CServices_CMaps_CIPlaceInfo* This,
        struct __x_ABI_CWindows_CFoundation_CRect selection,
        enum __x_ABI_CWindows_CUI_CPopups_CPlacement preferredPlacement);
    HRESULT (STDMETHODCALLTYPE* get_Identifier)(__x_ABI_CWindows_CServices_CMaps_CIPlaceInfo* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_DisplayName)(__x_ABI_CWindows_CServices_CMaps_CIPlaceInfo* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_DisplayAddress)(__x_ABI_CWindows_CServices_CMaps_CIPlaceInfo* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_Geoshape)(__x_ABI_CWindows_CServices_CMaps_CIPlaceInfo* This,
        __x_ABI_CWindows_CDevices_CGeolocation_CIGeoshape** value);

        END_INTERFACE
    } __x_ABI_CWindows_CServices_CMaps_CIPlaceInfoVtbl;

    interface __x_ABI_CWindows_CServices_CMaps_CIPlaceInfo
    {
        CONST_VTBL struct __x_ABI_CWindows_CServices_CMaps_CIPlaceInfoVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CServices_CMaps_CIPlaceInfo;
#endif /* !defined(____x_ABI_CWindows_CServices_CMaps_CIPlaceInfo_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CServices_CMaps_CIPlaceInfoCreateOptions_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CServices_CMaps_CIPlaceInfoCreateOptions_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CServices_CMaps_CIPlaceInfoCreateOptionsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CServices_CMaps_CIPlaceInfoCreateOptions* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CServices_CMaps_CIPlaceInfoCreateOptions* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CServices_CMaps_CIPlaceInfoCreateOptions* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CServices_CMaps_CIPlaceInfoCreateOptions* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CServices_CMaps_CIPlaceInfoCreateOptions* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CServices_CMaps_CIPlaceInfoCreateOptions* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* put_DisplayName)(__x_ABI_CWindows_CServices_CMaps_CIPlaceInfoCreateOptions* This,
        HSTRING value);
    HRESULT (STDMETHODCALLTYPE* get_DisplayName)(__x_ABI_CWindows_CServices_CMaps_CIPlaceInfoCreateOptions* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* put_DisplayAddress)(__x_ABI_CWindows_CServices_CMaps_CIPlaceInfoCreateOptions* This,
        HSTRING value);
    HRESULT (STDMETHODCALLTYPE* get_DisplayAddress)(__x_ABI_CWindows_CServices_CMaps_CIPlaceInfoCreateOptions* This,
        HSTRING* value);

        END_INTERFACE
    } __x_ABI_CWindows_CServices_CMaps_CIPlaceInfoCreateOptionsVtbl;

    interface __x_ABI_CWindows_CServices_CMaps_CIPlaceInfoCreateOptions
    {
        CONST_VTBL struct __x_ABI_CWindows_CServices_CMaps_CIPlaceInfoCreateOptionsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CServices_CMaps_CIPlaceInfoCreateOptions;
#endif /* !defined(____x_ABI_CWindows_CServices_CMaps_CIPlaceInfoCreateOptions_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CServices_CMaps_CIPlaceInfoStatics_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CServices_CMaps_CIPlaceInfoStatics_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CServices_CMaps_CIPlaceInfoStaticsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CServices_CMaps_CIPlaceInfoStatics* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CServices_CMaps_CIPlaceInfoStatics* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CServices_CMaps_CIPlaceInfoStatics* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CServices_CMaps_CIPlaceInfoStatics* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CServices_CMaps_CIPlaceInfoStatics* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CServices_CMaps_CIPlaceInfoStatics* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* Create)(__x_ABI_CWindows_CServices_CMaps_CIPlaceInfoStatics* This,
        __x_ABI_CWindows_CDevices_CGeolocation_CIGeopoint* referencePoint,
        __x_ABI_CWindows_CServices_CMaps_CIPlaceInfo** resultValue);
    HRESULT (STDMETHODCALLTYPE* CreateWithGeopointAndOptions)(__x_ABI_CWindows_CServices_CMaps_CIPlaceInfoStatics* This,
        __x_ABI_CWindows_CDevices_CGeolocation_CIGeopoint* referencePoint,
        __x_ABI_CWindows_CServices_CMaps_CIPlaceInfoCreateOptions* options,
        __x_ABI_CWindows_CServices_CMaps_CIPlaceInfo** resultValue);
    HRESULT (STDMETHODCALLTYPE* CreateFromIdentifier)(__x_ABI_CWindows_CServices_CMaps_CIPlaceInfoStatics* This,
        HSTRING identifier,
        __x_ABI_CWindows_CServices_CMaps_CIPlaceInfo** resultValue);
    HRESULT (STDMETHODCALLTYPE* CreateFromIdentifierWithOptions)(__x_ABI_CWindows_CServices_CMaps_CIPlaceInfoStatics* This,
        HSTRING identifier,
        __x_ABI_CWindows_CDevices_CGeolocation_CIGeopoint* defaultPoint,
        __x_ABI_CWindows_CServices_CMaps_CIPlaceInfoCreateOptions* options,
        __x_ABI_CWindows_CServices_CMaps_CIPlaceInfo** resultValue);
    HRESULT (STDMETHODCALLTYPE* CreateFromMapLocation)(__x_ABI_CWindows_CServices_CMaps_CIPlaceInfoStatics* This,
        __x_ABI_CWindows_CServices_CMaps_CIMapLocation* location,
        __x_ABI_CWindows_CServices_CMaps_CIPlaceInfo** resultValue);
    HRESULT (STDMETHODCALLTYPE* get_IsShowSupported)(__x_ABI_CWindows_CServices_CMaps_CIPlaceInfoStatics* This,
        boolean* value);

        END_INTERFACE
    } __x_ABI_CWindows_CServices_CMaps_CIPlaceInfoStaticsVtbl;

    interface __x_ABI_CWindows_CServices_CMaps_CIPlaceInfoStatics
    {
        CONST_VTBL struct __x_ABI_CWindows_CServices_CMaps_CIPlaceInfoStaticsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CServices_CMaps_CIPlaceInfoStatics;
#endif /* !defined(____x_ABI_CWindows_CServices_CMaps_CIPlaceInfoStatics_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CServices_CMaps_CIPlaceInfoStatics2_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CServices_CMaps_CIPlaceInfoStatics2_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CServices_CMaps_CIPlaceInfoStatics2Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CServices_CMaps_CIPlaceInfoStatics2* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CServices_CMaps_CIPlaceInfoStatics2* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CServices_CMaps_CIPlaceInfoStatics2* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CServices_CMaps_CIPlaceInfoStatics2* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CServices_CMaps_CIPlaceInfoStatics2* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CServices_CMaps_CIPlaceInfoStatics2* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* CreateFromAddress)(__x_ABI_CWindows_CServices_CMaps_CIPlaceInfoStatics2* This,
        HSTRING displayAddress,
        __x_ABI_CWindows_CServices_CMaps_CIPlaceInfo** resultValue);
    HRESULT (STDMETHODCALLTYPE* CreateFromAddressWithName)(__x_ABI_CWindows_CServices_CMaps_CIPlaceInfoStatics2* This,
        HSTRING displayAddress,
        HSTRING displayName,
        __x_ABI_CWindows_CServices_CMaps_CIPlaceInfo** resultValue);

        END_INTERFACE
    } __x_ABI_CWindows_CServices_CMaps_CIPlaceInfoStatics2Vtbl;

    interface __x_ABI_CWindows_CServices_CMaps_CIPlaceInfoStatics2
    {
        CONST_VTBL struct __x_ABI_CWindows_CServices_CMaps_CIPlaceInfoStatics2Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CServices_CMaps_CIPlaceInfoStatics2;
#endif /* !defined(____x_ABI_CWindows_CServices_CMaps_CIPlaceInfoStatics2_INTERFACE_DEFINED__) */
    

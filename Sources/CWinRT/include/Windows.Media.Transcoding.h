// WARNING: Please don't edit this file. It was generated by Swift/WinRT v0.0.1

#pragma once
// Header files for imported files
#include <inspectable.h>
#include <EventToken.h>
#include <windowscontracts.h>
#include "Windows.Foundation.h"
#include "Windows.Media.Core.h"
#include "Windows.Media.MediaProperties.h"
#include "Windows.Storage.h"
#include "Windows.Storage.Streams.h"
// Importing Collections header
#include "Windows.Foundation.Collections.h"

/* Forward Declarations */
#ifndef ____x_ABI_CWindows_CMedia_CTranscoding_CIMediaTranscoder_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CTranscoding_CIMediaTranscoder_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_CTranscoding_CIMediaTranscoder __x_ABI_CWindows_CMedia_CTranscoding_CIMediaTranscoder;

#endif // ____x_ABI_CWindows_CMedia_CTranscoding_CIMediaTranscoder_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CTranscoding_CIMediaTranscoder2_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CTranscoding_CIMediaTranscoder2_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_CTranscoding_CIMediaTranscoder2 __x_ABI_CWindows_CMedia_CTranscoding_CIMediaTranscoder2;

#endif // ____x_ABI_CWindows_CMedia_CTranscoding_CIMediaTranscoder2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CTranscoding_CIPrepareTranscodeResult_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CTranscoding_CIPrepareTranscodeResult_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_CTranscoding_CIPrepareTranscodeResult __x_ABI_CWindows_CMedia_CTranscoding_CIPrepareTranscodeResult;

#endif // ____x_ABI_CWindows_CMedia_CTranscoding_CIPrepareTranscodeResult_FWD_DEFINED__

// Parameterized interface forward declarations (C)

// Collection interface definitions

typedef interface __x_ABI_C__FIAsyncActionProgressHandler_1_double __x_ABI_C__FIAsyncActionProgressHandler_1_double;

typedef interface __x_ABI_C__FIAsyncActionWithProgress_1_double __x_ABI_C__FIAsyncActionWithProgress_1_double;

#if !defined(____x_ABI_C__FIAsyncActionWithProgressCompletedHandler_1_double_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncActionWithProgressCompletedHandler_1_double_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncActionWithProgressCompletedHandler_1_double __x_ABI_C__FIAsyncActionWithProgressCompletedHandler_1_double;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncActionWithProgressCompletedHandler_1_double;

    typedef struct __x_ABI_C__FIAsyncActionWithProgressCompletedHandler_1_doubleVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncActionWithProgressCompletedHandler_1_double* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncActionWithProgressCompletedHandler_1_double* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncActionWithProgressCompletedHandler_1_double* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FIAsyncActionWithProgressCompletedHandler_1_double* This,
        __x_ABI_C__FIAsyncActionWithProgress_1_double* asyncInfo,
        enum __x_ABI_CWindows_CFoundation_CAsyncStatus asyncStatus);

        END_INTERFACE
    } __x_ABI_C__FIAsyncActionWithProgressCompletedHandler_1_doubleVtbl;

    interface __x_ABI_C__FIAsyncActionWithProgressCompletedHandler_1_double
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncActionWithProgressCompletedHandler_1_doubleVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncActionWithProgressCompletedHandler_1_double_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIAsyncActionWithProgress_1_double_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncActionWithProgress_1_double_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncActionWithProgress_1_double __x_ABI_C__FIAsyncActionWithProgress_1_double;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncActionWithProgress_1_double;

    typedef struct __x_ABI_C__FIAsyncActionWithProgress_1_doubleVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncActionWithProgress_1_double* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncActionWithProgress_1_double* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncActionWithProgress_1_double* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIAsyncActionWithProgress_1_double* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIAsyncActionWithProgress_1_double* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIAsyncActionWithProgress_1_double* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* put_Progress)(__x_ABI_C__FIAsyncActionWithProgress_1_double* This,
        __x_ABI_C__FIAsyncActionProgressHandler_1_double* handler);
    HRESULT (STDMETHODCALLTYPE* get_Progress)(__x_ABI_C__FIAsyncActionWithProgress_1_double* This,
        __x_ABI_C__FIAsyncActionProgressHandler_1_double** result);
    HRESULT (STDMETHODCALLTYPE* put_Completed)(__x_ABI_C__FIAsyncActionWithProgress_1_double* This,
        __x_ABI_C__FIAsyncActionWithProgressCompletedHandler_1_double* handler);
    HRESULT (STDMETHODCALLTYPE* get_Completed)(__x_ABI_C__FIAsyncActionWithProgress_1_double* This,
        __x_ABI_C__FIAsyncActionWithProgressCompletedHandler_1_double** result);
    HRESULT (STDMETHODCALLTYPE* GetResults)(__x_ABI_C__FIAsyncActionWithProgress_1_double* This);

        END_INTERFACE
    } __x_ABI_C__FIAsyncActionWithProgress_1_doubleVtbl;

    interface __x_ABI_C__FIAsyncActionWithProgress_1_double
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncActionWithProgress_1_doubleVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncActionWithProgress_1_double_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIAsyncActionProgressHandler_1_double_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncActionProgressHandler_1_double_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncActionProgressHandler_1_double __x_ABI_C__FIAsyncActionProgressHandler_1_double;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncActionProgressHandler_1_double;

    typedef struct __x_ABI_C__FIAsyncActionProgressHandler_1_doubleVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncActionProgressHandler_1_double* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncActionProgressHandler_1_double* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncActionProgressHandler_1_double* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FIAsyncActionProgressHandler_1_double* This,
        __x_ABI_C__FIAsyncActionWithProgress_1_double* asyncInfo,
        DOUBLE progressInfo);

        END_INTERFACE
    } __x_ABI_C__FIAsyncActionProgressHandler_1_doubleVtbl;

    interface __x_ABI_C__FIAsyncActionProgressHandler_1_double
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncActionProgressHandler_1_doubleVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncActionProgressHandler_1_double_INTERFACE_DEFINED__
    
typedef interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__CTranscoding__CPrepareTranscodeResult __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__CTranscoding__CPrepareTranscodeResult;

#if !defined(____x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CTranscoding__CPrepareTranscodeResult_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CTranscoding__CPrepareTranscodeResult_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CTranscoding__CPrepareTranscodeResult __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CTranscoding__CPrepareTranscodeResult;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CTranscoding__CPrepareTranscodeResult;

    typedef struct __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CTranscoding__CPrepareTranscodeResultVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CTranscoding__CPrepareTranscodeResult* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CTranscoding__CPrepareTranscodeResult* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CTranscoding__CPrepareTranscodeResult* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CTranscoding__CPrepareTranscodeResult* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CTranscoding__CPrepareTranscodeResult* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CTranscoding__CPrepareTranscodeResult* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* put_Completed)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CTranscoding__CPrepareTranscodeResult* This,
        __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__CTranscoding__CPrepareTranscodeResult* handler);
    HRESULT (STDMETHODCALLTYPE* get_Completed)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CTranscoding__CPrepareTranscodeResult* This,
        __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__CTranscoding__CPrepareTranscodeResult** result);
    HRESULT (STDMETHODCALLTYPE* GetResults)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CTranscoding__CPrepareTranscodeResult* This,
        __x_ABI_CWindows_CMedia_CTranscoding_CIPrepareTranscodeResult** result);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CTranscoding__CPrepareTranscodeResultVtbl;

    interface __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CTranscoding__CPrepareTranscodeResult
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CTranscoding__CPrepareTranscodeResultVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CTranscoding__CPrepareTranscodeResult_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__CTranscoding__CPrepareTranscodeResult_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__CTranscoding__CPrepareTranscodeResult_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__CTranscoding__CPrepareTranscodeResult __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__CTranscoding__CPrepareTranscodeResult;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__CTranscoding__CPrepareTranscodeResult;

    typedef struct __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__CTranscoding__CPrepareTranscodeResultVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__CTranscoding__CPrepareTranscodeResult* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__CTranscoding__CPrepareTranscodeResult* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__CTranscoding__CPrepareTranscodeResult* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__CTranscoding__CPrepareTranscodeResult* This,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CTranscoding__CPrepareTranscodeResult* asyncInfo,
        enum __x_ABI_CWindows_CFoundation_CAsyncStatus asyncStatus);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__CTranscoding__CPrepareTranscodeResultVtbl;

    interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__CTranscoding__CPrepareTranscodeResult
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__CTranscoding__CPrepareTranscodeResultVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__CTranscoding__CPrepareTranscodeResult_INTERFACE_DEFINED__
    
typedef enum __x_ABI_CWindows_CFoundation_CAsyncStatus __x_ABI_CWindows_CFoundation_CAsyncStatus;

#ifndef ____x_ABI_CWindows_CFoundation_CCollections_CIPropertySet_FWD_DEFINED__
#define ____x_ABI_CWindows_CFoundation_CCollections_CIPropertySet_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CFoundation_CCollections_CIPropertySet __x_ABI_CWindows_CFoundation_CCollections_CIPropertySet;

#endif // ____x_ABI_CWindows_CFoundation_CCollections_CIPropertySet_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CFoundation_CIAsyncInfo_FWD_DEFINED__
#define ____x_ABI_CWindows_CFoundation_CIAsyncInfo_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CFoundation_CIAsyncInfo __x_ABI_CWindows_CFoundation_CIAsyncInfo;

#endif // ____x_ABI_CWindows_CFoundation_CIAsyncInfo_FWD_DEFINED__

typedef struct __x_ABI_CWindows_CFoundation_CTimeSpan __x_ABI_CWindows_CFoundation_CTimeSpan;

#ifndef ____x_ABI_CWindows_CMedia_CCore_CIMediaSource_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CIMediaSource_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_CCore_CIMediaSource __x_ABI_CWindows_CMedia_CCore_CIMediaSource;

#endif // ____x_ABI_CWindows_CMedia_CCore_CIMediaSource_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CMediaProperties_CIMediaEncodingProfile_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CMediaProperties_CIMediaEncodingProfile_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_CMediaProperties_CIMediaEncodingProfile __x_ABI_CWindows_CMedia_CMediaProperties_CIMediaEncodingProfile;

#endif // ____x_ABI_CWindows_CMedia_CMediaProperties_CIMediaEncodingProfile_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CStorage_CIStorageFile_FWD_DEFINED__
#define ____x_ABI_CWindows_CStorage_CIStorageFile_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CStorage_CIStorageFile __x_ABI_CWindows_CStorage_CIStorageFile;

#endif // ____x_ABI_CWindows_CStorage_CIStorageFile_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CStorage_CStreams_CIRandomAccessStream_FWD_DEFINED__
#define ____x_ABI_CWindows_CStorage_CStreams_CIRandomAccessStream_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CStorage_CStreams_CIRandomAccessStream __x_ABI_CWindows_CStorage_CStreams_CIRandomAccessStream;

#endif // ____x_ABI_CWindows_CStorage_CStreams_CIRandomAccessStream_FWD_DEFINED__

typedef enum __x_ABI_CWindows_CMedia_CTranscoding_CMediaVideoProcessingAlgorithm __x_ABI_CWindows_CMedia_CTranscoding_CMediaVideoProcessingAlgorithm;

typedef enum __x_ABI_CWindows_CMedia_CTranscoding_CTranscodeFailureReason __x_ABI_CWindows_CMedia_CTranscoding_CTranscodeFailureReason;

enum __x_ABI_CWindows_CMedia_CTranscoding_CMediaVideoProcessingAlgorithm
    {
        __x_ABI_CWindows_CMedia_CTranscoding_CMediaVideoProcessingAlgorithm_Default = 0,
    __x_ABI_CWindows_CMedia_CTranscoding_CMediaVideoProcessingAlgorithm_MrfCrf444 = 1,
};

enum __x_ABI_CWindows_CMedia_CTranscoding_CTranscodeFailureReason
    {
        __x_ABI_CWindows_CMedia_CTranscoding_CTranscodeFailureReason_None = 0,
    __x_ABI_CWindows_CMedia_CTranscoding_CTranscodeFailureReason_Unknown = 1,
    __x_ABI_CWindows_CMedia_CTranscoding_CTranscodeFailureReason_InvalidProfile = 2,
    __x_ABI_CWindows_CMedia_CTranscoding_CTranscodeFailureReason_CodecNotFound = 3,
};

#if !defined(____x_ABI_CWindows_CMedia_CTranscoding_CIMediaTranscoder_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CMedia_CTranscoding_CIMediaTranscoder_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CMedia_CTranscoding_CIMediaTranscoderVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CTranscoding_CIMediaTranscoder* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CTranscoding_CIMediaTranscoder* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CTranscoding_CIMediaTranscoder* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CTranscoding_CIMediaTranscoder* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CTranscoding_CIMediaTranscoder* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CTranscoding_CIMediaTranscoder* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* put_TrimStartTime)(__x_ABI_CWindows_CMedia_CTranscoding_CIMediaTranscoder* This,
        struct __x_ABI_CWindows_CFoundation_CTimeSpan value);
    HRESULT (STDMETHODCALLTYPE* get_TrimStartTime)(__x_ABI_CWindows_CMedia_CTranscoding_CIMediaTranscoder* This,
        struct __x_ABI_CWindows_CFoundation_CTimeSpan* value);
    HRESULT (STDMETHODCALLTYPE* put_TrimStopTime)(__x_ABI_CWindows_CMedia_CTranscoding_CIMediaTranscoder* This,
        struct __x_ABI_CWindows_CFoundation_CTimeSpan value);
    HRESULT (STDMETHODCALLTYPE* get_TrimStopTime)(__x_ABI_CWindows_CMedia_CTranscoding_CIMediaTranscoder* This,
        struct __x_ABI_CWindows_CFoundation_CTimeSpan* value);
    HRESULT (STDMETHODCALLTYPE* put_AlwaysReencode)(__x_ABI_CWindows_CMedia_CTranscoding_CIMediaTranscoder* This,
        boolean value);
    HRESULT (STDMETHODCALLTYPE* get_AlwaysReencode)(__x_ABI_CWindows_CMedia_CTranscoding_CIMediaTranscoder* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* put_HardwareAccelerationEnabled)(__x_ABI_CWindows_CMedia_CTranscoding_CIMediaTranscoder* This,
        boolean value);
    HRESULT (STDMETHODCALLTYPE* get_HardwareAccelerationEnabled)(__x_ABI_CWindows_CMedia_CTranscoding_CIMediaTranscoder* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* AddAudioEffect)(__x_ABI_CWindows_CMedia_CTranscoding_CIMediaTranscoder* This,
        HSTRING activatableClassId);
    HRESULT (STDMETHODCALLTYPE* AddAudioEffectWithSettings)(__x_ABI_CWindows_CMedia_CTranscoding_CIMediaTranscoder* This,
        HSTRING activatableClassId,
        boolean effectRequired,
        __x_ABI_CWindows_CFoundation_CCollections_CIPropertySet* configuration);
    HRESULT (STDMETHODCALLTYPE* AddVideoEffect)(__x_ABI_CWindows_CMedia_CTranscoding_CIMediaTranscoder* This,
        HSTRING activatableClassId);
    HRESULT (STDMETHODCALLTYPE* AddVideoEffectWithSettings)(__x_ABI_CWindows_CMedia_CTranscoding_CIMediaTranscoder* This,
        HSTRING activatableClassId,
        boolean effectRequired,
        __x_ABI_CWindows_CFoundation_CCollections_CIPropertySet* configuration);
    HRESULT (STDMETHODCALLTYPE* ClearEffects)(__x_ABI_CWindows_CMedia_CTranscoding_CIMediaTranscoder* This);
    HRESULT (STDMETHODCALLTYPE* PrepareFileTranscodeAsync)(__x_ABI_CWindows_CMedia_CTranscoding_CIMediaTranscoder* This,
        __x_ABI_CWindows_CStorage_CIStorageFile* source,
        __x_ABI_CWindows_CStorage_CIStorageFile* destination,
        __x_ABI_CWindows_CMedia_CMediaProperties_CIMediaEncodingProfile* profile,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CTranscoding__CPrepareTranscodeResult** operation);
    HRESULT (STDMETHODCALLTYPE* PrepareStreamTranscodeAsync)(__x_ABI_CWindows_CMedia_CTranscoding_CIMediaTranscoder* This,
        __x_ABI_CWindows_CStorage_CStreams_CIRandomAccessStream* source,
        __x_ABI_CWindows_CStorage_CStreams_CIRandomAccessStream* destination,
        __x_ABI_CWindows_CMedia_CMediaProperties_CIMediaEncodingProfile* profile,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CTranscoding__CPrepareTranscodeResult** operation);

        END_INTERFACE
    } __x_ABI_CWindows_CMedia_CTranscoding_CIMediaTranscoderVtbl;

    interface __x_ABI_CWindows_CMedia_CTranscoding_CIMediaTranscoder
    {
        CONST_VTBL struct __x_ABI_CWindows_CMedia_CTranscoding_CIMediaTranscoderVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CTranscoding_CIMediaTranscoder;
#endif /* !defined(____x_ABI_CWindows_CMedia_CTranscoding_CIMediaTranscoder_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CMedia_CTranscoding_CIMediaTranscoder2_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CMedia_CTranscoding_CIMediaTranscoder2_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CMedia_CTranscoding_CIMediaTranscoder2Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CTranscoding_CIMediaTranscoder2* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CTranscoding_CIMediaTranscoder2* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CTranscoding_CIMediaTranscoder2* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CTranscoding_CIMediaTranscoder2* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CTranscoding_CIMediaTranscoder2* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CTranscoding_CIMediaTranscoder2* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* PrepareMediaStreamSourceTranscodeAsync)(__x_ABI_CWindows_CMedia_CTranscoding_CIMediaTranscoder2* This,
        __x_ABI_CWindows_CMedia_CCore_CIMediaSource* source,
        __x_ABI_CWindows_CStorage_CStreams_CIRandomAccessStream* destination,
        __x_ABI_CWindows_CMedia_CMediaProperties_CIMediaEncodingProfile* profile,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CTranscoding__CPrepareTranscodeResult** operation);
    HRESULT (STDMETHODCALLTYPE* put_VideoProcessingAlgorithm)(__x_ABI_CWindows_CMedia_CTranscoding_CIMediaTranscoder2* This,
        enum __x_ABI_CWindows_CMedia_CTranscoding_CMediaVideoProcessingAlgorithm value);
    HRESULT (STDMETHODCALLTYPE* get_VideoProcessingAlgorithm)(__x_ABI_CWindows_CMedia_CTranscoding_CIMediaTranscoder2* This,
        enum __x_ABI_CWindows_CMedia_CTranscoding_CMediaVideoProcessingAlgorithm* value);

        END_INTERFACE
    } __x_ABI_CWindows_CMedia_CTranscoding_CIMediaTranscoder2Vtbl;

    interface __x_ABI_CWindows_CMedia_CTranscoding_CIMediaTranscoder2
    {
        CONST_VTBL struct __x_ABI_CWindows_CMedia_CTranscoding_CIMediaTranscoder2Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CTranscoding_CIMediaTranscoder2;
#endif /* !defined(____x_ABI_CWindows_CMedia_CTranscoding_CIMediaTranscoder2_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CMedia_CTranscoding_CIPrepareTranscodeResult_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CMedia_CTranscoding_CIPrepareTranscodeResult_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CMedia_CTranscoding_CIPrepareTranscodeResultVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CTranscoding_CIPrepareTranscodeResult* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CTranscoding_CIPrepareTranscodeResult* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CTranscoding_CIPrepareTranscodeResult* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CTranscoding_CIPrepareTranscodeResult* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CTranscoding_CIPrepareTranscodeResult* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CTranscoding_CIPrepareTranscodeResult* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_CanTranscode)(__x_ABI_CWindows_CMedia_CTranscoding_CIPrepareTranscodeResult* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* get_FailureReason)(__x_ABI_CWindows_CMedia_CTranscoding_CIPrepareTranscodeResult* This,
        enum __x_ABI_CWindows_CMedia_CTranscoding_CTranscodeFailureReason* value);
    HRESULT (STDMETHODCALLTYPE* TranscodeAsync)(__x_ABI_CWindows_CMedia_CTranscoding_CIPrepareTranscodeResult* This,
        __x_ABI_C__FIAsyncActionWithProgress_1_double** operation);

        END_INTERFACE
    } __x_ABI_CWindows_CMedia_CTranscoding_CIPrepareTranscodeResultVtbl;

    interface __x_ABI_CWindows_CMedia_CTranscoding_CIPrepareTranscodeResult
    {
        CONST_VTBL struct __x_ABI_CWindows_CMedia_CTranscoding_CIPrepareTranscodeResultVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CTranscoding_CIPrepareTranscodeResult;
#endif /* !defined(____x_ABI_CWindows_CMedia_CTranscoding_CIPrepareTranscodeResult_INTERFACE_DEFINED__) */
    

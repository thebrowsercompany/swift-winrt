// WARNING: Please don't edit this file. It was generated by Swift/WinRT v0.0.1

#pragma once
// Header files for imported files
#include <inspectable.h>
#include <EventToken.h>
#include <windowscontracts.h>
#include "Windows.Foundation.h"
#include "Windows.Devices.Geolocation.h"
#include "Windows.Services.Maps.h"
#include "Windows.UI.h"
// Importing Collections header
#include "Windows.Foundation.Collections.h"

/* Forward Declarations */
#ifndef ____x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceAudioNotificationRequestedEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceAudioNotificationRequestedEventArgs_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceAudioNotificationRequestedEventArgs __x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceAudioNotificationRequestedEventArgs;

#endif // ____x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceAudioNotificationRequestedEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceLaneInfo_FWD_DEFINED__
#define ____x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceLaneInfo_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceLaneInfo __x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceLaneInfo;

#endif // ____x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceLaneInfo_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceManeuver_FWD_DEFINED__
#define ____x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceManeuver_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceManeuver __x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceManeuver;

#endif // ____x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceManeuver_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceMapMatchedCoordinate_FWD_DEFINED__
#define ____x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceMapMatchedCoordinate_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceMapMatchedCoordinate __x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceMapMatchedCoordinate;

#endif // ____x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceMapMatchedCoordinate_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceNavigator_FWD_DEFINED__
#define ____x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceNavigator_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceNavigator __x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceNavigator;

#endif // ____x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceNavigator_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceNavigator2_FWD_DEFINED__
#define ____x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceNavigator2_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceNavigator2 __x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceNavigator2;

#endif // ____x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceNavigator2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceNavigatorStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceNavigatorStatics_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceNavigatorStatics __x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceNavigatorStatics;

#endif // ____x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceNavigatorStatics_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceNavigatorStatics2_FWD_DEFINED__
#define ____x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceNavigatorStatics2_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceNavigatorStatics2 __x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceNavigatorStatics2;

#endif // ____x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceNavigatorStatics2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceReroutedEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceReroutedEventArgs_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceReroutedEventArgs __x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceReroutedEventArgs;

#endif // ____x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceReroutedEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceRoadSegment_FWD_DEFINED__
#define ____x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceRoadSegment_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceRoadSegment __x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceRoadSegment;

#endif // ____x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceRoadSegment_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceRoadSegment2_FWD_DEFINED__
#define ____x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceRoadSegment2_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceRoadSegment2 __x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceRoadSegment2;

#endif // ____x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceRoadSegment2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceRoadSignpost_FWD_DEFINED__
#define ____x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceRoadSignpost_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceRoadSignpost __x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceRoadSignpost;

#endif // ____x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceRoadSignpost_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceRoute_FWD_DEFINED__
#define ____x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceRoute_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceRoute __x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceRoute;

#endif // ____x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceRoute_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceRouteStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceRouteStatics_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceRouteStatics __x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceRouteStatics;

#endif // ____x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceRouteStatics_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceTelemetryCollector_FWD_DEFINED__
#define ____x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceTelemetryCollector_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceTelemetryCollector __x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceTelemetryCollector;

#endif // ____x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceTelemetryCollector_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceTelemetryCollectorStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceTelemetryCollectorStatics_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceTelemetryCollectorStatics __x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceTelemetryCollectorStatics;

#endif // ____x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceTelemetryCollectorStatics_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceUpdatedEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceUpdatedEventArgs_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceUpdatedEventArgs __x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceUpdatedEventArgs;

#endif // ____x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceUpdatedEventArgs_FWD_DEFINED__

// Parameterized interface forward declarations (C)

// Collection interface definitions

#if !defined(____x_ABI_C__FIIterator_1_HSTRING_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterator_1_HSTRING_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterator_1_HSTRING __x_ABI_C__FIIterator_1_HSTRING;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterator_1_HSTRING;

    typedef struct __x_ABI_C__FIIterator_1_HSTRINGVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterator_1_HSTRING* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterator_1_HSTRING* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterator_1_HSTRING* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterator_1_HSTRING* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterator_1_HSTRING* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterator_1_HSTRING* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Current)(__x_ABI_C__FIIterator_1_HSTRING* This,
        HSTRING* result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__x_ABI_C__FIIterator_1_HSTRING* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__x_ABI_C__FIIterator_1_HSTRING* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIIterator_1_HSTRING* This,
        UINT32 itemsLength,
        HSTRING* items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIIterator_1_HSTRINGVtbl;

    interface __x_ABI_C__FIIterator_1_HSTRING
    {
        CONST_VTBL struct __x_ABI_C__FIIterator_1_HSTRINGVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterator_1_HSTRING_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterable_1_HSTRING_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterable_1_HSTRING_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterable_1_HSTRING __x_ABI_C__FIIterable_1_HSTRING;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterable_1_HSTRING;

    typedef struct __x_ABI_C__FIIterable_1_HSTRINGVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterable_1_HSTRING* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterable_1_HSTRING* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterable_1_HSTRING* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterable_1_HSTRING* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterable_1_HSTRING* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterable_1_HSTRING* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* First)(__x_ABI_C__FIIterable_1_HSTRING* This,
        __x_ABI_C__FIIterator_1_HSTRING** result);

        END_INTERFACE
    } __x_ABI_C__FIIterable_1_HSTRINGVtbl;

    interface __x_ABI_C__FIIterable_1_HSTRING
    {
        CONST_VTBL struct __x_ABI_C__FIIterable_1_HSTRINGVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterable_1_HSTRING_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceLaneInfo_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceLaneInfo_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceLaneInfo __x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceLaneInfo;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceLaneInfo;

    typedef struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceLaneInfoVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceLaneInfo* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceLaneInfo* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceLaneInfo* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceLaneInfo* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceLaneInfo* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceLaneInfo* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Current)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceLaneInfo* This,
        __x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceLaneInfo** result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceLaneInfo* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceLaneInfo* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceLaneInfo* This,
        UINT32 itemsLength,
        __x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceLaneInfo** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceLaneInfoVtbl;

    interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceLaneInfo
    {
        CONST_VTBL struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceLaneInfoVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceLaneInfo_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceLaneInfo_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceLaneInfo_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceLaneInfo __x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceLaneInfo;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceLaneInfo;

    typedef struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceLaneInfoVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceLaneInfo* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceLaneInfo* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceLaneInfo* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceLaneInfo* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceLaneInfo* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceLaneInfo* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* First)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceLaneInfo* This,
        __x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceLaneInfo** result);

        END_INTERFACE
    } __x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceLaneInfoVtbl;

    interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceLaneInfo
    {
        CONST_VTBL struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceLaneInfoVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceLaneInfo_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceManeuver_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceManeuver_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceManeuver __x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceManeuver;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceManeuver;

    typedef struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceManeuverVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceManeuver* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceManeuver* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceManeuver* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceManeuver* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceManeuver* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceManeuver* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Current)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceManeuver* This,
        __x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceManeuver** result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceManeuver* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceManeuver* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceManeuver* This,
        UINT32 itemsLength,
        __x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceManeuver** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceManeuverVtbl;

    interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceManeuver
    {
        CONST_VTBL struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceManeuverVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceManeuver_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceManeuver_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceManeuver_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceManeuver __x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceManeuver;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceManeuver;

    typedef struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceManeuverVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceManeuver* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceManeuver* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceManeuver* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceManeuver* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceManeuver* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceManeuver* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* First)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceManeuver* This,
        __x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceManeuver** result);

        END_INTERFACE
    } __x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceManeuverVtbl;

    interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceManeuver
    {
        CONST_VTBL struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceManeuverVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceManeuver_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceRoadSegment_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceRoadSegment_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceRoadSegment __x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceRoadSegment;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceRoadSegment;

    typedef struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceRoadSegmentVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceRoadSegment* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceRoadSegment* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceRoadSegment* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceRoadSegment* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceRoadSegment* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceRoadSegment* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Current)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceRoadSegment* This,
        __x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceRoadSegment** result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceRoadSegment* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceRoadSegment* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceRoadSegment* This,
        UINT32 itemsLength,
        __x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceRoadSegment** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceRoadSegmentVtbl;

    interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceRoadSegment
    {
        CONST_VTBL struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceRoadSegmentVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceRoadSegment_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceRoadSegment_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceRoadSegment_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceRoadSegment __x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceRoadSegment;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceRoadSegment;

    typedef struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceRoadSegmentVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceRoadSegment* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceRoadSegment* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceRoadSegment* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceRoadSegment* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceRoadSegment* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceRoadSegment* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* First)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceRoadSegment* This,
        __x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceRoadSegment** result);

        END_INTERFACE
    } __x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceRoadSegmentVtbl;

    interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceRoadSegment
    {
        CONST_VTBL struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceRoadSegmentVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceRoadSegment_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVectorView_1_HSTRING_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVectorView_1_HSTRING_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVectorView_1_HSTRING __x_ABI_C__FIVectorView_1_HSTRING;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVectorView_1_HSTRING;

    typedef struct __x_ABI_C__FIVectorView_1_HSTRINGVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVectorView_1_HSTRING* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVectorView_1_HSTRING* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVectorView_1_HSTRING* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVectorView_1_HSTRING* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVectorView_1_HSTRING* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVectorView_1_HSTRING* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVectorView_1_HSTRING* This,
        UINT32 index,
        HSTRING* result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVectorView_1_HSTRING* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVectorView_1_HSTRING* This,
        HSTRING value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVectorView_1_HSTRING* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        HSTRING* items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIVectorView_1_HSTRINGVtbl;

    interface __x_ABI_C__FIVectorView_1_HSTRING
    {
        CONST_VTBL struct __x_ABI_C__FIVectorView_1_HSTRINGVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVectorView_1_HSTRING_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceLaneInfo_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceLaneInfo_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceLaneInfo __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceLaneInfo;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceLaneInfo;

    typedef struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceLaneInfoVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceLaneInfo* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceLaneInfo* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceLaneInfo* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceLaneInfo* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceLaneInfo* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceLaneInfo* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceLaneInfo* This,
        UINT32 index,
        __x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceLaneInfo** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceLaneInfo* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceLaneInfo* This,
        __x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceLaneInfo* value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceLaneInfo* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        __x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceLaneInfo** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceLaneInfoVtbl;

    interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceLaneInfo
    {
        CONST_VTBL struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceLaneInfoVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceLaneInfo_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceManeuver_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceManeuver_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceManeuver __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceManeuver;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceManeuver;

    typedef struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceManeuverVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceManeuver* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceManeuver* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceManeuver* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceManeuver* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceManeuver* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceManeuver* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceManeuver* This,
        UINT32 index,
        __x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceManeuver** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceManeuver* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceManeuver* This,
        __x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceManeuver* value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceManeuver* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        __x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceManeuver** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceManeuverVtbl;

    interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceManeuver
    {
        CONST_VTBL struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceManeuverVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceManeuver_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceRoadSegment_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceRoadSegment_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceRoadSegment __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceRoadSegment;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceRoadSegment;

    typedef struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceRoadSegmentVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceRoadSegment* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceRoadSegment* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceRoadSegment* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceRoadSegment* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceRoadSegment* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceRoadSegment* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceRoadSegment* This,
        UINT32 index,
        __x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceRoadSegment** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceRoadSegment* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceRoadSegment* This,
        __x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceRoadSegment* value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceRoadSegment* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        __x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceRoadSegment** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceRoadSegmentVtbl;

    interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceRoadSegment
    {
        CONST_VTBL struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceRoadSegmentVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceRoadSegment_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceNavigator_IInspectable_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceNavigator_IInspectable_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceNavigator_IInspectable __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceNavigator_IInspectable;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceNavigator_IInspectable;

    typedef struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceNavigator_IInspectableVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceNavigator_IInspectable* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceNavigator_IInspectable* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceNavigator_IInspectable* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceNavigator_IInspectable* This,
        __x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceNavigator* sender,
        IInspectable* args);

        END_INTERFACE
    } __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceNavigator_IInspectableVtbl;

    interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceNavigator_IInspectable
    {
        CONST_VTBL struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceNavigator_IInspectableVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceNavigator_IInspectable_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceNavigator___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceAudioNotificationRequestedEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceNavigator___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceAudioNotificationRequestedEventArgs_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceNavigator___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceAudioNotificationRequestedEventArgs __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceNavigator___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceAudioNotificationRequestedEventArgs;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceNavigator___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceAudioNotificationRequestedEventArgs;

    typedef struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceNavigator___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceAudioNotificationRequestedEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceNavigator___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceAudioNotificationRequestedEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceNavigator___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceAudioNotificationRequestedEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceNavigator___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceAudioNotificationRequestedEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceNavigator___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceAudioNotificationRequestedEventArgs* This,
        __x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceNavigator* sender,
        __x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceAudioNotificationRequestedEventArgs* args);

        END_INTERFACE
    } __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceNavigator___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceAudioNotificationRequestedEventArgsVtbl;

    interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceNavigator___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceAudioNotificationRequestedEventArgs
    {
        CONST_VTBL struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceNavigator___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceAudioNotificationRequestedEventArgsVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceNavigator___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceAudioNotificationRequestedEventArgs_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceNavigator___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceReroutedEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceNavigator___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceReroutedEventArgs_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceNavigator___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceReroutedEventArgs __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceNavigator___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceReroutedEventArgs;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceNavigator___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceReroutedEventArgs;

    typedef struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceNavigator___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceReroutedEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceNavigator___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceReroutedEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceNavigator___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceReroutedEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceNavigator___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceReroutedEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceNavigator___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceReroutedEventArgs* This,
        __x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceNavigator* sender,
        __x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceReroutedEventArgs* args);

        END_INTERFACE
    } __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceNavigator___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceReroutedEventArgsVtbl;

    interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceNavigator___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceReroutedEventArgs
    {
        CONST_VTBL struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceNavigator___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceReroutedEventArgsVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceNavigator___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceReroutedEventArgs_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceNavigator___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceUpdatedEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceNavigator___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceUpdatedEventArgs_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceNavigator___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceUpdatedEventArgs __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceNavigator___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceUpdatedEventArgs;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceNavigator___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceUpdatedEventArgs;

    typedef struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceNavigator___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceUpdatedEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceNavigator___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceUpdatedEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceNavigator___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceUpdatedEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceNavigator___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceUpdatedEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceNavigator___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceUpdatedEventArgs* This,
        __x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceNavigator* sender,
        __x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceUpdatedEventArgs* args);

        END_INTERFACE
    } __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceNavigator___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceUpdatedEventArgsVtbl;

    interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceNavigator___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceUpdatedEventArgs
    {
        CONST_VTBL struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceNavigator___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceUpdatedEventArgsVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceNavigator___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceUpdatedEventArgs_INTERFACE_DEFINED__
    
typedef struct __x_ABI_CWindows_CDevices_CGeolocation_CBasicGeoposition __x_ABI_CWindows_CDevices_CGeolocation_CBasicGeoposition;

#ifndef ____x_ABI_CWindows_CDevices_CGeolocation_CIGeoboundingBox_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CGeolocation_CIGeoboundingBox_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CDevices_CGeolocation_CIGeoboundingBox __x_ABI_CWindows_CDevices_CGeolocation_CIGeoboundingBox;

#endif // ____x_ABI_CWindows_CDevices_CGeolocation_CIGeoboundingBox_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CGeolocation_CIGeocoordinate_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CGeolocation_CIGeocoordinate_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CDevices_CGeolocation_CIGeocoordinate __x_ABI_CWindows_CDevices_CGeolocation_CIGeocoordinate;

#endif // ____x_ABI_CWindows_CDevices_CGeolocation_CIGeocoordinate_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CGeolocation_CIGeopath_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CGeolocation_CIGeopath_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CDevices_CGeolocation_CIGeopath __x_ABI_CWindows_CDevices_CGeolocation_CIGeopath;

#endif // ____x_ABI_CWindows_CDevices_CGeolocation_CIGeopath_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CGeolocation_CIGeopoint_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CGeolocation_CIGeopoint_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CDevices_CGeolocation_CIGeopoint __x_ABI_CWindows_CDevices_CGeolocation_CIGeopoint;

#endif // ____x_ABI_CWindows_CDevices_CGeolocation_CIGeopoint_FWD_DEFINED__

typedef struct __x_ABI_CWindows_CFoundation_CTimeSpan __x_ABI_CWindows_CFoundation_CTimeSpan;

#ifndef ____x_ABI_CWindows_CServices_CMaps_CIMapRoute_FWD_DEFINED__
#define ____x_ABI_CWindows_CServices_CMaps_CIMapRoute_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CServices_CMaps_CIMapRoute __x_ABI_CWindows_CServices_CMaps_CIMapRoute;

#endif // ____x_ABI_CWindows_CServices_CMaps_CIMapRoute_FWD_DEFINED__

typedef struct __x_ABI_CWindows_CUI_CColor __x_ABI_CWindows_CUI_CColor;

typedef enum __x_ABI_CWindows_CServices_CMaps_CGuidance_CGuidanceAudioMeasurementSystem __x_ABI_CWindows_CServices_CMaps_CGuidance_CGuidanceAudioMeasurementSystem;

typedef enum __x_ABI_CWindows_CServices_CMaps_CGuidance_CGuidanceAudioNotificationKind __x_ABI_CWindows_CServices_CMaps_CGuidance_CGuidanceAudioNotificationKind;

typedef enum __x_ABI_CWindows_CServices_CMaps_CGuidance_CGuidanceAudioNotifications __x_ABI_CWindows_CServices_CMaps_CGuidance_CGuidanceAudioNotifications;

typedef enum __x_ABI_CWindows_CServices_CMaps_CGuidance_CGuidanceLaneMarkers __x_ABI_CWindows_CServices_CMaps_CGuidance_CGuidanceLaneMarkers;

typedef enum __x_ABI_CWindows_CServices_CMaps_CGuidance_CGuidanceManeuverKind __x_ABI_CWindows_CServices_CMaps_CGuidance_CGuidanceManeuverKind;

typedef enum __x_ABI_CWindows_CServices_CMaps_CGuidance_CGuidanceMode __x_ABI_CWindows_CServices_CMaps_CGuidance_CGuidanceMode;

enum __x_ABI_CWindows_CServices_CMaps_CGuidance_CGuidanceAudioMeasurementSystem
    {
        __x_ABI_CWindows_CServices_CMaps_CGuidance_CGuidanceAudioMeasurementSystem_Meters = 0,
    __x_ABI_CWindows_CServices_CMaps_CGuidance_CGuidanceAudioMeasurementSystem_MilesAndYards = 1,
    __x_ABI_CWindows_CServices_CMaps_CGuidance_CGuidanceAudioMeasurementSystem_MilesAndFeet = 2,
};

enum __x_ABI_CWindows_CServices_CMaps_CGuidance_CGuidanceAudioNotificationKind
    {
        __x_ABI_CWindows_CServices_CMaps_CGuidance_CGuidanceAudioNotificationKind_Maneuver = 0,
    __x_ABI_CWindows_CServices_CMaps_CGuidance_CGuidanceAudioNotificationKind_Route = 1,
    __x_ABI_CWindows_CServices_CMaps_CGuidance_CGuidanceAudioNotificationKind_Gps = 2,
    __x_ABI_CWindows_CServices_CMaps_CGuidance_CGuidanceAudioNotificationKind_SpeedLimit = 3,
    __x_ABI_CWindows_CServices_CMaps_CGuidance_CGuidanceAudioNotificationKind_Traffic = 4,
    __x_ABI_CWindows_CServices_CMaps_CGuidance_CGuidanceAudioNotificationKind_TrafficCamera = 5,
};

enum __x_ABI_CWindows_CServices_CMaps_CGuidance_CGuidanceAudioNotifications
    {
        __x_ABI_CWindows_CServices_CMaps_CGuidance_CGuidanceAudioNotifications_None = 0,
    __x_ABI_CWindows_CServices_CMaps_CGuidance_CGuidanceAudioNotifications_Maneuver = 0x1,
    __x_ABI_CWindows_CServices_CMaps_CGuidance_CGuidanceAudioNotifications_Route = 0x2,
    __x_ABI_CWindows_CServices_CMaps_CGuidance_CGuidanceAudioNotifications_Gps = 0x4,
    __x_ABI_CWindows_CServices_CMaps_CGuidance_CGuidanceAudioNotifications_SpeedLimit = 0x8,
    __x_ABI_CWindows_CServices_CMaps_CGuidance_CGuidanceAudioNotifications_Traffic = 0x10,
    __x_ABI_CWindows_CServices_CMaps_CGuidance_CGuidanceAudioNotifications_TrafficCamera = 0x20,
};

enum __x_ABI_CWindows_CServices_CMaps_CGuidance_CGuidanceLaneMarkers
    {
        __x_ABI_CWindows_CServices_CMaps_CGuidance_CGuidanceLaneMarkers_None = 0,
    __x_ABI_CWindows_CServices_CMaps_CGuidance_CGuidanceLaneMarkers_LightRight = 0x1,
    __x_ABI_CWindows_CServices_CMaps_CGuidance_CGuidanceLaneMarkers_Right = 0x2,
    __x_ABI_CWindows_CServices_CMaps_CGuidance_CGuidanceLaneMarkers_HardRight = 0x4,
    __x_ABI_CWindows_CServices_CMaps_CGuidance_CGuidanceLaneMarkers_Straight = 0x8,
    __x_ABI_CWindows_CServices_CMaps_CGuidance_CGuidanceLaneMarkers_UTurnLeft = 0x10,
    __x_ABI_CWindows_CServices_CMaps_CGuidance_CGuidanceLaneMarkers_HardLeft = 0x20,
    __x_ABI_CWindows_CServices_CMaps_CGuidance_CGuidanceLaneMarkers_Left = 0x40,
    __x_ABI_CWindows_CServices_CMaps_CGuidance_CGuidanceLaneMarkers_LightLeft = 0x80,
    __x_ABI_CWindows_CServices_CMaps_CGuidance_CGuidanceLaneMarkers_UTurnRight = 0x100,
    __x_ABI_CWindows_CServices_CMaps_CGuidance_CGuidanceLaneMarkers_Unknown = 0xffffffff,
};

enum __x_ABI_CWindows_CServices_CMaps_CGuidance_CGuidanceManeuverKind
    {
        __x_ABI_CWindows_CServices_CMaps_CGuidance_CGuidanceManeuverKind_None = 0,
    __x_ABI_CWindows_CServices_CMaps_CGuidance_CGuidanceManeuverKind_GoStraight = 1,
    __x_ABI_CWindows_CServices_CMaps_CGuidance_CGuidanceManeuverKind_UTurnRight = 2,
    __x_ABI_CWindows_CServices_CMaps_CGuidance_CGuidanceManeuverKind_UTurnLeft = 3,
    __x_ABI_CWindows_CServices_CMaps_CGuidance_CGuidanceManeuverKind_TurnKeepRight = 4,
    __x_ABI_CWindows_CServices_CMaps_CGuidance_CGuidanceManeuverKind_TurnLightRight = 5,
    __x_ABI_CWindows_CServices_CMaps_CGuidance_CGuidanceManeuverKind_TurnRight = 6,
    __x_ABI_CWindows_CServices_CMaps_CGuidance_CGuidanceManeuverKind_TurnHardRight = 7,
    __x_ABI_CWindows_CServices_CMaps_CGuidance_CGuidanceManeuverKind_KeepMiddle = 8,
    __x_ABI_CWindows_CServices_CMaps_CGuidance_CGuidanceManeuverKind_TurnKeepLeft = 9,
    __x_ABI_CWindows_CServices_CMaps_CGuidance_CGuidanceManeuverKind_TurnLightLeft = 10,
    __x_ABI_CWindows_CServices_CMaps_CGuidance_CGuidanceManeuverKind_TurnLeft = 11,
    __x_ABI_CWindows_CServices_CMaps_CGuidance_CGuidanceManeuverKind_TurnHardLeft = 12,
    __x_ABI_CWindows_CServices_CMaps_CGuidance_CGuidanceManeuverKind_FreewayEnterRight = 13,
    __x_ABI_CWindows_CServices_CMaps_CGuidance_CGuidanceManeuverKind_FreewayEnterLeft = 14,
    __x_ABI_CWindows_CServices_CMaps_CGuidance_CGuidanceManeuverKind_FreewayLeaveRight = 15,
    __x_ABI_CWindows_CServices_CMaps_CGuidance_CGuidanceManeuverKind_FreewayLeaveLeft = 16,
    __x_ABI_CWindows_CServices_CMaps_CGuidance_CGuidanceManeuverKind_FreewayKeepRight = 17,
    __x_ABI_CWindows_CServices_CMaps_CGuidance_CGuidanceManeuverKind_FreewayKeepLeft = 18,
    __x_ABI_CWindows_CServices_CMaps_CGuidance_CGuidanceManeuverKind_TrafficCircleRight1 = 19,
    __x_ABI_CWindows_CServices_CMaps_CGuidance_CGuidanceManeuverKind_TrafficCircleRight2 = 20,
    __x_ABI_CWindows_CServices_CMaps_CGuidance_CGuidanceManeuverKind_TrafficCircleRight3 = 21,
    __x_ABI_CWindows_CServices_CMaps_CGuidance_CGuidanceManeuverKind_TrafficCircleRight4 = 22,
    __x_ABI_CWindows_CServices_CMaps_CGuidance_CGuidanceManeuverKind_TrafficCircleRight5 = 23,
    __x_ABI_CWindows_CServices_CMaps_CGuidance_CGuidanceManeuverKind_TrafficCircleRight6 = 24,
    __x_ABI_CWindows_CServices_CMaps_CGuidance_CGuidanceManeuverKind_TrafficCircleRight7 = 25,
    __x_ABI_CWindows_CServices_CMaps_CGuidance_CGuidanceManeuverKind_TrafficCircleRight8 = 26,
    __x_ABI_CWindows_CServices_CMaps_CGuidance_CGuidanceManeuverKind_TrafficCircleRight9 = 27,
    __x_ABI_CWindows_CServices_CMaps_CGuidance_CGuidanceManeuverKind_TrafficCircleRight10 = 28,
    __x_ABI_CWindows_CServices_CMaps_CGuidance_CGuidanceManeuverKind_TrafficCircleRight11 = 29,
    __x_ABI_CWindows_CServices_CMaps_CGuidance_CGuidanceManeuverKind_TrafficCircleRight12 = 30,
    __x_ABI_CWindows_CServices_CMaps_CGuidance_CGuidanceManeuverKind_TrafficCircleLeft1 = 31,
    __x_ABI_CWindows_CServices_CMaps_CGuidance_CGuidanceManeuverKind_TrafficCircleLeft2 = 32,
    __x_ABI_CWindows_CServices_CMaps_CGuidance_CGuidanceManeuverKind_TrafficCircleLeft3 = 33,
    __x_ABI_CWindows_CServices_CMaps_CGuidance_CGuidanceManeuverKind_TrafficCircleLeft4 = 34,
    __x_ABI_CWindows_CServices_CMaps_CGuidance_CGuidanceManeuverKind_TrafficCircleLeft5 = 35,
    __x_ABI_CWindows_CServices_CMaps_CGuidance_CGuidanceManeuverKind_TrafficCircleLeft6 = 36,
    __x_ABI_CWindows_CServices_CMaps_CGuidance_CGuidanceManeuverKind_TrafficCircleLeft7 = 37,
    __x_ABI_CWindows_CServices_CMaps_CGuidance_CGuidanceManeuverKind_TrafficCircleLeft8 = 38,
    __x_ABI_CWindows_CServices_CMaps_CGuidance_CGuidanceManeuverKind_TrafficCircleLeft9 = 39,
    __x_ABI_CWindows_CServices_CMaps_CGuidance_CGuidanceManeuverKind_TrafficCircleLeft10 = 40,
    __x_ABI_CWindows_CServices_CMaps_CGuidance_CGuidanceManeuverKind_TrafficCircleLeft11 = 41,
    __x_ABI_CWindows_CServices_CMaps_CGuidance_CGuidanceManeuverKind_TrafficCircleLeft12 = 42,
    __x_ABI_CWindows_CServices_CMaps_CGuidance_CGuidanceManeuverKind_Start = 43,
    __x_ABI_CWindows_CServices_CMaps_CGuidance_CGuidanceManeuverKind_End = 44,
    __x_ABI_CWindows_CServices_CMaps_CGuidance_CGuidanceManeuverKind_TakeFerry = 45,
    __x_ABI_CWindows_CServices_CMaps_CGuidance_CGuidanceManeuverKind_PassTransitStation = 46,
    __x_ABI_CWindows_CServices_CMaps_CGuidance_CGuidanceManeuverKind_LeaveTransitStation = 47,
};

enum __x_ABI_CWindows_CServices_CMaps_CGuidance_CGuidanceMode
    {
        __x_ABI_CWindows_CServices_CMaps_CGuidance_CGuidanceMode_None = 0,
    __x_ABI_CWindows_CServices_CMaps_CGuidance_CGuidanceMode_Simulation = 1,
    __x_ABI_CWindows_CServices_CMaps_CGuidance_CGuidanceMode_Navigation = 2,
    __x_ABI_CWindows_CServices_CMaps_CGuidance_CGuidanceMode_Tracking = 3,
};

#if !defined(____x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceAudioNotificationRequestedEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceAudioNotificationRequestedEventArgs_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceAudioNotificationRequestedEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceAudioNotificationRequestedEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceAudioNotificationRequestedEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceAudioNotificationRequestedEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceAudioNotificationRequestedEventArgs* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceAudioNotificationRequestedEventArgs* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceAudioNotificationRequestedEventArgs* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_AudioNotification)(__x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceAudioNotificationRequestedEventArgs* This,
        enum __x_ABI_CWindows_CServices_CMaps_CGuidance_CGuidanceAudioNotificationKind* value);
    HRESULT (STDMETHODCALLTYPE* get_AudioFilePaths)(__x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceAudioNotificationRequestedEventArgs* This,
        __x_ABI_C__FIVectorView_1_HSTRING** value);
    HRESULT (STDMETHODCALLTYPE* get_AudioText)(__x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceAudioNotificationRequestedEventArgs* This,
        HSTRING* value);

        END_INTERFACE
    } __x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceAudioNotificationRequestedEventArgsVtbl;

    interface __x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceAudioNotificationRequestedEventArgs
    {
        CONST_VTBL struct __x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceAudioNotificationRequestedEventArgsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceAudioNotificationRequestedEventArgs;
#endif /* !defined(____x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceAudioNotificationRequestedEventArgs_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceLaneInfo_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceLaneInfo_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceLaneInfoVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceLaneInfo* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceLaneInfo* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceLaneInfo* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceLaneInfo* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceLaneInfo* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceLaneInfo* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_LaneMarkers)(__x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceLaneInfo* This,
        enum __x_ABI_CWindows_CServices_CMaps_CGuidance_CGuidanceLaneMarkers* value);
    HRESULT (STDMETHODCALLTYPE* get_IsOnRoute)(__x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceLaneInfo* This,
        boolean* value);

        END_INTERFACE
    } __x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceLaneInfoVtbl;

    interface __x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceLaneInfo
    {
        CONST_VTBL struct __x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceLaneInfoVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceLaneInfo;
#endif /* !defined(____x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceLaneInfo_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceManeuver_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceManeuver_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceManeuverVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceManeuver* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceManeuver* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceManeuver* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceManeuver* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceManeuver* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceManeuver* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_StartLocation)(__x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceManeuver* This,
        __x_ABI_CWindows_CDevices_CGeolocation_CIGeopoint** value);
    HRESULT (STDMETHODCALLTYPE* get_DistanceFromRouteStart)(__x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceManeuver* This,
        INT32* value);
    HRESULT (STDMETHODCALLTYPE* get_DistanceFromPreviousManeuver)(__x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceManeuver* This,
        INT32* value);
    HRESULT (STDMETHODCALLTYPE* get_DepartureRoadName)(__x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceManeuver* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_NextRoadName)(__x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceManeuver* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_DepartureShortRoadName)(__x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceManeuver* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_NextShortRoadName)(__x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceManeuver* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_Kind)(__x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceManeuver* This,
        enum __x_ABI_CWindows_CServices_CMaps_CGuidance_CGuidanceManeuverKind* value);
    HRESULT (STDMETHODCALLTYPE* get_StartAngle)(__x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceManeuver* This,
        INT32* value);
    HRESULT (STDMETHODCALLTYPE* get_EndAngle)(__x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceManeuver* This,
        INT32* value);
    HRESULT (STDMETHODCALLTYPE* get_RoadSignpost)(__x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceManeuver* This,
        __x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceRoadSignpost** value);
    HRESULT (STDMETHODCALLTYPE* get_InstructionText)(__x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceManeuver* This,
        HSTRING* value);

        END_INTERFACE
    } __x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceManeuverVtbl;

    interface __x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceManeuver
    {
        CONST_VTBL struct __x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceManeuverVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceManeuver;
#endif /* !defined(____x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceManeuver_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceMapMatchedCoordinate_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceMapMatchedCoordinate_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceMapMatchedCoordinateVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceMapMatchedCoordinate* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceMapMatchedCoordinate* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceMapMatchedCoordinate* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceMapMatchedCoordinate* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceMapMatchedCoordinate* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceMapMatchedCoordinate* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Location)(__x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceMapMatchedCoordinate* This,
        __x_ABI_CWindows_CDevices_CGeolocation_CIGeopoint** value);
    HRESULT (STDMETHODCALLTYPE* get_CurrentHeading)(__x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceMapMatchedCoordinate* This,
        DOUBLE* value);
    HRESULT (STDMETHODCALLTYPE* get_CurrentSpeed)(__x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceMapMatchedCoordinate* This,
        DOUBLE* value);
    HRESULT (STDMETHODCALLTYPE* get_IsOnStreet)(__x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceMapMatchedCoordinate* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* get_Road)(__x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceMapMatchedCoordinate* This,
        __x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceRoadSegment** value);

        END_INTERFACE
    } __x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceMapMatchedCoordinateVtbl;

    interface __x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceMapMatchedCoordinate
    {
        CONST_VTBL struct __x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceMapMatchedCoordinateVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceMapMatchedCoordinate;
#endif /* !defined(____x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceMapMatchedCoordinate_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceNavigator_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceNavigator_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceNavigatorVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceNavigator* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceNavigator* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceNavigator* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceNavigator* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceNavigator* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceNavigator* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* StartNavigating)(__x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceNavigator* This,
        __x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceRoute* route);
    HRESULT (STDMETHODCALLTYPE* StartSimulating)(__x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceNavigator* This,
        __x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceRoute* route,
        INT32 speedInMetersPerSecond);
    HRESULT (STDMETHODCALLTYPE* StartTracking)(__x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceNavigator* This);
    HRESULT (STDMETHODCALLTYPE* Pause)(__x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceNavigator* This);
    HRESULT (STDMETHODCALLTYPE* Resume)(__x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceNavigator* This);
    HRESULT (STDMETHODCALLTYPE* Stop)(__x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceNavigator* This);
    HRESULT (STDMETHODCALLTYPE* RepeatLastAudioNotification)(__x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceNavigator* This);
    HRESULT (STDMETHODCALLTYPE* get_AudioMeasurementSystem)(__x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceNavigator* This,
        enum __x_ABI_CWindows_CServices_CMaps_CGuidance_CGuidanceAudioMeasurementSystem* value);
    HRESULT (STDMETHODCALLTYPE* put_AudioMeasurementSystem)(__x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceNavigator* This,
        enum __x_ABI_CWindows_CServices_CMaps_CGuidance_CGuidanceAudioMeasurementSystem value);
    HRESULT (STDMETHODCALLTYPE* get_AudioNotifications)(__x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceNavigator* This,
        enum __x_ABI_CWindows_CServices_CMaps_CGuidance_CGuidanceAudioNotifications* value);
    HRESULT (STDMETHODCALLTYPE* put_AudioNotifications)(__x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceNavigator* This,
        enum __x_ABI_CWindows_CServices_CMaps_CGuidance_CGuidanceAudioNotifications value);
    HRESULT (STDMETHODCALLTYPE* add_GuidanceUpdated)(__x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceNavigator* This,
        __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceNavigator___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceUpdatedEventArgs* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_GuidanceUpdated)(__x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceNavigator* This,
        EventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* add_DestinationReached)(__x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceNavigator* This,
        __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceNavigator_IInspectable* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_DestinationReached)(__x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceNavigator* This,
        EventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* add_Rerouting)(__x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceNavigator* This,
        __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceNavigator_IInspectable* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_Rerouting)(__x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceNavigator* This,
        EventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* add_Rerouted)(__x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceNavigator* This,
        __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceNavigator___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceReroutedEventArgs* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_Rerouted)(__x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceNavigator* This,
        EventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* add_RerouteFailed)(__x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceNavigator* This,
        __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceNavigator_IInspectable* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_RerouteFailed)(__x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceNavigator* This,
        EventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* add_UserLocationLost)(__x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceNavigator* This,
        __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceNavigator_IInspectable* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_UserLocationLost)(__x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceNavigator* This,
        EventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* add_UserLocationRestored)(__x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceNavigator* This,
        __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceNavigator_IInspectable* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_UserLocationRestored)(__x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceNavigator* This,
        EventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* SetGuidanceVoice)(__x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceNavigator* This,
        INT32 voiceId,
        HSTRING voiceFolder);
    HRESULT (STDMETHODCALLTYPE* UpdateUserLocation)(__x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceNavigator* This,
        __x_ABI_CWindows_CDevices_CGeolocation_CIGeocoordinate* userLocation);
    HRESULT (STDMETHODCALLTYPE* UpdateUserLocationWithPositionOverride)(__x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceNavigator* This,
        __x_ABI_CWindows_CDevices_CGeolocation_CIGeocoordinate* userLocation,
        struct __x_ABI_CWindows_CDevices_CGeolocation_CBasicGeoposition positionOverride);

        END_INTERFACE
    } __x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceNavigatorVtbl;

    interface __x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceNavigator
    {
        CONST_VTBL struct __x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceNavigatorVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceNavigator;
#endif /* !defined(____x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceNavigator_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceNavigator2_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceNavigator2_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceNavigator2Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceNavigator2* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceNavigator2* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceNavigator2* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceNavigator2* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceNavigator2* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceNavigator2* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* add_AudioNotificationRequested)(__x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceNavigator2* This,
        __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceNavigator___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceAudioNotificationRequestedEventArgs* value,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_AudioNotificationRequested)(__x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceNavigator2* This,
        EventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* get_IsGuidanceAudioMuted)(__x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceNavigator2* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* put_IsGuidanceAudioMuted)(__x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceNavigator2* This,
        boolean value);

        END_INTERFACE
    } __x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceNavigator2Vtbl;

    interface __x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceNavigator2
    {
        CONST_VTBL struct __x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceNavigator2Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceNavigator2;
#endif /* !defined(____x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceNavigator2_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceNavigatorStatics_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceNavigatorStatics_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceNavigatorStaticsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceNavigatorStatics* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceNavigatorStatics* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceNavigatorStatics* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceNavigatorStatics* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceNavigatorStatics* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceNavigatorStatics* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetCurrent)(__x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceNavigatorStatics* This,
        __x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceNavigator** result);

        END_INTERFACE
    } __x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceNavigatorStaticsVtbl;

    interface __x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceNavigatorStatics
    {
        CONST_VTBL struct __x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceNavigatorStaticsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceNavigatorStatics;
#endif /* !defined(____x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceNavigatorStatics_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceNavigatorStatics2_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceNavigatorStatics2_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceNavigatorStatics2Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceNavigatorStatics2* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceNavigatorStatics2* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceNavigatorStatics2* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceNavigatorStatics2* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceNavigatorStatics2* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceNavigatorStatics2* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_UseAppProvidedVoice)(__x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceNavigatorStatics2* This,
        boolean* value);

        END_INTERFACE
    } __x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceNavigatorStatics2Vtbl;

    interface __x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceNavigatorStatics2
    {
        CONST_VTBL struct __x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceNavigatorStatics2Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceNavigatorStatics2;
#endif /* !defined(____x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceNavigatorStatics2_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceReroutedEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceReroutedEventArgs_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceReroutedEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceReroutedEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceReroutedEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceReroutedEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceReroutedEventArgs* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceReroutedEventArgs* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceReroutedEventArgs* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Route)(__x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceReroutedEventArgs* This,
        __x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceRoute** result);

        END_INTERFACE
    } __x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceReroutedEventArgsVtbl;

    interface __x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceReroutedEventArgs
    {
        CONST_VTBL struct __x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceReroutedEventArgsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceReroutedEventArgs;
#endif /* !defined(____x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceReroutedEventArgs_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceRoadSegment_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceRoadSegment_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceRoadSegmentVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceRoadSegment* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceRoadSegment* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceRoadSegment* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceRoadSegment* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceRoadSegment* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceRoadSegment* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_RoadName)(__x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceRoadSegment* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_ShortRoadName)(__x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceRoadSegment* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_SpeedLimit)(__x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceRoadSegment* This,
        DOUBLE* value);
    HRESULT (STDMETHODCALLTYPE* get_TravelTime)(__x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceRoadSegment* This,
        struct __x_ABI_CWindows_CFoundation_CTimeSpan* value);
    HRESULT (STDMETHODCALLTYPE* get_Path)(__x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceRoadSegment* This,
        __x_ABI_CWindows_CDevices_CGeolocation_CIGeopath** value);
    HRESULT (STDMETHODCALLTYPE* get_Id)(__x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceRoadSegment* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_IsHighway)(__x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceRoadSegment* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* get_IsTunnel)(__x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceRoadSegment* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* get_IsTollRoad)(__x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceRoadSegment* This,
        boolean* value);

        END_INTERFACE
    } __x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceRoadSegmentVtbl;

    interface __x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceRoadSegment
    {
        CONST_VTBL struct __x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceRoadSegmentVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceRoadSegment;
#endif /* !defined(____x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceRoadSegment_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceRoadSegment2_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceRoadSegment2_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceRoadSegment2Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceRoadSegment2* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceRoadSegment2* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceRoadSegment2* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceRoadSegment2* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceRoadSegment2* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceRoadSegment2* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_IsScenic)(__x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceRoadSegment2* This,
        boolean* value);

        END_INTERFACE
    } __x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceRoadSegment2Vtbl;

    interface __x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceRoadSegment2
    {
        CONST_VTBL struct __x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceRoadSegment2Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceRoadSegment2;
#endif /* !defined(____x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceRoadSegment2_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceRoadSignpost_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceRoadSignpost_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceRoadSignpostVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceRoadSignpost* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceRoadSignpost* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceRoadSignpost* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceRoadSignpost* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceRoadSignpost* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceRoadSignpost* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_ExitNumber)(__x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceRoadSignpost* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_Exit)(__x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceRoadSignpost* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_BackgroundColor)(__x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceRoadSignpost* This,
        struct __x_ABI_CWindows_CUI_CColor* value);
    HRESULT (STDMETHODCALLTYPE* get_ForegroundColor)(__x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceRoadSignpost* This,
        struct __x_ABI_CWindows_CUI_CColor* value);
    HRESULT (STDMETHODCALLTYPE* get_ExitDirections)(__x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceRoadSignpost* This,
        __x_ABI_C__FIVectorView_1_HSTRING** value);

        END_INTERFACE
    } __x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceRoadSignpostVtbl;

    interface __x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceRoadSignpost
    {
        CONST_VTBL struct __x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceRoadSignpostVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceRoadSignpost;
#endif /* !defined(____x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceRoadSignpost_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceRoute_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceRoute_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceRouteVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceRoute* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceRoute* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceRoute* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceRoute* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceRoute* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceRoute* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Duration)(__x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceRoute* This,
        struct __x_ABI_CWindows_CFoundation_CTimeSpan* value);
    HRESULT (STDMETHODCALLTYPE* get_Distance)(__x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceRoute* This,
        INT32* value);
    HRESULT (STDMETHODCALLTYPE* get_Maneuvers)(__x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceRoute* This,
        __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceManeuver** value);
    HRESULT (STDMETHODCALLTYPE* get_BoundingBox)(__x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceRoute* This,
        __x_ABI_CWindows_CDevices_CGeolocation_CIGeoboundingBox** value);
    HRESULT (STDMETHODCALLTYPE* get_Path)(__x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceRoute* This,
        __x_ABI_CWindows_CDevices_CGeolocation_CIGeopath** value);
    HRESULT (STDMETHODCALLTYPE* get_RoadSegments)(__x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceRoute* This,
        __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceRoadSegment** value);
    HRESULT (STDMETHODCALLTYPE* ConvertToMapRoute)(__x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceRoute* This,
        __x_ABI_CWindows_CServices_CMaps_CIMapRoute** result);

        END_INTERFACE
    } __x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceRouteVtbl;

    interface __x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceRoute
    {
        CONST_VTBL struct __x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceRouteVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceRoute;
#endif /* !defined(____x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceRoute_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceRouteStatics_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceRouteStatics_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceRouteStaticsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceRouteStatics* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceRouteStatics* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceRouteStatics* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceRouteStatics* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceRouteStatics* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceRouteStatics* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* CanCreateFromMapRoute)(__x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceRouteStatics* This,
        __x_ABI_CWindows_CServices_CMaps_CIMapRoute* mapRoute,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* TryCreateFromMapRoute)(__x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceRouteStatics* This,
        __x_ABI_CWindows_CServices_CMaps_CIMapRoute* mapRoute,
        __x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceRoute** result);

        END_INTERFACE
    } __x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceRouteStaticsVtbl;

    interface __x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceRouteStatics
    {
        CONST_VTBL struct __x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceRouteStaticsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceRouteStatics;
#endif /* !defined(____x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceRouteStatics_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceTelemetryCollector_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceTelemetryCollector_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceTelemetryCollectorVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceTelemetryCollector* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceTelemetryCollector* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceTelemetryCollector* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceTelemetryCollector* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceTelemetryCollector* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceTelemetryCollector* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Enabled)(__x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceTelemetryCollector* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* put_Enabled)(__x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceTelemetryCollector* This,
        boolean value);
    HRESULT (STDMETHODCALLTYPE* ClearLocalData)(__x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceTelemetryCollector* This);
    HRESULT (STDMETHODCALLTYPE* get_SpeedTrigger)(__x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceTelemetryCollector* This,
        DOUBLE* value);
    HRESULT (STDMETHODCALLTYPE* put_SpeedTrigger)(__x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceTelemetryCollector* This,
        DOUBLE value);
    HRESULT (STDMETHODCALLTYPE* get_UploadFrequency)(__x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceTelemetryCollector* This,
        INT32* value);
    HRESULT (STDMETHODCALLTYPE* put_UploadFrequency)(__x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceTelemetryCollector* This,
        INT32 value);

        END_INTERFACE
    } __x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceTelemetryCollectorVtbl;

    interface __x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceTelemetryCollector
    {
        CONST_VTBL struct __x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceTelemetryCollectorVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceTelemetryCollector;
#endif /* !defined(____x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceTelemetryCollector_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceTelemetryCollectorStatics_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceTelemetryCollectorStatics_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceTelemetryCollectorStaticsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceTelemetryCollectorStatics* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceTelemetryCollectorStatics* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceTelemetryCollectorStatics* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceTelemetryCollectorStatics* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceTelemetryCollectorStatics* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceTelemetryCollectorStatics* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetCurrent)(__x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceTelemetryCollectorStatics* This,
        __x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceTelemetryCollector** result);

        END_INTERFACE
    } __x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceTelemetryCollectorStaticsVtbl;

    interface __x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceTelemetryCollectorStatics
    {
        CONST_VTBL struct __x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceTelemetryCollectorStaticsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceTelemetryCollectorStatics;
#endif /* !defined(____x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceTelemetryCollectorStatics_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceUpdatedEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceUpdatedEventArgs_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceUpdatedEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceUpdatedEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceUpdatedEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceUpdatedEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceUpdatedEventArgs* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceUpdatedEventArgs* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceUpdatedEventArgs* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Mode)(__x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceUpdatedEventArgs* This,
        enum __x_ABI_CWindows_CServices_CMaps_CGuidance_CGuidanceMode* value);
    HRESULT (STDMETHODCALLTYPE* get_NextManeuver)(__x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceUpdatedEventArgs* This,
        __x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceManeuver** value);
    HRESULT (STDMETHODCALLTYPE* get_NextManeuverDistance)(__x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceUpdatedEventArgs* This,
        INT32* value);
    HRESULT (STDMETHODCALLTYPE* get_AfterNextManeuver)(__x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceUpdatedEventArgs* This,
        __x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceManeuver** value);
    HRESULT (STDMETHODCALLTYPE* get_AfterNextManeuverDistance)(__x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceUpdatedEventArgs* This,
        INT32* value);
    HRESULT (STDMETHODCALLTYPE* get_DistanceToDestination)(__x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceUpdatedEventArgs* This,
        INT32* value);
    HRESULT (STDMETHODCALLTYPE* get_ElapsedDistance)(__x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceUpdatedEventArgs* This,
        INT32* value);
    HRESULT (STDMETHODCALLTYPE* get_ElapsedTime)(__x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceUpdatedEventArgs* This,
        struct __x_ABI_CWindows_CFoundation_CTimeSpan* value);
    HRESULT (STDMETHODCALLTYPE* get_TimeToDestination)(__x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceUpdatedEventArgs* This,
        struct __x_ABI_CWindows_CFoundation_CTimeSpan* value);
    HRESULT (STDMETHODCALLTYPE* get_RoadName)(__x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceUpdatedEventArgs* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_Route)(__x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceUpdatedEventArgs* This,
        __x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceRoute** result);
    HRESULT (STDMETHODCALLTYPE* get_CurrentLocation)(__x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceUpdatedEventArgs* This,
        __x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceMapMatchedCoordinate** result);
    HRESULT (STDMETHODCALLTYPE* get_IsNewManeuver)(__x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceUpdatedEventArgs* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* get_LaneInfo)(__x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceUpdatedEventArgs* This,
        __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CMaps__CGuidance__CGuidanceLaneInfo** value);

        END_INTERFACE
    } __x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceUpdatedEventArgsVtbl;

    interface __x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceUpdatedEventArgs
    {
        CONST_VTBL struct __x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceUpdatedEventArgsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceUpdatedEventArgs;
#endif /* !defined(____x_ABI_CWindows_CServices_CMaps_CGuidance_CIGuidanceUpdatedEventArgs_INTERFACE_DEFINED__) */
    

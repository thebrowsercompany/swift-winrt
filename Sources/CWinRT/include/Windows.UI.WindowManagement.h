// WARNING: Please don't edit this file. It was generated by Swift/WinRT v0.0.1

#pragma once
// Header files for imported files
#include <inspectable.h>
#include <EventToken.h>
#include <windowscontracts.h>
#include "Windows.Foundation.h"
#include "Windows.System.h"
#include "Windows.UI.h"
#include "Windows.UI.Composition.h"
// Importing Collections header
#include "Windows.Foundation.Collections.h"

/* Forward Declarations */
#ifndef ____x_ABI_CWindows_CUI_CWindowManagement_CIAppWindow_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CWindowManagement_CIAppWindow_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CWindowManagement_CIAppWindow __x_ABI_CWindows_CUI_CWindowManagement_CIAppWindow;

#endif // ____x_ABI_CWindows_CUI_CWindowManagement_CIAppWindow_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowChangedEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowChangedEventArgs_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowChangedEventArgs __x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowChangedEventArgs;

#endif // ____x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowChangedEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowCloseRequestedEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowCloseRequestedEventArgs_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowCloseRequestedEventArgs __x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowCloseRequestedEventArgs;

#endif // ____x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowCloseRequestedEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowClosedEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowClosedEventArgs_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowClosedEventArgs __x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowClosedEventArgs;

#endif // ____x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowClosedEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowFrame_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowFrame_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowFrame __x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowFrame;

#endif // ____x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowFrame_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowFrameStyle_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowFrameStyle_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowFrameStyle __x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowFrameStyle;

#endif // ____x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowFrameStyle_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowPlacement_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowPlacement_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowPlacement __x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowPlacement;

#endif // ____x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowPlacement_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowPresentationConfiguration_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowPresentationConfiguration_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowPresentationConfiguration __x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowPresentationConfiguration;

#endif // ____x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowPresentationConfiguration_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowPresentationConfigurationFactory_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowPresentationConfigurationFactory_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowPresentationConfigurationFactory __x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowPresentationConfigurationFactory;

#endif // ____x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowPresentationConfigurationFactory_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowPresenter_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowPresenter_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowPresenter __x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowPresenter;

#endif // ____x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowPresenter_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowStatics_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowStatics __x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowStatics;

#endif // ____x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowStatics_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowTitleBar_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowTitleBar_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowTitleBar __x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowTitleBar;

#endif // ____x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowTitleBar_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowTitleBarOcclusion_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowTitleBarOcclusion_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowTitleBarOcclusion __x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowTitleBarOcclusion;

#endif // ____x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowTitleBarOcclusion_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowTitleBarVisibility_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowTitleBarVisibility_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowTitleBarVisibility __x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowTitleBarVisibility;

#endif // ____x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowTitleBarVisibility_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CWindowManagement_CICompactOverlayPresentationConfiguration_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CWindowManagement_CICompactOverlayPresentationConfiguration_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CWindowManagement_CICompactOverlayPresentationConfiguration __x_ABI_CWindows_CUI_CWindowManagement_CICompactOverlayPresentationConfiguration;

#endif // ____x_ABI_CWindows_CUI_CWindowManagement_CICompactOverlayPresentationConfiguration_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CWindowManagement_CIDefaultPresentationConfiguration_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CWindowManagement_CIDefaultPresentationConfiguration_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CWindowManagement_CIDefaultPresentationConfiguration __x_ABI_CWindows_CUI_CWindowManagement_CIDefaultPresentationConfiguration;

#endif // ____x_ABI_CWindows_CUI_CWindowManagement_CIDefaultPresentationConfiguration_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CWindowManagement_CIDisplayRegion_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CWindowManagement_CIDisplayRegion_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CWindowManagement_CIDisplayRegion __x_ABI_CWindows_CUI_CWindowManagement_CIDisplayRegion;

#endif // ____x_ABI_CWindows_CUI_CWindowManagement_CIDisplayRegion_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CWindowManagement_CIFullScreenPresentationConfiguration_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CWindowManagement_CIFullScreenPresentationConfiguration_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CWindowManagement_CIFullScreenPresentationConfiguration __x_ABI_CWindows_CUI_CWindowManagement_CIFullScreenPresentationConfiguration;

#endif // ____x_ABI_CWindows_CUI_CWindowManagement_CIFullScreenPresentationConfiguration_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CWindowManagement_CIWindowingEnvironment_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CWindowManagement_CIWindowingEnvironment_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CWindowManagement_CIWindowingEnvironment __x_ABI_CWindows_CUI_CWindowManagement_CIWindowingEnvironment;

#endif // ____x_ABI_CWindows_CUI_CWindowManagement_CIWindowingEnvironment_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CWindowManagement_CIWindowingEnvironmentAddedEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CWindowManagement_CIWindowingEnvironmentAddedEventArgs_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CWindowManagement_CIWindowingEnvironmentAddedEventArgs __x_ABI_CWindows_CUI_CWindowManagement_CIWindowingEnvironmentAddedEventArgs;

#endif // ____x_ABI_CWindows_CUI_CWindowManagement_CIWindowingEnvironmentAddedEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CWindowManagement_CIWindowingEnvironmentChangedEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CWindowManagement_CIWindowingEnvironmentChangedEventArgs_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CWindowManagement_CIWindowingEnvironmentChangedEventArgs __x_ABI_CWindows_CUI_CWindowManagement_CIWindowingEnvironmentChangedEventArgs;

#endif // ____x_ABI_CWindows_CUI_CWindowManagement_CIWindowingEnvironmentChangedEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CWindowManagement_CIWindowingEnvironmentRemovedEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CWindowManagement_CIWindowingEnvironmentRemovedEventArgs_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CWindowManagement_CIWindowingEnvironmentRemovedEventArgs __x_ABI_CWindows_CUI_CWindowManagement_CIWindowingEnvironmentRemovedEventArgs;

#endif // ____x_ABI_CWindows_CUI_CWindowManagement_CIWindowingEnvironmentRemovedEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CWindowManagement_CIWindowingEnvironmentStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CWindowManagement_CIWindowingEnvironmentStatics_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CWindowManagement_CIWindowingEnvironmentStatics __x_ABI_CWindows_CUI_CWindowManagement_CIWindowingEnvironmentStatics;

#endif // ____x_ABI_CWindows_CUI_CWindowManagement_CIWindowingEnvironmentStatics_FWD_DEFINED__

// Parameterized interface forward declarations (C)

// Collection interface definitions

typedef interface __x_ABI_C__FIAsyncOperationCompletedHandler_1_boolean __x_ABI_C__FIAsyncOperationCompletedHandler_1_boolean;

#if !defined(____x_ABI_C__FIAsyncOperation_1_boolean_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperation_1_boolean_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperation_1_boolean __x_ABI_C__FIAsyncOperation_1_boolean;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperation_1_boolean;

    typedef struct __x_ABI_C__FIAsyncOperation_1_booleanVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperation_1_boolean* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperation_1_boolean* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperation_1_boolean* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIAsyncOperation_1_boolean* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIAsyncOperation_1_boolean* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIAsyncOperation_1_boolean* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* put_Completed)(__x_ABI_C__FIAsyncOperation_1_boolean* This,
        __x_ABI_C__FIAsyncOperationCompletedHandler_1_boolean* handler);
    HRESULT (STDMETHODCALLTYPE* get_Completed)(__x_ABI_C__FIAsyncOperation_1_boolean* This,
        __x_ABI_C__FIAsyncOperationCompletedHandler_1_boolean** result);
    HRESULT (STDMETHODCALLTYPE* GetResults)(__x_ABI_C__FIAsyncOperation_1_boolean* This,
        boolean* result);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperation_1_booleanVtbl;

    interface __x_ABI_C__FIAsyncOperation_1_boolean
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperation_1_booleanVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperation_1_boolean_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIAsyncOperationCompletedHandler_1_boolean_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperationCompletedHandler_1_boolean_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperationCompletedHandler_1_boolean __x_ABI_C__FIAsyncOperationCompletedHandler_1_boolean;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperationCompletedHandler_1_boolean;

    typedef struct __x_ABI_C__FIAsyncOperationCompletedHandler_1_booleanVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperationCompletedHandler_1_boolean* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperationCompletedHandler_1_boolean* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperationCompletedHandler_1_boolean* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FIAsyncOperationCompletedHandler_1_boolean* This,
        __x_ABI_C__FIAsyncOperation_1_boolean* asyncInfo,
        enum __x_ABI_CWindows_CFoundation_CAsyncStatus asyncStatus);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperationCompletedHandler_1_booleanVtbl;

    interface __x_ABI_C__FIAsyncOperationCompletedHandler_1_boolean
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperationCompletedHandler_1_booleanVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperationCompletedHandler_1_boolean_INTERFACE_DEFINED__
    
typedef interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CUI__CWindowManagement__CAppWindow __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CUI__CWindowManagement__CAppWindow;

#if !defined(____x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CUI__CWindowManagement__CAppWindow_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CUI__CWindowManagement__CAppWindow_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CUI__CWindowManagement__CAppWindow __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CUI__CWindowManagement__CAppWindow;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CUI__CWindowManagement__CAppWindow;

    typedef struct __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CUI__CWindowManagement__CAppWindowVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CUI__CWindowManagement__CAppWindow* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CUI__CWindowManagement__CAppWindow* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CUI__CWindowManagement__CAppWindow* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CUI__CWindowManagement__CAppWindow* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CUI__CWindowManagement__CAppWindow* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CUI__CWindowManagement__CAppWindow* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* put_Completed)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CUI__CWindowManagement__CAppWindow* This,
        __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CUI__CWindowManagement__CAppWindow* handler);
    HRESULT (STDMETHODCALLTYPE* get_Completed)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CUI__CWindowManagement__CAppWindow* This,
        __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CUI__CWindowManagement__CAppWindow** result);
    HRESULT (STDMETHODCALLTYPE* GetResults)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CUI__CWindowManagement__CAppWindow* This,
        __x_ABI_CWindows_CUI_CWindowManagement_CIAppWindow** result);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CUI__CWindowManagement__CAppWindowVtbl;

    interface __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CUI__CWindowManagement__CAppWindow
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CUI__CWindowManagement__CAppWindowVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CUI__CWindowManagement__CAppWindow_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CUI__CWindowManagement__CAppWindow_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CUI__CWindowManagement__CAppWindow_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CUI__CWindowManagement__CAppWindow __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CUI__CWindowManagement__CAppWindow;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CUI__CWindowManagement__CAppWindow;

    typedef struct __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CUI__CWindowManagement__CAppWindowVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CUI__CWindowManagement__CAppWindow* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CUI__CWindowManagement__CAppWindow* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CUI__CWindowManagement__CAppWindow* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CUI__CWindowManagement__CAppWindow* This,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CUI__CWindowManagement__CAppWindow* asyncInfo,
        enum __x_ABI_CWindows_CFoundation_CAsyncStatus asyncStatus);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CUI__CWindowManagement__CAppWindowVtbl;

    interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CUI__CWindowManagement__CAppWindow
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CUI__CWindowManagement__CAppWindowVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CUI__CWindowManagement__CAppWindow_INTERFACE_DEFINED__
    
#ifndef ____x_ABI_CWindows_CUI_CComposition_CIVisualElement_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CComposition_CIVisualElement_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CComposition_CIVisualElement __x_ABI_CWindows_CUI_CComposition_CIVisualElement;

#endif // ____x_ABI_CWindows_CUI_CComposition_CIVisualElement_FWD_DEFINED__

#if !defined(____x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CComposition__CIVisualElement_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CComposition__CIVisualElement_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CComposition__CIVisualElement __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CComposition__CIVisualElement;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CComposition__CIVisualElement;

    typedef struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CComposition__CIVisualElementVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CComposition__CIVisualElement* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CComposition__CIVisualElement* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CComposition__CIVisualElement* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CComposition__CIVisualElement* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CComposition__CIVisualElement* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CComposition__CIVisualElement* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Current)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CComposition__CIVisualElement* This,
        __x_ABI_CWindows_CUI_CComposition_CIVisualElement** result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CComposition__CIVisualElement* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CComposition__CIVisualElement* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CComposition__CIVisualElement* This,
        UINT32 itemsLength,
        __x_ABI_CWindows_CUI_CComposition_CIVisualElement** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CComposition__CIVisualElementVtbl;

    interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CComposition__CIVisualElement
    {
        CONST_VTBL struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CComposition__CIVisualElementVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CComposition__CIVisualElement_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CComposition__CIVisualElement_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CComposition__CIVisualElement_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CComposition__CIVisualElement __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CComposition__CIVisualElement;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CComposition__CIVisualElement;

    typedef struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CComposition__CIVisualElementVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CComposition__CIVisualElement* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CComposition__CIVisualElement* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CComposition__CIVisualElement* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CComposition__CIVisualElement* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CComposition__CIVisualElement* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CComposition__CIVisualElement* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* First)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CComposition__CIVisualElement* This,
        __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CComposition__CIVisualElement** result);

        END_INTERFACE
    } __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CComposition__CIVisualElementVtbl;

    interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CComposition__CIVisualElement
    {
        CONST_VTBL struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CComposition__CIVisualElementVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CComposition__CIVisualElement_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CWindowManagement__CAppWindowTitleBarOcclusion_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CWindowManagement__CAppWindowTitleBarOcclusion_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CWindowManagement__CAppWindowTitleBarOcclusion __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CWindowManagement__CAppWindowTitleBarOcclusion;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CWindowManagement__CAppWindowTitleBarOcclusion;

    typedef struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CWindowManagement__CAppWindowTitleBarOcclusionVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CWindowManagement__CAppWindowTitleBarOcclusion* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CWindowManagement__CAppWindowTitleBarOcclusion* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CWindowManagement__CAppWindowTitleBarOcclusion* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CWindowManagement__CAppWindowTitleBarOcclusion* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CWindowManagement__CAppWindowTitleBarOcclusion* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CWindowManagement__CAppWindowTitleBarOcclusion* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Current)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CWindowManagement__CAppWindowTitleBarOcclusion* This,
        __x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowTitleBarOcclusion** result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CWindowManagement__CAppWindowTitleBarOcclusion* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CWindowManagement__CAppWindowTitleBarOcclusion* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CWindowManagement__CAppWindowTitleBarOcclusion* This,
        UINT32 itemsLength,
        __x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowTitleBarOcclusion** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CWindowManagement__CAppWindowTitleBarOcclusionVtbl;

    interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CWindowManagement__CAppWindowTitleBarOcclusion
    {
        CONST_VTBL struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CWindowManagement__CAppWindowTitleBarOcclusionVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CWindowManagement__CAppWindowTitleBarOcclusion_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CWindowManagement__CAppWindowTitleBarOcclusion_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CWindowManagement__CAppWindowTitleBarOcclusion_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CWindowManagement__CAppWindowTitleBarOcclusion __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CWindowManagement__CAppWindowTitleBarOcclusion;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CWindowManagement__CAppWindowTitleBarOcclusion;

    typedef struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CWindowManagement__CAppWindowTitleBarOcclusionVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CWindowManagement__CAppWindowTitleBarOcclusion* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CWindowManagement__CAppWindowTitleBarOcclusion* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CWindowManagement__CAppWindowTitleBarOcclusion* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CWindowManagement__CAppWindowTitleBarOcclusion* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CWindowManagement__CAppWindowTitleBarOcclusion* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CWindowManagement__CAppWindowTitleBarOcclusion* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* First)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CWindowManagement__CAppWindowTitleBarOcclusion* This,
        __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CWindowManagement__CAppWindowTitleBarOcclusion** result);

        END_INTERFACE
    } __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CWindowManagement__CAppWindowTitleBarOcclusionVtbl;

    interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CWindowManagement__CAppWindowTitleBarOcclusion
    {
        CONST_VTBL struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CWindowManagement__CAppWindowTitleBarOcclusionVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CWindowManagement__CAppWindowTitleBarOcclusion_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CWindowManagement__CDisplayRegion_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CWindowManagement__CDisplayRegion_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CWindowManagement__CDisplayRegion __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CWindowManagement__CDisplayRegion;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CWindowManagement__CDisplayRegion;

    typedef struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CWindowManagement__CDisplayRegionVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CWindowManagement__CDisplayRegion* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CWindowManagement__CDisplayRegion* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CWindowManagement__CDisplayRegion* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CWindowManagement__CDisplayRegion* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CWindowManagement__CDisplayRegion* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CWindowManagement__CDisplayRegion* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Current)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CWindowManagement__CDisplayRegion* This,
        __x_ABI_CWindows_CUI_CWindowManagement_CIDisplayRegion** result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CWindowManagement__CDisplayRegion* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CWindowManagement__CDisplayRegion* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CWindowManagement__CDisplayRegion* This,
        UINT32 itemsLength,
        __x_ABI_CWindows_CUI_CWindowManagement_CIDisplayRegion** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CWindowManagement__CDisplayRegionVtbl;

    interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CWindowManagement__CDisplayRegion
    {
        CONST_VTBL struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CWindowManagement__CDisplayRegionVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CWindowManagement__CDisplayRegion_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CWindowManagement__CDisplayRegion_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CWindowManagement__CDisplayRegion_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CWindowManagement__CDisplayRegion __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CWindowManagement__CDisplayRegion;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CWindowManagement__CDisplayRegion;

    typedef struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CWindowManagement__CDisplayRegionVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CWindowManagement__CDisplayRegion* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CWindowManagement__CDisplayRegion* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CWindowManagement__CDisplayRegion* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CWindowManagement__CDisplayRegion* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CWindowManagement__CDisplayRegion* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CWindowManagement__CDisplayRegion* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* First)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CWindowManagement__CDisplayRegion* This,
        __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CWindowManagement__CDisplayRegion** result);

        END_INTERFACE
    } __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CWindowManagement__CDisplayRegionVtbl;

    interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CWindowManagement__CDisplayRegion
    {
        CONST_VTBL struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CWindowManagement__CDisplayRegionVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CWindowManagement__CDisplayRegion_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CWindowManagement__CWindowingEnvironment_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CWindowManagement__CWindowingEnvironment_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CWindowManagement__CWindowingEnvironment __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CWindowManagement__CWindowingEnvironment;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CWindowManagement__CWindowingEnvironment;

    typedef struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CWindowManagement__CWindowingEnvironmentVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CWindowManagement__CWindowingEnvironment* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CWindowManagement__CWindowingEnvironment* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CWindowManagement__CWindowingEnvironment* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CWindowManagement__CWindowingEnvironment* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CWindowManagement__CWindowingEnvironment* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CWindowManagement__CWindowingEnvironment* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Current)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CWindowManagement__CWindowingEnvironment* This,
        __x_ABI_CWindows_CUI_CWindowManagement_CIWindowingEnvironment** result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CWindowManagement__CWindowingEnvironment* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CWindowManagement__CWindowingEnvironment* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CWindowManagement__CWindowingEnvironment* This,
        UINT32 itemsLength,
        __x_ABI_CWindows_CUI_CWindowManagement_CIWindowingEnvironment** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CWindowManagement__CWindowingEnvironmentVtbl;

    interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CWindowManagement__CWindowingEnvironment
    {
        CONST_VTBL struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CWindowManagement__CWindowingEnvironmentVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CWindowManagement__CWindowingEnvironment_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CWindowManagement__CWindowingEnvironment_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CWindowManagement__CWindowingEnvironment_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CWindowManagement__CWindowingEnvironment __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CWindowManagement__CWindowingEnvironment;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CWindowManagement__CWindowingEnvironment;

    typedef struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CWindowManagement__CWindowingEnvironmentVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CWindowManagement__CWindowingEnvironment* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CWindowManagement__CWindowingEnvironment* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CWindowManagement__CWindowingEnvironment* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CWindowManagement__CWindowingEnvironment* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CWindowManagement__CWindowingEnvironment* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CWindowManagement__CWindowingEnvironment* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* First)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CWindowManagement__CWindowingEnvironment* This,
        __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CWindowManagement__CWindowingEnvironment** result);

        END_INTERFACE
    } __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CWindowManagement__CWindowingEnvironmentVtbl;

    interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CWindowManagement__CWindowingEnvironment
    {
        CONST_VTBL struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CWindowManagement__CWindowingEnvironmentVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CWindowManagement__CWindowingEnvironment_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CComposition__CIVisualElement_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CComposition__CIVisualElement_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CComposition__CIVisualElement __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CComposition__CIVisualElement;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CComposition__CIVisualElement;

    typedef struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CComposition__CIVisualElementVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CComposition__CIVisualElement* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CComposition__CIVisualElement* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CComposition__CIVisualElement* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CComposition__CIVisualElement* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CComposition__CIVisualElement* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CComposition__CIVisualElement* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CComposition__CIVisualElement* This,
        UINT32 index,
        __x_ABI_CWindows_CUI_CComposition_CIVisualElement** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CComposition__CIVisualElement* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CComposition__CIVisualElement* This,
        __x_ABI_CWindows_CUI_CComposition_CIVisualElement* value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CComposition__CIVisualElement* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        __x_ABI_CWindows_CUI_CComposition_CIVisualElement** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CComposition__CIVisualElementVtbl;

    interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CComposition__CIVisualElement
    {
        CONST_VTBL struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CComposition__CIVisualElementVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CComposition__CIVisualElement_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CWindowManagement__CAppWindowTitleBarOcclusion_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CWindowManagement__CAppWindowTitleBarOcclusion_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CWindowManagement__CAppWindowTitleBarOcclusion __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CWindowManagement__CAppWindowTitleBarOcclusion;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CWindowManagement__CAppWindowTitleBarOcclusion;

    typedef struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CWindowManagement__CAppWindowTitleBarOcclusionVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CWindowManagement__CAppWindowTitleBarOcclusion* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CWindowManagement__CAppWindowTitleBarOcclusion* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CWindowManagement__CAppWindowTitleBarOcclusion* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CWindowManagement__CAppWindowTitleBarOcclusion* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CWindowManagement__CAppWindowTitleBarOcclusion* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CWindowManagement__CAppWindowTitleBarOcclusion* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CWindowManagement__CAppWindowTitleBarOcclusion* This,
        UINT32 index,
        __x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowTitleBarOcclusion** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CWindowManagement__CAppWindowTitleBarOcclusion* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CWindowManagement__CAppWindowTitleBarOcclusion* This,
        __x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowTitleBarOcclusion* value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CWindowManagement__CAppWindowTitleBarOcclusion* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        __x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowTitleBarOcclusion** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CWindowManagement__CAppWindowTitleBarOcclusionVtbl;

    interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CWindowManagement__CAppWindowTitleBarOcclusion
    {
        CONST_VTBL struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CWindowManagement__CAppWindowTitleBarOcclusionVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CWindowManagement__CAppWindowTitleBarOcclusion_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CWindowManagement__CDisplayRegion_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CWindowManagement__CDisplayRegion_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CWindowManagement__CDisplayRegion __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CWindowManagement__CDisplayRegion;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CWindowManagement__CDisplayRegion;

    typedef struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CWindowManagement__CDisplayRegionVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CWindowManagement__CDisplayRegion* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CWindowManagement__CDisplayRegion* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CWindowManagement__CDisplayRegion* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CWindowManagement__CDisplayRegion* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CWindowManagement__CDisplayRegion* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CWindowManagement__CDisplayRegion* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CWindowManagement__CDisplayRegion* This,
        UINT32 index,
        __x_ABI_CWindows_CUI_CWindowManagement_CIDisplayRegion** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CWindowManagement__CDisplayRegion* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CWindowManagement__CDisplayRegion* This,
        __x_ABI_CWindows_CUI_CWindowManagement_CIDisplayRegion* value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CWindowManagement__CDisplayRegion* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        __x_ABI_CWindows_CUI_CWindowManagement_CIDisplayRegion** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CWindowManagement__CDisplayRegionVtbl;

    interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CWindowManagement__CDisplayRegion
    {
        CONST_VTBL struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CWindowManagement__CDisplayRegionVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CWindowManagement__CDisplayRegion_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CWindowManagement__CWindowingEnvironment_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CWindowManagement__CWindowingEnvironment_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CWindowManagement__CWindowingEnvironment __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CWindowManagement__CWindowingEnvironment;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CWindowManagement__CWindowingEnvironment;

    typedef struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CWindowManagement__CWindowingEnvironmentVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CWindowManagement__CWindowingEnvironment* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CWindowManagement__CWindowingEnvironment* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CWindowManagement__CWindowingEnvironment* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CWindowManagement__CWindowingEnvironment* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CWindowManagement__CWindowingEnvironment* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CWindowManagement__CWindowingEnvironment* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CWindowManagement__CWindowingEnvironment* This,
        UINT32 index,
        __x_ABI_CWindows_CUI_CWindowManagement_CIWindowingEnvironment** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CWindowManagement__CWindowingEnvironment* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CWindowManagement__CWindowingEnvironment* This,
        __x_ABI_CWindows_CUI_CWindowManagement_CIWindowingEnvironment* value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CWindowManagement__CWindowingEnvironment* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        __x_ABI_CWindows_CUI_CWindowManagement_CIWindowingEnvironment** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CWindowManagement__CWindowingEnvironmentVtbl;

    interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CWindowManagement__CWindowingEnvironment
    {
        CONST_VTBL struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CWindowManagement__CWindowingEnvironmentVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CWindowManagement__CWindowingEnvironment_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CComposition__CIVisualElement_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CComposition__CIVisualElement_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CComposition__CIVisualElement __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CComposition__CIVisualElement;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CComposition__CIVisualElement;

    typedef struct __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CComposition__CIVisualElementVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CComposition__CIVisualElement* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CComposition__CIVisualElement* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CComposition__CIVisualElement* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CComposition__CIVisualElement* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CComposition__CIVisualElement* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CComposition__CIVisualElement* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CComposition__CIVisualElement* This,
        UINT32 index,
        __x_ABI_CWindows_CUI_CComposition_CIVisualElement** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CComposition__CIVisualElement* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* GetView)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CComposition__CIVisualElement* This,
        __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CComposition__CIVisualElement** result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CComposition__CIVisualElement* This,
        __x_ABI_CWindows_CUI_CComposition_CIVisualElement* value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* SetAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CComposition__CIVisualElement* This,
        UINT32 index,
        __x_ABI_CWindows_CUI_CComposition_CIVisualElement* value);
    HRESULT (STDMETHODCALLTYPE* InsertAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CComposition__CIVisualElement* This,
        UINT32 index,
        __x_ABI_CWindows_CUI_CComposition_CIVisualElement* value);
    HRESULT (STDMETHODCALLTYPE* RemoveAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CComposition__CIVisualElement* This,
        UINT32 index);
    HRESULT (STDMETHODCALLTYPE* Append)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CComposition__CIVisualElement* This,
        __x_ABI_CWindows_CUI_CComposition_CIVisualElement* value);
    HRESULT (STDMETHODCALLTYPE* RemoveAtEnd)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CComposition__CIVisualElement* This);
    HRESULT (STDMETHODCALLTYPE* Clear)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CComposition__CIVisualElement* This);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CComposition__CIVisualElement* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        __x_ABI_CWindows_CUI_CComposition_CIVisualElement** items,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* ReplaceAll)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CComposition__CIVisualElement* This,
        UINT32 itemsLength,
        __x_ABI_CWindows_CUI_CComposition_CIVisualElement** items);

        END_INTERFACE
    } __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CComposition__CIVisualElementVtbl;

    interface __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CComposition__CIVisualElement
    {
        CONST_VTBL struct __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CComposition__CIVisualElementVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CComposition__CIVisualElement_INTERFACE_DEFINED__
    
typedef struct __x_ABI_CWindows_CUI_CColor __x_ABI_CWindows_CUI_CColor;

#if !defined(____x_ABI_C__FIReference_1___x_ABI_CWindows__CUI__CColor_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIReference_1___x_ABI_CWindows__CUI__CColor_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIReference_1___x_ABI_CWindows__CUI__CColor __x_ABI_C__FIReference_1___x_ABI_CWindows__CUI__CColor;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIReference_1___x_ABI_CWindows__CUI__CColor;

    typedef struct __x_ABI_C__FIReference_1___x_ABI_CWindows__CUI__CColorVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIReference_1___x_ABI_CWindows__CUI__CColor* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIReference_1___x_ABI_CWindows__CUI__CColor* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIReference_1___x_ABI_CWindows__CUI__CColor* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIReference_1___x_ABI_CWindows__CUI__CColor* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIReference_1___x_ABI_CWindows__CUI__CColor* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIReference_1___x_ABI_CWindows__CUI__CColor* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Value)(__x_ABI_C__FIReference_1___x_ABI_CWindows__CUI__CColor* This,
        struct __x_ABI_CWindows_CUI_CColor* result);

        END_INTERFACE
    } __x_ABI_C__FIReference_1___x_ABI_CWindows__CUI__CColorVtbl;

    interface __x_ABI_C__FIReference_1___x_ABI_CWindows__CUI__CColor
    {
        CONST_VTBL struct __x_ABI_C__FIReference_1___x_ABI_CWindows__CUI__CColorVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIReference_1___x_ABI_CWindows__CUI__CColor_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CWindowManagement__CAppWindow___x_ABI_CWindows__CUI__CWindowManagement__CAppWindowChangedEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CWindowManagement__CAppWindow___x_ABI_CWindows__CUI__CWindowManagement__CAppWindowChangedEventArgs_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CWindowManagement__CAppWindow___x_ABI_CWindows__CUI__CWindowManagement__CAppWindowChangedEventArgs __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CWindowManagement__CAppWindow___x_ABI_CWindows__CUI__CWindowManagement__CAppWindowChangedEventArgs;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CWindowManagement__CAppWindow___x_ABI_CWindows__CUI__CWindowManagement__CAppWindowChangedEventArgs;

    typedef struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CWindowManagement__CAppWindow___x_ABI_CWindows__CUI__CWindowManagement__CAppWindowChangedEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CWindowManagement__CAppWindow___x_ABI_CWindows__CUI__CWindowManagement__CAppWindowChangedEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CWindowManagement__CAppWindow___x_ABI_CWindows__CUI__CWindowManagement__CAppWindowChangedEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CWindowManagement__CAppWindow___x_ABI_CWindows__CUI__CWindowManagement__CAppWindowChangedEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CWindowManagement__CAppWindow___x_ABI_CWindows__CUI__CWindowManagement__CAppWindowChangedEventArgs* This,
        __x_ABI_CWindows_CUI_CWindowManagement_CIAppWindow* sender,
        __x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowChangedEventArgs* args);

        END_INTERFACE
    } __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CWindowManagement__CAppWindow___x_ABI_CWindows__CUI__CWindowManagement__CAppWindowChangedEventArgsVtbl;

    interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CWindowManagement__CAppWindow___x_ABI_CWindows__CUI__CWindowManagement__CAppWindowChangedEventArgs
    {
        CONST_VTBL struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CWindowManagement__CAppWindow___x_ABI_CWindows__CUI__CWindowManagement__CAppWindowChangedEventArgsVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CWindowManagement__CAppWindow___x_ABI_CWindows__CUI__CWindowManagement__CAppWindowChangedEventArgs_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CWindowManagement__CAppWindow___x_ABI_CWindows__CUI__CWindowManagement__CAppWindowCloseRequestedEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CWindowManagement__CAppWindow___x_ABI_CWindows__CUI__CWindowManagement__CAppWindowCloseRequestedEventArgs_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CWindowManagement__CAppWindow___x_ABI_CWindows__CUI__CWindowManagement__CAppWindowCloseRequestedEventArgs __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CWindowManagement__CAppWindow___x_ABI_CWindows__CUI__CWindowManagement__CAppWindowCloseRequestedEventArgs;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CWindowManagement__CAppWindow___x_ABI_CWindows__CUI__CWindowManagement__CAppWindowCloseRequestedEventArgs;

    typedef struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CWindowManagement__CAppWindow___x_ABI_CWindows__CUI__CWindowManagement__CAppWindowCloseRequestedEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CWindowManagement__CAppWindow___x_ABI_CWindows__CUI__CWindowManagement__CAppWindowCloseRequestedEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CWindowManagement__CAppWindow___x_ABI_CWindows__CUI__CWindowManagement__CAppWindowCloseRequestedEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CWindowManagement__CAppWindow___x_ABI_CWindows__CUI__CWindowManagement__CAppWindowCloseRequestedEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CWindowManagement__CAppWindow___x_ABI_CWindows__CUI__CWindowManagement__CAppWindowCloseRequestedEventArgs* This,
        __x_ABI_CWindows_CUI_CWindowManagement_CIAppWindow* sender,
        __x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowCloseRequestedEventArgs* args);

        END_INTERFACE
    } __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CWindowManagement__CAppWindow___x_ABI_CWindows__CUI__CWindowManagement__CAppWindowCloseRequestedEventArgsVtbl;

    interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CWindowManagement__CAppWindow___x_ABI_CWindows__CUI__CWindowManagement__CAppWindowCloseRequestedEventArgs
    {
        CONST_VTBL struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CWindowManagement__CAppWindow___x_ABI_CWindows__CUI__CWindowManagement__CAppWindowCloseRequestedEventArgsVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CWindowManagement__CAppWindow___x_ABI_CWindows__CUI__CWindowManagement__CAppWindowCloseRequestedEventArgs_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CWindowManagement__CAppWindow___x_ABI_CWindows__CUI__CWindowManagement__CAppWindowClosedEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CWindowManagement__CAppWindow___x_ABI_CWindows__CUI__CWindowManagement__CAppWindowClosedEventArgs_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CWindowManagement__CAppWindow___x_ABI_CWindows__CUI__CWindowManagement__CAppWindowClosedEventArgs __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CWindowManagement__CAppWindow___x_ABI_CWindows__CUI__CWindowManagement__CAppWindowClosedEventArgs;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CWindowManagement__CAppWindow___x_ABI_CWindows__CUI__CWindowManagement__CAppWindowClosedEventArgs;

    typedef struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CWindowManagement__CAppWindow___x_ABI_CWindows__CUI__CWindowManagement__CAppWindowClosedEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CWindowManagement__CAppWindow___x_ABI_CWindows__CUI__CWindowManagement__CAppWindowClosedEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CWindowManagement__CAppWindow___x_ABI_CWindows__CUI__CWindowManagement__CAppWindowClosedEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CWindowManagement__CAppWindow___x_ABI_CWindows__CUI__CWindowManagement__CAppWindowClosedEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CWindowManagement__CAppWindow___x_ABI_CWindows__CUI__CWindowManagement__CAppWindowClosedEventArgs* This,
        __x_ABI_CWindows_CUI_CWindowManagement_CIAppWindow* sender,
        __x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowClosedEventArgs* args);

        END_INTERFACE
    } __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CWindowManagement__CAppWindow___x_ABI_CWindows__CUI__CWindowManagement__CAppWindowClosedEventArgsVtbl;

    interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CWindowManagement__CAppWindow___x_ABI_CWindows__CUI__CWindowManagement__CAppWindowClosedEventArgs
    {
        CONST_VTBL struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CWindowManagement__CAppWindow___x_ABI_CWindows__CUI__CWindowManagement__CAppWindowClosedEventArgsVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CWindowManagement__CAppWindow___x_ABI_CWindows__CUI__CWindowManagement__CAppWindowClosedEventArgs_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CWindowManagement__CDisplayRegion_IInspectable_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CWindowManagement__CDisplayRegion_IInspectable_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CWindowManagement__CDisplayRegion_IInspectable __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CWindowManagement__CDisplayRegion_IInspectable;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CWindowManagement__CDisplayRegion_IInspectable;

    typedef struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CWindowManagement__CDisplayRegion_IInspectableVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CWindowManagement__CDisplayRegion_IInspectable* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CWindowManagement__CDisplayRegion_IInspectable* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CWindowManagement__CDisplayRegion_IInspectable* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CWindowManagement__CDisplayRegion_IInspectable* This,
        __x_ABI_CWindows_CUI_CWindowManagement_CIDisplayRegion* sender,
        IInspectable* args);

        END_INTERFACE
    } __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CWindowManagement__CDisplayRegion_IInspectableVtbl;

    interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CWindowManagement__CDisplayRegion_IInspectable
    {
        CONST_VTBL struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CWindowManagement__CDisplayRegion_IInspectableVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CWindowManagement__CDisplayRegion_IInspectable_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CWindowManagement__CWindowingEnvironment___x_ABI_CWindows__CUI__CWindowManagement__CWindowingEnvironmentChangedEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CWindowManagement__CWindowingEnvironment___x_ABI_CWindows__CUI__CWindowManagement__CWindowingEnvironmentChangedEventArgs_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CWindowManagement__CWindowingEnvironment___x_ABI_CWindows__CUI__CWindowManagement__CWindowingEnvironmentChangedEventArgs __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CWindowManagement__CWindowingEnvironment___x_ABI_CWindows__CUI__CWindowManagement__CWindowingEnvironmentChangedEventArgs;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CWindowManagement__CWindowingEnvironment___x_ABI_CWindows__CUI__CWindowManagement__CWindowingEnvironmentChangedEventArgs;

    typedef struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CWindowManagement__CWindowingEnvironment___x_ABI_CWindows__CUI__CWindowManagement__CWindowingEnvironmentChangedEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CWindowManagement__CWindowingEnvironment___x_ABI_CWindows__CUI__CWindowManagement__CWindowingEnvironmentChangedEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CWindowManagement__CWindowingEnvironment___x_ABI_CWindows__CUI__CWindowManagement__CWindowingEnvironmentChangedEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CWindowManagement__CWindowingEnvironment___x_ABI_CWindows__CUI__CWindowManagement__CWindowingEnvironmentChangedEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CWindowManagement__CWindowingEnvironment___x_ABI_CWindows__CUI__CWindowManagement__CWindowingEnvironmentChangedEventArgs* This,
        __x_ABI_CWindows_CUI_CWindowManagement_CIWindowingEnvironment* sender,
        __x_ABI_CWindows_CUI_CWindowManagement_CIWindowingEnvironmentChangedEventArgs* args);

        END_INTERFACE
    } __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CWindowManagement__CWindowingEnvironment___x_ABI_CWindows__CUI__CWindowManagement__CWindowingEnvironmentChangedEventArgsVtbl;

    interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CWindowManagement__CWindowingEnvironment___x_ABI_CWindows__CUI__CWindowManagement__CWindowingEnvironmentChangedEventArgs
    {
        CONST_VTBL struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CWindowManagement__CWindowingEnvironment___x_ABI_CWindows__CUI__CWindowManagement__CWindowingEnvironmentChangedEventArgsVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CWindowManagement__CWindowingEnvironment___x_ABI_CWindows__CUI__CWindowManagement__CWindowingEnvironmentChangedEventArgs_INTERFACE_DEFINED__
    
typedef enum __x_ABI_CWindows_CFoundation_CAsyncStatus __x_ABI_CWindows_CFoundation_CAsyncStatus;

#ifndef ____x_ABI_CWindows_CFoundation_CIDeferral_FWD_DEFINED__
#define ____x_ABI_CWindows_CFoundation_CIDeferral_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CFoundation_CIDeferral __x_ABI_CWindows_CFoundation_CIDeferral;

#endif // ____x_ABI_CWindows_CFoundation_CIDeferral_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CFoundation_CIAsyncAction_FWD_DEFINED__
#define ____x_ABI_CWindows_CFoundation_CIAsyncAction_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CFoundation_CIAsyncAction __x_ABI_CWindows_CFoundation_CIAsyncAction;

#endif // ____x_ABI_CWindows_CFoundation_CIAsyncAction_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CFoundation_CIAsyncInfo_FWD_DEFINED__
#define ____x_ABI_CWindows_CFoundation_CIAsyncInfo_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CFoundation_CIAsyncInfo __x_ABI_CWindows_CFoundation_CIAsyncInfo;

#endif // ____x_ABI_CWindows_CFoundation_CIAsyncInfo_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CFoundation_CIPropertyValue_FWD_DEFINED__
#define ____x_ABI_CWindows_CFoundation_CIPropertyValue_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CFoundation_CIPropertyValue __x_ABI_CWindows_CFoundation_CIPropertyValue;

#endif // ____x_ABI_CWindows_CFoundation_CIPropertyValue_FWD_DEFINED__

typedef struct __x_ABI_CWindows_CFoundation_CPoint __x_ABI_CWindows_CFoundation_CPoint;

typedef struct __x_ABI_CWindows_CFoundation_CRect __x_ABI_CWindows_CFoundation_CRect;

typedef struct __x_ABI_CWindows_CFoundation_CSize __x_ABI_CWindows_CFoundation_CSize;

#ifndef ____x_ABI_CWindows_CSystem_CIDispatcherQueue_FWD_DEFINED__
#define ____x_ABI_CWindows_CSystem_CIDispatcherQueue_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CSystem_CIDispatcherQueue __x_ABI_CWindows_CSystem_CIDispatcherQueue;

#endif // ____x_ABI_CWindows_CSystem_CIDispatcherQueue_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CIUIContentRoot_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CIUIContentRoot_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CIUIContentRoot __x_ABI_CWindows_CUI_CIUIContentRoot;

#endif // ____x_ABI_CWindows_CUI_CIUIContentRoot_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CIUIContext_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CIUIContext_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CIUIContext __x_ABI_CWindows_CUI_CIUIContext;

#endif // ____x_ABI_CWindows_CUI_CIUIContext_FWD_DEFINED__

typedef enum __x_ABI_CWindows_CUI_CWindowManagement_CAppWindowClosedReason __x_ABI_CWindows_CUI_CWindowManagement_CAppWindowClosedReason;

typedef enum __x_ABI_CWindows_CUI_CWindowManagement_CAppWindowFrameStyle __x_ABI_CWindows_CUI_CWindowManagement_CAppWindowFrameStyle;

typedef enum __x_ABI_CWindows_CUI_CWindowManagement_CAppWindowPresentationKind __x_ABI_CWindows_CUI_CWindowManagement_CAppWindowPresentationKind;

typedef enum __x_ABI_CWindows_CUI_CWindowManagement_CAppWindowTitleBarVisibility __x_ABI_CWindows_CUI_CWindowManagement_CAppWindowTitleBarVisibility;

typedef enum __x_ABI_CWindows_CUI_CWindowManagement_CWindowingEnvironmentKind __x_ABI_CWindows_CUI_CWindowManagement_CWindowingEnvironmentKind;

enum __x_ABI_CWindows_CUI_CWindowManagement_CAppWindowClosedReason
    {
        __x_ABI_CWindows_CUI_CWindowManagement_CAppWindowClosedReason_Other = 0,
    __x_ABI_CWindows_CUI_CWindowManagement_CAppWindowClosedReason_AppInitiated = 1,
    __x_ABI_CWindows_CUI_CWindowManagement_CAppWindowClosedReason_UserInitiated = 2,
};

enum __x_ABI_CWindows_CUI_CWindowManagement_CAppWindowFrameStyle
    {
        __x_ABI_CWindows_CUI_CWindowManagement_CAppWindowFrameStyle_Default = 0,
    __x_ABI_CWindows_CUI_CWindowManagement_CAppWindowFrameStyle_NoFrame = 1,
};

enum __x_ABI_CWindows_CUI_CWindowManagement_CAppWindowPresentationKind
    {
        __x_ABI_CWindows_CUI_CWindowManagement_CAppWindowPresentationKind_Default = 0,
    __x_ABI_CWindows_CUI_CWindowManagement_CAppWindowPresentationKind_CompactOverlay = 1,
    __x_ABI_CWindows_CUI_CWindowManagement_CAppWindowPresentationKind_FullScreen = 2,
};

enum __x_ABI_CWindows_CUI_CWindowManagement_CAppWindowTitleBarVisibility
    {
        __x_ABI_CWindows_CUI_CWindowManagement_CAppWindowTitleBarVisibility_Default = 0,
    __x_ABI_CWindows_CUI_CWindowManagement_CAppWindowTitleBarVisibility_AlwaysHidden = 1,
};

enum __x_ABI_CWindows_CUI_CWindowManagement_CWindowingEnvironmentKind
    {
        __x_ABI_CWindows_CUI_CWindowManagement_CWindowingEnvironmentKind_Unknown = 0,
    __x_ABI_CWindows_CUI_CWindowManagement_CWindowingEnvironmentKind_Overlapped = 1,
    __x_ABI_CWindows_CUI_CWindowManagement_CWindowingEnvironmentKind_Tiled = 2,
};

#if !defined(____x_ABI_CWindows_CUI_CWindowManagement_CIAppWindow_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CWindowManagement_CIAppWindow_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CWindowManagement_CIAppWindow* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CWindowManagement_CIAppWindow* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CWindowManagement_CIAppWindow* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CWindowManagement_CIAppWindow* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CWindowManagement_CIAppWindow* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CWindowManagement_CIAppWindow* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Content)(__x_ABI_CWindows_CUI_CWindowManagement_CIAppWindow* This,
        __x_ABI_CWindows_CUI_CIUIContentRoot** value);
    HRESULT (STDMETHODCALLTYPE* get_DispatcherQueue)(__x_ABI_CWindows_CUI_CWindowManagement_CIAppWindow* This,
        __x_ABI_CWindows_CSystem_CIDispatcherQueue** value);
    HRESULT (STDMETHODCALLTYPE* get_Frame)(__x_ABI_CWindows_CUI_CWindowManagement_CIAppWindow* This,
        __x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowFrame** value);
    HRESULT (STDMETHODCALLTYPE* get_IsVisible)(__x_ABI_CWindows_CUI_CWindowManagement_CIAppWindow* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* get_PersistedStateId)(__x_ABI_CWindows_CUI_CWindowManagement_CIAppWindow* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* put_PersistedStateId)(__x_ABI_CWindows_CUI_CWindowManagement_CIAppWindow* This,
        HSTRING value);
    HRESULT (STDMETHODCALLTYPE* get_Presenter)(__x_ABI_CWindows_CUI_CWindowManagement_CIAppWindow* This,
        __x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowPresenter** value);
    HRESULT (STDMETHODCALLTYPE* get_Title)(__x_ABI_CWindows_CUI_CWindowManagement_CIAppWindow* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* put_Title)(__x_ABI_CWindows_CUI_CWindowManagement_CIAppWindow* This,
        HSTRING value);
    HRESULT (STDMETHODCALLTYPE* get_TitleBar)(__x_ABI_CWindows_CUI_CWindowManagement_CIAppWindow* This,
        __x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowTitleBar** value);
    HRESULT (STDMETHODCALLTYPE* get_UIContext)(__x_ABI_CWindows_CUI_CWindowManagement_CIAppWindow* This,
        __x_ABI_CWindows_CUI_CIUIContext** value);
    HRESULT (STDMETHODCALLTYPE* get_WindowingEnvironment)(__x_ABI_CWindows_CUI_CWindowManagement_CIAppWindow* This,
        __x_ABI_CWindows_CUI_CWindowManagement_CIWindowingEnvironment** value);
    HRESULT (STDMETHODCALLTYPE* CloseAsync)(__x_ABI_CWindows_CUI_CWindowManagement_CIAppWindow* This,
        __x_ABI_CWindows_CFoundation_CIAsyncAction** operation);
    HRESULT (STDMETHODCALLTYPE* GetPlacement)(__x_ABI_CWindows_CUI_CWindowManagement_CIAppWindow* This,
        __x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowPlacement** result);
    HRESULT (STDMETHODCALLTYPE* GetDisplayRegions)(__x_ABI_CWindows_CUI_CWindowManagement_CIAppWindow* This,
        __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CWindowManagement__CDisplayRegion** result);
    HRESULT (STDMETHODCALLTYPE* RequestMoveToDisplayRegion)(__x_ABI_CWindows_CUI_CWindowManagement_CIAppWindow* This,
        __x_ABI_CWindows_CUI_CWindowManagement_CIDisplayRegion* displayRegion);
    HRESULT (STDMETHODCALLTYPE* RequestMoveAdjacentToCurrentView)(__x_ABI_CWindows_CUI_CWindowManagement_CIAppWindow* This);
    HRESULT (STDMETHODCALLTYPE* RequestMoveAdjacentToWindow)(__x_ABI_CWindows_CUI_CWindowManagement_CIAppWindow* This,
        __x_ABI_CWindows_CUI_CWindowManagement_CIAppWindow* anchorWindow);
    HRESULT (STDMETHODCALLTYPE* RequestMoveRelativeToWindowContent)(__x_ABI_CWindows_CUI_CWindowManagement_CIAppWindow* This,
        __x_ABI_CWindows_CUI_CWindowManagement_CIAppWindow* anchorWindow,
        struct __x_ABI_CWindows_CFoundation_CPoint contentOffset);
    HRESULT (STDMETHODCALLTYPE* RequestMoveRelativeToCurrentViewContent)(__x_ABI_CWindows_CUI_CWindowManagement_CIAppWindow* This,
        struct __x_ABI_CWindows_CFoundation_CPoint contentOffset);
    HRESULT (STDMETHODCALLTYPE* RequestMoveRelativeToDisplayRegion)(__x_ABI_CWindows_CUI_CWindowManagement_CIAppWindow* This,
        __x_ABI_CWindows_CUI_CWindowManagement_CIDisplayRegion* displayRegion,
        struct __x_ABI_CWindows_CFoundation_CPoint displayRegionOffset);
    HRESULT (STDMETHODCALLTYPE* RequestSize)(__x_ABI_CWindows_CUI_CWindowManagement_CIAppWindow* This,
        struct __x_ABI_CWindows_CFoundation_CSize frameSize);
    HRESULT (STDMETHODCALLTYPE* TryShowAsync)(__x_ABI_CWindows_CUI_CWindowManagement_CIAppWindow* This,
        __x_ABI_C__FIAsyncOperation_1_boolean** operation);
    HRESULT (STDMETHODCALLTYPE* add_Changed)(__x_ABI_CWindows_CUI_CWindowManagement_CIAppWindow* This,
        __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CWindowManagement__CAppWindow___x_ABI_CWindows__CUI__CWindowManagement__CAppWindowChangedEventArgs* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_Changed)(__x_ABI_CWindows_CUI_CWindowManagement_CIAppWindow* This,
        EventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* add_Closed)(__x_ABI_CWindows_CUI_CWindowManagement_CIAppWindow* This,
        __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CWindowManagement__CAppWindow___x_ABI_CWindows__CUI__CWindowManagement__CAppWindowClosedEventArgs* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_Closed)(__x_ABI_CWindows_CUI_CWindowManagement_CIAppWindow* This,
        EventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* add_CloseRequested)(__x_ABI_CWindows_CUI_CWindowManagement_CIAppWindow* This,
        __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CWindowManagement__CAppWindow___x_ABI_CWindows__CUI__CWindowManagement__CAppWindowCloseRequestedEventArgs* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_CloseRequested)(__x_ABI_CWindows_CUI_CWindowManagement_CIAppWindow* This,
        EventRegistrationToken token);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowVtbl;

    interface __x_ABI_CWindows_CUI_CWindowManagement_CIAppWindow
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CWindowManagement_CIAppWindow;
#endif /* !defined(____x_ABI_CWindows_CUI_CWindowManagement_CIAppWindow_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowChangedEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowChangedEventArgs_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowChangedEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowChangedEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowChangedEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowChangedEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowChangedEventArgs* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowChangedEventArgs* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowChangedEventArgs* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_DidAvailableWindowPresentationsChange)(__x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowChangedEventArgs* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* get_DidDisplayRegionsChange)(__x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowChangedEventArgs* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* get_DidFrameChange)(__x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowChangedEventArgs* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* get_DidSizeChange)(__x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowChangedEventArgs* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* get_DidTitleBarChange)(__x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowChangedEventArgs* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* get_DidVisibilityChange)(__x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowChangedEventArgs* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* get_DidWindowingEnvironmentChange)(__x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowChangedEventArgs* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* get_DidWindowPresentationChange)(__x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowChangedEventArgs* This,
        boolean* value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowChangedEventArgsVtbl;

    interface __x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowChangedEventArgs
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowChangedEventArgsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowChangedEventArgs;
#endif /* !defined(____x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowChangedEventArgs_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowCloseRequestedEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowCloseRequestedEventArgs_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowCloseRequestedEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowCloseRequestedEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowCloseRequestedEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowCloseRequestedEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowCloseRequestedEventArgs* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowCloseRequestedEventArgs* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowCloseRequestedEventArgs* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Cancel)(__x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowCloseRequestedEventArgs* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* put_Cancel)(__x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowCloseRequestedEventArgs* This,
        boolean value);
    HRESULT (STDMETHODCALLTYPE* GetDeferral)(__x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowCloseRequestedEventArgs* This,
        __x_ABI_CWindows_CFoundation_CIDeferral** result);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowCloseRequestedEventArgsVtbl;

    interface __x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowCloseRequestedEventArgs
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowCloseRequestedEventArgsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowCloseRequestedEventArgs;
#endif /* !defined(____x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowCloseRequestedEventArgs_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowClosedEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowClosedEventArgs_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowClosedEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowClosedEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowClosedEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowClosedEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowClosedEventArgs* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowClosedEventArgs* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowClosedEventArgs* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Reason)(__x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowClosedEventArgs* This,
        enum __x_ABI_CWindows_CUI_CWindowManagement_CAppWindowClosedReason* value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowClosedEventArgsVtbl;

    interface __x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowClosedEventArgs
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowClosedEventArgsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowClosedEventArgs;
#endif /* !defined(____x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowClosedEventArgs_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowFrame_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowFrame_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowFrameVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowFrame* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowFrame* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowFrame* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowFrame* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowFrame* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowFrame* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_DragRegionVisuals)(__x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowFrame* This,
        __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CComposition__CIVisualElement** value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowFrameVtbl;

    interface __x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowFrame
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowFrameVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowFrame;
#endif /* !defined(____x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowFrame_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowFrameStyle_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowFrameStyle_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowFrameStyleVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowFrameStyle* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowFrameStyle* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowFrameStyle* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowFrameStyle* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowFrameStyle* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowFrameStyle* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetFrameStyle)(__x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowFrameStyle* This,
        enum __x_ABI_CWindows_CUI_CWindowManagement_CAppWindowFrameStyle* result);
    HRESULT (STDMETHODCALLTYPE* SetFrameStyle)(__x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowFrameStyle* This,
        enum __x_ABI_CWindows_CUI_CWindowManagement_CAppWindowFrameStyle frameStyle);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowFrameStyleVtbl;

    interface __x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowFrameStyle
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowFrameStyleVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowFrameStyle;
#endif /* !defined(____x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowFrameStyle_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowPlacement_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowPlacement_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowPlacementVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowPlacement* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowPlacement* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowPlacement* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowPlacement* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowPlacement* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowPlacement* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_DisplayRegion)(__x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowPlacement* This,
        __x_ABI_CWindows_CUI_CWindowManagement_CIDisplayRegion** value);
    HRESULT (STDMETHODCALLTYPE* get_Offset)(__x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowPlacement* This,
        struct __x_ABI_CWindows_CFoundation_CPoint* value);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowPlacement* This,
        struct __x_ABI_CWindows_CFoundation_CSize* value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowPlacementVtbl;

    interface __x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowPlacement
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowPlacementVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowPlacement;
#endif /* !defined(____x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowPlacement_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowPresentationConfiguration_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowPresentationConfiguration_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowPresentationConfigurationVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowPresentationConfiguration* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowPresentationConfiguration* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowPresentationConfiguration* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowPresentationConfiguration* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowPresentationConfiguration* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowPresentationConfiguration* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Kind)(__x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowPresentationConfiguration* This,
        enum __x_ABI_CWindows_CUI_CWindowManagement_CAppWindowPresentationKind* value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowPresentationConfigurationVtbl;

    interface __x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowPresentationConfiguration
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowPresentationConfigurationVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowPresentationConfiguration;
#endif /* !defined(____x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowPresentationConfiguration_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowPresentationConfigurationFactory_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowPresentationConfigurationFactory_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowPresentationConfigurationFactoryVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowPresentationConfigurationFactory* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowPresentationConfigurationFactory* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowPresentationConfigurationFactory* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowPresentationConfigurationFactory* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowPresentationConfigurationFactory* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowPresentationConfigurationFactory* This,
            TrustLevel* trustLevel);
    
        END_INTERFACE
    } __x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowPresentationConfigurationFactoryVtbl;

    interface __x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowPresentationConfigurationFactory
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowPresentationConfigurationFactoryVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowPresentationConfigurationFactory;
#endif /* !defined(____x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowPresentationConfigurationFactory_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowPresenter_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowPresenter_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowPresenterVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowPresenter* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowPresenter* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowPresenter* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowPresenter* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowPresenter* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowPresenter* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetConfiguration)(__x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowPresenter* This,
        __x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowPresentationConfiguration** result);
    HRESULT (STDMETHODCALLTYPE* IsPresentationSupported)(__x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowPresenter* This,
        enum __x_ABI_CWindows_CUI_CWindowManagement_CAppWindowPresentationKind presentationKind,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* RequestPresentation)(__x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowPresenter* This,
        __x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowPresentationConfiguration* configuration,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* RequestPresentationByKind)(__x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowPresenter* This,
        enum __x_ABI_CWindows_CUI_CWindowManagement_CAppWindowPresentationKind presentationKind,
        boolean* result);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowPresenterVtbl;

    interface __x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowPresenter
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowPresenterVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowPresenter;
#endif /* !defined(____x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowPresenter_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowStatics_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowStatics_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowStaticsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowStatics* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowStatics* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowStatics* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowStatics* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowStatics* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowStatics* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* TryCreateAsync)(__x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowStatics* This,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CUI__CWindowManagement__CAppWindow** operation);
    HRESULT (STDMETHODCALLTYPE* ClearAllPersistedState)(__x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowStatics* This);
    HRESULT (STDMETHODCALLTYPE* ClearPersistedState)(__x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowStatics* This,
        HSTRING key);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowStaticsVtbl;

    interface __x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowStatics
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowStaticsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowStatics;
#endif /* !defined(____x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowStatics_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowTitleBar_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowTitleBar_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowTitleBarVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowTitleBar* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowTitleBar* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowTitleBar* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowTitleBar* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowTitleBar* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowTitleBar* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_BackgroundColor)(__x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowTitleBar* This,
        __x_ABI_C__FIReference_1___x_ABI_CWindows__CUI__CColor** value);
    HRESULT (STDMETHODCALLTYPE* put_BackgroundColor)(__x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowTitleBar* This,
        __x_ABI_C__FIReference_1___x_ABI_CWindows__CUI__CColor* value);
    HRESULT (STDMETHODCALLTYPE* get_ButtonBackgroundColor)(__x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowTitleBar* This,
        __x_ABI_C__FIReference_1___x_ABI_CWindows__CUI__CColor** value);
    HRESULT (STDMETHODCALLTYPE* put_ButtonBackgroundColor)(__x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowTitleBar* This,
        __x_ABI_C__FIReference_1___x_ABI_CWindows__CUI__CColor* value);
    HRESULT (STDMETHODCALLTYPE* get_ButtonForegroundColor)(__x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowTitleBar* This,
        __x_ABI_C__FIReference_1___x_ABI_CWindows__CUI__CColor** value);
    HRESULT (STDMETHODCALLTYPE* put_ButtonForegroundColor)(__x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowTitleBar* This,
        __x_ABI_C__FIReference_1___x_ABI_CWindows__CUI__CColor* value);
    HRESULT (STDMETHODCALLTYPE* get_ButtonHoverBackgroundColor)(__x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowTitleBar* This,
        __x_ABI_C__FIReference_1___x_ABI_CWindows__CUI__CColor** value);
    HRESULT (STDMETHODCALLTYPE* put_ButtonHoverBackgroundColor)(__x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowTitleBar* This,
        __x_ABI_C__FIReference_1___x_ABI_CWindows__CUI__CColor* value);
    HRESULT (STDMETHODCALLTYPE* get_ButtonHoverForegroundColor)(__x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowTitleBar* This,
        __x_ABI_C__FIReference_1___x_ABI_CWindows__CUI__CColor** value);
    HRESULT (STDMETHODCALLTYPE* put_ButtonHoverForegroundColor)(__x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowTitleBar* This,
        __x_ABI_C__FIReference_1___x_ABI_CWindows__CUI__CColor* value);
    HRESULT (STDMETHODCALLTYPE* get_ButtonInactiveBackgroundColor)(__x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowTitleBar* This,
        __x_ABI_C__FIReference_1___x_ABI_CWindows__CUI__CColor** value);
    HRESULT (STDMETHODCALLTYPE* put_ButtonInactiveBackgroundColor)(__x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowTitleBar* This,
        __x_ABI_C__FIReference_1___x_ABI_CWindows__CUI__CColor* value);
    HRESULT (STDMETHODCALLTYPE* get_ButtonInactiveForegroundColor)(__x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowTitleBar* This,
        __x_ABI_C__FIReference_1___x_ABI_CWindows__CUI__CColor** value);
    HRESULT (STDMETHODCALLTYPE* put_ButtonInactiveForegroundColor)(__x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowTitleBar* This,
        __x_ABI_C__FIReference_1___x_ABI_CWindows__CUI__CColor* value);
    HRESULT (STDMETHODCALLTYPE* get_ButtonPressedBackgroundColor)(__x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowTitleBar* This,
        __x_ABI_C__FIReference_1___x_ABI_CWindows__CUI__CColor** value);
    HRESULT (STDMETHODCALLTYPE* put_ButtonPressedBackgroundColor)(__x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowTitleBar* This,
        __x_ABI_C__FIReference_1___x_ABI_CWindows__CUI__CColor* value);
    HRESULT (STDMETHODCALLTYPE* get_ButtonPressedForegroundColor)(__x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowTitleBar* This,
        __x_ABI_C__FIReference_1___x_ABI_CWindows__CUI__CColor** value);
    HRESULT (STDMETHODCALLTYPE* put_ButtonPressedForegroundColor)(__x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowTitleBar* This,
        __x_ABI_C__FIReference_1___x_ABI_CWindows__CUI__CColor* value);
    HRESULT (STDMETHODCALLTYPE* get_ExtendsContentIntoTitleBar)(__x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowTitleBar* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* put_ExtendsContentIntoTitleBar)(__x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowTitleBar* This,
        boolean value);
    HRESULT (STDMETHODCALLTYPE* get_ForegroundColor)(__x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowTitleBar* This,
        __x_ABI_C__FIReference_1___x_ABI_CWindows__CUI__CColor** value);
    HRESULT (STDMETHODCALLTYPE* put_ForegroundColor)(__x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowTitleBar* This,
        __x_ABI_C__FIReference_1___x_ABI_CWindows__CUI__CColor* value);
    HRESULT (STDMETHODCALLTYPE* get_InactiveBackgroundColor)(__x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowTitleBar* This,
        __x_ABI_C__FIReference_1___x_ABI_CWindows__CUI__CColor** value);
    HRESULT (STDMETHODCALLTYPE* put_InactiveBackgroundColor)(__x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowTitleBar* This,
        __x_ABI_C__FIReference_1___x_ABI_CWindows__CUI__CColor* value);
    HRESULT (STDMETHODCALLTYPE* get_InactiveForegroundColor)(__x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowTitleBar* This,
        __x_ABI_C__FIReference_1___x_ABI_CWindows__CUI__CColor** value);
    HRESULT (STDMETHODCALLTYPE* put_InactiveForegroundColor)(__x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowTitleBar* This,
        __x_ABI_C__FIReference_1___x_ABI_CWindows__CUI__CColor* value);
    HRESULT (STDMETHODCALLTYPE* get_IsVisible)(__x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowTitleBar* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* GetTitleBarOcclusions)(__x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowTitleBar* This,
        __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CWindowManagement__CAppWindowTitleBarOcclusion** result);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowTitleBarVtbl;

    interface __x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowTitleBar
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowTitleBarVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowTitleBar;
#endif /* !defined(____x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowTitleBar_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowTitleBarOcclusion_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowTitleBarOcclusion_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowTitleBarOcclusionVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowTitleBarOcclusion* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowTitleBarOcclusion* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowTitleBarOcclusion* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowTitleBarOcclusion* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowTitleBarOcclusion* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowTitleBarOcclusion* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_OccludingRect)(__x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowTitleBarOcclusion* This,
        struct __x_ABI_CWindows_CFoundation_CRect* value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowTitleBarOcclusionVtbl;

    interface __x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowTitleBarOcclusion
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowTitleBarOcclusionVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowTitleBarOcclusion;
#endif /* !defined(____x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowTitleBarOcclusion_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowTitleBarVisibility_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowTitleBarVisibility_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowTitleBarVisibilityVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowTitleBarVisibility* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowTitleBarVisibility* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowTitleBarVisibility* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowTitleBarVisibility* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowTitleBarVisibility* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowTitleBarVisibility* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetPreferredVisibility)(__x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowTitleBarVisibility* This,
        enum __x_ABI_CWindows_CUI_CWindowManagement_CAppWindowTitleBarVisibility* result);
    HRESULT (STDMETHODCALLTYPE* SetPreferredVisibility)(__x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowTitleBarVisibility* This,
        enum __x_ABI_CWindows_CUI_CWindowManagement_CAppWindowTitleBarVisibility visibilityMode);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowTitleBarVisibilityVtbl;

    interface __x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowTitleBarVisibility
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowTitleBarVisibilityVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowTitleBarVisibility;
#endif /* !defined(____x_ABI_CWindows_CUI_CWindowManagement_CIAppWindowTitleBarVisibility_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CWindowManagement_CICompactOverlayPresentationConfiguration_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CWindowManagement_CICompactOverlayPresentationConfiguration_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CWindowManagement_CICompactOverlayPresentationConfigurationVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CWindowManagement_CICompactOverlayPresentationConfiguration* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CWindowManagement_CICompactOverlayPresentationConfiguration* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CWindowManagement_CICompactOverlayPresentationConfiguration* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CWindowManagement_CICompactOverlayPresentationConfiguration* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CWindowManagement_CICompactOverlayPresentationConfiguration* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CWindowManagement_CICompactOverlayPresentationConfiguration* This,
            TrustLevel* trustLevel);
    
        END_INTERFACE
    } __x_ABI_CWindows_CUI_CWindowManagement_CICompactOverlayPresentationConfigurationVtbl;

    interface __x_ABI_CWindows_CUI_CWindowManagement_CICompactOverlayPresentationConfiguration
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CWindowManagement_CICompactOverlayPresentationConfigurationVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CWindowManagement_CICompactOverlayPresentationConfiguration;
#endif /* !defined(____x_ABI_CWindows_CUI_CWindowManagement_CICompactOverlayPresentationConfiguration_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CWindowManagement_CIDefaultPresentationConfiguration_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CWindowManagement_CIDefaultPresentationConfiguration_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CWindowManagement_CIDefaultPresentationConfigurationVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CWindowManagement_CIDefaultPresentationConfiguration* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CWindowManagement_CIDefaultPresentationConfiguration* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CWindowManagement_CIDefaultPresentationConfiguration* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CWindowManagement_CIDefaultPresentationConfiguration* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CWindowManagement_CIDefaultPresentationConfiguration* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CWindowManagement_CIDefaultPresentationConfiguration* This,
            TrustLevel* trustLevel);
    
        END_INTERFACE
    } __x_ABI_CWindows_CUI_CWindowManagement_CIDefaultPresentationConfigurationVtbl;

    interface __x_ABI_CWindows_CUI_CWindowManagement_CIDefaultPresentationConfiguration
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CWindowManagement_CIDefaultPresentationConfigurationVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CWindowManagement_CIDefaultPresentationConfiguration;
#endif /* !defined(____x_ABI_CWindows_CUI_CWindowManagement_CIDefaultPresentationConfiguration_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CWindowManagement_CIDisplayRegion_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CWindowManagement_CIDisplayRegion_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CWindowManagement_CIDisplayRegionVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CWindowManagement_CIDisplayRegion* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CWindowManagement_CIDisplayRegion* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CWindowManagement_CIDisplayRegion* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CWindowManagement_CIDisplayRegion* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CWindowManagement_CIDisplayRegion* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CWindowManagement_CIDisplayRegion* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_DisplayMonitorDeviceId)(__x_ABI_CWindows_CUI_CWindowManagement_CIDisplayRegion* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_IsVisible)(__x_ABI_CWindows_CUI_CWindowManagement_CIDisplayRegion* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* get_WorkAreaOffset)(__x_ABI_CWindows_CUI_CWindowManagement_CIDisplayRegion* This,
        struct __x_ABI_CWindows_CFoundation_CPoint* value);
    HRESULT (STDMETHODCALLTYPE* get_WorkAreaSize)(__x_ABI_CWindows_CUI_CWindowManagement_CIDisplayRegion* This,
        struct __x_ABI_CWindows_CFoundation_CSize* value);
    HRESULT (STDMETHODCALLTYPE* get_WindowingEnvironment)(__x_ABI_CWindows_CUI_CWindowManagement_CIDisplayRegion* This,
        __x_ABI_CWindows_CUI_CWindowManagement_CIWindowingEnvironment** value);
    HRESULT (STDMETHODCALLTYPE* add_Changed)(__x_ABI_CWindows_CUI_CWindowManagement_CIDisplayRegion* This,
        __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CWindowManagement__CDisplayRegion_IInspectable* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_Changed)(__x_ABI_CWindows_CUI_CWindowManagement_CIDisplayRegion* This,
        EventRegistrationToken token);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CWindowManagement_CIDisplayRegionVtbl;

    interface __x_ABI_CWindows_CUI_CWindowManagement_CIDisplayRegion
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CWindowManagement_CIDisplayRegionVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CWindowManagement_CIDisplayRegion;
#endif /* !defined(____x_ABI_CWindows_CUI_CWindowManagement_CIDisplayRegion_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CWindowManagement_CIFullScreenPresentationConfiguration_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CWindowManagement_CIFullScreenPresentationConfiguration_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CWindowManagement_CIFullScreenPresentationConfigurationVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CWindowManagement_CIFullScreenPresentationConfiguration* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CWindowManagement_CIFullScreenPresentationConfiguration* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CWindowManagement_CIFullScreenPresentationConfiguration* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CWindowManagement_CIFullScreenPresentationConfiguration* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CWindowManagement_CIFullScreenPresentationConfiguration* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CWindowManagement_CIFullScreenPresentationConfiguration* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_IsExclusive)(__x_ABI_CWindows_CUI_CWindowManagement_CIFullScreenPresentationConfiguration* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* put_IsExclusive)(__x_ABI_CWindows_CUI_CWindowManagement_CIFullScreenPresentationConfiguration* This,
        boolean value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CWindowManagement_CIFullScreenPresentationConfigurationVtbl;

    interface __x_ABI_CWindows_CUI_CWindowManagement_CIFullScreenPresentationConfiguration
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CWindowManagement_CIFullScreenPresentationConfigurationVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CWindowManagement_CIFullScreenPresentationConfiguration;
#endif /* !defined(____x_ABI_CWindows_CUI_CWindowManagement_CIFullScreenPresentationConfiguration_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CWindowManagement_CIWindowingEnvironment_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CWindowManagement_CIWindowingEnvironment_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CWindowManagement_CIWindowingEnvironmentVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CWindowManagement_CIWindowingEnvironment* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CWindowManagement_CIWindowingEnvironment* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CWindowManagement_CIWindowingEnvironment* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CWindowManagement_CIWindowingEnvironment* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CWindowManagement_CIWindowingEnvironment* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CWindowManagement_CIWindowingEnvironment* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_IsEnabled)(__x_ABI_CWindows_CUI_CWindowManagement_CIWindowingEnvironment* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* get_Kind)(__x_ABI_CWindows_CUI_CWindowManagement_CIWindowingEnvironment* This,
        enum __x_ABI_CWindows_CUI_CWindowManagement_CWindowingEnvironmentKind* value);
    HRESULT (STDMETHODCALLTYPE* GetDisplayRegions)(__x_ABI_CWindows_CUI_CWindowManagement_CIWindowingEnvironment* This,
        __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CWindowManagement__CDisplayRegion** result);
    HRESULT (STDMETHODCALLTYPE* add_Changed)(__x_ABI_CWindows_CUI_CWindowManagement_CIWindowingEnvironment* This,
        __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CWindowManagement__CWindowingEnvironment___x_ABI_CWindows__CUI__CWindowManagement__CWindowingEnvironmentChangedEventArgs* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_Changed)(__x_ABI_CWindows_CUI_CWindowManagement_CIWindowingEnvironment* This,
        EventRegistrationToken token);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CWindowManagement_CIWindowingEnvironmentVtbl;

    interface __x_ABI_CWindows_CUI_CWindowManagement_CIWindowingEnvironment
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CWindowManagement_CIWindowingEnvironmentVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CWindowManagement_CIWindowingEnvironment;
#endif /* !defined(____x_ABI_CWindows_CUI_CWindowManagement_CIWindowingEnvironment_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CWindowManagement_CIWindowingEnvironmentAddedEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CWindowManagement_CIWindowingEnvironmentAddedEventArgs_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CWindowManagement_CIWindowingEnvironmentAddedEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CWindowManagement_CIWindowingEnvironmentAddedEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CWindowManagement_CIWindowingEnvironmentAddedEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CWindowManagement_CIWindowingEnvironmentAddedEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CWindowManagement_CIWindowingEnvironmentAddedEventArgs* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CWindowManagement_CIWindowingEnvironmentAddedEventArgs* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CWindowManagement_CIWindowingEnvironmentAddedEventArgs* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_WindowingEnvironment)(__x_ABI_CWindows_CUI_CWindowManagement_CIWindowingEnvironmentAddedEventArgs* This,
        __x_ABI_CWindows_CUI_CWindowManagement_CIWindowingEnvironment** value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CWindowManagement_CIWindowingEnvironmentAddedEventArgsVtbl;

    interface __x_ABI_CWindows_CUI_CWindowManagement_CIWindowingEnvironmentAddedEventArgs
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CWindowManagement_CIWindowingEnvironmentAddedEventArgsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CWindowManagement_CIWindowingEnvironmentAddedEventArgs;
#endif /* !defined(____x_ABI_CWindows_CUI_CWindowManagement_CIWindowingEnvironmentAddedEventArgs_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CWindowManagement_CIWindowingEnvironmentChangedEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CWindowManagement_CIWindowingEnvironmentChangedEventArgs_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CWindowManagement_CIWindowingEnvironmentChangedEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CWindowManagement_CIWindowingEnvironmentChangedEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CWindowManagement_CIWindowingEnvironmentChangedEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CWindowManagement_CIWindowingEnvironmentChangedEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CWindowManagement_CIWindowingEnvironmentChangedEventArgs* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CWindowManagement_CIWindowingEnvironmentChangedEventArgs* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CWindowManagement_CIWindowingEnvironmentChangedEventArgs* This,
            TrustLevel* trustLevel);
    
        END_INTERFACE
    } __x_ABI_CWindows_CUI_CWindowManagement_CIWindowingEnvironmentChangedEventArgsVtbl;

    interface __x_ABI_CWindows_CUI_CWindowManagement_CIWindowingEnvironmentChangedEventArgs
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CWindowManagement_CIWindowingEnvironmentChangedEventArgsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CWindowManagement_CIWindowingEnvironmentChangedEventArgs;
#endif /* !defined(____x_ABI_CWindows_CUI_CWindowManagement_CIWindowingEnvironmentChangedEventArgs_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CWindowManagement_CIWindowingEnvironmentRemovedEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CWindowManagement_CIWindowingEnvironmentRemovedEventArgs_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CWindowManagement_CIWindowingEnvironmentRemovedEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CWindowManagement_CIWindowingEnvironmentRemovedEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CWindowManagement_CIWindowingEnvironmentRemovedEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CWindowManagement_CIWindowingEnvironmentRemovedEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CWindowManagement_CIWindowingEnvironmentRemovedEventArgs* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CWindowManagement_CIWindowingEnvironmentRemovedEventArgs* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CWindowManagement_CIWindowingEnvironmentRemovedEventArgs* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_WindowingEnvironment)(__x_ABI_CWindows_CUI_CWindowManagement_CIWindowingEnvironmentRemovedEventArgs* This,
        __x_ABI_CWindows_CUI_CWindowManagement_CIWindowingEnvironment** value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CWindowManagement_CIWindowingEnvironmentRemovedEventArgsVtbl;

    interface __x_ABI_CWindows_CUI_CWindowManagement_CIWindowingEnvironmentRemovedEventArgs
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CWindowManagement_CIWindowingEnvironmentRemovedEventArgsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CWindowManagement_CIWindowingEnvironmentRemovedEventArgs;
#endif /* !defined(____x_ABI_CWindows_CUI_CWindowManagement_CIWindowingEnvironmentRemovedEventArgs_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CWindowManagement_CIWindowingEnvironmentStatics_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CWindowManagement_CIWindowingEnvironmentStatics_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CWindowManagement_CIWindowingEnvironmentStaticsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CWindowManagement_CIWindowingEnvironmentStatics* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CWindowManagement_CIWindowingEnvironmentStatics* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CWindowManagement_CIWindowingEnvironmentStatics* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CWindowManagement_CIWindowingEnvironmentStatics* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CWindowManagement_CIWindowingEnvironmentStatics* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CWindowManagement_CIWindowingEnvironmentStatics* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* FindAll)(__x_ABI_CWindows_CUI_CWindowManagement_CIWindowingEnvironmentStatics* This,
        __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CWindowManagement__CWindowingEnvironment** result);
    HRESULT (STDMETHODCALLTYPE* FindAllWithKind)(__x_ABI_CWindows_CUI_CWindowManagement_CIWindowingEnvironmentStatics* This,
        enum __x_ABI_CWindows_CUI_CWindowManagement_CWindowingEnvironmentKind kind,
        __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CWindowManagement__CWindowingEnvironment** result);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CWindowManagement_CIWindowingEnvironmentStaticsVtbl;

    interface __x_ABI_CWindows_CUI_CWindowManagement_CIWindowingEnvironmentStatics
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CWindowManagement_CIWindowingEnvironmentStaticsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CWindowManagement_CIWindowingEnvironmentStatics;
#endif /* !defined(____x_ABI_CWindows_CUI_CWindowManagement_CIWindowingEnvironmentStatics_INTERFACE_DEFINED__) */
    

// WARNING: Please don't edit this file. It was generated by Swift/WinRT v0.0.1

#pragma once
// Header files for imported files
#include <inspectable.h>
#include <EventToken.h>
#include <windowscontracts.h>
#include "Windows.Foundation.h"
#include "Windows.System.h"
#include "Windows.UI.h"
#include "Windows.UI.Input.h"
#include "Windows.UI.Popups.h"
// Importing Collections header
#include "Windows.Foundation.Collections.h"

/* Forward Declarations */
#ifndef ____x_ABI_CWindows_CUI_CCore_CIDispatchedHandler_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CCore_CIDispatchedHandler_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CUI_CCore_CIDispatchedHandler __x_ABI_CWindows_CUI_CCore_CIDispatchedHandler;

#endif // ____x_ABI_CWindows_CUI_CCore_CIDispatchedHandler_FWD_DEFINED__

    #ifndef ____x_ABI_CWindows_CUI_CCore_CIIdleDispatchedHandler_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CCore_CIIdleDispatchedHandler_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CUI_CCore_CIIdleDispatchedHandler __x_ABI_CWindows_CUI_CCore_CIIdleDispatchedHandler;

#endif // ____x_ABI_CWindows_CUI_CCore_CIIdleDispatchedHandler_FWD_DEFINED__

    #ifndef ____x_ABI_CWindows_CUI_CCore_CIAcceleratorKeyEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CCore_CIAcceleratorKeyEventArgs_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CCore_CIAcceleratorKeyEventArgs __x_ABI_CWindows_CUI_CCore_CIAcceleratorKeyEventArgs;

#endif // ____x_ABI_CWindows_CUI_CCore_CIAcceleratorKeyEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CCore_CIAcceleratorKeyEventArgs2_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CCore_CIAcceleratorKeyEventArgs2_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CCore_CIAcceleratorKeyEventArgs2 __x_ABI_CWindows_CUI_CCore_CIAcceleratorKeyEventArgs2;

#endif // ____x_ABI_CWindows_CUI_CCore_CIAcceleratorKeyEventArgs2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CCore_CIAutomationProviderRequestedEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CCore_CIAutomationProviderRequestedEventArgs_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CCore_CIAutomationProviderRequestedEventArgs __x_ABI_CWindows_CUI_CCore_CIAutomationProviderRequestedEventArgs;

#endif // ____x_ABI_CWindows_CUI_CCore_CIAutomationProviderRequestedEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CCore_CIBackRequestedEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CCore_CIBackRequestedEventArgs_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CCore_CIBackRequestedEventArgs __x_ABI_CWindows_CUI_CCore_CIBackRequestedEventArgs;

#endif // ____x_ABI_CWindows_CUI_CCore_CIBackRequestedEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CCore_CICharacterReceivedEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CCore_CICharacterReceivedEventArgs_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CCore_CICharacterReceivedEventArgs __x_ABI_CWindows_CUI_CCore_CICharacterReceivedEventArgs;

#endif // ____x_ABI_CWindows_CUI_CCore_CICharacterReceivedEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CCore_CIClosestInteractiveBoundsRequestedEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CCore_CIClosestInteractiveBoundsRequestedEventArgs_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CCore_CIClosestInteractiveBoundsRequestedEventArgs __x_ABI_CWindows_CUI_CCore_CIClosestInteractiveBoundsRequestedEventArgs;

#endif // ____x_ABI_CWindows_CUI_CCore_CIClosestInteractiveBoundsRequestedEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CCore_CICoreAcceleratorKeys_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CCore_CICoreAcceleratorKeys_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CCore_CICoreAcceleratorKeys __x_ABI_CWindows_CUI_CCore_CICoreAcceleratorKeys;

#endif // ____x_ABI_CWindows_CUI_CCore_CICoreAcceleratorKeys_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CCore_CICoreClosestInteractiveBoundsRequested_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CCore_CICoreClosestInteractiveBoundsRequested_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CCore_CICoreClosestInteractiveBoundsRequested __x_ABI_CWindows_CUI_CCore_CICoreClosestInteractiveBoundsRequested;

#endif // ____x_ABI_CWindows_CUI_CCore_CICoreClosestInteractiveBoundsRequested_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CCore_CICoreComponentFocusable_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CCore_CICoreComponentFocusable_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CCore_CICoreComponentFocusable __x_ABI_CWindows_CUI_CCore_CICoreComponentFocusable;

#endif // ____x_ABI_CWindows_CUI_CCore_CICoreComponentFocusable_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CCore_CICoreCursor_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CCore_CICoreCursor_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CCore_CICoreCursor __x_ABI_CWindows_CUI_CCore_CICoreCursor;

#endif // ____x_ABI_CWindows_CUI_CCore_CICoreCursor_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CCore_CICoreCursorFactory_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CCore_CICoreCursorFactory_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CCore_CICoreCursorFactory __x_ABI_CWindows_CUI_CCore_CICoreCursorFactory;

#endif // ____x_ABI_CWindows_CUI_CCore_CICoreCursorFactory_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CCore_CICoreDispatcher_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CCore_CICoreDispatcher_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CCore_CICoreDispatcher __x_ABI_CWindows_CUI_CCore_CICoreDispatcher;

#endif // ____x_ABI_CWindows_CUI_CCore_CICoreDispatcher_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CCore_CICoreDispatcher2_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CCore_CICoreDispatcher2_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CCore_CICoreDispatcher2 __x_ABI_CWindows_CUI_CCore_CICoreDispatcher2;

#endif // ____x_ABI_CWindows_CUI_CCore_CICoreDispatcher2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CCore_CICoreDispatcherWithTaskPriority_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CCore_CICoreDispatcherWithTaskPriority_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CCore_CICoreDispatcherWithTaskPriority __x_ABI_CWindows_CUI_CCore_CICoreDispatcherWithTaskPriority;

#endif // ____x_ABI_CWindows_CUI_CCore_CICoreDispatcherWithTaskPriority_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CCore_CICoreInputSourceBase_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CCore_CICoreInputSourceBase_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CCore_CICoreInputSourceBase __x_ABI_CWindows_CUI_CCore_CICoreInputSourceBase;

#endif // ____x_ABI_CWindows_CUI_CCore_CICoreInputSourceBase_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CCore_CICoreKeyboardInputSource_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CCore_CICoreKeyboardInputSource_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CCore_CICoreKeyboardInputSource __x_ABI_CWindows_CUI_CCore_CICoreKeyboardInputSource;

#endif // ____x_ABI_CWindows_CUI_CCore_CICoreKeyboardInputSource_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CCore_CICoreKeyboardInputSource2_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CCore_CICoreKeyboardInputSource2_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CCore_CICoreKeyboardInputSource2 __x_ABI_CWindows_CUI_CCore_CICoreKeyboardInputSource2;

#endif // ____x_ABI_CWindows_CUI_CCore_CICoreKeyboardInputSource2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CCore_CICorePointerInputSource_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CCore_CICorePointerInputSource_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CCore_CICorePointerInputSource __x_ABI_CWindows_CUI_CCore_CICorePointerInputSource;

#endif // ____x_ABI_CWindows_CUI_CCore_CICorePointerInputSource_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CCore_CICorePointerInputSource2_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CCore_CICorePointerInputSource2_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CCore_CICorePointerInputSource2 __x_ABI_CWindows_CUI_CCore_CICorePointerInputSource2;

#endif // ____x_ABI_CWindows_CUI_CCore_CICorePointerInputSource2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CCore_CICorePointerRedirector_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CCore_CICorePointerRedirector_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CCore_CICorePointerRedirector __x_ABI_CWindows_CUI_CCore_CICorePointerRedirector;

#endif // ____x_ABI_CWindows_CUI_CCore_CICorePointerRedirector_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CCore_CICoreTouchHitTesting_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CCore_CICoreTouchHitTesting_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CCore_CICoreTouchHitTesting __x_ABI_CWindows_CUI_CCore_CICoreTouchHitTesting;

#endif // ____x_ABI_CWindows_CUI_CCore_CICoreTouchHitTesting_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CCore_CICoreWindow_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CCore_CICoreWindow_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CCore_CICoreWindow __x_ABI_CWindows_CUI_CCore_CICoreWindow;

#endif // ____x_ABI_CWindows_CUI_CCore_CICoreWindow_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CCore_CICoreWindow2_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CCore_CICoreWindow2_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CCore_CICoreWindow2 __x_ABI_CWindows_CUI_CCore_CICoreWindow2;

#endif // ____x_ABI_CWindows_CUI_CCore_CICoreWindow2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CCore_CICoreWindow3_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CCore_CICoreWindow3_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CCore_CICoreWindow3 __x_ABI_CWindows_CUI_CCore_CICoreWindow3;

#endif // ____x_ABI_CWindows_CUI_CCore_CICoreWindow3_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CCore_CICoreWindow4_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CCore_CICoreWindow4_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CCore_CICoreWindow4 __x_ABI_CWindows_CUI_CCore_CICoreWindow4;

#endif // ____x_ABI_CWindows_CUI_CCore_CICoreWindow4_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CCore_CICoreWindow5_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CCore_CICoreWindow5_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CCore_CICoreWindow5 __x_ABI_CWindows_CUI_CCore_CICoreWindow5;

#endif // ____x_ABI_CWindows_CUI_CCore_CICoreWindow5_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CCore_CICoreWindowDialog_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CCore_CICoreWindowDialog_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CCore_CICoreWindowDialog __x_ABI_CWindows_CUI_CCore_CICoreWindowDialog;

#endif // ____x_ABI_CWindows_CUI_CCore_CICoreWindowDialog_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CCore_CICoreWindowDialogFactory_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CCore_CICoreWindowDialogFactory_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CCore_CICoreWindowDialogFactory __x_ABI_CWindows_CUI_CCore_CICoreWindowDialogFactory;

#endif // ____x_ABI_CWindows_CUI_CCore_CICoreWindowDialogFactory_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CCore_CICoreWindowEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CCore_CICoreWindowEventArgs_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CCore_CICoreWindowEventArgs __x_ABI_CWindows_CUI_CCore_CICoreWindowEventArgs;

#endif // ____x_ABI_CWindows_CUI_CCore_CICoreWindowEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CCore_CICoreWindowFlyout_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CCore_CICoreWindowFlyout_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CCore_CICoreWindowFlyout __x_ABI_CWindows_CUI_CCore_CICoreWindowFlyout;

#endif // ____x_ABI_CWindows_CUI_CCore_CICoreWindowFlyout_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CCore_CICoreWindowFlyoutFactory_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CCore_CICoreWindowFlyoutFactory_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CCore_CICoreWindowFlyoutFactory __x_ABI_CWindows_CUI_CCore_CICoreWindowFlyoutFactory;

#endif // ____x_ABI_CWindows_CUI_CCore_CICoreWindowFlyoutFactory_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CCore_CICoreWindowPopupShowingEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CCore_CICoreWindowPopupShowingEventArgs_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CCore_CICoreWindowPopupShowingEventArgs __x_ABI_CWindows_CUI_CCore_CICoreWindowPopupShowingEventArgs;

#endif // ____x_ABI_CWindows_CUI_CCore_CICoreWindowPopupShowingEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CCore_CICoreWindowResizeManager_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CCore_CICoreWindowResizeManager_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CCore_CICoreWindowResizeManager __x_ABI_CWindows_CUI_CCore_CICoreWindowResizeManager;

#endif // ____x_ABI_CWindows_CUI_CCore_CICoreWindowResizeManager_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CCore_CICoreWindowResizeManagerLayoutCapability_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CCore_CICoreWindowResizeManagerLayoutCapability_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CCore_CICoreWindowResizeManagerLayoutCapability __x_ABI_CWindows_CUI_CCore_CICoreWindowResizeManagerLayoutCapability;

#endif // ____x_ABI_CWindows_CUI_CCore_CICoreWindowResizeManagerLayoutCapability_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CCore_CICoreWindowResizeManagerStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CCore_CICoreWindowResizeManagerStatics_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CCore_CICoreWindowResizeManagerStatics __x_ABI_CWindows_CUI_CCore_CICoreWindowResizeManagerStatics;

#endif // ____x_ABI_CWindows_CUI_CCore_CICoreWindowResizeManagerStatics_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CCore_CICoreWindowStatic_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CCore_CICoreWindowStatic_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CCore_CICoreWindowStatic __x_ABI_CWindows_CUI_CCore_CICoreWindowStatic;

#endif // ____x_ABI_CWindows_CUI_CCore_CICoreWindowStatic_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CCore_CICoreWindowWithContext_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CCore_CICoreWindowWithContext_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CCore_CICoreWindowWithContext __x_ABI_CWindows_CUI_CCore_CICoreWindowWithContext;

#endif // ____x_ABI_CWindows_CUI_CCore_CICoreWindowWithContext_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CCore_CIIdleDispatchedHandlerArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CCore_CIIdleDispatchedHandlerArgs_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CCore_CIIdleDispatchedHandlerArgs __x_ABI_CWindows_CUI_CCore_CIIdleDispatchedHandlerArgs;

#endif // ____x_ABI_CWindows_CUI_CCore_CIIdleDispatchedHandlerArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CCore_CIInitializeWithCoreWindow_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CCore_CIInitializeWithCoreWindow_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CCore_CIInitializeWithCoreWindow __x_ABI_CWindows_CUI_CCore_CIInitializeWithCoreWindow;

#endif // ____x_ABI_CWindows_CUI_CCore_CIInitializeWithCoreWindow_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CCore_CIInputEnabledEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CCore_CIInputEnabledEventArgs_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CCore_CIInputEnabledEventArgs __x_ABI_CWindows_CUI_CCore_CIInputEnabledEventArgs;

#endif // ____x_ABI_CWindows_CUI_CCore_CIInputEnabledEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CCore_CIKeyEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CCore_CIKeyEventArgs_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CCore_CIKeyEventArgs __x_ABI_CWindows_CUI_CCore_CIKeyEventArgs;

#endif // ____x_ABI_CWindows_CUI_CCore_CIKeyEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CCore_CIKeyEventArgs2_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CCore_CIKeyEventArgs2_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CCore_CIKeyEventArgs2 __x_ABI_CWindows_CUI_CCore_CIKeyEventArgs2;

#endif // ____x_ABI_CWindows_CUI_CCore_CIKeyEventArgs2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CCore_CIPointerEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CCore_CIPointerEventArgs_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CCore_CIPointerEventArgs __x_ABI_CWindows_CUI_CCore_CIPointerEventArgs;

#endif // ____x_ABI_CWindows_CUI_CCore_CIPointerEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CCore_CISystemNavigationManager_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CCore_CISystemNavigationManager_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CCore_CISystemNavigationManager __x_ABI_CWindows_CUI_CCore_CISystemNavigationManager;

#endif // ____x_ABI_CWindows_CUI_CCore_CISystemNavigationManager_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CCore_CISystemNavigationManager2_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CCore_CISystemNavigationManager2_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CCore_CISystemNavigationManager2 __x_ABI_CWindows_CUI_CCore_CISystemNavigationManager2;

#endif // ____x_ABI_CWindows_CUI_CCore_CISystemNavigationManager2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CCore_CISystemNavigationManagerStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CCore_CISystemNavigationManagerStatics_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CCore_CISystemNavigationManagerStatics __x_ABI_CWindows_CUI_CCore_CISystemNavigationManagerStatics;

#endif // ____x_ABI_CWindows_CUI_CCore_CISystemNavigationManagerStatics_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CCore_CITouchHitTestingEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CCore_CITouchHitTestingEventArgs_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CCore_CITouchHitTestingEventArgs __x_ABI_CWindows_CUI_CCore_CITouchHitTestingEventArgs;

#endif // ____x_ABI_CWindows_CUI_CCore_CITouchHitTestingEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CCore_CIVisibilityChangedEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CCore_CIVisibilityChangedEventArgs_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CCore_CIVisibilityChangedEventArgs __x_ABI_CWindows_CUI_CCore_CIVisibilityChangedEventArgs;

#endif // ____x_ABI_CWindows_CUI_CCore_CIVisibilityChangedEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CCore_CIWindowActivatedEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CCore_CIWindowActivatedEventArgs_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CCore_CIWindowActivatedEventArgs __x_ABI_CWindows_CUI_CCore_CIWindowActivatedEventArgs;

#endif // ____x_ABI_CWindows_CUI_CCore_CIWindowActivatedEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CCore_CIWindowSizeChangedEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CCore_CIWindowSizeChangedEventArgs_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CCore_CIWindowSizeChangedEventArgs __x_ABI_CWindows_CUI_CCore_CIWindowSizeChangedEventArgs;

#endif // ____x_ABI_CWindows_CUI_CCore_CIWindowSizeChangedEventArgs_FWD_DEFINED__

// Parameterized interface forward declarations (C)

// Collection interface definitions

typedef interface __x_ABI_C__FIAsyncOperationCompletedHandler_1_boolean __x_ABI_C__FIAsyncOperationCompletedHandler_1_boolean;

#if !defined(____x_ABI_C__FIAsyncOperation_1_boolean_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperation_1_boolean_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperation_1_boolean __x_ABI_C__FIAsyncOperation_1_boolean;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperation_1_boolean;

    typedef struct __x_ABI_C__FIAsyncOperation_1_booleanVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperation_1_boolean* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperation_1_boolean* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperation_1_boolean* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIAsyncOperation_1_boolean* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIAsyncOperation_1_boolean* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIAsyncOperation_1_boolean* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* put_Completed)(__x_ABI_C__FIAsyncOperation_1_boolean* This,
        __x_ABI_C__FIAsyncOperationCompletedHandler_1_boolean* handler);
    HRESULT (STDMETHODCALLTYPE* get_Completed)(__x_ABI_C__FIAsyncOperation_1_boolean* This,
        __x_ABI_C__FIAsyncOperationCompletedHandler_1_boolean** result);
    HRESULT (STDMETHODCALLTYPE* GetResults)(__x_ABI_C__FIAsyncOperation_1_boolean* This,
        boolean* result);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperation_1_booleanVtbl;

    interface __x_ABI_C__FIAsyncOperation_1_boolean
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperation_1_booleanVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperation_1_boolean_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIAsyncOperationCompletedHandler_1_boolean_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperationCompletedHandler_1_boolean_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperationCompletedHandler_1_boolean __x_ABI_C__FIAsyncOperationCompletedHandler_1_boolean;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperationCompletedHandler_1_boolean;

    typedef struct __x_ABI_C__FIAsyncOperationCompletedHandler_1_booleanVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperationCompletedHandler_1_boolean* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperationCompletedHandler_1_boolean* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperationCompletedHandler_1_boolean* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FIAsyncOperationCompletedHandler_1_boolean* This,
        __x_ABI_C__FIAsyncOperation_1_boolean* asyncInfo,
        enum __x_ABI_CWindows_CFoundation_CAsyncStatus asyncStatus);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperationCompletedHandler_1_booleanVtbl;

    interface __x_ABI_C__FIAsyncOperationCompletedHandler_1_boolean
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperationCompletedHandler_1_booleanVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperationCompletedHandler_1_boolean_INTERFACE_DEFINED__
    
#ifndef ____x_ABI_CWindows_CUI_CPopups_CIUICommand_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CPopups_CIUICommand_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CPopups_CIUICommand __x_ABI_CWindows_CUI_CPopups_CIUICommand;

#endif // ____x_ABI_CWindows_CUI_CPopups_CIUICommand_FWD_DEFINED__

typedef interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CUI__CPopups__CIUICommand __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CUI__CPopups__CIUICommand;

#if !defined(____x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CUI__CPopups__CIUICommand_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CUI__CPopups__CIUICommand_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CUI__CPopups__CIUICommand __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CUI__CPopups__CIUICommand;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CUI__CPopups__CIUICommand;

    typedef struct __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CUI__CPopups__CIUICommandVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CUI__CPopups__CIUICommand* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CUI__CPopups__CIUICommand* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CUI__CPopups__CIUICommand* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CUI__CPopups__CIUICommand* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CUI__CPopups__CIUICommand* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CUI__CPopups__CIUICommand* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* put_Completed)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CUI__CPopups__CIUICommand* This,
        __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CUI__CPopups__CIUICommand* handler);
    HRESULT (STDMETHODCALLTYPE* get_Completed)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CUI__CPopups__CIUICommand* This,
        __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CUI__CPopups__CIUICommand** result);
    HRESULT (STDMETHODCALLTYPE* GetResults)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CUI__CPopups__CIUICommand* This,
        __x_ABI_CWindows_CUI_CPopups_CIUICommand** result);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CUI__CPopups__CIUICommandVtbl;

    interface __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CUI__CPopups__CIUICommand
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CUI__CPopups__CIUICommandVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CUI__CPopups__CIUICommand_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CUI__CPopups__CIUICommand_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CUI__CPopups__CIUICommand_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CUI__CPopups__CIUICommand __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CUI__CPopups__CIUICommand;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CUI__CPopups__CIUICommand;

    typedef struct __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CUI__CPopups__CIUICommandVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CUI__CPopups__CIUICommand* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CUI__CPopups__CIUICommand* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CUI__CPopups__CIUICommand* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CUI__CPopups__CIUICommand* This,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CUI__CPopups__CIUICommand* asyncInfo,
        enum __x_ABI_CWindows_CFoundation_CAsyncStatus asyncStatus);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CUI__CPopups__CIUICommandVtbl;

    interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CUI__CPopups__CIUICommand
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CUI__CPopups__CIUICommandVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CUI__CPopups__CIUICommand_INTERFACE_DEFINED__
    
#ifndef ____x_ABI_CWindows_CUI_CInput_CIPointerPoint_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CInput_CIPointerPoint_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CInput_CIPointerPoint __x_ABI_CWindows_CUI_CInput_CIPointerPoint;

#endif // ____x_ABI_CWindows_CUI_CInput_CIPointerPoint_FWD_DEFINED__

#if !defined(____x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CInput__CPointerPoint_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CInput__CPointerPoint_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CInput__CPointerPoint __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CInput__CPointerPoint;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CInput__CPointerPoint;

    typedef struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CInput__CPointerPointVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CInput__CPointerPoint* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CInput__CPointerPoint* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CInput__CPointerPoint* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CInput__CPointerPoint* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CInput__CPointerPoint* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CInput__CPointerPoint* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Current)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CInput__CPointerPoint* This,
        __x_ABI_CWindows_CUI_CInput_CIPointerPoint** result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CInput__CPointerPoint* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CInput__CPointerPoint* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CInput__CPointerPoint* This,
        UINT32 itemsLength,
        __x_ABI_CWindows_CUI_CInput_CIPointerPoint** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CInput__CPointerPointVtbl;

    interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CInput__CPointerPoint
    {
        CONST_VTBL struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CInput__CPointerPointVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CInput__CPointerPoint_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CInput__CPointerPoint_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CInput__CPointerPoint_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CInput__CPointerPoint __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CInput__CPointerPoint;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CInput__CPointerPoint;

    typedef struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CInput__CPointerPointVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CInput__CPointerPoint* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CInput__CPointerPoint* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CInput__CPointerPoint* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CInput__CPointerPoint* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CInput__CPointerPoint* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CInput__CPointerPoint* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* First)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CInput__CPointerPoint* This,
        __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CInput__CPointerPoint** result);

        END_INTERFACE
    } __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CInput__CPointerPointVtbl;

    interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CInput__CPointerPoint
    {
        CONST_VTBL struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CInput__CPointerPointVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CInput__CPointerPoint_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CPopups__CIUICommand_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CPopups__CIUICommand_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CPopups__CIUICommand __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CPopups__CIUICommand;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CPopups__CIUICommand;

    typedef struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CPopups__CIUICommandVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CPopups__CIUICommand* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CPopups__CIUICommand* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CPopups__CIUICommand* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CPopups__CIUICommand* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CPopups__CIUICommand* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CPopups__CIUICommand* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Current)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CPopups__CIUICommand* This,
        __x_ABI_CWindows_CUI_CPopups_CIUICommand** result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CPopups__CIUICommand* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CPopups__CIUICommand* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CPopups__CIUICommand* This,
        UINT32 itemsLength,
        __x_ABI_CWindows_CUI_CPopups_CIUICommand** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CPopups__CIUICommandVtbl;

    interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CPopups__CIUICommand
    {
        CONST_VTBL struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CPopups__CIUICommandVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CPopups__CIUICommand_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CPopups__CIUICommand_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CPopups__CIUICommand_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CPopups__CIUICommand __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CPopups__CIUICommand;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CPopups__CIUICommand;

    typedef struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CPopups__CIUICommandVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CPopups__CIUICommand* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CPopups__CIUICommand* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CPopups__CIUICommand* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CPopups__CIUICommand* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CPopups__CIUICommand* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CPopups__CIUICommand* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* First)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CPopups__CIUICommand* This,
        __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CPopups__CIUICommand** result);

        END_INTERFACE
    } __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CPopups__CIUICommandVtbl;

    interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CPopups__CIUICommand
    {
        CONST_VTBL struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CPopups__CIUICommandVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CPopups__CIUICommand_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CPointerPoint_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CPointerPoint_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CPointerPoint __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CPointerPoint;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CPointerPoint;

    typedef struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CPointerPointVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CPointerPoint* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CPointerPoint* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CPointerPoint* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CPointerPoint* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CPointerPoint* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CPointerPoint* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CPointerPoint* This,
        UINT32 index,
        __x_ABI_CWindows_CUI_CInput_CIPointerPoint** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CPointerPoint* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CPointerPoint* This,
        __x_ABI_CWindows_CUI_CInput_CIPointerPoint* value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CPointerPoint* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        __x_ABI_CWindows_CUI_CInput_CIPointerPoint** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CPointerPointVtbl;

    interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CPointerPoint
    {
        CONST_VTBL struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CPointerPointVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CPointerPoint_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CPopups__CIUICommand_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CPopups__CIUICommand_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CPopups__CIUICommand __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CPopups__CIUICommand;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CPopups__CIUICommand;

    typedef struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CPopups__CIUICommandVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CPopups__CIUICommand* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CPopups__CIUICommand* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CPopups__CIUICommand* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CPopups__CIUICommand* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CPopups__CIUICommand* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CPopups__CIUICommand* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CPopups__CIUICommand* This,
        UINT32 index,
        __x_ABI_CWindows_CUI_CPopups_CIUICommand** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CPopups__CIUICommand* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CPopups__CIUICommand* This,
        __x_ABI_CWindows_CUI_CPopups_CIUICommand* value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CPopups__CIUICommand* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        __x_ABI_CWindows_CUI_CPopups_CIUICommand** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CPopups__CIUICommandVtbl;

    interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CPopups__CIUICommand
    {
        CONST_VTBL struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CPopups__CIUICommandVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CPopups__CIUICommand_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CInput__CPointerPoint_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CInput__CPointerPoint_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CInput__CPointerPoint __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CInput__CPointerPoint;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CInput__CPointerPoint;

    typedef struct __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CInput__CPointerPointVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CInput__CPointerPoint* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CInput__CPointerPoint* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CInput__CPointerPoint* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CInput__CPointerPoint* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CInput__CPointerPoint* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CInput__CPointerPoint* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CInput__CPointerPoint* This,
        UINT32 index,
        __x_ABI_CWindows_CUI_CInput_CIPointerPoint** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CInput__CPointerPoint* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* GetView)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CInput__CPointerPoint* This,
        __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CPointerPoint** result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CInput__CPointerPoint* This,
        __x_ABI_CWindows_CUI_CInput_CIPointerPoint* value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* SetAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CInput__CPointerPoint* This,
        UINT32 index,
        __x_ABI_CWindows_CUI_CInput_CIPointerPoint* value);
    HRESULT (STDMETHODCALLTYPE* InsertAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CInput__CPointerPoint* This,
        UINT32 index,
        __x_ABI_CWindows_CUI_CInput_CIPointerPoint* value);
    HRESULT (STDMETHODCALLTYPE* RemoveAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CInput__CPointerPoint* This,
        UINT32 index);
    HRESULT (STDMETHODCALLTYPE* Append)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CInput__CPointerPoint* This,
        __x_ABI_CWindows_CUI_CInput_CIPointerPoint* value);
    HRESULT (STDMETHODCALLTYPE* RemoveAtEnd)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CInput__CPointerPoint* This);
    HRESULT (STDMETHODCALLTYPE* Clear)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CInput__CPointerPoint* This);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CInput__CPointerPoint* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        __x_ABI_CWindows_CUI_CInput_CIPointerPoint** items,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* ReplaceAll)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CInput__CPointerPoint* This,
        UINT32 itemsLength,
        __x_ABI_CWindows_CUI_CInput_CIPointerPoint** items);

        END_INTERFACE
    } __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CInput__CPointerPointVtbl;

    interface __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CInput__CPointerPoint
    {
        CONST_VTBL struct __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CInput__CPointerPointVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CInput__CPointerPoint_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CPopups__CIUICommand_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CPopups__CIUICommand_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CPopups__CIUICommand __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CPopups__CIUICommand;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CPopups__CIUICommand;

    typedef struct __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CPopups__CIUICommandVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CPopups__CIUICommand* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CPopups__CIUICommand* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CPopups__CIUICommand* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CPopups__CIUICommand* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CPopups__CIUICommand* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CPopups__CIUICommand* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CPopups__CIUICommand* This,
        UINT32 index,
        __x_ABI_CWindows_CUI_CPopups_CIUICommand** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CPopups__CIUICommand* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* GetView)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CPopups__CIUICommand* This,
        __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CPopups__CIUICommand** result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CPopups__CIUICommand* This,
        __x_ABI_CWindows_CUI_CPopups_CIUICommand* value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* SetAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CPopups__CIUICommand* This,
        UINT32 index,
        __x_ABI_CWindows_CUI_CPopups_CIUICommand* value);
    HRESULT (STDMETHODCALLTYPE* InsertAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CPopups__CIUICommand* This,
        UINT32 index,
        __x_ABI_CWindows_CUI_CPopups_CIUICommand* value);
    HRESULT (STDMETHODCALLTYPE* RemoveAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CPopups__CIUICommand* This,
        UINT32 index);
    HRESULT (STDMETHODCALLTYPE* Append)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CPopups__CIUICommand* This,
        __x_ABI_CWindows_CUI_CPopups_CIUICommand* value);
    HRESULT (STDMETHODCALLTYPE* RemoveAtEnd)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CPopups__CIUICommand* This);
    HRESULT (STDMETHODCALLTYPE* Clear)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CPopups__CIUICommand* This);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CPopups__CIUICommand* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        __x_ABI_CWindows_CUI_CPopups_CIUICommand** items,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* ReplaceAll)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CPopups__CIUICommand* This,
        UINT32 itemsLength,
        __x_ABI_CWindows_CUI_CPopups_CIUICommand** items);

        END_INTERFACE
    } __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CPopups__CIUICommandVtbl;

    interface __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CPopups__CIUICommand
    {
        CONST_VTBL struct __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CPopups__CIUICommandVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CPopups__CIUICommand_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIEventHandler_1___x_ABI_CWindows__CUI__CCore__CBackRequestedEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIEventHandler_1___x_ABI_CWindows__CUI__CCore__CBackRequestedEventArgs_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIEventHandler_1___x_ABI_CWindows__CUI__CCore__CBackRequestedEventArgs __x_ABI_C__FIEventHandler_1___x_ABI_CWindows__CUI__CCore__CBackRequestedEventArgs;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIEventHandler_1___x_ABI_CWindows__CUI__CCore__CBackRequestedEventArgs;

    typedef struct __x_ABI_C__FIEventHandler_1___x_ABI_CWindows__CUI__CCore__CBackRequestedEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIEventHandler_1___x_ABI_CWindows__CUI__CCore__CBackRequestedEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIEventHandler_1___x_ABI_CWindows__CUI__CCore__CBackRequestedEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIEventHandler_1___x_ABI_CWindows__CUI__CCore__CBackRequestedEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FIEventHandler_1___x_ABI_CWindows__CUI__CCore__CBackRequestedEventArgs* This,
        IInspectable* sender,
        __x_ABI_CWindows_CUI_CCore_CIBackRequestedEventArgs* args);

        END_INTERFACE
    } __x_ABI_C__FIEventHandler_1___x_ABI_CWindows__CUI__CCore__CBackRequestedEventArgsVtbl;

    interface __x_ABI_C__FIEventHandler_1___x_ABI_CWindows__CUI__CCore__CBackRequestedEventArgs
    {
        CONST_VTBL struct __x_ABI_C__FIEventHandler_1___x_ABI_CWindows__CUI__CCore__CBackRequestedEventArgsVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIEventHandler_1___x_ABI_CWindows__CUI__CCore__CBackRequestedEventArgs_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FITypedEventHandler_2_IInspectable___x_ABI_CWindows__CUI__CCore__CCharacterReceivedEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FITypedEventHandler_2_IInspectable___x_ABI_CWindows__CUI__CCore__CCharacterReceivedEventArgs_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FITypedEventHandler_2_IInspectable___x_ABI_CWindows__CUI__CCore__CCharacterReceivedEventArgs __x_ABI_C__FITypedEventHandler_2_IInspectable___x_ABI_CWindows__CUI__CCore__CCharacterReceivedEventArgs;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FITypedEventHandler_2_IInspectable___x_ABI_CWindows__CUI__CCore__CCharacterReceivedEventArgs;

    typedef struct __x_ABI_C__FITypedEventHandler_2_IInspectable___x_ABI_CWindows__CUI__CCore__CCharacterReceivedEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FITypedEventHandler_2_IInspectable___x_ABI_CWindows__CUI__CCore__CCharacterReceivedEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FITypedEventHandler_2_IInspectable___x_ABI_CWindows__CUI__CCore__CCharacterReceivedEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FITypedEventHandler_2_IInspectable___x_ABI_CWindows__CUI__CCore__CCharacterReceivedEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FITypedEventHandler_2_IInspectable___x_ABI_CWindows__CUI__CCore__CCharacterReceivedEventArgs* This,
        IInspectable* sender,
        __x_ABI_CWindows_CUI_CCore_CICharacterReceivedEventArgs* args);

        END_INTERFACE
    } __x_ABI_C__FITypedEventHandler_2_IInspectable___x_ABI_CWindows__CUI__CCore__CCharacterReceivedEventArgsVtbl;

    interface __x_ABI_C__FITypedEventHandler_2_IInspectable___x_ABI_CWindows__CUI__CCore__CCharacterReceivedEventArgs
    {
        CONST_VTBL struct __x_ABI_C__FITypedEventHandler_2_IInspectable___x_ABI_CWindows__CUI__CCore__CCharacterReceivedEventArgsVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FITypedEventHandler_2_IInspectable___x_ABI_CWindows__CUI__CCore__CCharacterReceivedEventArgs_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FITypedEventHandler_2_IInspectable___x_ABI_CWindows__CUI__CCore__CCoreWindowEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FITypedEventHandler_2_IInspectable___x_ABI_CWindows__CUI__CCore__CCoreWindowEventArgs_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FITypedEventHandler_2_IInspectable___x_ABI_CWindows__CUI__CCore__CCoreWindowEventArgs __x_ABI_C__FITypedEventHandler_2_IInspectable___x_ABI_CWindows__CUI__CCore__CCoreWindowEventArgs;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FITypedEventHandler_2_IInspectable___x_ABI_CWindows__CUI__CCore__CCoreWindowEventArgs;

    typedef struct __x_ABI_C__FITypedEventHandler_2_IInspectable___x_ABI_CWindows__CUI__CCore__CCoreWindowEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FITypedEventHandler_2_IInspectable___x_ABI_CWindows__CUI__CCore__CCoreWindowEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FITypedEventHandler_2_IInspectable___x_ABI_CWindows__CUI__CCore__CCoreWindowEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FITypedEventHandler_2_IInspectable___x_ABI_CWindows__CUI__CCore__CCoreWindowEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FITypedEventHandler_2_IInspectable___x_ABI_CWindows__CUI__CCore__CCoreWindowEventArgs* This,
        IInspectable* sender,
        __x_ABI_CWindows_CUI_CCore_CICoreWindowEventArgs* args);

        END_INTERFACE
    } __x_ABI_C__FITypedEventHandler_2_IInspectable___x_ABI_CWindows__CUI__CCore__CCoreWindowEventArgsVtbl;

    interface __x_ABI_C__FITypedEventHandler_2_IInspectable___x_ABI_CWindows__CUI__CCore__CCoreWindowEventArgs
    {
        CONST_VTBL struct __x_ABI_C__FITypedEventHandler_2_IInspectable___x_ABI_CWindows__CUI__CCore__CCoreWindowEventArgsVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FITypedEventHandler_2_IInspectable___x_ABI_CWindows__CUI__CCore__CCoreWindowEventArgs_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FITypedEventHandler_2_IInspectable___x_ABI_CWindows__CUI__CCore__CInputEnabledEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FITypedEventHandler_2_IInspectable___x_ABI_CWindows__CUI__CCore__CInputEnabledEventArgs_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FITypedEventHandler_2_IInspectable___x_ABI_CWindows__CUI__CCore__CInputEnabledEventArgs __x_ABI_C__FITypedEventHandler_2_IInspectable___x_ABI_CWindows__CUI__CCore__CInputEnabledEventArgs;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FITypedEventHandler_2_IInspectable___x_ABI_CWindows__CUI__CCore__CInputEnabledEventArgs;

    typedef struct __x_ABI_C__FITypedEventHandler_2_IInspectable___x_ABI_CWindows__CUI__CCore__CInputEnabledEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FITypedEventHandler_2_IInspectable___x_ABI_CWindows__CUI__CCore__CInputEnabledEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FITypedEventHandler_2_IInspectable___x_ABI_CWindows__CUI__CCore__CInputEnabledEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FITypedEventHandler_2_IInspectable___x_ABI_CWindows__CUI__CCore__CInputEnabledEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FITypedEventHandler_2_IInspectable___x_ABI_CWindows__CUI__CCore__CInputEnabledEventArgs* This,
        IInspectable* sender,
        __x_ABI_CWindows_CUI_CCore_CIInputEnabledEventArgs* args);

        END_INTERFACE
    } __x_ABI_C__FITypedEventHandler_2_IInspectable___x_ABI_CWindows__CUI__CCore__CInputEnabledEventArgsVtbl;

    interface __x_ABI_C__FITypedEventHandler_2_IInspectable___x_ABI_CWindows__CUI__CCore__CInputEnabledEventArgs
    {
        CONST_VTBL struct __x_ABI_C__FITypedEventHandler_2_IInspectable___x_ABI_CWindows__CUI__CCore__CInputEnabledEventArgsVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FITypedEventHandler_2_IInspectable___x_ABI_CWindows__CUI__CCore__CInputEnabledEventArgs_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FITypedEventHandler_2_IInspectable___x_ABI_CWindows__CUI__CCore__CKeyEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FITypedEventHandler_2_IInspectable___x_ABI_CWindows__CUI__CCore__CKeyEventArgs_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FITypedEventHandler_2_IInspectable___x_ABI_CWindows__CUI__CCore__CKeyEventArgs __x_ABI_C__FITypedEventHandler_2_IInspectable___x_ABI_CWindows__CUI__CCore__CKeyEventArgs;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FITypedEventHandler_2_IInspectable___x_ABI_CWindows__CUI__CCore__CKeyEventArgs;

    typedef struct __x_ABI_C__FITypedEventHandler_2_IInspectable___x_ABI_CWindows__CUI__CCore__CKeyEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FITypedEventHandler_2_IInspectable___x_ABI_CWindows__CUI__CCore__CKeyEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FITypedEventHandler_2_IInspectable___x_ABI_CWindows__CUI__CCore__CKeyEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FITypedEventHandler_2_IInspectable___x_ABI_CWindows__CUI__CCore__CKeyEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FITypedEventHandler_2_IInspectable___x_ABI_CWindows__CUI__CCore__CKeyEventArgs* This,
        IInspectable* sender,
        __x_ABI_CWindows_CUI_CCore_CIKeyEventArgs* args);

        END_INTERFACE
    } __x_ABI_C__FITypedEventHandler_2_IInspectable___x_ABI_CWindows__CUI__CCore__CKeyEventArgsVtbl;

    interface __x_ABI_C__FITypedEventHandler_2_IInspectable___x_ABI_CWindows__CUI__CCore__CKeyEventArgs
    {
        CONST_VTBL struct __x_ABI_C__FITypedEventHandler_2_IInspectable___x_ABI_CWindows__CUI__CCore__CKeyEventArgsVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FITypedEventHandler_2_IInspectable___x_ABI_CWindows__CUI__CCore__CKeyEventArgs_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FITypedEventHandler_2_IInspectable___x_ABI_CWindows__CUI__CCore__CPointerEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FITypedEventHandler_2_IInspectable___x_ABI_CWindows__CUI__CCore__CPointerEventArgs_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FITypedEventHandler_2_IInspectable___x_ABI_CWindows__CUI__CCore__CPointerEventArgs __x_ABI_C__FITypedEventHandler_2_IInspectable___x_ABI_CWindows__CUI__CCore__CPointerEventArgs;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FITypedEventHandler_2_IInspectable___x_ABI_CWindows__CUI__CCore__CPointerEventArgs;

    typedef struct __x_ABI_C__FITypedEventHandler_2_IInspectable___x_ABI_CWindows__CUI__CCore__CPointerEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FITypedEventHandler_2_IInspectable___x_ABI_CWindows__CUI__CCore__CPointerEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FITypedEventHandler_2_IInspectable___x_ABI_CWindows__CUI__CCore__CPointerEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FITypedEventHandler_2_IInspectable___x_ABI_CWindows__CUI__CCore__CPointerEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FITypedEventHandler_2_IInspectable___x_ABI_CWindows__CUI__CCore__CPointerEventArgs* This,
        IInspectable* sender,
        __x_ABI_CWindows_CUI_CCore_CIPointerEventArgs* args);

        END_INTERFACE
    } __x_ABI_C__FITypedEventHandler_2_IInspectable___x_ABI_CWindows__CUI__CCore__CPointerEventArgsVtbl;

    interface __x_ABI_C__FITypedEventHandler_2_IInspectable___x_ABI_CWindows__CUI__CCore__CPointerEventArgs
    {
        CONST_VTBL struct __x_ABI_C__FITypedEventHandler_2_IInspectable___x_ABI_CWindows__CUI__CCore__CPointerEventArgsVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FITypedEventHandler_2_IInspectable___x_ABI_CWindows__CUI__CCore__CPointerEventArgs_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FITypedEventHandler_2_IInspectable___x_ABI_CWindows__CUI__CCore__CTouchHitTestingEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FITypedEventHandler_2_IInspectable___x_ABI_CWindows__CUI__CCore__CTouchHitTestingEventArgs_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FITypedEventHandler_2_IInspectable___x_ABI_CWindows__CUI__CCore__CTouchHitTestingEventArgs __x_ABI_C__FITypedEventHandler_2_IInspectable___x_ABI_CWindows__CUI__CCore__CTouchHitTestingEventArgs;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FITypedEventHandler_2_IInspectable___x_ABI_CWindows__CUI__CCore__CTouchHitTestingEventArgs;

    typedef struct __x_ABI_C__FITypedEventHandler_2_IInspectable___x_ABI_CWindows__CUI__CCore__CTouchHitTestingEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FITypedEventHandler_2_IInspectable___x_ABI_CWindows__CUI__CCore__CTouchHitTestingEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FITypedEventHandler_2_IInspectable___x_ABI_CWindows__CUI__CCore__CTouchHitTestingEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FITypedEventHandler_2_IInspectable___x_ABI_CWindows__CUI__CCore__CTouchHitTestingEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FITypedEventHandler_2_IInspectable___x_ABI_CWindows__CUI__CCore__CTouchHitTestingEventArgs* This,
        IInspectable* sender,
        __x_ABI_CWindows_CUI_CCore_CITouchHitTestingEventArgs* args);

        END_INTERFACE
    } __x_ABI_C__FITypedEventHandler_2_IInspectable___x_ABI_CWindows__CUI__CCore__CTouchHitTestingEventArgsVtbl;

    interface __x_ABI_C__FITypedEventHandler_2_IInspectable___x_ABI_CWindows__CUI__CCore__CTouchHitTestingEventArgs
    {
        CONST_VTBL struct __x_ABI_C__FITypedEventHandler_2_IInspectable___x_ABI_CWindows__CUI__CCore__CTouchHitTestingEventArgsVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FITypedEventHandler_2_IInspectable___x_ABI_CWindows__CUI__CCore__CTouchHitTestingEventArgs_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreComponentInputSource___x_ABI_CWindows__CUI__CCore__CClosestInteractiveBoundsRequestedEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreComponentInputSource___x_ABI_CWindows__CUI__CCore__CClosestInteractiveBoundsRequestedEventArgs_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreComponentInputSource___x_ABI_CWindows__CUI__CCore__CClosestInteractiveBoundsRequestedEventArgs __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreComponentInputSource___x_ABI_CWindows__CUI__CCore__CClosestInteractiveBoundsRequestedEventArgs;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreComponentInputSource___x_ABI_CWindows__CUI__CCore__CClosestInteractiveBoundsRequestedEventArgs;

    typedef struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreComponentInputSource___x_ABI_CWindows__CUI__CCore__CClosestInteractiveBoundsRequestedEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreComponentInputSource___x_ABI_CWindows__CUI__CCore__CClosestInteractiveBoundsRequestedEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreComponentInputSource___x_ABI_CWindows__CUI__CCore__CClosestInteractiveBoundsRequestedEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreComponentInputSource___x_ABI_CWindows__CUI__CCore__CClosestInteractiveBoundsRequestedEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreComponentInputSource___x_ABI_CWindows__CUI__CCore__CClosestInteractiveBoundsRequestedEventArgs* This,
        __x_ABI_CWindows_CUI_CCore_CICoreInputSourceBase* sender,
        __x_ABI_CWindows_CUI_CCore_CIClosestInteractiveBoundsRequestedEventArgs* args);

        END_INTERFACE
    } __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreComponentInputSource___x_ABI_CWindows__CUI__CCore__CClosestInteractiveBoundsRequestedEventArgsVtbl;

    interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreComponentInputSource___x_ABI_CWindows__CUI__CCore__CClosestInteractiveBoundsRequestedEventArgs
    {
        CONST_VTBL struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreComponentInputSource___x_ABI_CWindows__CUI__CCore__CClosestInteractiveBoundsRequestedEventArgsVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreComponentInputSource___x_ABI_CWindows__CUI__CCore__CClosestInteractiveBoundsRequestedEventArgs_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreDispatcher___x_ABI_CWindows__CUI__CCore__CAcceleratorKeyEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreDispatcher___x_ABI_CWindows__CUI__CCore__CAcceleratorKeyEventArgs_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreDispatcher___x_ABI_CWindows__CUI__CCore__CAcceleratorKeyEventArgs __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreDispatcher___x_ABI_CWindows__CUI__CCore__CAcceleratorKeyEventArgs;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreDispatcher___x_ABI_CWindows__CUI__CCore__CAcceleratorKeyEventArgs;

    typedef struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreDispatcher___x_ABI_CWindows__CUI__CCore__CAcceleratorKeyEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreDispatcher___x_ABI_CWindows__CUI__CCore__CAcceleratorKeyEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreDispatcher___x_ABI_CWindows__CUI__CCore__CAcceleratorKeyEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreDispatcher___x_ABI_CWindows__CUI__CCore__CAcceleratorKeyEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreDispatcher___x_ABI_CWindows__CUI__CCore__CAcceleratorKeyEventArgs* This,
        __x_ABI_CWindows_CUI_CCore_CICoreDispatcher* sender,
        __x_ABI_CWindows_CUI_CCore_CIAcceleratorKeyEventArgs* args);

        END_INTERFACE
    } __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreDispatcher___x_ABI_CWindows__CUI__CCore__CAcceleratorKeyEventArgsVtbl;

    interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreDispatcher___x_ABI_CWindows__CUI__CCore__CAcceleratorKeyEventArgs
    {
        CONST_VTBL struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreDispatcher___x_ABI_CWindows__CUI__CCore__CAcceleratorKeyEventArgsVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreDispatcher___x_ABI_CWindows__CUI__CCore__CAcceleratorKeyEventArgs_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow_IInspectable_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow_IInspectable_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow_IInspectable __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow_IInspectable;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow_IInspectable;

    typedef struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow_IInspectableVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow_IInspectable* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow_IInspectable* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow_IInspectable* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow_IInspectable* This,
        __x_ABI_CWindows_CUI_CCore_CICoreWindow* sender,
        IInspectable* args);

        END_INTERFACE
    } __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow_IInspectableVtbl;

    interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow_IInspectable
    {
        CONST_VTBL struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow_IInspectableVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow_IInspectable_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CAutomationProviderRequestedEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CAutomationProviderRequestedEventArgs_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CAutomationProviderRequestedEventArgs __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CAutomationProviderRequestedEventArgs;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CAutomationProviderRequestedEventArgs;

    typedef struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CAutomationProviderRequestedEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CAutomationProviderRequestedEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CAutomationProviderRequestedEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CAutomationProviderRequestedEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CAutomationProviderRequestedEventArgs* This,
        __x_ABI_CWindows_CUI_CCore_CICoreWindow* sender,
        __x_ABI_CWindows_CUI_CCore_CIAutomationProviderRequestedEventArgs* args);

        END_INTERFACE
    } __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CAutomationProviderRequestedEventArgsVtbl;

    interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CAutomationProviderRequestedEventArgs
    {
        CONST_VTBL struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CAutomationProviderRequestedEventArgsVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CAutomationProviderRequestedEventArgs_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CCharacterReceivedEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CCharacterReceivedEventArgs_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CCharacterReceivedEventArgs __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CCharacterReceivedEventArgs;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CCharacterReceivedEventArgs;

    typedef struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CCharacterReceivedEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CCharacterReceivedEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CCharacterReceivedEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CCharacterReceivedEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CCharacterReceivedEventArgs* This,
        __x_ABI_CWindows_CUI_CCore_CICoreWindow* sender,
        __x_ABI_CWindows_CUI_CCore_CICharacterReceivedEventArgs* args);

        END_INTERFACE
    } __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CCharacterReceivedEventArgsVtbl;

    interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CCharacterReceivedEventArgs
    {
        CONST_VTBL struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CCharacterReceivedEventArgsVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CCharacterReceivedEventArgs_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CClosestInteractiveBoundsRequestedEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CClosestInteractiveBoundsRequestedEventArgs_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CClosestInteractiveBoundsRequestedEventArgs __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CClosestInteractiveBoundsRequestedEventArgs;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CClosestInteractiveBoundsRequestedEventArgs;

    typedef struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CClosestInteractiveBoundsRequestedEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CClosestInteractiveBoundsRequestedEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CClosestInteractiveBoundsRequestedEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CClosestInteractiveBoundsRequestedEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CClosestInteractiveBoundsRequestedEventArgs* This,
        __x_ABI_CWindows_CUI_CCore_CICoreWindow* sender,
        __x_ABI_CWindows_CUI_CCore_CIClosestInteractiveBoundsRequestedEventArgs* args);

        END_INTERFACE
    } __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CClosestInteractiveBoundsRequestedEventArgsVtbl;

    interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CClosestInteractiveBoundsRequestedEventArgs
    {
        CONST_VTBL struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CClosestInteractiveBoundsRequestedEventArgsVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CClosestInteractiveBoundsRequestedEventArgs_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CCoreWindowEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CCoreWindowEventArgs_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CCoreWindowEventArgs __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CCoreWindowEventArgs;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CCoreWindowEventArgs;

    typedef struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CCoreWindowEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CCoreWindowEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CCoreWindowEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CCoreWindowEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CCoreWindowEventArgs* This,
        __x_ABI_CWindows_CUI_CCore_CICoreWindow* sender,
        __x_ABI_CWindows_CUI_CCore_CICoreWindowEventArgs* args);

        END_INTERFACE
    } __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CCoreWindowEventArgsVtbl;

    interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CCoreWindowEventArgs
    {
        CONST_VTBL struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CCoreWindowEventArgsVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CCoreWindowEventArgs_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CCoreWindowPopupShowingEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CCoreWindowPopupShowingEventArgs_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CCoreWindowPopupShowingEventArgs __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CCoreWindowPopupShowingEventArgs;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CCoreWindowPopupShowingEventArgs;

    typedef struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CCoreWindowPopupShowingEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CCoreWindowPopupShowingEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CCoreWindowPopupShowingEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CCoreWindowPopupShowingEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CCoreWindowPopupShowingEventArgs* This,
        __x_ABI_CWindows_CUI_CCore_CICoreWindow* sender,
        __x_ABI_CWindows_CUI_CCore_CICoreWindowPopupShowingEventArgs* args);

        END_INTERFACE
    } __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CCoreWindowPopupShowingEventArgsVtbl;

    interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CCoreWindowPopupShowingEventArgs
    {
        CONST_VTBL struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CCoreWindowPopupShowingEventArgsVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CCoreWindowPopupShowingEventArgs_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CInputEnabledEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CInputEnabledEventArgs_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CInputEnabledEventArgs __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CInputEnabledEventArgs;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CInputEnabledEventArgs;

    typedef struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CInputEnabledEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CInputEnabledEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CInputEnabledEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CInputEnabledEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CInputEnabledEventArgs* This,
        __x_ABI_CWindows_CUI_CCore_CICoreWindow* sender,
        __x_ABI_CWindows_CUI_CCore_CIInputEnabledEventArgs* args);

        END_INTERFACE
    } __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CInputEnabledEventArgsVtbl;

    interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CInputEnabledEventArgs
    {
        CONST_VTBL struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CInputEnabledEventArgsVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CInputEnabledEventArgs_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CKeyEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CKeyEventArgs_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CKeyEventArgs __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CKeyEventArgs;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CKeyEventArgs;

    typedef struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CKeyEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CKeyEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CKeyEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CKeyEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CKeyEventArgs* This,
        __x_ABI_CWindows_CUI_CCore_CICoreWindow* sender,
        __x_ABI_CWindows_CUI_CCore_CIKeyEventArgs* args);

        END_INTERFACE
    } __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CKeyEventArgsVtbl;

    interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CKeyEventArgs
    {
        CONST_VTBL struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CKeyEventArgsVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CKeyEventArgs_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CPointerEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CPointerEventArgs_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CPointerEventArgs __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CPointerEventArgs;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CPointerEventArgs;

    typedef struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CPointerEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CPointerEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CPointerEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CPointerEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CPointerEventArgs* This,
        __x_ABI_CWindows_CUI_CCore_CICoreWindow* sender,
        __x_ABI_CWindows_CUI_CCore_CIPointerEventArgs* args);

        END_INTERFACE
    } __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CPointerEventArgsVtbl;

    interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CPointerEventArgs
    {
        CONST_VTBL struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CPointerEventArgsVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CPointerEventArgs_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CTouchHitTestingEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CTouchHitTestingEventArgs_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CTouchHitTestingEventArgs __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CTouchHitTestingEventArgs;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CTouchHitTestingEventArgs;

    typedef struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CTouchHitTestingEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CTouchHitTestingEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CTouchHitTestingEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CTouchHitTestingEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CTouchHitTestingEventArgs* This,
        __x_ABI_CWindows_CUI_CCore_CICoreWindow* sender,
        __x_ABI_CWindows_CUI_CCore_CITouchHitTestingEventArgs* args);

        END_INTERFACE
    } __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CTouchHitTestingEventArgsVtbl;

    interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CTouchHitTestingEventArgs
    {
        CONST_VTBL struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CTouchHitTestingEventArgsVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CTouchHitTestingEventArgs_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CVisibilityChangedEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CVisibilityChangedEventArgs_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CVisibilityChangedEventArgs __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CVisibilityChangedEventArgs;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CVisibilityChangedEventArgs;

    typedef struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CVisibilityChangedEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CVisibilityChangedEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CVisibilityChangedEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CVisibilityChangedEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CVisibilityChangedEventArgs* This,
        __x_ABI_CWindows_CUI_CCore_CICoreWindow* sender,
        __x_ABI_CWindows_CUI_CCore_CIVisibilityChangedEventArgs* args);

        END_INTERFACE
    } __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CVisibilityChangedEventArgsVtbl;

    interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CVisibilityChangedEventArgs
    {
        CONST_VTBL struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CVisibilityChangedEventArgsVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CVisibilityChangedEventArgs_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CWindowActivatedEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CWindowActivatedEventArgs_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CWindowActivatedEventArgs __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CWindowActivatedEventArgs;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CWindowActivatedEventArgs;

    typedef struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CWindowActivatedEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CWindowActivatedEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CWindowActivatedEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CWindowActivatedEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CWindowActivatedEventArgs* This,
        __x_ABI_CWindows_CUI_CCore_CICoreWindow* sender,
        __x_ABI_CWindows_CUI_CCore_CIWindowActivatedEventArgs* args);

        END_INTERFACE
    } __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CWindowActivatedEventArgsVtbl;

    interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CWindowActivatedEventArgs
    {
        CONST_VTBL struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CWindowActivatedEventArgsVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CWindowActivatedEventArgs_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CWindowSizeChangedEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CWindowSizeChangedEventArgs_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CWindowSizeChangedEventArgs __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CWindowSizeChangedEventArgs;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CWindowSizeChangedEventArgs;

    typedef struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CWindowSizeChangedEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CWindowSizeChangedEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CWindowSizeChangedEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CWindowSizeChangedEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CWindowSizeChangedEventArgs* This,
        __x_ABI_CWindows_CUI_CCore_CICoreWindow* sender,
        __x_ABI_CWindows_CUI_CCore_CIWindowSizeChangedEventArgs* args);

        END_INTERFACE
    } __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CWindowSizeChangedEventArgsVtbl;

    interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CWindowSizeChangedEventArgs
    {
        CONST_VTBL struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CWindowSizeChangedEventArgsVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CWindowSizeChangedEventArgs_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CICorePointerRedirector___x_ABI_CWindows__CUI__CCore__CPointerEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CICorePointerRedirector___x_ABI_CWindows__CUI__CCore__CPointerEventArgs_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CICorePointerRedirector___x_ABI_CWindows__CUI__CCore__CPointerEventArgs __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CICorePointerRedirector___x_ABI_CWindows__CUI__CCore__CPointerEventArgs;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CICorePointerRedirector___x_ABI_CWindows__CUI__CCore__CPointerEventArgs;

    typedef struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CICorePointerRedirector___x_ABI_CWindows__CUI__CCore__CPointerEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CICorePointerRedirector___x_ABI_CWindows__CUI__CCore__CPointerEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CICorePointerRedirector___x_ABI_CWindows__CUI__CCore__CPointerEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CICorePointerRedirector___x_ABI_CWindows__CUI__CCore__CPointerEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CICorePointerRedirector___x_ABI_CWindows__CUI__CCore__CPointerEventArgs* This,
        __x_ABI_CWindows_CUI_CCore_CICorePointerRedirector* sender,
        __x_ABI_CWindows_CUI_CCore_CIPointerEventArgs* args);

        END_INTERFACE
    } __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CICorePointerRedirector___x_ABI_CWindows__CUI__CCore__CPointerEventArgsVtbl;

    interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CICorePointerRedirector___x_ABI_CWindows__CUI__CCore__CPointerEventArgs
    {
        CONST_VTBL struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CICorePointerRedirector___x_ABI_CWindows__CUI__CCore__CPointerEventArgsVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CICorePointerRedirector___x_ABI_CWindows__CUI__CCore__CPointerEventArgs_INTERFACE_DEFINED__
    
typedef enum __x_ABI_CWindows_CFoundation_CAsyncStatus __x_ABI_CWindows_CFoundation_CAsyncStatus;

#ifndef ____x_ABI_CWindows_CFoundation_CCollections_CIPropertySet_FWD_DEFINED__
#define ____x_ABI_CWindows_CFoundation_CCollections_CIPropertySet_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CFoundation_CCollections_CIPropertySet __x_ABI_CWindows_CFoundation_CCollections_CIPropertySet;

#endif // ____x_ABI_CWindows_CFoundation_CCollections_CIPropertySet_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CFoundation_CIAsyncAction_FWD_DEFINED__
#define ____x_ABI_CWindows_CFoundation_CIAsyncAction_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CFoundation_CIAsyncAction __x_ABI_CWindows_CFoundation_CIAsyncAction;

#endif // ____x_ABI_CWindows_CFoundation_CIAsyncAction_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CFoundation_CIAsyncInfo_FWD_DEFINED__
#define ____x_ABI_CWindows_CFoundation_CIAsyncInfo_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CFoundation_CIAsyncInfo __x_ABI_CWindows_CFoundation_CIAsyncInfo;

#endif // ____x_ABI_CWindows_CFoundation_CIAsyncInfo_FWD_DEFINED__

typedef struct __x_ABI_CWindows_CFoundation_CPoint __x_ABI_CWindows_CFoundation_CPoint;

typedef struct __x_ABI_CWindows_CFoundation_CRect __x_ABI_CWindows_CFoundation_CRect;

typedef struct __x_ABI_CWindows_CFoundation_CSize __x_ABI_CWindows_CFoundation_CSize;

#ifndef ____x_ABI_CWindows_CSystem_CIDispatcherQueue_FWD_DEFINED__
#define ____x_ABI_CWindows_CSystem_CIDispatcherQueue_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CSystem_CIDispatcherQueue __x_ABI_CWindows_CSystem_CIDispatcherQueue;

#endif // ____x_ABI_CWindows_CSystem_CIDispatcherQueue_FWD_DEFINED__

typedef enum __x_ABI_CWindows_CSystem_CVirtualKey __x_ABI_CWindows_CSystem_CVirtualKey;

typedef enum __x_ABI_CWindows_CSystem_CVirtualKeyModifiers __x_ABI_CWindows_CSystem_CVirtualKeyModifiers;

#ifndef ____x_ABI_CWindows_CUI_CPopups_CIUICommandInvokedHandler_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CPopups_CIUICommandInvokedHandler_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CUI_CPopups_CIUICommandInvokedHandler __x_ABI_CWindows_CUI_CPopups_CIUICommandInvokedHandler;

#endif // ____x_ABI_CWindows_CUI_CPopups_CIUICommandInvokedHandler_FWD_DEFINED__

    #ifndef ____x_ABI_CWindows_CUI_CIUIContext_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CIUIContext_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CIUIContext __x_ABI_CWindows_CUI_CIUIContext;

#endif // ____x_ABI_CWindows_CUI_CIUIContext_FWD_DEFINED__

typedef enum __x_ABI_CWindows_CUI_CCore_CAppViewBackButtonVisibility __x_ABI_CWindows_CUI_CCore_CAppViewBackButtonVisibility;

typedef enum __x_ABI_CWindows_CUI_CCore_CCoreAcceleratorKeyEventType __x_ABI_CWindows_CUI_CCore_CCoreAcceleratorKeyEventType;

typedef enum __x_ABI_CWindows_CUI_CCore_CCoreCursorType __x_ABI_CWindows_CUI_CCore_CCoreCursorType;

typedef enum __x_ABI_CWindows_CUI_CCore_CCoreDispatcherPriority __x_ABI_CWindows_CUI_CCore_CCoreDispatcherPriority;

typedef enum __x_ABI_CWindows_CUI_CCore_CCoreProcessEventsOption __x_ABI_CWindows_CUI_CCore_CCoreProcessEventsOption;

typedef enum __x_ABI_CWindows_CUI_CCore_CCoreVirtualKeyStates __x_ABI_CWindows_CUI_CCore_CCoreVirtualKeyStates;

typedef enum __x_ABI_CWindows_CUI_CCore_CCoreWindowActivationMode __x_ABI_CWindows_CUI_CCore_CCoreWindowActivationMode;

typedef enum __x_ABI_CWindows_CUI_CCore_CCoreWindowActivationState __x_ABI_CWindows_CUI_CCore_CCoreWindowActivationState;

typedef enum __x_ABI_CWindows_CUI_CCore_CCoreWindowFlowDirection __x_ABI_CWindows_CUI_CCore_CCoreWindowFlowDirection;

typedef struct __x_ABI_CWindows_CUI_CCore_CCorePhysicalKeyStatus __x_ABI_CWindows_CUI_CCore_CCorePhysicalKeyStatus;

typedef struct __x_ABI_CWindows_CUI_CCore_CCoreProximityEvaluation __x_ABI_CWindows_CUI_CCore_CCoreProximityEvaluation;

enum __x_ABI_CWindows_CUI_CCore_CAppViewBackButtonVisibility
    {
        __x_ABI_CWindows_CUI_CCore_CAppViewBackButtonVisibility_Visible = 0,
    __x_ABI_CWindows_CUI_CCore_CAppViewBackButtonVisibility_Collapsed = 1,
    __x_ABI_CWindows_CUI_CCore_CAppViewBackButtonVisibility_Disabled = 2,
};

enum __x_ABI_CWindows_CUI_CCore_CCoreAcceleratorKeyEventType
    {
        __x_ABI_CWindows_CUI_CCore_CCoreAcceleratorKeyEventType_Character = 2,
    __x_ABI_CWindows_CUI_CCore_CCoreAcceleratorKeyEventType_DeadCharacter = 3,
    __x_ABI_CWindows_CUI_CCore_CCoreAcceleratorKeyEventType_KeyDown = 0,
    __x_ABI_CWindows_CUI_CCore_CCoreAcceleratorKeyEventType_KeyUp = 1,
    __x_ABI_CWindows_CUI_CCore_CCoreAcceleratorKeyEventType_SystemCharacter = 6,
    __x_ABI_CWindows_CUI_CCore_CCoreAcceleratorKeyEventType_SystemDeadCharacter = 7,
    __x_ABI_CWindows_CUI_CCore_CCoreAcceleratorKeyEventType_SystemKeyDown = 4,
    __x_ABI_CWindows_CUI_CCore_CCoreAcceleratorKeyEventType_SystemKeyUp = 5,
    __x_ABI_CWindows_CUI_CCore_CCoreAcceleratorKeyEventType_UnicodeCharacter = 8,
};

enum __x_ABI_CWindows_CUI_CCore_CCoreCursorType
    {
        __x_ABI_CWindows_CUI_CCore_CCoreCursorType_Arrow = 0,
    __x_ABI_CWindows_CUI_CCore_CCoreCursorType_Cross = 1,
    __x_ABI_CWindows_CUI_CCore_CCoreCursorType_Custom = 2,
    __x_ABI_CWindows_CUI_CCore_CCoreCursorType_Hand = 3,
    __x_ABI_CWindows_CUI_CCore_CCoreCursorType_Help = 4,
    __x_ABI_CWindows_CUI_CCore_CCoreCursorType_IBeam = 5,
    __x_ABI_CWindows_CUI_CCore_CCoreCursorType_SizeAll = 6,
    __x_ABI_CWindows_CUI_CCore_CCoreCursorType_SizeNortheastSouthwest = 7,
    __x_ABI_CWindows_CUI_CCore_CCoreCursorType_SizeNorthSouth = 8,
    __x_ABI_CWindows_CUI_CCore_CCoreCursorType_SizeNorthwestSoutheast = 9,
    __x_ABI_CWindows_CUI_CCore_CCoreCursorType_SizeWestEast = 10,
    __x_ABI_CWindows_CUI_CCore_CCoreCursorType_UniversalNo = 11,
    __x_ABI_CWindows_CUI_CCore_CCoreCursorType_UpArrow = 12,
    __x_ABI_CWindows_CUI_CCore_CCoreCursorType_Wait = 13,
    __x_ABI_CWindows_CUI_CCore_CCoreCursorType_Pin = 14,
    __x_ABI_CWindows_CUI_CCore_CCoreCursorType_Person = 15,
};

enum __x_ABI_CWindows_CUI_CCore_CCoreDispatcherPriority
    {
        __x_ABI_CWindows_CUI_CCore_CCoreDispatcherPriority_Idle = -2,
    __x_ABI_CWindows_CUI_CCore_CCoreDispatcherPriority_Low = -1,
    __x_ABI_CWindows_CUI_CCore_CCoreDispatcherPriority_Normal = 0,
    __x_ABI_CWindows_CUI_CCore_CCoreDispatcherPriority_High = 1,
};

enum __x_ABI_CWindows_CUI_CCore_CCoreInputDeviceTypes
    {
        __x_ABI_CWindows_CUI_CCore_CCoreInputDeviceTypes_None = 0,
    __x_ABI_CWindows_CUI_CCore_CCoreInputDeviceTypes_Touch = 0x1,
    __x_ABI_CWindows_CUI_CCore_CCoreInputDeviceTypes_Pen = 0x2,
    __x_ABI_CWindows_CUI_CCore_CCoreInputDeviceTypes_Mouse = 0x4,
};

enum __x_ABI_CWindows_CUI_CCore_CCoreProcessEventsOption
    {
        __x_ABI_CWindows_CUI_CCore_CCoreProcessEventsOption_ProcessOneAndAllPending = 0,
    __x_ABI_CWindows_CUI_CCore_CCoreProcessEventsOption_ProcessOneIfPresent = 1,
    __x_ABI_CWindows_CUI_CCore_CCoreProcessEventsOption_ProcessUntilQuit = 2,
    __x_ABI_CWindows_CUI_CCore_CCoreProcessEventsOption_ProcessAllIfPresent = 3,
};

enum __x_ABI_CWindows_CUI_CCore_CCoreProximityEvaluationScore
    {
        __x_ABI_CWindows_CUI_CCore_CCoreProximityEvaluationScore_Closest = 0,
    __x_ABI_CWindows_CUI_CCore_CCoreProximityEvaluationScore_Farthest = 2147483647,
};

enum __x_ABI_CWindows_CUI_CCore_CCoreVirtualKeyStates
    {
        __x_ABI_CWindows_CUI_CCore_CCoreVirtualKeyStates_None = 0,
    __x_ABI_CWindows_CUI_CCore_CCoreVirtualKeyStates_Down = 0x1,
    __x_ABI_CWindows_CUI_CCore_CCoreVirtualKeyStates_Locked = 0x2,
};

enum __x_ABI_CWindows_CUI_CCore_CCoreWindowActivationMode
    {
        __x_ABI_CWindows_CUI_CCore_CCoreWindowActivationMode_None = 0,
    __x_ABI_CWindows_CUI_CCore_CCoreWindowActivationMode_Deactivated = 1,
    __x_ABI_CWindows_CUI_CCore_CCoreWindowActivationMode_ActivatedNotForeground = 2,
    __x_ABI_CWindows_CUI_CCore_CCoreWindowActivationMode_ActivatedInForeground = 3,
};

enum __x_ABI_CWindows_CUI_CCore_CCoreWindowActivationState
    {
        __x_ABI_CWindows_CUI_CCore_CCoreWindowActivationState_CodeActivated = 0,
    __x_ABI_CWindows_CUI_CCore_CCoreWindowActivationState_Deactivated = 1,
    __x_ABI_CWindows_CUI_CCore_CCoreWindowActivationState_PointerActivated = 2,
};

enum __x_ABI_CWindows_CUI_CCore_CCoreWindowFlowDirection
    {
        __x_ABI_CWindows_CUI_CCore_CCoreWindowFlowDirection_LeftToRight = 0,
    __x_ABI_CWindows_CUI_CCore_CCoreWindowFlowDirection_RightToLeft = 1,
};

struct __x_ABI_CWindows_CUI_CCore_CCorePhysicalKeyStatus
    {
        UINT32 RepeatCount;
    UINT32 ScanCode;
    boolean IsExtendedKey;
    boolean IsMenuKeyDown;
    boolean WasKeyDown;
    boolean IsKeyReleased;
};

struct __x_ABI_CWindows_CUI_CCore_CCoreProximityEvaluation
    {
        INT32 Score;
    struct __x_ABI_CWindows_CFoundation_CPoint AdjustedPoint;
};

#if !defined(____x_ABI_CWindows_CUI_CCore_CIDispatchedHandler_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CCore_CIDispatchedHandler_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CCore_CIDispatchedHandlerVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CCore_CIDispatchedHandler* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CCore_CIDispatchedHandler* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CCore_CIDispatchedHandler* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_CWindows_CUI_CCore_CIDispatchedHandler* This);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CCore_CIDispatchedHandlerVtbl;

    interface __x_ABI_CWindows_CUI_CCore_CIDispatchedHandler
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CCore_CIDispatchedHandlerVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CCore_CIDispatchedHandler;
    #endif /* !defined(____x_ABI_CWindows_CUI_CCore_CIDispatchedHandler_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CCore_CIIdleDispatchedHandler_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CCore_CIIdleDispatchedHandler_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CCore_CIIdleDispatchedHandlerVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CCore_CIIdleDispatchedHandler* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CCore_CIIdleDispatchedHandler* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CCore_CIIdleDispatchedHandler* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_CWindows_CUI_CCore_CIIdleDispatchedHandler* This,
        __x_ABI_CWindows_CUI_CCore_CIIdleDispatchedHandlerArgs* e);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CCore_CIIdleDispatchedHandlerVtbl;

    interface __x_ABI_CWindows_CUI_CCore_CIIdleDispatchedHandler
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CCore_CIIdleDispatchedHandlerVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CCore_CIIdleDispatchedHandler;
    #endif /* !defined(____x_ABI_CWindows_CUI_CCore_CIIdleDispatchedHandler_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CCore_CIAcceleratorKeyEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CCore_CIAcceleratorKeyEventArgs_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CCore_CIAcceleratorKeyEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CCore_CIAcceleratorKeyEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CCore_CIAcceleratorKeyEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CCore_CIAcceleratorKeyEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CCore_CIAcceleratorKeyEventArgs* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CCore_CIAcceleratorKeyEventArgs* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CCore_CIAcceleratorKeyEventArgs* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_EventType)(__x_ABI_CWindows_CUI_CCore_CIAcceleratorKeyEventArgs* This,
        enum __x_ABI_CWindows_CUI_CCore_CCoreAcceleratorKeyEventType* value);
    HRESULT (STDMETHODCALLTYPE* get_VirtualKey)(__x_ABI_CWindows_CUI_CCore_CIAcceleratorKeyEventArgs* This,
        enum __x_ABI_CWindows_CSystem_CVirtualKey* value);
    HRESULT (STDMETHODCALLTYPE* get_KeyStatus)(__x_ABI_CWindows_CUI_CCore_CIAcceleratorKeyEventArgs* This,
        struct __x_ABI_CWindows_CUI_CCore_CCorePhysicalKeyStatus* value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CCore_CIAcceleratorKeyEventArgsVtbl;

    interface __x_ABI_CWindows_CUI_CCore_CIAcceleratorKeyEventArgs
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CCore_CIAcceleratorKeyEventArgsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CCore_CIAcceleratorKeyEventArgs;
#endif /* !defined(____x_ABI_CWindows_CUI_CCore_CIAcceleratorKeyEventArgs_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CCore_CIAcceleratorKeyEventArgs2_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CCore_CIAcceleratorKeyEventArgs2_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CCore_CIAcceleratorKeyEventArgs2Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CCore_CIAcceleratorKeyEventArgs2* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CCore_CIAcceleratorKeyEventArgs2* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CCore_CIAcceleratorKeyEventArgs2* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CCore_CIAcceleratorKeyEventArgs2* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CCore_CIAcceleratorKeyEventArgs2* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CCore_CIAcceleratorKeyEventArgs2* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_DeviceId)(__x_ABI_CWindows_CUI_CCore_CIAcceleratorKeyEventArgs2* This,
        HSTRING* value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CCore_CIAcceleratorKeyEventArgs2Vtbl;

    interface __x_ABI_CWindows_CUI_CCore_CIAcceleratorKeyEventArgs2
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CCore_CIAcceleratorKeyEventArgs2Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CCore_CIAcceleratorKeyEventArgs2;
#endif /* !defined(____x_ABI_CWindows_CUI_CCore_CIAcceleratorKeyEventArgs2_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CCore_CIAutomationProviderRequestedEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CCore_CIAutomationProviderRequestedEventArgs_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CCore_CIAutomationProviderRequestedEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CCore_CIAutomationProviderRequestedEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CCore_CIAutomationProviderRequestedEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CCore_CIAutomationProviderRequestedEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CCore_CIAutomationProviderRequestedEventArgs* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CCore_CIAutomationProviderRequestedEventArgs* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CCore_CIAutomationProviderRequestedEventArgs* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_AutomationProvider)(__x_ABI_CWindows_CUI_CCore_CIAutomationProviderRequestedEventArgs* This,
        IInspectable** value);
    HRESULT (STDMETHODCALLTYPE* put_AutomationProvider)(__x_ABI_CWindows_CUI_CCore_CIAutomationProviderRequestedEventArgs* This,
        IInspectable* value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CCore_CIAutomationProviderRequestedEventArgsVtbl;

    interface __x_ABI_CWindows_CUI_CCore_CIAutomationProviderRequestedEventArgs
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CCore_CIAutomationProviderRequestedEventArgsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CCore_CIAutomationProviderRequestedEventArgs;
#endif /* !defined(____x_ABI_CWindows_CUI_CCore_CIAutomationProviderRequestedEventArgs_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CCore_CIBackRequestedEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CCore_CIBackRequestedEventArgs_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CCore_CIBackRequestedEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CCore_CIBackRequestedEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CCore_CIBackRequestedEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CCore_CIBackRequestedEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CCore_CIBackRequestedEventArgs* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CCore_CIBackRequestedEventArgs* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CCore_CIBackRequestedEventArgs* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Handled)(__x_ABI_CWindows_CUI_CCore_CIBackRequestedEventArgs* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* put_Handled)(__x_ABI_CWindows_CUI_CCore_CIBackRequestedEventArgs* This,
        boolean value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CCore_CIBackRequestedEventArgsVtbl;

    interface __x_ABI_CWindows_CUI_CCore_CIBackRequestedEventArgs
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CCore_CIBackRequestedEventArgsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CCore_CIBackRequestedEventArgs;
#endif /* !defined(____x_ABI_CWindows_CUI_CCore_CIBackRequestedEventArgs_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CCore_CICharacterReceivedEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CCore_CICharacterReceivedEventArgs_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CCore_CICharacterReceivedEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CCore_CICharacterReceivedEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CCore_CICharacterReceivedEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CCore_CICharacterReceivedEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CCore_CICharacterReceivedEventArgs* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CCore_CICharacterReceivedEventArgs* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CCore_CICharacterReceivedEventArgs* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_KeyCode)(__x_ABI_CWindows_CUI_CCore_CICharacterReceivedEventArgs* This,
        UINT32* value);
    HRESULT (STDMETHODCALLTYPE* get_KeyStatus)(__x_ABI_CWindows_CUI_CCore_CICharacterReceivedEventArgs* This,
        struct __x_ABI_CWindows_CUI_CCore_CCorePhysicalKeyStatus* value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CCore_CICharacterReceivedEventArgsVtbl;

    interface __x_ABI_CWindows_CUI_CCore_CICharacterReceivedEventArgs
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CCore_CICharacterReceivedEventArgsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CCore_CICharacterReceivedEventArgs;
#endif /* !defined(____x_ABI_CWindows_CUI_CCore_CICharacterReceivedEventArgs_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CCore_CIClosestInteractiveBoundsRequestedEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CCore_CIClosestInteractiveBoundsRequestedEventArgs_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CCore_CIClosestInteractiveBoundsRequestedEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CCore_CIClosestInteractiveBoundsRequestedEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CCore_CIClosestInteractiveBoundsRequestedEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CCore_CIClosestInteractiveBoundsRequestedEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CCore_CIClosestInteractiveBoundsRequestedEventArgs* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CCore_CIClosestInteractiveBoundsRequestedEventArgs* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CCore_CIClosestInteractiveBoundsRequestedEventArgs* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_PointerPosition)(__x_ABI_CWindows_CUI_CCore_CIClosestInteractiveBoundsRequestedEventArgs* This,
        struct __x_ABI_CWindows_CFoundation_CPoint* value);
    HRESULT (STDMETHODCALLTYPE* get_SearchBounds)(__x_ABI_CWindows_CUI_CCore_CIClosestInteractiveBoundsRequestedEventArgs* This,
        struct __x_ABI_CWindows_CFoundation_CRect* value);
    HRESULT (STDMETHODCALLTYPE* get_ClosestInteractiveBounds)(__x_ABI_CWindows_CUI_CCore_CIClosestInteractiveBoundsRequestedEventArgs* This,
        struct __x_ABI_CWindows_CFoundation_CRect* value);
    HRESULT (STDMETHODCALLTYPE* put_ClosestInteractiveBounds)(__x_ABI_CWindows_CUI_CCore_CIClosestInteractiveBoundsRequestedEventArgs* This,
        struct __x_ABI_CWindows_CFoundation_CRect value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CCore_CIClosestInteractiveBoundsRequestedEventArgsVtbl;

    interface __x_ABI_CWindows_CUI_CCore_CIClosestInteractiveBoundsRequestedEventArgs
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CCore_CIClosestInteractiveBoundsRequestedEventArgsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CCore_CIClosestInteractiveBoundsRequestedEventArgs;
#endif /* !defined(____x_ABI_CWindows_CUI_CCore_CIClosestInteractiveBoundsRequestedEventArgs_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CCore_CICoreAcceleratorKeys_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CCore_CICoreAcceleratorKeys_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CCore_CICoreAcceleratorKeysVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CCore_CICoreAcceleratorKeys* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CCore_CICoreAcceleratorKeys* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CCore_CICoreAcceleratorKeys* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CCore_CICoreAcceleratorKeys* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CCore_CICoreAcceleratorKeys* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CCore_CICoreAcceleratorKeys* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* add_AcceleratorKeyActivated)(__x_ABI_CWindows_CUI_CCore_CICoreAcceleratorKeys* This,
        __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreDispatcher___x_ABI_CWindows__CUI__CCore__CAcceleratorKeyEventArgs* handler,
        EventRegistrationToken* pCookie);
    HRESULT (STDMETHODCALLTYPE* remove_AcceleratorKeyActivated)(__x_ABI_CWindows_CUI_CCore_CICoreAcceleratorKeys* This,
        EventRegistrationToken cookie);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CCore_CICoreAcceleratorKeysVtbl;

    interface __x_ABI_CWindows_CUI_CCore_CICoreAcceleratorKeys
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CCore_CICoreAcceleratorKeysVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CCore_CICoreAcceleratorKeys;
#endif /* !defined(____x_ABI_CWindows_CUI_CCore_CICoreAcceleratorKeys_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CCore_CICoreClosestInteractiveBoundsRequested_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CCore_CICoreClosestInteractiveBoundsRequested_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CCore_CICoreClosestInteractiveBoundsRequestedVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CCore_CICoreClosestInteractiveBoundsRequested* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CCore_CICoreClosestInteractiveBoundsRequested* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CCore_CICoreClosestInteractiveBoundsRequested* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CCore_CICoreClosestInteractiveBoundsRequested* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CCore_CICoreClosestInteractiveBoundsRequested* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CCore_CICoreClosestInteractiveBoundsRequested* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* add_ClosestInteractiveBoundsRequested)(__x_ABI_CWindows_CUI_CCore_CICoreClosestInteractiveBoundsRequested* This,
        __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreComponentInputSource___x_ABI_CWindows__CUI__CCore__CClosestInteractiveBoundsRequestedEventArgs* handler,
        EventRegistrationToken* pCookie);
    HRESULT (STDMETHODCALLTYPE* remove_ClosestInteractiveBoundsRequested)(__x_ABI_CWindows_CUI_CCore_CICoreClosestInteractiveBoundsRequested* This,
        EventRegistrationToken cookie);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CCore_CICoreClosestInteractiveBoundsRequestedVtbl;

    interface __x_ABI_CWindows_CUI_CCore_CICoreClosestInteractiveBoundsRequested
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CCore_CICoreClosestInteractiveBoundsRequestedVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CCore_CICoreClosestInteractiveBoundsRequested;
#endif /* !defined(____x_ABI_CWindows_CUI_CCore_CICoreClosestInteractiveBoundsRequested_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CCore_CICoreComponentFocusable_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CCore_CICoreComponentFocusable_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CCore_CICoreComponentFocusableVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CCore_CICoreComponentFocusable* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CCore_CICoreComponentFocusable* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CCore_CICoreComponentFocusable* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CCore_CICoreComponentFocusable* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CCore_CICoreComponentFocusable* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CCore_CICoreComponentFocusable* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_HasFocus)(__x_ABI_CWindows_CUI_CCore_CICoreComponentFocusable* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* add_GotFocus)(__x_ABI_CWindows_CUI_CCore_CICoreComponentFocusable* This,
        __x_ABI_C__FITypedEventHandler_2_IInspectable___x_ABI_CWindows__CUI__CCore__CCoreWindowEventArgs* handler,
        EventRegistrationToken* pCookie);
    HRESULT (STDMETHODCALLTYPE* remove_GotFocus)(__x_ABI_CWindows_CUI_CCore_CICoreComponentFocusable* This,
        EventRegistrationToken cookie);
    HRESULT (STDMETHODCALLTYPE* add_LostFocus)(__x_ABI_CWindows_CUI_CCore_CICoreComponentFocusable* This,
        __x_ABI_C__FITypedEventHandler_2_IInspectable___x_ABI_CWindows__CUI__CCore__CCoreWindowEventArgs* handler,
        EventRegistrationToken* pCookie);
    HRESULT (STDMETHODCALLTYPE* remove_LostFocus)(__x_ABI_CWindows_CUI_CCore_CICoreComponentFocusable* This,
        EventRegistrationToken cookie);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CCore_CICoreComponentFocusableVtbl;

    interface __x_ABI_CWindows_CUI_CCore_CICoreComponentFocusable
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CCore_CICoreComponentFocusableVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CCore_CICoreComponentFocusable;
#endif /* !defined(____x_ABI_CWindows_CUI_CCore_CICoreComponentFocusable_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CCore_CICoreCursor_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CCore_CICoreCursor_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CCore_CICoreCursorVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CCore_CICoreCursor* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CCore_CICoreCursor* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CCore_CICoreCursor* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CCore_CICoreCursor* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CCore_CICoreCursor* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CCore_CICoreCursor* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Id)(__x_ABI_CWindows_CUI_CCore_CICoreCursor* This,
        UINT32* value);
    HRESULT (STDMETHODCALLTYPE* get_Type)(__x_ABI_CWindows_CUI_CCore_CICoreCursor* This,
        enum __x_ABI_CWindows_CUI_CCore_CCoreCursorType* value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CCore_CICoreCursorVtbl;

    interface __x_ABI_CWindows_CUI_CCore_CICoreCursor
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CCore_CICoreCursorVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CCore_CICoreCursor;
#endif /* !defined(____x_ABI_CWindows_CUI_CCore_CICoreCursor_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CCore_CICoreCursorFactory_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CCore_CICoreCursorFactory_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CCore_CICoreCursorFactoryVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CCore_CICoreCursorFactory* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CCore_CICoreCursorFactory* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CCore_CICoreCursorFactory* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CCore_CICoreCursorFactory* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CCore_CICoreCursorFactory* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CCore_CICoreCursorFactory* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* CreateCursor)(__x_ABI_CWindows_CUI_CCore_CICoreCursorFactory* This,
        enum __x_ABI_CWindows_CUI_CCore_CCoreCursorType type,
        UINT32 id,
        __x_ABI_CWindows_CUI_CCore_CICoreCursor** cursor);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CCore_CICoreCursorFactoryVtbl;

    interface __x_ABI_CWindows_CUI_CCore_CICoreCursorFactory
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CCore_CICoreCursorFactoryVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CCore_CICoreCursorFactory;
#endif /* !defined(____x_ABI_CWindows_CUI_CCore_CICoreCursorFactory_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CCore_CICoreDispatcher_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CCore_CICoreDispatcher_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CCore_CICoreDispatcherVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CCore_CICoreDispatcher* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CCore_CICoreDispatcher* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CCore_CICoreDispatcher* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CCore_CICoreDispatcher* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CCore_CICoreDispatcher* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CCore_CICoreDispatcher* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_HasThreadAccess)(__x_ABI_CWindows_CUI_CCore_CICoreDispatcher* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* ProcessEvents)(__x_ABI_CWindows_CUI_CCore_CICoreDispatcher* This,
        enum __x_ABI_CWindows_CUI_CCore_CCoreProcessEventsOption options);
    HRESULT (STDMETHODCALLTYPE* RunAsync)(__x_ABI_CWindows_CUI_CCore_CICoreDispatcher* This,
        enum __x_ABI_CWindows_CUI_CCore_CCoreDispatcherPriority priority,
        __x_ABI_CWindows_CUI_CCore_CIDispatchedHandler* agileCallback,
        __x_ABI_CWindows_CFoundation_CIAsyncAction** asyncAction);
    HRESULT (STDMETHODCALLTYPE* RunIdleAsync)(__x_ABI_CWindows_CUI_CCore_CICoreDispatcher* This,
        __x_ABI_CWindows_CUI_CCore_CIIdleDispatchedHandler* agileCallback,
        __x_ABI_CWindows_CFoundation_CIAsyncAction** asyncAction);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CCore_CICoreDispatcherVtbl;

    interface __x_ABI_CWindows_CUI_CCore_CICoreDispatcher
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CCore_CICoreDispatcherVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CCore_CICoreDispatcher;
#endif /* !defined(____x_ABI_CWindows_CUI_CCore_CICoreDispatcher_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CCore_CICoreDispatcher2_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CCore_CICoreDispatcher2_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CCore_CICoreDispatcher2Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CCore_CICoreDispatcher2* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CCore_CICoreDispatcher2* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CCore_CICoreDispatcher2* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CCore_CICoreDispatcher2* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CCore_CICoreDispatcher2* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CCore_CICoreDispatcher2* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* TryRunAsync)(__x_ABI_CWindows_CUI_CCore_CICoreDispatcher2* This,
        enum __x_ABI_CWindows_CUI_CCore_CCoreDispatcherPriority priority,
        __x_ABI_CWindows_CUI_CCore_CIDispatchedHandler* agileCallback,
        __x_ABI_C__FIAsyncOperation_1_boolean** asyncOperation);
    HRESULT (STDMETHODCALLTYPE* TryRunIdleAsync)(__x_ABI_CWindows_CUI_CCore_CICoreDispatcher2* This,
        __x_ABI_CWindows_CUI_CCore_CIIdleDispatchedHandler* agileCallback,
        __x_ABI_C__FIAsyncOperation_1_boolean** asyncOperation);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CCore_CICoreDispatcher2Vtbl;

    interface __x_ABI_CWindows_CUI_CCore_CICoreDispatcher2
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CCore_CICoreDispatcher2Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CCore_CICoreDispatcher2;
#endif /* !defined(____x_ABI_CWindows_CUI_CCore_CICoreDispatcher2_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CCore_CICoreDispatcherWithTaskPriority_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CCore_CICoreDispatcherWithTaskPriority_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CCore_CICoreDispatcherWithTaskPriorityVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CCore_CICoreDispatcherWithTaskPriority* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CCore_CICoreDispatcherWithTaskPriority* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CCore_CICoreDispatcherWithTaskPriority* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CCore_CICoreDispatcherWithTaskPriority* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CCore_CICoreDispatcherWithTaskPriority* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CCore_CICoreDispatcherWithTaskPriority* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_CurrentPriority)(__x_ABI_CWindows_CUI_CCore_CICoreDispatcherWithTaskPriority* This,
        enum __x_ABI_CWindows_CUI_CCore_CCoreDispatcherPriority* value);
    HRESULT (STDMETHODCALLTYPE* put_CurrentPriority)(__x_ABI_CWindows_CUI_CCore_CICoreDispatcherWithTaskPriority* This,
        enum __x_ABI_CWindows_CUI_CCore_CCoreDispatcherPriority value);
    HRESULT (STDMETHODCALLTYPE* ShouldYield)(__x_ABI_CWindows_CUI_CCore_CICoreDispatcherWithTaskPriority* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* ShouldYieldToPriority)(__x_ABI_CWindows_CUI_CCore_CICoreDispatcherWithTaskPriority* This,
        enum __x_ABI_CWindows_CUI_CCore_CCoreDispatcherPriority priority,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* StopProcessEvents)(__x_ABI_CWindows_CUI_CCore_CICoreDispatcherWithTaskPriority* This);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CCore_CICoreDispatcherWithTaskPriorityVtbl;

    interface __x_ABI_CWindows_CUI_CCore_CICoreDispatcherWithTaskPriority
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CCore_CICoreDispatcherWithTaskPriorityVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CCore_CICoreDispatcherWithTaskPriority;
#endif /* !defined(____x_ABI_CWindows_CUI_CCore_CICoreDispatcherWithTaskPriority_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CCore_CICoreInputSourceBase_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CCore_CICoreInputSourceBase_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CCore_CICoreInputSourceBaseVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CCore_CICoreInputSourceBase* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CCore_CICoreInputSourceBase* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CCore_CICoreInputSourceBase* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CCore_CICoreInputSourceBase* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CCore_CICoreInputSourceBase* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CCore_CICoreInputSourceBase* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Dispatcher)(__x_ABI_CWindows_CUI_CCore_CICoreInputSourceBase* This,
        __x_ABI_CWindows_CUI_CCore_CICoreDispatcher** value);
    HRESULT (STDMETHODCALLTYPE* get_IsInputEnabled)(__x_ABI_CWindows_CUI_CCore_CICoreInputSourceBase* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* put_IsInputEnabled)(__x_ABI_CWindows_CUI_CCore_CICoreInputSourceBase* This,
        boolean value);
    HRESULT (STDMETHODCALLTYPE* add_InputEnabled)(__x_ABI_CWindows_CUI_CCore_CICoreInputSourceBase* This,
        __x_ABI_C__FITypedEventHandler_2_IInspectable___x_ABI_CWindows__CUI__CCore__CInputEnabledEventArgs* handler,
        EventRegistrationToken* pCookie);
    HRESULT (STDMETHODCALLTYPE* remove_InputEnabled)(__x_ABI_CWindows_CUI_CCore_CICoreInputSourceBase* This,
        EventRegistrationToken cookie);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CCore_CICoreInputSourceBaseVtbl;

    interface __x_ABI_CWindows_CUI_CCore_CICoreInputSourceBase
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CCore_CICoreInputSourceBaseVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CCore_CICoreInputSourceBase;
#endif /* !defined(____x_ABI_CWindows_CUI_CCore_CICoreInputSourceBase_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CCore_CICoreKeyboardInputSource_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CCore_CICoreKeyboardInputSource_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CCore_CICoreKeyboardInputSourceVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CCore_CICoreKeyboardInputSource* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CCore_CICoreKeyboardInputSource* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CCore_CICoreKeyboardInputSource* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CCore_CICoreKeyboardInputSource* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CCore_CICoreKeyboardInputSource* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CCore_CICoreKeyboardInputSource* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetCurrentKeyState)(__x_ABI_CWindows_CUI_CCore_CICoreKeyboardInputSource* This,
        enum __x_ABI_CWindows_CSystem_CVirtualKey virtualKey,
        enum __x_ABI_CWindows_CUI_CCore_CCoreVirtualKeyStates* KeyState);
    HRESULT (STDMETHODCALLTYPE* add_CharacterReceived)(__x_ABI_CWindows_CUI_CCore_CICoreKeyboardInputSource* This,
        __x_ABI_C__FITypedEventHandler_2_IInspectable___x_ABI_CWindows__CUI__CCore__CCharacterReceivedEventArgs* handler,
        EventRegistrationToken* pCookie);
    HRESULT (STDMETHODCALLTYPE* remove_CharacterReceived)(__x_ABI_CWindows_CUI_CCore_CICoreKeyboardInputSource* This,
        EventRegistrationToken cookie);
    HRESULT (STDMETHODCALLTYPE* add_KeyDown)(__x_ABI_CWindows_CUI_CCore_CICoreKeyboardInputSource* This,
        __x_ABI_C__FITypedEventHandler_2_IInspectable___x_ABI_CWindows__CUI__CCore__CKeyEventArgs* handler,
        EventRegistrationToken* pCookie);
    HRESULT (STDMETHODCALLTYPE* remove_KeyDown)(__x_ABI_CWindows_CUI_CCore_CICoreKeyboardInputSource* This,
        EventRegistrationToken cookie);
    HRESULT (STDMETHODCALLTYPE* add_KeyUp)(__x_ABI_CWindows_CUI_CCore_CICoreKeyboardInputSource* This,
        __x_ABI_C__FITypedEventHandler_2_IInspectable___x_ABI_CWindows__CUI__CCore__CKeyEventArgs* handler,
        EventRegistrationToken* pCookie);
    HRESULT (STDMETHODCALLTYPE* remove_KeyUp)(__x_ABI_CWindows_CUI_CCore_CICoreKeyboardInputSource* This,
        EventRegistrationToken cookie);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CCore_CICoreKeyboardInputSourceVtbl;

    interface __x_ABI_CWindows_CUI_CCore_CICoreKeyboardInputSource
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CCore_CICoreKeyboardInputSourceVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CCore_CICoreKeyboardInputSource;
#endif /* !defined(____x_ABI_CWindows_CUI_CCore_CICoreKeyboardInputSource_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CCore_CICoreKeyboardInputSource2_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CCore_CICoreKeyboardInputSource2_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CCore_CICoreKeyboardInputSource2Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CCore_CICoreKeyboardInputSource2* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CCore_CICoreKeyboardInputSource2* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CCore_CICoreKeyboardInputSource2* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CCore_CICoreKeyboardInputSource2* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CCore_CICoreKeyboardInputSource2* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CCore_CICoreKeyboardInputSource2* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetCurrentKeyEventDeviceId)(__x_ABI_CWindows_CUI_CCore_CICoreKeyboardInputSource2* This,
        HSTRING* value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CCore_CICoreKeyboardInputSource2Vtbl;

    interface __x_ABI_CWindows_CUI_CCore_CICoreKeyboardInputSource2
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CCore_CICoreKeyboardInputSource2Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CCore_CICoreKeyboardInputSource2;
#endif /* !defined(____x_ABI_CWindows_CUI_CCore_CICoreKeyboardInputSource2_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CCore_CICorePointerInputSource_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CCore_CICorePointerInputSource_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CCore_CICorePointerInputSourceVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CCore_CICorePointerInputSource* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CCore_CICorePointerInputSource* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CCore_CICorePointerInputSource* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CCore_CICorePointerInputSource* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CCore_CICorePointerInputSource* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CCore_CICorePointerInputSource* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* ReleasePointerCapture)(__x_ABI_CWindows_CUI_CCore_CICorePointerInputSource* This);
    HRESULT (STDMETHODCALLTYPE* SetPointerCapture)(__x_ABI_CWindows_CUI_CCore_CICorePointerInputSource* This);
    HRESULT (STDMETHODCALLTYPE* get_HasCapture)(__x_ABI_CWindows_CUI_CCore_CICorePointerInputSource* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* get_PointerPosition)(__x_ABI_CWindows_CUI_CCore_CICorePointerInputSource* This,
        struct __x_ABI_CWindows_CFoundation_CPoint* value);
    HRESULT (STDMETHODCALLTYPE* get_PointerCursor)(__x_ABI_CWindows_CUI_CCore_CICorePointerInputSource* This,
        __x_ABI_CWindows_CUI_CCore_CICoreCursor** value);
    HRESULT (STDMETHODCALLTYPE* put_PointerCursor)(__x_ABI_CWindows_CUI_CCore_CICorePointerInputSource* This,
        __x_ABI_CWindows_CUI_CCore_CICoreCursor* value);
    HRESULT (STDMETHODCALLTYPE* add_PointerCaptureLost)(__x_ABI_CWindows_CUI_CCore_CICorePointerInputSource* This,
        __x_ABI_C__FITypedEventHandler_2_IInspectable___x_ABI_CWindows__CUI__CCore__CPointerEventArgs* handler,
        EventRegistrationToken* cookie);
    HRESULT (STDMETHODCALLTYPE* remove_PointerCaptureLost)(__x_ABI_CWindows_CUI_CCore_CICorePointerInputSource* This,
        EventRegistrationToken cookie);
    HRESULT (STDMETHODCALLTYPE* add_PointerEntered)(__x_ABI_CWindows_CUI_CCore_CICorePointerInputSource* This,
        __x_ABI_C__FITypedEventHandler_2_IInspectable___x_ABI_CWindows__CUI__CCore__CPointerEventArgs* handler,
        EventRegistrationToken* cookie);
    HRESULT (STDMETHODCALLTYPE* remove_PointerEntered)(__x_ABI_CWindows_CUI_CCore_CICorePointerInputSource* This,
        EventRegistrationToken cookie);
    HRESULT (STDMETHODCALLTYPE* add_PointerExited)(__x_ABI_CWindows_CUI_CCore_CICorePointerInputSource* This,
        __x_ABI_C__FITypedEventHandler_2_IInspectable___x_ABI_CWindows__CUI__CCore__CPointerEventArgs* handler,
        EventRegistrationToken* cookie);
    HRESULT (STDMETHODCALLTYPE* remove_PointerExited)(__x_ABI_CWindows_CUI_CCore_CICorePointerInputSource* This,
        EventRegistrationToken cookie);
    HRESULT (STDMETHODCALLTYPE* add_PointerMoved)(__x_ABI_CWindows_CUI_CCore_CICorePointerInputSource* This,
        __x_ABI_C__FITypedEventHandler_2_IInspectable___x_ABI_CWindows__CUI__CCore__CPointerEventArgs* handler,
        EventRegistrationToken* cookie);
    HRESULT (STDMETHODCALLTYPE* remove_PointerMoved)(__x_ABI_CWindows_CUI_CCore_CICorePointerInputSource* This,
        EventRegistrationToken cookie);
    HRESULT (STDMETHODCALLTYPE* add_PointerPressed)(__x_ABI_CWindows_CUI_CCore_CICorePointerInputSource* This,
        __x_ABI_C__FITypedEventHandler_2_IInspectable___x_ABI_CWindows__CUI__CCore__CPointerEventArgs* handler,
        EventRegistrationToken* cookie);
    HRESULT (STDMETHODCALLTYPE* remove_PointerPressed)(__x_ABI_CWindows_CUI_CCore_CICorePointerInputSource* This,
        EventRegistrationToken cookie);
    HRESULT (STDMETHODCALLTYPE* add_PointerReleased)(__x_ABI_CWindows_CUI_CCore_CICorePointerInputSource* This,
        __x_ABI_C__FITypedEventHandler_2_IInspectable___x_ABI_CWindows__CUI__CCore__CPointerEventArgs* handler,
        EventRegistrationToken* cookie);
    HRESULT (STDMETHODCALLTYPE* remove_PointerReleased)(__x_ABI_CWindows_CUI_CCore_CICorePointerInputSource* This,
        EventRegistrationToken cookie);
    HRESULT (STDMETHODCALLTYPE* add_PointerWheelChanged)(__x_ABI_CWindows_CUI_CCore_CICorePointerInputSource* This,
        __x_ABI_C__FITypedEventHandler_2_IInspectable___x_ABI_CWindows__CUI__CCore__CPointerEventArgs* handler,
        EventRegistrationToken* cookie);
    HRESULT (STDMETHODCALLTYPE* remove_PointerWheelChanged)(__x_ABI_CWindows_CUI_CCore_CICorePointerInputSource* This,
        EventRegistrationToken cookie);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CCore_CICorePointerInputSourceVtbl;

    interface __x_ABI_CWindows_CUI_CCore_CICorePointerInputSource
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CCore_CICorePointerInputSourceVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CCore_CICorePointerInputSource;
#endif /* !defined(____x_ABI_CWindows_CUI_CCore_CICorePointerInputSource_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CCore_CICorePointerInputSource2_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CCore_CICorePointerInputSource2_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CCore_CICorePointerInputSource2Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CCore_CICorePointerInputSource2* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CCore_CICorePointerInputSource2* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CCore_CICorePointerInputSource2* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CCore_CICorePointerInputSource2* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CCore_CICorePointerInputSource2* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CCore_CICorePointerInputSource2* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_DispatcherQueue)(__x_ABI_CWindows_CUI_CCore_CICorePointerInputSource2* This,
        __x_ABI_CWindows_CSystem_CIDispatcherQueue** value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CCore_CICorePointerInputSource2Vtbl;

    interface __x_ABI_CWindows_CUI_CCore_CICorePointerInputSource2
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CCore_CICorePointerInputSource2Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CCore_CICorePointerInputSource2;
#endif /* !defined(____x_ABI_CWindows_CUI_CCore_CICorePointerInputSource2_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CCore_CICorePointerRedirector_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CCore_CICorePointerRedirector_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CCore_CICorePointerRedirectorVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CCore_CICorePointerRedirector* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CCore_CICorePointerRedirector* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CCore_CICorePointerRedirector* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CCore_CICorePointerRedirector* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CCore_CICorePointerRedirector* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CCore_CICorePointerRedirector* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* add_PointerRoutedAway)(__x_ABI_CWindows_CUI_CCore_CICorePointerRedirector* This,
        __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CICorePointerRedirector___x_ABI_CWindows__CUI__CCore__CPointerEventArgs* handler,
        EventRegistrationToken* cookie);
    HRESULT (STDMETHODCALLTYPE* remove_PointerRoutedAway)(__x_ABI_CWindows_CUI_CCore_CICorePointerRedirector* This,
        EventRegistrationToken cookie);
    HRESULT (STDMETHODCALLTYPE* add_PointerRoutedTo)(__x_ABI_CWindows_CUI_CCore_CICorePointerRedirector* This,
        __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CICorePointerRedirector___x_ABI_CWindows__CUI__CCore__CPointerEventArgs* handler,
        EventRegistrationToken* cookie);
    HRESULT (STDMETHODCALLTYPE* remove_PointerRoutedTo)(__x_ABI_CWindows_CUI_CCore_CICorePointerRedirector* This,
        EventRegistrationToken cookie);
    HRESULT (STDMETHODCALLTYPE* add_PointerRoutedReleased)(__x_ABI_CWindows_CUI_CCore_CICorePointerRedirector* This,
        __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CICorePointerRedirector___x_ABI_CWindows__CUI__CCore__CPointerEventArgs* handler,
        EventRegistrationToken* cookie);
    HRESULT (STDMETHODCALLTYPE* remove_PointerRoutedReleased)(__x_ABI_CWindows_CUI_CCore_CICorePointerRedirector* This,
        EventRegistrationToken cookie);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CCore_CICorePointerRedirectorVtbl;

    interface __x_ABI_CWindows_CUI_CCore_CICorePointerRedirector
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CCore_CICorePointerRedirectorVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CCore_CICorePointerRedirector;
#endif /* !defined(____x_ABI_CWindows_CUI_CCore_CICorePointerRedirector_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CCore_CICoreTouchHitTesting_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CCore_CICoreTouchHitTesting_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CCore_CICoreTouchHitTestingVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CCore_CICoreTouchHitTesting* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CCore_CICoreTouchHitTesting* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CCore_CICoreTouchHitTesting* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CCore_CICoreTouchHitTesting* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CCore_CICoreTouchHitTesting* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CCore_CICoreTouchHitTesting* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* add_TouchHitTesting)(__x_ABI_CWindows_CUI_CCore_CICoreTouchHitTesting* This,
        __x_ABI_C__FITypedEventHandler_2_IInspectable___x_ABI_CWindows__CUI__CCore__CTouchHitTestingEventArgs* handler,
        EventRegistrationToken* pCookie);
    HRESULT (STDMETHODCALLTYPE* remove_TouchHitTesting)(__x_ABI_CWindows_CUI_CCore_CICoreTouchHitTesting* This,
        EventRegistrationToken cookie);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CCore_CICoreTouchHitTestingVtbl;

    interface __x_ABI_CWindows_CUI_CCore_CICoreTouchHitTesting
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CCore_CICoreTouchHitTestingVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CCore_CICoreTouchHitTesting;
#endif /* !defined(____x_ABI_CWindows_CUI_CCore_CICoreTouchHitTesting_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CCore_CICoreWindow_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CCore_CICoreWindow_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CCore_CICoreWindowVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CCore_CICoreWindow* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CCore_CICoreWindow* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CCore_CICoreWindow* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CCore_CICoreWindow* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CCore_CICoreWindow* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CCore_CICoreWindow* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_AutomationHostProvider)(__x_ABI_CWindows_CUI_CCore_CICoreWindow* This,
        IInspectable** value);
    HRESULT (STDMETHODCALLTYPE* get_Bounds)(__x_ABI_CWindows_CUI_CCore_CICoreWindow* This,
        struct __x_ABI_CWindows_CFoundation_CRect* value);
    HRESULT (STDMETHODCALLTYPE* get_CustomProperties)(__x_ABI_CWindows_CUI_CCore_CICoreWindow* This,
        __x_ABI_CWindows_CFoundation_CCollections_CIPropertySet** value);
    HRESULT (STDMETHODCALLTYPE* get_Dispatcher)(__x_ABI_CWindows_CUI_CCore_CICoreWindow* This,
        __x_ABI_CWindows_CUI_CCore_CICoreDispatcher** value);
    HRESULT (STDMETHODCALLTYPE* get_FlowDirection)(__x_ABI_CWindows_CUI_CCore_CICoreWindow* This,
        enum __x_ABI_CWindows_CUI_CCore_CCoreWindowFlowDirection* value);
    HRESULT (STDMETHODCALLTYPE* put_FlowDirection)(__x_ABI_CWindows_CUI_CCore_CICoreWindow* This,
        enum __x_ABI_CWindows_CUI_CCore_CCoreWindowFlowDirection value);
    HRESULT (STDMETHODCALLTYPE* get_IsInputEnabled)(__x_ABI_CWindows_CUI_CCore_CICoreWindow* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* put_IsInputEnabled)(__x_ABI_CWindows_CUI_CCore_CICoreWindow* This,
        boolean value);
    HRESULT (STDMETHODCALLTYPE* get_PointerCursor)(__x_ABI_CWindows_CUI_CCore_CICoreWindow* This,
        __x_ABI_CWindows_CUI_CCore_CICoreCursor** value);
    HRESULT (STDMETHODCALLTYPE* put_PointerCursor)(__x_ABI_CWindows_CUI_CCore_CICoreWindow* This,
        __x_ABI_CWindows_CUI_CCore_CICoreCursor* value);
    HRESULT (STDMETHODCALLTYPE* get_PointerPosition)(__x_ABI_CWindows_CUI_CCore_CICoreWindow* This,
        struct __x_ABI_CWindows_CFoundation_CPoint* value);
    HRESULT (STDMETHODCALLTYPE* get_Visible)(__x_ABI_CWindows_CUI_CCore_CICoreWindow* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* Activate)(__x_ABI_CWindows_CUI_CCore_CICoreWindow* This);
    HRESULT (STDMETHODCALLTYPE* Close)(__x_ABI_CWindows_CUI_CCore_CICoreWindow* This);
    HRESULT (STDMETHODCALLTYPE* GetAsyncKeyState)(__x_ABI_CWindows_CUI_CCore_CICoreWindow* This,
        enum __x_ABI_CWindows_CSystem_CVirtualKey virtualKey,
        enum __x_ABI_CWindows_CUI_CCore_CCoreVirtualKeyStates* KeyState);
    HRESULT (STDMETHODCALLTYPE* GetKeyState)(__x_ABI_CWindows_CUI_CCore_CICoreWindow* This,
        enum __x_ABI_CWindows_CSystem_CVirtualKey virtualKey,
        enum __x_ABI_CWindows_CUI_CCore_CCoreVirtualKeyStates* KeyState);
    HRESULT (STDMETHODCALLTYPE* ReleasePointerCapture)(__x_ABI_CWindows_CUI_CCore_CICoreWindow* This);
    HRESULT (STDMETHODCALLTYPE* SetPointerCapture)(__x_ABI_CWindows_CUI_CCore_CICoreWindow* This);
    HRESULT (STDMETHODCALLTYPE* add_Activated)(__x_ABI_CWindows_CUI_CCore_CICoreWindow* This,
        __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CWindowActivatedEventArgs* handler,
        EventRegistrationToken* pCookie);
    HRESULT (STDMETHODCALLTYPE* remove_Activated)(__x_ABI_CWindows_CUI_CCore_CICoreWindow* This,
        EventRegistrationToken cookie);
    HRESULT (STDMETHODCALLTYPE* add_AutomationProviderRequested)(__x_ABI_CWindows_CUI_CCore_CICoreWindow* This,
        __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CAutomationProviderRequestedEventArgs* handler,
        EventRegistrationToken* cookie);
    HRESULT (STDMETHODCALLTYPE* remove_AutomationProviderRequested)(__x_ABI_CWindows_CUI_CCore_CICoreWindow* This,
        EventRegistrationToken cookie);
    HRESULT (STDMETHODCALLTYPE* add_CharacterReceived)(__x_ABI_CWindows_CUI_CCore_CICoreWindow* This,
        __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CCharacterReceivedEventArgs* handler,
        EventRegistrationToken* pCookie);
    HRESULT (STDMETHODCALLTYPE* remove_CharacterReceived)(__x_ABI_CWindows_CUI_CCore_CICoreWindow* This,
        EventRegistrationToken cookie);
    HRESULT (STDMETHODCALLTYPE* add_Closed)(__x_ABI_CWindows_CUI_CCore_CICoreWindow* This,
        __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CCoreWindowEventArgs* handler,
        EventRegistrationToken* pCookie);
    HRESULT (STDMETHODCALLTYPE* remove_Closed)(__x_ABI_CWindows_CUI_CCore_CICoreWindow* This,
        EventRegistrationToken cookie);
    HRESULT (STDMETHODCALLTYPE* add_InputEnabled)(__x_ABI_CWindows_CUI_CCore_CICoreWindow* This,
        __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CInputEnabledEventArgs* handler,
        EventRegistrationToken* pCookie);
    HRESULT (STDMETHODCALLTYPE* remove_InputEnabled)(__x_ABI_CWindows_CUI_CCore_CICoreWindow* This,
        EventRegistrationToken cookie);
    HRESULT (STDMETHODCALLTYPE* add_KeyDown)(__x_ABI_CWindows_CUI_CCore_CICoreWindow* This,
        __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CKeyEventArgs* handler,
        EventRegistrationToken* pCookie);
    HRESULT (STDMETHODCALLTYPE* remove_KeyDown)(__x_ABI_CWindows_CUI_CCore_CICoreWindow* This,
        EventRegistrationToken cookie);
    HRESULT (STDMETHODCALLTYPE* add_KeyUp)(__x_ABI_CWindows_CUI_CCore_CICoreWindow* This,
        __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CKeyEventArgs* handler,
        EventRegistrationToken* pCookie);
    HRESULT (STDMETHODCALLTYPE* remove_KeyUp)(__x_ABI_CWindows_CUI_CCore_CICoreWindow* This,
        EventRegistrationToken cookie);
    HRESULT (STDMETHODCALLTYPE* add_PointerCaptureLost)(__x_ABI_CWindows_CUI_CCore_CICoreWindow* This,
        __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CPointerEventArgs* handler,
        EventRegistrationToken* cookie);
    HRESULT (STDMETHODCALLTYPE* remove_PointerCaptureLost)(__x_ABI_CWindows_CUI_CCore_CICoreWindow* This,
        EventRegistrationToken cookie);
    HRESULT (STDMETHODCALLTYPE* add_PointerEntered)(__x_ABI_CWindows_CUI_CCore_CICoreWindow* This,
        __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CPointerEventArgs* handler,
        EventRegistrationToken* cookie);
    HRESULT (STDMETHODCALLTYPE* remove_PointerEntered)(__x_ABI_CWindows_CUI_CCore_CICoreWindow* This,
        EventRegistrationToken cookie);
    HRESULT (STDMETHODCALLTYPE* add_PointerExited)(__x_ABI_CWindows_CUI_CCore_CICoreWindow* This,
        __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CPointerEventArgs* handler,
        EventRegistrationToken* cookie);
    HRESULT (STDMETHODCALLTYPE* remove_PointerExited)(__x_ABI_CWindows_CUI_CCore_CICoreWindow* This,
        EventRegistrationToken cookie);
    HRESULT (STDMETHODCALLTYPE* add_PointerMoved)(__x_ABI_CWindows_CUI_CCore_CICoreWindow* This,
        __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CPointerEventArgs* handler,
        EventRegistrationToken* cookie);
    HRESULT (STDMETHODCALLTYPE* remove_PointerMoved)(__x_ABI_CWindows_CUI_CCore_CICoreWindow* This,
        EventRegistrationToken cookie);
    HRESULT (STDMETHODCALLTYPE* add_PointerPressed)(__x_ABI_CWindows_CUI_CCore_CICoreWindow* This,
        __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CPointerEventArgs* handler,
        EventRegistrationToken* cookie);
    HRESULT (STDMETHODCALLTYPE* remove_PointerPressed)(__x_ABI_CWindows_CUI_CCore_CICoreWindow* This,
        EventRegistrationToken cookie);
    HRESULT (STDMETHODCALLTYPE* add_PointerReleased)(__x_ABI_CWindows_CUI_CCore_CICoreWindow* This,
        __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CPointerEventArgs* handler,
        EventRegistrationToken* cookie);
    HRESULT (STDMETHODCALLTYPE* remove_PointerReleased)(__x_ABI_CWindows_CUI_CCore_CICoreWindow* This,
        EventRegistrationToken cookie);
    HRESULT (STDMETHODCALLTYPE* add_TouchHitTesting)(__x_ABI_CWindows_CUI_CCore_CICoreWindow* This,
        __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CTouchHitTestingEventArgs* handler,
        EventRegistrationToken* pCookie);
    HRESULT (STDMETHODCALLTYPE* remove_TouchHitTesting)(__x_ABI_CWindows_CUI_CCore_CICoreWindow* This,
        EventRegistrationToken cookie);
    HRESULT (STDMETHODCALLTYPE* add_PointerWheelChanged)(__x_ABI_CWindows_CUI_CCore_CICoreWindow* This,
        __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CPointerEventArgs* handler,
        EventRegistrationToken* cookie);
    HRESULT (STDMETHODCALLTYPE* remove_PointerWheelChanged)(__x_ABI_CWindows_CUI_CCore_CICoreWindow* This,
        EventRegistrationToken cookie);
    HRESULT (STDMETHODCALLTYPE* add_SizeChanged)(__x_ABI_CWindows_CUI_CCore_CICoreWindow* This,
        __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CWindowSizeChangedEventArgs* handler,
        EventRegistrationToken* pCookie);
    HRESULT (STDMETHODCALLTYPE* remove_SizeChanged)(__x_ABI_CWindows_CUI_CCore_CICoreWindow* This,
        EventRegistrationToken cookie);
    HRESULT (STDMETHODCALLTYPE* add_VisibilityChanged)(__x_ABI_CWindows_CUI_CCore_CICoreWindow* This,
        __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CVisibilityChangedEventArgs* handler,
        EventRegistrationToken* pCookie);
    HRESULT (STDMETHODCALLTYPE* remove_VisibilityChanged)(__x_ABI_CWindows_CUI_CCore_CICoreWindow* This,
        EventRegistrationToken cookie);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CCore_CICoreWindowVtbl;

    interface __x_ABI_CWindows_CUI_CCore_CICoreWindow
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CCore_CICoreWindowVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CCore_CICoreWindow;
#endif /* !defined(____x_ABI_CWindows_CUI_CCore_CICoreWindow_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CCore_CICoreWindow2_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CCore_CICoreWindow2_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CCore_CICoreWindow2Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CCore_CICoreWindow2* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CCore_CICoreWindow2* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CCore_CICoreWindow2* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CCore_CICoreWindow2* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CCore_CICoreWindow2* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CCore_CICoreWindow2* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* put_PointerPosition)(__x_ABI_CWindows_CUI_CCore_CICoreWindow2* This,
        struct __x_ABI_CWindows_CFoundation_CPoint value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CCore_CICoreWindow2Vtbl;

    interface __x_ABI_CWindows_CUI_CCore_CICoreWindow2
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CCore_CICoreWindow2Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CCore_CICoreWindow2;
#endif /* !defined(____x_ABI_CWindows_CUI_CCore_CICoreWindow2_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CCore_CICoreWindow3_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CCore_CICoreWindow3_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CCore_CICoreWindow3Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CCore_CICoreWindow3* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CCore_CICoreWindow3* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CCore_CICoreWindow3* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CCore_CICoreWindow3* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CCore_CICoreWindow3* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CCore_CICoreWindow3* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* add_ClosestInteractiveBoundsRequested)(__x_ABI_CWindows_CUI_CCore_CICoreWindow3* This,
        __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CClosestInteractiveBoundsRequestedEventArgs* handler,
        EventRegistrationToken* pCookie);
    HRESULT (STDMETHODCALLTYPE* remove_ClosestInteractiveBoundsRequested)(__x_ABI_CWindows_CUI_CCore_CICoreWindow3* This,
        EventRegistrationToken cookie);
    HRESULT (STDMETHODCALLTYPE* GetCurrentKeyEventDeviceId)(__x_ABI_CWindows_CUI_CCore_CICoreWindow3* This,
        HSTRING* value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CCore_CICoreWindow3Vtbl;

    interface __x_ABI_CWindows_CUI_CCore_CICoreWindow3
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CCore_CICoreWindow3Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CCore_CICoreWindow3;
#endif /* !defined(____x_ABI_CWindows_CUI_CCore_CICoreWindow3_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CCore_CICoreWindow4_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CCore_CICoreWindow4_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CCore_CICoreWindow4Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CCore_CICoreWindow4* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CCore_CICoreWindow4* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CCore_CICoreWindow4* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CCore_CICoreWindow4* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CCore_CICoreWindow4* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CCore_CICoreWindow4* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* add_ResizeStarted)(__x_ABI_CWindows_CUI_CCore_CICoreWindow4* This,
        __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow_IInspectable* handler,
        EventRegistrationToken* pCookie);
    HRESULT (STDMETHODCALLTYPE* remove_ResizeStarted)(__x_ABI_CWindows_CUI_CCore_CICoreWindow4* This,
        EventRegistrationToken cookie);
    HRESULT (STDMETHODCALLTYPE* add_ResizeCompleted)(__x_ABI_CWindows_CUI_CCore_CICoreWindow4* This,
        __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow_IInspectable* handler,
        EventRegistrationToken* pCookie);
    HRESULT (STDMETHODCALLTYPE* remove_ResizeCompleted)(__x_ABI_CWindows_CUI_CCore_CICoreWindow4* This,
        EventRegistrationToken cookie);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CCore_CICoreWindow4Vtbl;

    interface __x_ABI_CWindows_CUI_CCore_CICoreWindow4
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CCore_CICoreWindow4Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CCore_CICoreWindow4;
#endif /* !defined(____x_ABI_CWindows_CUI_CCore_CICoreWindow4_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CCore_CICoreWindow5_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CCore_CICoreWindow5_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CCore_CICoreWindow5Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CCore_CICoreWindow5* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CCore_CICoreWindow5* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CCore_CICoreWindow5* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CCore_CICoreWindow5* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CCore_CICoreWindow5* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CCore_CICoreWindow5* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_DispatcherQueue)(__x_ABI_CWindows_CUI_CCore_CICoreWindow5* This,
        __x_ABI_CWindows_CSystem_CIDispatcherQueue** value);
    HRESULT (STDMETHODCALLTYPE* get_ActivationMode)(__x_ABI_CWindows_CUI_CCore_CICoreWindow5* This,
        enum __x_ABI_CWindows_CUI_CCore_CCoreWindowActivationMode* value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CCore_CICoreWindow5Vtbl;

    interface __x_ABI_CWindows_CUI_CCore_CICoreWindow5
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CCore_CICoreWindow5Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CCore_CICoreWindow5;
#endif /* !defined(____x_ABI_CWindows_CUI_CCore_CICoreWindow5_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CCore_CICoreWindowDialog_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CCore_CICoreWindowDialog_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CCore_CICoreWindowDialogVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CCore_CICoreWindowDialog* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CCore_CICoreWindowDialog* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CCore_CICoreWindowDialog* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CCore_CICoreWindowDialog* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CCore_CICoreWindowDialog* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CCore_CICoreWindowDialog* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* add_Showing)(__x_ABI_CWindows_CUI_CCore_CICoreWindowDialog* This,
        __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CCoreWindowPopupShowingEventArgs* handler,
        EventRegistrationToken* cookie);
    HRESULT (STDMETHODCALLTYPE* remove_Showing)(__x_ABI_CWindows_CUI_CCore_CICoreWindowDialog* This,
        EventRegistrationToken cookie);
    HRESULT (STDMETHODCALLTYPE* get_MaxSize)(__x_ABI_CWindows_CUI_CCore_CICoreWindowDialog* This,
        struct __x_ABI_CWindows_CFoundation_CSize* value);
    HRESULT (STDMETHODCALLTYPE* get_MinSize)(__x_ABI_CWindows_CUI_CCore_CICoreWindowDialog* This,
        struct __x_ABI_CWindows_CFoundation_CSize* value);
    HRESULT (STDMETHODCALLTYPE* get_Title)(__x_ABI_CWindows_CUI_CCore_CICoreWindowDialog* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* put_Title)(__x_ABI_CWindows_CUI_CCore_CICoreWindowDialog* This,
        HSTRING value);
    HRESULT (STDMETHODCALLTYPE* get_IsInteractionDelayed)(__x_ABI_CWindows_CUI_CCore_CICoreWindowDialog* This,
        INT32* value);
    HRESULT (STDMETHODCALLTYPE* put_IsInteractionDelayed)(__x_ABI_CWindows_CUI_CCore_CICoreWindowDialog* This,
        INT32 value);
    HRESULT (STDMETHODCALLTYPE* get_Commands)(__x_ABI_CWindows_CUI_CCore_CICoreWindowDialog* This,
        __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CPopups__CIUICommand** value);
    HRESULT (STDMETHODCALLTYPE* get_DefaultCommandIndex)(__x_ABI_CWindows_CUI_CCore_CICoreWindowDialog* This,
        UINT32* value);
    HRESULT (STDMETHODCALLTYPE* put_DefaultCommandIndex)(__x_ABI_CWindows_CUI_CCore_CICoreWindowDialog* This,
        UINT32 value);
    HRESULT (STDMETHODCALLTYPE* get_CancelCommandIndex)(__x_ABI_CWindows_CUI_CCore_CICoreWindowDialog* This,
        UINT32* value);
    HRESULT (STDMETHODCALLTYPE* put_CancelCommandIndex)(__x_ABI_CWindows_CUI_CCore_CICoreWindowDialog* This,
        UINT32 value);
    HRESULT (STDMETHODCALLTYPE* get_BackButtonCommand)(__x_ABI_CWindows_CUI_CCore_CICoreWindowDialog* This,
        __x_ABI_CWindows_CUI_CPopups_CIUICommandInvokedHandler** value);
    HRESULT (STDMETHODCALLTYPE* put_BackButtonCommand)(__x_ABI_CWindows_CUI_CCore_CICoreWindowDialog* This,
        __x_ABI_CWindows_CUI_CPopups_CIUICommandInvokedHandler* value);
    HRESULT (STDMETHODCALLTYPE* ShowAsync)(__x_ABI_CWindows_CUI_CCore_CICoreWindowDialog* This,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CUI__CPopups__CIUICommand** asyncInfo);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CCore_CICoreWindowDialogVtbl;

    interface __x_ABI_CWindows_CUI_CCore_CICoreWindowDialog
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CCore_CICoreWindowDialogVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CCore_CICoreWindowDialog;
#endif /* !defined(____x_ABI_CWindows_CUI_CCore_CICoreWindowDialog_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CCore_CICoreWindowDialogFactory_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CCore_CICoreWindowDialogFactory_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CCore_CICoreWindowDialogFactoryVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CCore_CICoreWindowDialogFactory* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CCore_CICoreWindowDialogFactory* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CCore_CICoreWindowDialogFactory* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CCore_CICoreWindowDialogFactory* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CCore_CICoreWindowDialogFactory* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CCore_CICoreWindowDialogFactory* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* CreateWithTitle)(__x_ABI_CWindows_CUI_CCore_CICoreWindowDialogFactory* This,
        HSTRING title,
        __x_ABI_CWindows_CUI_CCore_CICoreWindowDialog** coreWindowDialog);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CCore_CICoreWindowDialogFactoryVtbl;

    interface __x_ABI_CWindows_CUI_CCore_CICoreWindowDialogFactory
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CCore_CICoreWindowDialogFactoryVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CCore_CICoreWindowDialogFactory;
#endif /* !defined(____x_ABI_CWindows_CUI_CCore_CICoreWindowDialogFactory_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CCore_CICoreWindowEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CCore_CICoreWindowEventArgs_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CCore_CICoreWindowEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CCore_CICoreWindowEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CCore_CICoreWindowEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CCore_CICoreWindowEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CCore_CICoreWindowEventArgs* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CCore_CICoreWindowEventArgs* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CCore_CICoreWindowEventArgs* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Handled)(__x_ABI_CWindows_CUI_CCore_CICoreWindowEventArgs* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* put_Handled)(__x_ABI_CWindows_CUI_CCore_CICoreWindowEventArgs* This,
        boolean value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CCore_CICoreWindowEventArgsVtbl;

    interface __x_ABI_CWindows_CUI_CCore_CICoreWindowEventArgs
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CCore_CICoreWindowEventArgsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CCore_CICoreWindowEventArgs;
#endif /* !defined(____x_ABI_CWindows_CUI_CCore_CICoreWindowEventArgs_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CCore_CICoreWindowFlyout_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CCore_CICoreWindowFlyout_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CCore_CICoreWindowFlyoutVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CCore_CICoreWindowFlyout* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CCore_CICoreWindowFlyout* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CCore_CICoreWindowFlyout* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CCore_CICoreWindowFlyout* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CCore_CICoreWindowFlyout* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CCore_CICoreWindowFlyout* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* add_Showing)(__x_ABI_CWindows_CUI_CCore_CICoreWindowFlyout* This,
        __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CCoreWindowPopupShowingEventArgs* handler,
        EventRegistrationToken* cookie);
    HRESULT (STDMETHODCALLTYPE* remove_Showing)(__x_ABI_CWindows_CUI_CCore_CICoreWindowFlyout* This,
        EventRegistrationToken cookie);
    HRESULT (STDMETHODCALLTYPE* get_MaxSize)(__x_ABI_CWindows_CUI_CCore_CICoreWindowFlyout* This,
        struct __x_ABI_CWindows_CFoundation_CSize* value);
    HRESULT (STDMETHODCALLTYPE* get_MinSize)(__x_ABI_CWindows_CUI_CCore_CICoreWindowFlyout* This,
        struct __x_ABI_CWindows_CFoundation_CSize* value);
    HRESULT (STDMETHODCALLTYPE* get_Title)(__x_ABI_CWindows_CUI_CCore_CICoreWindowFlyout* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* put_Title)(__x_ABI_CWindows_CUI_CCore_CICoreWindowFlyout* This,
        HSTRING value);
    HRESULT (STDMETHODCALLTYPE* get_IsInteractionDelayed)(__x_ABI_CWindows_CUI_CCore_CICoreWindowFlyout* This,
        INT32* value);
    HRESULT (STDMETHODCALLTYPE* put_IsInteractionDelayed)(__x_ABI_CWindows_CUI_CCore_CICoreWindowFlyout* This,
        INT32 value);
    HRESULT (STDMETHODCALLTYPE* get_Commands)(__x_ABI_CWindows_CUI_CCore_CICoreWindowFlyout* This,
        __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CPopups__CIUICommand** value);
    HRESULT (STDMETHODCALLTYPE* get_DefaultCommandIndex)(__x_ABI_CWindows_CUI_CCore_CICoreWindowFlyout* This,
        UINT32* value);
    HRESULT (STDMETHODCALLTYPE* put_DefaultCommandIndex)(__x_ABI_CWindows_CUI_CCore_CICoreWindowFlyout* This,
        UINT32 value);
    HRESULT (STDMETHODCALLTYPE* get_BackButtonCommand)(__x_ABI_CWindows_CUI_CCore_CICoreWindowFlyout* This,
        __x_ABI_CWindows_CUI_CPopups_CIUICommandInvokedHandler** value);
    HRESULT (STDMETHODCALLTYPE* put_BackButtonCommand)(__x_ABI_CWindows_CUI_CCore_CICoreWindowFlyout* This,
        __x_ABI_CWindows_CUI_CPopups_CIUICommandInvokedHandler* value);
    HRESULT (STDMETHODCALLTYPE* ShowAsync)(__x_ABI_CWindows_CUI_CCore_CICoreWindowFlyout* This,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CUI__CPopups__CIUICommand** asyncInfo);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CCore_CICoreWindowFlyoutVtbl;

    interface __x_ABI_CWindows_CUI_CCore_CICoreWindowFlyout
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CCore_CICoreWindowFlyoutVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CCore_CICoreWindowFlyout;
#endif /* !defined(____x_ABI_CWindows_CUI_CCore_CICoreWindowFlyout_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CCore_CICoreWindowFlyoutFactory_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CCore_CICoreWindowFlyoutFactory_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CCore_CICoreWindowFlyoutFactoryVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CCore_CICoreWindowFlyoutFactory* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CCore_CICoreWindowFlyoutFactory* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CCore_CICoreWindowFlyoutFactory* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CCore_CICoreWindowFlyoutFactory* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CCore_CICoreWindowFlyoutFactory* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CCore_CICoreWindowFlyoutFactory* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* Create)(__x_ABI_CWindows_CUI_CCore_CICoreWindowFlyoutFactory* This,
        struct __x_ABI_CWindows_CFoundation_CPoint position,
        __x_ABI_CWindows_CUI_CCore_CICoreWindowFlyout** coreWindowFlyout);
    HRESULT (STDMETHODCALLTYPE* CreateWithTitle)(__x_ABI_CWindows_CUI_CCore_CICoreWindowFlyoutFactory* This,
        struct __x_ABI_CWindows_CFoundation_CPoint position,
        HSTRING title,
        __x_ABI_CWindows_CUI_CCore_CICoreWindowFlyout** coreWindowFlyout);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CCore_CICoreWindowFlyoutFactoryVtbl;

    interface __x_ABI_CWindows_CUI_CCore_CICoreWindowFlyoutFactory
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CCore_CICoreWindowFlyoutFactoryVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CCore_CICoreWindowFlyoutFactory;
#endif /* !defined(____x_ABI_CWindows_CUI_CCore_CICoreWindowFlyoutFactory_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CCore_CICoreWindowPopupShowingEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CCore_CICoreWindowPopupShowingEventArgs_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CCore_CICoreWindowPopupShowingEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CCore_CICoreWindowPopupShowingEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CCore_CICoreWindowPopupShowingEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CCore_CICoreWindowPopupShowingEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CCore_CICoreWindowPopupShowingEventArgs* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CCore_CICoreWindowPopupShowingEventArgs* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CCore_CICoreWindowPopupShowingEventArgs* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* SetDesiredSize)(__x_ABI_CWindows_CUI_CCore_CICoreWindowPopupShowingEventArgs* This,
        struct __x_ABI_CWindows_CFoundation_CSize value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CCore_CICoreWindowPopupShowingEventArgsVtbl;

    interface __x_ABI_CWindows_CUI_CCore_CICoreWindowPopupShowingEventArgs
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CCore_CICoreWindowPopupShowingEventArgsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CCore_CICoreWindowPopupShowingEventArgs;
#endif /* !defined(____x_ABI_CWindows_CUI_CCore_CICoreWindowPopupShowingEventArgs_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CCore_CICoreWindowResizeManager_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CCore_CICoreWindowResizeManager_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CCore_CICoreWindowResizeManagerVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CCore_CICoreWindowResizeManager* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CCore_CICoreWindowResizeManager* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CCore_CICoreWindowResizeManager* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CCore_CICoreWindowResizeManager* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CCore_CICoreWindowResizeManager* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CCore_CICoreWindowResizeManager* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* NotifyLayoutCompleted)(__x_ABI_CWindows_CUI_CCore_CICoreWindowResizeManager* This);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CCore_CICoreWindowResizeManagerVtbl;

    interface __x_ABI_CWindows_CUI_CCore_CICoreWindowResizeManager
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CCore_CICoreWindowResizeManagerVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CCore_CICoreWindowResizeManager;
#endif /* !defined(____x_ABI_CWindows_CUI_CCore_CICoreWindowResizeManager_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CCore_CICoreWindowResizeManagerLayoutCapability_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CCore_CICoreWindowResizeManagerLayoutCapability_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CCore_CICoreWindowResizeManagerLayoutCapabilityVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CCore_CICoreWindowResizeManagerLayoutCapability* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CCore_CICoreWindowResizeManagerLayoutCapability* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CCore_CICoreWindowResizeManagerLayoutCapability* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CCore_CICoreWindowResizeManagerLayoutCapability* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CCore_CICoreWindowResizeManagerLayoutCapability* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CCore_CICoreWindowResizeManagerLayoutCapability* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* put_ShouldWaitForLayoutCompletion)(__x_ABI_CWindows_CUI_CCore_CICoreWindowResizeManagerLayoutCapability* This,
        boolean value);
    HRESULT (STDMETHODCALLTYPE* get_ShouldWaitForLayoutCompletion)(__x_ABI_CWindows_CUI_CCore_CICoreWindowResizeManagerLayoutCapability* This,
        boolean* value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CCore_CICoreWindowResizeManagerLayoutCapabilityVtbl;

    interface __x_ABI_CWindows_CUI_CCore_CICoreWindowResizeManagerLayoutCapability
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CCore_CICoreWindowResizeManagerLayoutCapabilityVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CCore_CICoreWindowResizeManagerLayoutCapability;
#endif /* !defined(____x_ABI_CWindows_CUI_CCore_CICoreWindowResizeManagerLayoutCapability_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CCore_CICoreWindowResizeManagerStatics_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CCore_CICoreWindowResizeManagerStatics_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CCore_CICoreWindowResizeManagerStaticsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CCore_CICoreWindowResizeManagerStatics* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CCore_CICoreWindowResizeManagerStatics* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CCore_CICoreWindowResizeManagerStatics* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CCore_CICoreWindowResizeManagerStatics* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CCore_CICoreWindowResizeManagerStatics* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CCore_CICoreWindowResizeManagerStatics* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetForCurrentView)(__x_ABI_CWindows_CUI_CCore_CICoreWindowResizeManagerStatics* This,
        __x_ABI_CWindows_CUI_CCore_CICoreWindowResizeManager** CoreWindowResizeManager);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CCore_CICoreWindowResizeManagerStaticsVtbl;

    interface __x_ABI_CWindows_CUI_CCore_CICoreWindowResizeManagerStatics
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CCore_CICoreWindowResizeManagerStaticsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CCore_CICoreWindowResizeManagerStatics;
#endif /* !defined(____x_ABI_CWindows_CUI_CCore_CICoreWindowResizeManagerStatics_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CCore_CICoreWindowStatic_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CCore_CICoreWindowStatic_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CCore_CICoreWindowStaticVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CCore_CICoreWindowStatic* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CCore_CICoreWindowStatic* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CCore_CICoreWindowStatic* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CCore_CICoreWindowStatic* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CCore_CICoreWindowStatic* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CCore_CICoreWindowStatic* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetForCurrentThread)(__x_ABI_CWindows_CUI_CCore_CICoreWindowStatic* This,
        __x_ABI_CWindows_CUI_CCore_CICoreWindow** ppWindow);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CCore_CICoreWindowStaticVtbl;

    interface __x_ABI_CWindows_CUI_CCore_CICoreWindowStatic
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CCore_CICoreWindowStaticVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CCore_CICoreWindowStatic;
#endif /* !defined(____x_ABI_CWindows_CUI_CCore_CICoreWindowStatic_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CCore_CICoreWindowWithContext_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CCore_CICoreWindowWithContext_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CCore_CICoreWindowWithContextVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CCore_CICoreWindowWithContext* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CCore_CICoreWindowWithContext* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CCore_CICoreWindowWithContext* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CCore_CICoreWindowWithContext* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CCore_CICoreWindowWithContext* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CCore_CICoreWindowWithContext* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_UIContext)(__x_ABI_CWindows_CUI_CCore_CICoreWindowWithContext* This,
        __x_ABI_CWindows_CUI_CIUIContext** value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CCore_CICoreWindowWithContextVtbl;

    interface __x_ABI_CWindows_CUI_CCore_CICoreWindowWithContext
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CCore_CICoreWindowWithContextVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CCore_CICoreWindowWithContext;
#endif /* !defined(____x_ABI_CWindows_CUI_CCore_CICoreWindowWithContext_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CCore_CIIdleDispatchedHandlerArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CCore_CIIdleDispatchedHandlerArgs_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CCore_CIIdleDispatchedHandlerArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CCore_CIIdleDispatchedHandlerArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CCore_CIIdleDispatchedHandlerArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CCore_CIIdleDispatchedHandlerArgs* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CCore_CIIdleDispatchedHandlerArgs* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CCore_CIIdleDispatchedHandlerArgs* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CCore_CIIdleDispatchedHandlerArgs* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_IsDispatcherIdle)(__x_ABI_CWindows_CUI_CCore_CIIdleDispatchedHandlerArgs* This,
        boolean* value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CCore_CIIdleDispatchedHandlerArgsVtbl;

    interface __x_ABI_CWindows_CUI_CCore_CIIdleDispatchedHandlerArgs
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CCore_CIIdleDispatchedHandlerArgsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CCore_CIIdleDispatchedHandlerArgs;
#endif /* !defined(____x_ABI_CWindows_CUI_CCore_CIIdleDispatchedHandlerArgs_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CCore_CIInitializeWithCoreWindow_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CCore_CIInitializeWithCoreWindow_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CCore_CIInitializeWithCoreWindowVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CCore_CIInitializeWithCoreWindow* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CCore_CIInitializeWithCoreWindow* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CCore_CIInitializeWithCoreWindow* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CCore_CIInitializeWithCoreWindow* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CCore_CIInitializeWithCoreWindow* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CCore_CIInitializeWithCoreWindow* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* Initialize)(__x_ABI_CWindows_CUI_CCore_CIInitializeWithCoreWindow* This,
        __x_ABI_CWindows_CUI_CCore_CICoreWindow* window);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CCore_CIInitializeWithCoreWindowVtbl;

    interface __x_ABI_CWindows_CUI_CCore_CIInitializeWithCoreWindow
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CCore_CIInitializeWithCoreWindowVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CCore_CIInitializeWithCoreWindow;
#endif /* !defined(____x_ABI_CWindows_CUI_CCore_CIInitializeWithCoreWindow_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CCore_CIInputEnabledEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CCore_CIInputEnabledEventArgs_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CCore_CIInputEnabledEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CCore_CIInputEnabledEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CCore_CIInputEnabledEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CCore_CIInputEnabledEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CCore_CIInputEnabledEventArgs* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CCore_CIInputEnabledEventArgs* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CCore_CIInputEnabledEventArgs* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_InputEnabled)(__x_ABI_CWindows_CUI_CCore_CIInputEnabledEventArgs* This,
        boolean* value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CCore_CIInputEnabledEventArgsVtbl;

    interface __x_ABI_CWindows_CUI_CCore_CIInputEnabledEventArgs
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CCore_CIInputEnabledEventArgsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CCore_CIInputEnabledEventArgs;
#endif /* !defined(____x_ABI_CWindows_CUI_CCore_CIInputEnabledEventArgs_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CCore_CIKeyEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CCore_CIKeyEventArgs_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CCore_CIKeyEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CCore_CIKeyEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CCore_CIKeyEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CCore_CIKeyEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CCore_CIKeyEventArgs* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CCore_CIKeyEventArgs* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CCore_CIKeyEventArgs* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_VirtualKey)(__x_ABI_CWindows_CUI_CCore_CIKeyEventArgs* This,
        enum __x_ABI_CWindows_CSystem_CVirtualKey* value);
    HRESULT (STDMETHODCALLTYPE* get_KeyStatus)(__x_ABI_CWindows_CUI_CCore_CIKeyEventArgs* This,
        struct __x_ABI_CWindows_CUI_CCore_CCorePhysicalKeyStatus* value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CCore_CIKeyEventArgsVtbl;

    interface __x_ABI_CWindows_CUI_CCore_CIKeyEventArgs
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CCore_CIKeyEventArgsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CCore_CIKeyEventArgs;
#endif /* !defined(____x_ABI_CWindows_CUI_CCore_CIKeyEventArgs_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CCore_CIKeyEventArgs2_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CCore_CIKeyEventArgs2_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CCore_CIKeyEventArgs2Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CCore_CIKeyEventArgs2* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CCore_CIKeyEventArgs2* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CCore_CIKeyEventArgs2* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CCore_CIKeyEventArgs2* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CCore_CIKeyEventArgs2* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CCore_CIKeyEventArgs2* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_DeviceId)(__x_ABI_CWindows_CUI_CCore_CIKeyEventArgs2* This,
        HSTRING* value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CCore_CIKeyEventArgs2Vtbl;

    interface __x_ABI_CWindows_CUI_CCore_CIKeyEventArgs2
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CCore_CIKeyEventArgs2Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CCore_CIKeyEventArgs2;
#endif /* !defined(____x_ABI_CWindows_CUI_CCore_CIKeyEventArgs2_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CCore_CIPointerEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CCore_CIPointerEventArgs_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CCore_CIPointerEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CCore_CIPointerEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CCore_CIPointerEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CCore_CIPointerEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CCore_CIPointerEventArgs* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CCore_CIPointerEventArgs* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CCore_CIPointerEventArgs* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_CurrentPoint)(__x_ABI_CWindows_CUI_CCore_CIPointerEventArgs* This,
        __x_ABI_CWindows_CUI_CInput_CIPointerPoint** value);
    HRESULT (STDMETHODCALLTYPE* get_KeyModifiers)(__x_ABI_CWindows_CUI_CCore_CIPointerEventArgs* This,
        enum __x_ABI_CWindows_CSystem_CVirtualKeyModifiers* value);
    HRESULT (STDMETHODCALLTYPE* GetIntermediatePoints)(__x_ABI_CWindows_CUI_CCore_CIPointerEventArgs* This,
        __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CInput__CPointerPoint** value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CCore_CIPointerEventArgsVtbl;

    interface __x_ABI_CWindows_CUI_CCore_CIPointerEventArgs
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CCore_CIPointerEventArgsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CCore_CIPointerEventArgs;
#endif /* !defined(____x_ABI_CWindows_CUI_CCore_CIPointerEventArgs_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CCore_CISystemNavigationManager_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CCore_CISystemNavigationManager_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CCore_CISystemNavigationManagerVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CCore_CISystemNavigationManager* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CCore_CISystemNavigationManager* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CCore_CISystemNavigationManager* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CCore_CISystemNavigationManager* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CCore_CISystemNavigationManager* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CCore_CISystemNavigationManager* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* add_BackRequested)(__x_ABI_CWindows_CUI_CCore_CISystemNavigationManager* This,
        __x_ABI_C__FIEventHandler_1___x_ABI_CWindows__CUI__CCore__CBackRequestedEventArgs* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_BackRequested)(__x_ABI_CWindows_CUI_CCore_CISystemNavigationManager* This,
        EventRegistrationToken token);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CCore_CISystemNavigationManagerVtbl;

    interface __x_ABI_CWindows_CUI_CCore_CISystemNavigationManager
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CCore_CISystemNavigationManagerVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CCore_CISystemNavigationManager;
#endif /* !defined(____x_ABI_CWindows_CUI_CCore_CISystemNavigationManager_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CCore_CISystemNavigationManager2_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CCore_CISystemNavigationManager2_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CCore_CISystemNavigationManager2Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CCore_CISystemNavigationManager2* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CCore_CISystemNavigationManager2* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CCore_CISystemNavigationManager2* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CCore_CISystemNavigationManager2* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CCore_CISystemNavigationManager2* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CCore_CISystemNavigationManager2* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_AppViewBackButtonVisibility)(__x_ABI_CWindows_CUI_CCore_CISystemNavigationManager2* This,
        enum __x_ABI_CWindows_CUI_CCore_CAppViewBackButtonVisibility* value);
    HRESULT (STDMETHODCALLTYPE* put_AppViewBackButtonVisibility)(__x_ABI_CWindows_CUI_CCore_CISystemNavigationManager2* This,
        enum __x_ABI_CWindows_CUI_CCore_CAppViewBackButtonVisibility value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CCore_CISystemNavigationManager2Vtbl;

    interface __x_ABI_CWindows_CUI_CCore_CISystemNavigationManager2
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CCore_CISystemNavigationManager2Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CCore_CISystemNavigationManager2;
#endif /* !defined(____x_ABI_CWindows_CUI_CCore_CISystemNavigationManager2_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CCore_CISystemNavigationManagerStatics_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CCore_CISystemNavigationManagerStatics_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CCore_CISystemNavigationManagerStaticsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CCore_CISystemNavigationManagerStatics* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CCore_CISystemNavigationManagerStatics* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CCore_CISystemNavigationManagerStatics* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CCore_CISystemNavigationManagerStatics* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CCore_CISystemNavigationManagerStatics* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CCore_CISystemNavigationManagerStatics* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetForCurrentView)(__x_ABI_CWindows_CUI_CCore_CISystemNavigationManagerStatics* This,
        __x_ABI_CWindows_CUI_CCore_CISystemNavigationManager** loader);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CCore_CISystemNavigationManagerStaticsVtbl;

    interface __x_ABI_CWindows_CUI_CCore_CISystemNavigationManagerStatics
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CCore_CISystemNavigationManagerStaticsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CCore_CISystemNavigationManagerStatics;
#endif /* !defined(____x_ABI_CWindows_CUI_CCore_CISystemNavigationManagerStatics_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CCore_CITouchHitTestingEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CCore_CITouchHitTestingEventArgs_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CCore_CITouchHitTestingEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CCore_CITouchHitTestingEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CCore_CITouchHitTestingEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CCore_CITouchHitTestingEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CCore_CITouchHitTestingEventArgs* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CCore_CITouchHitTestingEventArgs* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CCore_CITouchHitTestingEventArgs* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_ProximityEvaluation)(__x_ABI_CWindows_CUI_CCore_CITouchHitTestingEventArgs* This,
        struct __x_ABI_CWindows_CUI_CCore_CCoreProximityEvaluation* value);
    HRESULT (STDMETHODCALLTYPE* put_ProximityEvaluation)(__x_ABI_CWindows_CUI_CCore_CITouchHitTestingEventArgs* This,
        struct __x_ABI_CWindows_CUI_CCore_CCoreProximityEvaluation value);
    HRESULT (STDMETHODCALLTYPE* get_Point)(__x_ABI_CWindows_CUI_CCore_CITouchHitTestingEventArgs* This,
        struct __x_ABI_CWindows_CFoundation_CPoint* value);
    HRESULT (STDMETHODCALLTYPE* get_BoundingBox)(__x_ABI_CWindows_CUI_CCore_CITouchHitTestingEventArgs* This,
        struct __x_ABI_CWindows_CFoundation_CRect* value);
    HRESULT (STDMETHODCALLTYPE* EvaluateProximityToRect)(__x_ABI_CWindows_CUI_CCore_CITouchHitTestingEventArgs* This,
        struct __x_ABI_CWindows_CFoundation_CRect controlBoundingBox,
        struct __x_ABI_CWindows_CUI_CCore_CCoreProximityEvaluation* proximityEvaluation);
    HRESULT (STDMETHODCALLTYPE* EvaluateProximityToPolygon)(__x_ABI_CWindows_CUI_CCore_CITouchHitTestingEventArgs* This,
        UINT32 controlVerticesLength,
        struct __x_ABI_CWindows_CFoundation_CPoint* controlVertices,
        struct __x_ABI_CWindows_CUI_CCore_CCoreProximityEvaluation* proximityEvaluation);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CCore_CITouchHitTestingEventArgsVtbl;

    interface __x_ABI_CWindows_CUI_CCore_CITouchHitTestingEventArgs
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CCore_CITouchHitTestingEventArgsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CCore_CITouchHitTestingEventArgs;
#endif /* !defined(____x_ABI_CWindows_CUI_CCore_CITouchHitTestingEventArgs_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CCore_CIVisibilityChangedEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CCore_CIVisibilityChangedEventArgs_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CCore_CIVisibilityChangedEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CCore_CIVisibilityChangedEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CCore_CIVisibilityChangedEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CCore_CIVisibilityChangedEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CCore_CIVisibilityChangedEventArgs* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CCore_CIVisibilityChangedEventArgs* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CCore_CIVisibilityChangedEventArgs* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Visible)(__x_ABI_CWindows_CUI_CCore_CIVisibilityChangedEventArgs* This,
        boolean* value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CCore_CIVisibilityChangedEventArgsVtbl;

    interface __x_ABI_CWindows_CUI_CCore_CIVisibilityChangedEventArgs
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CCore_CIVisibilityChangedEventArgsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CCore_CIVisibilityChangedEventArgs;
#endif /* !defined(____x_ABI_CWindows_CUI_CCore_CIVisibilityChangedEventArgs_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CCore_CIWindowActivatedEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CCore_CIWindowActivatedEventArgs_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CCore_CIWindowActivatedEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CCore_CIWindowActivatedEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CCore_CIWindowActivatedEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CCore_CIWindowActivatedEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CCore_CIWindowActivatedEventArgs* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CCore_CIWindowActivatedEventArgs* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CCore_CIWindowActivatedEventArgs* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_WindowActivationState)(__x_ABI_CWindows_CUI_CCore_CIWindowActivatedEventArgs* This,
        enum __x_ABI_CWindows_CUI_CCore_CCoreWindowActivationState* value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CCore_CIWindowActivatedEventArgsVtbl;

    interface __x_ABI_CWindows_CUI_CCore_CIWindowActivatedEventArgs
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CCore_CIWindowActivatedEventArgsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CCore_CIWindowActivatedEventArgs;
#endif /* !defined(____x_ABI_CWindows_CUI_CCore_CIWindowActivatedEventArgs_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CCore_CIWindowSizeChangedEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CCore_CIWindowSizeChangedEventArgs_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CCore_CIWindowSizeChangedEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CCore_CIWindowSizeChangedEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CCore_CIWindowSizeChangedEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CCore_CIWindowSizeChangedEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CCore_CIWindowSizeChangedEventArgs* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CCore_CIWindowSizeChangedEventArgs* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CCore_CIWindowSizeChangedEventArgs* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_CWindows_CUI_CCore_CIWindowSizeChangedEventArgs* This,
        struct __x_ABI_CWindows_CFoundation_CSize* value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CCore_CIWindowSizeChangedEventArgsVtbl;

    interface __x_ABI_CWindows_CUI_CCore_CIWindowSizeChangedEventArgs
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CCore_CIWindowSizeChangedEventArgsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CCore_CIWindowSizeChangedEventArgs;
#endif /* !defined(____x_ABI_CWindows_CUI_CCore_CIWindowSizeChangedEventArgs_INTERFACE_DEFINED__) */
    

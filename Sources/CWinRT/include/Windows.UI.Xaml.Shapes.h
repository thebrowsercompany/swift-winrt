// WARNING: Please don't edit this file. It was generated by Swift/WinRT v0.0.1

#pragma once
// Header files for imported files
#include <inspectable.h>
#include <EventToken.h>
#include <windowscontracts.h>
#include "Windows.Foundation.h"
#include "Windows.UI.Composition.h"
#include "Windows.UI.Xaml.h"
#include "Windows.UI.Xaml.Media.h"
// Importing Collections header
#include "Windows.Foundation.Collections.h"

/* Forward Declarations */
#ifndef ____x_ABI_CWindows_CUI_CXaml_CShapes_CIEllipse_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CShapes_CIEllipse_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CShapes_CIEllipse __x_ABI_CWindows_CUI_CXaml_CShapes_CIEllipse;

#endif // ____x_ABI_CWindows_CUI_CXaml_CShapes_CIEllipse_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CShapes_CILine_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CShapes_CILine_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CShapes_CILine __x_ABI_CWindows_CUI_CXaml_CShapes_CILine;

#endif // ____x_ABI_CWindows_CUI_CXaml_CShapes_CILine_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CShapes_CILineStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CShapes_CILineStatics_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CShapes_CILineStatics __x_ABI_CWindows_CUI_CXaml_CShapes_CILineStatics;

#endif // ____x_ABI_CWindows_CUI_CXaml_CShapes_CILineStatics_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CShapes_CIPath_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CShapes_CIPath_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CShapes_CIPath __x_ABI_CWindows_CUI_CXaml_CShapes_CIPath;

#endif // ____x_ABI_CWindows_CUI_CXaml_CShapes_CIPath_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CShapes_CIPathFactory_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CShapes_CIPathFactory_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CShapes_CIPathFactory __x_ABI_CWindows_CUI_CXaml_CShapes_CIPathFactory;

#endif // ____x_ABI_CWindows_CUI_CXaml_CShapes_CIPathFactory_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CShapes_CIPathStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CShapes_CIPathStatics_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CShapes_CIPathStatics __x_ABI_CWindows_CUI_CXaml_CShapes_CIPathStatics;

#endif // ____x_ABI_CWindows_CUI_CXaml_CShapes_CIPathStatics_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CShapes_CIPolygon_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CShapes_CIPolygon_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CShapes_CIPolygon __x_ABI_CWindows_CUI_CXaml_CShapes_CIPolygon;

#endif // ____x_ABI_CWindows_CUI_CXaml_CShapes_CIPolygon_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CShapes_CIPolygonStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CShapes_CIPolygonStatics_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CShapes_CIPolygonStatics __x_ABI_CWindows_CUI_CXaml_CShapes_CIPolygonStatics;

#endif // ____x_ABI_CWindows_CUI_CXaml_CShapes_CIPolygonStatics_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CShapes_CIPolyline_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CShapes_CIPolyline_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CShapes_CIPolyline __x_ABI_CWindows_CUI_CXaml_CShapes_CIPolyline;

#endif // ____x_ABI_CWindows_CUI_CXaml_CShapes_CIPolyline_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CShapes_CIPolylineStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CShapes_CIPolylineStatics_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CShapes_CIPolylineStatics __x_ABI_CWindows_CUI_CXaml_CShapes_CIPolylineStatics;

#endif // ____x_ABI_CWindows_CUI_CXaml_CShapes_CIPolylineStatics_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CShapes_CIRectangle_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CShapes_CIRectangle_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CShapes_CIRectangle __x_ABI_CWindows_CUI_CXaml_CShapes_CIRectangle;

#endif // ____x_ABI_CWindows_CUI_CXaml_CShapes_CIRectangle_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CShapes_CIRectangleStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CShapes_CIRectangleStatics_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CShapes_CIRectangleStatics __x_ABI_CWindows_CUI_CXaml_CShapes_CIRectangleStatics;

#endif // ____x_ABI_CWindows_CUI_CXaml_CShapes_CIRectangleStatics_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CShapes_CIShape_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CShapes_CIShape_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CShapes_CIShape __x_ABI_CWindows_CUI_CXaml_CShapes_CIShape;

#endif // ____x_ABI_CWindows_CUI_CXaml_CShapes_CIShape_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CShapes_CIShape2_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CShapes_CIShape2_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CShapes_CIShape2 __x_ABI_CWindows_CUI_CXaml_CShapes_CIShape2;

#endif // ____x_ABI_CWindows_CUI_CXaml_CShapes_CIShape2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CShapes_CIShapeFactory_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CShapes_CIShapeFactory_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CShapes_CIShapeFactory __x_ABI_CWindows_CUI_CXaml_CShapes_CIShapeFactory;

#endif // ____x_ABI_CWindows_CUI_CXaml_CShapes_CIShapeFactory_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CShapes_CIShapeStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CShapes_CIShapeStatics_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CShapes_CIShapeStatics __x_ABI_CWindows_CUI_CXaml_CShapes_CIShapeStatics;

#endif // ____x_ABI_CWindows_CUI_CXaml_CShapes_CIShapeStatics_FWD_DEFINED__

// Parameterized interface forward declarations (C)

// Collection interface definitions

#ifndef ____x_ABI_CWindows_CUI_CComposition_CICompositionBrush_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CComposition_CICompositionBrush_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CComposition_CICompositionBrush __x_ABI_CWindows_CUI_CComposition_CICompositionBrush;

#endif // ____x_ABI_CWindows_CUI_CComposition_CICompositionBrush_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CComposition_CIAnimationObject_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CComposition_CIAnimationObject_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CComposition_CIAnimationObject __x_ABI_CWindows_CUI_CComposition_CIAnimationObject;

#endif // ____x_ABI_CWindows_CUI_CComposition_CIAnimationObject_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CComposition_CIVisualElement_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CComposition_CIVisualElement_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CComposition_CIVisualElement __x_ABI_CWindows_CUI_CComposition_CIVisualElement;

#endif // ____x_ABI_CWindows_CUI_CComposition_CIVisualElement_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CIDependencyProperty_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CIDependencyProperty_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty;

#endif // ____x_ABI_CWindows_CUI_CXaml_CIDependencyProperty_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CIDependencyObject_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CIDependencyObject_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CIDependencyObject __x_ABI_CWindows_CUI_CXaml_CIDependencyObject;

#endif // ____x_ABI_CWindows_CUI_CXaml_CIDependencyObject_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CIDependencyObject2_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CIDependencyObject2_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CIDependencyObject2 __x_ABI_CWindows_CUI_CXaml_CIDependencyObject2;

#endif // ____x_ABI_CWindows_CUI_CXaml_CIDependencyObject2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CIFrameworkElement_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CIFrameworkElement_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CIFrameworkElement __x_ABI_CWindows_CUI_CXaml_CIFrameworkElement;

#endif // ____x_ABI_CWindows_CUI_CXaml_CIFrameworkElement_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CIFrameworkElement2_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CIFrameworkElement2_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CIFrameworkElement2 __x_ABI_CWindows_CUI_CXaml_CIFrameworkElement2;

#endif // ____x_ABI_CWindows_CUI_CXaml_CIFrameworkElement2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CIFrameworkElement3_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CIFrameworkElement3_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CIFrameworkElement3 __x_ABI_CWindows_CUI_CXaml_CIFrameworkElement3;

#endif // ____x_ABI_CWindows_CUI_CXaml_CIFrameworkElement3_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CIFrameworkElement4_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CIFrameworkElement4_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CIFrameworkElement4 __x_ABI_CWindows_CUI_CXaml_CIFrameworkElement4;

#endif // ____x_ABI_CWindows_CUI_CXaml_CIFrameworkElement4_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CIFrameworkElement6_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CIFrameworkElement6_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CIFrameworkElement6 __x_ABI_CWindows_CUI_CXaml_CIFrameworkElement6;

#endif // ____x_ABI_CWindows_CUI_CXaml_CIFrameworkElement6_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CIFrameworkElement7_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CIFrameworkElement7_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CIFrameworkElement7 __x_ABI_CWindows_CUI_CXaml_CIFrameworkElement7;

#endif // ____x_ABI_CWindows_CUI_CXaml_CIFrameworkElement7_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CIFrameworkElementOverrides_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CIFrameworkElementOverrides_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CIFrameworkElementOverrides __x_ABI_CWindows_CUI_CXaml_CIFrameworkElementOverrides;

#endif // ____x_ABI_CWindows_CUI_CXaml_CIFrameworkElementOverrides_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CIFrameworkElementOverrides2_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CIFrameworkElementOverrides2_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CIFrameworkElementOverrides2 __x_ABI_CWindows_CUI_CXaml_CIFrameworkElementOverrides2;

#endif // ____x_ABI_CWindows_CUI_CXaml_CIFrameworkElementOverrides2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CIFrameworkElementProtected7_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CIFrameworkElementProtected7_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CIFrameworkElementProtected7 __x_ABI_CWindows_CUI_CXaml_CIFrameworkElementProtected7;

#endif // ____x_ABI_CWindows_CUI_CXaml_CIFrameworkElementProtected7_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CIUIElement_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CIUIElement_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CIUIElement __x_ABI_CWindows_CUI_CXaml_CIUIElement;

#endif // ____x_ABI_CWindows_CUI_CXaml_CIUIElement_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CIUIElement10_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CIUIElement10_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CIUIElement10 __x_ABI_CWindows_CUI_CXaml_CIUIElement10;

#endif // ____x_ABI_CWindows_CUI_CXaml_CIUIElement10_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CIUIElement2_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CIUIElement2_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CIUIElement2 __x_ABI_CWindows_CUI_CXaml_CIUIElement2;

#endif // ____x_ABI_CWindows_CUI_CXaml_CIUIElement2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CIUIElement3_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CIUIElement3_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CIUIElement3 __x_ABI_CWindows_CUI_CXaml_CIUIElement3;

#endif // ____x_ABI_CWindows_CUI_CXaml_CIUIElement3_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CIUIElement4_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CIUIElement4_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CIUIElement4 __x_ABI_CWindows_CUI_CXaml_CIUIElement4;

#endif // ____x_ABI_CWindows_CUI_CXaml_CIUIElement4_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CIUIElement5_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CIUIElement5_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CIUIElement5 __x_ABI_CWindows_CUI_CXaml_CIUIElement5;

#endif // ____x_ABI_CWindows_CUI_CXaml_CIUIElement5_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CIUIElement7_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CIUIElement7_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CIUIElement7 __x_ABI_CWindows_CUI_CXaml_CIUIElement7;

#endif // ____x_ABI_CWindows_CUI_CXaml_CIUIElement7_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CIUIElement8_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CIUIElement8_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CIUIElement8 __x_ABI_CWindows_CUI_CXaml_CIUIElement8;

#endif // ____x_ABI_CWindows_CUI_CXaml_CIUIElement8_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CIUIElement9_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CIUIElement9_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CIUIElement9 __x_ABI_CWindows_CUI_CXaml_CIUIElement9;

#endif // ____x_ABI_CWindows_CUI_CXaml_CIUIElement9_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CIUIElementOverrides_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CIUIElementOverrides_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CIUIElementOverrides __x_ABI_CWindows_CUI_CXaml_CIUIElementOverrides;

#endif // ____x_ABI_CWindows_CUI_CXaml_CIUIElementOverrides_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CIUIElementOverrides7_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CIUIElementOverrides7_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CIUIElementOverrides7 __x_ABI_CWindows_CUI_CXaml_CIUIElementOverrides7;

#endif // ____x_ABI_CWindows_CUI_CXaml_CIUIElementOverrides7_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CIUIElementOverrides8_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CIUIElementOverrides8_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CIUIElementOverrides8 __x_ABI_CWindows_CUI_CXaml_CIUIElementOverrides8;

#endif // ____x_ABI_CWindows_CUI_CXaml_CIUIElementOverrides8_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CIUIElementOverrides9_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CIUIElementOverrides9_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CIUIElementOverrides9 __x_ABI_CWindows_CUI_CXaml_CIUIElementOverrides9;

#endif // ____x_ABI_CWindows_CUI_CXaml_CIUIElementOverrides9_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CMedia_CIBrush_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CMedia_CIBrush_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CMedia_CIBrush __x_ABI_CWindows_CUI_CXaml_CMedia_CIBrush;

#endif // ____x_ABI_CWindows_CUI_CXaml_CMedia_CIBrush_FWD_DEFINED__

#if !defined(____x_ABI_C__FIIterator_1_double_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterator_1_double_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterator_1_double __x_ABI_C__FIIterator_1_double;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterator_1_double;

    typedef struct __x_ABI_C__FIIterator_1_doubleVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterator_1_double* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterator_1_double* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterator_1_double* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterator_1_double* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterator_1_double* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterator_1_double* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Current)(__x_ABI_C__FIIterator_1_double* This,
        DOUBLE* result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__x_ABI_C__FIIterator_1_double* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__x_ABI_C__FIIterator_1_double* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIIterator_1_double* This,
        UINT32 itemsLength,
        DOUBLE* items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIIterator_1_doubleVtbl;

    interface __x_ABI_C__FIIterator_1_double
    {
        CONST_VTBL struct __x_ABI_C__FIIterator_1_doubleVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterator_1_double_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterable_1_double_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterable_1_double_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterable_1_double __x_ABI_C__FIIterable_1_double;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterable_1_double;

    typedef struct __x_ABI_C__FIIterable_1_doubleVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterable_1_double* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterable_1_double* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterable_1_double* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterable_1_double* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterable_1_double* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterable_1_double* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* First)(__x_ABI_C__FIIterable_1_double* This,
        __x_ABI_C__FIIterator_1_double** result);

        END_INTERFACE
    } __x_ABI_C__FIIterable_1_doubleVtbl;

    interface __x_ABI_C__FIIterable_1_double
    {
        CONST_VTBL struct __x_ABI_C__FIIterable_1_doubleVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterable_1_double_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVectorView_1_double_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVectorView_1_double_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVectorView_1_double __x_ABI_C__FIVectorView_1_double;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVectorView_1_double;

    typedef struct __x_ABI_C__FIVectorView_1_doubleVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVectorView_1_double* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVectorView_1_double* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVectorView_1_double* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVectorView_1_double* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVectorView_1_double* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVectorView_1_double* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVectorView_1_double* This,
        UINT32 index,
        DOUBLE* result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVectorView_1_double* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVectorView_1_double* This,
        DOUBLE value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVectorView_1_double* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        DOUBLE* items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIVectorView_1_doubleVtbl;

    interface __x_ABI_C__FIVectorView_1_double
    {
        CONST_VTBL struct __x_ABI_C__FIVectorView_1_doubleVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVectorView_1_double_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVector_1_double_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVector_1_double_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVector_1_double __x_ABI_C__FIVector_1_double;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVector_1_double;

    typedef struct __x_ABI_C__FIVector_1_doubleVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVector_1_double* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVector_1_double* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVector_1_double* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVector_1_double* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVector_1_double* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVector_1_double* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVector_1_double* This,
        UINT32 index,
        DOUBLE* result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVector_1_double* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* GetView)(__x_ABI_C__FIVector_1_double* This,
        __x_ABI_C__FIVectorView_1_double** result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVector_1_double* This,
        DOUBLE value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* SetAt)(__x_ABI_C__FIVector_1_double* This,
        UINT32 index,
        DOUBLE value);
    HRESULT (STDMETHODCALLTYPE* InsertAt)(__x_ABI_C__FIVector_1_double* This,
        UINT32 index,
        DOUBLE value);
    HRESULT (STDMETHODCALLTYPE* RemoveAt)(__x_ABI_C__FIVector_1_double* This,
        UINT32 index);
    HRESULT (STDMETHODCALLTYPE* Append)(__x_ABI_C__FIVector_1_double* This,
        DOUBLE value);
    HRESULT (STDMETHODCALLTYPE* RemoveAtEnd)(__x_ABI_C__FIVector_1_double* This);
    HRESULT (STDMETHODCALLTYPE* Clear)(__x_ABI_C__FIVector_1_double* This);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVector_1_double* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        DOUBLE* items,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* ReplaceAll)(__x_ABI_C__FIVector_1_double* This,
        UINT32 itemsLength,
        DOUBLE* items);

        END_INTERFACE
    } __x_ABI_C__FIVector_1_doubleVtbl;

    interface __x_ABI_C__FIVector_1_double
    {
        CONST_VTBL struct __x_ABI_C__FIVector_1_doubleVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVector_1_double_INTERFACE_DEFINED__
    
typedef enum __x_ABI_CWindows_CUI_CXaml_CMedia_CFillRule __x_ABI_CWindows_CUI_CXaml_CMedia_CFillRule;

#ifndef ____x_ABI_CWindows_CUI_CXaml_CMedia_CIGeometry_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CMedia_CIGeometry_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CMedia_CIGeometry __x_ABI_CWindows_CUI_CXaml_CMedia_CIGeometry;

#endif // ____x_ABI_CWindows_CUI_CXaml_CMedia_CIGeometry_FWD_DEFINED__

typedef enum __x_ABI_CWindows_CUI_CXaml_CMedia_CPenLineCap __x_ABI_CWindows_CUI_CXaml_CMedia_CPenLineCap;

typedef enum __x_ABI_CWindows_CUI_CXaml_CMedia_CPenLineJoin __x_ABI_CWindows_CUI_CXaml_CMedia_CPenLineJoin;

typedef struct __x_ABI_CWindows_CFoundation_CPoint __x_ABI_CWindows_CFoundation_CPoint;

#if !defined(____x_ABI_C__FIIterator_1___x_ABI_CWindows__CFoundation__CPoint_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CFoundation__CPoint_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CFoundation__CPoint __x_ABI_C__FIIterator_1___x_ABI_CWindows__CFoundation__CPoint;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterator_1___x_ABI_CWindows__CFoundation__CPoint;

    typedef struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CFoundation__CPointVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CFoundation__CPoint* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CFoundation__CPoint* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CFoundation__CPoint* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CFoundation__CPoint* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CFoundation__CPoint* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CFoundation__CPoint* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Current)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CFoundation__CPoint* This,
        struct __x_ABI_CWindows_CFoundation_CPoint* result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CFoundation__CPoint* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CFoundation__CPoint* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CFoundation__CPoint* This,
        UINT32 itemsLength,
        struct __x_ABI_CWindows_CFoundation_CPoint* items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIIterator_1___x_ABI_CWindows__CFoundation__CPointVtbl;

    interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CFoundation__CPoint
    {
        CONST_VTBL struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CFoundation__CPointVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CFoundation__CPoint_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterable_1___x_ABI_CWindows__CFoundation__CPoint_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CFoundation__CPoint_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CFoundation__CPoint __x_ABI_C__FIIterable_1___x_ABI_CWindows__CFoundation__CPoint;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterable_1___x_ABI_CWindows__CFoundation__CPoint;

    typedef struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CFoundation__CPointVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CFoundation__CPoint* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CFoundation__CPoint* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CFoundation__CPoint* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CFoundation__CPoint* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CFoundation__CPoint* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CFoundation__CPoint* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* First)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CFoundation__CPoint* This,
        __x_ABI_C__FIIterator_1___x_ABI_CWindows__CFoundation__CPoint** result);

        END_INTERFACE
    } __x_ABI_C__FIIterable_1___x_ABI_CWindows__CFoundation__CPointVtbl;

    interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CFoundation__CPoint
    {
        CONST_VTBL struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CFoundation__CPointVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CFoundation__CPoint_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CFoundation__CPoint_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CFoundation__CPoint_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CFoundation__CPoint __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CFoundation__CPoint;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CFoundation__CPoint;

    typedef struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CFoundation__CPointVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CFoundation__CPoint* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CFoundation__CPoint* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CFoundation__CPoint* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CFoundation__CPoint* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CFoundation__CPoint* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CFoundation__CPoint* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CFoundation__CPoint* This,
        UINT32 index,
        struct __x_ABI_CWindows_CFoundation_CPoint* result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CFoundation__CPoint* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CFoundation__CPoint* This,
        struct __x_ABI_CWindows_CFoundation_CPoint value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CFoundation__CPoint* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        struct __x_ABI_CWindows_CFoundation_CPoint* items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CFoundation__CPointVtbl;

    interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CFoundation__CPoint
    {
        CONST_VTBL struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CFoundation__CPointVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CFoundation__CPoint_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVector_1___x_ABI_CWindows__CFoundation__CPoint_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVector_1___x_ABI_CWindows__CFoundation__CPoint_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVector_1___x_ABI_CWindows__CFoundation__CPoint __x_ABI_C__FIVector_1___x_ABI_CWindows__CFoundation__CPoint;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVector_1___x_ABI_CWindows__CFoundation__CPoint;

    typedef struct __x_ABI_C__FIVector_1___x_ABI_CWindows__CFoundation__CPointVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CFoundation__CPoint* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CFoundation__CPoint* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CFoundation__CPoint* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CFoundation__CPoint* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CFoundation__CPoint* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CFoundation__CPoint* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CFoundation__CPoint* This,
        UINT32 index,
        struct __x_ABI_CWindows_CFoundation_CPoint* result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CFoundation__CPoint* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* GetView)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CFoundation__CPoint* This,
        __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CFoundation__CPoint** result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CFoundation__CPoint* This,
        struct __x_ABI_CWindows_CFoundation_CPoint value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* SetAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CFoundation__CPoint* This,
        UINT32 index,
        struct __x_ABI_CWindows_CFoundation_CPoint value);
    HRESULT (STDMETHODCALLTYPE* InsertAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CFoundation__CPoint* This,
        UINT32 index,
        struct __x_ABI_CWindows_CFoundation_CPoint value);
    HRESULT (STDMETHODCALLTYPE* RemoveAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CFoundation__CPoint* This,
        UINT32 index);
    HRESULT (STDMETHODCALLTYPE* Append)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CFoundation__CPoint* This,
        struct __x_ABI_CWindows_CFoundation_CPoint value);
    HRESULT (STDMETHODCALLTYPE* RemoveAtEnd)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CFoundation__CPoint* This);
    HRESULT (STDMETHODCALLTYPE* Clear)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CFoundation__CPoint* This);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CFoundation__CPoint* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        struct __x_ABI_CWindows_CFoundation_CPoint* items,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* ReplaceAll)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CFoundation__CPoint* This,
        UINT32 itemsLength,
        struct __x_ABI_CWindows_CFoundation_CPoint* items);

        END_INTERFACE
    } __x_ABI_C__FIVector_1___x_ABI_CWindows__CFoundation__CPointVtbl;

    interface __x_ABI_C__FIVector_1___x_ABI_CWindows__CFoundation__CPoint
    {
        CONST_VTBL struct __x_ABI_C__FIVector_1___x_ABI_CWindows__CFoundation__CPointVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVector_1___x_ABI_CWindows__CFoundation__CPoint_INTERFACE_DEFINED__
    
typedef enum __x_ABI_CWindows_CUI_CXaml_CMedia_CStretch __x_ABI_CWindows_CUI_CXaml_CMedia_CStretch;

#ifndef ____x_ABI_CWindows_CUI_CXaml_CMedia_CITransform_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CMedia_CITransform_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CMedia_CITransform __x_ABI_CWindows_CUI_CXaml_CMedia_CITransform;

#endif // ____x_ABI_CWindows_CUI_CXaml_CMedia_CITransform_FWD_DEFINED__

#if !defined(____x_ABI_CWindows_CUI_CXaml_CShapes_CIEllipse_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CShapes_CIEllipse_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CShapes_CIEllipseVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CShapes_CIEllipse* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CShapes_CIEllipse* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CShapes_CIEllipse* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CShapes_CIEllipse* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CShapes_CIEllipse* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CShapes_CIEllipse* This,
            TrustLevel* trustLevel);
    
        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CShapes_CIEllipseVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CShapes_CIEllipse
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CShapes_CIEllipseVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CShapes_CIEllipse;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CShapes_CIEllipse_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CShapes_CILine_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CShapes_CILine_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CShapes_CILineVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CShapes_CILine* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CShapes_CILine* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CShapes_CILine* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CShapes_CILine* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CShapes_CILine* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CShapes_CILine* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_X1)(__x_ABI_CWindows_CUI_CXaml_CShapes_CILine* This,
        DOUBLE* value);
    HRESULT (STDMETHODCALLTYPE* put_X1)(__x_ABI_CWindows_CUI_CXaml_CShapes_CILine* This,
        DOUBLE value);
    HRESULT (STDMETHODCALLTYPE* get_Y1)(__x_ABI_CWindows_CUI_CXaml_CShapes_CILine* This,
        DOUBLE* value);
    HRESULT (STDMETHODCALLTYPE* put_Y1)(__x_ABI_CWindows_CUI_CXaml_CShapes_CILine* This,
        DOUBLE value);
    HRESULT (STDMETHODCALLTYPE* get_X2)(__x_ABI_CWindows_CUI_CXaml_CShapes_CILine* This,
        DOUBLE* value);
    HRESULT (STDMETHODCALLTYPE* put_X2)(__x_ABI_CWindows_CUI_CXaml_CShapes_CILine* This,
        DOUBLE value);
    HRESULT (STDMETHODCALLTYPE* get_Y2)(__x_ABI_CWindows_CUI_CXaml_CShapes_CILine* This,
        DOUBLE* value);
    HRESULT (STDMETHODCALLTYPE* put_Y2)(__x_ABI_CWindows_CUI_CXaml_CShapes_CILine* This,
        DOUBLE value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CShapes_CILineVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CShapes_CILine
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CShapes_CILineVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CShapes_CILine;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CShapes_CILine_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CShapes_CILineStatics_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CShapes_CILineStatics_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CShapes_CILineStaticsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CShapes_CILineStatics* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CShapes_CILineStatics* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CShapes_CILineStatics* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CShapes_CILineStatics* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CShapes_CILineStatics* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CShapes_CILineStatics* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_X1Property)(__x_ABI_CWindows_CUI_CXaml_CShapes_CILineStatics* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** value);
    HRESULT (STDMETHODCALLTYPE* get_Y1Property)(__x_ABI_CWindows_CUI_CXaml_CShapes_CILineStatics* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** value);
    HRESULT (STDMETHODCALLTYPE* get_X2Property)(__x_ABI_CWindows_CUI_CXaml_CShapes_CILineStatics* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** value);
    HRESULT (STDMETHODCALLTYPE* get_Y2Property)(__x_ABI_CWindows_CUI_CXaml_CShapes_CILineStatics* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CShapes_CILineStaticsVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CShapes_CILineStatics
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CShapes_CILineStaticsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CShapes_CILineStatics;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CShapes_CILineStatics_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CShapes_CIPath_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CShapes_CIPath_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CShapes_CIPathVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CShapes_CIPath* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CShapes_CIPath* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CShapes_CIPath* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CShapes_CIPath* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CShapes_CIPath* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CShapes_CIPath* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Data)(__x_ABI_CWindows_CUI_CXaml_CShapes_CIPath* This,
        __x_ABI_CWindows_CUI_CXaml_CMedia_CIGeometry** value);
    HRESULT (STDMETHODCALLTYPE* put_Data)(__x_ABI_CWindows_CUI_CXaml_CShapes_CIPath* This,
        __x_ABI_CWindows_CUI_CXaml_CMedia_CIGeometry* value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CShapes_CIPathVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CShapes_CIPath
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CShapes_CIPathVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CShapes_CIPath;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CShapes_CIPath_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CShapes_CIPathFactory_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CShapes_CIPathFactory_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CShapes_CIPathFactoryVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CShapes_CIPathFactory* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CShapes_CIPathFactory* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CShapes_CIPathFactory* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CShapes_CIPathFactory* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CShapes_CIPathFactory* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CShapes_CIPathFactory* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* CreateInstance)(__x_ABI_CWindows_CUI_CXaml_CShapes_CIPathFactory* This,
        IInspectable* baseInterface,
        IInspectable** innerInterface,
        __x_ABI_CWindows_CUI_CXaml_CShapes_CIPath** value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CShapes_CIPathFactoryVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CShapes_CIPathFactory
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CShapes_CIPathFactoryVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CShapes_CIPathFactory;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CShapes_CIPathFactory_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CShapes_CIPathStatics_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CShapes_CIPathStatics_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CShapes_CIPathStaticsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CShapes_CIPathStatics* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CShapes_CIPathStatics* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CShapes_CIPathStatics* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CShapes_CIPathStatics* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CShapes_CIPathStatics* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CShapes_CIPathStatics* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_DataProperty)(__x_ABI_CWindows_CUI_CXaml_CShapes_CIPathStatics* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CShapes_CIPathStaticsVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CShapes_CIPathStatics
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CShapes_CIPathStaticsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CShapes_CIPathStatics;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CShapes_CIPathStatics_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CShapes_CIPolygon_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CShapes_CIPolygon_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CShapes_CIPolygonVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CShapes_CIPolygon* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CShapes_CIPolygon* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CShapes_CIPolygon* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CShapes_CIPolygon* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CShapes_CIPolygon* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CShapes_CIPolygon* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_FillRule)(__x_ABI_CWindows_CUI_CXaml_CShapes_CIPolygon* This,
        enum __x_ABI_CWindows_CUI_CXaml_CMedia_CFillRule* value);
    HRESULT (STDMETHODCALLTYPE* put_FillRule)(__x_ABI_CWindows_CUI_CXaml_CShapes_CIPolygon* This,
        enum __x_ABI_CWindows_CUI_CXaml_CMedia_CFillRule value);
    HRESULT (STDMETHODCALLTYPE* get_Points)(__x_ABI_CWindows_CUI_CXaml_CShapes_CIPolygon* This,
        __x_ABI_C__FIVector_1___x_ABI_CWindows__CFoundation__CPoint** value);
    HRESULT (STDMETHODCALLTYPE* put_Points)(__x_ABI_CWindows_CUI_CXaml_CShapes_CIPolygon* This,
        __x_ABI_C__FIVector_1___x_ABI_CWindows__CFoundation__CPoint* value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CShapes_CIPolygonVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CShapes_CIPolygon
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CShapes_CIPolygonVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CShapes_CIPolygon;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CShapes_CIPolygon_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CShapes_CIPolygonStatics_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CShapes_CIPolygonStatics_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CShapes_CIPolygonStaticsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CShapes_CIPolygonStatics* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CShapes_CIPolygonStatics* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CShapes_CIPolygonStatics* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CShapes_CIPolygonStatics* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CShapes_CIPolygonStatics* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CShapes_CIPolygonStatics* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_FillRuleProperty)(__x_ABI_CWindows_CUI_CXaml_CShapes_CIPolygonStatics* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** value);
    HRESULT (STDMETHODCALLTYPE* get_PointsProperty)(__x_ABI_CWindows_CUI_CXaml_CShapes_CIPolygonStatics* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CShapes_CIPolygonStaticsVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CShapes_CIPolygonStatics
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CShapes_CIPolygonStaticsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CShapes_CIPolygonStatics;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CShapes_CIPolygonStatics_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CShapes_CIPolyline_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CShapes_CIPolyline_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CShapes_CIPolylineVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CShapes_CIPolyline* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CShapes_CIPolyline* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CShapes_CIPolyline* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CShapes_CIPolyline* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CShapes_CIPolyline* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CShapes_CIPolyline* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_FillRule)(__x_ABI_CWindows_CUI_CXaml_CShapes_CIPolyline* This,
        enum __x_ABI_CWindows_CUI_CXaml_CMedia_CFillRule* value);
    HRESULT (STDMETHODCALLTYPE* put_FillRule)(__x_ABI_CWindows_CUI_CXaml_CShapes_CIPolyline* This,
        enum __x_ABI_CWindows_CUI_CXaml_CMedia_CFillRule value);
    HRESULT (STDMETHODCALLTYPE* get_Points)(__x_ABI_CWindows_CUI_CXaml_CShapes_CIPolyline* This,
        __x_ABI_C__FIVector_1___x_ABI_CWindows__CFoundation__CPoint** value);
    HRESULT (STDMETHODCALLTYPE* put_Points)(__x_ABI_CWindows_CUI_CXaml_CShapes_CIPolyline* This,
        __x_ABI_C__FIVector_1___x_ABI_CWindows__CFoundation__CPoint* value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CShapes_CIPolylineVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CShapes_CIPolyline
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CShapes_CIPolylineVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CShapes_CIPolyline;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CShapes_CIPolyline_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CShapes_CIPolylineStatics_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CShapes_CIPolylineStatics_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CShapes_CIPolylineStaticsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CShapes_CIPolylineStatics* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CShapes_CIPolylineStatics* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CShapes_CIPolylineStatics* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CShapes_CIPolylineStatics* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CShapes_CIPolylineStatics* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CShapes_CIPolylineStatics* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_FillRuleProperty)(__x_ABI_CWindows_CUI_CXaml_CShapes_CIPolylineStatics* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** value);
    HRESULT (STDMETHODCALLTYPE* get_PointsProperty)(__x_ABI_CWindows_CUI_CXaml_CShapes_CIPolylineStatics* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CShapes_CIPolylineStaticsVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CShapes_CIPolylineStatics
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CShapes_CIPolylineStaticsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CShapes_CIPolylineStatics;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CShapes_CIPolylineStatics_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CShapes_CIRectangle_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CShapes_CIRectangle_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CShapes_CIRectangleVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CShapes_CIRectangle* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CShapes_CIRectangle* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CShapes_CIRectangle* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CShapes_CIRectangle* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CShapes_CIRectangle* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CShapes_CIRectangle* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_RadiusX)(__x_ABI_CWindows_CUI_CXaml_CShapes_CIRectangle* This,
        DOUBLE* value);
    HRESULT (STDMETHODCALLTYPE* put_RadiusX)(__x_ABI_CWindows_CUI_CXaml_CShapes_CIRectangle* This,
        DOUBLE value);
    HRESULT (STDMETHODCALLTYPE* get_RadiusY)(__x_ABI_CWindows_CUI_CXaml_CShapes_CIRectangle* This,
        DOUBLE* value);
    HRESULT (STDMETHODCALLTYPE* put_RadiusY)(__x_ABI_CWindows_CUI_CXaml_CShapes_CIRectangle* This,
        DOUBLE value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CShapes_CIRectangleVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CShapes_CIRectangle
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CShapes_CIRectangleVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CShapes_CIRectangle;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CShapes_CIRectangle_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CShapes_CIRectangleStatics_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CShapes_CIRectangleStatics_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CShapes_CIRectangleStaticsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CShapes_CIRectangleStatics* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CShapes_CIRectangleStatics* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CShapes_CIRectangleStatics* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CShapes_CIRectangleStatics* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CShapes_CIRectangleStatics* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CShapes_CIRectangleStatics* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_RadiusXProperty)(__x_ABI_CWindows_CUI_CXaml_CShapes_CIRectangleStatics* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** value);
    HRESULT (STDMETHODCALLTYPE* get_RadiusYProperty)(__x_ABI_CWindows_CUI_CXaml_CShapes_CIRectangleStatics* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CShapes_CIRectangleStaticsVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CShapes_CIRectangleStatics
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CShapes_CIRectangleStaticsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CShapes_CIRectangleStatics;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CShapes_CIRectangleStatics_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CShapes_CIShape_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CShapes_CIShape_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CShapes_CIShapeVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CShapes_CIShape* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CShapes_CIShape* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CShapes_CIShape* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CShapes_CIShape* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CShapes_CIShape* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CShapes_CIShape* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Fill)(__x_ABI_CWindows_CUI_CXaml_CShapes_CIShape* This,
        __x_ABI_CWindows_CUI_CXaml_CMedia_CIBrush** value);
    HRESULT (STDMETHODCALLTYPE* put_Fill)(__x_ABI_CWindows_CUI_CXaml_CShapes_CIShape* This,
        __x_ABI_CWindows_CUI_CXaml_CMedia_CIBrush* value);
    HRESULT (STDMETHODCALLTYPE* get_Stroke)(__x_ABI_CWindows_CUI_CXaml_CShapes_CIShape* This,
        __x_ABI_CWindows_CUI_CXaml_CMedia_CIBrush** value);
    HRESULT (STDMETHODCALLTYPE* put_Stroke)(__x_ABI_CWindows_CUI_CXaml_CShapes_CIShape* This,
        __x_ABI_CWindows_CUI_CXaml_CMedia_CIBrush* value);
    HRESULT (STDMETHODCALLTYPE* get_StrokeMiterLimit)(__x_ABI_CWindows_CUI_CXaml_CShapes_CIShape* This,
        DOUBLE* value);
    HRESULT (STDMETHODCALLTYPE* put_StrokeMiterLimit)(__x_ABI_CWindows_CUI_CXaml_CShapes_CIShape* This,
        DOUBLE value);
    HRESULT (STDMETHODCALLTYPE* get_StrokeThickness)(__x_ABI_CWindows_CUI_CXaml_CShapes_CIShape* This,
        DOUBLE* value);
    HRESULT (STDMETHODCALLTYPE* put_StrokeThickness)(__x_ABI_CWindows_CUI_CXaml_CShapes_CIShape* This,
        DOUBLE value);
    HRESULT (STDMETHODCALLTYPE* get_StrokeStartLineCap)(__x_ABI_CWindows_CUI_CXaml_CShapes_CIShape* This,
        enum __x_ABI_CWindows_CUI_CXaml_CMedia_CPenLineCap* value);
    HRESULT (STDMETHODCALLTYPE* put_StrokeStartLineCap)(__x_ABI_CWindows_CUI_CXaml_CShapes_CIShape* This,
        enum __x_ABI_CWindows_CUI_CXaml_CMedia_CPenLineCap value);
    HRESULT (STDMETHODCALLTYPE* get_StrokeEndLineCap)(__x_ABI_CWindows_CUI_CXaml_CShapes_CIShape* This,
        enum __x_ABI_CWindows_CUI_CXaml_CMedia_CPenLineCap* value);
    HRESULT (STDMETHODCALLTYPE* put_StrokeEndLineCap)(__x_ABI_CWindows_CUI_CXaml_CShapes_CIShape* This,
        enum __x_ABI_CWindows_CUI_CXaml_CMedia_CPenLineCap value);
    HRESULT (STDMETHODCALLTYPE* get_StrokeLineJoin)(__x_ABI_CWindows_CUI_CXaml_CShapes_CIShape* This,
        enum __x_ABI_CWindows_CUI_CXaml_CMedia_CPenLineJoin* value);
    HRESULT (STDMETHODCALLTYPE* put_StrokeLineJoin)(__x_ABI_CWindows_CUI_CXaml_CShapes_CIShape* This,
        enum __x_ABI_CWindows_CUI_CXaml_CMedia_CPenLineJoin value);
    HRESULT (STDMETHODCALLTYPE* get_StrokeDashOffset)(__x_ABI_CWindows_CUI_CXaml_CShapes_CIShape* This,
        DOUBLE* value);
    HRESULT (STDMETHODCALLTYPE* put_StrokeDashOffset)(__x_ABI_CWindows_CUI_CXaml_CShapes_CIShape* This,
        DOUBLE value);
    HRESULT (STDMETHODCALLTYPE* get_StrokeDashCap)(__x_ABI_CWindows_CUI_CXaml_CShapes_CIShape* This,
        enum __x_ABI_CWindows_CUI_CXaml_CMedia_CPenLineCap* value);
    HRESULT (STDMETHODCALLTYPE* put_StrokeDashCap)(__x_ABI_CWindows_CUI_CXaml_CShapes_CIShape* This,
        enum __x_ABI_CWindows_CUI_CXaml_CMedia_CPenLineCap value);
    HRESULT (STDMETHODCALLTYPE* get_StrokeDashArray)(__x_ABI_CWindows_CUI_CXaml_CShapes_CIShape* This,
        __x_ABI_C__FIVector_1_double** value);
    HRESULT (STDMETHODCALLTYPE* put_StrokeDashArray)(__x_ABI_CWindows_CUI_CXaml_CShapes_CIShape* This,
        __x_ABI_C__FIVector_1_double* value);
    HRESULT (STDMETHODCALLTYPE* get_Stretch)(__x_ABI_CWindows_CUI_CXaml_CShapes_CIShape* This,
        enum __x_ABI_CWindows_CUI_CXaml_CMedia_CStretch* value);
    HRESULT (STDMETHODCALLTYPE* put_Stretch)(__x_ABI_CWindows_CUI_CXaml_CShapes_CIShape* This,
        enum __x_ABI_CWindows_CUI_CXaml_CMedia_CStretch value);
    HRESULT (STDMETHODCALLTYPE* get_GeometryTransform)(__x_ABI_CWindows_CUI_CXaml_CShapes_CIShape* This,
        __x_ABI_CWindows_CUI_CXaml_CMedia_CITransform** value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CShapes_CIShapeVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CShapes_CIShape
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CShapes_CIShapeVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CShapes_CIShape;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CShapes_CIShape_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CShapes_CIShape2_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CShapes_CIShape2_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CShapes_CIShape2Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CShapes_CIShape2* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CShapes_CIShape2* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CShapes_CIShape2* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CShapes_CIShape2* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CShapes_CIShape2* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CShapes_CIShape2* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAlphaMask)(__x_ABI_CWindows_CUI_CXaml_CShapes_CIShape2* This,
        __x_ABI_CWindows_CUI_CComposition_CICompositionBrush** result);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CShapes_CIShape2Vtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CShapes_CIShape2
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CShapes_CIShape2Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CShapes_CIShape2;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CShapes_CIShape2_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CShapes_CIShapeFactory_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CShapes_CIShapeFactory_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CShapes_CIShapeFactoryVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CShapes_CIShapeFactory* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CShapes_CIShapeFactory* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CShapes_CIShapeFactory* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CShapes_CIShapeFactory* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CShapes_CIShapeFactory* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CShapes_CIShapeFactory* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* CreateInstance)(__x_ABI_CWindows_CUI_CXaml_CShapes_CIShapeFactory* This,
        IInspectable* baseInterface,
        IInspectable** innerInterface,
        __x_ABI_CWindows_CUI_CXaml_CShapes_CIShape** value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CShapes_CIShapeFactoryVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CShapes_CIShapeFactory
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CShapes_CIShapeFactoryVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CShapes_CIShapeFactory;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CShapes_CIShapeFactory_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CShapes_CIShapeStatics_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CShapes_CIShapeStatics_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CShapes_CIShapeStaticsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CShapes_CIShapeStatics* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CShapes_CIShapeStatics* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CShapes_CIShapeStatics* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CShapes_CIShapeStatics* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CShapes_CIShapeStatics* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CShapes_CIShapeStatics* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_FillProperty)(__x_ABI_CWindows_CUI_CXaml_CShapes_CIShapeStatics* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** value);
    HRESULT (STDMETHODCALLTYPE* get_StrokeProperty)(__x_ABI_CWindows_CUI_CXaml_CShapes_CIShapeStatics* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** value);
    HRESULT (STDMETHODCALLTYPE* get_StrokeMiterLimitProperty)(__x_ABI_CWindows_CUI_CXaml_CShapes_CIShapeStatics* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** value);
    HRESULT (STDMETHODCALLTYPE* get_StrokeThicknessProperty)(__x_ABI_CWindows_CUI_CXaml_CShapes_CIShapeStatics* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** value);
    HRESULT (STDMETHODCALLTYPE* get_StrokeStartLineCapProperty)(__x_ABI_CWindows_CUI_CXaml_CShapes_CIShapeStatics* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** value);
    HRESULT (STDMETHODCALLTYPE* get_StrokeEndLineCapProperty)(__x_ABI_CWindows_CUI_CXaml_CShapes_CIShapeStatics* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** value);
    HRESULT (STDMETHODCALLTYPE* get_StrokeLineJoinProperty)(__x_ABI_CWindows_CUI_CXaml_CShapes_CIShapeStatics* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** value);
    HRESULT (STDMETHODCALLTYPE* get_StrokeDashOffsetProperty)(__x_ABI_CWindows_CUI_CXaml_CShapes_CIShapeStatics* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** value);
    HRESULT (STDMETHODCALLTYPE* get_StrokeDashCapProperty)(__x_ABI_CWindows_CUI_CXaml_CShapes_CIShapeStatics* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** value);
    HRESULT (STDMETHODCALLTYPE* get_StrokeDashArrayProperty)(__x_ABI_CWindows_CUI_CXaml_CShapes_CIShapeStatics* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** value);
    HRESULT (STDMETHODCALLTYPE* get_StretchProperty)(__x_ABI_CWindows_CUI_CXaml_CShapes_CIShapeStatics* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CShapes_CIShapeStaticsVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CShapes_CIShapeStatics
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CShapes_CIShapeStaticsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CShapes_CIShapeStatics;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CShapes_CIShapeStatics_INTERFACE_DEFINED__) */
    

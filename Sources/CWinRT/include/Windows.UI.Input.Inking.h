// WARNING: Please don't edit this file. It was generated by Swift/WinRT v0.0.1

#pragma once
// Header files for imported files
#include <inspectable.h>
#include <EventToken.h>
#include <windowscontracts.h>
#include "Windows.Foundation.h"
#include "Windows.Foundation.Numerics.h"
#include "Windows.Storage.Streams.h"
#include "Windows.UI.h"
#include "Windows.UI.Core.h"
#include "Windows.UI.Input.h"
// Importing Collections header
#include "Windows.Foundation.Collections.h"

/* Forward Declarations */
#ifndef ____x_ABI_CWindows_CUI_CInput_CInking_CIInkDrawingAttributes_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CInput_CInking_CIInkDrawingAttributes_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CInput_CInking_CIInkDrawingAttributes __x_ABI_CWindows_CUI_CInput_CInking_CIInkDrawingAttributes;

#endif // ____x_ABI_CWindows_CUI_CInput_CInking_CIInkDrawingAttributes_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CInput_CInking_CIInkDrawingAttributes2_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CInput_CInking_CIInkDrawingAttributes2_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CInput_CInking_CIInkDrawingAttributes2 __x_ABI_CWindows_CUI_CInput_CInking_CIInkDrawingAttributes2;

#endif // ____x_ABI_CWindows_CUI_CInput_CInking_CIInkDrawingAttributes2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CInput_CInking_CIInkDrawingAttributes3_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CInput_CInking_CIInkDrawingAttributes3_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CInput_CInking_CIInkDrawingAttributes3 __x_ABI_CWindows_CUI_CInput_CInking_CIInkDrawingAttributes3;

#endif // ____x_ABI_CWindows_CUI_CInput_CInking_CIInkDrawingAttributes3_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CInput_CInking_CIInkDrawingAttributes4_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CInput_CInking_CIInkDrawingAttributes4_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CInput_CInking_CIInkDrawingAttributes4 __x_ABI_CWindows_CUI_CInput_CInking_CIInkDrawingAttributes4;

#endif // ____x_ABI_CWindows_CUI_CInput_CInking_CIInkDrawingAttributes4_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CInput_CInking_CIInkDrawingAttributes5_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CInput_CInking_CIInkDrawingAttributes5_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CInput_CInking_CIInkDrawingAttributes5 __x_ABI_CWindows_CUI_CInput_CInking_CIInkDrawingAttributes5;

#endif // ____x_ABI_CWindows_CUI_CInput_CInking_CIInkDrawingAttributes5_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CInput_CInking_CIInkDrawingAttributesPencilProperties_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CInput_CInking_CIInkDrawingAttributesPencilProperties_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CInput_CInking_CIInkDrawingAttributesPencilProperties __x_ABI_CWindows_CUI_CInput_CInking_CIInkDrawingAttributesPencilProperties;

#endif // ____x_ABI_CWindows_CUI_CInput_CInking_CIInkDrawingAttributesPencilProperties_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CInput_CInking_CIInkDrawingAttributesStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CInput_CInking_CIInkDrawingAttributesStatics_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CInput_CInking_CIInkDrawingAttributesStatics __x_ABI_CWindows_CUI_CInput_CInking_CIInkDrawingAttributesStatics;

#endif // ____x_ABI_CWindows_CUI_CInput_CInking_CIInkDrawingAttributesStatics_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CInput_CInking_CIInkInputConfiguration_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CInput_CInking_CIInkInputConfiguration_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CInput_CInking_CIInkInputConfiguration __x_ABI_CWindows_CUI_CInput_CInking_CIInkInputConfiguration;

#endif // ____x_ABI_CWindows_CUI_CInput_CInking_CIInkInputConfiguration_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CInput_CInking_CIInkInputProcessingConfiguration_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CInput_CInking_CIInkInputProcessingConfiguration_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CInput_CInking_CIInkInputProcessingConfiguration __x_ABI_CWindows_CUI_CInput_CInking_CIInkInputProcessingConfiguration;

#endif // ____x_ABI_CWindows_CUI_CInput_CInking_CIInkInputProcessingConfiguration_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CInput_CInking_CIInkManager_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CInput_CInking_CIInkManager_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CInput_CInking_CIInkManager __x_ABI_CWindows_CUI_CInput_CInking_CIInkManager;

#endif // ____x_ABI_CWindows_CUI_CInput_CInking_CIInkManager_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CInput_CInking_CIInkModelerAttributes_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CInput_CInking_CIInkModelerAttributes_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CInput_CInking_CIInkModelerAttributes __x_ABI_CWindows_CUI_CInput_CInking_CIInkModelerAttributes;

#endif // ____x_ABI_CWindows_CUI_CInput_CInking_CIInkModelerAttributes_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CInput_CInking_CIInkPoint_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CInput_CInking_CIInkPoint_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CInput_CInking_CIInkPoint __x_ABI_CWindows_CUI_CInput_CInking_CIInkPoint;

#endif // ____x_ABI_CWindows_CUI_CInput_CInking_CIInkPoint_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CInput_CInking_CIInkPoint2_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CInput_CInking_CIInkPoint2_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CInput_CInking_CIInkPoint2 __x_ABI_CWindows_CUI_CInput_CInking_CIInkPoint2;

#endif // ____x_ABI_CWindows_CUI_CInput_CInking_CIInkPoint2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CInput_CInking_CIInkPointFactory_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CInput_CInking_CIInkPointFactory_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CInput_CInking_CIInkPointFactory __x_ABI_CWindows_CUI_CInput_CInking_CIInkPointFactory;

#endif // ____x_ABI_CWindows_CUI_CInput_CInking_CIInkPointFactory_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CInput_CInking_CIInkPointFactory2_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CInput_CInking_CIInkPointFactory2_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CInput_CInking_CIInkPointFactory2 __x_ABI_CWindows_CUI_CInput_CInking_CIInkPointFactory2;

#endif // ____x_ABI_CWindows_CUI_CInput_CInking_CIInkPointFactory2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CInput_CInking_CIInkPresenter_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CInput_CInking_CIInkPresenter_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CInput_CInking_CIInkPresenter __x_ABI_CWindows_CUI_CInput_CInking_CIInkPresenter;

#endif // ____x_ABI_CWindows_CUI_CInput_CInking_CIInkPresenter_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CInput_CInking_CIInkPresenter2_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CInput_CInking_CIInkPresenter2_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CInput_CInking_CIInkPresenter2 __x_ABI_CWindows_CUI_CInput_CInking_CIInkPresenter2;

#endif // ____x_ABI_CWindows_CUI_CInput_CInking_CIInkPresenter2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CInput_CInking_CIInkPresenter3_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CInput_CInking_CIInkPresenter3_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CInput_CInking_CIInkPresenter3 __x_ABI_CWindows_CUI_CInput_CInking_CIInkPresenter3;

#endif // ____x_ABI_CWindows_CUI_CInput_CInking_CIInkPresenter3_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CInput_CInking_CIInkPresenterProtractor_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CInput_CInking_CIInkPresenterProtractor_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CInput_CInking_CIInkPresenterProtractor __x_ABI_CWindows_CUI_CInput_CInking_CIInkPresenterProtractor;

#endif // ____x_ABI_CWindows_CUI_CInput_CInking_CIInkPresenterProtractor_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CInput_CInking_CIInkPresenterProtractorFactory_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CInput_CInking_CIInkPresenterProtractorFactory_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CInput_CInking_CIInkPresenterProtractorFactory __x_ABI_CWindows_CUI_CInput_CInking_CIInkPresenterProtractorFactory;

#endif // ____x_ABI_CWindows_CUI_CInput_CInking_CIInkPresenterProtractorFactory_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CInput_CInking_CIInkPresenterRuler_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CInput_CInking_CIInkPresenterRuler_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CInput_CInking_CIInkPresenterRuler __x_ABI_CWindows_CUI_CInput_CInking_CIInkPresenterRuler;

#endif // ____x_ABI_CWindows_CUI_CInput_CInking_CIInkPresenterRuler_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CInput_CInking_CIInkPresenterRuler2_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CInput_CInking_CIInkPresenterRuler2_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CInput_CInking_CIInkPresenterRuler2 __x_ABI_CWindows_CUI_CInput_CInking_CIInkPresenterRuler2;

#endif // ____x_ABI_CWindows_CUI_CInput_CInking_CIInkPresenterRuler2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CInput_CInking_CIInkPresenterRulerFactory_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CInput_CInking_CIInkPresenterRulerFactory_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CInput_CInking_CIInkPresenterRulerFactory __x_ABI_CWindows_CUI_CInput_CInking_CIInkPresenterRulerFactory;

#endif // ____x_ABI_CWindows_CUI_CInput_CInking_CIInkPresenterRulerFactory_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CInput_CInking_CIInkPresenterStencil_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CInput_CInking_CIInkPresenterStencil_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CInput_CInking_CIInkPresenterStencil __x_ABI_CWindows_CUI_CInput_CInking_CIInkPresenterStencil;

#endif // ____x_ABI_CWindows_CUI_CInput_CInking_CIInkPresenterStencil_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CInput_CInking_CIInkRecognitionResult_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CInput_CInking_CIInkRecognitionResult_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CInput_CInking_CIInkRecognitionResult __x_ABI_CWindows_CUI_CInput_CInking_CIInkRecognitionResult;

#endif // ____x_ABI_CWindows_CUI_CInput_CInking_CIInkRecognitionResult_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CInput_CInking_CIInkRecognizer_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CInput_CInking_CIInkRecognizer_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CInput_CInking_CIInkRecognizer __x_ABI_CWindows_CUI_CInput_CInking_CIInkRecognizer;

#endif // ____x_ABI_CWindows_CUI_CInput_CInking_CIInkRecognizer_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CInput_CInking_CIInkRecognizerContainer_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CInput_CInking_CIInkRecognizerContainer_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CInput_CInking_CIInkRecognizerContainer __x_ABI_CWindows_CUI_CInput_CInking_CIInkRecognizerContainer;

#endif // ____x_ABI_CWindows_CUI_CInput_CInking_CIInkRecognizerContainer_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CInput_CInking_CIInkStroke_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CInput_CInking_CIInkStroke_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CInput_CInking_CIInkStroke __x_ABI_CWindows_CUI_CInput_CInking_CIInkStroke;

#endif // ____x_ABI_CWindows_CUI_CInput_CInking_CIInkStroke_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CInput_CInking_CIInkStroke2_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CInput_CInking_CIInkStroke2_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CInput_CInking_CIInkStroke2 __x_ABI_CWindows_CUI_CInput_CInking_CIInkStroke2;

#endif // ____x_ABI_CWindows_CUI_CInput_CInking_CIInkStroke2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CInput_CInking_CIInkStroke3_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CInput_CInking_CIInkStroke3_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CInput_CInking_CIInkStroke3 __x_ABI_CWindows_CUI_CInput_CInking_CIInkStroke3;

#endif // ____x_ABI_CWindows_CUI_CInput_CInking_CIInkStroke3_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CInput_CInking_CIInkStrokeBuilder_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CInput_CInking_CIInkStrokeBuilder_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CInput_CInking_CIInkStrokeBuilder __x_ABI_CWindows_CUI_CInput_CInking_CIInkStrokeBuilder;

#endif // ____x_ABI_CWindows_CUI_CInput_CInking_CIInkStrokeBuilder_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CInput_CInking_CIInkStrokeBuilder2_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CInput_CInking_CIInkStrokeBuilder2_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CInput_CInking_CIInkStrokeBuilder2 __x_ABI_CWindows_CUI_CInput_CInking_CIInkStrokeBuilder2;

#endif // ____x_ABI_CWindows_CUI_CInput_CInking_CIInkStrokeBuilder2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CInput_CInking_CIInkStrokeBuilder3_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CInput_CInking_CIInkStrokeBuilder3_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CInput_CInking_CIInkStrokeBuilder3 __x_ABI_CWindows_CUI_CInput_CInking_CIInkStrokeBuilder3;

#endif // ____x_ABI_CWindows_CUI_CInput_CInking_CIInkStrokeBuilder3_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CInput_CInking_CIInkStrokeContainer_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CInput_CInking_CIInkStrokeContainer_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CInput_CInking_CIInkStrokeContainer __x_ABI_CWindows_CUI_CInput_CInking_CIInkStrokeContainer;

#endif // ____x_ABI_CWindows_CUI_CInput_CInking_CIInkStrokeContainer_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CInput_CInking_CIInkStrokeContainer2_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CInput_CInking_CIInkStrokeContainer2_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CInput_CInking_CIInkStrokeContainer2 __x_ABI_CWindows_CUI_CInput_CInking_CIInkStrokeContainer2;

#endif // ____x_ABI_CWindows_CUI_CInput_CInking_CIInkStrokeContainer2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CInput_CInking_CIInkStrokeContainer3_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CInput_CInking_CIInkStrokeContainer3_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CInput_CInking_CIInkStrokeContainer3 __x_ABI_CWindows_CUI_CInput_CInking_CIInkStrokeContainer3;

#endif // ____x_ABI_CWindows_CUI_CInput_CInking_CIInkStrokeContainer3_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CInput_CInking_CIInkStrokeInput_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CInput_CInking_CIInkStrokeInput_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CInput_CInking_CIInkStrokeInput __x_ABI_CWindows_CUI_CInput_CInking_CIInkStrokeInput;

#endif // ____x_ABI_CWindows_CUI_CInput_CInking_CIInkStrokeInput_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CInput_CInking_CIInkStrokeRenderingSegment_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CInput_CInking_CIInkStrokeRenderingSegment_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CInput_CInking_CIInkStrokeRenderingSegment __x_ABI_CWindows_CUI_CInput_CInking_CIInkStrokeRenderingSegment;

#endif // ____x_ABI_CWindows_CUI_CInput_CInking_CIInkStrokeRenderingSegment_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CInput_CInking_CIInkStrokesCollectedEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CInput_CInking_CIInkStrokesCollectedEventArgs_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CInput_CInking_CIInkStrokesCollectedEventArgs __x_ABI_CWindows_CUI_CInput_CInking_CIInkStrokesCollectedEventArgs;

#endif // ____x_ABI_CWindows_CUI_CInput_CInking_CIInkStrokesCollectedEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CInput_CInking_CIInkStrokesErasedEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CInput_CInking_CIInkStrokesErasedEventArgs_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CInput_CInking_CIInkStrokesErasedEventArgs __x_ABI_CWindows_CUI_CInput_CInking_CIInkStrokesErasedEventArgs;

#endif // ____x_ABI_CWindows_CUI_CInput_CInking_CIInkStrokesErasedEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CInput_CInking_CIInkSynchronizer_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CInput_CInking_CIInkSynchronizer_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CInput_CInking_CIInkSynchronizer __x_ABI_CWindows_CUI_CInput_CInking_CIInkSynchronizer;

#endif // ____x_ABI_CWindows_CUI_CInput_CInking_CIInkSynchronizer_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CInput_CInking_CIInkUnprocessedInput_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CInput_CInking_CIInkUnprocessedInput_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CInput_CInking_CIInkUnprocessedInput __x_ABI_CWindows_CUI_CInput_CInking_CIInkUnprocessedInput;

#endif // ____x_ABI_CWindows_CUI_CInput_CInking_CIInkUnprocessedInput_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CInput_CInking_CIPenAndInkSettings_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CInput_CInking_CIPenAndInkSettings_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CInput_CInking_CIPenAndInkSettings __x_ABI_CWindows_CUI_CInput_CInking_CIPenAndInkSettings;

#endif // ____x_ABI_CWindows_CUI_CInput_CInking_CIPenAndInkSettings_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CInput_CInking_CIPenAndInkSettingsStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CInput_CInking_CIPenAndInkSettingsStatics_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CInput_CInking_CIPenAndInkSettingsStatics __x_ABI_CWindows_CUI_CInput_CInking_CIPenAndInkSettingsStatics;

#endif // ____x_ABI_CWindows_CUI_CInput_CInking_CIPenAndInkSettingsStatics_FWD_DEFINED__

// Parameterized interface forward declarations (C)

// Collection interface definitions

typedef interface __x_ABI_C__FIAsyncActionProgressHandler_1_UINT64 __x_ABI_C__FIAsyncActionProgressHandler_1_UINT64;

typedef interface __x_ABI_C__FIAsyncActionWithProgress_1_UINT64 __x_ABI_C__FIAsyncActionWithProgress_1_UINT64;

#if !defined(____x_ABI_C__FIAsyncActionWithProgressCompletedHandler_1_UINT64_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncActionWithProgressCompletedHandler_1_UINT64_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncActionWithProgressCompletedHandler_1_UINT64 __x_ABI_C__FIAsyncActionWithProgressCompletedHandler_1_UINT64;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncActionWithProgressCompletedHandler_1_UINT64;

    typedef struct __x_ABI_C__FIAsyncActionWithProgressCompletedHandler_1_UINT64Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncActionWithProgressCompletedHandler_1_UINT64* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncActionWithProgressCompletedHandler_1_UINT64* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncActionWithProgressCompletedHandler_1_UINT64* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FIAsyncActionWithProgressCompletedHandler_1_UINT64* This,
        __x_ABI_C__FIAsyncActionWithProgress_1_UINT64* asyncInfo,
        enum __x_ABI_CWindows_CFoundation_CAsyncStatus asyncStatus);

        END_INTERFACE
    } __x_ABI_C__FIAsyncActionWithProgressCompletedHandler_1_UINT64Vtbl;

    interface __x_ABI_C__FIAsyncActionWithProgressCompletedHandler_1_UINT64
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncActionWithProgressCompletedHandler_1_UINT64Vtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncActionWithProgressCompletedHandler_1_UINT64_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIAsyncActionWithProgress_1_UINT64_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncActionWithProgress_1_UINT64_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncActionWithProgress_1_UINT64 __x_ABI_C__FIAsyncActionWithProgress_1_UINT64;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncActionWithProgress_1_UINT64;

    typedef struct __x_ABI_C__FIAsyncActionWithProgress_1_UINT64Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncActionWithProgress_1_UINT64* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncActionWithProgress_1_UINT64* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncActionWithProgress_1_UINT64* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIAsyncActionWithProgress_1_UINT64* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIAsyncActionWithProgress_1_UINT64* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIAsyncActionWithProgress_1_UINT64* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* put_Progress)(__x_ABI_C__FIAsyncActionWithProgress_1_UINT64* This,
        __x_ABI_C__FIAsyncActionProgressHandler_1_UINT64* handler);
    HRESULT (STDMETHODCALLTYPE* get_Progress)(__x_ABI_C__FIAsyncActionWithProgress_1_UINT64* This,
        __x_ABI_C__FIAsyncActionProgressHandler_1_UINT64** result);
    HRESULT (STDMETHODCALLTYPE* put_Completed)(__x_ABI_C__FIAsyncActionWithProgress_1_UINT64* This,
        __x_ABI_C__FIAsyncActionWithProgressCompletedHandler_1_UINT64* handler);
    HRESULT (STDMETHODCALLTYPE* get_Completed)(__x_ABI_C__FIAsyncActionWithProgress_1_UINT64* This,
        __x_ABI_C__FIAsyncActionWithProgressCompletedHandler_1_UINT64** result);
    HRESULT (STDMETHODCALLTYPE* GetResults)(__x_ABI_C__FIAsyncActionWithProgress_1_UINT64* This);

        END_INTERFACE
    } __x_ABI_C__FIAsyncActionWithProgress_1_UINT64Vtbl;

    interface __x_ABI_C__FIAsyncActionWithProgress_1_UINT64
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncActionWithProgress_1_UINT64Vtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncActionWithProgress_1_UINT64_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIAsyncActionProgressHandler_1_UINT64_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncActionProgressHandler_1_UINT64_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncActionProgressHandler_1_UINT64 __x_ABI_C__FIAsyncActionProgressHandler_1_UINT64;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncActionProgressHandler_1_UINT64;

    typedef struct __x_ABI_C__FIAsyncActionProgressHandler_1_UINT64Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncActionProgressHandler_1_UINT64* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncActionProgressHandler_1_UINT64* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncActionProgressHandler_1_UINT64* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FIAsyncActionProgressHandler_1_UINT64* This,
        __x_ABI_C__FIAsyncActionWithProgress_1_UINT64* asyncInfo,
        UINT64 progressInfo);

        END_INTERFACE
    } __x_ABI_C__FIAsyncActionProgressHandler_1_UINT64Vtbl;

    interface __x_ABI_C__FIAsyncActionProgressHandler_1_UINT64
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncActionProgressHandler_1_UINT64Vtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncActionProgressHandler_1_UINT64_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CInput__CInking__CInkRecognitionResult_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CInput__CInking__CInkRecognitionResult_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CInput__CInking__CInkRecognitionResult __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CInput__CInking__CInkRecognitionResult;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CInput__CInking__CInkRecognitionResult;

    typedef struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CInput__CInking__CInkRecognitionResultVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CInput__CInking__CInkRecognitionResult* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CInput__CInking__CInkRecognitionResult* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CInput__CInking__CInkRecognitionResult* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CInput__CInking__CInkRecognitionResult* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CInput__CInking__CInkRecognitionResult* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CInput__CInking__CInkRecognitionResult* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Current)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CInput__CInking__CInkRecognitionResult* This,
        __x_ABI_CWindows_CUI_CInput_CInking_CIInkRecognitionResult** result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CInput__CInking__CInkRecognitionResult* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CInput__CInking__CInkRecognitionResult* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CInput__CInking__CInkRecognitionResult* This,
        UINT32 itemsLength,
        __x_ABI_CWindows_CUI_CInput_CInking_CIInkRecognitionResult** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CInput__CInking__CInkRecognitionResultVtbl;

    interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CInput__CInking__CInkRecognitionResult
    {
        CONST_VTBL struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CInput__CInking__CInkRecognitionResultVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CInput__CInking__CInkRecognitionResult_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CInput__CInking__CInkRecognitionResult_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CInput__CInking__CInkRecognitionResult_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CInput__CInking__CInkRecognitionResult __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CInput__CInking__CInkRecognitionResult;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CInput__CInking__CInkRecognitionResult;

    typedef struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CInput__CInking__CInkRecognitionResultVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CInput__CInking__CInkRecognitionResult* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CInput__CInking__CInkRecognitionResult* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CInput__CInking__CInkRecognitionResult* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CInput__CInking__CInkRecognitionResult* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CInput__CInking__CInkRecognitionResult* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CInput__CInking__CInkRecognitionResult* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* First)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CInput__CInking__CInkRecognitionResult* This,
        __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CInput__CInking__CInkRecognitionResult** result);

        END_INTERFACE
    } __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CInput__CInking__CInkRecognitionResultVtbl;

    interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CInput__CInking__CInkRecognitionResult
    {
        CONST_VTBL struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CInput__CInking__CInkRecognitionResultVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CInput__CInking__CInkRecognitionResult_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CInking__CInkRecognitionResult_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CInking__CInkRecognitionResult_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CInking__CInkRecognitionResult __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CInking__CInkRecognitionResult;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CInking__CInkRecognitionResult;

    typedef struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CInking__CInkRecognitionResultVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CInking__CInkRecognitionResult* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CInking__CInkRecognitionResult* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CInking__CInkRecognitionResult* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CInking__CInkRecognitionResult* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CInking__CInkRecognitionResult* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CInking__CInkRecognitionResult* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CInking__CInkRecognitionResult* This,
        UINT32 index,
        __x_ABI_CWindows_CUI_CInput_CInking_CIInkRecognitionResult** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CInking__CInkRecognitionResult* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CInking__CInkRecognitionResult* This,
        __x_ABI_CWindows_CUI_CInput_CInking_CIInkRecognitionResult* value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CInking__CInkRecognitionResult* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        __x_ABI_CWindows_CUI_CInput_CInking_CIInkRecognitionResult** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CInking__CInkRecognitionResultVtbl;

    interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CInking__CInkRecognitionResult
    {
        CONST_VTBL struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CInking__CInkRecognitionResultVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CInking__CInkRecognitionResult_INTERFACE_DEFINED__
    
typedef interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CInking__CInkRecognitionResult __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CInking__CInkRecognitionResult;

#if !defined(____x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CInking__CInkRecognitionResult_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CInking__CInkRecognitionResult_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CInking__CInkRecognitionResult __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CInking__CInkRecognitionResult;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CInking__CInkRecognitionResult;

    typedef struct __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CInking__CInkRecognitionResultVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CInking__CInkRecognitionResult* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CInking__CInkRecognitionResult* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CInking__CInkRecognitionResult* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CInking__CInkRecognitionResult* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CInking__CInkRecognitionResult* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CInking__CInkRecognitionResult* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* put_Completed)(__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CInking__CInkRecognitionResult* This,
        __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CInking__CInkRecognitionResult* handler);
    HRESULT (STDMETHODCALLTYPE* get_Completed)(__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CInking__CInkRecognitionResult* This,
        __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CInking__CInkRecognitionResult** result);
    HRESULT (STDMETHODCALLTYPE* GetResults)(__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CInking__CInkRecognitionResult* This,
        __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CInking__CInkRecognitionResult** result);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CInking__CInkRecognitionResultVtbl;

    interface __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CInking__CInkRecognitionResult
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CInking__CInkRecognitionResultVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CInking__CInkRecognitionResult_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CInking__CInkRecognitionResult_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CInking__CInkRecognitionResult_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CInking__CInkRecognitionResult __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CInking__CInkRecognitionResult;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CInking__CInkRecognitionResult;

    typedef struct __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CInking__CInkRecognitionResultVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CInking__CInkRecognitionResult* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CInking__CInkRecognitionResult* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CInking__CInkRecognitionResult* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CInking__CInkRecognitionResult* This,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CInking__CInkRecognitionResult* asyncInfo,
        enum __x_ABI_CWindows_CFoundation_CAsyncStatus asyncStatus);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CInking__CInkRecognitionResultVtbl;

    interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CInking__CInkRecognitionResult
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CInking__CInkRecognitionResultVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CInking__CInkRecognitionResult_INTERFACE_DEFINED__
    
typedef interface __x_ABI_C__FIAsyncOperationProgressHandler_2_UINT32_UINT32 __x_ABI_C__FIAsyncOperationProgressHandler_2_UINT32_UINT32;

typedef interface __x_ABI_C__FIAsyncOperationWithProgress_2_UINT32_UINT32 __x_ABI_C__FIAsyncOperationWithProgress_2_UINT32_UINT32;

#if !defined(____x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2_UINT32_UINT32_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2_UINT32_UINT32_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2_UINT32_UINT32 __x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2_UINT32_UINT32;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2_UINT32_UINT32;

    typedef struct __x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2_UINT32_UINT32Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2_UINT32_UINT32* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2_UINT32_UINT32* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2_UINT32_UINT32* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2_UINT32_UINT32* This,
        __x_ABI_C__FIAsyncOperationWithProgress_2_UINT32_UINT32* asyncInfo,
        enum __x_ABI_CWindows_CFoundation_CAsyncStatus asyncStatus);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2_UINT32_UINT32Vtbl;

    interface __x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2_UINT32_UINT32
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2_UINT32_UINT32Vtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2_UINT32_UINT32_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIAsyncOperationWithProgress_2_UINT32_UINT32_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperationWithProgress_2_UINT32_UINT32_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperationWithProgress_2_UINT32_UINT32 __x_ABI_C__FIAsyncOperationWithProgress_2_UINT32_UINT32;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperationWithProgress_2_UINT32_UINT32;

    typedef struct __x_ABI_C__FIAsyncOperationWithProgress_2_UINT32_UINT32Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperationWithProgress_2_UINT32_UINT32* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperationWithProgress_2_UINT32_UINT32* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperationWithProgress_2_UINT32_UINT32* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIAsyncOperationWithProgress_2_UINT32_UINT32* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIAsyncOperationWithProgress_2_UINT32_UINT32* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIAsyncOperationWithProgress_2_UINT32_UINT32* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* put_Progress)(__x_ABI_C__FIAsyncOperationWithProgress_2_UINT32_UINT32* This,
        __x_ABI_C__FIAsyncOperationProgressHandler_2_UINT32_UINT32* handler);
    HRESULT (STDMETHODCALLTYPE* get_Progress)(__x_ABI_C__FIAsyncOperationWithProgress_2_UINT32_UINT32* This,
        __x_ABI_C__FIAsyncOperationProgressHandler_2_UINT32_UINT32** result);
    HRESULT (STDMETHODCALLTYPE* put_Completed)(__x_ABI_C__FIAsyncOperationWithProgress_2_UINT32_UINT32* This,
        __x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2_UINT32_UINT32* handler);
    HRESULT (STDMETHODCALLTYPE* get_Completed)(__x_ABI_C__FIAsyncOperationWithProgress_2_UINT32_UINT32* This,
        __x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2_UINT32_UINT32** result);
    HRESULT (STDMETHODCALLTYPE* GetResults)(__x_ABI_C__FIAsyncOperationWithProgress_2_UINT32_UINT32* This,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperationWithProgress_2_UINT32_UINT32Vtbl;

    interface __x_ABI_C__FIAsyncOperationWithProgress_2_UINT32_UINT32
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperationWithProgress_2_UINT32_UINT32Vtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperationWithProgress_2_UINT32_UINT32_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIAsyncOperationProgressHandler_2_UINT32_UINT32_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperationProgressHandler_2_UINT32_UINT32_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperationProgressHandler_2_UINT32_UINT32 __x_ABI_C__FIAsyncOperationProgressHandler_2_UINT32_UINT32;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperationProgressHandler_2_UINT32_UINT32;

    typedef struct __x_ABI_C__FIAsyncOperationProgressHandler_2_UINT32_UINT32Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperationProgressHandler_2_UINT32_UINT32* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperationProgressHandler_2_UINT32_UINT32* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperationProgressHandler_2_UINT32_UINT32* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FIAsyncOperationProgressHandler_2_UINT32_UINT32* This,
        __x_ABI_C__FIAsyncOperationWithProgress_2_UINT32_UINT32* asyncInfo,
        UINT32 progressInfo);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperationProgressHandler_2_UINT32_UINT32Vtbl;

    interface __x_ABI_C__FIAsyncOperationProgressHandler_2_UINT32_UINT32
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperationProgressHandler_2_UINT32_UINT32Vtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperationProgressHandler_2_UINT32_UINT32_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterator_1_HSTRING_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterator_1_HSTRING_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterator_1_HSTRING __x_ABI_C__FIIterator_1_HSTRING;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterator_1_HSTRING;

    typedef struct __x_ABI_C__FIIterator_1_HSTRINGVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterator_1_HSTRING* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterator_1_HSTRING* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterator_1_HSTRING* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterator_1_HSTRING* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterator_1_HSTRING* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterator_1_HSTRING* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Current)(__x_ABI_C__FIIterator_1_HSTRING* This,
        HSTRING* result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__x_ABI_C__FIIterator_1_HSTRING* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__x_ABI_C__FIIterator_1_HSTRING* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIIterator_1_HSTRING* This,
        UINT32 itemsLength,
        HSTRING* items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIIterator_1_HSTRINGVtbl;

    interface __x_ABI_C__FIIterator_1_HSTRING
    {
        CONST_VTBL struct __x_ABI_C__FIIterator_1_HSTRINGVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterator_1_HSTRING_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterable_1_HSTRING_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterable_1_HSTRING_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterable_1_HSTRING __x_ABI_C__FIIterable_1_HSTRING;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterable_1_HSTRING;

    typedef struct __x_ABI_C__FIIterable_1_HSTRINGVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterable_1_HSTRING* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterable_1_HSTRING* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterable_1_HSTRING* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterable_1_HSTRING* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterable_1_HSTRING* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterable_1_HSTRING* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* First)(__x_ABI_C__FIIterable_1_HSTRING* This,
        __x_ABI_C__FIIterator_1_HSTRING** result);

        END_INTERFACE
    } __x_ABI_C__FIIterable_1_HSTRINGVtbl;

    interface __x_ABI_C__FIIterable_1_HSTRING
    {
        CONST_VTBL struct __x_ABI_C__FIIterable_1_HSTRINGVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterable_1_HSTRING_INTERFACE_DEFINED__
    
typedef struct __x_ABI_CWindows_CFoundation_CPoint __x_ABI_CWindows_CFoundation_CPoint;

#if !defined(____x_ABI_C__FIIterator_1___x_ABI_CWindows__CFoundation__CPoint_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CFoundation__CPoint_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CFoundation__CPoint __x_ABI_C__FIIterator_1___x_ABI_CWindows__CFoundation__CPoint;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterator_1___x_ABI_CWindows__CFoundation__CPoint;

    typedef struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CFoundation__CPointVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CFoundation__CPoint* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CFoundation__CPoint* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CFoundation__CPoint* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CFoundation__CPoint* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CFoundation__CPoint* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CFoundation__CPoint* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Current)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CFoundation__CPoint* This,
        struct __x_ABI_CWindows_CFoundation_CPoint* result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CFoundation__CPoint* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CFoundation__CPoint* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CFoundation__CPoint* This,
        UINT32 itemsLength,
        struct __x_ABI_CWindows_CFoundation_CPoint* items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIIterator_1___x_ABI_CWindows__CFoundation__CPointVtbl;

    interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CFoundation__CPoint
    {
        CONST_VTBL struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CFoundation__CPointVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CFoundation__CPoint_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterable_1___x_ABI_CWindows__CFoundation__CPoint_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CFoundation__CPoint_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CFoundation__CPoint __x_ABI_C__FIIterable_1___x_ABI_CWindows__CFoundation__CPoint;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterable_1___x_ABI_CWindows__CFoundation__CPoint;

    typedef struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CFoundation__CPointVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CFoundation__CPoint* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CFoundation__CPoint* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CFoundation__CPoint* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CFoundation__CPoint* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CFoundation__CPoint* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CFoundation__CPoint* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* First)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CFoundation__CPoint* This,
        __x_ABI_C__FIIterator_1___x_ABI_CWindows__CFoundation__CPoint** result);

        END_INTERFACE
    } __x_ABI_C__FIIterable_1___x_ABI_CWindows__CFoundation__CPointVtbl;

    interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CFoundation__CPoint
    {
        CONST_VTBL struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CFoundation__CPointVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CFoundation__CPoint_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CInput__CInking__CInkPoint_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CInput__CInking__CInkPoint_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CInput__CInking__CInkPoint __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CInput__CInking__CInkPoint;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CInput__CInking__CInkPoint;

    typedef struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CInput__CInking__CInkPointVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CInput__CInking__CInkPoint* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CInput__CInking__CInkPoint* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CInput__CInking__CInkPoint* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CInput__CInking__CInkPoint* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CInput__CInking__CInkPoint* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CInput__CInking__CInkPoint* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Current)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CInput__CInking__CInkPoint* This,
        __x_ABI_CWindows_CUI_CInput_CInking_CIInkPoint** result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CInput__CInking__CInkPoint* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CInput__CInking__CInkPoint* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CInput__CInking__CInkPoint* This,
        UINT32 itemsLength,
        __x_ABI_CWindows_CUI_CInput_CInking_CIInkPoint** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CInput__CInking__CInkPointVtbl;

    interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CInput__CInking__CInkPoint
    {
        CONST_VTBL struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CInput__CInking__CInkPointVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CInput__CInking__CInkPoint_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CInput__CInking__CInkPoint_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CInput__CInking__CInkPoint_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CInput__CInking__CInkPoint __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CInput__CInking__CInkPoint;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CInput__CInking__CInkPoint;

    typedef struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CInput__CInking__CInkPointVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CInput__CInking__CInkPoint* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CInput__CInking__CInkPoint* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CInput__CInking__CInkPoint* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CInput__CInking__CInkPoint* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CInput__CInking__CInkPoint* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CInput__CInking__CInkPoint* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* First)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CInput__CInking__CInkPoint* This,
        __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CInput__CInking__CInkPoint** result);

        END_INTERFACE
    } __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CInput__CInking__CInkPointVtbl;

    interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CInput__CInking__CInkPoint
    {
        CONST_VTBL struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CInput__CInking__CInkPointVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CInput__CInking__CInkPoint_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CInput__CInking__CInkRecognizer_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CInput__CInking__CInkRecognizer_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CInput__CInking__CInkRecognizer __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CInput__CInking__CInkRecognizer;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CInput__CInking__CInkRecognizer;

    typedef struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CInput__CInking__CInkRecognizerVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CInput__CInking__CInkRecognizer* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CInput__CInking__CInkRecognizer* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CInput__CInking__CInkRecognizer* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CInput__CInking__CInkRecognizer* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CInput__CInking__CInkRecognizer* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CInput__CInking__CInkRecognizer* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Current)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CInput__CInking__CInkRecognizer* This,
        __x_ABI_CWindows_CUI_CInput_CInking_CIInkRecognizer** result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CInput__CInking__CInkRecognizer* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CInput__CInking__CInkRecognizer* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CInput__CInking__CInkRecognizer* This,
        UINT32 itemsLength,
        __x_ABI_CWindows_CUI_CInput_CInking_CIInkRecognizer** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CInput__CInking__CInkRecognizerVtbl;

    interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CInput__CInking__CInkRecognizer
    {
        CONST_VTBL struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CInput__CInking__CInkRecognizerVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CInput__CInking__CInkRecognizer_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CInput__CInking__CInkRecognizer_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CInput__CInking__CInkRecognizer_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CInput__CInking__CInkRecognizer __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CInput__CInking__CInkRecognizer;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CInput__CInking__CInkRecognizer;

    typedef struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CInput__CInking__CInkRecognizerVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CInput__CInking__CInkRecognizer* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CInput__CInking__CInkRecognizer* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CInput__CInking__CInkRecognizer* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CInput__CInking__CInkRecognizer* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CInput__CInking__CInkRecognizer* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CInput__CInking__CInkRecognizer* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* First)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CInput__CInking__CInkRecognizer* This,
        __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CInput__CInking__CInkRecognizer** result);

        END_INTERFACE
    } __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CInput__CInking__CInkRecognizerVtbl;

    interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CInput__CInking__CInkRecognizer
    {
        CONST_VTBL struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CInput__CInking__CInkRecognizerVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CInput__CInking__CInkRecognizer_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CInput__CInking__CInkStroke_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CInput__CInking__CInkStroke_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CInput__CInking__CInkStroke __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CInput__CInking__CInkStroke;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CInput__CInking__CInkStroke;

    typedef struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CInput__CInking__CInkStrokeVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CInput__CInking__CInkStroke* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CInput__CInking__CInkStroke* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CInput__CInking__CInkStroke* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CInput__CInking__CInkStroke* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CInput__CInking__CInkStroke* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CInput__CInking__CInkStroke* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Current)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CInput__CInking__CInkStroke* This,
        __x_ABI_CWindows_CUI_CInput_CInking_CIInkStroke** result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CInput__CInking__CInkStroke* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CInput__CInking__CInkStroke* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CInput__CInking__CInkStroke* This,
        UINT32 itemsLength,
        __x_ABI_CWindows_CUI_CInput_CInking_CIInkStroke** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CInput__CInking__CInkStrokeVtbl;

    interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CInput__CInking__CInkStroke
    {
        CONST_VTBL struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CInput__CInking__CInkStrokeVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CInput__CInking__CInkStroke_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CInput__CInking__CInkStroke_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CInput__CInking__CInkStroke_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CInput__CInking__CInkStroke __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CInput__CInking__CInkStroke;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CInput__CInking__CInkStroke;

    typedef struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CInput__CInking__CInkStrokeVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CInput__CInking__CInkStroke* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CInput__CInking__CInkStroke* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CInput__CInking__CInkStroke* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CInput__CInking__CInkStroke* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CInput__CInking__CInkStroke* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CInput__CInking__CInkStroke* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* First)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CInput__CInking__CInkStroke* This,
        __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CInput__CInking__CInkStroke** result);

        END_INTERFACE
    } __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CInput__CInking__CInkStrokeVtbl;

    interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CInput__CInking__CInkStroke
    {
        CONST_VTBL struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CInput__CInking__CInkStrokeVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CInput__CInking__CInkStroke_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CInput__CInking__CInkStrokeRenderingSegment_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CInput__CInking__CInkStrokeRenderingSegment_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CInput__CInking__CInkStrokeRenderingSegment __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CInput__CInking__CInkStrokeRenderingSegment;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CInput__CInking__CInkStrokeRenderingSegment;

    typedef struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CInput__CInking__CInkStrokeRenderingSegmentVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CInput__CInking__CInkStrokeRenderingSegment* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CInput__CInking__CInkStrokeRenderingSegment* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CInput__CInking__CInkStrokeRenderingSegment* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CInput__CInking__CInkStrokeRenderingSegment* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CInput__CInking__CInkStrokeRenderingSegment* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CInput__CInking__CInkStrokeRenderingSegment* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Current)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CInput__CInking__CInkStrokeRenderingSegment* This,
        __x_ABI_CWindows_CUI_CInput_CInking_CIInkStrokeRenderingSegment** result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CInput__CInking__CInkStrokeRenderingSegment* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CInput__CInking__CInkStrokeRenderingSegment* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CInput__CInking__CInkStrokeRenderingSegment* This,
        UINT32 itemsLength,
        __x_ABI_CWindows_CUI_CInput_CInking_CIInkStrokeRenderingSegment** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CInput__CInking__CInkStrokeRenderingSegmentVtbl;

    interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CInput__CInking__CInkStrokeRenderingSegment
    {
        CONST_VTBL struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CInput__CInking__CInkStrokeRenderingSegmentVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CInput__CInking__CInkStrokeRenderingSegment_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CInput__CInking__CInkStrokeRenderingSegment_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CInput__CInking__CInkStrokeRenderingSegment_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CInput__CInking__CInkStrokeRenderingSegment __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CInput__CInking__CInkStrokeRenderingSegment;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CInput__CInking__CInkStrokeRenderingSegment;

    typedef struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CInput__CInking__CInkStrokeRenderingSegmentVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CInput__CInking__CInkStrokeRenderingSegment* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CInput__CInking__CInkStrokeRenderingSegment* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CInput__CInking__CInkStrokeRenderingSegment* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CInput__CInking__CInkStrokeRenderingSegment* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CInput__CInking__CInkStrokeRenderingSegment* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CInput__CInking__CInkStrokeRenderingSegment* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* First)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CInput__CInking__CInkStrokeRenderingSegment* This,
        __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CInput__CInking__CInkStrokeRenderingSegment** result);

        END_INTERFACE
    } __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CInput__CInking__CInkStrokeRenderingSegmentVtbl;

    interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CInput__CInking__CInkStrokeRenderingSegment
    {
        CONST_VTBL struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CInput__CInking__CInkStrokeRenderingSegmentVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CInput__CInking__CInkStrokeRenderingSegment_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVectorView_1_HSTRING_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVectorView_1_HSTRING_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVectorView_1_HSTRING __x_ABI_C__FIVectorView_1_HSTRING;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVectorView_1_HSTRING;

    typedef struct __x_ABI_C__FIVectorView_1_HSTRINGVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVectorView_1_HSTRING* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVectorView_1_HSTRING* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVectorView_1_HSTRING* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVectorView_1_HSTRING* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVectorView_1_HSTRING* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVectorView_1_HSTRING* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVectorView_1_HSTRING* This,
        UINT32 index,
        HSTRING* result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVectorView_1_HSTRING* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVectorView_1_HSTRING* This,
        HSTRING value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVectorView_1_HSTRING* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        HSTRING* items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIVectorView_1_HSTRINGVtbl;

    interface __x_ABI_C__FIVectorView_1_HSTRING
    {
        CONST_VTBL struct __x_ABI_C__FIVectorView_1_HSTRINGVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVectorView_1_HSTRING_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CInking__CInkPoint_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CInking__CInkPoint_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CInking__CInkPoint __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CInking__CInkPoint;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CInking__CInkPoint;

    typedef struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CInking__CInkPointVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CInking__CInkPoint* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CInking__CInkPoint* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CInking__CInkPoint* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CInking__CInkPoint* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CInking__CInkPoint* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CInking__CInkPoint* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CInking__CInkPoint* This,
        UINT32 index,
        __x_ABI_CWindows_CUI_CInput_CInking_CIInkPoint** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CInking__CInkPoint* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CInking__CInkPoint* This,
        __x_ABI_CWindows_CUI_CInput_CInking_CIInkPoint* value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CInking__CInkPoint* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        __x_ABI_CWindows_CUI_CInput_CInking_CIInkPoint** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CInking__CInkPointVtbl;

    interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CInking__CInkPoint
    {
        CONST_VTBL struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CInking__CInkPointVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CInking__CInkPoint_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CInking__CInkRecognizer_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CInking__CInkRecognizer_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CInking__CInkRecognizer __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CInking__CInkRecognizer;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CInking__CInkRecognizer;

    typedef struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CInking__CInkRecognizerVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CInking__CInkRecognizer* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CInking__CInkRecognizer* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CInking__CInkRecognizer* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CInking__CInkRecognizer* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CInking__CInkRecognizer* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CInking__CInkRecognizer* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CInking__CInkRecognizer* This,
        UINT32 index,
        __x_ABI_CWindows_CUI_CInput_CInking_CIInkRecognizer** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CInking__CInkRecognizer* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CInking__CInkRecognizer* This,
        __x_ABI_CWindows_CUI_CInput_CInking_CIInkRecognizer* value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CInking__CInkRecognizer* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        __x_ABI_CWindows_CUI_CInput_CInking_CIInkRecognizer** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CInking__CInkRecognizerVtbl;

    interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CInking__CInkRecognizer
    {
        CONST_VTBL struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CInking__CInkRecognizerVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CInking__CInkRecognizer_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CInking__CInkStroke_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CInking__CInkStroke_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CInking__CInkStroke __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CInking__CInkStroke;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CInking__CInkStroke;

    typedef struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CInking__CInkStrokeVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CInking__CInkStroke* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CInking__CInkStroke* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CInking__CInkStroke* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CInking__CInkStroke* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CInking__CInkStroke* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CInking__CInkStroke* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CInking__CInkStroke* This,
        UINT32 index,
        __x_ABI_CWindows_CUI_CInput_CInking_CIInkStroke** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CInking__CInkStroke* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CInking__CInkStroke* This,
        __x_ABI_CWindows_CUI_CInput_CInking_CIInkStroke* value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CInking__CInkStroke* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        __x_ABI_CWindows_CUI_CInput_CInking_CIInkStroke** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CInking__CInkStrokeVtbl;

    interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CInking__CInkStroke
    {
        CONST_VTBL struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CInking__CInkStrokeVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CInking__CInkStroke_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CInking__CInkStrokeRenderingSegment_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CInking__CInkStrokeRenderingSegment_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CInking__CInkStrokeRenderingSegment __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CInking__CInkStrokeRenderingSegment;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CInking__CInkStrokeRenderingSegment;

    typedef struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CInking__CInkStrokeRenderingSegmentVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CInking__CInkStrokeRenderingSegment* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CInking__CInkStrokeRenderingSegment* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CInking__CInkStrokeRenderingSegment* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CInking__CInkStrokeRenderingSegment* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CInking__CInkStrokeRenderingSegment* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CInking__CInkStrokeRenderingSegment* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CInking__CInkStrokeRenderingSegment* This,
        UINT32 index,
        __x_ABI_CWindows_CUI_CInput_CInking_CIInkStrokeRenderingSegment** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CInking__CInkStrokeRenderingSegment* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CInking__CInkStrokeRenderingSegment* This,
        __x_ABI_CWindows_CUI_CInput_CInking_CIInkStrokeRenderingSegment* value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CInking__CInkStrokeRenderingSegment* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        __x_ABI_CWindows_CUI_CInput_CInking_CIInkStrokeRenderingSegment** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CInking__CInkStrokeRenderingSegmentVtbl;

    interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CInking__CInkStrokeRenderingSegment
    {
        CONST_VTBL struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CInking__CInkStrokeRenderingSegmentVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CInking__CInkStrokeRenderingSegment_INTERFACE_DEFINED__
    
typedef struct __x_ABI_CWindows_CFoundation_CDateTime __x_ABI_CWindows_CFoundation_CDateTime;

#if !defined(____x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CDateTime_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CDateTime_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CDateTime __x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CDateTime;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CDateTime;

    typedef struct __x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CDateTimeVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CDateTime* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CDateTime* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CDateTime* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CDateTime* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CDateTime* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CDateTime* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Value)(__x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CDateTime* This,
        struct __x_ABI_CWindows_CFoundation_CDateTime* result);

        END_INTERFACE
    } __x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CDateTimeVtbl;

    interface __x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CDateTime
    {
        CONST_VTBL struct __x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CDateTimeVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CDateTime_INTERFACE_DEFINED__
    
typedef struct __x_ABI_CWindows_CFoundation_CTimeSpan __x_ABI_CWindows_CFoundation_CTimeSpan;

#if !defined(____x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CTimeSpan_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CTimeSpan_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CTimeSpan __x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CTimeSpan;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CTimeSpan;

    typedef struct __x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CTimeSpanVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CTimeSpan* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CTimeSpan* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CTimeSpan* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CTimeSpan* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CTimeSpan* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CTimeSpan* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Value)(__x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CTimeSpan* This,
        struct __x_ABI_CWindows_CFoundation_CTimeSpan* result);

        END_INTERFACE
    } __x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CTimeSpanVtbl;

    interface __x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CTimeSpan
    {
        CONST_VTBL struct __x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CTimeSpanVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CTimeSpan_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CInking__CInkPresenter___x_ABI_CWindows__CUI__CInput__CInking__CInkStrokesCollectedEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CInking__CInkPresenter___x_ABI_CWindows__CUI__CInput__CInking__CInkStrokesCollectedEventArgs_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CInking__CInkPresenter___x_ABI_CWindows__CUI__CInput__CInking__CInkStrokesCollectedEventArgs __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CInking__CInkPresenter___x_ABI_CWindows__CUI__CInput__CInking__CInkStrokesCollectedEventArgs;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CInking__CInkPresenter___x_ABI_CWindows__CUI__CInput__CInking__CInkStrokesCollectedEventArgs;

    typedef struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CInking__CInkPresenter___x_ABI_CWindows__CUI__CInput__CInking__CInkStrokesCollectedEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CInking__CInkPresenter___x_ABI_CWindows__CUI__CInput__CInking__CInkStrokesCollectedEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CInking__CInkPresenter___x_ABI_CWindows__CUI__CInput__CInking__CInkStrokesCollectedEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CInking__CInkPresenter___x_ABI_CWindows__CUI__CInput__CInking__CInkStrokesCollectedEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CInking__CInkPresenter___x_ABI_CWindows__CUI__CInput__CInking__CInkStrokesCollectedEventArgs* This,
        __x_ABI_CWindows_CUI_CInput_CInking_CIInkPresenter* sender,
        __x_ABI_CWindows_CUI_CInput_CInking_CIInkStrokesCollectedEventArgs* args);

        END_INTERFACE
    } __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CInking__CInkPresenter___x_ABI_CWindows__CUI__CInput__CInking__CInkStrokesCollectedEventArgsVtbl;

    interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CInking__CInkPresenter___x_ABI_CWindows__CUI__CInput__CInking__CInkStrokesCollectedEventArgs
    {
        CONST_VTBL struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CInking__CInkPresenter___x_ABI_CWindows__CUI__CInput__CInking__CInkStrokesCollectedEventArgsVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CInking__CInkPresenter___x_ABI_CWindows__CUI__CInput__CInking__CInkStrokesCollectedEventArgs_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CInking__CInkPresenter___x_ABI_CWindows__CUI__CInput__CInking__CInkStrokesErasedEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CInking__CInkPresenter___x_ABI_CWindows__CUI__CInput__CInking__CInkStrokesErasedEventArgs_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CInking__CInkPresenter___x_ABI_CWindows__CUI__CInput__CInking__CInkStrokesErasedEventArgs __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CInking__CInkPresenter___x_ABI_CWindows__CUI__CInput__CInking__CInkStrokesErasedEventArgs;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CInking__CInkPresenter___x_ABI_CWindows__CUI__CInput__CInking__CInkStrokesErasedEventArgs;

    typedef struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CInking__CInkPresenter___x_ABI_CWindows__CUI__CInput__CInking__CInkStrokesErasedEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CInking__CInkPresenter___x_ABI_CWindows__CUI__CInput__CInking__CInkStrokesErasedEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CInking__CInkPresenter___x_ABI_CWindows__CUI__CInput__CInking__CInkStrokesErasedEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CInking__CInkPresenter___x_ABI_CWindows__CUI__CInput__CInking__CInkStrokesErasedEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CInking__CInkPresenter___x_ABI_CWindows__CUI__CInput__CInking__CInkStrokesErasedEventArgs* This,
        __x_ABI_CWindows_CUI_CInput_CInking_CIInkPresenter* sender,
        __x_ABI_CWindows_CUI_CInput_CInking_CIInkStrokesErasedEventArgs* args);

        END_INTERFACE
    } __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CInking__CInkPresenter___x_ABI_CWindows__CUI__CInput__CInking__CInkStrokesErasedEventArgsVtbl;

    interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CInking__CInkPresenter___x_ABI_CWindows__CUI__CInput__CInking__CInkStrokesErasedEventArgs
    {
        CONST_VTBL struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CInking__CInkPresenter___x_ABI_CWindows__CUI__CInput__CInking__CInkStrokesErasedEventArgsVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CInking__CInkPresenter___x_ABI_CWindows__CUI__CInput__CInking__CInkStrokesErasedEventArgs_INTERFACE_DEFINED__
    
#ifndef ____x_ABI_CWindows_CUI_CCore_CIPointerEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CCore_CIPointerEventArgs_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CCore_CIPointerEventArgs __x_ABI_CWindows_CUI_CCore_CIPointerEventArgs;

#endif // ____x_ABI_CWindows_CUI_CCore_CIPointerEventArgs_FWD_DEFINED__

#if !defined(____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CInking__CInkStrokeInput___x_ABI_CWindows__CUI__CCore__CPointerEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CInking__CInkStrokeInput___x_ABI_CWindows__CUI__CCore__CPointerEventArgs_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CInking__CInkStrokeInput___x_ABI_CWindows__CUI__CCore__CPointerEventArgs __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CInking__CInkStrokeInput___x_ABI_CWindows__CUI__CCore__CPointerEventArgs;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CInking__CInkStrokeInput___x_ABI_CWindows__CUI__CCore__CPointerEventArgs;

    typedef struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CInking__CInkStrokeInput___x_ABI_CWindows__CUI__CCore__CPointerEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CInking__CInkStrokeInput___x_ABI_CWindows__CUI__CCore__CPointerEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CInking__CInkStrokeInput___x_ABI_CWindows__CUI__CCore__CPointerEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CInking__CInkStrokeInput___x_ABI_CWindows__CUI__CCore__CPointerEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CInking__CInkStrokeInput___x_ABI_CWindows__CUI__CCore__CPointerEventArgs* This,
        __x_ABI_CWindows_CUI_CInput_CInking_CIInkStrokeInput* sender,
        __x_ABI_CWindows_CUI_CCore_CIPointerEventArgs* args);

        END_INTERFACE
    } __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CInking__CInkStrokeInput___x_ABI_CWindows__CUI__CCore__CPointerEventArgsVtbl;

    interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CInking__CInkStrokeInput___x_ABI_CWindows__CUI__CCore__CPointerEventArgs
    {
        CONST_VTBL struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CInking__CInkStrokeInput___x_ABI_CWindows__CUI__CCore__CPointerEventArgsVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CInking__CInkStrokeInput___x_ABI_CWindows__CUI__CCore__CPointerEventArgs_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CInking__CInkUnprocessedInput___x_ABI_CWindows__CUI__CCore__CPointerEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CInking__CInkUnprocessedInput___x_ABI_CWindows__CUI__CCore__CPointerEventArgs_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CInking__CInkUnprocessedInput___x_ABI_CWindows__CUI__CCore__CPointerEventArgs __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CInking__CInkUnprocessedInput___x_ABI_CWindows__CUI__CCore__CPointerEventArgs;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CInking__CInkUnprocessedInput___x_ABI_CWindows__CUI__CCore__CPointerEventArgs;

    typedef struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CInking__CInkUnprocessedInput___x_ABI_CWindows__CUI__CCore__CPointerEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CInking__CInkUnprocessedInput___x_ABI_CWindows__CUI__CCore__CPointerEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CInking__CInkUnprocessedInput___x_ABI_CWindows__CUI__CCore__CPointerEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CInking__CInkUnprocessedInput___x_ABI_CWindows__CUI__CCore__CPointerEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CInking__CInkUnprocessedInput___x_ABI_CWindows__CUI__CCore__CPointerEventArgs* This,
        __x_ABI_CWindows_CUI_CInput_CInking_CIInkUnprocessedInput* sender,
        __x_ABI_CWindows_CUI_CCore_CIPointerEventArgs* args);

        END_INTERFACE
    } __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CInking__CInkUnprocessedInput___x_ABI_CWindows__CUI__CCore__CPointerEventArgsVtbl;

    interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CInking__CInkUnprocessedInput___x_ABI_CWindows__CUI__CCore__CPointerEventArgs
    {
        CONST_VTBL struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CInking__CInkUnprocessedInput___x_ABI_CWindows__CUI__CCore__CPointerEventArgsVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CInking__CInkUnprocessedInput___x_ABI_CWindows__CUI__CCore__CPointerEventArgs_INTERFACE_DEFINED__
    
typedef enum __x_ABI_CWindows_CFoundation_CAsyncStatus __x_ABI_CWindows_CFoundation_CAsyncStatus;

#ifndef ____x_ABI_CWindows_CFoundation_CIAsyncInfo_FWD_DEFINED__
#define ____x_ABI_CWindows_CFoundation_CIAsyncInfo_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CFoundation_CIAsyncInfo __x_ABI_CWindows_CFoundation_CIAsyncInfo;

#endif // ____x_ABI_CWindows_CFoundation_CIAsyncInfo_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CFoundation_CIPropertyValue_FWD_DEFINED__
#define ____x_ABI_CWindows_CFoundation_CIPropertyValue_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CFoundation_CIPropertyValue __x_ABI_CWindows_CFoundation_CIPropertyValue;

#endif // ____x_ABI_CWindows_CFoundation_CIPropertyValue_FWD_DEFINED__

typedef struct __x_ABI_CWindows_CFoundation_CNumerics_CMatrix3x2 __x_ABI_CWindows_CFoundation_CNumerics_CMatrix3x2;

typedef struct __x_ABI_CWindows_CFoundation_CRect __x_ABI_CWindows_CFoundation_CRect;

typedef struct __x_ABI_CWindows_CFoundation_CSize __x_ABI_CWindows_CFoundation_CSize;

#ifndef ____x_ABI_CWindows_CStorage_CStreams_CIInputStream_FWD_DEFINED__
#define ____x_ABI_CWindows_CStorage_CStreams_CIInputStream_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CStorage_CStreams_CIInputStream __x_ABI_CWindows_CStorage_CStreams_CIInputStream;

#endif // ____x_ABI_CWindows_CStorage_CStreams_CIInputStream_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CStorage_CStreams_CIOutputStream_FWD_DEFINED__
#define ____x_ABI_CWindows_CStorage_CStreams_CIOutputStream_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CStorage_CStreams_CIOutputStream __x_ABI_CWindows_CStorage_CStreams_CIOutputStream;

#endif // ____x_ABI_CWindows_CStorage_CStreams_CIOutputStream_FWD_DEFINED__

typedef struct __x_ABI_CWindows_CUI_CColor __x_ABI_CWindows_CUI_CColor;

typedef enum __x_ABI_CWindows_CUI_CCore_CCoreInputDeviceTypes __x_ABI_CWindows_CUI_CCore_CCoreInputDeviceTypes;

#ifndef ____x_ABI_CWindows_CUI_CInput_CIPointerPoint_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CInput_CIPointerPoint_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CInput_CIPointerPoint __x_ABI_CWindows_CUI_CInput_CIPointerPoint;

#endif // ____x_ABI_CWindows_CUI_CInput_CIPointerPoint_FWD_DEFINED__

typedef enum __x_ABI_CWindows_CUI_CInput_CInking_CHandwritingLineHeight __x_ABI_CWindows_CUI_CInput_CInking_CHandwritingLineHeight;

typedef enum __x_ABI_CWindows_CUI_CInput_CInking_CInkDrawingAttributesKind __x_ABI_CWindows_CUI_CInput_CInking_CInkDrawingAttributesKind;

typedef enum __x_ABI_CWindows_CUI_CInput_CInking_CInkHighContrastAdjustment __x_ABI_CWindows_CUI_CInput_CInking_CInkHighContrastAdjustment;

typedef enum __x_ABI_CWindows_CUI_CInput_CInking_CInkInputProcessingMode __x_ABI_CWindows_CUI_CInput_CInking_CInkInputProcessingMode;

typedef enum __x_ABI_CWindows_CUI_CInput_CInking_CInkInputRightDragAction __x_ABI_CWindows_CUI_CInput_CInking_CInkInputRightDragAction;

typedef enum __x_ABI_CWindows_CUI_CInput_CInking_CInkManipulationMode __x_ABI_CWindows_CUI_CInput_CInking_CInkManipulationMode;

typedef enum __x_ABI_CWindows_CUI_CInput_CInking_CInkPersistenceFormat __x_ABI_CWindows_CUI_CInput_CInking_CInkPersistenceFormat;

typedef enum __x_ABI_CWindows_CUI_CInput_CInking_CInkPresenterPredefinedConfiguration __x_ABI_CWindows_CUI_CInput_CInking_CInkPresenterPredefinedConfiguration;

typedef enum __x_ABI_CWindows_CUI_CInput_CInking_CInkPresenterStencilKind __x_ABI_CWindows_CUI_CInput_CInking_CInkPresenterStencilKind;

typedef enum __x_ABI_CWindows_CUI_CInput_CInking_CInkRecognitionTarget __x_ABI_CWindows_CUI_CInput_CInking_CInkRecognitionTarget;

typedef enum __x_ABI_CWindows_CUI_CInput_CInking_CPenHandedness __x_ABI_CWindows_CUI_CInput_CInking_CPenHandedness;

typedef enum __x_ABI_CWindows_CUI_CInput_CInking_CPenTipShape __x_ABI_CWindows_CUI_CInput_CInking_CPenTipShape;

enum __x_ABI_CWindows_CUI_CInput_CInking_CHandwritingLineHeight
    {
        __x_ABI_CWindows_CUI_CInput_CInking_CHandwritingLineHeight_Small = 0,
    __x_ABI_CWindows_CUI_CInput_CInking_CHandwritingLineHeight_Medium = 1,
    __x_ABI_CWindows_CUI_CInput_CInking_CHandwritingLineHeight_Large = 2,
};

enum __x_ABI_CWindows_CUI_CInput_CInking_CInkDrawingAttributesKind
    {
        __x_ABI_CWindows_CUI_CInput_CInking_CInkDrawingAttributesKind_Default = 0,
    __x_ABI_CWindows_CUI_CInput_CInking_CInkDrawingAttributesKind_Pencil = 1,
};

enum __x_ABI_CWindows_CUI_CInput_CInking_CInkHighContrastAdjustment
    {
        __x_ABI_CWindows_CUI_CInput_CInking_CInkHighContrastAdjustment_UseSystemColorsWhenNecessary = 0,
    __x_ABI_CWindows_CUI_CInput_CInking_CInkHighContrastAdjustment_UseSystemColors = 1,
    __x_ABI_CWindows_CUI_CInput_CInking_CInkHighContrastAdjustment_UseOriginalColors = 2,
};

enum __x_ABI_CWindows_CUI_CInput_CInking_CInkInputProcessingMode
    {
        __x_ABI_CWindows_CUI_CInput_CInking_CInkInputProcessingMode_None = 0,
    __x_ABI_CWindows_CUI_CInput_CInking_CInkInputProcessingMode_Inking = 1,
    __x_ABI_CWindows_CUI_CInput_CInking_CInkInputProcessingMode_Erasing = 2,
};

enum __x_ABI_CWindows_CUI_CInput_CInking_CInkInputRightDragAction
    {
        __x_ABI_CWindows_CUI_CInput_CInking_CInkInputRightDragAction_LeaveUnprocessed = 0,
    __x_ABI_CWindows_CUI_CInput_CInking_CInkInputRightDragAction_AllowProcessing = 1,
};

enum __x_ABI_CWindows_CUI_CInput_CInking_CInkManipulationMode
    {
        __x_ABI_CWindows_CUI_CInput_CInking_CInkManipulationMode_Inking = 0,
    __x_ABI_CWindows_CUI_CInput_CInking_CInkManipulationMode_Erasing = 1,
    __x_ABI_CWindows_CUI_CInput_CInking_CInkManipulationMode_Selecting = 2,
};

enum __x_ABI_CWindows_CUI_CInput_CInking_CInkPersistenceFormat
    {
        __x_ABI_CWindows_CUI_CInput_CInking_CInkPersistenceFormat_GifWithEmbeddedIsf = 0,
    __x_ABI_CWindows_CUI_CInput_CInking_CInkPersistenceFormat_Isf = 1,
};

enum __x_ABI_CWindows_CUI_CInput_CInking_CInkPresenterPredefinedConfiguration
    {
        __x_ABI_CWindows_CUI_CInput_CInking_CInkPresenterPredefinedConfiguration_SimpleSinglePointer = 0,
    __x_ABI_CWindows_CUI_CInput_CInking_CInkPresenterPredefinedConfiguration_SimpleMultiplePointer = 1,
};

enum __x_ABI_CWindows_CUI_CInput_CInking_CInkPresenterStencilKind
    {
        __x_ABI_CWindows_CUI_CInput_CInking_CInkPresenterStencilKind_Other = 0,
    __x_ABI_CWindows_CUI_CInput_CInking_CInkPresenterStencilKind_Ruler = 1,
    __x_ABI_CWindows_CUI_CInput_CInking_CInkPresenterStencilKind_Protractor = 2,
};

enum __x_ABI_CWindows_CUI_CInput_CInking_CInkRecognitionTarget
    {
        __x_ABI_CWindows_CUI_CInput_CInking_CInkRecognitionTarget_All = 0,
    __x_ABI_CWindows_CUI_CInput_CInking_CInkRecognitionTarget_Selected = 1,
    __x_ABI_CWindows_CUI_CInput_CInking_CInkRecognitionTarget_Recent = 2,
};

enum __x_ABI_CWindows_CUI_CInput_CInking_CPenHandedness
    {
        __x_ABI_CWindows_CUI_CInput_CInking_CPenHandedness_Right = 0,
    __x_ABI_CWindows_CUI_CInput_CInking_CPenHandedness_Left = 1,
};

enum __x_ABI_CWindows_CUI_CInput_CInking_CPenTipShape
    {
        __x_ABI_CWindows_CUI_CInput_CInking_CPenTipShape_Circle = 0,
    __x_ABI_CWindows_CUI_CInput_CInking_CPenTipShape_Rectangle = 1,
};

#if !defined(____x_ABI_CWindows_CUI_CInput_CInking_CIInkDrawingAttributes_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CInput_CInking_CIInkDrawingAttributes_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CInput_CInking_CIInkDrawingAttributesVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkDrawingAttributes* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkDrawingAttributes* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkDrawingAttributes* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkDrawingAttributes* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkDrawingAttributes* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkDrawingAttributes* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Color)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkDrawingAttributes* This,
        struct __x_ABI_CWindows_CUI_CColor* value);
    HRESULT (STDMETHODCALLTYPE* put_Color)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkDrawingAttributes* This,
        struct __x_ABI_CWindows_CUI_CColor value);
    HRESULT (STDMETHODCALLTYPE* get_PenTip)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkDrawingAttributes* This,
        enum __x_ABI_CWindows_CUI_CInput_CInking_CPenTipShape* value);
    HRESULT (STDMETHODCALLTYPE* put_PenTip)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkDrawingAttributes* This,
        enum __x_ABI_CWindows_CUI_CInput_CInking_CPenTipShape value);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkDrawingAttributes* This,
        struct __x_ABI_CWindows_CFoundation_CSize* value);
    HRESULT (STDMETHODCALLTYPE* put_Size)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkDrawingAttributes* This,
        struct __x_ABI_CWindows_CFoundation_CSize value);
    HRESULT (STDMETHODCALLTYPE* get_IgnorePressure)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkDrawingAttributes* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* put_IgnorePressure)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkDrawingAttributes* This,
        boolean value);
    HRESULT (STDMETHODCALLTYPE* get_FitToCurve)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkDrawingAttributes* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* put_FitToCurve)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkDrawingAttributes* This,
        boolean value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CInput_CInking_CIInkDrawingAttributesVtbl;

    interface __x_ABI_CWindows_CUI_CInput_CInking_CIInkDrawingAttributes
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CInput_CInking_CIInkDrawingAttributesVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CInput_CInking_CIInkDrawingAttributes;
#endif /* !defined(____x_ABI_CWindows_CUI_CInput_CInking_CIInkDrawingAttributes_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CInput_CInking_CIInkDrawingAttributes2_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CInput_CInking_CIInkDrawingAttributes2_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CInput_CInking_CIInkDrawingAttributes2Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkDrawingAttributes2* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkDrawingAttributes2* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkDrawingAttributes2* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkDrawingAttributes2* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkDrawingAttributes2* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkDrawingAttributes2* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_PenTipTransform)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkDrawingAttributes2* This,
        struct __x_ABI_CWindows_CFoundation_CNumerics_CMatrix3x2* value);
    HRESULT (STDMETHODCALLTYPE* put_PenTipTransform)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkDrawingAttributes2* This,
        struct __x_ABI_CWindows_CFoundation_CNumerics_CMatrix3x2 value);
    HRESULT (STDMETHODCALLTYPE* get_DrawAsHighlighter)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkDrawingAttributes2* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* put_DrawAsHighlighter)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkDrawingAttributes2* This,
        boolean value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CInput_CInking_CIInkDrawingAttributes2Vtbl;

    interface __x_ABI_CWindows_CUI_CInput_CInking_CIInkDrawingAttributes2
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CInput_CInking_CIInkDrawingAttributes2Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CInput_CInking_CIInkDrawingAttributes2;
#endif /* !defined(____x_ABI_CWindows_CUI_CInput_CInking_CIInkDrawingAttributes2_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CInput_CInking_CIInkDrawingAttributes3_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CInput_CInking_CIInkDrawingAttributes3_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CInput_CInking_CIInkDrawingAttributes3Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkDrawingAttributes3* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkDrawingAttributes3* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkDrawingAttributes3* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkDrawingAttributes3* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkDrawingAttributes3* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkDrawingAttributes3* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Kind)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkDrawingAttributes3* This,
        enum __x_ABI_CWindows_CUI_CInput_CInking_CInkDrawingAttributesKind* value);
    HRESULT (STDMETHODCALLTYPE* get_PencilProperties)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkDrawingAttributes3* This,
        __x_ABI_CWindows_CUI_CInput_CInking_CIInkDrawingAttributesPencilProperties** value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CInput_CInking_CIInkDrawingAttributes3Vtbl;

    interface __x_ABI_CWindows_CUI_CInput_CInking_CIInkDrawingAttributes3
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CInput_CInking_CIInkDrawingAttributes3Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CInput_CInking_CIInkDrawingAttributes3;
#endif /* !defined(____x_ABI_CWindows_CUI_CInput_CInking_CIInkDrawingAttributes3_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CInput_CInking_CIInkDrawingAttributes4_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CInput_CInking_CIInkDrawingAttributes4_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CInput_CInking_CIInkDrawingAttributes4Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkDrawingAttributes4* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkDrawingAttributes4* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkDrawingAttributes4* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkDrawingAttributes4* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkDrawingAttributes4* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkDrawingAttributes4* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_IgnoreTilt)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkDrawingAttributes4* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* put_IgnoreTilt)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkDrawingAttributes4* This,
        boolean value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CInput_CInking_CIInkDrawingAttributes4Vtbl;

    interface __x_ABI_CWindows_CUI_CInput_CInking_CIInkDrawingAttributes4
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CInput_CInking_CIInkDrawingAttributes4Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CInput_CInking_CIInkDrawingAttributes4;
#endif /* !defined(____x_ABI_CWindows_CUI_CInput_CInking_CIInkDrawingAttributes4_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CInput_CInking_CIInkDrawingAttributes5_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CInput_CInking_CIInkDrawingAttributes5_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CInput_CInking_CIInkDrawingAttributes5Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkDrawingAttributes5* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkDrawingAttributes5* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkDrawingAttributes5* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkDrawingAttributes5* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkDrawingAttributes5* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkDrawingAttributes5* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_ModelerAttributes)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkDrawingAttributes5* This,
        __x_ABI_CWindows_CUI_CInput_CInking_CIInkModelerAttributes** value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CInput_CInking_CIInkDrawingAttributes5Vtbl;

    interface __x_ABI_CWindows_CUI_CInput_CInking_CIInkDrawingAttributes5
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CInput_CInking_CIInkDrawingAttributes5Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CInput_CInking_CIInkDrawingAttributes5;
#endif /* !defined(____x_ABI_CWindows_CUI_CInput_CInking_CIInkDrawingAttributes5_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CInput_CInking_CIInkDrawingAttributesPencilProperties_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CInput_CInking_CIInkDrawingAttributesPencilProperties_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CInput_CInking_CIInkDrawingAttributesPencilPropertiesVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkDrawingAttributesPencilProperties* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkDrawingAttributesPencilProperties* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkDrawingAttributesPencilProperties* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkDrawingAttributesPencilProperties* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkDrawingAttributesPencilProperties* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkDrawingAttributesPencilProperties* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Opacity)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkDrawingAttributesPencilProperties* This,
        DOUBLE* value);
    HRESULT (STDMETHODCALLTYPE* put_Opacity)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkDrawingAttributesPencilProperties* This,
        DOUBLE value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CInput_CInking_CIInkDrawingAttributesPencilPropertiesVtbl;

    interface __x_ABI_CWindows_CUI_CInput_CInking_CIInkDrawingAttributesPencilProperties
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CInput_CInking_CIInkDrawingAttributesPencilPropertiesVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CInput_CInking_CIInkDrawingAttributesPencilProperties;
#endif /* !defined(____x_ABI_CWindows_CUI_CInput_CInking_CIInkDrawingAttributesPencilProperties_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CInput_CInking_CIInkDrawingAttributesStatics_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CInput_CInking_CIInkDrawingAttributesStatics_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CInput_CInking_CIInkDrawingAttributesStaticsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkDrawingAttributesStatics* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkDrawingAttributesStatics* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkDrawingAttributesStatics* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkDrawingAttributesStatics* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkDrawingAttributesStatics* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkDrawingAttributesStatics* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* CreateForPencil)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkDrawingAttributesStatics* This,
        __x_ABI_CWindows_CUI_CInput_CInking_CIInkDrawingAttributes** result);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CInput_CInking_CIInkDrawingAttributesStaticsVtbl;

    interface __x_ABI_CWindows_CUI_CInput_CInking_CIInkDrawingAttributesStatics
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CInput_CInking_CIInkDrawingAttributesStaticsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CInput_CInking_CIInkDrawingAttributesStatics;
#endif /* !defined(____x_ABI_CWindows_CUI_CInput_CInking_CIInkDrawingAttributesStatics_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CInput_CInking_CIInkInputConfiguration_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CInput_CInking_CIInkInputConfiguration_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CInput_CInking_CIInkInputConfigurationVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkInputConfiguration* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkInputConfiguration* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkInputConfiguration* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkInputConfiguration* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkInputConfiguration* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkInputConfiguration* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_IsPrimaryBarrelButtonInputEnabled)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkInputConfiguration* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* put_IsPrimaryBarrelButtonInputEnabled)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkInputConfiguration* This,
        boolean value);
    HRESULT (STDMETHODCALLTYPE* get_IsEraserInputEnabled)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkInputConfiguration* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* put_IsEraserInputEnabled)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkInputConfiguration* This,
        boolean value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CInput_CInking_CIInkInputConfigurationVtbl;

    interface __x_ABI_CWindows_CUI_CInput_CInking_CIInkInputConfiguration
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CInput_CInking_CIInkInputConfigurationVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CInput_CInking_CIInkInputConfiguration;
#endif /* !defined(____x_ABI_CWindows_CUI_CInput_CInking_CIInkInputConfiguration_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CInput_CInking_CIInkInputProcessingConfiguration_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CInput_CInking_CIInkInputProcessingConfiguration_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CInput_CInking_CIInkInputProcessingConfigurationVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkInputProcessingConfiguration* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkInputProcessingConfiguration* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkInputProcessingConfiguration* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkInputProcessingConfiguration* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkInputProcessingConfiguration* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkInputProcessingConfiguration* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Mode)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkInputProcessingConfiguration* This,
        enum __x_ABI_CWindows_CUI_CInput_CInking_CInkInputProcessingMode* value);
    HRESULT (STDMETHODCALLTYPE* put_Mode)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkInputProcessingConfiguration* This,
        enum __x_ABI_CWindows_CUI_CInput_CInking_CInkInputProcessingMode value);
    HRESULT (STDMETHODCALLTYPE* get_RightDragAction)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkInputProcessingConfiguration* This,
        enum __x_ABI_CWindows_CUI_CInput_CInking_CInkInputRightDragAction* value);
    HRESULT (STDMETHODCALLTYPE* put_RightDragAction)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkInputProcessingConfiguration* This,
        enum __x_ABI_CWindows_CUI_CInput_CInking_CInkInputRightDragAction value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CInput_CInking_CIInkInputProcessingConfigurationVtbl;

    interface __x_ABI_CWindows_CUI_CInput_CInking_CIInkInputProcessingConfiguration
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CInput_CInking_CIInkInputProcessingConfigurationVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CInput_CInking_CIInkInputProcessingConfiguration;
#endif /* !defined(____x_ABI_CWindows_CUI_CInput_CInking_CIInkInputProcessingConfiguration_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CInput_CInking_CIInkManager_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CInput_CInking_CIInkManager_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CInput_CInking_CIInkManagerVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkManager* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkManager* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkManager* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkManager* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkManager* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkManager* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Mode)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkManager* This,
        enum __x_ABI_CWindows_CUI_CInput_CInking_CInkManipulationMode* value);
    HRESULT (STDMETHODCALLTYPE* put_Mode)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkManager* This,
        enum __x_ABI_CWindows_CUI_CInput_CInking_CInkManipulationMode value);
    HRESULT (STDMETHODCALLTYPE* ProcessPointerDown)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkManager* This,
        __x_ABI_CWindows_CUI_CInput_CIPointerPoint* pointerPoint);
    HRESULT (STDMETHODCALLTYPE* ProcessPointerUpdate)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkManager* This,
        __x_ABI_CWindows_CUI_CInput_CIPointerPoint* pointerPoint,
        IInspectable** updateInformation);
    HRESULT (STDMETHODCALLTYPE* ProcessPointerUp)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkManager* This,
        __x_ABI_CWindows_CUI_CInput_CIPointerPoint* pointerPoint,
        struct __x_ABI_CWindows_CFoundation_CRect* updateRectangle);
    HRESULT (STDMETHODCALLTYPE* SetDefaultDrawingAttributes)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkManager* This,
        __x_ABI_CWindows_CUI_CInput_CInking_CIInkDrawingAttributes* drawingAttributes);
    HRESULT (STDMETHODCALLTYPE* RecognizeAsync2)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkManager* This,
        enum __x_ABI_CWindows_CUI_CInput_CInking_CInkRecognitionTarget recognitionTarget,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CInking__CInkRecognitionResult** recognitionResults);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CInput_CInking_CIInkManagerVtbl;

    interface __x_ABI_CWindows_CUI_CInput_CInking_CIInkManager
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CInput_CInking_CIInkManagerVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CInput_CInking_CIInkManager;
#endif /* !defined(____x_ABI_CWindows_CUI_CInput_CInking_CIInkManager_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CInput_CInking_CIInkModelerAttributes_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CInput_CInking_CIInkModelerAttributes_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CInput_CInking_CIInkModelerAttributesVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkModelerAttributes* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkModelerAttributes* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkModelerAttributes* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkModelerAttributes* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkModelerAttributes* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkModelerAttributes* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_PredictionTime)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkModelerAttributes* This,
        struct __x_ABI_CWindows_CFoundation_CTimeSpan* value);
    HRESULT (STDMETHODCALLTYPE* put_PredictionTime)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkModelerAttributes* This,
        struct __x_ABI_CWindows_CFoundation_CTimeSpan value);
    HRESULT (STDMETHODCALLTYPE* get_ScalingFactor)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkModelerAttributes* This,
        FLOAT* value);
    HRESULT (STDMETHODCALLTYPE* put_ScalingFactor)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkModelerAttributes* This,
        FLOAT value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CInput_CInking_CIInkModelerAttributesVtbl;

    interface __x_ABI_CWindows_CUI_CInput_CInking_CIInkModelerAttributes
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CInput_CInking_CIInkModelerAttributesVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CInput_CInking_CIInkModelerAttributes;
#endif /* !defined(____x_ABI_CWindows_CUI_CInput_CInking_CIInkModelerAttributes_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CInput_CInking_CIInkPoint_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CInput_CInking_CIInkPoint_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CInput_CInking_CIInkPointVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkPoint* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkPoint* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkPoint* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkPoint* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkPoint* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkPoint* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Position)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkPoint* This,
        struct __x_ABI_CWindows_CFoundation_CPoint* value);
    HRESULT (STDMETHODCALLTYPE* get_Pressure)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkPoint* This,
        FLOAT* value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CInput_CInking_CIInkPointVtbl;

    interface __x_ABI_CWindows_CUI_CInput_CInking_CIInkPoint
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CInput_CInking_CIInkPointVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CInput_CInking_CIInkPoint;
#endif /* !defined(____x_ABI_CWindows_CUI_CInput_CInking_CIInkPoint_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CInput_CInking_CIInkPoint2_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CInput_CInking_CIInkPoint2_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CInput_CInking_CIInkPoint2Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkPoint2* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkPoint2* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkPoint2* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkPoint2* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkPoint2* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkPoint2* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_TiltX)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkPoint2* This,
        FLOAT* value);
    HRESULT (STDMETHODCALLTYPE* get_TiltY)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkPoint2* This,
        FLOAT* value);
    HRESULT (STDMETHODCALLTYPE* get_Timestamp)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkPoint2* This,
        UINT64* value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CInput_CInking_CIInkPoint2Vtbl;

    interface __x_ABI_CWindows_CUI_CInput_CInking_CIInkPoint2
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CInput_CInking_CIInkPoint2Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CInput_CInking_CIInkPoint2;
#endif /* !defined(____x_ABI_CWindows_CUI_CInput_CInking_CIInkPoint2_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CInput_CInking_CIInkPointFactory_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CInput_CInking_CIInkPointFactory_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CInput_CInking_CIInkPointFactoryVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkPointFactory* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkPointFactory* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkPointFactory* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkPointFactory* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkPointFactory* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkPointFactory* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* CreateInkPoint)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkPointFactory* This,
        struct __x_ABI_CWindows_CFoundation_CPoint position,
        FLOAT pressure,
        __x_ABI_CWindows_CUI_CInput_CInking_CIInkPoint** result);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CInput_CInking_CIInkPointFactoryVtbl;

    interface __x_ABI_CWindows_CUI_CInput_CInking_CIInkPointFactory
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CInput_CInking_CIInkPointFactoryVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CInput_CInking_CIInkPointFactory;
#endif /* !defined(____x_ABI_CWindows_CUI_CInput_CInking_CIInkPointFactory_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CInput_CInking_CIInkPointFactory2_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CInput_CInking_CIInkPointFactory2_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CInput_CInking_CIInkPointFactory2Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkPointFactory2* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkPointFactory2* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkPointFactory2* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkPointFactory2* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkPointFactory2* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkPointFactory2* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* CreateInkPointWithTiltAndTimestamp)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkPointFactory2* This,
        struct __x_ABI_CWindows_CFoundation_CPoint position,
        FLOAT pressure,
        FLOAT tiltX,
        FLOAT tiltY,
        UINT64 timestamp,
        __x_ABI_CWindows_CUI_CInput_CInking_CIInkPoint** result);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CInput_CInking_CIInkPointFactory2Vtbl;

    interface __x_ABI_CWindows_CUI_CInput_CInking_CIInkPointFactory2
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CInput_CInking_CIInkPointFactory2Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CInput_CInking_CIInkPointFactory2;
#endif /* !defined(____x_ABI_CWindows_CUI_CInput_CInking_CIInkPointFactory2_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CInput_CInking_CIInkPresenter_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CInput_CInking_CIInkPresenter_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CInput_CInking_CIInkPresenterVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkPresenter* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkPresenter* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkPresenter* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkPresenter* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkPresenter* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkPresenter* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_IsInputEnabled)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkPresenter* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* put_IsInputEnabled)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkPresenter* This,
        boolean value);
    HRESULT (STDMETHODCALLTYPE* get_InputDeviceTypes)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkPresenter* This,
        enum __x_ABI_CWindows_CUI_CCore_CCoreInputDeviceTypes* value);
    HRESULT (STDMETHODCALLTYPE* put_InputDeviceTypes)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkPresenter* This,
        enum __x_ABI_CWindows_CUI_CCore_CCoreInputDeviceTypes value);
    HRESULT (STDMETHODCALLTYPE* get_UnprocessedInput)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkPresenter* This,
        __x_ABI_CWindows_CUI_CInput_CInking_CIInkUnprocessedInput** value);
    HRESULT (STDMETHODCALLTYPE* get_StrokeInput)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkPresenter* This,
        __x_ABI_CWindows_CUI_CInput_CInking_CIInkStrokeInput** value);
    HRESULT (STDMETHODCALLTYPE* get_InputProcessingConfiguration)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkPresenter* This,
        __x_ABI_CWindows_CUI_CInput_CInking_CIInkInputProcessingConfiguration** value);
    HRESULT (STDMETHODCALLTYPE* get_StrokeContainer)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkPresenter* This,
        __x_ABI_CWindows_CUI_CInput_CInking_CIInkStrokeContainer** value);
    HRESULT (STDMETHODCALLTYPE* put_StrokeContainer)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkPresenter* This,
        __x_ABI_CWindows_CUI_CInput_CInking_CIInkStrokeContainer* value);
    HRESULT (STDMETHODCALLTYPE* CopyDefaultDrawingAttributes)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkPresenter* This,
        __x_ABI_CWindows_CUI_CInput_CInking_CIInkDrawingAttributes** value);
    HRESULT (STDMETHODCALLTYPE* UpdateDefaultDrawingAttributes)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkPresenter* This,
        __x_ABI_CWindows_CUI_CInput_CInking_CIInkDrawingAttributes* value);
    HRESULT (STDMETHODCALLTYPE* ActivateCustomDrying)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkPresenter* This,
        __x_ABI_CWindows_CUI_CInput_CInking_CIInkSynchronizer** inkSynchronizer);
    HRESULT (STDMETHODCALLTYPE* SetPredefinedConfiguration)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkPresenter* This,
        enum __x_ABI_CWindows_CUI_CInput_CInking_CInkPresenterPredefinedConfiguration value);
    HRESULT (STDMETHODCALLTYPE* add_StrokesCollected)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkPresenter* This,
        __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CInking__CInkPresenter___x_ABI_CWindows__CUI__CInput__CInking__CInkStrokesCollectedEventArgs* handler,
        EventRegistrationToken* cookie);
    HRESULT (STDMETHODCALLTYPE* remove_StrokesCollected)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkPresenter* This,
        EventRegistrationToken cookie);
    HRESULT (STDMETHODCALLTYPE* add_StrokesErased)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkPresenter* This,
        __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CInking__CInkPresenter___x_ABI_CWindows__CUI__CInput__CInking__CInkStrokesErasedEventArgs* handler,
        EventRegistrationToken* cookie);
    HRESULT (STDMETHODCALLTYPE* remove_StrokesErased)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkPresenter* This,
        EventRegistrationToken cookie);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CInput_CInking_CIInkPresenterVtbl;

    interface __x_ABI_CWindows_CUI_CInput_CInking_CIInkPresenter
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CInput_CInking_CIInkPresenterVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CInput_CInking_CIInkPresenter;
#endif /* !defined(____x_ABI_CWindows_CUI_CInput_CInking_CIInkPresenter_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CInput_CInking_CIInkPresenter2_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CInput_CInking_CIInkPresenter2_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CInput_CInking_CIInkPresenter2Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkPresenter2* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkPresenter2* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkPresenter2* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkPresenter2* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkPresenter2* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkPresenter2* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_HighContrastAdjustment)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkPresenter2* This,
        enum __x_ABI_CWindows_CUI_CInput_CInking_CInkHighContrastAdjustment* value);
    HRESULT (STDMETHODCALLTYPE* put_HighContrastAdjustment)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkPresenter2* This,
        enum __x_ABI_CWindows_CUI_CInput_CInking_CInkHighContrastAdjustment value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CInput_CInking_CIInkPresenter2Vtbl;

    interface __x_ABI_CWindows_CUI_CInput_CInking_CIInkPresenter2
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CInput_CInking_CIInkPresenter2Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CInput_CInking_CIInkPresenter2;
#endif /* !defined(____x_ABI_CWindows_CUI_CInput_CInking_CIInkPresenter2_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CInput_CInking_CIInkPresenter3_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CInput_CInking_CIInkPresenter3_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CInput_CInking_CIInkPresenter3Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkPresenter3* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkPresenter3* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkPresenter3* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkPresenter3* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkPresenter3* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkPresenter3* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_InputConfiguration)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkPresenter3* This,
        __x_ABI_CWindows_CUI_CInput_CInking_CIInkInputConfiguration** value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CInput_CInking_CIInkPresenter3Vtbl;

    interface __x_ABI_CWindows_CUI_CInput_CInking_CIInkPresenter3
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CInput_CInking_CIInkPresenter3Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CInput_CInking_CIInkPresenter3;
#endif /* !defined(____x_ABI_CWindows_CUI_CInput_CInking_CIInkPresenter3_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CInput_CInking_CIInkPresenterProtractor_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CInput_CInking_CIInkPresenterProtractor_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CInput_CInking_CIInkPresenterProtractorVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkPresenterProtractor* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkPresenterProtractor* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkPresenterProtractor* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkPresenterProtractor* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkPresenterProtractor* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkPresenterProtractor* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_AreTickMarksVisible)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkPresenterProtractor* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* put_AreTickMarksVisible)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkPresenterProtractor* This,
        boolean value);
    HRESULT (STDMETHODCALLTYPE* get_AreRaysVisible)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkPresenterProtractor* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* put_AreRaysVisible)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkPresenterProtractor* This,
        boolean value);
    HRESULT (STDMETHODCALLTYPE* get_IsCenterMarkerVisible)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkPresenterProtractor* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* put_IsCenterMarkerVisible)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkPresenterProtractor* This,
        boolean value);
    HRESULT (STDMETHODCALLTYPE* get_IsAngleReadoutVisible)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkPresenterProtractor* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* put_IsAngleReadoutVisible)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkPresenterProtractor* This,
        boolean value);
    HRESULT (STDMETHODCALLTYPE* get_IsResizable)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkPresenterProtractor* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* put_IsResizable)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkPresenterProtractor* This,
        boolean value);
    HRESULT (STDMETHODCALLTYPE* get_Radius)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkPresenterProtractor* This,
        DOUBLE* value);
    HRESULT (STDMETHODCALLTYPE* put_Radius)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkPresenterProtractor* This,
        DOUBLE value);
    HRESULT (STDMETHODCALLTYPE* get_AccentColor)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkPresenterProtractor* This,
        struct __x_ABI_CWindows_CUI_CColor* value);
    HRESULT (STDMETHODCALLTYPE* put_AccentColor)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkPresenterProtractor* This,
        struct __x_ABI_CWindows_CUI_CColor value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CInput_CInking_CIInkPresenterProtractorVtbl;

    interface __x_ABI_CWindows_CUI_CInput_CInking_CIInkPresenterProtractor
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CInput_CInking_CIInkPresenterProtractorVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CInput_CInking_CIInkPresenterProtractor;
#endif /* !defined(____x_ABI_CWindows_CUI_CInput_CInking_CIInkPresenterProtractor_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CInput_CInking_CIInkPresenterProtractorFactory_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CInput_CInking_CIInkPresenterProtractorFactory_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CInput_CInking_CIInkPresenterProtractorFactoryVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkPresenterProtractorFactory* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkPresenterProtractorFactory* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkPresenterProtractorFactory* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkPresenterProtractorFactory* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkPresenterProtractorFactory* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkPresenterProtractorFactory* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* Create)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkPresenterProtractorFactory* This,
        __x_ABI_CWindows_CUI_CInput_CInking_CIInkPresenter* inkPresenter,
        __x_ABI_CWindows_CUI_CInput_CInking_CIInkPresenterProtractor** inkPresenterProtractor);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CInput_CInking_CIInkPresenterProtractorFactoryVtbl;

    interface __x_ABI_CWindows_CUI_CInput_CInking_CIInkPresenterProtractorFactory
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CInput_CInking_CIInkPresenterProtractorFactoryVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CInput_CInking_CIInkPresenterProtractorFactory;
#endif /* !defined(____x_ABI_CWindows_CUI_CInput_CInking_CIInkPresenterProtractorFactory_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CInput_CInking_CIInkPresenterRuler_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CInput_CInking_CIInkPresenterRuler_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CInput_CInking_CIInkPresenterRulerVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkPresenterRuler* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkPresenterRuler* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkPresenterRuler* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkPresenterRuler* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkPresenterRuler* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkPresenterRuler* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Length)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkPresenterRuler* This,
        DOUBLE* value);
    HRESULT (STDMETHODCALLTYPE* put_Length)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkPresenterRuler* This,
        DOUBLE value);
    HRESULT (STDMETHODCALLTYPE* get_Width)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkPresenterRuler* This,
        DOUBLE* value);
    HRESULT (STDMETHODCALLTYPE* put_Width)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkPresenterRuler* This,
        DOUBLE value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CInput_CInking_CIInkPresenterRulerVtbl;

    interface __x_ABI_CWindows_CUI_CInput_CInking_CIInkPresenterRuler
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CInput_CInking_CIInkPresenterRulerVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CInput_CInking_CIInkPresenterRuler;
#endif /* !defined(____x_ABI_CWindows_CUI_CInput_CInking_CIInkPresenterRuler_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CInput_CInking_CIInkPresenterRuler2_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CInput_CInking_CIInkPresenterRuler2_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CInput_CInking_CIInkPresenterRuler2Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkPresenterRuler2* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkPresenterRuler2* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkPresenterRuler2* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkPresenterRuler2* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkPresenterRuler2* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkPresenterRuler2* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_AreTickMarksVisible)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkPresenterRuler2* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* put_AreTickMarksVisible)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkPresenterRuler2* This,
        boolean value);
    HRESULT (STDMETHODCALLTYPE* get_IsCompassVisible)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkPresenterRuler2* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* put_IsCompassVisible)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkPresenterRuler2* This,
        boolean value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CInput_CInking_CIInkPresenterRuler2Vtbl;

    interface __x_ABI_CWindows_CUI_CInput_CInking_CIInkPresenterRuler2
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CInput_CInking_CIInkPresenterRuler2Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CInput_CInking_CIInkPresenterRuler2;
#endif /* !defined(____x_ABI_CWindows_CUI_CInput_CInking_CIInkPresenterRuler2_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CInput_CInking_CIInkPresenterRulerFactory_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CInput_CInking_CIInkPresenterRulerFactory_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CInput_CInking_CIInkPresenterRulerFactoryVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkPresenterRulerFactory* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkPresenterRulerFactory* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkPresenterRulerFactory* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkPresenterRulerFactory* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkPresenterRulerFactory* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkPresenterRulerFactory* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* Create)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkPresenterRulerFactory* This,
        __x_ABI_CWindows_CUI_CInput_CInking_CIInkPresenter* inkPresenter,
        __x_ABI_CWindows_CUI_CInput_CInking_CIInkPresenterRuler** inkPresenterRuler);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CInput_CInking_CIInkPresenterRulerFactoryVtbl;

    interface __x_ABI_CWindows_CUI_CInput_CInking_CIInkPresenterRulerFactory
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CInput_CInking_CIInkPresenterRulerFactoryVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CInput_CInking_CIInkPresenterRulerFactory;
#endif /* !defined(____x_ABI_CWindows_CUI_CInput_CInking_CIInkPresenterRulerFactory_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CInput_CInking_CIInkPresenterStencil_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CInput_CInking_CIInkPresenterStencil_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CInput_CInking_CIInkPresenterStencilVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkPresenterStencil* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkPresenterStencil* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkPresenterStencil* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkPresenterStencil* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkPresenterStencil* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkPresenterStencil* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Kind)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkPresenterStencil* This,
        enum __x_ABI_CWindows_CUI_CInput_CInking_CInkPresenterStencilKind* value);
    HRESULT (STDMETHODCALLTYPE* get_IsVisible)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkPresenterStencil* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* put_IsVisible)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkPresenterStencil* This,
        boolean value);
    HRESULT (STDMETHODCALLTYPE* get_BackgroundColor)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkPresenterStencil* This,
        struct __x_ABI_CWindows_CUI_CColor* value);
    HRESULT (STDMETHODCALLTYPE* put_BackgroundColor)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkPresenterStencil* This,
        struct __x_ABI_CWindows_CUI_CColor value);
    HRESULT (STDMETHODCALLTYPE* get_ForegroundColor)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkPresenterStencil* This,
        struct __x_ABI_CWindows_CUI_CColor* value);
    HRESULT (STDMETHODCALLTYPE* put_ForegroundColor)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkPresenterStencil* This,
        struct __x_ABI_CWindows_CUI_CColor value);
    HRESULT (STDMETHODCALLTYPE* get_Transform)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkPresenterStencil* This,
        struct __x_ABI_CWindows_CFoundation_CNumerics_CMatrix3x2* value);
    HRESULT (STDMETHODCALLTYPE* put_Transform)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkPresenterStencil* This,
        struct __x_ABI_CWindows_CFoundation_CNumerics_CMatrix3x2 value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CInput_CInking_CIInkPresenterStencilVtbl;

    interface __x_ABI_CWindows_CUI_CInput_CInking_CIInkPresenterStencil
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CInput_CInking_CIInkPresenterStencilVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CInput_CInking_CIInkPresenterStencil;
#endif /* !defined(____x_ABI_CWindows_CUI_CInput_CInking_CIInkPresenterStencil_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CInput_CInking_CIInkRecognitionResult_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CInput_CInking_CIInkRecognitionResult_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CInput_CInking_CIInkRecognitionResultVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkRecognitionResult* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkRecognitionResult* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkRecognitionResult* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkRecognitionResult* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkRecognitionResult* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkRecognitionResult* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_BoundingRect)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkRecognitionResult* This,
        struct __x_ABI_CWindows_CFoundation_CRect* boundingRect);
    HRESULT (STDMETHODCALLTYPE* GetTextCandidates)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkRecognitionResult* This,
        __x_ABI_C__FIVectorView_1_HSTRING** textCandidates);
    HRESULT (STDMETHODCALLTYPE* GetStrokes)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkRecognitionResult* This,
        __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CInking__CInkStroke** strokes);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CInput_CInking_CIInkRecognitionResultVtbl;

    interface __x_ABI_CWindows_CUI_CInput_CInking_CIInkRecognitionResult
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CInput_CInking_CIInkRecognitionResultVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CInput_CInking_CIInkRecognitionResult;
#endif /* !defined(____x_ABI_CWindows_CUI_CInput_CInking_CIInkRecognitionResult_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CInput_CInking_CIInkRecognizer_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CInput_CInking_CIInkRecognizer_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CInput_CInking_CIInkRecognizerVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkRecognizer* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkRecognizer* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkRecognizer* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkRecognizer* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkRecognizer* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkRecognizer* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Name)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkRecognizer* This,
        HSTRING* value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CInput_CInking_CIInkRecognizerVtbl;

    interface __x_ABI_CWindows_CUI_CInput_CInking_CIInkRecognizer
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CInput_CInking_CIInkRecognizerVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CInput_CInking_CIInkRecognizer;
#endif /* !defined(____x_ABI_CWindows_CUI_CInput_CInking_CIInkRecognizer_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CInput_CInking_CIInkRecognizerContainer_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CInput_CInking_CIInkRecognizerContainer_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CInput_CInking_CIInkRecognizerContainerVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkRecognizerContainer* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkRecognizerContainer* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkRecognizerContainer* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkRecognizerContainer* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkRecognizerContainer* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkRecognizerContainer* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* SetDefaultRecognizer)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkRecognizerContainer* This,
        __x_ABI_CWindows_CUI_CInput_CInking_CIInkRecognizer* recognizer);
    HRESULT (STDMETHODCALLTYPE* RecognizeAsync)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkRecognizerContainer* This,
        __x_ABI_CWindows_CUI_CInput_CInking_CIInkStrokeContainer* strokeCollection,
        enum __x_ABI_CWindows_CUI_CInput_CInking_CInkRecognitionTarget recognitionTarget,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CInking__CInkRecognitionResult** recognitionResults);
    HRESULT (STDMETHODCALLTYPE* GetRecognizers)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkRecognizerContainer* This,
        __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CInking__CInkRecognizer** recognizerView);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CInput_CInking_CIInkRecognizerContainerVtbl;

    interface __x_ABI_CWindows_CUI_CInput_CInking_CIInkRecognizerContainer
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CInput_CInking_CIInkRecognizerContainerVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CInput_CInking_CIInkRecognizerContainer;
#endif /* !defined(____x_ABI_CWindows_CUI_CInput_CInking_CIInkRecognizerContainer_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CInput_CInking_CIInkStroke_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CInput_CInking_CIInkStroke_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CInput_CInking_CIInkStrokeVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkStroke* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkStroke* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkStroke* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkStroke* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkStroke* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkStroke* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_DrawingAttributes)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkStroke* This,
        __x_ABI_CWindows_CUI_CInput_CInking_CIInkDrawingAttributes** value);
    HRESULT (STDMETHODCALLTYPE* put_DrawingAttributes)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkStroke* This,
        __x_ABI_CWindows_CUI_CInput_CInking_CIInkDrawingAttributes* value);
    HRESULT (STDMETHODCALLTYPE* get_BoundingRect)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkStroke* This,
        struct __x_ABI_CWindows_CFoundation_CRect* value);
    HRESULT (STDMETHODCALLTYPE* get_Selected)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkStroke* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* put_Selected)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkStroke* This,
        boolean value);
    HRESULT (STDMETHODCALLTYPE* get_Recognized)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkStroke* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* GetRenderingSegments)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkStroke* This,
        __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CInking__CInkStrokeRenderingSegment** renderingSegments);
    HRESULT (STDMETHODCALLTYPE* Clone)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkStroke* This,
        __x_ABI_CWindows_CUI_CInput_CInking_CIInkStroke** clonedStroke);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CInput_CInking_CIInkStrokeVtbl;

    interface __x_ABI_CWindows_CUI_CInput_CInking_CIInkStroke
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CInput_CInking_CIInkStrokeVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CInput_CInking_CIInkStroke;
#endif /* !defined(____x_ABI_CWindows_CUI_CInput_CInking_CIInkStroke_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CInput_CInking_CIInkStroke2_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CInput_CInking_CIInkStroke2_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CInput_CInking_CIInkStroke2Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkStroke2* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkStroke2* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkStroke2* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkStroke2* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkStroke2* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkStroke2* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_PointTransform)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkStroke2* This,
        struct __x_ABI_CWindows_CFoundation_CNumerics_CMatrix3x2* value);
    HRESULT (STDMETHODCALLTYPE* put_PointTransform)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkStroke2* This,
        struct __x_ABI_CWindows_CFoundation_CNumerics_CMatrix3x2 value);
    HRESULT (STDMETHODCALLTYPE* GetInkPoints)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkStroke2* This,
        __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CInking__CInkPoint** inkPoints);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CInput_CInking_CIInkStroke2Vtbl;

    interface __x_ABI_CWindows_CUI_CInput_CInking_CIInkStroke2
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CInput_CInking_CIInkStroke2Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CInput_CInking_CIInkStroke2;
#endif /* !defined(____x_ABI_CWindows_CUI_CInput_CInking_CIInkStroke2_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CInput_CInking_CIInkStroke3_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CInput_CInking_CIInkStroke3_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CInput_CInking_CIInkStroke3Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkStroke3* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkStroke3* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkStroke3* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkStroke3* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkStroke3* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkStroke3* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Id)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkStroke3* This,
        UINT32* value);
    HRESULT (STDMETHODCALLTYPE* get_StrokeStartedTime)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkStroke3* This,
        __x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CDateTime** value);
    HRESULT (STDMETHODCALLTYPE* put_StrokeStartedTime)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkStroke3* This,
        __x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CDateTime* value);
    HRESULT (STDMETHODCALLTYPE* get_StrokeDuration)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkStroke3* This,
        __x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CTimeSpan** value);
    HRESULT (STDMETHODCALLTYPE* put_StrokeDuration)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkStroke3* This,
        __x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CTimeSpan* value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CInput_CInking_CIInkStroke3Vtbl;

    interface __x_ABI_CWindows_CUI_CInput_CInking_CIInkStroke3
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CInput_CInking_CIInkStroke3Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CInput_CInking_CIInkStroke3;
#endif /* !defined(____x_ABI_CWindows_CUI_CInput_CInking_CIInkStroke3_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CInput_CInking_CIInkStrokeBuilder_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CInput_CInking_CIInkStrokeBuilder_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CInput_CInking_CIInkStrokeBuilderVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkStrokeBuilder* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkStrokeBuilder* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkStrokeBuilder* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkStrokeBuilder* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkStrokeBuilder* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkStrokeBuilder* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* BeginStroke)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkStrokeBuilder* This,
        __x_ABI_CWindows_CUI_CInput_CIPointerPoint* pointerPoint);
    HRESULT (STDMETHODCALLTYPE* AppendToStroke)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkStrokeBuilder* This,
        __x_ABI_CWindows_CUI_CInput_CIPointerPoint* pointerPoint,
        __x_ABI_CWindows_CUI_CInput_CIPointerPoint** previousPointerPoint);
    HRESULT (STDMETHODCALLTYPE* EndStroke)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkStrokeBuilder* This,
        __x_ABI_CWindows_CUI_CInput_CIPointerPoint* pointerPoint,
        __x_ABI_CWindows_CUI_CInput_CInking_CIInkStroke** stroke);
    HRESULT (STDMETHODCALLTYPE* CreateStroke)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkStrokeBuilder* This,
        __x_ABI_C__FIIterable_1___x_ABI_CWindows__CFoundation__CPoint* points,
        __x_ABI_CWindows_CUI_CInput_CInking_CIInkStroke** stroke);
    HRESULT (STDMETHODCALLTYPE* SetDefaultDrawingAttributes)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkStrokeBuilder* This,
        __x_ABI_CWindows_CUI_CInput_CInking_CIInkDrawingAttributes* drawingAttributes);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CInput_CInking_CIInkStrokeBuilderVtbl;

    interface __x_ABI_CWindows_CUI_CInput_CInking_CIInkStrokeBuilder
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CInput_CInking_CIInkStrokeBuilderVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CInput_CInking_CIInkStrokeBuilder;
#endif /* !defined(____x_ABI_CWindows_CUI_CInput_CInking_CIInkStrokeBuilder_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CInput_CInking_CIInkStrokeBuilder2_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CInput_CInking_CIInkStrokeBuilder2_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CInput_CInking_CIInkStrokeBuilder2Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkStrokeBuilder2* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkStrokeBuilder2* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkStrokeBuilder2* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkStrokeBuilder2* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkStrokeBuilder2* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkStrokeBuilder2* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* CreateStrokeFromInkPoints)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkStrokeBuilder2* This,
        __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CInput__CInking__CInkPoint* inkPoints,
        struct __x_ABI_CWindows_CFoundation_CNumerics_CMatrix3x2 transform,
        __x_ABI_CWindows_CUI_CInput_CInking_CIInkStroke** result);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CInput_CInking_CIInkStrokeBuilder2Vtbl;

    interface __x_ABI_CWindows_CUI_CInput_CInking_CIInkStrokeBuilder2
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CInput_CInking_CIInkStrokeBuilder2Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CInput_CInking_CIInkStrokeBuilder2;
#endif /* !defined(____x_ABI_CWindows_CUI_CInput_CInking_CIInkStrokeBuilder2_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CInput_CInking_CIInkStrokeBuilder3_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CInput_CInking_CIInkStrokeBuilder3_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CInput_CInking_CIInkStrokeBuilder3Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkStrokeBuilder3* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkStrokeBuilder3* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkStrokeBuilder3* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkStrokeBuilder3* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkStrokeBuilder3* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkStrokeBuilder3* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* CreateStrokeFromInkPoints)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkStrokeBuilder3* This,
        __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CInput__CInking__CInkPoint* inkPoints,
        struct __x_ABI_CWindows_CFoundation_CNumerics_CMatrix3x2 transform,
        __x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CDateTime* strokeStartedTime,
        __x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CTimeSpan* strokeDuration,
        __x_ABI_CWindows_CUI_CInput_CInking_CIInkStroke** result);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CInput_CInking_CIInkStrokeBuilder3Vtbl;

    interface __x_ABI_CWindows_CUI_CInput_CInking_CIInkStrokeBuilder3
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CInput_CInking_CIInkStrokeBuilder3Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CInput_CInking_CIInkStrokeBuilder3;
#endif /* !defined(____x_ABI_CWindows_CUI_CInput_CInking_CIInkStrokeBuilder3_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CInput_CInking_CIInkStrokeContainer_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CInput_CInking_CIInkStrokeContainer_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CInput_CInking_CIInkStrokeContainerVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkStrokeContainer* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkStrokeContainer* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkStrokeContainer* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkStrokeContainer* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkStrokeContainer* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkStrokeContainer* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_BoundingRect)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkStrokeContainer* This,
        struct __x_ABI_CWindows_CFoundation_CRect* value);
    HRESULT (STDMETHODCALLTYPE* AddStroke)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkStrokeContainer* This,
        __x_ABI_CWindows_CUI_CInput_CInking_CIInkStroke* stroke);
    HRESULT (STDMETHODCALLTYPE* DeleteSelected)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkStrokeContainer* This,
        struct __x_ABI_CWindows_CFoundation_CRect* invalidatedRect);
    HRESULT (STDMETHODCALLTYPE* MoveSelected)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkStrokeContainer* This,
        struct __x_ABI_CWindows_CFoundation_CPoint translation,
        struct __x_ABI_CWindows_CFoundation_CRect* invalidatedRectangle);
    HRESULT (STDMETHODCALLTYPE* SelectWithPolyLine)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkStrokeContainer* This,
        __x_ABI_C__FIIterable_1___x_ABI_CWindows__CFoundation__CPoint* polyline,
        struct __x_ABI_CWindows_CFoundation_CRect* invalidatedRectangle);
    HRESULT (STDMETHODCALLTYPE* SelectWithLine)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkStrokeContainer* This,
        struct __x_ABI_CWindows_CFoundation_CPoint from,
        struct __x_ABI_CWindows_CFoundation_CPoint to,
        struct __x_ABI_CWindows_CFoundation_CRect* invalidatedRectangle);
    HRESULT (STDMETHODCALLTYPE* CopySelectedToClipboard)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkStrokeContainer* This);
    HRESULT (STDMETHODCALLTYPE* PasteFromClipboard)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkStrokeContainer* This,
        struct __x_ABI_CWindows_CFoundation_CPoint position,
        struct __x_ABI_CWindows_CFoundation_CRect* invalidatedRectangle);
    HRESULT (STDMETHODCALLTYPE* CanPasteFromClipboard)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkStrokeContainer* This,
        boolean* canPaste);
    HRESULT (STDMETHODCALLTYPE* LoadAsync)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkStrokeContainer* This,
        __x_ABI_CWindows_CStorage_CStreams_CIInputStream* inputStream,
        __x_ABI_C__FIAsyncActionWithProgress_1_UINT64** loadAction);
    HRESULT (STDMETHODCALLTYPE* SaveAsync)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkStrokeContainer* This,
        __x_ABI_CWindows_CStorage_CStreams_CIOutputStream* outputStream,
        __x_ABI_C__FIAsyncOperationWithProgress_2_UINT32_UINT32** outputStreamOperation);
    HRESULT (STDMETHODCALLTYPE* UpdateRecognitionResults)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkStrokeContainer* This,
        __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CInking__CInkRecognitionResult* recognitionResults);
    HRESULT (STDMETHODCALLTYPE* GetStrokes)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkStrokeContainer* This,
        __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CInking__CInkStroke** strokeView);
    HRESULT (STDMETHODCALLTYPE* GetRecognitionResults)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkStrokeContainer* This,
        __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CInking__CInkRecognitionResult** recognitionResults);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CInput_CInking_CIInkStrokeContainerVtbl;

    interface __x_ABI_CWindows_CUI_CInput_CInking_CIInkStrokeContainer
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CInput_CInking_CIInkStrokeContainerVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CInput_CInking_CIInkStrokeContainer;
#endif /* !defined(____x_ABI_CWindows_CUI_CInput_CInking_CIInkStrokeContainer_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CInput_CInking_CIInkStrokeContainer2_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CInput_CInking_CIInkStrokeContainer2_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CInput_CInking_CIInkStrokeContainer2Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkStrokeContainer2* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkStrokeContainer2* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkStrokeContainer2* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkStrokeContainer2* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkStrokeContainer2* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkStrokeContainer2* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* AddStrokes)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkStrokeContainer2* This,
        __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CInput__CInking__CInkStroke* strokes);
    HRESULT (STDMETHODCALLTYPE* Clear)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkStrokeContainer2* This);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CInput_CInking_CIInkStrokeContainer2Vtbl;

    interface __x_ABI_CWindows_CUI_CInput_CInking_CIInkStrokeContainer2
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CInput_CInking_CIInkStrokeContainer2Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CInput_CInking_CIInkStrokeContainer2;
#endif /* !defined(____x_ABI_CWindows_CUI_CInput_CInking_CIInkStrokeContainer2_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CInput_CInking_CIInkStrokeContainer3_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CInput_CInking_CIInkStrokeContainer3_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CInput_CInking_CIInkStrokeContainer3Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkStrokeContainer3* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkStrokeContainer3* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkStrokeContainer3* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkStrokeContainer3* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkStrokeContainer3* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkStrokeContainer3* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* SaveWithFormatAsync)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkStrokeContainer3* This,
        __x_ABI_CWindows_CStorage_CStreams_CIOutputStream* outputStream,
        enum __x_ABI_CWindows_CUI_CInput_CInking_CInkPersistenceFormat inkPersistenceFormat,
        __x_ABI_C__FIAsyncOperationWithProgress_2_UINT32_UINT32** outputStreamOperation);
    HRESULT (STDMETHODCALLTYPE* GetStrokeById)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkStrokeContainer3* This,
        UINT32 id,
        __x_ABI_CWindows_CUI_CInput_CInking_CIInkStroke** stroke);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CInput_CInking_CIInkStrokeContainer3Vtbl;

    interface __x_ABI_CWindows_CUI_CInput_CInking_CIInkStrokeContainer3
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CInput_CInking_CIInkStrokeContainer3Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CInput_CInking_CIInkStrokeContainer3;
#endif /* !defined(____x_ABI_CWindows_CUI_CInput_CInking_CIInkStrokeContainer3_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CInput_CInking_CIInkStrokeInput_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CInput_CInking_CIInkStrokeInput_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CInput_CInking_CIInkStrokeInputVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkStrokeInput* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkStrokeInput* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkStrokeInput* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkStrokeInput* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkStrokeInput* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkStrokeInput* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* add_StrokeStarted)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkStrokeInput* This,
        __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CInking__CInkStrokeInput___x_ABI_CWindows__CUI__CCore__CPointerEventArgs* handler,
        EventRegistrationToken* cookie);
    HRESULT (STDMETHODCALLTYPE* remove_StrokeStarted)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkStrokeInput* This,
        EventRegistrationToken cookie);
    HRESULT (STDMETHODCALLTYPE* add_StrokeContinued)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkStrokeInput* This,
        __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CInking__CInkStrokeInput___x_ABI_CWindows__CUI__CCore__CPointerEventArgs* handler,
        EventRegistrationToken* cookie);
    HRESULT (STDMETHODCALLTYPE* remove_StrokeContinued)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkStrokeInput* This,
        EventRegistrationToken cookie);
    HRESULT (STDMETHODCALLTYPE* add_StrokeEnded)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkStrokeInput* This,
        __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CInking__CInkStrokeInput___x_ABI_CWindows__CUI__CCore__CPointerEventArgs* handler,
        EventRegistrationToken* cookie);
    HRESULT (STDMETHODCALLTYPE* remove_StrokeEnded)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkStrokeInput* This,
        EventRegistrationToken cookie);
    HRESULT (STDMETHODCALLTYPE* add_StrokeCanceled)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkStrokeInput* This,
        __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CInking__CInkStrokeInput___x_ABI_CWindows__CUI__CCore__CPointerEventArgs* handler,
        EventRegistrationToken* cookie);
    HRESULT (STDMETHODCALLTYPE* remove_StrokeCanceled)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkStrokeInput* This,
        EventRegistrationToken cookie);
    HRESULT (STDMETHODCALLTYPE* get_InkPresenter)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkStrokeInput* This,
        __x_ABI_CWindows_CUI_CInput_CInking_CIInkPresenter** value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CInput_CInking_CIInkStrokeInputVtbl;

    interface __x_ABI_CWindows_CUI_CInput_CInking_CIInkStrokeInput
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CInput_CInking_CIInkStrokeInputVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CInput_CInking_CIInkStrokeInput;
#endif /* !defined(____x_ABI_CWindows_CUI_CInput_CInking_CIInkStrokeInput_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CInput_CInking_CIInkStrokeRenderingSegment_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CInput_CInking_CIInkStrokeRenderingSegment_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CInput_CInking_CIInkStrokeRenderingSegmentVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkStrokeRenderingSegment* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkStrokeRenderingSegment* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkStrokeRenderingSegment* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkStrokeRenderingSegment* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkStrokeRenderingSegment* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkStrokeRenderingSegment* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Position)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkStrokeRenderingSegment* This,
        struct __x_ABI_CWindows_CFoundation_CPoint* value);
    HRESULT (STDMETHODCALLTYPE* get_BezierControlPoint1)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkStrokeRenderingSegment* This,
        struct __x_ABI_CWindows_CFoundation_CPoint* value);
    HRESULT (STDMETHODCALLTYPE* get_BezierControlPoint2)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkStrokeRenderingSegment* This,
        struct __x_ABI_CWindows_CFoundation_CPoint* value);
    HRESULT (STDMETHODCALLTYPE* get_Pressure)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkStrokeRenderingSegment* This,
        FLOAT* value);
    HRESULT (STDMETHODCALLTYPE* get_TiltX)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkStrokeRenderingSegment* This,
        FLOAT* value);
    HRESULT (STDMETHODCALLTYPE* get_TiltY)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkStrokeRenderingSegment* This,
        FLOAT* value);
    HRESULT (STDMETHODCALLTYPE* get_Twist)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkStrokeRenderingSegment* This,
        FLOAT* value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CInput_CInking_CIInkStrokeRenderingSegmentVtbl;

    interface __x_ABI_CWindows_CUI_CInput_CInking_CIInkStrokeRenderingSegment
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CInput_CInking_CIInkStrokeRenderingSegmentVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CInput_CInking_CIInkStrokeRenderingSegment;
#endif /* !defined(____x_ABI_CWindows_CUI_CInput_CInking_CIInkStrokeRenderingSegment_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CInput_CInking_CIInkStrokesCollectedEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CInput_CInking_CIInkStrokesCollectedEventArgs_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CInput_CInking_CIInkStrokesCollectedEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkStrokesCollectedEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkStrokesCollectedEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkStrokesCollectedEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkStrokesCollectedEventArgs* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkStrokesCollectedEventArgs* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkStrokesCollectedEventArgs* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Strokes)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkStrokesCollectedEventArgs* This,
        __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CInking__CInkStroke** value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CInput_CInking_CIInkStrokesCollectedEventArgsVtbl;

    interface __x_ABI_CWindows_CUI_CInput_CInking_CIInkStrokesCollectedEventArgs
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CInput_CInking_CIInkStrokesCollectedEventArgsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CInput_CInking_CIInkStrokesCollectedEventArgs;
#endif /* !defined(____x_ABI_CWindows_CUI_CInput_CInking_CIInkStrokesCollectedEventArgs_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CInput_CInking_CIInkStrokesErasedEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CInput_CInking_CIInkStrokesErasedEventArgs_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CInput_CInking_CIInkStrokesErasedEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkStrokesErasedEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkStrokesErasedEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkStrokesErasedEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkStrokesErasedEventArgs* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkStrokesErasedEventArgs* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkStrokesErasedEventArgs* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Strokes)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkStrokesErasedEventArgs* This,
        __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CInking__CInkStroke** value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CInput_CInking_CIInkStrokesErasedEventArgsVtbl;

    interface __x_ABI_CWindows_CUI_CInput_CInking_CIInkStrokesErasedEventArgs
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CInput_CInking_CIInkStrokesErasedEventArgsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CInput_CInking_CIInkStrokesErasedEventArgs;
#endif /* !defined(____x_ABI_CWindows_CUI_CInput_CInking_CIInkStrokesErasedEventArgs_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CInput_CInking_CIInkSynchronizer_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CInput_CInking_CIInkSynchronizer_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CInput_CInking_CIInkSynchronizerVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkSynchronizer* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkSynchronizer* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkSynchronizer* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkSynchronizer* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkSynchronizer* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkSynchronizer* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* BeginDry)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkSynchronizer* This,
        __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CInking__CInkStroke** inkStrokes);
    HRESULT (STDMETHODCALLTYPE* EndDry)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkSynchronizer* This);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CInput_CInking_CIInkSynchronizerVtbl;

    interface __x_ABI_CWindows_CUI_CInput_CInking_CIInkSynchronizer
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CInput_CInking_CIInkSynchronizerVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CInput_CInking_CIInkSynchronizer;
#endif /* !defined(____x_ABI_CWindows_CUI_CInput_CInking_CIInkSynchronizer_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CInput_CInking_CIInkUnprocessedInput_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CInput_CInking_CIInkUnprocessedInput_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CInput_CInking_CIInkUnprocessedInputVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkUnprocessedInput* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkUnprocessedInput* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkUnprocessedInput* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkUnprocessedInput* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkUnprocessedInput* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkUnprocessedInput* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* add_PointerEntered)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkUnprocessedInput* This,
        __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CInking__CInkUnprocessedInput___x_ABI_CWindows__CUI__CCore__CPointerEventArgs* handler,
        EventRegistrationToken* cookie);
    HRESULT (STDMETHODCALLTYPE* remove_PointerEntered)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkUnprocessedInput* This,
        EventRegistrationToken cookie);
    HRESULT (STDMETHODCALLTYPE* add_PointerHovered)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkUnprocessedInput* This,
        __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CInking__CInkUnprocessedInput___x_ABI_CWindows__CUI__CCore__CPointerEventArgs* handler,
        EventRegistrationToken* cookie);
    HRESULT (STDMETHODCALLTYPE* remove_PointerHovered)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkUnprocessedInput* This,
        EventRegistrationToken cookie);
    HRESULT (STDMETHODCALLTYPE* add_PointerExited)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkUnprocessedInput* This,
        __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CInking__CInkUnprocessedInput___x_ABI_CWindows__CUI__CCore__CPointerEventArgs* handler,
        EventRegistrationToken* cookie);
    HRESULT (STDMETHODCALLTYPE* remove_PointerExited)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkUnprocessedInput* This,
        EventRegistrationToken cookie);
    HRESULT (STDMETHODCALLTYPE* add_PointerPressed)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkUnprocessedInput* This,
        __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CInking__CInkUnprocessedInput___x_ABI_CWindows__CUI__CCore__CPointerEventArgs* handler,
        EventRegistrationToken* cookie);
    HRESULT (STDMETHODCALLTYPE* remove_PointerPressed)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkUnprocessedInput* This,
        EventRegistrationToken cookie);
    HRESULT (STDMETHODCALLTYPE* add_PointerMoved)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkUnprocessedInput* This,
        __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CInking__CInkUnprocessedInput___x_ABI_CWindows__CUI__CCore__CPointerEventArgs* handler,
        EventRegistrationToken* cookie);
    HRESULT (STDMETHODCALLTYPE* remove_PointerMoved)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkUnprocessedInput* This,
        EventRegistrationToken cookie);
    HRESULT (STDMETHODCALLTYPE* add_PointerReleased)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkUnprocessedInput* This,
        __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CInking__CInkUnprocessedInput___x_ABI_CWindows__CUI__CCore__CPointerEventArgs* handler,
        EventRegistrationToken* cookie);
    HRESULT (STDMETHODCALLTYPE* remove_PointerReleased)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkUnprocessedInput* This,
        EventRegistrationToken cookie);
    HRESULT (STDMETHODCALLTYPE* add_PointerLost)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkUnprocessedInput* This,
        __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CInking__CInkUnprocessedInput___x_ABI_CWindows__CUI__CCore__CPointerEventArgs* handler,
        EventRegistrationToken* cookie);
    HRESULT (STDMETHODCALLTYPE* remove_PointerLost)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkUnprocessedInput* This,
        EventRegistrationToken cookie);
    HRESULT (STDMETHODCALLTYPE* get_InkPresenter)(__x_ABI_CWindows_CUI_CInput_CInking_CIInkUnprocessedInput* This,
        __x_ABI_CWindows_CUI_CInput_CInking_CIInkPresenter** value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CInput_CInking_CIInkUnprocessedInputVtbl;

    interface __x_ABI_CWindows_CUI_CInput_CInking_CIInkUnprocessedInput
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CInput_CInking_CIInkUnprocessedInputVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CInput_CInking_CIInkUnprocessedInput;
#endif /* !defined(____x_ABI_CWindows_CUI_CInput_CInking_CIInkUnprocessedInput_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CInput_CInking_CIPenAndInkSettings_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CInput_CInking_CIPenAndInkSettings_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CInput_CInking_CIPenAndInkSettingsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CInput_CInking_CIPenAndInkSettings* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CInput_CInking_CIPenAndInkSettings* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CInput_CInking_CIPenAndInkSettings* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CInput_CInking_CIPenAndInkSettings* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CInput_CInking_CIPenAndInkSettings* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CInput_CInking_CIPenAndInkSettings* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_IsHandwritingDirectlyIntoTextFieldEnabled)(__x_ABI_CWindows_CUI_CInput_CInking_CIPenAndInkSettings* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* get_PenHandedness)(__x_ABI_CWindows_CUI_CInput_CInking_CIPenAndInkSettings* This,
        enum __x_ABI_CWindows_CUI_CInput_CInking_CPenHandedness* value);
    HRESULT (STDMETHODCALLTYPE* get_HandwritingLineHeight)(__x_ABI_CWindows_CUI_CInput_CInking_CIPenAndInkSettings* This,
        enum __x_ABI_CWindows_CUI_CInput_CInking_CHandwritingLineHeight* value);
    HRESULT (STDMETHODCALLTYPE* get_FontFamilyName)(__x_ABI_CWindows_CUI_CInput_CInking_CIPenAndInkSettings* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_UserConsentsToHandwritingTelemetryCollection)(__x_ABI_CWindows_CUI_CInput_CInking_CIPenAndInkSettings* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* get_IsTouchHandwritingEnabled)(__x_ABI_CWindows_CUI_CInput_CInking_CIPenAndInkSettings* This,
        boolean* value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CInput_CInking_CIPenAndInkSettingsVtbl;

    interface __x_ABI_CWindows_CUI_CInput_CInking_CIPenAndInkSettings
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CInput_CInking_CIPenAndInkSettingsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CInput_CInking_CIPenAndInkSettings;
#endif /* !defined(____x_ABI_CWindows_CUI_CInput_CInking_CIPenAndInkSettings_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CInput_CInking_CIPenAndInkSettingsStatics_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CInput_CInking_CIPenAndInkSettingsStatics_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CInput_CInking_CIPenAndInkSettingsStaticsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CInput_CInking_CIPenAndInkSettingsStatics* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CInput_CInking_CIPenAndInkSettingsStatics* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CInput_CInking_CIPenAndInkSettingsStatics* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CInput_CInking_CIPenAndInkSettingsStatics* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CInput_CInking_CIPenAndInkSettingsStatics* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CInput_CInking_CIPenAndInkSettingsStatics* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetDefault)(__x_ABI_CWindows_CUI_CInput_CInking_CIPenAndInkSettingsStatics* This,
        __x_ABI_CWindows_CUI_CInput_CInking_CIPenAndInkSettings** result);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CInput_CInking_CIPenAndInkSettingsStaticsVtbl;

    interface __x_ABI_CWindows_CUI_CInput_CInking_CIPenAndInkSettingsStatics
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CInput_CInking_CIPenAndInkSettingsStaticsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CInput_CInking_CIPenAndInkSettingsStatics;
#endif /* !defined(____x_ABI_CWindows_CUI_CInput_CInking_CIPenAndInkSettingsStatics_INTERFACE_DEFINED__) */
    

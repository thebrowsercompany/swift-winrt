// WARNING: Please don't edit this file. It was generated by Swift/WinRT v0.0.1

#pragma once
// Header files for imported files
#include <inspectable.h>
#include <EventToken.h>
#include <windowscontracts.h>
#include "Windows.Foundation.h"
#include "Windows.Devices.h"
// Importing Collections header
#include "Windows.Foundation.Collections.h"

/* Forward Declarations */
#ifndef ____x_ABI_CWindows_CDevices_CGpio_CProvider_CIGpioControllerProvider_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CGpio_CProvider_CIGpioControllerProvider_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CDevices_CGpio_CProvider_CIGpioControllerProvider __x_ABI_CWindows_CDevices_CGpio_CProvider_CIGpioControllerProvider;

#endif // ____x_ABI_CWindows_CDevices_CGpio_CProvider_CIGpioControllerProvider_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CGpio_CProvider_CIGpioPinProvider_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CGpio_CProvider_CIGpioPinProvider_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CDevices_CGpio_CProvider_CIGpioPinProvider __x_ABI_CWindows_CDevices_CGpio_CProvider_CIGpioPinProvider;

#endif // ____x_ABI_CWindows_CDevices_CGpio_CProvider_CIGpioPinProvider_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CGpio_CProvider_CIGpioPinProviderValueChangedEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CGpio_CProvider_CIGpioPinProviderValueChangedEventArgs_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CDevices_CGpio_CProvider_CIGpioPinProviderValueChangedEventArgs __x_ABI_CWindows_CDevices_CGpio_CProvider_CIGpioPinProviderValueChangedEventArgs;

#endif // ____x_ABI_CWindows_CDevices_CGpio_CProvider_CIGpioPinProviderValueChangedEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CGpio_CProvider_CIGpioPinProviderValueChangedEventArgsFactory_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CGpio_CProvider_CIGpioPinProviderValueChangedEventArgsFactory_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CDevices_CGpio_CProvider_CIGpioPinProviderValueChangedEventArgsFactory __x_ABI_CWindows_CDevices_CGpio_CProvider_CIGpioPinProviderValueChangedEventArgsFactory;

#endif // ____x_ABI_CWindows_CDevices_CGpio_CProvider_CIGpioPinProviderValueChangedEventArgsFactory_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CGpio_CProvider_CIGpioProvider_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CGpio_CProvider_CIGpioProvider_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CDevices_CGpio_CProvider_CIGpioProvider __x_ABI_CWindows_CDevices_CGpio_CProvider_CIGpioProvider;

#endif // ____x_ABI_CWindows_CDevices_CGpio_CProvider_CIGpioProvider_FWD_DEFINED__

// Parameterized interface forward declarations (C)

// Collection interface definitions

#if !defined(____x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CGpio__CProvider__CIGpioControllerProvider_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CGpio__CProvider__CIGpioControllerProvider_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CGpio__CProvider__CIGpioControllerProvider __x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CGpio__CProvider__CIGpioControllerProvider;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CGpio__CProvider__CIGpioControllerProvider;

    typedef struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CGpio__CProvider__CIGpioControllerProviderVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CGpio__CProvider__CIGpioControllerProvider* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CGpio__CProvider__CIGpioControllerProvider* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CGpio__CProvider__CIGpioControllerProvider* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CGpio__CProvider__CIGpioControllerProvider* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CGpio__CProvider__CIGpioControllerProvider* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CGpio__CProvider__CIGpioControllerProvider* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Current)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CGpio__CProvider__CIGpioControllerProvider* This,
        __x_ABI_CWindows_CDevices_CGpio_CProvider_CIGpioControllerProvider** result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CGpio__CProvider__CIGpioControllerProvider* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CGpio__CProvider__CIGpioControllerProvider* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CGpio__CProvider__CIGpioControllerProvider* This,
        UINT32 itemsLength,
        __x_ABI_CWindows_CDevices_CGpio_CProvider_CIGpioControllerProvider** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CGpio__CProvider__CIGpioControllerProviderVtbl;

    interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CGpio__CProvider__CIGpioControllerProvider
    {
        CONST_VTBL struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CGpio__CProvider__CIGpioControllerProviderVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CGpio__CProvider__CIGpioControllerProvider_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CGpio__CProvider__CIGpioControllerProvider_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CGpio__CProvider__CIGpioControllerProvider_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CGpio__CProvider__CIGpioControllerProvider __x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CGpio__CProvider__CIGpioControllerProvider;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CGpio__CProvider__CIGpioControllerProvider;

    typedef struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CGpio__CProvider__CIGpioControllerProviderVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CGpio__CProvider__CIGpioControllerProvider* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CGpio__CProvider__CIGpioControllerProvider* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CGpio__CProvider__CIGpioControllerProvider* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CGpio__CProvider__CIGpioControllerProvider* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CGpio__CProvider__CIGpioControllerProvider* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CGpio__CProvider__CIGpioControllerProvider* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* First)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CGpio__CProvider__CIGpioControllerProvider* This,
        __x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CGpio__CProvider__CIGpioControllerProvider** result);

        END_INTERFACE
    } __x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CGpio__CProvider__CIGpioControllerProviderVtbl;

    interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CGpio__CProvider__CIGpioControllerProvider
    {
        CONST_VTBL struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CGpio__CProvider__CIGpioControllerProviderVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CGpio__CProvider__CIGpioControllerProvider_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CGpio__CProvider__CIGpioControllerProvider_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CGpio__CProvider__CIGpioControllerProvider_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CGpio__CProvider__CIGpioControllerProvider __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CGpio__CProvider__CIGpioControllerProvider;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CGpio__CProvider__CIGpioControllerProvider;

    typedef struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CGpio__CProvider__CIGpioControllerProviderVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CGpio__CProvider__CIGpioControllerProvider* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CGpio__CProvider__CIGpioControllerProvider* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CGpio__CProvider__CIGpioControllerProvider* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CGpio__CProvider__CIGpioControllerProvider* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CGpio__CProvider__CIGpioControllerProvider* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CGpio__CProvider__CIGpioControllerProvider* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CGpio__CProvider__CIGpioControllerProvider* This,
        UINT32 index,
        __x_ABI_CWindows_CDevices_CGpio_CProvider_CIGpioControllerProvider** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CGpio__CProvider__CIGpioControllerProvider* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CGpio__CProvider__CIGpioControllerProvider* This,
        __x_ABI_CWindows_CDevices_CGpio_CProvider_CIGpioControllerProvider* value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CGpio__CProvider__CIGpioControllerProvider* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        __x_ABI_CWindows_CDevices_CGpio_CProvider_CIGpioControllerProvider** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CGpio__CProvider__CIGpioControllerProviderVtbl;

    interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CGpio__CProvider__CIGpioControllerProvider
    {
        CONST_VTBL struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CGpio__CProvider__CIGpioControllerProviderVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CGpio__CProvider__CIGpioControllerProvider_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CGpio__CProvider__CIGpioPinProvider___x_ABI_CWindows__CDevices__CGpio__CProvider__CGpioPinProviderValueChangedEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CGpio__CProvider__CIGpioPinProvider___x_ABI_CWindows__CDevices__CGpio__CProvider__CGpioPinProviderValueChangedEventArgs_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CGpio__CProvider__CIGpioPinProvider___x_ABI_CWindows__CDevices__CGpio__CProvider__CGpioPinProviderValueChangedEventArgs __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CGpio__CProvider__CIGpioPinProvider___x_ABI_CWindows__CDevices__CGpio__CProvider__CGpioPinProviderValueChangedEventArgs;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CGpio__CProvider__CIGpioPinProvider___x_ABI_CWindows__CDevices__CGpio__CProvider__CGpioPinProviderValueChangedEventArgs;

    typedef struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CGpio__CProvider__CIGpioPinProvider___x_ABI_CWindows__CDevices__CGpio__CProvider__CGpioPinProviderValueChangedEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CGpio__CProvider__CIGpioPinProvider___x_ABI_CWindows__CDevices__CGpio__CProvider__CGpioPinProviderValueChangedEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CGpio__CProvider__CIGpioPinProvider___x_ABI_CWindows__CDevices__CGpio__CProvider__CGpioPinProviderValueChangedEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CGpio__CProvider__CIGpioPinProvider___x_ABI_CWindows__CDevices__CGpio__CProvider__CGpioPinProviderValueChangedEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CGpio__CProvider__CIGpioPinProvider___x_ABI_CWindows__CDevices__CGpio__CProvider__CGpioPinProviderValueChangedEventArgs* This,
        __x_ABI_CWindows_CDevices_CGpio_CProvider_CIGpioPinProvider* sender,
        __x_ABI_CWindows_CDevices_CGpio_CProvider_CIGpioPinProviderValueChangedEventArgs* args);

        END_INTERFACE
    } __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CGpio__CProvider__CIGpioPinProvider___x_ABI_CWindows__CDevices__CGpio__CProvider__CGpioPinProviderValueChangedEventArgsVtbl;

    interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CGpio__CProvider__CIGpioPinProvider___x_ABI_CWindows__CDevices__CGpio__CProvider__CGpioPinProviderValueChangedEventArgs
    {
        CONST_VTBL struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CGpio__CProvider__CIGpioPinProvider___x_ABI_CWindows__CDevices__CGpio__CProvider__CGpioPinProviderValueChangedEventArgsVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CGpio__CProvider__CIGpioPinProvider___x_ABI_CWindows__CDevices__CGpio__CProvider__CGpioPinProviderValueChangedEventArgs_INTERFACE_DEFINED__
    
typedef struct __x_ABI_CWindows_CFoundation_CTimeSpan __x_ABI_CWindows_CFoundation_CTimeSpan;

typedef enum __x_ABI_CWindows_CDevices_CGpio_CProvider_CProviderGpioPinDriveMode __x_ABI_CWindows_CDevices_CGpio_CProvider_CProviderGpioPinDriveMode;

typedef enum __x_ABI_CWindows_CDevices_CGpio_CProvider_CProviderGpioPinEdge __x_ABI_CWindows_CDevices_CGpio_CProvider_CProviderGpioPinEdge;

typedef enum __x_ABI_CWindows_CDevices_CGpio_CProvider_CProviderGpioPinValue __x_ABI_CWindows_CDevices_CGpio_CProvider_CProviderGpioPinValue;

typedef enum __x_ABI_CWindows_CDevices_CGpio_CProvider_CProviderGpioSharingMode __x_ABI_CWindows_CDevices_CGpio_CProvider_CProviderGpioSharingMode;

enum __x_ABI_CWindows_CDevices_CGpio_CProvider_CProviderGpioPinDriveMode
    {
        __x_ABI_CWindows_CDevices_CGpio_CProvider_CProviderGpioPinDriveMode_Input = 0,
    __x_ABI_CWindows_CDevices_CGpio_CProvider_CProviderGpioPinDriveMode_Output = 1,
    __x_ABI_CWindows_CDevices_CGpio_CProvider_CProviderGpioPinDriveMode_InputPullUp = 2,
    __x_ABI_CWindows_CDevices_CGpio_CProvider_CProviderGpioPinDriveMode_InputPullDown = 3,
    __x_ABI_CWindows_CDevices_CGpio_CProvider_CProviderGpioPinDriveMode_OutputOpenDrain = 4,
    __x_ABI_CWindows_CDevices_CGpio_CProvider_CProviderGpioPinDriveMode_OutputOpenDrainPullUp = 5,
    __x_ABI_CWindows_CDevices_CGpio_CProvider_CProviderGpioPinDriveMode_OutputOpenSource = 6,
    __x_ABI_CWindows_CDevices_CGpio_CProvider_CProviderGpioPinDriveMode_OutputOpenSourcePullDown = 7,
};

enum __x_ABI_CWindows_CDevices_CGpio_CProvider_CProviderGpioPinEdge
    {
        __x_ABI_CWindows_CDevices_CGpio_CProvider_CProviderGpioPinEdge_FallingEdge = 0,
    __x_ABI_CWindows_CDevices_CGpio_CProvider_CProviderGpioPinEdge_RisingEdge = 1,
};

enum __x_ABI_CWindows_CDevices_CGpio_CProvider_CProviderGpioPinValue
    {
        __x_ABI_CWindows_CDevices_CGpio_CProvider_CProviderGpioPinValue_Low = 0,
    __x_ABI_CWindows_CDevices_CGpio_CProvider_CProviderGpioPinValue_High = 1,
};

enum __x_ABI_CWindows_CDevices_CGpio_CProvider_CProviderGpioSharingMode
    {
        __x_ABI_CWindows_CDevices_CGpio_CProvider_CProviderGpioSharingMode_Exclusive = 0,
    __x_ABI_CWindows_CDevices_CGpio_CProvider_CProviderGpioSharingMode_SharedReadOnly = 1,
};

#if !defined(____x_ABI_CWindows_CDevices_CGpio_CProvider_CIGpioControllerProvider_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CDevices_CGpio_CProvider_CIGpioControllerProvider_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CDevices_CGpio_CProvider_CIGpioControllerProviderVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CGpio_CProvider_CIGpioControllerProvider* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CGpio_CProvider_CIGpioControllerProvider* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CGpio_CProvider_CIGpioControllerProvider* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CGpio_CProvider_CIGpioControllerProvider* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CGpio_CProvider_CIGpioControllerProvider* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CGpio_CProvider_CIGpioControllerProvider* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_PinCount)(__x_ABI_CWindows_CDevices_CGpio_CProvider_CIGpioControllerProvider* This,
        INT32* value);
    HRESULT (STDMETHODCALLTYPE* OpenPinProvider)(__x_ABI_CWindows_CDevices_CGpio_CProvider_CIGpioControllerProvider* This,
        INT32 pin,
        enum __x_ABI_CWindows_CDevices_CGpio_CProvider_CProviderGpioSharingMode sharingMode,
        __x_ABI_CWindows_CDevices_CGpio_CProvider_CIGpioPinProvider** gpioPinProvider);

        END_INTERFACE
    } __x_ABI_CWindows_CDevices_CGpio_CProvider_CIGpioControllerProviderVtbl;

    interface __x_ABI_CWindows_CDevices_CGpio_CProvider_CIGpioControllerProvider
    {
        CONST_VTBL struct __x_ABI_CWindows_CDevices_CGpio_CProvider_CIGpioControllerProviderVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CGpio_CProvider_CIGpioControllerProvider;
#endif /* !defined(____x_ABI_CWindows_CDevices_CGpio_CProvider_CIGpioControllerProvider_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CDevices_CGpio_CProvider_CIGpioPinProvider_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CDevices_CGpio_CProvider_CIGpioPinProvider_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CDevices_CGpio_CProvider_CIGpioPinProviderVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CGpio_CProvider_CIGpioPinProvider* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CGpio_CProvider_CIGpioPinProvider* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CGpio_CProvider_CIGpioPinProvider* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CGpio_CProvider_CIGpioPinProvider* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CGpio_CProvider_CIGpioPinProvider* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CGpio_CProvider_CIGpioPinProvider* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* add_ValueChanged)(__x_ABI_CWindows_CDevices_CGpio_CProvider_CIGpioPinProvider* This,
        __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CGpio__CProvider__CIGpioPinProvider___x_ABI_CWindows__CDevices__CGpio__CProvider__CGpioPinProviderValueChangedEventArgs* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_ValueChanged)(__x_ABI_CWindows_CDevices_CGpio_CProvider_CIGpioPinProvider* This,
        EventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* get_DebounceTimeout)(__x_ABI_CWindows_CDevices_CGpio_CProvider_CIGpioPinProvider* This,
        struct __x_ABI_CWindows_CFoundation_CTimeSpan* value);
    HRESULT (STDMETHODCALLTYPE* put_DebounceTimeout)(__x_ABI_CWindows_CDevices_CGpio_CProvider_CIGpioPinProvider* This,
        struct __x_ABI_CWindows_CFoundation_CTimeSpan value);
    HRESULT (STDMETHODCALLTYPE* get_PinNumber)(__x_ABI_CWindows_CDevices_CGpio_CProvider_CIGpioPinProvider* This,
        INT32* value);
    HRESULT (STDMETHODCALLTYPE* get_SharingMode)(__x_ABI_CWindows_CDevices_CGpio_CProvider_CIGpioPinProvider* This,
        enum __x_ABI_CWindows_CDevices_CGpio_CProvider_CProviderGpioSharingMode* value);
    HRESULT (STDMETHODCALLTYPE* IsDriveModeSupported)(__x_ABI_CWindows_CDevices_CGpio_CProvider_CIGpioPinProvider* This,
        enum __x_ABI_CWindows_CDevices_CGpio_CProvider_CProviderGpioPinDriveMode driveMode,
        boolean* supported);
    HRESULT (STDMETHODCALLTYPE* GetDriveMode)(__x_ABI_CWindows_CDevices_CGpio_CProvider_CIGpioPinProvider* This,
        enum __x_ABI_CWindows_CDevices_CGpio_CProvider_CProviderGpioPinDriveMode* value);
    HRESULT (STDMETHODCALLTYPE* SetDriveMode)(__x_ABI_CWindows_CDevices_CGpio_CProvider_CIGpioPinProvider* This,
        enum __x_ABI_CWindows_CDevices_CGpio_CProvider_CProviderGpioPinDriveMode value);
    HRESULT (STDMETHODCALLTYPE* Write)(__x_ABI_CWindows_CDevices_CGpio_CProvider_CIGpioPinProvider* This,
        enum __x_ABI_CWindows_CDevices_CGpio_CProvider_CProviderGpioPinValue value);
    HRESULT (STDMETHODCALLTYPE* Read)(__x_ABI_CWindows_CDevices_CGpio_CProvider_CIGpioPinProvider* This,
        enum __x_ABI_CWindows_CDevices_CGpio_CProvider_CProviderGpioPinValue* value);

        END_INTERFACE
    } __x_ABI_CWindows_CDevices_CGpio_CProvider_CIGpioPinProviderVtbl;

    interface __x_ABI_CWindows_CDevices_CGpio_CProvider_CIGpioPinProvider
    {
        CONST_VTBL struct __x_ABI_CWindows_CDevices_CGpio_CProvider_CIGpioPinProviderVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CGpio_CProvider_CIGpioPinProvider;
#endif /* !defined(____x_ABI_CWindows_CDevices_CGpio_CProvider_CIGpioPinProvider_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CDevices_CGpio_CProvider_CIGpioPinProviderValueChangedEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CDevices_CGpio_CProvider_CIGpioPinProviderValueChangedEventArgs_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CDevices_CGpio_CProvider_CIGpioPinProviderValueChangedEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CGpio_CProvider_CIGpioPinProviderValueChangedEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CGpio_CProvider_CIGpioPinProviderValueChangedEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CGpio_CProvider_CIGpioPinProviderValueChangedEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CGpio_CProvider_CIGpioPinProviderValueChangedEventArgs* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CGpio_CProvider_CIGpioPinProviderValueChangedEventArgs* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CGpio_CProvider_CIGpioPinProviderValueChangedEventArgs* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Edge)(__x_ABI_CWindows_CDevices_CGpio_CProvider_CIGpioPinProviderValueChangedEventArgs* This,
        enum __x_ABI_CWindows_CDevices_CGpio_CProvider_CProviderGpioPinEdge* value);

        END_INTERFACE
    } __x_ABI_CWindows_CDevices_CGpio_CProvider_CIGpioPinProviderValueChangedEventArgsVtbl;

    interface __x_ABI_CWindows_CDevices_CGpio_CProvider_CIGpioPinProviderValueChangedEventArgs
    {
        CONST_VTBL struct __x_ABI_CWindows_CDevices_CGpio_CProvider_CIGpioPinProviderValueChangedEventArgsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CGpio_CProvider_CIGpioPinProviderValueChangedEventArgs;
#endif /* !defined(____x_ABI_CWindows_CDevices_CGpio_CProvider_CIGpioPinProviderValueChangedEventArgs_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CDevices_CGpio_CProvider_CIGpioPinProviderValueChangedEventArgsFactory_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CDevices_CGpio_CProvider_CIGpioPinProviderValueChangedEventArgsFactory_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CDevices_CGpio_CProvider_CIGpioPinProviderValueChangedEventArgsFactoryVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CGpio_CProvider_CIGpioPinProviderValueChangedEventArgsFactory* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CGpio_CProvider_CIGpioPinProviderValueChangedEventArgsFactory* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CGpio_CProvider_CIGpioPinProviderValueChangedEventArgsFactory* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CGpio_CProvider_CIGpioPinProviderValueChangedEventArgsFactory* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CGpio_CProvider_CIGpioPinProviderValueChangedEventArgsFactory* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CGpio_CProvider_CIGpioPinProviderValueChangedEventArgsFactory* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* Create)(__x_ABI_CWindows_CDevices_CGpio_CProvider_CIGpioPinProviderValueChangedEventArgsFactory* This,
        enum __x_ABI_CWindows_CDevices_CGpio_CProvider_CProviderGpioPinEdge edge,
        __x_ABI_CWindows_CDevices_CGpio_CProvider_CIGpioPinProviderValueChangedEventArgs** value);

        END_INTERFACE
    } __x_ABI_CWindows_CDevices_CGpio_CProvider_CIGpioPinProviderValueChangedEventArgsFactoryVtbl;

    interface __x_ABI_CWindows_CDevices_CGpio_CProvider_CIGpioPinProviderValueChangedEventArgsFactory
    {
        CONST_VTBL struct __x_ABI_CWindows_CDevices_CGpio_CProvider_CIGpioPinProviderValueChangedEventArgsFactoryVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CGpio_CProvider_CIGpioPinProviderValueChangedEventArgsFactory;
#endif /* !defined(____x_ABI_CWindows_CDevices_CGpio_CProvider_CIGpioPinProviderValueChangedEventArgsFactory_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CDevices_CGpio_CProvider_CIGpioProvider_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CDevices_CGpio_CProvider_CIGpioProvider_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CDevices_CGpio_CProvider_CIGpioProviderVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CGpio_CProvider_CIGpioProvider* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CGpio_CProvider_CIGpioProvider* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CGpio_CProvider_CIGpioProvider* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CGpio_CProvider_CIGpioProvider* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CGpio_CProvider_CIGpioProvider* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CGpio_CProvider_CIGpioProvider* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetControllers)(__x_ABI_CWindows_CDevices_CGpio_CProvider_CIGpioProvider* This,
        __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CGpio__CProvider__CIGpioControllerProvider** result);

        END_INTERFACE
    } __x_ABI_CWindows_CDevices_CGpio_CProvider_CIGpioProviderVtbl;

    interface __x_ABI_CWindows_CDevices_CGpio_CProvider_CIGpioProvider
    {
        CONST_VTBL struct __x_ABI_CWindows_CDevices_CGpio_CProvider_CIGpioProviderVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CGpio_CProvider_CIGpioProvider;
#endif /* !defined(____x_ABI_CWindows_CDevices_CGpio_CProvider_CIGpioProvider_INTERFACE_DEFINED__) */
    

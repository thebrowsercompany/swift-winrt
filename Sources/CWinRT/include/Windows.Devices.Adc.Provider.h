// WARNING: Please don't edit this file. It was generated by Swift/WinRT v0.0.1

#pragma once
// Header files for imported files
#include <inspectable.h>
#include <EventToken.h>
#include <windowscontracts.h>
#include "Windows.Foundation.h"
#include "Windows.Devices.h"
// Importing Collections header
#include "Windows.Foundation.Collections.h"

/* Forward Declarations */
#ifndef ____x_ABI_CWindows_CDevices_CAdc_CProvider_CIAdcControllerProvider_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CAdc_CProvider_CIAdcControllerProvider_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CDevices_CAdc_CProvider_CIAdcControllerProvider __x_ABI_CWindows_CDevices_CAdc_CProvider_CIAdcControllerProvider;

#endif // ____x_ABI_CWindows_CDevices_CAdc_CProvider_CIAdcControllerProvider_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CAdc_CProvider_CIAdcProvider_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CAdc_CProvider_CIAdcProvider_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CDevices_CAdc_CProvider_CIAdcProvider __x_ABI_CWindows_CDevices_CAdc_CProvider_CIAdcProvider;

#endif // ____x_ABI_CWindows_CDevices_CAdc_CProvider_CIAdcProvider_FWD_DEFINED__

// Parameterized interface forward declarations (C)

// Collection interface definitions

#if !defined(____x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CAdc__CProvider__CIAdcControllerProvider_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CAdc__CProvider__CIAdcControllerProvider_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CAdc__CProvider__CIAdcControllerProvider __x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CAdc__CProvider__CIAdcControllerProvider;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CAdc__CProvider__CIAdcControllerProvider;

    typedef struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CAdc__CProvider__CIAdcControllerProviderVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CAdc__CProvider__CIAdcControllerProvider* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CAdc__CProvider__CIAdcControllerProvider* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CAdc__CProvider__CIAdcControllerProvider* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CAdc__CProvider__CIAdcControllerProvider* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CAdc__CProvider__CIAdcControllerProvider* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CAdc__CProvider__CIAdcControllerProvider* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Current)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CAdc__CProvider__CIAdcControllerProvider* This,
        __x_ABI_CWindows_CDevices_CAdc_CProvider_CIAdcControllerProvider** result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CAdc__CProvider__CIAdcControllerProvider* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CAdc__CProvider__CIAdcControllerProvider* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CAdc__CProvider__CIAdcControllerProvider* This,
        UINT32 itemsLength,
        __x_ABI_CWindows_CDevices_CAdc_CProvider_CIAdcControllerProvider** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CAdc__CProvider__CIAdcControllerProviderVtbl;

    interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CAdc__CProvider__CIAdcControllerProvider
    {
        CONST_VTBL struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CAdc__CProvider__CIAdcControllerProviderVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CAdc__CProvider__CIAdcControllerProvider_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CAdc__CProvider__CIAdcControllerProvider_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CAdc__CProvider__CIAdcControllerProvider_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CAdc__CProvider__CIAdcControllerProvider __x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CAdc__CProvider__CIAdcControllerProvider;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CAdc__CProvider__CIAdcControllerProvider;

    typedef struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CAdc__CProvider__CIAdcControllerProviderVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CAdc__CProvider__CIAdcControllerProvider* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CAdc__CProvider__CIAdcControllerProvider* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CAdc__CProvider__CIAdcControllerProvider* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CAdc__CProvider__CIAdcControllerProvider* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CAdc__CProvider__CIAdcControllerProvider* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CAdc__CProvider__CIAdcControllerProvider* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* First)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CAdc__CProvider__CIAdcControllerProvider* This,
        __x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CAdc__CProvider__CIAdcControllerProvider** result);

        END_INTERFACE
    } __x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CAdc__CProvider__CIAdcControllerProviderVtbl;

    interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CAdc__CProvider__CIAdcControllerProvider
    {
        CONST_VTBL struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CAdc__CProvider__CIAdcControllerProviderVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CAdc__CProvider__CIAdcControllerProvider_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CAdc__CProvider__CIAdcControllerProvider_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CAdc__CProvider__CIAdcControllerProvider_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CAdc__CProvider__CIAdcControllerProvider __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CAdc__CProvider__CIAdcControllerProvider;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CAdc__CProvider__CIAdcControllerProvider;

    typedef struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CAdc__CProvider__CIAdcControllerProviderVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CAdc__CProvider__CIAdcControllerProvider* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CAdc__CProvider__CIAdcControllerProvider* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CAdc__CProvider__CIAdcControllerProvider* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CAdc__CProvider__CIAdcControllerProvider* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CAdc__CProvider__CIAdcControllerProvider* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CAdc__CProvider__CIAdcControllerProvider* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CAdc__CProvider__CIAdcControllerProvider* This,
        UINT32 index,
        __x_ABI_CWindows_CDevices_CAdc_CProvider_CIAdcControllerProvider** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CAdc__CProvider__CIAdcControllerProvider* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CAdc__CProvider__CIAdcControllerProvider* This,
        __x_ABI_CWindows_CDevices_CAdc_CProvider_CIAdcControllerProvider* value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CAdc__CProvider__CIAdcControllerProvider* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        __x_ABI_CWindows_CDevices_CAdc_CProvider_CIAdcControllerProvider** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CAdc__CProvider__CIAdcControllerProviderVtbl;

    interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CAdc__CProvider__CIAdcControllerProvider
    {
        CONST_VTBL struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CAdc__CProvider__CIAdcControllerProviderVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CAdc__CProvider__CIAdcControllerProvider_INTERFACE_DEFINED__
    
typedef enum __x_ABI_CWindows_CDevices_CAdc_CProvider_CProviderAdcChannelMode __x_ABI_CWindows_CDevices_CAdc_CProvider_CProviderAdcChannelMode;

enum __x_ABI_CWindows_CDevices_CAdc_CProvider_CProviderAdcChannelMode
    {
        __x_ABI_CWindows_CDevices_CAdc_CProvider_CProviderAdcChannelMode_SingleEnded = 0,
    __x_ABI_CWindows_CDevices_CAdc_CProvider_CProviderAdcChannelMode_Differential = 1,
};

#if !defined(____x_ABI_CWindows_CDevices_CAdc_CProvider_CIAdcControllerProvider_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CDevices_CAdc_CProvider_CIAdcControllerProvider_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CDevices_CAdc_CProvider_CIAdcControllerProviderVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CAdc_CProvider_CIAdcControllerProvider* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CAdc_CProvider_CIAdcControllerProvider* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CAdc_CProvider_CIAdcControllerProvider* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CAdc_CProvider_CIAdcControllerProvider* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CAdc_CProvider_CIAdcControllerProvider* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CAdc_CProvider_CIAdcControllerProvider* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_ChannelCount)(__x_ABI_CWindows_CDevices_CAdc_CProvider_CIAdcControllerProvider* This,
        INT32* value);
    HRESULT (STDMETHODCALLTYPE* get_ResolutionInBits)(__x_ABI_CWindows_CDevices_CAdc_CProvider_CIAdcControllerProvider* This,
        INT32* value);
    HRESULT (STDMETHODCALLTYPE* get_MinValue)(__x_ABI_CWindows_CDevices_CAdc_CProvider_CIAdcControllerProvider* This,
        INT32* value);
    HRESULT (STDMETHODCALLTYPE* get_MaxValue)(__x_ABI_CWindows_CDevices_CAdc_CProvider_CIAdcControllerProvider* This,
        INT32* value);
    HRESULT (STDMETHODCALLTYPE* get_ChannelMode)(__x_ABI_CWindows_CDevices_CAdc_CProvider_CIAdcControllerProvider* This,
        enum __x_ABI_CWindows_CDevices_CAdc_CProvider_CProviderAdcChannelMode* value);
    HRESULT (STDMETHODCALLTYPE* put_ChannelMode)(__x_ABI_CWindows_CDevices_CAdc_CProvider_CIAdcControllerProvider* This,
        enum __x_ABI_CWindows_CDevices_CAdc_CProvider_CProviderAdcChannelMode value);
    HRESULT (STDMETHODCALLTYPE* IsChannelModeSupported)(__x_ABI_CWindows_CDevices_CAdc_CProvider_CIAdcControllerProvider* This,
        enum __x_ABI_CWindows_CDevices_CAdc_CProvider_CProviderAdcChannelMode channelMode,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* AcquireChannel)(__x_ABI_CWindows_CDevices_CAdc_CProvider_CIAdcControllerProvider* This,
        INT32 channel);
    HRESULT (STDMETHODCALLTYPE* ReleaseChannel)(__x_ABI_CWindows_CDevices_CAdc_CProvider_CIAdcControllerProvider* This,
        INT32 channel);
    HRESULT (STDMETHODCALLTYPE* ReadValue)(__x_ABI_CWindows_CDevices_CAdc_CProvider_CIAdcControllerProvider* This,
        INT32 channelNumber,
        INT32* result);

        END_INTERFACE
    } __x_ABI_CWindows_CDevices_CAdc_CProvider_CIAdcControllerProviderVtbl;

    interface __x_ABI_CWindows_CDevices_CAdc_CProvider_CIAdcControllerProvider
    {
        CONST_VTBL struct __x_ABI_CWindows_CDevices_CAdc_CProvider_CIAdcControllerProviderVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CAdc_CProvider_CIAdcControllerProvider;
#endif /* !defined(____x_ABI_CWindows_CDevices_CAdc_CProvider_CIAdcControllerProvider_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CDevices_CAdc_CProvider_CIAdcProvider_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CDevices_CAdc_CProvider_CIAdcProvider_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CDevices_CAdc_CProvider_CIAdcProviderVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CAdc_CProvider_CIAdcProvider* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CAdc_CProvider_CIAdcProvider* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CAdc_CProvider_CIAdcProvider* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CAdc_CProvider_CIAdcProvider* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CAdc_CProvider_CIAdcProvider* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CAdc_CProvider_CIAdcProvider* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetControllers)(__x_ABI_CWindows_CDevices_CAdc_CProvider_CIAdcProvider* This,
        __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CAdc__CProvider__CIAdcControllerProvider** result);

        END_INTERFACE
    } __x_ABI_CWindows_CDevices_CAdc_CProvider_CIAdcProviderVtbl;

    interface __x_ABI_CWindows_CDevices_CAdc_CProvider_CIAdcProvider
    {
        CONST_VTBL struct __x_ABI_CWindows_CDevices_CAdc_CProvider_CIAdcProviderVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CAdc_CProvider_CIAdcProvider;
#endif /* !defined(____x_ABI_CWindows_CDevices_CAdc_CProvider_CIAdcProvider_INTERFACE_DEFINED__) */
    

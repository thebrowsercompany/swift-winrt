// WARNING: Please don't edit this file. It was generated by Swift/WinRT v0.0.1

#pragma once
// Header files for imported files
#include <inspectable.h>
#include <EventToken.h>
#include <windowscontracts.h>
#include "Windows.Foundation.h"
#include "Windows.System.h"
#include "Windows.UI.Core.h"
#include "Windows.Web.UI.h"
// Importing Collections header
#include "Windows.Foundation.Collections.h"

/* Forward Declarations */
#ifndef ____x_ABI_CWindows_CWeb_CUI_CInterop_CIWebViewControlAcceleratorKeyPressedEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CWeb_CUI_CInterop_CIWebViewControlAcceleratorKeyPressedEventArgs_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CWeb_CUI_CInterop_CIWebViewControlAcceleratorKeyPressedEventArgs __x_ABI_CWindows_CWeb_CUI_CInterop_CIWebViewControlAcceleratorKeyPressedEventArgs;

#endif // ____x_ABI_CWindows_CWeb_CUI_CInterop_CIWebViewControlAcceleratorKeyPressedEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CWeb_CUI_CInterop_CIWebViewControlMoveFocusRequestedEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CWeb_CUI_CInterop_CIWebViewControlMoveFocusRequestedEventArgs_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CWeb_CUI_CInterop_CIWebViewControlMoveFocusRequestedEventArgs __x_ABI_CWindows_CWeb_CUI_CInterop_CIWebViewControlMoveFocusRequestedEventArgs;

#endif // ____x_ABI_CWindows_CWeb_CUI_CInterop_CIWebViewControlMoveFocusRequestedEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CWeb_CUI_CInterop_CIWebViewControlProcess_FWD_DEFINED__
#define ____x_ABI_CWindows_CWeb_CUI_CInterop_CIWebViewControlProcess_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CWeb_CUI_CInterop_CIWebViewControlProcess __x_ABI_CWindows_CWeb_CUI_CInterop_CIWebViewControlProcess;

#endif // ____x_ABI_CWindows_CWeb_CUI_CInterop_CIWebViewControlProcess_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CWeb_CUI_CInterop_CIWebViewControlProcessFactory_FWD_DEFINED__
#define ____x_ABI_CWindows_CWeb_CUI_CInterop_CIWebViewControlProcessFactory_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CWeb_CUI_CInterop_CIWebViewControlProcessFactory __x_ABI_CWindows_CWeb_CUI_CInterop_CIWebViewControlProcessFactory;

#endif // ____x_ABI_CWindows_CWeb_CUI_CInterop_CIWebViewControlProcessFactory_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CWeb_CUI_CInterop_CIWebViewControlProcessOptions_FWD_DEFINED__
#define ____x_ABI_CWindows_CWeb_CUI_CInterop_CIWebViewControlProcessOptions_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CWeb_CUI_CInterop_CIWebViewControlProcessOptions __x_ABI_CWindows_CWeb_CUI_CInterop_CIWebViewControlProcessOptions;

#endif // ____x_ABI_CWindows_CWeb_CUI_CInterop_CIWebViewControlProcessOptions_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CWeb_CUI_CInterop_CIWebViewControlSite_FWD_DEFINED__
#define ____x_ABI_CWindows_CWeb_CUI_CInterop_CIWebViewControlSite_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CWeb_CUI_CInterop_CIWebViewControlSite __x_ABI_CWindows_CWeb_CUI_CInterop_CIWebViewControlSite;

#endif // ____x_ABI_CWindows_CWeb_CUI_CInterop_CIWebViewControlSite_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CWeb_CUI_CInterop_CIWebViewControlSite2_FWD_DEFINED__
#define ____x_ABI_CWindows_CWeb_CUI_CInterop_CIWebViewControlSite2_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CWeb_CUI_CInterop_CIWebViewControlSite2 __x_ABI_CWindows_CWeb_CUI_CInterop_CIWebViewControlSite2;

#endif // ____x_ABI_CWindows_CWeb_CUI_CInterop_CIWebViewControlSite2_FWD_DEFINED__

// Parameterized interface forward declarations (C)

// Collection interface definitions

#ifndef ____x_ABI_CWindows_CWeb_CUI_CIWebViewControl_FWD_DEFINED__
#define ____x_ABI_CWindows_CWeb_CUI_CIWebViewControl_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CWeb_CUI_CIWebViewControl __x_ABI_CWindows_CWeb_CUI_CIWebViewControl;

#endif // ____x_ABI_CWindows_CWeb_CUI_CIWebViewControl_FWD_DEFINED__

typedef interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CWeb__CUI__CInterop__CWebViewControl __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CWeb__CUI__CInterop__CWebViewControl;

#if !defined(____x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CWeb__CUI__CInterop__CWebViewControl_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CWeb__CUI__CInterop__CWebViewControl_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CWeb__CUI__CInterop__CWebViewControl __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CWeb__CUI__CInterop__CWebViewControl;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CWeb__CUI__CInterop__CWebViewControl;

    typedef struct __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CWeb__CUI__CInterop__CWebViewControlVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CWeb__CUI__CInterop__CWebViewControl* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CWeb__CUI__CInterop__CWebViewControl* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CWeb__CUI__CInterop__CWebViewControl* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CWeb__CUI__CInterop__CWebViewControl* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CWeb__CUI__CInterop__CWebViewControl* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CWeb__CUI__CInterop__CWebViewControl* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* put_Completed)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CWeb__CUI__CInterop__CWebViewControl* This,
        __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CWeb__CUI__CInterop__CWebViewControl* handler);
    HRESULT (STDMETHODCALLTYPE* get_Completed)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CWeb__CUI__CInterop__CWebViewControl* This,
        __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CWeb__CUI__CInterop__CWebViewControl** result);
    HRESULT (STDMETHODCALLTYPE* GetResults)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CWeb__CUI__CInterop__CWebViewControl* This,
        __x_ABI_CWindows_CWeb_CUI_CIWebViewControl** result);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CWeb__CUI__CInterop__CWebViewControlVtbl;

    interface __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CWeb__CUI__CInterop__CWebViewControl
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CWeb__CUI__CInterop__CWebViewControlVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CWeb__CUI__CInterop__CWebViewControl_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CWeb__CUI__CInterop__CWebViewControl_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CWeb__CUI__CInterop__CWebViewControl_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CWeb__CUI__CInterop__CWebViewControl __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CWeb__CUI__CInterop__CWebViewControl;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CWeb__CUI__CInterop__CWebViewControl;

    typedef struct __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CWeb__CUI__CInterop__CWebViewControlVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CWeb__CUI__CInterop__CWebViewControl* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CWeb__CUI__CInterop__CWebViewControl* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CWeb__CUI__CInterop__CWebViewControl* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CWeb__CUI__CInterop__CWebViewControl* This,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CWeb__CUI__CInterop__CWebViewControl* asyncInfo,
        enum __x_ABI_CWindows_CFoundation_CAsyncStatus asyncStatus);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CWeb__CUI__CInterop__CWebViewControlVtbl;

    interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CWeb__CUI__CInterop__CWebViewControl
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CWeb__CUI__CInterop__CWebViewControlVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CWeb__CUI__CInterop__CWebViewControl_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CUI__CInterop__CWebViewControl_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CUI__CInterop__CWebViewControl_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CUI__CInterop__CWebViewControl __x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CUI__CInterop__CWebViewControl;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CUI__CInterop__CWebViewControl;

    typedef struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CUI__CInterop__CWebViewControlVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CUI__CInterop__CWebViewControl* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CUI__CInterop__CWebViewControl* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CUI__CInterop__CWebViewControl* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CUI__CInterop__CWebViewControl* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CUI__CInterop__CWebViewControl* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CUI__CInterop__CWebViewControl* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Current)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CUI__CInterop__CWebViewControl* This,
        __x_ABI_CWindows_CWeb_CUI_CIWebViewControl** result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CUI__CInterop__CWebViewControl* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CUI__CInterop__CWebViewControl* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CUI__CInterop__CWebViewControl* This,
        UINT32 itemsLength,
        __x_ABI_CWindows_CWeb_CUI_CIWebViewControl** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CUI__CInterop__CWebViewControlVtbl;

    interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CUI__CInterop__CWebViewControl
    {
        CONST_VTBL struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CUI__CInterop__CWebViewControlVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CUI__CInterop__CWebViewControl_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterable_1___x_ABI_CWindows__CWeb__CUI__CInterop__CWebViewControl_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CWeb__CUI__CInterop__CWebViewControl_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CWeb__CUI__CInterop__CWebViewControl __x_ABI_C__FIIterable_1___x_ABI_CWindows__CWeb__CUI__CInterop__CWebViewControl;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterable_1___x_ABI_CWindows__CWeb__CUI__CInterop__CWebViewControl;

    typedef struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CWeb__CUI__CInterop__CWebViewControlVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CWeb__CUI__CInterop__CWebViewControl* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CWeb__CUI__CInterop__CWebViewControl* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CWeb__CUI__CInterop__CWebViewControl* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CWeb__CUI__CInterop__CWebViewControl* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CWeb__CUI__CInterop__CWebViewControl* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CWeb__CUI__CInterop__CWebViewControl* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* First)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CWeb__CUI__CInterop__CWebViewControl* This,
        __x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CUI__CInterop__CWebViewControl** result);

        END_INTERFACE
    } __x_ABI_C__FIIterable_1___x_ABI_CWindows__CWeb__CUI__CInterop__CWebViewControlVtbl;

    interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CWeb__CUI__CInterop__CWebViewControl
    {
        CONST_VTBL struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CWeb__CUI__CInterop__CWebViewControlVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CWeb__CUI__CInterop__CWebViewControl_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CUI__CInterop__CWebViewControl_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CUI__CInterop__CWebViewControl_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CUI__CInterop__CWebViewControl __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CUI__CInterop__CWebViewControl;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CUI__CInterop__CWebViewControl;

    typedef struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CUI__CInterop__CWebViewControlVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CUI__CInterop__CWebViewControl* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CUI__CInterop__CWebViewControl* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CUI__CInterop__CWebViewControl* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CUI__CInterop__CWebViewControl* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CUI__CInterop__CWebViewControl* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CUI__CInterop__CWebViewControl* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CUI__CInterop__CWebViewControl* This,
        UINT32 index,
        __x_ABI_CWindows_CWeb_CUI_CIWebViewControl** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CUI__CInterop__CWebViewControl* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CUI__CInterop__CWebViewControl* This,
        __x_ABI_CWindows_CWeb_CUI_CIWebViewControl* value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CUI__CInterop__CWebViewControl* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        __x_ABI_CWindows_CWeb_CUI_CIWebViewControl** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CUI__CInterop__CWebViewControlVtbl;

    interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CUI__CInterop__CWebViewControl
    {
        CONST_VTBL struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CUI__CInterop__CWebViewControlVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CUI__CInterop__CWebViewControl_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CWeb__CUI__CInterop__CWebViewControl_IInspectable_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CWeb__CUI__CInterop__CWebViewControl_IInspectable_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CWeb__CUI__CInterop__CWebViewControl_IInspectable __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CWeb__CUI__CInterop__CWebViewControl_IInspectable;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CWeb__CUI__CInterop__CWebViewControl_IInspectable;

    typedef struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CWeb__CUI__CInterop__CWebViewControl_IInspectableVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CWeb__CUI__CInterop__CWebViewControl_IInspectable* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CWeb__CUI__CInterop__CWebViewControl_IInspectable* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CWeb__CUI__CInterop__CWebViewControl_IInspectable* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CWeb__CUI__CInterop__CWebViewControl_IInspectable* This,
        __x_ABI_CWindows_CWeb_CUI_CIWebViewControl* sender,
        IInspectable* args);

        END_INTERFACE
    } __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CWeb__CUI__CInterop__CWebViewControl_IInspectableVtbl;

    interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CWeb__CUI__CInterop__CWebViewControl_IInspectable
    {
        CONST_VTBL struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CWeb__CUI__CInterop__CWebViewControl_IInspectableVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CWeb__CUI__CInterop__CWebViewControl_IInspectable_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CWeb__CUI__CInterop__CWebViewControl___x_ABI_CWindows__CWeb__CUI__CInterop__CWebViewControlAcceleratorKeyPressedEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CWeb__CUI__CInterop__CWebViewControl___x_ABI_CWindows__CWeb__CUI__CInterop__CWebViewControlAcceleratorKeyPressedEventArgs_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CWeb__CUI__CInterop__CWebViewControl___x_ABI_CWindows__CWeb__CUI__CInterop__CWebViewControlAcceleratorKeyPressedEventArgs __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CWeb__CUI__CInterop__CWebViewControl___x_ABI_CWindows__CWeb__CUI__CInterop__CWebViewControlAcceleratorKeyPressedEventArgs;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CWeb__CUI__CInterop__CWebViewControl___x_ABI_CWindows__CWeb__CUI__CInterop__CWebViewControlAcceleratorKeyPressedEventArgs;

    typedef struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CWeb__CUI__CInterop__CWebViewControl___x_ABI_CWindows__CWeb__CUI__CInterop__CWebViewControlAcceleratorKeyPressedEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CWeb__CUI__CInterop__CWebViewControl___x_ABI_CWindows__CWeb__CUI__CInterop__CWebViewControlAcceleratorKeyPressedEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CWeb__CUI__CInterop__CWebViewControl___x_ABI_CWindows__CWeb__CUI__CInterop__CWebViewControlAcceleratorKeyPressedEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CWeb__CUI__CInterop__CWebViewControl___x_ABI_CWindows__CWeb__CUI__CInterop__CWebViewControlAcceleratorKeyPressedEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CWeb__CUI__CInterop__CWebViewControl___x_ABI_CWindows__CWeb__CUI__CInterop__CWebViewControlAcceleratorKeyPressedEventArgs* This,
        __x_ABI_CWindows_CWeb_CUI_CIWebViewControl* sender,
        __x_ABI_CWindows_CWeb_CUI_CInterop_CIWebViewControlAcceleratorKeyPressedEventArgs* args);

        END_INTERFACE
    } __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CWeb__CUI__CInterop__CWebViewControl___x_ABI_CWindows__CWeb__CUI__CInterop__CWebViewControlAcceleratorKeyPressedEventArgsVtbl;

    interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CWeb__CUI__CInterop__CWebViewControl___x_ABI_CWindows__CWeb__CUI__CInterop__CWebViewControlAcceleratorKeyPressedEventArgs
    {
        CONST_VTBL struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CWeb__CUI__CInterop__CWebViewControl___x_ABI_CWindows__CWeb__CUI__CInterop__CWebViewControlAcceleratorKeyPressedEventArgsVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CWeb__CUI__CInterop__CWebViewControl___x_ABI_CWindows__CWeb__CUI__CInterop__CWebViewControlAcceleratorKeyPressedEventArgs_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CWeb__CUI__CInterop__CWebViewControl___x_ABI_CWindows__CWeb__CUI__CInterop__CWebViewControlMoveFocusRequestedEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CWeb__CUI__CInterop__CWebViewControl___x_ABI_CWindows__CWeb__CUI__CInterop__CWebViewControlMoveFocusRequestedEventArgs_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CWeb__CUI__CInterop__CWebViewControl___x_ABI_CWindows__CWeb__CUI__CInterop__CWebViewControlMoveFocusRequestedEventArgs __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CWeb__CUI__CInterop__CWebViewControl___x_ABI_CWindows__CWeb__CUI__CInterop__CWebViewControlMoveFocusRequestedEventArgs;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CWeb__CUI__CInterop__CWebViewControl___x_ABI_CWindows__CWeb__CUI__CInterop__CWebViewControlMoveFocusRequestedEventArgs;

    typedef struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CWeb__CUI__CInterop__CWebViewControl___x_ABI_CWindows__CWeb__CUI__CInterop__CWebViewControlMoveFocusRequestedEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CWeb__CUI__CInterop__CWebViewControl___x_ABI_CWindows__CWeb__CUI__CInterop__CWebViewControlMoveFocusRequestedEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CWeb__CUI__CInterop__CWebViewControl___x_ABI_CWindows__CWeb__CUI__CInterop__CWebViewControlMoveFocusRequestedEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CWeb__CUI__CInterop__CWebViewControl___x_ABI_CWindows__CWeb__CUI__CInterop__CWebViewControlMoveFocusRequestedEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CWeb__CUI__CInterop__CWebViewControl___x_ABI_CWindows__CWeb__CUI__CInterop__CWebViewControlMoveFocusRequestedEventArgs* This,
        __x_ABI_CWindows_CWeb_CUI_CIWebViewControl* sender,
        __x_ABI_CWindows_CWeb_CUI_CInterop_CIWebViewControlMoveFocusRequestedEventArgs* args);

        END_INTERFACE
    } __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CWeb__CUI__CInterop__CWebViewControl___x_ABI_CWindows__CWeb__CUI__CInterop__CWebViewControlMoveFocusRequestedEventArgsVtbl;

    interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CWeb__CUI__CInterop__CWebViewControl___x_ABI_CWindows__CWeb__CUI__CInterop__CWebViewControlMoveFocusRequestedEventArgs
    {
        CONST_VTBL struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CWeb__CUI__CInterop__CWebViewControl___x_ABI_CWindows__CWeb__CUI__CInterop__CWebViewControlMoveFocusRequestedEventArgsVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CWeb__CUI__CInterop__CWebViewControl___x_ABI_CWindows__CWeb__CUI__CInterop__CWebViewControlMoveFocusRequestedEventArgs_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CWeb__CUI__CInterop__CWebViewControlProcess_IInspectable_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CWeb__CUI__CInterop__CWebViewControlProcess_IInspectable_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CWeb__CUI__CInterop__CWebViewControlProcess_IInspectable __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CWeb__CUI__CInterop__CWebViewControlProcess_IInspectable;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CWeb__CUI__CInterop__CWebViewControlProcess_IInspectable;

    typedef struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CWeb__CUI__CInterop__CWebViewControlProcess_IInspectableVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CWeb__CUI__CInterop__CWebViewControlProcess_IInspectable* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CWeb__CUI__CInterop__CWebViewControlProcess_IInspectable* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CWeb__CUI__CInterop__CWebViewControlProcess_IInspectable* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CWeb__CUI__CInterop__CWebViewControlProcess_IInspectable* This,
        __x_ABI_CWindows_CWeb_CUI_CInterop_CIWebViewControlProcess* sender,
        IInspectable* args);

        END_INTERFACE
    } __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CWeb__CUI__CInterop__CWebViewControlProcess_IInspectableVtbl;

    interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CWeb__CUI__CInterop__CWebViewControlProcess_IInspectable
    {
        CONST_VTBL struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CWeb__CUI__CInterop__CWebViewControlProcess_IInspectableVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CWeb__CUI__CInterop__CWebViewControlProcess_IInspectable_INTERFACE_DEFINED__
    
typedef enum __x_ABI_CWindows_CFoundation_CAsyncStatus __x_ABI_CWindows_CFoundation_CAsyncStatus;

#ifndef ____x_ABI_CWindows_CFoundation_CIAsyncInfo_FWD_DEFINED__
#define ____x_ABI_CWindows_CFoundation_CIAsyncInfo_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CFoundation_CIAsyncInfo __x_ABI_CWindows_CFoundation_CIAsyncInfo;

#endif // ____x_ABI_CWindows_CFoundation_CIAsyncInfo_FWD_DEFINED__

typedef struct __x_ABI_CWindows_CFoundation_CRect __x_ABI_CWindows_CFoundation_CRect;

typedef enum __x_ABI_CWindows_CSystem_CVirtualKey __x_ABI_CWindows_CSystem_CVirtualKey;

typedef enum __x_ABI_CWindows_CUI_CCore_CCoreAcceleratorKeyEventType __x_ABI_CWindows_CUI_CCore_CCoreAcceleratorKeyEventType;

typedef struct __x_ABI_CWindows_CUI_CCore_CCorePhysicalKeyStatus __x_ABI_CWindows_CUI_CCore_CCorePhysicalKeyStatus;

#ifndef ____x_ABI_CWindows_CWeb_CUI_CIWebViewControl2_FWD_DEFINED__
#define ____x_ABI_CWindows_CWeb_CUI_CIWebViewControl2_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CWeb_CUI_CIWebViewControl2 __x_ABI_CWindows_CWeb_CUI_CIWebViewControl2;

#endif // ____x_ABI_CWindows_CWeb_CUI_CIWebViewControl2_FWD_DEFINED__

typedef enum __x_ABI_CWindows_CWeb_CUI_CInterop_CWebViewControlAcceleratorKeyRoutingStage __x_ABI_CWindows_CWeb_CUI_CInterop_CWebViewControlAcceleratorKeyRoutingStage;

typedef enum __x_ABI_CWindows_CWeb_CUI_CInterop_CWebViewControlMoveFocusReason __x_ABI_CWindows_CWeb_CUI_CInterop_CWebViewControlMoveFocusReason;

typedef enum __x_ABI_CWindows_CWeb_CUI_CInterop_CWebViewControlProcessCapabilityState __x_ABI_CWindows_CWeb_CUI_CInterop_CWebViewControlProcessCapabilityState;

enum __x_ABI_CWindows_CWeb_CUI_CInterop_CWebViewControlAcceleratorKeyRoutingStage
    {
        __x_ABI_CWindows_CWeb_CUI_CInterop_CWebViewControlAcceleratorKeyRoutingStage_Tunneling = 0,
    __x_ABI_CWindows_CWeb_CUI_CInterop_CWebViewControlAcceleratorKeyRoutingStage_Bubbling = 1,
};

enum __x_ABI_CWindows_CWeb_CUI_CInterop_CWebViewControlMoveFocusReason
    {
        __x_ABI_CWindows_CWeb_CUI_CInterop_CWebViewControlMoveFocusReason_Programmatic = 0,
    __x_ABI_CWindows_CWeb_CUI_CInterop_CWebViewControlMoveFocusReason_Next = 1,
    __x_ABI_CWindows_CWeb_CUI_CInterop_CWebViewControlMoveFocusReason_Previous = 2,
};

enum __x_ABI_CWindows_CWeb_CUI_CInterop_CWebViewControlProcessCapabilityState
    {
        __x_ABI_CWindows_CWeb_CUI_CInterop_CWebViewControlProcessCapabilityState_Default = 0,
    __x_ABI_CWindows_CWeb_CUI_CInterop_CWebViewControlProcessCapabilityState_Disabled = 1,
    __x_ABI_CWindows_CWeb_CUI_CInterop_CWebViewControlProcessCapabilityState_Enabled = 2,
};

#if !defined(____x_ABI_CWindows_CWeb_CUI_CInterop_CIWebViewControlAcceleratorKeyPressedEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CWeb_CUI_CInterop_CIWebViewControlAcceleratorKeyPressedEventArgs_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CWeb_CUI_CInterop_CIWebViewControlAcceleratorKeyPressedEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CWeb_CUI_CInterop_CIWebViewControlAcceleratorKeyPressedEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CWeb_CUI_CInterop_CIWebViewControlAcceleratorKeyPressedEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CWeb_CUI_CInterop_CIWebViewControlAcceleratorKeyPressedEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CWeb_CUI_CInterop_CIWebViewControlAcceleratorKeyPressedEventArgs* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CWeb_CUI_CInterop_CIWebViewControlAcceleratorKeyPressedEventArgs* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CWeb_CUI_CInterop_CIWebViewControlAcceleratorKeyPressedEventArgs* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_EventType)(__x_ABI_CWindows_CWeb_CUI_CInterop_CIWebViewControlAcceleratorKeyPressedEventArgs* This,
        enum __x_ABI_CWindows_CUI_CCore_CCoreAcceleratorKeyEventType* value);
    HRESULT (STDMETHODCALLTYPE* get_VirtualKey)(__x_ABI_CWindows_CWeb_CUI_CInterop_CIWebViewControlAcceleratorKeyPressedEventArgs* This,
        enum __x_ABI_CWindows_CSystem_CVirtualKey* value);
    HRESULT (STDMETHODCALLTYPE* get_KeyStatus)(__x_ABI_CWindows_CWeb_CUI_CInterop_CIWebViewControlAcceleratorKeyPressedEventArgs* This,
        struct __x_ABI_CWindows_CUI_CCore_CCorePhysicalKeyStatus* value);
    HRESULT (STDMETHODCALLTYPE* get_RoutingStage)(__x_ABI_CWindows_CWeb_CUI_CInterop_CIWebViewControlAcceleratorKeyPressedEventArgs* This,
        enum __x_ABI_CWindows_CWeb_CUI_CInterop_CWebViewControlAcceleratorKeyRoutingStage* value);
    HRESULT (STDMETHODCALLTYPE* get_Handled)(__x_ABI_CWindows_CWeb_CUI_CInterop_CIWebViewControlAcceleratorKeyPressedEventArgs* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* put_Handled)(__x_ABI_CWindows_CWeb_CUI_CInterop_CIWebViewControlAcceleratorKeyPressedEventArgs* This,
        boolean value);

        END_INTERFACE
    } __x_ABI_CWindows_CWeb_CUI_CInterop_CIWebViewControlAcceleratorKeyPressedEventArgsVtbl;

    interface __x_ABI_CWindows_CWeb_CUI_CInterop_CIWebViewControlAcceleratorKeyPressedEventArgs
    {
        CONST_VTBL struct __x_ABI_CWindows_CWeb_CUI_CInterop_CIWebViewControlAcceleratorKeyPressedEventArgsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CWeb_CUI_CInterop_CIWebViewControlAcceleratorKeyPressedEventArgs;
#endif /* !defined(____x_ABI_CWindows_CWeb_CUI_CInterop_CIWebViewControlAcceleratorKeyPressedEventArgs_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CWeb_CUI_CInterop_CIWebViewControlMoveFocusRequestedEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CWeb_CUI_CInterop_CIWebViewControlMoveFocusRequestedEventArgs_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CWeb_CUI_CInterop_CIWebViewControlMoveFocusRequestedEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CWeb_CUI_CInterop_CIWebViewControlMoveFocusRequestedEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CWeb_CUI_CInterop_CIWebViewControlMoveFocusRequestedEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CWeb_CUI_CInterop_CIWebViewControlMoveFocusRequestedEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CWeb_CUI_CInterop_CIWebViewControlMoveFocusRequestedEventArgs* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CWeb_CUI_CInterop_CIWebViewControlMoveFocusRequestedEventArgs* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CWeb_CUI_CInterop_CIWebViewControlMoveFocusRequestedEventArgs* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Reason)(__x_ABI_CWindows_CWeb_CUI_CInterop_CIWebViewControlMoveFocusRequestedEventArgs* This,
        enum __x_ABI_CWindows_CWeb_CUI_CInterop_CWebViewControlMoveFocusReason* value);

        END_INTERFACE
    } __x_ABI_CWindows_CWeb_CUI_CInterop_CIWebViewControlMoveFocusRequestedEventArgsVtbl;

    interface __x_ABI_CWindows_CWeb_CUI_CInterop_CIWebViewControlMoveFocusRequestedEventArgs
    {
        CONST_VTBL struct __x_ABI_CWindows_CWeb_CUI_CInterop_CIWebViewControlMoveFocusRequestedEventArgsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CWeb_CUI_CInterop_CIWebViewControlMoveFocusRequestedEventArgs;
#endif /* !defined(____x_ABI_CWindows_CWeb_CUI_CInterop_CIWebViewControlMoveFocusRequestedEventArgs_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CWeb_CUI_CInterop_CIWebViewControlProcess_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CWeb_CUI_CInterop_CIWebViewControlProcess_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CWeb_CUI_CInterop_CIWebViewControlProcessVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CWeb_CUI_CInterop_CIWebViewControlProcess* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CWeb_CUI_CInterop_CIWebViewControlProcess* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CWeb_CUI_CInterop_CIWebViewControlProcess* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CWeb_CUI_CInterop_CIWebViewControlProcess* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CWeb_CUI_CInterop_CIWebViewControlProcess* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CWeb_CUI_CInterop_CIWebViewControlProcess* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_ProcessId)(__x_ABI_CWindows_CWeb_CUI_CInterop_CIWebViewControlProcess* This,
        UINT32* value);
    HRESULT (STDMETHODCALLTYPE* get_EnterpriseId)(__x_ABI_CWindows_CWeb_CUI_CInterop_CIWebViewControlProcess* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_IsPrivateNetworkClientServerCapabilityEnabled)(__x_ABI_CWindows_CWeb_CUI_CInterop_CIWebViewControlProcess* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* CreateWebViewControlAsync)(__x_ABI_CWindows_CWeb_CUI_CInterop_CIWebViewControlProcess* This,
        INT64 hostWindowHandle,
        struct __x_ABI_CWindows_CFoundation_CRect bounds,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CWeb__CUI__CInterop__CWebViewControl** operation);
    HRESULT (STDMETHODCALLTYPE* GetWebViewControls)(__x_ABI_CWindows_CWeb_CUI_CInterop_CIWebViewControlProcess* This,
        __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CUI__CInterop__CWebViewControl** result);
    HRESULT (STDMETHODCALLTYPE* Terminate)(__x_ABI_CWindows_CWeb_CUI_CInterop_CIWebViewControlProcess* This);
    HRESULT (STDMETHODCALLTYPE* add_ProcessExited)(__x_ABI_CWindows_CWeb_CUI_CInterop_CIWebViewControlProcess* This,
        __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CWeb__CUI__CInterop__CWebViewControlProcess_IInspectable* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_ProcessExited)(__x_ABI_CWindows_CWeb_CUI_CInterop_CIWebViewControlProcess* This,
        EventRegistrationToken token);

        END_INTERFACE
    } __x_ABI_CWindows_CWeb_CUI_CInterop_CIWebViewControlProcessVtbl;

    interface __x_ABI_CWindows_CWeb_CUI_CInterop_CIWebViewControlProcess
    {
        CONST_VTBL struct __x_ABI_CWindows_CWeb_CUI_CInterop_CIWebViewControlProcessVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CWeb_CUI_CInterop_CIWebViewControlProcess;
#endif /* !defined(____x_ABI_CWindows_CWeb_CUI_CInterop_CIWebViewControlProcess_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CWeb_CUI_CInterop_CIWebViewControlProcessFactory_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CWeb_CUI_CInterop_CIWebViewControlProcessFactory_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CWeb_CUI_CInterop_CIWebViewControlProcessFactoryVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CWeb_CUI_CInterop_CIWebViewControlProcessFactory* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CWeb_CUI_CInterop_CIWebViewControlProcessFactory* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CWeb_CUI_CInterop_CIWebViewControlProcessFactory* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CWeb_CUI_CInterop_CIWebViewControlProcessFactory* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CWeb_CUI_CInterop_CIWebViewControlProcessFactory* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CWeb_CUI_CInterop_CIWebViewControlProcessFactory* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* CreateWithOptions)(__x_ABI_CWindows_CWeb_CUI_CInterop_CIWebViewControlProcessFactory* This,
        __x_ABI_CWindows_CWeb_CUI_CInterop_CIWebViewControlProcessOptions* processOptions,
        __x_ABI_CWindows_CWeb_CUI_CInterop_CIWebViewControlProcess** result);

        END_INTERFACE
    } __x_ABI_CWindows_CWeb_CUI_CInterop_CIWebViewControlProcessFactoryVtbl;

    interface __x_ABI_CWindows_CWeb_CUI_CInterop_CIWebViewControlProcessFactory
    {
        CONST_VTBL struct __x_ABI_CWindows_CWeb_CUI_CInterop_CIWebViewControlProcessFactoryVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CWeb_CUI_CInterop_CIWebViewControlProcessFactory;
#endif /* !defined(____x_ABI_CWindows_CWeb_CUI_CInterop_CIWebViewControlProcessFactory_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CWeb_CUI_CInterop_CIWebViewControlProcessOptions_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CWeb_CUI_CInterop_CIWebViewControlProcessOptions_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CWeb_CUI_CInterop_CIWebViewControlProcessOptionsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CWeb_CUI_CInterop_CIWebViewControlProcessOptions* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CWeb_CUI_CInterop_CIWebViewControlProcessOptions* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CWeb_CUI_CInterop_CIWebViewControlProcessOptions* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CWeb_CUI_CInterop_CIWebViewControlProcessOptions* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CWeb_CUI_CInterop_CIWebViewControlProcessOptions* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CWeb_CUI_CInterop_CIWebViewControlProcessOptions* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* put_EnterpriseId)(__x_ABI_CWindows_CWeb_CUI_CInterop_CIWebViewControlProcessOptions* This,
        HSTRING value);
    HRESULT (STDMETHODCALLTYPE* get_EnterpriseId)(__x_ABI_CWindows_CWeb_CUI_CInterop_CIWebViewControlProcessOptions* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* put_PrivateNetworkClientServerCapability)(__x_ABI_CWindows_CWeb_CUI_CInterop_CIWebViewControlProcessOptions* This,
        enum __x_ABI_CWindows_CWeb_CUI_CInterop_CWebViewControlProcessCapabilityState value);
    HRESULT (STDMETHODCALLTYPE* get_PrivateNetworkClientServerCapability)(__x_ABI_CWindows_CWeb_CUI_CInterop_CIWebViewControlProcessOptions* This,
        enum __x_ABI_CWindows_CWeb_CUI_CInterop_CWebViewControlProcessCapabilityState* value);

        END_INTERFACE
    } __x_ABI_CWindows_CWeb_CUI_CInterop_CIWebViewControlProcessOptionsVtbl;

    interface __x_ABI_CWindows_CWeb_CUI_CInterop_CIWebViewControlProcessOptions
    {
        CONST_VTBL struct __x_ABI_CWindows_CWeb_CUI_CInterop_CIWebViewControlProcessOptionsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CWeb_CUI_CInterop_CIWebViewControlProcessOptions;
#endif /* !defined(____x_ABI_CWindows_CWeb_CUI_CInterop_CIWebViewControlProcessOptions_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CWeb_CUI_CInterop_CIWebViewControlSite_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CWeb_CUI_CInterop_CIWebViewControlSite_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CWeb_CUI_CInterop_CIWebViewControlSiteVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CWeb_CUI_CInterop_CIWebViewControlSite* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CWeb_CUI_CInterop_CIWebViewControlSite* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CWeb_CUI_CInterop_CIWebViewControlSite* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CWeb_CUI_CInterop_CIWebViewControlSite* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CWeb_CUI_CInterop_CIWebViewControlSite* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CWeb_CUI_CInterop_CIWebViewControlSite* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Process)(__x_ABI_CWindows_CWeb_CUI_CInterop_CIWebViewControlSite* This,
        __x_ABI_CWindows_CWeb_CUI_CInterop_CIWebViewControlProcess** value);
    HRESULT (STDMETHODCALLTYPE* put_Scale)(__x_ABI_CWindows_CWeb_CUI_CInterop_CIWebViewControlSite* This,
        DOUBLE value);
    HRESULT (STDMETHODCALLTYPE* get_Scale)(__x_ABI_CWindows_CWeb_CUI_CInterop_CIWebViewControlSite* This,
        DOUBLE* value);
    HRESULT (STDMETHODCALLTYPE* put_Bounds)(__x_ABI_CWindows_CWeb_CUI_CInterop_CIWebViewControlSite* This,
        struct __x_ABI_CWindows_CFoundation_CRect value);
    HRESULT (STDMETHODCALLTYPE* get_Bounds)(__x_ABI_CWindows_CWeb_CUI_CInterop_CIWebViewControlSite* This,
        struct __x_ABI_CWindows_CFoundation_CRect* value);
    HRESULT (STDMETHODCALLTYPE* put_IsVisible)(__x_ABI_CWindows_CWeb_CUI_CInterop_CIWebViewControlSite* This,
        boolean value);
    HRESULT (STDMETHODCALLTYPE* get_IsVisible)(__x_ABI_CWindows_CWeb_CUI_CInterop_CIWebViewControlSite* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* Close)(__x_ABI_CWindows_CWeb_CUI_CInterop_CIWebViewControlSite* This);
    HRESULT (STDMETHODCALLTYPE* MoveFocus)(__x_ABI_CWindows_CWeb_CUI_CInterop_CIWebViewControlSite* This,
        enum __x_ABI_CWindows_CWeb_CUI_CInterop_CWebViewControlMoveFocusReason reason);
    HRESULT (STDMETHODCALLTYPE* add_MoveFocusRequested)(__x_ABI_CWindows_CWeb_CUI_CInterop_CIWebViewControlSite* This,
        __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CWeb__CUI__CInterop__CWebViewControl___x_ABI_CWindows__CWeb__CUI__CInterop__CWebViewControlMoveFocusRequestedEventArgs* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_MoveFocusRequested)(__x_ABI_CWindows_CWeb_CUI_CInterop_CIWebViewControlSite* This,
        EventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* add_AcceleratorKeyPressed)(__x_ABI_CWindows_CWeb_CUI_CInterop_CIWebViewControlSite* This,
        __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CWeb__CUI__CInterop__CWebViewControl___x_ABI_CWindows__CWeb__CUI__CInterop__CWebViewControlAcceleratorKeyPressedEventArgs* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_AcceleratorKeyPressed)(__x_ABI_CWindows_CWeb_CUI_CInterop_CIWebViewControlSite* This,
        EventRegistrationToken token);

        END_INTERFACE
    } __x_ABI_CWindows_CWeb_CUI_CInterop_CIWebViewControlSiteVtbl;

    interface __x_ABI_CWindows_CWeb_CUI_CInterop_CIWebViewControlSite
    {
        CONST_VTBL struct __x_ABI_CWindows_CWeb_CUI_CInterop_CIWebViewControlSiteVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CWeb_CUI_CInterop_CIWebViewControlSite;
#endif /* !defined(____x_ABI_CWindows_CWeb_CUI_CInterop_CIWebViewControlSite_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CWeb_CUI_CInterop_CIWebViewControlSite2_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CWeb_CUI_CInterop_CIWebViewControlSite2_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CWeb_CUI_CInterop_CIWebViewControlSite2Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CWeb_CUI_CInterop_CIWebViewControlSite2* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CWeb_CUI_CInterop_CIWebViewControlSite2* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CWeb_CUI_CInterop_CIWebViewControlSite2* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CWeb_CUI_CInterop_CIWebViewControlSite2* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CWeb_CUI_CInterop_CIWebViewControlSite2* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CWeb_CUI_CInterop_CIWebViewControlSite2* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* add_GotFocus)(__x_ABI_CWindows_CWeb_CUI_CInterop_CIWebViewControlSite2* This,
        __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CWeb__CUI__CInterop__CWebViewControl_IInspectable* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_GotFocus)(__x_ABI_CWindows_CWeb_CUI_CInterop_CIWebViewControlSite2* This,
        EventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* add_LostFocus)(__x_ABI_CWindows_CWeb_CUI_CInterop_CIWebViewControlSite2* This,
        __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CWeb__CUI__CInterop__CWebViewControl_IInspectable* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_LostFocus)(__x_ABI_CWindows_CWeb_CUI_CInterop_CIWebViewControlSite2* This,
        EventRegistrationToken token);

        END_INTERFACE
    } __x_ABI_CWindows_CWeb_CUI_CInterop_CIWebViewControlSite2Vtbl;

    interface __x_ABI_CWindows_CWeb_CUI_CInterop_CIWebViewControlSite2
    {
        CONST_VTBL struct __x_ABI_CWindows_CWeb_CUI_CInterop_CIWebViewControlSite2Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CWeb_CUI_CInterop_CIWebViewControlSite2;
#endif /* !defined(____x_ABI_CWindows_CWeb_CUI_CInterop_CIWebViewControlSite2_INTERFACE_DEFINED__) */
    

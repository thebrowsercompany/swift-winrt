// WARNING: Please don't edit this file. It was generated by Swift/WinRT v0.0.1

#pragma once
// Header files for imported files
#include <inspectable.h>
#include <EventToken.h>
#include <windowscontracts.h>
#include "Windows.Foundation.h"
#include "Windows.Storage.Streams.h"

/* Forward Declarations */
#ifndef ____x_ABI_CWindows_CStorage_CCompression_CICompressor_FWD_DEFINED__
#define ____x_ABI_CWindows_CStorage_CCompression_CICompressor_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CStorage_CCompression_CICompressor __x_ABI_CWindows_CStorage_CCompression_CICompressor;

#endif // ____x_ABI_CWindows_CStorage_CCompression_CICompressor_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CStorage_CCompression_CICompressorFactory_FWD_DEFINED__
#define ____x_ABI_CWindows_CStorage_CCompression_CICompressorFactory_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CStorage_CCompression_CICompressorFactory __x_ABI_CWindows_CStorage_CCompression_CICompressorFactory;

#endif // ____x_ABI_CWindows_CStorage_CCompression_CICompressorFactory_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CStorage_CCompression_CIDecompressor_FWD_DEFINED__
#define ____x_ABI_CWindows_CStorage_CCompression_CIDecompressor_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CStorage_CCompression_CIDecompressor __x_ABI_CWindows_CStorage_CCompression_CIDecompressor;

#endif // ____x_ABI_CWindows_CStorage_CCompression_CIDecompressor_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CStorage_CCompression_CIDecompressorFactory_FWD_DEFINED__
#define ____x_ABI_CWindows_CStorage_CCompression_CIDecompressorFactory_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CStorage_CCompression_CIDecompressorFactory __x_ABI_CWindows_CStorage_CCompression_CIDecompressorFactory;

#endif // ____x_ABI_CWindows_CStorage_CCompression_CIDecompressorFactory_FWD_DEFINED__

// Parameterized interface forward declarations (C)

// Collection interface definitions

typedef interface __x_ABI_C__FIAsyncOperationCompletedHandler_1_boolean __x_ABI_C__FIAsyncOperationCompletedHandler_1_boolean;

#if !defined(____x_ABI_C__FIAsyncOperation_1_boolean_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperation_1_boolean_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperation_1_boolean __x_ABI_C__FIAsyncOperation_1_boolean;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperation_1_boolean;

    typedef struct __x_ABI_C__FIAsyncOperation_1_booleanVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperation_1_boolean* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperation_1_boolean* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperation_1_boolean* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIAsyncOperation_1_boolean* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIAsyncOperation_1_boolean* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIAsyncOperation_1_boolean* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* put_Completed)(__x_ABI_C__FIAsyncOperation_1_boolean* This,
        __x_ABI_C__FIAsyncOperationCompletedHandler_1_boolean* handler);
    HRESULT (STDMETHODCALLTYPE* get_Completed)(__x_ABI_C__FIAsyncOperation_1_boolean* This,
        __x_ABI_C__FIAsyncOperationCompletedHandler_1_boolean** result);
    HRESULT (STDMETHODCALLTYPE* GetResults)(__x_ABI_C__FIAsyncOperation_1_boolean* This,
        boolean* result);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperation_1_booleanVtbl;

    interface __x_ABI_C__FIAsyncOperation_1_boolean
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperation_1_booleanVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperation_1_boolean_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIAsyncOperationCompletedHandler_1_boolean_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperationCompletedHandler_1_boolean_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperationCompletedHandler_1_boolean __x_ABI_C__FIAsyncOperationCompletedHandler_1_boolean;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperationCompletedHandler_1_boolean;

    typedef struct __x_ABI_C__FIAsyncOperationCompletedHandler_1_booleanVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperationCompletedHandler_1_boolean* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperationCompletedHandler_1_boolean* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperationCompletedHandler_1_boolean* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FIAsyncOperationCompletedHandler_1_boolean* This,
        __x_ABI_C__FIAsyncOperation_1_boolean* asyncInfo,
        enum __x_ABI_CWindows_CFoundation_CAsyncStatus asyncStatus);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperationCompletedHandler_1_booleanVtbl;

    interface __x_ABI_C__FIAsyncOperationCompletedHandler_1_boolean
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperationCompletedHandler_1_booleanVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperationCompletedHandler_1_boolean_INTERFACE_DEFINED__
    
typedef enum __x_ABI_CWindows_CFoundation_CAsyncStatus __x_ABI_CWindows_CFoundation_CAsyncStatus;

#ifndef ____x_ABI_CWindows_CFoundation_CIAsyncInfo_FWD_DEFINED__
#define ____x_ABI_CWindows_CFoundation_CIAsyncInfo_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CFoundation_CIAsyncInfo __x_ABI_CWindows_CFoundation_CIAsyncInfo;

#endif // ____x_ABI_CWindows_CFoundation_CIAsyncInfo_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CFoundation_CIClosable_FWD_DEFINED__
#define ____x_ABI_CWindows_CFoundation_CIClosable_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CFoundation_CIClosable __x_ABI_CWindows_CFoundation_CIClosable;

#endif // ____x_ABI_CWindows_CFoundation_CIClosable_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CStorage_CStreams_CIInputStream_FWD_DEFINED__
#define ____x_ABI_CWindows_CStorage_CStreams_CIInputStream_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CStorage_CStreams_CIInputStream __x_ABI_CWindows_CStorage_CStreams_CIInputStream;

#endif // ____x_ABI_CWindows_CStorage_CStreams_CIInputStream_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CStorage_CStreams_CIOutputStream_FWD_DEFINED__
#define ____x_ABI_CWindows_CStorage_CStreams_CIOutputStream_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CStorage_CStreams_CIOutputStream __x_ABI_CWindows_CStorage_CStreams_CIOutputStream;

#endif // ____x_ABI_CWindows_CStorage_CStreams_CIOutputStream_FWD_DEFINED__

typedef enum __x_ABI_CWindows_CStorage_CCompression_CCompressAlgorithm __x_ABI_CWindows_CStorage_CCompression_CCompressAlgorithm;

enum __x_ABI_CWindows_CStorage_CCompression_CCompressAlgorithm
    {
        __x_ABI_CWindows_CStorage_CCompression_CCompressAlgorithm_InvalidAlgorithm = 0,
    __x_ABI_CWindows_CStorage_CCompression_CCompressAlgorithm_NullAlgorithm = 1,
    __x_ABI_CWindows_CStorage_CCompression_CCompressAlgorithm_Mszip = 2,
    __x_ABI_CWindows_CStorage_CCompression_CCompressAlgorithm_Xpress = 3,
    __x_ABI_CWindows_CStorage_CCompression_CCompressAlgorithm_XpressHuff = 4,
    __x_ABI_CWindows_CStorage_CCompression_CCompressAlgorithm_Lzms = 5,
};

#if !defined(____x_ABI_CWindows_CStorage_CCompression_CICompressor_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CStorage_CCompression_CICompressor_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CStorage_CCompression_CICompressorVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CStorage_CCompression_CICompressor* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CStorage_CCompression_CICompressor* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CStorage_CCompression_CICompressor* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CStorage_CCompression_CICompressor* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CStorage_CCompression_CICompressor* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CStorage_CCompression_CICompressor* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* FinishAsync)(__x_ABI_CWindows_CStorage_CCompression_CICompressor* This,
        __x_ABI_C__FIAsyncOperation_1_boolean** operation);
    HRESULT (STDMETHODCALLTYPE* DetachStream)(__x_ABI_CWindows_CStorage_CCompression_CICompressor* This,
        __x_ABI_CWindows_CStorage_CStreams_CIOutputStream** stream);

        END_INTERFACE
    } __x_ABI_CWindows_CStorage_CCompression_CICompressorVtbl;

    interface __x_ABI_CWindows_CStorage_CCompression_CICompressor
    {
        CONST_VTBL struct __x_ABI_CWindows_CStorage_CCompression_CICompressorVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CStorage_CCompression_CICompressor;
#endif /* !defined(____x_ABI_CWindows_CStorage_CCompression_CICompressor_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CStorage_CCompression_CICompressorFactory_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CStorage_CCompression_CICompressorFactory_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CStorage_CCompression_CICompressorFactoryVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CStorage_CCompression_CICompressorFactory* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CStorage_CCompression_CICompressorFactory* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CStorage_CCompression_CICompressorFactory* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CStorage_CCompression_CICompressorFactory* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CStorage_CCompression_CICompressorFactory* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CStorage_CCompression_CICompressorFactory* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* CreateCompressor)(__x_ABI_CWindows_CStorage_CCompression_CICompressorFactory* This,
        __x_ABI_CWindows_CStorage_CStreams_CIOutputStream* underlyingStream,
        __x_ABI_CWindows_CStorage_CCompression_CICompressor** createdCompressor);
    HRESULT (STDMETHODCALLTYPE* CreateCompressorEx)(__x_ABI_CWindows_CStorage_CCompression_CICompressorFactory* This,
        __x_ABI_CWindows_CStorage_CStreams_CIOutputStream* underlyingStream,
        enum __x_ABI_CWindows_CStorage_CCompression_CCompressAlgorithm algorithm,
        UINT32 blockSize,
        __x_ABI_CWindows_CStorage_CCompression_CICompressor** createdCompressor);

        END_INTERFACE
    } __x_ABI_CWindows_CStorage_CCompression_CICompressorFactoryVtbl;

    interface __x_ABI_CWindows_CStorage_CCompression_CICompressorFactory
    {
        CONST_VTBL struct __x_ABI_CWindows_CStorage_CCompression_CICompressorFactoryVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CStorage_CCompression_CICompressorFactory;
#endif /* !defined(____x_ABI_CWindows_CStorage_CCompression_CICompressorFactory_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CStorage_CCompression_CIDecompressor_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CStorage_CCompression_CIDecompressor_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CStorage_CCompression_CIDecompressorVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CStorage_CCompression_CIDecompressor* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CStorage_CCompression_CIDecompressor* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CStorage_CCompression_CIDecompressor* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CStorage_CCompression_CIDecompressor* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CStorage_CCompression_CIDecompressor* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CStorage_CCompression_CIDecompressor* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* DetachStream)(__x_ABI_CWindows_CStorage_CCompression_CIDecompressor* This,
        __x_ABI_CWindows_CStorage_CStreams_CIInputStream** stream);

        END_INTERFACE
    } __x_ABI_CWindows_CStorage_CCompression_CIDecompressorVtbl;

    interface __x_ABI_CWindows_CStorage_CCompression_CIDecompressor
    {
        CONST_VTBL struct __x_ABI_CWindows_CStorage_CCompression_CIDecompressorVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CStorage_CCompression_CIDecompressor;
#endif /* !defined(____x_ABI_CWindows_CStorage_CCompression_CIDecompressor_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CStorage_CCompression_CIDecompressorFactory_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CStorage_CCompression_CIDecompressorFactory_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CStorage_CCompression_CIDecompressorFactoryVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CStorage_CCompression_CIDecompressorFactory* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CStorage_CCompression_CIDecompressorFactory* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CStorage_CCompression_CIDecompressorFactory* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CStorage_CCompression_CIDecompressorFactory* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CStorage_CCompression_CIDecompressorFactory* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CStorage_CCompression_CIDecompressorFactory* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* CreateDecompressor)(__x_ABI_CWindows_CStorage_CCompression_CIDecompressorFactory* This,
        __x_ABI_CWindows_CStorage_CStreams_CIInputStream* underlyingStream,
        __x_ABI_CWindows_CStorage_CCompression_CIDecompressor** createdDecompressor);

        END_INTERFACE
    } __x_ABI_CWindows_CStorage_CCompression_CIDecompressorFactoryVtbl;

    interface __x_ABI_CWindows_CStorage_CCompression_CIDecompressorFactory
    {
        CONST_VTBL struct __x_ABI_CWindows_CStorage_CCompression_CIDecompressorFactoryVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CStorage_CCompression_CIDecompressorFactory;
#endif /* !defined(____x_ABI_CWindows_CStorage_CCompression_CIDecompressorFactory_INTERFACE_DEFINED__) */
    

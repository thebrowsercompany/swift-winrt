// WARNING: Please don't edit this file. It was generated by Swift/WinRT v0.0.1

#pragma once
// Header files for imported files
#include <inspectable.h>
#include <EventToken.h>
#include <windowscontracts.h>
#include "Windows.Foundation.h"
#include "Windows.ApplicationModel.h"
#include "Windows.System.h"
#include "Windows.Web.Http.h"
// Importing Collections header
#include "Windows.Foundation.Collections.h"

/* Forward Declarations */
#ifndef ____x_ABI_CWindows_CServices_CStore_CIStoreAcquireLicenseResult_FWD_DEFINED__
#define ____x_ABI_CWindows_CServices_CStore_CIStoreAcquireLicenseResult_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CServices_CStore_CIStoreAcquireLicenseResult __x_ABI_CWindows_CServices_CStore_CIStoreAcquireLicenseResult;

#endif // ____x_ABI_CWindows_CServices_CStore_CIStoreAcquireLicenseResult_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CServices_CStore_CIStoreAppLicense_FWD_DEFINED__
#define ____x_ABI_CWindows_CServices_CStore_CIStoreAppLicense_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CServices_CStore_CIStoreAppLicense __x_ABI_CWindows_CServices_CStore_CIStoreAppLicense;

#endif // ____x_ABI_CWindows_CServices_CStore_CIStoreAppLicense_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CServices_CStore_CIStoreAppLicense2_FWD_DEFINED__
#define ____x_ABI_CWindows_CServices_CStore_CIStoreAppLicense2_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CServices_CStore_CIStoreAppLicense2 __x_ABI_CWindows_CServices_CStore_CIStoreAppLicense2;

#endif // ____x_ABI_CWindows_CServices_CStore_CIStoreAppLicense2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CServices_CStore_CIStoreAvailability_FWD_DEFINED__
#define ____x_ABI_CWindows_CServices_CStore_CIStoreAvailability_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CServices_CStore_CIStoreAvailability __x_ABI_CWindows_CServices_CStore_CIStoreAvailability;

#endif // ____x_ABI_CWindows_CServices_CStore_CIStoreAvailability_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CServices_CStore_CIStoreCanAcquireLicenseResult_FWD_DEFINED__
#define ____x_ABI_CWindows_CServices_CStore_CIStoreCanAcquireLicenseResult_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CServices_CStore_CIStoreCanAcquireLicenseResult __x_ABI_CWindows_CServices_CStore_CIStoreCanAcquireLicenseResult;

#endif // ____x_ABI_CWindows_CServices_CStore_CIStoreCanAcquireLicenseResult_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CServices_CStore_CIStoreCollectionData_FWD_DEFINED__
#define ____x_ABI_CWindows_CServices_CStore_CIStoreCollectionData_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CServices_CStore_CIStoreCollectionData __x_ABI_CWindows_CServices_CStore_CIStoreCollectionData;

#endif // ____x_ABI_CWindows_CServices_CStore_CIStoreCollectionData_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CServices_CStore_CIStoreConsumableResult_FWD_DEFINED__
#define ____x_ABI_CWindows_CServices_CStore_CIStoreConsumableResult_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CServices_CStore_CIStoreConsumableResult __x_ABI_CWindows_CServices_CStore_CIStoreConsumableResult;

#endif // ____x_ABI_CWindows_CServices_CStore_CIStoreConsumableResult_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CServices_CStore_CIStoreContext_FWD_DEFINED__
#define ____x_ABI_CWindows_CServices_CStore_CIStoreContext_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CServices_CStore_CIStoreContext __x_ABI_CWindows_CServices_CStore_CIStoreContext;

#endif // ____x_ABI_CWindows_CServices_CStore_CIStoreContext_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CServices_CStore_CIStoreContext2_FWD_DEFINED__
#define ____x_ABI_CWindows_CServices_CStore_CIStoreContext2_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CServices_CStore_CIStoreContext2 __x_ABI_CWindows_CServices_CStore_CIStoreContext2;

#endif // ____x_ABI_CWindows_CServices_CStore_CIStoreContext2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CServices_CStore_CIStoreContext3_FWD_DEFINED__
#define ____x_ABI_CWindows_CServices_CStore_CIStoreContext3_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CServices_CStore_CIStoreContext3 __x_ABI_CWindows_CServices_CStore_CIStoreContext3;

#endif // ____x_ABI_CWindows_CServices_CStore_CIStoreContext3_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CServices_CStore_CIStoreContext4_FWD_DEFINED__
#define ____x_ABI_CWindows_CServices_CStore_CIStoreContext4_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CServices_CStore_CIStoreContext4 __x_ABI_CWindows_CServices_CStore_CIStoreContext4;

#endif // ____x_ABI_CWindows_CServices_CStore_CIStoreContext4_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CServices_CStore_CIStoreContextStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CServices_CStore_CIStoreContextStatics_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CServices_CStore_CIStoreContextStatics __x_ABI_CWindows_CServices_CStore_CIStoreContextStatics;

#endif // ____x_ABI_CWindows_CServices_CStore_CIStoreContextStatics_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CServices_CStore_CIStoreImage_FWD_DEFINED__
#define ____x_ABI_CWindows_CServices_CStore_CIStoreImage_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CServices_CStore_CIStoreImage __x_ABI_CWindows_CServices_CStore_CIStoreImage;

#endif // ____x_ABI_CWindows_CServices_CStore_CIStoreImage_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CServices_CStore_CIStoreLicense_FWD_DEFINED__
#define ____x_ABI_CWindows_CServices_CStore_CIStoreLicense_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CServices_CStore_CIStoreLicense __x_ABI_CWindows_CServices_CStore_CIStoreLicense;

#endif // ____x_ABI_CWindows_CServices_CStore_CIStoreLicense_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CServices_CStore_CIStorePackageInstallOptions_FWD_DEFINED__
#define ____x_ABI_CWindows_CServices_CStore_CIStorePackageInstallOptions_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CServices_CStore_CIStorePackageInstallOptions __x_ABI_CWindows_CServices_CStore_CIStorePackageInstallOptions;

#endif // ____x_ABI_CWindows_CServices_CStore_CIStorePackageInstallOptions_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CServices_CStore_CIStorePackageLicense_FWD_DEFINED__
#define ____x_ABI_CWindows_CServices_CStore_CIStorePackageLicense_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CServices_CStore_CIStorePackageLicense __x_ABI_CWindows_CServices_CStore_CIStorePackageLicense;

#endif // ____x_ABI_CWindows_CServices_CStore_CIStorePackageLicense_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CServices_CStore_CIStorePackageUpdate_FWD_DEFINED__
#define ____x_ABI_CWindows_CServices_CStore_CIStorePackageUpdate_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CServices_CStore_CIStorePackageUpdate __x_ABI_CWindows_CServices_CStore_CIStorePackageUpdate;

#endif // ____x_ABI_CWindows_CServices_CStore_CIStorePackageUpdate_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CServices_CStore_CIStorePackageUpdateResult_FWD_DEFINED__
#define ____x_ABI_CWindows_CServices_CStore_CIStorePackageUpdateResult_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CServices_CStore_CIStorePackageUpdateResult __x_ABI_CWindows_CServices_CStore_CIStorePackageUpdateResult;

#endif // ____x_ABI_CWindows_CServices_CStore_CIStorePackageUpdateResult_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CServices_CStore_CIStorePackageUpdateResult2_FWD_DEFINED__
#define ____x_ABI_CWindows_CServices_CStore_CIStorePackageUpdateResult2_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CServices_CStore_CIStorePackageUpdateResult2 __x_ABI_CWindows_CServices_CStore_CIStorePackageUpdateResult2;

#endif // ____x_ABI_CWindows_CServices_CStore_CIStorePackageUpdateResult2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CServices_CStore_CIStorePrice_FWD_DEFINED__
#define ____x_ABI_CWindows_CServices_CStore_CIStorePrice_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CServices_CStore_CIStorePrice __x_ABI_CWindows_CServices_CStore_CIStorePrice;

#endif // ____x_ABI_CWindows_CServices_CStore_CIStorePrice_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CServices_CStore_CIStoreProduct_FWD_DEFINED__
#define ____x_ABI_CWindows_CServices_CStore_CIStoreProduct_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CServices_CStore_CIStoreProduct __x_ABI_CWindows_CServices_CStore_CIStoreProduct;

#endif // ____x_ABI_CWindows_CServices_CStore_CIStoreProduct_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CServices_CStore_CIStoreProductOptions_FWD_DEFINED__
#define ____x_ABI_CWindows_CServices_CStore_CIStoreProductOptions_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CServices_CStore_CIStoreProductOptions __x_ABI_CWindows_CServices_CStore_CIStoreProductOptions;

#endif // ____x_ABI_CWindows_CServices_CStore_CIStoreProductOptions_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CServices_CStore_CIStoreProductPagedQueryResult_FWD_DEFINED__
#define ____x_ABI_CWindows_CServices_CStore_CIStoreProductPagedQueryResult_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CServices_CStore_CIStoreProductPagedQueryResult __x_ABI_CWindows_CServices_CStore_CIStoreProductPagedQueryResult;

#endif // ____x_ABI_CWindows_CServices_CStore_CIStoreProductPagedQueryResult_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CServices_CStore_CIStoreProductQueryResult_FWD_DEFINED__
#define ____x_ABI_CWindows_CServices_CStore_CIStoreProductQueryResult_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CServices_CStore_CIStoreProductQueryResult __x_ABI_CWindows_CServices_CStore_CIStoreProductQueryResult;

#endif // ____x_ABI_CWindows_CServices_CStore_CIStoreProductQueryResult_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CServices_CStore_CIStoreProductResult_FWD_DEFINED__
#define ____x_ABI_CWindows_CServices_CStore_CIStoreProductResult_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CServices_CStore_CIStoreProductResult __x_ABI_CWindows_CServices_CStore_CIStoreProductResult;

#endif // ____x_ABI_CWindows_CServices_CStore_CIStoreProductResult_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CServices_CStore_CIStorePurchaseProperties_FWD_DEFINED__
#define ____x_ABI_CWindows_CServices_CStore_CIStorePurchaseProperties_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CServices_CStore_CIStorePurchaseProperties __x_ABI_CWindows_CServices_CStore_CIStorePurchaseProperties;

#endif // ____x_ABI_CWindows_CServices_CStore_CIStorePurchaseProperties_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CServices_CStore_CIStorePurchasePropertiesFactory_FWD_DEFINED__
#define ____x_ABI_CWindows_CServices_CStore_CIStorePurchasePropertiesFactory_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CServices_CStore_CIStorePurchasePropertiesFactory __x_ABI_CWindows_CServices_CStore_CIStorePurchasePropertiesFactory;

#endif // ____x_ABI_CWindows_CServices_CStore_CIStorePurchasePropertiesFactory_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CServices_CStore_CIStorePurchaseResult_FWD_DEFINED__
#define ____x_ABI_CWindows_CServices_CStore_CIStorePurchaseResult_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CServices_CStore_CIStorePurchaseResult __x_ABI_CWindows_CServices_CStore_CIStorePurchaseResult;

#endif // ____x_ABI_CWindows_CServices_CStore_CIStorePurchaseResult_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CServices_CStore_CIStoreQueueItem_FWD_DEFINED__
#define ____x_ABI_CWindows_CServices_CStore_CIStoreQueueItem_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CServices_CStore_CIStoreQueueItem __x_ABI_CWindows_CServices_CStore_CIStoreQueueItem;

#endif // ____x_ABI_CWindows_CServices_CStore_CIStoreQueueItem_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CServices_CStore_CIStoreQueueItem2_FWD_DEFINED__
#define ____x_ABI_CWindows_CServices_CStore_CIStoreQueueItem2_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CServices_CStore_CIStoreQueueItem2 __x_ABI_CWindows_CServices_CStore_CIStoreQueueItem2;

#endif // ____x_ABI_CWindows_CServices_CStore_CIStoreQueueItem2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CServices_CStore_CIStoreQueueItemCompletedEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CServices_CStore_CIStoreQueueItemCompletedEventArgs_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CServices_CStore_CIStoreQueueItemCompletedEventArgs __x_ABI_CWindows_CServices_CStore_CIStoreQueueItemCompletedEventArgs;

#endif // ____x_ABI_CWindows_CServices_CStore_CIStoreQueueItemCompletedEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CServices_CStore_CIStoreQueueItemStatus_FWD_DEFINED__
#define ____x_ABI_CWindows_CServices_CStore_CIStoreQueueItemStatus_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CServices_CStore_CIStoreQueueItemStatus __x_ABI_CWindows_CServices_CStore_CIStoreQueueItemStatus;

#endif // ____x_ABI_CWindows_CServices_CStore_CIStoreQueueItemStatus_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CServices_CStore_CIStoreRateAndReviewResult_FWD_DEFINED__
#define ____x_ABI_CWindows_CServices_CStore_CIStoreRateAndReviewResult_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CServices_CStore_CIStoreRateAndReviewResult __x_ABI_CWindows_CServices_CStore_CIStoreRateAndReviewResult;

#endif // ____x_ABI_CWindows_CServices_CStore_CIStoreRateAndReviewResult_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CServices_CStore_CIStoreRequestHelperStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CServices_CStore_CIStoreRequestHelperStatics_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CServices_CStore_CIStoreRequestHelperStatics __x_ABI_CWindows_CServices_CStore_CIStoreRequestHelperStatics;

#endif // ____x_ABI_CWindows_CServices_CStore_CIStoreRequestHelperStatics_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CServices_CStore_CIStoreSendRequestResult_FWD_DEFINED__
#define ____x_ABI_CWindows_CServices_CStore_CIStoreSendRequestResult_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CServices_CStore_CIStoreSendRequestResult __x_ABI_CWindows_CServices_CStore_CIStoreSendRequestResult;

#endif // ____x_ABI_CWindows_CServices_CStore_CIStoreSendRequestResult_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CServices_CStore_CIStoreSendRequestResult2_FWD_DEFINED__
#define ____x_ABI_CWindows_CServices_CStore_CIStoreSendRequestResult2_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CServices_CStore_CIStoreSendRequestResult2 __x_ABI_CWindows_CServices_CStore_CIStoreSendRequestResult2;

#endif // ____x_ABI_CWindows_CServices_CStore_CIStoreSendRequestResult2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CServices_CStore_CIStoreSku_FWD_DEFINED__
#define ____x_ABI_CWindows_CServices_CStore_CIStoreSku_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CServices_CStore_CIStoreSku __x_ABI_CWindows_CServices_CStore_CIStoreSku;

#endif // ____x_ABI_CWindows_CServices_CStore_CIStoreSku_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CServices_CStore_CIStoreSubscriptionInfo_FWD_DEFINED__
#define ____x_ABI_CWindows_CServices_CStore_CIStoreSubscriptionInfo_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CServices_CStore_CIStoreSubscriptionInfo __x_ABI_CWindows_CServices_CStore_CIStoreSubscriptionInfo;

#endif // ____x_ABI_CWindows_CServices_CStore_CIStoreSubscriptionInfo_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CServices_CStore_CIStoreUninstallStorePackageResult_FWD_DEFINED__
#define ____x_ABI_CWindows_CServices_CStore_CIStoreUninstallStorePackageResult_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CServices_CStore_CIStoreUninstallStorePackageResult __x_ABI_CWindows_CServices_CStore_CIStoreUninstallStorePackageResult;

#endif // ____x_ABI_CWindows_CServices_CStore_CIStoreUninstallStorePackageResult_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CServices_CStore_CIStoreVideo_FWD_DEFINED__
#define ____x_ABI_CWindows_CServices_CStore_CIStoreVideo_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CServices_CStore_CIStoreVideo __x_ABI_CWindows_CServices_CStore_CIStoreVideo;

#endif // ____x_ABI_CWindows_CServices_CStore_CIStoreVideo_FWD_DEFINED__

// Parameterized interface forward declarations (C)

// Collection interface definitions

typedef interface __x_ABI_C__FIAsyncOperationCompletedHandler_1_boolean __x_ABI_C__FIAsyncOperationCompletedHandler_1_boolean;

#if !defined(____x_ABI_C__FIAsyncOperation_1_boolean_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperation_1_boolean_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperation_1_boolean __x_ABI_C__FIAsyncOperation_1_boolean;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperation_1_boolean;

    typedef struct __x_ABI_C__FIAsyncOperation_1_booleanVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperation_1_boolean* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperation_1_boolean* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperation_1_boolean* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIAsyncOperation_1_boolean* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIAsyncOperation_1_boolean* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIAsyncOperation_1_boolean* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* put_Completed)(__x_ABI_C__FIAsyncOperation_1_boolean* This,
        __x_ABI_C__FIAsyncOperationCompletedHandler_1_boolean* handler);
    HRESULT (STDMETHODCALLTYPE* get_Completed)(__x_ABI_C__FIAsyncOperation_1_boolean* This,
        __x_ABI_C__FIAsyncOperationCompletedHandler_1_boolean** result);
    HRESULT (STDMETHODCALLTYPE* GetResults)(__x_ABI_C__FIAsyncOperation_1_boolean* This,
        boolean* result);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperation_1_booleanVtbl;

    interface __x_ABI_C__FIAsyncOperation_1_boolean
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperation_1_booleanVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperation_1_boolean_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIAsyncOperationCompletedHandler_1_boolean_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperationCompletedHandler_1_boolean_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperationCompletedHandler_1_boolean __x_ABI_C__FIAsyncOperationCompletedHandler_1_boolean;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperationCompletedHandler_1_boolean;

    typedef struct __x_ABI_C__FIAsyncOperationCompletedHandler_1_booleanVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperationCompletedHandler_1_boolean* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperationCompletedHandler_1_boolean* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperationCompletedHandler_1_boolean* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FIAsyncOperationCompletedHandler_1_boolean* This,
        __x_ABI_C__FIAsyncOperation_1_boolean* asyncInfo,
        enum __x_ABI_CWindows_CFoundation_CAsyncStatus asyncStatus);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperationCompletedHandler_1_booleanVtbl;

    interface __x_ABI_C__FIAsyncOperationCompletedHandler_1_boolean
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperationCompletedHandler_1_booleanVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperationCompletedHandler_1_boolean_INTERFACE_DEFINED__
    
typedef interface __x_ABI_C__FIAsyncOperationCompletedHandler_1_HSTRING __x_ABI_C__FIAsyncOperationCompletedHandler_1_HSTRING;

#if !defined(____x_ABI_C__FIAsyncOperation_1_HSTRING_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperation_1_HSTRING_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperation_1_HSTRING __x_ABI_C__FIAsyncOperation_1_HSTRING;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperation_1_HSTRING;

    typedef struct __x_ABI_C__FIAsyncOperation_1_HSTRINGVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperation_1_HSTRING* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperation_1_HSTRING* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperation_1_HSTRING* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIAsyncOperation_1_HSTRING* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIAsyncOperation_1_HSTRING* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIAsyncOperation_1_HSTRING* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* put_Completed)(__x_ABI_C__FIAsyncOperation_1_HSTRING* This,
        __x_ABI_C__FIAsyncOperationCompletedHandler_1_HSTRING* handler);
    HRESULT (STDMETHODCALLTYPE* get_Completed)(__x_ABI_C__FIAsyncOperation_1_HSTRING* This,
        __x_ABI_C__FIAsyncOperationCompletedHandler_1_HSTRING** result);
    HRESULT (STDMETHODCALLTYPE* GetResults)(__x_ABI_C__FIAsyncOperation_1_HSTRING* This,
        HSTRING* result);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperation_1_HSTRINGVtbl;

    interface __x_ABI_C__FIAsyncOperation_1_HSTRING
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperation_1_HSTRINGVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperation_1_HSTRING_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIAsyncOperationCompletedHandler_1_HSTRING_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperationCompletedHandler_1_HSTRING_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperationCompletedHandler_1_HSTRING __x_ABI_C__FIAsyncOperationCompletedHandler_1_HSTRING;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperationCompletedHandler_1_HSTRING;

    typedef struct __x_ABI_C__FIAsyncOperationCompletedHandler_1_HSTRINGVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperationCompletedHandler_1_HSTRING* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperationCompletedHandler_1_HSTRING* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperationCompletedHandler_1_HSTRING* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FIAsyncOperationCompletedHandler_1_HSTRING* This,
        __x_ABI_C__FIAsyncOperation_1_HSTRING* asyncInfo,
        enum __x_ABI_CWindows_CFoundation_CAsyncStatus asyncStatus);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperationCompletedHandler_1_HSTRINGVtbl;

    interface __x_ABI_C__FIAsyncOperationCompletedHandler_1_HSTRING
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperationCompletedHandler_1_HSTRINGVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperationCompletedHandler_1_HSTRING_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CStore__CStorePackageUpdate_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CStore__CStorePackageUpdate_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CStore__CStorePackageUpdate __x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CStore__CStorePackageUpdate;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CStore__CStorePackageUpdate;

    typedef struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CStore__CStorePackageUpdateVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CStore__CStorePackageUpdate* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CStore__CStorePackageUpdate* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CStore__CStorePackageUpdate* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CStore__CStorePackageUpdate* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CStore__CStorePackageUpdate* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CStore__CStorePackageUpdate* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Current)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CStore__CStorePackageUpdate* This,
        __x_ABI_CWindows_CServices_CStore_CIStorePackageUpdate** result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CStore__CStorePackageUpdate* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CStore__CStorePackageUpdate* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CStore__CStorePackageUpdate* This,
        UINT32 itemsLength,
        __x_ABI_CWindows_CServices_CStore_CIStorePackageUpdate** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CStore__CStorePackageUpdateVtbl;

    interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CStore__CStorePackageUpdate
    {
        CONST_VTBL struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CStore__CStorePackageUpdateVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CStore__CStorePackageUpdate_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CStore__CStorePackageUpdate_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CStore__CStorePackageUpdate_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CStore__CStorePackageUpdate __x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CStore__CStorePackageUpdate;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CStore__CStorePackageUpdate;

    typedef struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CStore__CStorePackageUpdateVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CStore__CStorePackageUpdate* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CStore__CStorePackageUpdate* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CStore__CStorePackageUpdate* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CStore__CStorePackageUpdate* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CStore__CStorePackageUpdate* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CStore__CStorePackageUpdate* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* First)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CStore__CStorePackageUpdate* This,
        __x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CStore__CStorePackageUpdate** result);

        END_INTERFACE
    } __x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CStore__CStorePackageUpdateVtbl;

    interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CStore__CStorePackageUpdate
    {
        CONST_VTBL struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CStore__CStorePackageUpdateVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CStore__CStorePackageUpdate_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CStore__CStorePackageUpdate_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CStore__CStorePackageUpdate_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CStore__CStorePackageUpdate __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CStore__CStorePackageUpdate;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CStore__CStorePackageUpdate;

    typedef struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CStore__CStorePackageUpdateVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CStore__CStorePackageUpdate* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CStore__CStorePackageUpdate* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CStore__CStorePackageUpdate* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CStore__CStorePackageUpdate* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CStore__CStorePackageUpdate* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CStore__CStorePackageUpdate* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CStore__CStorePackageUpdate* This,
        UINT32 index,
        __x_ABI_CWindows_CServices_CStore_CIStorePackageUpdate** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CStore__CStorePackageUpdate* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CStore__CStorePackageUpdate* This,
        __x_ABI_CWindows_CServices_CStore_CIStorePackageUpdate* value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CStore__CStorePackageUpdate* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        __x_ABI_CWindows_CServices_CStore_CIStorePackageUpdate** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CStore__CStorePackageUpdateVtbl;

    interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CStore__CStorePackageUpdate
    {
        CONST_VTBL struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CStore__CStorePackageUpdateVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CStore__CStorePackageUpdate_INTERFACE_DEFINED__
    
typedef interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CStore__CStorePackageUpdate __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CStore__CStorePackageUpdate;

#if !defined(____x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CStore__CStorePackageUpdate_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CStore__CStorePackageUpdate_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CStore__CStorePackageUpdate __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CStore__CStorePackageUpdate;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CStore__CStorePackageUpdate;

    typedef struct __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CStore__CStorePackageUpdateVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CStore__CStorePackageUpdate* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CStore__CStorePackageUpdate* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CStore__CStorePackageUpdate* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CStore__CStorePackageUpdate* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CStore__CStorePackageUpdate* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CStore__CStorePackageUpdate* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* put_Completed)(__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CStore__CStorePackageUpdate* This,
        __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CStore__CStorePackageUpdate* handler);
    HRESULT (STDMETHODCALLTYPE* get_Completed)(__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CStore__CStorePackageUpdate* This,
        __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CStore__CStorePackageUpdate** result);
    HRESULT (STDMETHODCALLTYPE* GetResults)(__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CStore__CStorePackageUpdate* This,
        __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CStore__CStorePackageUpdate** result);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CStore__CStorePackageUpdateVtbl;

    interface __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CStore__CStorePackageUpdate
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CStore__CStorePackageUpdateVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CStore__CStorePackageUpdate_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CStore__CStorePackageUpdate_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CStore__CStorePackageUpdate_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CStore__CStorePackageUpdate __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CStore__CStorePackageUpdate;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CStore__CStorePackageUpdate;

    typedef struct __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CStore__CStorePackageUpdateVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CStore__CStorePackageUpdate* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CStore__CStorePackageUpdate* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CStore__CStorePackageUpdate* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CStore__CStorePackageUpdate* This,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CStore__CStorePackageUpdate* asyncInfo,
        enum __x_ABI_CWindows_CFoundation_CAsyncStatus asyncStatus);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CStore__CStorePackageUpdateVtbl;

    interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CStore__CStorePackageUpdate
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CStore__CStorePackageUpdateVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CStore__CStorePackageUpdate_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CStore__CStoreQueueItem_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CStore__CStoreQueueItem_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CStore__CStoreQueueItem __x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CStore__CStoreQueueItem;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CStore__CStoreQueueItem;

    typedef struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CStore__CStoreQueueItemVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CStore__CStoreQueueItem* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CStore__CStoreQueueItem* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CStore__CStoreQueueItem* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CStore__CStoreQueueItem* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CStore__CStoreQueueItem* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CStore__CStoreQueueItem* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Current)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CStore__CStoreQueueItem* This,
        __x_ABI_CWindows_CServices_CStore_CIStoreQueueItem** result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CStore__CStoreQueueItem* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CStore__CStoreQueueItem* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CStore__CStoreQueueItem* This,
        UINT32 itemsLength,
        __x_ABI_CWindows_CServices_CStore_CIStoreQueueItem** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CStore__CStoreQueueItemVtbl;

    interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CStore__CStoreQueueItem
    {
        CONST_VTBL struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CStore__CStoreQueueItemVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CStore__CStoreQueueItem_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CStore__CStoreQueueItem_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CStore__CStoreQueueItem_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CStore__CStoreQueueItem __x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CStore__CStoreQueueItem;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CStore__CStoreQueueItem;

    typedef struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CStore__CStoreQueueItemVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CStore__CStoreQueueItem* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CStore__CStoreQueueItem* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CStore__CStoreQueueItem* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CStore__CStoreQueueItem* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CStore__CStoreQueueItem* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CStore__CStoreQueueItem* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* First)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CStore__CStoreQueueItem* This,
        __x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CStore__CStoreQueueItem** result);

        END_INTERFACE
    } __x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CStore__CStoreQueueItemVtbl;

    interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CStore__CStoreQueueItem
    {
        CONST_VTBL struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CStore__CStoreQueueItemVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CStore__CStoreQueueItem_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CStore__CStoreQueueItem_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CStore__CStoreQueueItem_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CStore__CStoreQueueItem __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CStore__CStoreQueueItem;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CStore__CStoreQueueItem;

    typedef struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CStore__CStoreQueueItemVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CStore__CStoreQueueItem* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CStore__CStoreQueueItem* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CStore__CStoreQueueItem* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CStore__CStoreQueueItem* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CStore__CStoreQueueItem* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CStore__CStoreQueueItem* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CStore__CStoreQueueItem* This,
        UINT32 index,
        __x_ABI_CWindows_CServices_CStore_CIStoreQueueItem** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CStore__CStoreQueueItem* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CStore__CStoreQueueItem* This,
        __x_ABI_CWindows_CServices_CStore_CIStoreQueueItem* value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CStore__CStoreQueueItem* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        __x_ABI_CWindows_CServices_CStore_CIStoreQueueItem** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CStore__CStoreQueueItemVtbl;

    interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CStore__CStoreQueueItem
    {
        CONST_VTBL struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CStore__CStoreQueueItemVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CStore__CStoreQueueItem_INTERFACE_DEFINED__
    
typedef interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CStore__CStoreQueueItem __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CStore__CStoreQueueItem;

#if !defined(____x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CStore__CStoreQueueItem_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CStore__CStoreQueueItem_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CStore__CStoreQueueItem __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CStore__CStoreQueueItem;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CStore__CStoreQueueItem;

    typedef struct __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CStore__CStoreQueueItemVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CStore__CStoreQueueItem* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CStore__CStoreQueueItem* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CStore__CStoreQueueItem* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CStore__CStoreQueueItem* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CStore__CStoreQueueItem* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CStore__CStoreQueueItem* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* put_Completed)(__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CStore__CStoreQueueItem* This,
        __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CStore__CStoreQueueItem* handler);
    HRESULT (STDMETHODCALLTYPE* get_Completed)(__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CStore__CStoreQueueItem* This,
        __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CStore__CStoreQueueItem** result);
    HRESULT (STDMETHODCALLTYPE* GetResults)(__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CStore__CStoreQueueItem* This,
        __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CStore__CStoreQueueItem** result);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CStore__CStoreQueueItemVtbl;

    interface __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CStore__CStoreQueueItem
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CStore__CStoreQueueItemVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CStore__CStoreQueueItem_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CStore__CStoreQueueItem_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CStore__CStoreQueueItem_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CStore__CStoreQueueItem __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CStore__CStoreQueueItem;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CStore__CStoreQueueItem;

    typedef struct __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CStore__CStoreQueueItemVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CStore__CStoreQueueItem* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CStore__CStoreQueueItem* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CStore__CStoreQueueItem* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CStore__CStoreQueueItem* This,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CStore__CStoreQueueItem* asyncInfo,
        enum __x_ABI_CWindows_CFoundation_CAsyncStatus asyncStatus);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CStore__CStoreQueueItemVtbl;

    interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CStore__CStoreQueueItem
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CStore__CStoreQueueItemVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CStore__CStoreQueueItem_INTERFACE_DEFINED__
    
typedef interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CServices__CStore__CStoreAcquireLicenseResult __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CServices__CStore__CStoreAcquireLicenseResult;

#if !defined(____x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CStore__CStoreAcquireLicenseResult_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CStore__CStoreAcquireLicenseResult_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CStore__CStoreAcquireLicenseResult __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CStore__CStoreAcquireLicenseResult;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CStore__CStoreAcquireLicenseResult;

    typedef struct __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CStore__CStoreAcquireLicenseResultVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CStore__CStoreAcquireLicenseResult* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CStore__CStoreAcquireLicenseResult* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CStore__CStoreAcquireLicenseResult* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CStore__CStoreAcquireLicenseResult* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CStore__CStoreAcquireLicenseResult* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CStore__CStoreAcquireLicenseResult* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* put_Completed)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CStore__CStoreAcquireLicenseResult* This,
        __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CServices__CStore__CStoreAcquireLicenseResult* handler);
    HRESULT (STDMETHODCALLTYPE* get_Completed)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CStore__CStoreAcquireLicenseResult* This,
        __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CServices__CStore__CStoreAcquireLicenseResult** result);
    HRESULT (STDMETHODCALLTYPE* GetResults)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CStore__CStoreAcquireLicenseResult* This,
        __x_ABI_CWindows_CServices_CStore_CIStoreAcquireLicenseResult** result);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CStore__CStoreAcquireLicenseResultVtbl;

    interface __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CStore__CStoreAcquireLicenseResult
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CStore__CStoreAcquireLicenseResultVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CStore__CStoreAcquireLicenseResult_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CServices__CStore__CStoreAcquireLicenseResult_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CServices__CStore__CStoreAcquireLicenseResult_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CServices__CStore__CStoreAcquireLicenseResult __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CServices__CStore__CStoreAcquireLicenseResult;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CServices__CStore__CStoreAcquireLicenseResult;

    typedef struct __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CServices__CStore__CStoreAcquireLicenseResultVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CServices__CStore__CStoreAcquireLicenseResult* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CServices__CStore__CStoreAcquireLicenseResult* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CServices__CStore__CStoreAcquireLicenseResult* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CServices__CStore__CStoreAcquireLicenseResult* This,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CStore__CStoreAcquireLicenseResult* asyncInfo,
        enum __x_ABI_CWindows_CFoundation_CAsyncStatus asyncStatus);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CServices__CStore__CStoreAcquireLicenseResultVtbl;

    interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CServices__CStore__CStoreAcquireLicenseResult
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CServices__CStore__CStoreAcquireLicenseResultVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CServices__CStore__CStoreAcquireLicenseResult_INTERFACE_DEFINED__
    
typedef interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CServices__CStore__CStoreAppLicense __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CServices__CStore__CStoreAppLicense;

#if !defined(____x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CStore__CStoreAppLicense_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CStore__CStoreAppLicense_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CStore__CStoreAppLicense __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CStore__CStoreAppLicense;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CStore__CStoreAppLicense;

    typedef struct __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CStore__CStoreAppLicenseVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CStore__CStoreAppLicense* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CStore__CStoreAppLicense* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CStore__CStoreAppLicense* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CStore__CStoreAppLicense* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CStore__CStoreAppLicense* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CStore__CStoreAppLicense* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* put_Completed)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CStore__CStoreAppLicense* This,
        __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CServices__CStore__CStoreAppLicense* handler);
    HRESULT (STDMETHODCALLTYPE* get_Completed)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CStore__CStoreAppLicense* This,
        __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CServices__CStore__CStoreAppLicense** result);
    HRESULT (STDMETHODCALLTYPE* GetResults)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CStore__CStoreAppLicense* This,
        __x_ABI_CWindows_CServices_CStore_CIStoreAppLicense** result);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CStore__CStoreAppLicenseVtbl;

    interface __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CStore__CStoreAppLicense
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CStore__CStoreAppLicenseVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CStore__CStoreAppLicense_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CServices__CStore__CStoreAppLicense_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CServices__CStore__CStoreAppLicense_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CServices__CStore__CStoreAppLicense __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CServices__CStore__CStoreAppLicense;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CServices__CStore__CStoreAppLicense;

    typedef struct __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CServices__CStore__CStoreAppLicenseVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CServices__CStore__CStoreAppLicense* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CServices__CStore__CStoreAppLicense* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CServices__CStore__CStoreAppLicense* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CServices__CStore__CStoreAppLicense* This,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CStore__CStoreAppLicense* asyncInfo,
        enum __x_ABI_CWindows_CFoundation_CAsyncStatus asyncStatus);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CServices__CStore__CStoreAppLicenseVtbl;

    interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CServices__CStore__CStoreAppLicense
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CServices__CStore__CStoreAppLicenseVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CServices__CStore__CStoreAppLicense_INTERFACE_DEFINED__
    
typedef interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CServices__CStore__CStoreCanAcquireLicenseResult __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CServices__CStore__CStoreCanAcquireLicenseResult;

#if !defined(____x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CStore__CStoreCanAcquireLicenseResult_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CStore__CStoreCanAcquireLicenseResult_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CStore__CStoreCanAcquireLicenseResult __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CStore__CStoreCanAcquireLicenseResult;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CStore__CStoreCanAcquireLicenseResult;

    typedef struct __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CStore__CStoreCanAcquireLicenseResultVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CStore__CStoreCanAcquireLicenseResult* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CStore__CStoreCanAcquireLicenseResult* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CStore__CStoreCanAcquireLicenseResult* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CStore__CStoreCanAcquireLicenseResult* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CStore__CStoreCanAcquireLicenseResult* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CStore__CStoreCanAcquireLicenseResult* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* put_Completed)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CStore__CStoreCanAcquireLicenseResult* This,
        __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CServices__CStore__CStoreCanAcquireLicenseResult* handler);
    HRESULT (STDMETHODCALLTYPE* get_Completed)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CStore__CStoreCanAcquireLicenseResult* This,
        __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CServices__CStore__CStoreCanAcquireLicenseResult** result);
    HRESULT (STDMETHODCALLTYPE* GetResults)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CStore__CStoreCanAcquireLicenseResult* This,
        __x_ABI_CWindows_CServices_CStore_CIStoreCanAcquireLicenseResult** result);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CStore__CStoreCanAcquireLicenseResultVtbl;

    interface __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CStore__CStoreCanAcquireLicenseResult
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CStore__CStoreCanAcquireLicenseResultVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CStore__CStoreCanAcquireLicenseResult_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CServices__CStore__CStoreCanAcquireLicenseResult_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CServices__CStore__CStoreCanAcquireLicenseResult_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CServices__CStore__CStoreCanAcquireLicenseResult __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CServices__CStore__CStoreCanAcquireLicenseResult;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CServices__CStore__CStoreCanAcquireLicenseResult;

    typedef struct __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CServices__CStore__CStoreCanAcquireLicenseResultVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CServices__CStore__CStoreCanAcquireLicenseResult* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CServices__CStore__CStoreCanAcquireLicenseResult* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CServices__CStore__CStoreCanAcquireLicenseResult* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CServices__CStore__CStoreCanAcquireLicenseResult* This,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CStore__CStoreCanAcquireLicenseResult* asyncInfo,
        enum __x_ABI_CWindows_CFoundation_CAsyncStatus asyncStatus);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CServices__CStore__CStoreCanAcquireLicenseResultVtbl;

    interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CServices__CStore__CStoreCanAcquireLicenseResult
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CServices__CStore__CStoreCanAcquireLicenseResultVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CServices__CStore__CStoreCanAcquireLicenseResult_INTERFACE_DEFINED__
    
typedef interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CServices__CStore__CStoreConsumableResult __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CServices__CStore__CStoreConsumableResult;

#if !defined(____x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CStore__CStoreConsumableResult_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CStore__CStoreConsumableResult_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CStore__CStoreConsumableResult __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CStore__CStoreConsumableResult;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CStore__CStoreConsumableResult;

    typedef struct __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CStore__CStoreConsumableResultVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CStore__CStoreConsumableResult* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CStore__CStoreConsumableResult* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CStore__CStoreConsumableResult* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CStore__CStoreConsumableResult* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CStore__CStoreConsumableResult* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CStore__CStoreConsumableResult* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* put_Completed)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CStore__CStoreConsumableResult* This,
        __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CServices__CStore__CStoreConsumableResult* handler);
    HRESULT (STDMETHODCALLTYPE* get_Completed)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CStore__CStoreConsumableResult* This,
        __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CServices__CStore__CStoreConsumableResult** result);
    HRESULT (STDMETHODCALLTYPE* GetResults)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CStore__CStoreConsumableResult* This,
        __x_ABI_CWindows_CServices_CStore_CIStoreConsumableResult** result);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CStore__CStoreConsumableResultVtbl;

    interface __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CStore__CStoreConsumableResult
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CStore__CStoreConsumableResultVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CStore__CStoreConsumableResult_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CServices__CStore__CStoreConsumableResult_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CServices__CStore__CStoreConsumableResult_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CServices__CStore__CStoreConsumableResult __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CServices__CStore__CStoreConsumableResult;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CServices__CStore__CStoreConsumableResult;

    typedef struct __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CServices__CStore__CStoreConsumableResultVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CServices__CStore__CStoreConsumableResult* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CServices__CStore__CStoreConsumableResult* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CServices__CStore__CStoreConsumableResult* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CServices__CStore__CStoreConsumableResult* This,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CStore__CStoreConsumableResult* asyncInfo,
        enum __x_ABI_CWindows_CFoundation_CAsyncStatus asyncStatus);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CServices__CStore__CStoreConsumableResultVtbl;

    interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CServices__CStore__CStoreConsumableResult
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CServices__CStore__CStoreConsumableResultVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CServices__CStore__CStoreConsumableResult_INTERFACE_DEFINED__
    
typedef interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CServices__CStore__CStoreProductPagedQueryResult __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CServices__CStore__CStoreProductPagedQueryResult;

#if !defined(____x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CStore__CStoreProductPagedQueryResult_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CStore__CStoreProductPagedQueryResult_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CStore__CStoreProductPagedQueryResult __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CStore__CStoreProductPagedQueryResult;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CStore__CStoreProductPagedQueryResult;

    typedef struct __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CStore__CStoreProductPagedQueryResultVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CStore__CStoreProductPagedQueryResult* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CStore__CStoreProductPagedQueryResult* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CStore__CStoreProductPagedQueryResult* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CStore__CStoreProductPagedQueryResult* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CStore__CStoreProductPagedQueryResult* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CStore__CStoreProductPagedQueryResult* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* put_Completed)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CStore__CStoreProductPagedQueryResult* This,
        __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CServices__CStore__CStoreProductPagedQueryResult* handler);
    HRESULT (STDMETHODCALLTYPE* get_Completed)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CStore__CStoreProductPagedQueryResult* This,
        __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CServices__CStore__CStoreProductPagedQueryResult** result);
    HRESULT (STDMETHODCALLTYPE* GetResults)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CStore__CStoreProductPagedQueryResult* This,
        __x_ABI_CWindows_CServices_CStore_CIStoreProductPagedQueryResult** result);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CStore__CStoreProductPagedQueryResultVtbl;

    interface __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CStore__CStoreProductPagedQueryResult
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CStore__CStoreProductPagedQueryResultVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CStore__CStoreProductPagedQueryResult_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CServices__CStore__CStoreProductPagedQueryResult_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CServices__CStore__CStoreProductPagedQueryResult_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CServices__CStore__CStoreProductPagedQueryResult __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CServices__CStore__CStoreProductPagedQueryResult;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CServices__CStore__CStoreProductPagedQueryResult;

    typedef struct __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CServices__CStore__CStoreProductPagedQueryResultVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CServices__CStore__CStoreProductPagedQueryResult* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CServices__CStore__CStoreProductPagedQueryResult* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CServices__CStore__CStoreProductPagedQueryResult* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CServices__CStore__CStoreProductPagedQueryResult* This,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CStore__CStoreProductPagedQueryResult* asyncInfo,
        enum __x_ABI_CWindows_CFoundation_CAsyncStatus asyncStatus);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CServices__CStore__CStoreProductPagedQueryResultVtbl;

    interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CServices__CStore__CStoreProductPagedQueryResult
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CServices__CStore__CStoreProductPagedQueryResultVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CServices__CStore__CStoreProductPagedQueryResult_INTERFACE_DEFINED__
    
typedef interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CServices__CStore__CStoreProductQueryResult __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CServices__CStore__CStoreProductQueryResult;

#if !defined(____x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CStore__CStoreProductQueryResult_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CStore__CStoreProductQueryResult_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CStore__CStoreProductQueryResult __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CStore__CStoreProductQueryResult;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CStore__CStoreProductQueryResult;

    typedef struct __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CStore__CStoreProductQueryResultVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CStore__CStoreProductQueryResult* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CStore__CStoreProductQueryResult* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CStore__CStoreProductQueryResult* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CStore__CStoreProductQueryResult* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CStore__CStoreProductQueryResult* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CStore__CStoreProductQueryResult* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* put_Completed)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CStore__CStoreProductQueryResult* This,
        __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CServices__CStore__CStoreProductQueryResult* handler);
    HRESULT (STDMETHODCALLTYPE* get_Completed)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CStore__CStoreProductQueryResult* This,
        __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CServices__CStore__CStoreProductQueryResult** result);
    HRESULT (STDMETHODCALLTYPE* GetResults)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CStore__CStoreProductQueryResult* This,
        __x_ABI_CWindows_CServices_CStore_CIStoreProductQueryResult** result);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CStore__CStoreProductQueryResultVtbl;

    interface __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CStore__CStoreProductQueryResult
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CStore__CStoreProductQueryResultVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CStore__CStoreProductQueryResult_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CServices__CStore__CStoreProductQueryResult_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CServices__CStore__CStoreProductQueryResult_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CServices__CStore__CStoreProductQueryResult __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CServices__CStore__CStoreProductQueryResult;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CServices__CStore__CStoreProductQueryResult;

    typedef struct __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CServices__CStore__CStoreProductQueryResultVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CServices__CStore__CStoreProductQueryResult* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CServices__CStore__CStoreProductQueryResult* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CServices__CStore__CStoreProductQueryResult* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CServices__CStore__CStoreProductQueryResult* This,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CStore__CStoreProductQueryResult* asyncInfo,
        enum __x_ABI_CWindows_CFoundation_CAsyncStatus asyncStatus);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CServices__CStore__CStoreProductQueryResultVtbl;

    interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CServices__CStore__CStoreProductQueryResult
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CServices__CStore__CStoreProductQueryResultVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CServices__CStore__CStoreProductQueryResult_INTERFACE_DEFINED__
    
typedef interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CServices__CStore__CStoreProductResult __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CServices__CStore__CStoreProductResult;

#if !defined(____x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CStore__CStoreProductResult_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CStore__CStoreProductResult_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CStore__CStoreProductResult __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CStore__CStoreProductResult;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CStore__CStoreProductResult;

    typedef struct __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CStore__CStoreProductResultVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CStore__CStoreProductResult* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CStore__CStoreProductResult* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CStore__CStoreProductResult* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CStore__CStoreProductResult* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CStore__CStoreProductResult* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CStore__CStoreProductResult* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* put_Completed)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CStore__CStoreProductResult* This,
        __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CServices__CStore__CStoreProductResult* handler);
    HRESULT (STDMETHODCALLTYPE* get_Completed)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CStore__CStoreProductResult* This,
        __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CServices__CStore__CStoreProductResult** result);
    HRESULT (STDMETHODCALLTYPE* GetResults)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CStore__CStoreProductResult* This,
        __x_ABI_CWindows_CServices_CStore_CIStoreProductResult** result);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CStore__CStoreProductResultVtbl;

    interface __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CStore__CStoreProductResult
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CStore__CStoreProductResultVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CStore__CStoreProductResult_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CServices__CStore__CStoreProductResult_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CServices__CStore__CStoreProductResult_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CServices__CStore__CStoreProductResult __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CServices__CStore__CStoreProductResult;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CServices__CStore__CStoreProductResult;

    typedef struct __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CServices__CStore__CStoreProductResultVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CServices__CStore__CStoreProductResult* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CServices__CStore__CStoreProductResult* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CServices__CStore__CStoreProductResult* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CServices__CStore__CStoreProductResult* This,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CStore__CStoreProductResult* asyncInfo,
        enum __x_ABI_CWindows_CFoundation_CAsyncStatus asyncStatus);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CServices__CStore__CStoreProductResultVtbl;

    interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CServices__CStore__CStoreProductResult
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CServices__CStore__CStoreProductResultVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CServices__CStore__CStoreProductResult_INTERFACE_DEFINED__
    
typedef interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CServices__CStore__CStorePurchaseResult __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CServices__CStore__CStorePurchaseResult;

#if !defined(____x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CStore__CStorePurchaseResult_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CStore__CStorePurchaseResult_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CStore__CStorePurchaseResult __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CStore__CStorePurchaseResult;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CStore__CStorePurchaseResult;

    typedef struct __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CStore__CStorePurchaseResultVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CStore__CStorePurchaseResult* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CStore__CStorePurchaseResult* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CStore__CStorePurchaseResult* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CStore__CStorePurchaseResult* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CStore__CStorePurchaseResult* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CStore__CStorePurchaseResult* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* put_Completed)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CStore__CStorePurchaseResult* This,
        __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CServices__CStore__CStorePurchaseResult* handler);
    HRESULT (STDMETHODCALLTYPE* get_Completed)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CStore__CStorePurchaseResult* This,
        __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CServices__CStore__CStorePurchaseResult** result);
    HRESULT (STDMETHODCALLTYPE* GetResults)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CStore__CStorePurchaseResult* This,
        __x_ABI_CWindows_CServices_CStore_CIStorePurchaseResult** result);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CStore__CStorePurchaseResultVtbl;

    interface __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CStore__CStorePurchaseResult
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CStore__CStorePurchaseResultVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CStore__CStorePurchaseResult_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CServices__CStore__CStorePurchaseResult_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CServices__CStore__CStorePurchaseResult_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CServices__CStore__CStorePurchaseResult __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CServices__CStore__CStorePurchaseResult;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CServices__CStore__CStorePurchaseResult;

    typedef struct __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CServices__CStore__CStorePurchaseResultVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CServices__CStore__CStorePurchaseResult* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CServices__CStore__CStorePurchaseResult* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CServices__CStore__CStorePurchaseResult* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CServices__CStore__CStorePurchaseResult* This,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CStore__CStorePurchaseResult* asyncInfo,
        enum __x_ABI_CWindows_CFoundation_CAsyncStatus asyncStatus);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CServices__CStore__CStorePurchaseResultVtbl;

    interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CServices__CStore__CStorePurchaseResult
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CServices__CStore__CStorePurchaseResultVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CServices__CStore__CStorePurchaseResult_INTERFACE_DEFINED__
    
typedef interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CServices__CStore__CStoreRateAndReviewResult __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CServices__CStore__CStoreRateAndReviewResult;

#if !defined(____x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CStore__CStoreRateAndReviewResult_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CStore__CStoreRateAndReviewResult_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CStore__CStoreRateAndReviewResult __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CStore__CStoreRateAndReviewResult;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CStore__CStoreRateAndReviewResult;

    typedef struct __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CStore__CStoreRateAndReviewResultVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CStore__CStoreRateAndReviewResult* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CStore__CStoreRateAndReviewResult* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CStore__CStoreRateAndReviewResult* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CStore__CStoreRateAndReviewResult* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CStore__CStoreRateAndReviewResult* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CStore__CStoreRateAndReviewResult* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* put_Completed)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CStore__CStoreRateAndReviewResult* This,
        __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CServices__CStore__CStoreRateAndReviewResult* handler);
    HRESULT (STDMETHODCALLTYPE* get_Completed)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CStore__CStoreRateAndReviewResult* This,
        __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CServices__CStore__CStoreRateAndReviewResult** result);
    HRESULT (STDMETHODCALLTYPE* GetResults)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CStore__CStoreRateAndReviewResult* This,
        __x_ABI_CWindows_CServices_CStore_CIStoreRateAndReviewResult** result);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CStore__CStoreRateAndReviewResultVtbl;

    interface __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CStore__CStoreRateAndReviewResult
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CStore__CStoreRateAndReviewResultVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CStore__CStoreRateAndReviewResult_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CServices__CStore__CStoreRateAndReviewResult_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CServices__CStore__CStoreRateAndReviewResult_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CServices__CStore__CStoreRateAndReviewResult __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CServices__CStore__CStoreRateAndReviewResult;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CServices__CStore__CStoreRateAndReviewResult;

    typedef struct __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CServices__CStore__CStoreRateAndReviewResultVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CServices__CStore__CStoreRateAndReviewResult* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CServices__CStore__CStoreRateAndReviewResult* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CServices__CStore__CStoreRateAndReviewResult* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CServices__CStore__CStoreRateAndReviewResult* This,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CStore__CStoreRateAndReviewResult* asyncInfo,
        enum __x_ABI_CWindows_CFoundation_CAsyncStatus asyncStatus);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CServices__CStore__CStoreRateAndReviewResultVtbl;

    interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CServices__CStore__CStoreRateAndReviewResult
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CServices__CStore__CStoreRateAndReviewResultVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CServices__CStore__CStoreRateAndReviewResult_INTERFACE_DEFINED__
    
typedef interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CServices__CStore__CStoreSendRequestResult __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CServices__CStore__CStoreSendRequestResult;

#if !defined(____x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CStore__CStoreSendRequestResult_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CStore__CStoreSendRequestResult_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CStore__CStoreSendRequestResult __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CStore__CStoreSendRequestResult;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CStore__CStoreSendRequestResult;

    typedef struct __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CStore__CStoreSendRequestResultVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CStore__CStoreSendRequestResult* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CStore__CStoreSendRequestResult* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CStore__CStoreSendRequestResult* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CStore__CStoreSendRequestResult* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CStore__CStoreSendRequestResult* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CStore__CStoreSendRequestResult* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* put_Completed)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CStore__CStoreSendRequestResult* This,
        __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CServices__CStore__CStoreSendRequestResult* handler);
    HRESULT (STDMETHODCALLTYPE* get_Completed)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CStore__CStoreSendRequestResult* This,
        __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CServices__CStore__CStoreSendRequestResult** result);
    HRESULT (STDMETHODCALLTYPE* GetResults)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CStore__CStoreSendRequestResult* This,
        __x_ABI_CWindows_CServices_CStore_CIStoreSendRequestResult** result);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CStore__CStoreSendRequestResultVtbl;

    interface __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CStore__CStoreSendRequestResult
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CStore__CStoreSendRequestResultVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CStore__CStoreSendRequestResult_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CServices__CStore__CStoreSendRequestResult_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CServices__CStore__CStoreSendRequestResult_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CServices__CStore__CStoreSendRequestResult __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CServices__CStore__CStoreSendRequestResult;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CServices__CStore__CStoreSendRequestResult;

    typedef struct __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CServices__CStore__CStoreSendRequestResultVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CServices__CStore__CStoreSendRequestResult* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CServices__CStore__CStoreSendRequestResult* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CServices__CStore__CStoreSendRequestResult* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CServices__CStore__CStoreSendRequestResult* This,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CStore__CStoreSendRequestResult* asyncInfo,
        enum __x_ABI_CWindows_CFoundation_CAsyncStatus asyncStatus);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CServices__CStore__CStoreSendRequestResultVtbl;

    interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CServices__CStore__CStoreSendRequestResult
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CServices__CStore__CStoreSendRequestResultVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CServices__CStore__CStoreSendRequestResult_INTERFACE_DEFINED__
    
typedef interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CServices__CStore__CStoreUninstallStorePackageResult __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CServices__CStore__CStoreUninstallStorePackageResult;

#if !defined(____x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CStore__CStoreUninstallStorePackageResult_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CStore__CStoreUninstallStorePackageResult_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CStore__CStoreUninstallStorePackageResult __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CStore__CStoreUninstallStorePackageResult;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CStore__CStoreUninstallStorePackageResult;

    typedef struct __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CStore__CStoreUninstallStorePackageResultVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CStore__CStoreUninstallStorePackageResult* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CStore__CStoreUninstallStorePackageResult* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CStore__CStoreUninstallStorePackageResult* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CStore__CStoreUninstallStorePackageResult* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CStore__CStoreUninstallStorePackageResult* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CStore__CStoreUninstallStorePackageResult* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* put_Completed)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CStore__CStoreUninstallStorePackageResult* This,
        __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CServices__CStore__CStoreUninstallStorePackageResult* handler);
    HRESULT (STDMETHODCALLTYPE* get_Completed)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CStore__CStoreUninstallStorePackageResult* This,
        __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CServices__CStore__CStoreUninstallStorePackageResult** result);
    HRESULT (STDMETHODCALLTYPE* GetResults)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CStore__CStoreUninstallStorePackageResult* This,
        __x_ABI_CWindows_CServices_CStore_CIStoreUninstallStorePackageResult** result);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CStore__CStoreUninstallStorePackageResultVtbl;

    interface __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CStore__CStoreUninstallStorePackageResult
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CStore__CStoreUninstallStorePackageResultVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CStore__CStoreUninstallStorePackageResult_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CServices__CStore__CStoreUninstallStorePackageResult_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CServices__CStore__CStoreUninstallStorePackageResult_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CServices__CStore__CStoreUninstallStorePackageResult __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CServices__CStore__CStoreUninstallStorePackageResult;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CServices__CStore__CStoreUninstallStorePackageResult;

    typedef struct __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CServices__CStore__CStoreUninstallStorePackageResultVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CServices__CStore__CStoreUninstallStorePackageResult* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CServices__CStore__CStoreUninstallStorePackageResult* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CServices__CStore__CStoreUninstallStorePackageResult* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CServices__CStore__CStoreUninstallStorePackageResult* This,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CStore__CStoreUninstallStorePackageResult* asyncInfo,
        enum __x_ABI_CWindows_CFoundation_CAsyncStatus asyncStatus);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CServices__CStore__CStoreUninstallStorePackageResultVtbl;

    interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CServices__CStore__CStoreUninstallStorePackageResult
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CServices__CStore__CStoreUninstallStorePackageResultVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CServices__CStore__CStoreUninstallStorePackageResult_INTERFACE_DEFINED__
    
typedef struct __x_ABI_CWindows_CServices_CStore_CStorePackageUpdateStatus __x_ABI_CWindows_CServices_CStore_CStorePackageUpdateStatus;

typedef interface __x_ABI_C__FIAsyncOperationProgressHandler_2___x_ABI_CWindows__CServices__CStore__CStorePackageUpdateResult___x_ABI_CWindows__CServices__CStore__CStorePackageUpdateStatus __x_ABI_C__FIAsyncOperationProgressHandler_2___x_ABI_CWindows__CServices__CStore__CStorePackageUpdateResult___x_ABI_CWindows__CServices__CStore__CStorePackageUpdateStatus;

typedef interface __x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CServices__CStore__CStorePackageUpdateResult___x_ABI_CWindows__CServices__CStore__CStorePackageUpdateStatus __x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CServices__CStore__CStorePackageUpdateResult___x_ABI_CWindows__CServices__CStore__CStorePackageUpdateStatus;

#if !defined(____x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2___x_ABI_CWindows__CServices__CStore__CStorePackageUpdateResult___x_ABI_CWindows__CServices__CStore__CStorePackageUpdateStatus_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2___x_ABI_CWindows__CServices__CStore__CStorePackageUpdateResult___x_ABI_CWindows__CServices__CStore__CStorePackageUpdateStatus_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2___x_ABI_CWindows__CServices__CStore__CStorePackageUpdateResult___x_ABI_CWindows__CServices__CStore__CStorePackageUpdateStatus __x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2___x_ABI_CWindows__CServices__CStore__CStorePackageUpdateResult___x_ABI_CWindows__CServices__CStore__CStorePackageUpdateStatus;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2___x_ABI_CWindows__CServices__CStore__CStorePackageUpdateResult___x_ABI_CWindows__CServices__CStore__CStorePackageUpdateStatus;

    typedef struct __x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2___x_ABI_CWindows__CServices__CStore__CStorePackageUpdateResult___x_ABI_CWindows__CServices__CStore__CStorePackageUpdateStatusVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2___x_ABI_CWindows__CServices__CStore__CStorePackageUpdateResult___x_ABI_CWindows__CServices__CStore__CStorePackageUpdateStatus* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2___x_ABI_CWindows__CServices__CStore__CStorePackageUpdateResult___x_ABI_CWindows__CServices__CStore__CStorePackageUpdateStatus* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2___x_ABI_CWindows__CServices__CStore__CStorePackageUpdateResult___x_ABI_CWindows__CServices__CStore__CStorePackageUpdateStatus* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2___x_ABI_CWindows__CServices__CStore__CStorePackageUpdateResult___x_ABI_CWindows__CServices__CStore__CStorePackageUpdateStatus* This,
        __x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CServices__CStore__CStorePackageUpdateResult___x_ABI_CWindows__CServices__CStore__CStorePackageUpdateStatus* asyncInfo,
        enum __x_ABI_CWindows_CFoundation_CAsyncStatus asyncStatus);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2___x_ABI_CWindows__CServices__CStore__CStorePackageUpdateResult___x_ABI_CWindows__CServices__CStore__CStorePackageUpdateStatusVtbl;

    interface __x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2___x_ABI_CWindows__CServices__CStore__CStorePackageUpdateResult___x_ABI_CWindows__CServices__CStore__CStorePackageUpdateStatus
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2___x_ABI_CWindows__CServices__CStore__CStorePackageUpdateResult___x_ABI_CWindows__CServices__CStore__CStorePackageUpdateStatusVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2___x_ABI_CWindows__CServices__CStore__CStorePackageUpdateResult___x_ABI_CWindows__CServices__CStore__CStorePackageUpdateStatus_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CServices__CStore__CStorePackageUpdateResult___x_ABI_CWindows__CServices__CStore__CStorePackageUpdateStatus_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CServices__CStore__CStorePackageUpdateResult___x_ABI_CWindows__CServices__CStore__CStorePackageUpdateStatus_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CServices__CStore__CStorePackageUpdateResult___x_ABI_CWindows__CServices__CStore__CStorePackageUpdateStatus __x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CServices__CStore__CStorePackageUpdateResult___x_ABI_CWindows__CServices__CStore__CStorePackageUpdateStatus;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CServices__CStore__CStorePackageUpdateResult___x_ABI_CWindows__CServices__CStore__CStorePackageUpdateStatus;

    typedef struct __x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CServices__CStore__CStorePackageUpdateResult___x_ABI_CWindows__CServices__CStore__CStorePackageUpdateStatusVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CServices__CStore__CStorePackageUpdateResult___x_ABI_CWindows__CServices__CStore__CStorePackageUpdateStatus* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CServices__CStore__CStorePackageUpdateResult___x_ABI_CWindows__CServices__CStore__CStorePackageUpdateStatus* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CServices__CStore__CStorePackageUpdateResult___x_ABI_CWindows__CServices__CStore__CStorePackageUpdateStatus* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CServices__CStore__CStorePackageUpdateResult___x_ABI_CWindows__CServices__CStore__CStorePackageUpdateStatus* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CServices__CStore__CStorePackageUpdateResult___x_ABI_CWindows__CServices__CStore__CStorePackageUpdateStatus* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CServices__CStore__CStorePackageUpdateResult___x_ABI_CWindows__CServices__CStore__CStorePackageUpdateStatus* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* put_Progress)(__x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CServices__CStore__CStorePackageUpdateResult___x_ABI_CWindows__CServices__CStore__CStorePackageUpdateStatus* This,
        __x_ABI_C__FIAsyncOperationProgressHandler_2___x_ABI_CWindows__CServices__CStore__CStorePackageUpdateResult___x_ABI_CWindows__CServices__CStore__CStorePackageUpdateStatus* handler);
    HRESULT (STDMETHODCALLTYPE* get_Progress)(__x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CServices__CStore__CStorePackageUpdateResult___x_ABI_CWindows__CServices__CStore__CStorePackageUpdateStatus* This,
        __x_ABI_C__FIAsyncOperationProgressHandler_2___x_ABI_CWindows__CServices__CStore__CStorePackageUpdateResult___x_ABI_CWindows__CServices__CStore__CStorePackageUpdateStatus** result);
    HRESULT (STDMETHODCALLTYPE* put_Completed)(__x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CServices__CStore__CStorePackageUpdateResult___x_ABI_CWindows__CServices__CStore__CStorePackageUpdateStatus* This,
        __x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2___x_ABI_CWindows__CServices__CStore__CStorePackageUpdateResult___x_ABI_CWindows__CServices__CStore__CStorePackageUpdateStatus* handler);
    HRESULT (STDMETHODCALLTYPE* get_Completed)(__x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CServices__CStore__CStorePackageUpdateResult___x_ABI_CWindows__CServices__CStore__CStorePackageUpdateStatus* This,
        __x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2___x_ABI_CWindows__CServices__CStore__CStorePackageUpdateResult___x_ABI_CWindows__CServices__CStore__CStorePackageUpdateStatus** result);
    HRESULT (STDMETHODCALLTYPE* GetResults)(__x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CServices__CStore__CStorePackageUpdateResult___x_ABI_CWindows__CServices__CStore__CStorePackageUpdateStatus* This,
        __x_ABI_CWindows_CServices_CStore_CIStorePackageUpdateResult** result);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CServices__CStore__CStorePackageUpdateResult___x_ABI_CWindows__CServices__CStore__CStorePackageUpdateStatusVtbl;

    interface __x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CServices__CStore__CStorePackageUpdateResult___x_ABI_CWindows__CServices__CStore__CStorePackageUpdateStatus
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CServices__CStore__CStorePackageUpdateResult___x_ABI_CWindows__CServices__CStore__CStorePackageUpdateStatusVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CServices__CStore__CStorePackageUpdateResult___x_ABI_CWindows__CServices__CStore__CStorePackageUpdateStatus_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIAsyncOperationProgressHandler_2___x_ABI_CWindows__CServices__CStore__CStorePackageUpdateResult___x_ABI_CWindows__CServices__CStore__CStorePackageUpdateStatus_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperationProgressHandler_2___x_ABI_CWindows__CServices__CStore__CStorePackageUpdateResult___x_ABI_CWindows__CServices__CStore__CStorePackageUpdateStatus_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperationProgressHandler_2___x_ABI_CWindows__CServices__CStore__CStorePackageUpdateResult___x_ABI_CWindows__CServices__CStore__CStorePackageUpdateStatus __x_ABI_C__FIAsyncOperationProgressHandler_2___x_ABI_CWindows__CServices__CStore__CStorePackageUpdateResult___x_ABI_CWindows__CServices__CStore__CStorePackageUpdateStatus;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperationProgressHandler_2___x_ABI_CWindows__CServices__CStore__CStorePackageUpdateResult___x_ABI_CWindows__CServices__CStore__CStorePackageUpdateStatus;

    typedef struct __x_ABI_C__FIAsyncOperationProgressHandler_2___x_ABI_CWindows__CServices__CStore__CStorePackageUpdateResult___x_ABI_CWindows__CServices__CStore__CStorePackageUpdateStatusVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperationProgressHandler_2___x_ABI_CWindows__CServices__CStore__CStorePackageUpdateResult___x_ABI_CWindows__CServices__CStore__CStorePackageUpdateStatus* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperationProgressHandler_2___x_ABI_CWindows__CServices__CStore__CStorePackageUpdateResult___x_ABI_CWindows__CServices__CStore__CStorePackageUpdateStatus* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperationProgressHandler_2___x_ABI_CWindows__CServices__CStore__CStorePackageUpdateResult___x_ABI_CWindows__CServices__CStore__CStorePackageUpdateStatus* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FIAsyncOperationProgressHandler_2___x_ABI_CWindows__CServices__CStore__CStorePackageUpdateResult___x_ABI_CWindows__CServices__CStore__CStorePackageUpdateStatus* This,
        __x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CServices__CStore__CStorePackageUpdateResult___x_ABI_CWindows__CServices__CStore__CStorePackageUpdateStatus* asyncInfo,
        struct __x_ABI_CWindows_CServices_CStore_CStorePackageUpdateStatus progressInfo);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperationProgressHandler_2___x_ABI_CWindows__CServices__CStore__CStorePackageUpdateResult___x_ABI_CWindows__CServices__CStore__CStorePackageUpdateStatusVtbl;

    interface __x_ABI_C__FIAsyncOperationProgressHandler_2___x_ABI_CWindows__CServices__CStore__CStorePackageUpdateResult___x_ABI_CWindows__CServices__CStore__CStorePackageUpdateStatus
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperationProgressHandler_2___x_ABI_CWindows__CServices__CStore__CStorePackageUpdateResult___x_ABI_CWindows__CServices__CStore__CStorePackageUpdateStatusVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperationProgressHandler_2___x_ABI_CWindows__CServices__CStore__CStorePackageUpdateResult___x_ABI_CWindows__CServices__CStore__CStorePackageUpdateStatus_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterator_1_HSTRING_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterator_1_HSTRING_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterator_1_HSTRING __x_ABI_C__FIIterator_1_HSTRING;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterator_1_HSTRING;

    typedef struct __x_ABI_C__FIIterator_1_HSTRINGVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterator_1_HSTRING* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterator_1_HSTRING* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterator_1_HSTRING* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterator_1_HSTRING* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterator_1_HSTRING* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterator_1_HSTRING* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Current)(__x_ABI_C__FIIterator_1_HSTRING* This,
        HSTRING* result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__x_ABI_C__FIIterator_1_HSTRING* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__x_ABI_C__FIIterator_1_HSTRING* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIIterator_1_HSTRING* This,
        UINT32 itemsLength,
        HSTRING* items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIIterator_1_HSTRINGVtbl;

    interface __x_ABI_C__FIIterator_1_HSTRING
    {
        CONST_VTBL struct __x_ABI_C__FIIterator_1_HSTRINGVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterator_1_HSTRING_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterable_1_HSTRING_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterable_1_HSTRING_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterable_1_HSTRING __x_ABI_C__FIIterable_1_HSTRING;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterable_1_HSTRING;

    typedef struct __x_ABI_C__FIIterable_1_HSTRINGVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterable_1_HSTRING* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterable_1_HSTRING* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterable_1_HSTRING* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterable_1_HSTRING* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterable_1_HSTRING* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterable_1_HSTRING* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* First)(__x_ABI_C__FIIterable_1_HSTRING* This,
        __x_ABI_C__FIIterator_1_HSTRING** result);

        END_INTERFACE
    } __x_ABI_C__FIIterable_1_HSTRINGVtbl;

    interface __x_ABI_C__FIIterable_1_HSTRING
    {
        CONST_VTBL struct __x_ABI_C__FIIterable_1_HSTRINGVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterable_1_HSTRING_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CServices__CStore__CStoreLicense_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CServices__CStore__CStoreLicense_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CServices__CStore__CStoreLicense __x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CServices__CStore__CStoreLicense;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CServices__CStore__CStoreLicense;

    typedef struct __x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CServices__CStore__CStoreLicenseVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CServices__CStore__CStoreLicense* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CServices__CStore__CStoreLicense* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CServices__CStore__CStoreLicense* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CServices__CStore__CStoreLicense* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CServices__CStore__CStoreLicense* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CServices__CStore__CStoreLicense* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Key)(__x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CServices__CStore__CStoreLicense* This,
        HSTRING* result);
    HRESULT (STDMETHODCALLTYPE* get_Value)(__x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CServices__CStore__CStoreLicense* This,
        __x_ABI_CWindows_CServices_CStore_CIStoreLicense** result);

        END_INTERFACE
    } __x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CServices__CStore__CStoreLicenseVtbl;

    interface __x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CServices__CStore__CStoreLicense
    {
        CONST_VTBL struct __x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CServices__CStore__CStoreLicenseVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CServices__CStore__CStoreLicense_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CServices__CStore__CStoreLicense_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CServices__CStore__CStoreLicense_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CServices__CStore__CStoreLicense __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CServices__CStore__CStoreLicense;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CServices__CStore__CStoreLicense;

    typedef struct __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CServices__CStore__CStoreLicenseVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CServices__CStore__CStoreLicense* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CServices__CStore__CStoreLicense* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CServices__CStore__CStoreLicense* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CServices__CStore__CStoreLicense* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CServices__CStore__CStoreLicense* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CServices__CStore__CStoreLicense* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Current)(__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CServices__CStore__CStoreLicense* This,
        __x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CServices__CStore__CStoreLicense** result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CServices__CStore__CStoreLicense* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CServices__CStore__CStoreLicense* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CServices__CStore__CStoreLicense* This,
        UINT32 itemsLength,
        __x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CServices__CStore__CStoreLicense** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CServices__CStore__CStoreLicenseVtbl;

    interface __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CServices__CStore__CStoreLicense
    {
        CONST_VTBL struct __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CServices__CStore__CStoreLicenseVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CServices__CStore__CStoreLicense_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CServices__CStore__CStoreLicense_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CServices__CStore__CStoreLicense_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CServices__CStore__CStoreLicense __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CServices__CStore__CStoreLicense;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CServices__CStore__CStoreLicense;

    typedef struct __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CServices__CStore__CStoreLicenseVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CServices__CStore__CStoreLicense* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CServices__CStore__CStoreLicense* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CServices__CStore__CStoreLicense* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CServices__CStore__CStoreLicense* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CServices__CStore__CStoreLicense* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CServices__CStore__CStoreLicense* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* First)(__x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CServices__CStore__CStoreLicense* This,
        __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CServices__CStore__CStoreLicense** result);

        END_INTERFACE
    } __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CServices__CStore__CStoreLicenseVtbl;

    interface __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CServices__CStore__CStoreLicense
    {
        CONST_VTBL struct __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CServices__CStore__CStoreLicenseVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CServices__CStore__CStoreLicense_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CServices__CStore__CStoreProduct_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CServices__CStore__CStoreProduct_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CServices__CStore__CStoreProduct __x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CServices__CStore__CStoreProduct;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CServices__CStore__CStoreProduct;

    typedef struct __x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CServices__CStore__CStoreProductVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CServices__CStore__CStoreProduct* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CServices__CStore__CStoreProduct* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CServices__CStore__CStoreProduct* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CServices__CStore__CStoreProduct* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CServices__CStore__CStoreProduct* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CServices__CStore__CStoreProduct* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Key)(__x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CServices__CStore__CStoreProduct* This,
        HSTRING* result);
    HRESULT (STDMETHODCALLTYPE* get_Value)(__x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CServices__CStore__CStoreProduct* This,
        __x_ABI_CWindows_CServices_CStore_CIStoreProduct** result);

        END_INTERFACE
    } __x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CServices__CStore__CStoreProductVtbl;

    interface __x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CServices__CStore__CStoreProduct
    {
        CONST_VTBL struct __x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CServices__CStore__CStoreProductVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CServices__CStore__CStoreProduct_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CServices__CStore__CStoreProduct_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CServices__CStore__CStoreProduct_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CServices__CStore__CStoreProduct __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CServices__CStore__CStoreProduct;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CServices__CStore__CStoreProduct;

    typedef struct __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CServices__CStore__CStoreProductVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CServices__CStore__CStoreProduct* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CServices__CStore__CStoreProduct* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CServices__CStore__CStoreProduct* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CServices__CStore__CStoreProduct* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CServices__CStore__CStoreProduct* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CServices__CStore__CStoreProduct* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Current)(__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CServices__CStore__CStoreProduct* This,
        __x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CServices__CStore__CStoreProduct** result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CServices__CStore__CStoreProduct* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CServices__CStore__CStoreProduct* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CServices__CStore__CStoreProduct* This,
        UINT32 itemsLength,
        __x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CServices__CStore__CStoreProduct** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CServices__CStore__CStoreProductVtbl;

    interface __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CServices__CStore__CStoreProduct
    {
        CONST_VTBL struct __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CServices__CStore__CStoreProductVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CServices__CStore__CStoreProduct_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CServices__CStore__CStoreProduct_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CServices__CStore__CStoreProduct_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CServices__CStore__CStoreProduct __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CServices__CStore__CStoreProduct;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CServices__CStore__CStoreProduct;

    typedef struct __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CServices__CStore__CStoreProductVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CServices__CStore__CStoreProduct* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CServices__CStore__CStoreProduct* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CServices__CStore__CStoreProduct* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CServices__CStore__CStoreProduct* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CServices__CStore__CStoreProduct* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CServices__CStore__CStoreProduct* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* First)(__x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CServices__CStore__CStoreProduct* This,
        __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CServices__CStore__CStoreProduct** result);

        END_INTERFACE
    } __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CServices__CStore__CStoreProductVtbl;

    interface __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CServices__CStore__CStoreProduct
    {
        CONST_VTBL struct __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CServices__CStore__CStoreProductVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CServices__CStore__CStoreProduct_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CStore__CStoreAvailability_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CStore__CStoreAvailability_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CStore__CStoreAvailability __x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CStore__CStoreAvailability;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CStore__CStoreAvailability;

    typedef struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CStore__CStoreAvailabilityVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CStore__CStoreAvailability* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CStore__CStoreAvailability* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CStore__CStoreAvailability* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CStore__CStoreAvailability* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CStore__CStoreAvailability* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CStore__CStoreAvailability* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Current)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CStore__CStoreAvailability* This,
        __x_ABI_CWindows_CServices_CStore_CIStoreAvailability** result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CStore__CStoreAvailability* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CStore__CStoreAvailability* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CStore__CStoreAvailability* This,
        UINT32 itemsLength,
        __x_ABI_CWindows_CServices_CStore_CIStoreAvailability** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CStore__CStoreAvailabilityVtbl;

    interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CStore__CStoreAvailability
    {
        CONST_VTBL struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CStore__CStoreAvailabilityVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CStore__CStoreAvailability_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CStore__CStoreAvailability_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CStore__CStoreAvailability_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CStore__CStoreAvailability __x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CStore__CStoreAvailability;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CStore__CStoreAvailability;

    typedef struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CStore__CStoreAvailabilityVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CStore__CStoreAvailability* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CStore__CStoreAvailability* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CStore__CStoreAvailability* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CStore__CStoreAvailability* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CStore__CStoreAvailability* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CStore__CStoreAvailability* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* First)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CStore__CStoreAvailability* This,
        __x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CStore__CStoreAvailability** result);

        END_INTERFACE
    } __x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CStore__CStoreAvailabilityVtbl;

    interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CStore__CStoreAvailability
    {
        CONST_VTBL struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CStore__CStoreAvailabilityVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CStore__CStoreAvailability_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CStore__CStoreImage_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CStore__CStoreImage_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CStore__CStoreImage __x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CStore__CStoreImage;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CStore__CStoreImage;

    typedef struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CStore__CStoreImageVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CStore__CStoreImage* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CStore__CStoreImage* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CStore__CStoreImage* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CStore__CStoreImage* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CStore__CStoreImage* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CStore__CStoreImage* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Current)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CStore__CStoreImage* This,
        __x_ABI_CWindows_CServices_CStore_CIStoreImage** result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CStore__CStoreImage* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CStore__CStoreImage* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CStore__CStoreImage* This,
        UINT32 itemsLength,
        __x_ABI_CWindows_CServices_CStore_CIStoreImage** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CStore__CStoreImageVtbl;

    interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CStore__CStoreImage
    {
        CONST_VTBL struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CStore__CStoreImageVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CStore__CStoreImage_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CStore__CStoreImage_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CStore__CStoreImage_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CStore__CStoreImage __x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CStore__CStoreImage;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CStore__CStoreImage;

    typedef struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CStore__CStoreImageVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CStore__CStoreImage* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CStore__CStoreImage* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CStore__CStoreImage* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CStore__CStoreImage* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CStore__CStoreImage* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CStore__CStoreImage* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* First)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CStore__CStoreImage* This,
        __x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CStore__CStoreImage** result);

        END_INTERFACE
    } __x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CStore__CStoreImageVtbl;

    interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CStore__CStoreImage
    {
        CONST_VTBL struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CStore__CStoreImageVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CStore__CStoreImage_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CStore__CStorePackageUpdateStatus_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CStore__CStorePackageUpdateStatus_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CStore__CStorePackageUpdateStatus __x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CStore__CStorePackageUpdateStatus;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CStore__CStorePackageUpdateStatus;

    typedef struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CStore__CStorePackageUpdateStatusVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CStore__CStorePackageUpdateStatus* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CStore__CStorePackageUpdateStatus* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CStore__CStorePackageUpdateStatus* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CStore__CStorePackageUpdateStatus* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CStore__CStorePackageUpdateStatus* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CStore__CStorePackageUpdateStatus* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Current)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CStore__CStorePackageUpdateStatus* This,
        struct __x_ABI_CWindows_CServices_CStore_CStorePackageUpdateStatus* result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CStore__CStorePackageUpdateStatus* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CStore__CStorePackageUpdateStatus* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CStore__CStorePackageUpdateStatus* This,
        UINT32 itemsLength,
        struct __x_ABI_CWindows_CServices_CStore_CStorePackageUpdateStatus* items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CStore__CStorePackageUpdateStatusVtbl;

    interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CStore__CStorePackageUpdateStatus
    {
        CONST_VTBL struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CStore__CStorePackageUpdateStatusVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CStore__CStorePackageUpdateStatus_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CStore__CStorePackageUpdateStatus_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CStore__CStorePackageUpdateStatus_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CStore__CStorePackageUpdateStatus __x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CStore__CStorePackageUpdateStatus;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CStore__CStorePackageUpdateStatus;

    typedef struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CStore__CStorePackageUpdateStatusVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CStore__CStorePackageUpdateStatus* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CStore__CStorePackageUpdateStatus* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CStore__CStorePackageUpdateStatus* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CStore__CStorePackageUpdateStatus* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CStore__CStorePackageUpdateStatus* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CStore__CStorePackageUpdateStatus* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* First)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CStore__CStorePackageUpdateStatus* This,
        __x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CStore__CStorePackageUpdateStatus** result);

        END_INTERFACE
    } __x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CStore__CStorePackageUpdateStatusVtbl;

    interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CStore__CStorePackageUpdateStatus
    {
        CONST_VTBL struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CStore__CStorePackageUpdateStatusVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CStore__CStorePackageUpdateStatus_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CStore__CStoreSku_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CStore__CStoreSku_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CStore__CStoreSku __x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CStore__CStoreSku;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CStore__CStoreSku;

    typedef struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CStore__CStoreSkuVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CStore__CStoreSku* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CStore__CStoreSku* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CStore__CStoreSku* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CStore__CStoreSku* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CStore__CStoreSku* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CStore__CStoreSku* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Current)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CStore__CStoreSku* This,
        __x_ABI_CWindows_CServices_CStore_CIStoreSku** result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CStore__CStoreSku* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CStore__CStoreSku* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CStore__CStoreSku* This,
        UINT32 itemsLength,
        __x_ABI_CWindows_CServices_CStore_CIStoreSku** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CStore__CStoreSkuVtbl;

    interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CStore__CStoreSku
    {
        CONST_VTBL struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CStore__CStoreSkuVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CStore__CStoreSku_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CStore__CStoreSku_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CStore__CStoreSku_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CStore__CStoreSku __x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CStore__CStoreSku;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CStore__CStoreSku;

    typedef struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CStore__CStoreSkuVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CStore__CStoreSku* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CStore__CStoreSku* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CStore__CStoreSku* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CStore__CStoreSku* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CStore__CStoreSku* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CStore__CStoreSku* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* First)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CStore__CStoreSku* This,
        __x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CStore__CStoreSku** result);

        END_INTERFACE
    } __x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CStore__CStoreSkuVtbl;

    interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CStore__CStoreSku
    {
        CONST_VTBL struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CStore__CStoreSkuVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CStore__CStoreSku_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CStore__CStoreVideo_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CStore__CStoreVideo_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CStore__CStoreVideo __x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CStore__CStoreVideo;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CStore__CStoreVideo;

    typedef struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CStore__CStoreVideoVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CStore__CStoreVideo* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CStore__CStoreVideo* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CStore__CStoreVideo* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CStore__CStoreVideo* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CStore__CStoreVideo* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CStore__CStoreVideo* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Current)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CStore__CStoreVideo* This,
        __x_ABI_CWindows_CServices_CStore_CIStoreVideo** result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CStore__CStoreVideo* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CStore__CStoreVideo* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CStore__CStoreVideo* This,
        UINT32 itemsLength,
        __x_ABI_CWindows_CServices_CStore_CIStoreVideo** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CStore__CStoreVideoVtbl;

    interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CStore__CStoreVideo
    {
        CONST_VTBL struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CStore__CStoreVideoVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CStore__CStoreVideo_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CStore__CStoreVideo_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CStore__CStoreVideo_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CStore__CStoreVideo __x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CStore__CStoreVideo;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CStore__CStoreVideo;

    typedef struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CStore__CStoreVideoVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CStore__CStoreVideo* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CStore__CStoreVideo* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CStore__CStoreVideo* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CStore__CStoreVideo* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CStore__CStoreVideo* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CStore__CStoreVideo* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* First)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CStore__CStoreVideo* This,
        __x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CStore__CStoreVideo** result);

        END_INTERFACE
    } __x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CStore__CStoreVideoVtbl;

    interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CStore__CStoreVideo
    {
        CONST_VTBL struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CStore__CStoreVideoVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CStore__CStoreVideo_INTERFACE_DEFINED__
    
typedef interface __x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CServices__CStore__CStoreLicense __x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CServices__CStore__CStoreLicense;

#if !defined(____x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CServices__CStore__CStoreLicense_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CServices__CStore__CStoreLicense_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CServices__CStore__CStoreLicense __x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CServices__CStore__CStoreLicense;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CServices__CStore__CStoreLicense;

    typedef struct __x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CServices__CStore__CStoreLicenseVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CServices__CStore__CStoreLicense* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CServices__CStore__CStoreLicense* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CServices__CStore__CStoreLicense* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CServices__CStore__CStoreLicense* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CServices__CStore__CStoreLicense* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CServices__CStore__CStoreLicense* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* Lookup)(__x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CServices__CStore__CStoreLicense* This,
        HSTRING key,
        __x_ABI_CWindows_CServices_CStore_CIStoreLicense** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CServices__CStore__CStoreLicense* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* HasKey)(__x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CServices__CStore__CStoreLicense* This,
        HSTRING key,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* Split)(__x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CServices__CStore__CStoreLicense* This,
        __x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CServices__CStore__CStoreLicense** first,
        __x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CServices__CStore__CStoreLicense** second);

        END_INTERFACE
    } __x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CServices__CStore__CStoreLicenseVtbl;

    interface __x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CServices__CStore__CStoreLicense
    {
        CONST_VTBL struct __x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CServices__CStore__CStoreLicenseVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CServices__CStore__CStoreLicense_INTERFACE_DEFINED__
    
typedef interface __x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CServices__CStore__CStoreProduct __x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CServices__CStore__CStoreProduct;

#if !defined(____x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CServices__CStore__CStoreProduct_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CServices__CStore__CStoreProduct_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CServices__CStore__CStoreProduct __x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CServices__CStore__CStoreProduct;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CServices__CStore__CStoreProduct;

    typedef struct __x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CServices__CStore__CStoreProductVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CServices__CStore__CStoreProduct* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CServices__CStore__CStoreProduct* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CServices__CStore__CStoreProduct* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CServices__CStore__CStoreProduct* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CServices__CStore__CStoreProduct* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CServices__CStore__CStoreProduct* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* Lookup)(__x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CServices__CStore__CStoreProduct* This,
        HSTRING key,
        __x_ABI_CWindows_CServices_CStore_CIStoreProduct** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CServices__CStore__CStoreProduct* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* HasKey)(__x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CServices__CStore__CStoreProduct* This,
        HSTRING key,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* Split)(__x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CServices__CStore__CStoreProduct* This,
        __x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CServices__CStore__CStoreProduct** first,
        __x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CServices__CStore__CStoreProduct** second);

        END_INTERFACE
    } __x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CServices__CStore__CStoreProductVtbl;

    interface __x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CServices__CStore__CStoreProduct
    {
        CONST_VTBL struct __x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CServices__CStore__CStoreProductVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CServices__CStore__CStoreProduct_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVectorView_1_HSTRING_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVectorView_1_HSTRING_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVectorView_1_HSTRING __x_ABI_C__FIVectorView_1_HSTRING;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVectorView_1_HSTRING;

    typedef struct __x_ABI_C__FIVectorView_1_HSTRINGVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVectorView_1_HSTRING* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVectorView_1_HSTRING* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVectorView_1_HSTRING* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVectorView_1_HSTRING* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVectorView_1_HSTRING* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVectorView_1_HSTRING* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVectorView_1_HSTRING* This,
        UINT32 index,
        HSTRING* result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVectorView_1_HSTRING* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVectorView_1_HSTRING* This,
        HSTRING value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVectorView_1_HSTRING* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        HSTRING* items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIVectorView_1_HSTRINGVtbl;

    interface __x_ABI_C__FIVectorView_1_HSTRING
    {
        CONST_VTBL struct __x_ABI_C__FIVectorView_1_HSTRINGVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVectorView_1_HSTRING_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CStore__CStoreAvailability_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CStore__CStoreAvailability_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CStore__CStoreAvailability __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CStore__CStoreAvailability;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CStore__CStoreAvailability;

    typedef struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CStore__CStoreAvailabilityVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CStore__CStoreAvailability* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CStore__CStoreAvailability* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CStore__CStoreAvailability* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CStore__CStoreAvailability* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CStore__CStoreAvailability* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CStore__CStoreAvailability* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CStore__CStoreAvailability* This,
        UINT32 index,
        __x_ABI_CWindows_CServices_CStore_CIStoreAvailability** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CStore__CStoreAvailability* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CStore__CStoreAvailability* This,
        __x_ABI_CWindows_CServices_CStore_CIStoreAvailability* value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CStore__CStoreAvailability* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        __x_ABI_CWindows_CServices_CStore_CIStoreAvailability** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CStore__CStoreAvailabilityVtbl;

    interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CStore__CStoreAvailability
    {
        CONST_VTBL struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CStore__CStoreAvailabilityVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CStore__CStoreAvailability_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CStore__CStoreImage_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CStore__CStoreImage_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CStore__CStoreImage __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CStore__CStoreImage;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CStore__CStoreImage;

    typedef struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CStore__CStoreImageVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CStore__CStoreImage* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CStore__CStoreImage* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CStore__CStoreImage* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CStore__CStoreImage* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CStore__CStoreImage* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CStore__CStoreImage* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CStore__CStoreImage* This,
        UINT32 index,
        __x_ABI_CWindows_CServices_CStore_CIStoreImage** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CStore__CStoreImage* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CStore__CStoreImage* This,
        __x_ABI_CWindows_CServices_CStore_CIStoreImage* value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CStore__CStoreImage* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        __x_ABI_CWindows_CServices_CStore_CIStoreImage** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CStore__CStoreImageVtbl;

    interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CStore__CStoreImage
    {
        CONST_VTBL struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CStore__CStoreImageVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CStore__CStoreImage_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CStore__CStorePackageUpdateStatus_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CStore__CStorePackageUpdateStatus_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CStore__CStorePackageUpdateStatus __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CStore__CStorePackageUpdateStatus;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CStore__CStorePackageUpdateStatus;

    typedef struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CStore__CStorePackageUpdateStatusVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CStore__CStorePackageUpdateStatus* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CStore__CStorePackageUpdateStatus* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CStore__CStorePackageUpdateStatus* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CStore__CStorePackageUpdateStatus* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CStore__CStorePackageUpdateStatus* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CStore__CStorePackageUpdateStatus* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CStore__CStorePackageUpdateStatus* This,
        UINT32 index,
        struct __x_ABI_CWindows_CServices_CStore_CStorePackageUpdateStatus* result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CStore__CStorePackageUpdateStatus* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CStore__CStorePackageUpdateStatus* This,
        struct __x_ABI_CWindows_CServices_CStore_CStorePackageUpdateStatus value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CStore__CStorePackageUpdateStatus* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        struct __x_ABI_CWindows_CServices_CStore_CStorePackageUpdateStatus* items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CStore__CStorePackageUpdateStatusVtbl;

    interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CStore__CStorePackageUpdateStatus
    {
        CONST_VTBL struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CStore__CStorePackageUpdateStatusVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CStore__CStorePackageUpdateStatus_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CStore__CStoreSku_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CStore__CStoreSku_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CStore__CStoreSku __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CStore__CStoreSku;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CStore__CStoreSku;

    typedef struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CStore__CStoreSkuVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CStore__CStoreSku* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CStore__CStoreSku* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CStore__CStoreSku* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CStore__CStoreSku* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CStore__CStoreSku* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CStore__CStoreSku* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CStore__CStoreSku* This,
        UINT32 index,
        __x_ABI_CWindows_CServices_CStore_CIStoreSku** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CStore__CStoreSku* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CStore__CStoreSku* This,
        __x_ABI_CWindows_CServices_CStore_CIStoreSku* value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CStore__CStoreSku* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        __x_ABI_CWindows_CServices_CStore_CIStoreSku** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CStore__CStoreSkuVtbl;

    interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CStore__CStoreSku
    {
        CONST_VTBL struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CStore__CStoreSkuVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CStore__CStoreSku_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CStore__CStoreVideo_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CStore__CStoreVideo_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CStore__CStoreVideo __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CStore__CStoreVideo;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CStore__CStoreVideo;

    typedef struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CStore__CStoreVideoVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CStore__CStoreVideo* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CStore__CStoreVideo* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CStore__CStoreVideo* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CStore__CStoreVideo* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CStore__CStoreVideo* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CStore__CStoreVideo* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CStore__CStoreVideo* This,
        UINT32 index,
        __x_ABI_CWindows_CServices_CStore_CIStoreVideo** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CStore__CStoreVideo* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CStore__CStoreVideo* This,
        __x_ABI_CWindows_CServices_CStore_CIStoreVideo* value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CStore__CStoreVideo* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        __x_ABI_CWindows_CServices_CStore_CIStoreVideo** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CStore__CStoreVideoVtbl;

    interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CStore__CStoreVideo
    {
        CONST_VTBL struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CStore__CStoreVideoVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CStore__CStoreVideo_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVector_1_HSTRING_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVector_1_HSTRING_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVector_1_HSTRING __x_ABI_C__FIVector_1_HSTRING;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVector_1_HSTRING;

    typedef struct __x_ABI_C__FIVector_1_HSTRINGVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVector_1_HSTRING* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVector_1_HSTRING* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVector_1_HSTRING* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVector_1_HSTRING* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVector_1_HSTRING* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVector_1_HSTRING* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVector_1_HSTRING* This,
        UINT32 index,
        HSTRING* result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVector_1_HSTRING* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* GetView)(__x_ABI_C__FIVector_1_HSTRING* This,
        __x_ABI_C__FIVectorView_1_HSTRING** result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVector_1_HSTRING* This,
        HSTRING value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* SetAt)(__x_ABI_C__FIVector_1_HSTRING* This,
        UINT32 index,
        HSTRING value);
    HRESULT (STDMETHODCALLTYPE* InsertAt)(__x_ABI_C__FIVector_1_HSTRING* This,
        UINT32 index,
        HSTRING value);
    HRESULT (STDMETHODCALLTYPE* RemoveAt)(__x_ABI_C__FIVector_1_HSTRING* This,
        UINT32 index);
    HRESULT (STDMETHODCALLTYPE* Append)(__x_ABI_C__FIVector_1_HSTRING* This,
        HSTRING value);
    HRESULT (STDMETHODCALLTYPE* RemoveAtEnd)(__x_ABI_C__FIVector_1_HSTRING* This);
    HRESULT (STDMETHODCALLTYPE* Clear)(__x_ABI_C__FIVector_1_HSTRING* This);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVector_1_HSTRING* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        HSTRING* items,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* ReplaceAll)(__x_ABI_C__FIVector_1_HSTRING* This,
        UINT32 itemsLength,
        HSTRING* items);

        END_INTERFACE
    } __x_ABI_C__FIVector_1_HSTRINGVtbl;

    interface __x_ABI_C__FIVector_1_HSTRING
    {
        CONST_VTBL struct __x_ABI_C__FIVector_1_HSTRINGVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVector_1_HSTRING_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CServices__CStore__CStoreContext_IInspectable_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CServices__CStore__CStoreContext_IInspectable_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CServices__CStore__CStoreContext_IInspectable __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CServices__CStore__CStoreContext_IInspectable;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CServices__CStore__CStoreContext_IInspectable;

    typedef struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CServices__CStore__CStoreContext_IInspectableVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CServices__CStore__CStoreContext_IInspectable* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CServices__CStore__CStoreContext_IInspectable* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CServices__CStore__CStoreContext_IInspectable* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CServices__CStore__CStoreContext_IInspectable* This,
        __x_ABI_CWindows_CServices_CStore_CIStoreContext* sender,
        IInspectable* args);

        END_INTERFACE
    } __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CServices__CStore__CStoreContext_IInspectableVtbl;

    interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CServices__CStore__CStoreContext_IInspectable
    {
        CONST_VTBL struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CServices__CStore__CStoreContext_IInspectableVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CServices__CStore__CStoreContext_IInspectable_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CServices__CStore__CStorePackageLicense_IInspectable_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CServices__CStore__CStorePackageLicense_IInspectable_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CServices__CStore__CStorePackageLicense_IInspectable __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CServices__CStore__CStorePackageLicense_IInspectable;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CServices__CStore__CStorePackageLicense_IInspectable;

    typedef struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CServices__CStore__CStorePackageLicense_IInspectableVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CServices__CStore__CStorePackageLicense_IInspectable* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CServices__CStore__CStorePackageLicense_IInspectable* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CServices__CStore__CStorePackageLicense_IInspectable* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CServices__CStore__CStorePackageLicense_IInspectable* This,
        __x_ABI_CWindows_CServices_CStore_CIStorePackageLicense* sender,
        IInspectable* args);

        END_INTERFACE
    } __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CServices__CStore__CStorePackageLicense_IInspectableVtbl;

    interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CServices__CStore__CStorePackageLicense_IInspectable
    {
        CONST_VTBL struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CServices__CStore__CStorePackageLicense_IInspectableVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CServices__CStore__CStorePackageLicense_IInspectable_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CServices__CStore__CStoreQueueItem_IInspectable_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CServices__CStore__CStoreQueueItem_IInspectable_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CServices__CStore__CStoreQueueItem_IInspectable __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CServices__CStore__CStoreQueueItem_IInspectable;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CServices__CStore__CStoreQueueItem_IInspectable;

    typedef struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CServices__CStore__CStoreQueueItem_IInspectableVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CServices__CStore__CStoreQueueItem_IInspectable* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CServices__CStore__CStoreQueueItem_IInspectable* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CServices__CStore__CStoreQueueItem_IInspectable* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CServices__CStore__CStoreQueueItem_IInspectable* This,
        __x_ABI_CWindows_CServices_CStore_CIStoreQueueItem* sender,
        IInspectable* args);

        END_INTERFACE
    } __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CServices__CStore__CStoreQueueItem_IInspectableVtbl;

    interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CServices__CStore__CStoreQueueItem_IInspectable
    {
        CONST_VTBL struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CServices__CStore__CStoreQueueItem_IInspectableVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CServices__CStore__CStoreQueueItem_IInspectable_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CServices__CStore__CStoreQueueItem___x_ABI_CWindows__CServices__CStore__CStoreQueueItemCompletedEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CServices__CStore__CStoreQueueItem___x_ABI_CWindows__CServices__CStore__CStoreQueueItemCompletedEventArgs_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CServices__CStore__CStoreQueueItem___x_ABI_CWindows__CServices__CStore__CStoreQueueItemCompletedEventArgs __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CServices__CStore__CStoreQueueItem___x_ABI_CWindows__CServices__CStore__CStoreQueueItemCompletedEventArgs;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CServices__CStore__CStoreQueueItem___x_ABI_CWindows__CServices__CStore__CStoreQueueItemCompletedEventArgs;

    typedef struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CServices__CStore__CStoreQueueItem___x_ABI_CWindows__CServices__CStore__CStoreQueueItemCompletedEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CServices__CStore__CStoreQueueItem___x_ABI_CWindows__CServices__CStore__CStoreQueueItemCompletedEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CServices__CStore__CStoreQueueItem___x_ABI_CWindows__CServices__CStore__CStoreQueueItemCompletedEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CServices__CStore__CStoreQueueItem___x_ABI_CWindows__CServices__CStore__CStoreQueueItemCompletedEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CServices__CStore__CStoreQueueItem___x_ABI_CWindows__CServices__CStore__CStoreQueueItemCompletedEventArgs* This,
        __x_ABI_CWindows_CServices_CStore_CIStoreQueueItem* sender,
        __x_ABI_CWindows_CServices_CStore_CIStoreQueueItemCompletedEventArgs* args);

        END_INTERFACE
    } __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CServices__CStore__CStoreQueueItem___x_ABI_CWindows__CServices__CStore__CStoreQueueItemCompletedEventArgsVtbl;

    interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CServices__CStore__CStoreQueueItem___x_ABI_CWindows__CServices__CStore__CStoreQueueItemCompletedEventArgs
    {
        CONST_VTBL struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CServices__CStore__CStoreQueueItem___x_ABI_CWindows__CServices__CStore__CStoreQueueItemCompletedEventArgsVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CServices__CStore__CStoreQueueItem___x_ABI_CWindows__CServices__CStore__CStoreQueueItemCompletedEventArgs_INTERFACE_DEFINED__
    
#ifndef ____x_ABI_CWindows_CApplicationModel_CIPackage_FWD_DEFINED__
#define ____x_ABI_CWindows_CApplicationModel_CIPackage_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CApplicationModel_CIPackage __x_ABI_CWindows_CApplicationModel_CIPackage;

#endif // ____x_ABI_CWindows_CApplicationModel_CIPackage_FWD_DEFINED__

typedef enum __x_ABI_CWindows_CFoundation_CAsyncStatus __x_ABI_CWindows_CFoundation_CAsyncStatus;

typedef struct __x_ABI_CWindows_CFoundation_CDateTime __x_ABI_CWindows_CFoundation_CDateTime;

#ifndef ____x_ABI_CWindows_CFoundation_CIAsyncAction_FWD_DEFINED__
#define ____x_ABI_CWindows_CFoundation_CIAsyncAction_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CFoundation_CIAsyncAction __x_ABI_CWindows_CFoundation_CIAsyncAction;

#endif // ____x_ABI_CWindows_CFoundation_CIAsyncAction_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CFoundation_CIAsyncInfo_FWD_DEFINED__
#define ____x_ABI_CWindows_CFoundation_CIAsyncInfo_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CFoundation_CIAsyncInfo __x_ABI_CWindows_CFoundation_CIAsyncInfo;

#endif // ____x_ABI_CWindows_CFoundation_CIAsyncInfo_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CFoundation_CIClosable_FWD_DEFINED__
#define ____x_ABI_CWindows_CFoundation_CIClosable_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CFoundation_CIClosable __x_ABI_CWindows_CFoundation_CIClosable;

#endif // ____x_ABI_CWindows_CFoundation_CIClosable_FWD_DEFINED__

typedef struct __x_ABI_CWindows_CFoundation_CTimeSpan __x_ABI_CWindows_CFoundation_CTimeSpan;

#ifndef ____x_ABI_CWindows_CFoundation_CIUriRuntimeClass_FWD_DEFINED__
#define ____x_ABI_CWindows_CFoundation_CIUriRuntimeClass_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CFoundation_CIUriRuntimeClass __x_ABI_CWindows_CFoundation_CIUriRuntimeClass;

#endif // ____x_ABI_CWindows_CFoundation_CIUriRuntimeClass_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CSystem_CIUser_FWD_DEFINED__
#define ____x_ABI_CWindows_CSystem_CIUser_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CSystem_CIUser __x_ABI_CWindows_CSystem_CIUser;

#endif // ____x_ABI_CWindows_CSystem_CIUser_FWD_DEFINED__

typedef enum __x_ABI_CWindows_CWeb_CHttp_CHttpStatusCode __x_ABI_CWindows_CWeb_CHttp_CHttpStatusCode;

typedef enum __x_ABI_CWindows_CServices_CStore_CStoreCanLicenseStatus __x_ABI_CWindows_CServices_CStore_CStoreCanLicenseStatus;

typedef enum __x_ABI_CWindows_CServices_CStore_CStoreConsumableStatus __x_ABI_CWindows_CServices_CStore_CStoreConsumableStatus;

typedef enum __x_ABI_CWindows_CServices_CStore_CStoreDurationUnit __x_ABI_CWindows_CServices_CStore_CStoreDurationUnit;

typedef enum __x_ABI_CWindows_CServices_CStore_CStorePackageUpdateState __x_ABI_CWindows_CServices_CStore_CStorePackageUpdateState;

typedef enum __x_ABI_CWindows_CServices_CStore_CStorePurchaseStatus __x_ABI_CWindows_CServices_CStore_CStorePurchaseStatus;

typedef enum __x_ABI_CWindows_CServices_CStore_CStoreQueueItemExtendedState __x_ABI_CWindows_CServices_CStore_CStoreQueueItemExtendedState;

typedef enum __x_ABI_CWindows_CServices_CStore_CStoreQueueItemKind __x_ABI_CWindows_CServices_CStore_CStoreQueueItemKind;

typedef enum __x_ABI_CWindows_CServices_CStore_CStoreQueueItemState __x_ABI_CWindows_CServices_CStore_CStoreQueueItemState;

typedef enum __x_ABI_CWindows_CServices_CStore_CStoreRateAndReviewStatus __x_ABI_CWindows_CServices_CStore_CStoreRateAndReviewStatus;

typedef enum __x_ABI_CWindows_CServices_CStore_CStoreUninstallStorePackageStatus __x_ABI_CWindows_CServices_CStore_CStoreUninstallStorePackageStatus;

enum __x_ABI_CWindows_CServices_CStore_CStoreCanLicenseStatus
    {
        __x_ABI_CWindows_CServices_CStore_CStoreCanLicenseStatus_NotLicensableToUser = 0,
    __x_ABI_CWindows_CServices_CStore_CStoreCanLicenseStatus_Licensable = 1,
    __x_ABI_CWindows_CServices_CStore_CStoreCanLicenseStatus_LicenseActionNotApplicableToProduct = 2,
    __x_ABI_CWindows_CServices_CStore_CStoreCanLicenseStatus_NetworkError = 3,
    __x_ABI_CWindows_CServices_CStore_CStoreCanLicenseStatus_ServerError = 4,
};

enum __x_ABI_CWindows_CServices_CStore_CStoreConsumableStatus
    {
        __x_ABI_CWindows_CServices_CStore_CStoreConsumableStatus_Succeeded = 0,
    __x_ABI_CWindows_CServices_CStore_CStoreConsumableStatus_InsufficentQuantity = 1,
    __x_ABI_CWindows_CServices_CStore_CStoreConsumableStatus_NetworkError = 2,
    __x_ABI_CWindows_CServices_CStore_CStoreConsumableStatus_ServerError = 3,
};

enum __x_ABI_CWindows_CServices_CStore_CStoreDurationUnit
    {
        __x_ABI_CWindows_CServices_CStore_CStoreDurationUnit_Minute = 0,
    __x_ABI_CWindows_CServices_CStore_CStoreDurationUnit_Hour = 1,
    __x_ABI_CWindows_CServices_CStore_CStoreDurationUnit_Day = 2,
    __x_ABI_CWindows_CServices_CStore_CStoreDurationUnit_Week = 3,
    __x_ABI_CWindows_CServices_CStore_CStoreDurationUnit_Month = 4,
    __x_ABI_CWindows_CServices_CStore_CStoreDurationUnit_Year = 5,
};

enum __x_ABI_CWindows_CServices_CStore_CStorePackageUpdateState
    {
        __x_ABI_CWindows_CServices_CStore_CStorePackageUpdateState_Pending = 0,
    __x_ABI_CWindows_CServices_CStore_CStorePackageUpdateState_Downloading = 1,
    __x_ABI_CWindows_CServices_CStore_CStorePackageUpdateState_Deploying = 2,
    __x_ABI_CWindows_CServices_CStore_CStorePackageUpdateState_Completed = 3,
    __x_ABI_CWindows_CServices_CStore_CStorePackageUpdateState_Canceled = 4,
    __x_ABI_CWindows_CServices_CStore_CStorePackageUpdateState_OtherError = 5,
    __x_ABI_CWindows_CServices_CStore_CStorePackageUpdateState_ErrorLowBattery = 6,
    __x_ABI_CWindows_CServices_CStore_CStorePackageUpdateState_ErrorWiFiRecommended = 7,
    __x_ABI_CWindows_CServices_CStore_CStorePackageUpdateState_ErrorWiFiRequired = 8,
};

enum __x_ABI_CWindows_CServices_CStore_CStorePurchaseStatus
    {
        __x_ABI_CWindows_CServices_CStore_CStorePurchaseStatus_Succeeded = 0,
    __x_ABI_CWindows_CServices_CStore_CStorePurchaseStatus_AlreadyPurchased = 1,
    __x_ABI_CWindows_CServices_CStore_CStorePurchaseStatus_NotPurchased = 2,
    __x_ABI_CWindows_CServices_CStore_CStorePurchaseStatus_NetworkError = 3,
    __x_ABI_CWindows_CServices_CStore_CStorePurchaseStatus_ServerError = 4,
};

enum __x_ABI_CWindows_CServices_CStore_CStoreQueueItemExtendedState
    {
        __x_ABI_CWindows_CServices_CStore_CStoreQueueItemExtendedState_ActivePending = 0,
    __x_ABI_CWindows_CServices_CStore_CStoreQueueItemExtendedState_ActiveStarting = 1,
    __x_ABI_CWindows_CServices_CStore_CStoreQueueItemExtendedState_ActiveAcquiringLicense = 2,
    __x_ABI_CWindows_CServices_CStore_CStoreQueueItemExtendedState_ActiveDownloading = 3,
    __x_ABI_CWindows_CServices_CStore_CStoreQueueItemExtendedState_ActiveRestoringData = 4,
    __x_ABI_CWindows_CServices_CStore_CStoreQueueItemExtendedState_ActiveInstalling = 5,
    __x_ABI_CWindows_CServices_CStore_CStoreQueueItemExtendedState_Completed = 6,
    __x_ABI_CWindows_CServices_CStore_CStoreQueueItemExtendedState_Canceled = 7,
    __x_ABI_CWindows_CServices_CStore_CStoreQueueItemExtendedState_Paused = 8,
    __x_ABI_CWindows_CServices_CStore_CStoreQueueItemExtendedState_Error = 9,
    __x_ABI_CWindows_CServices_CStore_CStoreQueueItemExtendedState_PausedPackagesInUse = 10,
    __x_ABI_CWindows_CServices_CStore_CStoreQueueItemExtendedState_PausedLowBattery = 11,
    __x_ABI_CWindows_CServices_CStore_CStoreQueueItemExtendedState_PausedWiFiRecommended = 12,
    __x_ABI_CWindows_CServices_CStore_CStoreQueueItemExtendedState_PausedWiFiRequired = 13,
    __x_ABI_CWindows_CServices_CStore_CStoreQueueItemExtendedState_PausedReadyToInstall = 14,
};

enum __x_ABI_CWindows_CServices_CStore_CStoreQueueItemKind
    {
        __x_ABI_CWindows_CServices_CStore_CStoreQueueItemKind_Install = 0,
    __x_ABI_CWindows_CServices_CStore_CStoreQueueItemKind_Update = 1,
    __x_ABI_CWindows_CServices_CStore_CStoreQueueItemKind_Repair = 2,
};

enum __x_ABI_CWindows_CServices_CStore_CStoreQueueItemState
    {
        __x_ABI_CWindows_CServices_CStore_CStoreQueueItemState_Active = 0,
    __x_ABI_CWindows_CServices_CStore_CStoreQueueItemState_Completed = 1,
    __x_ABI_CWindows_CServices_CStore_CStoreQueueItemState_Canceled = 2,
    __x_ABI_CWindows_CServices_CStore_CStoreQueueItemState_Error = 3,
    __x_ABI_CWindows_CServices_CStore_CStoreQueueItemState_Paused = 4,
};

enum __x_ABI_CWindows_CServices_CStore_CStoreRateAndReviewStatus
    {
        __x_ABI_CWindows_CServices_CStore_CStoreRateAndReviewStatus_Succeeded = 0,
    __x_ABI_CWindows_CServices_CStore_CStoreRateAndReviewStatus_CanceledByUser = 1,
    __x_ABI_CWindows_CServices_CStore_CStoreRateAndReviewStatus_NetworkError = 2,
    __x_ABI_CWindows_CServices_CStore_CStoreRateAndReviewStatus_Error = 3,
};

enum __x_ABI_CWindows_CServices_CStore_CStoreUninstallStorePackageStatus
    {
        __x_ABI_CWindows_CServices_CStore_CStoreUninstallStorePackageStatus_Succeeded = 0,
    __x_ABI_CWindows_CServices_CStore_CStoreUninstallStorePackageStatus_CanceledByUser = 1,
    __x_ABI_CWindows_CServices_CStore_CStoreUninstallStorePackageStatus_NetworkError = 2,
    __x_ABI_CWindows_CServices_CStore_CStoreUninstallStorePackageStatus_UninstallNotApplicable = 3,
    __x_ABI_CWindows_CServices_CStore_CStoreUninstallStorePackageStatus_Error = 4,
};

struct __x_ABI_CWindows_CServices_CStore_CStorePackageUpdateStatus
    {
        HSTRING PackageFamilyName;
    UINT64 PackageDownloadSizeInBytes;
    UINT64 PackageBytesDownloaded;
    DOUBLE PackageDownloadProgress;
    DOUBLE TotalDownloadProgress;
    enum __x_ABI_CWindows_CServices_CStore_CStorePackageUpdateState PackageUpdateState;
};

#if !defined(____x_ABI_CWindows_CServices_CStore_CIStoreAcquireLicenseResult_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CServices_CStore_CIStoreAcquireLicenseResult_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CServices_CStore_CIStoreAcquireLicenseResultVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CServices_CStore_CIStoreAcquireLicenseResult* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CServices_CStore_CIStoreAcquireLicenseResult* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CServices_CStore_CIStoreAcquireLicenseResult* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CServices_CStore_CIStoreAcquireLicenseResult* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CServices_CStore_CIStoreAcquireLicenseResult* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CServices_CStore_CIStoreAcquireLicenseResult* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_StorePackageLicense)(__x_ABI_CWindows_CServices_CStore_CIStoreAcquireLicenseResult* This,
        __x_ABI_CWindows_CServices_CStore_CIStorePackageLicense** value);
    HRESULT (STDMETHODCALLTYPE* get_ExtendedError)(__x_ABI_CWindows_CServices_CStore_CIStoreAcquireLicenseResult* This,
        HRESULT* value);

        END_INTERFACE
    } __x_ABI_CWindows_CServices_CStore_CIStoreAcquireLicenseResultVtbl;

    interface __x_ABI_CWindows_CServices_CStore_CIStoreAcquireLicenseResult
    {
        CONST_VTBL struct __x_ABI_CWindows_CServices_CStore_CIStoreAcquireLicenseResultVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CServices_CStore_CIStoreAcquireLicenseResult;
#endif /* !defined(____x_ABI_CWindows_CServices_CStore_CIStoreAcquireLicenseResult_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CServices_CStore_CIStoreAppLicense_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CServices_CStore_CIStoreAppLicense_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CServices_CStore_CIStoreAppLicenseVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CServices_CStore_CIStoreAppLicense* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CServices_CStore_CIStoreAppLicense* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CServices_CStore_CIStoreAppLicense* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CServices_CStore_CIStoreAppLicense* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CServices_CStore_CIStoreAppLicense* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CServices_CStore_CIStoreAppLicense* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_SkuStoreId)(__x_ABI_CWindows_CServices_CStore_CIStoreAppLicense* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_IsActive)(__x_ABI_CWindows_CServices_CStore_CIStoreAppLicense* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* get_IsTrial)(__x_ABI_CWindows_CServices_CStore_CIStoreAppLicense* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* get_ExpirationDate)(__x_ABI_CWindows_CServices_CStore_CIStoreAppLicense* This,
        struct __x_ABI_CWindows_CFoundation_CDateTime* value);
    HRESULT (STDMETHODCALLTYPE* get_ExtendedJsonData)(__x_ABI_CWindows_CServices_CStore_CIStoreAppLicense* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_AddOnLicenses)(__x_ABI_CWindows_CServices_CStore_CIStoreAppLicense* This,
        __x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CServices__CStore__CStoreLicense** value);
    HRESULT (STDMETHODCALLTYPE* get_TrialTimeRemaining)(__x_ABI_CWindows_CServices_CStore_CIStoreAppLicense* This,
        struct __x_ABI_CWindows_CFoundation_CTimeSpan* value);
    HRESULT (STDMETHODCALLTYPE* get_IsTrialOwnedByThisUser)(__x_ABI_CWindows_CServices_CStore_CIStoreAppLicense* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* get_TrialUniqueId)(__x_ABI_CWindows_CServices_CStore_CIStoreAppLicense* This,
        HSTRING* value);

        END_INTERFACE
    } __x_ABI_CWindows_CServices_CStore_CIStoreAppLicenseVtbl;

    interface __x_ABI_CWindows_CServices_CStore_CIStoreAppLicense
    {
        CONST_VTBL struct __x_ABI_CWindows_CServices_CStore_CIStoreAppLicenseVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CServices_CStore_CIStoreAppLicense;
#endif /* !defined(____x_ABI_CWindows_CServices_CStore_CIStoreAppLicense_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CServices_CStore_CIStoreAppLicense2_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CServices_CStore_CIStoreAppLicense2_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CServices_CStore_CIStoreAppLicense2Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CServices_CStore_CIStoreAppLicense2* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CServices_CStore_CIStoreAppLicense2* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CServices_CStore_CIStoreAppLicense2* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CServices_CStore_CIStoreAppLicense2* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CServices_CStore_CIStoreAppLicense2* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CServices_CStore_CIStoreAppLicense2* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_IsDiscLicense)(__x_ABI_CWindows_CServices_CStore_CIStoreAppLicense2* This,
        boolean* value);

        END_INTERFACE
    } __x_ABI_CWindows_CServices_CStore_CIStoreAppLicense2Vtbl;

    interface __x_ABI_CWindows_CServices_CStore_CIStoreAppLicense2
    {
        CONST_VTBL struct __x_ABI_CWindows_CServices_CStore_CIStoreAppLicense2Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CServices_CStore_CIStoreAppLicense2;
#endif /* !defined(____x_ABI_CWindows_CServices_CStore_CIStoreAppLicense2_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CServices_CStore_CIStoreAvailability_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CServices_CStore_CIStoreAvailability_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CServices_CStore_CIStoreAvailabilityVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CServices_CStore_CIStoreAvailability* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CServices_CStore_CIStoreAvailability* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CServices_CStore_CIStoreAvailability* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CServices_CStore_CIStoreAvailability* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CServices_CStore_CIStoreAvailability* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CServices_CStore_CIStoreAvailability* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_StoreId)(__x_ABI_CWindows_CServices_CStore_CIStoreAvailability* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_EndDate)(__x_ABI_CWindows_CServices_CStore_CIStoreAvailability* This,
        struct __x_ABI_CWindows_CFoundation_CDateTime* value);
    HRESULT (STDMETHODCALLTYPE* get_Price)(__x_ABI_CWindows_CServices_CStore_CIStoreAvailability* This,
        __x_ABI_CWindows_CServices_CStore_CIStorePrice** value);
    HRESULT (STDMETHODCALLTYPE* get_ExtendedJsonData)(__x_ABI_CWindows_CServices_CStore_CIStoreAvailability* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* RequestPurchaseAsync)(__x_ABI_CWindows_CServices_CStore_CIStoreAvailability* This,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CStore__CStorePurchaseResult** operation);
    HRESULT (STDMETHODCALLTYPE* RequestPurchaseWithPurchasePropertiesAsync)(__x_ABI_CWindows_CServices_CStore_CIStoreAvailability* This,
        __x_ABI_CWindows_CServices_CStore_CIStorePurchaseProperties* storePurchaseProperties,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CStore__CStorePurchaseResult** operation);

        END_INTERFACE
    } __x_ABI_CWindows_CServices_CStore_CIStoreAvailabilityVtbl;

    interface __x_ABI_CWindows_CServices_CStore_CIStoreAvailability
    {
        CONST_VTBL struct __x_ABI_CWindows_CServices_CStore_CIStoreAvailabilityVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CServices_CStore_CIStoreAvailability;
#endif /* !defined(____x_ABI_CWindows_CServices_CStore_CIStoreAvailability_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CServices_CStore_CIStoreCanAcquireLicenseResult_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CServices_CStore_CIStoreCanAcquireLicenseResult_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CServices_CStore_CIStoreCanAcquireLicenseResultVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CServices_CStore_CIStoreCanAcquireLicenseResult* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CServices_CStore_CIStoreCanAcquireLicenseResult* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CServices_CStore_CIStoreCanAcquireLicenseResult* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CServices_CStore_CIStoreCanAcquireLicenseResult* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CServices_CStore_CIStoreCanAcquireLicenseResult* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CServices_CStore_CIStoreCanAcquireLicenseResult* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_ExtendedError)(__x_ABI_CWindows_CServices_CStore_CIStoreCanAcquireLicenseResult* This,
        HRESULT* value);
    HRESULT (STDMETHODCALLTYPE* get_LicensableSku)(__x_ABI_CWindows_CServices_CStore_CIStoreCanAcquireLicenseResult* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_Status)(__x_ABI_CWindows_CServices_CStore_CIStoreCanAcquireLicenseResult* This,
        enum __x_ABI_CWindows_CServices_CStore_CStoreCanLicenseStatus* value);

        END_INTERFACE
    } __x_ABI_CWindows_CServices_CStore_CIStoreCanAcquireLicenseResultVtbl;

    interface __x_ABI_CWindows_CServices_CStore_CIStoreCanAcquireLicenseResult
    {
        CONST_VTBL struct __x_ABI_CWindows_CServices_CStore_CIStoreCanAcquireLicenseResultVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CServices_CStore_CIStoreCanAcquireLicenseResult;
#endif /* !defined(____x_ABI_CWindows_CServices_CStore_CIStoreCanAcquireLicenseResult_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CServices_CStore_CIStoreCollectionData_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CServices_CStore_CIStoreCollectionData_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CServices_CStore_CIStoreCollectionDataVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CServices_CStore_CIStoreCollectionData* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CServices_CStore_CIStoreCollectionData* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CServices_CStore_CIStoreCollectionData* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CServices_CStore_CIStoreCollectionData* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CServices_CStore_CIStoreCollectionData* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CServices_CStore_CIStoreCollectionData* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_IsTrial)(__x_ABI_CWindows_CServices_CStore_CIStoreCollectionData* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* get_CampaignId)(__x_ABI_CWindows_CServices_CStore_CIStoreCollectionData* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_DeveloperOfferId)(__x_ABI_CWindows_CServices_CStore_CIStoreCollectionData* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_AcquiredDate)(__x_ABI_CWindows_CServices_CStore_CIStoreCollectionData* This,
        struct __x_ABI_CWindows_CFoundation_CDateTime* value);
    HRESULT (STDMETHODCALLTYPE* get_StartDate)(__x_ABI_CWindows_CServices_CStore_CIStoreCollectionData* This,
        struct __x_ABI_CWindows_CFoundation_CDateTime* value);
    HRESULT (STDMETHODCALLTYPE* get_EndDate)(__x_ABI_CWindows_CServices_CStore_CIStoreCollectionData* This,
        struct __x_ABI_CWindows_CFoundation_CDateTime* value);
    HRESULT (STDMETHODCALLTYPE* get_TrialTimeRemaining)(__x_ABI_CWindows_CServices_CStore_CIStoreCollectionData* This,
        struct __x_ABI_CWindows_CFoundation_CTimeSpan* value);
    HRESULT (STDMETHODCALLTYPE* get_ExtendedJsonData)(__x_ABI_CWindows_CServices_CStore_CIStoreCollectionData* This,
        HSTRING* value);

        END_INTERFACE
    } __x_ABI_CWindows_CServices_CStore_CIStoreCollectionDataVtbl;

    interface __x_ABI_CWindows_CServices_CStore_CIStoreCollectionData
    {
        CONST_VTBL struct __x_ABI_CWindows_CServices_CStore_CIStoreCollectionDataVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CServices_CStore_CIStoreCollectionData;
#endif /* !defined(____x_ABI_CWindows_CServices_CStore_CIStoreCollectionData_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CServices_CStore_CIStoreConsumableResult_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CServices_CStore_CIStoreConsumableResult_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CServices_CStore_CIStoreConsumableResultVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CServices_CStore_CIStoreConsumableResult* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CServices_CStore_CIStoreConsumableResult* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CServices_CStore_CIStoreConsumableResult* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CServices_CStore_CIStoreConsumableResult* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CServices_CStore_CIStoreConsumableResult* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CServices_CStore_CIStoreConsumableResult* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Status)(__x_ABI_CWindows_CServices_CStore_CIStoreConsumableResult* This,
        enum __x_ABI_CWindows_CServices_CStore_CStoreConsumableStatus* value);
    HRESULT (STDMETHODCALLTYPE* get_TrackingId)(__x_ABI_CWindows_CServices_CStore_CIStoreConsumableResult* This,
        GUID* value);
    HRESULT (STDMETHODCALLTYPE* get_BalanceRemaining)(__x_ABI_CWindows_CServices_CStore_CIStoreConsumableResult* This,
        UINT32* value);
    HRESULT (STDMETHODCALLTYPE* get_ExtendedError)(__x_ABI_CWindows_CServices_CStore_CIStoreConsumableResult* This,
        HRESULT* value);

        END_INTERFACE
    } __x_ABI_CWindows_CServices_CStore_CIStoreConsumableResultVtbl;

    interface __x_ABI_CWindows_CServices_CStore_CIStoreConsumableResult
    {
        CONST_VTBL struct __x_ABI_CWindows_CServices_CStore_CIStoreConsumableResultVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CServices_CStore_CIStoreConsumableResult;
#endif /* !defined(____x_ABI_CWindows_CServices_CStore_CIStoreConsumableResult_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CServices_CStore_CIStoreContext_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CServices_CStore_CIStoreContext_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CServices_CStore_CIStoreContextVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CServices_CStore_CIStoreContext* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CServices_CStore_CIStoreContext* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CServices_CStore_CIStoreContext* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CServices_CStore_CIStoreContext* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CServices_CStore_CIStoreContext* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CServices_CStore_CIStoreContext* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_User)(__x_ABI_CWindows_CServices_CStore_CIStoreContext* This,
        __x_ABI_CWindows_CSystem_CIUser** value);
    HRESULT (STDMETHODCALLTYPE* add_OfflineLicensesChanged)(__x_ABI_CWindows_CServices_CStore_CIStoreContext* This,
        __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CServices__CStore__CStoreContext_IInspectable* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_OfflineLicensesChanged)(__x_ABI_CWindows_CServices_CStore_CIStoreContext* This,
        EventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* GetCustomerPurchaseIdAsync)(__x_ABI_CWindows_CServices_CStore_CIStoreContext* This,
        HSTRING serviceTicket,
        HSTRING publisherUserId,
        __x_ABI_C__FIAsyncOperation_1_HSTRING** operation);
    HRESULT (STDMETHODCALLTYPE* GetCustomerCollectionsIdAsync)(__x_ABI_CWindows_CServices_CStore_CIStoreContext* This,
        HSTRING serviceTicket,
        HSTRING publisherUserId,
        __x_ABI_C__FIAsyncOperation_1_HSTRING** operation);
    HRESULT (STDMETHODCALLTYPE* GetAppLicenseAsync)(__x_ABI_CWindows_CServices_CStore_CIStoreContext* This,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CStore__CStoreAppLicense** operation);
    HRESULT (STDMETHODCALLTYPE* GetStoreProductForCurrentAppAsync)(__x_ABI_CWindows_CServices_CStore_CIStoreContext* This,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CStore__CStoreProductResult** operation);
    HRESULT (STDMETHODCALLTYPE* GetStoreProductsAsync)(__x_ABI_CWindows_CServices_CStore_CIStoreContext* This,
        __x_ABI_C__FIIterable_1_HSTRING* productKinds,
        __x_ABI_C__FIIterable_1_HSTRING* storeIds,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CStore__CStoreProductQueryResult** operation);
    HRESULT (STDMETHODCALLTYPE* GetAssociatedStoreProductsAsync)(__x_ABI_CWindows_CServices_CStore_CIStoreContext* This,
        __x_ABI_C__FIIterable_1_HSTRING* productKinds,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CStore__CStoreProductQueryResult** operation);
    HRESULT (STDMETHODCALLTYPE* GetAssociatedStoreProductsWithPagingAsync)(__x_ABI_CWindows_CServices_CStore_CIStoreContext* This,
        __x_ABI_C__FIIterable_1_HSTRING* productKinds,
        UINT32 maxItemsToRetrievePerPage,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CStore__CStoreProductPagedQueryResult** operation);
    HRESULT (STDMETHODCALLTYPE* GetUserCollectionAsync)(__x_ABI_CWindows_CServices_CStore_CIStoreContext* This,
        __x_ABI_C__FIIterable_1_HSTRING* productKinds,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CStore__CStoreProductQueryResult** operation);
    HRESULT (STDMETHODCALLTYPE* GetUserCollectionWithPagingAsync)(__x_ABI_CWindows_CServices_CStore_CIStoreContext* This,
        __x_ABI_C__FIIterable_1_HSTRING* productKinds,
        UINT32 maxItemsToRetrievePerPage,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CStore__CStoreProductPagedQueryResult** operation);
    HRESULT (STDMETHODCALLTYPE* ReportConsumableFulfillmentAsync)(__x_ABI_CWindows_CServices_CStore_CIStoreContext* This,
        HSTRING productStoreId,
        UINT32 quantity,
        GUID trackingId,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CStore__CStoreConsumableResult** operation);
    HRESULT (STDMETHODCALLTYPE* GetConsumableBalanceRemainingAsync)(__x_ABI_CWindows_CServices_CStore_CIStoreContext* This,
        HSTRING productStoreId,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CStore__CStoreConsumableResult** operation);
    HRESULT (STDMETHODCALLTYPE* AcquireStoreLicenseForOptionalPackageAsync)(__x_ABI_CWindows_CServices_CStore_CIStoreContext* This,
        __x_ABI_CWindows_CApplicationModel_CIPackage* optionalPackage,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CStore__CStoreAcquireLicenseResult** operation);
    HRESULT (STDMETHODCALLTYPE* RequestPurchaseAsync)(__x_ABI_CWindows_CServices_CStore_CIStoreContext* This,
        HSTRING storeId,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CStore__CStorePurchaseResult** operation);
    HRESULT (STDMETHODCALLTYPE* RequestPurchaseWithPurchasePropertiesAsync)(__x_ABI_CWindows_CServices_CStore_CIStoreContext* This,
        HSTRING storeId,
        __x_ABI_CWindows_CServices_CStore_CIStorePurchaseProperties* storePurchaseProperties,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CStore__CStorePurchaseResult** operation);
    HRESULT (STDMETHODCALLTYPE* GetAppAndOptionalStorePackageUpdatesAsync)(__x_ABI_CWindows_CServices_CStore_CIStoreContext* This,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CStore__CStorePackageUpdate** operation);
    HRESULT (STDMETHODCALLTYPE* RequestDownloadStorePackageUpdatesAsync)(__x_ABI_CWindows_CServices_CStore_CIStoreContext* This,
        __x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CStore__CStorePackageUpdate* storePackageUpdates,
        __x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CServices__CStore__CStorePackageUpdateResult___x_ABI_CWindows__CServices__CStore__CStorePackageUpdateStatus** operation);
    HRESULT (STDMETHODCALLTYPE* RequestDownloadAndInstallStorePackageUpdatesAsync)(__x_ABI_CWindows_CServices_CStore_CIStoreContext* This,
        __x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CStore__CStorePackageUpdate* storePackageUpdates,
        __x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CServices__CStore__CStorePackageUpdateResult___x_ABI_CWindows__CServices__CStore__CStorePackageUpdateStatus** operation);
    HRESULT (STDMETHODCALLTYPE* RequestDownloadAndInstallStorePackagesAsync)(__x_ABI_CWindows_CServices_CStore_CIStoreContext* This,
        __x_ABI_C__FIIterable_1_HSTRING* storeIds,
        __x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CServices__CStore__CStorePackageUpdateResult___x_ABI_CWindows__CServices__CStore__CStorePackageUpdateStatus** operation);

        END_INTERFACE
    } __x_ABI_CWindows_CServices_CStore_CIStoreContextVtbl;

    interface __x_ABI_CWindows_CServices_CStore_CIStoreContext
    {
        CONST_VTBL struct __x_ABI_CWindows_CServices_CStore_CIStoreContextVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CServices_CStore_CIStoreContext;
#endif /* !defined(____x_ABI_CWindows_CServices_CStore_CIStoreContext_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CServices_CStore_CIStoreContext2_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CServices_CStore_CIStoreContext2_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CServices_CStore_CIStoreContext2Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CServices_CStore_CIStoreContext2* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CServices_CStore_CIStoreContext2* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CServices_CStore_CIStoreContext2* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CServices_CStore_CIStoreContext2* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CServices_CStore_CIStoreContext2* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CServices_CStore_CIStoreContext2* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* FindStoreProductForPackageAsync)(__x_ABI_CWindows_CServices_CStore_CIStoreContext2* This,
        __x_ABI_C__FIIterable_1_HSTRING* productKinds,
        __x_ABI_CWindows_CApplicationModel_CIPackage* package,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CStore__CStoreProductResult** operation);

        END_INTERFACE
    } __x_ABI_CWindows_CServices_CStore_CIStoreContext2Vtbl;

    interface __x_ABI_CWindows_CServices_CStore_CIStoreContext2
    {
        CONST_VTBL struct __x_ABI_CWindows_CServices_CStore_CIStoreContext2Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CServices_CStore_CIStoreContext2;
#endif /* !defined(____x_ABI_CWindows_CServices_CStore_CIStoreContext2_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CServices_CStore_CIStoreContext3_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CServices_CStore_CIStoreContext3_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CServices_CStore_CIStoreContext3Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CServices_CStore_CIStoreContext3* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CServices_CStore_CIStoreContext3* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CServices_CStore_CIStoreContext3* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CServices_CStore_CIStoreContext3* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CServices_CStore_CIStoreContext3* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CServices_CStore_CIStoreContext3* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_CanSilentlyDownloadStorePackageUpdates)(__x_ABI_CWindows_CServices_CStore_CIStoreContext3* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* TrySilentDownloadStorePackageUpdatesAsync)(__x_ABI_CWindows_CServices_CStore_CIStoreContext3* This,
        __x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CStore__CStorePackageUpdate* storePackageUpdates,
        __x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CServices__CStore__CStorePackageUpdateResult___x_ABI_CWindows__CServices__CStore__CStorePackageUpdateStatus** operation);
    HRESULT (STDMETHODCALLTYPE* TrySilentDownloadAndInstallStorePackageUpdatesAsync)(__x_ABI_CWindows_CServices_CStore_CIStoreContext3* This,
        __x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CStore__CStorePackageUpdate* storePackageUpdates,
        __x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CServices__CStore__CStorePackageUpdateResult___x_ABI_CWindows__CServices__CStore__CStorePackageUpdateStatus** operation);
    HRESULT (STDMETHODCALLTYPE* CanAcquireStoreLicenseForOptionalPackageAsync)(__x_ABI_CWindows_CServices_CStore_CIStoreContext3* This,
        __x_ABI_CWindows_CApplicationModel_CIPackage* optionalPackage,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CStore__CStoreCanAcquireLicenseResult** operation);
    HRESULT (STDMETHODCALLTYPE* CanAcquireStoreLicenseAsync)(__x_ABI_CWindows_CServices_CStore_CIStoreContext3* This,
        HSTRING productStoreId,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CStore__CStoreCanAcquireLicenseResult** operation);
    HRESULT (STDMETHODCALLTYPE* GetStoreProductsWithOptionsAsync)(__x_ABI_CWindows_CServices_CStore_CIStoreContext3* This,
        __x_ABI_C__FIIterable_1_HSTRING* productKinds,
        __x_ABI_C__FIIterable_1_HSTRING* storeIds,
        __x_ABI_CWindows_CServices_CStore_CIStoreProductOptions* storeProductOptions,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CStore__CStoreProductQueryResult** operation);
    HRESULT (STDMETHODCALLTYPE* GetAssociatedStoreQueueItemsAsync)(__x_ABI_CWindows_CServices_CStore_CIStoreContext3* This,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CStore__CStoreQueueItem** operation);
    HRESULT (STDMETHODCALLTYPE* GetStoreQueueItemsAsync)(__x_ABI_CWindows_CServices_CStore_CIStoreContext3* This,
        __x_ABI_C__FIIterable_1_HSTRING* storeIds,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CStore__CStoreQueueItem** operation);
    HRESULT (STDMETHODCALLTYPE* RequestDownloadAndInstallStorePackagesWithInstallOptionsAsync)(__x_ABI_CWindows_CServices_CStore_CIStoreContext3* This,
        __x_ABI_C__FIIterable_1_HSTRING* storeIds,
        __x_ABI_CWindows_CServices_CStore_CIStorePackageInstallOptions* storePackageInstallOptions,
        __x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CServices__CStore__CStorePackageUpdateResult___x_ABI_CWindows__CServices__CStore__CStorePackageUpdateStatus** operation);
    HRESULT (STDMETHODCALLTYPE* DownloadAndInstallStorePackagesAsync)(__x_ABI_CWindows_CServices_CStore_CIStoreContext3* This,
        __x_ABI_C__FIIterable_1_HSTRING* storeIds,
        __x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CServices__CStore__CStorePackageUpdateResult___x_ABI_CWindows__CServices__CStore__CStorePackageUpdateStatus** operation);
    HRESULT (STDMETHODCALLTYPE* RequestUninstallStorePackageAsync)(__x_ABI_CWindows_CServices_CStore_CIStoreContext3* This,
        __x_ABI_CWindows_CApplicationModel_CIPackage* package,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CStore__CStoreUninstallStorePackageResult** operation);
    HRESULT (STDMETHODCALLTYPE* RequestUninstallStorePackageByStoreIdAsync)(__x_ABI_CWindows_CServices_CStore_CIStoreContext3* This,
        HSTRING storeId,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CStore__CStoreUninstallStorePackageResult** operation);
    HRESULT (STDMETHODCALLTYPE* UninstallStorePackageAsync)(__x_ABI_CWindows_CServices_CStore_CIStoreContext3* This,
        __x_ABI_CWindows_CApplicationModel_CIPackage* package,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CStore__CStoreUninstallStorePackageResult** operation);
    HRESULT (STDMETHODCALLTYPE* UninstallStorePackageByStoreIdAsync)(__x_ABI_CWindows_CServices_CStore_CIStoreContext3* This,
        HSTRING storeId,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CStore__CStoreUninstallStorePackageResult** operation);

        END_INTERFACE
    } __x_ABI_CWindows_CServices_CStore_CIStoreContext3Vtbl;

    interface __x_ABI_CWindows_CServices_CStore_CIStoreContext3
    {
        CONST_VTBL struct __x_ABI_CWindows_CServices_CStore_CIStoreContext3Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CServices_CStore_CIStoreContext3;
#endif /* !defined(____x_ABI_CWindows_CServices_CStore_CIStoreContext3_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CServices_CStore_CIStoreContext4_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CServices_CStore_CIStoreContext4_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CServices_CStore_CIStoreContext4Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CServices_CStore_CIStoreContext4* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CServices_CStore_CIStoreContext4* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CServices_CStore_CIStoreContext4* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CServices_CStore_CIStoreContext4* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CServices_CStore_CIStoreContext4* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CServices_CStore_CIStoreContext4* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* RequestRateAndReviewAppAsync)(__x_ABI_CWindows_CServices_CStore_CIStoreContext4* This,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CStore__CStoreRateAndReviewResult** operation);
    HRESULT (STDMETHODCALLTYPE* SetInstallOrderForAssociatedStoreQueueItemsAsync)(__x_ABI_CWindows_CServices_CStore_CIStoreContext4* This,
        __x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CStore__CStoreQueueItem* items,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CStore__CStoreQueueItem** operation);

        END_INTERFACE
    } __x_ABI_CWindows_CServices_CStore_CIStoreContext4Vtbl;

    interface __x_ABI_CWindows_CServices_CStore_CIStoreContext4
    {
        CONST_VTBL struct __x_ABI_CWindows_CServices_CStore_CIStoreContext4Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CServices_CStore_CIStoreContext4;
#endif /* !defined(____x_ABI_CWindows_CServices_CStore_CIStoreContext4_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CServices_CStore_CIStoreContextStatics_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CServices_CStore_CIStoreContextStatics_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CServices_CStore_CIStoreContextStaticsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CServices_CStore_CIStoreContextStatics* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CServices_CStore_CIStoreContextStatics* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CServices_CStore_CIStoreContextStatics* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CServices_CStore_CIStoreContextStatics* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CServices_CStore_CIStoreContextStatics* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CServices_CStore_CIStoreContextStatics* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetDefault)(__x_ABI_CWindows_CServices_CStore_CIStoreContextStatics* This,
        __x_ABI_CWindows_CServices_CStore_CIStoreContext** value);
    HRESULT (STDMETHODCALLTYPE* GetForUser)(__x_ABI_CWindows_CServices_CStore_CIStoreContextStatics* This,
        __x_ABI_CWindows_CSystem_CIUser* user,
        __x_ABI_CWindows_CServices_CStore_CIStoreContext** value);

        END_INTERFACE
    } __x_ABI_CWindows_CServices_CStore_CIStoreContextStaticsVtbl;

    interface __x_ABI_CWindows_CServices_CStore_CIStoreContextStatics
    {
        CONST_VTBL struct __x_ABI_CWindows_CServices_CStore_CIStoreContextStaticsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CServices_CStore_CIStoreContextStatics;
#endif /* !defined(____x_ABI_CWindows_CServices_CStore_CIStoreContextStatics_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CServices_CStore_CIStoreImage_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CServices_CStore_CIStoreImage_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CServices_CStore_CIStoreImageVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CServices_CStore_CIStoreImage* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CServices_CStore_CIStoreImage* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CServices_CStore_CIStoreImage* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CServices_CStore_CIStoreImage* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CServices_CStore_CIStoreImage* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CServices_CStore_CIStoreImage* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Uri)(__x_ABI_CWindows_CServices_CStore_CIStoreImage* This,
        __x_ABI_CWindows_CFoundation_CIUriRuntimeClass** value);
    HRESULT (STDMETHODCALLTYPE* get_ImagePurposeTag)(__x_ABI_CWindows_CServices_CStore_CIStoreImage* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_Width)(__x_ABI_CWindows_CServices_CStore_CIStoreImage* This,
        UINT32* value);
    HRESULT (STDMETHODCALLTYPE* get_Height)(__x_ABI_CWindows_CServices_CStore_CIStoreImage* This,
        UINT32* value);
    HRESULT (STDMETHODCALLTYPE* get_Caption)(__x_ABI_CWindows_CServices_CStore_CIStoreImage* This,
        HSTRING* value);

        END_INTERFACE
    } __x_ABI_CWindows_CServices_CStore_CIStoreImageVtbl;

    interface __x_ABI_CWindows_CServices_CStore_CIStoreImage
    {
        CONST_VTBL struct __x_ABI_CWindows_CServices_CStore_CIStoreImageVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CServices_CStore_CIStoreImage;
#endif /* !defined(____x_ABI_CWindows_CServices_CStore_CIStoreImage_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CServices_CStore_CIStoreLicense_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CServices_CStore_CIStoreLicense_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CServices_CStore_CIStoreLicenseVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CServices_CStore_CIStoreLicense* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CServices_CStore_CIStoreLicense* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CServices_CStore_CIStoreLicense* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CServices_CStore_CIStoreLicense* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CServices_CStore_CIStoreLicense* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CServices_CStore_CIStoreLicense* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_SkuStoreId)(__x_ABI_CWindows_CServices_CStore_CIStoreLicense* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_IsActive)(__x_ABI_CWindows_CServices_CStore_CIStoreLicense* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* get_ExpirationDate)(__x_ABI_CWindows_CServices_CStore_CIStoreLicense* This,
        struct __x_ABI_CWindows_CFoundation_CDateTime* value);
    HRESULT (STDMETHODCALLTYPE* get_ExtendedJsonData)(__x_ABI_CWindows_CServices_CStore_CIStoreLicense* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_InAppOfferToken)(__x_ABI_CWindows_CServices_CStore_CIStoreLicense* This,
        HSTRING* value);

        END_INTERFACE
    } __x_ABI_CWindows_CServices_CStore_CIStoreLicenseVtbl;

    interface __x_ABI_CWindows_CServices_CStore_CIStoreLicense
    {
        CONST_VTBL struct __x_ABI_CWindows_CServices_CStore_CIStoreLicenseVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CServices_CStore_CIStoreLicense;
#endif /* !defined(____x_ABI_CWindows_CServices_CStore_CIStoreLicense_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CServices_CStore_CIStorePackageInstallOptions_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CServices_CStore_CIStorePackageInstallOptions_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CServices_CStore_CIStorePackageInstallOptionsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CServices_CStore_CIStorePackageInstallOptions* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CServices_CStore_CIStorePackageInstallOptions* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CServices_CStore_CIStorePackageInstallOptions* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CServices_CStore_CIStorePackageInstallOptions* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CServices_CStore_CIStorePackageInstallOptions* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CServices_CStore_CIStorePackageInstallOptions* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_AllowForcedAppRestart)(__x_ABI_CWindows_CServices_CStore_CIStorePackageInstallOptions* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* put_AllowForcedAppRestart)(__x_ABI_CWindows_CServices_CStore_CIStorePackageInstallOptions* This,
        boolean value);

        END_INTERFACE
    } __x_ABI_CWindows_CServices_CStore_CIStorePackageInstallOptionsVtbl;

    interface __x_ABI_CWindows_CServices_CStore_CIStorePackageInstallOptions
    {
        CONST_VTBL struct __x_ABI_CWindows_CServices_CStore_CIStorePackageInstallOptionsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CServices_CStore_CIStorePackageInstallOptions;
#endif /* !defined(____x_ABI_CWindows_CServices_CStore_CIStorePackageInstallOptions_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CServices_CStore_CIStorePackageLicense_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CServices_CStore_CIStorePackageLicense_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CServices_CStore_CIStorePackageLicenseVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CServices_CStore_CIStorePackageLicense* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CServices_CStore_CIStorePackageLicense* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CServices_CStore_CIStorePackageLicense* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CServices_CStore_CIStorePackageLicense* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CServices_CStore_CIStorePackageLicense* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CServices_CStore_CIStorePackageLicense* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* add_LicenseLost)(__x_ABI_CWindows_CServices_CStore_CIStorePackageLicense* This,
        __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CServices__CStore__CStorePackageLicense_IInspectable* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_LicenseLost)(__x_ABI_CWindows_CServices_CStore_CIStorePackageLicense* This,
        EventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* get_Package)(__x_ABI_CWindows_CServices_CStore_CIStorePackageLicense* This,
        __x_ABI_CWindows_CApplicationModel_CIPackage** value);
    HRESULT (STDMETHODCALLTYPE* get_IsValid)(__x_ABI_CWindows_CServices_CStore_CIStorePackageLicense* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* ReleaseLicense)(__x_ABI_CWindows_CServices_CStore_CIStorePackageLicense* This);

        END_INTERFACE
    } __x_ABI_CWindows_CServices_CStore_CIStorePackageLicenseVtbl;

    interface __x_ABI_CWindows_CServices_CStore_CIStorePackageLicense
    {
        CONST_VTBL struct __x_ABI_CWindows_CServices_CStore_CIStorePackageLicenseVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CServices_CStore_CIStorePackageLicense;
#endif /* !defined(____x_ABI_CWindows_CServices_CStore_CIStorePackageLicense_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CServices_CStore_CIStorePackageUpdate_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CServices_CStore_CIStorePackageUpdate_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CServices_CStore_CIStorePackageUpdateVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CServices_CStore_CIStorePackageUpdate* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CServices_CStore_CIStorePackageUpdate* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CServices_CStore_CIStorePackageUpdate* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CServices_CStore_CIStorePackageUpdate* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CServices_CStore_CIStorePackageUpdate* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CServices_CStore_CIStorePackageUpdate* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Package)(__x_ABI_CWindows_CServices_CStore_CIStorePackageUpdate* This,
        __x_ABI_CWindows_CApplicationModel_CIPackage** value);
    HRESULT (STDMETHODCALLTYPE* get_Mandatory)(__x_ABI_CWindows_CServices_CStore_CIStorePackageUpdate* This,
        boolean* value);

        END_INTERFACE
    } __x_ABI_CWindows_CServices_CStore_CIStorePackageUpdateVtbl;

    interface __x_ABI_CWindows_CServices_CStore_CIStorePackageUpdate
    {
        CONST_VTBL struct __x_ABI_CWindows_CServices_CStore_CIStorePackageUpdateVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CServices_CStore_CIStorePackageUpdate;
#endif /* !defined(____x_ABI_CWindows_CServices_CStore_CIStorePackageUpdate_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CServices_CStore_CIStorePackageUpdateResult_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CServices_CStore_CIStorePackageUpdateResult_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CServices_CStore_CIStorePackageUpdateResultVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CServices_CStore_CIStorePackageUpdateResult* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CServices_CStore_CIStorePackageUpdateResult* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CServices_CStore_CIStorePackageUpdateResult* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CServices_CStore_CIStorePackageUpdateResult* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CServices_CStore_CIStorePackageUpdateResult* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CServices_CStore_CIStorePackageUpdateResult* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_OverallState)(__x_ABI_CWindows_CServices_CStore_CIStorePackageUpdateResult* This,
        enum __x_ABI_CWindows_CServices_CStore_CStorePackageUpdateState* value);
    HRESULT (STDMETHODCALLTYPE* get_StorePackageUpdateStatuses)(__x_ABI_CWindows_CServices_CStore_CIStorePackageUpdateResult* This,
        __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CStore__CStorePackageUpdateStatus** value);

        END_INTERFACE
    } __x_ABI_CWindows_CServices_CStore_CIStorePackageUpdateResultVtbl;

    interface __x_ABI_CWindows_CServices_CStore_CIStorePackageUpdateResult
    {
        CONST_VTBL struct __x_ABI_CWindows_CServices_CStore_CIStorePackageUpdateResultVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CServices_CStore_CIStorePackageUpdateResult;
#endif /* !defined(____x_ABI_CWindows_CServices_CStore_CIStorePackageUpdateResult_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CServices_CStore_CIStorePackageUpdateResult2_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CServices_CStore_CIStorePackageUpdateResult2_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CServices_CStore_CIStorePackageUpdateResult2Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CServices_CStore_CIStorePackageUpdateResult2* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CServices_CStore_CIStorePackageUpdateResult2* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CServices_CStore_CIStorePackageUpdateResult2* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CServices_CStore_CIStorePackageUpdateResult2* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CServices_CStore_CIStorePackageUpdateResult2* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CServices_CStore_CIStorePackageUpdateResult2* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_StoreQueueItems)(__x_ABI_CWindows_CServices_CStore_CIStorePackageUpdateResult2* This,
        __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CStore__CStoreQueueItem** value);

        END_INTERFACE
    } __x_ABI_CWindows_CServices_CStore_CIStorePackageUpdateResult2Vtbl;

    interface __x_ABI_CWindows_CServices_CStore_CIStorePackageUpdateResult2
    {
        CONST_VTBL struct __x_ABI_CWindows_CServices_CStore_CIStorePackageUpdateResult2Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CServices_CStore_CIStorePackageUpdateResult2;
#endif /* !defined(____x_ABI_CWindows_CServices_CStore_CIStorePackageUpdateResult2_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CServices_CStore_CIStorePrice_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CServices_CStore_CIStorePrice_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CServices_CStore_CIStorePriceVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CServices_CStore_CIStorePrice* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CServices_CStore_CIStorePrice* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CServices_CStore_CIStorePrice* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CServices_CStore_CIStorePrice* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CServices_CStore_CIStorePrice* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CServices_CStore_CIStorePrice* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_FormattedBasePrice)(__x_ABI_CWindows_CServices_CStore_CIStorePrice* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_FormattedPrice)(__x_ABI_CWindows_CServices_CStore_CIStorePrice* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_IsOnSale)(__x_ABI_CWindows_CServices_CStore_CIStorePrice* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* get_SaleEndDate)(__x_ABI_CWindows_CServices_CStore_CIStorePrice* This,
        struct __x_ABI_CWindows_CFoundation_CDateTime* value);
    HRESULT (STDMETHODCALLTYPE* get_CurrencyCode)(__x_ABI_CWindows_CServices_CStore_CIStorePrice* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_FormattedRecurrencePrice)(__x_ABI_CWindows_CServices_CStore_CIStorePrice* This,
        HSTRING* value);

        END_INTERFACE
    } __x_ABI_CWindows_CServices_CStore_CIStorePriceVtbl;

    interface __x_ABI_CWindows_CServices_CStore_CIStorePrice
    {
        CONST_VTBL struct __x_ABI_CWindows_CServices_CStore_CIStorePriceVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CServices_CStore_CIStorePrice;
#endif /* !defined(____x_ABI_CWindows_CServices_CStore_CIStorePrice_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CServices_CStore_CIStoreProduct_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CServices_CStore_CIStoreProduct_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CServices_CStore_CIStoreProductVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CServices_CStore_CIStoreProduct* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CServices_CStore_CIStoreProduct* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CServices_CStore_CIStoreProduct* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CServices_CStore_CIStoreProduct* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CServices_CStore_CIStoreProduct* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CServices_CStore_CIStoreProduct* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_StoreId)(__x_ABI_CWindows_CServices_CStore_CIStoreProduct* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_Language)(__x_ABI_CWindows_CServices_CStore_CIStoreProduct* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_Title)(__x_ABI_CWindows_CServices_CStore_CIStoreProduct* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_Description)(__x_ABI_CWindows_CServices_CStore_CIStoreProduct* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_ProductKind)(__x_ABI_CWindows_CServices_CStore_CIStoreProduct* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_HasDigitalDownload)(__x_ABI_CWindows_CServices_CStore_CIStoreProduct* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* get_Keywords)(__x_ABI_CWindows_CServices_CStore_CIStoreProduct* This,
        __x_ABI_C__FIVectorView_1_HSTRING** value);
    HRESULT (STDMETHODCALLTYPE* get_Images)(__x_ABI_CWindows_CServices_CStore_CIStoreProduct* This,
        __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CStore__CStoreImage** value);
    HRESULT (STDMETHODCALLTYPE* get_Videos)(__x_ABI_CWindows_CServices_CStore_CIStoreProduct* This,
        __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CStore__CStoreVideo** value);
    HRESULT (STDMETHODCALLTYPE* get_Skus)(__x_ABI_CWindows_CServices_CStore_CIStoreProduct* This,
        __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CStore__CStoreSku** value);
    HRESULT (STDMETHODCALLTYPE* get_IsInUserCollection)(__x_ABI_CWindows_CServices_CStore_CIStoreProduct* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* get_Price)(__x_ABI_CWindows_CServices_CStore_CIStoreProduct* This,
        __x_ABI_CWindows_CServices_CStore_CIStorePrice** value);
    HRESULT (STDMETHODCALLTYPE* get_ExtendedJsonData)(__x_ABI_CWindows_CServices_CStore_CIStoreProduct* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_LinkUri)(__x_ABI_CWindows_CServices_CStore_CIStoreProduct* This,
        __x_ABI_CWindows_CFoundation_CIUriRuntimeClass** value);
    HRESULT (STDMETHODCALLTYPE* GetIsAnySkuInstalledAsync)(__x_ABI_CWindows_CServices_CStore_CIStoreProduct* This,
        __x_ABI_C__FIAsyncOperation_1_boolean** operation);
    HRESULT (STDMETHODCALLTYPE* RequestPurchaseAsync)(__x_ABI_CWindows_CServices_CStore_CIStoreProduct* This,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CStore__CStorePurchaseResult** operation);
    HRESULT (STDMETHODCALLTYPE* RequestPurchaseWithPurchasePropertiesAsync)(__x_ABI_CWindows_CServices_CStore_CIStoreProduct* This,
        __x_ABI_CWindows_CServices_CStore_CIStorePurchaseProperties* storePurchaseProperties,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CStore__CStorePurchaseResult** operation);
    HRESULT (STDMETHODCALLTYPE* get_InAppOfferToken)(__x_ABI_CWindows_CServices_CStore_CIStoreProduct* This,
        HSTRING* value);

        END_INTERFACE
    } __x_ABI_CWindows_CServices_CStore_CIStoreProductVtbl;

    interface __x_ABI_CWindows_CServices_CStore_CIStoreProduct
    {
        CONST_VTBL struct __x_ABI_CWindows_CServices_CStore_CIStoreProductVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CServices_CStore_CIStoreProduct;
#endif /* !defined(____x_ABI_CWindows_CServices_CStore_CIStoreProduct_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CServices_CStore_CIStoreProductOptions_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CServices_CStore_CIStoreProductOptions_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CServices_CStore_CIStoreProductOptionsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CServices_CStore_CIStoreProductOptions* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CServices_CStore_CIStoreProductOptions* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CServices_CStore_CIStoreProductOptions* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CServices_CStore_CIStoreProductOptions* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CServices_CStore_CIStoreProductOptions* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CServices_CStore_CIStoreProductOptions* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_ActionFilters)(__x_ABI_CWindows_CServices_CStore_CIStoreProductOptions* This,
        __x_ABI_C__FIVector_1_HSTRING** value);

        END_INTERFACE
    } __x_ABI_CWindows_CServices_CStore_CIStoreProductOptionsVtbl;

    interface __x_ABI_CWindows_CServices_CStore_CIStoreProductOptions
    {
        CONST_VTBL struct __x_ABI_CWindows_CServices_CStore_CIStoreProductOptionsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CServices_CStore_CIStoreProductOptions;
#endif /* !defined(____x_ABI_CWindows_CServices_CStore_CIStoreProductOptions_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CServices_CStore_CIStoreProductPagedQueryResult_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CServices_CStore_CIStoreProductPagedQueryResult_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CServices_CStore_CIStoreProductPagedQueryResultVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CServices_CStore_CIStoreProductPagedQueryResult* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CServices_CStore_CIStoreProductPagedQueryResult* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CServices_CStore_CIStoreProductPagedQueryResult* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CServices_CStore_CIStoreProductPagedQueryResult* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CServices_CStore_CIStoreProductPagedQueryResult* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CServices_CStore_CIStoreProductPagedQueryResult* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Products)(__x_ABI_CWindows_CServices_CStore_CIStoreProductPagedQueryResult* This,
        __x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CServices__CStore__CStoreProduct** value);
    HRESULT (STDMETHODCALLTYPE* get_HasMoreResults)(__x_ABI_CWindows_CServices_CStore_CIStoreProductPagedQueryResult* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* get_ExtendedError)(__x_ABI_CWindows_CServices_CStore_CIStoreProductPagedQueryResult* This,
        HRESULT* value);
    HRESULT (STDMETHODCALLTYPE* GetNextAsync)(__x_ABI_CWindows_CServices_CStore_CIStoreProductPagedQueryResult* This,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CStore__CStoreProductPagedQueryResult** operation);

        END_INTERFACE
    } __x_ABI_CWindows_CServices_CStore_CIStoreProductPagedQueryResultVtbl;

    interface __x_ABI_CWindows_CServices_CStore_CIStoreProductPagedQueryResult
    {
        CONST_VTBL struct __x_ABI_CWindows_CServices_CStore_CIStoreProductPagedQueryResultVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CServices_CStore_CIStoreProductPagedQueryResult;
#endif /* !defined(____x_ABI_CWindows_CServices_CStore_CIStoreProductPagedQueryResult_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CServices_CStore_CIStoreProductQueryResult_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CServices_CStore_CIStoreProductQueryResult_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CServices_CStore_CIStoreProductQueryResultVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CServices_CStore_CIStoreProductQueryResult* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CServices_CStore_CIStoreProductQueryResult* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CServices_CStore_CIStoreProductQueryResult* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CServices_CStore_CIStoreProductQueryResult* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CServices_CStore_CIStoreProductQueryResult* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CServices_CStore_CIStoreProductQueryResult* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Products)(__x_ABI_CWindows_CServices_CStore_CIStoreProductQueryResult* This,
        __x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CServices__CStore__CStoreProduct** value);
    HRESULT (STDMETHODCALLTYPE* get_ExtendedError)(__x_ABI_CWindows_CServices_CStore_CIStoreProductQueryResult* This,
        HRESULT* value);

        END_INTERFACE
    } __x_ABI_CWindows_CServices_CStore_CIStoreProductQueryResultVtbl;

    interface __x_ABI_CWindows_CServices_CStore_CIStoreProductQueryResult
    {
        CONST_VTBL struct __x_ABI_CWindows_CServices_CStore_CIStoreProductQueryResultVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CServices_CStore_CIStoreProductQueryResult;
#endif /* !defined(____x_ABI_CWindows_CServices_CStore_CIStoreProductQueryResult_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CServices_CStore_CIStoreProductResult_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CServices_CStore_CIStoreProductResult_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CServices_CStore_CIStoreProductResultVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CServices_CStore_CIStoreProductResult* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CServices_CStore_CIStoreProductResult* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CServices_CStore_CIStoreProductResult* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CServices_CStore_CIStoreProductResult* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CServices_CStore_CIStoreProductResult* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CServices_CStore_CIStoreProductResult* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Product)(__x_ABI_CWindows_CServices_CStore_CIStoreProductResult* This,
        __x_ABI_CWindows_CServices_CStore_CIStoreProduct** value);
    HRESULT (STDMETHODCALLTYPE* get_ExtendedError)(__x_ABI_CWindows_CServices_CStore_CIStoreProductResult* This,
        HRESULT* value);

        END_INTERFACE
    } __x_ABI_CWindows_CServices_CStore_CIStoreProductResultVtbl;

    interface __x_ABI_CWindows_CServices_CStore_CIStoreProductResult
    {
        CONST_VTBL struct __x_ABI_CWindows_CServices_CStore_CIStoreProductResultVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CServices_CStore_CIStoreProductResult;
#endif /* !defined(____x_ABI_CWindows_CServices_CStore_CIStoreProductResult_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CServices_CStore_CIStorePurchaseProperties_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CServices_CStore_CIStorePurchaseProperties_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CServices_CStore_CIStorePurchasePropertiesVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CServices_CStore_CIStorePurchaseProperties* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CServices_CStore_CIStorePurchaseProperties* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CServices_CStore_CIStorePurchaseProperties* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CServices_CStore_CIStorePurchaseProperties* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CServices_CStore_CIStorePurchaseProperties* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CServices_CStore_CIStorePurchaseProperties* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Name)(__x_ABI_CWindows_CServices_CStore_CIStorePurchaseProperties* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* put_Name)(__x_ABI_CWindows_CServices_CStore_CIStorePurchaseProperties* This,
        HSTRING value);
    HRESULT (STDMETHODCALLTYPE* get_ExtendedJsonData)(__x_ABI_CWindows_CServices_CStore_CIStorePurchaseProperties* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* put_ExtendedJsonData)(__x_ABI_CWindows_CServices_CStore_CIStorePurchaseProperties* This,
        HSTRING value);

        END_INTERFACE
    } __x_ABI_CWindows_CServices_CStore_CIStorePurchasePropertiesVtbl;

    interface __x_ABI_CWindows_CServices_CStore_CIStorePurchaseProperties
    {
        CONST_VTBL struct __x_ABI_CWindows_CServices_CStore_CIStorePurchasePropertiesVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CServices_CStore_CIStorePurchaseProperties;
#endif /* !defined(____x_ABI_CWindows_CServices_CStore_CIStorePurchaseProperties_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CServices_CStore_CIStorePurchasePropertiesFactory_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CServices_CStore_CIStorePurchasePropertiesFactory_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CServices_CStore_CIStorePurchasePropertiesFactoryVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CServices_CStore_CIStorePurchasePropertiesFactory* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CServices_CStore_CIStorePurchasePropertiesFactory* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CServices_CStore_CIStorePurchasePropertiesFactory* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CServices_CStore_CIStorePurchasePropertiesFactory* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CServices_CStore_CIStorePurchasePropertiesFactory* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CServices_CStore_CIStorePurchasePropertiesFactory* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* Create)(__x_ABI_CWindows_CServices_CStore_CIStorePurchasePropertiesFactory* This,
        HSTRING name,
        __x_ABI_CWindows_CServices_CStore_CIStorePurchaseProperties** storePurchaseProperties);

        END_INTERFACE
    } __x_ABI_CWindows_CServices_CStore_CIStorePurchasePropertiesFactoryVtbl;

    interface __x_ABI_CWindows_CServices_CStore_CIStorePurchasePropertiesFactory
    {
        CONST_VTBL struct __x_ABI_CWindows_CServices_CStore_CIStorePurchasePropertiesFactoryVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CServices_CStore_CIStorePurchasePropertiesFactory;
#endif /* !defined(____x_ABI_CWindows_CServices_CStore_CIStorePurchasePropertiesFactory_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CServices_CStore_CIStorePurchaseResult_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CServices_CStore_CIStorePurchaseResult_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CServices_CStore_CIStorePurchaseResultVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CServices_CStore_CIStorePurchaseResult* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CServices_CStore_CIStorePurchaseResult* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CServices_CStore_CIStorePurchaseResult* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CServices_CStore_CIStorePurchaseResult* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CServices_CStore_CIStorePurchaseResult* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CServices_CStore_CIStorePurchaseResult* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Status)(__x_ABI_CWindows_CServices_CStore_CIStorePurchaseResult* This,
        enum __x_ABI_CWindows_CServices_CStore_CStorePurchaseStatus* value);
    HRESULT (STDMETHODCALLTYPE* get_ExtendedError)(__x_ABI_CWindows_CServices_CStore_CIStorePurchaseResult* This,
        HRESULT* value);

        END_INTERFACE
    } __x_ABI_CWindows_CServices_CStore_CIStorePurchaseResultVtbl;

    interface __x_ABI_CWindows_CServices_CStore_CIStorePurchaseResult
    {
        CONST_VTBL struct __x_ABI_CWindows_CServices_CStore_CIStorePurchaseResultVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CServices_CStore_CIStorePurchaseResult;
#endif /* !defined(____x_ABI_CWindows_CServices_CStore_CIStorePurchaseResult_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CServices_CStore_CIStoreQueueItem_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CServices_CStore_CIStoreQueueItem_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CServices_CStore_CIStoreQueueItemVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CServices_CStore_CIStoreQueueItem* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CServices_CStore_CIStoreQueueItem* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CServices_CStore_CIStoreQueueItem* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CServices_CStore_CIStoreQueueItem* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CServices_CStore_CIStoreQueueItem* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CServices_CStore_CIStoreQueueItem* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_ProductId)(__x_ABI_CWindows_CServices_CStore_CIStoreQueueItem* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_PackageFamilyName)(__x_ABI_CWindows_CServices_CStore_CIStoreQueueItem* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_InstallKind)(__x_ABI_CWindows_CServices_CStore_CIStoreQueueItem* This,
        enum __x_ABI_CWindows_CServices_CStore_CStoreQueueItemKind* value);
    HRESULT (STDMETHODCALLTYPE* GetCurrentStatus)(__x_ABI_CWindows_CServices_CStore_CIStoreQueueItem* This,
        __x_ABI_CWindows_CServices_CStore_CIStoreQueueItemStatus** result);
    HRESULT (STDMETHODCALLTYPE* add_Completed)(__x_ABI_CWindows_CServices_CStore_CIStoreQueueItem* This,
        __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CServices__CStore__CStoreQueueItem___x_ABI_CWindows__CServices__CStore__CStoreQueueItemCompletedEventArgs* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_Completed)(__x_ABI_CWindows_CServices_CStore_CIStoreQueueItem* This,
        EventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* add_StatusChanged)(__x_ABI_CWindows_CServices_CStore_CIStoreQueueItem* This,
        __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CServices__CStore__CStoreQueueItem_IInspectable* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_StatusChanged)(__x_ABI_CWindows_CServices_CStore_CIStoreQueueItem* This,
        EventRegistrationToken token);

        END_INTERFACE
    } __x_ABI_CWindows_CServices_CStore_CIStoreQueueItemVtbl;

    interface __x_ABI_CWindows_CServices_CStore_CIStoreQueueItem
    {
        CONST_VTBL struct __x_ABI_CWindows_CServices_CStore_CIStoreQueueItemVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CServices_CStore_CIStoreQueueItem;
#endif /* !defined(____x_ABI_CWindows_CServices_CStore_CIStoreQueueItem_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CServices_CStore_CIStoreQueueItem2_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CServices_CStore_CIStoreQueueItem2_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CServices_CStore_CIStoreQueueItem2Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CServices_CStore_CIStoreQueueItem2* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CServices_CStore_CIStoreQueueItem2* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CServices_CStore_CIStoreQueueItem2* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CServices_CStore_CIStoreQueueItem2* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CServices_CStore_CIStoreQueueItem2* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CServices_CStore_CIStoreQueueItem2* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* CancelInstallAsync)(__x_ABI_CWindows_CServices_CStore_CIStoreQueueItem2* This,
        __x_ABI_CWindows_CFoundation_CIAsyncAction** action);
    HRESULT (STDMETHODCALLTYPE* PauseInstallAsync)(__x_ABI_CWindows_CServices_CStore_CIStoreQueueItem2* This,
        __x_ABI_CWindows_CFoundation_CIAsyncAction** action);
    HRESULT (STDMETHODCALLTYPE* ResumeInstallAsync)(__x_ABI_CWindows_CServices_CStore_CIStoreQueueItem2* This,
        __x_ABI_CWindows_CFoundation_CIAsyncAction** action);

        END_INTERFACE
    } __x_ABI_CWindows_CServices_CStore_CIStoreQueueItem2Vtbl;

    interface __x_ABI_CWindows_CServices_CStore_CIStoreQueueItem2
    {
        CONST_VTBL struct __x_ABI_CWindows_CServices_CStore_CIStoreQueueItem2Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CServices_CStore_CIStoreQueueItem2;
#endif /* !defined(____x_ABI_CWindows_CServices_CStore_CIStoreQueueItem2_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CServices_CStore_CIStoreQueueItemCompletedEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CServices_CStore_CIStoreQueueItemCompletedEventArgs_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CServices_CStore_CIStoreQueueItemCompletedEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CServices_CStore_CIStoreQueueItemCompletedEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CServices_CStore_CIStoreQueueItemCompletedEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CServices_CStore_CIStoreQueueItemCompletedEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CServices_CStore_CIStoreQueueItemCompletedEventArgs* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CServices_CStore_CIStoreQueueItemCompletedEventArgs* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CServices_CStore_CIStoreQueueItemCompletedEventArgs* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Status)(__x_ABI_CWindows_CServices_CStore_CIStoreQueueItemCompletedEventArgs* This,
        __x_ABI_CWindows_CServices_CStore_CIStoreQueueItemStatus** value);

        END_INTERFACE
    } __x_ABI_CWindows_CServices_CStore_CIStoreQueueItemCompletedEventArgsVtbl;

    interface __x_ABI_CWindows_CServices_CStore_CIStoreQueueItemCompletedEventArgs
    {
        CONST_VTBL struct __x_ABI_CWindows_CServices_CStore_CIStoreQueueItemCompletedEventArgsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CServices_CStore_CIStoreQueueItemCompletedEventArgs;
#endif /* !defined(____x_ABI_CWindows_CServices_CStore_CIStoreQueueItemCompletedEventArgs_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CServices_CStore_CIStoreQueueItemStatus_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CServices_CStore_CIStoreQueueItemStatus_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CServices_CStore_CIStoreQueueItemStatusVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CServices_CStore_CIStoreQueueItemStatus* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CServices_CStore_CIStoreQueueItemStatus* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CServices_CStore_CIStoreQueueItemStatus* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CServices_CStore_CIStoreQueueItemStatus* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CServices_CStore_CIStoreQueueItemStatus* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CServices_CStore_CIStoreQueueItemStatus* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_PackageInstallState)(__x_ABI_CWindows_CServices_CStore_CIStoreQueueItemStatus* This,
        enum __x_ABI_CWindows_CServices_CStore_CStoreQueueItemState* value);
    HRESULT (STDMETHODCALLTYPE* get_PackageInstallExtendedState)(__x_ABI_CWindows_CServices_CStore_CIStoreQueueItemStatus* This,
        enum __x_ABI_CWindows_CServices_CStore_CStoreQueueItemExtendedState* value);
    HRESULT (STDMETHODCALLTYPE* get_UpdateStatus)(__x_ABI_CWindows_CServices_CStore_CIStoreQueueItemStatus* This,
        struct __x_ABI_CWindows_CServices_CStore_CStorePackageUpdateStatus* value);
    HRESULT (STDMETHODCALLTYPE* get_ExtendedError)(__x_ABI_CWindows_CServices_CStore_CIStoreQueueItemStatus* This,
        HRESULT* value);

        END_INTERFACE
    } __x_ABI_CWindows_CServices_CStore_CIStoreQueueItemStatusVtbl;

    interface __x_ABI_CWindows_CServices_CStore_CIStoreQueueItemStatus
    {
        CONST_VTBL struct __x_ABI_CWindows_CServices_CStore_CIStoreQueueItemStatusVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CServices_CStore_CIStoreQueueItemStatus;
#endif /* !defined(____x_ABI_CWindows_CServices_CStore_CIStoreQueueItemStatus_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CServices_CStore_CIStoreRateAndReviewResult_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CServices_CStore_CIStoreRateAndReviewResult_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CServices_CStore_CIStoreRateAndReviewResultVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CServices_CStore_CIStoreRateAndReviewResult* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CServices_CStore_CIStoreRateAndReviewResult* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CServices_CStore_CIStoreRateAndReviewResult* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CServices_CStore_CIStoreRateAndReviewResult* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CServices_CStore_CIStoreRateAndReviewResult* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CServices_CStore_CIStoreRateAndReviewResult* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_ExtendedError)(__x_ABI_CWindows_CServices_CStore_CIStoreRateAndReviewResult* This,
        HRESULT* value);
    HRESULT (STDMETHODCALLTYPE* get_ExtendedJsonData)(__x_ABI_CWindows_CServices_CStore_CIStoreRateAndReviewResult* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_WasUpdated)(__x_ABI_CWindows_CServices_CStore_CIStoreRateAndReviewResult* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* get_Status)(__x_ABI_CWindows_CServices_CStore_CIStoreRateAndReviewResult* This,
        enum __x_ABI_CWindows_CServices_CStore_CStoreRateAndReviewStatus* value);

        END_INTERFACE
    } __x_ABI_CWindows_CServices_CStore_CIStoreRateAndReviewResultVtbl;

    interface __x_ABI_CWindows_CServices_CStore_CIStoreRateAndReviewResult
    {
        CONST_VTBL struct __x_ABI_CWindows_CServices_CStore_CIStoreRateAndReviewResultVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CServices_CStore_CIStoreRateAndReviewResult;
#endif /* !defined(____x_ABI_CWindows_CServices_CStore_CIStoreRateAndReviewResult_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CServices_CStore_CIStoreRequestHelperStatics_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CServices_CStore_CIStoreRequestHelperStatics_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CServices_CStore_CIStoreRequestHelperStaticsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CServices_CStore_CIStoreRequestHelperStatics* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CServices_CStore_CIStoreRequestHelperStatics* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CServices_CStore_CIStoreRequestHelperStatics* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CServices_CStore_CIStoreRequestHelperStatics* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CServices_CStore_CIStoreRequestHelperStatics* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CServices_CStore_CIStoreRequestHelperStatics* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* SendRequestAsync)(__x_ABI_CWindows_CServices_CStore_CIStoreRequestHelperStatics* This,
        __x_ABI_CWindows_CServices_CStore_CIStoreContext* context,
        UINT32 requestKind,
        HSTRING parametersAsJson,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CStore__CStoreSendRequestResult** operation);

        END_INTERFACE
    } __x_ABI_CWindows_CServices_CStore_CIStoreRequestHelperStaticsVtbl;

    interface __x_ABI_CWindows_CServices_CStore_CIStoreRequestHelperStatics
    {
        CONST_VTBL struct __x_ABI_CWindows_CServices_CStore_CIStoreRequestHelperStaticsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CServices_CStore_CIStoreRequestHelperStatics;
#endif /* !defined(____x_ABI_CWindows_CServices_CStore_CIStoreRequestHelperStatics_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CServices_CStore_CIStoreSendRequestResult_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CServices_CStore_CIStoreSendRequestResult_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CServices_CStore_CIStoreSendRequestResultVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CServices_CStore_CIStoreSendRequestResult* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CServices_CStore_CIStoreSendRequestResult* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CServices_CStore_CIStoreSendRequestResult* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CServices_CStore_CIStoreSendRequestResult* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CServices_CStore_CIStoreSendRequestResult* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CServices_CStore_CIStoreSendRequestResult* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Response)(__x_ABI_CWindows_CServices_CStore_CIStoreSendRequestResult* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_ExtendedError)(__x_ABI_CWindows_CServices_CStore_CIStoreSendRequestResult* This,
        HRESULT* value);

        END_INTERFACE
    } __x_ABI_CWindows_CServices_CStore_CIStoreSendRequestResultVtbl;

    interface __x_ABI_CWindows_CServices_CStore_CIStoreSendRequestResult
    {
        CONST_VTBL struct __x_ABI_CWindows_CServices_CStore_CIStoreSendRequestResultVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CServices_CStore_CIStoreSendRequestResult;
#endif /* !defined(____x_ABI_CWindows_CServices_CStore_CIStoreSendRequestResult_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CServices_CStore_CIStoreSendRequestResult2_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CServices_CStore_CIStoreSendRequestResult2_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CServices_CStore_CIStoreSendRequestResult2Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CServices_CStore_CIStoreSendRequestResult2* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CServices_CStore_CIStoreSendRequestResult2* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CServices_CStore_CIStoreSendRequestResult2* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CServices_CStore_CIStoreSendRequestResult2* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CServices_CStore_CIStoreSendRequestResult2* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CServices_CStore_CIStoreSendRequestResult2* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_HttpStatusCode)(__x_ABI_CWindows_CServices_CStore_CIStoreSendRequestResult2* This,
        enum __x_ABI_CWindows_CWeb_CHttp_CHttpStatusCode* value);

        END_INTERFACE
    } __x_ABI_CWindows_CServices_CStore_CIStoreSendRequestResult2Vtbl;

    interface __x_ABI_CWindows_CServices_CStore_CIStoreSendRequestResult2
    {
        CONST_VTBL struct __x_ABI_CWindows_CServices_CStore_CIStoreSendRequestResult2Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CServices_CStore_CIStoreSendRequestResult2;
#endif /* !defined(____x_ABI_CWindows_CServices_CStore_CIStoreSendRequestResult2_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CServices_CStore_CIStoreSku_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CServices_CStore_CIStoreSku_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CServices_CStore_CIStoreSkuVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CServices_CStore_CIStoreSku* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CServices_CStore_CIStoreSku* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CServices_CStore_CIStoreSku* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CServices_CStore_CIStoreSku* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CServices_CStore_CIStoreSku* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CServices_CStore_CIStoreSku* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_StoreId)(__x_ABI_CWindows_CServices_CStore_CIStoreSku* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_Language)(__x_ABI_CWindows_CServices_CStore_CIStoreSku* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_Title)(__x_ABI_CWindows_CServices_CStore_CIStoreSku* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_Description)(__x_ABI_CWindows_CServices_CStore_CIStoreSku* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_IsTrial)(__x_ABI_CWindows_CServices_CStore_CIStoreSku* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* get_CustomDeveloperData)(__x_ABI_CWindows_CServices_CStore_CIStoreSku* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_Images)(__x_ABI_CWindows_CServices_CStore_CIStoreSku* This,
        __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CStore__CStoreImage** value);
    HRESULT (STDMETHODCALLTYPE* get_Videos)(__x_ABI_CWindows_CServices_CStore_CIStoreSku* This,
        __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CStore__CStoreVideo** value);
    HRESULT (STDMETHODCALLTYPE* get_Availabilities)(__x_ABI_CWindows_CServices_CStore_CIStoreSku* This,
        __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CStore__CStoreAvailability** value);
    HRESULT (STDMETHODCALLTYPE* get_Price)(__x_ABI_CWindows_CServices_CStore_CIStoreSku* This,
        __x_ABI_CWindows_CServices_CStore_CIStorePrice** value);
    HRESULT (STDMETHODCALLTYPE* get_ExtendedJsonData)(__x_ABI_CWindows_CServices_CStore_CIStoreSku* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_IsInUserCollection)(__x_ABI_CWindows_CServices_CStore_CIStoreSku* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* get_BundledSkus)(__x_ABI_CWindows_CServices_CStore_CIStoreSku* This,
        __x_ABI_C__FIVectorView_1_HSTRING** value);
    HRESULT (STDMETHODCALLTYPE* get_CollectionData)(__x_ABI_CWindows_CServices_CStore_CIStoreSku* This,
        __x_ABI_CWindows_CServices_CStore_CIStoreCollectionData** value);
    HRESULT (STDMETHODCALLTYPE* GetIsInstalledAsync)(__x_ABI_CWindows_CServices_CStore_CIStoreSku* This,
        __x_ABI_C__FIAsyncOperation_1_boolean** operation);
    HRESULT (STDMETHODCALLTYPE* RequestPurchaseAsync)(__x_ABI_CWindows_CServices_CStore_CIStoreSku* This,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CStore__CStorePurchaseResult** operation);
    HRESULT (STDMETHODCALLTYPE* RequestPurchaseWithPurchasePropertiesAsync)(__x_ABI_CWindows_CServices_CStore_CIStoreSku* This,
        __x_ABI_CWindows_CServices_CStore_CIStorePurchaseProperties* storePurchaseProperties,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CServices__CStore__CStorePurchaseResult** operation);
    HRESULT (STDMETHODCALLTYPE* get_IsSubscription)(__x_ABI_CWindows_CServices_CStore_CIStoreSku* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* get_SubscriptionInfo)(__x_ABI_CWindows_CServices_CStore_CIStoreSku* This,
        __x_ABI_CWindows_CServices_CStore_CIStoreSubscriptionInfo** value);

        END_INTERFACE
    } __x_ABI_CWindows_CServices_CStore_CIStoreSkuVtbl;

    interface __x_ABI_CWindows_CServices_CStore_CIStoreSku
    {
        CONST_VTBL struct __x_ABI_CWindows_CServices_CStore_CIStoreSkuVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CServices_CStore_CIStoreSku;
#endif /* !defined(____x_ABI_CWindows_CServices_CStore_CIStoreSku_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CServices_CStore_CIStoreSubscriptionInfo_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CServices_CStore_CIStoreSubscriptionInfo_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CServices_CStore_CIStoreSubscriptionInfoVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CServices_CStore_CIStoreSubscriptionInfo* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CServices_CStore_CIStoreSubscriptionInfo* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CServices_CStore_CIStoreSubscriptionInfo* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CServices_CStore_CIStoreSubscriptionInfo* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CServices_CStore_CIStoreSubscriptionInfo* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CServices_CStore_CIStoreSubscriptionInfo* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_BillingPeriod)(__x_ABI_CWindows_CServices_CStore_CIStoreSubscriptionInfo* This,
        UINT32* value);
    HRESULT (STDMETHODCALLTYPE* get_BillingPeriodUnit)(__x_ABI_CWindows_CServices_CStore_CIStoreSubscriptionInfo* This,
        enum __x_ABI_CWindows_CServices_CStore_CStoreDurationUnit* value);
    HRESULT (STDMETHODCALLTYPE* get_HasTrialPeriod)(__x_ABI_CWindows_CServices_CStore_CIStoreSubscriptionInfo* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* get_TrialPeriod)(__x_ABI_CWindows_CServices_CStore_CIStoreSubscriptionInfo* This,
        UINT32* value);
    HRESULT (STDMETHODCALLTYPE* get_TrialPeriodUnit)(__x_ABI_CWindows_CServices_CStore_CIStoreSubscriptionInfo* This,
        enum __x_ABI_CWindows_CServices_CStore_CStoreDurationUnit* value);

        END_INTERFACE
    } __x_ABI_CWindows_CServices_CStore_CIStoreSubscriptionInfoVtbl;

    interface __x_ABI_CWindows_CServices_CStore_CIStoreSubscriptionInfo
    {
        CONST_VTBL struct __x_ABI_CWindows_CServices_CStore_CIStoreSubscriptionInfoVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CServices_CStore_CIStoreSubscriptionInfo;
#endif /* !defined(____x_ABI_CWindows_CServices_CStore_CIStoreSubscriptionInfo_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CServices_CStore_CIStoreUninstallStorePackageResult_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CServices_CStore_CIStoreUninstallStorePackageResult_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CServices_CStore_CIStoreUninstallStorePackageResultVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CServices_CStore_CIStoreUninstallStorePackageResult* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CServices_CStore_CIStoreUninstallStorePackageResult* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CServices_CStore_CIStoreUninstallStorePackageResult* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CServices_CStore_CIStoreUninstallStorePackageResult* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CServices_CStore_CIStoreUninstallStorePackageResult* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CServices_CStore_CIStoreUninstallStorePackageResult* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_ExtendedError)(__x_ABI_CWindows_CServices_CStore_CIStoreUninstallStorePackageResult* This,
        HRESULT* value);
    HRESULT (STDMETHODCALLTYPE* get_Status)(__x_ABI_CWindows_CServices_CStore_CIStoreUninstallStorePackageResult* This,
        enum __x_ABI_CWindows_CServices_CStore_CStoreUninstallStorePackageStatus* value);

        END_INTERFACE
    } __x_ABI_CWindows_CServices_CStore_CIStoreUninstallStorePackageResultVtbl;

    interface __x_ABI_CWindows_CServices_CStore_CIStoreUninstallStorePackageResult
    {
        CONST_VTBL struct __x_ABI_CWindows_CServices_CStore_CIStoreUninstallStorePackageResultVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CServices_CStore_CIStoreUninstallStorePackageResult;
#endif /* !defined(____x_ABI_CWindows_CServices_CStore_CIStoreUninstallStorePackageResult_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CServices_CStore_CIStoreVideo_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CServices_CStore_CIStoreVideo_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CServices_CStore_CIStoreVideoVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CServices_CStore_CIStoreVideo* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CServices_CStore_CIStoreVideo* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CServices_CStore_CIStoreVideo* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CServices_CStore_CIStoreVideo* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CServices_CStore_CIStoreVideo* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CServices_CStore_CIStoreVideo* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Uri)(__x_ABI_CWindows_CServices_CStore_CIStoreVideo* This,
        __x_ABI_CWindows_CFoundation_CIUriRuntimeClass** value);
    HRESULT (STDMETHODCALLTYPE* get_VideoPurposeTag)(__x_ABI_CWindows_CServices_CStore_CIStoreVideo* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_Width)(__x_ABI_CWindows_CServices_CStore_CIStoreVideo* This,
        UINT32* value);
    HRESULT (STDMETHODCALLTYPE* get_Height)(__x_ABI_CWindows_CServices_CStore_CIStoreVideo* This,
        UINT32* value);
    HRESULT (STDMETHODCALLTYPE* get_Caption)(__x_ABI_CWindows_CServices_CStore_CIStoreVideo* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_PreviewImage)(__x_ABI_CWindows_CServices_CStore_CIStoreVideo* This,
        __x_ABI_CWindows_CServices_CStore_CIStoreImage** value);

        END_INTERFACE
    } __x_ABI_CWindows_CServices_CStore_CIStoreVideoVtbl;

    interface __x_ABI_CWindows_CServices_CStore_CIStoreVideo
    {
        CONST_VTBL struct __x_ABI_CWindows_CServices_CStore_CIStoreVideoVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CServices_CStore_CIStoreVideo;
#endif /* !defined(____x_ABI_CWindows_CServices_CStore_CIStoreVideo_INTERFACE_DEFINED__) */
    

// WARNING: Please don't edit this file. It was generated by Swift/WinRT v0.0.1

#pragma once
// Header files for imported files
#include <inspectable.h>
#include <EventToken.h>
#include <windowscontracts.h>
#include "Windows.Foundation.h"
#include "Windows.ApplicationModel.AppService.h"
#include "Windows.Graphics.DirectX.Direct3D11.h"
#include "Windows.Graphics.Imaging.h"
#include "Windows.Media.h"
#include "Windows.Media.Capture.h"
#include "Windows.Media.Capture.Frames.h"
#include "Windows.Media.Devices.h"
#include "Windows.Media.Devices.Core.h"
#include "Windows.Media.Effects.h"
#include "Windows.Media.FaceAnalysis.h"
#include "Windows.Media.MediaProperties.h"
#include "Windows.Media.Playback.h"
#include "Windows.Media.Protection.h"
#include "Windows.Media.Streaming.Adaptive.h"
#include "Windows.Networking.BackgroundTransfer.h"
#include "Windows.Storage.h"
#include "Windows.Storage.FileProperties.h"
#include "Windows.Storage.Streams.h"
#include "Windows.UI.h"
// Importing Collections header
#include "Windows.Foundation.Collections.h"

/* Forward Declarations */
#ifndef ____x_ABI_CWindows_CMedia_CCore_CIAudioStreamDescriptor_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CIAudioStreamDescriptor_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_CCore_CIAudioStreamDescriptor __x_ABI_CWindows_CMedia_CCore_CIAudioStreamDescriptor;

#endif // ____x_ABI_CWindows_CMedia_CCore_CIAudioStreamDescriptor_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CIAudioStreamDescriptor2_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CIAudioStreamDescriptor2_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_CCore_CIAudioStreamDescriptor2 __x_ABI_CWindows_CMedia_CCore_CIAudioStreamDescriptor2;

#endif // ____x_ABI_CWindows_CMedia_CCore_CIAudioStreamDescriptor2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CIAudioStreamDescriptor3_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CIAudioStreamDescriptor3_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_CCore_CIAudioStreamDescriptor3 __x_ABI_CWindows_CMedia_CCore_CIAudioStreamDescriptor3;

#endif // ____x_ABI_CWindows_CMedia_CCore_CIAudioStreamDescriptor3_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CIAudioStreamDescriptorFactory_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CIAudioStreamDescriptorFactory_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_CCore_CIAudioStreamDescriptorFactory __x_ABI_CWindows_CMedia_CCore_CIAudioStreamDescriptorFactory;

#endif // ____x_ABI_CWindows_CMedia_CCore_CIAudioStreamDescriptorFactory_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CIAudioTrack_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CIAudioTrack_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_CCore_CIAudioTrack __x_ABI_CWindows_CMedia_CCore_CIAudioTrack;

#endif // ____x_ABI_CWindows_CMedia_CCore_CIAudioTrack_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CIAudioTrackOpenFailedEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CIAudioTrackOpenFailedEventArgs_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_CCore_CIAudioTrackOpenFailedEventArgs __x_ABI_CWindows_CMedia_CCore_CIAudioTrackOpenFailedEventArgs;

#endif // ____x_ABI_CWindows_CMedia_CCore_CIAudioTrackOpenFailedEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CIAudioTrackSupportInfo_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CIAudioTrackSupportInfo_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_CCore_CIAudioTrackSupportInfo __x_ABI_CWindows_CMedia_CCore_CIAudioTrackSupportInfo;

#endif // ____x_ABI_CWindows_CMedia_CCore_CIAudioTrackSupportInfo_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CIChapterCue_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CIChapterCue_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_CCore_CIChapterCue __x_ABI_CWindows_CMedia_CCore_CIChapterCue;

#endif // ____x_ABI_CWindows_CMedia_CCore_CIChapterCue_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CICodecInfo_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CICodecInfo_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_CCore_CICodecInfo __x_ABI_CWindows_CMedia_CCore_CICodecInfo;

#endif // ____x_ABI_CWindows_CMedia_CCore_CICodecInfo_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CICodecQuery_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CICodecQuery_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_CCore_CICodecQuery __x_ABI_CWindows_CMedia_CCore_CICodecQuery;

#endif // ____x_ABI_CWindows_CMedia_CCore_CICodecQuery_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CICodecSubtypesStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CICodecSubtypesStatics_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_CCore_CICodecSubtypesStatics __x_ABI_CWindows_CMedia_CCore_CICodecSubtypesStatics;

#endif // ____x_ABI_CWindows_CMedia_CCore_CICodecSubtypesStatics_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CIDataCue_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CIDataCue_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_CCore_CIDataCue __x_ABI_CWindows_CMedia_CCore_CIDataCue;

#endif // ____x_ABI_CWindows_CMedia_CCore_CIDataCue_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CIDataCue2_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CIDataCue2_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_CCore_CIDataCue2 __x_ABI_CWindows_CMedia_CCore_CIDataCue2;

#endif // ____x_ABI_CWindows_CMedia_CCore_CIDataCue2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CIFaceDetectedEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CIFaceDetectedEventArgs_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_CCore_CIFaceDetectedEventArgs __x_ABI_CWindows_CMedia_CCore_CIFaceDetectedEventArgs;

#endif // ____x_ABI_CWindows_CMedia_CCore_CIFaceDetectedEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CIFaceDetectionEffect_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CIFaceDetectionEffect_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_CCore_CIFaceDetectionEffect __x_ABI_CWindows_CMedia_CCore_CIFaceDetectionEffect;

#endif // ____x_ABI_CWindows_CMedia_CCore_CIFaceDetectionEffect_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CIFaceDetectionEffectDefinition_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CIFaceDetectionEffectDefinition_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_CCore_CIFaceDetectionEffectDefinition __x_ABI_CWindows_CMedia_CCore_CIFaceDetectionEffectDefinition;

#endif // ____x_ABI_CWindows_CMedia_CCore_CIFaceDetectionEffectDefinition_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CIFaceDetectionEffectFrame_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CIFaceDetectionEffectFrame_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_CCore_CIFaceDetectionEffectFrame __x_ABI_CWindows_CMedia_CCore_CIFaceDetectionEffectFrame;

#endif // ____x_ABI_CWindows_CMedia_CCore_CIFaceDetectionEffectFrame_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CIHighDynamicRangeControl_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CIHighDynamicRangeControl_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_CCore_CIHighDynamicRangeControl __x_ABI_CWindows_CMedia_CCore_CIHighDynamicRangeControl;

#endif // ____x_ABI_CWindows_CMedia_CCore_CIHighDynamicRangeControl_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CIHighDynamicRangeOutput_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CIHighDynamicRangeOutput_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_CCore_CIHighDynamicRangeOutput __x_ABI_CWindows_CMedia_CCore_CIHighDynamicRangeOutput;

#endif // ____x_ABI_CWindows_CMedia_CCore_CIHighDynamicRangeOutput_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CIImageCue_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CIImageCue_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_CCore_CIImageCue __x_ABI_CWindows_CMedia_CCore_CIImageCue;

#endif // ____x_ABI_CWindows_CMedia_CCore_CIImageCue_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CIInitializeMediaStreamSourceRequestedEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CIInitializeMediaStreamSourceRequestedEventArgs_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_CCore_CIInitializeMediaStreamSourceRequestedEventArgs __x_ABI_CWindows_CMedia_CCore_CIInitializeMediaStreamSourceRequestedEventArgs;

#endif // ____x_ABI_CWindows_CMedia_CCore_CIInitializeMediaStreamSourceRequestedEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CILowLightFusionResult_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CILowLightFusionResult_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_CCore_CILowLightFusionResult __x_ABI_CWindows_CMedia_CCore_CILowLightFusionResult;

#endif // ____x_ABI_CWindows_CMedia_CCore_CILowLightFusionResult_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CILowLightFusionStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CILowLightFusionStatics_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_CCore_CILowLightFusionStatics __x_ABI_CWindows_CMedia_CCore_CILowLightFusionStatics;

#endif // ____x_ABI_CWindows_CMedia_CCore_CILowLightFusionStatics_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CIMediaBinder_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CIMediaBinder_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_CCore_CIMediaBinder __x_ABI_CWindows_CMedia_CCore_CIMediaBinder;

#endif // ____x_ABI_CWindows_CMedia_CCore_CIMediaBinder_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CIMediaBindingEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CIMediaBindingEventArgs_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_CCore_CIMediaBindingEventArgs __x_ABI_CWindows_CMedia_CCore_CIMediaBindingEventArgs;

#endif // ____x_ABI_CWindows_CMedia_CCore_CIMediaBindingEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CIMediaBindingEventArgs2_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CIMediaBindingEventArgs2_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_CCore_CIMediaBindingEventArgs2 __x_ABI_CWindows_CMedia_CCore_CIMediaBindingEventArgs2;

#endif // ____x_ABI_CWindows_CMedia_CCore_CIMediaBindingEventArgs2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CIMediaBindingEventArgs3_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CIMediaBindingEventArgs3_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_CCore_CIMediaBindingEventArgs3 __x_ABI_CWindows_CMedia_CCore_CIMediaBindingEventArgs3;

#endif // ____x_ABI_CWindows_CMedia_CCore_CIMediaBindingEventArgs3_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CIMediaCue_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CIMediaCue_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_CCore_CIMediaCue __x_ABI_CWindows_CMedia_CCore_CIMediaCue;

#endif // ____x_ABI_CWindows_CMedia_CCore_CIMediaCue_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CIMediaCueEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CIMediaCueEventArgs_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_CCore_CIMediaCueEventArgs __x_ABI_CWindows_CMedia_CCore_CIMediaCueEventArgs;

#endif // ____x_ABI_CWindows_CMedia_CCore_CIMediaCueEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CIMediaSource_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CIMediaSource_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_CCore_CIMediaSource __x_ABI_CWindows_CMedia_CCore_CIMediaSource;

#endif // ____x_ABI_CWindows_CMedia_CCore_CIMediaSource_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CIMediaSource2_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CIMediaSource2_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_CCore_CIMediaSource2 __x_ABI_CWindows_CMedia_CCore_CIMediaSource2;

#endif // ____x_ABI_CWindows_CMedia_CCore_CIMediaSource2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CIMediaSource3_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CIMediaSource3_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_CCore_CIMediaSource3 __x_ABI_CWindows_CMedia_CCore_CIMediaSource3;

#endif // ____x_ABI_CWindows_CMedia_CCore_CIMediaSource3_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CIMediaSource4_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CIMediaSource4_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_CCore_CIMediaSource4 __x_ABI_CWindows_CMedia_CCore_CIMediaSource4;

#endif // ____x_ABI_CWindows_CMedia_CCore_CIMediaSource4_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CIMediaSource5_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CIMediaSource5_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_CCore_CIMediaSource5 __x_ABI_CWindows_CMedia_CCore_CIMediaSource5;

#endif // ____x_ABI_CWindows_CMedia_CCore_CIMediaSource5_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CIMediaSourceAppServiceConnection_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CIMediaSourceAppServiceConnection_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_CCore_CIMediaSourceAppServiceConnection __x_ABI_CWindows_CMedia_CCore_CIMediaSourceAppServiceConnection;

#endif // ____x_ABI_CWindows_CMedia_CCore_CIMediaSourceAppServiceConnection_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CIMediaSourceAppServiceConnectionFactory_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CIMediaSourceAppServiceConnectionFactory_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_CCore_CIMediaSourceAppServiceConnectionFactory __x_ABI_CWindows_CMedia_CCore_CIMediaSourceAppServiceConnectionFactory;

#endif // ____x_ABI_CWindows_CMedia_CCore_CIMediaSourceAppServiceConnectionFactory_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CIMediaSourceError_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CIMediaSourceError_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_CCore_CIMediaSourceError __x_ABI_CWindows_CMedia_CCore_CIMediaSourceError;

#endif // ____x_ABI_CWindows_CMedia_CCore_CIMediaSourceError_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CIMediaSourceOpenOperationCompletedEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CIMediaSourceOpenOperationCompletedEventArgs_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_CCore_CIMediaSourceOpenOperationCompletedEventArgs __x_ABI_CWindows_CMedia_CCore_CIMediaSourceOpenOperationCompletedEventArgs;

#endif // ____x_ABI_CWindows_CMedia_CCore_CIMediaSourceOpenOperationCompletedEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CIMediaSourceStateChangedEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CIMediaSourceStateChangedEventArgs_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_CCore_CIMediaSourceStateChangedEventArgs __x_ABI_CWindows_CMedia_CCore_CIMediaSourceStateChangedEventArgs;

#endif // ____x_ABI_CWindows_CMedia_CCore_CIMediaSourceStateChangedEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CIMediaSourceStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CIMediaSourceStatics_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_CCore_CIMediaSourceStatics __x_ABI_CWindows_CMedia_CCore_CIMediaSourceStatics;

#endif // ____x_ABI_CWindows_CMedia_CCore_CIMediaSourceStatics_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CIMediaSourceStatics2_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CIMediaSourceStatics2_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_CCore_CIMediaSourceStatics2 __x_ABI_CWindows_CMedia_CCore_CIMediaSourceStatics2;

#endif // ____x_ABI_CWindows_CMedia_CCore_CIMediaSourceStatics2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CIMediaSourceStatics3_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CIMediaSourceStatics3_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_CCore_CIMediaSourceStatics3 __x_ABI_CWindows_CMedia_CCore_CIMediaSourceStatics3;

#endif // ____x_ABI_CWindows_CMedia_CCore_CIMediaSourceStatics3_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CIMediaSourceStatics4_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CIMediaSourceStatics4_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_CCore_CIMediaSourceStatics4 __x_ABI_CWindows_CMedia_CCore_CIMediaSourceStatics4;

#endif // ____x_ABI_CWindows_CMedia_CCore_CIMediaSourceStatics4_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamDescriptor_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamDescriptor_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_CCore_CIMediaStreamDescriptor __x_ABI_CWindows_CMedia_CCore_CIMediaStreamDescriptor;

#endif // ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamDescriptor_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamDescriptor2_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamDescriptor2_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_CCore_CIMediaStreamDescriptor2 __x_ABI_CWindows_CMedia_CCore_CIMediaStreamDescriptor2;

#endif // ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamDescriptor2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSample_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSample_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSample __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSample;

#endif // ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSample_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSample2_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSample2_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSample2 __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSample2;

#endif // ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSample2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSampleProtectionProperties_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSampleProtectionProperties_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSampleProtectionProperties __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSampleProtectionProperties;

#endif // ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSampleProtectionProperties_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSampleStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSampleStatics_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSampleStatics __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSampleStatics;

#endif // ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSampleStatics_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSampleStatics2_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSampleStatics2_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSampleStatics2 __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSampleStatics2;

#endif // ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSampleStatics2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource;

#endif // ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource2_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource2_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource2 __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource2;

#endif // ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource3_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource3_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource3 __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource3;

#endif // ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource3_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource4_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource4_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource4 __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource4;

#endif // ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource4_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceClosedEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceClosedEventArgs_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceClosedEventArgs __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceClosedEventArgs;

#endif // ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceClosedEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceClosedRequest_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceClosedRequest_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceClosedRequest __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceClosedRequest;

#endif // ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceClosedRequest_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceFactory_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceFactory_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceFactory __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceFactory;

#endif // ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceFactory_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSampleRenderedEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSampleRenderedEventArgs_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSampleRenderedEventArgs __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSampleRenderedEventArgs;

#endif // ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSampleRenderedEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSampleRequest_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSampleRequest_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSampleRequest __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSampleRequest;

#endif // ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSampleRequest_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSampleRequestDeferral_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSampleRequestDeferral_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSampleRequestDeferral __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSampleRequestDeferral;

#endif // ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSampleRequestDeferral_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSampleRequestedEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSampleRequestedEventArgs_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSampleRequestedEventArgs __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSampleRequestedEventArgs;

#endif // ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSampleRequestedEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceStartingEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceStartingEventArgs_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceStartingEventArgs __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceStartingEventArgs;

#endif // ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceStartingEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceStartingRequest_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceStartingRequest_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceStartingRequest __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceStartingRequest;

#endif // ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceStartingRequest_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceStartingRequestDeferral_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceStartingRequestDeferral_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceStartingRequestDeferral __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceStartingRequestDeferral;

#endif // ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceStartingRequestDeferral_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSwitchStreamsRequest_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSwitchStreamsRequest_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSwitchStreamsRequest __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSwitchStreamsRequest;

#endif // ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSwitchStreamsRequest_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSwitchStreamsRequestDeferral_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSwitchStreamsRequestDeferral_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSwitchStreamsRequestDeferral __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSwitchStreamsRequestDeferral;

#endif // ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSwitchStreamsRequestDeferral_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSwitchStreamsRequestedEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSwitchStreamsRequestedEventArgs_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSwitchStreamsRequestedEventArgs __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSwitchStreamsRequestedEventArgs;

#endif // ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSwitchStreamsRequestedEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CIMediaTrack_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CIMediaTrack_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_CCore_CIMediaTrack __x_ABI_CWindows_CMedia_CCore_CIMediaTrack;

#endif // ____x_ABI_CWindows_CMedia_CCore_CIMediaTrack_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CIMseSourceBuffer_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CIMseSourceBuffer_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_CCore_CIMseSourceBuffer __x_ABI_CWindows_CMedia_CCore_CIMseSourceBuffer;

#endif // ____x_ABI_CWindows_CMedia_CCore_CIMseSourceBuffer_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CIMseSourceBufferList_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CIMseSourceBufferList_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_CCore_CIMseSourceBufferList __x_ABI_CWindows_CMedia_CCore_CIMseSourceBufferList;

#endif // ____x_ABI_CWindows_CMedia_CCore_CIMseSourceBufferList_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CIMseStreamSource_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CIMseStreamSource_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_CCore_CIMseStreamSource __x_ABI_CWindows_CMedia_CCore_CIMseStreamSource;

#endif // ____x_ABI_CWindows_CMedia_CCore_CIMseStreamSource_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CIMseStreamSource2_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CIMseStreamSource2_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_CCore_CIMseStreamSource2 __x_ABI_CWindows_CMedia_CCore_CIMseStreamSource2;

#endif // ____x_ABI_CWindows_CMedia_CCore_CIMseStreamSource2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CIMseStreamSourceStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CIMseStreamSourceStatics_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_CCore_CIMseStreamSourceStatics __x_ABI_CWindows_CMedia_CCore_CIMseStreamSourceStatics;

#endif // ____x_ABI_CWindows_CMedia_CCore_CIMseStreamSourceStatics_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CISceneAnalysisEffect_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CISceneAnalysisEffect_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_CCore_CISceneAnalysisEffect __x_ABI_CWindows_CMedia_CCore_CISceneAnalysisEffect;

#endif // ____x_ABI_CWindows_CMedia_CCore_CISceneAnalysisEffect_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CISceneAnalysisEffectFrame_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CISceneAnalysisEffectFrame_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_CCore_CISceneAnalysisEffectFrame __x_ABI_CWindows_CMedia_CCore_CISceneAnalysisEffectFrame;

#endif // ____x_ABI_CWindows_CMedia_CCore_CISceneAnalysisEffectFrame_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CISceneAnalysisEffectFrame2_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CISceneAnalysisEffectFrame2_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_CCore_CISceneAnalysisEffectFrame2 __x_ABI_CWindows_CMedia_CCore_CISceneAnalysisEffectFrame2;

#endif // ____x_ABI_CWindows_CMedia_CCore_CISceneAnalysisEffectFrame2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CISceneAnalyzedEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CISceneAnalyzedEventArgs_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_CCore_CISceneAnalyzedEventArgs __x_ABI_CWindows_CMedia_CCore_CISceneAnalyzedEventArgs;

#endif // ____x_ABI_CWindows_CMedia_CCore_CISceneAnalyzedEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CISingleSelectMediaTrackList_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CISingleSelectMediaTrackList_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_CCore_CISingleSelectMediaTrackList __x_ABI_CWindows_CMedia_CCore_CISingleSelectMediaTrackList;

#endif // ____x_ABI_CWindows_CMedia_CCore_CISingleSelectMediaTrackList_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CISpeechCue_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CISpeechCue_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_CCore_CISpeechCue __x_ABI_CWindows_CMedia_CCore_CISpeechCue;

#endif // ____x_ABI_CWindows_CMedia_CCore_CISpeechCue_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CITimedMetadataStreamDescriptor_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CITimedMetadataStreamDescriptor_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_CCore_CITimedMetadataStreamDescriptor __x_ABI_CWindows_CMedia_CCore_CITimedMetadataStreamDescriptor;

#endif // ____x_ABI_CWindows_CMedia_CCore_CITimedMetadataStreamDescriptor_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CITimedMetadataStreamDescriptorFactory_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CITimedMetadataStreamDescriptorFactory_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_CCore_CITimedMetadataStreamDescriptorFactory __x_ABI_CWindows_CMedia_CCore_CITimedMetadataStreamDescriptorFactory;

#endif // ____x_ABI_CWindows_CMedia_CCore_CITimedMetadataStreamDescriptorFactory_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrack_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrack_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrack __x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrack;

#endif // ____x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrack_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrack2_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrack2_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrack2 __x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrack2;

#endif // ____x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrack2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrackError_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrackError_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrackError __x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrackError;

#endif // ____x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrackError_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrackFactory_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrackFactory_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrackFactory __x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrackFactory;

#endif // ____x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrackFactory_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrackFailedEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrackFailedEventArgs_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrackFailedEventArgs __x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrackFailedEventArgs;

#endif // ____x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrackFailedEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrackProvider_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrackProvider_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrackProvider __x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrackProvider;

#endif // ____x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrackProvider_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CITimedTextCue_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CITimedTextCue_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_CCore_CITimedTextCue __x_ABI_CWindows_CMedia_CCore_CITimedTextCue;

#endif // ____x_ABI_CWindows_CMedia_CCore_CITimedTextCue_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CITimedTextLine_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CITimedTextLine_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_CCore_CITimedTextLine __x_ABI_CWindows_CMedia_CCore_CITimedTextLine;

#endif // ____x_ABI_CWindows_CMedia_CCore_CITimedTextLine_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CITimedTextRegion_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CITimedTextRegion_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_CCore_CITimedTextRegion __x_ABI_CWindows_CMedia_CCore_CITimedTextRegion;

#endif // ____x_ABI_CWindows_CMedia_CCore_CITimedTextRegion_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CITimedTextSource_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CITimedTextSource_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_CCore_CITimedTextSource __x_ABI_CWindows_CMedia_CCore_CITimedTextSource;

#endif // ____x_ABI_CWindows_CMedia_CCore_CITimedTextSource_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CITimedTextSourceResolveResultEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CITimedTextSourceResolveResultEventArgs_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_CCore_CITimedTextSourceResolveResultEventArgs __x_ABI_CWindows_CMedia_CCore_CITimedTextSourceResolveResultEventArgs;

#endif // ____x_ABI_CWindows_CMedia_CCore_CITimedTextSourceResolveResultEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CITimedTextSourceStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CITimedTextSourceStatics_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_CCore_CITimedTextSourceStatics __x_ABI_CWindows_CMedia_CCore_CITimedTextSourceStatics;

#endif // ____x_ABI_CWindows_CMedia_CCore_CITimedTextSourceStatics_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CITimedTextSourceStatics2_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CITimedTextSourceStatics2_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_CCore_CITimedTextSourceStatics2 __x_ABI_CWindows_CMedia_CCore_CITimedTextSourceStatics2;

#endif // ____x_ABI_CWindows_CMedia_CCore_CITimedTextSourceStatics2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CITimedTextStyle_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CITimedTextStyle_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_CCore_CITimedTextStyle __x_ABI_CWindows_CMedia_CCore_CITimedTextStyle;

#endif // ____x_ABI_CWindows_CMedia_CCore_CITimedTextStyle_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CITimedTextStyle2_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CITimedTextStyle2_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_CCore_CITimedTextStyle2 __x_ABI_CWindows_CMedia_CCore_CITimedTextStyle2;

#endif // ____x_ABI_CWindows_CMedia_CCore_CITimedTextStyle2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CITimedTextSubformat_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CITimedTextSubformat_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_CCore_CITimedTextSubformat __x_ABI_CWindows_CMedia_CCore_CITimedTextSubformat;

#endif // ____x_ABI_CWindows_CMedia_CCore_CITimedTextSubformat_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CIVideoStabilizationEffect_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CIVideoStabilizationEffect_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_CCore_CIVideoStabilizationEffect __x_ABI_CWindows_CMedia_CCore_CIVideoStabilizationEffect;

#endif // ____x_ABI_CWindows_CMedia_CCore_CIVideoStabilizationEffect_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CIVideoStabilizationEffectEnabledChangedEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CIVideoStabilizationEffectEnabledChangedEventArgs_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_CCore_CIVideoStabilizationEffectEnabledChangedEventArgs __x_ABI_CWindows_CMedia_CCore_CIVideoStabilizationEffectEnabledChangedEventArgs;

#endif // ____x_ABI_CWindows_CMedia_CCore_CIVideoStabilizationEffectEnabledChangedEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CIVideoStreamDescriptor_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CIVideoStreamDescriptor_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_CCore_CIVideoStreamDescriptor __x_ABI_CWindows_CMedia_CCore_CIVideoStreamDescriptor;

#endif // ____x_ABI_CWindows_CMedia_CCore_CIVideoStreamDescriptor_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CIVideoStreamDescriptor2_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CIVideoStreamDescriptor2_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_CCore_CIVideoStreamDescriptor2 __x_ABI_CWindows_CMedia_CCore_CIVideoStreamDescriptor2;

#endif // ____x_ABI_CWindows_CMedia_CCore_CIVideoStreamDescriptor2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CIVideoStreamDescriptorFactory_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CIVideoStreamDescriptorFactory_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_CCore_CIVideoStreamDescriptorFactory __x_ABI_CWindows_CMedia_CCore_CIVideoStreamDescriptorFactory;

#endif // ____x_ABI_CWindows_CMedia_CCore_CIVideoStreamDescriptorFactory_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CIVideoTrack_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CIVideoTrack_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_CCore_CIVideoTrack __x_ABI_CWindows_CMedia_CCore_CIVideoTrack;

#endif // ____x_ABI_CWindows_CMedia_CCore_CIVideoTrack_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CIVideoTrackOpenFailedEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CIVideoTrackOpenFailedEventArgs_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_CCore_CIVideoTrackOpenFailedEventArgs __x_ABI_CWindows_CMedia_CCore_CIVideoTrackOpenFailedEventArgs;

#endif // ____x_ABI_CWindows_CMedia_CCore_CIVideoTrackOpenFailedEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CIVideoTrackSupportInfo_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CIVideoTrackSupportInfo_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_CCore_CIVideoTrackSupportInfo __x_ABI_CWindows_CMedia_CCore_CIVideoTrackSupportInfo;

#endif // ____x_ABI_CWindows_CMedia_CCore_CIVideoTrackSupportInfo_FWD_DEFINED__

// Parameterized interface forward declarations (C)

// Collection interface definitions

#if !defined(____x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CCore__CCodecInfo_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CCore__CCodecInfo_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CCore__CCodecInfo __x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CCore__CCodecInfo;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CCore__CCodecInfo;

    typedef struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CCore__CCodecInfoVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CCore__CCodecInfo* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CCore__CCodecInfo* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CCore__CCodecInfo* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CCore__CCodecInfo* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CCore__CCodecInfo* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CCore__CCodecInfo* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Current)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CCore__CCodecInfo* This,
        __x_ABI_CWindows_CMedia_CCore_CICodecInfo** result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CCore__CCodecInfo* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CCore__CCodecInfo* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CCore__CCodecInfo* This,
        UINT32 itemsLength,
        __x_ABI_CWindows_CMedia_CCore_CICodecInfo** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CCore__CCodecInfoVtbl;

    interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CCore__CCodecInfo
    {
        CONST_VTBL struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CCore__CCodecInfoVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CCore__CCodecInfo_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CCore__CCodecInfo_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CCore__CCodecInfo_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CCore__CCodecInfo __x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CCore__CCodecInfo;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CCore__CCodecInfo;

    typedef struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CCore__CCodecInfoVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CCore__CCodecInfo* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CCore__CCodecInfo* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CCore__CCodecInfo* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CCore__CCodecInfo* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CCore__CCodecInfo* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CCore__CCodecInfo* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* First)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CCore__CCodecInfo* This,
        __x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CCore__CCodecInfo** result);

        END_INTERFACE
    } __x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CCore__CCodecInfoVtbl;

    interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CCore__CCodecInfo
    {
        CONST_VTBL struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CCore__CCodecInfoVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CCore__CCodecInfo_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CCore__CCodecInfo_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CCore__CCodecInfo_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CCore__CCodecInfo __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CCore__CCodecInfo;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CCore__CCodecInfo;

    typedef struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CCore__CCodecInfoVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CCore__CCodecInfo* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CCore__CCodecInfo* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CCore__CCodecInfo* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CCore__CCodecInfo* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CCore__CCodecInfo* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CCore__CCodecInfo* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CCore__CCodecInfo* This,
        UINT32 index,
        __x_ABI_CWindows_CMedia_CCore_CICodecInfo** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CCore__CCodecInfo* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CCore__CCodecInfo* This,
        __x_ABI_CWindows_CMedia_CCore_CICodecInfo* value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CCore__CCodecInfo* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        __x_ABI_CWindows_CMedia_CCore_CICodecInfo** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CCore__CCodecInfoVtbl;

    interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CCore__CCodecInfo
    {
        CONST_VTBL struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CCore__CCodecInfoVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CCore__CCodecInfo_INTERFACE_DEFINED__
    
typedef interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CCore__CCodecInfo __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CCore__CCodecInfo;

#if !defined(____x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CCore__CCodecInfo_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CCore__CCodecInfo_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CCore__CCodecInfo __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CCore__CCodecInfo;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CCore__CCodecInfo;

    typedef struct __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CCore__CCodecInfoVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CCore__CCodecInfo* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CCore__CCodecInfo* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CCore__CCodecInfo* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CCore__CCodecInfo* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CCore__CCodecInfo* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CCore__CCodecInfo* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* put_Completed)(__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CCore__CCodecInfo* This,
        __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CCore__CCodecInfo* handler);
    HRESULT (STDMETHODCALLTYPE* get_Completed)(__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CCore__CCodecInfo* This,
        __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CCore__CCodecInfo** result);
    HRESULT (STDMETHODCALLTYPE* GetResults)(__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CCore__CCodecInfo* This,
        __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CCore__CCodecInfo** result);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CCore__CCodecInfoVtbl;

    interface __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CCore__CCodecInfo
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CCore__CCodecInfoVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CCore__CCodecInfo_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CCore__CCodecInfo_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CCore__CCodecInfo_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CCore__CCodecInfo __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CCore__CCodecInfo;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CCore__CCodecInfo;

    typedef struct __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CCore__CCodecInfoVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CCore__CCodecInfo* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CCore__CCodecInfo* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CCore__CCodecInfo* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CCore__CCodecInfo* This,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CCore__CCodecInfo* asyncInfo,
        enum __x_ABI_CWindows_CFoundation_CAsyncStatus asyncStatus);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CCore__CCodecInfoVtbl;

    interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CCore__CCodecInfo
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CCore__CCodecInfoVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CCore__CCodecInfo_INTERFACE_DEFINED__
    
typedef interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__CCore__CMediaStreamSample __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__CCore__CMediaStreamSample;

#if !defined(____x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CCore__CMediaStreamSample_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CCore__CMediaStreamSample_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CCore__CMediaStreamSample __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CCore__CMediaStreamSample;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CCore__CMediaStreamSample;

    typedef struct __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CCore__CMediaStreamSampleVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CCore__CMediaStreamSample* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CCore__CMediaStreamSample* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CCore__CMediaStreamSample* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CCore__CMediaStreamSample* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CCore__CMediaStreamSample* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CCore__CMediaStreamSample* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* put_Completed)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CCore__CMediaStreamSample* This,
        __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__CCore__CMediaStreamSample* handler);
    HRESULT (STDMETHODCALLTYPE* get_Completed)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CCore__CMediaStreamSample* This,
        __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__CCore__CMediaStreamSample** result);
    HRESULT (STDMETHODCALLTYPE* GetResults)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CCore__CMediaStreamSample* This,
        __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSample** result);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CCore__CMediaStreamSampleVtbl;

    interface __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CCore__CMediaStreamSample
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CCore__CMediaStreamSampleVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CCore__CMediaStreamSample_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__CCore__CMediaStreamSample_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__CCore__CMediaStreamSample_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__CCore__CMediaStreamSample __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__CCore__CMediaStreamSample;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__CCore__CMediaStreamSample;

    typedef struct __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__CCore__CMediaStreamSampleVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__CCore__CMediaStreamSample* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__CCore__CMediaStreamSample* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__CCore__CMediaStreamSample* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__CCore__CMediaStreamSample* This,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CCore__CMediaStreamSample* asyncInfo,
        enum __x_ABI_CWindows_CFoundation_CAsyncStatus asyncStatus);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__CCore__CMediaStreamSampleVtbl;

    interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__CCore__CMediaStreamSample
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__CCore__CMediaStreamSampleVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__CCore__CMediaStreamSample_INTERFACE_DEFINED__
    
typedef interface __x_ABI_C__FIAsyncOperationProgressHandler_2___x_ABI_CWindows__CMedia__CCore__CLowLightFusionResult_double __x_ABI_C__FIAsyncOperationProgressHandler_2___x_ABI_CWindows__CMedia__CCore__CLowLightFusionResult_double;

typedef interface __x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CMedia__CCore__CLowLightFusionResult_double __x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CMedia__CCore__CLowLightFusionResult_double;

#if !defined(____x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2___x_ABI_CWindows__CMedia__CCore__CLowLightFusionResult_double_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2___x_ABI_CWindows__CMedia__CCore__CLowLightFusionResult_double_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2___x_ABI_CWindows__CMedia__CCore__CLowLightFusionResult_double __x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2___x_ABI_CWindows__CMedia__CCore__CLowLightFusionResult_double;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2___x_ABI_CWindows__CMedia__CCore__CLowLightFusionResult_double;

    typedef struct __x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2___x_ABI_CWindows__CMedia__CCore__CLowLightFusionResult_doubleVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2___x_ABI_CWindows__CMedia__CCore__CLowLightFusionResult_double* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2___x_ABI_CWindows__CMedia__CCore__CLowLightFusionResult_double* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2___x_ABI_CWindows__CMedia__CCore__CLowLightFusionResult_double* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2___x_ABI_CWindows__CMedia__CCore__CLowLightFusionResult_double* This,
        __x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CMedia__CCore__CLowLightFusionResult_double* asyncInfo,
        enum __x_ABI_CWindows_CFoundation_CAsyncStatus asyncStatus);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2___x_ABI_CWindows__CMedia__CCore__CLowLightFusionResult_doubleVtbl;

    interface __x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2___x_ABI_CWindows__CMedia__CCore__CLowLightFusionResult_double
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2___x_ABI_CWindows__CMedia__CCore__CLowLightFusionResult_doubleVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2___x_ABI_CWindows__CMedia__CCore__CLowLightFusionResult_double_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CMedia__CCore__CLowLightFusionResult_double_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CMedia__CCore__CLowLightFusionResult_double_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CMedia__CCore__CLowLightFusionResult_double __x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CMedia__CCore__CLowLightFusionResult_double;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CMedia__CCore__CLowLightFusionResult_double;

    typedef struct __x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CMedia__CCore__CLowLightFusionResult_doubleVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CMedia__CCore__CLowLightFusionResult_double* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CMedia__CCore__CLowLightFusionResult_double* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CMedia__CCore__CLowLightFusionResult_double* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CMedia__CCore__CLowLightFusionResult_double* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CMedia__CCore__CLowLightFusionResult_double* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CMedia__CCore__CLowLightFusionResult_double* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* put_Progress)(__x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CMedia__CCore__CLowLightFusionResult_double* This,
        __x_ABI_C__FIAsyncOperationProgressHandler_2___x_ABI_CWindows__CMedia__CCore__CLowLightFusionResult_double* handler);
    HRESULT (STDMETHODCALLTYPE* get_Progress)(__x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CMedia__CCore__CLowLightFusionResult_double* This,
        __x_ABI_C__FIAsyncOperationProgressHandler_2___x_ABI_CWindows__CMedia__CCore__CLowLightFusionResult_double** result);
    HRESULT (STDMETHODCALLTYPE* put_Completed)(__x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CMedia__CCore__CLowLightFusionResult_double* This,
        __x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2___x_ABI_CWindows__CMedia__CCore__CLowLightFusionResult_double* handler);
    HRESULT (STDMETHODCALLTYPE* get_Completed)(__x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CMedia__CCore__CLowLightFusionResult_double* This,
        __x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2___x_ABI_CWindows__CMedia__CCore__CLowLightFusionResult_double** result);
    HRESULT (STDMETHODCALLTYPE* GetResults)(__x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CMedia__CCore__CLowLightFusionResult_double* This,
        __x_ABI_CWindows_CMedia_CCore_CILowLightFusionResult** result);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CMedia__CCore__CLowLightFusionResult_doubleVtbl;

    interface __x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CMedia__CCore__CLowLightFusionResult_double
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CMedia__CCore__CLowLightFusionResult_doubleVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CMedia__CCore__CLowLightFusionResult_double_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIAsyncOperationProgressHandler_2___x_ABI_CWindows__CMedia__CCore__CLowLightFusionResult_double_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperationProgressHandler_2___x_ABI_CWindows__CMedia__CCore__CLowLightFusionResult_double_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperationProgressHandler_2___x_ABI_CWindows__CMedia__CCore__CLowLightFusionResult_double __x_ABI_C__FIAsyncOperationProgressHandler_2___x_ABI_CWindows__CMedia__CCore__CLowLightFusionResult_double;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperationProgressHandler_2___x_ABI_CWindows__CMedia__CCore__CLowLightFusionResult_double;

    typedef struct __x_ABI_C__FIAsyncOperationProgressHandler_2___x_ABI_CWindows__CMedia__CCore__CLowLightFusionResult_doubleVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperationProgressHandler_2___x_ABI_CWindows__CMedia__CCore__CLowLightFusionResult_double* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperationProgressHandler_2___x_ABI_CWindows__CMedia__CCore__CLowLightFusionResult_double* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperationProgressHandler_2___x_ABI_CWindows__CMedia__CCore__CLowLightFusionResult_double* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FIAsyncOperationProgressHandler_2___x_ABI_CWindows__CMedia__CCore__CLowLightFusionResult_double* This,
        __x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CMedia__CCore__CLowLightFusionResult_double* asyncInfo,
        DOUBLE progressInfo);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperationProgressHandler_2___x_ABI_CWindows__CMedia__CCore__CLowLightFusionResult_doubleVtbl;

    interface __x_ABI_C__FIAsyncOperationProgressHandler_2___x_ABI_CWindows__CMedia__CCore__CLowLightFusionResult_double
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperationProgressHandler_2___x_ABI_CWindows__CMedia__CCore__CLowLightFusionResult_doubleVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperationProgressHandler_2___x_ABI_CWindows__CMedia__CCore__CLowLightFusionResult_double_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterator_1_HSTRING_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterator_1_HSTRING_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterator_1_HSTRING __x_ABI_C__FIIterator_1_HSTRING;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterator_1_HSTRING;

    typedef struct __x_ABI_C__FIIterator_1_HSTRINGVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterator_1_HSTRING* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterator_1_HSTRING* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterator_1_HSTRING* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterator_1_HSTRING* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterator_1_HSTRING* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterator_1_HSTRING* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Current)(__x_ABI_C__FIIterator_1_HSTRING* This,
        HSTRING* result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__x_ABI_C__FIIterator_1_HSTRING* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__x_ABI_C__FIIterator_1_HSTRING* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIIterator_1_HSTRING* This,
        UINT32 itemsLength,
        HSTRING* items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIIterator_1_HSTRINGVtbl;

    interface __x_ABI_C__FIIterator_1_HSTRING
    {
        CONST_VTBL struct __x_ABI_C__FIIterator_1_HSTRINGVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterator_1_HSTRING_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterable_1_HSTRING_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterable_1_HSTRING_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterable_1_HSTRING __x_ABI_C__FIIterable_1_HSTRING;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterable_1_HSTRING;

    typedef struct __x_ABI_C__FIIterable_1_HSTRINGVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterable_1_HSTRING* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterable_1_HSTRING* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterable_1_HSTRING* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterable_1_HSTRING* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterable_1_HSTRING* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterable_1_HSTRING* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* First)(__x_ABI_C__FIIterable_1_HSTRING* This,
        __x_ABI_C__FIIterator_1_HSTRING** result);

        END_INTERFACE
    } __x_ABI_C__FIIterable_1_HSTRINGVtbl;

    interface __x_ABI_C__FIIterable_1_HSTRING
    {
        CONST_VTBL struct __x_ABI_C__FIIterable_1_HSTRINGVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterable_1_HSTRING_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIKeyValuePair_2_GUID_IInspectable_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIKeyValuePair_2_GUID_IInspectable_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIKeyValuePair_2_GUID_IInspectable __x_ABI_C__FIKeyValuePair_2_GUID_IInspectable;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIKeyValuePair_2_GUID_IInspectable;

    typedef struct __x_ABI_C__FIKeyValuePair_2_GUID_IInspectableVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIKeyValuePair_2_GUID_IInspectable* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIKeyValuePair_2_GUID_IInspectable* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIKeyValuePair_2_GUID_IInspectable* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIKeyValuePair_2_GUID_IInspectable* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIKeyValuePair_2_GUID_IInspectable* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIKeyValuePair_2_GUID_IInspectable* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Key)(__x_ABI_C__FIKeyValuePair_2_GUID_IInspectable* This,
        GUID* result);
    HRESULT (STDMETHODCALLTYPE* get_Value)(__x_ABI_C__FIKeyValuePair_2_GUID_IInspectable* This,
        IInspectable** result);

        END_INTERFACE
    } __x_ABI_C__FIKeyValuePair_2_GUID_IInspectableVtbl;

    interface __x_ABI_C__FIKeyValuePair_2_GUID_IInspectable
    {
        CONST_VTBL struct __x_ABI_C__FIKeyValuePair_2_GUID_IInspectableVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIKeyValuePair_2_GUID_IInspectable_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_GUID_IInspectable_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_GUID_IInspectable_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_GUID_IInspectable __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_GUID_IInspectable;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_GUID_IInspectable;

    typedef struct __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_GUID_IInspectableVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_GUID_IInspectable* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_GUID_IInspectable* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_GUID_IInspectable* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_GUID_IInspectable* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_GUID_IInspectable* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_GUID_IInspectable* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Current)(__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_GUID_IInspectable* This,
        __x_ABI_C__FIKeyValuePair_2_GUID_IInspectable** result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_GUID_IInspectable* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_GUID_IInspectable* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_GUID_IInspectable* This,
        UINT32 itemsLength,
        __x_ABI_C__FIKeyValuePair_2_GUID_IInspectable** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_GUID_IInspectableVtbl;

    interface __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_GUID_IInspectable
    {
        CONST_VTBL struct __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_GUID_IInspectableVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_GUID_IInspectable_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_GUID_IInspectable_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_GUID_IInspectable_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_GUID_IInspectable __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_GUID_IInspectable;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_GUID_IInspectable;

    typedef struct __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_GUID_IInspectableVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_GUID_IInspectable* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_GUID_IInspectable* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_GUID_IInspectable* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_GUID_IInspectable* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_GUID_IInspectable* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_GUID_IInspectable* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* First)(__x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_GUID_IInspectable* This,
        __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_GUID_IInspectable** result);

        END_INTERFACE
    } __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_GUID_IInspectableVtbl;

    interface __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_GUID_IInspectable
    {
        CONST_VTBL struct __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_GUID_IInspectableVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_GUID_IInspectable_INTERFACE_DEFINED__
    
typedef enum __x_ABI_CWindows_CGraphics_CImaging_CBitmapPixelFormat __x_ABI_CWindows_CGraphics_CImaging_CBitmapPixelFormat;

#if !defined(____x_ABI_C__FIIterator_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapPixelFormat_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapPixelFormat_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapPixelFormat __x_ABI_C__FIIterator_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapPixelFormat;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterator_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapPixelFormat;

    typedef struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapPixelFormatVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapPixelFormat* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapPixelFormat* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapPixelFormat* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapPixelFormat* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapPixelFormat* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapPixelFormat* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Current)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapPixelFormat* This,
        enum __x_ABI_CWindows_CGraphics_CImaging_CBitmapPixelFormat* result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapPixelFormat* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapPixelFormat* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapPixelFormat* This,
        UINT32 itemsLength,
        enum __x_ABI_CWindows_CGraphics_CImaging_CBitmapPixelFormat* items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIIterator_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapPixelFormatVtbl;

    interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapPixelFormat
    {
        CONST_VTBL struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapPixelFormatVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapPixelFormat_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterable_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapPixelFormat_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapPixelFormat_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapPixelFormat __x_ABI_C__FIIterable_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapPixelFormat;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterable_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapPixelFormat;

    typedef struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapPixelFormatVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapPixelFormat* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapPixelFormat* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapPixelFormat* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapPixelFormat* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapPixelFormat* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapPixelFormat* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* First)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapPixelFormat* This,
        __x_ABI_C__FIIterator_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapPixelFormat** result);

        END_INTERFACE
    } __x_ABI_C__FIIterable_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapPixelFormatVtbl;

    interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapPixelFormat
    {
        CONST_VTBL struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapPixelFormatVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapPixelFormat_INTERFACE_DEFINED__
    
#ifndef ____x_ABI_CWindows_CGraphics_CImaging_CISoftwareBitmap_FWD_DEFINED__
#define ____x_ABI_CWindows_CGraphics_CImaging_CISoftwareBitmap_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CGraphics_CImaging_CISoftwareBitmap __x_ABI_CWindows_CGraphics_CImaging_CISoftwareBitmap;

#endif // ____x_ABI_CWindows_CGraphics_CImaging_CISoftwareBitmap_FWD_DEFINED__

#if !defined(____x_ABI_C__FIIterator_1___x_ABI_CWindows__CGraphics__CImaging__CSoftwareBitmap_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CGraphics__CImaging__CSoftwareBitmap_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CGraphics__CImaging__CSoftwareBitmap __x_ABI_C__FIIterator_1___x_ABI_CWindows__CGraphics__CImaging__CSoftwareBitmap;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterator_1___x_ABI_CWindows__CGraphics__CImaging__CSoftwareBitmap;

    typedef struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CGraphics__CImaging__CSoftwareBitmapVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CGraphics__CImaging__CSoftwareBitmap* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CGraphics__CImaging__CSoftwareBitmap* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CGraphics__CImaging__CSoftwareBitmap* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CGraphics__CImaging__CSoftwareBitmap* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CGraphics__CImaging__CSoftwareBitmap* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CGraphics__CImaging__CSoftwareBitmap* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Current)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CGraphics__CImaging__CSoftwareBitmap* This,
        __x_ABI_CWindows_CGraphics_CImaging_CISoftwareBitmap** result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CGraphics__CImaging__CSoftwareBitmap* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CGraphics__CImaging__CSoftwareBitmap* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CGraphics__CImaging__CSoftwareBitmap* This,
        UINT32 itemsLength,
        __x_ABI_CWindows_CGraphics_CImaging_CISoftwareBitmap** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIIterator_1___x_ABI_CWindows__CGraphics__CImaging__CSoftwareBitmapVtbl;

    interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CGraphics__CImaging__CSoftwareBitmap
    {
        CONST_VTBL struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CGraphics__CImaging__CSoftwareBitmapVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CGraphics__CImaging__CSoftwareBitmap_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterable_1___x_ABI_CWindows__CGraphics__CImaging__CSoftwareBitmap_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CGraphics__CImaging__CSoftwareBitmap_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CGraphics__CImaging__CSoftwareBitmap __x_ABI_C__FIIterable_1___x_ABI_CWindows__CGraphics__CImaging__CSoftwareBitmap;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterable_1___x_ABI_CWindows__CGraphics__CImaging__CSoftwareBitmap;

    typedef struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CGraphics__CImaging__CSoftwareBitmapVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CGraphics__CImaging__CSoftwareBitmap* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CGraphics__CImaging__CSoftwareBitmap* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CGraphics__CImaging__CSoftwareBitmap* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CGraphics__CImaging__CSoftwareBitmap* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CGraphics__CImaging__CSoftwareBitmap* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CGraphics__CImaging__CSoftwareBitmap* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* First)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CGraphics__CImaging__CSoftwareBitmap* This,
        __x_ABI_C__FIIterator_1___x_ABI_CWindows__CGraphics__CImaging__CSoftwareBitmap** result);

        END_INTERFACE
    } __x_ABI_C__FIIterable_1___x_ABI_CWindows__CGraphics__CImaging__CSoftwareBitmapVtbl;

    interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CGraphics__CImaging__CSoftwareBitmap
    {
        CONST_VTBL struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CGraphics__CImaging__CSoftwareBitmapVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CGraphics__CImaging__CSoftwareBitmap_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CCore__CIMediaCue_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CCore__CIMediaCue_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CCore__CIMediaCue __x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CCore__CIMediaCue;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CCore__CIMediaCue;

    typedef struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CCore__CIMediaCueVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CCore__CIMediaCue* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CCore__CIMediaCue* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CCore__CIMediaCue* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CCore__CIMediaCue* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CCore__CIMediaCue* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CCore__CIMediaCue* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Current)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CCore__CIMediaCue* This,
        __x_ABI_CWindows_CMedia_CCore_CIMediaCue** result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CCore__CIMediaCue* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CCore__CIMediaCue* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CCore__CIMediaCue* This,
        UINT32 itemsLength,
        __x_ABI_CWindows_CMedia_CCore_CIMediaCue** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CCore__CIMediaCueVtbl;

    interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CCore__CIMediaCue
    {
        CONST_VTBL struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CCore__CIMediaCueVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CCore__CIMediaCue_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CCore__CIMediaCue_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CCore__CIMediaCue_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CCore__CIMediaCue __x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CCore__CIMediaCue;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CCore__CIMediaCue;

    typedef struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CCore__CIMediaCueVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CCore__CIMediaCue* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CCore__CIMediaCue* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CCore__CIMediaCue* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CCore__CIMediaCue* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CCore__CIMediaCue* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CCore__CIMediaCue* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* First)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CCore__CIMediaCue* This,
        __x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CCore__CIMediaCue** result);

        END_INTERFACE
    } __x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CCore__CIMediaCueVtbl;

    interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CCore__CIMediaCue
    {
        CONST_VTBL struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CCore__CIMediaCueVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CCore__CIMediaCue_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CCore__CMseSourceBuffer_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CCore__CMseSourceBuffer_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CCore__CMseSourceBuffer __x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CCore__CMseSourceBuffer;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CCore__CMseSourceBuffer;

    typedef struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CCore__CMseSourceBufferVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CCore__CMseSourceBuffer* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CCore__CMseSourceBuffer* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CCore__CMseSourceBuffer* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CCore__CMseSourceBuffer* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CCore__CMseSourceBuffer* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CCore__CMseSourceBuffer* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Current)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CCore__CMseSourceBuffer* This,
        __x_ABI_CWindows_CMedia_CCore_CIMseSourceBuffer** result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CCore__CMseSourceBuffer* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CCore__CMseSourceBuffer* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CCore__CMseSourceBuffer* This,
        UINT32 itemsLength,
        __x_ABI_CWindows_CMedia_CCore_CIMseSourceBuffer** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CCore__CMseSourceBufferVtbl;

    interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CCore__CMseSourceBuffer
    {
        CONST_VTBL struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CCore__CMseSourceBufferVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CCore__CMseSourceBuffer_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CCore__CMseSourceBuffer_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CCore__CMseSourceBuffer_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CCore__CMseSourceBuffer __x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CCore__CMseSourceBuffer;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CCore__CMseSourceBuffer;

    typedef struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CCore__CMseSourceBufferVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CCore__CMseSourceBuffer* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CCore__CMseSourceBuffer* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CCore__CMseSourceBuffer* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CCore__CMseSourceBuffer* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CCore__CMseSourceBuffer* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CCore__CMseSourceBuffer* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* First)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CCore__CMseSourceBuffer* This,
        __x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CCore__CMseSourceBuffer** result);

        END_INTERFACE
    } __x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CCore__CMseSourceBufferVtbl;

    interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CCore__CMseSourceBuffer
    {
        CONST_VTBL struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CCore__CMseSourceBufferVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CCore__CMseSourceBuffer_INTERFACE_DEFINED__
    
typedef struct __x_ABI_CWindows_CMedia_CCore_CMseTimeRange __x_ABI_CWindows_CMedia_CCore_CMseTimeRange;

#if !defined(____x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CCore__CMseTimeRange_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CCore__CMseTimeRange_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CCore__CMseTimeRange __x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CCore__CMseTimeRange;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CCore__CMseTimeRange;

    typedef struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CCore__CMseTimeRangeVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CCore__CMseTimeRange* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CCore__CMseTimeRange* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CCore__CMseTimeRange* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CCore__CMseTimeRange* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CCore__CMseTimeRange* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CCore__CMseTimeRange* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Current)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CCore__CMseTimeRange* This,
        struct __x_ABI_CWindows_CMedia_CCore_CMseTimeRange* result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CCore__CMseTimeRange* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CCore__CMseTimeRange* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CCore__CMseTimeRange* This,
        UINT32 itemsLength,
        struct __x_ABI_CWindows_CMedia_CCore_CMseTimeRange* items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CCore__CMseTimeRangeVtbl;

    interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CCore__CMseTimeRange
    {
        CONST_VTBL struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CCore__CMseTimeRangeVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CCore__CMseTimeRange_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CCore__CMseTimeRange_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CCore__CMseTimeRange_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CCore__CMseTimeRange __x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CCore__CMseTimeRange;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CCore__CMseTimeRange;

    typedef struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CCore__CMseTimeRangeVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CCore__CMseTimeRange* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CCore__CMseTimeRange* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CCore__CMseTimeRange* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CCore__CMseTimeRange* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CCore__CMseTimeRange* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CCore__CMseTimeRange* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* First)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CCore__CMseTimeRange* This,
        __x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CCore__CMseTimeRange** result);

        END_INTERFACE
    } __x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CCore__CMseTimeRangeVtbl;

    interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CCore__CMseTimeRange
    {
        CONST_VTBL struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CCore__CMseTimeRangeVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CCore__CMseTimeRange_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CCore__CTimedMetadataTrack_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CCore__CTimedMetadataTrack_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CCore__CTimedMetadataTrack __x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CCore__CTimedMetadataTrack;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CCore__CTimedMetadataTrack;

    typedef struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CCore__CTimedMetadataTrackVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CCore__CTimedMetadataTrack* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CCore__CTimedMetadataTrack* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CCore__CTimedMetadataTrack* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CCore__CTimedMetadataTrack* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CCore__CTimedMetadataTrack* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CCore__CTimedMetadataTrack* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Current)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CCore__CTimedMetadataTrack* This,
        __x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrack** result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CCore__CTimedMetadataTrack* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CCore__CTimedMetadataTrack* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CCore__CTimedMetadataTrack* This,
        UINT32 itemsLength,
        __x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrack** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CCore__CTimedMetadataTrackVtbl;

    interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CCore__CTimedMetadataTrack
    {
        CONST_VTBL struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CCore__CTimedMetadataTrackVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CCore__CTimedMetadataTrack_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CCore__CTimedMetadataTrack_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CCore__CTimedMetadataTrack_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CCore__CTimedMetadataTrack __x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CCore__CTimedMetadataTrack;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CCore__CTimedMetadataTrack;

    typedef struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CCore__CTimedMetadataTrackVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CCore__CTimedMetadataTrack* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CCore__CTimedMetadataTrack* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CCore__CTimedMetadataTrack* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CCore__CTimedMetadataTrack* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CCore__CTimedMetadataTrack* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CCore__CTimedMetadataTrack* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* First)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CCore__CTimedMetadataTrack* This,
        __x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CCore__CTimedMetadataTrack** result);

        END_INTERFACE
    } __x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CCore__CTimedMetadataTrackVtbl;

    interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CCore__CTimedMetadataTrack
    {
        CONST_VTBL struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CCore__CTimedMetadataTrackVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CCore__CTimedMetadataTrack_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CCore__CTimedTextLine_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CCore__CTimedTextLine_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CCore__CTimedTextLine __x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CCore__CTimedTextLine;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CCore__CTimedTextLine;

    typedef struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CCore__CTimedTextLineVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CCore__CTimedTextLine* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CCore__CTimedTextLine* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CCore__CTimedTextLine* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CCore__CTimedTextLine* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CCore__CTimedTextLine* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CCore__CTimedTextLine* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Current)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CCore__CTimedTextLine* This,
        __x_ABI_CWindows_CMedia_CCore_CITimedTextLine** result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CCore__CTimedTextLine* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CCore__CTimedTextLine* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CCore__CTimedTextLine* This,
        UINT32 itemsLength,
        __x_ABI_CWindows_CMedia_CCore_CITimedTextLine** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CCore__CTimedTextLineVtbl;

    interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CCore__CTimedTextLine
    {
        CONST_VTBL struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CCore__CTimedTextLineVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CCore__CTimedTextLine_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CCore__CTimedTextLine_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CCore__CTimedTextLine_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CCore__CTimedTextLine __x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CCore__CTimedTextLine;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CCore__CTimedTextLine;

    typedef struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CCore__CTimedTextLineVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CCore__CTimedTextLine* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CCore__CTimedTextLine* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CCore__CTimedTextLine* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CCore__CTimedTextLine* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CCore__CTimedTextLine* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CCore__CTimedTextLine* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* First)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CCore__CTimedTextLine* This,
        __x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CCore__CTimedTextLine** result);

        END_INTERFACE
    } __x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CCore__CTimedTextLineVtbl;

    interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CCore__CTimedTextLine
    {
        CONST_VTBL struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CCore__CTimedTextLineVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CCore__CTimedTextLine_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CCore__CTimedTextSource_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CCore__CTimedTextSource_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CCore__CTimedTextSource __x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CCore__CTimedTextSource;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CCore__CTimedTextSource;

    typedef struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CCore__CTimedTextSourceVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CCore__CTimedTextSource* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CCore__CTimedTextSource* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CCore__CTimedTextSource* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CCore__CTimedTextSource* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CCore__CTimedTextSource* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CCore__CTimedTextSource* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Current)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CCore__CTimedTextSource* This,
        __x_ABI_CWindows_CMedia_CCore_CITimedTextSource** result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CCore__CTimedTextSource* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CCore__CTimedTextSource* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CCore__CTimedTextSource* This,
        UINT32 itemsLength,
        __x_ABI_CWindows_CMedia_CCore_CITimedTextSource** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CCore__CTimedTextSourceVtbl;

    interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CCore__CTimedTextSource
    {
        CONST_VTBL struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CCore__CTimedTextSourceVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CCore__CTimedTextSource_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CCore__CTimedTextSource_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CCore__CTimedTextSource_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CCore__CTimedTextSource __x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CCore__CTimedTextSource;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CCore__CTimedTextSource;

    typedef struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CCore__CTimedTextSourceVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CCore__CTimedTextSource* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CCore__CTimedTextSource* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CCore__CTimedTextSource* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CCore__CTimedTextSource* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CCore__CTimedTextSource* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CCore__CTimedTextSource* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* First)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CCore__CTimedTextSource* This,
        __x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CCore__CTimedTextSource** result);

        END_INTERFACE
    } __x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CCore__CTimedTextSourceVtbl;

    interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CCore__CTimedTextSource
    {
        CONST_VTBL struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CCore__CTimedTextSourceVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CCore__CTimedTextSource_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CCore__CTimedTextSubformat_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CCore__CTimedTextSubformat_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CCore__CTimedTextSubformat __x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CCore__CTimedTextSubformat;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CCore__CTimedTextSubformat;

    typedef struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CCore__CTimedTextSubformatVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CCore__CTimedTextSubformat* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CCore__CTimedTextSubformat* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CCore__CTimedTextSubformat* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CCore__CTimedTextSubformat* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CCore__CTimedTextSubformat* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CCore__CTimedTextSubformat* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Current)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CCore__CTimedTextSubformat* This,
        __x_ABI_CWindows_CMedia_CCore_CITimedTextSubformat** result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CCore__CTimedTextSubformat* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CCore__CTimedTextSubformat* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CCore__CTimedTextSubformat* This,
        UINT32 itemsLength,
        __x_ABI_CWindows_CMedia_CCore_CITimedTextSubformat** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CCore__CTimedTextSubformatVtbl;

    interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CCore__CTimedTextSubformat
    {
        CONST_VTBL struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CCore__CTimedTextSubformatVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CCore__CTimedTextSubformat_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CCore__CTimedTextSubformat_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CCore__CTimedTextSubformat_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CCore__CTimedTextSubformat __x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CCore__CTimedTextSubformat;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CCore__CTimedTextSubformat;

    typedef struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CCore__CTimedTextSubformatVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CCore__CTimedTextSubformat* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CCore__CTimedTextSubformat* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CCore__CTimedTextSubformat* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CCore__CTimedTextSubformat* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CCore__CTimedTextSubformat* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CCore__CTimedTextSubformat* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* First)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CCore__CTimedTextSubformat* This,
        __x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CCore__CTimedTextSubformat** result);

        END_INTERFACE
    } __x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CCore__CTimedTextSubformatVtbl;

    interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CCore__CTimedTextSubformat
    {
        CONST_VTBL struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CCore__CTimedTextSubformatVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CCore__CTimedTextSubformat_INTERFACE_DEFINED__
    
#ifndef ____x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameController_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameController_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameController __x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameController;

#endif // ____x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameController_FWD_DEFINED__

#if !defined(____x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CDevices__CCore__CFrameController_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CDevices__CCore__CFrameController_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CDevices__CCore__CFrameController __x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CDevices__CCore__CFrameController;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CDevices__CCore__CFrameController;

    typedef struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CDevices__CCore__CFrameControllerVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CDevices__CCore__CFrameController* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CDevices__CCore__CFrameController* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CDevices__CCore__CFrameController* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CDevices__CCore__CFrameController* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CDevices__CCore__CFrameController* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CDevices__CCore__CFrameController* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Current)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CDevices__CCore__CFrameController* This,
        __x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameController** result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CDevices__CCore__CFrameController* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CDevices__CCore__CFrameController* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CDevices__CCore__CFrameController* This,
        UINT32 itemsLength,
        __x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameController** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CDevices__CCore__CFrameControllerVtbl;

    interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CDevices__CCore__CFrameController
    {
        CONST_VTBL struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CDevices__CCore__CFrameControllerVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CDevices__CCore__CFrameController_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CDevices__CCore__CFrameController_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CDevices__CCore__CFrameController_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CDevices__CCore__CFrameController __x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CDevices__CCore__CFrameController;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CDevices__CCore__CFrameController;

    typedef struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CDevices__CCore__CFrameControllerVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CDevices__CCore__CFrameController* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CDevices__CCore__CFrameController* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CDevices__CCore__CFrameController* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CDevices__CCore__CFrameController* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CDevices__CCore__CFrameController* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CDevices__CCore__CFrameController* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* First)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CDevices__CCore__CFrameController* This,
        __x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CDevices__CCore__CFrameController** result);

        END_INTERFACE
    } __x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CDevices__CCore__CFrameControllerVtbl;

    interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CDevices__CCore__CFrameController
    {
        CONST_VTBL struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CDevices__CCore__CFrameControllerVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CDevices__CCore__CFrameController_INTERFACE_DEFINED__
    
#ifndef ____x_ABI_CWindows_CMedia_CFaceAnalysis_CIDetectedFace_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CFaceAnalysis_CIDetectedFace_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_CFaceAnalysis_CIDetectedFace __x_ABI_CWindows_CMedia_CFaceAnalysis_CIDetectedFace;

#endif // ____x_ABI_CWindows_CMedia_CFaceAnalysis_CIDetectedFace_FWD_DEFINED__

#if !defined(____x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CFaceAnalysis__CDetectedFace_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CFaceAnalysis__CDetectedFace_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CFaceAnalysis__CDetectedFace __x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CFaceAnalysis__CDetectedFace;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CFaceAnalysis__CDetectedFace;

    typedef struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CFaceAnalysis__CDetectedFaceVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CFaceAnalysis__CDetectedFace* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CFaceAnalysis__CDetectedFace* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CFaceAnalysis__CDetectedFace* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CFaceAnalysis__CDetectedFace* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CFaceAnalysis__CDetectedFace* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CFaceAnalysis__CDetectedFace* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Current)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CFaceAnalysis__CDetectedFace* This,
        __x_ABI_CWindows_CMedia_CFaceAnalysis_CIDetectedFace** result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CFaceAnalysis__CDetectedFace* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CFaceAnalysis__CDetectedFace* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CFaceAnalysis__CDetectedFace* This,
        UINT32 itemsLength,
        __x_ABI_CWindows_CMedia_CFaceAnalysis_CIDetectedFace** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CFaceAnalysis__CDetectedFaceVtbl;

    interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CFaceAnalysis__CDetectedFace
    {
        CONST_VTBL struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CFaceAnalysis__CDetectedFaceVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CFaceAnalysis__CDetectedFace_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CFaceAnalysis__CDetectedFace_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CFaceAnalysis__CDetectedFace_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CFaceAnalysis__CDetectedFace __x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CFaceAnalysis__CDetectedFace;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CFaceAnalysis__CDetectedFace;

    typedef struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CFaceAnalysis__CDetectedFaceVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CFaceAnalysis__CDetectedFace* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CFaceAnalysis__CDetectedFace* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CFaceAnalysis__CDetectedFace* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CFaceAnalysis__CDetectedFace* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CFaceAnalysis__CDetectedFace* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CFaceAnalysis__CDetectedFace* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* First)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CFaceAnalysis__CDetectedFace* This,
        __x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CFaceAnalysis__CDetectedFace** result);

        END_INTERFACE
    } __x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CFaceAnalysis__CDetectedFaceVtbl;

    interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CFaceAnalysis__CDetectedFace
    {
        CONST_VTBL struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CFaceAnalysis__CDetectedFaceVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CFaceAnalysis__CDetectedFace_INTERFACE_DEFINED__
    
typedef interface __x_ABI_C__FIMapView_2_GUID_IInspectable __x_ABI_C__FIMapView_2_GUID_IInspectable;

#if !defined(____x_ABI_C__FIMapView_2_GUID_IInspectable_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIMapView_2_GUID_IInspectable_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIMapView_2_GUID_IInspectable __x_ABI_C__FIMapView_2_GUID_IInspectable;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIMapView_2_GUID_IInspectable;

    typedef struct __x_ABI_C__FIMapView_2_GUID_IInspectableVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIMapView_2_GUID_IInspectable* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIMapView_2_GUID_IInspectable* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIMapView_2_GUID_IInspectable* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIMapView_2_GUID_IInspectable* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIMapView_2_GUID_IInspectable* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIMapView_2_GUID_IInspectable* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* Lookup)(__x_ABI_C__FIMapView_2_GUID_IInspectable* This,
        GUID key,
        IInspectable** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIMapView_2_GUID_IInspectable* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* HasKey)(__x_ABI_C__FIMapView_2_GUID_IInspectable* This,
        GUID key,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* Split)(__x_ABI_C__FIMapView_2_GUID_IInspectable* This,
        __x_ABI_C__FIMapView_2_GUID_IInspectable** first,
        __x_ABI_C__FIMapView_2_GUID_IInspectable** second);

        END_INTERFACE
    } __x_ABI_C__FIMapView_2_GUID_IInspectableVtbl;

    interface __x_ABI_C__FIMapView_2_GUID_IInspectable
    {
        CONST_VTBL struct __x_ABI_C__FIMapView_2_GUID_IInspectableVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIMapView_2_GUID_IInspectable_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIMap_2_GUID_IInspectable_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIMap_2_GUID_IInspectable_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIMap_2_GUID_IInspectable __x_ABI_C__FIMap_2_GUID_IInspectable;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIMap_2_GUID_IInspectable;

    typedef struct __x_ABI_C__FIMap_2_GUID_IInspectableVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIMap_2_GUID_IInspectable* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIMap_2_GUID_IInspectable* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIMap_2_GUID_IInspectable* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIMap_2_GUID_IInspectable* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIMap_2_GUID_IInspectable* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIMap_2_GUID_IInspectable* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* Lookup)(__x_ABI_C__FIMap_2_GUID_IInspectable* This,
        GUID key,
        IInspectable** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIMap_2_GUID_IInspectable* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* HasKey)(__x_ABI_C__FIMap_2_GUID_IInspectable* This,
        GUID key,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetView)(__x_ABI_C__FIMap_2_GUID_IInspectable* This,
        __x_ABI_C__FIMapView_2_GUID_IInspectable** result);
    HRESULT (STDMETHODCALLTYPE* Insert)(__x_ABI_C__FIMap_2_GUID_IInspectable* This,
        GUID key,
        IInspectable* value,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* Remove)(__x_ABI_C__FIMap_2_GUID_IInspectable* This,
        GUID key);
    HRESULT (STDMETHODCALLTYPE* Clear)(__x_ABI_C__FIMap_2_GUID_IInspectable* This);

        END_INTERFACE
    } __x_ABI_C__FIMap_2_GUID_IInspectableVtbl;

    interface __x_ABI_C__FIMap_2_GUID_IInspectable
    {
        CONST_VTBL struct __x_ABI_C__FIMap_2_GUID_IInspectableVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIMap_2_GUID_IInspectable_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CCore__CTimedMetadataTrack_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CCore__CTimedMetadataTrack_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CCore__CTimedMetadataTrack __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CCore__CTimedMetadataTrack;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CCore__CTimedMetadataTrack;

    typedef struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CCore__CTimedMetadataTrackVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CCore__CTimedMetadataTrack* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CCore__CTimedMetadataTrack* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CCore__CTimedMetadataTrack* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CCore__CTimedMetadataTrack* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CCore__CTimedMetadataTrack* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CCore__CTimedMetadataTrack* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CCore__CTimedMetadataTrack* This,
        UINT32 index,
        __x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrack** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CCore__CTimedMetadataTrack* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CCore__CTimedMetadataTrack* This,
        __x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrack* value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CCore__CTimedMetadataTrack* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        __x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrack** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CCore__CTimedMetadataTrackVtbl;

    interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CCore__CTimedMetadataTrack
    {
        CONST_VTBL struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CCore__CTimedMetadataTrackVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CCore__CTimedMetadataTrack_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CCore__CTimedMetadataTrack_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CCore__CTimedMetadataTrack_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CCore__CTimedMetadataTrack __x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CCore__CTimedMetadataTrack;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CCore__CTimedMetadataTrack;

    typedef struct __x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CCore__CTimedMetadataTrackVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CCore__CTimedMetadataTrack* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CCore__CTimedMetadataTrack* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CCore__CTimedMetadataTrack* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CCore__CTimedMetadataTrack* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CCore__CTimedMetadataTrack* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CCore__CTimedMetadataTrack* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CCore__CTimedMetadataTrack* This,
        UINT32 index,
        __x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrack** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CCore__CTimedMetadataTrack* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* GetView)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CCore__CTimedMetadataTrack* This,
        __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CCore__CTimedMetadataTrack** result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CCore__CTimedMetadataTrack* This,
        __x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrack* value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* SetAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CCore__CTimedMetadataTrack* This,
        UINT32 index,
        __x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrack* value);
    HRESULT (STDMETHODCALLTYPE* InsertAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CCore__CTimedMetadataTrack* This,
        UINT32 index,
        __x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrack* value);
    HRESULT (STDMETHODCALLTYPE* RemoveAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CCore__CTimedMetadataTrack* This,
        UINT32 index);
    HRESULT (STDMETHODCALLTYPE* Append)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CCore__CTimedMetadataTrack* This,
        __x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrack* value);
    HRESULT (STDMETHODCALLTYPE* RemoveAtEnd)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CCore__CTimedMetadataTrack* This);
    HRESULT (STDMETHODCALLTYPE* Clear)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CCore__CTimedMetadataTrack* This);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CCore__CTimedMetadataTrack* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        __x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrack** items,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* ReplaceAll)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CCore__CTimedMetadataTrack* This,
        UINT32 itemsLength,
        __x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrack** items);

        END_INTERFACE
    } __x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CCore__CTimedMetadataTrackVtbl;

    interface __x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CCore__CTimedMetadataTrack
    {
        CONST_VTBL struct __x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CCore__CTimedMetadataTrackVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CCore__CTimedMetadataTrack_INTERFACE_DEFINED__
    
typedef interface __x_ABI_C__FIObservableVector_1___x_ABI_CWindows__CMedia__CCore__CTimedMetadataTrack __x_ABI_C__FIObservableVector_1___x_ABI_CWindows__CMedia__CCore__CTimedMetadataTrack;

#if !defined(____x_ABI_C__FVectorChangedEventHandler_1___x_ABI_CWindows__CMedia__CCore__CTimedMetadataTrack_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FVectorChangedEventHandler_1___x_ABI_CWindows__CMedia__CCore__CTimedMetadataTrack_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FVectorChangedEventHandler_1___x_ABI_CWindows__CMedia__CCore__CTimedMetadataTrack __x_ABI_C__FVectorChangedEventHandler_1___x_ABI_CWindows__CMedia__CCore__CTimedMetadataTrack;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FVectorChangedEventHandler_1___x_ABI_CWindows__CMedia__CCore__CTimedMetadataTrack;

    typedef struct __x_ABI_C__FVectorChangedEventHandler_1___x_ABI_CWindows__CMedia__CCore__CTimedMetadataTrackVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FVectorChangedEventHandler_1___x_ABI_CWindows__CMedia__CCore__CTimedMetadataTrack* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FVectorChangedEventHandler_1___x_ABI_CWindows__CMedia__CCore__CTimedMetadataTrack* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FVectorChangedEventHandler_1___x_ABI_CWindows__CMedia__CCore__CTimedMetadataTrack* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FVectorChangedEventHandler_1___x_ABI_CWindows__CMedia__CCore__CTimedMetadataTrack* This,
        __x_ABI_C__FIObservableVector_1___x_ABI_CWindows__CMedia__CCore__CTimedMetadataTrack* sender,
        __x_ABI_CWindows_CFoundation_CCollections_CIVectorChangedEventArgs* event);

        END_INTERFACE
    } __x_ABI_C__FVectorChangedEventHandler_1___x_ABI_CWindows__CMedia__CCore__CTimedMetadataTrackVtbl;

    interface __x_ABI_C__FVectorChangedEventHandler_1___x_ABI_CWindows__CMedia__CCore__CTimedMetadataTrack
    {
        CONST_VTBL struct __x_ABI_C__FVectorChangedEventHandler_1___x_ABI_CWindows__CMedia__CCore__CTimedMetadataTrackVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FVectorChangedEventHandler_1___x_ABI_CWindows__CMedia__CCore__CTimedMetadataTrack_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIObservableVector_1___x_ABI_CWindows__CMedia__CCore__CTimedMetadataTrack_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIObservableVector_1___x_ABI_CWindows__CMedia__CCore__CTimedMetadataTrack_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIObservableVector_1___x_ABI_CWindows__CMedia__CCore__CTimedMetadataTrack __x_ABI_C__FIObservableVector_1___x_ABI_CWindows__CMedia__CCore__CTimedMetadataTrack;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIObservableVector_1___x_ABI_CWindows__CMedia__CCore__CTimedMetadataTrack;

    typedef struct __x_ABI_C__FIObservableVector_1___x_ABI_CWindows__CMedia__CCore__CTimedMetadataTrackVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIObservableVector_1___x_ABI_CWindows__CMedia__CCore__CTimedMetadataTrack* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIObservableVector_1___x_ABI_CWindows__CMedia__CCore__CTimedMetadataTrack* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIObservableVector_1___x_ABI_CWindows__CMedia__CCore__CTimedMetadataTrack* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIObservableVector_1___x_ABI_CWindows__CMedia__CCore__CTimedMetadataTrack* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIObservableVector_1___x_ABI_CWindows__CMedia__CCore__CTimedMetadataTrack* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIObservableVector_1___x_ABI_CWindows__CMedia__CCore__CTimedMetadataTrack* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* add_VectorChanged)(__x_ABI_C__FIObservableVector_1___x_ABI_CWindows__CMedia__CCore__CTimedMetadataTrack* This,
        __x_ABI_C__FVectorChangedEventHandler_1___x_ABI_CWindows__CMedia__CCore__CTimedMetadataTrack* vhnd,
        EventRegistrationToken* result);
    HRESULT (STDMETHODCALLTYPE* remove_VectorChanged)(__x_ABI_C__FIObservableVector_1___x_ABI_CWindows__CMedia__CCore__CTimedMetadataTrack* This,
        EventRegistrationToken token);

        END_INTERFACE
    } __x_ABI_C__FIObservableVector_1___x_ABI_CWindows__CMedia__CCore__CTimedMetadataTrackVtbl;

    interface __x_ABI_C__FIObservableVector_1___x_ABI_CWindows__CMedia__CCore__CTimedMetadataTrack
    {
        CONST_VTBL struct __x_ABI_C__FIObservableVector_1___x_ABI_CWindows__CMedia__CCore__CTimedMetadataTrackVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIObservableVector_1___x_ABI_CWindows__CMedia__CCore__CTimedMetadataTrack_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CCore__CTimedTextSource_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CCore__CTimedTextSource_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CCore__CTimedTextSource __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CCore__CTimedTextSource;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CCore__CTimedTextSource;

    typedef struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CCore__CTimedTextSourceVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CCore__CTimedTextSource* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CCore__CTimedTextSource* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CCore__CTimedTextSource* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CCore__CTimedTextSource* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CCore__CTimedTextSource* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CCore__CTimedTextSource* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CCore__CTimedTextSource* This,
        UINT32 index,
        __x_ABI_CWindows_CMedia_CCore_CITimedTextSource** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CCore__CTimedTextSource* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CCore__CTimedTextSource* This,
        __x_ABI_CWindows_CMedia_CCore_CITimedTextSource* value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CCore__CTimedTextSource* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        __x_ABI_CWindows_CMedia_CCore_CITimedTextSource** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CCore__CTimedTextSourceVtbl;

    interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CCore__CTimedTextSource
    {
        CONST_VTBL struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CCore__CTimedTextSourceVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CCore__CTimedTextSource_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CCore__CTimedTextSource_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CCore__CTimedTextSource_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CCore__CTimedTextSource __x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CCore__CTimedTextSource;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CCore__CTimedTextSource;

    typedef struct __x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CCore__CTimedTextSourceVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CCore__CTimedTextSource* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CCore__CTimedTextSource* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CCore__CTimedTextSource* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CCore__CTimedTextSource* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CCore__CTimedTextSource* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CCore__CTimedTextSource* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CCore__CTimedTextSource* This,
        UINT32 index,
        __x_ABI_CWindows_CMedia_CCore_CITimedTextSource** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CCore__CTimedTextSource* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* GetView)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CCore__CTimedTextSource* This,
        __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CCore__CTimedTextSource** result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CCore__CTimedTextSource* This,
        __x_ABI_CWindows_CMedia_CCore_CITimedTextSource* value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* SetAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CCore__CTimedTextSource* This,
        UINT32 index,
        __x_ABI_CWindows_CMedia_CCore_CITimedTextSource* value);
    HRESULT (STDMETHODCALLTYPE* InsertAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CCore__CTimedTextSource* This,
        UINT32 index,
        __x_ABI_CWindows_CMedia_CCore_CITimedTextSource* value);
    HRESULT (STDMETHODCALLTYPE* RemoveAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CCore__CTimedTextSource* This,
        UINT32 index);
    HRESULT (STDMETHODCALLTYPE* Append)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CCore__CTimedTextSource* This,
        __x_ABI_CWindows_CMedia_CCore_CITimedTextSource* value);
    HRESULT (STDMETHODCALLTYPE* RemoveAtEnd)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CCore__CTimedTextSource* This);
    HRESULT (STDMETHODCALLTYPE* Clear)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CCore__CTimedTextSource* This);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CCore__CTimedTextSource* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        __x_ABI_CWindows_CMedia_CCore_CITimedTextSource** items,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* ReplaceAll)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CCore__CTimedTextSource* This,
        UINT32 itemsLength,
        __x_ABI_CWindows_CMedia_CCore_CITimedTextSource** items);

        END_INTERFACE
    } __x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CCore__CTimedTextSourceVtbl;

    interface __x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CCore__CTimedTextSource
    {
        CONST_VTBL struct __x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CCore__CTimedTextSourceVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CCore__CTimedTextSource_INTERFACE_DEFINED__
    
typedef interface __x_ABI_C__FIObservableVector_1___x_ABI_CWindows__CMedia__CCore__CTimedTextSource __x_ABI_C__FIObservableVector_1___x_ABI_CWindows__CMedia__CCore__CTimedTextSource;

#if !defined(____x_ABI_C__FVectorChangedEventHandler_1___x_ABI_CWindows__CMedia__CCore__CTimedTextSource_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FVectorChangedEventHandler_1___x_ABI_CWindows__CMedia__CCore__CTimedTextSource_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FVectorChangedEventHandler_1___x_ABI_CWindows__CMedia__CCore__CTimedTextSource __x_ABI_C__FVectorChangedEventHandler_1___x_ABI_CWindows__CMedia__CCore__CTimedTextSource;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FVectorChangedEventHandler_1___x_ABI_CWindows__CMedia__CCore__CTimedTextSource;

    typedef struct __x_ABI_C__FVectorChangedEventHandler_1___x_ABI_CWindows__CMedia__CCore__CTimedTextSourceVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FVectorChangedEventHandler_1___x_ABI_CWindows__CMedia__CCore__CTimedTextSource* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FVectorChangedEventHandler_1___x_ABI_CWindows__CMedia__CCore__CTimedTextSource* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FVectorChangedEventHandler_1___x_ABI_CWindows__CMedia__CCore__CTimedTextSource* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FVectorChangedEventHandler_1___x_ABI_CWindows__CMedia__CCore__CTimedTextSource* This,
        __x_ABI_C__FIObservableVector_1___x_ABI_CWindows__CMedia__CCore__CTimedTextSource* sender,
        __x_ABI_CWindows_CFoundation_CCollections_CIVectorChangedEventArgs* event);

        END_INTERFACE
    } __x_ABI_C__FVectorChangedEventHandler_1___x_ABI_CWindows__CMedia__CCore__CTimedTextSourceVtbl;

    interface __x_ABI_C__FVectorChangedEventHandler_1___x_ABI_CWindows__CMedia__CCore__CTimedTextSource
    {
        CONST_VTBL struct __x_ABI_C__FVectorChangedEventHandler_1___x_ABI_CWindows__CMedia__CCore__CTimedTextSourceVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FVectorChangedEventHandler_1___x_ABI_CWindows__CMedia__CCore__CTimedTextSource_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIObservableVector_1___x_ABI_CWindows__CMedia__CCore__CTimedTextSource_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIObservableVector_1___x_ABI_CWindows__CMedia__CCore__CTimedTextSource_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIObservableVector_1___x_ABI_CWindows__CMedia__CCore__CTimedTextSource __x_ABI_C__FIObservableVector_1___x_ABI_CWindows__CMedia__CCore__CTimedTextSource;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIObservableVector_1___x_ABI_CWindows__CMedia__CCore__CTimedTextSource;

    typedef struct __x_ABI_C__FIObservableVector_1___x_ABI_CWindows__CMedia__CCore__CTimedTextSourceVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIObservableVector_1___x_ABI_CWindows__CMedia__CCore__CTimedTextSource* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIObservableVector_1___x_ABI_CWindows__CMedia__CCore__CTimedTextSource* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIObservableVector_1___x_ABI_CWindows__CMedia__CCore__CTimedTextSource* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIObservableVector_1___x_ABI_CWindows__CMedia__CCore__CTimedTextSource* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIObservableVector_1___x_ABI_CWindows__CMedia__CCore__CTimedTextSource* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIObservableVector_1___x_ABI_CWindows__CMedia__CCore__CTimedTextSource* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* add_VectorChanged)(__x_ABI_C__FIObservableVector_1___x_ABI_CWindows__CMedia__CCore__CTimedTextSource* This,
        __x_ABI_C__FVectorChangedEventHandler_1___x_ABI_CWindows__CMedia__CCore__CTimedTextSource* vhnd,
        EventRegistrationToken* result);
    HRESULT (STDMETHODCALLTYPE* remove_VectorChanged)(__x_ABI_C__FIObservableVector_1___x_ABI_CWindows__CMedia__CCore__CTimedTextSource* This,
        EventRegistrationToken token);

        END_INTERFACE
    } __x_ABI_C__FIObservableVector_1___x_ABI_CWindows__CMedia__CCore__CTimedTextSourceVtbl;

    interface __x_ABI_C__FIObservableVector_1___x_ABI_CWindows__CMedia__CCore__CTimedTextSource
    {
        CONST_VTBL struct __x_ABI_C__FIObservableVector_1___x_ABI_CWindows__CMedia__CCore__CTimedTextSourceVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIObservableVector_1___x_ABI_CWindows__CMedia__CCore__CTimedTextSource_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVectorView_1_HSTRING_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVectorView_1_HSTRING_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVectorView_1_HSTRING __x_ABI_C__FIVectorView_1_HSTRING;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVectorView_1_HSTRING;

    typedef struct __x_ABI_C__FIVectorView_1_HSTRINGVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVectorView_1_HSTRING* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVectorView_1_HSTRING* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVectorView_1_HSTRING* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVectorView_1_HSTRING* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVectorView_1_HSTRING* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVectorView_1_HSTRING* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVectorView_1_HSTRING* This,
        UINT32 index,
        HSTRING* result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVectorView_1_HSTRING* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVectorView_1_HSTRING* This,
        HSTRING value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVectorView_1_HSTRING* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        HSTRING* items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIVectorView_1_HSTRINGVtbl;

    interface __x_ABI_C__FIVectorView_1_HSTRING
    {
        CONST_VTBL struct __x_ABI_C__FIVectorView_1_HSTRINGVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVectorView_1_HSTRING_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapPixelFormat_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapPixelFormat_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapPixelFormat __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapPixelFormat;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapPixelFormat;

    typedef struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapPixelFormatVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapPixelFormat* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapPixelFormat* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapPixelFormat* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapPixelFormat* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapPixelFormat* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapPixelFormat* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapPixelFormat* This,
        UINT32 index,
        enum __x_ABI_CWindows_CGraphics_CImaging_CBitmapPixelFormat* result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapPixelFormat* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapPixelFormat* This,
        enum __x_ABI_CWindows_CGraphics_CImaging_CBitmapPixelFormat value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapPixelFormat* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        enum __x_ABI_CWindows_CGraphics_CImaging_CBitmapPixelFormat* items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapPixelFormatVtbl;

    interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapPixelFormat
    {
        CONST_VTBL struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapPixelFormatVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapPixelFormat_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CCore__CIMediaCue_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CCore__CIMediaCue_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CCore__CIMediaCue __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CCore__CIMediaCue;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CCore__CIMediaCue;

    typedef struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CCore__CIMediaCueVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CCore__CIMediaCue* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CCore__CIMediaCue* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CCore__CIMediaCue* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CCore__CIMediaCue* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CCore__CIMediaCue* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CCore__CIMediaCue* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CCore__CIMediaCue* This,
        UINT32 index,
        __x_ABI_CWindows_CMedia_CCore_CIMediaCue** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CCore__CIMediaCue* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CCore__CIMediaCue* This,
        __x_ABI_CWindows_CMedia_CCore_CIMediaCue* value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CCore__CIMediaCue* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        __x_ABI_CWindows_CMedia_CCore_CIMediaCue** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CCore__CIMediaCueVtbl;

    interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CCore__CIMediaCue
    {
        CONST_VTBL struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CCore__CIMediaCueVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CCore__CIMediaCue_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CCore__CMseSourceBuffer_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CCore__CMseSourceBuffer_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CCore__CMseSourceBuffer __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CCore__CMseSourceBuffer;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CCore__CMseSourceBuffer;

    typedef struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CCore__CMseSourceBufferVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CCore__CMseSourceBuffer* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CCore__CMseSourceBuffer* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CCore__CMseSourceBuffer* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CCore__CMseSourceBuffer* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CCore__CMseSourceBuffer* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CCore__CMseSourceBuffer* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CCore__CMseSourceBuffer* This,
        UINT32 index,
        __x_ABI_CWindows_CMedia_CCore_CIMseSourceBuffer** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CCore__CMseSourceBuffer* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CCore__CMseSourceBuffer* This,
        __x_ABI_CWindows_CMedia_CCore_CIMseSourceBuffer* value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CCore__CMseSourceBuffer* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        __x_ABI_CWindows_CMedia_CCore_CIMseSourceBuffer** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CCore__CMseSourceBufferVtbl;

    interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CCore__CMseSourceBuffer
    {
        CONST_VTBL struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CCore__CMseSourceBufferVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CCore__CMseSourceBuffer_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CCore__CMseTimeRange_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CCore__CMseTimeRange_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CCore__CMseTimeRange __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CCore__CMseTimeRange;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CCore__CMseTimeRange;

    typedef struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CCore__CMseTimeRangeVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CCore__CMseTimeRange* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CCore__CMseTimeRange* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CCore__CMseTimeRange* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CCore__CMseTimeRange* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CCore__CMseTimeRange* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CCore__CMseTimeRange* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CCore__CMseTimeRange* This,
        UINT32 index,
        struct __x_ABI_CWindows_CMedia_CCore_CMseTimeRange* result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CCore__CMseTimeRange* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CCore__CMseTimeRange* This,
        struct __x_ABI_CWindows_CMedia_CCore_CMseTimeRange value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CCore__CMseTimeRange* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        struct __x_ABI_CWindows_CMedia_CCore_CMseTimeRange* items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CCore__CMseTimeRangeVtbl;

    interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CCore__CMseTimeRange
    {
        CONST_VTBL struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CCore__CMseTimeRangeVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CCore__CMseTimeRange_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CCore__CTimedTextLine_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CCore__CTimedTextLine_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CCore__CTimedTextLine __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CCore__CTimedTextLine;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CCore__CTimedTextLine;

    typedef struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CCore__CTimedTextLineVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CCore__CTimedTextLine* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CCore__CTimedTextLine* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CCore__CTimedTextLine* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CCore__CTimedTextLine* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CCore__CTimedTextLine* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CCore__CTimedTextLine* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CCore__CTimedTextLine* This,
        UINT32 index,
        __x_ABI_CWindows_CMedia_CCore_CITimedTextLine** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CCore__CTimedTextLine* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CCore__CTimedTextLine* This,
        __x_ABI_CWindows_CMedia_CCore_CITimedTextLine* value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CCore__CTimedTextLine* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        __x_ABI_CWindows_CMedia_CCore_CITimedTextLine** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CCore__CTimedTextLineVtbl;

    interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CCore__CTimedTextLine
    {
        CONST_VTBL struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CCore__CTimedTextLineVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CCore__CTimedTextLine_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CCore__CTimedTextSubformat_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CCore__CTimedTextSubformat_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CCore__CTimedTextSubformat __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CCore__CTimedTextSubformat;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CCore__CTimedTextSubformat;

    typedef struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CCore__CTimedTextSubformatVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CCore__CTimedTextSubformat* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CCore__CTimedTextSubformat* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CCore__CTimedTextSubformat* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CCore__CTimedTextSubformat* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CCore__CTimedTextSubformat* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CCore__CTimedTextSubformat* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CCore__CTimedTextSubformat* This,
        UINT32 index,
        __x_ABI_CWindows_CMedia_CCore_CITimedTextSubformat** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CCore__CTimedTextSubformat* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CCore__CTimedTextSubformat* This,
        __x_ABI_CWindows_CMedia_CCore_CITimedTextSubformat* value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CCore__CTimedTextSubformat* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        __x_ABI_CWindows_CMedia_CCore_CITimedTextSubformat** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CCore__CTimedTextSubformatVtbl;

    interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CCore__CTimedTextSubformat
    {
        CONST_VTBL struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CCore__CTimedTextSubformatVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CCore__CTimedTextSubformat_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CDevices__CCore__CFrameController_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CDevices__CCore__CFrameController_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CDevices__CCore__CFrameController __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CDevices__CCore__CFrameController;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CDevices__CCore__CFrameController;

    typedef struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CDevices__CCore__CFrameControllerVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CDevices__CCore__CFrameController* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CDevices__CCore__CFrameController* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CDevices__CCore__CFrameController* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CDevices__CCore__CFrameController* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CDevices__CCore__CFrameController* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CDevices__CCore__CFrameController* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CDevices__CCore__CFrameController* This,
        UINT32 index,
        __x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameController** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CDevices__CCore__CFrameController* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CDevices__CCore__CFrameController* This,
        __x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameController* value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CDevices__CCore__CFrameController* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        __x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameController** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CDevices__CCore__CFrameControllerVtbl;

    interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CDevices__CCore__CFrameController
    {
        CONST_VTBL struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CDevices__CCore__CFrameControllerVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CDevices__CCore__CFrameController_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CFaceAnalysis__CDetectedFace_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CFaceAnalysis__CDetectedFace_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CFaceAnalysis__CDetectedFace __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CFaceAnalysis__CDetectedFace;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CFaceAnalysis__CDetectedFace;

    typedef struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CFaceAnalysis__CDetectedFaceVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CFaceAnalysis__CDetectedFace* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CFaceAnalysis__CDetectedFace* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CFaceAnalysis__CDetectedFace* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CFaceAnalysis__CDetectedFace* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CFaceAnalysis__CDetectedFace* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CFaceAnalysis__CDetectedFace* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CFaceAnalysis__CDetectedFace* This,
        UINT32 index,
        __x_ABI_CWindows_CMedia_CFaceAnalysis_CIDetectedFace** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CFaceAnalysis__CDetectedFace* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CFaceAnalysis__CDetectedFace* This,
        __x_ABI_CWindows_CMedia_CFaceAnalysis_CIDetectedFace* value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CFaceAnalysis__CDetectedFace* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        __x_ABI_CWindows_CMedia_CFaceAnalysis_CIDetectedFace** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CFaceAnalysis__CDetectedFaceVtbl;

    interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CFaceAnalysis__CDetectedFace
    {
        CONST_VTBL struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CFaceAnalysis__CDetectedFaceVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CFaceAnalysis__CDetectedFace_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CCore__CTimedTextLine_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CCore__CTimedTextLine_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CCore__CTimedTextLine __x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CCore__CTimedTextLine;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CCore__CTimedTextLine;

    typedef struct __x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CCore__CTimedTextLineVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CCore__CTimedTextLine* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CCore__CTimedTextLine* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CCore__CTimedTextLine* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CCore__CTimedTextLine* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CCore__CTimedTextLine* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CCore__CTimedTextLine* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CCore__CTimedTextLine* This,
        UINT32 index,
        __x_ABI_CWindows_CMedia_CCore_CITimedTextLine** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CCore__CTimedTextLine* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* GetView)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CCore__CTimedTextLine* This,
        __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CCore__CTimedTextLine** result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CCore__CTimedTextLine* This,
        __x_ABI_CWindows_CMedia_CCore_CITimedTextLine* value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* SetAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CCore__CTimedTextLine* This,
        UINT32 index,
        __x_ABI_CWindows_CMedia_CCore_CITimedTextLine* value);
    HRESULT (STDMETHODCALLTYPE* InsertAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CCore__CTimedTextLine* This,
        UINT32 index,
        __x_ABI_CWindows_CMedia_CCore_CITimedTextLine* value);
    HRESULT (STDMETHODCALLTYPE* RemoveAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CCore__CTimedTextLine* This,
        UINT32 index);
    HRESULT (STDMETHODCALLTYPE* Append)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CCore__CTimedTextLine* This,
        __x_ABI_CWindows_CMedia_CCore_CITimedTextLine* value);
    HRESULT (STDMETHODCALLTYPE* RemoveAtEnd)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CCore__CTimedTextLine* This);
    HRESULT (STDMETHODCALLTYPE* Clear)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CCore__CTimedTextLine* This);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CCore__CTimedTextLine* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        __x_ABI_CWindows_CMedia_CCore_CITimedTextLine** items,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* ReplaceAll)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CCore__CTimedTextLine* This,
        UINT32 itemsLength,
        __x_ABI_CWindows_CMedia_CCore_CITimedTextLine** items);

        END_INTERFACE
    } __x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CCore__CTimedTextLineVtbl;

    interface __x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CCore__CTimedTextLine
    {
        CONST_VTBL struct __x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CCore__CTimedTextLineVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CCore__CTimedTextLine_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CCore__CTimedTextSubformat_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CCore__CTimedTextSubformat_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CCore__CTimedTextSubformat __x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CCore__CTimedTextSubformat;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CCore__CTimedTextSubformat;

    typedef struct __x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CCore__CTimedTextSubformatVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CCore__CTimedTextSubformat* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CCore__CTimedTextSubformat* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CCore__CTimedTextSubformat* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CCore__CTimedTextSubformat* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CCore__CTimedTextSubformat* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CCore__CTimedTextSubformat* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CCore__CTimedTextSubformat* This,
        UINT32 index,
        __x_ABI_CWindows_CMedia_CCore_CITimedTextSubformat** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CCore__CTimedTextSubformat* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* GetView)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CCore__CTimedTextSubformat* This,
        __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CCore__CTimedTextSubformat** result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CCore__CTimedTextSubformat* This,
        __x_ABI_CWindows_CMedia_CCore_CITimedTextSubformat* value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* SetAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CCore__CTimedTextSubformat* This,
        UINT32 index,
        __x_ABI_CWindows_CMedia_CCore_CITimedTextSubformat* value);
    HRESULT (STDMETHODCALLTYPE* InsertAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CCore__CTimedTextSubformat* This,
        UINT32 index,
        __x_ABI_CWindows_CMedia_CCore_CITimedTextSubformat* value);
    HRESULT (STDMETHODCALLTYPE* RemoveAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CCore__CTimedTextSubformat* This,
        UINT32 index);
    HRESULT (STDMETHODCALLTYPE* Append)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CCore__CTimedTextSubformat* This,
        __x_ABI_CWindows_CMedia_CCore_CITimedTextSubformat* value);
    HRESULT (STDMETHODCALLTYPE* RemoveAtEnd)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CCore__CTimedTextSubformat* This);
    HRESULT (STDMETHODCALLTYPE* Clear)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CCore__CTimedTextSubformat* This);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CCore__CTimedTextSubformat* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        __x_ABI_CWindows_CMedia_CCore_CITimedTextSubformat** items,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* ReplaceAll)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CCore__CTimedTextSubformat* This,
        UINT32 itemsLength,
        __x_ABI_CWindows_CMedia_CCore_CITimedTextSubformat** items);

        END_INTERFACE
    } __x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CCore__CTimedTextSubformatVtbl;

    interface __x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CCore__CTimedTextSubformat
    {
        CONST_VTBL struct __x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CCore__CTimedTextSubformatVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CCore__CTimedTextSubformat_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIReference_1_double_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIReference_1_double_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIReference_1_double __x_ABI_C__FIReference_1_double;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIReference_1_double;

    typedef struct __x_ABI_C__FIReference_1_doubleVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIReference_1_double* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIReference_1_double* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIReference_1_double* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIReference_1_double* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIReference_1_double* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIReference_1_double* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Value)(__x_ABI_C__FIReference_1_double* This,
        DOUBLE* result);

        END_INTERFACE
    } __x_ABI_C__FIReference_1_doubleVtbl;

    interface __x_ABI_C__FIReference_1_double
    {
        CONST_VTBL struct __x_ABI_C__FIReference_1_doubleVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIReference_1_double_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIReference_1_int_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIReference_1_int_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIReference_1_int __x_ABI_C__FIReference_1_int;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIReference_1_int;

    typedef struct __x_ABI_C__FIReference_1_intVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIReference_1_int* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIReference_1_int* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIReference_1_int* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIReference_1_int* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIReference_1_int* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIReference_1_int* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Value)(__x_ABI_C__FIReference_1_int* This,
        INT32* result);

        END_INTERFACE
    } __x_ABI_C__FIReference_1_intVtbl;

    interface __x_ABI_C__FIReference_1_int
    {
        CONST_VTBL struct __x_ABI_C__FIReference_1_intVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIReference_1_int_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIReference_1_UINT32_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIReference_1_UINT32_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIReference_1_UINT32 __x_ABI_C__FIReference_1_UINT32;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIReference_1_UINT32;

    typedef struct __x_ABI_C__FIReference_1_UINT32Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIReference_1_UINT32* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIReference_1_UINT32* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIReference_1_UINT32* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIReference_1_UINT32* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIReference_1_UINT32* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIReference_1_UINT32* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Value)(__x_ABI_C__FIReference_1_UINT32* This,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIReference_1_UINT32Vtbl;

    interface __x_ABI_C__FIReference_1_UINT32
    {
        CONST_VTBL struct __x_ABI_C__FIReference_1_UINT32Vtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIReference_1_UINT32_INTERFACE_DEFINED__
    
typedef struct __x_ABI_CWindows_CFoundation_CTimeSpan __x_ABI_CWindows_CFoundation_CTimeSpan;

#if !defined(____x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CTimeSpan_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CTimeSpan_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CTimeSpan __x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CTimeSpan;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CTimeSpan;

    typedef struct __x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CTimeSpanVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CTimeSpan* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CTimeSpan* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CTimeSpan* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CTimeSpan* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CTimeSpan* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CTimeSpan* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Value)(__x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CTimeSpan* This,
        struct __x_ABI_CWindows_CFoundation_CTimeSpan* result);

        END_INTERFACE
    } __x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CTimeSpanVtbl;

    interface __x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CTimeSpan
    {
        CONST_VTBL struct __x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CTimeSpanVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CTimeSpan_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIReference_1___x_ABI_CWindows__CMedia__CCore__CMseTimeRange_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIReference_1___x_ABI_CWindows__CMedia__CCore__CMseTimeRange_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIReference_1___x_ABI_CWindows__CMedia__CCore__CMseTimeRange __x_ABI_C__FIReference_1___x_ABI_CWindows__CMedia__CCore__CMseTimeRange;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIReference_1___x_ABI_CWindows__CMedia__CCore__CMseTimeRange;

    typedef struct __x_ABI_C__FIReference_1___x_ABI_CWindows__CMedia__CCore__CMseTimeRangeVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIReference_1___x_ABI_CWindows__CMedia__CCore__CMseTimeRange* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIReference_1___x_ABI_CWindows__CMedia__CCore__CMseTimeRange* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIReference_1___x_ABI_CWindows__CMedia__CCore__CMseTimeRange* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIReference_1___x_ABI_CWindows__CMedia__CCore__CMseTimeRange* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIReference_1___x_ABI_CWindows__CMedia__CCore__CMseTimeRange* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIReference_1___x_ABI_CWindows__CMedia__CCore__CMseTimeRange* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Value)(__x_ABI_C__FIReference_1___x_ABI_CWindows__CMedia__CCore__CMseTimeRange* This,
        struct __x_ABI_CWindows_CMedia_CCore_CMseTimeRange* result);

        END_INTERFACE
    } __x_ABI_C__FIReference_1___x_ABI_CWindows__CMedia__CCore__CMseTimeRangeVtbl;

    interface __x_ABI_C__FIReference_1___x_ABI_CWindows__CMedia__CCore__CMseTimeRange
    {
        CONST_VTBL struct __x_ABI_C__FIReference_1___x_ABI_CWindows__CMedia__CCore__CMseTimeRangeVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIReference_1___x_ABI_CWindows__CMedia__CCore__CMseTimeRange_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CAudioTrack___x_ABI_CWindows__CMedia__CCore__CAudioTrackOpenFailedEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CAudioTrack___x_ABI_CWindows__CMedia__CCore__CAudioTrackOpenFailedEventArgs_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CAudioTrack___x_ABI_CWindows__CMedia__CCore__CAudioTrackOpenFailedEventArgs __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CAudioTrack___x_ABI_CWindows__CMedia__CCore__CAudioTrackOpenFailedEventArgs;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CAudioTrack___x_ABI_CWindows__CMedia__CCore__CAudioTrackOpenFailedEventArgs;

    typedef struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CAudioTrack___x_ABI_CWindows__CMedia__CCore__CAudioTrackOpenFailedEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CAudioTrack___x_ABI_CWindows__CMedia__CCore__CAudioTrackOpenFailedEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CAudioTrack___x_ABI_CWindows__CMedia__CCore__CAudioTrackOpenFailedEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CAudioTrack___x_ABI_CWindows__CMedia__CCore__CAudioTrackOpenFailedEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CAudioTrack___x_ABI_CWindows__CMedia__CCore__CAudioTrackOpenFailedEventArgs* This,
        __x_ABI_CWindows_CMedia_CCore_CIMediaTrack* sender,
        __x_ABI_CWindows_CMedia_CCore_CIAudioTrackOpenFailedEventArgs* args);

        END_INTERFACE
    } __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CAudioTrack___x_ABI_CWindows__CMedia__CCore__CAudioTrackOpenFailedEventArgsVtbl;

    interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CAudioTrack___x_ABI_CWindows__CMedia__CCore__CAudioTrackOpenFailedEventArgs
    {
        CONST_VTBL struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CAudioTrack___x_ABI_CWindows__CMedia__CCore__CAudioTrackOpenFailedEventArgsVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CAudioTrack___x_ABI_CWindows__CMedia__CCore__CAudioTrackOpenFailedEventArgs_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CFaceDetectionEffect___x_ABI_CWindows__CMedia__CCore__CFaceDetectedEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CFaceDetectionEffect___x_ABI_CWindows__CMedia__CCore__CFaceDetectedEventArgs_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CFaceDetectionEffect___x_ABI_CWindows__CMedia__CCore__CFaceDetectedEventArgs __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CFaceDetectionEffect___x_ABI_CWindows__CMedia__CCore__CFaceDetectedEventArgs;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CFaceDetectionEffect___x_ABI_CWindows__CMedia__CCore__CFaceDetectedEventArgs;

    typedef struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CFaceDetectionEffect___x_ABI_CWindows__CMedia__CCore__CFaceDetectedEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CFaceDetectionEffect___x_ABI_CWindows__CMedia__CCore__CFaceDetectedEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CFaceDetectionEffect___x_ABI_CWindows__CMedia__CCore__CFaceDetectedEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CFaceDetectionEffect___x_ABI_CWindows__CMedia__CCore__CFaceDetectedEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CFaceDetectionEffect___x_ABI_CWindows__CMedia__CCore__CFaceDetectedEventArgs* This,
        __x_ABI_CWindows_CMedia_CCore_CIFaceDetectionEffect* sender,
        __x_ABI_CWindows_CMedia_CCore_CIFaceDetectedEventArgs* args);

        END_INTERFACE
    } __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CFaceDetectionEffect___x_ABI_CWindows__CMedia__CCore__CFaceDetectedEventArgsVtbl;

    interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CFaceDetectionEffect___x_ABI_CWindows__CMedia__CCore__CFaceDetectedEventArgs
    {
        CONST_VTBL struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CFaceDetectionEffect___x_ABI_CWindows__CMedia__CCore__CFaceDetectedEventArgsVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CFaceDetectionEffect___x_ABI_CWindows__CMedia__CCore__CFaceDetectedEventArgs_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CISingleSelectMediaTrackList_IInspectable_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CISingleSelectMediaTrackList_IInspectable_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CISingleSelectMediaTrackList_IInspectable __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CISingleSelectMediaTrackList_IInspectable;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CISingleSelectMediaTrackList_IInspectable;

    typedef struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CISingleSelectMediaTrackList_IInspectableVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CISingleSelectMediaTrackList_IInspectable* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CISingleSelectMediaTrackList_IInspectable* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CISingleSelectMediaTrackList_IInspectable* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CISingleSelectMediaTrackList_IInspectable* This,
        __x_ABI_CWindows_CMedia_CCore_CISingleSelectMediaTrackList* sender,
        IInspectable* args);

        END_INTERFACE
    } __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CISingleSelectMediaTrackList_IInspectableVtbl;

    interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CISingleSelectMediaTrackList_IInspectable
    {
        CONST_VTBL struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CISingleSelectMediaTrackList_IInspectableVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CISingleSelectMediaTrackList_IInspectable_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CMediaBinder___x_ABI_CWindows__CMedia__CCore__CMediaBindingEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CMediaBinder___x_ABI_CWindows__CMedia__CCore__CMediaBindingEventArgs_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CMediaBinder___x_ABI_CWindows__CMedia__CCore__CMediaBindingEventArgs __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CMediaBinder___x_ABI_CWindows__CMedia__CCore__CMediaBindingEventArgs;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CMediaBinder___x_ABI_CWindows__CMedia__CCore__CMediaBindingEventArgs;

    typedef struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CMediaBinder___x_ABI_CWindows__CMedia__CCore__CMediaBindingEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CMediaBinder___x_ABI_CWindows__CMedia__CCore__CMediaBindingEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CMediaBinder___x_ABI_CWindows__CMedia__CCore__CMediaBindingEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CMediaBinder___x_ABI_CWindows__CMedia__CCore__CMediaBindingEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CMediaBinder___x_ABI_CWindows__CMedia__CCore__CMediaBindingEventArgs* This,
        __x_ABI_CWindows_CMedia_CCore_CIMediaBinder* sender,
        __x_ABI_CWindows_CMedia_CCore_CIMediaBindingEventArgs* args);

        END_INTERFACE
    } __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CMediaBinder___x_ABI_CWindows__CMedia__CCore__CMediaBindingEventArgsVtbl;

    interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CMediaBinder___x_ABI_CWindows__CMedia__CCore__CMediaBindingEventArgs
    {
        CONST_VTBL struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CMediaBinder___x_ABI_CWindows__CMedia__CCore__CMediaBindingEventArgsVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CMediaBinder___x_ABI_CWindows__CMedia__CCore__CMediaBindingEventArgs_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CMediaBindingEventArgs_IInspectable_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CMediaBindingEventArgs_IInspectable_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CMediaBindingEventArgs_IInspectable __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CMediaBindingEventArgs_IInspectable;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CMediaBindingEventArgs_IInspectable;

    typedef struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CMediaBindingEventArgs_IInspectableVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CMediaBindingEventArgs_IInspectable* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CMediaBindingEventArgs_IInspectable* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CMediaBindingEventArgs_IInspectable* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CMediaBindingEventArgs_IInspectable* This,
        __x_ABI_CWindows_CMedia_CCore_CIMediaBindingEventArgs* sender,
        IInspectable* args);

        END_INTERFACE
    } __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CMediaBindingEventArgs_IInspectableVtbl;

    interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CMediaBindingEventArgs_IInspectable
    {
        CONST_VTBL struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CMediaBindingEventArgs_IInspectableVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CMediaBindingEventArgs_IInspectable_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CMediaSource___x_ABI_CWindows__CMedia__CCore__CMediaSourceOpenOperationCompletedEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CMediaSource___x_ABI_CWindows__CMedia__CCore__CMediaSourceOpenOperationCompletedEventArgs_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CMediaSource___x_ABI_CWindows__CMedia__CCore__CMediaSourceOpenOperationCompletedEventArgs __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CMediaSource___x_ABI_CWindows__CMedia__CCore__CMediaSourceOpenOperationCompletedEventArgs;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CMediaSource___x_ABI_CWindows__CMedia__CCore__CMediaSourceOpenOperationCompletedEventArgs;

    typedef struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CMediaSource___x_ABI_CWindows__CMedia__CCore__CMediaSourceOpenOperationCompletedEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CMediaSource___x_ABI_CWindows__CMedia__CCore__CMediaSourceOpenOperationCompletedEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CMediaSource___x_ABI_CWindows__CMedia__CCore__CMediaSourceOpenOperationCompletedEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CMediaSource___x_ABI_CWindows__CMedia__CCore__CMediaSourceOpenOperationCompletedEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CMediaSource___x_ABI_CWindows__CMedia__CCore__CMediaSourceOpenOperationCompletedEventArgs* This,
        __x_ABI_CWindows_CMedia_CCore_CIMediaSource2* sender,
        __x_ABI_CWindows_CMedia_CCore_CIMediaSourceOpenOperationCompletedEventArgs* args);

        END_INTERFACE
    } __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CMediaSource___x_ABI_CWindows__CMedia__CCore__CMediaSourceOpenOperationCompletedEventArgsVtbl;

    interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CMediaSource___x_ABI_CWindows__CMedia__CCore__CMediaSourceOpenOperationCompletedEventArgs
    {
        CONST_VTBL struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CMediaSource___x_ABI_CWindows__CMedia__CCore__CMediaSourceOpenOperationCompletedEventArgsVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CMediaSource___x_ABI_CWindows__CMedia__CCore__CMediaSourceOpenOperationCompletedEventArgs_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CMediaSource___x_ABI_CWindows__CMedia__CCore__CMediaSourceStateChangedEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CMediaSource___x_ABI_CWindows__CMedia__CCore__CMediaSourceStateChangedEventArgs_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CMediaSource___x_ABI_CWindows__CMedia__CCore__CMediaSourceStateChangedEventArgs __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CMediaSource___x_ABI_CWindows__CMedia__CCore__CMediaSourceStateChangedEventArgs;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CMediaSource___x_ABI_CWindows__CMedia__CCore__CMediaSourceStateChangedEventArgs;

    typedef struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CMediaSource___x_ABI_CWindows__CMedia__CCore__CMediaSourceStateChangedEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CMediaSource___x_ABI_CWindows__CMedia__CCore__CMediaSourceStateChangedEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CMediaSource___x_ABI_CWindows__CMedia__CCore__CMediaSourceStateChangedEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CMediaSource___x_ABI_CWindows__CMedia__CCore__CMediaSourceStateChangedEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CMediaSource___x_ABI_CWindows__CMedia__CCore__CMediaSourceStateChangedEventArgs* This,
        __x_ABI_CWindows_CMedia_CCore_CIMediaSource2* sender,
        __x_ABI_CWindows_CMedia_CCore_CIMediaSourceStateChangedEventArgs* args);

        END_INTERFACE
    } __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CMediaSource___x_ABI_CWindows__CMedia__CCore__CMediaSourceStateChangedEventArgsVtbl;

    interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CMediaSource___x_ABI_CWindows__CMedia__CCore__CMediaSourceStateChangedEventArgs
    {
        CONST_VTBL struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CMediaSource___x_ABI_CWindows__CMedia__CCore__CMediaSourceStateChangedEventArgsVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CMediaSource___x_ABI_CWindows__CMedia__CCore__CMediaSourceStateChangedEventArgs_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CMediaSourceAppServiceConnection___x_ABI_CWindows__CMedia__CCore__CInitializeMediaStreamSourceRequestedEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CMediaSourceAppServiceConnection___x_ABI_CWindows__CMedia__CCore__CInitializeMediaStreamSourceRequestedEventArgs_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CMediaSourceAppServiceConnection___x_ABI_CWindows__CMedia__CCore__CInitializeMediaStreamSourceRequestedEventArgs __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CMediaSourceAppServiceConnection___x_ABI_CWindows__CMedia__CCore__CInitializeMediaStreamSourceRequestedEventArgs;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CMediaSourceAppServiceConnection___x_ABI_CWindows__CMedia__CCore__CInitializeMediaStreamSourceRequestedEventArgs;

    typedef struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CMediaSourceAppServiceConnection___x_ABI_CWindows__CMedia__CCore__CInitializeMediaStreamSourceRequestedEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CMediaSourceAppServiceConnection___x_ABI_CWindows__CMedia__CCore__CInitializeMediaStreamSourceRequestedEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CMediaSourceAppServiceConnection___x_ABI_CWindows__CMedia__CCore__CInitializeMediaStreamSourceRequestedEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CMediaSourceAppServiceConnection___x_ABI_CWindows__CMedia__CCore__CInitializeMediaStreamSourceRequestedEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CMediaSourceAppServiceConnection___x_ABI_CWindows__CMedia__CCore__CInitializeMediaStreamSourceRequestedEventArgs* This,
        __x_ABI_CWindows_CMedia_CCore_CIMediaSourceAppServiceConnection* sender,
        __x_ABI_CWindows_CMedia_CCore_CIInitializeMediaStreamSourceRequestedEventArgs* args);

        END_INTERFACE
    } __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CMediaSourceAppServiceConnection___x_ABI_CWindows__CMedia__CCore__CInitializeMediaStreamSourceRequestedEventArgsVtbl;

    interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CMediaSourceAppServiceConnection___x_ABI_CWindows__CMedia__CCore__CInitializeMediaStreamSourceRequestedEventArgs
    {
        CONST_VTBL struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CMediaSourceAppServiceConnection___x_ABI_CWindows__CMedia__CCore__CInitializeMediaStreamSourceRequestedEventArgsVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CMediaSourceAppServiceConnection___x_ABI_CWindows__CMedia__CCore__CInitializeMediaStreamSourceRequestedEventArgs_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CMediaStreamSample_IInspectable_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CMediaStreamSample_IInspectable_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CMediaStreamSample_IInspectable __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CMediaStreamSample_IInspectable;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CMediaStreamSample_IInspectable;

    typedef struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CMediaStreamSample_IInspectableVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CMediaStreamSample_IInspectable* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CMediaStreamSample_IInspectable* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CMediaStreamSample_IInspectable* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CMediaStreamSample_IInspectable* This,
        __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSample* sender,
        IInspectable* args);

        END_INTERFACE
    } __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CMediaStreamSample_IInspectableVtbl;

    interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CMediaStreamSample_IInspectable
    {
        CONST_VTBL struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CMediaStreamSample_IInspectableVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CMediaStreamSample_IInspectable_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CMediaStreamSource_IInspectable_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CMediaStreamSource_IInspectable_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CMediaStreamSource_IInspectable __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CMediaStreamSource_IInspectable;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CMediaStreamSource_IInspectable;

    typedef struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CMediaStreamSource_IInspectableVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CMediaStreamSource_IInspectable* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CMediaStreamSource_IInspectable* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CMediaStreamSource_IInspectable* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CMediaStreamSource_IInspectable* This,
        __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource* sender,
        IInspectable* args);

        END_INTERFACE
    } __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CMediaStreamSource_IInspectableVtbl;

    interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CMediaStreamSource_IInspectable
    {
        CONST_VTBL struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CMediaStreamSource_IInspectableVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CMediaStreamSource_IInspectable_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CMediaStreamSource___x_ABI_CWindows__CMedia__CCore__CMediaStreamSourceClosedEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CMediaStreamSource___x_ABI_CWindows__CMedia__CCore__CMediaStreamSourceClosedEventArgs_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CMediaStreamSource___x_ABI_CWindows__CMedia__CCore__CMediaStreamSourceClosedEventArgs __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CMediaStreamSource___x_ABI_CWindows__CMedia__CCore__CMediaStreamSourceClosedEventArgs;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CMediaStreamSource___x_ABI_CWindows__CMedia__CCore__CMediaStreamSourceClosedEventArgs;

    typedef struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CMediaStreamSource___x_ABI_CWindows__CMedia__CCore__CMediaStreamSourceClosedEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CMediaStreamSource___x_ABI_CWindows__CMedia__CCore__CMediaStreamSourceClosedEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CMediaStreamSource___x_ABI_CWindows__CMedia__CCore__CMediaStreamSourceClosedEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CMediaStreamSource___x_ABI_CWindows__CMedia__CCore__CMediaStreamSourceClosedEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CMediaStreamSource___x_ABI_CWindows__CMedia__CCore__CMediaStreamSourceClosedEventArgs* This,
        __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource* sender,
        __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceClosedEventArgs* args);

        END_INTERFACE
    } __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CMediaStreamSource___x_ABI_CWindows__CMedia__CCore__CMediaStreamSourceClosedEventArgsVtbl;

    interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CMediaStreamSource___x_ABI_CWindows__CMedia__CCore__CMediaStreamSourceClosedEventArgs
    {
        CONST_VTBL struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CMediaStreamSource___x_ABI_CWindows__CMedia__CCore__CMediaStreamSourceClosedEventArgsVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CMediaStreamSource___x_ABI_CWindows__CMedia__CCore__CMediaStreamSourceClosedEventArgs_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CMediaStreamSource___x_ABI_CWindows__CMedia__CCore__CMediaStreamSourceSampleRenderedEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CMediaStreamSource___x_ABI_CWindows__CMedia__CCore__CMediaStreamSourceSampleRenderedEventArgs_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CMediaStreamSource___x_ABI_CWindows__CMedia__CCore__CMediaStreamSourceSampleRenderedEventArgs __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CMediaStreamSource___x_ABI_CWindows__CMedia__CCore__CMediaStreamSourceSampleRenderedEventArgs;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CMediaStreamSource___x_ABI_CWindows__CMedia__CCore__CMediaStreamSourceSampleRenderedEventArgs;

    typedef struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CMediaStreamSource___x_ABI_CWindows__CMedia__CCore__CMediaStreamSourceSampleRenderedEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CMediaStreamSource___x_ABI_CWindows__CMedia__CCore__CMediaStreamSourceSampleRenderedEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CMediaStreamSource___x_ABI_CWindows__CMedia__CCore__CMediaStreamSourceSampleRenderedEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CMediaStreamSource___x_ABI_CWindows__CMedia__CCore__CMediaStreamSourceSampleRenderedEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CMediaStreamSource___x_ABI_CWindows__CMedia__CCore__CMediaStreamSourceSampleRenderedEventArgs* This,
        __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource* sender,
        __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSampleRenderedEventArgs* args);

        END_INTERFACE
    } __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CMediaStreamSource___x_ABI_CWindows__CMedia__CCore__CMediaStreamSourceSampleRenderedEventArgsVtbl;

    interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CMediaStreamSource___x_ABI_CWindows__CMedia__CCore__CMediaStreamSourceSampleRenderedEventArgs
    {
        CONST_VTBL struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CMediaStreamSource___x_ABI_CWindows__CMedia__CCore__CMediaStreamSourceSampleRenderedEventArgsVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CMediaStreamSource___x_ABI_CWindows__CMedia__CCore__CMediaStreamSourceSampleRenderedEventArgs_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CMediaStreamSource___x_ABI_CWindows__CMedia__CCore__CMediaStreamSourceSampleRequestedEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CMediaStreamSource___x_ABI_CWindows__CMedia__CCore__CMediaStreamSourceSampleRequestedEventArgs_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CMediaStreamSource___x_ABI_CWindows__CMedia__CCore__CMediaStreamSourceSampleRequestedEventArgs __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CMediaStreamSource___x_ABI_CWindows__CMedia__CCore__CMediaStreamSourceSampleRequestedEventArgs;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CMediaStreamSource___x_ABI_CWindows__CMedia__CCore__CMediaStreamSourceSampleRequestedEventArgs;

    typedef struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CMediaStreamSource___x_ABI_CWindows__CMedia__CCore__CMediaStreamSourceSampleRequestedEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CMediaStreamSource___x_ABI_CWindows__CMedia__CCore__CMediaStreamSourceSampleRequestedEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CMediaStreamSource___x_ABI_CWindows__CMedia__CCore__CMediaStreamSourceSampleRequestedEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CMediaStreamSource___x_ABI_CWindows__CMedia__CCore__CMediaStreamSourceSampleRequestedEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CMediaStreamSource___x_ABI_CWindows__CMedia__CCore__CMediaStreamSourceSampleRequestedEventArgs* This,
        __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource* sender,
        __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSampleRequestedEventArgs* args);

        END_INTERFACE
    } __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CMediaStreamSource___x_ABI_CWindows__CMedia__CCore__CMediaStreamSourceSampleRequestedEventArgsVtbl;

    interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CMediaStreamSource___x_ABI_CWindows__CMedia__CCore__CMediaStreamSourceSampleRequestedEventArgs
    {
        CONST_VTBL struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CMediaStreamSource___x_ABI_CWindows__CMedia__CCore__CMediaStreamSourceSampleRequestedEventArgsVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CMediaStreamSource___x_ABI_CWindows__CMedia__CCore__CMediaStreamSourceSampleRequestedEventArgs_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CMediaStreamSource___x_ABI_CWindows__CMedia__CCore__CMediaStreamSourceStartingEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CMediaStreamSource___x_ABI_CWindows__CMedia__CCore__CMediaStreamSourceStartingEventArgs_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CMediaStreamSource___x_ABI_CWindows__CMedia__CCore__CMediaStreamSourceStartingEventArgs __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CMediaStreamSource___x_ABI_CWindows__CMedia__CCore__CMediaStreamSourceStartingEventArgs;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CMediaStreamSource___x_ABI_CWindows__CMedia__CCore__CMediaStreamSourceStartingEventArgs;

    typedef struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CMediaStreamSource___x_ABI_CWindows__CMedia__CCore__CMediaStreamSourceStartingEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CMediaStreamSource___x_ABI_CWindows__CMedia__CCore__CMediaStreamSourceStartingEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CMediaStreamSource___x_ABI_CWindows__CMedia__CCore__CMediaStreamSourceStartingEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CMediaStreamSource___x_ABI_CWindows__CMedia__CCore__CMediaStreamSourceStartingEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CMediaStreamSource___x_ABI_CWindows__CMedia__CCore__CMediaStreamSourceStartingEventArgs* This,
        __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource* sender,
        __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceStartingEventArgs* args);

        END_INTERFACE
    } __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CMediaStreamSource___x_ABI_CWindows__CMedia__CCore__CMediaStreamSourceStartingEventArgsVtbl;

    interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CMediaStreamSource___x_ABI_CWindows__CMedia__CCore__CMediaStreamSourceStartingEventArgs
    {
        CONST_VTBL struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CMediaStreamSource___x_ABI_CWindows__CMedia__CCore__CMediaStreamSourceStartingEventArgsVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CMediaStreamSource___x_ABI_CWindows__CMedia__CCore__CMediaStreamSourceStartingEventArgs_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CMediaStreamSource___x_ABI_CWindows__CMedia__CCore__CMediaStreamSourceSwitchStreamsRequestedEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CMediaStreamSource___x_ABI_CWindows__CMedia__CCore__CMediaStreamSourceSwitchStreamsRequestedEventArgs_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CMediaStreamSource___x_ABI_CWindows__CMedia__CCore__CMediaStreamSourceSwitchStreamsRequestedEventArgs __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CMediaStreamSource___x_ABI_CWindows__CMedia__CCore__CMediaStreamSourceSwitchStreamsRequestedEventArgs;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CMediaStreamSource___x_ABI_CWindows__CMedia__CCore__CMediaStreamSourceSwitchStreamsRequestedEventArgs;

    typedef struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CMediaStreamSource___x_ABI_CWindows__CMedia__CCore__CMediaStreamSourceSwitchStreamsRequestedEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CMediaStreamSource___x_ABI_CWindows__CMedia__CCore__CMediaStreamSourceSwitchStreamsRequestedEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CMediaStreamSource___x_ABI_CWindows__CMedia__CCore__CMediaStreamSourceSwitchStreamsRequestedEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CMediaStreamSource___x_ABI_CWindows__CMedia__CCore__CMediaStreamSourceSwitchStreamsRequestedEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CMediaStreamSource___x_ABI_CWindows__CMedia__CCore__CMediaStreamSourceSwitchStreamsRequestedEventArgs* This,
        __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource* sender,
        __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSwitchStreamsRequestedEventArgs* args);

        END_INTERFACE
    } __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CMediaStreamSource___x_ABI_CWindows__CMedia__CCore__CMediaStreamSourceSwitchStreamsRequestedEventArgsVtbl;

    interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CMediaStreamSource___x_ABI_CWindows__CMedia__CCore__CMediaStreamSourceSwitchStreamsRequestedEventArgs
    {
        CONST_VTBL struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CMediaStreamSource___x_ABI_CWindows__CMedia__CCore__CMediaStreamSourceSwitchStreamsRequestedEventArgsVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CMediaStreamSource___x_ABI_CWindows__CMedia__CCore__CMediaStreamSourceSwitchStreamsRequestedEventArgs_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CMseSourceBuffer_IInspectable_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CMseSourceBuffer_IInspectable_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CMseSourceBuffer_IInspectable __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CMseSourceBuffer_IInspectable;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CMseSourceBuffer_IInspectable;

    typedef struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CMseSourceBuffer_IInspectableVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CMseSourceBuffer_IInspectable* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CMseSourceBuffer_IInspectable* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CMseSourceBuffer_IInspectable* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CMseSourceBuffer_IInspectable* This,
        __x_ABI_CWindows_CMedia_CCore_CIMseSourceBuffer* sender,
        IInspectable* args);

        END_INTERFACE
    } __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CMseSourceBuffer_IInspectableVtbl;

    interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CMseSourceBuffer_IInspectable
    {
        CONST_VTBL struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CMseSourceBuffer_IInspectableVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CMseSourceBuffer_IInspectable_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CMseSourceBufferList_IInspectable_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CMseSourceBufferList_IInspectable_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CMseSourceBufferList_IInspectable __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CMseSourceBufferList_IInspectable;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CMseSourceBufferList_IInspectable;

    typedef struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CMseSourceBufferList_IInspectableVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CMseSourceBufferList_IInspectable* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CMseSourceBufferList_IInspectable* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CMseSourceBufferList_IInspectable* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CMseSourceBufferList_IInspectable* This,
        __x_ABI_CWindows_CMedia_CCore_CIMseSourceBufferList* sender,
        IInspectable* args);

        END_INTERFACE
    } __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CMseSourceBufferList_IInspectableVtbl;

    interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CMseSourceBufferList_IInspectable
    {
        CONST_VTBL struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CMseSourceBufferList_IInspectableVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CMseSourceBufferList_IInspectable_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CMseStreamSource_IInspectable_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CMseStreamSource_IInspectable_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CMseStreamSource_IInspectable __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CMseStreamSource_IInspectable;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CMseStreamSource_IInspectable;

    typedef struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CMseStreamSource_IInspectableVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CMseStreamSource_IInspectable* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CMseStreamSource_IInspectable* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CMseStreamSource_IInspectable* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CMseStreamSource_IInspectable* This,
        __x_ABI_CWindows_CMedia_CCore_CIMseStreamSource* sender,
        IInspectable* args);

        END_INTERFACE
    } __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CMseStreamSource_IInspectableVtbl;

    interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CMseStreamSource_IInspectable
    {
        CONST_VTBL struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CMseStreamSource_IInspectableVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CMseStreamSource_IInspectable_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CSceneAnalysisEffect___x_ABI_CWindows__CMedia__CCore__CSceneAnalyzedEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CSceneAnalysisEffect___x_ABI_CWindows__CMedia__CCore__CSceneAnalyzedEventArgs_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CSceneAnalysisEffect___x_ABI_CWindows__CMedia__CCore__CSceneAnalyzedEventArgs __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CSceneAnalysisEffect___x_ABI_CWindows__CMedia__CCore__CSceneAnalyzedEventArgs;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CSceneAnalysisEffect___x_ABI_CWindows__CMedia__CCore__CSceneAnalyzedEventArgs;

    typedef struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CSceneAnalysisEffect___x_ABI_CWindows__CMedia__CCore__CSceneAnalyzedEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CSceneAnalysisEffect___x_ABI_CWindows__CMedia__CCore__CSceneAnalyzedEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CSceneAnalysisEffect___x_ABI_CWindows__CMedia__CCore__CSceneAnalyzedEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CSceneAnalysisEffect___x_ABI_CWindows__CMedia__CCore__CSceneAnalyzedEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CSceneAnalysisEffect___x_ABI_CWindows__CMedia__CCore__CSceneAnalyzedEventArgs* This,
        __x_ABI_CWindows_CMedia_CCore_CISceneAnalysisEffect* sender,
        __x_ABI_CWindows_CMedia_CCore_CISceneAnalyzedEventArgs* args);

        END_INTERFACE
    } __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CSceneAnalysisEffect___x_ABI_CWindows__CMedia__CCore__CSceneAnalyzedEventArgsVtbl;

    interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CSceneAnalysisEffect___x_ABI_CWindows__CMedia__CCore__CSceneAnalyzedEventArgs
    {
        CONST_VTBL struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CSceneAnalysisEffect___x_ABI_CWindows__CMedia__CCore__CSceneAnalyzedEventArgsVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CSceneAnalysisEffect___x_ABI_CWindows__CMedia__CCore__CSceneAnalyzedEventArgs_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CTimedMetadataTrack___x_ABI_CWindows__CMedia__CCore__CMediaCueEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CTimedMetadataTrack___x_ABI_CWindows__CMedia__CCore__CMediaCueEventArgs_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CTimedMetadataTrack___x_ABI_CWindows__CMedia__CCore__CMediaCueEventArgs __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CTimedMetadataTrack___x_ABI_CWindows__CMedia__CCore__CMediaCueEventArgs;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CTimedMetadataTrack___x_ABI_CWindows__CMedia__CCore__CMediaCueEventArgs;

    typedef struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CTimedMetadataTrack___x_ABI_CWindows__CMedia__CCore__CMediaCueEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CTimedMetadataTrack___x_ABI_CWindows__CMedia__CCore__CMediaCueEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CTimedMetadataTrack___x_ABI_CWindows__CMedia__CCore__CMediaCueEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CTimedMetadataTrack___x_ABI_CWindows__CMedia__CCore__CMediaCueEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CTimedMetadataTrack___x_ABI_CWindows__CMedia__CCore__CMediaCueEventArgs* This,
        __x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrack* sender,
        __x_ABI_CWindows_CMedia_CCore_CIMediaCueEventArgs* args);

        END_INTERFACE
    } __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CTimedMetadataTrack___x_ABI_CWindows__CMedia__CCore__CMediaCueEventArgsVtbl;

    interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CTimedMetadataTrack___x_ABI_CWindows__CMedia__CCore__CMediaCueEventArgs
    {
        CONST_VTBL struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CTimedMetadataTrack___x_ABI_CWindows__CMedia__CCore__CMediaCueEventArgsVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CTimedMetadataTrack___x_ABI_CWindows__CMedia__CCore__CMediaCueEventArgs_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CTimedMetadataTrack___x_ABI_CWindows__CMedia__CCore__CTimedMetadataTrackFailedEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CTimedMetadataTrack___x_ABI_CWindows__CMedia__CCore__CTimedMetadataTrackFailedEventArgs_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CTimedMetadataTrack___x_ABI_CWindows__CMedia__CCore__CTimedMetadataTrackFailedEventArgs __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CTimedMetadataTrack___x_ABI_CWindows__CMedia__CCore__CTimedMetadataTrackFailedEventArgs;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CTimedMetadataTrack___x_ABI_CWindows__CMedia__CCore__CTimedMetadataTrackFailedEventArgs;

    typedef struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CTimedMetadataTrack___x_ABI_CWindows__CMedia__CCore__CTimedMetadataTrackFailedEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CTimedMetadataTrack___x_ABI_CWindows__CMedia__CCore__CTimedMetadataTrackFailedEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CTimedMetadataTrack___x_ABI_CWindows__CMedia__CCore__CTimedMetadataTrackFailedEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CTimedMetadataTrack___x_ABI_CWindows__CMedia__CCore__CTimedMetadataTrackFailedEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CTimedMetadataTrack___x_ABI_CWindows__CMedia__CCore__CTimedMetadataTrackFailedEventArgs* This,
        __x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrack* sender,
        __x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrackFailedEventArgs* args);

        END_INTERFACE
    } __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CTimedMetadataTrack___x_ABI_CWindows__CMedia__CCore__CTimedMetadataTrackFailedEventArgsVtbl;

    interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CTimedMetadataTrack___x_ABI_CWindows__CMedia__CCore__CTimedMetadataTrackFailedEventArgs
    {
        CONST_VTBL struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CTimedMetadataTrack___x_ABI_CWindows__CMedia__CCore__CTimedMetadataTrackFailedEventArgsVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CTimedMetadataTrack___x_ABI_CWindows__CMedia__CCore__CTimedMetadataTrackFailedEventArgs_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CTimedTextSource___x_ABI_CWindows__CMedia__CCore__CTimedTextSourceResolveResultEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CTimedTextSource___x_ABI_CWindows__CMedia__CCore__CTimedTextSourceResolveResultEventArgs_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CTimedTextSource___x_ABI_CWindows__CMedia__CCore__CTimedTextSourceResolveResultEventArgs __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CTimedTextSource___x_ABI_CWindows__CMedia__CCore__CTimedTextSourceResolveResultEventArgs;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CTimedTextSource___x_ABI_CWindows__CMedia__CCore__CTimedTextSourceResolveResultEventArgs;

    typedef struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CTimedTextSource___x_ABI_CWindows__CMedia__CCore__CTimedTextSourceResolveResultEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CTimedTextSource___x_ABI_CWindows__CMedia__CCore__CTimedTextSourceResolveResultEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CTimedTextSource___x_ABI_CWindows__CMedia__CCore__CTimedTextSourceResolveResultEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CTimedTextSource___x_ABI_CWindows__CMedia__CCore__CTimedTextSourceResolveResultEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CTimedTextSource___x_ABI_CWindows__CMedia__CCore__CTimedTextSourceResolveResultEventArgs* This,
        __x_ABI_CWindows_CMedia_CCore_CITimedTextSource* sender,
        __x_ABI_CWindows_CMedia_CCore_CITimedTextSourceResolveResultEventArgs* args);

        END_INTERFACE
    } __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CTimedTextSource___x_ABI_CWindows__CMedia__CCore__CTimedTextSourceResolveResultEventArgsVtbl;

    interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CTimedTextSource___x_ABI_CWindows__CMedia__CCore__CTimedTextSourceResolveResultEventArgs
    {
        CONST_VTBL struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CTimedTextSource___x_ABI_CWindows__CMedia__CCore__CTimedTextSourceResolveResultEventArgsVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CTimedTextSource___x_ABI_CWindows__CMedia__CCore__CTimedTextSourceResolveResultEventArgs_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CVideoStabilizationEffect___x_ABI_CWindows__CMedia__CCore__CVideoStabilizationEffectEnabledChangedEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CVideoStabilizationEffect___x_ABI_CWindows__CMedia__CCore__CVideoStabilizationEffectEnabledChangedEventArgs_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CVideoStabilizationEffect___x_ABI_CWindows__CMedia__CCore__CVideoStabilizationEffectEnabledChangedEventArgs __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CVideoStabilizationEffect___x_ABI_CWindows__CMedia__CCore__CVideoStabilizationEffectEnabledChangedEventArgs;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CVideoStabilizationEffect___x_ABI_CWindows__CMedia__CCore__CVideoStabilizationEffectEnabledChangedEventArgs;

    typedef struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CVideoStabilizationEffect___x_ABI_CWindows__CMedia__CCore__CVideoStabilizationEffectEnabledChangedEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CVideoStabilizationEffect___x_ABI_CWindows__CMedia__CCore__CVideoStabilizationEffectEnabledChangedEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CVideoStabilizationEffect___x_ABI_CWindows__CMedia__CCore__CVideoStabilizationEffectEnabledChangedEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CVideoStabilizationEffect___x_ABI_CWindows__CMedia__CCore__CVideoStabilizationEffectEnabledChangedEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CVideoStabilizationEffect___x_ABI_CWindows__CMedia__CCore__CVideoStabilizationEffectEnabledChangedEventArgs* This,
        __x_ABI_CWindows_CMedia_CCore_CIVideoStabilizationEffect* sender,
        __x_ABI_CWindows_CMedia_CCore_CIVideoStabilizationEffectEnabledChangedEventArgs* args);

        END_INTERFACE
    } __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CVideoStabilizationEffect___x_ABI_CWindows__CMedia__CCore__CVideoStabilizationEffectEnabledChangedEventArgsVtbl;

    interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CVideoStabilizationEffect___x_ABI_CWindows__CMedia__CCore__CVideoStabilizationEffectEnabledChangedEventArgs
    {
        CONST_VTBL struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CVideoStabilizationEffect___x_ABI_CWindows__CMedia__CCore__CVideoStabilizationEffectEnabledChangedEventArgsVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CVideoStabilizationEffect___x_ABI_CWindows__CMedia__CCore__CVideoStabilizationEffectEnabledChangedEventArgs_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CVideoTrack___x_ABI_CWindows__CMedia__CCore__CVideoTrackOpenFailedEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CVideoTrack___x_ABI_CWindows__CMedia__CCore__CVideoTrackOpenFailedEventArgs_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CVideoTrack___x_ABI_CWindows__CMedia__CCore__CVideoTrackOpenFailedEventArgs __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CVideoTrack___x_ABI_CWindows__CMedia__CCore__CVideoTrackOpenFailedEventArgs;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CVideoTrack___x_ABI_CWindows__CMedia__CCore__CVideoTrackOpenFailedEventArgs;

    typedef struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CVideoTrack___x_ABI_CWindows__CMedia__CCore__CVideoTrackOpenFailedEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CVideoTrack___x_ABI_CWindows__CMedia__CCore__CVideoTrackOpenFailedEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CVideoTrack___x_ABI_CWindows__CMedia__CCore__CVideoTrackOpenFailedEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CVideoTrack___x_ABI_CWindows__CMedia__CCore__CVideoTrackOpenFailedEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CVideoTrack___x_ABI_CWindows__CMedia__CCore__CVideoTrackOpenFailedEventArgs* This,
        __x_ABI_CWindows_CMedia_CCore_CIMediaTrack* sender,
        __x_ABI_CWindows_CMedia_CCore_CIVideoTrackOpenFailedEventArgs* args);

        END_INTERFACE
    } __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CVideoTrack___x_ABI_CWindows__CMedia__CCore__CVideoTrackOpenFailedEventArgsVtbl;

    interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CVideoTrack___x_ABI_CWindows__CMedia__CCore__CVideoTrackOpenFailedEventArgs
    {
        CONST_VTBL struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CVideoTrack___x_ABI_CWindows__CMedia__CCore__CVideoTrackOpenFailedEventArgsVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CVideoTrack___x_ABI_CWindows__CMedia__CCore__CVideoTrackOpenFailedEventArgs_INTERFACE_DEFINED__
    
#ifndef ____x_ABI_CWindows_CApplicationModel_CAppService_CIAppServiceConnection_FWD_DEFINED__
#define ____x_ABI_CWindows_CApplicationModel_CAppService_CIAppServiceConnection_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CApplicationModel_CAppService_CIAppServiceConnection __x_ABI_CWindows_CApplicationModel_CAppService_CIAppServiceConnection;

#endif // ____x_ABI_CWindows_CApplicationModel_CAppService_CIAppServiceConnection_FWD_DEFINED__

typedef enum __x_ABI_CWindows_CFoundation_CAsyncStatus __x_ABI_CWindows_CFoundation_CAsyncStatus;

#ifndef ____x_ABI_CWindows_CFoundation_CCollections_CIPropertySet_FWD_DEFINED__
#define ____x_ABI_CWindows_CFoundation_CCollections_CIPropertySet_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CFoundation_CCollections_CIPropertySet __x_ABI_CWindows_CFoundation_CCollections_CIPropertySet;

#endif // ____x_ABI_CWindows_CFoundation_CCollections_CIPropertySet_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CFoundation_CIDeferral_FWD_DEFINED__
#define ____x_ABI_CWindows_CFoundation_CIDeferral_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CFoundation_CIDeferral __x_ABI_CWindows_CFoundation_CIDeferral;

#endif // ____x_ABI_CWindows_CFoundation_CIDeferral_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CFoundation_CIAsyncAction_FWD_DEFINED__
#define ____x_ABI_CWindows_CFoundation_CIAsyncAction_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CFoundation_CIAsyncAction __x_ABI_CWindows_CFoundation_CIAsyncAction;

#endif // ____x_ABI_CWindows_CFoundation_CIAsyncAction_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CFoundation_CIAsyncInfo_FWD_DEFINED__
#define ____x_ABI_CWindows_CFoundation_CIAsyncInfo_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CFoundation_CIAsyncInfo __x_ABI_CWindows_CFoundation_CIAsyncInfo;

#endif // ____x_ABI_CWindows_CFoundation_CIAsyncInfo_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CFoundation_CIClosable_FWD_DEFINED__
#define ____x_ABI_CWindows_CFoundation_CIClosable_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CFoundation_CIClosable __x_ABI_CWindows_CFoundation_CIClosable;

#endif // ____x_ABI_CWindows_CFoundation_CIClosable_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CFoundation_CIPropertyValue_FWD_DEFINED__
#define ____x_ABI_CWindows_CFoundation_CIPropertyValue_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CFoundation_CIPropertyValue __x_ABI_CWindows_CFoundation_CIPropertyValue;

#endif // ____x_ABI_CWindows_CFoundation_CIPropertyValue_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CFoundation_CIUriRuntimeClass_FWD_DEFINED__
#define ____x_ABI_CWindows_CFoundation_CIUriRuntimeClass_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CFoundation_CIUriRuntimeClass __x_ABI_CWindows_CFoundation_CIUriRuntimeClass;

#endif // ____x_ABI_CWindows_CFoundation_CIUriRuntimeClass_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CGraphics_CDirectX_CDirect3D11_CIDirect3DSurface_FWD_DEFINED__
#define ____x_ABI_CWindows_CGraphics_CDirectX_CDirect3D11_CIDirect3DSurface_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CGraphics_CDirectX_CDirect3D11_CIDirect3DSurface __x_ABI_CWindows_CGraphics_CDirectX_CDirect3D11_CIDirect3DSurface;

#endif // ____x_ABI_CWindows_CGraphics_CDirectX_CDirect3D11_CIDirect3DSurface_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCapture_CICapturedFrameControlValues_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCapture_CICapturedFrameControlValues_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_CCapture_CICapturedFrameControlValues __x_ABI_CWindows_CMedia_CCapture_CICapturedFrameControlValues;

#endif // ____x_ABI_CWindows_CMedia_CCapture_CICapturedFrameControlValues_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCapture_CFrames_CIMediaFrameSource_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCapture_CFrames_CIMediaFrameSource_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_CCapture_CFrames_CIMediaFrameSource __x_ABI_CWindows_CMedia_CCapture_CFrames_CIMediaFrameSource;

#endif // ____x_ABI_CWindows_CMedia_CCapture_CFrames_CIMediaFrameSource_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCapture_CIVideoStreamConfiguration_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCapture_CIVideoStreamConfiguration_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_CCapture_CIVideoStreamConfiguration __x_ABI_CWindows_CMedia_CCapture_CIVideoStreamConfiguration;

#endif // ____x_ABI_CWindows_CMedia_CCapture_CIVideoStreamConfiguration_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CDevices_CIVideoDeviceController_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CDevices_CIVideoDeviceController_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_CDevices_CIVideoDeviceController __x_ABI_CWindows_CMedia_CDevices_CIVideoDeviceController;

#endif // ____x_ABI_CWindows_CMedia_CDevices_CIVideoDeviceController_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CEffects_CIVideoEffectDefinition_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CEffects_CIVideoEffectDefinition_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_CEffects_CIVideoEffectDefinition __x_ABI_CWindows_CMedia_CEffects_CIVideoEffectDefinition;

#endif // ____x_ABI_CWindows_CMedia_CEffects_CIVideoEffectDefinition_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CIMediaExtension_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CIMediaExtension_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_CIMediaExtension __x_ABI_CWindows_CMedia_CIMediaExtension;

#endif // ____x_ABI_CWindows_CMedia_CIMediaExtension_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CIMediaFrame_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CIMediaFrame_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_CIMediaFrame __x_ABI_CWindows_CMedia_CIMediaFrame;

#endif // ____x_ABI_CWindows_CMedia_CIMediaFrame_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CMediaProperties_CIAudioEncodingProperties_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CMediaProperties_CIAudioEncodingProperties_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_CMediaProperties_CIAudioEncodingProperties __x_ABI_CWindows_CMedia_CMediaProperties_CIAudioEncodingProperties;

#endif // ____x_ABI_CWindows_CMedia_CMediaProperties_CIAudioEncodingProperties_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CMediaProperties_CIMediaEncodingProperties_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CMediaProperties_CIMediaEncodingProperties_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_CMediaProperties_CIMediaEncodingProperties __x_ABI_CWindows_CMedia_CMediaProperties_CIMediaEncodingProperties;

#endif // ____x_ABI_CWindows_CMedia_CMediaProperties_CIMediaEncodingProperties_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CMediaProperties_CIVideoEncodingProperties_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CMediaProperties_CIVideoEncodingProperties_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_CMediaProperties_CIVideoEncodingProperties __x_ABI_CWindows_CMedia_CMediaProperties_CIVideoEncodingProperties;

#endif // ____x_ABI_CWindows_CMedia_CMediaProperties_CIVideoEncodingProperties_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackSource_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackSource_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackSource __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackSource;

#endif // ____x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackSource_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackItem_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackItem_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackItem __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackItem;

#endif // ____x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackItem_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CProtection_CIMediaProtectionManager_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CProtection_CIMediaProtectionManager_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_CProtection_CIMediaProtectionManager __x_ABI_CWindows_CMedia_CProtection_CIMediaProtectionManager;

#endif // ____x_ABI_CWindows_CMedia_CProtection_CIMediaProtectionManager_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CStreaming_CAdaptive_CIAdaptiveMediaSource_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CStreaming_CAdaptive_CIAdaptiveMediaSource_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_CStreaming_CAdaptive_CIAdaptiveMediaSource __x_ABI_CWindows_CMedia_CStreaming_CAdaptive_CIAdaptiveMediaSource;

#endif // ____x_ABI_CWindows_CMedia_CStreaming_CAdaptive_CIAdaptiveMediaSource_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CNetworking_CBackgroundTransfer_CIDownloadOperation_FWD_DEFINED__
#define ____x_ABI_CWindows_CNetworking_CBackgroundTransfer_CIDownloadOperation_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CNetworking_CBackgroundTransfer_CIDownloadOperation __x_ABI_CWindows_CNetworking_CBackgroundTransfer_CIDownloadOperation;

#endif // ____x_ABI_CWindows_CNetworking_CBackgroundTransfer_CIDownloadOperation_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CStorage_CFileProperties_CIMusicProperties_FWD_DEFINED__
#define ____x_ABI_CWindows_CStorage_CFileProperties_CIMusicProperties_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CStorage_CFileProperties_CIMusicProperties __x_ABI_CWindows_CStorage_CFileProperties_CIMusicProperties;

#endif // ____x_ABI_CWindows_CStorage_CFileProperties_CIMusicProperties_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CStorage_CFileProperties_CIVideoProperties_FWD_DEFINED__
#define ____x_ABI_CWindows_CStorage_CFileProperties_CIVideoProperties_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CStorage_CFileProperties_CIVideoProperties __x_ABI_CWindows_CStorage_CFileProperties_CIVideoProperties;

#endif // ____x_ABI_CWindows_CStorage_CFileProperties_CIVideoProperties_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CStorage_CIStorageFile_FWD_DEFINED__
#define ____x_ABI_CWindows_CStorage_CIStorageFile_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CStorage_CIStorageFile __x_ABI_CWindows_CStorage_CIStorageFile;

#endif // ____x_ABI_CWindows_CStorage_CIStorageFile_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CStorage_CStreams_CIBuffer_FWD_DEFINED__
#define ____x_ABI_CWindows_CStorage_CStreams_CIBuffer_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CStorage_CStreams_CIBuffer __x_ABI_CWindows_CStorage_CStreams_CIBuffer;

#endif // ____x_ABI_CWindows_CStorage_CStreams_CIBuffer_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CStorage_CStreams_CIInputStream_FWD_DEFINED__
#define ____x_ABI_CWindows_CStorage_CStreams_CIInputStream_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CStorage_CStreams_CIInputStream __x_ABI_CWindows_CStorage_CStreams_CIInputStream;

#endif // ____x_ABI_CWindows_CStorage_CStreams_CIInputStream_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CStorage_CStreams_CIRandomAccessStream_FWD_DEFINED__
#define ____x_ABI_CWindows_CStorage_CStreams_CIRandomAccessStream_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CStorage_CStreams_CIRandomAccessStream __x_ABI_CWindows_CStorage_CStreams_CIRandomAccessStream;

#endif // ____x_ABI_CWindows_CStorage_CStreams_CIRandomAccessStream_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CStorage_CStreams_CIRandomAccessStreamReference_FWD_DEFINED__
#define ____x_ABI_CWindows_CStorage_CStreams_CIRandomAccessStreamReference_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CStorage_CStreams_CIRandomAccessStreamReference __x_ABI_CWindows_CStorage_CStreams_CIRandomAccessStreamReference;

#endif // ____x_ABI_CWindows_CStorage_CStreams_CIRandomAccessStreamReference_FWD_DEFINED__

typedef struct __x_ABI_CWindows_CUI_CColor __x_ABI_CWindows_CUI_CColor;

typedef enum __x_ABI_CWindows_CMedia_CCore_CAudioDecoderDegradation __x_ABI_CWindows_CMedia_CCore_CAudioDecoderDegradation;

typedef enum __x_ABI_CWindows_CMedia_CCore_CAudioDecoderDegradationReason __x_ABI_CWindows_CMedia_CCore_CAudioDecoderDegradationReason;

typedef enum __x_ABI_CWindows_CMedia_CCore_CCodecCategory __x_ABI_CWindows_CMedia_CCore_CCodecCategory;

typedef enum __x_ABI_CWindows_CMedia_CCore_CCodecKind __x_ABI_CWindows_CMedia_CCore_CCodecKind;

typedef enum __x_ABI_CWindows_CMedia_CCore_CFaceDetectionMode __x_ABI_CWindows_CMedia_CCore_CFaceDetectionMode;

typedef enum __x_ABI_CWindows_CMedia_CCore_CMediaDecoderStatus __x_ABI_CWindows_CMedia_CCore_CMediaDecoderStatus;

typedef enum __x_ABI_CWindows_CMedia_CCore_CMediaSourceState __x_ABI_CWindows_CMedia_CCore_CMediaSourceState;

typedef enum __x_ABI_CWindows_CMedia_CCore_CMediaSourceStatus __x_ABI_CWindows_CMedia_CCore_CMediaSourceStatus;

typedef enum __x_ABI_CWindows_CMedia_CCore_CMediaStreamSourceClosedReason __x_ABI_CWindows_CMedia_CCore_CMediaStreamSourceClosedReason;

typedef enum __x_ABI_CWindows_CMedia_CCore_CMediaStreamSourceErrorStatus __x_ABI_CWindows_CMedia_CCore_CMediaStreamSourceErrorStatus;

typedef enum __x_ABI_CWindows_CMedia_CCore_CMediaTrackKind __x_ABI_CWindows_CMedia_CCore_CMediaTrackKind;

typedef enum __x_ABI_CWindows_CMedia_CCore_CMseAppendMode __x_ABI_CWindows_CMedia_CCore_CMseAppendMode;

typedef enum __x_ABI_CWindows_CMedia_CCore_CMseEndOfStreamStatus __x_ABI_CWindows_CMedia_CCore_CMseEndOfStreamStatus;

typedef enum __x_ABI_CWindows_CMedia_CCore_CMseReadyState __x_ABI_CWindows_CMedia_CCore_CMseReadyState;

typedef enum __x_ABI_CWindows_CMedia_CCore_CSceneAnalysisRecommendation __x_ABI_CWindows_CMedia_CCore_CSceneAnalysisRecommendation;

typedef enum __x_ABI_CWindows_CMedia_CCore_CTimedMetadataKind __x_ABI_CWindows_CMedia_CCore_CTimedMetadataKind;

typedef enum __x_ABI_CWindows_CMedia_CCore_CTimedMetadataTrackErrorCode __x_ABI_CWindows_CMedia_CCore_CTimedMetadataTrackErrorCode;

typedef enum __x_ABI_CWindows_CMedia_CCore_CTimedTextDisplayAlignment __x_ABI_CWindows_CMedia_CCore_CTimedTextDisplayAlignment;

typedef enum __x_ABI_CWindows_CMedia_CCore_CTimedTextFlowDirection __x_ABI_CWindows_CMedia_CCore_CTimedTextFlowDirection;

typedef enum __x_ABI_CWindows_CMedia_CCore_CTimedTextFontStyle __x_ABI_CWindows_CMedia_CCore_CTimedTextFontStyle;

typedef enum __x_ABI_CWindows_CMedia_CCore_CTimedTextLineAlignment __x_ABI_CWindows_CMedia_CCore_CTimedTextLineAlignment;

typedef enum __x_ABI_CWindows_CMedia_CCore_CTimedTextScrollMode __x_ABI_CWindows_CMedia_CCore_CTimedTextScrollMode;

typedef enum __x_ABI_CWindows_CMedia_CCore_CTimedTextUnit __x_ABI_CWindows_CMedia_CCore_CTimedTextUnit;

typedef enum __x_ABI_CWindows_CMedia_CCore_CTimedTextWeight __x_ABI_CWindows_CMedia_CCore_CTimedTextWeight;

typedef enum __x_ABI_CWindows_CMedia_CCore_CTimedTextWrapping __x_ABI_CWindows_CMedia_CCore_CTimedTextWrapping;

typedef enum __x_ABI_CWindows_CMedia_CCore_CTimedTextWritingMode __x_ABI_CWindows_CMedia_CCore_CTimedTextWritingMode;

typedef enum __x_ABI_CWindows_CMedia_CCore_CVideoStabilizationEffectEnabledChangedReason __x_ABI_CWindows_CMedia_CCore_CVideoStabilizationEffectEnabledChangedReason;

typedef struct __x_ABI_CWindows_CMedia_CCore_CTimedTextDouble __x_ABI_CWindows_CMedia_CCore_CTimedTextDouble;

typedef struct __x_ABI_CWindows_CMedia_CCore_CTimedTextPadding __x_ABI_CWindows_CMedia_CCore_CTimedTextPadding;

typedef struct __x_ABI_CWindows_CMedia_CCore_CTimedTextPoint __x_ABI_CWindows_CMedia_CCore_CTimedTextPoint;

typedef struct __x_ABI_CWindows_CMedia_CCore_CTimedTextSize __x_ABI_CWindows_CMedia_CCore_CTimedTextSize;

enum __x_ABI_CWindows_CMedia_CCore_CAudioDecoderDegradation
    {
        __x_ABI_CWindows_CMedia_CCore_CAudioDecoderDegradation_None = 0,
    __x_ABI_CWindows_CMedia_CCore_CAudioDecoderDegradation_DownmixTo2Channels = 1,
    __x_ABI_CWindows_CMedia_CCore_CAudioDecoderDegradation_DownmixTo6Channels = 2,
    __x_ABI_CWindows_CMedia_CCore_CAudioDecoderDegradation_DownmixTo8Channels = 3,
};

enum __x_ABI_CWindows_CMedia_CCore_CAudioDecoderDegradationReason
    {
        __x_ABI_CWindows_CMedia_CCore_CAudioDecoderDegradationReason_None = 0,
    __x_ABI_CWindows_CMedia_CCore_CAudioDecoderDegradationReason_LicensingRequirement = 1,
    __x_ABI_CWindows_CMedia_CCore_CAudioDecoderDegradationReason_SpatialAudioNotSupported = 2,
};

enum __x_ABI_CWindows_CMedia_CCore_CCodecCategory
    {
        __x_ABI_CWindows_CMedia_CCore_CCodecCategory_Encoder = 0,
    __x_ABI_CWindows_CMedia_CCore_CCodecCategory_Decoder = 1,
};

enum __x_ABI_CWindows_CMedia_CCore_CCodecKind
    {
        __x_ABI_CWindows_CMedia_CCore_CCodecKind_Audio = 0,
    __x_ABI_CWindows_CMedia_CCore_CCodecKind_Video = 1,
};

enum __x_ABI_CWindows_CMedia_CCore_CFaceDetectionMode
    {
        __x_ABI_CWindows_CMedia_CCore_CFaceDetectionMode_HighPerformance = 0,
    __x_ABI_CWindows_CMedia_CCore_CFaceDetectionMode_Balanced = 1,
    __x_ABI_CWindows_CMedia_CCore_CFaceDetectionMode_HighQuality = 2,
};

enum __x_ABI_CWindows_CMedia_CCore_CMediaDecoderStatus
    {
        __x_ABI_CWindows_CMedia_CCore_CMediaDecoderStatus_FullySupported = 0,
    __x_ABI_CWindows_CMedia_CCore_CMediaDecoderStatus_UnsupportedSubtype = 1,
    __x_ABI_CWindows_CMedia_CCore_CMediaDecoderStatus_UnsupportedEncoderProperties = 2,
    __x_ABI_CWindows_CMedia_CCore_CMediaDecoderStatus_Degraded = 3,
};

enum __x_ABI_CWindows_CMedia_CCore_CMediaSourceState
    {
        __x_ABI_CWindows_CMedia_CCore_CMediaSourceState_Initial = 0,
    __x_ABI_CWindows_CMedia_CCore_CMediaSourceState_Opening = 1,
    __x_ABI_CWindows_CMedia_CCore_CMediaSourceState_Opened = 2,
    __x_ABI_CWindows_CMedia_CCore_CMediaSourceState_Failed = 3,
    __x_ABI_CWindows_CMedia_CCore_CMediaSourceState_Closed = 4,
};

enum __x_ABI_CWindows_CMedia_CCore_CMediaSourceStatus
    {
        __x_ABI_CWindows_CMedia_CCore_CMediaSourceStatus_FullySupported = 0,
    __x_ABI_CWindows_CMedia_CCore_CMediaSourceStatus_Unknown = 1,
};

enum __x_ABI_CWindows_CMedia_CCore_CMediaStreamSourceClosedReason
    {
        __x_ABI_CWindows_CMedia_CCore_CMediaStreamSourceClosedReason_Done = 0,
    __x_ABI_CWindows_CMedia_CCore_CMediaStreamSourceClosedReason_UnknownError = 1,
    __x_ABI_CWindows_CMedia_CCore_CMediaStreamSourceClosedReason_AppReportedError = 2,
    __x_ABI_CWindows_CMedia_CCore_CMediaStreamSourceClosedReason_UnsupportedProtectionSystem = 3,
    __x_ABI_CWindows_CMedia_CCore_CMediaStreamSourceClosedReason_ProtectionSystemFailure = 4,
    __x_ABI_CWindows_CMedia_CCore_CMediaStreamSourceClosedReason_UnsupportedEncodingFormat = 5,
    __x_ABI_CWindows_CMedia_CCore_CMediaStreamSourceClosedReason_MissingSampleRequestedEventHandler = 6,
};

enum __x_ABI_CWindows_CMedia_CCore_CMediaStreamSourceErrorStatus
    {
        __x_ABI_CWindows_CMedia_CCore_CMediaStreamSourceErrorStatus_Other = 0,
    __x_ABI_CWindows_CMedia_CCore_CMediaStreamSourceErrorStatus_OutOfMemory = 1,
    __x_ABI_CWindows_CMedia_CCore_CMediaStreamSourceErrorStatus_FailedToOpenFile = 2,
    __x_ABI_CWindows_CMedia_CCore_CMediaStreamSourceErrorStatus_FailedToConnectToServer = 3,
    __x_ABI_CWindows_CMedia_CCore_CMediaStreamSourceErrorStatus_ConnectionToServerLost = 4,
    __x_ABI_CWindows_CMedia_CCore_CMediaStreamSourceErrorStatus_UnspecifiedNetworkError = 5,
    __x_ABI_CWindows_CMedia_CCore_CMediaStreamSourceErrorStatus_DecodeError = 6,
    __x_ABI_CWindows_CMedia_CCore_CMediaStreamSourceErrorStatus_UnsupportedMediaFormat = 7,
};

enum __x_ABI_CWindows_CMedia_CCore_CMediaTrackKind
    {
        __x_ABI_CWindows_CMedia_CCore_CMediaTrackKind_Audio = 0,
    __x_ABI_CWindows_CMedia_CCore_CMediaTrackKind_Video = 1,
    __x_ABI_CWindows_CMedia_CCore_CMediaTrackKind_TimedMetadata = 2,
};

enum __x_ABI_CWindows_CMedia_CCore_CMseAppendMode
    {
        __x_ABI_CWindows_CMedia_CCore_CMseAppendMode_Segments = 0,
    __x_ABI_CWindows_CMedia_CCore_CMseAppendMode_Sequence = 1,
};

enum __x_ABI_CWindows_CMedia_CCore_CMseEndOfStreamStatus
    {
        __x_ABI_CWindows_CMedia_CCore_CMseEndOfStreamStatus_Success = 0,
    __x_ABI_CWindows_CMedia_CCore_CMseEndOfStreamStatus_NetworkError = 1,
    __x_ABI_CWindows_CMedia_CCore_CMseEndOfStreamStatus_DecodeError = 2,
    __x_ABI_CWindows_CMedia_CCore_CMseEndOfStreamStatus_UnknownError = 3,
};

enum __x_ABI_CWindows_CMedia_CCore_CMseReadyState
    {
        __x_ABI_CWindows_CMedia_CCore_CMseReadyState_Closed = 0,
    __x_ABI_CWindows_CMedia_CCore_CMseReadyState_Open = 1,
    __x_ABI_CWindows_CMedia_CCore_CMseReadyState_Ended = 2,
};

enum __x_ABI_CWindows_CMedia_CCore_CSceneAnalysisRecommendation
    {
        __x_ABI_CWindows_CMedia_CCore_CSceneAnalysisRecommendation_Standard = 0,
    __x_ABI_CWindows_CMedia_CCore_CSceneAnalysisRecommendation_Hdr = 1,
    __x_ABI_CWindows_CMedia_CCore_CSceneAnalysisRecommendation_LowLight = 2,
};

enum __x_ABI_CWindows_CMedia_CCore_CTimedMetadataKind
    {
        __x_ABI_CWindows_CMedia_CCore_CTimedMetadataKind_Caption = 0,
    __x_ABI_CWindows_CMedia_CCore_CTimedMetadataKind_Chapter = 1,
    __x_ABI_CWindows_CMedia_CCore_CTimedMetadataKind_Custom = 2,
    __x_ABI_CWindows_CMedia_CCore_CTimedMetadataKind_Data = 3,
    __x_ABI_CWindows_CMedia_CCore_CTimedMetadataKind_Description = 4,
    __x_ABI_CWindows_CMedia_CCore_CTimedMetadataKind_Subtitle = 5,
    __x_ABI_CWindows_CMedia_CCore_CTimedMetadataKind_ImageSubtitle = 6,
    __x_ABI_CWindows_CMedia_CCore_CTimedMetadataKind_Speech = 7,
};

enum __x_ABI_CWindows_CMedia_CCore_CTimedMetadataTrackErrorCode
    {
        __x_ABI_CWindows_CMedia_CCore_CTimedMetadataTrackErrorCode_None = 0,
    __x_ABI_CWindows_CMedia_CCore_CTimedMetadataTrackErrorCode_DataFormatError = 1,
    __x_ABI_CWindows_CMedia_CCore_CTimedMetadataTrackErrorCode_NetworkError = 2,
    __x_ABI_CWindows_CMedia_CCore_CTimedMetadataTrackErrorCode_InternalError = 3,
};

enum __x_ABI_CWindows_CMedia_CCore_CTimedTextDisplayAlignment
    {
        __x_ABI_CWindows_CMedia_CCore_CTimedTextDisplayAlignment_Before = 0,
    __x_ABI_CWindows_CMedia_CCore_CTimedTextDisplayAlignment_After = 1,
    __x_ABI_CWindows_CMedia_CCore_CTimedTextDisplayAlignment_Center = 2,
};

enum __x_ABI_CWindows_CMedia_CCore_CTimedTextFlowDirection
    {
        __x_ABI_CWindows_CMedia_CCore_CTimedTextFlowDirection_LeftToRight = 0,
    __x_ABI_CWindows_CMedia_CCore_CTimedTextFlowDirection_RightToLeft = 1,
};

enum __x_ABI_CWindows_CMedia_CCore_CTimedTextFontStyle
    {
        __x_ABI_CWindows_CMedia_CCore_CTimedTextFontStyle_Normal = 0,
    __x_ABI_CWindows_CMedia_CCore_CTimedTextFontStyle_Oblique = 1,
    __x_ABI_CWindows_CMedia_CCore_CTimedTextFontStyle_Italic = 2,
};

enum __x_ABI_CWindows_CMedia_CCore_CTimedTextLineAlignment
    {
        __x_ABI_CWindows_CMedia_CCore_CTimedTextLineAlignment_Start = 0,
    __x_ABI_CWindows_CMedia_CCore_CTimedTextLineAlignment_End = 1,
    __x_ABI_CWindows_CMedia_CCore_CTimedTextLineAlignment_Center = 2,
};

enum __x_ABI_CWindows_CMedia_CCore_CTimedTextScrollMode
    {
        __x_ABI_CWindows_CMedia_CCore_CTimedTextScrollMode_Popon = 0,
    __x_ABI_CWindows_CMedia_CCore_CTimedTextScrollMode_Rollup = 1,
};

enum __x_ABI_CWindows_CMedia_CCore_CTimedTextUnit
    {
        __x_ABI_CWindows_CMedia_CCore_CTimedTextUnit_Pixels = 0,
    __x_ABI_CWindows_CMedia_CCore_CTimedTextUnit_Percentage = 1,
};

enum __x_ABI_CWindows_CMedia_CCore_CTimedTextWeight
    {
        __x_ABI_CWindows_CMedia_CCore_CTimedTextWeight_Normal = 400,
    __x_ABI_CWindows_CMedia_CCore_CTimedTextWeight_Bold = 700,
};

enum __x_ABI_CWindows_CMedia_CCore_CTimedTextWrapping
    {
        __x_ABI_CWindows_CMedia_CCore_CTimedTextWrapping_NoWrap = 0,
    __x_ABI_CWindows_CMedia_CCore_CTimedTextWrapping_Wrap = 1,
};

enum __x_ABI_CWindows_CMedia_CCore_CTimedTextWritingMode
    {
        __x_ABI_CWindows_CMedia_CCore_CTimedTextWritingMode_LeftRightTopBottom = 0,
    __x_ABI_CWindows_CMedia_CCore_CTimedTextWritingMode_RightLeftTopBottom = 1,
    __x_ABI_CWindows_CMedia_CCore_CTimedTextWritingMode_TopBottomRightLeft = 2,
    __x_ABI_CWindows_CMedia_CCore_CTimedTextWritingMode_TopBottomLeftRight = 3,
    __x_ABI_CWindows_CMedia_CCore_CTimedTextWritingMode_LeftRight = 4,
    __x_ABI_CWindows_CMedia_CCore_CTimedTextWritingMode_RightLeft = 5,
    __x_ABI_CWindows_CMedia_CCore_CTimedTextWritingMode_TopBottom = 6,
};

enum __x_ABI_CWindows_CMedia_CCore_CVideoStabilizationEffectEnabledChangedReason
    {
        __x_ABI_CWindows_CMedia_CCore_CVideoStabilizationEffectEnabledChangedReason_Programmatic = 0,
    __x_ABI_CWindows_CMedia_CCore_CVideoStabilizationEffectEnabledChangedReason_PixelRateTooHigh = 1,
    __x_ABI_CWindows_CMedia_CCore_CVideoStabilizationEffectEnabledChangedReason_RunningSlowly = 2,
};

struct __x_ABI_CWindows_CMedia_CCore_CMseTimeRange
    {
        struct __x_ABI_CWindows_CFoundation_CTimeSpan Start;
    struct __x_ABI_CWindows_CFoundation_CTimeSpan End;
};

struct __x_ABI_CWindows_CMedia_CCore_CTimedTextDouble
    {
        DOUBLE Value;
    enum __x_ABI_CWindows_CMedia_CCore_CTimedTextUnit Unit;
};

struct __x_ABI_CWindows_CMedia_CCore_CTimedTextPadding
    {
        DOUBLE Before;
    DOUBLE After;
    DOUBLE Start;
    DOUBLE End;
    enum __x_ABI_CWindows_CMedia_CCore_CTimedTextUnit Unit;
};

struct __x_ABI_CWindows_CMedia_CCore_CTimedTextPoint
    {
        DOUBLE X;
    DOUBLE Y;
    enum __x_ABI_CWindows_CMedia_CCore_CTimedTextUnit Unit;
};

struct __x_ABI_CWindows_CMedia_CCore_CTimedTextSize
    {
        DOUBLE Height;
    DOUBLE Width;
    enum __x_ABI_CWindows_CMedia_CCore_CTimedTextUnit Unit;
};

#if !defined(____x_ABI_CWindows_CMedia_CCore_CIAudioStreamDescriptor_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CMedia_CCore_CIAudioStreamDescriptor_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CMedia_CCore_CIAudioStreamDescriptorVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CCore_CIAudioStreamDescriptor* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CCore_CIAudioStreamDescriptor* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CCore_CIAudioStreamDescriptor* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CCore_CIAudioStreamDescriptor* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CCore_CIAudioStreamDescriptor* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CCore_CIAudioStreamDescriptor* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_EncodingProperties)(__x_ABI_CWindows_CMedia_CCore_CIAudioStreamDescriptor* This,
        __x_ABI_CWindows_CMedia_CMediaProperties_CIAudioEncodingProperties** encodingProperties);

        END_INTERFACE
    } __x_ABI_CWindows_CMedia_CCore_CIAudioStreamDescriptorVtbl;

    interface __x_ABI_CWindows_CMedia_CCore_CIAudioStreamDescriptor
    {
        CONST_VTBL struct __x_ABI_CWindows_CMedia_CCore_CIAudioStreamDescriptorVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CIAudioStreamDescriptor;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CIAudioStreamDescriptor_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CMedia_CCore_CIAudioStreamDescriptor2_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CMedia_CCore_CIAudioStreamDescriptor2_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CMedia_CCore_CIAudioStreamDescriptor2Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CCore_CIAudioStreamDescriptor2* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CCore_CIAudioStreamDescriptor2* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CCore_CIAudioStreamDescriptor2* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CCore_CIAudioStreamDescriptor2* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CCore_CIAudioStreamDescriptor2* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CCore_CIAudioStreamDescriptor2* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* put_LeadingEncoderPadding)(__x_ABI_CWindows_CMedia_CCore_CIAudioStreamDescriptor2* This,
        __x_ABI_C__FIReference_1_UINT32* value);
    HRESULT (STDMETHODCALLTYPE* get_LeadingEncoderPadding)(__x_ABI_CWindows_CMedia_CCore_CIAudioStreamDescriptor2* This,
        __x_ABI_C__FIReference_1_UINT32** value);
    HRESULT (STDMETHODCALLTYPE* put_TrailingEncoderPadding)(__x_ABI_CWindows_CMedia_CCore_CIAudioStreamDescriptor2* This,
        __x_ABI_C__FIReference_1_UINT32* value);
    HRESULT (STDMETHODCALLTYPE* get_TrailingEncoderPadding)(__x_ABI_CWindows_CMedia_CCore_CIAudioStreamDescriptor2* This,
        __x_ABI_C__FIReference_1_UINT32** value);

        END_INTERFACE
    } __x_ABI_CWindows_CMedia_CCore_CIAudioStreamDescriptor2Vtbl;

    interface __x_ABI_CWindows_CMedia_CCore_CIAudioStreamDescriptor2
    {
        CONST_VTBL struct __x_ABI_CWindows_CMedia_CCore_CIAudioStreamDescriptor2Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CIAudioStreamDescriptor2;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CIAudioStreamDescriptor2_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CMedia_CCore_CIAudioStreamDescriptor3_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CMedia_CCore_CIAudioStreamDescriptor3_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CMedia_CCore_CIAudioStreamDescriptor3Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CCore_CIAudioStreamDescriptor3* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CCore_CIAudioStreamDescriptor3* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CCore_CIAudioStreamDescriptor3* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CCore_CIAudioStreamDescriptor3* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CCore_CIAudioStreamDescriptor3* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CCore_CIAudioStreamDescriptor3* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* Copy)(__x_ABI_CWindows_CMedia_CCore_CIAudioStreamDescriptor3* This,
        __x_ABI_CWindows_CMedia_CCore_CIAudioStreamDescriptor** result);

        END_INTERFACE
    } __x_ABI_CWindows_CMedia_CCore_CIAudioStreamDescriptor3Vtbl;

    interface __x_ABI_CWindows_CMedia_CCore_CIAudioStreamDescriptor3
    {
        CONST_VTBL struct __x_ABI_CWindows_CMedia_CCore_CIAudioStreamDescriptor3Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CIAudioStreamDescriptor3;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CIAudioStreamDescriptor3_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CMedia_CCore_CIAudioStreamDescriptorFactory_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CMedia_CCore_CIAudioStreamDescriptorFactory_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CMedia_CCore_CIAudioStreamDescriptorFactoryVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CCore_CIAudioStreamDescriptorFactory* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CCore_CIAudioStreamDescriptorFactory* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CCore_CIAudioStreamDescriptorFactory* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CCore_CIAudioStreamDescriptorFactory* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CCore_CIAudioStreamDescriptorFactory* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CCore_CIAudioStreamDescriptorFactory* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* Create)(__x_ABI_CWindows_CMedia_CCore_CIAudioStreamDescriptorFactory* This,
        __x_ABI_CWindows_CMedia_CMediaProperties_CIAudioEncodingProperties* encodingProperties,
        __x_ABI_CWindows_CMedia_CCore_CIAudioStreamDescriptor** result);

        END_INTERFACE
    } __x_ABI_CWindows_CMedia_CCore_CIAudioStreamDescriptorFactoryVtbl;

    interface __x_ABI_CWindows_CMedia_CCore_CIAudioStreamDescriptorFactory
    {
        CONST_VTBL struct __x_ABI_CWindows_CMedia_CCore_CIAudioStreamDescriptorFactoryVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CIAudioStreamDescriptorFactory;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CIAudioStreamDescriptorFactory_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CMedia_CCore_CIAudioTrack_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CMedia_CCore_CIAudioTrack_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CMedia_CCore_CIAudioTrackVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CCore_CIAudioTrack* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CCore_CIAudioTrack* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CCore_CIAudioTrack* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CCore_CIAudioTrack* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CCore_CIAudioTrack* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CCore_CIAudioTrack* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* add_OpenFailed)(__x_ABI_CWindows_CMedia_CCore_CIAudioTrack* This,
        __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CAudioTrack___x_ABI_CWindows__CMedia__CCore__CAudioTrackOpenFailedEventArgs* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_OpenFailed)(__x_ABI_CWindows_CMedia_CCore_CIAudioTrack* This,
        EventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* GetEncodingProperties)(__x_ABI_CWindows_CMedia_CCore_CIAudioTrack* This,
        __x_ABI_CWindows_CMedia_CMediaProperties_CIAudioEncodingProperties** value);
    HRESULT (STDMETHODCALLTYPE* get_PlaybackItem)(__x_ABI_CWindows_CMedia_CCore_CIAudioTrack* This,
        __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackItem** value);
    HRESULT (STDMETHODCALLTYPE* get_Name)(__x_ABI_CWindows_CMedia_CCore_CIAudioTrack* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_SupportInfo)(__x_ABI_CWindows_CMedia_CCore_CIAudioTrack* This,
        __x_ABI_CWindows_CMedia_CCore_CIAudioTrackSupportInfo** value);

        END_INTERFACE
    } __x_ABI_CWindows_CMedia_CCore_CIAudioTrackVtbl;

    interface __x_ABI_CWindows_CMedia_CCore_CIAudioTrack
    {
        CONST_VTBL struct __x_ABI_CWindows_CMedia_CCore_CIAudioTrackVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CIAudioTrack;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CIAudioTrack_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CMedia_CCore_CIAudioTrackOpenFailedEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CMedia_CCore_CIAudioTrackOpenFailedEventArgs_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CMedia_CCore_CIAudioTrackOpenFailedEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CCore_CIAudioTrackOpenFailedEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CCore_CIAudioTrackOpenFailedEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CCore_CIAudioTrackOpenFailedEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CCore_CIAudioTrackOpenFailedEventArgs* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CCore_CIAudioTrackOpenFailedEventArgs* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CCore_CIAudioTrackOpenFailedEventArgs* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_ExtendedError)(__x_ABI_CWindows_CMedia_CCore_CIAudioTrackOpenFailedEventArgs* This,
        HRESULT* value);

        END_INTERFACE
    } __x_ABI_CWindows_CMedia_CCore_CIAudioTrackOpenFailedEventArgsVtbl;

    interface __x_ABI_CWindows_CMedia_CCore_CIAudioTrackOpenFailedEventArgs
    {
        CONST_VTBL struct __x_ABI_CWindows_CMedia_CCore_CIAudioTrackOpenFailedEventArgsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CIAudioTrackOpenFailedEventArgs;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CIAudioTrackOpenFailedEventArgs_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CMedia_CCore_CIAudioTrackSupportInfo_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CMedia_CCore_CIAudioTrackSupportInfo_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CMedia_CCore_CIAudioTrackSupportInfoVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CCore_CIAudioTrackSupportInfo* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CCore_CIAudioTrackSupportInfo* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CCore_CIAudioTrackSupportInfo* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CCore_CIAudioTrackSupportInfo* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CCore_CIAudioTrackSupportInfo* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CCore_CIAudioTrackSupportInfo* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_DecoderStatus)(__x_ABI_CWindows_CMedia_CCore_CIAudioTrackSupportInfo* This,
        enum __x_ABI_CWindows_CMedia_CCore_CMediaDecoderStatus* value);
    HRESULT (STDMETHODCALLTYPE* get_Degradation)(__x_ABI_CWindows_CMedia_CCore_CIAudioTrackSupportInfo* This,
        enum __x_ABI_CWindows_CMedia_CCore_CAudioDecoderDegradation* value);
    HRESULT (STDMETHODCALLTYPE* get_DegradationReason)(__x_ABI_CWindows_CMedia_CCore_CIAudioTrackSupportInfo* This,
        enum __x_ABI_CWindows_CMedia_CCore_CAudioDecoderDegradationReason* value);
    HRESULT (STDMETHODCALLTYPE* get_MediaSourceStatus)(__x_ABI_CWindows_CMedia_CCore_CIAudioTrackSupportInfo* This,
        enum __x_ABI_CWindows_CMedia_CCore_CMediaSourceStatus* value);

        END_INTERFACE
    } __x_ABI_CWindows_CMedia_CCore_CIAudioTrackSupportInfoVtbl;

    interface __x_ABI_CWindows_CMedia_CCore_CIAudioTrackSupportInfo
    {
        CONST_VTBL struct __x_ABI_CWindows_CMedia_CCore_CIAudioTrackSupportInfoVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CIAudioTrackSupportInfo;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CIAudioTrackSupportInfo_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CMedia_CCore_CIChapterCue_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CMedia_CCore_CIChapterCue_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CMedia_CCore_CIChapterCueVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CCore_CIChapterCue* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CCore_CIChapterCue* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CCore_CIChapterCue* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CCore_CIChapterCue* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CCore_CIChapterCue* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CCore_CIChapterCue* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* put_Title)(__x_ABI_CWindows_CMedia_CCore_CIChapterCue* This,
        HSTRING value);
    HRESULT (STDMETHODCALLTYPE* get_Title)(__x_ABI_CWindows_CMedia_CCore_CIChapterCue* This,
        HSTRING* value);

        END_INTERFACE
    } __x_ABI_CWindows_CMedia_CCore_CIChapterCueVtbl;

    interface __x_ABI_CWindows_CMedia_CCore_CIChapterCue
    {
        CONST_VTBL struct __x_ABI_CWindows_CMedia_CCore_CIChapterCueVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CIChapterCue;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CIChapterCue_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CMedia_CCore_CICodecInfo_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CMedia_CCore_CICodecInfo_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CMedia_CCore_CICodecInfoVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CCore_CICodecInfo* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CCore_CICodecInfo* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CCore_CICodecInfo* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CCore_CICodecInfo* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CCore_CICodecInfo* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CCore_CICodecInfo* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Kind)(__x_ABI_CWindows_CMedia_CCore_CICodecInfo* This,
        enum __x_ABI_CWindows_CMedia_CCore_CCodecKind* value);
    HRESULT (STDMETHODCALLTYPE* get_Category)(__x_ABI_CWindows_CMedia_CCore_CICodecInfo* This,
        enum __x_ABI_CWindows_CMedia_CCore_CCodecCategory* value);
    HRESULT (STDMETHODCALLTYPE* get_Subtypes)(__x_ABI_CWindows_CMedia_CCore_CICodecInfo* This,
        __x_ABI_C__FIVectorView_1_HSTRING** value);
    HRESULT (STDMETHODCALLTYPE* get_DisplayName)(__x_ABI_CWindows_CMedia_CCore_CICodecInfo* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_IsTrusted)(__x_ABI_CWindows_CMedia_CCore_CICodecInfo* This,
        boolean* value);

        END_INTERFACE
    } __x_ABI_CWindows_CMedia_CCore_CICodecInfoVtbl;

    interface __x_ABI_CWindows_CMedia_CCore_CICodecInfo
    {
        CONST_VTBL struct __x_ABI_CWindows_CMedia_CCore_CICodecInfoVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CICodecInfo;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CICodecInfo_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CMedia_CCore_CICodecQuery_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CMedia_CCore_CICodecQuery_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CMedia_CCore_CICodecQueryVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CCore_CICodecQuery* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CCore_CICodecQuery* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CCore_CICodecQuery* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CCore_CICodecQuery* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CCore_CICodecQuery* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CCore_CICodecQuery* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* FindAllAsync)(__x_ABI_CWindows_CMedia_CCore_CICodecQuery* This,
        enum __x_ABI_CWindows_CMedia_CCore_CCodecKind kind,
        enum __x_ABI_CWindows_CMedia_CCore_CCodecCategory category,
        HSTRING subType,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CCore__CCodecInfo** value);

        END_INTERFACE
    } __x_ABI_CWindows_CMedia_CCore_CICodecQueryVtbl;

    interface __x_ABI_CWindows_CMedia_CCore_CICodecQuery
    {
        CONST_VTBL struct __x_ABI_CWindows_CMedia_CCore_CICodecQueryVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CICodecQuery;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CICodecQuery_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CMedia_CCore_CICodecSubtypesStatics_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CMedia_CCore_CICodecSubtypesStatics_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CMedia_CCore_CICodecSubtypesStaticsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CCore_CICodecSubtypesStatics* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CCore_CICodecSubtypesStatics* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CCore_CICodecSubtypesStatics* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CCore_CICodecSubtypesStatics* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CCore_CICodecSubtypesStatics* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CCore_CICodecSubtypesStatics* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_VideoFormatDV25)(__x_ABI_CWindows_CMedia_CCore_CICodecSubtypesStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_VideoFormatDV50)(__x_ABI_CWindows_CMedia_CCore_CICodecSubtypesStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_VideoFormatDvc)(__x_ABI_CWindows_CMedia_CCore_CICodecSubtypesStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_VideoFormatDvh1)(__x_ABI_CWindows_CMedia_CCore_CICodecSubtypesStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_VideoFormatDvhD)(__x_ABI_CWindows_CMedia_CCore_CICodecSubtypesStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_VideoFormatDvsd)(__x_ABI_CWindows_CMedia_CCore_CICodecSubtypesStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_VideoFormatDvsl)(__x_ABI_CWindows_CMedia_CCore_CICodecSubtypesStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_VideoFormatH263)(__x_ABI_CWindows_CMedia_CCore_CICodecSubtypesStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_VideoFormatH264)(__x_ABI_CWindows_CMedia_CCore_CICodecSubtypesStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_VideoFormatH265)(__x_ABI_CWindows_CMedia_CCore_CICodecSubtypesStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_VideoFormatH264ES)(__x_ABI_CWindows_CMedia_CCore_CICodecSubtypesStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_VideoFormatHevc)(__x_ABI_CWindows_CMedia_CCore_CICodecSubtypesStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_VideoFormatHevcES)(__x_ABI_CWindows_CMedia_CCore_CICodecSubtypesStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_VideoFormatM4S2)(__x_ABI_CWindows_CMedia_CCore_CICodecSubtypesStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_VideoFormatMjpg)(__x_ABI_CWindows_CMedia_CCore_CICodecSubtypesStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_VideoFormatMP43)(__x_ABI_CWindows_CMedia_CCore_CICodecSubtypesStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_VideoFormatMP4S)(__x_ABI_CWindows_CMedia_CCore_CICodecSubtypesStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_VideoFormatMP4V)(__x_ABI_CWindows_CMedia_CCore_CICodecSubtypesStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_VideoFormatMpeg2)(__x_ABI_CWindows_CMedia_CCore_CICodecSubtypesStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_VideoFormatVP80)(__x_ABI_CWindows_CMedia_CCore_CICodecSubtypesStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_VideoFormatVP90)(__x_ABI_CWindows_CMedia_CCore_CICodecSubtypesStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_VideoFormatMpg1)(__x_ABI_CWindows_CMedia_CCore_CICodecSubtypesStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_VideoFormatMss1)(__x_ABI_CWindows_CMedia_CCore_CICodecSubtypesStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_VideoFormatMss2)(__x_ABI_CWindows_CMedia_CCore_CICodecSubtypesStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_VideoFormatWmv1)(__x_ABI_CWindows_CMedia_CCore_CICodecSubtypesStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_VideoFormatWmv2)(__x_ABI_CWindows_CMedia_CCore_CICodecSubtypesStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_VideoFormatWmv3)(__x_ABI_CWindows_CMedia_CCore_CICodecSubtypesStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_VideoFormatWvc1)(__x_ABI_CWindows_CMedia_CCore_CICodecSubtypesStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_VideoFormat420O)(__x_ABI_CWindows_CMedia_CCore_CICodecSubtypesStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_AudioFormatAac)(__x_ABI_CWindows_CMedia_CCore_CICodecSubtypesStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_AudioFormatAdts)(__x_ABI_CWindows_CMedia_CCore_CICodecSubtypesStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_AudioFormatAlac)(__x_ABI_CWindows_CMedia_CCore_CICodecSubtypesStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_AudioFormatAmrNB)(__x_ABI_CWindows_CMedia_CCore_CICodecSubtypesStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_AudioFormatAmrWB)(__x_ABI_CWindows_CMedia_CCore_CICodecSubtypesStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_AudioFormatAmrWP)(__x_ABI_CWindows_CMedia_CCore_CICodecSubtypesStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_AudioFormatDolbyAC3)(__x_ABI_CWindows_CMedia_CCore_CICodecSubtypesStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_AudioFormatDolbyAC3Spdif)(__x_ABI_CWindows_CMedia_CCore_CICodecSubtypesStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_AudioFormatDolbyDDPlus)(__x_ABI_CWindows_CMedia_CCore_CICodecSubtypesStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_AudioFormatDrm)(__x_ABI_CWindows_CMedia_CCore_CICodecSubtypesStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_AudioFormatDts)(__x_ABI_CWindows_CMedia_CCore_CICodecSubtypesStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_AudioFormatFlac)(__x_ABI_CWindows_CMedia_CCore_CICodecSubtypesStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_AudioFormatFloat)(__x_ABI_CWindows_CMedia_CCore_CICodecSubtypesStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_AudioFormatMP3)(__x_ABI_CWindows_CMedia_CCore_CICodecSubtypesStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_AudioFormatMPeg)(__x_ABI_CWindows_CMedia_CCore_CICodecSubtypesStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_AudioFormatMsp1)(__x_ABI_CWindows_CMedia_CCore_CICodecSubtypesStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_AudioFormatOpus)(__x_ABI_CWindows_CMedia_CCore_CICodecSubtypesStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_AudioFormatPcm)(__x_ABI_CWindows_CMedia_CCore_CICodecSubtypesStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_AudioFormatWmaSpdif)(__x_ABI_CWindows_CMedia_CCore_CICodecSubtypesStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_AudioFormatWMAudioLossless)(__x_ABI_CWindows_CMedia_CCore_CICodecSubtypesStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_AudioFormatWMAudioV8)(__x_ABI_CWindows_CMedia_CCore_CICodecSubtypesStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_AudioFormatWMAudioV9)(__x_ABI_CWindows_CMedia_CCore_CICodecSubtypesStatics* This,
        HSTRING* value);

        END_INTERFACE
    } __x_ABI_CWindows_CMedia_CCore_CICodecSubtypesStaticsVtbl;

    interface __x_ABI_CWindows_CMedia_CCore_CICodecSubtypesStatics
    {
        CONST_VTBL struct __x_ABI_CWindows_CMedia_CCore_CICodecSubtypesStaticsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CICodecSubtypesStatics;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CICodecSubtypesStatics_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CMedia_CCore_CIDataCue_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CMedia_CCore_CIDataCue_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CMedia_CCore_CIDataCueVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CCore_CIDataCue* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CCore_CIDataCue* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CCore_CIDataCue* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CCore_CIDataCue* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CCore_CIDataCue* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CCore_CIDataCue* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* put_Data)(__x_ABI_CWindows_CMedia_CCore_CIDataCue* This,
        __x_ABI_CWindows_CStorage_CStreams_CIBuffer* value);
    HRESULT (STDMETHODCALLTYPE* get_Data)(__x_ABI_CWindows_CMedia_CCore_CIDataCue* This,
        __x_ABI_CWindows_CStorage_CStreams_CIBuffer** value);

        END_INTERFACE
    } __x_ABI_CWindows_CMedia_CCore_CIDataCueVtbl;

    interface __x_ABI_CWindows_CMedia_CCore_CIDataCue
    {
        CONST_VTBL struct __x_ABI_CWindows_CMedia_CCore_CIDataCueVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CIDataCue;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CIDataCue_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CMedia_CCore_CIDataCue2_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CMedia_CCore_CIDataCue2_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CMedia_CCore_CIDataCue2Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CCore_CIDataCue2* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CCore_CIDataCue2* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CCore_CIDataCue2* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CCore_CIDataCue2* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CCore_CIDataCue2* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CCore_CIDataCue2* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Properties)(__x_ABI_CWindows_CMedia_CCore_CIDataCue2* This,
        __x_ABI_CWindows_CFoundation_CCollections_CIPropertySet** value);

        END_INTERFACE
    } __x_ABI_CWindows_CMedia_CCore_CIDataCue2Vtbl;

    interface __x_ABI_CWindows_CMedia_CCore_CIDataCue2
    {
        CONST_VTBL struct __x_ABI_CWindows_CMedia_CCore_CIDataCue2Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CIDataCue2;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CIDataCue2_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CMedia_CCore_CIFaceDetectedEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CMedia_CCore_CIFaceDetectedEventArgs_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CMedia_CCore_CIFaceDetectedEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CCore_CIFaceDetectedEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CCore_CIFaceDetectedEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CCore_CIFaceDetectedEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CCore_CIFaceDetectedEventArgs* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CCore_CIFaceDetectedEventArgs* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CCore_CIFaceDetectedEventArgs* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_ResultFrame)(__x_ABI_CWindows_CMedia_CCore_CIFaceDetectedEventArgs* This,
        __x_ABI_CWindows_CMedia_CCore_CIFaceDetectionEffectFrame** value);

        END_INTERFACE
    } __x_ABI_CWindows_CMedia_CCore_CIFaceDetectedEventArgsVtbl;

    interface __x_ABI_CWindows_CMedia_CCore_CIFaceDetectedEventArgs
    {
        CONST_VTBL struct __x_ABI_CWindows_CMedia_CCore_CIFaceDetectedEventArgsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CIFaceDetectedEventArgs;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CIFaceDetectedEventArgs_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CMedia_CCore_CIFaceDetectionEffect_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CMedia_CCore_CIFaceDetectionEffect_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CMedia_CCore_CIFaceDetectionEffectVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CCore_CIFaceDetectionEffect* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CCore_CIFaceDetectionEffect* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CCore_CIFaceDetectionEffect* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CCore_CIFaceDetectionEffect* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CCore_CIFaceDetectionEffect* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CCore_CIFaceDetectionEffect* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* put_Enabled)(__x_ABI_CWindows_CMedia_CCore_CIFaceDetectionEffect* This,
        boolean value);
    HRESULT (STDMETHODCALLTYPE* get_Enabled)(__x_ABI_CWindows_CMedia_CCore_CIFaceDetectionEffect* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* put_DesiredDetectionInterval)(__x_ABI_CWindows_CMedia_CCore_CIFaceDetectionEffect* This,
        struct __x_ABI_CWindows_CFoundation_CTimeSpan value);
    HRESULT (STDMETHODCALLTYPE* get_DesiredDetectionInterval)(__x_ABI_CWindows_CMedia_CCore_CIFaceDetectionEffect* This,
        struct __x_ABI_CWindows_CFoundation_CTimeSpan* value);
    HRESULT (STDMETHODCALLTYPE* add_FaceDetected)(__x_ABI_CWindows_CMedia_CCore_CIFaceDetectionEffect* This,
        __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CFaceDetectionEffect___x_ABI_CWindows__CMedia__CCore__CFaceDetectedEventArgs* handler,
        EventRegistrationToken* cookie);
    HRESULT (STDMETHODCALLTYPE* remove_FaceDetected)(__x_ABI_CWindows_CMedia_CCore_CIFaceDetectionEffect* This,
        EventRegistrationToken cookie);

        END_INTERFACE
    } __x_ABI_CWindows_CMedia_CCore_CIFaceDetectionEffectVtbl;

    interface __x_ABI_CWindows_CMedia_CCore_CIFaceDetectionEffect
    {
        CONST_VTBL struct __x_ABI_CWindows_CMedia_CCore_CIFaceDetectionEffectVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CIFaceDetectionEffect;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CIFaceDetectionEffect_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CMedia_CCore_CIFaceDetectionEffectDefinition_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CMedia_CCore_CIFaceDetectionEffectDefinition_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CMedia_CCore_CIFaceDetectionEffectDefinitionVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CCore_CIFaceDetectionEffectDefinition* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CCore_CIFaceDetectionEffectDefinition* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CCore_CIFaceDetectionEffectDefinition* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CCore_CIFaceDetectionEffectDefinition* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CCore_CIFaceDetectionEffectDefinition* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CCore_CIFaceDetectionEffectDefinition* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* put_DetectionMode)(__x_ABI_CWindows_CMedia_CCore_CIFaceDetectionEffectDefinition* This,
        enum __x_ABI_CWindows_CMedia_CCore_CFaceDetectionMode value);
    HRESULT (STDMETHODCALLTYPE* get_DetectionMode)(__x_ABI_CWindows_CMedia_CCore_CIFaceDetectionEffectDefinition* This,
        enum __x_ABI_CWindows_CMedia_CCore_CFaceDetectionMode* value);
    HRESULT (STDMETHODCALLTYPE* put_SynchronousDetectionEnabled)(__x_ABI_CWindows_CMedia_CCore_CIFaceDetectionEffectDefinition* This,
        boolean value);
    HRESULT (STDMETHODCALLTYPE* get_SynchronousDetectionEnabled)(__x_ABI_CWindows_CMedia_CCore_CIFaceDetectionEffectDefinition* This,
        boolean* value);

        END_INTERFACE
    } __x_ABI_CWindows_CMedia_CCore_CIFaceDetectionEffectDefinitionVtbl;

    interface __x_ABI_CWindows_CMedia_CCore_CIFaceDetectionEffectDefinition
    {
        CONST_VTBL struct __x_ABI_CWindows_CMedia_CCore_CIFaceDetectionEffectDefinitionVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CIFaceDetectionEffectDefinition;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CIFaceDetectionEffectDefinition_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CMedia_CCore_CIFaceDetectionEffectFrame_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CMedia_CCore_CIFaceDetectionEffectFrame_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CMedia_CCore_CIFaceDetectionEffectFrameVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CCore_CIFaceDetectionEffectFrame* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CCore_CIFaceDetectionEffectFrame* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CCore_CIFaceDetectionEffectFrame* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CCore_CIFaceDetectionEffectFrame* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CCore_CIFaceDetectionEffectFrame* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CCore_CIFaceDetectionEffectFrame* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_DetectedFaces)(__x_ABI_CWindows_CMedia_CCore_CIFaceDetectionEffectFrame* This,
        __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CFaceAnalysis__CDetectedFace** value);

        END_INTERFACE
    } __x_ABI_CWindows_CMedia_CCore_CIFaceDetectionEffectFrameVtbl;

    interface __x_ABI_CWindows_CMedia_CCore_CIFaceDetectionEffectFrame
    {
        CONST_VTBL struct __x_ABI_CWindows_CMedia_CCore_CIFaceDetectionEffectFrameVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CIFaceDetectionEffectFrame;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CIFaceDetectionEffectFrame_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CMedia_CCore_CIHighDynamicRangeControl_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CMedia_CCore_CIHighDynamicRangeControl_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CMedia_CCore_CIHighDynamicRangeControlVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CCore_CIHighDynamicRangeControl* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CCore_CIHighDynamicRangeControl* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CCore_CIHighDynamicRangeControl* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CCore_CIHighDynamicRangeControl* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CCore_CIHighDynamicRangeControl* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CCore_CIHighDynamicRangeControl* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* put_Enabled)(__x_ABI_CWindows_CMedia_CCore_CIHighDynamicRangeControl* This,
        boolean value);
    HRESULT (STDMETHODCALLTYPE* get_Enabled)(__x_ABI_CWindows_CMedia_CCore_CIHighDynamicRangeControl* This,
        boolean* value);

        END_INTERFACE
    } __x_ABI_CWindows_CMedia_CCore_CIHighDynamicRangeControlVtbl;

    interface __x_ABI_CWindows_CMedia_CCore_CIHighDynamicRangeControl
    {
        CONST_VTBL struct __x_ABI_CWindows_CMedia_CCore_CIHighDynamicRangeControlVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CIHighDynamicRangeControl;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CIHighDynamicRangeControl_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CMedia_CCore_CIHighDynamicRangeOutput_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CMedia_CCore_CIHighDynamicRangeOutput_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CMedia_CCore_CIHighDynamicRangeOutputVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CCore_CIHighDynamicRangeOutput* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CCore_CIHighDynamicRangeOutput* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CCore_CIHighDynamicRangeOutput* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CCore_CIHighDynamicRangeOutput* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CCore_CIHighDynamicRangeOutput* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CCore_CIHighDynamicRangeOutput* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Certainty)(__x_ABI_CWindows_CMedia_CCore_CIHighDynamicRangeOutput* This,
        DOUBLE* value);
    HRESULT (STDMETHODCALLTYPE* get_FrameControllers)(__x_ABI_CWindows_CMedia_CCore_CIHighDynamicRangeOutput* This,
        __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CDevices__CCore__CFrameController** value);

        END_INTERFACE
    } __x_ABI_CWindows_CMedia_CCore_CIHighDynamicRangeOutputVtbl;

    interface __x_ABI_CWindows_CMedia_CCore_CIHighDynamicRangeOutput
    {
        CONST_VTBL struct __x_ABI_CWindows_CMedia_CCore_CIHighDynamicRangeOutputVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CIHighDynamicRangeOutput;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CIHighDynamicRangeOutput_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CMedia_CCore_CIImageCue_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CMedia_CCore_CIImageCue_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CMedia_CCore_CIImageCueVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CCore_CIImageCue* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CCore_CIImageCue* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CCore_CIImageCue* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CCore_CIImageCue* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CCore_CIImageCue* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CCore_CIImageCue* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Position)(__x_ABI_CWindows_CMedia_CCore_CIImageCue* This,
        struct __x_ABI_CWindows_CMedia_CCore_CTimedTextPoint* value);
    HRESULT (STDMETHODCALLTYPE* put_Position)(__x_ABI_CWindows_CMedia_CCore_CIImageCue* This,
        struct __x_ABI_CWindows_CMedia_CCore_CTimedTextPoint value);
    HRESULT (STDMETHODCALLTYPE* get_Extent)(__x_ABI_CWindows_CMedia_CCore_CIImageCue* This,
        struct __x_ABI_CWindows_CMedia_CCore_CTimedTextSize* value);
    HRESULT (STDMETHODCALLTYPE* put_Extent)(__x_ABI_CWindows_CMedia_CCore_CIImageCue* This,
        struct __x_ABI_CWindows_CMedia_CCore_CTimedTextSize value);
    HRESULT (STDMETHODCALLTYPE* put_SoftwareBitmap)(__x_ABI_CWindows_CMedia_CCore_CIImageCue* This,
        __x_ABI_CWindows_CGraphics_CImaging_CISoftwareBitmap* value);
    HRESULT (STDMETHODCALLTYPE* get_SoftwareBitmap)(__x_ABI_CWindows_CMedia_CCore_CIImageCue* This,
        __x_ABI_CWindows_CGraphics_CImaging_CISoftwareBitmap** value);

        END_INTERFACE
    } __x_ABI_CWindows_CMedia_CCore_CIImageCueVtbl;

    interface __x_ABI_CWindows_CMedia_CCore_CIImageCue
    {
        CONST_VTBL struct __x_ABI_CWindows_CMedia_CCore_CIImageCueVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CIImageCue;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CIImageCue_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CMedia_CCore_CIInitializeMediaStreamSourceRequestedEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CMedia_CCore_CIInitializeMediaStreamSourceRequestedEventArgs_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CMedia_CCore_CIInitializeMediaStreamSourceRequestedEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CCore_CIInitializeMediaStreamSourceRequestedEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CCore_CIInitializeMediaStreamSourceRequestedEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CCore_CIInitializeMediaStreamSourceRequestedEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CCore_CIInitializeMediaStreamSourceRequestedEventArgs* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CCore_CIInitializeMediaStreamSourceRequestedEventArgs* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CCore_CIInitializeMediaStreamSourceRequestedEventArgs* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Source)(__x_ABI_CWindows_CMedia_CCore_CIInitializeMediaStreamSourceRequestedEventArgs* This,
        __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource** value);
    HRESULT (STDMETHODCALLTYPE* get_RandomAccessStream)(__x_ABI_CWindows_CMedia_CCore_CIInitializeMediaStreamSourceRequestedEventArgs* This,
        __x_ABI_CWindows_CStorage_CStreams_CIRandomAccessStream** value);
    HRESULT (STDMETHODCALLTYPE* GetDeferral)(__x_ABI_CWindows_CMedia_CCore_CIInitializeMediaStreamSourceRequestedEventArgs* This,
        __x_ABI_CWindows_CFoundation_CIDeferral** result);

        END_INTERFACE
    } __x_ABI_CWindows_CMedia_CCore_CIInitializeMediaStreamSourceRequestedEventArgsVtbl;

    interface __x_ABI_CWindows_CMedia_CCore_CIInitializeMediaStreamSourceRequestedEventArgs
    {
        CONST_VTBL struct __x_ABI_CWindows_CMedia_CCore_CIInitializeMediaStreamSourceRequestedEventArgsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CIInitializeMediaStreamSourceRequestedEventArgs;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CIInitializeMediaStreamSourceRequestedEventArgs_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CMedia_CCore_CILowLightFusionResult_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CMedia_CCore_CILowLightFusionResult_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CMedia_CCore_CILowLightFusionResultVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CCore_CILowLightFusionResult* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CCore_CILowLightFusionResult* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CCore_CILowLightFusionResult* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CCore_CILowLightFusionResult* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CCore_CILowLightFusionResult* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CCore_CILowLightFusionResult* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Frame)(__x_ABI_CWindows_CMedia_CCore_CILowLightFusionResult* This,
        __x_ABI_CWindows_CGraphics_CImaging_CISoftwareBitmap** value);

        END_INTERFACE
    } __x_ABI_CWindows_CMedia_CCore_CILowLightFusionResultVtbl;

    interface __x_ABI_CWindows_CMedia_CCore_CILowLightFusionResult
    {
        CONST_VTBL struct __x_ABI_CWindows_CMedia_CCore_CILowLightFusionResultVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CILowLightFusionResult;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CILowLightFusionResult_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CMedia_CCore_CILowLightFusionStatics_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CMedia_CCore_CILowLightFusionStatics_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CMedia_CCore_CILowLightFusionStaticsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CCore_CILowLightFusionStatics* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CCore_CILowLightFusionStatics* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CCore_CILowLightFusionStatics* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CCore_CILowLightFusionStatics* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CCore_CILowLightFusionStatics* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CCore_CILowLightFusionStatics* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_SupportedBitmapPixelFormats)(__x_ABI_CWindows_CMedia_CCore_CILowLightFusionStatics* This,
        __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapPixelFormat** value);
    HRESULT (STDMETHODCALLTYPE* get_MaxSupportedFrameCount)(__x_ABI_CWindows_CMedia_CCore_CILowLightFusionStatics* This,
        INT32* value);
    HRESULT (STDMETHODCALLTYPE* FuseAsync)(__x_ABI_CWindows_CMedia_CCore_CILowLightFusionStatics* This,
        __x_ABI_C__FIIterable_1___x_ABI_CWindows__CGraphics__CImaging__CSoftwareBitmap* frameSet,
        __x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CMedia__CCore__CLowLightFusionResult_double** result);

        END_INTERFACE
    } __x_ABI_CWindows_CMedia_CCore_CILowLightFusionStaticsVtbl;

    interface __x_ABI_CWindows_CMedia_CCore_CILowLightFusionStatics
    {
        CONST_VTBL struct __x_ABI_CWindows_CMedia_CCore_CILowLightFusionStaticsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CILowLightFusionStatics;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CILowLightFusionStatics_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CMedia_CCore_CIMediaBinder_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CMedia_CCore_CIMediaBinder_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CMedia_CCore_CIMediaBinderVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CCore_CIMediaBinder* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CCore_CIMediaBinder* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CCore_CIMediaBinder* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CCore_CIMediaBinder* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CCore_CIMediaBinder* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CCore_CIMediaBinder* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* add_Binding)(__x_ABI_CWindows_CMedia_CCore_CIMediaBinder* This,
        __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CMediaBinder___x_ABI_CWindows__CMedia__CCore__CMediaBindingEventArgs* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_Binding)(__x_ABI_CWindows_CMedia_CCore_CIMediaBinder* This,
        EventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* get_Token)(__x_ABI_CWindows_CMedia_CCore_CIMediaBinder* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* put_Token)(__x_ABI_CWindows_CMedia_CCore_CIMediaBinder* This,
        HSTRING value);
    HRESULT (STDMETHODCALLTYPE* get_Source)(__x_ABI_CWindows_CMedia_CCore_CIMediaBinder* This,
        __x_ABI_CWindows_CMedia_CCore_CIMediaSource2** value);

        END_INTERFACE
    } __x_ABI_CWindows_CMedia_CCore_CIMediaBinderVtbl;

    interface __x_ABI_CWindows_CMedia_CCore_CIMediaBinder
    {
        CONST_VTBL struct __x_ABI_CWindows_CMedia_CCore_CIMediaBinderVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CIMediaBinder;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CIMediaBinder_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CMedia_CCore_CIMediaBindingEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CMedia_CCore_CIMediaBindingEventArgs_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CMedia_CCore_CIMediaBindingEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CCore_CIMediaBindingEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CCore_CIMediaBindingEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CCore_CIMediaBindingEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CCore_CIMediaBindingEventArgs* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CCore_CIMediaBindingEventArgs* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CCore_CIMediaBindingEventArgs* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* add_Canceled)(__x_ABI_CWindows_CMedia_CCore_CIMediaBindingEventArgs* This,
        __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CMediaBindingEventArgs_IInspectable* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_Canceled)(__x_ABI_CWindows_CMedia_CCore_CIMediaBindingEventArgs* This,
        EventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* get_MediaBinder)(__x_ABI_CWindows_CMedia_CCore_CIMediaBindingEventArgs* This,
        __x_ABI_CWindows_CMedia_CCore_CIMediaBinder** value);
    HRESULT (STDMETHODCALLTYPE* GetDeferral)(__x_ABI_CWindows_CMedia_CCore_CIMediaBindingEventArgs* This,
        __x_ABI_CWindows_CFoundation_CIDeferral** deferral);
    HRESULT (STDMETHODCALLTYPE* SetUri)(__x_ABI_CWindows_CMedia_CCore_CIMediaBindingEventArgs* This,
        __x_ABI_CWindows_CFoundation_CIUriRuntimeClass* uri);
    HRESULT (STDMETHODCALLTYPE* SetStream)(__x_ABI_CWindows_CMedia_CCore_CIMediaBindingEventArgs* This,
        __x_ABI_CWindows_CStorage_CStreams_CIRandomAccessStream* stream,
        HSTRING contentType);
    HRESULT (STDMETHODCALLTYPE* SetStreamReference)(__x_ABI_CWindows_CMedia_CCore_CIMediaBindingEventArgs* This,
        __x_ABI_CWindows_CStorage_CStreams_CIRandomAccessStreamReference* stream,
        HSTRING contentType);

        END_INTERFACE
    } __x_ABI_CWindows_CMedia_CCore_CIMediaBindingEventArgsVtbl;

    interface __x_ABI_CWindows_CMedia_CCore_CIMediaBindingEventArgs
    {
        CONST_VTBL struct __x_ABI_CWindows_CMedia_CCore_CIMediaBindingEventArgsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CIMediaBindingEventArgs;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CIMediaBindingEventArgs_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CMedia_CCore_CIMediaBindingEventArgs2_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CMedia_CCore_CIMediaBindingEventArgs2_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CMedia_CCore_CIMediaBindingEventArgs2Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CCore_CIMediaBindingEventArgs2* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CCore_CIMediaBindingEventArgs2* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CCore_CIMediaBindingEventArgs2* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CCore_CIMediaBindingEventArgs2* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CCore_CIMediaBindingEventArgs2* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CCore_CIMediaBindingEventArgs2* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* SetAdaptiveMediaSource)(__x_ABI_CWindows_CMedia_CCore_CIMediaBindingEventArgs2* This,
        __x_ABI_CWindows_CMedia_CStreaming_CAdaptive_CIAdaptiveMediaSource* mediaSource);
    HRESULT (STDMETHODCALLTYPE* SetStorageFile)(__x_ABI_CWindows_CMedia_CCore_CIMediaBindingEventArgs2* This,
        __x_ABI_CWindows_CStorage_CIStorageFile* file);

        END_INTERFACE
    } __x_ABI_CWindows_CMedia_CCore_CIMediaBindingEventArgs2Vtbl;

    interface __x_ABI_CWindows_CMedia_CCore_CIMediaBindingEventArgs2
    {
        CONST_VTBL struct __x_ABI_CWindows_CMedia_CCore_CIMediaBindingEventArgs2Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CIMediaBindingEventArgs2;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CIMediaBindingEventArgs2_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CMedia_CCore_CIMediaBindingEventArgs3_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CMedia_CCore_CIMediaBindingEventArgs3_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CMedia_CCore_CIMediaBindingEventArgs3Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CCore_CIMediaBindingEventArgs3* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CCore_CIMediaBindingEventArgs3* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CCore_CIMediaBindingEventArgs3* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CCore_CIMediaBindingEventArgs3* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CCore_CIMediaBindingEventArgs3* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CCore_CIMediaBindingEventArgs3* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* SetDownloadOperation)(__x_ABI_CWindows_CMedia_CCore_CIMediaBindingEventArgs3* This,
        __x_ABI_CWindows_CNetworking_CBackgroundTransfer_CIDownloadOperation* downloadOperation);

        END_INTERFACE
    } __x_ABI_CWindows_CMedia_CCore_CIMediaBindingEventArgs3Vtbl;

    interface __x_ABI_CWindows_CMedia_CCore_CIMediaBindingEventArgs3
    {
        CONST_VTBL struct __x_ABI_CWindows_CMedia_CCore_CIMediaBindingEventArgs3Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CIMediaBindingEventArgs3;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CIMediaBindingEventArgs3_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CMedia_CCore_CIMediaCue_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CMedia_CCore_CIMediaCue_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CMedia_CCore_CIMediaCueVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CCore_CIMediaCue* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CCore_CIMediaCue* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CCore_CIMediaCue* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CCore_CIMediaCue* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CCore_CIMediaCue* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CCore_CIMediaCue* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* put_StartTime)(__x_ABI_CWindows_CMedia_CCore_CIMediaCue* This,
        struct __x_ABI_CWindows_CFoundation_CTimeSpan value);
    HRESULT (STDMETHODCALLTYPE* get_StartTime)(__x_ABI_CWindows_CMedia_CCore_CIMediaCue* This,
        struct __x_ABI_CWindows_CFoundation_CTimeSpan* value);
    HRESULT (STDMETHODCALLTYPE* put_Duration)(__x_ABI_CWindows_CMedia_CCore_CIMediaCue* This,
        struct __x_ABI_CWindows_CFoundation_CTimeSpan value);
    HRESULT (STDMETHODCALLTYPE* get_Duration)(__x_ABI_CWindows_CMedia_CCore_CIMediaCue* This,
        struct __x_ABI_CWindows_CFoundation_CTimeSpan* value);
    HRESULT (STDMETHODCALLTYPE* put_Id)(__x_ABI_CWindows_CMedia_CCore_CIMediaCue* This,
        HSTRING value);
    HRESULT (STDMETHODCALLTYPE* get_Id)(__x_ABI_CWindows_CMedia_CCore_CIMediaCue* This,
        HSTRING* value);

        END_INTERFACE
    } __x_ABI_CWindows_CMedia_CCore_CIMediaCueVtbl;

    interface __x_ABI_CWindows_CMedia_CCore_CIMediaCue
    {
        CONST_VTBL struct __x_ABI_CWindows_CMedia_CCore_CIMediaCueVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CIMediaCue;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CIMediaCue_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CMedia_CCore_CIMediaCueEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CMedia_CCore_CIMediaCueEventArgs_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CMedia_CCore_CIMediaCueEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CCore_CIMediaCueEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CCore_CIMediaCueEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CCore_CIMediaCueEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CCore_CIMediaCueEventArgs* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CCore_CIMediaCueEventArgs* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CCore_CIMediaCueEventArgs* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Cue)(__x_ABI_CWindows_CMedia_CCore_CIMediaCueEventArgs* This,
        __x_ABI_CWindows_CMedia_CCore_CIMediaCue** value);

        END_INTERFACE
    } __x_ABI_CWindows_CMedia_CCore_CIMediaCueEventArgsVtbl;

    interface __x_ABI_CWindows_CMedia_CCore_CIMediaCueEventArgs
    {
        CONST_VTBL struct __x_ABI_CWindows_CMedia_CCore_CIMediaCueEventArgsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CIMediaCueEventArgs;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CIMediaCueEventArgs_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CMedia_CCore_CIMediaSource_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CMedia_CCore_CIMediaSource_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CMedia_CCore_CIMediaSourceVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CCore_CIMediaSource* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CCore_CIMediaSource* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CCore_CIMediaSource* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CCore_CIMediaSource* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CCore_CIMediaSource* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CCore_CIMediaSource* This,
            TrustLevel* trustLevel);
    
        END_INTERFACE
    } __x_ABI_CWindows_CMedia_CCore_CIMediaSourceVtbl;

    interface __x_ABI_CWindows_CMedia_CCore_CIMediaSource
    {
        CONST_VTBL struct __x_ABI_CWindows_CMedia_CCore_CIMediaSourceVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CIMediaSource;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CIMediaSource_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CMedia_CCore_CIMediaSource2_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CMedia_CCore_CIMediaSource2_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CMedia_CCore_CIMediaSource2Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CCore_CIMediaSource2* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CCore_CIMediaSource2* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CCore_CIMediaSource2* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CCore_CIMediaSource2* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CCore_CIMediaSource2* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CCore_CIMediaSource2* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* add_OpenOperationCompleted)(__x_ABI_CWindows_CMedia_CCore_CIMediaSource2* This,
        __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CMediaSource___x_ABI_CWindows__CMedia__CCore__CMediaSourceOpenOperationCompletedEventArgs* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_OpenOperationCompleted)(__x_ABI_CWindows_CMedia_CCore_CIMediaSource2* This,
        EventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* get_CustomProperties)(__x_ABI_CWindows_CMedia_CCore_CIMediaSource2* This,
        __x_ABI_CWindows_CFoundation_CCollections_CIPropertySet** value);
    HRESULT (STDMETHODCALLTYPE* get_Duration)(__x_ABI_CWindows_CMedia_CCore_CIMediaSource2* This,
        __x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CTimeSpan** value);
    HRESULT (STDMETHODCALLTYPE* get_IsOpen)(__x_ABI_CWindows_CMedia_CCore_CIMediaSource2* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* get_ExternalTimedTextSources)(__x_ABI_CWindows_CMedia_CCore_CIMediaSource2* This,
        __x_ABI_C__FIObservableVector_1___x_ABI_CWindows__CMedia__CCore__CTimedTextSource** value);
    HRESULT (STDMETHODCALLTYPE* get_ExternalTimedMetadataTracks)(__x_ABI_CWindows_CMedia_CCore_CIMediaSource2* This,
        __x_ABI_C__FIObservableVector_1___x_ABI_CWindows__CMedia__CCore__CTimedMetadataTrack** value);

        END_INTERFACE
    } __x_ABI_CWindows_CMedia_CCore_CIMediaSource2Vtbl;

    interface __x_ABI_CWindows_CMedia_CCore_CIMediaSource2
    {
        CONST_VTBL struct __x_ABI_CWindows_CMedia_CCore_CIMediaSource2Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CIMediaSource2;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CIMediaSource2_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CMedia_CCore_CIMediaSource3_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CMedia_CCore_CIMediaSource3_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CMedia_CCore_CIMediaSource3Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CCore_CIMediaSource3* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CCore_CIMediaSource3* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CCore_CIMediaSource3* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CCore_CIMediaSource3* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CCore_CIMediaSource3* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CCore_CIMediaSource3* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* add_StateChanged)(__x_ABI_CWindows_CMedia_CCore_CIMediaSource3* This,
        __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CMediaSource___x_ABI_CWindows__CMedia__CCore__CMediaSourceStateChangedEventArgs* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_StateChanged)(__x_ABI_CWindows_CMedia_CCore_CIMediaSource3* This,
        EventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* get_State)(__x_ABI_CWindows_CMedia_CCore_CIMediaSource3* This,
        enum __x_ABI_CWindows_CMedia_CCore_CMediaSourceState* value);
    HRESULT (STDMETHODCALLTYPE* Reset)(__x_ABI_CWindows_CMedia_CCore_CIMediaSource3* This);

        END_INTERFACE
    } __x_ABI_CWindows_CMedia_CCore_CIMediaSource3Vtbl;

    interface __x_ABI_CWindows_CMedia_CCore_CIMediaSource3
    {
        CONST_VTBL struct __x_ABI_CWindows_CMedia_CCore_CIMediaSource3Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CIMediaSource3;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CIMediaSource3_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CMedia_CCore_CIMediaSource4_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CMedia_CCore_CIMediaSource4_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CMedia_CCore_CIMediaSource4Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CCore_CIMediaSource4* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CCore_CIMediaSource4* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CCore_CIMediaSource4* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CCore_CIMediaSource4* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CCore_CIMediaSource4* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CCore_CIMediaSource4* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_AdaptiveMediaSource)(__x_ABI_CWindows_CMedia_CCore_CIMediaSource4* This,
        __x_ABI_CWindows_CMedia_CStreaming_CAdaptive_CIAdaptiveMediaSource** value);
    HRESULT (STDMETHODCALLTYPE* get_MediaStreamSource)(__x_ABI_CWindows_CMedia_CCore_CIMediaSource4* This,
        __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource** value);
    HRESULT (STDMETHODCALLTYPE* get_MseStreamSource)(__x_ABI_CWindows_CMedia_CCore_CIMediaSource4* This,
        __x_ABI_CWindows_CMedia_CCore_CIMseStreamSource** value);
    HRESULT (STDMETHODCALLTYPE* get_Uri)(__x_ABI_CWindows_CMedia_CCore_CIMediaSource4* This,
        __x_ABI_CWindows_CFoundation_CIUriRuntimeClass** value);
    HRESULT (STDMETHODCALLTYPE* OpenAsync)(__x_ABI_CWindows_CMedia_CCore_CIMediaSource4* This,
        __x_ABI_CWindows_CFoundation_CIAsyncAction** operation);

        END_INTERFACE
    } __x_ABI_CWindows_CMedia_CCore_CIMediaSource4Vtbl;

    interface __x_ABI_CWindows_CMedia_CCore_CIMediaSource4
    {
        CONST_VTBL struct __x_ABI_CWindows_CMedia_CCore_CIMediaSource4Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CIMediaSource4;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CIMediaSource4_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CMedia_CCore_CIMediaSource5_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CMedia_CCore_CIMediaSource5_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CMedia_CCore_CIMediaSource5Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CCore_CIMediaSource5* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CCore_CIMediaSource5* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CCore_CIMediaSource5* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CCore_CIMediaSource5* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CCore_CIMediaSource5* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CCore_CIMediaSource5* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_DownloadOperation)(__x_ABI_CWindows_CMedia_CCore_CIMediaSource5* This,
        __x_ABI_CWindows_CNetworking_CBackgroundTransfer_CIDownloadOperation** value);

        END_INTERFACE
    } __x_ABI_CWindows_CMedia_CCore_CIMediaSource5Vtbl;

    interface __x_ABI_CWindows_CMedia_CCore_CIMediaSource5
    {
        CONST_VTBL struct __x_ABI_CWindows_CMedia_CCore_CIMediaSource5Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CIMediaSource5;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CIMediaSource5_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CMedia_CCore_CIMediaSourceAppServiceConnection_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CMedia_CCore_CIMediaSourceAppServiceConnection_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CMedia_CCore_CIMediaSourceAppServiceConnectionVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CCore_CIMediaSourceAppServiceConnection* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CCore_CIMediaSourceAppServiceConnection* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CCore_CIMediaSourceAppServiceConnection* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CCore_CIMediaSourceAppServiceConnection* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CCore_CIMediaSourceAppServiceConnection* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CCore_CIMediaSourceAppServiceConnection* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* add_InitializeMediaStreamSourceRequested)(__x_ABI_CWindows_CMedia_CCore_CIMediaSourceAppServiceConnection* This,
        __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CMediaSourceAppServiceConnection___x_ABI_CWindows__CMedia__CCore__CInitializeMediaStreamSourceRequestedEventArgs* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_InitializeMediaStreamSourceRequested)(__x_ABI_CWindows_CMedia_CCore_CIMediaSourceAppServiceConnection* This,
        EventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* Start)(__x_ABI_CWindows_CMedia_CCore_CIMediaSourceAppServiceConnection* This);

        END_INTERFACE
    } __x_ABI_CWindows_CMedia_CCore_CIMediaSourceAppServiceConnectionVtbl;

    interface __x_ABI_CWindows_CMedia_CCore_CIMediaSourceAppServiceConnection
    {
        CONST_VTBL struct __x_ABI_CWindows_CMedia_CCore_CIMediaSourceAppServiceConnectionVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CIMediaSourceAppServiceConnection;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CIMediaSourceAppServiceConnection_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CMedia_CCore_CIMediaSourceAppServiceConnectionFactory_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CMedia_CCore_CIMediaSourceAppServiceConnectionFactory_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CMedia_CCore_CIMediaSourceAppServiceConnectionFactoryVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CCore_CIMediaSourceAppServiceConnectionFactory* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CCore_CIMediaSourceAppServiceConnectionFactory* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CCore_CIMediaSourceAppServiceConnectionFactory* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CCore_CIMediaSourceAppServiceConnectionFactory* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CCore_CIMediaSourceAppServiceConnectionFactory* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CCore_CIMediaSourceAppServiceConnectionFactory* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* Create)(__x_ABI_CWindows_CMedia_CCore_CIMediaSourceAppServiceConnectionFactory* This,
        __x_ABI_CWindows_CApplicationModel_CAppService_CIAppServiceConnection* appServiceConnection,
        __x_ABI_CWindows_CMedia_CCore_CIMediaSourceAppServiceConnection** result);

        END_INTERFACE
    } __x_ABI_CWindows_CMedia_CCore_CIMediaSourceAppServiceConnectionFactoryVtbl;

    interface __x_ABI_CWindows_CMedia_CCore_CIMediaSourceAppServiceConnectionFactory
    {
        CONST_VTBL struct __x_ABI_CWindows_CMedia_CCore_CIMediaSourceAppServiceConnectionFactoryVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CIMediaSourceAppServiceConnectionFactory;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CIMediaSourceAppServiceConnectionFactory_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CMedia_CCore_CIMediaSourceError_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CMedia_CCore_CIMediaSourceError_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CMedia_CCore_CIMediaSourceErrorVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CCore_CIMediaSourceError* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CCore_CIMediaSourceError* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CCore_CIMediaSourceError* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CCore_CIMediaSourceError* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CCore_CIMediaSourceError* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CCore_CIMediaSourceError* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_ExtendedError)(__x_ABI_CWindows_CMedia_CCore_CIMediaSourceError* This,
        HRESULT* value);

        END_INTERFACE
    } __x_ABI_CWindows_CMedia_CCore_CIMediaSourceErrorVtbl;

    interface __x_ABI_CWindows_CMedia_CCore_CIMediaSourceError
    {
        CONST_VTBL struct __x_ABI_CWindows_CMedia_CCore_CIMediaSourceErrorVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CIMediaSourceError;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CIMediaSourceError_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CMedia_CCore_CIMediaSourceOpenOperationCompletedEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CMedia_CCore_CIMediaSourceOpenOperationCompletedEventArgs_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CMedia_CCore_CIMediaSourceOpenOperationCompletedEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CCore_CIMediaSourceOpenOperationCompletedEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CCore_CIMediaSourceOpenOperationCompletedEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CCore_CIMediaSourceOpenOperationCompletedEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CCore_CIMediaSourceOpenOperationCompletedEventArgs* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CCore_CIMediaSourceOpenOperationCompletedEventArgs* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CCore_CIMediaSourceOpenOperationCompletedEventArgs* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Error)(__x_ABI_CWindows_CMedia_CCore_CIMediaSourceOpenOperationCompletedEventArgs* This,
        __x_ABI_CWindows_CMedia_CCore_CIMediaSourceError** value);

        END_INTERFACE
    } __x_ABI_CWindows_CMedia_CCore_CIMediaSourceOpenOperationCompletedEventArgsVtbl;

    interface __x_ABI_CWindows_CMedia_CCore_CIMediaSourceOpenOperationCompletedEventArgs
    {
        CONST_VTBL struct __x_ABI_CWindows_CMedia_CCore_CIMediaSourceOpenOperationCompletedEventArgsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CIMediaSourceOpenOperationCompletedEventArgs;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CIMediaSourceOpenOperationCompletedEventArgs_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CMedia_CCore_CIMediaSourceStateChangedEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CMedia_CCore_CIMediaSourceStateChangedEventArgs_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CMedia_CCore_CIMediaSourceStateChangedEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CCore_CIMediaSourceStateChangedEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CCore_CIMediaSourceStateChangedEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CCore_CIMediaSourceStateChangedEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CCore_CIMediaSourceStateChangedEventArgs* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CCore_CIMediaSourceStateChangedEventArgs* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CCore_CIMediaSourceStateChangedEventArgs* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_OldState)(__x_ABI_CWindows_CMedia_CCore_CIMediaSourceStateChangedEventArgs* This,
        enum __x_ABI_CWindows_CMedia_CCore_CMediaSourceState* value);
    HRESULT (STDMETHODCALLTYPE* get_NewState)(__x_ABI_CWindows_CMedia_CCore_CIMediaSourceStateChangedEventArgs* This,
        enum __x_ABI_CWindows_CMedia_CCore_CMediaSourceState* value);

        END_INTERFACE
    } __x_ABI_CWindows_CMedia_CCore_CIMediaSourceStateChangedEventArgsVtbl;

    interface __x_ABI_CWindows_CMedia_CCore_CIMediaSourceStateChangedEventArgs
    {
        CONST_VTBL struct __x_ABI_CWindows_CMedia_CCore_CIMediaSourceStateChangedEventArgsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CIMediaSourceStateChangedEventArgs;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CIMediaSourceStateChangedEventArgs_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CMedia_CCore_CIMediaSourceStatics_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CMedia_CCore_CIMediaSourceStatics_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CMedia_CCore_CIMediaSourceStaticsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CCore_CIMediaSourceStatics* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CCore_CIMediaSourceStatics* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CCore_CIMediaSourceStatics* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CCore_CIMediaSourceStatics* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CCore_CIMediaSourceStatics* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CCore_CIMediaSourceStatics* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* CreateFromAdaptiveMediaSource)(__x_ABI_CWindows_CMedia_CCore_CIMediaSourceStatics* This,
        __x_ABI_CWindows_CMedia_CStreaming_CAdaptive_CIAdaptiveMediaSource* mediaSource,
        __x_ABI_CWindows_CMedia_CCore_CIMediaSource2** result);
    HRESULT (STDMETHODCALLTYPE* CreateFromMediaStreamSource)(__x_ABI_CWindows_CMedia_CCore_CIMediaSourceStatics* This,
        __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource* mediaSource,
        __x_ABI_CWindows_CMedia_CCore_CIMediaSource2** result);
    HRESULT (STDMETHODCALLTYPE* CreateFromMseStreamSource)(__x_ABI_CWindows_CMedia_CCore_CIMediaSourceStatics* This,
        __x_ABI_CWindows_CMedia_CCore_CIMseStreamSource* mediaSource,
        __x_ABI_CWindows_CMedia_CCore_CIMediaSource2** result);
    HRESULT (STDMETHODCALLTYPE* CreateFromIMediaSource)(__x_ABI_CWindows_CMedia_CCore_CIMediaSourceStatics* This,
        __x_ABI_CWindows_CMedia_CCore_CIMediaSource* mediaSource,
        __x_ABI_CWindows_CMedia_CCore_CIMediaSource2** result);
    HRESULT (STDMETHODCALLTYPE* CreateFromStorageFile)(__x_ABI_CWindows_CMedia_CCore_CIMediaSourceStatics* This,
        __x_ABI_CWindows_CStorage_CIStorageFile* file,
        __x_ABI_CWindows_CMedia_CCore_CIMediaSource2** result);
    HRESULT (STDMETHODCALLTYPE* CreateFromStream)(__x_ABI_CWindows_CMedia_CCore_CIMediaSourceStatics* This,
        __x_ABI_CWindows_CStorage_CStreams_CIRandomAccessStream* stream,
        HSTRING contentType,
        __x_ABI_CWindows_CMedia_CCore_CIMediaSource2** result);
    HRESULT (STDMETHODCALLTYPE* CreateFromStreamReference)(__x_ABI_CWindows_CMedia_CCore_CIMediaSourceStatics* This,
        __x_ABI_CWindows_CStorage_CStreams_CIRandomAccessStreamReference* stream,
        HSTRING contentType,
        __x_ABI_CWindows_CMedia_CCore_CIMediaSource2** result);
    HRESULT (STDMETHODCALLTYPE* CreateFromUri)(__x_ABI_CWindows_CMedia_CCore_CIMediaSourceStatics* This,
        __x_ABI_CWindows_CFoundation_CIUriRuntimeClass* uri,
        __x_ABI_CWindows_CMedia_CCore_CIMediaSource2** result);

        END_INTERFACE
    } __x_ABI_CWindows_CMedia_CCore_CIMediaSourceStaticsVtbl;

    interface __x_ABI_CWindows_CMedia_CCore_CIMediaSourceStatics
    {
        CONST_VTBL struct __x_ABI_CWindows_CMedia_CCore_CIMediaSourceStaticsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CIMediaSourceStatics;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CIMediaSourceStatics_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CMedia_CCore_CIMediaSourceStatics2_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CMedia_CCore_CIMediaSourceStatics2_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CMedia_CCore_CIMediaSourceStatics2Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CCore_CIMediaSourceStatics2* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CCore_CIMediaSourceStatics2* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CCore_CIMediaSourceStatics2* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CCore_CIMediaSourceStatics2* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CCore_CIMediaSourceStatics2* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CCore_CIMediaSourceStatics2* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* CreateFromMediaBinder)(__x_ABI_CWindows_CMedia_CCore_CIMediaSourceStatics2* This,
        __x_ABI_CWindows_CMedia_CCore_CIMediaBinder* binder,
        __x_ABI_CWindows_CMedia_CCore_CIMediaSource2** result);

        END_INTERFACE
    } __x_ABI_CWindows_CMedia_CCore_CIMediaSourceStatics2Vtbl;

    interface __x_ABI_CWindows_CMedia_CCore_CIMediaSourceStatics2
    {
        CONST_VTBL struct __x_ABI_CWindows_CMedia_CCore_CIMediaSourceStatics2Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CIMediaSourceStatics2;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CIMediaSourceStatics2_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CMedia_CCore_CIMediaSourceStatics3_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CMedia_CCore_CIMediaSourceStatics3_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CMedia_CCore_CIMediaSourceStatics3Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CCore_CIMediaSourceStatics3* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CCore_CIMediaSourceStatics3* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CCore_CIMediaSourceStatics3* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CCore_CIMediaSourceStatics3* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CCore_CIMediaSourceStatics3* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CCore_CIMediaSourceStatics3* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* CreateFromMediaFrameSource)(__x_ABI_CWindows_CMedia_CCore_CIMediaSourceStatics3* This,
        __x_ABI_CWindows_CMedia_CCapture_CFrames_CIMediaFrameSource* frameSource,
        __x_ABI_CWindows_CMedia_CCore_CIMediaSource2** result);

        END_INTERFACE
    } __x_ABI_CWindows_CMedia_CCore_CIMediaSourceStatics3Vtbl;

    interface __x_ABI_CWindows_CMedia_CCore_CIMediaSourceStatics3
    {
        CONST_VTBL struct __x_ABI_CWindows_CMedia_CCore_CIMediaSourceStatics3Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CIMediaSourceStatics3;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CIMediaSourceStatics3_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CMedia_CCore_CIMediaSourceStatics4_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CMedia_CCore_CIMediaSourceStatics4_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CMedia_CCore_CIMediaSourceStatics4Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CCore_CIMediaSourceStatics4* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CCore_CIMediaSourceStatics4* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CCore_CIMediaSourceStatics4* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CCore_CIMediaSourceStatics4* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CCore_CIMediaSourceStatics4* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CCore_CIMediaSourceStatics4* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* CreateFromDownloadOperation)(__x_ABI_CWindows_CMedia_CCore_CIMediaSourceStatics4* This,
        __x_ABI_CWindows_CNetworking_CBackgroundTransfer_CIDownloadOperation* downloadOperation,
        __x_ABI_CWindows_CMedia_CCore_CIMediaSource2** result);

        END_INTERFACE
    } __x_ABI_CWindows_CMedia_CCore_CIMediaSourceStatics4Vtbl;

    interface __x_ABI_CWindows_CMedia_CCore_CIMediaSourceStatics4
    {
        CONST_VTBL struct __x_ABI_CWindows_CMedia_CCore_CIMediaSourceStatics4Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CIMediaSourceStatics4;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CIMediaSourceStatics4_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CMedia_CCore_CIMediaStreamDescriptor_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamDescriptor_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CMedia_CCore_CIMediaStreamDescriptorVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamDescriptor* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamDescriptor* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamDescriptor* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamDescriptor* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamDescriptor* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamDescriptor* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_IsSelected)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamDescriptor* This,
        boolean* selected);
    HRESULT (STDMETHODCALLTYPE* put_Name)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamDescriptor* This,
        HSTRING value);
    HRESULT (STDMETHODCALLTYPE* get_Name)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamDescriptor* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* put_Language)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamDescriptor* This,
        HSTRING value);
    HRESULT (STDMETHODCALLTYPE* get_Language)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamDescriptor* This,
        HSTRING* value);

        END_INTERFACE
    } __x_ABI_CWindows_CMedia_CCore_CIMediaStreamDescriptorVtbl;

    interface __x_ABI_CWindows_CMedia_CCore_CIMediaStreamDescriptor
    {
        CONST_VTBL struct __x_ABI_CWindows_CMedia_CCore_CIMediaStreamDescriptorVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CIMediaStreamDescriptor;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CIMediaStreamDescriptor_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CMedia_CCore_CIMediaStreamDescriptor2_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamDescriptor2_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CMedia_CCore_CIMediaStreamDescriptor2Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamDescriptor2* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamDescriptor2* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamDescriptor2* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamDescriptor2* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamDescriptor2* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamDescriptor2* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* put_Label)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamDescriptor2* This,
        HSTRING value);
    HRESULT (STDMETHODCALLTYPE* get_Label)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamDescriptor2* This,
        HSTRING* value);

        END_INTERFACE
    } __x_ABI_CWindows_CMedia_CCore_CIMediaStreamDescriptor2Vtbl;

    interface __x_ABI_CWindows_CMedia_CCore_CIMediaStreamDescriptor2
    {
        CONST_VTBL struct __x_ABI_CWindows_CMedia_CCore_CIMediaStreamDescriptor2Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CIMediaStreamDescriptor2;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CIMediaStreamDescriptor2_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSample_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSample_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSampleVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSample* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSample* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSample* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSample* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSample* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSample* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* add_Processed)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSample* This,
        __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CMediaStreamSample_IInspectable* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_Processed)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSample* This,
        EventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* get_Buffer)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSample* This,
        __x_ABI_CWindows_CStorage_CStreams_CIBuffer** value);
    HRESULT (STDMETHODCALLTYPE* get_Timestamp)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSample* This,
        struct __x_ABI_CWindows_CFoundation_CTimeSpan* value);
    HRESULT (STDMETHODCALLTYPE* get_ExtendedProperties)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSample* This,
        __x_ABI_C__FIMap_2_GUID_IInspectable** value);
    HRESULT (STDMETHODCALLTYPE* get_Protection)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSample* This,
        __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSampleProtectionProperties** value);
    HRESULT (STDMETHODCALLTYPE* put_DecodeTimestamp)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSample* This,
        struct __x_ABI_CWindows_CFoundation_CTimeSpan value);
    HRESULT (STDMETHODCALLTYPE* get_DecodeTimestamp)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSample* This,
        struct __x_ABI_CWindows_CFoundation_CTimeSpan* value);
    HRESULT (STDMETHODCALLTYPE* put_Duration)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSample* This,
        struct __x_ABI_CWindows_CFoundation_CTimeSpan value);
    HRESULT (STDMETHODCALLTYPE* get_Duration)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSample* This,
        struct __x_ABI_CWindows_CFoundation_CTimeSpan* value);
    HRESULT (STDMETHODCALLTYPE* put_KeyFrame)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSample* This,
        boolean value);
    HRESULT (STDMETHODCALLTYPE* get_KeyFrame)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSample* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* put_Discontinuous)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSample* This,
        boolean value);
    HRESULT (STDMETHODCALLTYPE* get_Discontinuous)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSample* This,
        boolean* value);

        END_INTERFACE
    } __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSampleVtbl;

    interface __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSample
    {
        CONST_VTBL struct __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSampleVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CIMediaStreamSample;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSample_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSample2_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSample2_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSample2Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSample2* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSample2* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSample2* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSample2* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSample2* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSample2* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Direct3D11Surface)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSample2* This,
        __x_ABI_CWindows_CGraphics_CDirectX_CDirect3D11_CIDirect3DSurface** value);

        END_INTERFACE
    } __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSample2Vtbl;

    interface __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSample2
    {
        CONST_VTBL struct __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSample2Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CIMediaStreamSample2;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSample2_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSampleProtectionProperties_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSampleProtectionProperties_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSampleProtectionPropertiesVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSampleProtectionProperties* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSampleProtectionProperties* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSampleProtectionProperties* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSampleProtectionProperties* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSampleProtectionProperties* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSampleProtectionProperties* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* SetKeyIdentifier)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSampleProtectionProperties* This,
        UINT32 valueLength,
        BYTE* value);
    HRESULT (STDMETHODCALLTYPE* GetKeyIdentifier)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSampleProtectionProperties* This,
        UINT32* valueLength,
        BYTE** value);
    HRESULT (STDMETHODCALLTYPE* SetInitializationVector)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSampleProtectionProperties* This,
        UINT32 valueLength,
        BYTE* value);
    HRESULT (STDMETHODCALLTYPE* GetInitializationVector)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSampleProtectionProperties* This,
        UINT32* valueLength,
        BYTE** value);
    HRESULT (STDMETHODCALLTYPE* SetSubSampleMapping)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSampleProtectionProperties* This,
        UINT32 valueLength,
        BYTE* value);
    HRESULT (STDMETHODCALLTYPE* GetSubSampleMapping)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSampleProtectionProperties* This,
        UINT32* valueLength,
        BYTE** value);

        END_INTERFACE
    } __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSampleProtectionPropertiesVtbl;

    interface __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSampleProtectionProperties
    {
        CONST_VTBL struct __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSampleProtectionPropertiesVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CIMediaStreamSampleProtectionProperties;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSampleProtectionProperties_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSampleStatics_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSampleStatics_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSampleStaticsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSampleStatics* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSampleStatics* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSampleStatics* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSampleStatics* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSampleStatics* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSampleStatics* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* CreateFromBuffer)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSampleStatics* This,
        __x_ABI_CWindows_CStorage_CStreams_CIBuffer* buffer,
        struct __x_ABI_CWindows_CFoundation_CTimeSpan timestamp,
        __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSample** value);
    HRESULT (STDMETHODCALLTYPE* CreateFromStreamAsync)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSampleStatics* This,
        __x_ABI_CWindows_CStorage_CStreams_CIInputStream* stream,
        UINT32 count,
        struct __x_ABI_CWindows_CFoundation_CTimeSpan timestamp,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CCore__CMediaStreamSample** value);

        END_INTERFACE
    } __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSampleStaticsVtbl;

    interface __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSampleStatics
    {
        CONST_VTBL struct __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSampleStaticsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CIMediaStreamSampleStatics;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSampleStatics_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSampleStatics2_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSampleStatics2_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSampleStatics2Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSampleStatics2* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSampleStatics2* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSampleStatics2* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSampleStatics2* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSampleStatics2* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSampleStatics2* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* CreateFromDirect3D11Surface)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSampleStatics2* This,
        __x_ABI_CWindows_CGraphics_CDirectX_CDirect3D11_CIDirect3DSurface* surface,
        struct __x_ABI_CWindows_CFoundation_CTimeSpan timestamp,
        __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSample** result);

        END_INTERFACE
    } __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSampleStatics2Vtbl;

    interface __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSampleStatics2
    {
        CONST_VTBL struct __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSampleStatics2Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CIMediaStreamSampleStatics2;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSampleStatics2_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* add_Closed)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource* This,
        __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CMediaStreamSource___x_ABI_CWindows__CMedia__CCore__CMediaStreamSourceClosedEventArgs* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_Closed)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource* This,
        EventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* add_Starting)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource* This,
        __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CMediaStreamSource___x_ABI_CWindows__CMedia__CCore__CMediaStreamSourceStartingEventArgs* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_Starting)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource* This,
        EventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* add_Paused)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource* This,
        __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CMediaStreamSource_IInspectable* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_Paused)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource* This,
        EventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* add_SampleRequested)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource* This,
        __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CMediaStreamSource___x_ABI_CWindows__CMedia__CCore__CMediaStreamSourceSampleRequestedEventArgs* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_SampleRequested)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource* This,
        EventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* add_SwitchStreamsRequested)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource* This,
        __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CMediaStreamSource___x_ABI_CWindows__CMedia__CCore__CMediaStreamSourceSwitchStreamsRequestedEventArgs* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_SwitchStreamsRequested)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource* This,
        EventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* NotifyError)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource* This,
        enum __x_ABI_CWindows_CMedia_CCore_CMediaStreamSourceErrorStatus errorStatus);
    HRESULT (STDMETHODCALLTYPE* AddStreamDescriptor)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource* This,
        __x_ABI_CWindows_CMedia_CCore_CIMediaStreamDescriptor* descriptor);
    HRESULT (STDMETHODCALLTYPE* put_MediaProtectionManager)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource* This,
        __x_ABI_CWindows_CMedia_CProtection_CIMediaProtectionManager* value);
    HRESULT (STDMETHODCALLTYPE* get_MediaProtectionManager)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource* This,
        __x_ABI_CWindows_CMedia_CProtection_CIMediaProtectionManager** value);
    HRESULT (STDMETHODCALLTYPE* put_Duration)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource* This,
        struct __x_ABI_CWindows_CFoundation_CTimeSpan value);
    HRESULT (STDMETHODCALLTYPE* get_Duration)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource* This,
        struct __x_ABI_CWindows_CFoundation_CTimeSpan* value);
    HRESULT (STDMETHODCALLTYPE* put_CanSeek)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource* This,
        boolean value);
    HRESULT (STDMETHODCALLTYPE* get_CanSeek)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* put_BufferTime)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource* This,
        struct __x_ABI_CWindows_CFoundation_CTimeSpan value);
    HRESULT (STDMETHODCALLTYPE* get_BufferTime)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource* This,
        struct __x_ABI_CWindows_CFoundation_CTimeSpan* value);
    HRESULT (STDMETHODCALLTYPE* SetBufferedRange)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource* This,
        struct __x_ABI_CWindows_CFoundation_CTimeSpan startOffset,
        struct __x_ABI_CWindows_CFoundation_CTimeSpan endOffset);
    HRESULT (STDMETHODCALLTYPE* get_MusicProperties)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource* This,
        __x_ABI_CWindows_CStorage_CFileProperties_CIMusicProperties** value);
    HRESULT (STDMETHODCALLTYPE* get_VideoProperties)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource* This,
        __x_ABI_CWindows_CStorage_CFileProperties_CIVideoProperties** value);
    HRESULT (STDMETHODCALLTYPE* put_Thumbnail)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource* This,
        __x_ABI_CWindows_CStorage_CStreams_CIRandomAccessStreamReference* value);
    HRESULT (STDMETHODCALLTYPE* get_Thumbnail)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource* This,
        __x_ABI_CWindows_CStorage_CStreams_CIRandomAccessStreamReference** value);
    HRESULT (STDMETHODCALLTYPE* AddProtectionKey)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource* This,
        __x_ABI_CWindows_CMedia_CCore_CIMediaStreamDescriptor* streamDescriptor,
        UINT32 keyIdentifierLength,
        BYTE* keyIdentifier,
        UINT32 licenseDataLength,
        BYTE* licenseData);

        END_INTERFACE
    } __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceVtbl;

    interface __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource
    {
        CONST_VTBL struct __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource2_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource2_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource2Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource2* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource2* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource2* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource2* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource2* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource2* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* add_SampleRendered)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource2* This,
        __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CMediaStreamSource___x_ABI_CWindows__CMedia__CCore__CMediaStreamSourceSampleRenderedEventArgs* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_SampleRendered)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource2* This,
        EventRegistrationToken token);

        END_INTERFACE
    } __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource2Vtbl;

    interface __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource2
    {
        CONST_VTBL struct __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource2Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource2;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource2_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource3_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource3_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource3Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource3* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource3* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource3* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource3* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource3* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource3* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* put_MaxSupportedPlaybackRate)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource3* This,
        __x_ABI_C__FIReference_1_double* value);
    HRESULT (STDMETHODCALLTYPE* get_MaxSupportedPlaybackRate)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource3* This,
        __x_ABI_C__FIReference_1_double** value);

        END_INTERFACE
    } __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource3Vtbl;

    interface __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource3
    {
        CONST_VTBL struct __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource3Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource3;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource3_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource4_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource4_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource4Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource4* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource4* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource4* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource4* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource4* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource4* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* put_IsLive)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource4* This,
        boolean value);
    HRESULT (STDMETHODCALLTYPE* get_IsLive)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource4* This,
        boolean* value);

        END_INTERFACE
    } __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource4Vtbl;

    interface __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource4
    {
        CONST_VTBL struct __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource4Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource4;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource4_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceClosedEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceClosedEventArgs_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceClosedEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceClosedEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceClosedEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceClosedEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceClosedEventArgs* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceClosedEventArgs* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceClosedEventArgs* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Request)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceClosedEventArgs* This,
        __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceClosedRequest** value);

        END_INTERFACE
    } __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceClosedEventArgsVtbl;

    interface __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceClosedEventArgs
    {
        CONST_VTBL struct __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceClosedEventArgsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceClosedEventArgs;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceClosedEventArgs_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceClosedRequest_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceClosedRequest_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceClosedRequestVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceClosedRequest* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceClosedRequest* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceClosedRequest* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceClosedRequest* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceClosedRequest* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceClosedRequest* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Reason)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceClosedRequest* This,
        enum __x_ABI_CWindows_CMedia_CCore_CMediaStreamSourceClosedReason* value);

        END_INTERFACE
    } __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceClosedRequestVtbl;

    interface __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceClosedRequest
    {
        CONST_VTBL struct __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceClosedRequestVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceClosedRequest;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceClosedRequest_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceFactory_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceFactory_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceFactoryVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceFactory* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceFactory* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceFactory* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceFactory* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceFactory* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceFactory* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* CreateFromDescriptor)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceFactory* This,
        __x_ABI_CWindows_CMedia_CCore_CIMediaStreamDescriptor* descriptor,
        __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource** result);
    HRESULT (STDMETHODCALLTYPE* CreateFromDescriptors)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceFactory* This,
        __x_ABI_CWindows_CMedia_CCore_CIMediaStreamDescriptor* descriptor,
        __x_ABI_CWindows_CMedia_CCore_CIMediaStreamDescriptor* descriptor2,
        __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource** result);

        END_INTERFACE
    } __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceFactoryVtbl;

    interface __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceFactory
    {
        CONST_VTBL struct __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceFactoryVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceFactory;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceFactory_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSampleRenderedEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSampleRenderedEventArgs_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSampleRenderedEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSampleRenderedEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSampleRenderedEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSampleRenderedEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSampleRenderedEventArgs* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSampleRenderedEventArgs* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSampleRenderedEventArgs* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_SampleLag)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSampleRenderedEventArgs* This,
        struct __x_ABI_CWindows_CFoundation_CTimeSpan* value);

        END_INTERFACE
    } __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSampleRenderedEventArgsVtbl;

    interface __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSampleRenderedEventArgs
    {
        CONST_VTBL struct __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSampleRenderedEventArgsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSampleRenderedEventArgs;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSampleRenderedEventArgs_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSampleRequest_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSampleRequest_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSampleRequestVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSampleRequest* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSampleRequest* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSampleRequest* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSampleRequest* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSampleRequest* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSampleRequest* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_StreamDescriptor)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSampleRequest* This,
        __x_ABI_CWindows_CMedia_CCore_CIMediaStreamDescriptor** value);
    HRESULT (STDMETHODCALLTYPE* GetDeferral)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSampleRequest* This,
        __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSampleRequestDeferral** deferral);
    HRESULT (STDMETHODCALLTYPE* put_Sample)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSampleRequest* This,
        __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSample* value);
    HRESULT (STDMETHODCALLTYPE* get_Sample)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSampleRequest* This,
        __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSample** value);
    HRESULT (STDMETHODCALLTYPE* ReportSampleProgress)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSampleRequest* This,
        UINT32 progress);

        END_INTERFACE
    } __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSampleRequestVtbl;

    interface __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSampleRequest
    {
        CONST_VTBL struct __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSampleRequestVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSampleRequest;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSampleRequest_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSampleRequestDeferral_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSampleRequestDeferral_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSampleRequestDeferralVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSampleRequestDeferral* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSampleRequestDeferral* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSampleRequestDeferral* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSampleRequestDeferral* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSampleRequestDeferral* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSampleRequestDeferral* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* Complete)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSampleRequestDeferral* This);

        END_INTERFACE
    } __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSampleRequestDeferralVtbl;

    interface __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSampleRequestDeferral
    {
        CONST_VTBL struct __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSampleRequestDeferralVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSampleRequestDeferral;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSampleRequestDeferral_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSampleRequestedEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSampleRequestedEventArgs_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSampleRequestedEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSampleRequestedEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSampleRequestedEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSampleRequestedEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSampleRequestedEventArgs* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSampleRequestedEventArgs* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSampleRequestedEventArgs* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Request)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSampleRequestedEventArgs* This,
        __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSampleRequest** value);

        END_INTERFACE
    } __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSampleRequestedEventArgsVtbl;

    interface __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSampleRequestedEventArgs
    {
        CONST_VTBL struct __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSampleRequestedEventArgsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSampleRequestedEventArgs;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSampleRequestedEventArgs_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceStartingEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceStartingEventArgs_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceStartingEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceStartingEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceStartingEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceStartingEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceStartingEventArgs* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceStartingEventArgs* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceStartingEventArgs* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Request)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceStartingEventArgs* This,
        __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceStartingRequest** value);

        END_INTERFACE
    } __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceStartingEventArgsVtbl;

    interface __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceStartingEventArgs
    {
        CONST_VTBL struct __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceStartingEventArgsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceStartingEventArgs;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceStartingEventArgs_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceStartingRequest_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceStartingRequest_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceStartingRequestVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceStartingRequest* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceStartingRequest* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceStartingRequest* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceStartingRequest* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceStartingRequest* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceStartingRequest* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_StartPosition)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceStartingRequest* This,
        __x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CTimeSpan** value);
    HRESULT (STDMETHODCALLTYPE* GetDeferral)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceStartingRequest* This,
        __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceStartingRequestDeferral** deferral);
    HRESULT (STDMETHODCALLTYPE* SetActualStartPosition)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceStartingRequest* This,
        struct __x_ABI_CWindows_CFoundation_CTimeSpan position);

        END_INTERFACE
    } __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceStartingRequestVtbl;

    interface __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceStartingRequest
    {
        CONST_VTBL struct __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceStartingRequestVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceStartingRequest;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceStartingRequest_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceStartingRequestDeferral_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceStartingRequestDeferral_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceStartingRequestDeferralVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceStartingRequestDeferral* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceStartingRequestDeferral* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceStartingRequestDeferral* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceStartingRequestDeferral* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceStartingRequestDeferral* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceStartingRequestDeferral* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* Complete)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceStartingRequestDeferral* This);

        END_INTERFACE
    } __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceStartingRequestDeferralVtbl;

    interface __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceStartingRequestDeferral
    {
        CONST_VTBL struct __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceStartingRequestDeferralVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceStartingRequestDeferral;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceStartingRequestDeferral_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSwitchStreamsRequest_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSwitchStreamsRequest_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSwitchStreamsRequestVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSwitchStreamsRequest* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSwitchStreamsRequest* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSwitchStreamsRequest* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSwitchStreamsRequest* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSwitchStreamsRequest* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSwitchStreamsRequest* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_OldStreamDescriptor)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSwitchStreamsRequest* This,
        __x_ABI_CWindows_CMedia_CCore_CIMediaStreamDescriptor** value);
    HRESULT (STDMETHODCALLTYPE* get_NewStreamDescriptor)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSwitchStreamsRequest* This,
        __x_ABI_CWindows_CMedia_CCore_CIMediaStreamDescriptor** value);
    HRESULT (STDMETHODCALLTYPE* GetDeferral)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSwitchStreamsRequest* This,
        __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSwitchStreamsRequestDeferral** deferral);

        END_INTERFACE
    } __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSwitchStreamsRequestVtbl;

    interface __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSwitchStreamsRequest
    {
        CONST_VTBL struct __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSwitchStreamsRequestVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSwitchStreamsRequest;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSwitchStreamsRequest_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSwitchStreamsRequestDeferral_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSwitchStreamsRequestDeferral_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSwitchStreamsRequestDeferralVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSwitchStreamsRequestDeferral* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSwitchStreamsRequestDeferral* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSwitchStreamsRequestDeferral* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSwitchStreamsRequestDeferral* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSwitchStreamsRequestDeferral* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSwitchStreamsRequestDeferral* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* Complete)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSwitchStreamsRequestDeferral* This);

        END_INTERFACE
    } __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSwitchStreamsRequestDeferralVtbl;

    interface __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSwitchStreamsRequestDeferral
    {
        CONST_VTBL struct __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSwitchStreamsRequestDeferralVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSwitchStreamsRequestDeferral;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSwitchStreamsRequestDeferral_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSwitchStreamsRequestedEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSwitchStreamsRequestedEventArgs_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSwitchStreamsRequestedEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSwitchStreamsRequestedEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSwitchStreamsRequestedEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSwitchStreamsRequestedEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSwitchStreamsRequestedEventArgs* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSwitchStreamsRequestedEventArgs* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSwitchStreamsRequestedEventArgs* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Request)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSwitchStreamsRequestedEventArgs* This,
        __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSwitchStreamsRequest** value);

        END_INTERFACE
    } __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSwitchStreamsRequestedEventArgsVtbl;

    interface __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSwitchStreamsRequestedEventArgs
    {
        CONST_VTBL struct __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSwitchStreamsRequestedEventArgsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSwitchStreamsRequestedEventArgs;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSwitchStreamsRequestedEventArgs_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CMedia_CCore_CIMediaTrack_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CMedia_CCore_CIMediaTrack_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CMedia_CCore_CIMediaTrackVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CCore_CIMediaTrack* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CCore_CIMediaTrack* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CCore_CIMediaTrack* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CCore_CIMediaTrack* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CCore_CIMediaTrack* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CCore_CIMediaTrack* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Id)(__x_ABI_CWindows_CMedia_CCore_CIMediaTrack* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_Language)(__x_ABI_CWindows_CMedia_CCore_CIMediaTrack* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_TrackKind)(__x_ABI_CWindows_CMedia_CCore_CIMediaTrack* This,
        enum __x_ABI_CWindows_CMedia_CCore_CMediaTrackKind* value);
    HRESULT (STDMETHODCALLTYPE* put_Label)(__x_ABI_CWindows_CMedia_CCore_CIMediaTrack* This,
        HSTRING value);
    HRESULT (STDMETHODCALLTYPE* get_Label)(__x_ABI_CWindows_CMedia_CCore_CIMediaTrack* This,
        HSTRING* value);

        END_INTERFACE
    } __x_ABI_CWindows_CMedia_CCore_CIMediaTrackVtbl;

    interface __x_ABI_CWindows_CMedia_CCore_CIMediaTrack
    {
        CONST_VTBL struct __x_ABI_CWindows_CMedia_CCore_CIMediaTrackVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CIMediaTrack;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CIMediaTrack_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CMedia_CCore_CIMseSourceBuffer_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CMedia_CCore_CIMseSourceBuffer_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CMedia_CCore_CIMseSourceBufferVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CCore_CIMseSourceBuffer* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CCore_CIMseSourceBuffer* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CCore_CIMseSourceBuffer* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CCore_CIMseSourceBuffer* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CCore_CIMseSourceBuffer* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CCore_CIMseSourceBuffer* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* add_UpdateStarting)(__x_ABI_CWindows_CMedia_CCore_CIMseSourceBuffer* This,
        __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CMseSourceBuffer_IInspectable* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_UpdateStarting)(__x_ABI_CWindows_CMedia_CCore_CIMseSourceBuffer* This,
        EventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* add_Updated)(__x_ABI_CWindows_CMedia_CCore_CIMseSourceBuffer* This,
        __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CMseSourceBuffer_IInspectable* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_Updated)(__x_ABI_CWindows_CMedia_CCore_CIMseSourceBuffer* This,
        EventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* add_UpdateEnded)(__x_ABI_CWindows_CMedia_CCore_CIMseSourceBuffer* This,
        __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CMseSourceBuffer_IInspectable* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_UpdateEnded)(__x_ABI_CWindows_CMedia_CCore_CIMseSourceBuffer* This,
        EventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* add_ErrorOccurred)(__x_ABI_CWindows_CMedia_CCore_CIMseSourceBuffer* This,
        __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CMseSourceBuffer_IInspectable* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_ErrorOccurred)(__x_ABI_CWindows_CMedia_CCore_CIMseSourceBuffer* This,
        EventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* add_Aborted)(__x_ABI_CWindows_CMedia_CCore_CIMseSourceBuffer* This,
        __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CMseSourceBuffer_IInspectable* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_Aborted)(__x_ABI_CWindows_CMedia_CCore_CIMseSourceBuffer* This,
        EventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* get_Mode)(__x_ABI_CWindows_CMedia_CCore_CIMseSourceBuffer* This,
        enum __x_ABI_CWindows_CMedia_CCore_CMseAppendMode* value);
    HRESULT (STDMETHODCALLTYPE* put_Mode)(__x_ABI_CWindows_CMedia_CCore_CIMseSourceBuffer* This,
        enum __x_ABI_CWindows_CMedia_CCore_CMseAppendMode value);
    HRESULT (STDMETHODCALLTYPE* get_IsUpdating)(__x_ABI_CWindows_CMedia_CCore_CIMseSourceBuffer* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* get_Buffered)(__x_ABI_CWindows_CMedia_CCore_CIMseSourceBuffer* This,
        __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CCore__CMseTimeRange** value);
    HRESULT (STDMETHODCALLTYPE* get_TimestampOffset)(__x_ABI_CWindows_CMedia_CCore_CIMseSourceBuffer* This,
        struct __x_ABI_CWindows_CFoundation_CTimeSpan* value);
    HRESULT (STDMETHODCALLTYPE* put_TimestampOffset)(__x_ABI_CWindows_CMedia_CCore_CIMseSourceBuffer* This,
        struct __x_ABI_CWindows_CFoundation_CTimeSpan value);
    HRESULT (STDMETHODCALLTYPE* get_AppendWindowStart)(__x_ABI_CWindows_CMedia_CCore_CIMseSourceBuffer* This,
        struct __x_ABI_CWindows_CFoundation_CTimeSpan* value);
    HRESULT (STDMETHODCALLTYPE* put_AppendWindowStart)(__x_ABI_CWindows_CMedia_CCore_CIMseSourceBuffer* This,
        struct __x_ABI_CWindows_CFoundation_CTimeSpan value);
    HRESULT (STDMETHODCALLTYPE* get_AppendWindowEnd)(__x_ABI_CWindows_CMedia_CCore_CIMseSourceBuffer* This,
        __x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CTimeSpan** value);
    HRESULT (STDMETHODCALLTYPE* put_AppendWindowEnd)(__x_ABI_CWindows_CMedia_CCore_CIMseSourceBuffer* This,
        __x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CTimeSpan* value);
    HRESULT (STDMETHODCALLTYPE* AppendBuffer)(__x_ABI_CWindows_CMedia_CCore_CIMseSourceBuffer* This,
        __x_ABI_CWindows_CStorage_CStreams_CIBuffer* buffer);
    HRESULT (STDMETHODCALLTYPE* AppendStream)(__x_ABI_CWindows_CMedia_CCore_CIMseSourceBuffer* This,
        __x_ABI_CWindows_CStorage_CStreams_CIInputStream* stream);
    HRESULT (STDMETHODCALLTYPE* AppendStreamMaxSize)(__x_ABI_CWindows_CMedia_CCore_CIMseSourceBuffer* This,
        __x_ABI_CWindows_CStorage_CStreams_CIInputStream* stream,
        UINT64 maxSize);
    HRESULT (STDMETHODCALLTYPE* Abort)(__x_ABI_CWindows_CMedia_CCore_CIMseSourceBuffer* This);
    HRESULT (STDMETHODCALLTYPE* Remove)(__x_ABI_CWindows_CMedia_CCore_CIMseSourceBuffer* This,
        struct __x_ABI_CWindows_CFoundation_CTimeSpan start,
        __x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CTimeSpan* end);

        END_INTERFACE
    } __x_ABI_CWindows_CMedia_CCore_CIMseSourceBufferVtbl;

    interface __x_ABI_CWindows_CMedia_CCore_CIMseSourceBuffer
    {
        CONST_VTBL struct __x_ABI_CWindows_CMedia_CCore_CIMseSourceBufferVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CIMseSourceBuffer;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CIMseSourceBuffer_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CMedia_CCore_CIMseSourceBufferList_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CMedia_CCore_CIMseSourceBufferList_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CMedia_CCore_CIMseSourceBufferListVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CCore_CIMseSourceBufferList* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CCore_CIMseSourceBufferList* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CCore_CIMseSourceBufferList* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CCore_CIMseSourceBufferList* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CCore_CIMseSourceBufferList* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CCore_CIMseSourceBufferList* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* add_SourceBufferAdded)(__x_ABI_CWindows_CMedia_CCore_CIMseSourceBufferList* This,
        __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CMseSourceBufferList_IInspectable* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_SourceBufferAdded)(__x_ABI_CWindows_CMedia_CCore_CIMseSourceBufferList* This,
        EventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* add_SourceBufferRemoved)(__x_ABI_CWindows_CMedia_CCore_CIMseSourceBufferList* This,
        __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CMseSourceBufferList_IInspectable* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_SourceBufferRemoved)(__x_ABI_CWindows_CMedia_CCore_CIMseSourceBufferList* This,
        EventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* get_Buffers)(__x_ABI_CWindows_CMedia_CCore_CIMseSourceBufferList* This,
        __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CCore__CMseSourceBuffer** value);

        END_INTERFACE
    } __x_ABI_CWindows_CMedia_CCore_CIMseSourceBufferListVtbl;

    interface __x_ABI_CWindows_CMedia_CCore_CIMseSourceBufferList
    {
        CONST_VTBL struct __x_ABI_CWindows_CMedia_CCore_CIMseSourceBufferListVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CIMseSourceBufferList;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CIMseSourceBufferList_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CMedia_CCore_CIMseStreamSource_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CMedia_CCore_CIMseStreamSource_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CMedia_CCore_CIMseStreamSourceVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CCore_CIMseStreamSource* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CCore_CIMseStreamSource* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CCore_CIMseStreamSource* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CCore_CIMseStreamSource* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CCore_CIMseStreamSource* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CCore_CIMseStreamSource* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* add_Opened)(__x_ABI_CWindows_CMedia_CCore_CIMseStreamSource* This,
        __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CMseStreamSource_IInspectable* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_Opened)(__x_ABI_CWindows_CMedia_CCore_CIMseStreamSource* This,
        EventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* add_Ended)(__x_ABI_CWindows_CMedia_CCore_CIMseStreamSource* This,
        __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CMseStreamSource_IInspectable* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_Ended)(__x_ABI_CWindows_CMedia_CCore_CIMseStreamSource* This,
        EventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* add_Closed)(__x_ABI_CWindows_CMedia_CCore_CIMseStreamSource* This,
        __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CMseStreamSource_IInspectable* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_Closed)(__x_ABI_CWindows_CMedia_CCore_CIMseStreamSource* This,
        EventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* get_SourceBuffers)(__x_ABI_CWindows_CMedia_CCore_CIMseStreamSource* This,
        __x_ABI_CWindows_CMedia_CCore_CIMseSourceBufferList** value);
    HRESULT (STDMETHODCALLTYPE* get_ActiveSourceBuffers)(__x_ABI_CWindows_CMedia_CCore_CIMseStreamSource* This,
        __x_ABI_CWindows_CMedia_CCore_CIMseSourceBufferList** value);
    HRESULT (STDMETHODCALLTYPE* get_ReadyState)(__x_ABI_CWindows_CMedia_CCore_CIMseStreamSource* This,
        enum __x_ABI_CWindows_CMedia_CCore_CMseReadyState* value);
    HRESULT (STDMETHODCALLTYPE* get_Duration)(__x_ABI_CWindows_CMedia_CCore_CIMseStreamSource* This,
        __x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CTimeSpan** value);
    HRESULT (STDMETHODCALLTYPE* put_Duration)(__x_ABI_CWindows_CMedia_CCore_CIMseStreamSource* This,
        __x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CTimeSpan* value);
    HRESULT (STDMETHODCALLTYPE* AddSourceBuffer)(__x_ABI_CWindows_CMedia_CCore_CIMseStreamSource* This,
        HSTRING mimeType,
        __x_ABI_CWindows_CMedia_CCore_CIMseSourceBuffer** buffer);
    HRESULT (STDMETHODCALLTYPE* RemoveSourceBuffer)(__x_ABI_CWindows_CMedia_CCore_CIMseStreamSource* This,
        __x_ABI_CWindows_CMedia_CCore_CIMseSourceBuffer* buffer);
    HRESULT (STDMETHODCALLTYPE* EndOfStream)(__x_ABI_CWindows_CMedia_CCore_CIMseStreamSource* This,
        enum __x_ABI_CWindows_CMedia_CCore_CMseEndOfStreamStatus status);

        END_INTERFACE
    } __x_ABI_CWindows_CMedia_CCore_CIMseStreamSourceVtbl;

    interface __x_ABI_CWindows_CMedia_CCore_CIMseStreamSource
    {
        CONST_VTBL struct __x_ABI_CWindows_CMedia_CCore_CIMseStreamSourceVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CIMseStreamSource;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CIMseStreamSource_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CMedia_CCore_CIMseStreamSource2_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CMedia_CCore_CIMseStreamSource2_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CMedia_CCore_CIMseStreamSource2Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CCore_CIMseStreamSource2* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CCore_CIMseStreamSource2* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CCore_CIMseStreamSource2* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CCore_CIMseStreamSource2* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CCore_CIMseStreamSource2* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CCore_CIMseStreamSource2* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_LiveSeekableRange)(__x_ABI_CWindows_CMedia_CCore_CIMseStreamSource2* This,
        __x_ABI_C__FIReference_1___x_ABI_CWindows__CMedia__CCore__CMseTimeRange** value);
    HRESULT (STDMETHODCALLTYPE* put_LiveSeekableRange)(__x_ABI_CWindows_CMedia_CCore_CIMseStreamSource2* This,
        __x_ABI_C__FIReference_1___x_ABI_CWindows__CMedia__CCore__CMseTimeRange* value);

        END_INTERFACE
    } __x_ABI_CWindows_CMedia_CCore_CIMseStreamSource2Vtbl;

    interface __x_ABI_CWindows_CMedia_CCore_CIMseStreamSource2
    {
        CONST_VTBL struct __x_ABI_CWindows_CMedia_CCore_CIMseStreamSource2Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CIMseStreamSource2;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CIMseStreamSource2_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CMedia_CCore_CIMseStreamSourceStatics_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CMedia_CCore_CIMseStreamSourceStatics_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CMedia_CCore_CIMseStreamSourceStaticsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CCore_CIMseStreamSourceStatics* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CCore_CIMseStreamSourceStatics* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CCore_CIMseStreamSourceStatics* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CCore_CIMseStreamSourceStatics* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CCore_CIMseStreamSourceStatics* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CCore_CIMseStreamSourceStatics* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* IsContentTypeSupported)(__x_ABI_CWindows_CMedia_CCore_CIMseStreamSourceStatics* This,
        HSTRING contentType,
        boolean* value);

        END_INTERFACE
    } __x_ABI_CWindows_CMedia_CCore_CIMseStreamSourceStaticsVtbl;

    interface __x_ABI_CWindows_CMedia_CCore_CIMseStreamSourceStatics
    {
        CONST_VTBL struct __x_ABI_CWindows_CMedia_CCore_CIMseStreamSourceStaticsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CIMseStreamSourceStatics;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CIMseStreamSourceStatics_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CMedia_CCore_CISceneAnalysisEffect_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CMedia_CCore_CISceneAnalysisEffect_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CMedia_CCore_CISceneAnalysisEffectVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CCore_CISceneAnalysisEffect* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CCore_CISceneAnalysisEffect* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CCore_CISceneAnalysisEffect* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CCore_CISceneAnalysisEffect* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CCore_CISceneAnalysisEffect* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CCore_CISceneAnalysisEffect* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_HighDynamicRangeAnalyzer)(__x_ABI_CWindows_CMedia_CCore_CISceneAnalysisEffect* This,
        __x_ABI_CWindows_CMedia_CCore_CIHighDynamicRangeControl** value);
    HRESULT (STDMETHODCALLTYPE* put_DesiredAnalysisInterval)(__x_ABI_CWindows_CMedia_CCore_CISceneAnalysisEffect* This,
        struct __x_ABI_CWindows_CFoundation_CTimeSpan value);
    HRESULT (STDMETHODCALLTYPE* get_DesiredAnalysisInterval)(__x_ABI_CWindows_CMedia_CCore_CISceneAnalysisEffect* This,
        struct __x_ABI_CWindows_CFoundation_CTimeSpan* value);
    HRESULT (STDMETHODCALLTYPE* add_SceneAnalyzed)(__x_ABI_CWindows_CMedia_CCore_CISceneAnalysisEffect* This,
        __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CSceneAnalysisEffect___x_ABI_CWindows__CMedia__CCore__CSceneAnalyzedEventArgs* handler,
        EventRegistrationToken* cookie);
    HRESULT (STDMETHODCALLTYPE* remove_SceneAnalyzed)(__x_ABI_CWindows_CMedia_CCore_CISceneAnalysisEffect* This,
        EventRegistrationToken cookie);

        END_INTERFACE
    } __x_ABI_CWindows_CMedia_CCore_CISceneAnalysisEffectVtbl;

    interface __x_ABI_CWindows_CMedia_CCore_CISceneAnalysisEffect
    {
        CONST_VTBL struct __x_ABI_CWindows_CMedia_CCore_CISceneAnalysisEffectVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CISceneAnalysisEffect;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CISceneAnalysisEffect_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CMedia_CCore_CISceneAnalysisEffectFrame_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CMedia_CCore_CISceneAnalysisEffectFrame_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CMedia_CCore_CISceneAnalysisEffectFrameVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CCore_CISceneAnalysisEffectFrame* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CCore_CISceneAnalysisEffectFrame* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CCore_CISceneAnalysisEffectFrame* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CCore_CISceneAnalysisEffectFrame* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CCore_CISceneAnalysisEffectFrame* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CCore_CISceneAnalysisEffectFrame* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_FrameControlValues)(__x_ABI_CWindows_CMedia_CCore_CISceneAnalysisEffectFrame* This,
        __x_ABI_CWindows_CMedia_CCapture_CICapturedFrameControlValues** value);
    HRESULT (STDMETHODCALLTYPE* get_HighDynamicRange)(__x_ABI_CWindows_CMedia_CCore_CISceneAnalysisEffectFrame* This,
        __x_ABI_CWindows_CMedia_CCore_CIHighDynamicRangeOutput** value);

        END_INTERFACE
    } __x_ABI_CWindows_CMedia_CCore_CISceneAnalysisEffectFrameVtbl;

    interface __x_ABI_CWindows_CMedia_CCore_CISceneAnalysisEffectFrame
    {
        CONST_VTBL struct __x_ABI_CWindows_CMedia_CCore_CISceneAnalysisEffectFrameVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CISceneAnalysisEffectFrame;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CISceneAnalysisEffectFrame_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CMedia_CCore_CISceneAnalysisEffectFrame2_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CMedia_CCore_CISceneAnalysisEffectFrame2_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CMedia_CCore_CISceneAnalysisEffectFrame2Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CCore_CISceneAnalysisEffectFrame2* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CCore_CISceneAnalysisEffectFrame2* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CCore_CISceneAnalysisEffectFrame2* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CCore_CISceneAnalysisEffectFrame2* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CCore_CISceneAnalysisEffectFrame2* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CCore_CISceneAnalysisEffectFrame2* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_AnalysisRecommendation)(__x_ABI_CWindows_CMedia_CCore_CISceneAnalysisEffectFrame2* This,
        enum __x_ABI_CWindows_CMedia_CCore_CSceneAnalysisRecommendation* value);

        END_INTERFACE
    } __x_ABI_CWindows_CMedia_CCore_CISceneAnalysisEffectFrame2Vtbl;

    interface __x_ABI_CWindows_CMedia_CCore_CISceneAnalysisEffectFrame2
    {
        CONST_VTBL struct __x_ABI_CWindows_CMedia_CCore_CISceneAnalysisEffectFrame2Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CISceneAnalysisEffectFrame2;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CISceneAnalysisEffectFrame2_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CMedia_CCore_CISceneAnalyzedEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CMedia_CCore_CISceneAnalyzedEventArgs_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CMedia_CCore_CISceneAnalyzedEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CCore_CISceneAnalyzedEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CCore_CISceneAnalyzedEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CCore_CISceneAnalyzedEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CCore_CISceneAnalyzedEventArgs* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CCore_CISceneAnalyzedEventArgs* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CCore_CISceneAnalyzedEventArgs* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_ResultFrame)(__x_ABI_CWindows_CMedia_CCore_CISceneAnalyzedEventArgs* This,
        __x_ABI_CWindows_CMedia_CCore_CISceneAnalysisEffectFrame** value);

        END_INTERFACE
    } __x_ABI_CWindows_CMedia_CCore_CISceneAnalyzedEventArgsVtbl;

    interface __x_ABI_CWindows_CMedia_CCore_CISceneAnalyzedEventArgs
    {
        CONST_VTBL struct __x_ABI_CWindows_CMedia_CCore_CISceneAnalyzedEventArgsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CISceneAnalyzedEventArgs;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CISceneAnalyzedEventArgs_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CMedia_CCore_CISingleSelectMediaTrackList_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CMedia_CCore_CISingleSelectMediaTrackList_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CMedia_CCore_CISingleSelectMediaTrackListVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CCore_CISingleSelectMediaTrackList* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CCore_CISingleSelectMediaTrackList* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CCore_CISingleSelectMediaTrackList* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CCore_CISingleSelectMediaTrackList* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CCore_CISingleSelectMediaTrackList* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CCore_CISingleSelectMediaTrackList* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* add_SelectedIndexChanged)(__x_ABI_CWindows_CMedia_CCore_CISingleSelectMediaTrackList* This,
        __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CISingleSelectMediaTrackList_IInspectable* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_SelectedIndexChanged)(__x_ABI_CWindows_CMedia_CCore_CISingleSelectMediaTrackList* This,
        EventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* put_SelectedIndex)(__x_ABI_CWindows_CMedia_CCore_CISingleSelectMediaTrackList* This,
        INT32 value);
    HRESULT (STDMETHODCALLTYPE* get_SelectedIndex)(__x_ABI_CWindows_CMedia_CCore_CISingleSelectMediaTrackList* This,
        INT32* value);

        END_INTERFACE
    } __x_ABI_CWindows_CMedia_CCore_CISingleSelectMediaTrackListVtbl;

    interface __x_ABI_CWindows_CMedia_CCore_CISingleSelectMediaTrackList
    {
        CONST_VTBL struct __x_ABI_CWindows_CMedia_CCore_CISingleSelectMediaTrackListVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CISingleSelectMediaTrackList;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CISingleSelectMediaTrackList_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CMedia_CCore_CISpeechCue_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CMedia_CCore_CISpeechCue_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CMedia_CCore_CISpeechCueVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CCore_CISpeechCue* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CCore_CISpeechCue* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CCore_CISpeechCue* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CCore_CISpeechCue* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CCore_CISpeechCue* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CCore_CISpeechCue* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Text)(__x_ABI_CWindows_CMedia_CCore_CISpeechCue* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* put_Text)(__x_ABI_CWindows_CMedia_CCore_CISpeechCue* This,
        HSTRING value);
    HRESULT (STDMETHODCALLTYPE* get_StartPositionInInput)(__x_ABI_CWindows_CMedia_CCore_CISpeechCue* This,
        __x_ABI_C__FIReference_1_int** value);
    HRESULT (STDMETHODCALLTYPE* put_StartPositionInInput)(__x_ABI_CWindows_CMedia_CCore_CISpeechCue* This,
        __x_ABI_C__FIReference_1_int* value);
    HRESULT (STDMETHODCALLTYPE* get_EndPositionInInput)(__x_ABI_CWindows_CMedia_CCore_CISpeechCue* This,
        __x_ABI_C__FIReference_1_int** value);
    HRESULT (STDMETHODCALLTYPE* put_EndPositionInInput)(__x_ABI_CWindows_CMedia_CCore_CISpeechCue* This,
        __x_ABI_C__FIReference_1_int* value);

        END_INTERFACE
    } __x_ABI_CWindows_CMedia_CCore_CISpeechCueVtbl;

    interface __x_ABI_CWindows_CMedia_CCore_CISpeechCue
    {
        CONST_VTBL struct __x_ABI_CWindows_CMedia_CCore_CISpeechCueVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CISpeechCue;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CISpeechCue_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CMedia_CCore_CITimedMetadataStreamDescriptor_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CMedia_CCore_CITimedMetadataStreamDescriptor_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CMedia_CCore_CITimedMetadataStreamDescriptorVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CCore_CITimedMetadataStreamDescriptor* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CCore_CITimedMetadataStreamDescriptor* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CCore_CITimedMetadataStreamDescriptor* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CCore_CITimedMetadataStreamDescriptor* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CCore_CITimedMetadataStreamDescriptor* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CCore_CITimedMetadataStreamDescriptor* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_EncodingProperties)(__x_ABI_CWindows_CMedia_CCore_CITimedMetadataStreamDescriptor* This,
        __x_ABI_CWindows_CMedia_CMediaProperties_CIMediaEncodingProperties** value);
    HRESULT (STDMETHODCALLTYPE* Copy)(__x_ABI_CWindows_CMedia_CCore_CITimedMetadataStreamDescriptor* This,
        __x_ABI_CWindows_CMedia_CCore_CIMediaStreamDescriptor** result);

        END_INTERFACE
    } __x_ABI_CWindows_CMedia_CCore_CITimedMetadataStreamDescriptorVtbl;

    interface __x_ABI_CWindows_CMedia_CCore_CITimedMetadataStreamDescriptor
    {
        CONST_VTBL struct __x_ABI_CWindows_CMedia_CCore_CITimedMetadataStreamDescriptorVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CITimedMetadataStreamDescriptor;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CITimedMetadataStreamDescriptor_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CMedia_CCore_CITimedMetadataStreamDescriptorFactory_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CMedia_CCore_CITimedMetadataStreamDescriptorFactory_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CMedia_CCore_CITimedMetadataStreamDescriptorFactoryVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CCore_CITimedMetadataStreamDescriptorFactory* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CCore_CITimedMetadataStreamDescriptorFactory* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CCore_CITimedMetadataStreamDescriptorFactory* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CCore_CITimedMetadataStreamDescriptorFactory* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CCore_CITimedMetadataStreamDescriptorFactory* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CCore_CITimedMetadataStreamDescriptorFactory* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* Create)(__x_ABI_CWindows_CMedia_CCore_CITimedMetadataStreamDescriptorFactory* This,
        __x_ABI_CWindows_CMedia_CMediaProperties_CIMediaEncodingProperties* encodingProperties,
        __x_ABI_CWindows_CMedia_CCore_CIMediaStreamDescriptor** result);

        END_INTERFACE
    } __x_ABI_CWindows_CMedia_CCore_CITimedMetadataStreamDescriptorFactoryVtbl;

    interface __x_ABI_CWindows_CMedia_CCore_CITimedMetadataStreamDescriptorFactory
    {
        CONST_VTBL struct __x_ABI_CWindows_CMedia_CCore_CITimedMetadataStreamDescriptorFactoryVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CITimedMetadataStreamDescriptorFactory;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CITimedMetadataStreamDescriptorFactory_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrack_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrack_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrackVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrack* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrack* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrack* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrack* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrack* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrack* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* add_CueEntered)(__x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrack* This,
        __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CTimedMetadataTrack___x_ABI_CWindows__CMedia__CCore__CMediaCueEventArgs* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_CueEntered)(__x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrack* This,
        EventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* add_CueExited)(__x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrack* This,
        __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CTimedMetadataTrack___x_ABI_CWindows__CMedia__CCore__CMediaCueEventArgs* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_CueExited)(__x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrack* This,
        EventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* add_TrackFailed)(__x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrack* This,
        __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CTimedMetadataTrack___x_ABI_CWindows__CMedia__CCore__CTimedMetadataTrackFailedEventArgs* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_TrackFailed)(__x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrack* This,
        EventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* get_Cues)(__x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrack* This,
        __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CCore__CIMediaCue** value);
    HRESULT (STDMETHODCALLTYPE* get_ActiveCues)(__x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrack* This,
        __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CCore__CIMediaCue** value);
    HRESULT (STDMETHODCALLTYPE* get_TimedMetadataKind)(__x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrack* This,
        enum __x_ABI_CWindows_CMedia_CCore_CTimedMetadataKind* value);
    HRESULT (STDMETHODCALLTYPE* get_DispatchType)(__x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrack* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* AddCue)(__x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrack* This,
        __x_ABI_CWindows_CMedia_CCore_CIMediaCue* cue);
    HRESULT (STDMETHODCALLTYPE* RemoveCue)(__x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrack* This,
        __x_ABI_CWindows_CMedia_CCore_CIMediaCue* cue);

        END_INTERFACE
    } __x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrackVtbl;

    interface __x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrack
    {
        CONST_VTBL struct __x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrackVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrack;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrack_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrack2_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrack2_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrack2Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrack2* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrack2* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrack2* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrack2* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrack2* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrack2* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_PlaybackItem)(__x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrack2* This,
        __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackItem** value);
    HRESULT (STDMETHODCALLTYPE* get_Name)(__x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrack2* This,
        HSTRING* value);

        END_INTERFACE
    } __x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrack2Vtbl;

    interface __x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrack2
    {
        CONST_VTBL struct __x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrack2Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrack2;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrack2_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrackError_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrackError_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrackErrorVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrackError* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrackError* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrackError* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrackError* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrackError* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrackError* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_ErrorCode)(__x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrackError* This,
        enum __x_ABI_CWindows_CMedia_CCore_CTimedMetadataTrackErrorCode* value);
    HRESULT (STDMETHODCALLTYPE* get_ExtendedError)(__x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrackError* This,
        HRESULT* value);

        END_INTERFACE
    } __x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrackErrorVtbl;

    interface __x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrackError
    {
        CONST_VTBL struct __x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrackErrorVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrackError;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrackError_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrackFactory_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrackFactory_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrackFactoryVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrackFactory* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrackFactory* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrackFactory* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrackFactory* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrackFactory* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrackFactory* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* Create)(__x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrackFactory* This,
        HSTRING id,
        HSTRING language,
        enum __x_ABI_CWindows_CMedia_CCore_CTimedMetadataKind kind,
        __x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrack** value);

        END_INTERFACE
    } __x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrackFactoryVtbl;

    interface __x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrackFactory
    {
        CONST_VTBL struct __x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrackFactoryVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrackFactory;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrackFactory_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrackFailedEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrackFailedEventArgs_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrackFailedEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrackFailedEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrackFailedEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrackFailedEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrackFailedEventArgs* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrackFailedEventArgs* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrackFailedEventArgs* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Error)(__x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrackFailedEventArgs* This,
        __x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrackError** value);

        END_INTERFACE
    } __x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrackFailedEventArgsVtbl;

    interface __x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrackFailedEventArgs
    {
        CONST_VTBL struct __x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrackFailedEventArgsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrackFailedEventArgs;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrackFailedEventArgs_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrackProvider_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrackProvider_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrackProviderVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrackProvider* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrackProvider* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrackProvider* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrackProvider* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrackProvider* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrackProvider* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_TimedMetadataTracks)(__x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrackProvider* This,
        __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CCore__CTimedMetadataTrack** value);

        END_INTERFACE
    } __x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrackProviderVtbl;

    interface __x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrackProvider
    {
        CONST_VTBL struct __x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrackProviderVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrackProvider;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrackProvider_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CMedia_CCore_CITimedTextCue_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CMedia_CCore_CITimedTextCue_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CMedia_CCore_CITimedTextCueVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CCore_CITimedTextCue* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CCore_CITimedTextCue* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CCore_CITimedTextCue* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CCore_CITimedTextCue* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CCore_CITimedTextCue* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CCore_CITimedTextCue* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_CueRegion)(__x_ABI_CWindows_CMedia_CCore_CITimedTextCue* This,
        __x_ABI_CWindows_CMedia_CCore_CITimedTextRegion** value);
    HRESULT (STDMETHODCALLTYPE* put_CueRegion)(__x_ABI_CWindows_CMedia_CCore_CITimedTextCue* This,
        __x_ABI_CWindows_CMedia_CCore_CITimedTextRegion* value);
    HRESULT (STDMETHODCALLTYPE* get_CueStyle)(__x_ABI_CWindows_CMedia_CCore_CITimedTextCue* This,
        __x_ABI_CWindows_CMedia_CCore_CITimedTextStyle** value);
    HRESULT (STDMETHODCALLTYPE* put_CueStyle)(__x_ABI_CWindows_CMedia_CCore_CITimedTextCue* This,
        __x_ABI_CWindows_CMedia_CCore_CITimedTextStyle* value);
    HRESULT (STDMETHODCALLTYPE* get_Lines)(__x_ABI_CWindows_CMedia_CCore_CITimedTextCue* This,
        __x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CCore__CTimedTextLine** value);

        END_INTERFACE
    } __x_ABI_CWindows_CMedia_CCore_CITimedTextCueVtbl;

    interface __x_ABI_CWindows_CMedia_CCore_CITimedTextCue
    {
        CONST_VTBL struct __x_ABI_CWindows_CMedia_CCore_CITimedTextCueVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CITimedTextCue;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CITimedTextCue_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CMedia_CCore_CITimedTextLine_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CMedia_CCore_CITimedTextLine_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CMedia_CCore_CITimedTextLineVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CCore_CITimedTextLine* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CCore_CITimedTextLine* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CCore_CITimedTextLine* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CCore_CITimedTextLine* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CCore_CITimedTextLine* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CCore_CITimedTextLine* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Text)(__x_ABI_CWindows_CMedia_CCore_CITimedTextLine* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* put_Text)(__x_ABI_CWindows_CMedia_CCore_CITimedTextLine* This,
        HSTRING value);
    HRESULT (STDMETHODCALLTYPE* get_Subformats)(__x_ABI_CWindows_CMedia_CCore_CITimedTextLine* This,
        __x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CCore__CTimedTextSubformat** value);

        END_INTERFACE
    } __x_ABI_CWindows_CMedia_CCore_CITimedTextLineVtbl;

    interface __x_ABI_CWindows_CMedia_CCore_CITimedTextLine
    {
        CONST_VTBL struct __x_ABI_CWindows_CMedia_CCore_CITimedTextLineVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CITimedTextLine;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CITimedTextLine_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CMedia_CCore_CITimedTextRegion_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CMedia_CCore_CITimedTextRegion_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CMedia_CCore_CITimedTextRegionVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CCore_CITimedTextRegion* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CCore_CITimedTextRegion* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CCore_CITimedTextRegion* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CCore_CITimedTextRegion* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CCore_CITimedTextRegion* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CCore_CITimedTextRegion* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Name)(__x_ABI_CWindows_CMedia_CCore_CITimedTextRegion* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* put_Name)(__x_ABI_CWindows_CMedia_CCore_CITimedTextRegion* This,
        HSTRING value);
    HRESULT (STDMETHODCALLTYPE* get_Position)(__x_ABI_CWindows_CMedia_CCore_CITimedTextRegion* This,
        struct __x_ABI_CWindows_CMedia_CCore_CTimedTextPoint* value);
    HRESULT (STDMETHODCALLTYPE* put_Position)(__x_ABI_CWindows_CMedia_CCore_CITimedTextRegion* This,
        struct __x_ABI_CWindows_CMedia_CCore_CTimedTextPoint value);
    HRESULT (STDMETHODCALLTYPE* get_Extent)(__x_ABI_CWindows_CMedia_CCore_CITimedTextRegion* This,
        struct __x_ABI_CWindows_CMedia_CCore_CTimedTextSize* value);
    HRESULT (STDMETHODCALLTYPE* put_Extent)(__x_ABI_CWindows_CMedia_CCore_CITimedTextRegion* This,
        struct __x_ABI_CWindows_CMedia_CCore_CTimedTextSize value);
    HRESULT (STDMETHODCALLTYPE* get_Background)(__x_ABI_CWindows_CMedia_CCore_CITimedTextRegion* This,
        struct __x_ABI_CWindows_CUI_CColor* value);
    HRESULT (STDMETHODCALLTYPE* put_Background)(__x_ABI_CWindows_CMedia_CCore_CITimedTextRegion* This,
        struct __x_ABI_CWindows_CUI_CColor value);
    HRESULT (STDMETHODCALLTYPE* get_WritingMode)(__x_ABI_CWindows_CMedia_CCore_CITimedTextRegion* This,
        enum __x_ABI_CWindows_CMedia_CCore_CTimedTextWritingMode* value);
    HRESULT (STDMETHODCALLTYPE* put_WritingMode)(__x_ABI_CWindows_CMedia_CCore_CITimedTextRegion* This,
        enum __x_ABI_CWindows_CMedia_CCore_CTimedTextWritingMode value);
    HRESULT (STDMETHODCALLTYPE* get_DisplayAlignment)(__x_ABI_CWindows_CMedia_CCore_CITimedTextRegion* This,
        enum __x_ABI_CWindows_CMedia_CCore_CTimedTextDisplayAlignment* value);
    HRESULT (STDMETHODCALLTYPE* put_DisplayAlignment)(__x_ABI_CWindows_CMedia_CCore_CITimedTextRegion* This,
        enum __x_ABI_CWindows_CMedia_CCore_CTimedTextDisplayAlignment value);
    HRESULT (STDMETHODCALLTYPE* get_LineHeight)(__x_ABI_CWindows_CMedia_CCore_CITimedTextRegion* This,
        struct __x_ABI_CWindows_CMedia_CCore_CTimedTextDouble* value);
    HRESULT (STDMETHODCALLTYPE* put_LineHeight)(__x_ABI_CWindows_CMedia_CCore_CITimedTextRegion* This,
        struct __x_ABI_CWindows_CMedia_CCore_CTimedTextDouble value);
    HRESULT (STDMETHODCALLTYPE* get_IsOverflowClipped)(__x_ABI_CWindows_CMedia_CCore_CITimedTextRegion* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* put_IsOverflowClipped)(__x_ABI_CWindows_CMedia_CCore_CITimedTextRegion* This,
        boolean value);
    HRESULT (STDMETHODCALLTYPE* get_Padding)(__x_ABI_CWindows_CMedia_CCore_CITimedTextRegion* This,
        struct __x_ABI_CWindows_CMedia_CCore_CTimedTextPadding* value);
    HRESULT (STDMETHODCALLTYPE* put_Padding)(__x_ABI_CWindows_CMedia_CCore_CITimedTextRegion* This,
        struct __x_ABI_CWindows_CMedia_CCore_CTimedTextPadding value);
    HRESULT (STDMETHODCALLTYPE* get_TextWrapping)(__x_ABI_CWindows_CMedia_CCore_CITimedTextRegion* This,
        enum __x_ABI_CWindows_CMedia_CCore_CTimedTextWrapping* value);
    HRESULT (STDMETHODCALLTYPE* put_TextWrapping)(__x_ABI_CWindows_CMedia_CCore_CITimedTextRegion* This,
        enum __x_ABI_CWindows_CMedia_CCore_CTimedTextWrapping value);
    HRESULT (STDMETHODCALLTYPE* get_ZIndex)(__x_ABI_CWindows_CMedia_CCore_CITimedTextRegion* This,
        INT32* value);
    HRESULT (STDMETHODCALLTYPE* put_ZIndex)(__x_ABI_CWindows_CMedia_CCore_CITimedTextRegion* This,
        INT32 value);
    HRESULT (STDMETHODCALLTYPE* get_ScrollMode)(__x_ABI_CWindows_CMedia_CCore_CITimedTextRegion* This,
        enum __x_ABI_CWindows_CMedia_CCore_CTimedTextScrollMode* value);
    HRESULT (STDMETHODCALLTYPE* put_ScrollMode)(__x_ABI_CWindows_CMedia_CCore_CITimedTextRegion* This,
        enum __x_ABI_CWindows_CMedia_CCore_CTimedTextScrollMode value);

        END_INTERFACE
    } __x_ABI_CWindows_CMedia_CCore_CITimedTextRegionVtbl;

    interface __x_ABI_CWindows_CMedia_CCore_CITimedTextRegion
    {
        CONST_VTBL struct __x_ABI_CWindows_CMedia_CCore_CITimedTextRegionVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CITimedTextRegion;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CITimedTextRegion_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CMedia_CCore_CITimedTextSource_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CMedia_CCore_CITimedTextSource_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CMedia_CCore_CITimedTextSourceVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CCore_CITimedTextSource* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CCore_CITimedTextSource* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CCore_CITimedTextSource* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CCore_CITimedTextSource* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CCore_CITimedTextSource* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CCore_CITimedTextSource* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* add_Resolved)(__x_ABI_CWindows_CMedia_CCore_CITimedTextSource* This,
        __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CTimedTextSource___x_ABI_CWindows__CMedia__CCore__CTimedTextSourceResolveResultEventArgs* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_Resolved)(__x_ABI_CWindows_CMedia_CCore_CITimedTextSource* This,
        EventRegistrationToken token);

        END_INTERFACE
    } __x_ABI_CWindows_CMedia_CCore_CITimedTextSourceVtbl;

    interface __x_ABI_CWindows_CMedia_CCore_CITimedTextSource
    {
        CONST_VTBL struct __x_ABI_CWindows_CMedia_CCore_CITimedTextSourceVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CITimedTextSource;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CITimedTextSource_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CMedia_CCore_CITimedTextSourceResolveResultEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CMedia_CCore_CITimedTextSourceResolveResultEventArgs_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CMedia_CCore_CITimedTextSourceResolveResultEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CCore_CITimedTextSourceResolveResultEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CCore_CITimedTextSourceResolveResultEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CCore_CITimedTextSourceResolveResultEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CCore_CITimedTextSourceResolveResultEventArgs* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CCore_CITimedTextSourceResolveResultEventArgs* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CCore_CITimedTextSourceResolveResultEventArgs* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Error)(__x_ABI_CWindows_CMedia_CCore_CITimedTextSourceResolveResultEventArgs* This,
        __x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrackError** value);
    HRESULT (STDMETHODCALLTYPE* get_Tracks)(__x_ABI_CWindows_CMedia_CCore_CITimedTextSourceResolveResultEventArgs* This,
        __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CCore__CTimedMetadataTrack** value);

        END_INTERFACE
    } __x_ABI_CWindows_CMedia_CCore_CITimedTextSourceResolveResultEventArgsVtbl;

    interface __x_ABI_CWindows_CMedia_CCore_CITimedTextSourceResolveResultEventArgs
    {
        CONST_VTBL struct __x_ABI_CWindows_CMedia_CCore_CITimedTextSourceResolveResultEventArgsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CITimedTextSourceResolveResultEventArgs;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CITimedTextSourceResolveResultEventArgs_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CMedia_CCore_CITimedTextSourceStatics_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CMedia_CCore_CITimedTextSourceStatics_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CMedia_CCore_CITimedTextSourceStaticsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CCore_CITimedTextSourceStatics* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CCore_CITimedTextSourceStatics* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CCore_CITimedTextSourceStatics* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CCore_CITimedTextSourceStatics* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CCore_CITimedTextSourceStatics* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CCore_CITimedTextSourceStatics* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* CreateFromStream)(__x_ABI_CWindows_CMedia_CCore_CITimedTextSourceStatics* This,
        __x_ABI_CWindows_CStorage_CStreams_CIRandomAccessStream* stream,
        __x_ABI_CWindows_CMedia_CCore_CITimedTextSource** value);
    HRESULT (STDMETHODCALLTYPE* CreateFromUri)(__x_ABI_CWindows_CMedia_CCore_CITimedTextSourceStatics* This,
        __x_ABI_CWindows_CFoundation_CIUriRuntimeClass* uri,
        __x_ABI_CWindows_CMedia_CCore_CITimedTextSource** value);
    HRESULT (STDMETHODCALLTYPE* CreateFromStreamWithLanguage)(__x_ABI_CWindows_CMedia_CCore_CITimedTextSourceStatics* This,
        __x_ABI_CWindows_CStorage_CStreams_CIRandomAccessStream* stream,
        HSTRING defaultLanguage,
        __x_ABI_CWindows_CMedia_CCore_CITimedTextSource** value);
    HRESULT (STDMETHODCALLTYPE* CreateFromUriWithLanguage)(__x_ABI_CWindows_CMedia_CCore_CITimedTextSourceStatics* This,
        __x_ABI_CWindows_CFoundation_CIUriRuntimeClass* uri,
        HSTRING defaultLanguage,
        __x_ABI_CWindows_CMedia_CCore_CITimedTextSource** value);

        END_INTERFACE
    } __x_ABI_CWindows_CMedia_CCore_CITimedTextSourceStaticsVtbl;

    interface __x_ABI_CWindows_CMedia_CCore_CITimedTextSourceStatics
    {
        CONST_VTBL struct __x_ABI_CWindows_CMedia_CCore_CITimedTextSourceStaticsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CITimedTextSourceStatics;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CITimedTextSourceStatics_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CMedia_CCore_CITimedTextSourceStatics2_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CMedia_CCore_CITimedTextSourceStatics2_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CMedia_CCore_CITimedTextSourceStatics2Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CCore_CITimedTextSourceStatics2* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CCore_CITimedTextSourceStatics2* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CCore_CITimedTextSourceStatics2* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CCore_CITimedTextSourceStatics2* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CCore_CITimedTextSourceStatics2* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CCore_CITimedTextSourceStatics2* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* CreateFromStreamWithIndex)(__x_ABI_CWindows_CMedia_CCore_CITimedTextSourceStatics2* This,
        __x_ABI_CWindows_CStorage_CStreams_CIRandomAccessStream* stream,
        __x_ABI_CWindows_CStorage_CStreams_CIRandomAccessStream* indexStream,
        __x_ABI_CWindows_CMedia_CCore_CITimedTextSource** result);
    HRESULT (STDMETHODCALLTYPE* CreateFromUriWithIndex)(__x_ABI_CWindows_CMedia_CCore_CITimedTextSourceStatics2* This,
        __x_ABI_CWindows_CFoundation_CIUriRuntimeClass* uri,
        __x_ABI_CWindows_CFoundation_CIUriRuntimeClass* indexUri,
        __x_ABI_CWindows_CMedia_CCore_CITimedTextSource** result);
    HRESULT (STDMETHODCALLTYPE* CreateFromStreamWithIndexAndLanguage)(__x_ABI_CWindows_CMedia_CCore_CITimedTextSourceStatics2* This,
        __x_ABI_CWindows_CStorage_CStreams_CIRandomAccessStream* stream,
        __x_ABI_CWindows_CStorage_CStreams_CIRandomAccessStream* indexStream,
        HSTRING defaultLanguage,
        __x_ABI_CWindows_CMedia_CCore_CITimedTextSource** result);
    HRESULT (STDMETHODCALLTYPE* CreateFromUriWithIndexAndLanguage)(__x_ABI_CWindows_CMedia_CCore_CITimedTextSourceStatics2* This,
        __x_ABI_CWindows_CFoundation_CIUriRuntimeClass* uri,
        __x_ABI_CWindows_CFoundation_CIUriRuntimeClass* indexUri,
        HSTRING defaultLanguage,
        __x_ABI_CWindows_CMedia_CCore_CITimedTextSource** result);

        END_INTERFACE
    } __x_ABI_CWindows_CMedia_CCore_CITimedTextSourceStatics2Vtbl;

    interface __x_ABI_CWindows_CMedia_CCore_CITimedTextSourceStatics2
    {
        CONST_VTBL struct __x_ABI_CWindows_CMedia_CCore_CITimedTextSourceStatics2Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CITimedTextSourceStatics2;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CITimedTextSourceStatics2_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CMedia_CCore_CITimedTextStyle_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CMedia_CCore_CITimedTextStyle_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CMedia_CCore_CITimedTextStyleVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CCore_CITimedTextStyle* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CCore_CITimedTextStyle* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CCore_CITimedTextStyle* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CCore_CITimedTextStyle* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CCore_CITimedTextStyle* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CCore_CITimedTextStyle* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Name)(__x_ABI_CWindows_CMedia_CCore_CITimedTextStyle* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* put_Name)(__x_ABI_CWindows_CMedia_CCore_CITimedTextStyle* This,
        HSTRING value);
    HRESULT (STDMETHODCALLTYPE* get_FontFamily)(__x_ABI_CWindows_CMedia_CCore_CITimedTextStyle* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* put_FontFamily)(__x_ABI_CWindows_CMedia_CCore_CITimedTextStyle* This,
        HSTRING value);
    HRESULT (STDMETHODCALLTYPE* get_FontSize)(__x_ABI_CWindows_CMedia_CCore_CITimedTextStyle* This,
        struct __x_ABI_CWindows_CMedia_CCore_CTimedTextDouble* value);
    HRESULT (STDMETHODCALLTYPE* put_FontSize)(__x_ABI_CWindows_CMedia_CCore_CITimedTextStyle* This,
        struct __x_ABI_CWindows_CMedia_CCore_CTimedTextDouble value);
    HRESULT (STDMETHODCALLTYPE* get_FontWeight)(__x_ABI_CWindows_CMedia_CCore_CITimedTextStyle* This,
        enum __x_ABI_CWindows_CMedia_CCore_CTimedTextWeight* value);
    HRESULT (STDMETHODCALLTYPE* put_FontWeight)(__x_ABI_CWindows_CMedia_CCore_CITimedTextStyle* This,
        enum __x_ABI_CWindows_CMedia_CCore_CTimedTextWeight value);
    HRESULT (STDMETHODCALLTYPE* get_Foreground)(__x_ABI_CWindows_CMedia_CCore_CITimedTextStyle* This,
        struct __x_ABI_CWindows_CUI_CColor* value);
    HRESULT (STDMETHODCALLTYPE* put_Foreground)(__x_ABI_CWindows_CMedia_CCore_CITimedTextStyle* This,
        struct __x_ABI_CWindows_CUI_CColor value);
    HRESULT (STDMETHODCALLTYPE* get_Background)(__x_ABI_CWindows_CMedia_CCore_CITimedTextStyle* This,
        struct __x_ABI_CWindows_CUI_CColor* value);
    HRESULT (STDMETHODCALLTYPE* put_Background)(__x_ABI_CWindows_CMedia_CCore_CITimedTextStyle* This,
        struct __x_ABI_CWindows_CUI_CColor value);
    HRESULT (STDMETHODCALLTYPE* get_IsBackgroundAlwaysShown)(__x_ABI_CWindows_CMedia_CCore_CITimedTextStyle* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* put_IsBackgroundAlwaysShown)(__x_ABI_CWindows_CMedia_CCore_CITimedTextStyle* This,
        boolean value);
    HRESULT (STDMETHODCALLTYPE* get_FlowDirection)(__x_ABI_CWindows_CMedia_CCore_CITimedTextStyle* This,
        enum __x_ABI_CWindows_CMedia_CCore_CTimedTextFlowDirection* value);
    HRESULT (STDMETHODCALLTYPE* put_FlowDirection)(__x_ABI_CWindows_CMedia_CCore_CITimedTextStyle* This,
        enum __x_ABI_CWindows_CMedia_CCore_CTimedTextFlowDirection value);
    HRESULT (STDMETHODCALLTYPE* get_LineAlignment)(__x_ABI_CWindows_CMedia_CCore_CITimedTextStyle* This,
        enum __x_ABI_CWindows_CMedia_CCore_CTimedTextLineAlignment* value);
    HRESULT (STDMETHODCALLTYPE* put_LineAlignment)(__x_ABI_CWindows_CMedia_CCore_CITimedTextStyle* This,
        enum __x_ABI_CWindows_CMedia_CCore_CTimedTextLineAlignment value);
    HRESULT (STDMETHODCALLTYPE* get_OutlineColor)(__x_ABI_CWindows_CMedia_CCore_CITimedTextStyle* This,
        struct __x_ABI_CWindows_CUI_CColor* value);
    HRESULT (STDMETHODCALLTYPE* put_OutlineColor)(__x_ABI_CWindows_CMedia_CCore_CITimedTextStyle* This,
        struct __x_ABI_CWindows_CUI_CColor value);
    HRESULT (STDMETHODCALLTYPE* get_OutlineThickness)(__x_ABI_CWindows_CMedia_CCore_CITimedTextStyle* This,
        struct __x_ABI_CWindows_CMedia_CCore_CTimedTextDouble* value);
    HRESULT (STDMETHODCALLTYPE* put_OutlineThickness)(__x_ABI_CWindows_CMedia_CCore_CITimedTextStyle* This,
        struct __x_ABI_CWindows_CMedia_CCore_CTimedTextDouble value);
    HRESULT (STDMETHODCALLTYPE* get_OutlineRadius)(__x_ABI_CWindows_CMedia_CCore_CITimedTextStyle* This,
        struct __x_ABI_CWindows_CMedia_CCore_CTimedTextDouble* value);
    HRESULT (STDMETHODCALLTYPE* put_OutlineRadius)(__x_ABI_CWindows_CMedia_CCore_CITimedTextStyle* This,
        struct __x_ABI_CWindows_CMedia_CCore_CTimedTextDouble value);

        END_INTERFACE
    } __x_ABI_CWindows_CMedia_CCore_CITimedTextStyleVtbl;

    interface __x_ABI_CWindows_CMedia_CCore_CITimedTextStyle
    {
        CONST_VTBL struct __x_ABI_CWindows_CMedia_CCore_CITimedTextStyleVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CITimedTextStyle;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CITimedTextStyle_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CMedia_CCore_CITimedTextStyle2_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CMedia_CCore_CITimedTextStyle2_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CMedia_CCore_CITimedTextStyle2Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CCore_CITimedTextStyle2* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CCore_CITimedTextStyle2* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CCore_CITimedTextStyle2* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CCore_CITimedTextStyle2* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CCore_CITimedTextStyle2* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CCore_CITimedTextStyle2* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_FontStyle)(__x_ABI_CWindows_CMedia_CCore_CITimedTextStyle2* This,
        enum __x_ABI_CWindows_CMedia_CCore_CTimedTextFontStyle* value);
    HRESULT (STDMETHODCALLTYPE* put_FontStyle)(__x_ABI_CWindows_CMedia_CCore_CITimedTextStyle2* This,
        enum __x_ABI_CWindows_CMedia_CCore_CTimedTextFontStyle value);
    HRESULT (STDMETHODCALLTYPE* get_IsUnderlineEnabled)(__x_ABI_CWindows_CMedia_CCore_CITimedTextStyle2* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* put_IsUnderlineEnabled)(__x_ABI_CWindows_CMedia_CCore_CITimedTextStyle2* This,
        boolean value);
    HRESULT (STDMETHODCALLTYPE* get_IsLineThroughEnabled)(__x_ABI_CWindows_CMedia_CCore_CITimedTextStyle2* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* put_IsLineThroughEnabled)(__x_ABI_CWindows_CMedia_CCore_CITimedTextStyle2* This,
        boolean value);
    HRESULT (STDMETHODCALLTYPE* get_IsOverlineEnabled)(__x_ABI_CWindows_CMedia_CCore_CITimedTextStyle2* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* put_IsOverlineEnabled)(__x_ABI_CWindows_CMedia_CCore_CITimedTextStyle2* This,
        boolean value);

        END_INTERFACE
    } __x_ABI_CWindows_CMedia_CCore_CITimedTextStyle2Vtbl;

    interface __x_ABI_CWindows_CMedia_CCore_CITimedTextStyle2
    {
        CONST_VTBL struct __x_ABI_CWindows_CMedia_CCore_CITimedTextStyle2Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CITimedTextStyle2;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CITimedTextStyle2_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CMedia_CCore_CITimedTextSubformat_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CMedia_CCore_CITimedTextSubformat_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CMedia_CCore_CITimedTextSubformatVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CCore_CITimedTextSubformat* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CCore_CITimedTextSubformat* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CCore_CITimedTextSubformat* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CCore_CITimedTextSubformat* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CCore_CITimedTextSubformat* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CCore_CITimedTextSubformat* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_StartIndex)(__x_ABI_CWindows_CMedia_CCore_CITimedTextSubformat* This,
        INT32* value);
    HRESULT (STDMETHODCALLTYPE* put_StartIndex)(__x_ABI_CWindows_CMedia_CCore_CITimedTextSubformat* This,
        INT32 value);
    HRESULT (STDMETHODCALLTYPE* get_Length)(__x_ABI_CWindows_CMedia_CCore_CITimedTextSubformat* This,
        INT32* value);
    HRESULT (STDMETHODCALLTYPE* put_Length)(__x_ABI_CWindows_CMedia_CCore_CITimedTextSubformat* This,
        INT32 value);
    HRESULT (STDMETHODCALLTYPE* get_SubformatStyle)(__x_ABI_CWindows_CMedia_CCore_CITimedTextSubformat* This,
        __x_ABI_CWindows_CMedia_CCore_CITimedTextStyle** value);
    HRESULT (STDMETHODCALLTYPE* put_SubformatStyle)(__x_ABI_CWindows_CMedia_CCore_CITimedTextSubformat* This,
        __x_ABI_CWindows_CMedia_CCore_CITimedTextStyle* value);

        END_INTERFACE
    } __x_ABI_CWindows_CMedia_CCore_CITimedTextSubformatVtbl;

    interface __x_ABI_CWindows_CMedia_CCore_CITimedTextSubformat
    {
        CONST_VTBL struct __x_ABI_CWindows_CMedia_CCore_CITimedTextSubformatVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CITimedTextSubformat;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CITimedTextSubformat_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CMedia_CCore_CIVideoStabilizationEffect_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CMedia_CCore_CIVideoStabilizationEffect_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CMedia_CCore_CIVideoStabilizationEffectVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CCore_CIVideoStabilizationEffect* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CCore_CIVideoStabilizationEffect* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CCore_CIVideoStabilizationEffect* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CCore_CIVideoStabilizationEffect* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CCore_CIVideoStabilizationEffect* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CCore_CIVideoStabilizationEffect* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* put_Enabled)(__x_ABI_CWindows_CMedia_CCore_CIVideoStabilizationEffect* This,
        boolean value);
    HRESULT (STDMETHODCALLTYPE* get_Enabled)(__x_ABI_CWindows_CMedia_CCore_CIVideoStabilizationEffect* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* add_EnabledChanged)(__x_ABI_CWindows_CMedia_CCore_CIVideoStabilizationEffect* This,
        __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CVideoStabilizationEffect___x_ABI_CWindows__CMedia__CCore__CVideoStabilizationEffectEnabledChangedEventArgs* handler,
        EventRegistrationToken* cookie);
    HRESULT (STDMETHODCALLTYPE* remove_EnabledChanged)(__x_ABI_CWindows_CMedia_CCore_CIVideoStabilizationEffect* This,
        EventRegistrationToken cookie);
    HRESULT (STDMETHODCALLTYPE* GetRecommendedStreamConfiguration)(__x_ABI_CWindows_CMedia_CCore_CIVideoStabilizationEffect* This,
        __x_ABI_CWindows_CMedia_CDevices_CIVideoDeviceController* controller,
        __x_ABI_CWindows_CMedia_CMediaProperties_CIVideoEncodingProperties* desiredProperties,
        __x_ABI_CWindows_CMedia_CCapture_CIVideoStreamConfiguration** value);

        END_INTERFACE
    } __x_ABI_CWindows_CMedia_CCore_CIVideoStabilizationEffectVtbl;

    interface __x_ABI_CWindows_CMedia_CCore_CIVideoStabilizationEffect
    {
        CONST_VTBL struct __x_ABI_CWindows_CMedia_CCore_CIVideoStabilizationEffectVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CIVideoStabilizationEffect;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CIVideoStabilizationEffect_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CMedia_CCore_CIVideoStabilizationEffectEnabledChangedEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CMedia_CCore_CIVideoStabilizationEffectEnabledChangedEventArgs_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CMedia_CCore_CIVideoStabilizationEffectEnabledChangedEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CCore_CIVideoStabilizationEffectEnabledChangedEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CCore_CIVideoStabilizationEffectEnabledChangedEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CCore_CIVideoStabilizationEffectEnabledChangedEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CCore_CIVideoStabilizationEffectEnabledChangedEventArgs* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CCore_CIVideoStabilizationEffectEnabledChangedEventArgs* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CCore_CIVideoStabilizationEffectEnabledChangedEventArgs* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Reason)(__x_ABI_CWindows_CMedia_CCore_CIVideoStabilizationEffectEnabledChangedEventArgs* This,
        enum __x_ABI_CWindows_CMedia_CCore_CVideoStabilizationEffectEnabledChangedReason* value);

        END_INTERFACE
    } __x_ABI_CWindows_CMedia_CCore_CIVideoStabilizationEffectEnabledChangedEventArgsVtbl;

    interface __x_ABI_CWindows_CMedia_CCore_CIVideoStabilizationEffectEnabledChangedEventArgs
    {
        CONST_VTBL struct __x_ABI_CWindows_CMedia_CCore_CIVideoStabilizationEffectEnabledChangedEventArgsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CIVideoStabilizationEffectEnabledChangedEventArgs;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CIVideoStabilizationEffectEnabledChangedEventArgs_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CMedia_CCore_CIVideoStreamDescriptor_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CMedia_CCore_CIVideoStreamDescriptor_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CMedia_CCore_CIVideoStreamDescriptorVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CCore_CIVideoStreamDescriptor* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CCore_CIVideoStreamDescriptor* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CCore_CIVideoStreamDescriptor* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CCore_CIVideoStreamDescriptor* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CCore_CIVideoStreamDescriptor* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CCore_CIVideoStreamDescriptor* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_EncodingProperties)(__x_ABI_CWindows_CMedia_CCore_CIVideoStreamDescriptor* This,
        __x_ABI_CWindows_CMedia_CMediaProperties_CIVideoEncodingProperties** encodingProperties);

        END_INTERFACE
    } __x_ABI_CWindows_CMedia_CCore_CIVideoStreamDescriptorVtbl;

    interface __x_ABI_CWindows_CMedia_CCore_CIVideoStreamDescriptor
    {
        CONST_VTBL struct __x_ABI_CWindows_CMedia_CCore_CIVideoStreamDescriptorVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CIVideoStreamDescriptor;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CIVideoStreamDescriptor_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CMedia_CCore_CIVideoStreamDescriptor2_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CMedia_CCore_CIVideoStreamDescriptor2_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CMedia_CCore_CIVideoStreamDescriptor2Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CCore_CIVideoStreamDescriptor2* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CCore_CIVideoStreamDescriptor2* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CCore_CIVideoStreamDescriptor2* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CCore_CIVideoStreamDescriptor2* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CCore_CIVideoStreamDescriptor2* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CCore_CIVideoStreamDescriptor2* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* Copy)(__x_ABI_CWindows_CMedia_CCore_CIVideoStreamDescriptor2* This,
        __x_ABI_CWindows_CMedia_CCore_CIVideoStreamDescriptor** result);

        END_INTERFACE
    } __x_ABI_CWindows_CMedia_CCore_CIVideoStreamDescriptor2Vtbl;

    interface __x_ABI_CWindows_CMedia_CCore_CIVideoStreamDescriptor2
    {
        CONST_VTBL struct __x_ABI_CWindows_CMedia_CCore_CIVideoStreamDescriptor2Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CIVideoStreamDescriptor2;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CIVideoStreamDescriptor2_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CMedia_CCore_CIVideoStreamDescriptorFactory_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CMedia_CCore_CIVideoStreamDescriptorFactory_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CMedia_CCore_CIVideoStreamDescriptorFactoryVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CCore_CIVideoStreamDescriptorFactory* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CCore_CIVideoStreamDescriptorFactory* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CCore_CIVideoStreamDescriptorFactory* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CCore_CIVideoStreamDescriptorFactory* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CCore_CIVideoStreamDescriptorFactory* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CCore_CIVideoStreamDescriptorFactory* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* Create)(__x_ABI_CWindows_CMedia_CCore_CIVideoStreamDescriptorFactory* This,
        __x_ABI_CWindows_CMedia_CMediaProperties_CIVideoEncodingProperties* encodingProperties,
        __x_ABI_CWindows_CMedia_CCore_CIVideoStreamDescriptor** result);

        END_INTERFACE
    } __x_ABI_CWindows_CMedia_CCore_CIVideoStreamDescriptorFactoryVtbl;

    interface __x_ABI_CWindows_CMedia_CCore_CIVideoStreamDescriptorFactory
    {
        CONST_VTBL struct __x_ABI_CWindows_CMedia_CCore_CIVideoStreamDescriptorFactoryVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CIVideoStreamDescriptorFactory;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CIVideoStreamDescriptorFactory_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CMedia_CCore_CIVideoTrack_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CMedia_CCore_CIVideoTrack_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CMedia_CCore_CIVideoTrackVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CCore_CIVideoTrack* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CCore_CIVideoTrack* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CCore_CIVideoTrack* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CCore_CIVideoTrack* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CCore_CIVideoTrack* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CCore_CIVideoTrack* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* add_OpenFailed)(__x_ABI_CWindows_CMedia_CCore_CIVideoTrack* This,
        __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CVideoTrack___x_ABI_CWindows__CMedia__CCore__CVideoTrackOpenFailedEventArgs* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_OpenFailed)(__x_ABI_CWindows_CMedia_CCore_CIVideoTrack* This,
        EventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* GetEncodingProperties)(__x_ABI_CWindows_CMedia_CCore_CIVideoTrack* This,
        __x_ABI_CWindows_CMedia_CMediaProperties_CIVideoEncodingProperties** value);
    HRESULT (STDMETHODCALLTYPE* get_PlaybackItem)(__x_ABI_CWindows_CMedia_CCore_CIVideoTrack* This,
        __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackItem** value);
    HRESULT (STDMETHODCALLTYPE* get_Name)(__x_ABI_CWindows_CMedia_CCore_CIVideoTrack* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_SupportInfo)(__x_ABI_CWindows_CMedia_CCore_CIVideoTrack* This,
        __x_ABI_CWindows_CMedia_CCore_CIVideoTrackSupportInfo** value);

        END_INTERFACE
    } __x_ABI_CWindows_CMedia_CCore_CIVideoTrackVtbl;

    interface __x_ABI_CWindows_CMedia_CCore_CIVideoTrack
    {
        CONST_VTBL struct __x_ABI_CWindows_CMedia_CCore_CIVideoTrackVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CIVideoTrack;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CIVideoTrack_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CMedia_CCore_CIVideoTrackOpenFailedEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CMedia_CCore_CIVideoTrackOpenFailedEventArgs_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CMedia_CCore_CIVideoTrackOpenFailedEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CCore_CIVideoTrackOpenFailedEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CCore_CIVideoTrackOpenFailedEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CCore_CIVideoTrackOpenFailedEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CCore_CIVideoTrackOpenFailedEventArgs* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CCore_CIVideoTrackOpenFailedEventArgs* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CCore_CIVideoTrackOpenFailedEventArgs* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_ExtendedError)(__x_ABI_CWindows_CMedia_CCore_CIVideoTrackOpenFailedEventArgs* This,
        HRESULT* value);

        END_INTERFACE
    } __x_ABI_CWindows_CMedia_CCore_CIVideoTrackOpenFailedEventArgsVtbl;

    interface __x_ABI_CWindows_CMedia_CCore_CIVideoTrackOpenFailedEventArgs
    {
        CONST_VTBL struct __x_ABI_CWindows_CMedia_CCore_CIVideoTrackOpenFailedEventArgsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CIVideoTrackOpenFailedEventArgs;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CIVideoTrackOpenFailedEventArgs_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CMedia_CCore_CIVideoTrackSupportInfo_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CMedia_CCore_CIVideoTrackSupportInfo_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CMedia_CCore_CIVideoTrackSupportInfoVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CCore_CIVideoTrackSupportInfo* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CCore_CIVideoTrackSupportInfo* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CCore_CIVideoTrackSupportInfo* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CCore_CIVideoTrackSupportInfo* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CCore_CIVideoTrackSupportInfo* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CCore_CIVideoTrackSupportInfo* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_DecoderStatus)(__x_ABI_CWindows_CMedia_CCore_CIVideoTrackSupportInfo* This,
        enum __x_ABI_CWindows_CMedia_CCore_CMediaDecoderStatus* value);
    HRESULT (STDMETHODCALLTYPE* get_MediaSourceStatus)(__x_ABI_CWindows_CMedia_CCore_CIVideoTrackSupportInfo* This,
        enum __x_ABI_CWindows_CMedia_CCore_CMediaSourceStatus* value);

        END_INTERFACE
    } __x_ABI_CWindows_CMedia_CCore_CIVideoTrackSupportInfoVtbl;

    interface __x_ABI_CWindows_CMedia_CCore_CIVideoTrackSupportInfo
    {
        CONST_VTBL struct __x_ABI_CWindows_CMedia_CCore_CIVideoTrackSupportInfoVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CIVideoTrackSupportInfo;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CIVideoTrackSupportInfo_INTERFACE_DEFINED__) */
    

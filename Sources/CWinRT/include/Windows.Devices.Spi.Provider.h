// WARNING: Please don't edit this file. It was generated by Swift/WinRT v0.0.1

#pragma once
// Header files for imported files
#include <inspectable.h>
#include <EventToken.h>
#include <windowscontracts.h>
#include "Windows.Foundation.h"
#include "Windows.Devices.h"
// Importing Collections header
#include "Windows.Foundation.Collections.h"

/* Forward Declarations */
#ifndef ____x_ABI_CWindows_CDevices_CSpi_CProvider_CIProviderSpiConnectionSettings_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSpi_CProvider_CIProviderSpiConnectionSettings_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CDevices_CSpi_CProvider_CIProviderSpiConnectionSettings __x_ABI_CWindows_CDevices_CSpi_CProvider_CIProviderSpiConnectionSettings;

#endif // ____x_ABI_CWindows_CDevices_CSpi_CProvider_CIProviderSpiConnectionSettings_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSpi_CProvider_CIProviderSpiConnectionSettingsFactory_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSpi_CProvider_CIProviderSpiConnectionSettingsFactory_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CDevices_CSpi_CProvider_CIProviderSpiConnectionSettingsFactory __x_ABI_CWindows_CDevices_CSpi_CProvider_CIProviderSpiConnectionSettingsFactory;

#endif // ____x_ABI_CWindows_CDevices_CSpi_CProvider_CIProviderSpiConnectionSettingsFactory_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSpi_CProvider_CISpiControllerProvider_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSpi_CProvider_CISpiControllerProvider_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CDevices_CSpi_CProvider_CISpiControllerProvider __x_ABI_CWindows_CDevices_CSpi_CProvider_CISpiControllerProvider;

#endif // ____x_ABI_CWindows_CDevices_CSpi_CProvider_CISpiControllerProvider_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSpi_CProvider_CISpiDeviceProvider_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSpi_CProvider_CISpiDeviceProvider_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CDevices_CSpi_CProvider_CISpiDeviceProvider __x_ABI_CWindows_CDevices_CSpi_CProvider_CISpiDeviceProvider;

#endif // ____x_ABI_CWindows_CDevices_CSpi_CProvider_CISpiDeviceProvider_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSpi_CProvider_CISpiProvider_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSpi_CProvider_CISpiProvider_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CDevices_CSpi_CProvider_CISpiProvider __x_ABI_CWindows_CDevices_CSpi_CProvider_CISpiProvider;

#endif // ____x_ABI_CWindows_CDevices_CSpi_CProvider_CISpiProvider_FWD_DEFINED__

// Parameterized interface forward declarations (C)

// Collection interface definitions

#if !defined(____x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CSpi__CProvider__CISpiControllerProvider_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CSpi__CProvider__CISpiControllerProvider_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CSpi__CProvider__CISpiControllerProvider __x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CSpi__CProvider__CISpiControllerProvider;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CSpi__CProvider__CISpiControllerProvider;

    typedef struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CSpi__CProvider__CISpiControllerProviderVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CSpi__CProvider__CISpiControllerProvider* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CSpi__CProvider__CISpiControllerProvider* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CSpi__CProvider__CISpiControllerProvider* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CSpi__CProvider__CISpiControllerProvider* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CSpi__CProvider__CISpiControllerProvider* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CSpi__CProvider__CISpiControllerProvider* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Current)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CSpi__CProvider__CISpiControllerProvider* This,
        __x_ABI_CWindows_CDevices_CSpi_CProvider_CISpiControllerProvider** result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CSpi__CProvider__CISpiControllerProvider* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CSpi__CProvider__CISpiControllerProvider* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CSpi__CProvider__CISpiControllerProvider* This,
        UINT32 itemsLength,
        __x_ABI_CWindows_CDevices_CSpi_CProvider_CISpiControllerProvider** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CSpi__CProvider__CISpiControllerProviderVtbl;

    interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CSpi__CProvider__CISpiControllerProvider
    {
        CONST_VTBL struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CSpi__CProvider__CISpiControllerProviderVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CSpi__CProvider__CISpiControllerProvider_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CSpi__CProvider__CISpiControllerProvider_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CSpi__CProvider__CISpiControllerProvider_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CSpi__CProvider__CISpiControllerProvider __x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CSpi__CProvider__CISpiControllerProvider;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CSpi__CProvider__CISpiControllerProvider;

    typedef struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CSpi__CProvider__CISpiControllerProviderVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CSpi__CProvider__CISpiControllerProvider* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CSpi__CProvider__CISpiControllerProvider* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CSpi__CProvider__CISpiControllerProvider* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CSpi__CProvider__CISpiControllerProvider* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CSpi__CProvider__CISpiControllerProvider* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CSpi__CProvider__CISpiControllerProvider* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* First)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CSpi__CProvider__CISpiControllerProvider* This,
        __x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CSpi__CProvider__CISpiControllerProvider** result);

        END_INTERFACE
    } __x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CSpi__CProvider__CISpiControllerProviderVtbl;

    interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CSpi__CProvider__CISpiControllerProvider
    {
        CONST_VTBL struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CSpi__CProvider__CISpiControllerProviderVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CSpi__CProvider__CISpiControllerProvider_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CSpi__CProvider__CISpiControllerProvider_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CSpi__CProvider__CISpiControllerProvider_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CSpi__CProvider__CISpiControllerProvider __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CSpi__CProvider__CISpiControllerProvider;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CSpi__CProvider__CISpiControllerProvider;

    typedef struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CSpi__CProvider__CISpiControllerProviderVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CSpi__CProvider__CISpiControllerProvider* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CSpi__CProvider__CISpiControllerProvider* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CSpi__CProvider__CISpiControllerProvider* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CSpi__CProvider__CISpiControllerProvider* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CSpi__CProvider__CISpiControllerProvider* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CSpi__CProvider__CISpiControllerProvider* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CSpi__CProvider__CISpiControllerProvider* This,
        UINT32 index,
        __x_ABI_CWindows_CDevices_CSpi_CProvider_CISpiControllerProvider** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CSpi__CProvider__CISpiControllerProvider* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CSpi__CProvider__CISpiControllerProvider* This,
        __x_ABI_CWindows_CDevices_CSpi_CProvider_CISpiControllerProvider* value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CSpi__CProvider__CISpiControllerProvider* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        __x_ABI_CWindows_CDevices_CSpi_CProvider_CISpiControllerProvider** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CSpi__CProvider__CISpiControllerProviderVtbl;

    interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CSpi__CProvider__CISpiControllerProvider
    {
        CONST_VTBL struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CSpi__CProvider__CISpiControllerProviderVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CSpi__CProvider__CISpiControllerProvider_INTERFACE_DEFINED__
    
typedef interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CSpi__CProvider__CISpiControllerProvider __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CSpi__CProvider__CISpiControllerProvider;

#if !defined(____x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CSpi__CProvider__CISpiControllerProvider_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CSpi__CProvider__CISpiControllerProvider_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CSpi__CProvider__CISpiControllerProvider __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CSpi__CProvider__CISpiControllerProvider;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CSpi__CProvider__CISpiControllerProvider;

    typedef struct __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CSpi__CProvider__CISpiControllerProviderVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CSpi__CProvider__CISpiControllerProvider* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CSpi__CProvider__CISpiControllerProvider* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CSpi__CProvider__CISpiControllerProvider* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CSpi__CProvider__CISpiControllerProvider* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CSpi__CProvider__CISpiControllerProvider* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CSpi__CProvider__CISpiControllerProvider* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* put_Completed)(__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CSpi__CProvider__CISpiControllerProvider* This,
        __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CSpi__CProvider__CISpiControllerProvider* handler);
    HRESULT (STDMETHODCALLTYPE* get_Completed)(__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CSpi__CProvider__CISpiControllerProvider* This,
        __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CSpi__CProvider__CISpiControllerProvider** result);
    HRESULT (STDMETHODCALLTYPE* GetResults)(__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CSpi__CProvider__CISpiControllerProvider* This,
        __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CSpi__CProvider__CISpiControllerProvider** result);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CSpi__CProvider__CISpiControllerProviderVtbl;

    interface __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CSpi__CProvider__CISpiControllerProvider
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CSpi__CProvider__CISpiControllerProviderVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CSpi__CProvider__CISpiControllerProvider_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CSpi__CProvider__CISpiControllerProvider_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CSpi__CProvider__CISpiControllerProvider_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CSpi__CProvider__CISpiControllerProvider __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CSpi__CProvider__CISpiControllerProvider;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CSpi__CProvider__CISpiControllerProvider;

    typedef struct __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CSpi__CProvider__CISpiControllerProviderVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CSpi__CProvider__CISpiControllerProvider* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CSpi__CProvider__CISpiControllerProvider* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CSpi__CProvider__CISpiControllerProvider* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CSpi__CProvider__CISpiControllerProvider* This,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CSpi__CProvider__CISpiControllerProvider* asyncInfo,
        enum __x_ABI_CWindows_CFoundation_CAsyncStatus asyncStatus);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CSpi__CProvider__CISpiControllerProviderVtbl;

    interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CSpi__CProvider__CISpiControllerProvider
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CSpi__CProvider__CISpiControllerProviderVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CSpi__CProvider__CISpiControllerProvider_INTERFACE_DEFINED__
    
typedef enum __x_ABI_CWindows_CFoundation_CAsyncStatus __x_ABI_CWindows_CFoundation_CAsyncStatus;

#ifndef ____x_ABI_CWindows_CFoundation_CIAsyncInfo_FWD_DEFINED__
#define ____x_ABI_CWindows_CFoundation_CIAsyncInfo_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CFoundation_CIAsyncInfo __x_ABI_CWindows_CFoundation_CIAsyncInfo;

#endif // ____x_ABI_CWindows_CFoundation_CIAsyncInfo_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CFoundation_CIClosable_FWD_DEFINED__
#define ____x_ABI_CWindows_CFoundation_CIClosable_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CFoundation_CIClosable __x_ABI_CWindows_CFoundation_CIClosable;

#endif // ____x_ABI_CWindows_CFoundation_CIClosable_FWD_DEFINED__

typedef enum __x_ABI_CWindows_CDevices_CSpi_CProvider_CProviderSpiMode __x_ABI_CWindows_CDevices_CSpi_CProvider_CProviderSpiMode;

typedef enum __x_ABI_CWindows_CDevices_CSpi_CProvider_CProviderSpiSharingMode __x_ABI_CWindows_CDevices_CSpi_CProvider_CProviderSpiSharingMode;

enum __x_ABI_CWindows_CDevices_CSpi_CProvider_CProviderSpiMode
    {
        __x_ABI_CWindows_CDevices_CSpi_CProvider_CProviderSpiMode_Mode0 = 0,
    __x_ABI_CWindows_CDevices_CSpi_CProvider_CProviderSpiMode_Mode1 = 1,
    __x_ABI_CWindows_CDevices_CSpi_CProvider_CProviderSpiMode_Mode2 = 2,
    __x_ABI_CWindows_CDevices_CSpi_CProvider_CProviderSpiMode_Mode3 = 3,
};

enum __x_ABI_CWindows_CDevices_CSpi_CProvider_CProviderSpiSharingMode
    {
        __x_ABI_CWindows_CDevices_CSpi_CProvider_CProviderSpiSharingMode_Exclusive = 0,
    __x_ABI_CWindows_CDevices_CSpi_CProvider_CProviderSpiSharingMode_Shared = 1,
};

#if !defined(____x_ABI_CWindows_CDevices_CSpi_CProvider_CIProviderSpiConnectionSettings_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CDevices_CSpi_CProvider_CIProviderSpiConnectionSettings_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CDevices_CSpi_CProvider_CIProviderSpiConnectionSettingsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CSpi_CProvider_CIProviderSpiConnectionSettings* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CSpi_CProvider_CIProviderSpiConnectionSettings* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CSpi_CProvider_CIProviderSpiConnectionSettings* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CSpi_CProvider_CIProviderSpiConnectionSettings* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CSpi_CProvider_CIProviderSpiConnectionSettings* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CSpi_CProvider_CIProviderSpiConnectionSettings* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_ChipSelectLine)(__x_ABI_CWindows_CDevices_CSpi_CProvider_CIProviderSpiConnectionSettings* This,
        INT32* value);
    HRESULT (STDMETHODCALLTYPE* put_ChipSelectLine)(__x_ABI_CWindows_CDevices_CSpi_CProvider_CIProviderSpiConnectionSettings* This,
        INT32 value);
    HRESULT (STDMETHODCALLTYPE* get_Mode)(__x_ABI_CWindows_CDevices_CSpi_CProvider_CIProviderSpiConnectionSettings* This,
        enum __x_ABI_CWindows_CDevices_CSpi_CProvider_CProviderSpiMode* value);
    HRESULT (STDMETHODCALLTYPE* put_Mode)(__x_ABI_CWindows_CDevices_CSpi_CProvider_CIProviderSpiConnectionSettings* This,
        enum __x_ABI_CWindows_CDevices_CSpi_CProvider_CProviderSpiMode value);
    HRESULT (STDMETHODCALLTYPE* get_DataBitLength)(__x_ABI_CWindows_CDevices_CSpi_CProvider_CIProviderSpiConnectionSettings* This,
        INT32* value);
    HRESULT (STDMETHODCALLTYPE* put_DataBitLength)(__x_ABI_CWindows_CDevices_CSpi_CProvider_CIProviderSpiConnectionSettings* This,
        INT32 value);
    HRESULT (STDMETHODCALLTYPE* get_ClockFrequency)(__x_ABI_CWindows_CDevices_CSpi_CProvider_CIProviderSpiConnectionSettings* This,
        INT32* value);
    HRESULT (STDMETHODCALLTYPE* put_ClockFrequency)(__x_ABI_CWindows_CDevices_CSpi_CProvider_CIProviderSpiConnectionSettings* This,
        INT32 value);
    HRESULT (STDMETHODCALLTYPE* get_SharingMode)(__x_ABI_CWindows_CDevices_CSpi_CProvider_CIProviderSpiConnectionSettings* This,
        enum __x_ABI_CWindows_CDevices_CSpi_CProvider_CProviderSpiSharingMode* value);
    HRESULT (STDMETHODCALLTYPE* put_SharingMode)(__x_ABI_CWindows_CDevices_CSpi_CProvider_CIProviderSpiConnectionSettings* This,
        enum __x_ABI_CWindows_CDevices_CSpi_CProvider_CProviderSpiSharingMode value);

        END_INTERFACE
    } __x_ABI_CWindows_CDevices_CSpi_CProvider_CIProviderSpiConnectionSettingsVtbl;

    interface __x_ABI_CWindows_CDevices_CSpi_CProvider_CIProviderSpiConnectionSettings
    {
        CONST_VTBL struct __x_ABI_CWindows_CDevices_CSpi_CProvider_CIProviderSpiConnectionSettingsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSpi_CProvider_CIProviderSpiConnectionSettings;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSpi_CProvider_CIProviderSpiConnectionSettings_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CDevices_CSpi_CProvider_CIProviderSpiConnectionSettingsFactory_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CDevices_CSpi_CProvider_CIProviderSpiConnectionSettingsFactory_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CDevices_CSpi_CProvider_CIProviderSpiConnectionSettingsFactoryVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CSpi_CProvider_CIProviderSpiConnectionSettingsFactory* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CSpi_CProvider_CIProviderSpiConnectionSettingsFactory* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CSpi_CProvider_CIProviderSpiConnectionSettingsFactory* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CSpi_CProvider_CIProviderSpiConnectionSettingsFactory* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CSpi_CProvider_CIProviderSpiConnectionSettingsFactory* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CSpi_CProvider_CIProviderSpiConnectionSettingsFactory* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* Create)(__x_ABI_CWindows_CDevices_CSpi_CProvider_CIProviderSpiConnectionSettingsFactory* This,
        INT32 chipSelectLine,
        __x_ABI_CWindows_CDevices_CSpi_CProvider_CIProviderSpiConnectionSettings** value);

        END_INTERFACE
    } __x_ABI_CWindows_CDevices_CSpi_CProvider_CIProviderSpiConnectionSettingsFactoryVtbl;

    interface __x_ABI_CWindows_CDevices_CSpi_CProvider_CIProviderSpiConnectionSettingsFactory
    {
        CONST_VTBL struct __x_ABI_CWindows_CDevices_CSpi_CProvider_CIProviderSpiConnectionSettingsFactoryVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSpi_CProvider_CIProviderSpiConnectionSettingsFactory;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSpi_CProvider_CIProviderSpiConnectionSettingsFactory_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CDevices_CSpi_CProvider_CISpiControllerProvider_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CDevices_CSpi_CProvider_CISpiControllerProvider_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CDevices_CSpi_CProvider_CISpiControllerProviderVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CSpi_CProvider_CISpiControllerProvider* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CSpi_CProvider_CISpiControllerProvider* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CSpi_CProvider_CISpiControllerProvider* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CSpi_CProvider_CISpiControllerProvider* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CSpi_CProvider_CISpiControllerProvider* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CSpi_CProvider_CISpiControllerProvider* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetDeviceProvider)(__x_ABI_CWindows_CDevices_CSpi_CProvider_CISpiControllerProvider* This,
        __x_ABI_CWindows_CDevices_CSpi_CProvider_CIProviderSpiConnectionSettings* settings,
        __x_ABI_CWindows_CDevices_CSpi_CProvider_CISpiDeviceProvider** result);

        END_INTERFACE
    } __x_ABI_CWindows_CDevices_CSpi_CProvider_CISpiControllerProviderVtbl;

    interface __x_ABI_CWindows_CDevices_CSpi_CProvider_CISpiControllerProvider
    {
        CONST_VTBL struct __x_ABI_CWindows_CDevices_CSpi_CProvider_CISpiControllerProviderVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSpi_CProvider_CISpiControllerProvider;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSpi_CProvider_CISpiControllerProvider_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CDevices_CSpi_CProvider_CISpiDeviceProvider_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CDevices_CSpi_CProvider_CISpiDeviceProvider_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CDevices_CSpi_CProvider_CISpiDeviceProviderVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CSpi_CProvider_CISpiDeviceProvider* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CSpi_CProvider_CISpiDeviceProvider* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CSpi_CProvider_CISpiDeviceProvider* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CSpi_CProvider_CISpiDeviceProvider* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CSpi_CProvider_CISpiDeviceProvider* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CSpi_CProvider_CISpiDeviceProvider* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_DeviceId)(__x_ABI_CWindows_CDevices_CSpi_CProvider_CISpiDeviceProvider* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_ConnectionSettings)(__x_ABI_CWindows_CDevices_CSpi_CProvider_CISpiDeviceProvider* This,
        __x_ABI_CWindows_CDevices_CSpi_CProvider_CIProviderSpiConnectionSettings** value);
    HRESULT (STDMETHODCALLTYPE* Write)(__x_ABI_CWindows_CDevices_CSpi_CProvider_CISpiDeviceProvider* This,
        UINT32 bufferLength,
        BYTE* buffer);
    HRESULT (STDMETHODCALLTYPE* Read)(__x_ABI_CWindows_CDevices_CSpi_CProvider_CISpiDeviceProvider* This,
        UINT32 bufferLength,
        BYTE* buffer);
    HRESULT (STDMETHODCALLTYPE* TransferSequential)(__x_ABI_CWindows_CDevices_CSpi_CProvider_CISpiDeviceProvider* This,
        UINT32 writeBufferLength,
        BYTE* writeBuffer,
        UINT32 readBufferLength,
        BYTE* readBuffer);
    HRESULT (STDMETHODCALLTYPE* TransferFullDuplex)(__x_ABI_CWindows_CDevices_CSpi_CProvider_CISpiDeviceProvider* This,
        UINT32 writeBufferLength,
        BYTE* writeBuffer,
        UINT32 readBufferLength,
        BYTE* readBuffer);

        END_INTERFACE
    } __x_ABI_CWindows_CDevices_CSpi_CProvider_CISpiDeviceProviderVtbl;

    interface __x_ABI_CWindows_CDevices_CSpi_CProvider_CISpiDeviceProvider
    {
        CONST_VTBL struct __x_ABI_CWindows_CDevices_CSpi_CProvider_CISpiDeviceProviderVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSpi_CProvider_CISpiDeviceProvider;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSpi_CProvider_CISpiDeviceProvider_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CDevices_CSpi_CProvider_CISpiProvider_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CDevices_CSpi_CProvider_CISpiProvider_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CDevices_CSpi_CProvider_CISpiProviderVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CSpi_CProvider_CISpiProvider* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CSpi_CProvider_CISpiProvider* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CSpi_CProvider_CISpiProvider* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CSpi_CProvider_CISpiProvider* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CSpi_CProvider_CISpiProvider* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CSpi_CProvider_CISpiProvider* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetControllersAsync)(__x_ABI_CWindows_CDevices_CSpi_CProvider_CISpiProvider* This,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CSpi__CProvider__CISpiControllerProvider** result);

        END_INTERFACE
    } __x_ABI_CWindows_CDevices_CSpi_CProvider_CISpiProviderVtbl;

    interface __x_ABI_CWindows_CDevices_CSpi_CProvider_CISpiProvider
    {
        CONST_VTBL struct __x_ABI_CWindows_CDevices_CSpi_CProvider_CISpiProviderVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSpi_CProvider_CISpiProvider;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSpi_CProvider_CISpiProvider_INTERFACE_DEFINED__) */
    

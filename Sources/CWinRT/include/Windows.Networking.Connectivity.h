// WARNING: Please don't edit this file. It was generated by Swift/WinRT v0.0.1

#pragma once
// Header files for imported files
#include <inspectable.h>
#include <EventToken.h>
#include <windowscontracts.h>
#include "Windows.Foundation.h"
#include "Windows.Networking.h"
#include "Windows.Storage.Streams.h"
// Importing Collections header
#include "Windows.Foundation.Collections.h"

/* Forward Declarations */
#ifndef ____x_ABI_CWindows_CNetworking_CConnectivity_CINetworkStatusChangedEventHandler_FWD_DEFINED__
#define ____x_ABI_CWindows_CNetworking_CConnectivity_CINetworkStatusChangedEventHandler_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CNetworking_CConnectivity_CINetworkStatusChangedEventHandler __x_ABI_CWindows_CNetworking_CConnectivity_CINetworkStatusChangedEventHandler;

#endif // ____x_ABI_CWindows_CNetworking_CConnectivity_CINetworkStatusChangedEventHandler_FWD_DEFINED__

    #ifndef ____x_ABI_CWindows_CNetworking_CConnectivity_CIAttributedNetworkUsage_FWD_DEFINED__
#define ____x_ABI_CWindows_CNetworking_CConnectivity_CIAttributedNetworkUsage_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CNetworking_CConnectivity_CIAttributedNetworkUsage __x_ABI_CWindows_CNetworking_CConnectivity_CIAttributedNetworkUsage;

#endif // ____x_ABI_CWindows_CNetworking_CConnectivity_CIAttributedNetworkUsage_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CNetworking_CConnectivity_CICellularApnContext_FWD_DEFINED__
#define ____x_ABI_CWindows_CNetworking_CConnectivity_CICellularApnContext_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CNetworking_CConnectivity_CICellularApnContext __x_ABI_CWindows_CNetworking_CConnectivity_CICellularApnContext;

#endif // ____x_ABI_CWindows_CNetworking_CConnectivity_CICellularApnContext_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CNetworking_CConnectivity_CICellularApnContext2_FWD_DEFINED__
#define ____x_ABI_CWindows_CNetworking_CConnectivity_CICellularApnContext2_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CNetworking_CConnectivity_CICellularApnContext2 __x_ABI_CWindows_CNetworking_CConnectivity_CICellularApnContext2;

#endif // ____x_ABI_CWindows_CNetworking_CConnectivity_CICellularApnContext2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionCost_FWD_DEFINED__
#define ____x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionCost_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionCost __x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionCost;

#endif // ____x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionCost_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionCost2_FWD_DEFINED__
#define ____x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionCost2_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionCost2 __x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionCost2;

#endif // ____x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionCost2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionProfile_FWD_DEFINED__
#define ____x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionProfile_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionProfile __x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionProfile;

#endif // ____x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionProfile_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionProfile2_FWD_DEFINED__
#define ____x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionProfile2_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionProfile2 __x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionProfile2;

#endif // ____x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionProfile2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionProfile3_FWD_DEFINED__
#define ____x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionProfile3_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionProfile3 __x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionProfile3;

#endif // ____x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionProfile3_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionProfile4_FWD_DEFINED__
#define ____x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionProfile4_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionProfile4 __x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionProfile4;

#endif // ____x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionProfile4_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionProfile5_FWD_DEFINED__
#define ____x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionProfile5_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionProfile5 __x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionProfile5;

#endif // ____x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionProfile5_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionProfileFilter_FWD_DEFINED__
#define ____x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionProfileFilter_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionProfileFilter __x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionProfileFilter;

#endif // ____x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionProfileFilter_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionProfileFilter2_FWD_DEFINED__
#define ____x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionProfileFilter2_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionProfileFilter2 __x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionProfileFilter2;

#endif // ____x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionProfileFilter2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionProfileFilter3_FWD_DEFINED__
#define ____x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionProfileFilter3_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionProfileFilter3 __x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionProfileFilter3;

#endif // ____x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionProfileFilter3_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionSession_FWD_DEFINED__
#define ____x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionSession_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionSession __x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionSession;

#endif // ____x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionSession_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CNetworking_CConnectivity_CIConnectivityInterval_FWD_DEFINED__
#define ____x_ABI_CWindows_CNetworking_CConnectivity_CIConnectivityInterval_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CNetworking_CConnectivity_CIConnectivityInterval __x_ABI_CWindows_CNetworking_CConnectivity_CIConnectivityInterval;

#endif // ____x_ABI_CWindows_CNetworking_CConnectivity_CIConnectivityInterval_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CNetworking_CConnectivity_CIConnectivityManagerStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CNetworking_CConnectivity_CIConnectivityManagerStatics_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CNetworking_CConnectivity_CIConnectivityManagerStatics __x_ABI_CWindows_CNetworking_CConnectivity_CIConnectivityManagerStatics;

#endif // ____x_ABI_CWindows_CNetworking_CConnectivity_CIConnectivityManagerStatics_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CNetworking_CConnectivity_CIDataPlanStatus_FWD_DEFINED__
#define ____x_ABI_CWindows_CNetworking_CConnectivity_CIDataPlanStatus_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CNetworking_CConnectivity_CIDataPlanStatus __x_ABI_CWindows_CNetworking_CConnectivity_CIDataPlanStatus;

#endif // ____x_ABI_CWindows_CNetworking_CConnectivity_CIDataPlanStatus_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CNetworking_CConnectivity_CIDataPlanUsage_FWD_DEFINED__
#define ____x_ABI_CWindows_CNetworking_CConnectivity_CIDataPlanUsage_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CNetworking_CConnectivity_CIDataPlanUsage __x_ABI_CWindows_CNetworking_CConnectivity_CIDataPlanUsage;

#endif // ____x_ABI_CWindows_CNetworking_CConnectivity_CIDataPlanUsage_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CNetworking_CConnectivity_CIDataUsage_FWD_DEFINED__
#define ____x_ABI_CWindows_CNetworking_CConnectivity_CIDataUsage_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CNetworking_CConnectivity_CIDataUsage __x_ABI_CWindows_CNetworking_CConnectivity_CIDataUsage;

#endif // ____x_ABI_CWindows_CNetworking_CConnectivity_CIDataUsage_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CNetworking_CConnectivity_CIIPInformation_FWD_DEFINED__
#define ____x_ABI_CWindows_CNetworking_CConnectivity_CIIPInformation_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CNetworking_CConnectivity_CIIPInformation __x_ABI_CWindows_CNetworking_CConnectivity_CIIPInformation;

#endif // ____x_ABI_CWindows_CNetworking_CConnectivity_CIIPInformation_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CNetworking_CConnectivity_CILanIdentifier_FWD_DEFINED__
#define ____x_ABI_CWindows_CNetworking_CConnectivity_CILanIdentifier_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CNetworking_CConnectivity_CILanIdentifier __x_ABI_CWindows_CNetworking_CConnectivity_CILanIdentifier;

#endif // ____x_ABI_CWindows_CNetworking_CConnectivity_CILanIdentifier_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CNetworking_CConnectivity_CILanIdentifierData_FWD_DEFINED__
#define ____x_ABI_CWindows_CNetworking_CConnectivity_CILanIdentifierData_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CNetworking_CConnectivity_CILanIdentifierData __x_ABI_CWindows_CNetworking_CConnectivity_CILanIdentifierData;

#endif // ____x_ABI_CWindows_CNetworking_CConnectivity_CILanIdentifierData_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CNetworking_CConnectivity_CINetworkAdapter_FWD_DEFINED__
#define ____x_ABI_CWindows_CNetworking_CConnectivity_CINetworkAdapter_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CNetworking_CConnectivity_CINetworkAdapter __x_ABI_CWindows_CNetworking_CConnectivity_CINetworkAdapter;

#endif // ____x_ABI_CWindows_CNetworking_CConnectivity_CINetworkAdapter_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CNetworking_CConnectivity_CINetworkInformationStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CNetworking_CConnectivity_CINetworkInformationStatics_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CNetworking_CConnectivity_CINetworkInformationStatics __x_ABI_CWindows_CNetworking_CConnectivity_CINetworkInformationStatics;

#endif // ____x_ABI_CWindows_CNetworking_CConnectivity_CINetworkInformationStatics_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CNetworking_CConnectivity_CINetworkInformationStatics2_FWD_DEFINED__
#define ____x_ABI_CWindows_CNetworking_CConnectivity_CINetworkInformationStatics2_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CNetworking_CConnectivity_CINetworkInformationStatics2 __x_ABI_CWindows_CNetworking_CConnectivity_CINetworkInformationStatics2;

#endif // ____x_ABI_CWindows_CNetworking_CConnectivity_CINetworkInformationStatics2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CNetworking_CConnectivity_CINetworkItem_FWD_DEFINED__
#define ____x_ABI_CWindows_CNetworking_CConnectivity_CINetworkItem_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CNetworking_CConnectivity_CINetworkItem __x_ABI_CWindows_CNetworking_CConnectivity_CINetworkItem;

#endif // ____x_ABI_CWindows_CNetworking_CConnectivity_CINetworkItem_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CNetworking_CConnectivity_CINetworkSecuritySettings_FWD_DEFINED__
#define ____x_ABI_CWindows_CNetworking_CConnectivity_CINetworkSecuritySettings_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CNetworking_CConnectivity_CINetworkSecuritySettings __x_ABI_CWindows_CNetworking_CConnectivity_CINetworkSecuritySettings;

#endif // ____x_ABI_CWindows_CNetworking_CConnectivity_CINetworkSecuritySettings_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CNetworking_CConnectivity_CINetworkStateChangeEventDetails_FWD_DEFINED__
#define ____x_ABI_CWindows_CNetworking_CConnectivity_CINetworkStateChangeEventDetails_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CNetworking_CConnectivity_CINetworkStateChangeEventDetails __x_ABI_CWindows_CNetworking_CConnectivity_CINetworkStateChangeEventDetails;

#endif // ____x_ABI_CWindows_CNetworking_CConnectivity_CINetworkStateChangeEventDetails_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CNetworking_CConnectivity_CINetworkStateChangeEventDetails2_FWD_DEFINED__
#define ____x_ABI_CWindows_CNetworking_CConnectivity_CINetworkStateChangeEventDetails2_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CNetworking_CConnectivity_CINetworkStateChangeEventDetails2 __x_ABI_CWindows_CNetworking_CConnectivity_CINetworkStateChangeEventDetails2;

#endif // ____x_ABI_CWindows_CNetworking_CConnectivity_CINetworkStateChangeEventDetails2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CNetworking_CConnectivity_CINetworkUsage_FWD_DEFINED__
#define ____x_ABI_CWindows_CNetworking_CConnectivity_CINetworkUsage_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CNetworking_CConnectivity_CINetworkUsage __x_ABI_CWindows_CNetworking_CConnectivity_CINetworkUsage;

#endif // ____x_ABI_CWindows_CNetworking_CConnectivity_CINetworkUsage_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CNetworking_CConnectivity_CIProviderNetworkUsage_FWD_DEFINED__
#define ____x_ABI_CWindows_CNetworking_CConnectivity_CIProviderNetworkUsage_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CNetworking_CConnectivity_CIProviderNetworkUsage __x_ABI_CWindows_CNetworking_CConnectivity_CIProviderNetworkUsage;

#endif // ____x_ABI_CWindows_CNetworking_CConnectivity_CIProviderNetworkUsage_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CNetworking_CConnectivity_CIProxyConfiguration_FWD_DEFINED__
#define ____x_ABI_CWindows_CNetworking_CConnectivity_CIProxyConfiguration_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CNetworking_CConnectivity_CIProxyConfiguration __x_ABI_CWindows_CNetworking_CConnectivity_CIProxyConfiguration;

#endif // ____x_ABI_CWindows_CNetworking_CConnectivity_CIProxyConfiguration_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CNetworking_CConnectivity_CIRoutePolicy_FWD_DEFINED__
#define ____x_ABI_CWindows_CNetworking_CConnectivity_CIRoutePolicy_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CNetworking_CConnectivity_CIRoutePolicy __x_ABI_CWindows_CNetworking_CConnectivity_CIRoutePolicy;

#endif // ____x_ABI_CWindows_CNetworking_CConnectivity_CIRoutePolicy_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CNetworking_CConnectivity_CIRoutePolicyFactory_FWD_DEFINED__
#define ____x_ABI_CWindows_CNetworking_CConnectivity_CIRoutePolicyFactory_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CNetworking_CConnectivity_CIRoutePolicyFactory __x_ABI_CWindows_CNetworking_CConnectivity_CIRoutePolicyFactory;

#endif // ____x_ABI_CWindows_CNetworking_CConnectivity_CIRoutePolicyFactory_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CNetworking_CConnectivity_CIWlanConnectionProfileDetails_FWD_DEFINED__
#define ____x_ABI_CWindows_CNetworking_CConnectivity_CIWlanConnectionProfileDetails_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CNetworking_CConnectivity_CIWlanConnectionProfileDetails __x_ABI_CWindows_CNetworking_CConnectivity_CIWlanConnectionProfileDetails;

#endif // ____x_ABI_CWindows_CNetworking_CConnectivity_CIWlanConnectionProfileDetails_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CNetworking_CConnectivity_CIWwanConnectionProfileDetails_FWD_DEFINED__
#define ____x_ABI_CWindows_CNetworking_CConnectivity_CIWwanConnectionProfileDetails_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CNetworking_CConnectivity_CIWwanConnectionProfileDetails __x_ABI_CWindows_CNetworking_CConnectivity_CIWwanConnectionProfileDetails;

#endif // ____x_ABI_CWindows_CNetworking_CConnectivity_CIWwanConnectionProfileDetails_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CNetworking_CConnectivity_CIWwanConnectionProfileDetails2_FWD_DEFINED__
#define ____x_ABI_CWindows_CNetworking_CConnectivity_CIWwanConnectionProfileDetails2_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CNetworking_CConnectivity_CIWwanConnectionProfileDetails2 __x_ABI_CWindows_CNetworking_CConnectivity_CIWwanConnectionProfileDetails2;

#endif // ____x_ABI_CWindows_CNetworking_CConnectivity_CIWwanConnectionProfileDetails2_FWD_DEFINED__

// Parameterized interface forward declarations (C)

// Collection interface definitions

#if !defined(____x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CConnectivity__CAttributedNetworkUsage_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CConnectivity__CAttributedNetworkUsage_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CConnectivity__CAttributedNetworkUsage __x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CConnectivity__CAttributedNetworkUsage;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CConnectivity__CAttributedNetworkUsage;

    typedef struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CConnectivity__CAttributedNetworkUsageVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CConnectivity__CAttributedNetworkUsage* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CConnectivity__CAttributedNetworkUsage* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CConnectivity__CAttributedNetworkUsage* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CConnectivity__CAttributedNetworkUsage* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CConnectivity__CAttributedNetworkUsage* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CConnectivity__CAttributedNetworkUsage* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Current)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CConnectivity__CAttributedNetworkUsage* This,
        __x_ABI_CWindows_CNetworking_CConnectivity_CIAttributedNetworkUsage** result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CConnectivity__CAttributedNetworkUsage* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CConnectivity__CAttributedNetworkUsage* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CConnectivity__CAttributedNetworkUsage* This,
        UINT32 itemsLength,
        __x_ABI_CWindows_CNetworking_CConnectivity_CIAttributedNetworkUsage** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CConnectivity__CAttributedNetworkUsageVtbl;

    interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CConnectivity__CAttributedNetworkUsage
    {
        CONST_VTBL struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CConnectivity__CAttributedNetworkUsageVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CConnectivity__CAttributedNetworkUsage_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CConnectivity__CAttributedNetworkUsage_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CConnectivity__CAttributedNetworkUsage_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CConnectivity__CAttributedNetworkUsage __x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CConnectivity__CAttributedNetworkUsage;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CConnectivity__CAttributedNetworkUsage;

    typedef struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CConnectivity__CAttributedNetworkUsageVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CConnectivity__CAttributedNetworkUsage* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CConnectivity__CAttributedNetworkUsage* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CConnectivity__CAttributedNetworkUsage* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CConnectivity__CAttributedNetworkUsage* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CConnectivity__CAttributedNetworkUsage* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CConnectivity__CAttributedNetworkUsage* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* First)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CConnectivity__CAttributedNetworkUsage* This,
        __x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CConnectivity__CAttributedNetworkUsage** result);

        END_INTERFACE
    } __x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CConnectivity__CAttributedNetworkUsageVtbl;

    interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CConnectivity__CAttributedNetworkUsage
    {
        CONST_VTBL struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CConnectivity__CAttributedNetworkUsageVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CConnectivity__CAttributedNetworkUsage_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CAttributedNetworkUsage_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CAttributedNetworkUsage_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CAttributedNetworkUsage __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CAttributedNetworkUsage;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CAttributedNetworkUsage;

    typedef struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CAttributedNetworkUsageVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CAttributedNetworkUsage* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CAttributedNetworkUsage* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CAttributedNetworkUsage* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CAttributedNetworkUsage* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CAttributedNetworkUsage* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CAttributedNetworkUsage* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CAttributedNetworkUsage* This,
        UINT32 index,
        __x_ABI_CWindows_CNetworking_CConnectivity_CIAttributedNetworkUsage** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CAttributedNetworkUsage* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CAttributedNetworkUsage* This,
        __x_ABI_CWindows_CNetworking_CConnectivity_CIAttributedNetworkUsage* value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CAttributedNetworkUsage* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        __x_ABI_CWindows_CNetworking_CConnectivity_CIAttributedNetworkUsage** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CAttributedNetworkUsageVtbl;

    interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CAttributedNetworkUsage
    {
        CONST_VTBL struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CAttributedNetworkUsageVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CAttributedNetworkUsage_INTERFACE_DEFINED__
    
typedef interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CAttributedNetworkUsage __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CAttributedNetworkUsage;

#if !defined(____x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CAttributedNetworkUsage_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CAttributedNetworkUsage_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CAttributedNetworkUsage __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CAttributedNetworkUsage;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CAttributedNetworkUsage;

    typedef struct __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CAttributedNetworkUsageVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CAttributedNetworkUsage* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CAttributedNetworkUsage* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CAttributedNetworkUsage* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CAttributedNetworkUsage* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CAttributedNetworkUsage* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CAttributedNetworkUsage* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* put_Completed)(__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CAttributedNetworkUsage* This,
        __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CAttributedNetworkUsage* handler);
    HRESULT (STDMETHODCALLTYPE* get_Completed)(__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CAttributedNetworkUsage* This,
        __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CAttributedNetworkUsage** result);
    HRESULT (STDMETHODCALLTYPE* GetResults)(__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CAttributedNetworkUsage* This,
        __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CAttributedNetworkUsage** result);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CAttributedNetworkUsageVtbl;

    interface __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CAttributedNetworkUsage
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CAttributedNetworkUsageVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CAttributedNetworkUsage_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CAttributedNetworkUsage_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CAttributedNetworkUsage_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CAttributedNetworkUsage __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CAttributedNetworkUsage;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CAttributedNetworkUsage;

    typedef struct __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CAttributedNetworkUsageVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CAttributedNetworkUsage* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CAttributedNetworkUsage* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CAttributedNetworkUsage* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CAttributedNetworkUsage* This,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CAttributedNetworkUsage* asyncInfo,
        enum __x_ABI_CWindows_CFoundation_CAsyncStatus asyncStatus);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CAttributedNetworkUsageVtbl;

    interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CAttributedNetworkUsage
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CAttributedNetworkUsageVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CAttributedNetworkUsage_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectionProfile_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectionProfile_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectionProfile __x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectionProfile;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectionProfile;

    typedef struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectionProfileVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectionProfile* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectionProfile* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectionProfile* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectionProfile* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectionProfile* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectionProfile* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Current)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectionProfile* This,
        __x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionProfile** result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectionProfile* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectionProfile* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectionProfile* This,
        UINT32 itemsLength,
        __x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionProfile** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectionProfileVtbl;

    interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectionProfile
    {
        CONST_VTBL struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectionProfileVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectionProfile_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectionProfile_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectionProfile_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectionProfile __x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectionProfile;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectionProfile;

    typedef struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectionProfileVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectionProfile* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectionProfile* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectionProfile* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectionProfile* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectionProfile* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectionProfile* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* First)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectionProfile* This,
        __x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectionProfile** result);

        END_INTERFACE
    } __x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectionProfileVtbl;

    interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectionProfile
    {
        CONST_VTBL struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectionProfileVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectionProfile_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectionProfile_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectionProfile_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectionProfile __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectionProfile;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectionProfile;

    typedef struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectionProfileVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectionProfile* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectionProfile* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectionProfile* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectionProfile* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectionProfile* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectionProfile* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectionProfile* This,
        UINT32 index,
        __x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionProfile** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectionProfile* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectionProfile* This,
        __x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionProfile* value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectionProfile* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        __x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionProfile** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectionProfileVtbl;

    interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectionProfile
    {
        CONST_VTBL struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectionProfileVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectionProfile_INTERFACE_DEFINED__
    
typedef interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectionProfile __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectionProfile;

#if !defined(____x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectionProfile_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectionProfile_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectionProfile __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectionProfile;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectionProfile;

    typedef struct __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectionProfileVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectionProfile* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectionProfile* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectionProfile* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectionProfile* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectionProfile* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectionProfile* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* put_Completed)(__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectionProfile* This,
        __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectionProfile* handler);
    HRESULT (STDMETHODCALLTYPE* get_Completed)(__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectionProfile* This,
        __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectionProfile** result);
    HRESULT (STDMETHODCALLTYPE* GetResults)(__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectionProfile* This,
        __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectionProfile** result);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectionProfileVtbl;

    interface __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectionProfile
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectionProfileVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectionProfile_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectionProfile_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectionProfile_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectionProfile __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectionProfile;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectionProfile;

    typedef struct __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectionProfileVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectionProfile* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectionProfile* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectionProfile* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectionProfile* This,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectionProfile* asyncInfo,
        enum __x_ABI_CWindows_CFoundation_CAsyncStatus asyncStatus);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectionProfileVtbl;

    interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectionProfile
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectionProfileVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectionProfile_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectivityInterval_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectivityInterval_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectivityInterval __x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectivityInterval;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectivityInterval;

    typedef struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectivityIntervalVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectivityInterval* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectivityInterval* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectivityInterval* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectivityInterval* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectivityInterval* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectivityInterval* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Current)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectivityInterval* This,
        __x_ABI_CWindows_CNetworking_CConnectivity_CIConnectivityInterval** result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectivityInterval* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectivityInterval* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectivityInterval* This,
        UINT32 itemsLength,
        __x_ABI_CWindows_CNetworking_CConnectivity_CIConnectivityInterval** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectivityIntervalVtbl;

    interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectivityInterval
    {
        CONST_VTBL struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectivityIntervalVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectivityInterval_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectivityInterval_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectivityInterval_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectivityInterval __x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectivityInterval;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectivityInterval;

    typedef struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectivityIntervalVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectivityInterval* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectivityInterval* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectivityInterval* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectivityInterval* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectivityInterval* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectivityInterval* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* First)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectivityInterval* This,
        __x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectivityInterval** result);

        END_INTERFACE
    } __x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectivityIntervalVtbl;

    interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectivityInterval
    {
        CONST_VTBL struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectivityIntervalVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectivityInterval_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectivityInterval_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectivityInterval_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectivityInterval __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectivityInterval;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectivityInterval;

    typedef struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectivityIntervalVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectivityInterval* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectivityInterval* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectivityInterval* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectivityInterval* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectivityInterval* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectivityInterval* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectivityInterval* This,
        UINT32 index,
        __x_ABI_CWindows_CNetworking_CConnectivity_CIConnectivityInterval** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectivityInterval* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectivityInterval* This,
        __x_ABI_CWindows_CNetworking_CConnectivity_CIConnectivityInterval* value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectivityInterval* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        __x_ABI_CWindows_CNetworking_CConnectivity_CIConnectivityInterval** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectivityIntervalVtbl;

    interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectivityInterval
    {
        CONST_VTBL struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectivityIntervalVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectivityInterval_INTERFACE_DEFINED__
    
typedef interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectivityInterval __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectivityInterval;

#if !defined(____x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectivityInterval_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectivityInterval_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectivityInterval __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectivityInterval;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectivityInterval;

    typedef struct __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectivityIntervalVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectivityInterval* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectivityInterval* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectivityInterval* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectivityInterval* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectivityInterval* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectivityInterval* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* put_Completed)(__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectivityInterval* This,
        __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectivityInterval* handler);
    HRESULT (STDMETHODCALLTYPE* get_Completed)(__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectivityInterval* This,
        __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectivityInterval** result);
    HRESULT (STDMETHODCALLTYPE* GetResults)(__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectivityInterval* This,
        __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectivityInterval** result);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectivityIntervalVtbl;

    interface __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectivityInterval
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectivityIntervalVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectivityInterval_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectivityInterval_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectivityInterval_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectivityInterval __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectivityInterval;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectivityInterval;

    typedef struct __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectivityIntervalVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectivityInterval* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectivityInterval* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectivityInterval* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectivityInterval* This,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectivityInterval* asyncInfo,
        enum __x_ABI_CWindows_CFoundation_CAsyncStatus asyncStatus);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectivityIntervalVtbl;

    interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectivityInterval
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectivityIntervalVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectivityInterval_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CConnectivity__CNetworkUsage_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CConnectivity__CNetworkUsage_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CConnectivity__CNetworkUsage __x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CConnectivity__CNetworkUsage;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CConnectivity__CNetworkUsage;

    typedef struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CConnectivity__CNetworkUsageVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CConnectivity__CNetworkUsage* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CConnectivity__CNetworkUsage* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CConnectivity__CNetworkUsage* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CConnectivity__CNetworkUsage* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CConnectivity__CNetworkUsage* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CConnectivity__CNetworkUsage* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Current)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CConnectivity__CNetworkUsage* This,
        __x_ABI_CWindows_CNetworking_CConnectivity_CINetworkUsage** result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CConnectivity__CNetworkUsage* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CConnectivity__CNetworkUsage* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CConnectivity__CNetworkUsage* This,
        UINT32 itemsLength,
        __x_ABI_CWindows_CNetworking_CConnectivity_CINetworkUsage** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CConnectivity__CNetworkUsageVtbl;

    interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CConnectivity__CNetworkUsage
    {
        CONST_VTBL struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CConnectivity__CNetworkUsageVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CConnectivity__CNetworkUsage_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CConnectivity__CNetworkUsage_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CConnectivity__CNetworkUsage_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CConnectivity__CNetworkUsage __x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CConnectivity__CNetworkUsage;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CConnectivity__CNetworkUsage;

    typedef struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CConnectivity__CNetworkUsageVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CConnectivity__CNetworkUsage* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CConnectivity__CNetworkUsage* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CConnectivity__CNetworkUsage* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CConnectivity__CNetworkUsage* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CConnectivity__CNetworkUsage* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CConnectivity__CNetworkUsage* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* First)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CConnectivity__CNetworkUsage* This,
        __x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CConnectivity__CNetworkUsage** result);

        END_INTERFACE
    } __x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CConnectivity__CNetworkUsageVtbl;

    interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CConnectivity__CNetworkUsage
    {
        CONST_VTBL struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CConnectivity__CNetworkUsageVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CConnectivity__CNetworkUsage_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CNetworkUsage_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CNetworkUsage_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CNetworkUsage __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CNetworkUsage;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CNetworkUsage;

    typedef struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CNetworkUsageVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CNetworkUsage* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CNetworkUsage* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CNetworkUsage* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CNetworkUsage* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CNetworkUsage* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CNetworkUsage* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CNetworkUsage* This,
        UINT32 index,
        __x_ABI_CWindows_CNetworking_CConnectivity_CINetworkUsage** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CNetworkUsage* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CNetworkUsage* This,
        __x_ABI_CWindows_CNetworking_CConnectivity_CINetworkUsage* value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CNetworkUsage* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        __x_ABI_CWindows_CNetworking_CConnectivity_CINetworkUsage** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CNetworkUsageVtbl;

    interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CNetworkUsage
    {
        CONST_VTBL struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CNetworkUsageVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CNetworkUsage_INTERFACE_DEFINED__
    
typedef interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CNetworkUsage __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CNetworkUsage;

#if !defined(____x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CNetworkUsage_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CNetworkUsage_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CNetworkUsage __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CNetworkUsage;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CNetworkUsage;

    typedef struct __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CNetworkUsageVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CNetworkUsage* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CNetworkUsage* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CNetworkUsage* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CNetworkUsage* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CNetworkUsage* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CNetworkUsage* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* put_Completed)(__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CNetworkUsage* This,
        __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CNetworkUsage* handler);
    HRESULT (STDMETHODCALLTYPE* get_Completed)(__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CNetworkUsage* This,
        __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CNetworkUsage** result);
    HRESULT (STDMETHODCALLTYPE* GetResults)(__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CNetworkUsage* This,
        __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CNetworkUsage** result);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CNetworkUsageVtbl;

    interface __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CNetworkUsage
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CNetworkUsageVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CNetworkUsage_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CNetworkUsage_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CNetworkUsage_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CNetworkUsage __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CNetworkUsage;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CNetworkUsage;

    typedef struct __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CNetworkUsageVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CNetworkUsage* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CNetworkUsage* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CNetworkUsage* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CNetworkUsage* This,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CNetworkUsage* asyncInfo,
        enum __x_ABI_CWindows_CFoundation_CAsyncStatus asyncStatus);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CNetworkUsageVtbl;

    interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CNetworkUsage
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CNetworkUsageVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CNetworkUsage_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CConnectivity__CProviderNetworkUsage_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CConnectivity__CProviderNetworkUsage_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CConnectivity__CProviderNetworkUsage __x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CConnectivity__CProviderNetworkUsage;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CConnectivity__CProviderNetworkUsage;

    typedef struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CConnectivity__CProviderNetworkUsageVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CConnectivity__CProviderNetworkUsage* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CConnectivity__CProviderNetworkUsage* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CConnectivity__CProviderNetworkUsage* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CConnectivity__CProviderNetworkUsage* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CConnectivity__CProviderNetworkUsage* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CConnectivity__CProviderNetworkUsage* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Current)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CConnectivity__CProviderNetworkUsage* This,
        __x_ABI_CWindows_CNetworking_CConnectivity_CIProviderNetworkUsage** result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CConnectivity__CProviderNetworkUsage* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CConnectivity__CProviderNetworkUsage* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CConnectivity__CProviderNetworkUsage* This,
        UINT32 itemsLength,
        __x_ABI_CWindows_CNetworking_CConnectivity_CIProviderNetworkUsage** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CConnectivity__CProviderNetworkUsageVtbl;

    interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CConnectivity__CProviderNetworkUsage
    {
        CONST_VTBL struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CConnectivity__CProviderNetworkUsageVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CConnectivity__CProviderNetworkUsage_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CConnectivity__CProviderNetworkUsage_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CConnectivity__CProviderNetworkUsage_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CConnectivity__CProviderNetworkUsage __x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CConnectivity__CProviderNetworkUsage;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CConnectivity__CProviderNetworkUsage;

    typedef struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CConnectivity__CProviderNetworkUsageVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CConnectivity__CProviderNetworkUsage* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CConnectivity__CProviderNetworkUsage* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CConnectivity__CProviderNetworkUsage* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CConnectivity__CProviderNetworkUsage* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CConnectivity__CProviderNetworkUsage* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CConnectivity__CProviderNetworkUsage* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* First)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CConnectivity__CProviderNetworkUsage* This,
        __x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CConnectivity__CProviderNetworkUsage** result);

        END_INTERFACE
    } __x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CConnectivity__CProviderNetworkUsageVtbl;

    interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CConnectivity__CProviderNetworkUsage
    {
        CONST_VTBL struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CConnectivity__CProviderNetworkUsageVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CConnectivity__CProviderNetworkUsage_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CProviderNetworkUsage_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CProviderNetworkUsage_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CProviderNetworkUsage __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CProviderNetworkUsage;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CProviderNetworkUsage;

    typedef struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CProviderNetworkUsageVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CProviderNetworkUsage* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CProviderNetworkUsage* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CProviderNetworkUsage* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CProviderNetworkUsage* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CProviderNetworkUsage* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CProviderNetworkUsage* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CProviderNetworkUsage* This,
        UINT32 index,
        __x_ABI_CWindows_CNetworking_CConnectivity_CIProviderNetworkUsage** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CProviderNetworkUsage* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CProviderNetworkUsage* This,
        __x_ABI_CWindows_CNetworking_CConnectivity_CIProviderNetworkUsage* value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CProviderNetworkUsage* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        __x_ABI_CWindows_CNetworking_CConnectivity_CIProviderNetworkUsage** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CProviderNetworkUsageVtbl;

    interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CProviderNetworkUsage
    {
        CONST_VTBL struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CProviderNetworkUsageVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CProviderNetworkUsage_INTERFACE_DEFINED__
    
typedef interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CProviderNetworkUsage __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CProviderNetworkUsage;

#if !defined(____x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CProviderNetworkUsage_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CProviderNetworkUsage_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CProviderNetworkUsage __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CProviderNetworkUsage;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CProviderNetworkUsage;

    typedef struct __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CProviderNetworkUsageVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CProviderNetworkUsage* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CProviderNetworkUsage* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CProviderNetworkUsage* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CProviderNetworkUsage* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CProviderNetworkUsage* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CProviderNetworkUsage* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* put_Completed)(__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CProviderNetworkUsage* This,
        __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CProviderNetworkUsage* handler);
    HRESULT (STDMETHODCALLTYPE* get_Completed)(__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CProviderNetworkUsage* This,
        __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CProviderNetworkUsage** result);
    HRESULT (STDMETHODCALLTYPE* GetResults)(__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CProviderNetworkUsage* This,
        __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CProviderNetworkUsage** result);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CProviderNetworkUsageVtbl;

    interface __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CProviderNetworkUsage
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CProviderNetworkUsageVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CProviderNetworkUsage_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CProviderNetworkUsage_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CProviderNetworkUsage_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CProviderNetworkUsage __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CProviderNetworkUsage;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CProviderNetworkUsage;

    typedef struct __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CProviderNetworkUsageVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CProviderNetworkUsage* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CProviderNetworkUsage* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CProviderNetworkUsage* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CProviderNetworkUsage* This,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CProviderNetworkUsage* asyncInfo,
        enum __x_ABI_CWindows_CFoundation_CAsyncStatus asyncStatus);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CProviderNetworkUsageVtbl;

    interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CProviderNetworkUsage
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CProviderNetworkUsageVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CProviderNetworkUsage_INTERFACE_DEFINED__
    
typedef interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectionProfile __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectionProfile;

#if !defined(____x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectionProfile_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectionProfile_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectionProfile __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectionProfile;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectionProfile;

    typedef struct __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectionProfileVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectionProfile* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectionProfile* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectionProfile* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectionProfile* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectionProfile* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectionProfile* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* put_Completed)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectionProfile* This,
        __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectionProfile* handler);
    HRESULT (STDMETHODCALLTYPE* get_Completed)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectionProfile* This,
        __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectionProfile** result);
    HRESULT (STDMETHODCALLTYPE* GetResults)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectionProfile* This,
        __x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionProfile** result);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectionProfileVtbl;

    interface __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectionProfile
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectionProfileVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectionProfile_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectionProfile_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectionProfile_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectionProfile __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectionProfile;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectionProfile;

    typedef struct __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectionProfileVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectionProfile* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectionProfile* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectionProfile* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectionProfile* This,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectionProfile* asyncInfo,
        enum __x_ABI_CWindows_CFoundation_CAsyncStatus asyncStatus);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectionProfileVtbl;

    interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectionProfile
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectionProfileVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectionProfile_INTERFACE_DEFINED__
    
typedef enum __x_ABI_CWindows_CNetworking_CConnectivity_CConnectionProfileDeleteStatus __x_ABI_CWindows_CNetworking_CConnectivity_CConnectionProfileDeleteStatus;

typedef interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectionProfileDeleteStatus __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectionProfileDeleteStatus;

#if !defined(____x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectionProfileDeleteStatus_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectionProfileDeleteStatus_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectionProfileDeleteStatus __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectionProfileDeleteStatus;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectionProfileDeleteStatus;

    typedef struct __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectionProfileDeleteStatusVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectionProfileDeleteStatus* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectionProfileDeleteStatus* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectionProfileDeleteStatus* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectionProfileDeleteStatus* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectionProfileDeleteStatus* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectionProfileDeleteStatus* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* put_Completed)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectionProfileDeleteStatus* This,
        __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectionProfileDeleteStatus* handler);
    HRESULT (STDMETHODCALLTYPE* get_Completed)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectionProfileDeleteStatus* This,
        __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectionProfileDeleteStatus** result);
    HRESULT (STDMETHODCALLTYPE* GetResults)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectionProfileDeleteStatus* This,
        enum __x_ABI_CWindows_CNetworking_CConnectivity_CConnectionProfileDeleteStatus* result);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectionProfileDeleteStatusVtbl;

    interface __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectionProfileDeleteStatus
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectionProfileDeleteStatusVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectionProfileDeleteStatus_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectionProfileDeleteStatus_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectionProfileDeleteStatus_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectionProfileDeleteStatus __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectionProfileDeleteStatus;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectionProfileDeleteStatus;

    typedef struct __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectionProfileDeleteStatusVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectionProfileDeleteStatus* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectionProfileDeleteStatus* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectionProfileDeleteStatus* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectionProfileDeleteStatus* This,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectionProfileDeleteStatus* asyncInfo,
        enum __x_ABI_CWindows_CFoundation_CAsyncStatus asyncStatus);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectionProfileDeleteStatusVtbl;

    interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectionProfileDeleteStatus
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectionProfileDeleteStatusVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectionProfileDeleteStatus_INTERFACE_DEFINED__
    
typedef interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectionSession __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectionSession;

#if !defined(____x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectionSession_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectionSession_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectionSession __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectionSession;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectionSession;

    typedef struct __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectionSessionVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectionSession* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectionSession* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectionSession* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectionSession* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectionSession* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectionSession* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* put_Completed)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectionSession* This,
        __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectionSession* handler);
    HRESULT (STDMETHODCALLTYPE* get_Completed)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectionSession* This,
        __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectionSession** result);
    HRESULT (STDMETHODCALLTYPE* GetResults)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectionSession* This,
        __x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionSession** result);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectionSessionVtbl;

    interface __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectionSession
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectionSessionVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectionSession_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectionSession_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectionSession_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectionSession __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectionSession;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectionSession;

    typedef struct __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectionSessionVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectionSession* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectionSession* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectionSession* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectionSession* This,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectionSession* asyncInfo,
        enum __x_ABI_CWindows_CFoundation_CAsyncStatus asyncStatus);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectionSessionVtbl;

    interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectionSession
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectionSessionVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectionSession_INTERFACE_DEFINED__
    
typedef interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CNetworking__CConnectivity__CProxyConfiguration __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CNetworking__CConnectivity__CProxyConfiguration;

#if !defined(____x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CNetworking__CConnectivity__CProxyConfiguration_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CNetworking__CConnectivity__CProxyConfiguration_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CNetworking__CConnectivity__CProxyConfiguration __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CNetworking__CConnectivity__CProxyConfiguration;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CNetworking__CConnectivity__CProxyConfiguration;

    typedef struct __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CNetworking__CConnectivity__CProxyConfigurationVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CNetworking__CConnectivity__CProxyConfiguration* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CNetworking__CConnectivity__CProxyConfiguration* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CNetworking__CConnectivity__CProxyConfiguration* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CNetworking__CConnectivity__CProxyConfiguration* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CNetworking__CConnectivity__CProxyConfiguration* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CNetworking__CConnectivity__CProxyConfiguration* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* put_Completed)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CNetworking__CConnectivity__CProxyConfiguration* This,
        __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CNetworking__CConnectivity__CProxyConfiguration* handler);
    HRESULT (STDMETHODCALLTYPE* get_Completed)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CNetworking__CConnectivity__CProxyConfiguration* This,
        __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CNetworking__CConnectivity__CProxyConfiguration** result);
    HRESULT (STDMETHODCALLTYPE* GetResults)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CNetworking__CConnectivity__CProxyConfiguration* This,
        __x_ABI_CWindows_CNetworking_CConnectivity_CIProxyConfiguration** result);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CNetworking__CConnectivity__CProxyConfigurationVtbl;

    interface __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CNetworking__CConnectivity__CProxyConfiguration
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CNetworking__CConnectivity__CProxyConfigurationVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CNetworking__CConnectivity__CProxyConfiguration_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CNetworking__CConnectivity__CProxyConfiguration_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CNetworking__CConnectivity__CProxyConfiguration_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CNetworking__CConnectivity__CProxyConfiguration __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CNetworking__CConnectivity__CProxyConfiguration;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CNetworking__CConnectivity__CProxyConfiguration;

    typedef struct __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CNetworking__CConnectivity__CProxyConfigurationVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CNetworking__CConnectivity__CProxyConfiguration* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CNetworking__CConnectivity__CProxyConfiguration* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CNetworking__CConnectivity__CProxyConfiguration* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CNetworking__CConnectivity__CProxyConfiguration* This,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CNetworking__CConnectivity__CProxyConfiguration* asyncInfo,
        enum __x_ABI_CWindows_CFoundation_CAsyncStatus asyncStatus);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CNetworking__CConnectivity__CProxyConfigurationVtbl;

    interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CNetworking__CConnectivity__CProxyConfiguration
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CNetworking__CConnectivity__CProxyConfigurationVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CNetworking__CConnectivity__CProxyConfiguration_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterator_1_GUID_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterator_1_GUID_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterator_1_GUID __x_ABI_C__FIIterator_1_GUID;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterator_1_GUID;

    typedef struct __x_ABI_C__FIIterator_1_GUIDVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterator_1_GUID* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterator_1_GUID* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterator_1_GUID* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterator_1_GUID* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterator_1_GUID* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterator_1_GUID* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Current)(__x_ABI_C__FIIterator_1_GUID* This,
        GUID* result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__x_ABI_C__FIIterator_1_GUID* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__x_ABI_C__FIIterator_1_GUID* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIIterator_1_GUID* This,
        UINT32 itemsLength,
        GUID* items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIIterator_1_GUIDVtbl;

    interface __x_ABI_C__FIIterator_1_GUID
    {
        CONST_VTBL struct __x_ABI_C__FIIterator_1_GUIDVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterator_1_GUID_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterable_1_GUID_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterable_1_GUID_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterable_1_GUID __x_ABI_C__FIIterable_1_GUID;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterable_1_GUID;

    typedef struct __x_ABI_C__FIIterable_1_GUIDVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterable_1_GUID* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterable_1_GUID* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterable_1_GUID* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterable_1_GUID* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterable_1_GUID* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterable_1_GUID* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* First)(__x_ABI_C__FIIterable_1_GUID* This,
        __x_ABI_C__FIIterator_1_GUID** result);

        END_INTERFACE
    } __x_ABI_C__FIIterable_1_GUIDVtbl;

    interface __x_ABI_C__FIIterable_1_GUID
    {
        CONST_VTBL struct __x_ABI_C__FIIterable_1_GUIDVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterable_1_GUID_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterator_1_HSTRING_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterator_1_HSTRING_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterator_1_HSTRING __x_ABI_C__FIIterator_1_HSTRING;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterator_1_HSTRING;

    typedef struct __x_ABI_C__FIIterator_1_HSTRINGVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterator_1_HSTRING* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterator_1_HSTRING* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterator_1_HSTRING* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterator_1_HSTRING* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterator_1_HSTRING* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterator_1_HSTRING* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Current)(__x_ABI_C__FIIterator_1_HSTRING* This,
        HSTRING* result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__x_ABI_C__FIIterator_1_HSTRING* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__x_ABI_C__FIIterator_1_HSTRING* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIIterator_1_HSTRING* This,
        UINT32 itemsLength,
        HSTRING* items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIIterator_1_HSTRINGVtbl;

    interface __x_ABI_C__FIIterator_1_HSTRING
    {
        CONST_VTBL struct __x_ABI_C__FIIterator_1_HSTRINGVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterator_1_HSTRING_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterable_1_HSTRING_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterable_1_HSTRING_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterable_1_HSTRING __x_ABI_C__FIIterable_1_HSTRING;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterable_1_HSTRING;

    typedef struct __x_ABI_C__FIIterable_1_HSTRINGVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterable_1_HSTRING* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterable_1_HSTRING* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterable_1_HSTRING* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterable_1_HSTRING* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterable_1_HSTRING* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterable_1_HSTRING* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* First)(__x_ABI_C__FIIterable_1_HSTRING* This,
        __x_ABI_C__FIIterator_1_HSTRING** result);

        END_INTERFACE
    } __x_ABI_C__FIIterable_1_HSTRINGVtbl;

    interface __x_ABI_C__FIIterable_1_HSTRING
    {
        CONST_VTBL struct __x_ABI_C__FIIterable_1_HSTRINGVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterable_1_HSTRING_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterator_1_byte_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterator_1_byte_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterator_1_byte __x_ABI_C__FIIterator_1_byte;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterator_1_byte;

    typedef struct __x_ABI_C__FIIterator_1_byteVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterator_1_byte* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterator_1_byte* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterator_1_byte* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterator_1_byte* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterator_1_byte* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterator_1_byte* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Current)(__x_ABI_C__FIIterator_1_byte* This,
        BYTE* result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__x_ABI_C__FIIterator_1_byte* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__x_ABI_C__FIIterator_1_byte* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIIterator_1_byte* This,
        UINT32 itemsLength,
        BYTE* items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIIterator_1_byteVtbl;

    interface __x_ABI_C__FIIterator_1_byte
    {
        CONST_VTBL struct __x_ABI_C__FIIterator_1_byteVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterator_1_byte_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterable_1_byte_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterable_1_byte_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterable_1_byte __x_ABI_C__FIIterable_1_byte;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterable_1_byte;

    typedef struct __x_ABI_C__FIIterable_1_byteVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterable_1_byte* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterable_1_byte* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterable_1_byte* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterable_1_byte* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterable_1_byte* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterable_1_byte* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* First)(__x_ABI_C__FIIterable_1_byte* This,
        __x_ABI_C__FIIterator_1_byte** result);

        END_INTERFACE
    } __x_ABI_C__FIIterable_1_byteVtbl;

    interface __x_ABI_C__FIIterable_1_byte
    {
        CONST_VTBL struct __x_ABI_C__FIIterable_1_byteVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterable_1_byte_INTERFACE_DEFINED__
    
#ifndef ____x_ABI_CWindows_CFoundation_CIUriRuntimeClass_FWD_DEFINED__
#define ____x_ABI_CWindows_CFoundation_CIUriRuntimeClass_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CFoundation_CIUriRuntimeClass __x_ABI_CWindows_CFoundation_CIUriRuntimeClass;

#endif // ____x_ABI_CWindows_CFoundation_CIUriRuntimeClass_FWD_DEFINED__

#if !defined(____x_ABI_C__FIIterator_1___x_ABI_CWindows__CFoundation__CUri_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CFoundation__CUri_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CFoundation__CUri __x_ABI_C__FIIterator_1___x_ABI_CWindows__CFoundation__CUri;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterator_1___x_ABI_CWindows__CFoundation__CUri;

    typedef struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CFoundation__CUriVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CFoundation__CUri* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CFoundation__CUri* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CFoundation__CUri* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CFoundation__CUri* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CFoundation__CUri* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CFoundation__CUri* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Current)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CFoundation__CUri* This,
        __x_ABI_CWindows_CFoundation_CIUriRuntimeClass** result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CFoundation__CUri* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CFoundation__CUri* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CFoundation__CUri* This,
        UINT32 itemsLength,
        __x_ABI_CWindows_CFoundation_CIUriRuntimeClass** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIIterator_1___x_ABI_CWindows__CFoundation__CUriVtbl;

    interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CFoundation__CUri
    {
        CONST_VTBL struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CFoundation__CUriVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CFoundation__CUri_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterable_1___x_ABI_CWindows__CFoundation__CUri_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CFoundation__CUri_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CFoundation__CUri __x_ABI_C__FIIterable_1___x_ABI_CWindows__CFoundation__CUri;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterable_1___x_ABI_CWindows__CFoundation__CUri;

    typedef struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CFoundation__CUriVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CFoundation__CUri* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CFoundation__CUri* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CFoundation__CUri* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CFoundation__CUri* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CFoundation__CUri* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CFoundation__CUri* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* First)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CFoundation__CUri* This,
        __x_ABI_C__FIIterator_1___x_ABI_CWindows__CFoundation__CUri** result);

        END_INTERFACE
    } __x_ABI_C__FIIterable_1___x_ABI_CWindows__CFoundation__CUriVtbl;

    interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CFoundation__CUri
    {
        CONST_VTBL struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CFoundation__CUriVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CFoundation__CUri_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CConnectivity__CLanIdentifier_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CConnectivity__CLanIdentifier_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CConnectivity__CLanIdentifier __x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CConnectivity__CLanIdentifier;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CConnectivity__CLanIdentifier;

    typedef struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CConnectivity__CLanIdentifierVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CConnectivity__CLanIdentifier* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CConnectivity__CLanIdentifier* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CConnectivity__CLanIdentifier* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CConnectivity__CLanIdentifier* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CConnectivity__CLanIdentifier* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CConnectivity__CLanIdentifier* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Current)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CConnectivity__CLanIdentifier* This,
        __x_ABI_CWindows_CNetworking_CConnectivity_CILanIdentifier** result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CConnectivity__CLanIdentifier* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CConnectivity__CLanIdentifier* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CConnectivity__CLanIdentifier* This,
        UINT32 itemsLength,
        __x_ABI_CWindows_CNetworking_CConnectivity_CILanIdentifier** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CConnectivity__CLanIdentifierVtbl;

    interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CConnectivity__CLanIdentifier
    {
        CONST_VTBL struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CConnectivity__CLanIdentifierVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CConnectivity__CLanIdentifier_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CConnectivity__CLanIdentifier_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CConnectivity__CLanIdentifier_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CConnectivity__CLanIdentifier __x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CConnectivity__CLanIdentifier;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CConnectivity__CLanIdentifier;

    typedef struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CConnectivity__CLanIdentifierVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CConnectivity__CLanIdentifier* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CConnectivity__CLanIdentifier* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CConnectivity__CLanIdentifier* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CConnectivity__CLanIdentifier* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CConnectivity__CLanIdentifier* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CConnectivity__CLanIdentifier* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* First)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CConnectivity__CLanIdentifier* This,
        __x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CConnectivity__CLanIdentifier** result);

        END_INTERFACE
    } __x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CConnectivity__CLanIdentifierVtbl;

    interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CConnectivity__CLanIdentifier
    {
        CONST_VTBL struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CConnectivity__CLanIdentifierVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CConnectivity__CLanIdentifier_INTERFACE_DEFINED__
    
#ifndef ____x_ABI_CWindows_CNetworking_CIEndpointPair_FWD_DEFINED__
#define ____x_ABI_CWindows_CNetworking_CIEndpointPair_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CNetworking_CIEndpointPair __x_ABI_CWindows_CNetworking_CIEndpointPair;

#endif // ____x_ABI_CWindows_CNetworking_CIEndpointPair_FWD_DEFINED__

#if !defined(____x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CEndpointPair_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CEndpointPair_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CEndpointPair __x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CEndpointPair;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CEndpointPair;

    typedef struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CEndpointPairVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CEndpointPair* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CEndpointPair* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CEndpointPair* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CEndpointPair* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CEndpointPair* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CEndpointPair* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Current)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CEndpointPair* This,
        __x_ABI_CWindows_CNetworking_CIEndpointPair** result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CEndpointPair* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CEndpointPair* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CEndpointPair* This,
        UINT32 itemsLength,
        __x_ABI_CWindows_CNetworking_CIEndpointPair** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CEndpointPairVtbl;

    interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CEndpointPair
    {
        CONST_VTBL struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CEndpointPairVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CEndpointPair_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CEndpointPair_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CEndpointPair_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CEndpointPair __x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CEndpointPair;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CEndpointPair;

    typedef struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CEndpointPairVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CEndpointPair* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CEndpointPair* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CEndpointPair* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CEndpointPair* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CEndpointPair* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CEndpointPair* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* First)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CEndpointPair* This,
        __x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CEndpointPair** result);

        END_INTERFACE
    } __x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CEndpointPairVtbl;

    interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CEndpointPair
    {
        CONST_VTBL struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CEndpointPairVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CEndpointPair_INTERFACE_DEFINED__
    
#ifndef ____x_ABI_CWindows_CNetworking_CIHostName_FWD_DEFINED__
#define ____x_ABI_CWindows_CNetworking_CIHostName_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CNetworking_CIHostName __x_ABI_CWindows_CNetworking_CIHostName;

#endif // ____x_ABI_CWindows_CNetworking_CIHostName_FWD_DEFINED__

#if !defined(____x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CHostName_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CHostName_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CHostName __x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CHostName;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CHostName;

    typedef struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CHostNameVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CHostName* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CHostName* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CHostName* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CHostName* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CHostName* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CHostName* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Current)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CHostName* This,
        __x_ABI_CWindows_CNetworking_CIHostName** result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CHostName* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CHostName* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CHostName* This,
        UINT32 itemsLength,
        __x_ABI_CWindows_CNetworking_CIHostName** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CHostNameVtbl;

    interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CHostName
    {
        CONST_VTBL struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CHostNameVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CHostName_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CHostName_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CHostName_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CHostName __x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CHostName;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CHostName;

    typedef struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CHostNameVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CHostName* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CHostName* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CHostName* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CHostName* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CHostName* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CHostName* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* First)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CHostName* This,
        __x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CHostName** result);

        END_INTERFACE
    } __x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CHostNameVtbl;

    interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CHostName
    {
        CONST_VTBL struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CHostNameVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CHostName_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVectorView_1_GUID_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVectorView_1_GUID_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVectorView_1_GUID __x_ABI_C__FIVectorView_1_GUID;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVectorView_1_GUID;

    typedef struct __x_ABI_C__FIVectorView_1_GUIDVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVectorView_1_GUID* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVectorView_1_GUID* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVectorView_1_GUID* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVectorView_1_GUID* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVectorView_1_GUID* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVectorView_1_GUID* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVectorView_1_GUID* This,
        UINT32 index,
        GUID* result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVectorView_1_GUID* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVectorView_1_GUID* This,
        GUID value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVectorView_1_GUID* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        GUID* items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIVectorView_1_GUIDVtbl;

    interface __x_ABI_C__FIVectorView_1_GUID
    {
        CONST_VTBL struct __x_ABI_C__FIVectorView_1_GUIDVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVectorView_1_GUID_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVectorView_1_HSTRING_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVectorView_1_HSTRING_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVectorView_1_HSTRING __x_ABI_C__FIVectorView_1_HSTRING;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVectorView_1_HSTRING;

    typedef struct __x_ABI_C__FIVectorView_1_HSTRINGVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVectorView_1_HSTRING* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVectorView_1_HSTRING* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVectorView_1_HSTRING* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVectorView_1_HSTRING* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVectorView_1_HSTRING* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVectorView_1_HSTRING* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVectorView_1_HSTRING* This,
        UINT32 index,
        HSTRING* result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVectorView_1_HSTRING* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVectorView_1_HSTRING* This,
        HSTRING value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVectorView_1_HSTRING* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        HSTRING* items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIVectorView_1_HSTRINGVtbl;

    interface __x_ABI_C__FIVectorView_1_HSTRING
    {
        CONST_VTBL struct __x_ABI_C__FIVectorView_1_HSTRINGVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVectorView_1_HSTRING_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVectorView_1_byte_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVectorView_1_byte_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVectorView_1_byte __x_ABI_C__FIVectorView_1_byte;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVectorView_1_byte;

    typedef struct __x_ABI_C__FIVectorView_1_byteVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVectorView_1_byte* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVectorView_1_byte* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVectorView_1_byte* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVectorView_1_byte* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVectorView_1_byte* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVectorView_1_byte* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVectorView_1_byte* This,
        UINT32 index,
        BYTE* result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVectorView_1_byte* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVectorView_1_byte* This,
        BYTE value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVectorView_1_byte* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        BYTE* items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIVectorView_1_byteVtbl;

    interface __x_ABI_C__FIVectorView_1_byte
    {
        CONST_VTBL struct __x_ABI_C__FIVectorView_1_byteVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVectorView_1_byte_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CFoundation__CUri_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CFoundation__CUri_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CFoundation__CUri __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CFoundation__CUri;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CFoundation__CUri;

    typedef struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CFoundation__CUriVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CFoundation__CUri* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CFoundation__CUri* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CFoundation__CUri* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CFoundation__CUri* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CFoundation__CUri* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CFoundation__CUri* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CFoundation__CUri* This,
        UINT32 index,
        __x_ABI_CWindows_CFoundation_CIUriRuntimeClass** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CFoundation__CUri* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CFoundation__CUri* This,
        __x_ABI_CWindows_CFoundation_CIUriRuntimeClass* value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CFoundation__CUri* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        __x_ABI_CWindows_CFoundation_CIUriRuntimeClass** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CFoundation__CUriVtbl;

    interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CFoundation__CUri
    {
        CONST_VTBL struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CFoundation__CUriVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CFoundation__CUri_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CLanIdentifier_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CLanIdentifier_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CLanIdentifier __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CLanIdentifier;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CLanIdentifier;

    typedef struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CLanIdentifierVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CLanIdentifier* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CLanIdentifier* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CLanIdentifier* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CLanIdentifier* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CLanIdentifier* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CLanIdentifier* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CLanIdentifier* This,
        UINT32 index,
        __x_ABI_CWindows_CNetworking_CConnectivity_CILanIdentifier** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CLanIdentifier* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CLanIdentifier* This,
        __x_ABI_CWindows_CNetworking_CConnectivity_CILanIdentifier* value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CLanIdentifier* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        __x_ABI_CWindows_CNetworking_CConnectivity_CILanIdentifier** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CLanIdentifierVtbl;

    interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CLanIdentifier
    {
        CONST_VTBL struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CLanIdentifierVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CLanIdentifier_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CEndpointPair_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CEndpointPair_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CEndpointPair __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CEndpointPair;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CEndpointPair;

    typedef struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CEndpointPairVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CEndpointPair* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CEndpointPair* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CEndpointPair* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CEndpointPair* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CEndpointPair* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CEndpointPair* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CEndpointPair* This,
        UINT32 index,
        __x_ABI_CWindows_CNetworking_CIEndpointPair** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CEndpointPair* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CEndpointPair* This,
        __x_ABI_CWindows_CNetworking_CIEndpointPair* value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CEndpointPair* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        __x_ABI_CWindows_CNetworking_CIEndpointPair** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CEndpointPairVtbl;

    interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CEndpointPair
    {
        CONST_VTBL struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CEndpointPairVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CEndpointPair_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CHostName_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CHostName_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CHostName __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CHostName;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CHostName;

    typedef struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CHostNameVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CHostName* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CHostName* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CHostName* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CHostName* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CHostName* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CHostName* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CHostName* This,
        UINT32 index,
        __x_ABI_CWindows_CNetworking_CIHostName** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CHostName* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CHostName* This,
        __x_ABI_CWindows_CNetworking_CIHostName* value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CHostName* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        __x_ABI_CWindows_CNetworking_CIHostName** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CHostNameVtbl;

    interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CHostName
    {
        CONST_VTBL struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CHostNameVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CHostName_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIReference_1_boolean_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIReference_1_boolean_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIReference_1_boolean __x_ABI_C__FIReference_1_boolean;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIReference_1_boolean;

    typedef struct __x_ABI_C__FIReference_1_booleanVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIReference_1_boolean* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIReference_1_boolean* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIReference_1_boolean* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIReference_1_boolean* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIReference_1_boolean* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIReference_1_boolean* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Value)(__x_ABI_C__FIReference_1_boolean* This,
        boolean* result);

        END_INTERFACE
    } __x_ABI_C__FIReference_1_booleanVtbl;

    interface __x_ABI_C__FIReference_1_boolean
    {
        CONST_VTBL struct __x_ABI_C__FIReference_1_booleanVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIReference_1_boolean_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIReference_1_GUID_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIReference_1_GUID_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIReference_1_GUID __x_ABI_C__FIReference_1_GUID;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIReference_1_GUID;

    typedef struct __x_ABI_C__FIReference_1_GUIDVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIReference_1_GUID* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIReference_1_GUID* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIReference_1_GUID* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIReference_1_GUID* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIReference_1_GUID* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIReference_1_GUID* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Value)(__x_ABI_C__FIReference_1_GUID* This,
        GUID* result);

        END_INTERFACE
    } __x_ABI_C__FIReference_1_GUIDVtbl;

    interface __x_ABI_C__FIReference_1_GUID
    {
        CONST_VTBL struct __x_ABI_C__FIReference_1_GUIDVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIReference_1_GUID_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIReference_1_UINT32_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIReference_1_UINT32_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIReference_1_UINT32 __x_ABI_C__FIReference_1_UINT32;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIReference_1_UINT32;

    typedef struct __x_ABI_C__FIReference_1_UINT32Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIReference_1_UINT32* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIReference_1_UINT32* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIReference_1_UINT32* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIReference_1_UINT32* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIReference_1_UINT32* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIReference_1_UINT32* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Value)(__x_ABI_C__FIReference_1_UINT32* This,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIReference_1_UINT32Vtbl;

    interface __x_ABI_C__FIReference_1_UINT32
    {
        CONST_VTBL struct __x_ABI_C__FIReference_1_UINT32Vtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIReference_1_UINT32_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIReference_1_UINT64_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIReference_1_UINT64_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIReference_1_UINT64 __x_ABI_C__FIReference_1_UINT64;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIReference_1_UINT64;

    typedef struct __x_ABI_C__FIReference_1_UINT64Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIReference_1_UINT64* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIReference_1_UINT64* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIReference_1_UINT64* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIReference_1_UINT64* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIReference_1_UINT64* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIReference_1_UINT64* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Value)(__x_ABI_C__FIReference_1_UINT64* This,
        UINT64* result);

        END_INTERFACE
    } __x_ABI_C__FIReference_1_UINT64Vtbl;

    interface __x_ABI_C__FIReference_1_UINT64
    {
        CONST_VTBL struct __x_ABI_C__FIReference_1_UINT64Vtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIReference_1_UINT64_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIReference_1_byte_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIReference_1_byte_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIReference_1_byte __x_ABI_C__FIReference_1_byte;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIReference_1_byte;

    typedef struct __x_ABI_C__FIReference_1_byteVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIReference_1_byte* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIReference_1_byte* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIReference_1_byte* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIReference_1_byte* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIReference_1_byte* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIReference_1_byte* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Value)(__x_ABI_C__FIReference_1_byte* This,
        BYTE* result);

        END_INTERFACE
    } __x_ABI_C__FIReference_1_byteVtbl;

    interface __x_ABI_C__FIReference_1_byte
    {
        CONST_VTBL struct __x_ABI_C__FIReference_1_byteVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIReference_1_byte_INTERFACE_DEFINED__
    
typedef struct __x_ABI_CWindows_CFoundation_CDateTime __x_ABI_CWindows_CFoundation_CDateTime;

#if !defined(____x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CDateTime_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CDateTime_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CDateTime __x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CDateTime;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CDateTime;

    typedef struct __x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CDateTimeVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CDateTime* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CDateTime* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CDateTime* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CDateTime* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CDateTime* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CDateTime* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Value)(__x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CDateTime* This,
        struct __x_ABI_CWindows_CFoundation_CDateTime* result);

        END_INTERFACE
    } __x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CDateTimeVtbl;

    interface __x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CDateTime
    {
        CONST_VTBL struct __x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CDateTimeVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CDateTime_INTERFACE_DEFINED__
    
typedef enum __x_ABI_CWindows_CFoundation_CAsyncStatus __x_ABI_CWindows_CFoundation_CAsyncStatus;

#ifndef ____x_ABI_CWindows_CFoundation_CIAsyncInfo_FWD_DEFINED__
#define ____x_ABI_CWindows_CFoundation_CIAsyncInfo_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CFoundation_CIAsyncInfo __x_ABI_CWindows_CFoundation_CIAsyncInfo;

#endif // ____x_ABI_CWindows_CFoundation_CIAsyncInfo_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CFoundation_CIClosable_FWD_DEFINED__
#define ____x_ABI_CWindows_CFoundation_CIClosable_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CFoundation_CIClosable __x_ABI_CWindows_CFoundation_CIClosable;

#endif // ____x_ABI_CWindows_CFoundation_CIClosable_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CFoundation_CIPropertyValue_FWD_DEFINED__
#define ____x_ABI_CWindows_CFoundation_CIPropertyValue_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CFoundation_CIPropertyValue __x_ABI_CWindows_CFoundation_CIPropertyValue;

#endif // ____x_ABI_CWindows_CFoundation_CIPropertyValue_FWD_DEFINED__

typedef struct __x_ABI_CWindows_CFoundation_CTimeSpan __x_ABI_CWindows_CFoundation_CTimeSpan;

typedef enum __x_ABI_CWindows_CNetworking_CDomainNameType __x_ABI_CWindows_CNetworking_CDomainNameType;

typedef enum __x_ABI_CWindows_CNetworking_CHostNameSortOptions __x_ABI_CWindows_CNetworking_CHostNameSortOptions;

#ifndef ____x_ABI_CWindows_CStorage_CStreams_CIBuffer_FWD_DEFINED__
#define ____x_ABI_CWindows_CStorage_CStreams_CIBuffer_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CStorage_CStreams_CIBuffer __x_ABI_CWindows_CStorage_CStreams_CIBuffer;

#endif // ____x_ABI_CWindows_CStorage_CStreams_CIBuffer_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CStorage_CStreams_CIRandomAccessStreamReference_FWD_DEFINED__
#define ____x_ABI_CWindows_CStorage_CStreams_CIRandomAccessStreamReference_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CStorage_CStreams_CIRandomAccessStreamReference __x_ABI_CWindows_CStorage_CStreams_CIRandomAccessStreamReference;

#endif // ____x_ABI_CWindows_CStorage_CStreams_CIRandomAccessStreamReference_FWD_DEFINED__

typedef enum __x_ABI_CWindows_CNetworking_CConnectivity_CCellularApnAuthenticationType __x_ABI_CWindows_CNetworking_CConnectivity_CCellularApnAuthenticationType;

typedef enum __x_ABI_CWindows_CNetworking_CConnectivity_CDataUsageGranularity __x_ABI_CWindows_CNetworking_CConnectivity_CDataUsageGranularity;

typedef enum __x_ABI_CWindows_CNetworking_CConnectivity_CDomainConnectivityLevel __x_ABI_CWindows_CNetworking_CConnectivity_CDomainConnectivityLevel;

typedef enum __x_ABI_CWindows_CNetworking_CConnectivity_CNetworkAuthenticationType __x_ABI_CWindows_CNetworking_CConnectivity_CNetworkAuthenticationType;

typedef enum __x_ABI_CWindows_CNetworking_CConnectivity_CNetworkConnectivityLevel __x_ABI_CWindows_CNetworking_CConnectivity_CNetworkConnectivityLevel;

typedef enum __x_ABI_CWindows_CNetworking_CConnectivity_CNetworkCostType __x_ABI_CWindows_CNetworking_CConnectivity_CNetworkCostType;

typedef enum __x_ABI_CWindows_CNetworking_CConnectivity_CNetworkEncryptionType __x_ABI_CWindows_CNetworking_CConnectivity_CNetworkEncryptionType;

typedef enum __x_ABI_CWindows_CNetworking_CConnectivity_CNetworkTypes __x_ABI_CWindows_CNetworking_CConnectivity_CNetworkTypes;

typedef enum __x_ABI_CWindows_CNetworking_CConnectivity_CRoamingStates __x_ABI_CWindows_CNetworking_CConnectivity_CRoamingStates;

typedef enum __x_ABI_CWindows_CNetworking_CConnectivity_CTriStates __x_ABI_CWindows_CNetworking_CConnectivity_CTriStates;

typedef enum __x_ABI_CWindows_CNetworking_CConnectivity_CWwanDataClass __x_ABI_CWindows_CNetworking_CConnectivity_CWwanDataClass;

typedef enum __x_ABI_CWindows_CNetworking_CConnectivity_CWwanNetworkIPKind __x_ABI_CWindows_CNetworking_CConnectivity_CWwanNetworkIPKind;

typedef enum __x_ABI_CWindows_CNetworking_CConnectivity_CWwanNetworkRegistrationState __x_ABI_CWindows_CNetworking_CConnectivity_CWwanNetworkRegistrationState;

typedef struct __x_ABI_CWindows_CNetworking_CConnectivity_CNetworkUsageStates __x_ABI_CWindows_CNetworking_CConnectivity_CNetworkUsageStates;

enum __x_ABI_CWindows_CNetworking_CConnectivity_CCellularApnAuthenticationType
    {
        __x_ABI_CWindows_CNetworking_CConnectivity_CCellularApnAuthenticationType_None = 0,
    __x_ABI_CWindows_CNetworking_CConnectivity_CCellularApnAuthenticationType_Pap = 1,
    __x_ABI_CWindows_CNetworking_CConnectivity_CCellularApnAuthenticationType_Chap = 2,
    __x_ABI_CWindows_CNetworking_CConnectivity_CCellularApnAuthenticationType_Mschapv2 = 3,
};

enum __x_ABI_CWindows_CNetworking_CConnectivity_CConnectionProfileDeleteStatus
    {
        __x_ABI_CWindows_CNetworking_CConnectivity_CConnectionProfileDeleteStatus_Success = 0,
    __x_ABI_CWindows_CNetworking_CConnectivity_CConnectionProfileDeleteStatus_DeniedByUser = 1,
    __x_ABI_CWindows_CNetworking_CConnectivity_CConnectionProfileDeleteStatus_DeniedBySystem = 2,
    __x_ABI_CWindows_CNetworking_CConnectivity_CConnectionProfileDeleteStatus_UnknownError = 3,
};

enum __x_ABI_CWindows_CNetworking_CConnectivity_CDataUsageGranularity
    {
        __x_ABI_CWindows_CNetworking_CConnectivity_CDataUsageGranularity_PerMinute = 0,
    __x_ABI_CWindows_CNetworking_CConnectivity_CDataUsageGranularity_PerHour = 1,
    __x_ABI_CWindows_CNetworking_CConnectivity_CDataUsageGranularity_PerDay = 2,
    __x_ABI_CWindows_CNetworking_CConnectivity_CDataUsageGranularity_Total = 3,
};

enum __x_ABI_CWindows_CNetworking_CConnectivity_CDomainConnectivityLevel
    {
        __x_ABI_CWindows_CNetworking_CConnectivity_CDomainConnectivityLevel_None = 0,
    __x_ABI_CWindows_CNetworking_CConnectivity_CDomainConnectivityLevel_Unauthenticated = 1,
    __x_ABI_CWindows_CNetworking_CConnectivity_CDomainConnectivityLevel_Authenticated = 2,
};

enum __x_ABI_CWindows_CNetworking_CConnectivity_CNetworkAuthenticationType
    {
        __x_ABI_CWindows_CNetworking_CConnectivity_CNetworkAuthenticationType_None = 0,
    __x_ABI_CWindows_CNetworking_CConnectivity_CNetworkAuthenticationType_Unknown = 1,
    __x_ABI_CWindows_CNetworking_CConnectivity_CNetworkAuthenticationType_Open80211 = 2,
    __x_ABI_CWindows_CNetworking_CConnectivity_CNetworkAuthenticationType_SharedKey80211 = 3,
    __x_ABI_CWindows_CNetworking_CConnectivity_CNetworkAuthenticationType_Wpa = 4,
    __x_ABI_CWindows_CNetworking_CConnectivity_CNetworkAuthenticationType_WpaPsk = 5,
    __x_ABI_CWindows_CNetworking_CConnectivity_CNetworkAuthenticationType_WpaNone = 6,
    __x_ABI_CWindows_CNetworking_CConnectivity_CNetworkAuthenticationType_Rsna = 7,
    __x_ABI_CWindows_CNetworking_CConnectivity_CNetworkAuthenticationType_RsnaPsk = 8,
    __x_ABI_CWindows_CNetworking_CConnectivity_CNetworkAuthenticationType_Ihv = 9,
    __x_ABI_CWindows_CNetworking_CConnectivity_CNetworkAuthenticationType_Wpa3 = 10,
    __x_ABI_CWindows_CNetworking_CConnectivity_CNetworkAuthenticationType_Wpa3Sae = 11,
};

enum __x_ABI_CWindows_CNetworking_CConnectivity_CNetworkConnectivityLevel
    {
        __x_ABI_CWindows_CNetworking_CConnectivity_CNetworkConnectivityLevel_None = 0,
    __x_ABI_CWindows_CNetworking_CConnectivity_CNetworkConnectivityLevel_LocalAccess = 1,
    __x_ABI_CWindows_CNetworking_CConnectivity_CNetworkConnectivityLevel_ConstrainedInternetAccess = 2,
    __x_ABI_CWindows_CNetworking_CConnectivity_CNetworkConnectivityLevel_InternetAccess = 3,
};

enum __x_ABI_CWindows_CNetworking_CConnectivity_CNetworkCostType
    {
        __x_ABI_CWindows_CNetworking_CConnectivity_CNetworkCostType_Unknown = 0,
    __x_ABI_CWindows_CNetworking_CConnectivity_CNetworkCostType_Unrestricted = 1,
    __x_ABI_CWindows_CNetworking_CConnectivity_CNetworkCostType_Fixed = 2,
    __x_ABI_CWindows_CNetworking_CConnectivity_CNetworkCostType_Variable = 3,
};

enum __x_ABI_CWindows_CNetworking_CConnectivity_CNetworkEncryptionType
    {
        __x_ABI_CWindows_CNetworking_CConnectivity_CNetworkEncryptionType_None = 0,
    __x_ABI_CWindows_CNetworking_CConnectivity_CNetworkEncryptionType_Unknown = 1,
    __x_ABI_CWindows_CNetworking_CConnectivity_CNetworkEncryptionType_Wep = 2,
    __x_ABI_CWindows_CNetworking_CConnectivity_CNetworkEncryptionType_Wep40 = 3,
    __x_ABI_CWindows_CNetworking_CConnectivity_CNetworkEncryptionType_Wep104 = 4,
    __x_ABI_CWindows_CNetworking_CConnectivity_CNetworkEncryptionType_Tkip = 5,
    __x_ABI_CWindows_CNetworking_CConnectivity_CNetworkEncryptionType_Ccmp = 6,
    __x_ABI_CWindows_CNetworking_CConnectivity_CNetworkEncryptionType_WpaUseGroup = 7,
    __x_ABI_CWindows_CNetworking_CConnectivity_CNetworkEncryptionType_RsnUseGroup = 8,
    __x_ABI_CWindows_CNetworking_CConnectivity_CNetworkEncryptionType_Ihv = 9,
};

enum __x_ABI_CWindows_CNetworking_CConnectivity_CNetworkTypes
    {
        __x_ABI_CWindows_CNetworking_CConnectivity_CNetworkTypes_None = 0,
    __x_ABI_CWindows_CNetworking_CConnectivity_CNetworkTypes_Internet = 0x1,
    __x_ABI_CWindows_CNetworking_CConnectivity_CNetworkTypes_PrivateNetwork = 0x2,
};

enum __x_ABI_CWindows_CNetworking_CConnectivity_CRoamingStates
    {
        __x_ABI_CWindows_CNetworking_CConnectivity_CRoamingStates_None = 0,
    __x_ABI_CWindows_CNetworking_CConnectivity_CRoamingStates_NotRoaming = 0x1,
    __x_ABI_CWindows_CNetworking_CConnectivity_CRoamingStates_Roaming = 0x2,
};

enum __x_ABI_CWindows_CNetworking_CConnectivity_CTriStates
    {
        __x_ABI_CWindows_CNetworking_CConnectivity_CTriStates_DoNotCare = 0,
    __x_ABI_CWindows_CNetworking_CConnectivity_CTriStates_No = 1,
    __x_ABI_CWindows_CNetworking_CConnectivity_CTriStates_Yes = 2,
};

enum __x_ABI_CWindows_CNetworking_CConnectivity_CWwanDataClass
    {
        __x_ABI_CWindows_CNetworking_CConnectivity_CWwanDataClass_None = 0,
    __x_ABI_CWindows_CNetworking_CConnectivity_CWwanDataClass_Gprs = 0x1,
    __x_ABI_CWindows_CNetworking_CConnectivity_CWwanDataClass_Edge = 0x2,
    __x_ABI_CWindows_CNetworking_CConnectivity_CWwanDataClass_Umts = 0x4,
    __x_ABI_CWindows_CNetworking_CConnectivity_CWwanDataClass_Hsdpa = 0x8,
    __x_ABI_CWindows_CNetworking_CConnectivity_CWwanDataClass_Hsupa = 0x10,
    __x_ABI_CWindows_CNetworking_CConnectivity_CWwanDataClass_LteAdvanced = 0x20,
    __x_ABI_CWindows_CNetworking_CConnectivity_CWwanDataClass_Cdma1xRtt = 0x10000,
    __x_ABI_CWindows_CNetworking_CConnectivity_CWwanDataClass_Cdma1xEvdo = 0x20000,
    __x_ABI_CWindows_CNetworking_CConnectivity_CWwanDataClass_Cdma1xEvdoRevA = 0x40000,
    __x_ABI_CWindows_CNetworking_CConnectivity_CWwanDataClass_Cdma1xEvdv = 0x80000,
    __x_ABI_CWindows_CNetworking_CConnectivity_CWwanDataClass_Cdma3xRtt = 0x100000,
    __x_ABI_CWindows_CNetworking_CConnectivity_CWwanDataClass_Cdma1xEvdoRevB = 0x200000,
    __x_ABI_CWindows_CNetworking_CConnectivity_CWwanDataClass_CdmaUmb = 0x400000,
    __x_ABI_CWindows_CNetworking_CConnectivity_CWwanDataClass_Custom = 0x80000000,
};

enum __x_ABI_CWindows_CNetworking_CConnectivity_CWwanNetworkIPKind
    {
        __x_ABI_CWindows_CNetworking_CConnectivity_CWwanNetworkIPKind_None = 0,
    __x_ABI_CWindows_CNetworking_CConnectivity_CWwanNetworkIPKind_Ipv4 = 1,
    __x_ABI_CWindows_CNetworking_CConnectivity_CWwanNetworkIPKind_Ipv6 = 2,
    __x_ABI_CWindows_CNetworking_CConnectivity_CWwanNetworkIPKind_Ipv4v6 = 3,
    __x_ABI_CWindows_CNetworking_CConnectivity_CWwanNetworkIPKind_Ipv4v6v4Xlat = 4,
};

enum __x_ABI_CWindows_CNetworking_CConnectivity_CWwanNetworkRegistrationState
    {
        __x_ABI_CWindows_CNetworking_CConnectivity_CWwanNetworkRegistrationState_None = 0,
    __x_ABI_CWindows_CNetworking_CConnectivity_CWwanNetworkRegistrationState_Deregistered = 1,
    __x_ABI_CWindows_CNetworking_CConnectivity_CWwanNetworkRegistrationState_Searching = 2,
    __x_ABI_CWindows_CNetworking_CConnectivity_CWwanNetworkRegistrationState_Home = 3,
    __x_ABI_CWindows_CNetworking_CConnectivity_CWwanNetworkRegistrationState_Roaming = 4,
    __x_ABI_CWindows_CNetworking_CConnectivity_CWwanNetworkRegistrationState_Partner = 5,
    __x_ABI_CWindows_CNetworking_CConnectivity_CWwanNetworkRegistrationState_Denied = 6,
};

struct __x_ABI_CWindows_CNetworking_CConnectivity_CNetworkUsageStates
    {
        enum __x_ABI_CWindows_CNetworking_CConnectivity_CTriStates Roaming;
    enum __x_ABI_CWindows_CNetworking_CConnectivity_CTriStates Shared;
};

#if !defined(____x_ABI_CWindows_CNetworking_CConnectivity_CINetworkStatusChangedEventHandler_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CNetworking_CConnectivity_CINetworkStatusChangedEventHandler_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CNetworking_CConnectivity_CINetworkStatusChangedEventHandlerVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CNetworking_CConnectivity_CINetworkStatusChangedEventHandler* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CNetworking_CConnectivity_CINetworkStatusChangedEventHandler* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CNetworking_CConnectivity_CINetworkStatusChangedEventHandler* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_CWindows_CNetworking_CConnectivity_CINetworkStatusChangedEventHandler* This,
        IInspectable* sender);

        END_INTERFACE
    } __x_ABI_CWindows_CNetworking_CConnectivity_CINetworkStatusChangedEventHandlerVtbl;

    interface __x_ABI_CWindows_CNetworking_CConnectivity_CINetworkStatusChangedEventHandler
    {
        CONST_VTBL struct __x_ABI_CWindows_CNetworking_CConnectivity_CINetworkStatusChangedEventHandlerVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CNetworking_CConnectivity_CINetworkStatusChangedEventHandler;
    #endif /* !defined(____x_ABI_CWindows_CNetworking_CConnectivity_CINetworkStatusChangedEventHandler_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CNetworking_CConnectivity_CIAttributedNetworkUsage_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CNetworking_CConnectivity_CIAttributedNetworkUsage_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CNetworking_CConnectivity_CIAttributedNetworkUsageVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CNetworking_CConnectivity_CIAttributedNetworkUsage* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CNetworking_CConnectivity_CIAttributedNetworkUsage* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CNetworking_CConnectivity_CIAttributedNetworkUsage* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CNetworking_CConnectivity_CIAttributedNetworkUsage* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CNetworking_CConnectivity_CIAttributedNetworkUsage* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CNetworking_CConnectivity_CIAttributedNetworkUsage* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_BytesSent)(__x_ABI_CWindows_CNetworking_CConnectivity_CIAttributedNetworkUsage* This,
        UINT64* value);
    HRESULT (STDMETHODCALLTYPE* get_BytesReceived)(__x_ABI_CWindows_CNetworking_CConnectivity_CIAttributedNetworkUsage* This,
        UINT64* value);
    HRESULT (STDMETHODCALLTYPE* get_AttributionId)(__x_ABI_CWindows_CNetworking_CConnectivity_CIAttributedNetworkUsage* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_AttributionName)(__x_ABI_CWindows_CNetworking_CConnectivity_CIAttributedNetworkUsage* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_AttributionThumbnail)(__x_ABI_CWindows_CNetworking_CConnectivity_CIAttributedNetworkUsage* This,
        __x_ABI_CWindows_CStorage_CStreams_CIRandomAccessStreamReference** value);

        END_INTERFACE
    } __x_ABI_CWindows_CNetworking_CConnectivity_CIAttributedNetworkUsageVtbl;

    interface __x_ABI_CWindows_CNetworking_CConnectivity_CIAttributedNetworkUsage
    {
        CONST_VTBL struct __x_ABI_CWindows_CNetworking_CConnectivity_CIAttributedNetworkUsageVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CNetworking_CConnectivity_CIAttributedNetworkUsage;
#endif /* !defined(____x_ABI_CWindows_CNetworking_CConnectivity_CIAttributedNetworkUsage_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CNetworking_CConnectivity_CICellularApnContext_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CNetworking_CConnectivity_CICellularApnContext_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CNetworking_CConnectivity_CICellularApnContextVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CNetworking_CConnectivity_CICellularApnContext* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CNetworking_CConnectivity_CICellularApnContext* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CNetworking_CConnectivity_CICellularApnContext* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CNetworking_CConnectivity_CICellularApnContext* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CNetworking_CConnectivity_CICellularApnContext* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CNetworking_CConnectivity_CICellularApnContext* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_ProviderId)(__x_ABI_CWindows_CNetworking_CConnectivity_CICellularApnContext* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* put_ProviderId)(__x_ABI_CWindows_CNetworking_CConnectivity_CICellularApnContext* This,
        HSTRING value);
    HRESULT (STDMETHODCALLTYPE* get_AccessPointName)(__x_ABI_CWindows_CNetworking_CConnectivity_CICellularApnContext* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* put_AccessPointName)(__x_ABI_CWindows_CNetworking_CConnectivity_CICellularApnContext* This,
        HSTRING value);
    HRESULT (STDMETHODCALLTYPE* get_UserName)(__x_ABI_CWindows_CNetworking_CConnectivity_CICellularApnContext* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* put_UserName)(__x_ABI_CWindows_CNetworking_CConnectivity_CICellularApnContext* This,
        HSTRING value);
    HRESULT (STDMETHODCALLTYPE* get_Password)(__x_ABI_CWindows_CNetworking_CConnectivity_CICellularApnContext* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* put_Password)(__x_ABI_CWindows_CNetworking_CConnectivity_CICellularApnContext* This,
        HSTRING value);
    HRESULT (STDMETHODCALLTYPE* get_IsCompressionEnabled)(__x_ABI_CWindows_CNetworking_CConnectivity_CICellularApnContext* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* put_IsCompressionEnabled)(__x_ABI_CWindows_CNetworking_CConnectivity_CICellularApnContext* This,
        boolean value);
    HRESULT (STDMETHODCALLTYPE* get_AuthenticationType)(__x_ABI_CWindows_CNetworking_CConnectivity_CICellularApnContext* This,
        enum __x_ABI_CWindows_CNetworking_CConnectivity_CCellularApnAuthenticationType* value);
    HRESULT (STDMETHODCALLTYPE* put_AuthenticationType)(__x_ABI_CWindows_CNetworking_CConnectivity_CICellularApnContext* This,
        enum __x_ABI_CWindows_CNetworking_CConnectivity_CCellularApnAuthenticationType value);

        END_INTERFACE
    } __x_ABI_CWindows_CNetworking_CConnectivity_CICellularApnContextVtbl;

    interface __x_ABI_CWindows_CNetworking_CConnectivity_CICellularApnContext
    {
        CONST_VTBL struct __x_ABI_CWindows_CNetworking_CConnectivity_CICellularApnContextVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CNetworking_CConnectivity_CICellularApnContext;
#endif /* !defined(____x_ABI_CWindows_CNetworking_CConnectivity_CICellularApnContext_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CNetworking_CConnectivity_CICellularApnContext2_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CNetworking_CConnectivity_CICellularApnContext2_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CNetworking_CConnectivity_CICellularApnContext2Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CNetworking_CConnectivity_CICellularApnContext2* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CNetworking_CConnectivity_CICellularApnContext2* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CNetworking_CConnectivity_CICellularApnContext2* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CNetworking_CConnectivity_CICellularApnContext2* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CNetworking_CConnectivity_CICellularApnContext2* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CNetworking_CConnectivity_CICellularApnContext2* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_ProfileName)(__x_ABI_CWindows_CNetworking_CConnectivity_CICellularApnContext2* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* put_ProfileName)(__x_ABI_CWindows_CNetworking_CConnectivity_CICellularApnContext2* This,
        HSTRING value);

        END_INTERFACE
    } __x_ABI_CWindows_CNetworking_CConnectivity_CICellularApnContext2Vtbl;

    interface __x_ABI_CWindows_CNetworking_CConnectivity_CICellularApnContext2
    {
        CONST_VTBL struct __x_ABI_CWindows_CNetworking_CConnectivity_CICellularApnContext2Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CNetworking_CConnectivity_CICellularApnContext2;
#endif /* !defined(____x_ABI_CWindows_CNetworking_CConnectivity_CICellularApnContext2_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionCost_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionCost_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionCostVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionCost* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionCost* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionCost* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionCost* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionCost* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionCost* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_NetworkCostType)(__x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionCost* This,
        enum __x_ABI_CWindows_CNetworking_CConnectivity_CNetworkCostType* value);
    HRESULT (STDMETHODCALLTYPE* get_Roaming)(__x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionCost* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* get_OverDataLimit)(__x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionCost* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* get_ApproachingDataLimit)(__x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionCost* This,
        boolean* value);

        END_INTERFACE
    } __x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionCostVtbl;

    interface __x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionCost
    {
        CONST_VTBL struct __x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionCostVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionCost;
#endif /* !defined(____x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionCost_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionCost2_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionCost2_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionCost2Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionCost2* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionCost2* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionCost2* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionCost2* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionCost2* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionCost2* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_BackgroundDataUsageRestricted)(__x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionCost2* This,
        boolean* value);

        END_INTERFACE
    } __x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionCost2Vtbl;

    interface __x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionCost2
    {
        CONST_VTBL struct __x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionCost2Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionCost2;
#endif /* !defined(____x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionCost2_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionProfile_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionProfile_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionProfileVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionProfile* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionProfile* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionProfile* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionProfile* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionProfile* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionProfile* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_ProfileName)(__x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionProfile* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* GetNetworkConnectivityLevel)(__x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionProfile* This,
        enum __x_ABI_CWindows_CNetworking_CConnectivity_CNetworkConnectivityLevel* value);
    HRESULT (STDMETHODCALLTYPE* GetNetworkNames)(__x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionProfile* This,
        __x_ABI_C__FIVectorView_1_HSTRING** value);
    HRESULT (STDMETHODCALLTYPE* GetConnectionCost)(__x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionProfile* This,
        __x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionCost** value);
    HRESULT (STDMETHODCALLTYPE* GetDataPlanStatus)(__x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionProfile* This,
        __x_ABI_CWindows_CNetworking_CConnectivity_CIDataPlanStatus** value);
    HRESULT (STDMETHODCALLTYPE* get_NetworkAdapter)(__x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionProfile* This,
        __x_ABI_CWindows_CNetworking_CConnectivity_CINetworkAdapter** value);
    HRESULT (STDMETHODCALLTYPE* GetLocalUsage)(__x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionProfile* This,
        struct __x_ABI_CWindows_CFoundation_CDateTime StartTime,
        struct __x_ABI_CWindows_CFoundation_CDateTime EndTime,
        __x_ABI_CWindows_CNetworking_CConnectivity_CIDataUsage** value);
    HRESULT (STDMETHODCALLTYPE* GetLocalUsagePerRoamingStates)(__x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionProfile* This,
        struct __x_ABI_CWindows_CFoundation_CDateTime StartTime,
        struct __x_ABI_CWindows_CFoundation_CDateTime EndTime,
        enum __x_ABI_CWindows_CNetworking_CConnectivity_CRoamingStates States,
        __x_ABI_CWindows_CNetworking_CConnectivity_CIDataUsage** value);
    HRESULT (STDMETHODCALLTYPE* get_NetworkSecuritySettings)(__x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionProfile* This,
        __x_ABI_CWindows_CNetworking_CConnectivity_CINetworkSecuritySettings** value);

        END_INTERFACE
    } __x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionProfileVtbl;

    interface __x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionProfile
    {
        CONST_VTBL struct __x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionProfileVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionProfile;
#endif /* !defined(____x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionProfile_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionProfile2_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionProfile2_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionProfile2Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionProfile2* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionProfile2* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionProfile2* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionProfile2* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionProfile2* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionProfile2* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_IsWwanConnectionProfile)(__x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionProfile2* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* get_IsWlanConnectionProfile)(__x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionProfile2* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* get_WwanConnectionProfileDetails)(__x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionProfile2* This,
        __x_ABI_CWindows_CNetworking_CConnectivity_CIWwanConnectionProfileDetails** value);
    HRESULT (STDMETHODCALLTYPE* get_WlanConnectionProfileDetails)(__x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionProfile2* This,
        __x_ABI_CWindows_CNetworking_CConnectivity_CIWlanConnectionProfileDetails** value);
    HRESULT (STDMETHODCALLTYPE* get_ServiceProviderGuid)(__x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionProfile2* This,
        __x_ABI_C__FIReference_1_GUID** value);
    HRESULT (STDMETHODCALLTYPE* GetSignalBars)(__x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionProfile2* This,
        __x_ABI_C__FIReference_1_byte** value);
    HRESULT (STDMETHODCALLTYPE* GetDomainConnectivityLevel)(__x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionProfile2* This,
        enum __x_ABI_CWindows_CNetworking_CConnectivity_CDomainConnectivityLevel* value);
    HRESULT (STDMETHODCALLTYPE* GetNetworkUsageAsync)(__x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionProfile2* This,
        struct __x_ABI_CWindows_CFoundation_CDateTime startTime,
        struct __x_ABI_CWindows_CFoundation_CDateTime endTime,
        enum __x_ABI_CWindows_CNetworking_CConnectivity_CDataUsageGranularity granularity,
        struct __x_ABI_CWindows_CNetworking_CConnectivity_CNetworkUsageStates states,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CNetworkUsage** value);
    HRESULT (STDMETHODCALLTYPE* GetConnectivityIntervalsAsync)(__x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionProfile2* This,
        struct __x_ABI_CWindows_CFoundation_CDateTime startTime,
        struct __x_ABI_CWindows_CFoundation_CDateTime endTime,
        struct __x_ABI_CWindows_CNetworking_CConnectivity_CNetworkUsageStates states,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectivityInterval** value);

        END_INTERFACE
    } __x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionProfile2Vtbl;

    interface __x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionProfile2
    {
        CONST_VTBL struct __x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionProfile2Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionProfile2;
#endif /* !defined(____x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionProfile2_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionProfile3_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionProfile3_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionProfile3Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionProfile3* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionProfile3* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionProfile3* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionProfile3* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionProfile3* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionProfile3* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAttributedNetworkUsageAsync)(__x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionProfile3* This,
        struct __x_ABI_CWindows_CFoundation_CDateTime startTime,
        struct __x_ABI_CWindows_CFoundation_CDateTime endTime,
        struct __x_ABI_CWindows_CNetworking_CConnectivity_CNetworkUsageStates states,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CAttributedNetworkUsage** value);

        END_INTERFACE
    } __x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionProfile3Vtbl;

    interface __x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionProfile3
    {
        CONST_VTBL struct __x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionProfile3Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionProfile3;
#endif /* !defined(____x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionProfile3_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionProfile4_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionProfile4_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionProfile4Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionProfile4* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionProfile4* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionProfile4* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionProfile4* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionProfile4* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionProfile4* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetProviderNetworkUsageAsync)(__x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionProfile4* This,
        struct __x_ABI_CWindows_CFoundation_CDateTime startTime,
        struct __x_ABI_CWindows_CFoundation_CDateTime endTime,
        struct __x_ABI_CWindows_CNetworking_CConnectivity_CNetworkUsageStates states,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CProviderNetworkUsage** value);

        END_INTERFACE
    } __x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionProfile4Vtbl;

    interface __x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionProfile4
    {
        CONST_VTBL struct __x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionProfile4Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionProfile4;
#endif /* !defined(____x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionProfile4_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionProfile5_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionProfile5_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionProfile5Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionProfile5* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionProfile5* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionProfile5* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionProfile5* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionProfile5* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionProfile5* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_CanDelete)(__x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionProfile5* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* TryDeleteAsync)(__x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionProfile5* This,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectionProfileDeleteStatus** operation);

        END_INTERFACE
    } __x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionProfile5Vtbl;

    interface __x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionProfile5
    {
        CONST_VTBL struct __x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionProfile5Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionProfile5;
#endif /* !defined(____x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionProfile5_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionProfileFilter_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionProfileFilter_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionProfileFilterVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionProfileFilter* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionProfileFilter* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionProfileFilter* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionProfileFilter* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionProfileFilter* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionProfileFilter* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* put_IsConnected)(__x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionProfileFilter* This,
        boolean value);
    HRESULT (STDMETHODCALLTYPE* get_IsConnected)(__x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionProfileFilter* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* put_IsWwanConnectionProfile)(__x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionProfileFilter* This,
        boolean value);
    HRESULT (STDMETHODCALLTYPE* get_IsWwanConnectionProfile)(__x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionProfileFilter* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* put_IsWlanConnectionProfile)(__x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionProfileFilter* This,
        boolean value);
    HRESULT (STDMETHODCALLTYPE* get_IsWlanConnectionProfile)(__x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionProfileFilter* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* put_NetworkCostType)(__x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionProfileFilter* This,
        enum __x_ABI_CWindows_CNetworking_CConnectivity_CNetworkCostType value);
    HRESULT (STDMETHODCALLTYPE* get_NetworkCostType)(__x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionProfileFilter* This,
        enum __x_ABI_CWindows_CNetworking_CConnectivity_CNetworkCostType* value);
    HRESULT (STDMETHODCALLTYPE* put_ServiceProviderGuid)(__x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionProfileFilter* This,
        __x_ABI_C__FIReference_1_GUID* value);
    HRESULT (STDMETHODCALLTYPE* get_ServiceProviderGuid)(__x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionProfileFilter* This,
        __x_ABI_C__FIReference_1_GUID** value);

        END_INTERFACE
    } __x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionProfileFilterVtbl;

    interface __x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionProfileFilter
    {
        CONST_VTBL struct __x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionProfileFilterVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionProfileFilter;
#endif /* !defined(____x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionProfileFilter_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionProfileFilter2_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionProfileFilter2_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionProfileFilter2Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionProfileFilter2* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionProfileFilter2* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionProfileFilter2* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionProfileFilter2* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionProfileFilter2* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionProfileFilter2* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* put_IsRoaming)(__x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionProfileFilter2* This,
        __x_ABI_C__FIReference_1_boolean* value);
    HRESULT (STDMETHODCALLTYPE* get_IsRoaming)(__x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionProfileFilter2* This,
        __x_ABI_C__FIReference_1_boolean** value);
    HRESULT (STDMETHODCALLTYPE* put_IsOverDataLimit)(__x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionProfileFilter2* This,
        __x_ABI_C__FIReference_1_boolean* value);
    HRESULT (STDMETHODCALLTYPE* get_IsOverDataLimit)(__x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionProfileFilter2* This,
        __x_ABI_C__FIReference_1_boolean** value);
    HRESULT (STDMETHODCALLTYPE* put_IsBackgroundDataUsageRestricted)(__x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionProfileFilter2* This,
        __x_ABI_C__FIReference_1_boolean* value);
    HRESULT (STDMETHODCALLTYPE* get_IsBackgroundDataUsageRestricted)(__x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionProfileFilter2* This,
        __x_ABI_C__FIReference_1_boolean** value);
    HRESULT (STDMETHODCALLTYPE* get_RawData)(__x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionProfileFilter2* This,
        __x_ABI_CWindows_CStorage_CStreams_CIBuffer** value);

        END_INTERFACE
    } __x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionProfileFilter2Vtbl;

    interface __x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionProfileFilter2
    {
        CONST_VTBL struct __x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionProfileFilter2Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionProfileFilter2;
#endif /* !defined(____x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionProfileFilter2_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionProfileFilter3_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionProfileFilter3_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionProfileFilter3Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionProfileFilter3* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionProfileFilter3* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionProfileFilter3* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionProfileFilter3* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionProfileFilter3* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionProfileFilter3* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* put_PurposeGuid)(__x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionProfileFilter3* This,
        __x_ABI_C__FIReference_1_GUID* value);
    HRESULT (STDMETHODCALLTYPE* get_PurposeGuid)(__x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionProfileFilter3* This,
        __x_ABI_C__FIReference_1_GUID** value);

        END_INTERFACE
    } __x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionProfileFilter3Vtbl;

    interface __x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionProfileFilter3
    {
        CONST_VTBL struct __x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionProfileFilter3Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionProfileFilter3;
#endif /* !defined(____x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionProfileFilter3_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionSession_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionSession_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionSessionVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionSession* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionSession* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionSession* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionSession* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionSession* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionSession* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_ConnectionProfile)(__x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionSession* This,
        __x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionProfile** value);

        END_INTERFACE
    } __x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionSessionVtbl;

    interface __x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionSession
    {
        CONST_VTBL struct __x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionSessionVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionSession;
#endif /* !defined(____x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionSession_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CNetworking_CConnectivity_CIConnectivityInterval_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CNetworking_CConnectivity_CIConnectivityInterval_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CNetworking_CConnectivity_CIConnectivityIntervalVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CNetworking_CConnectivity_CIConnectivityInterval* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CNetworking_CConnectivity_CIConnectivityInterval* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CNetworking_CConnectivity_CIConnectivityInterval* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CNetworking_CConnectivity_CIConnectivityInterval* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CNetworking_CConnectivity_CIConnectivityInterval* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CNetworking_CConnectivity_CIConnectivityInterval* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_StartTime)(__x_ABI_CWindows_CNetworking_CConnectivity_CIConnectivityInterval* This,
        struct __x_ABI_CWindows_CFoundation_CDateTime* startTime);
    HRESULT (STDMETHODCALLTYPE* get_ConnectionDuration)(__x_ABI_CWindows_CNetworking_CConnectivity_CIConnectivityInterval* This,
        struct __x_ABI_CWindows_CFoundation_CTimeSpan* duration);

        END_INTERFACE
    } __x_ABI_CWindows_CNetworking_CConnectivity_CIConnectivityIntervalVtbl;

    interface __x_ABI_CWindows_CNetworking_CConnectivity_CIConnectivityInterval
    {
        CONST_VTBL struct __x_ABI_CWindows_CNetworking_CConnectivity_CIConnectivityIntervalVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CNetworking_CConnectivity_CIConnectivityInterval;
#endif /* !defined(____x_ABI_CWindows_CNetworking_CConnectivity_CIConnectivityInterval_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CNetworking_CConnectivity_CIConnectivityManagerStatics_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CNetworking_CConnectivity_CIConnectivityManagerStatics_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CNetworking_CConnectivity_CIConnectivityManagerStaticsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CNetworking_CConnectivity_CIConnectivityManagerStatics* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CNetworking_CConnectivity_CIConnectivityManagerStatics* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CNetworking_CConnectivity_CIConnectivityManagerStatics* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CNetworking_CConnectivity_CIConnectivityManagerStatics* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CNetworking_CConnectivity_CIConnectivityManagerStatics* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CNetworking_CConnectivity_CIConnectivityManagerStatics* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* AcquireConnectionAsync)(__x_ABI_CWindows_CNetworking_CConnectivity_CIConnectivityManagerStatics* This,
        __x_ABI_CWindows_CNetworking_CConnectivity_CICellularApnContext* cellularApnContext,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectionSession** operation);
    HRESULT (STDMETHODCALLTYPE* AddHttpRoutePolicy)(__x_ABI_CWindows_CNetworking_CConnectivity_CIConnectivityManagerStatics* This,
        __x_ABI_CWindows_CNetworking_CConnectivity_CIRoutePolicy* routePolicy);
    HRESULT (STDMETHODCALLTYPE* RemoveHttpRoutePolicy)(__x_ABI_CWindows_CNetworking_CConnectivity_CIConnectivityManagerStatics* This,
        __x_ABI_CWindows_CNetworking_CConnectivity_CIRoutePolicy* routePolicy);

        END_INTERFACE
    } __x_ABI_CWindows_CNetworking_CConnectivity_CIConnectivityManagerStaticsVtbl;

    interface __x_ABI_CWindows_CNetworking_CConnectivity_CIConnectivityManagerStatics
    {
        CONST_VTBL struct __x_ABI_CWindows_CNetworking_CConnectivity_CIConnectivityManagerStaticsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CNetworking_CConnectivity_CIConnectivityManagerStatics;
#endif /* !defined(____x_ABI_CWindows_CNetworking_CConnectivity_CIConnectivityManagerStatics_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CNetworking_CConnectivity_CIDataPlanStatus_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CNetworking_CConnectivity_CIDataPlanStatus_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CNetworking_CConnectivity_CIDataPlanStatusVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CNetworking_CConnectivity_CIDataPlanStatus* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CNetworking_CConnectivity_CIDataPlanStatus* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CNetworking_CConnectivity_CIDataPlanStatus* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CNetworking_CConnectivity_CIDataPlanStatus* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CNetworking_CConnectivity_CIDataPlanStatus* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CNetworking_CConnectivity_CIDataPlanStatus* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_DataPlanUsage)(__x_ABI_CWindows_CNetworking_CConnectivity_CIDataPlanStatus* This,
        __x_ABI_CWindows_CNetworking_CConnectivity_CIDataPlanUsage** value);
    HRESULT (STDMETHODCALLTYPE* get_DataLimitInMegabytes)(__x_ABI_CWindows_CNetworking_CConnectivity_CIDataPlanStatus* This,
        __x_ABI_C__FIReference_1_UINT32** value);
    HRESULT (STDMETHODCALLTYPE* get_InboundBitsPerSecond)(__x_ABI_CWindows_CNetworking_CConnectivity_CIDataPlanStatus* This,
        __x_ABI_C__FIReference_1_UINT64** value);
    HRESULT (STDMETHODCALLTYPE* get_OutboundBitsPerSecond)(__x_ABI_CWindows_CNetworking_CConnectivity_CIDataPlanStatus* This,
        __x_ABI_C__FIReference_1_UINT64** value);
    HRESULT (STDMETHODCALLTYPE* get_NextBillingCycle)(__x_ABI_CWindows_CNetworking_CConnectivity_CIDataPlanStatus* This,
        __x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CDateTime** value);
    HRESULT (STDMETHODCALLTYPE* get_MaxTransferSizeInMegabytes)(__x_ABI_CWindows_CNetworking_CConnectivity_CIDataPlanStatus* This,
        __x_ABI_C__FIReference_1_UINT32** value);

        END_INTERFACE
    } __x_ABI_CWindows_CNetworking_CConnectivity_CIDataPlanStatusVtbl;

    interface __x_ABI_CWindows_CNetworking_CConnectivity_CIDataPlanStatus
    {
        CONST_VTBL struct __x_ABI_CWindows_CNetworking_CConnectivity_CIDataPlanStatusVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CNetworking_CConnectivity_CIDataPlanStatus;
#endif /* !defined(____x_ABI_CWindows_CNetworking_CConnectivity_CIDataPlanStatus_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CNetworking_CConnectivity_CIDataPlanUsage_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CNetworking_CConnectivity_CIDataPlanUsage_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CNetworking_CConnectivity_CIDataPlanUsageVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CNetworking_CConnectivity_CIDataPlanUsage* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CNetworking_CConnectivity_CIDataPlanUsage* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CNetworking_CConnectivity_CIDataPlanUsage* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CNetworking_CConnectivity_CIDataPlanUsage* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CNetworking_CConnectivity_CIDataPlanUsage* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CNetworking_CConnectivity_CIDataPlanUsage* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_MegabytesUsed)(__x_ABI_CWindows_CNetworking_CConnectivity_CIDataPlanUsage* This,
        UINT32* value);
    HRESULT (STDMETHODCALLTYPE* get_LastSyncTime)(__x_ABI_CWindows_CNetworking_CConnectivity_CIDataPlanUsage* This,
        struct __x_ABI_CWindows_CFoundation_CDateTime* value);

        END_INTERFACE
    } __x_ABI_CWindows_CNetworking_CConnectivity_CIDataPlanUsageVtbl;

    interface __x_ABI_CWindows_CNetworking_CConnectivity_CIDataPlanUsage
    {
        CONST_VTBL struct __x_ABI_CWindows_CNetworking_CConnectivity_CIDataPlanUsageVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CNetworking_CConnectivity_CIDataPlanUsage;
#endif /* !defined(____x_ABI_CWindows_CNetworking_CConnectivity_CIDataPlanUsage_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CNetworking_CConnectivity_CIDataUsage_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CNetworking_CConnectivity_CIDataUsage_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CNetworking_CConnectivity_CIDataUsageVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CNetworking_CConnectivity_CIDataUsage* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CNetworking_CConnectivity_CIDataUsage* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CNetworking_CConnectivity_CIDataUsage* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CNetworking_CConnectivity_CIDataUsage* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CNetworking_CConnectivity_CIDataUsage* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CNetworking_CConnectivity_CIDataUsage* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_BytesSent)(__x_ABI_CWindows_CNetworking_CConnectivity_CIDataUsage* This,
        UINT64* value);
    HRESULT (STDMETHODCALLTYPE* get_BytesReceived)(__x_ABI_CWindows_CNetworking_CConnectivity_CIDataUsage* This,
        UINT64* value);

        END_INTERFACE
    } __x_ABI_CWindows_CNetworking_CConnectivity_CIDataUsageVtbl;

    interface __x_ABI_CWindows_CNetworking_CConnectivity_CIDataUsage
    {
        CONST_VTBL struct __x_ABI_CWindows_CNetworking_CConnectivity_CIDataUsageVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CNetworking_CConnectivity_CIDataUsage;
#endif /* !defined(____x_ABI_CWindows_CNetworking_CConnectivity_CIDataUsage_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CNetworking_CConnectivity_CIIPInformation_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CNetworking_CConnectivity_CIIPInformation_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CNetworking_CConnectivity_CIIPInformationVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CNetworking_CConnectivity_CIIPInformation* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CNetworking_CConnectivity_CIIPInformation* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CNetworking_CConnectivity_CIIPInformation* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CNetworking_CConnectivity_CIIPInformation* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CNetworking_CConnectivity_CIIPInformation* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CNetworking_CConnectivity_CIIPInformation* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_NetworkAdapter)(__x_ABI_CWindows_CNetworking_CConnectivity_CIIPInformation* This,
        __x_ABI_CWindows_CNetworking_CConnectivity_CINetworkAdapter** value);
    HRESULT (STDMETHODCALLTYPE* get_PrefixLength)(__x_ABI_CWindows_CNetworking_CConnectivity_CIIPInformation* This,
        __x_ABI_C__FIReference_1_byte** value);

        END_INTERFACE
    } __x_ABI_CWindows_CNetworking_CConnectivity_CIIPInformationVtbl;

    interface __x_ABI_CWindows_CNetworking_CConnectivity_CIIPInformation
    {
        CONST_VTBL struct __x_ABI_CWindows_CNetworking_CConnectivity_CIIPInformationVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CNetworking_CConnectivity_CIIPInformation;
#endif /* !defined(____x_ABI_CWindows_CNetworking_CConnectivity_CIIPInformation_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CNetworking_CConnectivity_CILanIdentifier_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CNetworking_CConnectivity_CILanIdentifier_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CNetworking_CConnectivity_CILanIdentifierVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CNetworking_CConnectivity_CILanIdentifier* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CNetworking_CConnectivity_CILanIdentifier* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CNetworking_CConnectivity_CILanIdentifier* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CNetworking_CConnectivity_CILanIdentifier* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CNetworking_CConnectivity_CILanIdentifier* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CNetworking_CConnectivity_CILanIdentifier* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_InfrastructureId)(__x_ABI_CWindows_CNetworking_CConnectivity_CILanIdentifier* This,
        __x_ABI_CWindows_CNetworking_CConnectivity_CILanIdentifierData** value);
    HRESULT (STDMETHODCALLTYPE* get_PortId)(__x_ABI_CWindows_CNetworking_CConnectivity_CILanIdentifier* This,
        __x_ABI_CWindows_CNetworking_CConnectivity_CILanIdentifierData** value);
    HRESULT (STDMETHODCALLTYPE* get_NetworkAdapterId)(__x_ABI_CWindows_CNetworking_CConnectivity_CILanIdentifier* This,
        GUID* value);

        END_INTERFACE
    } __x_ABI_CWindows_CNetworking_CConnectivity_CILanIdentifierVtbl;

    interface __x_ABI_CWindows_CNetworking_CConnectivity_CILanIdentifier
    {
        CONST_VTBL struct __x_ABI_CWindows_CNetworking_CConnectivity_CILanIdentifierVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CNetworking_CConnectivity_CILanIdentifier;
#endif /* !defined(____x_ABI_CWindows_CNetworking_CConnectivity_CILanIdentifier_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CNetworking_CConnectivity_CILanIdentifierData_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CNetworking_CConnectivity_CILanIdentifierData_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CNetworking_CConnectivity_CILanIdentifierDataVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CNetworking_CConnectivity_CILanIdentifierData* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CNetworking_CConnectivity_CILanIdentifierData* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CNetworking_CConnectivity_CILanIdentifierData* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CNetworking_CConnectivity_CILanIdentifierData* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CNetworking_CConnectivity_CILanIdentifierData* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CNetworking_CConnectivity_CILanIdentifierData* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Type)(__x_ABI_CWindows_CNetworking_CConnectivity_CILanIdentifierData* This,
        UINT32* value);
    HRESULT (STDMETHODCALLTYPE* get_Value)(__x_ABI_CWindows_CNetworking_CConnectivity_CILanIdentifierData* This,
        __x_ABI_C__FIVectorView_1_byte** value);

        END_INTERFACE
    } __x_ABI_CWindows_CNetworking_CConnectivity_CILanIdentifierDataVtbl;

    interface __x_ABI_CWindows_CNetworking_CConnectivity_CILanIdentifierData
    {
        CONST_VTBL struct __x_ABI_CWindows_CNetworking_CConnectivity_CILanIdentifierDataVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CNetworking_CConnectivity_CILanIdentifierData;
#endif /* !defined(____x_ABI_CWindows_CNetworking_CConnectivity_CILanIdentifierData_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CNetworking_CConnectivity_CINetworkAdapter_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CNetworking_CConnectivity_CINetworkAdapter_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CNetworking_CConnectivity_CINetworkAdapterVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CNetworking_CConnectivity_CINetworkAdapter* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CNetworking_CConnectivity_CINetworkAdapter* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CNetworking_CConnectivity_CINetworkAdapter* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CNetworking_CConnectivity_CINetworkAdapter* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CNetworking_CConnectivity_CINetworkAdapter* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CNetworking_CConnectivity_CINetworkAdapter* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_OutboundMaxBitsPerSecond)(__x_ABI_CWindows_CNetworking_CConnectivity_CINetworkAdapter* This,
        UINT64* value);
    HRESULT (STDMETHODCALLTYPE* get_InboundMaxBitsPerSecond)(__x_ABI_CWindows_CNetworking_CConnectivity_CINetworkAdapter* This,
        UINT64* value);
    HRESULT (STDMETHODCALLTYPE* get_IanaInterfaceType)(__x_ABI_CWindows_CNetworking_CConnectivity_CINetworkAdapter* This,
        UINT32* value);
    HRESULT (STDMETHODCALLTYPE* get_NetworkItem)(__x_ABI_CWindows_CNetworking_CConnectivity_CINetworkAdapter* This,
        __x_ABI_CWindows_CNetworking_CConnectivity_CINetworkItem** value);
    HRESULT (STDMETHODCALLTYPE* get_NetworkAdapterId)(__x_ABI_CWindows_CNetworking_CConnectivity_CINetworkAdapter* This,
        GUID* value);
    HRESULT (STDMETHODCALLTYPE* GetConnectedProfileAsync)(__x_ABI_CWindows_CNetworking_CConnectivity_CINetworkAdapter* This,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectionProfile** value);

        END_INTERFACE
    } __x_ABI_CWindows_CNetworking_CConnectivity_CINetworkAdapterVtbl;

    interface __x_ABI_CWindows_CNetworking_CConnectivity_CINetworkAdapter
    {
        CONST_VTBL struct __x_ABI_CWindows_CNetworking_CConnectivity_CINetworkAdapterVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CNetworking_CConnectivity_CINetworkAdapter;
#endif /* !defined(____x_ABI_CWindows_CNetworking_CConnectivity_CINetworkAdapter_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CNetworking_CConnectivity_CINetworkInformationStatics_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CNetworking_CConnectivity_CINetworkInformationStatics_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CNetworking_CConnectivity_CINetworkInformationStaticsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CNetworking_CConnectivity_CINetworkInformationStatics* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CNetworking_CConnectivity_CINetworkInformationStatics* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CNetworking_CConnectivity_CINetworkInformationStatics* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CNetworking_CConnectivity_CINetworkInformationStatics* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CNetworking_CConnectivity_CINetworkInformationStatics* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CNetworking_CConnectivity_CINetworkInformationStatics* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetConnectionProfiles)(__x_ABI_CWindows_CNetworking_CConnectivity_CINetworkInformationStatics* This,
        __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectionProfile** value);
    HRESULT (STDMETHODCALLTYPE* GetInternetConnectionProfile)(__x_ABI_CWindows_CNetworking_CConnectivity_CINetworkInformationStatics* This,
        __x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionProfile** value);
    HRESULT (STDMETHODCALLTYPE* GetLanIdentifiers)(__x_ABI_CWindows_CNetworking_CConnectivity_CINetworkInformationStatics* This,
        __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CLanIdentifier** value);
    HRESULT (STDMETHODCALLTYPE* GetHostNames)(__x_ABI_CWindows_CNetworking_CConnectivity_CINetworkInformationStatics* This,
        __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CHostName** value);
    HRESULT (STDMETHODCALLTYPE* GetProxyConfigurationAsync)(__x_ABI_CWindows_CNetworking_CConnectivity_CINetworkInformationStatics* This,
        __x_ABI_CWindows_CFoundation_CIUriRuntimeClass* uri,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CNetworking__CConnectivity__CProxyConfiguration** value);
    HRESULT (STDMETHODCALLTYPE* GetSortedEndpointPairs)(__x_ABI_CWindows_CNetworking_CConnectivity_CINetworkInformationStatics* This,
        __x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CEndpointPair* destinationList,
        enum __x_ABI_CWindows_CNetworking_CHostNameSortOptions sortOptions,
        __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CEndpointPair** value);
    HRESULT (STDMETHODCALLTYPE* add_NetworkStatusChanged)(__x_ABI_CWindows_CNetworking_CConnectivity_CINetworkInformationStatics* This,
        __x_ABI_CWindows_CNetworking_CConnectivity_CINetworkStatusChangedEventHandler* networkStatusHandler,
        EventRegistrationToken* eventCookie);
    HRESULT (STDMETHODCALLTYPE* remove_NetworkStatusChanged)(__x_ABI_CWindows_CNetworking_CConnectivity_CINetworkInformationStatics* This,
        EventRegistrationToken eventCookie);

        END_INTERFACE
    } __x_ABI_CWindows_CNetworking_CConnectivity_CINetworkInformationStaticsVtbl;

    interface __x_ABI_CWindows_CNetworking_CConnectivity_CINetworkInformationStatics
    {
        CONST_VTBL struct __x_ABI_CWindows_CNetworking_CConnectivity_CINetworkInformationStaticsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CNetworking_CConnectivity_CINetworkInformationStatics;
#endif /* !defined(____x_ABI_CWindows_CNetworking_CConnectivity_CINetworkInformationStatics_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CNetworking_CConnectivity_CINetworkInformationStatics2_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CNetworking_CConnectivity_CINetworkInformationStatics2_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CNetworking_CConnectivity_CINetworkInformationStatics2Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CNetworking_CConnectivity_CINetworkInformationStatics2* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CNetworking_CConnectivity_CINetworkInformationStatics2* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CNetworking_CConnectivity_CINetworkInformationStatics2* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CNetworking_CConnectivity_CINetworkInformationStatics2* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CNetworking_CConnectivity_CINetworkInformationStatics2* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CNetworking_CConnectivity_CINetworkInformationStatics2* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* FindConnectionProfilesAsync)(__x_ABI_CWindows_CNetworking_CConnectivity_CINetworkInformationStatics2* This,
        __x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionProfileFilter* pProfileFilter,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectionProfile** value);

        END_INTERFACE
    } __x_ABI_CWindows_CNetworking_CConnectivity_CINetworkInformationStatics2Vtbl;

    interface __x_ABI_CWindows_CNetworking_CConnectivity_CINetworkInformationStatics2
    {
        CONST_VTBL struct __x_ABI_CWindows_CNetworking_CConnectivity_CINetworkInformationStatics2Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CNetworking_CConnectivity_CINetworkInformationStatics2;
#endif /* !defined(____x_ABI_CWindows_CNetworking_CConnectivity_CINetworkInformationStatics2_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CNetworking_CConnectivity_CINetworkItem_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CNetworking_CConnectivity_CINetworkItem_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CNetworking_CConnectivity_CINetworkItemVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CNetworking_CConnectivity_CINetworkItem* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CNetworking_CConnectivity_CINetworkItem* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CNetworking_CConnectivity_CINetworkItem* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CNetworking_CConnectivity_CINetworkItem* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CNetworking_CConnectivity_CINetworkItem* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CNetworking_CConnectivity_CINetworkItem* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_NetworkId)(__x_ABI_CWindows_CNetworking_CConnectivity_CINetworkItem* This,
        GUID* value);
    HRESULT (STDMETHODCALLTYPE* GetNetworkTypes)(__x_ABI_CWindows_CNetworking_CConnectivity_CINetworkItem* This,
        enum __x_ABI_CWindows_CNetworking_CConnectivity_CNetworkTypes* value);

        END_INTERFACE
    } __x_ABI_CWindows_CNetworking_CConnectivity_CINetworkItemVtbl;

    interface __x_ABI_CWindows_CNetworking_CConnectivity_CINetworkItem
    {
        CONST_VTBL struct __x_ABI_CWindows_CNetworking_CConnectivity_CINetworkItemVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CNetworking_CConnectivity_CINetworkItem;
#endif /* !defined(____x_ABI_CWindows_CNetworking_CConnectivity_CINetworkItem_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CNetworking_CConnectivity_CINetworkSecuritySettings_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CNetworking_CConnectivity_CINetworkSecuritySettings_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CNetworking_CConnectivity_CINetworkSecuritySettingsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CNetworking_CConnectivity_CINetworkSecuritySettings* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CNetworking_CConnectivity_CINetworkSecuritySettings* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CNetworking_CConnectivity_CINetworkSecuritySettings* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CNetworking_CConnectivity_CINetworkSecuritySettings* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CNetworking_CConnectivity_CINetworkSecuritySettings* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CNetworking_CConnectivity_CINetworkSecuritySettings* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_NetworkAuthenticationType)(__x_ABI_CWindows_CNetworking_CConnectivity_CINetworkSecuritySettings* This,
        enum __x_ABI_CWindows_CNetworking_CConnectivity_CNetworkAuthenticationType* value);
    HRESULT (STDMETHODCALLTYPE* get_NetworkEncryptionType)(__x_ABI_CWindows_CNetworking_CConnectivity_CINetworkSecuritySettings* This,
        enum __x_ABI_CWindows_CNetworking_CConnectivity_CNetworkEncryptionType* value);

        END_INTERFACE
    } __x_ABI_CWindows_CNetworking_CConnectivity_CINetworkSecuritySettingsVtbl;

    interface __x_ABI_CWindows_CNetworking_CConnectivity_CINetworkSecuritySettings
    {
        CONST_VTBL struct __x_ABI_CWindows_CNetworking_CConnectivity_CINetworkSecuritySettingsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CNetworking_CConnectivity_CINetworkSecuritySettings;
#endif /* !defined(____x_ABI_CWindows_CNetworking_CConnectivity_CINetworkSecuritySettings_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CNetworking_CConnectivity_CINetworkStateChangeEventDetails_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CNetworking_CConnectivity_CINetworkStateChangeEventDetails_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CNetworking_CConnectivity_CINetworkStateChangeEventDetailsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CNetworking_CConnectivity_CINetworkStateChangeEventDetails* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CNetworking_CConnectivity_CINetworkStateChangeEventDetails* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CNetworking_CConnectivity_CINetworkStateChangeEventDetails* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CNetworking_CConnectivity_CINetworkStateChangeEventDetails* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CNetworking_CConnectivity_CINetworkStateChangeEventDetails* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CNetworking_CConnectivity_CINetworkStateChangeEventDetails* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_HasNewInternetConnectionProfile)(__x_ABI_CWindows_CNetworking_CConnectivity_CINetworkStateChangeEventDetails* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* get_HasNewConnectionCost)(__x_ABI_CWindows_CNetworking_CConnectivity_CINetworkStateChangeEventDetails* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* get_HasNewNetworkConnectivityLevel)(__x_ABI_CWindows_CNetworking_CConnectivity_CINetworkStateChangeEventDetails* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* get_HasNewDomainConnectivityLevel)(__x_ABI_CWindows_CNetworking_CConnectivity_CINetworkStateChangeEventDetails* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* get_HasNewHostNameList)(__x_ABI_CWindows_CNetworking_CConnectivity_CINetworkStateChangeEventDetails* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* get_HasNewWwanRegistrationState)(__x_ABI_CWindows_CNetworking_CConnectivity_CINetworkStateChangeEventDetails* This,
        boolean* value);

        END_INTERFACE
    } __x_ABI_CWindows_CNetworking_CConnectivity_CINetworkStateChangeEventDetailsVtbl;

    interface __x_ABI_CWindows_CNetworking_CConnectivity_CINetworkStateChangeEventDetails
    {
        CONST_VTBL struct __x_ABI_CWindows_CNetworking_CConnectivity_CINetworkStateChangeEventDetailsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CNetworking_CConnectivity_CINetworkStateChangeEventDetails;
#endif /* !defined(____x_ABI_CWindows_CNetworking_CConnectivity_CINetworkStateChangeEventDetails_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CNetworking_CConnectivity_CINetworkStateChangeEventDetails2_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CNetworking_CConnectivity_CINetworkStateChangeEventDetails2_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CNetworking_CConnectivity_CINetworkStateChangeEventDetails2Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CNetworking_CConnectivity_CINetworkStateChangeEventDetails2* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CNetworking_CConnectivity_CINetworkStateChangeEventDetails2* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CNetworking_CConnectivity_CINetworkStateChangeEventDetails2* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CNetworking_CConnectivity_CINetworkStateChangeEventDetails2* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CNetworking_CConnectivity_CINetworkStateChangeEventDetails2* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CNetworking_CConnectivity_CINetworkStateChangeEventDetails2* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_HasNewTetheringOperationalState)(__x_ABI_CWindows_CNetworking_CConnectivity_CINetworkStateChangeEventDetails2* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* get_HasNewTetheringClientCount)(__x_ABI_CWindows_CNetworking_CConnectivity_CINetworkStateChangeEventDetails2* This,
        boolean* value);

        END_INTERFACE
    } __x_ABI_CWindows_CNetworking_CConnectivity_CINetworkStateChangeEventDetails2Vtbl;

    interface __x_ABI_CWindows_CNetworking_CConnectivity_CINetworkStateChangeEventDetails2
    {
        CONST_VTBL struct __x_ABI_CWindows_CNetworking_CConnectivity_CINetworkStateChangeEventDetails2Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CNetworking_CConnectivity_CINetworkStateChangeEventDetails2;
#endif /* !defined(____x_ABI_CWindows_CNetworking_CConnectivity_CINetworkStateChangeEventDetails2_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CNetworking_CConnectivity_CINetworkUsage_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CNetworking_CConnectivity_CINetworkUsage_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CNetworking_CConnectivity_CINetworkUsageVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CNetworking_CConnectivity_CINetworkUsage* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CNetworking_CConnectivity_CINetworkUsage* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CNetworking_CConnectivity_CINetworkUsage* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CNetworking_CConnectivity_CINetworkUsage* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CNetworking_CConnectivity_CINetworkUsage* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CNetworking_CConnectivity_CINetworkUsage* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_BytesSent)(__x_ABI_CWindows_CNetworking_CConnectivity_CINetworkUsage* This,
        UINT64* value);
    HRESULT (STDMETHODCALLTYPE* get_BytesReceived)(__x_ABI_CWindows_CNetworking_CConnectivity_CINetworkUsage* This,
        UINT64* value);
    HRESULT (STDMETHODCALLTYPE* get_ConnectionDuration)(__x_ABI_CWindows_CNetworking_CConnectivity_CINetworkUsage* This,
        struct __x_ABI_CWindows_CFoundation_CTimeSpan* duration);

        END_INTERFACE
    } __x_ABI_CWindows_CNetworking_CConnectivity_CINetworkUsageVtbl;

    interface __x_ABI_CWindows_CNetworking_CConnectivity_CINetworkUsage
    {
        CONST_VTBL struct __x_ABI_CWindows_CNetworking_CConnectivity_CINetworkUsageVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CNetworking_CConnectivity_CINetworkUsage;
#endif /* !defined(____x_ABI_CWindows_CNetworking_CConnectivity_CINetworkUsage_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CNetworking_CConnectivity_CIProviderNetworkUsage_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CNetworking_CConnectivity_CIProviderNetworkUsage_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CNetworking_CConnectivity_CIProviderNetworkUsageVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CNetworking_CConnectivity_CIProviderNetworkUsage* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CNetworking_CConnectivity_CIProviderNetworkUsage* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CNetworking_CConnectivity_CIProviderNetworkUsage* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CNetworking_CConnectivity_CIProviderNetworkUsage* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CNetworking_CConnectivity_CIProviderNetworkUsage* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CNetworking_CConnectivity_CIProviderNetworkUsage* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_BytesSent)(__x_ABI_CWindows_CNetworking_CConnectivity_CIProviderNetworkUsage* This,
        UINT64* value);
    HRESULT (STDMETHODCALLTYPE* get_BytesReceived)(__x_ABI_CWindows_CNetworking_CConnectivity_CIProviderNetworkUsage* This,
        UINT64* value);
    HRESULT (STDMETHODCALLTYPE* get_ProviderId)(__x_ABI_CWindows_CNetworking_CConnectivity_CIProviderNetworkUsage* This,
        HSTRING* value);

        END_INTERFACE
    } __x_ABI_CWindows_CNetworking_CConnectivity_CIProviderNetworkUsageVtbl;

    interface __x_ABI_CWindows_CNetworking_CConnectivity_CIProviderNetworkUsage
    {
        CONST_VTBL struct __x_ABI_CWindows_CNetworking_CConnectivity_CIProviderNetworkUsageVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CNetworking_CConnectivity_CIProviderNetworkUsage;
#endif /* !defined(____x_ABI_CWindows_CNetworking_CConnectivity_CIProviderNetworkUsage_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CNetworking_CConnectivity_CIProxyConfiguration_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CNetworking_CConnectivity_CIProxyConfiguration_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CNetworking_CConnectivity_CIProxyConfigurationVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CNetworking_CConnectivity_CIProxyConfiguration* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CNetworking_CConnectivity_CIProxyConfiguration* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CNetworking_CConnectivity_CIProxyConfiguration* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CNetworking_CConnectivity_CIProxyConfiguration* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CNetworking_CConnectivity_CIProxyConfiguration* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CNetworking_CConnectivity_CIProxyConfiguration* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_ProxyUris)(__x_ABI_CWindows_CNetworking_CConnectivity_CIProxyConfiguration* This,
        __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CFoundation__CUri** value);
    HRESULT (STDMETHODCALLTYPE* get_CanConnectDirectly)(__x_ABI_CWindows_CNetworking_CConnectivity_CIProxyConfiguration* This,
        boolean* value);

        END_INTERFACE
    } __x_ABI_CWindows_CNetworking_CConnectivity_CIProxyConfigurationVtbl;

    interface __x_ABI_CWindows_CNetworking_CConnectivity_CIProxyConfiguration
    {
        CONST_VTBL struct __x_ABI_CWindows_CNetworking_CConnectivity_CIProxyConfigurationVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CNetworking_CConnectivity_CIProxyConfiguration;
#endif /* !defined(____x_ABI_CWindows_CNetworking_CConnectivity_CIProxyConfiguration_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CNetworking_CConnectivity_CIRoutePolicy_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CNetworking_CConnectivity_CIRoutePolicy_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CNetworking_CConnectivity_CIRoutePolicyVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CNetworking_CConnectivity_CIRoutePolicy* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CNetworking_CConnectivity_CIRoutePolicy* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CNetworking_CConnectivity_CIRoutePolicy* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CNetworking_CConnectivity_CIRoutePolicy* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CNetworking_CConnectivity_CIRoutePolicy* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CNetworking_CConnectivity_CIRoutePolicy* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_ConnectionProfile)(__x_ABI_CWindows_CNetworking_CConnectivity_CIRoutePolicy* This,
        __x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionProfile** value);
    HRESULT (STDMETHODCALLTYPE* get_HostName)(__x_ABI_CWindows_CNetworking_CConnectivity_CIRoutePolicy* This,
        __x_ABI_CWindows_CNetworking_CIHostName** value);
    HRESULT (STDMETHODCALLTYPE* get_HostNameType)(__x_ABI_CWindows_CNetworking_CConnectivity_CIRoutePolicy* This,
        enum __x_ABI_CWindows_CNetworking_CDomainNameType* value);

        END_INTERFACE
    } __x_ABI_CWindows_CNetworking_CConnectivity_CIRoutePolicyVtbl;

    interface __x_ABI_CWindows_CNetworking_CConnectivity_CIRoutePolicy
    {
        CONST_VTBL struct __x_ABI_CWindows_CNetworking_CConnectivity_CIRoutePolicyVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CNetworking_CConnectivity_CIRoutePolicy;
#endif /* !defined(____x_ABI_CWindows_CNetworking_CConnectivity_CIRoutePolicy_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CNetworking_CConnectivity_CIRoutePolicyFactory_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CNetworking_CConnectivity_CIRoutePolicyFactory_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CNetworking_CConnectivity_CIRoutePolicyFactoryVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CNetworking_CConnectivity_CIRoutePolicyFactory* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CNetworking_CConnectivity_CIRoutePolicyFactory* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CNetworking_CConnectivity_CIRoutePolicyFactory* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CNetworking_CConnectivity_CIRoutePolicyFactory* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CNetworking_CConnectivity_CIRoutePolicyFactory* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CNetworking_CConnectivity_CIRoutePolicyFactory* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* CreateRoutePolicy)(__x_ABI_CWindows_CNetworking_CConnectivity_CIRoutePolicyFactory* This,
        __x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionProfile* connectionProfile,
        __x_ABI_CWindows_CNetworking_CIHostName* hostName,
        enum __x_ABI_CWindows_CNetworking_CDomainNameType type,
        __x_ABI_CWindows_CNetworking_CConnectivity_CIRoutePolicy** routePolicy);

        END_INTERFACE
    } __x_ABI_CWindows_CNetworking_CConnectivity_CIRoutePolicyFactoryVtbl;

    interface __x_ABI_CWindows_CNetworking_CConnectivity_CIRoutePolicyFactory
    {
        CONST_VTBL struct __x_ABI_CWindows_CNetworking_CConnectivity_CIRoutePolicyFactoryVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CNetworking_CConnectivity_CIRoutePolicyFactory;
#endif /* !defined(____x_ABI_CWindows_CNetworking_CConnectivity_CIRoutePolicyFactory_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CNetworking_CConnectivity_CIWlanConnectionProfileDetails_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CNetworking_CConnectivity_CIWlanConnectionProfileDetails_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CNetworking_CConnectivity_CIWlanConnectionProfileDetailsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CNetworking_CConnectivity_CIWlanConnectionProfileDetails* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CNetworking_CConnectivity_CIWlanConnectionProfileDetails* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CNetworking_CConnectivity_CIWlanConnectionProfileDetails* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CNetworking_CConnectivity_CIWlanConnectionProfileDetails* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CNetworking_CConnectivity_CIWlanConnectionProfileDetails* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CNetworking_CConnectivity_CIWlanConnectionProfileDetails* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetConnectedSsid)(__x_ABI_CWindows_CNetworking_CConnectivity_CIWlanConnectionProfileDetails* This,
        HSTRING* value);

        END_INTERFACE
    } __x_ABI_CWindows_CNetworking_CConnectivity_CIWlanConnectionProfileDetailsVtbl;

    interface __x_ABI_CWindows_CNetworking_CConnectivity_CIWlanConnectionProfileDetails
    {
        CONST_VTBL struct __x_ABI_CWindows_CNetworking_CConnectivity_CIWlanConnectionProfileDetailsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CNetworking_CConnectivity_CIWlanConnectionProfileDetails;
#endif /* !defined(____x_ABI_CWindows_CNetworking_CConnectivity_CIWlanConnectionProfileDetails_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CNetworking_CConnectivity_CIWwanConnectionProfileDetails_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CNetworking_CConnectivity_CIWwanConnectionProfileDetails_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CNetworking_CConnectivity_CIWwanConnectionProfileDetailsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CNetworking_CConnectivity_CIWwanConnectionProfileDetails* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CNetworking_CConnectivity_CIWwanConnectionProfileDetails* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CNetworking_CConnectivity_CIWwanConnectionProfileDetails* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CNetworking_CConnectivity_CIWwanConnectionProfileDetails* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CNetworking_CConnectivity_CIWwanConnectionProfileDetails* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CNetworking_CConnectivity_CIWwanConnectionProfileDetails* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_HomeProviderId)(__x_ABI_CWindows_CNetworking_CConnectivity_CIWwanConnectionProfileDetails* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_AccessPointName)(__x_ABI_CWindows_CNetworking_CConnectivity_CIWwanConnectionProfileDetails* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* GetNetworkRegistrationState)(__x_ABI_CWindows_CNetworking_CConnectivity_CIWwanConnectionProfileDetails* This,
        enum __x_ABI_CWindows_CNetworking_CConnectivity_CWwanNetworkRegistrationState* value);
    HRESULT (STDMETHODCALLTYPE* GetCurrentDataClass)(__x_ABI_CWindows_CNetworking_CConnectivity_CIWwanConnectionProfileDetails* This,
        enum __x_ABI_CWindows_CNetworking_CConnectivity_CWwanDataClass* value);

        END_INTERFACE
    } __x_ABI_CWindows_CNetworking_CConnectivity_CIWwanConnectionProfileDetailsVtbl;

    interface __x_ABI_CWindows_CNetworking_CConnectivity_CIWwanConnectionProfileDetails
    {
        CONST_VTBL struct __x_ABI_CWindows_CNetworking_CConnectivity_CIWwanConnectionProfileDetailsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CNetworking_CConnectivity_CIWwanConnectionProfileDetails;
#endif /* !defined(____x_ABI_CWindows_CNetworking_CConnectivity_CIWwanConnectionProfileDetails_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CNetworking_CConnectivity_CIWwanConnectionProfileDetails2_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CNetworking_CConnectivity_CIWwanConnectionProfileDetails2_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CNetworking_CConnectivity_CIWwanConnectionProfileDetails2Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CNetworking_CConnectivity_CIWwanConnectionProfileDetails2* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CNetworking_CConnectivity_CIWwanConnectionProfileDetails2* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CNetworking_CConnectivity_CIWwanConnectionProfileDetails2* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CNetworking_CConnectivity_CIWwanConnectionProfileDetails2* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CNetworking_CConnectivity_CIWwanConnectionProfileDetails2* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CNetworking_CConnectivity_CIWwanConnectionProfileDetails2* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_IPKind)(__x_ABI_CWindows_CNetworking_CConnectivity_CIWwanConnectionProfileDetails2* This,
        enum __x_ABI_CWindows_CNetworking_CConnectivity_CWwanNetworkIPKind* value);
    HRESULT (STDMETHODCALLTYPE* get_PurposeGuids)(__x_ABI_CWindows_CNetworking_CConnectivity_CIWwanConnectionProfileDetails2* This,
        __x_ABI_C__FIVectorView_1_GUID** value);

        END_INTERFACE
    } __x_ABI_CWindows_CNetworking_CConnectivity_CIWwanConnectionProfileDetails2Vtbl;

    interface __x_ABI_CWindows_CNetworking_CConnectivity_CIWwanConnectionProfileDetails2
    {
        CONST_VTBL struct __x_ABI_CWindows_CNetworking_CConnectivity_CIWwanConnectionProfileDetails2Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CNetworking_CConnectivity_CIWwanConnectionProfileDetails2;
#endif /* !defined(____x_ABI_CWindows_CNetworking_CConnectivity_CIWwanConnectionProfileDetails2_INTERFACE_DEFINED__) */
    

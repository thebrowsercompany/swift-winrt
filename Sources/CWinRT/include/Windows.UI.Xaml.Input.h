// WARNING: Please don't edit this file. It was generated by Swift/WinRT v0.0.1

#pragma once
// Header files for imported files
#include <inspectable.h>
#include <EventToken.h>
#include <windowscontracts.h>
#include "Windows.Foundation.h"
#include "Windows.Devices.Input.h"
#include "Windows.System.h"
#include "Windows.UI.Core.h"
#include "Windows.UI.Input.h"
#include "Windows.UI.Xaml.h"
#include "Windows.UI.Xaml.Controls.h"
// Importing Collections header
#include "Windows.Foundation.Collections.h"

/* Forward Declarations */
#ifndef ____x_ABI_CWindows_CUI_CXaml_CInput_CIDoubleTappedEventHandler_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CInput_CIDoubleTappedEventHandler_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CUI_CXaml_CInput_CIDoubleTappedEventHandler __x_ABI_CWindows_CUI_CXaml_CInput_CIDoubleTappedEventHandler;

#endif // ____x_ABI_CWindows_CUI_CXaml_CInput_CIDoubleTappedEventHandler_FWD_DEFINED__

    #ifndef ____x_ABI_CWindows_CUI_CXaml_CInput_CIHoldingEventHandler_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CInput_CIHoldingEventHandler_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CUI_CXaml_CInput_CIHoldingEventHandler __x_ABI_CWindows_CUI_CXaml_CInput_CIHoldingEventHandler;

#endif // ____x_ABI_CWindows_CUI_CXaml_CInput_CIHoldingEventHandler_FWD_DEFINED__

    #ifndef ____x_ABI_CWindows_CUI_CXaml_CInput_CIKeyEventHandler_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CInput_CIKeyEventHandler_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CUI_CXaml_CInput_CIKeyEventHandler __x_ABI_CWindows_CUI_CXaml_CInput_CIKeyEventHandler;

#endif // ____x_ABI_CWindows_CUI_CXaml_CInput_CIKeyEventHandler_FWD_DEFINED__

    #ifndef ____x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationCompletedEventHandler_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationCompletedEventHandler_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationCompletedEventHandler __x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationCompletedEventHandler;

#endif // ____x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationCompletedEventHandler_FWD_DEFINED__

    #ifndef ____x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationDeltaEventHandler_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationDeltaEventHandler_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationDeltaEventHandler __x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationDeltaEventHandler;

#endif // ____x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationDeltaEventHandler_FWD_DEFINED__

    #ifndef ____x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationInertiaStartingEventHandler_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationInertiaStartingEventHandler_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationInertiaStartingEventHandler __x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationInertiaStartingEventHandler;

#endif // ____x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationInertiaStartingEventHandler_FWD_DEFINED__

    #ifndef ____x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationStartedEventHandler_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationStartedEventHandler_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationStartedEventHandler __x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationStartedEventHandler;

#endif // ____x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationStartedEventHandler_FWD_DEFINED__

    #ifndef ____x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationStartingEventHandler_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationStartingEventHandler_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationStartingEventHandler __x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationStartingEventHandler;

#endif // ____x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationStartingEventHandler_FWD_DEFINED__

    #ifndef ____x_ABI_CWindows_CUI_CXaml_CInput_CIPointerEventHandler_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CInput_CIPointerEventHandler_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CUI_CXaml_CInput_CIPointerEventHandler __x_ABI_CWindows_CUI_CXaml_CInput_CIPointerEventHandler;

#endif // ____x_ABI_CWindows_CUI_CXaml_CInput_CIPointerEventHandler_FWD_DEFINED__

    #ifndef ____x_ABI_CWindows_CUI_CXaml_CInput_CIRightTappedEventHandler_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CInput_CIRightTappedEventHandler_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CUI_CXaml_CInput_CIRightTappedEventHandler __x_ABI_CWindows_CUI_CXaml_CInput_CIRightTappedEventHandler;

#endif // ____x_ABI_CWindows_CUI_CXaml_CInput_CIRightTappedEventHandler_FWD_DEFINED__

    #ifndef ____x_ABI_CWindows_CUI_CXaml_CInput_CITappedEventHandler_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CInput_CITappedEventHandler_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CUI_CXaml_CInput_CITappedEventHandler __x_ABI_CWindows_CUI_CXaml_CInput_CITappedEventHandler;

#endif // ____x_ABI_CWindows_CUI_CXaml_CInput_CITappedEventHandler_FWD_DEFINED__

    #ifndef ____x_ABI_CWindows_CUI_CXaml_CInput_CIAccessKeyDisplayDismissedEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CInput_CIAccessKeyDisplayDismissedEventArgs_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CInput_CIAccessKeyDisplayDismissedEventArgs __x_ABI_CWindows_CUI_CXaml_CInput_CIAccessKeyDisplayDismissedEventArgs;

#endif // ____x_ABI_CWindows_CUI_CXaml_CInput_CIAccessKeyDisplayDismissedEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CInput_CIAccessKeyDisplayRequestedEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CInput_CIAccessKeyDisplayRequestedEventArgs_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CInput_CIAccessKeyDisplayRequestedEventArgs __x_ABI_CWindows_CUI_CXaml_CInput_CIAccessKeyDisplayRequestedEventArgs;

#endif // ____x_ABI_CWindows_CUI_CXaml_CInput_CIAccessKeyDisplayRequestedEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CInput_CIAccessKeyInvokedEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CInput_CIAccessKeyInvokedEventArgs_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CInput_CIAccessKeyInvokedEventArgs __x_ABI_CWindows_CUI_CXaml_CInput_CIAccessKeyInvokedEventArgs;

#endif // ____x_ABI_CWindows_CUI_CXaml_CInput_CIAccessKeyInvokedEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CInput_CIAccessKeyManager_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CInput_CIAccessKeyManager_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CInput_CIAccessKeyManager __x_ABI_CWindows_CUI_CXaml_CInput_CIAccessKeyManager;

#endif // ____x_ABI_CWindows_CUI_CXaml_CInput_CIAccessKeyManager_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CInput_CIAccessKeyManagerStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CInput_CIAccessKeyManagerStatics_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CInput_CIAccessKeyManagerStatics __x_ABI_CWindows_CUI_CXaml_CInput_CIAccessKeyManagerStatics;

#endif // ____x_ABI_CWindows_CUI_CXaml_CInput_CIAccessKeyManagerStatics_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CInput_CIAccessKeyManagerStatics2_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CInput_CIAccessKeyManagerStatics2_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CInput_CIAccessKeyManagerStatics2 __x_ABI_CWindows_CUI_CXaml_CInput_CIAccessKeyManagerStatics2;

#endif // ____x_ABI_CWindows_CUI_CXaml_CInput_CIAccessKeyManagerStatics2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CInput_CICanExecuteRequestedEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CInput_CICanExecuteRequestedEventArgs_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CInput_CICanExecuteRequestedEventArgs __x_ABI_CWindows_CUI_CXaml_CInput_CICanExecuteRequestedEventArgs;

#endif // ____x_ABI_CWindows_CUI_CXaml_CInput_CICanExecuteRequestedEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CInput_CICharacterReceivedRoutedEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CInput_CICharacterReceivedRoutedEventArgs_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CInput_CICharacterReceivedRoutedEventArgs __x_ABI_CWindows_CUI_CXaml_CInput_CICharacterReceivedRoutedEventArgs;

#endif // ____x_ABI_CWindows_CUI_CXaml_CInput_CICharacterReceivedRoutedEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CInput_CICommand_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CInput_CICommand_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CInput_CICommand __x_ABI_CWindows_CUI_CXaml_CInput_CICommand;

#endif // ____x_ABI_CWindows_CUI_CXaml_CInput_CICommand_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CInput_CIContextRequestedEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CInput_CIContextRequestedEventArgs_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CInput_CIContextRequestedEventArgs __x_ABI_CWindows_CUI_CXaml_CInput_CIContextRequestedEventArgs;

#endif // ____x_ABI_CWindows_CUI_CXaml_CInput_CIContextRequestedEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CInput_CIDoubleTappedRoutedEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CInput_CIDoubleTappedRoutedEventArgs_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CInput_CIDoubleTappedRoutedEventArgs __x_ABI_CWindows_CUI_CXaml_CInput_CIDoubleTappedRoutedEventArgs;

#endif // ____x_ABI_CWindows_CUI_CXaml_CInput_CIDoubleTappedRoutedEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CInput_CIExecuteRequestedEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CInput_CIExecuteRequestedEventArgs_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CInput_CIExecuteRequestedEventArgs __x_ABI_CWindows_CUI_CXaml_CInput_CIExecuteRequestedEventArgs;

#endif // ____x_ABI_CWindows_CUI_CXaml_CInput_CIExecuteRequestedEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CInput_CIFindNextElementOptions_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CInput_CIFindNextElementOptions_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CInput_CIFindNextElementOptions __x_ABI_CWindows_CUI_CXaml_CInput_CIFindNextElementOptions;

#endif // ____x_ABI_CWindows_CUI_CXaml_CInput_CIFindNextElementOptions_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CInput_CIFocusManager_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CInput_CIFocusManager_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CInput_CIFocusManager __x_ABI_CWindows_CUI_CXaml_CInput_CIFocusManager;

#endif // ____x_ABI_CWindows_CUI_CXaml_CInput_CIFocusManager_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CInput_CIFocusManagerGotFocusEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CInput_CIFocusManagerGotFocusEventArgs_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CInput_CIFocusManagerGotFocusEventArgs __x_ABI_CWindows_CUI_CXaml_CInput_CIFocusManagerGotFocusEventArgs;

#endif // ____x_ABI_CWindows_CUI_CXaml_CInput_CIFocusManagerGotFocusEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CInput_CIFocusManagerLostFocusEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CInput_CIFocusManagerLostFocusEventArgs_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CInput_CIFocusManagerLostFocusEventArgs __x_ABI_CWindows_CUI_CXaml_CInput_CIFocusManagerLostFocusEventArgs;

#endif // ____x_ABI_CWindows_CUI_CXaml_CInput_CIFocusManagerLostFocusEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CInput_CIFocusManagerStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CInput_CIFocusManagerStatics_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CInput_CIFocusManagerStatics __x_ABI_CWindows_CUI_CXaml_CInput_CIFocusManagerStatics;

#endif // ____x_ABI_CWindows_CUI_CXaml_CInput_CIFocusManagerStatics_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CInput_CIFocusManagerStatics2_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CInput_CIFocusManagerStatics2_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CInput_CIFocusManagerStatics2 __x_ABI_CWindows_CUI_CXaml_CInput_CIFocusManagerStatics2;

#endif // ____x_ABI_CWindows_CUI_CXaml_CInput_CIFocusManagerStatics2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CInput_CIFocusManagerStatics3_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CInput_CIFocusManagerStatics3_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CInput_CIFocusManagerStatics3 __x_ABI_CWindows_CUI_CXaml_CInput_CIFocusManagerStatics3;

#endif // ____x_ABI_CWindows_CUI_CXaml_CInput_CIFocusManagerStatics3_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CInput_CIFocusManagerStatics4_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CInput_CIFocusManagerStatics4_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CInput_CIFocusManagerStatics4 __x_ABI_CWindows_CUI_CXaml_CInput_CIFocusManagerStatics4;

#endif // ____x_ABI_CWindows_CUI_CXaml_CInput_CIFocusManagerStatics4_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CInput_CIFocusManagerStatics5_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CInput_CIFocusManagerStatics5_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CInput_CIFocusManagerStatics5 __x_ABI_CWindows_CUI_CXaml_CInput_CIFocusManagerStatics5;

#endif // ____x_ABI_CWindows_CUI_CXaml_CInput_CIFocusManagerStatics5_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CInput_CIFocusManagerStatics6_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CInput_CIFocusManagerStatics6_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CInput_CIFocusManagerStatics6 __x_ABI_CWindows_CUI_CXaml_CInput_CIFocusManagerStatics6;

#endif // ____x_ABI_CWindows_CUI_CXaml_CInput_CIFocusManagerStatics6_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CInput_CIFocusManagerStatics7_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CInput_CIFocusManagerStatics7_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CInput_CIFocusManagerStatics7 __x_ABI_CWindows_CUI_CXaml_CInput_CIFocusManagerStatics7;

#endif // ____x_ABI_CWindows_CUI_CXaml_CInput_CIFocusManagerStatics7_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CInput_CIFocusMovementResult_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CInput_CIFocusMovementResult_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CInput_CIFocusMovementResult __x_ABI_CWindows_CUI_CXaml_CInput_CIFocusMovementResult;

#endif // ____x_ABI_CWindows_CUI_CXaml_CInput_CIFocusMovementResult_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CInput_CIGettingFocusEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CInput_CIGettingFocusEventArgs_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CInput_CIGettingFocusEventArgs __x_ABI_CWindows_CUI_CXaml_CInput_CIGettingFocusEventArgs;

#endif // ____x_ABI_CWindows_CUI_CXaml_CInput_CIGettingFocusEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CInput_CIGettingFocusEventArgs2_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CInput_CIGettingFocusEventArgs2_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CInput_CIGettingFocusEventArgs2 __x_ABI_CWindows_CUI_CXaml_CInput_CIGettingFocusEventArgs2;

#endif // ____x_ABI_CWindows_CUI_CXaml_CInput_CIGettingFocusEventArgs2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CInput_CIGettingFocusEventArgs3_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CInput_CIGettingFocusEventArgs3_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CInput_CIGettingFocusEventArgs3 __x_ABI_CWindows_CUI_CXaml_CInput_CIGettingFocusEventArgs3;

#endif // ____x_ABI_CWindows_CUI_CXaml_CInput_CIGettingFocusEventArgs3_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CInput_CIHoldingRoutedEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CInput_CIHoldingRoutedEventArgs_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CInput_CIHoldingRoutedEventArgs __x_ABI_CWindows_CUI_CXaml_CInput_CIHoldingRoutedEventArgs;

#endif // ____x_ABI_CWindows_CUI_CXaml_CInput_CIHoldingRoutedEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CInput_CIInertiaExpansionBehavior_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CInput_CIInertiaExpansionBehavior_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CInput_CIInertiaExpansionBehavior __x_ABI_CWindows_CUI_CXaml_CInput_CIInertiaExpansionBehavior;

#endif // ____x_ABI_CWindows_CUI_CXaml_CInput_CIInertiaExpansionBehavior_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CInput_CIInertiaRotationBehavior_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CInput_CIInertiaRotationBehavior_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CInput_CIInertiaRotationBehavior __x_ABI_CWindows_CUI_CXaml_CInput_CIInertiaRotationBehavior;

#endif // ____x_ABI_CWindows_CUI_CXaml_CInput_CIInertiaRotationBehavior_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CInput_CIInertiaTranslationBehavior_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CInput_CIInertiaTranslationBehavior_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CInput_CIInertiaTranslationBehavior __x_ABI_CWindows_CUI_CXaml_CInput_CIInertiaTranslationBehavior;

#endif // ____x_ABI_CWindows_CUI_CXaml_CInput_CIInertiaTranslationBehavior_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CInput_CIInputScope_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CInput_CIInputScope_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CInput_CIInputScope __x_ABI_CWindows_CUI_CXaml_CInput_CIInputScope;

#endif // ____x_ABI_CWindows_CUI_CXaml_CInput_CIInputScope_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CInput_CIInputScopeName_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CInput_CIInputScopeName_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CInput_CIInputScopeName __x_ABI_CWindows_CUI_CXaml_CInput_CIInputScopeName;

#endif // ____x_ABI_CWindows_CUI_CXaml_CInput_CIInputScopeName_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CInput_CIInputScopeNameFactory_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CInput_CIInputScopeNameFactory_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CInput_CIInputScopeNameFactory __x_ABI_CWindows_CUI_CXaml_CInput_CIInputScopeNameFactory;

#endif // ____x_ABI_CWindows_CUI_CXaml_CInput_CIInputScopeNameFactory_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CInput_CIKeyRoutedEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CInput_CIKeyRoutedEventArgs_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CInput_CIKeyRoutedEventArgs __x_ABI_CWindows_CUI_CXaml_CInput_CIKeyRoutedEventArgs;

#endif // ____x_ABI_CWindows_CUI_CXaml_CInput_CIKeyRoutedEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CInput_CIKeyRoutedEventArgs2_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CInput_CIKeyRoutedEventArgs2_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CInput_CIKeyRoutedEventArgs2 __x_ABI_CWindows_CUI_CXaml_CInput_CIKeyRoutedEventArgs2;

#endif // ____x_ABI_CWindows_CUI_CXaml_CInput_CIKeyRoutedEventArgs2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CInput_CIKeyRoutedEventArgs3_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CInput_CIKeyRoutedEventArgs3_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CInput_CIKeyRoutedEventArgs3 __x_ABI_CWindows_CUI_CXaml_CInput_CIKeyRoutedEventArgs3;

#endif // ____x_ABI_CWindows_CUI_CXaml_CInput_CIKeyRoutedEventArgs3_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CInput_CIKeyboardAccelerator_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CInput_CIKeyboardAccelerator_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CInput_CIKeyboardAccelerator __x_ABI_CWindows_CUI_CXaml_CInput_CIKeyboardAccelerator;

#endif // ____x_ABI_CWindows_CUI_CXaml_CInput_CIKeyboardAccelerator_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CInput_CIKeyboardAcceleratorFactory_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CInput_CIKeyboardAcceleratorFactory_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CInput_CIKeyboardAcceleratorFactory __x_ABI_CWindows_CUI_CXaml_CInput_CIKeyboardAcceleratorFactory;

#endif // ____x_ABI_CWindows_CUI_CXaml_CInput_CIKeyboardAcceleratorFactory_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CInput_CIKeyboardAcceleratorInvokedEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CInput_CIKeyboardAcceleratorInvokedEventArgs_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CInput_CIKeyboardAcceleratorInvokedEventArgs __x_ABI_CWindows_CUI_CXaml_CInput_CIKeyboardAcceleratorInvokedEventArgs;

#endif // ____x_ABI_CWindows_CUI_CXaml_CInput_CIKeyboardAcceleratorInvokedEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CInput_CIKeyboardAcceleratorInvokedEventArgs2_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CInput_CIKeyboardAcceleratorInvokedEventArgs2_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CInput_CIKeyboardAcceleratorInvokedEventArgs2 __x_ABI_CWindows_CUI_CXaml_CInput_CIKeyboardAcceleratorInvokedEventArgs2;

#endif // ____x_ABI_CWindows_CUI_CXaml_CInput_CIKeyboardAcceleratorInvokedEventArgs2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CInput_CIKeyboardAcceleratorStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CInput_CIKeyboardAcceleratorStatics_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CInput_CIKeyboardAcceleratorStatics __x_ABI_CWindows_CUI_CXaml_CInput_CIKeyboardAcceleratorStatics;

#endif // ____x_ABI_CWindows_CUI_CXaml_CInput_CIKeyboardAcceleratorStatics_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CInput_CILosingFocusEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CInput_CILosingFocusEventArgs_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CInput_CILosingFocusEventArgs __x_ABI_CWindows_CUI_CXaml_CInput_CILosingFocusEventArgs;

#endif // ____x_ABI_CWindows_CUI_CXaml_CInput_CILosingFocusEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CInput_CILosingFocusEventArgs2_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CInput_CILosingFocusEventArgs2_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CInput_CILosingFocusEventArgs2 __x_ABI_CWindows_CUI_CXaml_CInput_CILosingFocusEventArgs2;

#endif // ____x_ABI_CWindows_CUI_CXaml_CInput_CILosingFocusEventArgs2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CInput_CILosingFocusEventArgs3_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CInput_CILosingFocusEventArgs3_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CInput_CILosingFocusEventArgs3 __x_ABI_CWindows_CUI_CXaml_CInput_CILosingFocusEventArgs3;

#endif // ____x_ABI_CWindows_CUI_CXaml_CInput_CILosingFocusEventArgs3_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationCompletedRoutedEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationCompletedRoutedEventArgs_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationCompletedRoutedEventArgs __x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationCompletedRoutedEventArgs;

#endif // ____x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationCompletedRoutedEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationDeltaRoutedEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationDeltaRoutedEventArgs_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationDeltaRoutedEventArgs __x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationDeltaRoutedEventArgs;

#endif // ____x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationDeltaRoutedEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationInertiaStartingRoutedEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationInertiaStartingRoutedEventArgs_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationInertiaStartingRoutedEventArgs __x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationInertiaStartingRoutedEventArgs;

#endif // ____x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationInertiaStartingRoutedEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationPivot_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationPivot_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationPivot __x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationPivot;

#endif // ____x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationPivot_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationPivotFactory_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationPivotFactory_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationPivotFactory __x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationPivotFactory;

#endif // ____x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationPivotFactory_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationStartedRoutedEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationStartedRoutedEventArgs_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationStartedRoutedEventArgs __x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationStartedRoutedEventArgs;

#endif // ____x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationStartedRoutedEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationStartedRoutedEventArgsFactory_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationStartedRoutedEventArgsFactory_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationStartedRoutedEventArgsFactory __x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationStartedRoutedEventArgsFactory;

#endif // ____x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationStartedRoutedEventArgsFactory_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationStartingRoutedEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationStartingRoutedEventArgs_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationStartingRoutedEventArgs __x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationStartingRoutedEventArgs;

#endif // ____x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationStartingRoutedEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CInput_CINoFocusCandidateFoundEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CInput_CINoFocusCandidateFoundEventArgs_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CInput_CINoFocusCandidateFoundEventArgs __x_ABI_CWindows_CUI_CXaml_CInput_CINoFocusCandidateFoundEventArgs;

#endif // ____x_ABI_CWindows_CUI_CXaml_CInput_CINoFocusCandidateFoundEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CInput_CIPointer_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CInput_CIPointer_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CInput_CIPointer __x_ABI_CWindows_CUI_CXaml_CInput_CIPointer;

#endif // ____x_ABI_CWindows_CUI_CXaml_CInput_CIPointer_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CInput_CIPointerRoutedEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CInput_CIPointerRoutedEventArgs_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CInput_CIPointerRoutedEventArgs __x_ABI_CWindows_CUI_CXaml_CInput_CIPointerRoutedEventArgs;

#endif // ____x_ABI_CWindows_CUI_CXaml_CInput_CIPointerRoutedEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CInput_CIPointerRoutedEventArgs2_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CInput_CIPointerRoutedEventArgs2_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CInput_CIPointerRoutedEventArgs2 __x_ABI_CWindows_CUI_CXaml_CInput_CIPointerRoutedEventArgs2;

#endif // ____x_ABI_CWindows_CUI_CXaml_CInput_CIPointerRoutedEventArgs2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CInput_CIProcessKeyboardAcceleratorEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CInput_CIProcessKeyboardAcceleratorEventArgs_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CInput_CIProcessKeyboardAcceleratorEventArgs __x_ABI_CWindows_CUI_CXaml_CInput_CIProcessKeyboardAcceleratorEventArgs;

#endif // ____x_ABI_CWindows_CUI_CXaml_CInput_CIProcessKeyboardAcceleratorEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CInput_CIRightTappedRoutedEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CInput_CIRightTappedRoutedEventArgs_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CInput_CIRightTappedRoutedEventArgs __x_ABI_CWindows_CUI_CXaml_CInput_CIRightTappedRoutedEventArgs;

#endif // ____x_ABI_CWindows_CUI_CXaml_CInput_CIRightTappedRoutedEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CInput_CIStandardUICommand_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CInput_CIStandardUICommand_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CInput_CIStandardUICommand __x_ABI_CWindows_CUI_CXaml_CInput_CIStandardUICommand;

#endif // ____x_ABI_CWindows_CUI_CXaml_CInput_CIStandardUICommand_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CInput_CIStandardUICommand2_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CInput_CIStandardUICommand2_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CInput_CIStandardUICommand2 __x_ABI_CWindows_CUI_CXaml_CInput_CIStandardUICommand2;

#endif // ____x_ABI_CWindows_CUI_CXaml_CInput_CIStandardUICommand2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CInput_CIStandardUICommandFactory_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CInput_CIStandardUICommandFactory_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CInput_CIStandardUICommandFactory __x_ABI_CWindows_CUI_CXaml_CInput_CIStandardUICommandFactory;

#endif // ____x_ABI_CWindows_CUI_CXaml_CInput_CIStandardUICommandFactory_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CInput_CIStandardUICommandStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CInput_CIStandardUICommandStatics_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CInput_CIStandardUICommandStatics __x_ABI_CWindows_CUI_CXaml_CInput_CIStandardUICommandStatics;

#endif // ____x_ABI_CWindows_CUI_CXaml_CInput_CIStandardUICommandStatics_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CInput_CITappedRoutedEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CInput_CITappedRoutedEventArgs_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CInput_CITappedRoutedEventArgs __x_ABI_CWindows_CUI_CXaml_CInput_CITappedRoutedEventArgs;

#endif // ____x_ABI_CWindows_CUI_CXaml_CInput_CITappedRoutedEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CInput_CIXamlUICommand_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CInput_CIXamlUICommand_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CInput_CIXamlUICommand __x_ABI_CWindows_CUI_CXaml_CInput_CIXamlUICommand;

#endif // ____x_ABI_CWindows_CUI_CXaml_CInput_CIXamlUICommand_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CInput_CIXamlUICommandFactory_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CInput_CIXamlUICommandFactory_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CInput_CIXamlUICommandFactory __x_ABI_CWindows_CUI_CXaml_CInput_CIXamlUICommandFactory;

#endif // ____x_ABI_CWindows_CUI_CXaml_CInput_CIXamlUICommandFactory_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CInput_CIXamlUICommandStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CInput_CIXamlUICommandStatics_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CInput_CIXamlUICommandStatics __x_ABI_CWindows_CUI_CXaml_CInput_CIXamlUICommandStatics;

#endif // ____x_ABI_CWindows_CUI_CXaml_CInput_CIXamlUICommandStatics_FWD_DEFINED__

// Parameterized interface forward declarations (C)

// Collection interface definitions

typedef interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CUI__CXaml__CInput__CFocusMovementResult __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CUI__CXaml__CInput__CFocusMovementResult;

#if !defined(____x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CUI__CXaml__CInput__CFocusMovementResult_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CUI__CXaml__CInput__CFocusMovementResult_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CUI__CXaml__CInput__CFocusMovementResult __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CUI__CXaml__CInput__CFocusMovementResult;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CUI__CXaml__CInput__CFocusMovementResult;

    typedef struct __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CUI__CXaml__CInput__CFocusMovementResultVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CUI__CXaml__CInput__CFocusMovementResult* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CUI__CXaml__CInput__CFocusMovementResult* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CUI__CXaml__CInput__CFocusMovementResult* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CUI__CXaml__CInput__CFocusMovementResult* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CUI__CXaml__CInput__CFocusMovementResult* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CUI__CXaml__CInput__CFocusMovementResult* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* put_Completed)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CUI__CXaml__CInput__CFocusMovementResult* This,
        __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CUI__CXaml__CInput__CFocusMovementResult* handler);
    HRESULT (STDMETHODCALLTYPE* get_Completed)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CUI__CXaml__CInput__CFocusMovementResult* This,
        __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CUI__CXaml__CInput__CFocusMovementResult** result);
    HRESULT (STDMETHODCALLTYPE* GetResults)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CUI__CXaml__CInput__CFocusMovementResult* This,
        __x_ABI_CWindows_CUI_CXaml_CInput_CIFocusMovementResult** result);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CUI__CXaml__CInput__CFocusMovementResultVtbl;

    interface __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CUI__CXaml__CInput__CFocusMovementResult
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CUI__CXaml__CInput__CFocusMovementResultVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CUI__CXaml__CInput__CFocusMovementResult_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CUI__CXaml__CInput__CFocusMovementResult_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CUI__CXaml__CInput__CFocusMovementResult_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CUI__CXaml__CInput__CFocusMovementResult __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CUI__CXaml__CInput__CFocusMovementResult;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CUI__CXaml__CInput__CFocusMovementResult;

    typedef struct __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CUI__CXaml__CInput__CFocusMovementResultVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CUI__CXaml__CInput__CFocusMovementResult* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CUI__CXaml__CInput__CFocusMovementResult* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CUI__CXaml__CInput__CFocusMovementResult* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CUI__CXaml__CInput__CFocusMovementResult* This,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CUI__CXaml__CInput__CFocusMovementResult* asyncInfo,
        enum __x_ABI_CWindows_CFoundation_CAsyncStatus asyncStatus);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CUI__CXaml__CInput__CFocusMovementResultVtbl;

    interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CUI__CXaml__CInput__CFocusMovementResult
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CUI__CXaml__CInput__CFocusMovementResultVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CUI__CXaml__CInput__CFocusMovementResult_INTERFACE_DEFINED__
    
#ifndef ____x_ABI_CWindows_CUI_CInput_CIPointerPoint_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CInput_CIPointerPoint_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CInput_CIPointerPoint __x_ABI_CWindows_CUI_CInput_CIPointerPoint;

#endif // ____x_ABI_CWindows_CUI_CInput_CIPointerPoint_FWD_DEFINED__

#if !defined(____x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CInput__CPointerPoint_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CInput__CPointerPoint_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CInput__CPointerPoint __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CInput__CPointerPoint;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CInput__CPointerPoint;

    typedef struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CInput__CPointerPointVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CInput__CPointerPoint* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CInput__CPointerPoint* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CInput__CPointerPoint* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CInput__CPointerPoint* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CInput__CPointerPoint* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CInput__CPointerPoint* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Current)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CInput__CPointerPoint* This,
        __x_ABI_CWindows_CUI_CInput_CIPointerPoint** result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CInput__CPointerPoint* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CInput__CPointerPoint* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CInput__CPointerPoint* This,
        UINT32 itemsLength,
        __x_ABI_CWindows_CUI_CInput_CIPointerPoint** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CInput__CPointerPointVtbl;

    interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CInput__CPointerPoint
    {
        CONST_VTBL struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CInput__CPointerPointVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CInput__CPointerPoint_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CInput__CPointerPoint_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CInput__CPointerPoint_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CInput__CPointerPoint __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CInput__CPointerPoint;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CInput__CPointerPoint;

    typedef struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CInput__CPointerPointVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CInput__CPointerPoint* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CInput__CPointerPoint* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CInput__CPointerPoint* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CInput__CPointerPoint* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CInput__CPointerPoint* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CInput__CPointerPoint* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* First)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CInput__CPointerPoint* This,
        __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CInput__CPointerPoint** result);

        END_INTERFACE
    } __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CInput__CPointerPointVtbl;

    interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CInput__CPointerPoint
    {
        CONST_VTBL struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CInput__CPointerPointVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CInput__CPointerPoint_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CInput__CInputScopeName_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CInput__CInputScopeName_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CInput__CInputScopeName __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CInput__CInputScopeName;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CInput__CInputScopeName;

    typedef struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CInput__CInputScopeNameVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CInput__CInputScopeName* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CInput__CInputScopeName* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CInput__CInputScopeName* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CInput__CInputScopeName* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CInput__CInputScopeName* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CInput__CInputScopeName* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Current)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CInput__CInputScopeName* This,
        __x_ABI_CWindows_CUI_CXaml_CInput_CIInputScopeName** result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CInput__CInputScopeName* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CInput__CInputScopeName* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CInput__CInputScopeName* This,
        UINT32 itemsLength,
        __x_ABI_CWindows_CUI_CXaml_CInput_CIInputScopeName** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CInput__CInputScopeNameVtbl;

    interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CInput__CInputScopeName
    {
        CONST_VTBL struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CInput__CInputScopeNameVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CInput__CInputScopeName_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CInput__CInputScopeName_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CInput__CInputScopeName_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CInput__CInputScopeName __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CInput__CInputScopeName;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CInput__CInputScopeName;

    typedef struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CInput__CInputScopeNameVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CInput__CInputScopeName* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CInput__CInputScopeName* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CInput__CInputScopeName* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CInput__CInputScopeName* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CInput__CInputScopeName* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CInput__CInputScopeName* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* First)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CInput__CInputScopeName* This,
        __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CInput__CInputScopeName** result);

        END_INTERFACE
    } __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CInput__CInputScopeNameVtbl;

    interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CInput__CInputScopeName
    {
        CONST_VTBL struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CInput__CInputScopeNameVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CInput__CInputScopeName_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CInput__CKeyboardAccelerator_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CInput__CKeyboardAccelerator_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CInput__CKeyboardAccelerator __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CInput__CKeyboardAccelerator;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CInput__CKeyboardAccelerator;

    typedef struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CInput__CKeyboardAcceleratorVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CInput__CKeyboardAccelerator* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CInput__CKeyboardAccelerator* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CInput__CKeyboardAccelerator* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CInput__CKeyboardAccelerator* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CInput__CKeyboardAccelerator* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CInput__CKeyboardAccelerator* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Current)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CInput__CKeyboardAccelerator* This,
        __x_ABI_CWindows_CUI_CXaml_CInput_CIKeyboardAccelerator** result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CInput__CKeyboardAccelerator* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CInput__CKeyboardAccelerator* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CInput__CKeyboardAccelerator* This,
        UINT32 itemsLength,
        __x_ABI_CWindows_CUI_CXaml_CInput_CIKeyboardAccelerator** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CInput__CKeyboardAcceleratorVtbl;

    interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CInput__CKeyboardAccelerator
    {
        CONST_VTBL struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CInput__CKeyboardAcceleratorVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CInput__CKeyboardAccelerator_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CInput__CKeyboardAccelerator_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CInput__CKeyboardAccelerator_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CInput__CKeyboardAccelerator __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CInput__CKeyboardAccelerator;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CInput__CKeyboardAccelerator;

    typedef struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CInput__CKeyboardAcceleratorVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CInput__CKeyboardAccelerator* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CInput__CKeyboardAccelerator* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CInput__CKeyboardAccelerator* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CInput__CKeyboardAccelerator* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CInput__CKeyboardAccelerator* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CInput__CKeyboardAccelerator* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* First)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CInput__CKeyboardAccelerator* This,
        __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CInput__CKeyboardAccelerator** result);

        END_INTERFACE
    } __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CInput__CKeyboardAcceleratorVtbl;

    interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CInput__CKeyboardAccelerator
    {
        CONST_VTBL struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CInput__CKeyboardAcceleratorVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CInput__CKeyboardAccelerator_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CPointerPoint_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CPointerPoint_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CPointerPoint __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CPointerPoint;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CPointerPoint;

    typedef struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CPointerPointVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CPointerPoint* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CPointerPoint* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CPointerPoint* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CPointerPoint* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CPointerPoint* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CPointerPoint* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CPointerPoint* This,
        UINT32 index,
        __x_ABI_CWindows_CUI_CInput_CIPointerPoint** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CPointerPoint* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CPointerPoint* This,
        __x_ABI_CWindows_CUI_CInput_CIPointerPoint* value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CPointerPoint* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        __x_ABI_CWindows_CUI_CInput_CIPointerPoint** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CPointerPointVtbl;

    interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CPointerPoint
    {
        CONST_VTBL struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CPointerPointVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CPointerPoint_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CInput__CInputScopeName_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CInput__CInputScopeName_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CInput__CInputScopeName __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CInput__CInputScopeName;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CInput__CInputScopeName;

    typedef struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CInput__CInputScopeNameVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CInput__CInputScopeName* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CInput__CInputScopeName* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CInput__CInputScopeName* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CInput__CInputScopeName* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CInput__CInputScopeName* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CInput__CInputScopeName* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CInput__CInputScopeName* This,
        UINT32 index,
        __x_ABI_CWindows_CUI_CXaml_CInput_CIInputScopeName** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CInput__CInputScopeName* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CInput__CInputScopeName* This,
        __x_ABI_CWindows_CUI_CXaml_CInput_CIInputScopeName* value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CInput__CInputScopeName* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        __x_ABI_CWindows_CUI_CXaml_CInput_CIInputScopeName** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CInput__CInputScopeNameVtbl;

    interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CInput__CInputScopeName
    {
        CONST_VTBL struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CInput__CInputScopeNameVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CInput__CInputScopeName_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CInput__CKeyboardAccelerator_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CInput__CKeyboardAccelerator_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CInput__CKeyboardAccelerator __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CInput__CKeyboardAccelerator;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CInput__CKeyboardAccelerator;

    typedef struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CInput__CKeyboardAcceleratorVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CInput__CKeyboardAccelerator* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CInput__CKeyboardAccelerator* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CInput__CKeyboardAccelerator* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CInput__CKeyboardAccelerator* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CInput__CKeyboardAccelerator* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CInput__CKeyboardAccelerator* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CInput__CKeyboardAccelerator* This,
        UINT32 index,
        __x_ABI_CWindows_CUI_CXaml_CInput_CIKeyboardAccelerator** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CInput__CKeyboardAccelerator* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CInput__CKeyboardAccelerator* This,
        __x_ABI_CWindows_CUI_CXaml_CInput_CIKeyboardAccelerator* value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CInput__CKeyboardAccelerator* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        __x_ABI_CWindows_CUI_CXaml_CInput_CIKeyboardAccelerator** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CInput__CKeyboardAcceleratorVtbl;

    interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CInput__CKeyboardAccelerator
    {
        CONST_VTBL struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CInput__CKeyboardAcceleratorVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CInput__CKeyboardAccelerator_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CInput__CPointerPoint_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CInput__CPointerPoint_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CInput__CPointerPoint __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CInput__CPointerPoint;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CInput__CPointerPoint;

    typedef struct __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CInput__CPointerPointVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CInput__CPointerPoint* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CInput__CPointerPoint* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CInput__CPointerPoint* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CInput__CPointerPoint* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CInput__CPointerPoint* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CInput__CPointerPoint* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CInput__CPointerPoint* This,
        UINT32 index,
        __x_ABI_CWindows_CUI_CInput_CIPointerPoint** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CInput__CPointerPoint* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* GetView)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CInput__CPointerPoint* This,
        __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CPointerPoint** result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CInput__CPointerPoint* This,
        __x_ABI_CWindows_CUI_CInput_CIPointerPoint* value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* SetAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CInput__CPointerPoint* This,
        UINT32 index,
        __x_ABI_CWindows_CUI_CInput_CIPointerPoint* value);
    HRESULT (STDMETHODCALLTYPE* InsertAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CInput__CPointerPoint* This,
        UINT32 index,
        __x_ABI_CWindows_CUI_CInput_CIPointerPoint* value);
    HRESULT (STDMETHODCALLTYPE* RemoveAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CInput__CPointerPoint* This,
        UINT32 index);
    HRESULT (STDMETHODCALLTYPE* Append)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CInput__CPointerPoint* This,
        __x_ABI_CWindows_CUI_CInput_CIPointerPoint* value);
    HRESULT (STDMETHODCALLTYPE* RemoveAtEnd)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CInput__CPointerPoint* This);
    HRESULT (STDMETHODCALLTYPE* Clear)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CInput__CPointerPoint* This);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CInput__CPointerPoint* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        __x_ABI_CWindows_CUI_CInput_CIPointerPoint** items,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* ReplaceAll)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CInput__CPointerPoint* This,
        UINT32 itemsLength,
        __x_ABI_CWindows_CUI_CInput_CIPointerPoint** items);

        END_INTERFACE
    } __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CInput__CPointerPointVtbl;

    interface __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CInput__CPointerPoint
    {
        CONST_VTBL struct __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CInput__CPointerPointVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CInput__CPointerPoint_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CInput__CInputScopeName_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CInput__CInputScopeName_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CInput__CInputScopeName __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CInput__CInputScopeName;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CInput__CInputScopeName;

    typedef struct __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CInput__CInputScopeNameVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CInput__CInputScopeName* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CInput__CInputScopeName* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CInput__CInputScopeName* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CInput__CInputScopeName* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CInput__CInputScopeName* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CInput__CInputScopeName* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CInput__CInputScopeName* This,
        UINT32 index,
        __x_ABI_CWindows_CUI_CXaml_CInput_CIInputScopeName** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CInput__CInputScopeName* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* GetView)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CInput__CInputScopeName* This,
        __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CInput__CInputScopeName** result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CInput__CInputScopeName* This,
        __x_ABI_CWindows_CUI_CXaml_CInput_CIInputScopeName* value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* SetAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CInput__CInputScopeName* This,
        UINT32 index,
        __x_ABI_CWindows_CUI_CXaml_CInput_CIInputScopeName* value);
    HRESULT (STDMETHODCALLTYPE* InsertAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CInput__CInputScopeName* This,
        UINT32 index,
        __x_ABI_CWindows_CUI_CXaml_CInput_CIInputScopeName* value);
    HRESULT (STDMETHODCALLTYPE* RemoveAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CInput__CInputScopeName* This,
        UINT32 index);
    HRESULT (STDMETHODCALLTYPE* Append)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CInput__CInputScopeName* This,
        __x_ABI_CWindows_CUI_CXaml_CInput_CIInputScopeName* value);
    HRESULT (STDMETHODCALLTYPE* RemoveAtEnd)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CInput__CInputScopeName* This);
    HRESULT (STDMETHODCALLTYPE* Clear)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CInput__CInputScopeName* This);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CInput__CInputScopeName* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        __x_ABI_CWindows_CUI_CXaml_CInput_CIInputScopeName** items,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* ReplaceAll)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CInput__CInputScopeName* This,
        UINT32 itemsLength,
        __x_ABI_CWindows_CUI_CXaml_CInput_CIInputScopeName** items);

        END_INTERFACE
    } __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CInput__CInputScopeNameVtbl;

    interface __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CInput__CInputScopeName
    {
        CONST_VTBL struct __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CInput__CInputScopeNameVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CInput__CInputScopeName_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CInput__CKeyboardAccelerator_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CInput__CKeyboardAccelerator_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CInput__CKeyboardAccelerator __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CInput__CKeyboardAccelerator;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CInput__CKeyboardAccelerator;

    typedef struct __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CInput__CKeyboardAcceleratorVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CInput__CKeyboardAccelerator* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CInput__CKeyboardAccelerator* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CInput__CKeyboardAccelerator* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CInput__CKeyboardAccelerator* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CInput__CKeyboardAccelerator* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CInput__CKeyboardAccelerator* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CInput__CKeyboardAccelerator* This,
        UINT32 index,
        __x_ABI_CWindows_CUI_CXaml_CInput_CIKeyboardAccelerator** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CInput__CKeyboardAccelerator* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* GetView)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CInput__CKeyboardAccelerator* This,
        __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CInput__CKeyboardAccelerator** result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CInput__CKeyboardAccelerator* This,
        __x_ABI_CWindows_CUI_CXaml_CInput_CIKeyboardAccelerator* value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* SetAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CInput__CKeyboardAccelerator* This,
        UINT32 index,
        __x_ABI_CWindows_CUI_CXaml_CInput_CIKeyboardAccelerator* value);
    HRESULT (STDMETHODCALLTYPE* InsertAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CInput__CKeyboardAccelerator* This,
        UINT32 index,
        __x_ABI_CWindows_CUI_CXaml_CInput_CIKeyboardAccelerator* value);
    HRESULT (STDMETHODCALLTYPE* RemoveAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CInput__CKeyboardAccelerator* This,
        UINT32 index);
    HRESULT (STDMETHODCALLTYPE* Append)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CInput__CKeyboardAccelerator* This,
        __x_ABI_CWindows_CUI_CXaml_CInput_CIKeyboardAccelerator* value);
    HRESULT (STDMETHODCALLTYPE* RemoveAtEnd)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CInput__CKeyboardAccelerator* This);
    HRESULT (STDMETHODCALLTYPE* Clear)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CInput__CKeyboardAccelerator* This);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CInput__CKeyboardAccelerator* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        __x_ABI_CWindows_CUI_CXaml_CInput_CIKeyboardAccelerator** items,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* ReplaceAll)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CInput__CKeyboardAccelerator* This,
        UINT32 itemsLength,
        __x_ABI_CWindows_CUI_CXaml_CInput_CIKeyboardAccelerator** items);

        END_INTERFACE
    } __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CInput__CKeyboardAcceleratorVtbl;

    interface __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CInput__CKeyboardAccelerator
    {
        CONST_VTBL struct __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CInput__CKeyboardAcceleratorVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CInput__CKeyboardAccelerator_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIEventHandler_1_IInspectable_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIEventHandler_1_IInspectable_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIEventHandler_1_IInspectable __x_ABI_C__FIEventHandler_1_IInspectable;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIEventHandler_1_IInspectable;

    typedef struct __x_ABI_C__FIEventHandler_1_IInspectableVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIEventHandler_1_IInspectable* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIEventHandler_1_IInspectable* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIEventHandler_1_IInspectable* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FIEventHandler_1_IInspectable* This,
        IInspectable* sender,
        IInspectable* args);

        END_INTERFACE
    } __x_ABI_C__FIEventHandler_1_IInspectableVtbl;

    interface __x_ABI_C__FIEventHandler_1_IInspectable
    {
        CONST_VTBL struct __x_ABI_C__FIEventHandler_1_IInspectableVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIEventHandler_1_IInspectable_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIEventHandler_1___x_ABI_CWindows__CUI__CXaml__CInput__CFocusManagerGotFocusEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIEventHandler_1___x_ABI_CWindows__CUI__CXaml__CInput__CFocusManagerGotFocusEventArgs_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIEventHandler_1___x_ABI_CWindows__CUI__CXaml__CInput__CFocusManagerGotFocusEventArgs __x_ABI_C__FIEventHandler_1___x_ABI_CWindows__CUI__CXaml__CInput__CFocusManagerGotFocusEventArgs;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIEventHandler_1___x_ABI_CWindows__CUI__CXaml__CInput__CFocusManagerGotFocusEventArgs;

    typedef struct __x_ABI_C__FIEventHandler_1___x_ABI_CWindows__CUI__CXaml__CInput__CFocusManagerGotFocusEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIEventHandler_1___x_ABI_CWindows__CUI__CXaml__CInput__CFocusManagerGotFocusEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIEventHandler_1___x_ABI_CWindows__CUI__CXaml__CInput__CFocusManagerGotFocusEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIEventHandler_1___x_ABI_CWindows__CUI__CXaml__CInput__CFocusManagerGotFocusEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FIEventHandler_1___x_ABI_CWindows__CUI__CXaml__CInput__CFocusManagerGotFocusEventArgs* This,
        IInspectable* sender,
        __x_ABI_CWindows_CUI_CXaml_CInput_CIFocusManagerGotFocusEventArgs* args);

        END_INTERFACE
    } __x_ABI_C__FIEventHandler_1___x_ABI_CWindows__CUI__CXaml__CInput__CFocusManagerGotFocusEventArgsVtbl;

    interface __x_ABI_C__FIEventHandler_1___x_ABI_CWindows__CUI__CXaml__CInput__CFocusManagerGotFocusEventArgs
    {
        CONST_VTBL struct __x_ABI_C__FIEventHandler_1___x_ABI_CWindows__CUI__CXaml__CInput__CFocusManagerGotFocusEventArgsVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIEventHandler_1___x_ABI_CWindows__CUI__CXaml__CInput__CFocusManagerGotFocusEventArgs_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIEventHandler_1___x_ABI_CWindows__CUI__CXaml__CInput__CFocusManagerLostFocusEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIEventHandler_1___x_ABI_CWindows__CUI__CXaml__CInput__CFocusManagerLostFocusEventArgs_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIEventHandler_1___x_ABI_CWindows__CUI__CXaml__CInput__CFocusManagerLostFocusEventArgs __x_ABI_C__FIEventHandler_1___x_ABI_CWindows__CUI__CXaml__CInput__CFocusManagerLostFocusEventArgs;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIEventHandler_1___x_ABI_CWindows__CUI__CXaml__CInput__CFocusManagerLostFocusEventArgs;

    typedef struct __x_ABI_C__FIEventHandler_1___x_ABI_CWindows__CUI__CXaml__CInput__CFocusManagerLostFocusEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIEventHandler_1___x_ABI_CWindows__CUI__CXaml__CInput__CFocusManagerLostFocusEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIEventHandler_1___x_ABI_CWindows__CUI__CXaml__CInput__CFocusManagerLostFocusEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIEventHandler_1___x_ABI_CWindows__CUI__CXaml__CInput__CFocusManagerLostFocusEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FIEventHandler_1___x_ABI_CWindows__CUI__CXaml__CInput__CFocusManagerLostFocusEventArgs* This,
        IInspectable* sender,
        __x_ABI_CWindows_CUI_CXaml_CInput_CIFocusManagerLostFocusEventArgs* args);

        END_INTERFACE
    } __x_ABI_C__FIEventHandler_1___x_ABI_CWindows__CUI__CXaml__CInput__CFocusManagerLostFocusEventArgsVtbl;

    interface __x_ABI_C__FIEventHandler_1___x_ABI_CWindows__CUI__CXaml__CInput__CFocusManagerLostFocusEventArgs
    {
        CONST_VTBL struct __x_ABI_C__FIEventHandler_1___x_ABI_CWindows__CUI__CXaml__CInput__CFocusManagerLostFocusEventArgsVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIEventHandler_1___x_ABI_CWindows__CUI__CXaml__CInput__CFocusManagerLostFocusEventArgs_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIEventHandler_1___x_ABI_CWindows__CUI__CXaml__CInput__CGettingFocusEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIEventHandler_1___x_ABI_CWindows__CUI__CXaml__CInput__CGettingFocusEventArgs_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIEventHandler_1___x_ABI_CWindows__CUI__CXaml__CInput__CGettingFocusEventArgs __x_ABI_C__FIEventHandler_1___x_ABI_CWindows__CUI__CXaml__CInput__CGettingFocusEventArgs;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIEventHandler_1___x_ABI_CWindows__CUI__CXaml__CInput__CGettingFocusEventArgs;

    typedef struct __x_ABI_C__FIEventHandler_1___x_ABI_CWindows__CUI__CXaml__CInput__CGettingFocusEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIEventHandler_1___x_ABI_CWindows__CUI__CXaml__CInput__CGettingFocusEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIEventHandler_1___x_ABI_CWindows__CUI__CXaml__CInput__CGettingFocusEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIEventHandler_1___x_ABI_CWindows__CUI__CXaml__CInput__CGettingFocusEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FIEventHandler_1___x_ABI_CWindows__CUI__CXaml__CInput__CGettingFocusEventArgs* This,
        IInspectable* sender,
        __x_ABI_CWindows_CUI_CXaml_CInput_CIGettingFocusEventArgs* args);

        END_INTERFACE
    } __x_ABI_C__FIEventHandler_1___x_ABI_CWindows__CUI__CXaml__CInput__CGettingFocusEventArgsVtbl;

    interface __x_ABI_C__FIEventHandler_1___x_ABI_CWindows__CUI__CXaml__CInput__CGettingFocusEventArgs
    {
        CONST_VTBL struct __x_ABI_C__FIEventHandler_1___x_ABI_CWindows__CUI__CXaml__CInput__CGettingFocusEventArgsVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIEventHandler_1___x_ABI_CWindows__CUI__CXaml__CInput__CGettingFocusEventArgs_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIEventHandler_1___x_ABI_CWindows__CUI__CXaml__CInput__CLosingFocusEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIEventHandler_1___x_ABI_CWindows__CUI__CXaml__CInput__CLosingFocusEventArgs_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIEventHandler_1___x_ABI_CWindows__CUI__CXaml__CInput__CLosingFocusEventArgs __x_ABI_C__FIEventHandler_1___x_ABI_CWindows__CUI__CXaml__CInput__CLosingFocusEventArgs;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIEventHandler_1___x_ABI_CWindows__CUI__CXaml__CInput__CLosingFocusEventArgs;

    typedef struct __x_ABI_C__FIEventHandler_1___x_ABI_CWindows__CUI__CXaml__CInput__CLosingFocusEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIEventHandler_1___x_ABI_CWindows__CUI__CXaml__CInput__CLosingFocusEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIEventHandler_1___x_ABI_CWindows__CUI__CXaml__CInput__CLosingFocusEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIEventHandler_1___x_ABI_CWindows__CUI__CXaml__CInput__CLosingFocusEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FIEventHandler_1___x_ABI_CWindows__CUI__CXaml__CInput__CLosingFocusEventArgs* This,
        IInspectable* sender,
        __x_ABI_CWindows_CUI_CXaml_CInput_CILosingFocusEventArgs* args);

        END_INTERFACE
    } __x_ABI_C__FIEventHandler_1___x_ABI_CWindows__CUI__CXaml__CInput__CLosingFocusEventArgsVtbl;

    interface __x_ABI_C__FIEventHandler_1___x_ABI_CWindows__CUI__CXaml__CInput__CLosingFocusEventArgs
    {
        CONST_VTBL struct __x_ABI_C__FIEventHandler_1___x_ABI_CWindows__CUI__CXaml__CInput__CLosingFocusEventArgsVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIEventHandler_1___x_ABI_CWindows__CUI__CXaml__CInput__CLosingFocusEventArgs_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FITypedEventHandler_2_IInspectable_IInspectable_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FITypedEventHandler_2_IInspectable_IInspectable_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FITypedEventHandler_2_IInspectable_IInspectable __x_ABI_C__FITypedEventHandler_2_IInspectable_IInspectable;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FITypedEventHandler_2_IInspectable_IInspectable;

    typedef struct __x_ABI_C__FITypedEventHandler_2_IInspectable_IInspectableVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FITypedEventHandler_2_IInspectable_IInspectable* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FITypedEventHandler_2_IInspectable_IInspectable* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FITypedEventHandler_2_IInspectable_IInspectable* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FITypedEventHandler_2_IInspectable_IInspectable* This,
        IInspectable* sender,
        IInspectable* args);

        END_INTERFACE
    } __x_ABI_C__FITypedEventHandler_2_IInspectable_IInspectableVtbl;

    interface __x_ABI_C__FITypedEventHandler_2_IInspectable_IInspectable
    {
        CONST_VTBL struct __x_ABI_C__FITypedEventHandler_2_IInspectable_IInspectableVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FITypedEventHandler_2_IInspectable_IInspectable_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CInput__CKeyboardAccelerator___x_ABI_CWindows__CUI__CXaml__CInput__CKeyboardAcceleratorInvokedEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CInput__CKeyboardAccelerator___x_ABI_CWindows__CUI__CXaml__CInput__CKeyboardAcceleratorInvokedEventArgs_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CInput__CKeyboardAccelerator___x_ABI_CWindows__CUI__CXaml__CInput__CKeyboardAcceleratorInvokedEventArgs __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CInput__CKeyboardAccelerator___x_ABI_CWindows__CUI__CXaml__CInput__CKeyboardAcceleratorInvokedEventArgs;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CInput__CKeyboardAccelerator___x_ABI_CWindows__CUI__CXaml__CInput__CKeyboardAcceleratorInvokedEventArgs;

    typedef struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CInput__CKeyboardAccelerator___x_ABI_CWindows__CUI__CXaml__CInput__CKeyboardAcceleratorInvokedEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CInput__CKeyboardAccelerator___x_ABI_CWindows__CUI__CXaml__CInput__CKeyboardAcceleratorInvokedEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CInput__CKeyboardAccelerator___x_ABI_CWindows__CUI__CXaml__CInput__CKeyboardAcceleratorInvokedEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CInput__CKeyboardAccelerator___x_ABI_CWindows__CUI__CXaml__CInput__CKeyboardAcceleratorInvokedEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CInput__CKeyboardAccelerator___x_ABI_CWindows__CUI__CXaml__CInput__CKeyboardAcceleratorInvokedEventArgs* This,
        __x_ABI_CWindows_CUI_CXaml_CInput_CIKeyboardAccelerator* sender,
        __x_ABI_CWindows_CUI_CXaml_CInput_CIKeyboardAcceleratorInvokedEventArgs* args);

        END_INTERFACE
    } __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CInput__CKeyboardAccelerator___x_ABI_CWindows__CUI__CXaml__CInput__CKeyboardAcceleratorInvokedEventArgsVtbl;

    interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CInput__CKeyboardAccelerator___x_ABI_CWindows__CUI__CXaml__CInput__CKeyboardAcceleratorInvokedEventArgs
    {
        CONST_VTBL struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CInput__CKeyboardAccelerator___x_ABI_CWindows__CUI__CXaml__CInput__CKeyboardAcceleratorInvokedEventArgsVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CInput__CKeyboardAccelerator___x_ABI_CWindows__CUI__CXaml__CInput__CKeyboardAcceleratorInvokedEventArgs_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CInput__CXamlUICommand___x_ABI_CWindows__CUI__CXaml__CInput__CCanExecuteRequestedEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CInput__CXamlUICommand___x_ABI_CWindows__CUI__CXaml__CInput__CCanExecuteRequestedEventArgs_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CInput__CXamlUICommand___x_ABI_CWindows__CUI__CXaml__CInput__CCanExecuteRequestedEventArgs __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CInput__CXamlUICommand___x_ABI_CWindows__CUI__CXaml__CInput__CCanExecuteRequestedEventArgs;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CInput__CXamlUICommand___x_ABI_CWindows__CUI__CXaml__CInput__CCanExecuteRequestedEventArgs;

    typedef struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CInput__CXamlUICommand___x_ABI_CWindows__CUI__CXaml__CInput__CCanExecuteRequestedEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CInput__CXamlUICommand___x_ABI_CWindows__CUI__CXaml__CInput__CCanExecuteRequestedEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CInput__CXamlUICommand___x_ABI_CWindows__CUI__CXaml__CInput__CCanExecuteRequestedEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CInput__CXamlUICommand___x_ABI_CWindows__CUI__CXaml__CInput__CCanExecuteRequestedEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CInput__CXamlUICommand___x_ABI_CWindows__CUI__CXaml__CInput__CCanExecuteRequestedEventArgs* This,
        __x_ABI_CWindows_CUI_CXaml_CInput_CIXamlUICommand* sender,
        __x_ABI_CWindows_CUI_CXaml_CInput_CICanExecuteRequestedEventArgs* args);

        END_INTERFACE
    } __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CInput__CXamlUICommand___x_ABI_CWindows__CUI__CXaml__CInput__CCanExecuteRequestedEventArgsVtbl;

    interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CInput__CXamlUICommand___x_ABI_CWindows__CUI__CXaml__CInput__CCanExecuteRequestedEventArgs
    {
        CONST_VTBL struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CInput__CXamlUICommand___x_ABI_CWindows__CUI__CXaml__CInput__CCanExecuteRequestedEventArgsVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CInput__CXamlUICommand___x_ABI_CWindows__CUI__CXaml__CInput__CCanExecuteRequestedEventArgs_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CInput__CXamlUICommand___x_ABI_CWindows__CUI__CXaml__CInput__CExecuteRequestedEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CInput__CXamlUICommand___x_ABI_CWindows__CUI__CXaml__CInput__CExecuteRequestedEventArgs_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CInput__CXamlUICommand___x_ABI_CWindows__CUI__CXaml__CInput__CExecuteRequestedEventArgs __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CInput__CXamlUICommand___x_ABI_CWindows__CUI__CXaml__CInput__CExecuteRequestedEventArgs;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CInput__CXamlUICommand___x_ABI_CWindows__CUI__CXaml__CInput__CExecuteRequestedEventArgs;

    typedef struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CInput__CXamlUICommand___x_ABI_CWindows__CUI__CXaml__CInput__CExecuteRequestedEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CInput__CXamlUICommand___x_ABI_CWindows__CUI__CXaml__CInput__CExecuteRequestedEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CInput__CXamlUICommand___x_ABI_CWindows__CUI__CXaml__CInput__CExecuteRequestedEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CInput__CXamlUICommand___x_ABI_CWindows__CUI__CXaml__CInput__CExecuteRequestedEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CInput__CXamlUICommand___x_ABI_CWindows__CUI__CXaml__CInput__CExecuteRequestedEventArgs* This,
        __x_ABI_CWindows_CUI_CXaml_CInput_CIXamlUICommand* sender,
        __x_ABI_CWindows_CUI_CXaml_CInput_CIExecuteRequestedEventArgs* args);

        END_INTERFACE
    } __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CInput__CXamlUICommand___x_ABI_CWindows__CUI__CXaml__CInput__CExecuteRequestedEventArgsVtbl;

    interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CInput__CXamlUICommand___x_ABI_CWindows__CUI__CXaml__CInput__CExecuteRequestedEventArgs
    {
        CONST_VTBL struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CInput__CXamlUICommand___x_ABI_CWindows__CUI__CXaml__CInput__CExecuteRequestedEventArgsVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CInput__CXamlUICommand___x_ABI_CWindows__CUI__CXaml__CInput__CExecuteRequestedEventArgs_INTERFACE_DEFINED__
    
typedef enum __x_ABI_CWindows_CDevices_CInput_CPointerDeviceType __x_ABI_CWindows_CDevices_CInput_CPointerDeviceType;

typedef enum __x_ABI_CWindows_CFoundation_CAsyncStatus __x_ABI_CWindows_CFoundation_CAsyncStatus;

#ifndef ____x_ABI_CWindows_CFoundation_CIAsyncInfo_FWD_DEFINED__
#define ____x_ABI_CWindows_CFoundation_CIAsyncInfo_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CFoundation_CIAsyncInfo __x_ABI_CWindows_CFoundation_CIAsyncInfo;

#endif // ____x_ABI_CWindows_CFoundation_CIAsyncInfo_FWD_DEFINED__

typedef struct __x_ABI_CWindows_CFoundation_CPoint __x_ABI_CWindows_CFoundation_CPoint;

typedef struct __x_ABI_CWindows_CFoundation_CRect __x_ABI_CWindows_CFoundation_CRect;

typedef enum __x_ABI_CWindows_CSystem_CVirtualKey __x_ABI_CWindows_CSystem_CVirtualKey;

typedef enum __x_ABI_CWindows_CSystem_CVirtualKeyModifiers __x_ABI_CWindows_CSystem_CVirtualKeyModifiers;

typedef struct __x_ABI_CWindows_CUI_CCore_CCorePhysicalKeyStatus __x_ABI_CWindows_CUI_CCore_CCorePhysicalKeyStatus;

typedef enum __x_ABI_CWindows_CUI_CInput_CHoldingState __x_ABI_CWindows_CUI_CInput_CHoldingState;

typedef struct __x_ABI_CWindows_CUI_CInput_CManipulationDelta __x_ABI_CWindows_CUI_CInput_CManipulationDelta;

typedef struct __x_ABI_CWindows_CUI_CInput_CManipulationVelocities __x_ABI_CWindows_CUI_CInput_CManipulationVelocities;

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CIIconSource_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CIIconSource_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CIIconSource __x_ABI_CWindows_CUI_CXaml_CControls_CIIconSource;

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CIIconSource_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CIDependencyObject_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CIDependencyObject_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CIDependencyObject __x_ABI_CWindows_CUI_CXaml_CIDependencyObject;

#endif // ____x_ABI_CWindows_CUI_CXaml_CIDependencyObject_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CIDependencyProperty_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CIDependencyProperty_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty;

#endif // ____x_ABI_CWindows_CUI_CXaml_CIDependencyProperty_FWD_DEFINED__

typedef enum __x_ABI_CWindows_CUI_CXaml_CFocusState __x_ABI_CWindows_CUI_CXaml_CFocusState;

#ifndef ____x_ABI_CWindows_CUI_CXaml_CIDependencyObject2_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CIDependencyObject2_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CIDependencyObject2 __x_ABI_CWindows_CUI_CXaml_CIDependencyObject2;

#endif // ____x_ABI_CWindows_CUI_CXaml_CIDependencyObject2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CIRoutedEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CIRoutedEventArgs_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CIRoutedEventArgs __x_ABI_CWindows_CUI_CXaml_CIRoutedEventArgs;

#endif // ____x_ABI_CWindows_CUI_CXaml_CIRoutedEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CIUIElement_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CIUIElement_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CIUIElement __x_ABI_CWindows_CUI_CXaml_CIUIElement;

#endif // ____x_ABI_CWindows_CUI_CXaml_CIUIElement_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CIXamlRoot_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CIXamlRoot_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CIXamlRoot __x_ABI_CWindows_CUI_CXaml_CIXamlRoot;

#endif // ____x_ABI_CWindows_CUI_CXaml_CIXamlRoot_FWD_DEFINED__

typedef enum __x_ABI_CWindows_CUI_CXaml_CInput_CFocusInputDeviceKind __x_ABI_CWindows_CUI_CXaml_CInput_CFocusInputDeviceKind;

typedef enum __x_ABI_CWindows_CUI_CXaml_CInput_CFocusNavigationDirection __x_ABI_CWindows_CUI_CXaml_CInput_CFocusNavigationDirection;

typedef enum __x_ABI_CWindows_CUI_CXaml_CInput_CInputScopeNameValue __x_ABI_CWindows_CUI_CXaml_CInput_CInputScopeNameValue;

typedef enum __x_ABI_CWindows_CUI_CXaml_CInput_CManipulationModes __x_ABI_CWindows_CUI_CXaml_CInput_CManipulationModes;

typedef enum __x_ABI_CWindows_CUI_CXaml_CInput_CStandardUICommandKind __x_ABI_CWindows_CUI_CXaml_CInput_CStandardUICommandKind;

typedef enum __x_ABI_CWindows_CUI_CXaml_CInput_CXYFocusNavigationStrategyOverride __x_ABI_CWindows_CUI_CXaml_CInput_CXYFocusNavigationStrategyOverride;

enum __x_ABI_CWindows_CUI_CXaml_CInput_CFocusInputDeviceKind
    {
        __x_ABI_CWindows_CUI_CXaml_CInput_CFocusInputDeviceKind_None = 0,
    __x_ABI_CWindows_CUI_CXaml_CInput_CFocusInputDeviceKind_Mouse = 1,
    __x_ABI_CWindows_CUI_CXaml_CInput_CFocusInputDeviceKind_Touch = 2,
    __x_ABI_CWindows_CUI_CXaml_CInput_CFocusInputDeviceKind_Pen = 3,
    __x_ABI_CWindows_CUI_CXaml_CInput_CFocusInputDeviceKind_Keyboard = 4,
    __x_ABI_CWindows_CUI_CXaml_CInput_CFocusInputDeviceKind_GameController = 5,
};

enum __x_ABI_CWindows_CUI_CXaml_CInput_CFocusNavigationDirection
    {
        __x_ABI_CWindows_CUI_CXaml_CInput_CFocusNavigationDirection_Next = 0,
    __x_ABI_CWindows_CUI_CXaml_CInput_CFocusNavigationDirection_Previous = 1,
    __x_ABI_CWindows_CUI_CXaml_CInput_CFocusNavigationDirection_Up = 2,
    __x_ABI_CWindows_CUI_CXaml_CInput_CFocusNavigationDirection_Down = 3,
    __x_ABI_CWindows_CUI_CXaml_CInput_CFocusNavigationDirection_Left = 4,
    __x_ABI_CWindows_CUI_CXaml_CInput_CFocusNavigationDirection_Right = 5,
    __x_ABI_CWindows_CUI_CXaml_CInput_CFocusNavigationDirection_None = 6,
};

enum __x_ABI_CWindows_CUI_CXaml_CInput_CInputScopeNameValue
    {
        __x_ABI_CWindows_CUI_CXaml_CInput_CInputScopeNameValue_Default = 0,
    __x_ABI_CWindows_CUI_CXaml_CInput_CInputScopeNameValue_Url = 1,
    __x_ABI_CWindows_CUI_CXaml_CInput_CInputScopeNameValue_EmailSmtpAddress = 5,
    __x_ABI_CWindows_CUI_CXaml_CInput_CInputScopeNameValue_PersonalFullName = 7,
    __x_ABI_CWindows_CUI_CXaml_CInput_CInputScopeNameValue_CurrencyAmountAndSymbol = 20,
    __x_ABI_CWindows_CUI_CXaml_CInput_CInputScopeNameValue_CurrencyAmount = 21,
    __x_ABI_CWindows_CUI_CXaml_CInput_CInputScopeNameValue_DateMonthNumber = 23,
    __x_ABI_CWindows_CUI_CXaml_CInput_CInputScopeNameValue_DateDayNumber = 24,
    __x_ABI_CWindows_CUI_CXaml_CInput_CInputScopeNameValue_DateYear = 25,
    __x_ABI_CWindows_CUI_CXaml_CInput_CInputScopeNameValue_Digits = 28,
    __x_ABI_CWindows_CUI_CXaml_CInput_CInputScopeNameValue_Number = 29,
    __x_ABI_CWindows_CUI_CXaml_CInput_CInputScopeNameValue_Password = 31,
    __x_ABI_CWindows_CUI_CXaml_CInput_CInputScopeNameValue_TelephoneNumber = 32,
    __x_ABI_CWindows_CUI_CXaml_CInput_CInputScopeNameValue_TelephoneCountryCode = 33,
    __x_ABI_CWindows_CUI_CXaml_CInput_CInputScopeNameValue_TelephoneAreaCode = 34,
    __x_ABI_CWindows_CUI_CXaml_CInput_CInputScopeNameValue_TelephoneLocalNumber = 35,
    __x_ABI_CWindows_CUI_CXaml_CInput_CInputScopeNameValue_TimeHour = 37,
    __x_ABI_CWindows_CUI_CXaml_CInput_CInputScopeNameValue_TimeMinutesOrSeconds = 38,
    __x_ABI_CWindows_CUI_CXaml_CInput_CInputScopeNameValue_NumberFullWidth = 39,
    __x_ABI_CWindows_CUI_CXaml_CInput_CInputScopeNameValue_AlphanumericHalfWidth = 40,
    __x_ABI_CWindows_CUI_CXaml_CInput_CInputScopeNameValue_AlphanumericFullWidth = 41,
    __x_ABI_CWindows_CUI_CXaml_CInput_CInputScopeNameValue_Hiragana = 44,
    __x_ABI_CWindows_CUI_CXaml_CInput_CInputScopeNameValue_KatakanaHalfWidth = 45,
    __x_ABI_CWindows_CUI_CXaml_CInput_CInputScopeNameValue_KatakanaFullWidth = 46,
    __x_ABI_CWindows_CUI_CXaml_CInput_CInputScopeNameValue_Hanja = 47,
    __x_ABI_CWindows_CUI_CXaml_CInput_CInputScopeNameValue_HangulHalfWidth = 48,
    __x_ABI_CWindows_CUI_CXaml_CInput_CInputScopeNameValue_HangulFullWidth = 49,
    __x_ABI_CWindows_CUI_CXaml_CInput_CInputScopeNameValue_Search = 50,
    __x_ABI_CWindows_CUI_CXaml_CInput_CInputScopeNameValue_Formula = 51,
    __x_ABI_CWindows_CUI_CXaml_CInput_CInputScopeNameValue_SearchIncremental = 52,
    __x_ABI_CWindows_CUI_CXaml_CInput_CInputScopeNameValue_ChineseHalfWidth = 53,
    __x_ABI_CWindows_CUI_CXaml_CInput_CInputScopeNameValue_ChineseFullWidth = 54,
    __x_ABI_CWindows_CUI_CXaml_CInput_CInputScopeNameValue_NativeScript = 55,
    __x_ABI_CWindows_CUI_CXaml_CInput_CInputScopeNameValue_Text = 57,
    __x_ABI_CWindows_CUI_CXaml_CInput_CInputScopeNameValue_Chat = 58,
    __x_ABI_CWindows_CUI_CXaml_CInput_CInputScopeNameValue_NameOrPhoneNumber = 59,
    __x_ABI_CWindows_CUI_CXaml_CInput_CInputScopeNameValue_EmailNameOrAddress = 60,
    __x_ABI_CWindows_CUI_CXaml_CInput_CInputScopeNameValue_Maps = 62,
    __x_ABI_CWindows_CUI_CXaml_CInput_CInputScopeNameValue_NumericPassword = 63,
    __x_ABI_CWindows_CUI_CXaml_CInput_CInputScopeNameValue_NumericPin = 64,
    __x_ABI_CWindows_CUI_CXaml_CInput_CInputScopeNameValue_AlphanumericPin = 65,
    __x_ABI_CWindows_CUI_CXaml_CInput_CInputScopeNameValue_FormulaNumber = 67,
    __x_ABI_CWindows_CUI_CXaml_CInput_CInputScopeNameValue_ChatWithoutEmoji = 68,
};

enum __x_ABI_CWindows_CUI_CXaml_CInput_CKeyTipPlacementMode
    {
        __x_ABI_CWindows_CUI_CXaml_CInput_CKeyTipPlacementMode_Auto = 0,
    __x_ABI_CWindows_CUI_CXaml_CInput_CKeyTipPlacementMode_Bottom = 1,
    __x_ABI_CWindows_CUI_CXaml_CInput_CKeyTipPlacementMode_Top = 2,
    __x_ABI_CWindows_CUI_CXaml_CInput_CKeyTipPlacementMode_Left = 3,
    __x_ABI_CWindows_CUI_CXaml_CInput_CKeyTipPlacementMode_Right = 4,
    __x_ABI_CWindows_CUI_CXaml_CInput_CKeyTipPlacementMode_Center = 5,
    __x_ABI_CWindows_CUI_CXaml_CInput_CKeyTipPlacementMode_Hidden = 6,
};

enum __x_ABI_CWindows_CUI_CXaml_CInput_CKeyboardAcceleratorPlacementMode
    {
        __x_ABI_CWindows_CUI_CXaml_CInput_CKeyboardAcceleratorPlacementMode_Auto = 0,
    __x_ABI_CWindows_CUI_CXaml_CInput_CKeyboardAcceleratorPlacementMode_Hidden = 1,
};

enum __x_ABI_CWindows_CUI_CXaml_CInput_CKeyboardNavigationMode
    {
        __x_ABI_CWindows_CUI_CXaml_CInput_CKeyboardNavigationMode_Local = 0,
    __x_ABI_CWindows_CUI_CXaml_CInput_CKeyboardNavigationMode_Cycle = 1,
    __x_ABI_CWindows_CUI_CXaml_CInput_CKeyboardNavigationMode_Once = 2,
};

enum __x_ABI_CWindows_CUI_CXaml_CInput_CManipulationModes
    {
        __x_ABI_CWindows_CUI_CXaml_CInput_CManipulationModes_None = 0,
    __x_ABI_CWindows_CUI_CXaml_CInput_CManipulationModes_TranslateX = 0x1,
    __x_ABI_CWindows_CUI_CXaml_CInput_CManipulationModes_TranslateY = 0x2,
    __x_ABI_CWindows_CUI_CXaml_CInput_CManipulationModes_TranslateRailsX = 0x4,
    __x_ABI_CWindows_CUI_CXaml_CInput_CManipulationModes_TranslateRailsY = 0x8,
    __x_ABI_CWindows_CUI_CXaml_CInput_CManipulationModes_Rotate = 0x10,
    __x_ABI_CWindows_CUI_CXaml_CInput_CManipulationModes_Scale = 0x20,
    __x_ABI_CWindows_CUI_CXaml_CInput_CManipulationModes_TranslateInertia = 0x40,
    __x_ABI_CWindows_CUI_CXaml_CInput_CManipulationModes_RotateInertia = 0x80,
    __x_ABI_CWindows_CUI_CXaml_CInput_CManipulationModes_ScaleInertia = 0x100,
    __x_ABI_CWindows_CUI_CXaml_CInput_CManipulationModes_All = 0xffff,
    __x_ABI_CWindows_CUI_CXaml_CInput_CManipulationModes_System = 0x10000,
};

enum __x_ABI_CWindows_CUI_CXaml_CInput_CStandardUICommandKind
    {
        __x_ABI_CWindows_CUI_CXaml_CInput_CStandardUICommandKind_None = 0,
    __x_ABI_CWindows_CUI_CXaml_CInput_CStandardUICommandKind_Cut = 1,
    __x_ABI_CWindows_CUI_CXaml_CInput_CStandardUICommandKind_Copy = 2,
    __x_ABI_CWindows_CUI_CXaml_CInput_CStandardUICommandKind_Paste = 3,
    __x_ABI_CWindows_CUI_CXaml_CInput_CStandardUICommandKind_SelectAll = 4,
    __x_ABI_CWindows_CUI_CXaml_CInput_CStandardUICommandKind_Delete = 5,
    __x_ABI_CWindows_CUI_CXaml_CInput_CStandardUICommandKind_Share = 6,
    __x_ABI_CWindows_CUI_CXaml_CInput_CStandardUICommandKind_Save = 7,
    __x_ABI_CWindows_CUI_CXaml_CInput_CStandardUICommandKind_Open = 8,
    __x_ABI_CWindows_CUI_CXaml_CInput_CStandardUICommandKind_Close = 9,
    __x_ABI_CWindows_CUI_CXaml_CInput_CStandardUICommandKind_Pause = 10,
    __x_ABI_CWindows_CUI_CXaml_CInput_CStandardUICommandKind_Play = 11,
    __x_ABI_CWindows_CUI_CXaml_CInput_CStandardUICommandKind_Stop = 12,
    __x_ABI_CWindows_CUI_CXaml_CInput_CStandardUICommandKind_Forward = 13,
    __x_ABI_CWindows_CUI_CXaml_CInput_CStandardUICommandKind_Backward = 14,
    __x_ABI_CWindows_CUI_CXaml_CInput_CStandardUICommandKind_Undo = 15,
    __x_ABI_CWindows_CUI_CXaml_CInput_CStandardUICommandKind_Redo = 16,
};

enum __x_ABI_CWindows_CUI_CXaml_CInput_CXYFocusKeyboardNavigationMode
    {
        __x_ABI_CWindows_CUI_CXaml_CInput_CXYFocusKeyboardNavigationMode_Auto = 0,
    __x_ABI_CWindows_CUI_CXaml_CInput_CXYFocusKeyboardNavigationMode_Enabled = 1,
    __x_ABI_CWindows_CUI_CXaml_CInput_CXYFocusKeyboardNavigationMode_Disabled = 2,
};

enum __x_ABI_CWindows_CUI_CXaml_CInput_CXYFocusNavigationStrategy
    {
        __x_ABI_CWindows_CUI_CXaml_CInput_CXYFocusNavigationStrategy_Auto = 0,
    __x_ABI_CWindows_CUI_CXaml_CInput_CXYFocusNavigationStrategy_Projection = 1,
    __x_ABI_CWindows_CUI_CXaml_CInput_CXYFocusNavigationStrategy_NavigationDirectionDistance = 2,
    __x_ABI_CWindows_CUI_CXaml_CInput_CXYFocusNavigationStrategy_RectilinearDistance = 3,
};

enum __x_ABI_CWindows_CUI_CXaml_CInput_CXYFocusNavigationStrategyOverride
    {
        __x_ABI_CWindows_CUI_CXaml_CInput_CXYFocusNavigationStrategyOverride_None = 0,
    __x_ABI_CWindows_CUI_CXaml_CInput_CXYFocusNavigationStrategyOverride_Auto = 1,
    __x_ABI_CWindows_CUI_CXaml_CInput_CXYFocusNavigationStrategyOverride_Projection = 2,
    __x_ABI_CWindows_CUI_CXaml_CInput_CXYFocusNavigationStrategyOverride_NavigationDirectionDistance = 3,
    __x_ABI_CWindows_CUI_CXaml_CInput_CXYFocusNavigationStrategyOverride_RectilinearDistance = 4,
};

#if !defined(____x_ABI_CWindows_CUI_CXaml_CInput_CIDoubleTappedEventHandler_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CInput_CIDoubleTappedEventHandler_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CInput_CIDoubleTappedEventHandlerVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CInput_CIDoubleTappedEventHandler* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CInput_CIDoubleTappedEventHandler* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CInput_CIDoubleTappedEventHandler* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_CWindows_CUI_CXaml_CInput_CIDoubleTappedEventHandler* This,
        IInspectable* sender,
        __x_ABI_CWindows_CUI_CXaml_CInput_CIDoubleTappedRoutedEventArgs* e);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CInput_CIDoubleTappedEventHandlerVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CInput_CIDoubleTappedEventHandler
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CInput_CIDoubleTappedEventHandlerVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CInput_CIDoubleTappedEventHandler;
    #endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CInput_CIDoubleTappedEventHandler_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CInput_CIHoldingEventHandler_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CInput_CIHoldingEventHandler_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CInput_CIHoldingEventHandlerVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CInput_CIHoldingEventHandler* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CInput_CIHoldingEventHandler* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CInput_CIHoldingEventHandler* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_CWindows_CUI_CXaml_CInput_CIHoldingEventHandler* This,
        IInspectable* sender,
        __x_ABI_CWindows_CUI_CXaml_CInput_CIHoldingRoutedEventArgs* e);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CInput_CIHoldingEventHandlerVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CInput_CIHoldingEventHandler
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CInput_CIHoldingEventHandlerVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CInput_CIHoldingEventHandler;
    #endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CInput_CIHoldingEventHandler_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CInput_CIKeyEventHandler_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CInput_CIKeyEventHandler_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CInput_CIKeyEventHandlerVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CInput_CIKeyEventHandler* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CInput_CIKeyEventHandler* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CInput_CIKeyEventHandler* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_CWindows_CUI_CXaml_CInput_CIKeyEventHandler* This,
        IInspectable* sender,
        __x_ABI_CWindows_CUI_CXaml_CInput_CIKeyRoutedEventArgs* e);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CInput_CIKeyEventHandlerVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CInput_CIKeyEventHandler
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CInput_CIKeyEventHandlerVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CInput_CIKeyEventHandler;
    #endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CInput_CIKeyEventHandler_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationCompletedEventHandler_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationCompletedEventHandler_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationCompletedEventHandlerVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationCompletedEventHandler* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationCompletedEventHandler* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationCompletedEventHandler* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationCompletedEventHandler* This,
        IInspectable* sender,
        __x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationCompletedRoutedEventArgs* e);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationCompletedEventHandlerVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationCompletedEventHandler
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationCompletedEventHandlerVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationCompletedEventHandler;
    #endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationCompletedEventHandler_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationDeltaEventHandler_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationDeltaEventHandler_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationDeltaEventHandlerVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationDeltaEventHandler* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationDeltaEventHandler* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationDeltaEventHandler* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationDeltaEventHandler* This,
        IInspectable* sender,
        __x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationDeltaRoutedEventArgs* e);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationDeltaEventHandlerVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationDeltaEventHandler
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationDeltaEventHandlerVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationDeltaEventHandler;
    #endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationDeltaEventHandler_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationInertiaStartingEventHandler_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationInertiaStartingEventHandler_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationInertiaStartingEventHandlerVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationInertiaStartingEventHandler* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationInertiaStartingEventHandler* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationInertiaStartingEventHandler* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationInertiaStartingEventHandler* This,
        IInspectable* sender,
        __x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationInertiaStartingRoutedEventArgs* e);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationInertiaStartingEventHandlerVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationInertiaStartingEventHandler
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationInertiaStartingEventHandlerVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationInertiaStartingEventHandler;
    #endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationInertiaStartingEventHandler_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationStartedEventHandler_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationStartedEventHandler_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationStartedEventHandlerVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationStartedEventHandler* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationStartedEventHandler* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationStartedEventHandler* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationStartedEventHandler* This,
        IInspectable* sender,
        __x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationStartedRoutedEventArgs* e);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationStartedEventHandlerVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationStartedEventHandler
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationStartedEventHandlerVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationStartedEventHandler;
    #endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationStartedEventHandler_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationStartingEventHandler_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationStartingEventHandler_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationStartingEventHandlerVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationStartingEventHandler* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationStartingEventHandler* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationStartingEventHandler* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationStartingEventHandler* This,
        IInspectable* sender,
        __x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationStartingRoutedEventArgs* e);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationStartingEventHandlerVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationStartingEventHandler
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationStartingEventHandlerVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationStartingEventHandler;
    #endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationStartingEventHandler_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CInput_CIPointerEventHandler_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CInput_CIPointerEventHandler_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CInput_CIPointerEventHandlerVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CInput_CIPointerEventHandler* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CInput_CIPointerEventHandler* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CInput_CIPointerEventHandler* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_CWindows_CUI_CXaml_CInput_CIPointerEventHandler* This,
        IInspectable* sender,
        __x_ABI_CWindows_CUI_CXaml_CInput_CIPointerRoutedEventArgs* e);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CInput_CIPointerEventHandlerVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CInput_CIPointerEventHandler
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CInput_CIPointerEventHandlerVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CInput_CIPointerEventHandler;
    #endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CInput_CIPointerEventHandler_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CInput_CIRightTappedEventHandler_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CInput_CIRightTappedEventHandler_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CInput_CIRightTappedEventHandlerVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CInput_CIRightTappedEventHandler* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CInput_CIRightTappedEventHandler* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CInput_CIRightTappedEventHandler* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_CWindows_CUI_CXaml_CInput_CIRightTappedEventHandler* This,
        IInspectable* sender,
        __x_ABI_CWindows_CUI_CXaml_CInput_CIRightTappedRoutedEventArgs* e);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CInput_CIRightTappedEventHandlerVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CInput_CIRightTappedEventHandler
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CInput_CIRightTappedEventHandlerVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CInput_CIRightTappedEventHandler;
    #endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CInput_CIRightTappedEventHandler_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CInput_CITappedEventHandler_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CInput_CITappedEventHandler_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CInput_CITappedEventHandlerVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CInput_CITappedEventHandler* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CInput_CITappedEventHandler* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CInput_CITappedEventHandler* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_CWindows_CUI_CXaml_CInput_CITappedEventHandler* This,
        IInspectable* sender,
        __x_ABI_CWindows_CUI_CXaml_CInput_CITappedRoutedEventArgs* e);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CInput_CITappedEventHandlerVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CInput_CITappedEventHandler
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CInput_CITappedEventHandlerVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CInput_CITappedEventHandler;
    #endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CInput_CITappedEventHandler_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CInput_CIAccessKeyDisplayDismissedEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CInput_CIAccessKeyDisplayDismissedEventArgs_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CInput_CIAccessKeyDisplayDismissedEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CInput_CIAccessKeyDisplayDismissedEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CInput_CIAccessKeyDisplayDismissedEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CInput_CIAccessKeyDisplayDismissedEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CInput_CIAccessKeyDisplayDismissedEventArgs* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CInput_CIAccessKeyDisplayDismissedEventArgs* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CInput_CIAccessKeyDisplayDismissedEventArgs* This,
            TrustLevel* trustLevel);
    
        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CInput_CIAccessKeyDisplayDismissedEventArgsVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CInput_CIAccessKeyDisplayDismissedEventArgs
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CInput_CIAccessKeyDisplayDismissedEventArgsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CInput_CIAccessKeyDisplayDismissedEventArgs;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CInput_CIAccessKeyDisplayDismissedEventArgs_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CInput_CIAccessKeyDisplayRequestedEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CInput_CIAccessKeyDisplayRequestedEventArgs_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CInput_CIAccessKeyDisplayRequestedEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CInput_CIAccessKeyDisplayRequestedEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CInput_CIAccessKeyDisplayRequestedEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CInput_CIAccessKeyDisplayRequestedEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CInput_CIAccessKeyDisplayRequestedEventArgs* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CInput_CIAccessKeyDisplayRequestedEventArgs* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CInput_CIAccessKeyDisplayRequestedEventArgs* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_PressedKeys)(__x_ABI_CWindows_CUI_CXaml_CInput_CIAccessKeyDisplayRequestedEventArgs* This,
        HSTRING* value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CInput_CIAccessKeyDisplayRequestedEventArgsVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CInput_CIAccessKeyDisplayRequestedEventArgs
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CInput_CIAccessKeyDisplayRequestedEventArgsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CInput_CIAccessKeyDisplayRequestedEventArgs;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CInput_CIAccessKeyDisplayRequestedEventArgs_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CInput_CIAccessKeyInvokedEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CInput_CIAccessKeyInvokedEventArgs_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CInput_CIAccessKeyInvokedEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CInput_CIAccessKeyInvokedEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CInput_CIAccessKeyInvokedEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CInput_CIAccessKeyInvokedEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CInput_CIAccessKeyInvokedEventArgs* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CInput_CIAccessKeyInvokedEventArgs* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CInput_CIAccessKeyInvokedEventArgs* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Handled)(__x_ABI_CWindows_CUI_CXaml_CInput_CIAccessKeyInvokedEventArgs* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* put_Handled)(__x_ABI_CWindows_CUI_CXaml_CInput_CIAccessKeyInvokedEventArgs* This,
        boolean value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CInput_CIAccessKeyInvokedEventArgsVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CInput_CIAccessKeyInvokedEventArgs
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CInput_CIAccessKeyInvokedEventArgsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CInput_CIAccessKeyInvokedEventArgs;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CInput_CIAccessKeyInvokedEventArgs_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CInput_CIAccessKeyManager_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CInput_CIAccessKeyManager_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CInput_CIAccessKeyManagerVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CInput_CIAccessKeyManager* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CInput_CIAccessKeyManager* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CInput_CIAccessKeyManager* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CInput_CIAccessKeyManager* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CInput_CIAccessKeyManager* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CInput_CIAccessKeyManager* This,
            TrustLevel* trustLevel);
    
        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CInput_CIAccessKeyManagerVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CInput_CIAccessKeyManager
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CInput_CIAccessKeyManagerVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CInput_CIAccessKeyManager;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CInput_CIAccessKeyManager_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CInput_CIAccessKeyManagerStatics_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CInput_CIAccessKeyManagerStatics_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CInput_CIAccessKeyManagerStaticsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CInput_CIAccessKeyManagerStatics* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CInput_CIAccessKeyManagerStatics* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CInput_CIAccessKeyManagerStatics* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CInput_CIAccessKeyManagerStatics* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CInput_CIAccessKeyManagerStatics* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CInput_CIAccessKeyManagerStatics* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_IsDisplayModeEnabled)(__x_ABI_CWindows_CUI_CXaml_CInput_CIAccessKeyManagerStatics* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* add_IsDisplayModeEnabledChanged)(__x_ABI_CWindows_CUI_CXaml_CInput_CIAccessKeyManagerStatics* This,
        __x_ABI_C__FITypedEventHandler_2_IInspectable_IInspectable* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_IsDisplayModeEnabledChanged)(__x_ABI_CWindows_CUI_CXaml_CInput_CIAccessKeyManagerStatics* This,
        EventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* ExitDisplayMode)(__x_ABI_CWindows_CUI_CXaml_CInput_CIAccessKeyManagerStatics* This);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CInput_CIAccessKeyManagerStaticsVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CInput_CIAccessKeyManagerStatics
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CInput_CIAccessKeyManagerStaticsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CInput_CIAccessKeyManagerStatics;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CInput_CIAccessKeyManagerStatics_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CInput_CIAccessKeyManagerStatics2_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CInput_CIAccessKeyManagerStatics2_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CInput_CIAccessKeyManagerStatics2Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CInput_CIAccessKeyManagerStatics2* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CInput_CIAccessKeyManagerStatics2* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CInput_CIAccessKeyManagerStatics2* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CInput_CIAccessKeyManagerStatics2* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CInput_CIAccessKeyManagerStatics2* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CInput_CIAccessKeyManagerStatics2* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_AreKeyTipsEnabled)(__x_ABI_CWindows_CUI_CXaml_CInput_CIAccessKeyManagerStatics2* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* put_AreKeyTipsEnabled)(__x_ABI_CWindows_CUI_CXaml_CInput_CIAccessKeyManagerStatics2* This,
        boolean value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CInput_CIAccessKeyManagerStatics2Vtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CInput_CIAccessKeyManagerStatics2
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CInput_CIAccessKeyManagerStatics2Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CInput_CIAccessKeyManagerStatics2;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CInput_CIAccessKeyManagerStatics2_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CInput_CICanExecuteRequestedEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CInput_CICanExecuteRequestedEventArgs_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CInput_CICanExecuteRequestedEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CInput_CICanExecuteRequestedEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CInput_CICanExecuteRequestedEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CInput_CICanExecuteRequestedEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CInput_CICanExecuteRequestedEventArgs* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CInput_CICanExecuteRequestedEventArgs* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CInput_CICanExecuteRequestedEventArgs* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Parameter)(__x_ABI_CWindows_CUI_CXaml_CInput_CICanExecuteRequestedEventArgs* This,
        IInspectable** value);
    HRESULT (STDMETHODCALLTYPE* get_CanExecute)(__x_ABI_CWindows_CUI_CXaml_CInput_CICanExecuteRequestedEventArgs* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* put_CanExecute)(__x_ABI_CWindows_CUI_CXaml_CInput_CICanExecuteRequestedEventArgs* This,
        boolean value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CInput_CICanExecuteRequestedEventArgsVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CInput_CICanExecuteRequestedEventArgs
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CInput_CICanExecuteRequestedEventArgsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CInput_CICanExecuteRequestedEventArgs;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CInput_CICanExecuteRequestedEventArgs_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CInput_CICharacterReceivedRoutedEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CInput_CICharacterReceivedRoutedEventArgs_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CInput_CICharacterReceivedRoutedEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CInput_CICharacterReceivedRoutedEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CInput_CICharacterReceivedRoutedEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CInput_CICharacterReceivedRoutedEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CInput_CICharacterReceivedRoutedEventArgs* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CInput_CICharacterReceivedRoutedEventArgs* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CInput_CICharacterReceivedRoutedEventArgs* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Character)(__x_ABI_CWindows_CUI_CXaml_CInput_CICharacterReceivedRoutedEventArgs* This,
        WCHAR* value);
    HRESULT (STDMETHODCALLTYPE* get_KeyStatus)(__x_ABI_CWindows_CUI_CXaml_CInput_CICharacterReceivedRoutedEventArgs* This,
        struct __x_ABI_CWindows_CUI_CCore_CCorePhysicalKeyStatus* value);
    HRESULT (STDMETHODCALLTYPE* get_Handled)(__x_ABI_CWindows_CUI_CXaml_CInput_CICharacterReceivedRoutedEventArgs* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* put_Handled)(__x_ABI_CWindows_CUI_CXaml_CInput_CICharacterReceivedRoutedEventArgs* This,
        boolean value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CInput_CICharacterReceivedRoutedEventArgsVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CInput_CICharacterReceivedRoutedEventArgs
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CInput_CICharacterReceivedRoutedEventArgsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CInput_CICharacterReceivedRoutedEventArgs;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CInput_CICharacterReceivedRoutedEventArgs_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CInput_CICommand_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CInput_CICommand_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CInput_CICommandVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CInput_CICommand* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CInput_CICommand* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CInput_CICommand* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CInput_CICommand* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CInput_CICommand* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CInput_CICommand* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* add_CanExecuteChanged)(__x_ABI_CWindows_CUI_CXaml_CInput_CICommand* This,
        __x_ABI_C__FIEventHandler_1_IInspectable* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_CanExecuteChanged)(__x_ABI_CWindows_CUI_CXaml_CInput_CICommand* This,
        EventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* CanExecute)(__x_ABI_CWindows_CUI_CXaml_CInput_CICommand* This,
        IInspectable* parameter,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* Execute)(__x_ABI_CWindows_CUI_CXaml_CInput_CICommand* This,
        IInspectable* parameter);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CInput_CICommandVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CInput_CICommand
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CInput_CICommandVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CInput_CICommand;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CInput_CICommand_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CInput_CIContextRequestedEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CInput_CIContextRequestedEventArgs_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CInput_CIContextRequestedEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CInput_CIContextRequestedEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CInput_CIContextRequestedEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CInput_CIContextRequestedEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CInput_CIContextRequestedEventArgs* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CInput_CIContextRequestedEventArgs* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CInput_CIContextRequestedEventArgs* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Handled)(__x_ABI_CWindows_CUI_CXaml_CInput_CIContextRequestedEventArgs* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* put_Handled)(__x_ABI_CWindows_CUI_CXaml_CInput_CIContextRequestedEventArgs* This,
        boolean value);
    HRESULT (STDMETHODCALLTYPE* TryGetPosition)(__x_ABI_CWindows_CUI_CXaml_CInput_CIContextRequestedEventArgs* This,
        __x_ABI_CWindows_CUI_CXaml_CIUIElement* relativeTo,
        struct __x_ABI_CWindows_CFoundation_CPoint* point,
        boolean* returnValue);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CInput_CIContextRequestedEventArgsVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CInput_CIContextRequestedEventArgs
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CInput_CIContextRequestedEventArgsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CInput_CIContextRequestedEventArgs;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CInput_CIContextRequestedEventArgs_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CInput_CIDoubleTappedRoutedEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CInput_CIDoubleTappedRoutedEventArgs_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CInput_CIDoubleTappedRoutedEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CInput_CIDoubleTappedRoutedEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CInput_CIDoubleTappedRoutedEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CInput_CIDoubleTappedRoutedEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CInput_CIDoubleTappedRoutedEventArgs* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CInput_CIDoubleTappedRoutedEventArgs* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CInput_CIDoubleTappedRoutedEventArgs* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_PointerDeviceType)(__x_ABI_CWindows_CUI_CXaml_CInput_CIDoubleTappedRoutedEventArgs* This,
        enum __x_ABI_CWindows_CDevices_CInput_CPointerDeviceType* value);
    HRESULT (STDMETHODCALLTYPE* get_Handled)(__x_ABI_CWindows_CUI_CXaml_CInput_CIDoubleTappedRoutedEventArgs* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* put_Handled)(__x_ABI_CWindows_CUI_CXaml_CInput_CIDoubleTappedRoutedEventArgs* This,
        boolean value);
    HRESULT (STDMETHODCALLTYPE* GetPosition)(__x_ABI_CWindows_CUI_CXaml_CInput_CIDoubleTappedRoutedEventArgs* This,
        __x_ABI_CWindows_CUI_CXaml_CIUIElement* relativeTo,
        struct __x_ABI_CWindows_CFoundation_CPoint* result);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CInput_CIDoubleTappedRoutedEventArgsVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CInput_CIDoubleTappedRoutedEventArgs
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CInput_CIDoubleTappedRoutedEventArgsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CInput_CIDoubleTappedRoutedEventArgs;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CInput_CIDoubleTappedRoutedEventArgs_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CInput_CIExecuteRequestedEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CInput_CIExecuteRequestedEventArgs_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CInput_CIExecuteRequestedEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CInput_CIExecuteRequestedEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CInput_CIExecuteRequestedEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CInput_CIExecuteRequestedEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CInput_CIExecuteRequestedEventArgs* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CInput_CIExecuteRequestedEventArgs* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CInput_CIExecuteRequestedEventArgs* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Parameter)(__x_ABI_CWindows_CUI_CXaml_CInput_CIExecuteRequestedEventArgs* This,
        IInspectable** value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CInput_CIExecuteRequestedEventArgsVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CInput_CIExecuteRequestedEventArgs
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CInput_CIExecuteRequestedEventArgsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CInput_CIExecuteRequestedEventArgs;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CInput_CIExecuteRequestedEventArgs_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CInput_CIFindNextElementOptions_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CInput_CIFindNextElementOptions_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CInput_CIFindNextElementOptionsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CInput_CIFindNextElementOptions* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CInput_CIFindNextElementOptions* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CInput_CIFindNextElementOptions* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CInput_CIFindNextElementOptions* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CInput_CIFindNextElementOptions* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CInput_CIFindNextElementOptions* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_SearchRoot)(__x_ABI_CWindows_CUI_CXaml_CInput_CIFindNextElementOptions* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyObject** value);
    HRESULT (STDMETHODCALLTYPE* put_SearchRoot)(__x_ABI_CWindows_CUI_CXaml_CInput_CIFindNextElementOptions* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyObject* value);
    HRESULT (STDMETHODCALLTYPE* get_ExclusionRect)(__x_ABI_CWindows_CUI_CXaml_CInput_CIFindNextElementOptions* This,
        struct __x_ABI_CWindows_CFoundation_CRect* value);
    HRESULT (STDMETHODCALLTYPE* put_ExclusionRect)(__x_ABI_CWindows_CUI_CXaml_CInput_CIFindNextElementOptions* This,
        struct __x_ABI_CWindows_CFoundation_CRect value);
    HRESULT (STDMETHODCALLTYPE* get_HintRect)(__x_ABI_CWindows_CUI_CXaml_CInput_CIFindNextElementOptions* This,
        struct __x_ABI_CWindows_CFoundation_CRect* value);
    HRESULT (STDMETHODCALLTYPE* put_HintRect)(__x_ABI_CWindows_CUI_CXaml_CInput_CIFindNextElementOptions* This,
        struct __x_ABI_CWindows_CFoundation_CRect value);
    HRESULT (STDMETHODCALLTYPE* get_XYFocusNavigationStrategyOverride)(__x_ABI_CWindows_CUI_CXaml_CInput_CIFindNextElementOptions* This,
        enum __x_ABI_CWindows_CUI_CXaml_CInput_CXYFocusNavigationStrategyOverride* value);
    HRESULT (STDMETHODCALLTYPE* put_XYFocusNavigationStrategyOverride)(__x_ABI_CWindows_CUI_CXaml_CInput_CIFindNextElementOptions* This,
        enum __x_ABI_CWindows_CUI_CXaml_CInput_CXYFocusNavigationStrategyOverride value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CInput_CIFindNextElementOptionsVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CInput_CIFindNextElementOptions
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CInput_CIFindNextElementOptionsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CInput_CIFindNextElementOptions;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CInput_CIFindNextElementOptions_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CInput_CIFocusManager_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CInput_CIFocusManager_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CInput_CIFocusManagerVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CInput_CIFocusManager* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CInput_CIFocusManager* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CInput_CIFocusManager* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CInput_CIFocusManager* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CInput_CIFocusManager* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CInput_CIFocusManager* This,
            TrustLevel* trustLevel);
    
        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CInput_CIFocusManagerVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CInput_CIFocusManager
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CInput_CIFocusManagerVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CInput_CIFocusManager;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CInput_CIFocusManager_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CInput_CIFocusManagerGotFocusEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CInput_CIFocusManagerGotFocusEventArgs_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CInput_CIFocusManagerGotFocusEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CInput_CIFocusManagerGotFocusEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CInput_CIFocusManagerGotFocusEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CInput_CIFocusManagerGotFocusEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CInput_CIFocusManagerGotFocusEventArgs* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CInput_CIFocusManagerGotFocusEventArgs* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CInput_CIFocusManagerGotFocusEventArgs* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_NewFocusedElement)(__x_ABI_CWindows_CUI_CXaml_CInput_CIFocusManagerGotFocusEventArgs* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyObject** value);
    HRESULT (STDMETHODCALLTYPE* get_CorrelationId)(__x_ABI_CWindows_CUI_CXaml_CInput_CIFocusManagerGotFocusEventArgs* This,
        GUID* value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CInput_CIFocusManagerGotFocusEventArgsVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CInput_CIFocusManagerGotFocusEventArgs
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CInput_CIFocusManagerGotFocusEventArgsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CInput_CIFocusManagerGotFocusEventArgs;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CInput_CIFocusManagerGotFocusEventArgs_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CInput_CIFocusManagerLostFocusEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CInput_CIFocusManagerLostFocusEventArgs_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CInput_CIFocusManagerLostFocusEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CInput_CIFocusManagerLostFocusEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CInput_CIFocusManagerLostFocusEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CInput_CIFocusManagerLostFocusEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CInput_CIFocusManagerLostFocusEventArgs* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CInput_CIFocusManagerLostFocusEventArgs* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CInput_CIFocusManagerLostFocusEventArgs* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_OldFocusedElement)(__x_ABI_CWindows_CUI_CXaml_CInput_CIFocusManagerLostFocusEventArgs* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyObject** value);
    HRESULT (STDMETHODCALLTYPE* get_CorrelationId)(__x_ABI_CWindows_CUI_CXaml_CInput_CIFocusManagerLostFocusEventArgs* This,
        GUID* value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CInput_CIFocusManagerLostFocusEventArgsVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CInput_CIFocusManagerLostFocusEventArgs
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CInput_CIFocusManagerLostFocusEventArgsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CInput_CIFocusManagerLostFocusEventArgs;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CInput_CIFocusManagerLostFocusEventArgs_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CInput_CIFocusManagerStatics_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CInput_CIFocusManagerStatics_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CInput_CIFocusManagerStaticsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CInput_CIFocusManagerStatics* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CInput_CIFocusManagerStatics* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CInput_CIFocusManagerStatics* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CInput_CIFocusManagerStatics* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CInput_CIFocusManagerStatics* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CInput_CIFocusManagerStatics* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetFocusedElement)(__x_ABI_CWindows_CUI_CXaml_CInput_CIFocusManagerStatics* This,
        IInspectable** result);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CInput_CIFocusManagerStaticsVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CInput_CIFocusManagerStatics
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CInput_CIFocusManagerStaticsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CInput_CIFocusManagerStatics;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CInput_CIFocusManagerStatics_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CInput_CIFocusManagerStatics2_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CInput_CIFocusManagerStatics2_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CInput_CIFocusManagerStatics2Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CInput_CIFocusManagerStatics2* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CInput_CIFocusManagerStatics2* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CInput_CIFocusManagerStatics2* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CInput_CIFocusManagerStatics2* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CInput_CIFocusManagerStatics2* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CInput_CIFocusManagerStatics2* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* TryMoveFocus)(__x_ABI_CWindows_CUI_CXaml_CInput_CIFocusManagerStatics2* This,
        enum __x_ABI_CWindows_CUI_CXaml_CInput_CFocusNavigationDirection focusNavigationDirection,
        boolean* result);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CInput_CIFocusManagerStatics2Vtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CInput_CIFocusManagerStatics2
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CInput_CIFocusManagerStatics2Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CInput_CIFocusManagerStatics2;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CInput_CIFocusManagerStatics2_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CInput_CIFocusManagerStatics3_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CInput_CIFocusManagerStatics3_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CInput_CIFocusManagerStatics3Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CInput_CIFocusManagerStatics3* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CInput_CIFocusManagerStatics3* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CInput_CIFocusManagerStatics3* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CInput_CIFocusManagerStatics3* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CInput_CIFocusManagerStatics3* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CInput_CIFocusManagerStatics3* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* FindNextFocusableElement)(__x_ABI_CWindows_CUI_CXaml_CInput_CIFocusManagerStatics3* This,
        enum __x_ABI_CWindows_CUI_CXaml_CInput_CFocusNavigationDirection focusNavigationDirection,
        __x_ABI_CWindows_CUI_CXaml_CIUIElement** result);
    HRESULT (STDMETHODCALLTYPE* FindNextFocusableElementWithHint)(__x_ABI_CWindows_CUI_CXaml_CInput_CIFocusManagerStatics3* This,
        enum __x_ABI_CWindows_CUI_CXaml_CInput_CFocusNavigationDirection focusNavigationDirection,
        struct __x_ABI_CWindows_CFoundation_CRect hintRect,
        __x_ABI_CWindows_CUI_CXaml_CIUIElement** result);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CInput_CIFocusManagerStatics3Vtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CInput_CIFocusManagerStatics3
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CInput_CIFocusManagerStatics3Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CInput_CIFocusManagerStatics3;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CInput_CIFocusManagerStatics3_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CInput_CIFocusManagerStatics4_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CInput_CIFocusManagerStatics4_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CInput_CIFocusManagerStatics4Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CInput_CIFocusManagerStatics4* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CInput_CIFocusManagerStatics4* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CInput_CIFocusManagerStatics4* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CInput_CIFocusManagerStatics4* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CInput_CIFocusManagerStatics4* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CInput_CIFocusManagerStatics4* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* TryMoveFocusWithOptions)(__x_ABI_CWindows_CUI_CXaml_CInput_CIFocusManagerStatics4* This,
        enum __x_ABI_CWindows_CUI_CXaml_CInput_CFocusNavigationDirection focusNavigationDirection,
        __x_ABI_CWindows_CUI_CXaml_CInput_CIFindNextElementOptions* focusNavigationOptions,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* FindNextElement)(__x_ABI_CWindows_CUI_CXaml_CInput_CIFocusManagerStatics4* This,
        enum __x_ABI_CWindows_CUI_CXaml_CInput_CFocusNavigationDirection focusNavigationDirection,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyObject** result);
    HRESULT (STDMETHODCALLTYPE* FindFirstFocusableElement)(__x_ABI_CWindows_CUI_CXaml_CInput_CIFocusManagerStatics4* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyObject* searchScope,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyObject** result);
    HRESULT (STDMETHODCALLTYPE* FindLastFocusableElement)(__x_ABI_CWindows_CUI_CXaml_CInput_CIFocusManagerStatics4* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyObject* searchScope,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyObject** result);
    HRESULT (STDMETHODCALLTYPE* FindNextElementWithOptions)(__x_ABI_CWindows_CUI_CXaml_CInput_CIFocusManagerStatics4* This,
        enum __x_ABI_CWindows_CUI_CXaml_CInput_CFocusNavigationDirection focusNavigationDirection,
        __x_ABI_CWindows_CUI_CXaml_CInput_CIFindNextElementOptions* focusNavigationOptions,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyObject** result);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CInput_CIFocusManagerStatics4Vtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CInput_CIFocusManagerStatics4
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CInput_CIFocusManagerStatics4Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CInput_CIFocusManagerStatics4;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CInput_CIFocusManagerStatics4_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CInput_CIFocusManagerStatics5_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CInput_CIFocusManagerStatics5_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CInput_CIFocusManagerStatics5Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CInput_CIFocusManagerStatics5* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CInput_CIFocusManagerStatics5* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CInput_CIFocusManagerStatics5* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CInput_CIFocusManagerStatics5* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CInput_CIFocusManagerStatics5* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CInput_CIFocusManagerStatics5* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* TryFocusAsync)(__x_ABI_CWindows_CUI_CXaml_CInput_CIFocusManagerStatics5* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyObject* element,
        enum __x_ABI_CWindows_CUI_CXaml_CFocusState value,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CUI__CXaml__CInput__CFocusMovementResult** operation);
    HRESULT (STDMETHODCALLTYPE* TryMoveFocusAsync)(__x_ABI_CWindows_CUI_CXaml_CInput_CIFocusManagerStatics5* This,
        enum __x_ABI_CWindows_CUI_CXaml_CInput_CFocusNavigationDirection focusNavigationDirection,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CUI__CXaml__CInput__CFocusMovementResult** operation);
    HRESULT (STDMETHODCALLTYPE* TryMoveFocusWithOptionsAsync)(__x_ABI_CWindows_CUI_CXaml_CInput_CIFocusManagerStatics5* This,
        enum __x_ABI_CWindows_CUI_CXaml_CInput_CFocusNavigationDirection focusNavigationDirection,
        __x_ABI_CWindows_CUI_CXaml_CInput_CIFindNextElementOptions* focusNavigationOptions,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CUI__CXaml__CInput__CFocusMovementResult** operation);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CInput_CIFocusManagerStatics5Vtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CInput_CIFocusManagerStatics5
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CInput_CIFocusManagerStatics5Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CInput_CIFocusManagerStatics5;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CInput_CIFocusManagerStatics5_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CInput_CIFocusManagerStatics6_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CInput_CIFocusManagerStatics6_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CInput_CIFocusManagerStatics6Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CInput_CIFocusManagerStatics6* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CInput_CIFocusManagerStatics6* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CInput_CIFocusManagerStatics6* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CInput_CIFocusManagerStatics6* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CInput_CIFocusManagerStatics6* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CInput_CIFocusManagerStatics6* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* add_GotFocus)(__x_ABI_CWindows_CUI_CXaml_CInput_CIFocusManagerStatics6* This,
        __x_ABI_C__FIEventHandler_1___x_ABI_CWindows__CUI__CXaml__CInput__CFocusManagerGotFocusEventArgs* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_GotFocus)(__x_ABI_CWindows_CUI_CXaml_CInput_CIFocusManagerStatics6* This,
        EventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* add_LostFocus)(__x_ABI_CWindows_CUI_CXaml_CInput_CIFocusManagerStatics6* This,
        __x_ABI_C__FIEventHandler_1___x_ABI_CWindows__CUI__CXaml__CInput__CFocusManagerLostFocusEventArgs* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_LostFocus)(__x_ABI_CWindows_CUI_CXaml_CInput_CIFocusManagerStatics6* This,
        EventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* add_GettingFocus)(__x_ABI_CWindows_CUI_CXaml_CInput_CIFocusManagerStatics6* This,
        __x_ABI_C__FIEventHandler_1___x_ABI_CWindows__CUI__CXaml__CInput__CGettingFocusEventArgs* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_GettingFocus)(__x_ABI_CWindows_CUI_CXaml_CInput_CIFocusManagerStatics6* This,
        EventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* add_LosingFocus)(__x_ABI_CWindows_CUI_CXaml_CInput_CIFocusManagerStatics6* This,
        __x_ABI_C__FIEventHandler_1___x_ABI_CWindows__CUI__CXaml__CInput__CLosingFocusEventArgs* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_LosingFocus)(__x_ABI_CWindows_CUI_CXaml_CInput_CIFocusManagerStatics6* This,
        EventRegistrationToken token);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CInput_CIFocusManagerStatics6Vtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CInput_CIFocusManagerStatics6
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CInput_CIFocusManagerStatics6Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CInput_CIFocusManagerStatics6;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CInput_CIFocusManagerStatics6_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CInput_CIFocusManagerStatics7_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CInput_CIFocusManagerStatics7_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CInput_CIFocusManagerStatics7Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CInput_CIFocusManagerStatics7* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CInput_CIFocusManagerStatics7* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CInput_CIFocusManagerStatics7* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CInput_CIFocusManagerStatics7* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CInput_CIFocusManagerStatics7* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CInput_CIFocusManagerStatics7* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetFocusedElement)(__x_ABI_CWindows_CUI_CXaml_CInput_CIFocusManagerStatics7* This,
        __x_ABI_CWindows_CUI_CXaml_CIXamlRoot* xamlRoot,
        IInspectable** result);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CInput_CIFocusManagerStatics7Vtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CInput_CIFocusManagerStatics7
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CInput_CIFocusManagerStatics7Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CInput_CIFocusManagerStatics7;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CInput_CIFocusManagerStatics7_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CInput_CIFocusMovementResult_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CInput_CIFocusMovementResult_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CInput_CIFocusMovementResultVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CInput_CIFocusMovementResult* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CInput_CIFocusMovementResult* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CInput_CIFocusMovementResult* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CInput_CIFocusMovementResult* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CInput_CIFocusMovementResult* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CInput_CIFocusMovementResult* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Succeeded)(__x_ABI_CWindows_CUI_CXaml_CInput_CIFocusMovementResult* This,
        boolean* value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CInput_CIFocusMovementResultVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CInput_CIFocusMovementResult
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CInput_CIFocusMovementResultVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CInput_CIFocusMovementResult;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CInput_CIFocusMovementResult_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CInput_CIGettingFocusEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CInput_CIGettingFocusEventArgs_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CInput_CIGettingFocusEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CInput_CIGettingFocusEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CInput_CIGettingFocusEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CInput_CIGettingFocusEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CInput_CIGettingFocusEventArgs* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CInput_CIGettingFocusEventArgs* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CInput_CIGettingFocusEventArgs* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_OldFocusedElement)(__x_ABI_CWindows_CUI_CXaml_CInput_CIGettingFocusEventArgs* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyObject** value);
    HRESULT (STDMETHODCALLTYPE* get_NewFocusedElement)(__x_ABI_CWindows_CUI_CXaml_CInput_CIGettingFocusEventArgs* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyObject** value);
    HRESULT (STDMETHODCALLTYPE* put_NewFocusedElement)(__x_ABI_CWindows_CUI_CXaml_CInput_CIGettingFocusEventArgs* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyObject* value);
    HRESULT (STDMETHODCALLTYPE* get_FocusState)(__x_ABI_CWindows_CUI_CXaml_CInput_CIGettingFocusEventArgs* This,
        enum __x_ABI_CWindows_CUI_CXaml_CFocusState* value);
    HRESULT (STDMETHODCALLTYPE* get_Direction)(__x_ABI_CWindows_CUI_CXaml_CInput_CIGettingFocusEventArgs* This,
        enum __x_ABI_CWindows_CUI_CXaml_CInput_CFocusNavigationDirection* value);
    HRESULT (STDMETHODCALLTYPE* get_Handled)(__x_ABI_CWindows_CUI_CXaml_CInput_CIGettingFocusEventArgs* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* put_Handled)(__x_ABI_CWindows_CUI_CXaml_CInput_CIGettingFocusEventArgs* This,
        boolean value);
    HRESULT (STDMETHODCALLTYPE* get_InputDevice)(__x_ABI_CWindows_CUI_CXaml_CInput_CIGettingFocusEventArgs* This,
        enum __x_ABI_CWindows_CUI_CXaml_CInput_CFocusInputDeviceKind* value);
    HRESULT (STDMETHODCALLTYPE* get_Cancel)(__x_ABI_CWindows_CUI_CXaml_CInput_CIGettingFocusEventArgs* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* put_Cancel)(__x_ABI_CWindows_CUI_CXaml_CInput_CIGettingFocusEventArgs* This,
        boolean value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CInput_CIGettingFocusEventArgsVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CInput_CIGettingFocusEventArgs
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CInput_CIGettingFocusEventArgsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CInput_CIGettingFocusEventArgs;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CInput_CIGettingFocusEventArgs_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CInput_CIGettingFocusEventArgs2_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CInput_CIGettingFocusEventArgs2_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CInput_CIGettingFocusEventArgs2Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CInput_CIGettingFocusEventArgs2* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CInput_CIGettingFocusEventArgs2* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CInput_CIGettingFocusEventArgs2* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CInput_CIGettingFocusEventArgs2* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CInput_CIGettingFocusEventArgs2* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CInput_CIGettingFocusEventArgs2* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* TryCancel)(__x_ABI_CWindows_CUI_CXaml_CInput_CIGettingFocusEventArgs2* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* TrySetNewFocusedElement)(__x_ABI_CWindows_CUI_CXaml_CInput_CIGettingFocusEventArgs2* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyObject* element,
        boolean* result);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CInput_CIGettingFocusEventArgs2Vtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CInput_CIGettingFocusEventArgs2
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CInput_CIGettingFocusEventArgs2Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CInput_CIGettingFocusEventArgs2;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CInput_CIGettingFocusEventArgs2_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CInput_CIGettingFocusEventArgs3_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CInput_CIGettingFocusEventArgs3_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CInput_CIGettingFocusEventArgs3Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CInput_CIGettingFocusEventArgs3* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CInput_CIGettingFocusEventArgs3* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CInput_CIGettingFocusEventArgs3* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CInput_CIGettingFocusEventArgs3* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CInput_CIGettingFocusEventArgs3* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CInput_CIGettingFocusEventArgs3* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_CorrelationId)(__x_ABI_CWindows_CUI_CXaml_CInput_CIGettingFocusEventArgs3* This,
        GUID* value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CInput_CIGettingFocusEventArgs3Vtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CInput_CIGettingFocusEventArgs3
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CInput_CIGettingFocusEventArgs3Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CInput_CIGettingFocusEventArgs3;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CInput_CIGettingFocusEventArgs3_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CInput_CIHoldingRoutedEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CInput_CIHoldingRoutedEventArgs_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CInput_CIHoldingRoutedEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CInput_CIHoldingRoutedEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CInput_CIHoldingRoutedEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CInput_CIHoldingRoutedEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CInput_CIHoldingRoutedEventArgs* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CInput_CIHoldingRoutedEventArgs* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CInput_CIHoldingRoutedEventArgs* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_PointerDeviceType)(__x_ABI_CWindows_CUI_CXaml_CInput_CIHoldingRoutedEventArgs* This,
        enum __x_ABI_CWindows_CDevices_CInput_CPointerDeviceType* value);
    HRESULT (STDMETHODCALLTYPE* get_HoldingState)(__x_ABI_CWindows_CUI_CXaml_CInput_CIHoldingRoutedEventArgs* This,
        enum __x_ABI_CWindows_CUI_CInput_CHoldingState* value);
    HRESULT (STDMETHODCALLTYPE* get_Handled)(__x_ABI_CWindows_CUI_CXaml_CInput_CIHoldingRoutedEventArgs* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* put_Handled)(__x_ABI_CWindows_CUI_CXaml_CInput_CIHoldingRoutedEventArgs* This,
        boolean value);
    HRESULT (STDMETHODCALLTYPE* GetPosition)(__x_ABI_CWindows_CUI_CXaml_CInput_CIHoldingRoutedEventArgs* This,
        __x_ABI_CWindows_CUI_CXaml_CIUIElement* relativeTo,
        struct __x_ABI_CWindows_CFoundation_CPoint* result);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CInput_CIHoldingRoutedEventArgsVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CInput_CIHoldingRoutedEventArgs
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CInput_CIHoldingRoutedEventArgsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CInput_CIHoldingRoutedEventArgs;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CInput_CIHoldingRoutedEventArgs_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CInput_CIInertiaExpansionBehavior_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CInput_CIInertiaExpansionBehavior_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CInput_CIInertiaExpansionBehaviorVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CInput_CIInertiaExpansionBehavior* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CInput_CIInertiaExpansionBehavior* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CInput_CIInertiaExpansionBehavior* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CInput_CIInertiaExpansionBehavior* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CInput_CIInertiaExpansionBehavior* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CInput_CIInertiaExpansionBehavior* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_DesiredDeceleration)(__x_ABI_CWindows_CUI_CXaml_CInput_CIInertiaExpansionBehavior* This,
        DOUBLE* value);
    HRESULT (STDMETHODCALLTYPE* put_DesiredDeceleration)(__x_ABI_CWindows_CUI_CXaml_CInput_CIInertiaExpansionBehavior* This,
        DOUBLE value);
    HRESULT (STDMETHODCALLTYPE* get_DesiredExpansion)(__x_ABI_CWindows_CUI_CXaml_CInput_CIInertiaExpansionBehavior* This,
        DOUBLE* value);
    HRESULT (STDMETHODCALLTYPE* put_DesiredExpansion)(__x_ABI_CWindows_CUI_CXaml_CInput_CIInertiaExpansionBehavior* This,
        DOUBLE value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CInput_CIInertiaExpansionBehaviorVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CInput_CIInertiaExpansionBehavior
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CInput_CIInertiaExpansionBehaviorVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CInput_CIInertiaExpansionBehavior;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CInput_CIInertiaExpansionBehavior_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CInput_CIInertiaRotationBehavior_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CInput_CIInertiaRotationBehavior_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CInput_CIInertiaRotationBehaviorVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CInput_CIInertiaRotationBehavior* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CInput_CIInertiaRotationBehavior* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CInput_CIInertiaRotationBehavior* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CInput_CIInertiaRotationBehavior* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CInput_CIInertiaRotationBehavior* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CInput_CIInertiaRotationBehavior* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_DesiredDeceleration)(__x_ABI_CWindows_CUI_CXaml_CInput_CIInertiaRotationBehavior* This,
        DOUBLE* value);
    HRESULT (STDMETHODCALLTYPE* put_DesiredDeceleration)(__x_ABI_CWindows_CUI_CXaml_CInput_CIInertiaRotationBehavior* This,
        DOUBLE value);
    HRESULT (STDMETHODCALLTYPE* get_DesiredRotation)(__x_ABI_CWindows_CUI_CXaml_CInput_CIInertiaRotationBehavior* This,
        DOUBLE* value);
    HRESULT (STDMETHODCALLTYPE* put_DesiredRotation)(__x_ABI_CWindows_CUI_CXaml_CInput_CIInertiaRotationBehavior* This,
        DOUBLE value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CInput_CIInertiaRotationBehaviorVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CInput_CIInertiaRotationBehavior
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CInput_CIInertiaRotationBehaviorVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CInput_CIInertiaRotationBehavior;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CInput_CIInertiaRotationBehavior_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CInput_CIInertiaTranslationBehavior_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CInput_CIInertiaTranslationBehavior_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CInput_CIInertiaTranslationBehaviorVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CInput_CIInertiaTranslationBehavior* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CInput_CIInertiaTranslationBehavior* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CInput_CIInertiaTranslationBehavior* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CInput_CIInertiaTranslationBehavior* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CInput_CIInertiaTranslationBehavior* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CInput_CIInertiaTranslationBehavior* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_DesiredDeceleration)(__x_ABI_CWindows_CUI_CXaml_CInput_CIInertiaTranslationBehavior* This,
        DOUBLE* value);
    HRESULT (STDMETHODCALLTYPE* put_DesiredDeceleration)(__x_ABI_CWindows_CUI_CXaml_CInput_CIInertiaTranslationBehavior* This,
        DOUBLE value);
    HRESULT (STDMETHODCALLTYPE* get_DesiredDisplacement)(__x_ABI_CWindows_CUI_CXaml_CInput_CIInertiaTranslationBehavior* This,
        DOUBLE* value);
    HRESULT (STDMETHODCALLTYPE* put_DesiredDisplacement)(__x_ABI_CWindows_CUI_CXaml_CInput_CIInertiaTranslationBehavior* This,
        DOUBLE value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CInput_CIInertiaTranslationBehaviorVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CInput_CIInertiaTranslationBehavior
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CInput_CIInertiaTranslationBehaviorVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CInput_CIInertiaTranslationBehavior;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CInput_CIInertiaTranslationBehavior_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CInput_CIInputScope_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CInput_CIInputScope_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CInput_CIInputScopeVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CInput_CIInputScope* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CInput_CIInputScope* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CInput_CIInputScope* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CInput_CIInputScope* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CInput_CIInputScope* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CInput_CIInputScope* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Names)(__x_ABI_CWindows_CUI_CXaml_CInput_CIInputScope* This,
        __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CInput__CInputScopeName** value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CInput_CIInputScopeVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CInput_CIInputScope
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CInput_CIInputScopeVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CInput_CIInputScope;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CInput_CIInputScope_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CInput_CIInputScopeName_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CInput_CIInputScopeName_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CInput_CIInputScopeNameVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CInput_CIInputScopeName* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CInput_CIInputScopeName* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CInput_CIInputScopeName* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CInput_CIInputScopeName* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CInput_CIInputScopeName* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CInput_CIInputScopeName* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_NameValue)(__x_ABI_CWindows_CUI_CXaml_CInput_CIInputScopeName* This,
        enum __x_ABI_CWindows_CUI_CXaml_CInput_CInputScopeNameValue* value);
    HRESULT (STDMETHODCALLTYPE* put_NameValue)(__x_ABI_CWindows_CUI_CXaml_CInput_CIInputScopeName* This,
        enum __x_ABI_CWindows_CUI_CXaml_CInput_CInputScopeNameValue value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CInput_CIInputScopeNameVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CInput_CIInputScopeName
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CInput_CIInputScopeNameVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CInput_CIInputScopeName;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CInput_CIInputScopeName_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CInput_CIInputScopeNameFactory_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CInput_CIInputScopeNameFactory_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CInput_CIInputScopeNameFactoryVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CInput_CIInputScopeNameFactory* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CInput_CIInputScopeNameFactory* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CInput_CIInputScopeNameFactory* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CInput_CIInputScopeNameFactory* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CInput_CIInputScopeNameFactory* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CInput_CIInputScopeNameFactory* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* CreateInstance)(__x_ABI_CWindows_CUI_CXaml_CInput_CIInputScopeNameFactory* This,
        enum __x_ABI_CWindows_CUI_CXaml_CInput_CInputScopeNameValue nameValue,
        __x_ABI_CWindows_CUI_CXaml_CInput_CIInputScopeName** value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CInput_CIInputScopeNameFactoryVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CInput_CIInputScopeNameFactory
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CInput_CIInputScopeNameFactoryVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CInput_CIInputScopeNameFactory;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CInput_CIInputScopeNameFactory_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CInput_CIKeyRoutedEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CInput_CIKeyRoutedEventArgs_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CInput_CIKeyRoutedEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CInput_CIKeyRoutedEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CInput_CIKeyRoutedEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CInput_CIKeyRoutedEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CInput_CIKeyRoutedEventArgs* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CInput_CIKeyRoutedEventArgs* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CInput_CIKeyRoutedEventArgs* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Key)(__x_ABI_CWindows_CUI_CXaml_CInput_CIKeyRoutedEventArgs* This,
        enum __x_ABI_CWindows_CSystem_CVirtualKey* value);
    HRESULT (STDMETHODCALLTYPE* get_KeyStatus)(__x_ABI_CWindows_CUI_CXaml_CInput_CIKeyRoutedEventArgs* This,
        struct __x_ABI_CWindows_CUI_CCore_CCorePhysicalKeyStatus* value);
    HRESULT (STDMETHODCALLTYPE* get_Handled)(__x_ABI_CWindows_CUI_CXaml_CInput_CIKeyRoutedEventArgs* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* put_Handled)(__x_ABI_CWindows_CUI_CXaml_CInput_CIKeyRoutedEventArgs* This,
        boolean value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CInput_CIKeyRoutedEventArgsVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CInput_CIKeyRoutedEventArgs
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CInput_CIKeyRoutedEventArgsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CInput_CIKeyRoutedEventArgs;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CInput_CIKeyRoutedEventArgs_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CInput_CIKeyRoutedEventArgs2_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CInput_CIKeyRoutedEventArgs2_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CInput_CIKeyRoutedEventArgs2Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CInput_CIKeyRoutedEventArgs2* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CInput_CIKeyRoutedEventArgs2* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CInput_CIKeyRoutedEventArgs2* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CInput_CIKeyRoutedEventArgs2* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CInput_CIKeyRoutedEventArgs2* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CInput_CIKeyRoutedEventArgs2* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_OriginalKey)(__x_ABI_CWindows_CUI_CXaml_CInput_CIKeyRoutedEventArgs2* This,
        enum __x_ABI_CWindows_CSystem_CVirtualKey* value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CInput_CIKeyRoutedEventArgs2Vtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CInput_CIKeyRoutedEventArgs2
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CInput_CIKeyRoutedEventArgs2Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CInput_CIKeyRoutedEventArgs2;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CInput_CIKeyRoutedEventArgs2_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CInput_CIKeyRoutedEventArgs3_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CInput_CIKeyRoutedEventArgs3_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CInput_CIKeyRoutedEventArgs3Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CInput_CIKeyRoutedEventArgs3* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CInput_CIKeyRoutedEventArgs3* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CInput_CIKeyRoutedEventArgs3* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CInput_CIKeyRoutedEventArgs3* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CInput_CIKeyRoutedEventArgs3* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CInput_CIKeyRoutedEventArgs3* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_DeviceId)(__x_ABI_CWindows_CUI_CXaml_CInput_CIKeyRoutedEventArgs3* This,
        HSTRING* value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CInput_CIKeyRoutedEventArgs3Vtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CInput_CIKeyRoutedEventArgs3
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CInput_CIKeyRoutedEventArgs3Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CInput_CIKeyRoutedEventArgs3;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CInput_CIKeyRoutedEventArgs3_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CInput_CIKeyboardAccelerator_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CInput_CIKeyboardAccelerator_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CInput_CIKeyboardAcceleratorVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CInput_CIKeyboardAccelerator* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CInput_CIKeyboardAccelerator* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CInput_CIKeyboardAccelerator* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CInput_CIKeyboardAccelerator* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CInput_CIKeyboardAccelerator* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CInput_CIKeyboardAccelerator* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Key)(__x_ABI_CWindows_CUI_CXaml_CInput_CIKeyboardAccelerator* This,
        enum __x_ABI_CWindows_CSystem_CVirtualKey* value);
    HRESULT (STDMETHODCALLTYPE* put_Key)(__x_ABI_CWindows_CUI_CXaml_CInput_CIKeyboardAccelerator* This,
        enum __x_ABI_CWindows_CSystem_CVirtualKey value);
    HRESULT (STDMETHODCALLTYPE* get_Modifiers)(__x_ABI_CWindows_CUI_CXaml_CInput_CIKeyboardAccelerator* This,
        enum __x_ABI_CWindows_CSystem_CVirtualKeyModifiers* value);
    HRESULT (STDMETHODCALLTYPE* put_Modifiers)(__x_ABI_CWindows_CUI_CXaml_CInput_CIKeyboardAccelerator* This,
        enum __x_ABI_CWindows_CSystem_CVirtualKeyModifiers value);
    HRESULT (STDMETHODCALLTYPE* get_IsEnabled)(__x_ABI_CWindows_CUI_CXaml_CInput_CIKeyboardAccelerator* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* put_IsEnabled)(__x_ABI_CWindows_CUI_CXaml_CInput_CIKeyboardAccelerator* This,
        boolean value);
    HRESULT (STDMETHODCALLTYPE* get_ScopeOwner)(__x_ABI_CWindows_CUI_CXaml_CInput_CIKeyboardAccelerator* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyObject** value);
    HRESULT (STDMETHODCALLTYPE* put_ScopeOwner)(__x_ABI_CWindows_CUI_CXaml_CInput_CIKeyboardAccelerator* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyObject* value);
    HRESULT (STDMETHODCALLTYPE* add_Invoked)(__x_ABI_CWindows_CUI_CXaml_CInput_CIKeyboardAccelerator* This,
        __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CInput__CKeyboardAccelerator___x_ABI_CWindows__CUI__CXaml__CInput__CKeyboardAcceleratorInvokedEventArgs* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_Invoked)(__x_ABI_CWindows_CUI_CXaml_CInput_CIKeyboardAccelerator* This,
        EventRegistrationToken token);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CInput_CIKeyboardAcceleratorVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CInput_CIKeyboardAccelerator
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CInput_CIKeyboardAcceleratorVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CInput_CIKeyboardAccelerator;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CInput_CIKeyboardAccelerator_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CInput_CIKeyboardAcceleratorFactory_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CInput_CIKeyboardAcceleratorFactory_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CInput_CIKeyboardAcceleratorFactoryVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CInput_CIKeyboardAcceleratorFactory* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CInput_CIKeyboardAcceleratorFactory* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CInput_CIKeyboardAcceleratorFactory* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CInput_CIKeyboardAcceleratorFactory* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CInput_CIKeyboardAcceleratorFactory* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CInput_CIKeyboardAcceleratorFactory* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* CreateInstance)(__x_ABI_CWindows_CUI_CXaml_CInput_CIKeyboardAcceleratorFactory* This,
        IInspectable* baseInterface,
        IInspectable** innerInterface,
        __x_ABI_CWindows_CUI_CXaml_CInput_CIKeyboardAccelerator** value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CInput_CIKeyboardAcceleratorFactoryVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CInput_CIKeyboardAcceleratorFactory
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CInput_CIKeyboardAcceleratorFactoryVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CInput_CIKeyboardAcceleratorFactory;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CInput_CIKeyboardAcceleratorFactory_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CInput_CIKeyboardAcceleratorInvokedEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CInput_CIKeyboardAcceleratorInvokedEventArgs_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CInput_CIKeyboardAcceleratorInvokedEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CInput_CIKeyboardAcceleratorInvokedEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CInput_CIKeyboardAcceleratorInvokedEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CInput_CIKeyboardAcceleratorInvokedEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CInput_CIKeyboardAcceleratorInvokedEventArgs* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CInput_CIKeyboardAcceleratorInvokedEventArgs* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CInput_CIKeyboardAcceleratorInvokedEventArgs* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Handled)(__x_ABI_CWindows_CUI_CXaml_CInput_CIKeyboardAcceleratorInvokedEventArgs* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* put_Handled)(__x_ABI_CWindows_CUI_CXaml_CInput_CIKeyboardAcceleratorInvokedEventArgs* This,
        boolean value);
    HRESULT (STDMETHODCALLTYPE* get_Element)(__x_ABI_CWindows_CUI_CXaml_CInput_CIKeyboardAcceleratorInvokedEventArgs* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyObject** value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CInput_CIKeyboardAcceleratorInvokedEventArgsVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CInput_CIKeyboardAcceleratorInvokedEventArgs
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CInput_CIKeyboardAcceleratorInvokedEventArgsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CInput_CIKeyboardAcceleratorInvokedEventArgs;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CInput_CIKeyboardAcceleratorInvokedEventArgs_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CInput_CIKeyboardAcceleratorInvokedEventArgs2_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CInput_CIKeyboardAcceleratorInvokedEventArgs2_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CInput_CIKeyboardAcceleratorInvokedEventArgs2Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CInput_CIKeyboardAcceleratorInvokedEventArgs2* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CInput_CIKeyboardAcceleratorInvokedEventArgs2* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CInput_CIKeyboardAcceleratorInvokedEventArgs2* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CInput_CIKeyboardAcceleratorInvokedEventArgs2* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CInput_CIKeyboardAcceleratorInvokedEventArgs2* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CInput_CIKeyboardAcceleratorInvokedEventArgs2* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_KeyboardAccelerator)(__x_ABI_CWindows_CUI_CXaml_CInput_CIKeyboardAcceleratorInvokedEventArgs2* This,
        __x_ABI_CWindows_CUI_CXaml_CInput_CIKeyboardAccelerator** value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CInput_CIKeyboardAcceleratorInvokedEventArgs2Vtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CInput_CIKeyboardAcceleratorInvokedEventArgs2
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CInput_CIKeyboardAcceleratorInvokedEventArgs2Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CInput_CIKeyboardAcceleratorInvokedEventArgs2;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CInput_CIKeyboardAcceleratorInvokedEventArgs2_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CInput_CIKeyboardAcceleratorStatics_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CInput_CIKeyboardAcceleratorStatics_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CInput_CIKeyboardAcceleratorStaticsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CInput_CIKeyboardAcceleratorStatics* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CInput_CIKeyboardAcceleratorStatics* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CInput_CIKeyboardAcceleratorStatics* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CInput_CIKeyboardAcceleratorStatics* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CInput_CIKeyboardAcceleratorStatics* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CInput_CIKeyboardAcceleratorStatics* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_KeyProperty)(__x_ABI_CWindows_CUI_CXaml_CInput_CIKeyboardAcceleratorStatics* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** value);
    HRESULT (STDMETHODCALLTYPE* get_ModifiersProperty)(__x_ABI_CWindows_CUI_CXaml_CInput_CIKeyboardAcceleratorStatics* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** value);
    HRESULT (STDMETHODCALLTYPE* get_IsEnabledProperty)(__x_ABI_CWindows_CUI_CXaml_CInput_CIKeyboardAcceleratorStatics* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** value);
    HRESULT (STDMETHODCALLTYPE* get_ScopeOwnerProperty)(__x_ABI_CWindows_CUI_CXaml_CInput_CIKeyboardAcceleratorStatics* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CInput_CIKeyboardAcceleratorStaticsVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CInput_CIKeyboardAcceleratorStatics
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CInput_CIKeyboardAcceleratorStaticsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CInput_CIKeyboardAcceleratorStatics;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CInput_CIKeyboardAcceleratorStatics_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CInput_CILosingFocusEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CInput_CILosingFocusEventArgs_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CInput_CILosingFocusEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CInput_CILosingFocusEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CInput_CILosingFocusEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CInput_CILosingFocusEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CInput_CILosingFocusEventArgs* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CInput_CILosingFocusEventArgs* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CInput_CILosingFocusEventArgs* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_OldFocusedElement)(__x_ABI_CWindows_CUI_CXaml_CInput_CILosingFocusEventArgs* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyObject** value);
    HRESULT (STDMETHODCALLTYPE* get_NewFocusedElement)(__x_ABI_CWindows_CUI_CXaml_CInput_CILosingFocusEventArgs* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyObject** value);
    HRESULT (STDMETHODCALLTYPE* put_NewFocusedElement)(__x_ABI_CWindows_CUI_CXaml_CInput_CILosingFocusEventArgs* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyObject* value);
    HRESULT (STDMETHODCALLTYPE* get_FocusState)(__x_ABI_CWindows_CUI_CXaml_CInput_CILosingFocusEventArgs* This,
        enum __x_ABI_CWindows_CUI_CXaml_CFocusState* value);
    HRESULT (STDMETHODCALLTYPE* get_Direction)(__x_ABI_CWindows_CUI_CXaml_CInput_CILosingFocusEventArgs* This,
        enum __x_ABI_CWindows_CUI_CXaml_CInput_CFocusNavigationDirection* value);
    HRESULT (STDMETHODCALLTYPE* get_Handled)(__x_ABI_CWindows_CUI_CXaml_CInput_CILosingFocusEventArgs* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* put_Handled)(__x_ABI_CWindows_CUI_CXaml_CInput_CILosingFocusEventArgs* This,
        boolean value);
    HRESULT (STDMETHODCALLTYPE* get_InputDevice)(__x_ABI_CWindows_CUI_CXaml_CInput_CILosingFocusEventArgs* This,
        enum __x_ABI_CWindows_CUI_CXaml_CInput_CFocusInputDeviceKind* value);
    HRESULT (STDMETHODCALLTYPE* get_Cancel)(__x_ABI_CWindows_CUI_CXaml_CInput_CILosingFocusEventArgs* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* put_Cancel)(__x_ABI_CWindows_CUI_CXaml_CInput_CILosingFocusEventArgs* This,
        boolean value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CInput_CILosingFocusEventArgsVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CInput_CILosingFocusEventArgs
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CInput_CILosingFocusEventArgsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CInput_CILosingFocusEventArgs;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CInput_CILosingFocusEventArgs_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CInput_CILosingFocusEventArgs2_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CInput_CILosingFocusEventArgs2_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CInput_CILosingFocusEventArgs2Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CInput_CILosingFocusEventArgs2* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CInput_CILosingFocusEventArgs2* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CInput_CILosingFocusEventArgs2* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CInput_CILosingFocusEventArgs2* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CInput_CILosingFocusEventArgs2* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CInput_CILosingFocusEventArgs2* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* TryCancel)(__x_ABI_CWindows_CUI_CXaml_CInput_CILosingFocusEventArgs2* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* TrySetNewFocusedElement)(__x_ABI_CWindows_CUI_CXaml_CInput_CILosingFocusEventArgs2* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyObject* element,
        boolean* result);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CInput_CILosingFocusEventArgs2Vtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CInput_CILosingFocusEventArgs2
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CInput_CILosingFocusEventArgs2Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CInput_CILosingFocusEventArgs2;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CInput_CILosingFocusEventArgs2_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CInput_CILosingFocusEventArgs3_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CInput_CILosingFocusEventArgs3_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CInput_CILosingFocusEventArgs3Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CInput_CILosingFocusEventArgs3* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CInput_CILosingFocusEventArgs3* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CInput_CILosingFocusEventArgs3* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CInput_CILosingFocusEventArgs3* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CInput_CILosingFocusEventArgs3* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CInput_CILosingFocusEventArgs3* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_CorrelationId)(__x_ABI_CWindows_CUI_CXaml_CInput_CILosingFocusEventArgs3* This,
        GUID* value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CInput_CILosingFocusEventArgs3Vtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CInput_CILosingFocusEventArgs3
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CInput_CILosingFocusEventArgs3Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CInput_CILosingFocusEventArgs3;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CInput_CILosingFocusEventArgs3_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationCompletedRoutedEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationCompletedRoutedEventArgs_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationCompletedRoutedEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationCompletedRoutedEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationCompletedRoutedEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationCompletedRoutedEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationCompletedRoutedEventArgs* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationCompletedRoutedEventArgs* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationCompletedRoutedEventArgs* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Container)(__x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationCompletedRoutedEventArgs* This,
        __x_ABI_CWindows_CUI_CXaml_CIUIElement** value);
    HRESULT (STDMETHODCALLTYPE* get_Position)(__x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationCompletedRoutedEventArgs* This,
        struct __x_ABI_CWindows_CFoundation_CPoint* value);
    HRESULT (STDMETHODCALLTYPE* get_IsInertial)(__x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationCompletedRoutedEventArgs* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* get_Cumulative)(__x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationCompletedRoutedEventArgs* This,
        struct __x_ABI_CWindows_CUI_CInput_CManipulationDelta* value);
    HRESULT (STDMETHODCALLTYPE* get_Velocities)(__x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationCompletedRoutedEventArgs* This,
        struct __x_ABI_CWindows_CUI_CInput_CManipulationVelocities* value);
    HRESULT (STDMETHODCALLTYPE* get_Handled)(__x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationCompletedRoutedEventArgs* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* put_Handled)(__x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationCompletedRoutedEventArgs* This,
        boolean value);
    HRESULT (STDMETHODCALLTYPE* get_PointerDeviceType)(__x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationCompletedRoutedEventArgs* This,
        enum __x_ABI_CWindows_CDevices_CInput_CPointerDeviceType* value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationCompletedRoutedEventArgsVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationCompletedRoutedEventArgs
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationCompletedRoutedEventArgsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationCompletedRoutedEventArgs;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationCompletedRoutedEventArgs_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationDeltaRoutedEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationDeltaRoutedEventArgs_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationDeltaRoutedEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationDeltaRoutedEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationDeltaRoutedEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationDeltaRoutedEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationDeltaRoutedEventArgs* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationDeltaRoutedEventArgs* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationDeltaRoutedEventArgs* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Container)(__x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationDeltaRoutedEventArgs* This,
        __x_ABI_CWindows_CUI_CXaml_CIUIElement** value);
    HRESULT (STDMETHODCALLTYPE* get_Position)(__x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationDeltaRoutedEventArgs* This,
        struct __x_ABI_CWindows_CFoundation_CPoint* value);
    HRESULT (STDMETHODCALLTYPE* get_IsInertial)(__x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationDeltaRoutedEventArgs* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* get_Delta)(__x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationDeltaRoutedEventArgs* This,
        struct __x_ABI_CWindows_CUI_CInput_CManipulationDelta* value);
    HRESULT (STDMETHODCALLTYPE* get_Cumulative)(__x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationDeltaRoutedEventArgs* This,
        struct __x_ABI_CWindows_CUI_CInput_CManipulationDelta* value);
    HRESULT (STDMETHODCALLTYPE* get_Velocities)(__x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationDeltaRoutedEventArgs* This,
        struct __x_ABI_CWindows_CUI_CInput_CManipulationVelocities* value);
    HRESULT (STDMETHODCALLTYPE* get_Handled)(__x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationDeltaRoutedEventArgs* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* put_Handled)(__x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationDeltaRoutedEventArgs* This,
        boolean value);
    HRESULT (STDMETHODCALLTYPE* get_PointerDeviceType)(__x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationDeltaRoutedEventArgs* This,
        enum __x_ABI_CWindows_CDevices_CInput_CPointerDeviceType* value);
    HRESULT (STDMETHODCALLTYPE* Complete)(__x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationDeltaRoutedEventArgs* This);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationDeltaRoutedEventArgsVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationDeltaRoutedEventArgs
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationDeltaRoutedEventArgsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationDeltaRoutedEventArgs;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationDeltaRoutedEventArgs_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationInertiaStartingRoutedEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationInertiaStartingRoutedEventArgs_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationInertiaStartingRoutedEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationInertiaStartingRoutedEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationInertiaStartingRoutedEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationInertiaStartingRoutedEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationInertiaStartingRoutedEventArgs* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationInertiaStartingRoutedEventArgs* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationInertiaStartingRoutedEventArgs* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Container)(__x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationInertiaStartingRoutedEventArgs* This,
        __x_ABI_CWindows_CUI_CXaml_CIUIElement** value);
    HRESULT (STDMETHODCALLTYPE* get_ExpansionBehavior)(__x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationInertiaStartingRoutedEventArgs* This,
        __x_ABI_CWindows_CUI_CXaml_CInput_CIInertiaExpansionBehavior** value);
    HRESULT (STDMETHODCALLTYPE* put_ExpansionBehavior)(__x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationInertiaStartingRoutedEventArgs* This,
        __x_ABI_CWindows_CUI_CXaml_CInput_CIInertiaExpansionBehavior* value);
    HRESULT (STDMETHODCALLTYPE* get_RotationBehavior)(__x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationInertiaStartingRoutedEventArgs* This,
        __x_ABI_CWindows_CUI_CXaml_CInput_CIInertiaRotationBehavior** value);
    HRESULT (STDMETHODCALLTYPE* put_RotationBehavior)(__x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationInertiaStartingRoutedEventArgs* This,
        __x_ABI_CWindows_CUI_CXaml_CInput_CIInertiaRotationBehavior* value);
    HRESULT (STDMETHODCALLTYPE* get_TranslationBehavior)(__x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationInertiaStartingRoutedEventArgs* This,
        __x_ABI_CWindows_CUI_CXaml_CInput_CIInertiaTranslationBehavior** value);
    HRESULT (STDMETHODCALLTYPE* put_TranslationBehavior)(__x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationInertiaStartingRoutedEventArgs* This,
        __x_ABI_CWindows_CUI_CXaml_CInput_CIInertiaTranslationBehavior* value);
    HRESULT (STDMETHODCALLTYPE* get_Handled)(__x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationInertiaStartingRoutedEventArgs* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* put_Handled)(__x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationInertiaStartingRoutedEventArgs* This,
        boolean value);
    HRESULT (STDMETHODCALLTYPE* get_PointerDeviceType)(__x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationInertiaStartingRoutedEventArgs* This,
        enum __x_ABI_CWindows_CDevices_CInput_CPointerDeviceType* value);
    HRESULT (STDMETHODCALLTYPE* get_Delta)(__x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationInertiaStartingRoutedEventArgs* This,
        struct __x_ABI_CWindows_CUI_CInput_CManipulationDelta* value);
    HRESULT (STDMETHODCALLTYPE* get_Cumulative)(__x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationInertiaStartingRoutedEventArgs* This,
        struct __x_ABI_CWindows_CUI_CInput_CManipulationDelta* value);
    HRESULT (STDMETHODCALLTYPE* get_Velocities)(__x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationInertiaStartingRoutedEventArgs* This,
        struct __x_ABI_CWindows_CUI_CInput_CManipulationVelocities* value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationInertiaStartingRoutedEventArgsVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationInertiaStartingRoutedEventArgs
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationInertiaStartingRoutedEventArgsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationInertiaStartingRoutedEventArgs;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationInertiaStartingRoutedEventArgs_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationPivot_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationPivot_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationPivotVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationPivot* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationPivot* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationPivot* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationPivot* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationPivot* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationPivot* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Center)(__x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationPivot* This,
        struct __x_ABI_CWindows_CFoundation_CPoint* value);
    HRESULT (STDMETHODCALLTYPE* put_Center)(__x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationPivot* This,
        struct __x_ABI_CWindows_CFoundation_CPoint value);
    HRESULT (STDMETHODCALLTYPE* get_Radius)(__x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationPivot* This,
        DOUBLE* value);
    HRESULT (STDMETHODCALLTYPE* put_Radius)(__x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationPivot* This,
        DOUBLE value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationPivotVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationPivot
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationPivotVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationPivot;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationPivot_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationPivotFactory_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationPivotFactory_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationPivotFactoryVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationPivotFactory* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationPivotFactory* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationPivotFactory* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationPivotFactory* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationPivotFactory* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationPivotFactory* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* CreateInstanceWithCenterAndRadius)(__x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationPivotFactory* This,
        struct __x_ABI_CWindows_CFoundation_CPoint center,
        DOUBLE radius,
        __x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationPivot** value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationPivotFactoryVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationPivotFactory
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationPivotFactoryVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationPivotFactory;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationPivotFactory_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationStartedRoutedEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationStartedRoutedEventArgs_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationStartedRoutedEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationStartedRoutedEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationStartedRoutedEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationStartedRoutedEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationStartedRoutedEventArgs* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationStartedRoutedEventArgs* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationStartedRoutedEventArgs* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Container)(__x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationStartedRoutedEventArgs* This,
        __x_ABI_CWindows_CUI_CXaml_CIUIElement** value);
    HRESULT (STDMETHODCALLTYPE* get_Position)(__x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationStartedRoutedEventArgs* This,
        struct __x_ABI_CWindows_CFoundation_CPoint* value);
    HRESULT (STDMETHODCALLTYPE* get_Handled)(__x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationStartedRoutedEventArgs* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* put_Handled)(__x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationStartedRoutedEventArgs* This,
        boolean value);
    HRESULT (STDMETHODCALLTYPE* get_PointerDeviceType)(__x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationStartedRoutedEventArgs* This,
        enum __x_ABI_CWindows_CDevices_CInput_CPointerDeviceType* value);
    HRESULT (STDMETHODCALLTYPE* get_Cumulative)(__x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationStartedRoutedEventArgs* This,
        struct __x_ABI_CWindows_CUI_CInput_CManipulationDelta* value);
    HRESULT (STDMETHODCALLTYPE* Complete)(__x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationStartedRoutedEventArgs* This);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationStartedRoutedEventArgsVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationStartedRoutedEventArgs
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationStartedRoutedEventArgsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationStartedRoutedEventArgs;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationStartedRoutedEventArgs_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationStartedRoutedEventArgsFactory_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationStartedRoutedEventArgsFactory_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationStartedRoutedEventArgsFactoryVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationStartedRoutedEventArgsFactory* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationStartedRoutedEventArgsFactory* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationStartedRoutedEventArgsFactory* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationStartedRoutedEventArgsFactory* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationStartedRoutedEventArgsFactory* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationStartedRoutedEventArgsFactory* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* CreateInstance)(__x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationStartedRoutedEventArgsFactory* This,
        IInspectable* baseInterface,
        IInspectable** innerInterface,
        __x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationStartedRoutedEventArgs** value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationStartedRoutedEventArgsFactoryVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationStartedRoutedEventArgsFactory
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationStartedRoutedEventArgsFactoryVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationStartedRoutedEventArgsFactory;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationStartedRoutedEventArgsFactory_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationStartingRoutedEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationStartingRoutedEventArgs_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationStartingRoutedEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationStartingRoutedEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationStartingRoutedEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationStartingRoutedEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationStartingRoutedEventArgs* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationStartingRoutedEventArgs* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationStartingRoutedEventArgs* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Mode)(__x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationStartingRoutedEventArgs* This,
        enum __x_ABI_CWindows_CUI_CXaml_CInput_CManipulationModes* value);
    HRESULT (STDMETHODCALLTYPE* put_Mode)(__x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationStartingRoutedEventArgs* This,
        enum __x_ABI_CWindows_CUI_CXaml_CInput_CManipulationModes value);
    HRESULT (STDMETHODCALLTYPE* get_Container)(__x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationStartingRoutedEventArgs* This,
        __x_ABI_CWindows_CUI_CXaml_CIUIElement** value);
    HRESULT (STDMETHODCALLTYPE* put_Container)(__x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationStartingRoutedEventArgs* This,
        __x_ABI_CWindows_CUI_CXaml_CIUIElement* value);
    HRESULT (STDMETHODCALLTYPE* get_Pivot)(__x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationStartingRoutedEventArgs* This,
        __x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationPivot** value);
    HRESULT (STDMETHODCALLTYPE* put_Pivot)(__x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationStartingRoutedEventArgs* This,
        __x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationPivot* value);
    HRESULT (STDMETHODCALLTYPE* get_Handled)(__x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationStartingRoutedEventArgs* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* put_Handled)(__x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationStartingRoutedEventArgs* This,
        boolean value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationStartingRoutedEventArgsVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationStartingRoutedEventArgs
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationStartingRoutedEventArgsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationStartingRoutedEventArgs;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationStartingRoutedEventArgs_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CInput_CINoFocusCandidateFoundEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CInput_CINoFocusCandidateFoundEventArgs_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CInput_CINoFocusCandidateFoundEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CInput_CINoFocusCandidateFoundEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CInput_CINoFocusCandidateFoundEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CInput_CINoFocusCandidateFoundEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CInput_CINoFocusCandidateFoundEventArgs* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CInput_CINoFocusCandidateFoundEventArgs* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CInput_CINoFocusCandidateFoundEventArgs* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Direction)(__x_ABI_CWindows_CUI_CXaml_CInput_CINoFocusCandidateFoundEventArgs* This,
        enum __x_ABI_CWindows_CUI_CXaml_CInput_CFocusNavigationDirection* value);
    HRESULT (STDMETHODCALLTYPE* get_Handled)(__x_ABI_CWindows_CUI_CXaml_CInput_CINoFocusCandidateFoundEventArgs* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* put_Handled)(__x_ABI_CWindows_CUI_CXaml_CInput_CINoFocusCandidateFoundEventArgs* This,
        boolean value);
    HRESULT (STDMETHODCALLTYPE* get_InputDevice)(__x_ABI_CWindows_CUI_CXaml_CInput_CINoFocusCandidateFoundEventArgs* This,
        enum __x_ABI_CWindows_CUI_CXaml_CInput_CFocusInputDeviceKind* value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CInput_CINoFocusCandidateFoundEventArgsVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CInput_CINoFocusCandidateFoundEventArgs
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CInput_CINoFocusCandidateFoundEventArgsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CInput_CINoFocusCandidateFoundEventArgs;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CInput_CINoFocusCandidateFoundEventArgs_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CInput_CIPointer_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CInput_CIPointer_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CInput_CIPointerVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CInput_CIPointer* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CInput_CIPointer* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CInput_CIPointer* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CInput_CIPointer* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CInput_CIPointer* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CInput_CIPointer* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_PointerId)(__x_ABI_CWindows_CUI_CXaml_CInput_CIPointer* This,
        UINT32* value);
    HRESULT (STDMETHODCALLTYPE* get_PointerDeviceType)(__x_ABI_CWindows_CUI_CXaml_CInput_CIPointer* This,
        enum __x_ABI_CWindows_CDevices_CInput_CPointerDeviceType* value);
    HRESULT (STDMETHODCALLTYPE* get_IsInContact)(__x_ABI_CWindows_CUI_CXaml_CInput_CIPointer* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* get_IsInRange)(__x_ABI_CWindows_CUI_CXaml_CInput_CIPointer* This,
        boolean* value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CInput_CIPointerVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CInput_CIPointer
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CInput_CIPointerVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CInput_CIPointer;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CInput_CIPointer_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CInput_CIPointerRoutedEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CInput_CIPointerRoutedEventArgs_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CInput_CIPointerRoutedEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CInput_CIPointerRoutedEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CInput_CIPointerRoutedEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CInput_CIPointerRoutedEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CInput_CIPointerRoutedEventArgs* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CInput_CIPointerRoutedEventArgs* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CInput_CIPointerRoutedEventArgs* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Pointer)(__x_ABI_CWindows_CUI_CXaml_CInput_CIPointerRoutedEventArgs* This,
        __x_ABI_CWindows_CUI_CXaml_CInput_CIPointer** value);
    HRESULT (STDMETHODCALLTYPE* get_KeyModifiers)(__x_ABI_CWindows_CUI_CXaml_CInput_CIPointerRoutedEventArgs* This,
        enum __x_ABI_CWindows_CSystem_CVirtualKeyModifiers* value);
    HRESULT (STDMETHODCALLTYPE* get_Handled)(__x_ABI_CWindows_CUI_CXaml_CInput_CIPointerRoutedEventArgs* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* put_Handled)(__x_ABI_CWindows_CUI_CXaml_CInput_CIPointerRoutedEventArgs* This,
        boolean value);
    HRESULT (STDMETHODCALLTYPE* GetCurrentPoint)(__x_ABI_CWindows_CUI_CXaml_CInput_CIPointerRoutedEventArgs* This,
        __x_ABI_CWindows_CUI_CXaml_CIUIElement* relativeTo,
        __x_ABI_CWindows_CUI_CInput_CIPointerPoint** result);
    HRESULT (STDMETHODCALLTYPE* GetIntermediatePoints)(__x_ABI_CWindows_CUI_CXaml_CInput_CIPointerRoutedEventArgs* This,
        __x_ABI_CWindows_CUI_CXaml_CIUIElement* relativeTo,
        __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CInput__CPointerPoint** result);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CInput_CIPointerRoutedEventArgsVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CInput_CIPointerRoutedEventArgs
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CInput_CIPointerRoutedEventArgsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CInput_CIPointerRoutedEventArgs;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CInput_CIPointerRoutedEventArgs_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CInput_CIPointerRoutedEventArgs2_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CInput_CIPointerRoutedEventArgs2_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CInput_CIPointerRoutedEventArgs2Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CInput_CIPointerRoutedEventArgs2* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CInput_CIPointerRoutedEventArgs2* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CInput_CIPointerRoutedEventArgs2* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CInput_CIPointerRoutedEventArgs2* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CInput_CIPointerRoutedEventArgs2* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CInput_CIPointerRoutedEventArgs2* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_IsGenerated)(__x_ABI_CWindows_CUI_CXaml_CInput_CIPointerRoutedEventArgs2* This,
        boolean* value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CInput_CIPointerRoutedEventArgs2Vtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CInput_CIPointerRoutedEventArgs2
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CInput_CIPointerRoutedEventArgs2Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CInput_CIPointerRoutedEventArgs2;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CInput_CIPointerRoutedEventArgs2_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CInput_CIProcessKeyboardAcceleratorEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CInput_CIProcessKeyboardAcceleratorEventArgs_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CInput_CIProcessKeyboardAcceleratorEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CInput_CIProcessKeyboardAcceleratorEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CInput_CIProcessKeyboardAcceleratorEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CInput_CIProcessKeyboardAcceleratorEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CInput_CIProcessKeyboardAcceleratorEventArgs* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CInput_CIProcessKeyboardAcceleratorEventArgs* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CInput_CIProcessKeyboardAcceleratorEventArgs* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Key)(__x_ABI_CWindows_CUI_CXaml_CInput_CIProcessKeyboardAcceleratorEventArgs* This,
        enum __x_ABI_CWindows_CSystem_CVirtualKey* value);
    HRESULT (STDMETHODCALLTYPE* get_Modifiers)(__x_ABI_CWindows_CUI_CXaml_CInput_CIProcessKeyboardAcceleratorEventArgs* This,
        enum __x_ABI_CWindows_CSystem_CVirtualKeyModifiers* value);
    HRESULT (STDMETHODCALLTYPE* get_Handled)(__x_ABI_CWindows_CUI_CXaml_CInput_CIProcessKeyboardAcceleratorEventArgs* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* put_Handled)(__x_ABI_CWindows_CUI_CXaml_CInput_CIProcessKeyboardAcceleratorEventArgs* This,
        boolean value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CInput_CIProcessKeyboardAcceleratorEventArgsVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CInput_CIProcessKeyboardAcceleratorEventArgs
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CInput_CIProcessKeyboardAcceleratorEventArgsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CInput_CIProcessKeyboardAcceleratorEventArgs;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CInput_CIProcessKeyboardAcceleratorEventArgs_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CInput_CIRightTappedRoutedEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CInput_CIRightTappedRoutedEventArgs_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CInput_CIRightTappedRoutedEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CInput_CIRightTappedRoutedEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CInput_CIRightTappedRoutedEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CInput_CIRightTappedRoutedEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CInput_CIRightTappedRoutedEventArgs* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CInput_CIRightTappedRoutedEventArgs* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CInput_CIRightTappedRoutedEventArgs* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_PointerDeviceType)(__x_ABI_CWindows_CUI_CXaml_CInput_CIRightTappedRoutedEventArgs* This,
        enum __x_ABI_CWindows_CDevices_CInput_CPointerDeviceType* value);
    HRESULT (STDMETHODCALLTYPE* get_Handled)(__x_ABI_CWindows_CUI_CXaml_CInput_CIRightTappedRoutedEventArgs* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* put_Handled)(__x_ABI_CWindows_CUI_CXaml_CInput_CIRightTappedRoutedEventArgs* This,
        boolean value);
    HRESULT (STDMETHODCALLTYPE* GetPosition)(__x_ABI_CWindows_CUI_CXaml_CInput_CIRightTappedRoutedEventArgs* This,
        __x_ABI_CWindows_CUI_CXaml_CIUIElement* relativeTo,
        struct __x_ABI_CWindows_CFoundation_CPoint* result);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CInput_CIRightTappedRoutedEventArgsVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CInput_CIRightTappedRoutedEventArgs
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CInput_CIRightTappedRoutedEventArgsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CInput_CIRightTappedRoutedEventArgs;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CInput_CIRightTappedRoutedEventArgs_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CInput_CIStandardUICommand_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CInput_CIStandardUICommand_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CInput_CIStandardUICommandVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CInput_CIStandardUICommand* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CInput_CIStandardUICommand* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CInput_CIStandardUICommand* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CInput_CIStandardUICommand* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CInput_CIStandardUICommand* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CInput_CIStandardUICommand* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Kind)(__x_ABI_CWindows_CUI_CXaml_CInput_CIStandardUICommand* This,
        enum __x_ABI_CWindows_CUI_CXaml_CInput_CStandardUICommandKind* value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CInput_CIStandardUICommandVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CInput_CIStandardUICommand
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CInput_CIStandardUICommandVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CInput_CIStandardUICommand;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CInput_CIStandardUICommand_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CInput_CIStandardUICommand2_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CInput_CIStandardUICommand2_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CInput_CIStandardUICommand2Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CInput_CIStandardUICommand2* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CInput_CIStandardUICommand2* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CInput_CIStandardUICommand2* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CInput_CIStandardUICommand2* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CInput_CIStandardUICommand2* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CInput_CIStandardUICommand2* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* put_Kind)(__x_ABI_CWindows_CUI_CXaml_CInput_CIStandardUICommand2* This,
        enum __x_ABI_CWindows_CUI_CXaml_CInput_CStandardUICommandKind value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CInput_CIStandardUICommand2Vtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CInput_CIStandardUICommand2
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CInput_CIStandardUICommand2Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CInput_CIStandardUICommand2;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CInput_CIStandardUICommand2_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CInput_CIStandardUICommandFactory_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CInput_CIStandardUICommandFactory_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CInput_CIStandardUICommandFactoryVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CInput_CIStandardUICommandFactory* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CInput_CIStandardUICommandFactory* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CInput_CIStandardUICommandFactory* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CInput_CIStandardUICommandFactory* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CInput_CIStandardUICommandFactory* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CInput_CIStandardUICommandFactory* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* CreateInstance)(__x_ABI_CWindows_CUI_CXaml_CInput_CIStandardUICommandFactory* This,
        IInspectable* baseInterface,
        IInspectable** innerInterface,
        __x_ABI_CWindows_CUI_CXaml_CInput_CIStandardUICommand** value);
    HRESULT (STDMETHODCALLTYPE* CreateInstanceWithKind)(__x_ABI_CWindows_CUI_CXaml_CInput_CIStandardUICommandFactory* This,
        enum __x_ABI_CWindows_CUI_CXaml_CInput_CStandardUICommandKind kind,
        IInspectable* baseInterface,
        IInspectable** innerInterface,
        __x_ABI_CWindows_CUI_CXaml_CInput_CIStandardUICommand** value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CInput_CIStandardUICommandFactoryVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CInput_CIStandardUICommandFactory
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CInput_CIStandardUICommandFactoryVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CInput_CIStandardUICommandFactory;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CInput_CIStandardUICommandFactory_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CInput_CIStandardUICommandStatics_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CInput_CIStandardUICommandStatics_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CInput_CIStandardUICommandStaticsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CInput_CIStandardUICommandStatics* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CInput_CIStandardUICommandStatics* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CInput_CIStandardUICommandStatics* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CInput_CIStandardUICommandStatics* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CInput_CIStandardUICommandStatics* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CInput_CIStandardUICommandStatics* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_KindProperty)(__x_ABI_CWindows_CUI_CXaml_CInput_CIStandardUICommandStatics* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CInput_CIStandardUICommandStaticsVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CInput_CIStandardUICommandStatics
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CInput_CIStandardUICommandStaticsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CInput_CIStandardUICommandStatics;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CInput_CIStandardUICommandStatics_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CInput_CITappedRoutedEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CInput_CITappedRoutedEventArgs_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CInput_CITappedRoutedEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CInput_CITappedRoutedEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CInput_CITappedRoutedEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CInput_CITappedRoutedEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CInput_CITappedRoutedEventArgs* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CInput_CITappedRoutedEventArgs* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CInput_CITappedRoutedEventArgs* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_PointerDeviceType)(__x_ABI_CWindows_CUI_CXaml_CInput_CITappedRoutedEventArgs* This,
        enum __x_ABI_CWindows_CDevices_CInput_CPointerDeviceType* value);
    HRESULT (STDMETHODCALLTYPE* get_Handled)(__x_ABI_CWindows_CUI_CXaml_CInput_CITappedRoutedEventArgs* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* put_Handled)(__x_ABI_CWindows_CUI_CXaml_CInput_CITappedRoutedEventArgs* This,
        boolean value);
    HRESULT (STDMETHODCALLTYPE* GetPosition)(__x_ABI_CWindows_CUI_CXaml_CInput_CITappedRoutedEventArgs* This,
        __x_ABI_CWindows_CUI_CXaml_CIUIElement* relativeTo,
        struct __x_ABI_CWindows_CFoundation_CPoint* result);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CInput_CITappedRoutedEventArgsVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CInput_CITappedRoutedEventArgs
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CInput_CITappedRoutedEventArgsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CInput_CITappedRoutedEventArgs;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CInput_CITappedRoutedEventArgs_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CInput_CIXamlUICommand_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CInput_CIXamlUICommand_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CInput_CIXamlUICommandVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CInput_CIXamlUICommand* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CInput_CIXamlUICommand* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CInput_CIXamlUICommand* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CInput_CIXamlUICommand* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CInput_CIXamlUICommand* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CInput_CIXamlUICommand* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Label)(__x_ABI_CWindows_CUI_CXaml_CInput_CIXamlUICommand* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* put_Label)(__x_ABI_CWindows_CUI_CXaml_CInput_CIXamlUICommand* This,
        HSTRING value);
    HRESULT (STDMETHODCALLTYPE* get_IconSource)(__x_ABI_CWindows_CUI_CXaml_CInput_CIXamlUICommand* This,
        __x_ABI_CWindows_CUI_CXaml_CControls_CIIconSource** value);
    HRESULT (STDMETHODCALLTYPE* put_IconSource)(__x_ABI_CWindows_CUI_CXaml_CInput_CIXamlUICommand* This,
        __x_ABI_CWindows_CUI_CXaml_CControls_CIIconSource* value);
    HRESULT (STDMETHODCALLTYPE* get_KeyboardAccelerators)(__x_ABI_CWindows_CUI_CXaml_CInput_CIXamlUICommand* This,
        __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CInput__CKeyboardAccelerator** value);
    HRESULT (STDMETHODCALLTYPE* get_AccessKey)(__x_ABI_CWindows_CUI_CXaml_CInput_CIXamlUICommand* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* put_AccessKey)(__x_ABI_CWindows_CUI_CXaml_CInput_CIXamlUICommand* This,
        HSTRING value);
    HRESULT (STDMETHODCALLTYPE* get_Description)(__x_ABI_CWindows_CUI_CXaml_CInput_CIXamlUICommand* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* put_Description)(__x_ABI_CWindows_CUI_CXaml_CInput_CIXamlUICommand* This,
        HSTRING value);
    HRESULT (STDMETHODCALLTYPE* get_Command)(__x_ABI_CWindows_CUI_CXaml_CInput_CIXamlUICommand* This,
        __x_ABI_CWindows_CUI_CXaml_CInput_CICommand** value);
    HRESULT (STDMETHODCALLTYPE* put_Command)(__x_ABI_CWindows_CUI_CXaml_CInput_CIXamlUICommand* This,
        __x_ABI_CWindows_CUI_CXaml_CInput_CICommand* value);
    HRESULT (STDMETHODCALLTYPE* add_ExecuteRequested)(__x_ABI_CWindows_CUI_CXaml_CInput_CIXamlUICommand* This,
        __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CInput__CXamlUICommand___x_ABI_CWindows__CUI__CXaml__CInput__CExecuteRequestedEventArgs* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_ExecuteRequested)(__x_ABI_CWindows_CUI_CXaml_CInput_CIXamlUICommand* This,
        EventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* add_CanExecuteRequested)(__x_ABI_CWindows_CUI_CXaml_CInput_CIXamlUICommand* This,
        __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CInput__CXamlUICommand___x_ABI_CWindows__CUI__CXaml__CInput__CCanExecuteRequestedEventArgs* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_CanExecuteRequested)(__x_ABI_CWindows_CUI_CXaml_CInput_CIXamlUICommand* This,
        EventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* NotifyCanExecuteChanged)(__x_ABI_CWindows_CUI_CXaml_CInput_CIXamlUICommand* This);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CInput_CIXamlUICommandVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CInput_CIXamlUICommand
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CInput_CIXamlUICommandVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CInput_CIXamlUICommand;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CInput_CIXamlUICommand_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CInput_CIXamlUICommandFactory_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CInput_CIXamlUICommandFactory_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CInput_CIXamlUICommandFactoryVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CInput_CIXamlUICommandFactory* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CInput_CIXamlUICommandFactory* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CInput_CIXamlUICommandFactory* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CInput_CIXamlUICommandFactory* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CInput_CIXamlUICommandFactory* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CInput_CIXamlUICommandFactory* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* CreateInstance)(__x_ABI_CWindows_CUI_CXaml_CInput_CIXamlUICommandFactory* This,
        IInspectable* baseInterface,
        IInspectable** innerInterface,
        __x_ABI_CWindows_CUI_CXaml_CInput_CIXamlUICommand** value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CInput_CIXamlUICommandFactoryVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CInput_CIXamlUICommandFactory
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CInput_CIXamlUICommandFactoryVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CInput_CIXamlUICommandFactory;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CInput_CIXamlUICommandFactory_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CInput_CIXamlUICommandStatics_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CInput_CIXamlUICommandStatics_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CInput_CIXamlUICommandStaticsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CInput_CIXamlUICommandStatics* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CInput_CIXamlUICommandStatics* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CInput_CIXamlUICommandStatics* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CInput_CIXamlUICommandStatics* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CInput_CIXamlUICommandStatics* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CInput_CIXamlUICommandStatics* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_LabelProperty)(__x_ABI_CWindows_CUI_CXaml_CInput_CIXamlUICommandStatics* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** value);
    HRESULT (STDMETHODCALLTYPE* get_IconSourceProperty)(__x_ABI_CWindows_CUI_CXaml_CInput_CIXamlUICommandStatics* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** value);
    HRESULT (STDMETHODCALLTYPE* get_KeyboardAcceleratorsProperty)(__x_ABI_CWindows_CUI_CXaml_CInput_CIXamlUICommandStatics* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** value);
    HRESULT (STDMETHODCALLTYPE* get_AccessKeyProperty)(__x_ABI_CWindows_CUI_CXaml_CInput_CIXamlUICommandStatics* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** value);
    HRESULT (STDMETHODCALLTYPE* get_DescriptionProperty)(__x_ABI_CWindows_CUI_CXaml_CInput_CIXamlUICommandStatics* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** value);
    HRESULT (STDMETHODCALLTYPE* get_CommandProperty)(__x_ABI_CWindows_CUI_CXaml_CInput_CIXamlUICommandStatics* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CInput_CIXamlUICommandStaticsVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CInput_CIXamlUICommandStatics
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CInput_CIXamlUICommandStaticsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CInput_CIXamlUICommandStatics;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CInput_CIXamlUICommandStatics_INTERFACE_DEFINED__) */
    

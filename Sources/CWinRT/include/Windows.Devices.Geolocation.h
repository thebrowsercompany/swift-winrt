// WARNING: Please don't edit this file. It was generated by Swift/WinRT v0.0.1

#pragma once
// Header files for imported files
#include <inspectable.h>
#include <EventToken.h>
#include <windowscontracts.h>
#include "Windows.Foundation.h"
// Importing Collections header
#include "Windows.Foundation.Collections.h"

/* Forward Declarations */
#ifndef ____x_ABI_CWindows_CDevices_CGeolocation_CICivicAddress_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CGeolocation_CICivicAddress_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CDevices_CGeolocation_CICivicAddress __x_ABI_CWindows_CDevices_CGeolocation_CICivicAddress;

#endif // ____x_ABI_CWindows_CDevices_CGeolocation_CICivicAddress_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CGeolocation_CIGeoboundingBox_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CGeolocation_CIGeoboundingBox_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CDevices_CGeolocation_CIGeoboundingBox __x_ABI_CWindows_CDevices_CGeolocation_CIGeoboundingBox;

#endif // ____x_ABI_CWindows_CDevices_CGeolocation_CIGeoboundingBox_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CGeolocation_CIGeoboundingBoxFactory_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CGeolocation_CIGeoboundingBoxFactory_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CDevices_CGeolocation_CIGeoboundingBoxFactory __x_ABI_CWindows_CDevices_CGeolocation_CIGeoboundingBoxFactory;

#endif // ____x_ABI_CWindows_CDevices_CGeolocation_CIGeoboundingBoxFactory_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CGeolocation_CIGeoboundingBoxStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CGeolocation_CIGeoboundingBoxStatics_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CDevices_CGeolocation_CIGeoboundingBoxStatics __x_ABI_CWindows_CDevices_CGeolocation_CIGeoboundingBoxStatics;

#endif // ____x_ABI_CWindows_CDevices_CGeolocation_CIGeoboundingBoxStatics_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CGeolocation_CIGeocircle_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CGeolocation_CIGeocircle_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CDevices_CGeolocation_CIGeocircle __x_ABI_CWindows_CDevices_CGeolocation_CIGeocircle;

#endif // ____x_ABI_CWindows_CDevices_CGeolocation_CIGeocircle_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CGeolocation_CIGeocircleFactory_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CGeolocation_CIGeocircleFactory_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CDevices_CGeolocation_CIGeocircleFactory __x_ABI_CWindows_CDevices_CGeolocation_CIGeocircleFactory;

#endif // ____x_ABI_CWindows_CDevices_CGeolocation_CIGeocircleFactory_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CGeolocation_CIGeocoordinate_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CGeolocation_CIGeocoordinate_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CDevices_CGeolocation_CIGeocoordinate __x_ABI_CWindows_CDevices_CGeolocation_CIGeocoordinate;

#endif // ____x_ABI_CWindows_CDevices_CGeolocation_CIGeocoordinate_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CGeolocation_CIGeocoordinateSatelliteData_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CGeolocation_CIGeocoordinateSatelliteData_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CDevices_CGeolocation_CIGeocoordinateSatelliteData __x_ABI_CWindows_CDevices_CGeolocation_CIGeocoordinateSatelliteData;

#endif // ____x_ABI_CWindows_CDevices_CGeolocation_CIGeocoordinateSatelliteData_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CGeolocation_CIGeocoordinateWithPoint_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CGeolocation_CIGeocoordinateWithPoint_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CDevices_CGeolocation_CIGeocoordinateWithPoint __x_ABI_CWindows_CDevices_CGeolocation_CIGeocoordinateWithPoint;

#endif // ____x_ABI_CWindows_CDevices_CGeolocation_CIGeocoordinateWithPoint_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CGeolocation_CIGeocoordinateWithPositionData_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CGeolocation_CIGeocoordinateWithPositionData_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CDevices_CGeolocation_CIGeocoordinateWithPositionData __x_ABI_CWindows_CDevices_CGeolocation_CIGeocoordinateWithPositionData;

#endif // ____x_ABI_CWindows_CDevices_CGeolocation_CIGeocoordinateWithPositionData_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CGeolocation_CIGeocoordinateWithPositionSourceTimestamp_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CGeolocation_CIGeocoordinateWithPositionSourceTimestamp_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CDevices_CGeolocation_CIGeocoordinateWithPositionSourceTimestamp __x_ABI_CWindows_CDevices_CGeolocation_CIGeocoordinateWithPositionSourceTimestamp;

#endif // ____x_ABI_CWindows_CDevices_CGeolocation_CIGeocoordinateWithPositionSourceTimestamp_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CGeolocation_CIGeolocator_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CGeolocation_CIGeolocator_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CDevices_CGeolocation_CIGeolocator __x_ABI_CWindows_CDevices_CGeolocation_CIGeolocator;

#endif // ____x_ABI_CWindows_CDevices_CGeolocation_CIGeolocator_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CGeolocation_CIGeolocator2_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CGeolocation_CIGeolocator2_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CDevices_CGeolocation_CIGeolocator2 __x_ABI_CWindows_CDevices_CGeolocation_CIGeolocator2;

#endif // ____x_ABI_CWindows_CDevices_CGeolocation_CIGeolocator2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CGeolocation_CIGeolocatorStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CGeolocation_CIGeolocatorStatics_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CDevices_CGeolocation_CIGeolocatorStatics __x_ABI_CWindows_CDevices_CGeolocation_CIGeolocatorStatics;

#endif // ____x_ABI_CWindows_CDevices_CGeolocation_CIGeolocatorStatics_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CGeolocation_CIGeolocatorStatics2_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CGeolocation_CIGeolocatorStatics2_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CDevices_CGeolocation_CIGeolocatorStatics2 __x_ABI_CWindows_CDevices_CGeolocation_CIGeolocatorStatics2;

#endif // ____x_ABI_CWindows_CDevices_CGeolocation_CIGeolocatorStatics2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CGeolocation_CIGeolocatorWithScalarAccuracy_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CGeolocation_CIGeolocatorWithScalarAccuracy_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CDevices_CGeolocation_CIGeolocatorWithScalarAccuracy __x_ABI_CWindows_CDevices_CGeolocation_CIGeolocatorWithScalarAccuracy;

#endif // ____x_ABI_CWindows_CDevices_CGeolocation_CIGeolocatorWithScalarAccuracy_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CGeolocation_CIGeopath_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CGeolocation_CIGeopath_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CDevices_CGeolocation_CIGeopath __x_ABI_CWindows_CDevices_CGeolocation_CIGeopath;

#endif // ____x_ABI_CWindows_CDevices_CGeolocation_CIGeopath_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CGeolocation_CIGeopathFactory_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CGeolocation_CIGeopathFactory_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CDevices_CGeolocation_CIGeopathFactory __x_ABI_CWindows_CDevices_CGeolocation_CIGeopathFactory;

#endif // ____x_ABI_CWindows_CDevices_CGeolocation_CIGeopathFactory_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CGeolocation_CIGeopoint_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CGeolocation_CIGeopoint_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CDevices_CGeolocation_CIGeopoint __x_ABI_CWindows_CDevices_CGeolocation_CIGeopoint;

#endif // ____x_ABI_CWindows_CDevices_CGeolocation_CIGeopoint_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CGeolocation_CIGeopointFactory_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CGeolocation_CIGeopointFactory_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CDevices_CGeolocation_CIGeopointFactory __x_ABI_CWindows_CDevices_CGeolocation_CIGeopointFactory;

#endif // ____x_ABI_CWindows_CDevices_CGeolocation_CIGeopointFactory_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CGeolocation_CIGeoposition_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CGeolocation_CIGeoposition_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CDevices_CGeolocation_CIGeoposition __x_ABI_CWindows_CDevices_CGeolocation_CIGeoposition;

#endif // ____x_ABI_CWindows_CDevices_CGeolocation_CIGeoposition_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CGeolocation_CIGeoposition2_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CGeolocation_CIGeoposition2_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CDevices_CGeolocation_CIGeoposition2 __x_ABI_CWindows_CDevices_CGeolocation_CIGeoposition2;

#endif // ____x_ABI_CWindows_CDevices_CGeolocation_CIGeoposition2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CGeolocation_CIGeoshape_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CGeolocation_CIGeoshape_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CDevices_CGeolocation_CIGeoshape __x_ABI_CWindows_CDevices_CGeolocation_CIGeoshape;

#endif // ____x_ABI_CWindows_CDevices_CGeolocation_CIGeoshape_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CGeolocation_CIGeovisit_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CGeolocation_CIGeovisit_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CDevices_CGeolocation_CIGeovisit __x_ABI_CWindows_CDevices_CGeolocation_CIGeovisit;

#endif // ____x_ABI_CWindows_CDevices_CGeolocation_CIGeovisit_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CGeolocation_CIGeovisitMonitor_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CGeolocation_CIGeovisitMonitor_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CDevices_CGeolocation_CIGeovisitMonitor __x_ABI_CWindows_CDevices_CGeolocation_CIGeovisitMonitor;

#endif // ____x_ABI_CWindows_CDevices_CGeolocation_CIGeovisitMonitor_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CGeolocation_CIGeovisitMonitorStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CGeolocation_CIGeovisitMonitorStatics_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CDevices_CGeolocation_CIGeovisitMonitorStatics __x_ABI_CWindows_CDevices_CGeolocation_CIGeovisitMonitorStatics;

#endif // ____x_ABI_CWindows_CDevices_CGeolocation_CIGeovisitMonitorStatics_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CGeolocation_CIGeovisitStateChangedEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CGeolocation_CIGeovisitStateChangedEventArgs_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CDevices_CGeolocation_CIGeovisitStateChangedEventArgs __x_ABI_CWindows_CDevices_CGeolocation_CIGeovisitStateChangedEventArgs;

#endif // ____x_ABI_CWindows_CDevices_CGeolocation_CIGeovisitStateChangedEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CGeolocation_CIGeovisitTriggerDetails_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CGeolocation_CIGeovisitTriggerDetails_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CDevices_CGeolocation_CIGeovisitTriggerDetails __x_ABI_CWindows_CDevices_CGeolocation_CIGeovisitTriggerDetails;

#endif // ____x_ABI_CWindows_CDevices_CGeolocation_CIGeovisitTriggerDetails_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CGeolocation_CIPositionChangedEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CGeolocation_CIPositionChangedEventArgs_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CDevices_CGeolocation_CIPositionChangedEventArgs __x_ABI_CWindows_CDevices_CGeolocation_CIPositionChangedEventArgs;

#endif // ____x_ABI_CWindows_CDevices_CGeolocation_CIPositionChangedEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CGeolocation_CIStatusChangedEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CGeolocation_CIStatusChangedEventArgs_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CDevices_CGeolocation_CIStatusChangedEventArgs __x_ABI_CWindows_CDevices_CGeolocation_CIStatusChangedEventArgs;

#endif // ____x_ABI_CWindows_CDevices_CGeolocation_CIStatusChangedEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CGeolocation_CIVenueData_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CGeolocation_CIVenueData_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CDevices_CGeolocation_CIVenueData __x_ABI_CWindows_CDevices_CGeolocation_CIVenueData;

#endif // ____x_ABI_CWindows_CDevices_CGeolocation_CIVenueData_FWD_DEFINED__

// Parameterized interface forward declarations (C)

// Collection interface definitions

typedef enum __x_ABI_CWindows_CDevices_CGeolocation_CGeolocationAccessStatus __x_ABI_CWindows_CDevices_CGeolocation_CGeolocationAccessStatus;

typedef interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CGeolocation__CGeolocationAccessStatus __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CGeolocation__CGeolocationAccessStatus;

#if !defined(____x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CGeolocation__CGeolocationAccessStatus_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CGeolocation__CGeolocationAccessStatus_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CGeolocation__CGeolocationAccessStatus __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CGeolocation__CGeolocationAccessStatus;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CGeolocation__CGeolocationAccessStatus;

    typedef struct __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CGeolocation__CGeolocationAccessStatusVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CGeolocation__CGeolocationAccessStatus* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CGeolocation__CGeolocationAccessStatus* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CGeolocation__CGeolocationAccessStatus* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CGeolocation__CGeolocationAccessStatus* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CGeolocation__CGeolocationAccessStatus* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CGeolocation__CGeolocationAccessStatus* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* put_Completed)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CGeolocation__CGeolocationAccessStatus* This,
        __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CGeolocation__CGeolocationAccessStatus* handler);
    HRESULT (STDMETHODCALLTYPE* get_Completed)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CGeolocation__CGeolocationAccessStatus* This,
        __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CGeolocation__CGeolocationAccessStatus** result);
    HRESULT (STDMETHODCALLTYPE* GetResults)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CGeolocation__CGeolocationAccessStatus* This,
        enum __x_ABI_CWindows_CDevices_CGeolocation_CGeolocationAccessStatus* result);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CGeolocation__CGeolocationAccessStatusVtbl;

    interface __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CGeolocation__CGeolocationAccessStatus
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CGeolocation__CGeolocationAccessStatusVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CGeolocation__CGeolocationAccessStatus_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CGeolocation__CGeolocationAccessStatus_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CGeolocation__CGeolocationAccessStatus_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CGeolocation__CGeolocationAccessStatus __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CGeolocation__CGeolocationAccessStatus;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CGeolocation__CGeolocationAccessStatus;

    typedef struct __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CGeolocation__CGeolocationAccessStatusVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CGeolocation__CGeolocationAccessStatus* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CGeolocation__CGeolocationAccessStatus* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CGeolocation__CGeolocationAccessStatus* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CGeolocation__CGeolocationAccessStatus* This,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CGeolocation__CGeolocationAccessStatus* asyncInfo,
        enum __x_ABI_CWindows_CFoundation_CAsyncStatus asyncStatus);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CGeolocation__CGeolocationAccessStatusVtbl;

    interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CGeolocation__CGeolocationAccessStatus
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CGeolocation__CGeolocationAccessStatusVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CGeolocation__CGeolocationAccessStatus_INTERFACE_DEFINED__
    
typedef interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CGeolocation__CGeoposition __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CGeolocation__CGeoposition;

#if !defined(____x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CGeolocation__CGeoposition_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CGeolocation__CGeoposition_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CGeolocation__CGeoposition __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CGeolocation__CGeoposition;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CGeolocation__CGeoposition;

    typedef struct __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CGeolocation__CGeopositionVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CGeolocation__CGeoposition* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CGeolocation__CGeoposition* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CGeolocation__CGeoposition* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CGeolocation__CGeoposition* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CGeolocation__CGeoposition* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CGeolocation__CGeoposition* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* put_Completed)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CGeolocation__CGeoposition* This,
        __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CGeolocation__CGeoposition* handler);
    HRESULT (STDMETHODCALLTYPE* get_Completed)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CGeolocation__CGeoposition* This,
        __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CGeolocation__CGeoposition** result);
    HRESULT (STDMETHODCALLTYPE* GetResults)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CGeolocation__CGeoposition* This,
        __x_ABI_CWindows_CDevices_CGeolocation_CIGeoposition** result);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CGeolocation__CGeopositionVtbl;

    interface __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CGeolocation__CGeoposition
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CGeolocation__CGeopositionVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CGeolocation__CGeoposition_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CGeolocation__CGeoposition_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CGeolocation__CGeoposition_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CGeolocation__CGeoposition __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CGeolocation__CGeoposition;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CGeolocation__CGeoposition;

    typedef struct __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CGeolocation__CGeopositionVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CGeolocation__CGeoposition* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CGeolocation__CGeoposition* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CGeolocation__CGeoposition* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CGeolocation__CGeoposition* This,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CGeolocation__CGeoposition* asyncInfo,
        enum __x_ABI_CWindows_CFoundation_CAsyncStatus asyncStatus);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CGeolocation__CGeopositionVtbl;

    interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CGeolocation__CGeoposition
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CGeolocation__CGeopositionVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CGeolocation__CGeoposition_INTERFACE_DEFINED__
    
typedef interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CGeolocation__CGeovisit __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CGeolocation__CGeovisit;

#if !defined(____x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CGeolocation__CGeovisit_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CGeolocation__CGeovisit_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CGeolocation__CGeovisit __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CGeolocation__CGeovisit;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CGeolocation__CGeovisit;

    typedef struct __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CGeolocation__CGeovisitVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CGeolocation__CGeovisit* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CGeolocation__CGeovisit* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CGeolocation__CGeovisit* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CGeolocation__CGeovisit* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CGeolocation__CGeovisit* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CGeolocation__CGeovisit* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* put_Completed)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CGeolocation__CGeovisit* This,
        __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CGeolocation__CGeovisit* handler);
    HRESULT (STDMETHODCALLTYPE* get_Completed)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CGeolocation__CGeovisit* This,
        __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CGeolocation__CGeovisit** result);
    HRESULT (STDMETHODCALLTYPE* GetResults)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CGeolocation__CGeovisit* This,
        __x_ABI_CWindows_CDevices_CGeolocation_CIGeovisit** result);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CGeolocation__CGeovisitVtbl;

    interface __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CGeolocation__CGeovisit
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CGeolocation__CGeovisitVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CGeolocation__CGeovisit_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CGeolocation__CGeovisit_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CGeolocation__CGeovisit_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CGeolocation__CGeovisit __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CGeolocation__CGeovisit;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CGeolocation__CGeovisit;

    typedef struct __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CGeolocation__CGeovisitVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CGeolocation__CGeovisit* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CGeolocation__CGeovisit* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CGeolocation__CGeovisit* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CGeolocation__CGeovisit* This,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CGeolocation__CGeovisit* asyncInfo,
        enum __x_ABI_CWindows_CFoundation_CAsyncStatus asyncStatus);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CGeolocation__CGeovisitVtbl;

    interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CGeolocation__CGeovisit
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CGeolocation__CGeovisitVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CGeolocation__CGeovisit_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CGeolocation__CGeoposition_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CGeolocation__CGeoposition_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CGeolocation__CGeoposition __x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CGeolocation__CGeoposition;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CGeolocation__CGeoposition;

    typedef struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CGeolocation__CGeopositionVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CGeolocation__CGeoposition* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CGeolocation__CGeoposition* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CGeolocation__CGeoposition* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CGeolocation__CGeoposition* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CGeolocation__CGeoposition* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CGeolocation__CGeoposition* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Current)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CGeolocation__CGeoposition* This,
        __x_ABI_CWindows_CDevices_CGeolocation_CIGeoposition** result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CGeolocation__CGeoposition* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CGeolocation__CGeoposition* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CGeolocation__CGeoposition* This,
        UINT32 itemsLength,
        __x_ABI_CWindows_CDevices_CGeolocation_CIGeoposition** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CGeolocation__CGeopositionVtbl;

    interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CGeolocation__CGeoposition
    {
        CONST_VTBL struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CGeolocation__CGeopositionVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CGeolocation__CGeoposition_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CGeolocation__CGeoposition_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CGeolocation__CGeoposition_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CGeolocation__CGeoposition __x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CGeolocation__CGeoposition;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CGeolocation__CGeoposition;

    typedef struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CGeolocation__CGeopositionVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CGeolocation__CGeoposition* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CGeolocation__CGeoposition* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CGeolocation__CGeoposition* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CGeolocation__CGeoposition* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CGeolocation__CGeoposition* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CGeolocation__CGeoposition* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* First)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CGeolocation__CGeoposition* This,
        __x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CGeolocation__CGeoposition** result);

        END_INTERFACE
    } __x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CGeolocation__CGeopositionVtbl;

    interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CGeolocation__CGeoposition
    {
        CONST_VTBL struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CGeolocation__CGeopositionVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CGeolocation__CGeoposition_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CGeolocation__CGeoposition_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CGeolocation__CGeoposition_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CGeolocation__CGeoposition __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CGeolocation__CGeoposition;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CGeolocation__CGeoposition;

    typedef struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CGeolocation__CGeopositionVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CGeolocation__CGeoposition* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CGeolocation__CGeoposition* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CGeolocation__CGeoposition* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CGeolocation__CGeoposition* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CGeolocation__CGeoposition* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CGeolocation__CGeoposition* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CGeolocation__CGeoposition* This,
        UINT32 index,
        __x_ABI_CWindows_CDevices_CGeolocation_CIGeoposition** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CGeolocation__CGeoposition* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CGeolocation__CGeoposition* This,
        __x_ABI_CWindows_CDevices_CGeolocation_CIGeoposition* value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CGeolocation__CGeoposition* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        __x_ABI_CWindows_CDevices_CGeolocation_CIGeoposition** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CGeolocation__CGeopositionVtbl;

    interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CGeolocation__CGeoposition
    {
        CONST_VTBL struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CGeolocation__CGeopositionVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CGeolocation__CGeoposition_INTERFACE_DEFINED__
    
typedef interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CGeolocation__CGeoposition __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CGeolocation__CGeoposition;

#if !defined(____x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CGeolocation__CGeoposition_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CGeolocation__CGeoposition_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CGeolocation__CGeoposition __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CGeolocation__CGeoposition;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CGeolocation__CGeoposition;

    typedef struct __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CGeolocation__CGeopositionVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CGeolocation__CGeoposition* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CGeolocation__CGeoposition* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CGeolocation__CGeoposition* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CGeolocation__CGeoposition* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CGeolocation__CGeoposition* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CGeolocation__CGeoposition* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* put_Completed)(__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CGeolocation__CGeoposition* This,
        __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CGeolocation__CGeoposition* handler);
    HRESULT (STDMETHODCALLTYPE* get_Completed)(__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CGeolocation__CGeoposition* This,
        __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CGeolocation__CGeoposition** result);
    HRESULT (STDMETHODCALLTYPE* GetResults)(__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CGeolocation__CGeoposition* This,
        __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CGeolocation__CGeoposition** result);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CGeolocation__CGeopositionVtbl;

    interface __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CGeolocation__CGeoposition
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CGeolocation__CGeopositionVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CGeolocation__CGeoposition_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CGeolocation__CGeoposition_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CGeolocation__CGeoposition_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CGeolocation__CGeoposition __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CGeolocation__CGeoposition;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CGeolocation__CGeoposition;

    typedef struct __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CGeolocation__CGeopositionVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CGeolocation__CGeoposition* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CGeolocation__CGeoposition* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CGeolocation__CGeoposition* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CGeolocation__CGeoposition* This,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CGeolocation__CGeoposition* asyncInfo,
        enum __x_ABI_CWindows_CFoundation_CAsyncStatus asyncStatus);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CGeolocation__CGeopositionVtbl;

    interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CGeolocation__CGeoposition
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CGeolocation__CGeopositionVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CGeolocation__CGeoposition_INTERFACE_DEFINED__
    
typedef struct __x_ABI_CWindows_CDevices_CGeolocation_CBasicGeoposition __x_ABI_CWindows_CDevices_CGeolocation_CBasicGeoposition;

#if !defined(____x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CGeolocation__CBasicGeoposition_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CGeolocation__CBasicGeoposition_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CGeolocation__CBasicGeoposition __x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CGeolocation__CBasicGeoposition;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CGeolocation__CBasicGeoposition;

    typedef struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CGeolocation__CBasicGeopositionVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CGeolocation__CBasicGeoposition* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CGeolocation__CBasicGeoposition* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CGeolocation__CBasicGeoposition* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CGeolocation__CBasicGeoposition* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CGeolocation__CBasicGeoposition* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CGeolocation__CBasicGeoposition* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Current)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CGeolocation__CBasicGeoposition* This,
        struct __x_ABI_CWindows_CDevices_CGeolocation_CBasicGeoposition* result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CGeolocation__CBasicGeoposition* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CGeolocation__CBasicGeoposition* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CGeolocation__CBasicGeoposition* This,
        UINT32 itemsLength,
        struct __x_ABI_CWindows_CDevices_CGeolocation_CBasicGeoposition* items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CGeolocation__CBasicGeopositionVtbl;

    interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CGeolocation__CBasicGeoposition
    {
        CONST_VTBL struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CGeolocation__CBasicGeopositionVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CGeolocation__CBasicGeoposition_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CGeolocation__CBasicGeoposition_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CGeolocation__CBasicGeoposition_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CGeolocation__CBasicGeoposition __x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CGeolocation__CBasicGeoposition;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CGeolocation__CBasicGeoposition;

    typedef struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CGeolocation__CBasicGeopositionVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CGeolocation__CBasicGeoposition* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CGeolocation__CBasicGeoposition* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CGeolocation__CBasicGeoposition* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CGeolocation__CBasicGeoposition* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CGeolocation__CBasicGeoposition* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CGeolocation__CBasicGeoposition* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* First)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CGeolocation__CBasicGeoposition* This,
        __x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CGeolocation__CBasicGeoposition** result);

        END_INTERFACE
    } __x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CGeolocation__CBasicGeopositionVtbl;

    interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CGeolocation__CBasicGeoposition
    {
        CONST_VTBL struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CGeolocation__CBasicGeopositionVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CGeolocation__CBasicGeoposition_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CGeolocation__CGeovisit_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CGeolocation__CGeovisit_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CGeolocation__CGeovisit __x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CGeolocation__CGeovisit;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CGeolocation__CGeovisit;

    typedef struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CGeolocation__CGeovisitVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CGeolocation__CGeovisit* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CGeolocation__CGeovisit* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CGeolocation__CGeovisit* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CGeolocation__CGeovisit* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CGeolocation__CGeovisit* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CGeolocation__CGeovisit* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Current)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CGeolocation__CGeovisit* This,
        __x_ABI_CWindows_CDevices_CGeolocation_CIGeovisit** result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CGeolocation__CGeovisit* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CGeolocation__CGeovisit* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CGeolocation__CGeovisit* This,
        UINT32 itemsLength,
        __x_ABI_CWindows_CDevices_CGeolocation_CIGeovisit** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CGeolocation__CGeovisitVtbl;

    interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CGeolocation__CGeovisit
    {
        CONST_VTBL struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CGeolocation__CGeovisitVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CGeolocation__CGeovisit_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CGeolocation__CGeovisit_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CGeolocation__CGeovisit_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CGeolocation__CGeovisit __x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CGeolocation__CGeovisit;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CGeolocation__CGeovisit;

    typedef struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CGeolocation__CGeovisitVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CGeolocation__CGeovisit* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CGeolocation__CGeovisit* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CGeolocation__CGeovisit* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CGeolocation__CGeovisit* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CGeolocation__CGeovisit* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CGeolocation__CGeovisit* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* First)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CGeolocation__CGeovisit* This,
        __x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CGeolocation__CGeovisit** result);

        END_INTERFACE
    } __x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CGeolocation__CGeovisitVtbl;

    interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CGeolocation__CGeovisit
    {
        CONST_VTBL struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CGeolocation__CGeovisitVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CGeolocation__CGeovisit_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CGeolocation__CBasicGeoposition_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CGeolocation__CBasicGeoposition_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CGeolocation__CBasicGeoposition __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CGeolocation__CBasicGeoposition;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CGeolocation__CBasicGeoposition;

    typedef struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CGeolocation__CBasicGeopositionVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CGeolocation__CBasicGeoposition* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CGeolocation__CBasicGeoposition* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CGeolocation__CBasicGeoposition* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CGeolocation__CBasicGeoposition* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CGeolocation__CBasicGeoposition* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CGeolocation__CBasicGeoposition* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CGeolocation__CBasicGeoposition* This,
        UINT32 index,
        struct __x_ABI_CWindows_CDevices_CGeolocation_CBasicGeoposition* result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CGeolocation__CBasicGeoposition* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CGeolocation__CBasicGeoposition* This,
        struct __x_ABI_CWindows_CDevices_CGeolocation_CBasicGeoposition value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CGeolocation__CBasicGeoposition* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        struct __x_ABI_CWindows_CDevices_CGeolocation_CBasicGeoposition* items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CGeolocation__CBasicGeopositionVtbl;

    interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CGeolocation__CBasicGeoposition
    {
        CONST_VTBL struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CGeolocation__CBasicGeopositionVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CGeolocation__CBasicGeoposition_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CGeolocation__CGeovisit_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CGeolocation__CGeovisit_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CGeolocation__CGeovisit __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CGeolocation__CGeovisit;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CGeolocation__CGeovisit;

    typedef struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CGeolocation__CGeovisitVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CGeolocation__CGeovisit* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CGeolocation__CGeovisit* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CGeolocation__CGeovisit* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CGeolocation__CGeovisit* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CGeolocation__CGeovisit* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CGeolocation__CGeovisit* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CGeolocation__CGeovisit* This,
        UINT32 index,
        __x_ABI_CWindows_CDevices_CGeolocation_CIGeovisit** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CGeolocation__CGeovisit* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CGeolocation__CGeovisit* This,
        __x_ABI_CWindows_CDevices_CGeolocation_CIGeovisit* value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CGeolocation__CGeovisit* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        __x_ABI_CWindows_CDevices_CGeolocation_CIGeovisit** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CGeolocation__CGeovisitVtbl;

    interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CGeolocation__CGeovisit
    {
        CONST_VTBL struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CGeolocation__CGeovisitVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CGeolocation__CGeovisit_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIReference_1_double_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIReference_1_double_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIReference_1_double __x_ABI_C__FIReference_1_double;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIReference_1_double;

    typedef struct __x_ABI_C__FIReference_1_doubleVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIReference_1_double* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIReference_1_double* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIReference_1_double* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIReference_1_double* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIReference_1_double* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIReference_1_double* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Value)(__x_ABI_C__FIReference_1_double* This,
        DOUBLE* result);

        END_INTERFACE
    } __x_ABI_C__FIReference_1_doubleVtbl;

    interface __x_ABI_C__FIReference_1_double
    {
        CONST_VTBL struct __x_ABI_C__FIReference_1_doubleVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIReference_1_double_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIReference_1_UINT32_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIReference_1_UINT32_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIReference_1_UINT32 __x_ABI_C__FIReference_1_UINT32;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIReference_1_UINT32;

    typedef struct __x_ABI_C__FIReference_1_UINT32Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIReference_1_UINT32* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIReference_1_UINT32* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIReference_1_UINT32* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIReference_1_UINT32* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIReference_1_UINT32* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIReference_1_UINT32* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Value)(__x_ABI_C__FIReference_1_UINT32* This,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIReference_1_UINT32Vtbl;

    interface __x_ABI_C__FIReference_1_UINT32
    {
        CONST_VTBL struct __x_ABI_C__FIReference_1_UINT32Vtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIReference_1_UINT32_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIReference_1___x_ABI_CWindows__CDevices__CGeolocation__CBasicGeoposition_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIReference_1___x_ABI_CWindows__CDevices__CGeolocation__CBasicGeoposition_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIReference_1___x_ABI_CWindows__CDevices__CGeolocation__CBasicGeoposition __x_ABI_C__FIReference_1___x_ABI_CWindows__CDevices__CGeolocation__CBasicGeoposition;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIReference_1___x_ABI_CWindows__CDevices__CGeolocation__CBasicGeoposition;

    typedef struct __x_ABI_C__FIReference_1___x_ABI_CWindows__CDevices__CGeolocation__CBasicGeopositionVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIReference_1___x_ABI_CWindows__CDevices__CGeolocation__CBasicGeoposition* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIReference_1___x_ABI_CWindows__CDevices__CGeolocation__CBasicGeoposition* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIReference_1___x_ABI_CWindows__CDevices__CGeolocation__CBasicGeoposition* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIReference_1___x_ABI_CWindows__CDevices__CGeolocation__CBasicGeoposition* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIReference_1___x_ABI_CWindows__CDevices__CGeolocation__CBasicGeoposition* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIReference_1___x_ABI_CWindows__CDevices__CGeolocation__CBasicGeoposition* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Value)(__x_ABI_C__FIReference_1___x_ABI_CWindows__CDevices__CGeolocation__CBasicGeoposition* This,
        struct __x_ABI_CWindows_CDevices_CGeolocation_CBasicGeoposition* result);

        END_INTERFACE
    } __x_ABI_C__FIReference_1___x_ABI_CWindows__CDevices__CGeolocation__CBasicGeopositionVtbl;

    interface __x_ABI_C__FIReference_1___x_ABI_CWindows__CDevices__CGeolocation__CBasicGeoposition
    {
        CONST_VTBL struct __x_ABI_C__FIReference_1___x_ABI_CWindows__CDevices__CGeolocation__CBasicGeopositionVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIReference_1___x_ABI_CWindows__CDevices__CGeolocation__CBasicGeoposition_INTERFACE_DEFINED__
    
typedef struct __x_ABI_CWindows_CFoundation_CDateTime __x_ABI_CWindows_CFoundation_CDateTime;

#if !defined(____x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CDateTime_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CDateTime_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CDateTime __x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CDateTime;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CDateTime;

    typedef struct __x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CDateTimeVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CDateTime* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CDateTime* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CDateTime* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CDateTime* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CDateTime* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CDateTime* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Value)(__x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CDateTime* This,
        struct __x_ABI_CWindows_CFoundation_CDateTime* result);

        END_INTERFACE
    } __x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CDateTimeVtbl;

    interface __x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CDateTime
    {
        CONST_VTBL struct __x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CDateTimeVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CDateTime_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CGeolocation__CGeolocator___x_ABI_CWindows__CDevices__CGeolocation__CPositionChangedEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CGeolocation__CGeolocator___x_ABI_CWindows__CDevices__CGeolocation__CPositionChangedEventArgs_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CGeolocation__CGeolocator___x_ABI_CWindows__CDevices__CGeolocation__CPositionChangedEventArgs __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CGeolocation__CGeolocator___x_ABI_CWindows__CDevices__CGeolocation__CPositionChangedEventArgs;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CGeolocation__CGeolocator___x_ABI_CWindows__CDevices__CGeolocation__CPositionChangedEventArgs;

    typedef struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CGeolocation__CGeolocator___x_ABI_CWindows__CDevices__CGeolocation__CPositionChangedEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CGeolocation__CGeolocator___x_ABI_CWindows__CDevices__CGeolocation__CPositionChangedEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CGeolocation__CGeolocator___x_ABI_CWindows__CDevices__CGeolocation__CPositionChangedEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CGeolocation__CGeolocator___x_ABI_CWindows__CDevices__CGeolocation__CPositionChangedEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CGeolocation__CGeolocator___x_ABI_CWindows__CDevices__CGeolocation__CPositionChangedEventArgs* This,
        __x_ABI_CWindows_CDevices_CGeolocation_CIGeolocator* sender,
        __x_ABI_CWindows_CDevices_CGeolocation_CIPositionChangedEventArgs* args);

        END_INTERFACE
    } __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CGeolocation__CGeolocator___x_ABI_CWindows__CDevices__CGeolocation__CPositionChangedEventArgsVtbl;

    interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CGeolocation__CGeolocator___x_ABI_CWindows__CDevices__CGeolocation__CPositionChangedEventArgs
    {
        CONST_VTBL struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CGeolocation__CGeolocator___x_ABI_CWindows__CDevices__CGeolocation__CPositionChangedEventArgsVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CGeolocation__CGeolocator___x_ABI_CWindows__CDevices__CGeolocation__CPositionChangedEventArgs_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CGeolocation__CGeolocator___x_ABI_CWindows__CDevices__CGeolocation__CStatusChangedEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CGeolocation__CGeolocator___x_ABI_CWindows__CDevices__CGeolocation__CStatusChangedEventArgs_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CGeolocation__CGeolocator___x_ABI_CWindows__CDevices__CGeolocation__CStatusChangedEventArgs __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CGeolocation__CGeolocator___x_ABI_CWindows__CDevices__CGeolocation__CStatusChangedEventArgs;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CGeolocation__CGeolocator___x_ABI_CWindows__CDevices__CGeolocation__CStatusChangedEventArgs;

    typedef struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CGeolocation__CGeolocator___x_ABI_CWindows__CDevices__CGeolocation__CStatusChangedEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CGeolocation__CGeolocator___x_ABI_CWindows__CDevices__CGeolocation__CStatusChangedEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CGeolocation__CGeolocator___x_ABI_CWindows__CDevices__CGeolocation__CStatusChangedEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CGeolocation__CGeolocator___x_ABI_CWindows__CDevices__CGeolocation__CStatusChangedEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CGeolocation__CGeolocator___x_ABI_CWindows__CDevices__CGeolocation__CStatusChangedEventArgs* This,
        __x_ABI_CWindows_CDevices_CGeolocation_CIGeolocator* sender,
        __x_ABI_CWindows_CDevices_CGeolocation_CIStatusChangedEventArgs* args);

        END_INTERFACE
    } __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CGeolocation__CGeolocator___x_ABI_CWindows__CDevices__CGeolocation__CStatusChangedEventArgsVtbl;

    interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CGeolocation__CGeolocator___x_ABI_CWindows__CDevices__CGeolocation__CStatusChangedEventArgs
    {
        CONST_VTBL struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CGeolocation__CGeolocator___x_ABI_CWindows__CDevices__CGeolocation__CStatusChangedEventArgsVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CGeolocation__CGeolocator___x_ABI_CWindows__CDevices__CGeolocation__CStatusChangedEventArgs_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CGeolocation__CGeovisitMonitor___x_ABI_CWindows__CDevices__CGeolocation__CGeovisitStateChangedEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CGeolocation__CGeovisitMonitor___x_ABI_CWindows__CDevices__CGeolocation__CGeovisitStateChangedEventArgs_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CGeolocation__CGeovisitMonitor___x_ABI_CWindows__CDevices__CGeolocation__CGeovisitStateChangedEventArgs __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CGeolocation__CGeovisitMonitor___x_ABI_CWindows__CDevices__CGeolocation__CGeovisitStateChangedEventArgs;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CGeolocation__CGeovisitMonitor___x_ABI_CWindows__CDevices__CGeolocation__CGeovisitStateChangedEventArgs;

    typedef struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CGeolocation__CGeovisitMonitor___x_ABI_CWindows__CDevices__CGeolocation__CGeovisitStateChangedEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CGeolocation__CGeovisitMonitor___x_ABI_CWindows__CDevices__CGeolocation__CGeovisitStateChangedEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CGeolocation__CGeovisitMonitor___x_ABI_CWindows__CDevices__CGeolocation__CGeovisitStateChangedEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CGeolocation__CGeovisitMonitor___x_ABI_CWindows__CDevices__CGeolocation__CGeovisitStateChangedEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CGeolocation__CGeovisitMonitor___x_ABI_CWindows__CDevices__CGeolocation__CGeovisitStateChangedEventArgs* This,
        __x_ABI_CWindows_CDevices_CGeolocation_CIGeovisitMonitor* sender,
        __x_ABI_CWindows_CDevices_CGeolocation_CIGeovisitStateChangedEventArgs* args);

        END_INTERFACE
    } __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CGeolocation__CGeovisitMonitor___x_ABI_CWindows__CDevices__CGeolocation__CGeovisitStateChangedEventArgsVtbl;

    interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CGeolocation__CGeovisitMonitor___x_ABI_CWindows__CDevices__CGeolocation__CGeovisitStateChangedEventArgs
    {
        CONST_VTBL struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CGeolocation__CGeovisitMonitor___x_ABI_CWindows__CDevices__CGeolocation__CGeovisitStateChangedEventArgsVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CGeolocation__CGeovisitMonitor___x_ABI_CWindows__CDevices__CGeolocation__CGeovisitStateChangedEventArgs_INTERFACE_DEFINED__
    
typedef enum __x_ABI_CWindows_CFoundation_CAsyncStatus __x_ABI_CWindows_CFoundation_CAsyncStatus;

#ifndef ____x_ABI_CWindows_CFoundation_CIAsyncInfo_FWD_DEFINED__
#define ____x_ABI_CWindows_CFoundation_CIAsyncInfo_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CFoundation_CIAsyncInfo __x_ABI_CWindows_CFoundation_CIAsyncInfo;

#endif // ____x_ABI_CWindows_CFoundation_CIAsyncInfo_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CFoundation_CIPropertyValue_FWD_DEFINED__
#define ____x_ABI_CWindows_CFoundation_CIPropertyValue_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CFoundation_CIPropertyValue __x_ABI_CWindows_CFoundation_CIPropertyValue;

#endif // ____x_ABI_CWindows_CFoundation_CIPropertyValue_FWD_DEFINED__

typedef struct __x_ABI_CWindows_CFoundation_CTimeSpan __x_ABI_CWindows_CFoundation_CTimeSpan;

typedef enum __x_ABI_CWindows_CDevices_CGeolocation_CAltitudeReferenceSystem __x_ABI_CWindows_CDevices_CGeolocation_CAltitudeReferenceSystem;

typedef enum __x_ABI_CWindows_CDevices_CGeolocation_CGeoshapeType __x_ABI_CWindows_CDevices_CGeolocation_CGeoshapeType;

typedef enum __x_ABI_CWindows_CDevices_CGeolocation_CPositionAccuracy __x_ABI_CWindows_CDevices_CGeolocation_CPositionAccuracy;

typedef enum __x_ABI_CWindows_CDevices_CGeolocation_CPositionSource __x_ABI_CWindows_CDevices_CGeolocation_CPositionSource;

typedef enum __x_ABI_CWindows_CDevices_CGeolocation_CPositionStatus __x_ABI_CWindows_CDevices_CGeolocation_CPositionStatus;

typedef enum __x_ABI_CWindows_CDevices_CGeolocation_CVisitMonitoringScope __x_ABI_CWindows_CDevices_CGeolocation_CVisitMonitoringScope;

typedef enum __x_ABI_CWindows_CDevices_CGeolocation_CVisitStateChange __x_ABI_CWindows_CDevices_CGeolocation_CVisitStateChange;

enum __x_ABI_CWindows_CDevices_CGeolocation_CAltitudeReferenceSystem
    {
        __x_ABI_CWindows_CDevices_CGeolocation_CAltitudeReferenceSystem_Unspecified = 0,
    __x_ABI_CWindows_CDevices_CGeolocation_CAltitudeReferenceSystem_Terrain = 1,
    __x_ABI_CWindows_CDevices_CGeolocation_CAltitudeReferenceSystem_Ellipsoid = 2,
    __x_ABI_CWindows_CDevices_CGeolocation_CAltitudeReferenceSystem_Geoid = 3,
    __x_ABI_CWindows_CDevices_CGeolocation_CAltitudeReferenceSystem_Surface = 4,
};

enum __x_ABI_CWindows_CDevices_CGeolocation_CGeolocationAccessStatus
    {
        __x_ABI_CWindows_CDevices_CGeolocation_CGeolocationAccessStatus_Unspecified = 0,
    __x_ABI_CWindows_CDevices_CGeolocation_CGeolocationAccessStatus_Allowed = 1,
    __x_ABI_CWindows_CDevices_CGeolocation_CGeolocationAccessStatus_Denied = 2,
};

enum __x_ABI_CWindows_CDevices_CGeolocation_CGeoshapeType
    {
        __x_ABI_CWindows_CDevices_CGeolocation_CGeoshapeType_Geopoint = 0,
    __x_ABI_CWindows_CDevices_CGeolocation_CGeoshapeType_Geocircle = 1,
    __x_ABI_CWindows_CDevices_CGeolocation_CGeoshapeType_Geopath = 2,
    __x_ABI_CWindows_CDevices_CGeolocation_CGeoshapeType_GeoboundingBox = 3,
};

enum __x_ABI_CWindows_CDevices_CGeolocation_CPositionAccuracy
    {
        __x_ABI_CWindows_CDevices_CGeolocation_CPositionAccuracy_Default = 0,
    __x_ABI_CWindows_CDevices_CGeolocation_CPositionAccuracy_High = 1,
};

enum __x_ABI_CWindows_CDevices_CGeolocation_CPositionSource
    {
        __x_ABI_CWindows_CDevices_CGeolocation_CPositionSource_Cellular = 0,
    __x_ABI_CWindows_CDevices_CGeolocation_CPositionSource_Satellite = 1,
    __x_ABI_CWindows_CDevices_CGeolocation_CPositionSource_WiFi = 2,
    __x_ABI_CWindows_CDevices_CGeolocation_CPositionSource_IPAddress = 3,
    __x_ABI_CWindows_CDevices_CGeolocation_CPositionSource_Unknown = 4,
    __x_ABI_CWindows_CDevices_CGeolocation_CPositionSource_Default = 5,
    __x_ABI_CWindows_CDevices_CGeolocation_CPositionSource_Obfuscated = 6,
};

enum __x_ABI_CWindows_CDevices_CGeolocation_CPositionStatus
    {
        __x_ABI_CWindows_CDevices_CGeolocation_CPositionStatus_Ready = 0,
    __x_ABI_CWindows_CDevices_CGeolocation_CPositionStatus_Initializing = 1,
    __x_ABI_CWindows_CDevices_CGeolocation_CPositionStatus_NoData = 2,
    __x_ABI_CWindows_CDevices_CGeolocation_CPositionStatus_Disabled = 3,
    __x_ABI_CWindows_CDevices_CGeolocation_CPositionStatus_NotInitialized = 4,
    __x_ABI_CWindows_CDevices_CGeolocation_CPositionStatus_NotAvailable = 5,
};

enum __x_ABI_CWindows_CDevices_CGeolocation_CVisitMonitoringScope
    {
        __x_ABI_CWindows_CDevices_CGeolocation_CVisitMonitoringScope_Venue = 0,
    __x_ABI_CWindows_CDevices_CGeolocation_CVisitMonitoringScope_City = 1,
};

enum __x_ABI_CWindows_CDevices_CGeolocation_CVisitStateChange
    {
        __x_ABI_CWindows_CDevices_CGeolocation_CVisitStateChange_TrackingLost = 0,
    __x_ABI_CWindows_CDevices_CGeolocation_CVisitStateChange_Arrived = 1,
    __x_ABI_CWindows_CDevices_CGeolocation_CVisitStateChange_Departed = 2,
    __x_ABI_CWindows_CDevices_CGeolocation_CVisitStateChange_OtherMovement = 3,
};

struct __x_ABI_CWindows_CDevices_CGeolocation_CBasicGeoposition
    {
        DOUBLE Latitude;
    DOUBLE Longitude;
    DOUBLE Altitude;
};

#if !defined(____x_ABI_CWindows_CDevices_CGeolocation_CICivicAddress_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CDevices_CGeolocation_CICivicAddress_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CDevices_CGeolocation_CICivicAddressVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CGeolocation_CICivicAddress* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CGeolocation_CICivicAddress* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CGeolocation_CICivicAddress* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CGeolocation_CICivicAddress* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CGeolocation_CICivicAddress* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CGeolocation_CICivicAddress* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Country)(__x_ABI_CWindows_CDevices_CGeolocation_CICivicAddress* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_State)(__x_ABI_CWindows_CDevices_CGeolocation_CICivicAddress* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_City)(__x_ABI_CWindows_CDevices_CGeolocation_CICivicAddress* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_PostalCode)(__x_ABI_CWindows_CDevices_CGeolocation_CICivicAddress* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_Timestamp)(__x_ABI_CWindows_CDevices_CGeolocation_CICivicAddress* This,
        struct __x_ABI_CWindows_CFoundation_CDateTime* value);

        END_INTERFACE
    } __x_ABI_CWindows_CDevices_CGeolocation_CICivicAddressVtbl;

    interface __x_ABI_CWindows_CDevices_CGeolocation_CICivicAddress
    {
        CONST_VTBL struct __x_ABI_CWindows_CDevices_CGeolocation_CICivicAddressVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CGeolocation_CICivicAddress;
#endif /* !defined(____x_ABI_CWindows_CDevices_CGeolocation_CICivicAddress_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CDevices_CGeolocation_CIGeoboundingBox_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CDevices_CGeolocation_CIGeoboundingBox_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CDevices_CGeolocation_CIGeoboundingBoxVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CGeolocation_CIGeoboundingBox* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CGeolocation_CIGeoboundingBox* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CGeolocation_CIGeoboundingBox* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CGeolocation_CIGeoboundingBox* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CGeolocation_CIGeoboundingBox* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CGeolocation_CIGeoboundingBox* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_NorthwestCorner)(__x_ABI_CWindows_CDevices_CGeolocation_CIGeoboundingBox* This,
        struct __x_ABI_CWindows_CDevices_CGeolocation_CBasicGeoposition* value);
    HRESULT (STDMETHODCALLTYPE* get_SoutheastCorner)(__x_ABI_CWindows_CDevices_CGeolocation_CIGeoboundingBox* This,
        struct __x_ABI_CWindows_CDevices_CGeolocation_CBasicGeoposition* value);
    HRESULT (STDMETHODCALLTYPE* get_Center)(__x_ABI_CWindows_CDevices_CGeolocation_CIGeoboundingBox* This,
        struct __x_ABI_CWindows_CDevices_CGeolocation_CBasicGeoposition* value);
    HRESULT (STDMETHODCALLTYPE* get_MinAltitude)(__x_ABI_CWindows_CDevices_CGeolocation_CIGeoboundingBox* This,
        DOUBLE* value);
    HRESULT (STDMETHODCALLTYPE* get_MaxAltitude)(__x_ABI_CWindows_CDevices_CGeolocation_CIGeoboundingBox* This,
        DOUBLE* value);

        END_INTERFACE
    } __x_ABI_CWindows_CDevices_CGeolocation_CIGeoboundingBoxVtbl;

    interface __x_ABI_CWindows_CDevices_CGeolocation_CIGeoboundingBox
    {
        CONST_VTBL struct __x_ABI_CWindows_CDevices_CGeolocation_CIGeoboundingBoxVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CGeolocation_CIGeoboundingBox;
#endif /* !defined(____x_ABI_CWindows_CDevices_CGeolocation_CIGeoboundingBox_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CDevices_CGeolocation_CIGeoboundingBoxFactory_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CDevices_CGeolocation_CIGeoboundingBoxFactory_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CDevices_CGeolocation_CIGeoboundingBoxFactoryVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CGeolocation_CIGeoboundingBoxFactory* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CGeolocation_CIGeoboundingBoxFactory* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CGeolocation_CIGeoboundingBoxFactory* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CGeolocation_CIGeoboundingBoxFactory* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CGeolocation_CIGeoboundingBoxFactory* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CGeolocation_CIGeoboundingBoxFactory* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* Create)(__x_ABI_CWindows_CDevices_CGeolocation_CIGeoboundingBoxFactory* This,
        struct __x_ABI_CWindows_CDevices_CGeolocation_CBasicGeoposition northwestCorner,
        struct __x_ABI_CWindows_CDevices_CGeolocation_CBasicGeoposition southeastCorner,
        __x_ABI_CWindows_CDevices_CGeolocation_CIGeoboundingBox** value);
    HRESULT (STDMETHODCALLTYPE* CreateWithAltitudeReference)(__x_ABI_CWindows_CDevices_CGeolocation_CIGeoboundingBoxFactory* This,
        struct __x_ABI_CWindows_CDevices_CGeolocation_CBasicGeoposition northwestCorner,
        struct __x_ABI_CWindows_CDevices_CGeolocation_CBasicGeoposition southeastCorner,
        enum __x_ABI_CWindows_CDevices_CGeolocation_CAltitudeReferenceSystem altitudeReferenceSystem,
        __x_ABI_CWindows_CDevices_CGeolocation_CIGeoboundingBox** value);
    HRESULT (STDMETHODCALLTYPE* CreateWithAltitudeReferenceAndSpatialReference)(__x_ABI_CWindows_CDevices_CGeolocation_CIGeoboundingBoxFactory* This,
        struct __x_ABI_CWindows_CDevices_CGeolocation_CBasicGeoposition northwestCorner,
        struct __x_ABI_CWindows_CDevices_CGeolocation_CBasicGeoposition southeastCorner,
        enum __x_ABI_CWindows_CDevices_CGeolocation_CAltitudeReferenceSystem altitudeReferenceSystem,
        UINT32 spatialReferenceId,
        __x_ABI_CWindows_CDevices_CGeolocation_CIGeoboundingBox** value);

        END_INTERFACE
    } __x_ABI_CWindows_CDevices_CGeolocation_CIGeoboundingBoxFactoryVtbl;

    interface __x_ABI_CWindows_CDevices_CGeolocation_CIGeoboundingBoxFactory
    {
        CONST_VTBL struct __x_ABI_CWindows_CDevices_CGeolocation_CIGeoboundingBoxFactoryVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CGeolocation_CIGeoboundingBoxFactory;
#endif /* !defined(____x_ABI_CWindows_CDevices_CGeolocation_CIGeoboundingBoxFactory_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CDevices_CGeolocation_CIGeoboundingBoxStatics_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CDevices_CGeolocation_CIGeoboundingBoxStatics_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CDevices_CGeolocation_CIGeoboundingBoxStaticsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CGeolocation_CIGeoboundingBoxStatics* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CGeolocation_CIGeoboundingBoxStatics* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CGeolocation_CIGeoboundingBoxStatics* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CGeolocation_CIGeoboundingBoxStatics* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CGeolocation_CIGeoboundingBoxStatics* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CGeolocation_CIGeoboundingBoxStatics* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* TryCompute)(__x_ABI_CWindows_CDevices_CGeolocation_CIGeoboundingBoxStatics* This,
        __x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CGeolocation__CBasicGeoposition* positions,
        __x_ABI_CWindows_CDevices_CGeolocation_CIGeoboundingBox** value);
    HRESULT (STDMETHODCALLTYPE* TryComputeWithAltitudeReference)(__x_ABI_CWindows_CDevices_CGeolocation_CIGeoboundingBoxStatics* This,
        __x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CGeolocation__CBasicGeoposition* positions,
        enum __x_ABI_CWindows_CDevices_CGeolocation_CAltitudeReferenceSystem altitudeRefSystem,
        __x_ABI_CWindows_CDevices_CGeolocation_CIGeoboundingBox** value);
    HRESULT (STDMETHODCALLTYPE* TryComputeWithAltitudeReferenceAndSpatialReference)(__x_ABI_CWindows_CDevices_CGeolocation_CIGeoboundingBoxStatics* This,
        __x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CGeolocation__CBasicGeoposition* positions,
        enum __x_ABI_CWindows_CDevices_CGeolocation_CAltitudeReferenceSystem altitudeRefSystem,
        UINT32 spatialReferenceId,
        __x_ABI_CWindows_CDevices_CGeolocation_CIGeoboundingBox** value);

        END_INTERFACE
    } __x_ABI_CWindows_CDevices_CGeolocation_CIGeoboundingBoxStaticsVtbl;

    interface __x_ABI_CWindows_CDevices_CGeolocation_CIGeoboundingBoxStatics
    {
        CONST_VTBL struct __x_ABI_CWindows_CDevices_CGeolocation_CIGeoboundingBoxStaticsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CGeolocation_CIGeoboundingBoxStatics;
#endif /* !defined(____x_ABI_CWindows_CDevices_CGeolocation_CIGeoboundingBoxStatics_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CDevices_CGeolocation_CIGeocircle_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CDevices_CGeolocation_CIGeocircle_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CDevices_CGeolocation_CIGeocircleVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CGeolocation_CIGeocircle* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CGeolocation_CIGeocircle* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CGeolocation_CIGeocircle* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CGeolocation_CIGeocircle* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CGeolocation_CIGeocircle* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CGeolocation_CIGeocircle* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Center)(__x_ABI_CWindows_CDevices_CGeolocation_CIGeocircle* This,
        struct __x_ABI_CWindows_CDevices_CGeolocation_CBasicGeoposition* value);
    HRESULT (STDMETHODCALLTYPE* get_Radius)(__x_ABI_CWindows_CDevices_CGeolocation_CIGeocircle* This,
        DOUBLE* value);

        END_INTERFACE
    } __x_ABI_CWindows_CDevices_CGeolocation_CIGeocircleVtbl;

    interface __x_ABI_CWindows_CDevices_CGeolocation_CIGeocircle
    {
        CONST_VTBL struct __x_ABI_CWindows_CDevices_CGeolocation_CIGeocircleVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CGeolocation_CIGeocircle;
#endif /* !defined(____x_ABI_CWindows_CDevices_CGeolocation_CIGeocircle_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CDevices_CGeolocation_CIGeocircleFactory_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CDevices_CGeolocation_CIGeocircleFactory_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CDevices_CGeolocation_CIGeocircleFactoryVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CGeolocation_CIGeocircleFactory* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CGeolocation_CIGeocircleFactory* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CGeolocation_CIGeocircleFactory* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CGeolocation_CIGeocircleFactory* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CGeolocation_CIGeocircleFactory* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CGeolocation_CIGeocircleFactory* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* Create)(__x_ABI_CWindows_CDevices_CGeolocation_CIGeocircleFactory* This,
        struct __x_ABI_CWindows_CDevices_CGeolocation_CBasicGeoposition position,
        DOUBLE radius,
        __x_ABI_CWindows_CDevices_CGeolocation_CIGeocircle** value);
    HRESULT (STDMETHODCALLTYPE* CreateWithAltitudeReferenceSystem)(__x_ABI_CWindows_CDevices_CGeolocation_CIGeocircleFactory* This,
        struct __x_ABI_CWindows_CDevices_CGeolocation_CBasicGeoposition position,
        DOUBLE radius,
        enum __x_ABI_CWindows_CDevices_CGeolocation_CAltitudeReferenceSystem altitudeReferenceSystem,
        __x_ABI_CWindows_CDevices_CGeolocation_CIGeocircle** value);
    HRESULT (STDMETHODCALLTYPE* CreateWithAltitudeReferenceSystemAndSpatialReferenceId)(__x_ABI_CWindows_CDevices_CGeolocation_CIGeocircleFactory* This,
        struct __x_ABI_CWindows_CDevices_CGeolocation_CBasicGeoposition position,
        DOUBLE radius,
        enum __x_ABI_CWindows_CDevices_CGeolocation_CAltitudeReferenceSystem altitudeReferenceSystem,
        UINT32 spatialReferenceId,
        __x_ABI_CWindows_CDevices_CGeolocation_CIGeocircle** value);

        END_INTERFACE
    } __x_ABI_CWindows_CDevices_CGeolocation_CIGeocircleFactoryVtbl;

    interface __x_ABI_CWindows_CDevices_CGeolocation_CIGeocircleFactory
    {
        CONST_VTBL struct __x_ABI_CWindows_CDevices_CGeolocation_CIGeocircleFactoryVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CGeolocation_CIGeocircleFactory;
#endif /* !defined(____x_ABI_CWindows_CDevices_CGeolocation_CIGeocircleFactory_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CDevices_CGeolocation_CIGeocoordinate_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CDevices_CGeolocation_CIGeocoordinate_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CDevices_CGeolocation_CIGeocoordinateVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CGeolocation_CIGeocoordinate* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CGeolocation_CIGeocoordinate* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CGeolocation_CIGeocoordinate* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CGeolocation_CIGeocoordinate* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CGeolocation_CIGeocoordinate* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CGeolocation_CIGeocoordinate* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Latitude)(__x_ABI_CWindows_CDevices_CGeolocation_CIGeocoordinate* This,
        DOUBLE* value);
    HRESULT (STDMETHODCALLTYPE* get_Longitude)(__x_ABI_CWindows_CDevices_CGeolocation_CIGeocoordinate* This,
        DOUBLE* value);
    HRESULT (STDMETHODCALLTYPE* get_Altitude)(__x_ABI_CWindows_CDevices_CGeolocation_CIGeocoordinate* This,
        __x_ABI_C__FIReference_1_double** value);
    HRESULT (STDMETHODCALLTYPE* get_Accuracy)(__x_ABI_CWindows_CDevices_CGeolocation_CIGeocoordinate* This,
        DOUBLE* value);
    HRESULT (STDMETHODCALLTYPE* get_AltitudeAccuracy)(__x_ABI_CWindows_CDevices_CGeolocation_CIGeocoordinate* This,
        __x_ABI_C__FIReference_1_double** value);
    HRESULT (STDMETHODCALLTYPE* get_Heading)(__x_ABI_CWindows_CDevices_CGeolocation_CIGeocoordinate* This,
        __x_ABI_C__FIReference_1_double** value);
    HRESULT (STDMETHODCALLTYPE* get_Speed)(__x_ABI_CWindows_CDevices_CGeolocation_CIGeocoordinate* This,
        __x_ABI_C__FIReference_1_double** value);
    HRESULT (STDMETHODCALLTYPE* get_Timestamp)(__x_ABI_CWindows_CDevices_CGeolocation_CIGeocoordinate* This,
        struct __x_ABI_CWindows_CFoundation_CDateTime* value);

        END_INTERFACE
    } __x_ABI_CWindows_CDevices_CGeolocation_CIGeocoordinateVtbl;

    interface __x_ABI_CWindows_CDevices_CGeolocation_CIGeocoordinate
    {
        CONST_VTBL struct __x_ABI_CWindows_CDevices_CGeolocation_CIGeocoordinateVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CGeolocation_CIGeocoordinate;
#endif /* !defined(____x_ABI_CWindows_CDevices_CGeolocation_CIGeocoordinate_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CDevices_CGeolocation_CIGeocoordinateSatelliteData_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CDevices_CGeolocation_CIGeocoordinateSatelliteData_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CDevices_CGeolocation_CIGeocoordinateSatelliteDataVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CGeolocation_CIGeocoordinateSatelliteData* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CGeolocation_CIGeocoordinateSatelliteData* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CGeolocation_CIGeocoordinateSatelliteData* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CGeolocation_CIGeocoordinateSatelliteData* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CGeolocation_CIGeocoordinateSatelliteData* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CGeolocation_CIGeocoordinateSatelliteData* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_PositionDilutionOfPrecision)(__x_ABI_CWindows_CDevices_CGeolocation_CIGeocoordinateSatelliteData* This,
        __x_ABI_C__FIReference_1_double** ppValue);
    HRESULT (STDMETHODCALLTYPE* get_HorizontalDilutionOfPrecision)(__x_ABI_CWindows_CDevices_CGeolocation_CIGeocoordinateSatelliteData* This,
        __x_ABI_C__FIReference_1_double** ppValue);
    HRESULT (STDMETHODCALLTYPE* get_VerticalDilutionOfPrecision)(__x_ABI_CWindows_CDevices_CGeolocation_CIGeocoordinateSatelliteData* This,
        __x_ABI_C__FIReference_1_double** ppValue);

        END_INTERFACE
    } __x_ABI_CWindows_CDevices_CGeolocation_CIGeocoordinateSatelliteDataVtbl;

    interface __x_ABI_CWindows_CDevices_CGeolocation_CIGeocoordinateSatelliteData
    {
        CONST_VTBL struct __x_ABI_CWindows_CDevices_CGeolocation_CIGeocoordinateSatelliteDataVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CGeolocation_CIGeocoordinateSatelliteData;
#endif /* !defined(____x_ABI_CWindows_CDevices_CGeolocation_CIGeocoordinateSatelliteData_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CDevices_CGeolocation_CIGeocoordinateWithPoint_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CDevices_CGeolocation_CIGeocoordinateWithPoint_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CDevices_CGeolocation_CIGeocoordinateWithPointVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CGeolocation_CIGeocoordinateWithPoint* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CGeolocation_CIGeocoordinateWithPoint* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CGeolocation_CIGeocoordinateWithPoint* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CGeolocation_CIGeocoordinateWithPoint* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CGeolocation_CIGeocoordinateWithPoint* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CGeolocation_CIGeocoordinateWithPoint* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Point)(__x_ABI_CWindows_CDevices_CGeolocation_CIGeocoordinateWithPoint* This,
        __x_ABI_CWindows_CDevices_CGeolocation_CIGeopoint** value);

        END_INTERFACE
    } __x_ABI_CWindows_CDevices_CGeolocation_CIGeocoordinateWithPointVtbl;

    interface __x_ABI_CWindows_CDevices_CGeolocation_CIGeocoordinateWithPoint
    {
        CONST_VTBL struct __x_ABI_CWindows_CDevices_CGeolocation_CIGeocoordinateWithPointVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CGeolocation_CIGeocoordinateWithPoint;
#endif /* !defined(____x_ABI_CWindows_CDevices_CGeolocation_CIGeocoordinateWithPoint_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CDevices_CGeolocation_CIGeocoordinateWithPositionData_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CDevices_CGeolocation_CIGeocoordinateWithPositionData_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CDevices_CGeolocation_CIGeocoordinateWithPositionDataVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CGeolocation_CIGeocoordinateWithPositionData* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CGeolocation_CIGeocoordinateWithPositionData* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CGeolocation_CIGeocoordinateWithPositionData* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CGeolocation_CIGeocoordinateWithPositionData* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CGeolocation_CIGeocoordinateWithPositionData* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CGeolocation_CIGeocoordinateWithPositionData* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_PositionSource)(__x_ABI_CWindows_CDevices_CGeolocation_CIGeocoordinateWithPositionData* This,
        enum __x_ABI_CWindows_CDevices_CGeolocation_CPositionSource* pValue);
    HRESULT (STDMETHODCALLTYPE* get_SatelliteData)(__x_ABI_CWindows_CDevices_CGeolocation_CIGeocoordinateWithPositionData* This,
        __x_ABI_CWindows_CDevices_CGeolocation_CIGeocoordinateSatelliteData** ppValue);

        END_INTERFACE
    } __x_ABI_CWindows_CDevices_CGeolocation_CIGeocoordinateWithPositionDataVtbl;

    interface __x_ABI_CWindows_CDevices_CGeolocation_CIGeocoordinateWithPositionData
    {
        CONST_VTBL struct __x_ABI_CWindows_CDevices_CGeolocation_CIGeocoordinateWithPositionDataVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CGeolocation_CIGeocoordinateWithPositionData;
#endif /* !defined(____x_ABI_CWindows_CDevices_CGeolocation_CIGeocoordinateWithPositionData_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CDevices_CGeolocation_CIGeocoordinateWithPositionSourceTimestamp_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CDevices_CGeolocation_CIGeocoordinateWithPositionSourceTimestamp_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CDevices_CGeolocation_CIGeocoordinateWithPositionSourceTimestampVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CGeolocation_CIGeocoordinateWithPositionSourceTimestamp* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CGeolocation_CIGeocoordinateWithPositionSourceTimestamp* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CGeolocation_CIGeocoordinateWithPositionSourceTimestamp* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CGeolocation_CIGeocoordinateWithPositionSourceTimestamp* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CGeolocation_CIGeocoordinateWithPositionSourceTimestamp* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CGeolocation_CIGeocoordinateWithPositionSourceTimestamp* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_PositionSourceTimestamp)(__x_ABI_CWindows_CDevices_CGeolocation_CIGeocoordinateWithPositionSourceTimestamp* This,
        __x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CDateTime** value);

        END_INTERFACE
    } __x_ABI_CWindows_CDevices_CGeolocation_CIGeocoordinateWithPositionSourceTimestampVtbl;

    interface __x_ABI_CWindows_CDevices_CGeolocation_CIGeocoordinateWithPositionSourceTimestamp
    {
        CONST_VTBL struct __x_ABI_CWindows_CDevices_CGeolocation_CIGeocoordinateWithPositionSourceTimestampVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CGeolocation_CIGeocoordinateWithPositionSourceTimestamp;
#endif /* !defined(____x_ABI_CWindows_CDevices_CGeolocation_CIGeocoordinateWithPositionSourceTimestamp_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CDevices_CGeolocation_CIGeolocator_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CDevices_CGeolocation_CIGeolocator_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CDevices_CGeolocation_CIGeolocatorVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CGeolocation_CIGeolocator* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CGeolocation_CIGeolocator* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CGeolocation_CIGeolocator* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CGeolocation_CIGeolocator* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CGeolocation_CIGeolocator* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CGeolocation_CIGeolocator* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_DesiredAccuracy)(__x_ABI_CWindows_CDevices_CGeolocation_CIGeolocator* This,
        enum __x_ABI_CWindows_CDevices_CGeolocation_CPositionAccuracy* value);
    HRESULT (STDMETHODCALLTYPE* put_DesiredAccuracy)(__x_ABI_CWindows_CDevices_CGeolocation_CIGeolocator* This,
        enum __x_ABI_CWindows_CDevices_CGeolocation_CPositionAccuracy value);
    HRESULT (STDMETHODCALLTYPE* get_MovementThreshold)(__x_ABI_CWindows_CDevices_CGeolocation_CIGeolocator* This,
        DOUBLE* value);
    HRESULT (STDMETHODCALLTYPE* put_MovementThreshold)(__x_ABI_CWindows_CDevices_CGeolocation_CIGeolocator* This,
        DOUBLE value);
    HRESULT (STDMETHODCALLTYPE* get_ReportInterval)(__x_ABI_CWindows_CDevices_CGeolocation_CIGeolocator* This,
        UINT32* value);
    HRESULT (STDMETHODCALLTYPE* put_ReportInterval)(__x_ABI_CWindows_CDevices_CGeolocation_CIGeolocator* This,
        UINT32 value);
    HRESULT (STDMETHODCALLTYPE* get_LocationStatus)(__x_ABI_CWindows_CDevices_CGeolocation_CIGeolocator* This,
        enum __x_ABI_CWindows_CDevices_CGeolocation_CPositionStatus* value);
    HRESULT (STDMETHODCALLTYPE* GetGeopositionAsync)(__x_ABI_CWindows_CDevices_CGeolocation_CIGeolocator* This,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CGeolocation__CGeoposition** value);
    HRESULT (STDMETHODCALLTYPE* GetGeopositionAsyncWithAgeAndTimeout)(__x_ABI_CWindows_CDevices_CGeolocation_CIGeolocator* This,
        struct __x_ABI_CWindows_CFoundation_CTimeSpan maximumAge,
        struct __x_ABI_CWindows_CFoundation_CTimeSpan timeout,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CGeolocation__CGeoposition** value);
    HRESULT (STDMETHODCALLTYPE* add_PositionChanged)(__x_ABI_CWindows_CDevices_CGeolocation_CIGeolocator* This,
        __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CGeolocation__CGeolocator___x_ABI_CWindows__CDevices__CGeolocation__CPositionChangedEventArgs* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_PositionChanged)(__x_ABI_CWindows_CDevices_CGeolocation_CIGeolocator* This,
        EventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* add_StatusChanged)(__x_ABI_CWindows_CDevices_CGeolocation_CIGeolocator* This,
        __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CGeolocation__CGeolocator___x_ABI_CWindows__CDevices__CGeolocation__CStatusChangedEventArgs* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_StatusChanged)(__x_ABI_CWindows_CDevices_CGeolocation_CIGeolocator* This,
        EventRegistrationToken token);

        END_INTERFACE
    } __x_ABI_CWindows_CDevices_CGeolocation_CIGeolocatorVtbl;

    interface __x_ABI_CWindows_CDevices_CGeolocation_CIGeolocator
    {
        CONST_VTBL struct __x_ABI_CWindows_CDevices_CGeolocation_CIGeolocatorVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CGeolocation_CIGeolocator;
#endif /* !defined(____x_ABI_CWindows_CDevices_CGeolocation_CIGeolocator_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CDevices_CGeolocation_CIGeolocator2_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CDevices_CGeolocation_CIGeolocator2_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CDevices_CGeolocation_CIGeolocator2Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CGeolocation_CIGeolocator2* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CGeolocation_CIGeolocator2* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CGeolocation_CIGeolocator2* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CGeolocation_CIGeolocator2* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CGeolocation_CIGeolocator2* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CGeolocation_CIGeolocator2* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* AllowFallbackToConsentlessPositions)(__x_ABI_CWindows_CDevices_CGeolocation_CIGeolocator2* This);

        END_INTERFACE
    } __x_ABI_CWindows_CDevices_CGeolocation_CIGeolocator2Vtbl;

    interface __x_ABI_CWindows_CDevices_CGeolocation_CIGeolocator2
    {
        CONST_VTBL struct __x_ABI_CWindows_CDevices_CGeolocation_CIGeolocator2Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CGeolocation_CIGeolocator2;
#endif /* !defined(____x_ABI_CWindows_CDevices_CGeolocation_CIGeolocator2_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CDevices_CGeolocation_CIGeolocatorStatics_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CDevices_CGeolocation_CIGeolocatorStatics_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CDevices_CGeolocation_CIGeolocatorStaticsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CGeolocation_CIGeolocatorStatics* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CGeolocation_CIGeolocatorStatics* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CGeolocation_CIGeolocatorStatics* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CGeolocation_CIGeolocatorStatics* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CGeolocation_CIGeolocatorStatics* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CGeolocation_CIGeolocatorStatics* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* RequestAccessAsync)(__x_ABI_CWindows_CDevices_CGeolocation_CIGeolocatorStatics* This,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CGeolocation__CGeolocationAccessStatus** result);
    HRESULT (STDMETHODCALLTYPE* GetGeopositionHistoryAsync)(__x_ABI_CWindows_CDevices_CGeolocation_CIGeolocatorStatics* This,
        struct __x_ABI_CWindows_CFoundation_CDateTime startTime,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CGeolocation__CGeoposition** result);
    HRESULT (STDMETHODCALLTYPE* GetGeopositionHistoryWithDurationAsync)(__x_ABI_CWindows_CDevices_CGeolocation_CIGeolocatorStatics* This,
        struct __x_ABI_CWindows_CFoundation_CDateTime startTime,
        struct __x_ABI_CWindows_CFoundation_CTimeSpan duration,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CGeolocation__CGeoposition** result);

        END_INTERFACE
    } __x_ABI_CWindows_CDevices_CGeolocation_CIGeolocatorStaticsVtbl;

    interface __x_ABI_CWindows_CDevices_CGeolocation_CIGeolocatorStatics
    {
        CONST_VTBL struct __x_ABI_CWindows_CDevices_CGeolocation_CIGeolocatorStaticsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CGeolocation_CIGeolocatorStatics;
#endif /* !defined(____x_ABI_CWindows_CDevices_CGeolocation_CIGeolocatorStatics_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CDevices_CGeolocation_CIGeolocatorStatics2_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CDevices_CGeolocation_CIGeolocatorStatics2_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CDevices_CGeolocation_CIGeolocatorStatics2Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CGeolocation_CIGeolocatorStatics2* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CGeolocation_CIGeolocatorStatics2* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CGeolocation_CIGeolocatorStatics2* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CGeolocation_CIGeolocatorStatics2* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CGeolocation_CIGeolocatorStatics2* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CGeolocation_CIGeolocatorStatics2* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_IsDefaultGeopositionRecommended)(__x_ABI_CWindows_CDevices_CGeolocation_CIGeolocatorStatics2* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* put_DefaultGeoposition)(__x_ABI_CWindows_CDevices_CGeolocation_CIGeolocatorStatics2* This,
        __x_ABI_C__FIReference_1___x_ABI_CWindows__CDevices__CGeolocation__CBasicGeoposition* value);
    HRESULT (STDMETHODCALLTYPE* get_DefaultGeoposition)(__x_ABI_CWindows_CDevices_CGeolocation_CIGeolocatorStatics2* This,
        __x_ABI_C__FIReference_1___x_ABI_CWindows__CDevices__CGeolocation__CBasicGeoposition** value);

        END_INTERFACE
    } __x_ABI_CWindows_CDevices_CGeolocation_CIGeolocatorStatics2Vtbl;

    interface __x_ABI_CWindows_CDevices_CGeolocation_CIGeolocatorStatics2
    {
        CONST_VTBL struct __x_ABI_CWindows_CDevices_CGeolocation_CIGeolocatorStatics2Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CGeolocation_CIGeolocatorStatics2;
#endif /* !defined(____x_ABI_CWindows_CDevices_CGeolocation_CIGeolocatorStatics2_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CDevices_CGeolocation_CIGeolocatorWithScalarAccuracy_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CDevices_CGeolocation_CIGeolocatorWithScalarAccuracy_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CDevices_CGeolocation_CIGeolocatorWithScalarAccuracyVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CGeolocation_CIGeolocatorWithScalarAccuracy* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CGeolocation_CIGeolocatorWithScalarAccuracy* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CGeolocation_CIGeolocatorWithScalarAccuracy* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CGeolocation_CIGeolocatorWithScalarAccuracy* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CGeolocation_CIGeolocatorWithScalarAccuracy* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CGeolocation_CIGeolocatorWithScalarAccuracy* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_DesiredAccuracyInMeters)(__x_ABI_CWindows_CDevices_CGeolocation_CIGeolocatorWithScalarAccuracy* This,
        __x_ABI_C__FIReference_1_UINT32** value);
    HRESULT (STDMETHODCALLTYPE* put_DesiredAccuracyInMeters)(__x_ABI_CWindows_CDevices_CGeolocation_CIGeolocatorWithScalarAccuracy* This,
        __x_ABI_C__FIReference_1_UINT32* value);

        END_INTERFACE
    } __x_ABI_CWindows_CDevices_CGeolocation_CIGeolocatorWithScalarAccuracyVtbl;

    interface __x_ABI_CWindows_CDevices_CGeolocation_CIGeolocatorWithScalarAccuracy
    {
        CONST_VTBL struct __x_ABI_CWindows_CDevices_CGeolocation_CIGeolocatorWithScalarAccuracyVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CGeolocation_CIGeolocatorWithScalarAccuracy;
#endif /* !defined(____x_ABI_CWindows_CDevices_CGeolocation_CIGeolocatorWithScalarAccuracy_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CDevices_CGeolocation_CIGeopath_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CDevices_CGeolocation_CIGeopath_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CDevices_CGeolocation_CIGeopathVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CGeolocation_CIGeopath* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CGeolocation_CIGeopath* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CGeolocation_CIGeopath* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CGeolocation_CIGeopath* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CGeolocation_CIGeopath* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CGeolocation_CIGeopath* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Positions)(__x_ABI_CWindows_CDevices_CGeolocation_CIGeopath* This,
        __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CGeolocation__CBasicGeoposition** value);

        END_INTERFACE
    } __x_ABI_CWindows_CDevices_CGeolocation_CIGeopathVtbl;

    interface __x_ABI_CWindows_CDevices_CGeolocation_CIGeopath
    {
        CONST_VTBL struct __x_ABI_CWindows_CDevices_CGeolocation_CIGeopathVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CGeolocation_CIGeopath;
#endif /* !defined(____x_ABI_CWindows_CDevices_CGeolocation_CIGeopath_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CDevices_CGeolocation_CIGeopathFactory_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CDevices_CGeolocation_CIGeopathFactory_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CDevices_CGeolocation_CIGeopathFactoryVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CGeolocation_CIGeopathFactory* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CGeolocation_CIGeopathFactory* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CGeolocation_CIGeopathFactory* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CGeolocation_CIGeopathFactory* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CGeolocation_CIGeopathFactory* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CGeolocation_CIGeopathFactory* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* Create)(__x_ABI_CWindows_CDevices_CGeolocation_CIGeopathFactory* This,
        __x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CGeolocation__CBasicGeoposition* positions,
        __x_ABI_CWindows_CDevices_CGeolocation_CIGeopath** value);
    HRESULT (STDMETHODCALLTYPE* CreateWithAltitudeReference)(__x_ABI_CWindows_CDevices_CGeolocation_CIGeopathFactory* This,
        __x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CGeolocation__CBasicGeoposition* positions,
        enum __x_ABI_CWindows_CDevices_CGeolocation_CAltitudeReferenceSystem altitudeReferenceSystem,
        __x_ABI_CWindows_CDevices_CGeolocation_CIGeopath** value);
    HRESULT (STDMETHODCALLTYPE* CreateWithAltitudeReferenceAndSpatialReference)(__x_ABI_CWindows_CDevices_CGeolocation_CIGeopathFactory* This,
        __x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CGeolocation__CBasicGeoposition* positions,
        enum __x_ABI_CWindows_CDevices_CGeolocation_CAltitudeReferenceSystem altitudeReferenceSystem,
        UINT32 spatialReferenceId,
        __x_ABI_CWindows_CDevices_CGeolocation_CIGeopath** value);

        END_INTERFACE
    } __x_ABI_CWindows_CDevices_CGeolocation_CIGeopathFactoryVtbl;

    interface __x_ABI_CWindows_CDevices_CGeolocation_CIGeopathFactory
    {
        CONST_VTBL struct __x_ABI_CWindows_CDevices_CGeolocation_CIGeopathFactoryVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CGeolocation_CIGeopathFactory;
#endif /* !defined(____x_ABI_CWindows_CDevices_CGeolocation_CIGeopathFactory_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CDevices_CGeolocation_CIGeopoint_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CDevices_CGeolocation_CIGeopoint_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CDevices_CGeolocation_CIGeopointVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CGeolocation_CIGeopoint* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CGeolocation_CIGeopoint* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CGeolocation_CIGeopoint* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CGeolocation_CIGeopoint* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CGeolocation_CIGeopoint* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CGeolocation_CIGeopoint* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Position)(__x_ABI_CWindows_CDevices_CGeolocation_CIGeopoint* This,
        struct __x_ABI_CWindows_CDevices_CGeolocation_CBasicGeoposition* value);

        END_INTERFACE
    } __x_ABI_CWindows_CDevices_CGeolocation_CIGeopointVtbl;

    interface __x_ABI_CWindows_CDevices_CGeolocation_CIGeopoint
    {
        CONST_VTBL struct __x_ABI_CWindows_CDevices_CGeolocation_CIGeopointVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CGeolocation_CIGeopoint;
#endif /* !defined(____x_ABI_CWindows_CDevices_CGeolocation_CIGeopoint_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CDevices_CGeolocation_CIGeopointFactory_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CDevices_CGeolocation_CIGeopointFactory_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CDevices_CGeolocation_CIGeopointFactoryVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CGeolocation_CIGeopointFactory* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CGeolocation_CIGeopointFactory* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CGeolocation_CIGeopointFactory* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CGeolocation_CIGeopointFactory* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CGeolocation_CIGeopointFactory* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CGeolocation_CIGeopointFactory* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* Create)(__x_ABI_CWindows_CDevices_CGeolocation_CIGeopointFactory* This,
        struct __x_ABI_CWindows_CDevices_CGeolocation_CBasicGeoposition position,
        __x_ABI_CWindows_CDevices_CGeolocation_CIGeopoint** value);
    HRESULT (STDMETHODCALLTYPE* CreateWithAltitudeReferenceSystem)(__x_ABI_CWindows_CDevices_CGeolocation_CIGeopointFactory* This,
        struct __x_ABI_CWindows_CDevices_CGeolocation_CBasicGeoposition position,
        enum __x_ABI_CWindows_CDevices_CGeolocation_CAltitudeReferenceSystem altitudeReferenceSystem,
        __x_ABI_CWindows_CDevices_CGeolocation_CIGeopoint** value);
    HRESULT (STDMETHODCALLTYPE* CreateWithAltitudeReferenceSystemAndSpatialReferenceId)(__x_ABI_CWindows_CDevices_CGeolocation_CIGeopointFactory* This,
        struct __x_ABI_CWindows_CDevices_CGeolocation_CBasicGeoposition position,
        enum __x_ABI_CWindows_CDevices_CGeolocation_CAltitudeReferenceSystem altitudeReferenceSystem,
        UINT32 spatialReferenceId,
        __x_ABI_CWindows_CDevices_CGeolocation_CIGeopoint** value);

        END_INTERFACE
    } __x_ABI_CWindows_CDevices_CGeolocation_CIGeopointFactoryVtbl;

    interface __x_ABI_CWindows_CDevices_CGeolocation_CIGeopointFactory
    {
        CONST_VTBL struct __x_ABI_CWindows_CDevices_CGeolocation_CIGeopointFactoryVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CGeolocation_CIGeopointFactory;
#endif /* !defined(____x_ABI_CWindows_CDevices_CGeolocation_CIGeopointFactory_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CDevices_CGeolocation_CIGeoposition_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CDevices_CGeolocation_CIGeoposition_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CDevices_CGeolocation_CIGeopositionVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CGeolocation_CIGeoposition* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CGeolocation_CIGeoposition* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CGeolocation_CIGeoposition* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CGeolocation_CIGeoposition* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CGeolocation_CIGeoposition* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CGeolocation_CIGeoposition* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Coordinate)(__x_ABI_CWindows_CDevices_CGeolocation_CIGeoposition* This,
        __x_ABI_CWindows_CDevices_CGeolocation_CIGeocoordinate** value);
    HRESULT (STDMETHODCALLTYPE* get_CivicAddress)(__x_ABI_CWindows_CDevices_CGeolocation_CIGeoposition* This,
        __x_ABI_CWindows_CDevices_CGeolocation_CICivicAddress** value);

        END_INTERFACE
    } __x_ABI_CWindows_CDevices_CGeolocation_CIGeopositionVtbl;

    interface __x_ABI_CWindows_CDevices_CGeolocation_CIGeoposition
    {
        CONST_VTBL struct __x_ABI_CWindows_CDevices_CGeolocation_CIGeopositionVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CGeolocation_CIGeoposition;
#endif /* !defined(____x_ABI_CWindows_CDevices_CGeolocation_CIGeoposition_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CDevices_CGeolocation_CIGeoposition2_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CDevices_CGeolocation_CIGeoposition2_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CDevices_CGeolocation_CIGeoposition2Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CGeolocation_CIGeoposition2* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CGeolocation_CIGeoposition2* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CGeolocation_CIGeoposition2* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CGeolocation_CIGeoposition2* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CGeolocation_CIGeoposition2* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CGeolocation_CIGeoposition2* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_VenueData)(__x_ABI_CWindows_CDevices_CGeolocation_CIGeoposition2* This,
        __x_ABI_CWindows_CDevices_CGeolocation_CIVenueData** value);

        END_INTERFACE
    } __x_ABI_CWindows_CDevices_CGeolocation_CIGeoposition2Vtbl;

    interface __x_ABI_CWindows_CDevices_CGeolocation_CIGeoposition2
    {
        CONST_VTBL struct __x_ABI_CWindows_CDevices_CGeolocation_CIGeoposition2Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CGeolocation_CIGeoposition2;
#endif /* !defined(____x_ABI_CWindows_CDevices_CGeolocation_CIGeoposition2_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CDevices_CGeolocation_CIGeoshape_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CDevices_CGeolocation_CIGeoshape_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CDevices_CGeolocation_CIGeoshapeVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CGeolocation_CIGeoshape* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CGeolocation_CIGeoshape* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CGeolocation_CIGeoshape* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CGeolocation_CIGeoshape* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CGeolocation_CIGeoshape* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CGeolocation_CIGeoshape* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_GeoshapeType)(__x_ABI_CWindows_CDevices_CGeolocation_CIGeoshape* This,
        enum __x_ABI_CWindows_CDevices_CGeolocation_CGeoshapeType* value);
    HRESULT (STDMETHODCALLTYPE* get_SpatialReferenceId)(__x_ABI_CWindows_CDevices_CGeolocation_CIGeoshape* This,
        UINT32* value);
    HRESULT (STDMETHODCALLTYPE* get_AltitudeReferenceSystem)(__x_ABI_CWindows_CDevices_CGeolocation_CIGeoshape* This,
        enum __x_ABI_CWindows_CDevices_CGeolocation_CAltitudeReferenceSystem* value);

        END_INTERFACE
    } __x_ABI_CWindows_CDevices_CGeolocation_CIGeoshapeVtbl;

    interface __x_ABI_CWindows_CDevices_CGeolocation_CIGeoshape
    {
        CONST_VTBL struct __x_ABI_CWindows_CDevices_CGeolocation_CIGeoshapeVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CGeolocation_CIGeoshape;
#endif /* !defined(____x_ABI_CWindows_CDevices_CGeolocation_CIGeoshape_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CDevices_CGeolocation_CIGeovisit_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CDevices_CGeolocation_CIGeovisit_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CDevices_CGeolocation_CIGeovisitVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CGeolocation_CIGeovisit* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CGeolocation_CIGeovisit* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CGeolocation_CIGeovisit* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CGeolocation_CIGeovisit* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CGeolocation_CIGeovisit* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CGeolocation_CIGeovisit* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Position)(__x_ABI_CWindows_CDevices_CGeolocation_CIGeovisit* This,
        __x_ABI_CWindows_CDevices_CGeolocation_CIGeoposition** value);
    HRESULT (STDMETHODCALLTYPE* get_StateChange)(__x_ABI_CWindows_CDevices_CGeolocation_CIGeovisit* This,
        enum __x_ABI_CWindows_CDevices_CGeolocation_CVisitStateChange* value);
    HRESULT (STDMETHODCALLTYPE* get_Timestamp)(__x_ABI_CWindows_CDevices_CGeolocation_CIGeovisit* This,
        struct __x_ABI_CWindows_CFoundation_CDateTime* value);

        END_INTERFACE
    } __x_ABI_CWindows_CDevices_CGeolocation_CIGeovisitVtbl;

    interface __x_ABI_CWindows_CDevices_CGeolocation_CIGeovisit
    {
        CONST_VTBL struct __x_ABI_CWindows_CDevices_CGeolocation_CIGeovisitVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CGeolocation_CIGeovisit;
#endif /* !defined(____x_ABI_CWindows_CDevices_CGeolocation_CIGeovisit_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CDevices_CGeolocation_CIGeovisitMonitor_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CDevices_CGeolocation_CIGeovisitMonitor_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CDevices_CGeolocation_CIGeovisitMonitorVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CGeolocation_CIGeovisitMonitor* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CGeolocation_CIGeovisitMonitor* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CGeolocation_CIGeovisitMonitor* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CGeolocation_CIGeovisitMonitor* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CGeolocation_CIGeovisitMonitor* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CGeolocation_CIGeovisitMonitor* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_MonitoringScope)(__x_ABI_CWindows_CDevices_CGeolocation_CIGeovisitMonitor* This,
        enum __x_ABI_CWindows_CDevices_CGeolocation_CVisitMonitoringScope* value);
    HRESULT (STDMETHODCALLTYPE* Start)(__x_ABI_CWindows_CDevices_CGeolocation_CIGeovisitMonitor* This,
        enum __x_ABI_CWindows_CDevices_CGeolocation_CVisitMonitoringScope value);
    HRESULT (STDMETHODCALLTYPE* Stop)(__x_ABI_CWindows_CDevices_CGeolocation_CIGeovisitMonitor* This);
    HRESULT (STDMETHODCALLTYPE* add_VisitStateChanged)(__x_ABI_CWindows_CDevices_CGeolocation_CIGeovisitMonitor* This,
        __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CGeolocation__CGeovisitMonitor___x_ABI_CWindows__CDevices__CGeolocation__CGeovisitStateChangedEventArgs* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_VisitStateChanged)(__x_ABI_CWindows_CDevices_CGeolocation_CIGeovisitMonitor* This,
        EventRegistrationToken token);

        END_INTERFACE
    } __x_ABI_CWindows_CDevices_CGeolocation_CIGeovisitMonitorVtbl;

    interface __x_ABI_CWindows_CDevices_CGeolocation_CIGeovisitMonitor
    {
        CONST_VTBL struct __x_ABI_CWindows_CDevices_CGeolocation_CIGeovisitMonitorVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CGeolocation_CIGeovisitMonitor;
#endif /* !defined(____x_ABI_CWindows_CDevices_CGeolocation_CIGeovisitMonitor_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CDevices_CGeolocation_CIGeovisitMonitorStatics_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CDevices_CGeolocation_CIGeovisitMonitorStatics_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CDevices_CGeolocation_CIGeovisitMonitorStaticsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CGeolocation_CIGeovisitMonitorStatics* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CGeolocation_CIGeovisitMonitorStatics* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CGeolocation_CIGeovisitMonitorStatics* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CGeolocation_CIGeovisitMonitorStatics* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CGeolocation_CIGeovisitMonitorStatics* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CGeolocation_CIGeovisitMonitorStatics* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetLastReportAsync)(__x_ABI_CWindows_CDevices_CGeolocation_CIGeovisitMonitorStatics* This,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CGeolocation__CGeovisit** value);

        END_INTERFACE
    } __x_ABI_CWindows_CDevices_CGeolocation_CIGeovisitMonitorStaticsVtbl;

    interface __x_ABI_CWindows_CDevices_CGeolocation_CIGeovisitMonitorStatics
    {
        CONST_VTBL struct __x_ABI_CWindows_CDevices_CGeolocation_CIGeovisitMonitorStaticsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CGeolocation_CIGeovisitMonitorStatics;
#endif /* !defined(____x_ABI_CWindows_CDevices_CGeolocation_CIGeovisitMonitorStatics_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CDevices_CGeolocation_CIGeovisitStateChangedEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CDevices_CGeolocation_CIGeovisitStateChangedEventArgs_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CDevices_CGeolocation_CIGeovisitStateChangedEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CGeolocation_CIGeovisitStateChangedEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CGeolocation_CIGeovisitStateChangedEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CGeolocation_CIGeovisitStateChangedEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CGeolocation_CIGeovisitStateChangedEventArgs* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CGeolocation_CIGeovisitStateChangedEventArgs* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CGeolocation_CIGeovisitStateChangedEventArgs* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Visit)(__x_ABI_CWindows_CDevices_CGeolocation_CIGeovisitStateChangedEventArgs* This,
        __x_ABI_CWindows_CDevices_CGeolocation_CIGeovisit** value);

        END_INTERFACE
    } __x_ABI_CWindows_CDevices_CGeolocation_CIGeovisitStateChangedEventArgsVtbl;

    interface __x_ABI_CWindows_CDevices_CGeolocation_CIGeovisitStateChangedEventArgs
    {
        CONST_VTBL struct __x_ABI_CWindows_CDevices_CGeolocation_CIGeovisitStateChangedEventArgsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CGeolocation_CIGeovisitStateChangedEventArgs;
#endif /* !defined(____x_ABI_CWindows_CDevices_CGeolocation_CIGeovisitStateChangedEventArgs_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CDevices_CGeolocation_CIGeovisitTriggerDetails_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CDevices_CGeolocation_CIGeovisitTriggerDetails_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CDevices_CGeolocation_CIGeovisitTriggerDetailsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CGeolocation_CIGeovisitTriggerDetails* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CGeolocation_CIGeovisitTriggerDetails* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CGeolocation_CIGeovisitTriggerDetails* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CGeolocation_CIGeovisitTriggerDetails* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CGeolocation_CIGeovisitTriggerDetails* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CGeolocation_CIGeovisitTriggerDetails* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* ReadReports)(__x_ABI_CWindows_CDevices_CGeolocation_CIGeovisitTriggerDetails* This,
        __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CGeolocation__CGeovisit** values);

        END_INTERFACE
    } __x_ABI_CWindows_CDevices_CGeolocation_CIGeovisitTriggerDetailsVtbl;

    interface __x_ABI_CWindows_CDevices_CGeolocation_CIGeovisitTriggerDetails
    {
        CONST_VTBL struct __x_ABI_CWindows_CDevices_CGeolocation_CIGeovisitTriggerDetailsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CGeolocation_CIGeovisitTriggerDetails;
#endif /* !defined(____x_ABI_CWindows_CDevices_CGeolocation_CIGeovisitTriggerDetails_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CDevices_CGeolocation_CIPositionChangedEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CDevices_CGeolocation_CIPositionChangedEventArgs_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CDevices_CGeolocation_CIPositionChangedEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CGeolocation_CIPositionChangedEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CGeolocation_CIPositionChangedEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CGeolocation_CIPositionChangedEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CGeolocation_CIPositionChangedEventArgs* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CGeolocation_CIPositionChangedEventArgs* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CGeolocation_CIPositionChangedEventArgs* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Position)(__x_ABI_CWindows_CDevices_CGeolocation_CIPositionChangedEventArgs* This,
        __x_ABI_CWindows_CDevices_CGeolocation_CIGeoposition** value);

        END_INTERFACE
    } __x_ABI_CWindows_CDevices_CGeolocation_CIPositionChangedEventArgsVtbl;

    interface __x_ABI_CWindows_CDevices_CGeolocation_CIPositionChangedEventArgs
    {
        CONST_VTBL struct __x_ABI_CWindows_CDevices_CGeolocation_CIPositionChangedEventArgsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CGeolocation_CIPositionChangedEventArgs;
#endif /* !defined(____x_ABI_CWindows_CDevices_CGeolocation_CIPositionChangedEventArgs_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CDevices_CGeolocation_CIStatusChangedEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CDevices_CGeolocation_CIStatusChangedEventArgs_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CDevices_CGeolocation_CIStatusChangedEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CGeolocation_CIStatusChangedEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CGeolocation_CIStatusChangedEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CGeolocation_CIStatusChangedEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CGeolocation_CIStatusChangedEventArgs* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CGeolocation_CIStatusChangedEventArgs* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CGeolocation_CIStatusChangedEventArgs* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Status)(__x_ABI_CWindows_CDevices_CGeolocation_CIStatusChangedEventArgs* This,
        enum __x_ABI_CWindows_CDevices_CGeolocation_CPositionStatus* value);

        END_INTERFACE
    } __x_ABI_CWindows_CDevices_CGeolocation_CIStatusChangedEventArgsVtbl;

    interface __x_ABI_CWindows_CDevices_CGeolocation_CIStatusChangedEventArgs
    {
        CONST_VTBL struct __x_ABI_CWindows_CDevices_CGeolocation_CIStatusChangedEventArgsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CGeolocation_CIStatusChangedEventArgs;
#endif /* !defined(____x_ABI_CWindows_CDevices_CGeolocation_CIStatusChangedEventArgs_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CDevices_CGeolocation_CIVenueData_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CDevices_CGeolocation_CIVenueData_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CDevices_CGeolocation_CIVenueDataVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CGeolocation_CIVenueData* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CGeolocation_CIVenueData* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CGeolocation_CIVenueData* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CGeolocation_CIVenueData* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CGeolocation_CIVenueData* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CGeolocation_CIVenueData* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Id)(__x_ABI_CWindows_CDevices_CGeolocation_CIVenueData* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_Level)(__x_ABI_CWindows_CDevices_CGeolocation_CIVenueData* This,
        HSTRING* value);

        END_INTERFACE
    } __x_ABI_CWindows_CDevices_CGeolocation_CIVenueDataVtbl;

    interface __x_ABI_CWindows_CDevices_CGeolocation_CIVenueData
    {
        CONST_VTBL struct __x_ABI_CWindows_CDevices_CGeolocation_CIVenueDataVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CGeolocation_CIVenueData;
#endif /* !defined(____x_ABI_CWindows_CDevices_CGeolocation_CIVenueData_INTERFACE_DEFINED__) */
    

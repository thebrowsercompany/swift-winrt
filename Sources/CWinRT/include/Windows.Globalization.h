// WARNING: Please don't edit this file. It was generated by Swift/WinRT v0.0.1

#pragma once
// Header files for imported files
#include <inspectable.h>
#include <EventToken.h>
#include <windowscontracts.h>
#include "Windows.Foundation.h"
#include "Windows.System.h"
// Importing Collections header
#include "Windows.Foundation.Collections.h"

/* Forward Declarations */
#ifndef ____x_ABI_CWindows_CGlobalization_CIApplicationLanguagesStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CGlobalization_CIApplicationLanguagesStatics_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CGlobalization_CIApplicationLanguagesStatics __x_ABI_CWindows_CGlobalization_CIApplicationLanguagesStatics;

#endif // ____x_ABI_CWindows_CGlobalization_CIApplicationLanguagesStatics_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CGlobalization_CIApplicationLanguagesStatics2_FWD_DEFINED__
#define ____x_ABI_CWindows_CGlobalization_CIApplicationLanguagesStatics2_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CGlobalization_CIApplicationLanguagesStatics2 __x_ABI_CWindows_CGlobalization_CIApplicationLanguagesStatics2;

#endif // ____x_ABI_CWindows_CGlobalization_CIApplicationLanguagesStatics2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CGlobalization_CICalendar_FWD_DEFINED__
#define ____x_ABI_CWindows_CGlobalization_CICalendar_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CGlobalization_CICalendar __x_ABI_CWindows_CGlobalization_CICalendar;

#endif // ____x_ABI_CWindows_CGlobalization_CICalendar_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CGlobalization_CICalendarFactory_FWD_DEFINED__
#define ____x_ABI_CWindows_CGlobalization_CICalendarFactory_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CGlobalization_CICalendarFactory __x_ABI_CWindows_CGlobalization_CICalendarFactory;

#endif // ____x_ABI_CWindows_CGlobalization_CICalendarFactory_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CGlobalization_CICalendarFactory2_FWD_DEFINED__
#define ____x_ABI_CWindows_CGlobalization_CICalendarFactory2_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CGlobalization_CICalendarFactory2 __x_ABI_CWindows_CGlobalization_CICalendarFactory2;

#endif // ____x_ABI_CWindows_CGlobalization_CICalendarFactory2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CGlobalization_CICalendarIdentifiersStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CGlobalization_CICalendarIdentifiersStatics_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CGlobalization_CICalendarIdentifiersStatics __x_ABI_CWindows_CGlobalization_CICalendarIdentifiersStatics;

#endif // ____x_ABI_CWindows_CGlobalization_CICalendarIdentifiersStatics_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CGlobalization_CICalendarIdentifiersStatics2_FWD_DEFINED__
#define ____x_ABI_CWindows_CGlobalization_CICalendarIdentifiersStatics2_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CGlobalization_CICalendarIdentifiersStatics2 __x_ABI_CWindows_CGlobalization_CICalendarIdentifiersStatics2;

#endif // ____x_ABI_CWindows_CGlobalization_CICalendarIdentifiersStatics2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CGlobalization_CICalendarIdentifiersStatics3_FWD_DEFINED__
#define ____x_ABI_CWindows_CGlobalization_CICalendarIdentifiersStatics3_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CGlobalization_CICalendarIdentifiersStatics3 __x_ABI_CWindows_CGlobalization_CICalendarIdentifiersStatics3;

#endif // ____x_ABI_CWindows_CGlobalization_CICalendarIdentifiersStatics3_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CGlobalization_CIClockIdentifiersStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CGlobalization_CIClockIdentifiersStatics_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CGlobalization_CIClockIdentifiersStatics __x_ABI_CWindows_CGlobalization_CIClockIdentifiersStatics;

#endif // ____x_ABI_CWindows_CGlobalization_CIClockIdentifiersStatics_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CGlobalization_CICurrencyAmount_FWD_DEFINED__
#define ____x_ABI_CWindows_CGlobalization_CICurrencyAmount_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CGlobalization_CICurrencyAmount __x_ABI_CWindows_CGlobalization_CICurrencyAmount;

#endif // ____x_ABI_CWindows_CGlobalization_CICurrencyAmount_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CGlobalization_CICurrencyAmountFactory_FWD_DEFINED__
#define ____x_ABI_CWindows_CGlobalization_CICurrencyAmountFactory_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CGlobalization_CICurrencyAmountFactory __x_ABI_CWindows_CGlobalization_CICurrencyAmountFactory;

#endif // ____x_ABI_CWindows_CGlobalization_CICurrencyAmountFactory_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CGlobalization_CICurrencyIdentifiersStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CGlobalization_CICurrencyIdentifiersStatics_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CGlobalization_CICurrencyIdentifiersStatics __x_ABI_CWindows_CGlobalization_CICurrencyIdentifiersStatics;

#endif // ____x_ABI_CWindows_CGlobalization_CICurrencyIdentifiersStatics_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CGlobalization_CICurrencyIdentifiersStatics2_FWD_DEFINED__
#define ____x_ABI_CWindows_CGlobalization_CICurrencyIdentifiersStatics2_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CGlobalization_CICurrencyIdentifiersStatics2 __x_ABI_CWindows_CGlobalization_CICurrencyIdentifiersStatics2;

#endif // ____x_ABI_CWindows_CGlobalization_CICurrencyIdentifiersStatics2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CGlobalization_CICurrencyIdentifiersStatics3_FWD_DEFINED__
#define ____x_ABI_CWindows_CGlobalization_CICurrencyIdentifiersStatics3_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CGlobalization_CICurrencyIdentifiersStatics3 __x_ABI_CWindows_CGlobalization_CICurrencyIdentifiersStatics3;

#endif // ____x_ABI_CWindows_CGlobalization_CICurrencyIdentifiersStatics3_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CGlobalization_CIGeographicRegion_FWD_DEFINED__
#define ____x_ABI_CWindows_CGlobalization_CIGeographicRegion_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CGlobalization_CIGeographicRegion __x_ABI_CWindows_CGlobalization_CIGeographicRegion;

#endif // ____x_ABI_CWindows_CGlobalization_CIGeographicRegion_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CGlobalization_CIGeographicRegionFactory_FWD_DEFINED__
#define ____x_ABI_CWindows_CGlobalization_CIGeographicRegionFactory_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CGlobalization_CIGeographicRegionFactory __x_ABI_CWindows_CGlobalization_CIGeographicRegionFactory;

#endif // ____x_ABI_CWindows_CGlobalization_CIGeographicRegionFactory_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CGlobalization_CIGeographicRegionStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CGlobalization_CIGeographicRegionStatics_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CGlobalization_CIGeographicRegionStatics __x_ABI_CWindows_CGlobalization_CIGeographicRegionStatics;

#endif // ____x_ABI_CWindows_CGlobalization_CIGeographicRegionStatics_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CGlobalization_CIJapanesePhoneme_FWD_DEFINED__
#define ____x_ABI_CWindows_CGlobalization_CIJapanesePhoneme_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CGlobalization_CIJapanesePhoneme __x_ABI_CWindows_CGlobalization_CIJapanesePhoneme;

#endif // ____x_ABI_CWindows_CGlobalization_CIJapanesePhoneme_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CGlobalization_CIJapanesePhoneticAnalyzerStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CGlobalization_CIJapanesePhoneticAnalyzerStatics_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CGlobalization_CIJapanesePhoneticAnalyzerStatics __x_ABI_CWindows_CGlobalization_CIJapanesePhoneticAnalyzerStatics;

#endif // ____x_ABI_CWindows_CGlobalization_CIJapanesePhoneticAnalyzerStatics_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CGlobalization_CILanguage_FWD_DEFINED__
#define ____x_ABI_CWindows_CGlobalization_CILanguage_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CGlobalization_CILanguage __x_ABI_CWindows_CGlobalization_CILanguage;

#endif // ____x_ABI_CWindows_CGlobalization_CILanguage_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CGlobalization_CILanguage2_FWD_DEFINED__
#define ____x_ABI_CWindows_CGlobalization_CILanguage2_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CGlobalization_CILanguage2 __x_ABI_CWindows_CGlobalization_CILanguage2;

#endif // ____x_ABI_CWindows_CGlobalization_CILanguage2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CGlobalization_CILanguageExtensionSubtags_FWD_DEFINED__
#define ____x_ABI_CWindows_CGlobalization_CILanguageExtensionSubtags_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CGlobalization_CILanguageExtensionSubtags __x_ABI_CWindows_CGlobalization_CILanguageExtensionSubtags;

#endif // ____x_ABI_CWindows_CGlobalization_CILanguageExtensionSubtags_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CGlobalization_CILanguageFactory_FWD_DEFINED__
#define ____x_ABI_CWindows_CGlobalization_CILanguageFactory_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CGlobalization_CILanguageFactory __x_ABI_CWindows_CGlobalization_CILanguageFactory;

#endif // ____x_ABI_CWindows_CGlobalization_CILanguageFactory_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CGlobalization_CILanguageStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CGlobalization_CILanguageStatics_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CGlobalization_CILanguageStatics __x_ABI_CWindows_CGlobalization_CILanguageStatics;

#endif // ____x_ABI_CWindows_CGlobalization_CILanguageStatics_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CGlobalization_CILanguageStatics2_FWD_DEFINED__
#define ____x_ABI_CWindows_CGlobalization_CILanguageStatics2_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CGlobalization_CILanguageStatics2 __x_ABI_CWindows_CGlobalization_CILanguageStatics2;

#endif // ____x_ABI_CWindows_CGlobalization_CILanguageStatics2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CGlobalization_CINumeralSystemIdentifiersStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CGlobalization_CINumeralSystemIdentifiersStatics_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CGlobalization_CINumeralSystemIdentifiersStatics __x_ABI_CWindows_CGlobalization_CINumeralSystemIdentifiersStatics;

#endif // ____x_ABI_CWindows_CGlobalization_CINumeralSystemIdentifiersStatics_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CGlobalization_CINumeralSystemIdentifiersStatics2_FWD_DEFINED__
#define ____x_ABI_CWindows_CGlobalization_CINumeralSystemIdentifiersStatics2_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CGlobalization_CINumeralSystemIdentifiersStatics2 __x_ABI_CWindows_CGlobalization_CINumeralSystemIdentifiersStatics2;

#endif // ____x_ABI_CWindows_CGlobalization_CINumeralSystemIdentifiersStatics2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CGlobalization_CITimeZoneOnCalendar_FWD_DEFINED__
#define ____x_ABI_CWindows_CGlobalization_CITimeZoneOnCalendar_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CGlobalization_CITimeZoneOnCalendar __x_ABI_CWindows_CGlobalization_CITimeZoneOnCalendar;

#endif // ____x_ABI_CWindows_CGlobalization_CITimeZoneOnCalendar_FWD_DEFINED__

// Parameterized interface forward declarations (C)

// Collection interface definitions

#if !defined(____x_ABI_C__FIIterator_1_HSTRING_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterator_1_HSTRING_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterator_1_HSTRING __x_ABI_C__FIIterator_1_HSTRING;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterator_1_HSTRING;

    typedef struct __x_ABI_C__FIIterator_1_HSTRINGVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterator_1_HSTRING* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterator_1_HSTRING* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterator_1_HSTRING* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterator_1_HSTRING* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterator_1_HSTRING* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterator_1_HSTRING* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Current)(__x_ABI_C__FIIterator_1_HSTRING* This,
        HSTRING* result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__x_ABI_C__FIIterator_1_HSTRING* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__x_ABI_C__FIIterator_1_HSTRING* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIIterator_1_HSTRING* This,
        UINT32 itemsLength,
        HSTRING* items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIIterator_1_HSTRINGVtbl;

    interface __x_ABI_C__FIIterator_1_HSTRING
    {
        CONST_VTBL struct __x_ABI_C__FIIterator_1_HSTRINGVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterator_1_HSTRING_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterable_1_HSTRING_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterable_1_HSTRING_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterable_1_HSTRING __x_ABI_C__FIIterable_1_HSTRING;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterable_1_HSTRING;

    typedef struct __x_ABI_C__FIIterable_1_HSTRINGVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterable_1_HSTRING* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterable_1_HSTRING* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterable_1_HSTRING* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterable_1_HSTRING* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterable_1_HSTRING* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterable_1_HSTRING* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* First)(__x_ABI_C__FIIterable_1_HSTRING* This,
        __x_ABI_C__FIIterator_1_HSTRING** result);

        END_INTERFACE
    } __x_ABI_C__FIIterable_1_HSTRINGVtbl;

    interface __x_ABI_C__FIIterable_1_HSTRING
    {
        CONST_VTBL struct __x_ABI_C__FIIterable_1_HSTRINGVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterable_1_HSTRING_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterator_1___x_ABI_CWindows__CGlobalization__CJapanesePhoneme_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CGlobalization__CJapanesePhoneme_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CGlobalization__CJapanesePhoneme __x_ABI_C__FIIterator_1___x_ABI_CWindows__CGlobalization__CJapanesePhoneme;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterator_1___x_ABI_CWindows__CGlobalization__CJapanesePhoneme;

    typedef struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CGlobalization__CJapanesePhonemeVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CGlobalization__CJapanesePhoneme* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CGlobalization__CJapanesePhoneme* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CGlobalization__CJapanesePhoneme* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CGlobalization__CJapanesePhoneme* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CGlobalization__CJapanesePhoneme* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CGlobalization__CJapanesePhoneme* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Current)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CGlobalization__CJapanesePhoneme* This,
        __x_ABI_CWindows_CGlobalization_CIJapanesePhoneme** result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CGlobalization__CJapanesePhoneme* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CGlobalization__CJapanesePhoneme* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CGlobalization__CJapanesePhoneme* This,
        UINT32 itemsLength,
        __x_ABI_CWindows_CGlobalization_CIJapanesePhoneme** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIIterator_1___x_ABI_CWindows__CGlobalization__CJapanesePhonemeVtbl;

    interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CGlobalization__CJapanesePhoneme
    {
        CONST_VTBL struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CGlobalization__CJapanesePhonemeVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CGlobalization__CJapanesePhoneme_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterable_1___x_ABI_CWindows__CGlobalization__CJapanesePhoneme_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CGlobalization__CJapanesePhoneme_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CGlobalization__CJapanesePhoneme __x_ABI_C__FIIterable_1___x_ABI_CWindows__CGlobalization__CJapanesePhoneme;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterable_1___x_ABI_CWindows__CGlobalization__CJapanesePhoneme;

    typedef struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CGlobalization__CJapanesePhonemeVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CGlobalization__CJapanesePhoneme* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CGlobalization__CJapanesePhoneme* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CGlobalization__CJapanesePhoneme* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CGlobalization__CJapanesePhoneme* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CGlobalization__CJapanesePhoneme* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CGlobalization__CJapanesePhoneme* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* First)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CGlobalization__CJapanesePhoneme* This,
        __x_ABI_C__FIIterator_1___x_ABI_CWindows__CGlobalization__CJapanesePhoneme** result);

        END_INTERFACE
    } __x_ABI_C__FIIterable_1___x_ABI_CWindows__CGlobalization__CJapanesePhonemeVtbl;

    interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CGlobalization__CJapanesePhoneme
    {
        CONST_VTBL struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CGlobalization__CJapanesePhonemeVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CGlobalization__CJapanesePhoneme_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVectorView_1_HSTRING_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVectorView_1_HSTRING_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVectorView_1_HSTRING __x_ABI_C__FIVectorView_1_HSTRING;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVectorView_1_HSTRING;

    typedef struct __x_ABI_C__FIVectorView_1_HSTRINGVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVectorView_1_HSTRING* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVectorView_1_HSTRING* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVectorView_1_HSTRING* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVectorView_1_HSTRING* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVectorView_1_HSTRING* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVectorView_1_HSTRING* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVectorView_1_HSTRING* This,
        UINT32 index,
        HSTRING* result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVectorView_1_HSTRING* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVectorView_1_HSTRING* This,
        HSTRING value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVectorView_1_HSTRING* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        HSTRING* items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIVectorView_1_HSTRINGVtbl;

    interface __x_ABI_C__FIVectorView_1_HSTRING
    {
        CONST_VTBL struct __x_ABI_C__FIVectorView_1_HSTRINGVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVectorView_1_HSTRING_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CGlobalization__CJapanesePhoneme_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CGlobalization__CJapanesePhoneme_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CGlobalization__CJapanesePhoneme __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CGlobalization__CJapanesePhoneme;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CGlobalization__CJapanesePhoneme;

    typedef struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CGlobalization__CJapanesePhonemeVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CGlobalization__CJapanesePhoneme* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CGlobalization__CJapanesePhoneme* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CGlobalization__CJapanesePhoneme* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CGlobalization__CJapanesePhoneme* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CGlobalization__CJapanesePhoneme* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CGlobalization__CJapanesePhoneme* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CGlobalization__CJapanesePhoneme* This,
        UINT32 index,
        __x_ABI_CWindows_CGlobalization_CIJapanesePhoneme** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CGlobalization__CJapanesePhoneme* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CGlobalization__CJapanesePhoneme* This,
        __x_ABI_CWindows_CGlobalization_CIJapanesePhoneme* value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CGlobalization__CJapanesePhoneme* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        __x_ABI_CWindows_CGlobalization_CIJapanesePhoneme** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CGlobalization__CJapanesePhonemeVtbl;

    interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CGlobalization__CJapanesePhoneme
    {
        CONST_VTBL struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CGlobalization__CJapanesePhonemeVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CGlobalization__CJapanesePhoneme_INTERFACE_DEFINED__
    
typedef struct __x_ABI_CWindows_CFoundation_CDateTime __x_ABI_CWindows_CFoundation_CDateTime;

#ifndef ____x_ABI_CWindows_CSystem_CIUser_FWD_DEFINED__
#define ____x_ABI_CWindows_CSystem_CIUser_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CSystem_CIUser __x_ABI_CWindows_CSystem_CIUser;

#endif // ____x_ABI_CWindows_CSystem_CIUser_FWD_DEFINED__

typedef enum __x_ABI_CWindows_CGlobalization_CDayOfWeek __x_ABI_CWindows_CGlobalization_CDayOfWeek;

typedef enum __x_ABI_CWindows_CGlobalization_CLanguageLayoutDirection __x_ABI_CWindows_CGlobalization_CLanguageLayoutDirection;

enum __x_ABI_CWindows_CGlobalization_CDayOfWeek
    {
        __x_ABI_CWindows_CGlobalization_CDayOfWeek_Sunday = 0,
    __x_ABI_CWindows_CGlobalization_CDayOfWeek_Monday = 1,
    __x_ABI_CWindows_CGlobalization_CDayOfWeek_Tuesday = 2,
    __x_ABI_CWindows_CGlobalization_CDayOfWeek_Wednesday = 3,
    __x_ABI_CWindows_CGlobalization_CDayOfWeek_Thursday = 4,
    __x_ABI_CWindows_CGlobalization_CDayOfWeek_Friday = 5,
    __x_ABI_CWindows_CGlobalization_CDayOfWeek_Saturday = 6,
};

enum __x_ABI_CWindows_CGlobalization_CLanguageLayoutDirection
    {
        __x_ABI_CWindows_CGlobalization_CLanguageLayoutDirection_Ltr = 0,
    __x_ABI_CWindows_CGlobalization_CLanguageLayoutDirection_Rtl = 1,
    __x_ABI_CWindows_CGlobalization_CLanguageLayoutDirection_TtbLtr = 2,
    __x_ABI_CWindows_CGlobalization_CLanguageLayoutDirection_TtbRtl = 3,
};

#if !defined(____x_ABI_CWindows_CGlobalization_CIApplicationLanguagesStatics_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CGlobalization_CIApplicationLanguagesStatics_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CGlobalization_CIApplicationLanguagesStaticsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CGlobalization_CIApplicationLanguagesStatics* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CGlobalization_CIApplicationLanguagesStatics* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CGlobalization_CIApplicationLanguagesStatics* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CGlobalization_CIApplicationLanguagesStatics* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CGlobalization_CIApplicationLanguagesStatics* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CGlobalization_CIApplicationLanguagesStatics* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_PrimaryLanguageOverride)(__x_ABI_CWindows_CGlobalization_CIApplicationLanguagesStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* put_PrimaryLanguageOverride)(__x_ABI_CWindows_CGlobalization_CIApplicationLanguagesStatics* This,
        HSTRING value);
    HRESULT (STDMETHODCALLTYPE* get_Languages)(__x_ABI_CWindows_CGlobalization_CIApplicationLanguagesStatics* This,
        __x_ABI_C__FIVectorView_1_HSTRING** value);
    HRESULT (STDMETHODCALLTYPE* get_ManifestLanguages)(__x_ABI_CWindows_CGlobalization_CIApplicationLanguagesStatics* This,
        __x_ABI_C__FIVectorView_1_HSTRING** value);

        END_INTERFACE
    } __x_ABI_CWindows_CGlobalization_CIApplicationLanguagesStaticsVtbl;

    interface __x_ABI_CWindows_CGlobalization_CIApplicationLanguagesStatics
    {
        CONST_VTBL struct __x_ABI_CWindows_CGlobalization_CIApplicationLanguagesStaticsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CGlobalization_CIApplicationLanguagesStatics;
#endif /* !defined(____x_ABI_CWindows_CGlobalization_CIApplicationLanguagesStatics_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CGlobalization_CIApplicationLanguagesStatics2_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CGlobalization_CIApplicationLanguagesStatics2_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CGlobalization_CIApplicationLanguagesStatics2Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CGlobalization_CIApplicationLanguagesStatics2* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CGlobalization_CIApplicationLanguagesStatics2* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CGlobalization_CIApplicationLanguagesStatics2* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CGlobalization_CIApplicationLanguagesStatics2* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CGlobalization_CIApplicationLanguagesStatics2* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CGlobalization_CIApplicationLanguagesStatics2* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetLanguagesForUser)(__x_ABI_CWindows_CGlobalization_CIApplicationLanguagesStatics2* This,
        __x_ABI_CWindows_CSystem_CIUser* user,
        __x_ABI_C__FIVectorView_1_HSTRING** value);

        END_INTERFACE
    } __x_ABI_CWindows_CGlobalization_CIApplicationLanguagesStatics2Vtbl;

    interface __x_ABI_CWindows_CGlobalization_CIApplicationLanguagesStatics2
    {
        CONST_VTBL struct __x_ABI_CWindows_CGlobalization_CIApplicationLanguagesStatics2Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CGlobalization_CIApplicationLanguagesStatics2;
#endif /* !defined(____x_ABI_CWindows_CGlobalization_CIApplicationLanguagesStatics2_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CGlobalization_CICalendar_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CGlobalization_CICalendar_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CGlobalization_CICalendarVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CGlobalization_CICalendar* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CGlobalization_CICalendar* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CGlobalization_CICalendar* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CGlobalization_CICalendar* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CGlobalization_CICalendar* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CGlobalization_CICalendar* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* Clone)(__x_ABI_CWindows_CGlobalization_CICalendar* This,
        __x_ABI_CWindows_CGlobalization_CICalendar** value);
    HRESULT (STDMETHODCALLTYPE* SetToMin)(__x_ABI_CWindows_CGlobalization_CICalendar* This);
    HRESULT (STDMETHODCALLTYPE* SetToMax)(__x_ABI_CWindows_CGlobalization_CICalendar* This);
    HRESULT (STDMETHODCALLTYPE* get_Languages)(__x_ABI_CWindows_CGlobalization_CICalendar* This,
        __x_ABI_C__FIVectorView_1_HSTRING** value);
    HRESULT (STDMETHODCALLTYPE* get_NumeralSystem)(__x_ABI_CWindows_CGlobalization_CICalendar* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* put_NumeralSystem)(__x_ABI_CWindows_CGlobalization_CICalendar* This,
        HSTRING value);
    HRESULT (STDMETHODCALLTYPE* GetCalendarSystem)(__x_ABI_CWindows_CGlobalization_CICalendar* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* ChangeCalendarSystem)(__x_ABI_CWindows_CGlobalization_CICalendar* This,
        HSTRING value);
    HRESULT (STDMETHODCALLTYPE* GetClock)(__x_ABI_CWindows_CGlobalization_CICalendar* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* ChangeClock)(__x_ABI_CWindows_CGlobalization_CICalendar* This,
        HSTRING value);
    HRESULT (STDMETHODCALLTYPE* GetDateTime)(__x_ABI_CWindows_CGlobalization_CICalendar* This,
        struct __x_ABI_CWindows_CFoundation_CDateTime* result);
    HRESULT (STDMETHODCALLTYPE* SetDateTime)(__x_ABI_CWindows_CGlobalization_CICalendar* This,
        struct __x_ABI_CWindows_CFoundation_CDateTime value);
    HRESULT (STDMETHODCALLTYPE* SetToNow)(__x_ABI_CWindows_CGlobalization_CICalendar* This);
    HRESULT (STDMETHODCALLTYPE* get_FirstEra)(__x_ABI_CWindows_CGlobalization_CICalendar* This,
        INT32* value);
    HRESULT (STDMETHODCALLTYPE* get_LastEra)(__x_ABI_CWindows_CGlobalization_CICalendar* This,
        INT32* value);
    HRESULT (STDMETHODCALLTYPE* get_NumberOfEras)(__x_ABI_CWindows_CGlobalization_CICalendar* This,
        INT32* value);
    HRESULT (STDMETHODCALLTYPE* get_Era)(__x_ABI_CWindows_CGlobalization_CICalendar* This,
        INT32* value);
    HRESULT (STDMETHODCALLTYPE* put_Era)(__x_ABI_CWindows_CGlobalization_CICalendar* This,
        INT32 value);
    HRESULT (STDMETHODCALLTYPE* AddEras)(__x_ABI_CWindows_CGlobalization_CICalendar* This,
        INT32 eras);
    HRESULT (STDMETHODCALLTYPE* EraAsFullString)(__x_ABI_CWindows_CGlobalization_CICalendar* This,
        HSTRING* result);
    HRESULT (STDMETHODCALLTYPE* EraAsString)(__x_ABI_CWindows_CGlobalization_CICalendar* This,
        INT32 idealLength,
        HSTRING* result);
    HRESULT (STDMETHODCALLTYPE* get_FirstYearInThisEra)(__x_ABI_CWindows_CGlobalization_CICalendar* This,
        INT32* value);
    HRESULT (STDMETHODCALLTYPE* get_LastYearInThisEra)(__x_ABI_CWindows_CGlobalization_CICalendar* This,
        INT32* value);
    HRESULT (STDMETHODCALLTYPE* get_NumberOfYearsInThisEra)(__x_ABI_CWindows_CGlobalization_CICalendar* This,
        INT32* value);
    HRESULT (STDMETHODCALLTYPE* get_Year)(__x_ABI_CWindows_CGlobalization_CICalendar* This,
        INT32* value);
    HRESULT (STDMETHODCALLTYPE* put_Year)(__x_ABI_CWindows_CGlobalization_CICalendar* This,
        INT32 value);
    HRESULT (STDMETHODCALLTYPE* AddYears)(__x_ABI_CWindows_CGlobalization_CICalendar* This,
        INT32 years);
    HRESULT (STDMETHODCALLTYPE* YearAsString)(__x_ABI_CWindows_CGlobalization_CICalendar* This,
        HSTRING* result);
    HRESULT (STDMETHODCALLTYPE* YearAsTruncatedString)(__x_ABI_CWindows_CGlobalization_CICalendar* This,
        INT32 remainingDigits,
        HSTRING* result);
    HRESULT (STDMETHODCALLTYPE* YearAsPaddedString)(__x_ABI_CWindows_CGlobalization_CICalendar* This,
        INT32 minDigits,
        HSTRING* result);
    HRESULT (STDMETHODCALLTYPE* get_FirstMonthInThisYear)(__x_ABI_CWindows_CGlobalization_CICalendar* This,
        INT32* value);
    HRESULT (STDMETHODCALLTYPE* get_LastMonthInThisYear)(__x_ABI_CWindows_CGlobalization_CICalendar* This,
        INT32* value);
    HRESULT (STDMETHODCALLTYPE* get_NumberOfMonthsInThisYear)(__x_ABI_CWindows_CGlobalization_CICalendar* This,
        INT32* value);
    HRESULT (STDMETHODCALLTYPE* get_Month)(__x_ABI_CWindows_CGlobalization_CICalendar* This,
        INT32* value);
    HRESULT (STDMETHODCALLTYPE* put_Month)(__x_ABI_CWindows_CGlobalization_CICalendar* This,
        INT32 value);
    HRESULT (STDMETHODCALLTYPE* AddMonths)(__x_ABI_CWindows_CGlobalization_CICalendar* This,
        INT32 months);
    HRESULT (STDMETHODCALLTYPE* MonthAsFullString)(__x_ABI_CWindows_CGlobalization_CICalendar* This,
        HSTRING* result);
    HRESULT (STDMETHODCALLTYPE* MonthAsString)(__x_ABI_CWindows_CGlobalization_CICalendar* This,
        INT32 idealLength,
        HSTRING* result);
    HRESULT (STDMETHODCALLTYPE* MonthAsFullSoloString)(__x_ABI_CWindows_CGlobalization_CICalendar* This,
        HSTRING* result);
    HRESULT (STDMETHODCALLTYPE* MonthAsSoloString)(__x_ABI_CWindows_CGlobalization_CICalendar* This,
        INT32 idealLength,
        HSTRING* result);
    HRESULT (STDMETHODCALLTYPE* MonthAsNumericString)(__x_ABI_CWindows_CGlobalization_CICalendar* This,
        HSTRING* result);
    HRESULT (STDMETHODCALLTYPE* MonthAsPaddedNumericString)(__x_ABI_CWindows_CGlobalization_CICalendar* This,
        INT32 minDigits,
        HSTRING* result);
    HRESULT (STDMETHODCALLTYPE* AddWeeks)(__x_ABI_CWindows_CGlobalization_CICalendar* This,
        INT32 weeks);
    HRESULT (STDMETHODCALLTYPE* get_FirstDayInThisMonth)(__x_ABI_CWindows_CGlobalization_CICalendar* This,
        INT32* value);
    HRESULT (STDMETHODCALLTYPE* get_LastDayInThisMonth)(__x_ABI_CWindows_CGlobalization_CICalendar* This,
        INT32* value);
    HRESULT (STDMETHODCALLTYPE* get_NumberOfDaysInThisMonth)(__x_ABI_CWindows_CGlobalization_CICalendar* This,
        INT32* value);
    HRESULT (STDMETHODCALLTYPE* get_Day)(__x_ABI_CWindows_CGlobalization_CICalendar* This,
        INT32* value);
    HRESULT (STDMETHODCALLTYPE* put_Day)(__x_ABI_CWindows_CGlobalization_CICalendar* This,
        INT32 value);
    HRESULT (STDMETHODCALLTYPE* AddDays)(__x_ABI_CWindows_CGlobalization_CICalendar* This,
        INT32 days);
    HRESULT (STDMETHODCALLTYPE* DayAsString)(__x_ABI_CWindows_CGlobalization_CICalendar* This,
        HSTRING* result);
    HRESULT (STDMETHODCALLTYPE* DayAsPaddedString)(__x_ABI_CWindows_CGlobalization_CICalendar* This,
        INT32 minDigits,
        HSTRING* result);
    HRESULT (STDMETHODCALLTYPE* get_DayOfWeek)(__x_ABI_CWindows_CGlobalization_CICalendar* This,
        enum __x_ABI_CWindows_CGlobalization_CDayOfWeek* value);
    HRESULT (STDMETHODCALLTYPE* DayOfWeekAsFullString)(__x_ABI_CWindows_CGlobalization_CICalendar* This,
        HSTRING* result);
    HRESULT (STDMETHODCALLTYPE* DayOfWeekAsString)(__x_ABI_CWindows_CGlobalization_CICalendar* This,
        INT32 idealLength,
        HSTRING* result);
    HRESULT (STDMETHODCALLTYPE* DayOfWeekAsFullSoloString)(__x_ABI_CWindows_CGlobalization_CICalendar* This,
        HSTRING* result);
    HRESULT (STDMETHODCALLTYPE* DayOfWeekAsSoloString)(__x_ABI_CWindows_CGlobalization_CICalendar* This,
        INT32 idealLength,
        HSTRING* result);
    HRESULT (STDMETHODCALLTYPE* get_FirstPeriodInThisDay)(__x_ABI_CWindows_CGlobalization_CICalendar* This,
        INT32* value);
    HRESULT (STDMETHODCALLTYPE* get_LastPeriodInThisDay)(__x_ABI_CWindows_CGlobalization_CICalendar* This,
        INT32* value);
    HRESULT (STDMETHODCALLTYPE* get_NumberOfPeriodsInThisDay)(__x_ABI_CWindows_CGlobalization_CICalendar* This,
        INT32* value);
    HRESULT (STDMETHODCALLTYPE* get_Period)(__x_ABI_CWindows_CGlobalization_CICalendar* This,
        INT32* value);
    HRESULT (STDMETHODCALLTYPE* put_Period)(__x_ABI_CWindows_CGlobalization_CICalendar* This,
        INT32 value);
    HRESULT (STDMETHODCALLTYPE* AddPeriods)(__x_ABI_CWindows_CGlobalization_CICalendar* This,
        INT32 periods);
    HRESULT (STDMETHODCALLTYPE* PeriodAsFullString)(__x_ABI_CWindows_CGlobalization_CICalendar* This,
        HSTRING* result);
    HRESULT (STDMETHODCALLTYPE* PeriodAsString)(__x_ABI_CWindows_CGlobalization_CICalendar* This,
        INT32 idealLength,
        HSTRING* result);
    HRESULT (STDMETHODCALLTYPE* get_FirstHourInThisPeriod)(__x_ABI_CWindows_CGlobalization_CICalendar* This,
        INT32* value);
    HRESULT (STDMETHODCALLTYPE* get_LastHourInThisPeriod)(__x_ABI_CWindows_CGlobalization_CICalendar* This,
        INT32* value);
    HRESULT (STDMETHODCALLTYPE* get_NumberOfHoursInThisPeriod)(__x_ABI_CWindows_CGlobalization_CICalendar* This,
        INT32* value);
    HRESULT (STDMETHODCALLTYPE* get_Hour)(__x_ABI_CWindows_CGlobalization_CICalendar* This,
        INT32* value);
    HRESULT (STDMETHODCALLTYPE* put_Hour)(__x_ABI_CWindows_CGlobalization_CICalendar* This,
        INT32 value);
    HRESULT (STDMETHODCALLTYPE* AddHours)(__x_ABI_CWindows_CGlobalization_CICalendar* This,
        INT32 hours);
    HRESULT (STDMETHODCALLTYPE* HourAsString)(__x_ABI_CWindows_CGlobalization_CICalendar* This,
        HSTRING* result);
    HRESULT (STDMETHODCALLTYPE* HourAsPaddedString)(__x_ABI_CWindows_CGlobalization_CICalendar* This,
        INT32 minDigits,
        HSTRING* result);
    HRESULT (STDMETHODCALLTYPE* get_Minute)(__x_ABI_CWindows_CGlobalization_CICalendar* This,
        INT32* value);
    HRESULT (STDMETHODCALLTYPE* put_Minute)(__x_ABI_CWindows_CGlobalization_CICalendar* This,
        INT32 value);
    HRESULT (STDMETHODCALLTYPE* AddMinutes)(__x_ABI_CWindows_CGlobalization_CICalendar* This,
        INT32 minutes);
    HRESULT (STDMETHODCALLTYPE* MinuteAsString)(__x_ABI_CWindows_CGlobalization_CICalendar* This,
        HSTRING* result);
    HRESULT (STDMETHODCALLTYPE* MinuteAsPaddedString)(__x_ABI_CWindows_CGlobalization_CICalendar* This,
        INT32 minDigits,
        HSTRING* result);
    HRESULT (STDMETHODCALLTYPE* get_Second)(__x_ABI_CWindows_CGlobalization_CICalendar* This,
        INT32* value);
    HRESULT (STDMETHODCALLTYPE* put_Second)(__x_ABI_CWindows_CGlobalization_CICalendar* This,
        INT32 value);
    HRESULT (STDMETHODCALLTYPE* AddSeconds)(__x_ABI_CWindows_CGlobalization_CICalendar* This,
        INT32 seconds);
    HRESULT (STDMETHODCALLTYPE* SecondAsString)(__x_ABI_CWindows_CGlobalization_CICalendar* This,
        HSTRING* result);
    HRESULT (STDMETHODCALLTYPE* SecondAsPaddedString)(__x_ABI_CWindows_CGlobalization_CICalendar* This,
        INT32 minDigits,
        HSTRING* result);
    HRESULT (STDMETHODCALLTYPE* get_Nanosecond)(__x_ABI_CWindows_CGlobalization_CICalendar* This,
        INT32* value);
    HRESULT (STDMETHODCALLTYPE* put_Nanosecond)(__x_ABI_CWindows_CGlobalization_CICalendar* This,
        INT32 value);
    HRESULT (STDMETHODCALLTYPE* AddNanoseconds)(__x_ABI_CWindows_CGlobalization_CICalendar* This,
        INT32 nanoseconds);
    HRESULT (STDMETHODCALLTYPE* NanosecondAsString)(__x_ABI_CWindows_CGlobalization_CICalendar* This,
        HSTRING* result);
    HRESULT (STDMETHODCALLTYPE* NanosecondAsPaddedString)(__x_ABI_CWindows_CGlobalization_CICalendar* This,
        INT32 minDigits,
        HSTRING* result);
    HRESULT (STDMETHODCALLTYPE* Compare)(__x_ABI_CWindows_CGlobalization_CICalendar* This,
        __x_ABI_CWindows_CGlobalization_CICalendar* other,
        INT32* result);
    HRESULT (STDMETHODCALLTYPE* CompareDateTime)(__x_ABI_CWindows_CGlobalization_CICalendar* This,
        struct __x_ABI_CWindows_CFoundation_CDateTime other,
        INT32* result);
    HRESULT (STDMETHODCALLTYPE* CopyTo)(__x_ABI_CWindows_CGlobalization_CICalendar* This,
        __x_ABI_CWindows_CGlobalization_CICalendar* other);
    HRESULT (STDMETHODCALLTYPE* get_FirstMinuteInThisHour)(__x_ABI_CWindows_CGlobalization_CICalendar* This,
        INT32* value);
    HRESULT (STDMETHODCALLTYPE* get_LastMinuteInThisHour)(__x_ABI_CWindows_CGlobalization_CICalendar* This,
        INT32* value);
    HRESULT (STDMETHODCALLTYPE* get_NumberOfMinutesInThisHour)(__x_ABI_CWindows_CGlobalization_CICalendar* This,
        INT32* value);
    HRESULT (STDMETHODCALLTYPE* get_FirstSecondInThisMinute)(__x_ABI_CWindows_CGlobalization_CICalendar* This,
        INT32* value);
    HRESULT (STDMETHODCALLTYPE* get_LastSecondInThisMinute)(__x_ABI_CWindows_CGlobalization_CICalendar* This,
        INT32* value);
    HRESULT (STDMETHODCALLTYPE* get_NumberOfSecondsInThisMinute)(__x_ABI_CWindows_CGlobalization_CICalendar* This,
        INT32* value);
    HRESULT (STDMETHODCALLTYPE* get_ResolvedLanguage)(__x_ABI_CWindows_CGlobalization_CICalendar* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_IsDaylightSavingTime)(__x_ABI_CWindows_CGlobalization_CICalendar* This,
        boolean* value);

        END_INTERFACE
    } __x_ABI_CWindows_CGlobalization_CICalendarVtbl;

    interface __x_ABI_CWindows_CGlobalization_CICalendar
    {
        CONST_VTBL struct __x_ABI_CWindows_CGlobalization_CICalendarVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CGlobalization_CICalendar;
#endif /* !defined(____x_ABI_CWindows_CGlobalization_CICalendar_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CGlobalization_CICalendarFactory_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CGlobalization_CICalendarFactory_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CGlobalization_CICalendarFactoryVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CGlobalization_CICalendarFactory* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CGlobalization_CICalendarFactory* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CGlobalization_CICalendarFactory* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CGlobalization_CICalendarFactory* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CGlobalization_CICalendarFactory* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CGlobalization_CICalendarFactory* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* CreateCalendarDefaultCalendarAndClock)(__x_ABI_CWindows_CGlobalization_CICalendarFactory* This,
        __x_ABI_C__FIIterable_1_HSTRING* languages,
        __x_ABI_CWindows_CGlobalization_CICalendar** result);
    HRESULT (STDMETHODCALLTYPE* CreateCalendar)(__x_ABI_CWindows_CGlobalization_CICalendarFactory* This,
        __x_ABI_C__FIIterable_1_HSTRING* languages,
        HSTRING calendar,
        HSTRING clock,
        __x_ABI_CWindows_CGlobalization_CICalendar** result);

        END_INTERFACE
    } __x_ABI_CWindows_CGlobalization_CICalendarFactoryVtbl;

    interface __x_ABI_CWindows_CGlobalization_CICalendarFactory
    {
        CONST_VTBL struct __x_ABI_CWindows_CGlobalization_CICalendarFactoryVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CGlobalization_CICalendarFactory;
#endif /* !defined(____x_ABI_CWindows_CGlobalization_CICalendarFactory_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CGlobalization_CICalendarFactory2_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CGlobalization_CICalendarFactory2_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CGlobalization_CICalendarFactory2Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CGlobalization_CICalendarFactory2* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CGlobalization_CICalendarFactory2* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CGlobalization_CICalendarFactory2* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CGlobalization_CICalendarFactory2* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CGlobalization_CICalendarFactory2* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CGlobalization_CICalendarFactory2* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* CreateCalendarWithTimeZone)(__x_ABI_CWindows_CGlobalization_CICalendarFactory2* This,
        __x_ABI_C__FIIterable_1_HSTRING* languages,
        HSTRING calendar,
        HSTRING clock,
        HSTRING timeZoneId,
        __x_ABI_CWindows_CGlobalization_CICalendar** result);

        END_INTERFACE
    } __x_ABI_CWindows_CGlobalization_CICalendarFactory2Vtbl;

    interface __x_ABI_CWindows_CGlobalization_CICalendarFactory2
    {
        CONST_VTBL struct __x_ABI_CWindows_CGlobalization_CICalendarFactory2Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CGlobalization_CICalendarFactory2;
#endif /* !defined(____x_ABI_CWindows_CGlobalization_CICalendarFactory2_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CGlobalization_CICalendarIdentifiersStatics_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CGlobalization_CICalendarIdentifiersStatics_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CGlobalization_CICalendarIdentifiersStaticsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CGlobalization_CICalendarIdentifiersStatics* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CGlobalization_CICalendarIdentifiersStatics* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CGlobalization_CICalendarIdentifiersStatics* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CGlobalization_CICalendarIdentifiersStatics* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CGlobalization_CICalendarIdentifiersStatics* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CGlobalization_CICalendarIdentifiersStatics* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Gregorian)(__x_ABI_CWindows_CGlobalization_CICalendarIdentifiersStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_Hebrew)(__x_ABI_CWindows_CGlobalization_CICalendarIdentifiersStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_Hijri)(__x_ABI_CWindows_CGlobalization_CICalendarIdentifiersStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_Japanese)(__x_ABI_CWindows_CGlobalization_CICalendarIdentifiersStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_Julian)(__x_ABI_CWindows_CGlobalization_CICalendarIdentifiersStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_Korean)(__x_ABI_CWindows_CGlobalization_CICalendarIdentifiersStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_Taiwan)(__x_ABI_CWindows_CGlobalization_CICalendarIdentifiersStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_Thai)(__x_ABI_CWindows_CGlobalization_CICalendarIdentifiersStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_UmAlQura)(__x_ABI_CWindows_CGlobalization_CICalendarIdentifiersStatics* This,
        HSTRING* value);

        END_INTERFACE
    } __x_ABI_CWindows_CGlobalization_CICalendarIdentifiersStaticsVtbl;

    interface __x_ABI_CWindows_CGlobalization_CICalendarIdentifiersStatics
    {
        CONST_VTBL struct __x_ABI_CWindows_CGlobalization_CICalendarIdentifiersStaticsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CGlobalization_CICalendarIdentifiersStatics;
#endif /* !defined(____x_ABI_CWindows_CGlobalization_CICalendarIdentifiersStatics_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CGlobalization_CICalendarIdentifiersStatics2_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CGlobalization_CICalendarIdentifiersStatics2_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CGlobalization_CICalendarIdentifiersStatics2Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CGlobalization_CICalendarIdentifiersStatics2* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CGlobalization_CICalendarIdentifiersStatics2* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CGlobalization_CICalendarIdentifiersStatics2* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CGlobalization_CICalendarIdentifiersStatics2* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CGlobalization_CICalendarIdentifiersStatics2* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CGlobalization_CICalendarIdentifiersStatics2* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Persian)(__x_ABI_CWindows_CGlobalization_CICalendarIdentifiersStatics2* This,
        HSTRING* value);

        END_INTERFACE
    } __x_ABI_CWindows_CGlobalization_CICalendarIdentifiersStatics2Vtbl;

    interface __x_ABI_CWindows_CGlobalization_CICalendarIdentifiersStatics2
    {
        CONST_VTBL struct __x_ABI_CWindows_CGlobalization_CICalendarIdentifiersStatics2Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CGlobalization_CICalendarIdentifiersStatics2;
#endif /* !defined(____x_ABI_CWindows_CGlobalization_CICalendarIdentifiersStatics2_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CGlobalization_CICalendarIdentifiersStatics3_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CGlobalization_CICalendarIdentifiersStatics3_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CGlobalization_CICalendarIdentifiersStatics3Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CGlobalization_CICalendarIdentifiersStatics3* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CGlobalization_CICalendarIdentifiersStatics3* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CGlobalization_CICalendarIdentifiersStatics3* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CGlobalization_CICalendarIdentifiersStatics3* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CGlobalization_CICalendarIdentifiersStatics3* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CGlobalization_CICalendarIdentifiersStatics3* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_ChineseLunar)(__x_ABI_CWindows_CGlobalization_CICalendarIdentifiersStatics3* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_JapaneseLunar)(__x_ABI_CWindows_CGlobalization_CICalendarIdentifiersStatics3* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_KoreanLunar)(__x_ABI_CWindows_CGlobalization_CICalendarIdentifiersStatics3* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_TaiwanLunar)(__x_ABI_CWindows_CGlobalization_CICalendarIdentifiersStatics3* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_VietnameseLunar)(__x_ABI_CWindows_CGlobalization_CICalendarIdentifiersStatics3* This,
        HSTRING* value);

        END_INTERFACE
    } __x_ABI_CWindows_CGlobalization_CICalendarIdentifiersStatics3Vtbl;

    interface __x_ABI_CWindows_CGlobalization_CICalendarIdentifiersStatics3
    {
        CONST_VTBL struct __x_ABI_CWindows_CGlobalization_CICalendarIdentifiersStatics3Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CGlobalization_CICalendarIdentifiersStatics3;
#endif /* !defined(____x_ABI_CWindows_CGlobalization_CICalendarIdentifiersStatics3_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CGlobalization_CIClockIdentifiersStatics_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CGlobalization_CIClockIdentifiersStatics_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CGlobalization_CIClockIdentifiersStaticsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CGlobalization_CIClockIdentifiersStatics* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CGlobalization_CIClockIdentifiersStatics* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CGlobalization_CIClockIdentifiersStatics* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CGlobalization_CIClockIdentifiersStatics* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CGlobalization_CIClockIdentifiersStatics* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CGlobalization_CIClockIdentifiersStatics* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_TwelveHour)(__x_ABI_CWindows_CGlobalization_CIClockIdentifiersStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_TwentyFourHour)(__x_ABI_CWindows_CGlobalization_CIClockIdentifiersStatics* This,
        HSTRING* value);

        END_INTERFACE
    } __x_ABI_CWindows_CGlobalization_CIClockIdentifiersStaticsVtbl;

    interface __x_ABI_CWindows_CGlobalization_CIClockIdentifiersStatics
    {
        CONST_VTBL struct __x_ABI_CWindows_CGlobalization_CIClockIdentifiersStaticsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CGlobalization_CIClockIdentifiersStatics;
#endif /* !defined(____x_ABI_CWindows_CGlobalization_CIClockIdentifiersStatics_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CGlobalization_CICurrencyAmount_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CGlobalization_CICurrencyAmount_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CGlobalization_CICurrencyAmountVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CGlobalization_CICurrencyAmount* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CGlobalization_CICurrencyAmount* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CGlobalization_CICurrencyAmount* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CGlobalization_CICurrencyAmount* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CGlobalization_CICurrencyAmount* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CGlobalization_CICurrencyAmount* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Amount)(__x_ABI_CWindows_CGlobalization_CICurrencyAmount* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_Currency)(__x_ABI_CWindows_CGlobalization_CICurrencyAmount* This,
        HSTRING* value);

        END_INTERFACE
    } __x_ABI_CWindows_CGlobalization_CICurrencyAmountVtbl;

    interface __x_ABI_CWindows_CGlobalization_CICurrencyAmount
    {
        CONST_VTBL struct __x_ABI_CWindows_CGlobalization_CICurrencyAmountVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CGlobalization_CICurrencyAmount;
#endif /* !defined(____x_ABI_CWindows_CGlobalization_CICurrencyAmount_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CGlobalization_CICurrencyAmountFactory_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CGlobalization_CICurrencyAmountFactory_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CGlobalization_CICurrencyAmountFactoryVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CGlobalization_CICurrencyAmountFactory* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CGlobalization_CICurrencyAmountFactory* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CGlobalization_CICurrencyAmountFactory* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CGlobalization_CICurrencyAmountFactory* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CGlobalization_CICurrencyAmountFactory* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CGlobalization_CICurrencyAmountFactory* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* Create)(__x_ABI_CWindows_CGlobalization_CICurrencyAmountFactory* This,
        HSTRING amount,
        HSTRING currency,
        __x_ABI_CWindows_CGlobalization_CICurrencyAmount** result);

        END_INTERFACE
    } __x_ABI_CWindows_CGlobalization_CICurrencyAmountFactoryVtbl;

    interface __x_ABI_CWindows_CGlobalization_CICurrencyAmountFactory
    {
        CONST_VTBL struct __x_ABI_CWindows_CGlobalization_CICurrencyAmountFactoryVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CGlobalization_CICurrencyAmountFactory;
#endif /* !defined(____x_ABI_CWindows_CGlobalization_CICurrencyAmountFactory_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CGlobalization_CICurrencyIdentifiersStatics_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CGlobalization_CICurrencyIdentifiersStatics_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CGlobalization_CICurrencyIdentifiersStaticsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CGlobalization_CICurrencyIdentifiersStatics* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CGlobalization_CICurrencyIdentifiersStatics* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CGlobalization_CICurrencyIdentifiersStatics* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CGlobalization_CICurrencyIdentifiersStatics* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CGlobalization_CICurrencyIdentifiersStatics* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CGlobalization_CICurrencyIdentifiersStatics* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_AED)(__x_ABI_CWindows_CGlobalization_CICurrencyIdentifiersStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_AFN)(__x_ABI_CWindows_CGlobalization_CICurrencyIdentifiersStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_ALL)(__x_ABI_CWindows_CGlobalization_CICurrencyIdentifiersStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_AMD)(__x_ABI_CWindows_CGlobalization_CICurrencyIdentifiersStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_ANG)(__x_ABI_CWindows_CGlobalization_CICurrencyIdentifiersStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_AOA)(__x_ABI_CWindows_CGlobalization_CICurrencyIdentifiersStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_ARS)(__x_ABI_CWindows_CGlobalization_CICurrencyIdentifiersStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_AUD)(__x_ABI_CWindows_CGlobalization_CICurrencyIdentifiersStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_AWG)(__x_ABI_CWindows_CGlobalization_CICurrencyIdentifiersStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_AZN)(__x_ABI_CWindows_CGlobalization_CICurrencyIdentifiersStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_BAM)(__x_ABI_CWindows_CGlobalization_CICurrencyIdentifiersStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_BBD)(__x_ABI_CWindows_CGlobalization_CICurrencyIdentifiersStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_BDT)(__x_ABI_CWindows_CGlobalization_CICurrencyIdentifiersStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_BGN)(__x_ABI_CWindows_CGlobalization_CICurrencyIdentifiersStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_BHD)(__x_ABI_CWindows_CGlobalization_CICurrencyIdentifiersStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_BIF)(__x_ABI_CWindows_CGlobalization_CICurrencyIdentifiersStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_BMD)(__x_ABI_CWindows_CGlobalization_CICurrencyIdentifiersStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_BND)(__x_ABI_CWindows_CGlobalization_CICurrencyIdentifiersStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_BOB)(__x_ABI_CWindows_CGlobalization_CICurrencyIdentifiersStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_BRL)(__x_ABI_CWindows_CGlobalization_CICurrencyIdentifiersStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_BSD)(__x_ABI_CWindows_CGlobalization_CICurrencyIdentifiersStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_BTN)(__x_ABI_CWindows_CGlobalization_CICurrencyIdentifiersStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_BWP)(__x_ABI_CWindows_CGlobalization_CICurrencyIdentifiersStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_BYR)(__x_ABI_CWindows_CGlobalization_CICurrencyIdentifiersStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_BZD)(__x_ABI_CWindows_CGlobalization_CICurrencyIdentifiersStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_CAD)(__x_ABI_CWindows_CGlobalization_CICurrencyIdentifiersStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_CDF)(__x_ABI_CWindows_CGlobalization_CICurrencyIdentifiersStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_CHF)(__x_ABI_CWindows_CGlobalization_CICurrencyIdentifiersStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_CLP)(__x_ABI_CWindows_CGlobalization_CICurrencyIdentifiersStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_CNY)(__x_ABI_CWindows_CGlobalization_CICurrencyIdentifiersStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_COP)(__x_ABI_CWindows_CGlobalization_CICurrencyIdentifiersStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_CRC)(__x_ABI_CWindows_CGlobalization_CICurrencyIdentifiersStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_CUP)(__x_ABI_CWindows_CGlobalization_CICurrencyIdentifiersStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_CVE)(__x_ABI_CWindows_CGlobalization_CICurrencyIdentifiersStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_CZK)(__x_ABI_CWindows_CGlobalization_CICurrencyIdentifiersStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_DJF)(__x_ABI_CWindows_CGlobalization_CICurrencyIdentifiersStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_DKK)(__x_ABI_CWindows_CGlobalization_CICurrencyIdentifiersStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_DOP)(__x_ABI_CWindows_CGlobalization_CICurrencyIdentifiersStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_DZD)(__x_ABI_CWindows_CGlobalization_CICurrencyIdentifiersStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_EGP)(__x_ABI_CWindows_CGlobalization_CICurrencyIdentifiersStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_ERN)(__x_ABI_CWindows_CGlobalization_CICurrencyIdentifiersStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_ETB)(__x_ABI_CWindows_CGlobalization_CICurrencyIdentifiersStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_EUR)(__x_ABI_CWindows_CGlobalization_CICurrencyIdentifiersStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_FJD)(__x_ABI_CWindows_CGlobalization_CICurrencyIdentifiersStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_FKP)(__x_ABI_CWindows_CGlobalization_CICurrencyIdentifiersStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_GBP)(__x_ABI_CWindows_CGlobalization_CICurrencyIdentifiersStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_GEL)(__x_ABI_CWindows_CGlobalization_CICurrencyIdentifiersStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_GHS)(__x_ABI_CWindows_CGlobalization_CICurrencyIdentifiersStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_GIP)(__x_ABI_CWindows_CGlobalization_CICurrencyIdentifiersStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_GMD)(__x_ABI_CWindows_CGlobalization_CICurrencyIdentifiersStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_GNF)(__x_ABI_CWindows_CGlobalization_CICurrencyIdentifiersStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_GTQ)(__x_ABI_CWindows_CGlobalization_CICurrencyIdentifiersStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_GYD)(__x_ABI_CWindows_CGlobalization_CICurrencyIdentifiersStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_HKD)(__x_ABI_CWindows_CGlobalization_CICurrencyIdentifiersStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_HNL)(__x_ABI_CWindows_CGlobalization_CICurrencyIdentifiersStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_HRK)(__x_ABI_CWindows_CGlobalization_CICurrencyIdentifiersStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_HTG)(__x_ABI_CWindows_CGlobalization_CICurrencyIdentifiersStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_HUF)(__x_ABI_CWindows_CGlobalization_CICurrencyIdentifiersStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_IDR)(__x_ABI_CWindows_CGlobalization_CICurrencyIdentifiersStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_ILS)(__x_ABI_CWindows_CGlobalization_CICurrencyIdentifiersStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_INR)(__x_ABI_CWindows_CGlobalization_CICurrencyIdentifiersStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_IQD)(__x_ABI_CWindows_CGlobalization_CICurrencyIdentifiersStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_IRR)(__x_ABI_CWindows_CGlobalization_CICurrencyIdentifiersStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_ISK)(__x_ABI_CWindows_CGlobalization_CICurrencyIdentifiersStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_JMD)(__x_ABI_CWindows_CGlobalization_CICurrencyIdentifiersStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_JOD)(__x_ABI_CWindows_CGlobalization_CICurrencyIdentifiersStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_JPY)(__x_ABI_CWindows_CGlobalization_CICurrencyIdentifiersStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_KES)(__x_ABI_CWindows_CGlobalization_CICurrencyIdentifiersStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_KGS)(__x_ABI_CWindows_CGlobalization_CICurrencyIdentifiersStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_KHR)(__x_ABI_CWindows_CGlobalization_CICurrencyIdentifiersStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_KMF)(__x_ABI_CWindows_CGlobalization_CICurrencyIdentifiersStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_KPW)(__x_ABI_CWindows_CGlobalization_CICurrencyIdentifiersStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_KRW)(__x_ABI_CWindows_CGlobalization_CICurrencyIdentifiersStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_KWD)(__x_ABI_CWindows_CGlobalization_CICurrencyIdentifiersStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_KYD)(__x_ABI_CWindows_CGlobalization_CICurrencyIdentifiersStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_KZT)(__x_ABI_CWindows_CGlobalization_CICurrencyIdentifiersStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_LAK)(__x_ABI_CWindows_CGlobalization_CICurrencyIdentifiersStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_LBP)(__x_ABI_CWindows_CGlobalization_CICurrencyIdentifiersStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_LKR)(__x_ABI_CWindows_CGlobalization_CICurrencyIdentifiersStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_LRD)(__x_ABI_CWindows_CGlobalization_CICurrencyIdentifiersStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_LSL)(__x_ABI_CWindows_CGlobalization_CICurrencyIdentifiersStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_LTL)(__x_ABI_CWindows_CGlobalization_CICurrencyIdentifiersStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_LVL)(__x_ABI_CWindows_CGlobalization_CICurrencyIdentifiersStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_LYD)(__x_ABI_CWindows_CGlobalization_CICurrencyIdentifiersStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_MAD)(__x_ABI_CWindows_CGlobalization_CICurrencyIdentifiersStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_MDL)(__x_ABI_CWindows_CGlobalization_CICurrencyIdentifiersStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_MGA)(__x_ABI_CWindows_CGlobalization_CICurrencyIdentifiersStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_MKD)(__x_ABI_CWindows_CGlobalization_CICurrencyIdentifiersStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_MMK)(__x_ABI_CWindows_CGlobalization_CICurrencyIdentifiersStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_MNT)(__x_ABI_CWindows_CGlobalization_CICurrencyIdentifiersStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_MOP)(__x_ABI_CWindows_CGlobalization_CICurrencyIdentifiersStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_MRO)(__x_ABI_CWindows_CGlobalization_CICurrencyIdentifiersStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_MUR)(__x_ABI_CWindows_CGlobalization_CICurrencyIdentifiersStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_MVR)(__x_ABI_CWindows_CGlobalization_CICurrencyIdentifiersStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_MWK)(__x_ABI_CWindows_CGlobalization_CICurrencyIdentifiersStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_MXN)(__x_ABI_CWindows_CGlobalization_CICurrencyIdentifiersStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_MYR)(__x_ABI_CWindows_CGlobalization_CICurrencyIdentifiersStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_MZN)(__x_ABI_CWindows_CGlobalization_CICurrencyIdentifiersStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_NAD)(__x_ABI_CWindows_CGlobalization_CICurrencyIdentifiersStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_NGN)(__x_ABI_CWindows_CGlobalization_CICurrencyIdentifiersStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_NIO)(__x_ABI_CWindows_CGlobalization_CICurrencyIdentifiersStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_NOK)(__x_ABI_CWindows_CGlobalization_CICurrencyIdentifiersStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_NPR)(__x_ABI_CWindows_CGlobalization_CICurrencyIdentifiersStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_NZD)(__x_ABI_CWindows_CGlobalization_CICurrencyIdentifiersStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_OMR)(__x_ABI_CWindows_CGlobalization_CICurrencyIdentifiersStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_PAB)(__x_ABI_CWindows_CGlobalization_CICurrencyIdentifiersStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_PEN)(__x_ABI_CWindows_CGlobalization_CICurrencyIdentifiersStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_PGK)(__x_ABI_CWindows_CGlobalization_CICurrencyIdentifiersStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_PHP)(__x_ABI_CWindows_CGlobalization_CICurrencyIdentifiersStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_PKR)(__x_ABI_CWindows_CGlobalization_CICurrencyIdentifiersStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_PLN)(__x_ABI_CWindows_CGlobalization_CICurrencyIdentifiersStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_PYG)(__x_ABI_CWindows_CGlobalization_CICurrencyIdentifiersStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_QAR)(__x_ABI_CWindows_CGlobalization_CICurrencyIdentifiersStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_RON)(__x_ABI_CWindows_CGlobalization_CICurrencyIdentifiersStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_RSD)(__x_ABI_CWindows_CGlobalization_CICurrencyIdentifiersStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_RUB)(__x_ABI_CWindows_CGlobalization_CICurrencyIdentifiersStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_RWF)(__x_ABI_CWindows_CGlobalization_CICurrencyIdentifiersStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_SAR)(__x_ABI_CWindows_CGlobalization_CICurrencyIdentifiersStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_SBD)(__x_ABI_CWindows_CGlobalization_CICurrencyIdentifiersStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_SCR)(__x_ABI_CWindows_CGlobalization_CICurrencyIdentifiersStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_SDG)(__x_ABI_CWindows_CGlobalization_CICurrencyIdentifiersStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_SEK)(__x_ABI_CWindows_CGlobalization_CICurrencyIdentifiersStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_SGD)(__x_ABI_CWindows_CGlobalization_CICurrencyIdentifiersStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_SHP)(__x_ABI_CWindows_CGlobalization_CICurrencyIdentifiersStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_SLL)(__x_ABI_CWindows_CGlobalization_CICurrencyIdentifiersStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_SOS)(__x_ABI_CWindows_CGlobalization_CICurrencyIdentifiersStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_SRD)(__x_ABI_CWindows_CGlobalization_CICurrencyIdentifiersStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_STD)(__x_ABI_CWindows_CGlobalization_CICurrencyIdentifiersStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_SYP)(__x_ABI_CWindows_CGlobalization_CICurrencyIdentifiersStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_SZL)(__x_ABI_CWindows_CGlobalization_CICurrencyIdentifiersStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_THB)(__x_ABI_CWindows_CGlobalization_CICurrencyIdentifiersStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_TJS)(__x_ABI_CWindows_CGlobalization_CICurrencyIdentifiersStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_TMT)(__x_ABI_CWindows_CGlobalization_CICurrencyIdentifiersStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_TND)(__x_ABI_CWindows_CGlobalization_CICurrencyIdentifiersStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_TOP)(__x_ABI_CWindows_CGlobalization_CICurrencyIdentifiersStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_TRY)(__x_ABI_CWindows_CGlobalization_CICurrencyIdentifiersStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_TTD)(__x_ABI_CWindows_CGlobalization_CICurrencyIdentifiersStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_TWD)(__x_ABI_CWindows_CGlobalization_CICurrencyIdentifiersStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_TZS)(__x_ABI_CWindows_CGlobalization_CICurrencyIdentifiersStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_UAH)(__x_ABI_CWindows_CGlobalization_CICurrencyIdentifiersStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_UGX)(__x_ABI_CWindows_CGlobalization_CICurrencyIdentifiersStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_USD)(__x_ABI_CWindows_CGlobalization_CICurrencyIdentifiersStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_UYU)(__x_ABI_CWindows_CGlobalization_CICurrencyIdentifiersStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_UZS)(__x_ABI_CWindows_CGlobalization_CICurrencyIdentifiersStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_VEF)(__x_ABI_CWindows_CGlobalization_CICurrencyIdentifiersStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_VND)(__x_ABI_CWindows_CGlobalization_CICurrencyIdentifiersStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_VUV)(__x_ABI_CWindows_CGlobalization_CICurrencyIdentifiersStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_WST)(__x_ABI_CWindows_CGlobalization_CICurrencyIdentifiersStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_XAF)(__x_ABI_CWindows_CGlobalization_CICurrencyIdentifiersStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_XCD)(__x_ABI_CWindows_CGlobalization_CICurrencyIdentifiersStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_XOF)(__x_ABI_CWindows_CGlobalization_CICurrencyIdentifiersStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_XPF)(__x_ABI_CWindows_CGlobalization_CICurrencyIdentifiersStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_XXX)(__x_ABI_CWindows_CGlobalization_CICurrencyIdentifiersStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_YER)(__x_ABI_CWindows_CGlobalization_CICurrencyIdentifiersStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_ZAR)(__x_ABI_CWindows_CGlobalization_CICurrencyIdentifiersStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_ZMW)(__x_ABI_CWindows_CGlobalization_CICurrencyIdentifiersStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_ZWL)(__x_ABI_CWindows_CGlobalization_CICurrencyIdentifiersStatics* This,
        HSTRING* value);

        END_INTERFACE
    } __x_ABI_CWindows_CGlobalization_CICurrencyIdentifiersStaticsVtbl;

    interface __x_ABI_CWindows_CGlobalization_CICurrencyIdentifiersStatics
    {
        CONST_VTBL struct __x_ABI_CWindows_CGlobalization_CICurrencyIdentifiersStaticsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CGlobalization_CICurrencyIdentifiersStatics;
#endif /* !defined(____x_ABI_CWindows_CGlobalization_CICurrencyIdentifiersStatics_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CGlobalization_CICurrencyIdentifiersStatics2_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CGlobalization_CICurrencyIdentifiersStatics2_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CGlobalization_CICurrencyIdentifiersStatics2Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CGlobalization_CICurrencyIdentifiersStatics2* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CGlobalization_CICurrencyIdentifiersStatics2* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CGlobalization_CICurrencyIdentifiersStatics2* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CGlobalization_CICurrencyIdentifiersStatics2* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CGlobalization_CICurrencyIdentifiersStatics2* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CGlobalization_CICurrencyIdentifiersStatics2* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_BYN)(__x_ABI_CWindows_CGlobalization_CICurrencyIdentifiersStatics2* This,
        HSTRING* value);

        END_INTERFACE
    } __x_ABI_CWindows_CGlobalization_CICurrencyIdentifiersStatics2Vtbl;

    interface __x_ABI_CWindows_CGlobalization_CICurrencyIdentifiersStatics2
    {
        CONST_VTBL struct __x_ABI_CWindows_CGlobalization_CICurrencyIdentifiersStatics2Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CGlobalization_CICurrencyIdentifiersStatics2;
#endif /* !defined(____x_ABI_CWindows_CGlobalization_CICurrencyIdentifiersStatics2_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CGlobalization_CICurrencyIdentifiersStatics3_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CGlobalization_CICurrencyIdentifiersStatics3_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CGlobalization_CICurrencyIdentifiersStatics3Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CGlobalization_CICurrencyIdentifiersStatics3* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CGlobalization_CICurrencyIdentifiersStatics3* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CGlobalization_CICurrencyIdentifiersStatics3* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CGlobalization_CICurrencyIdentifiersStatics3* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CGlobalization_CICurrencyIdentifiersStatics3* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CGlobalization_CICurrencyIdentifiersStatics3* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_MRU)(__x_ABI_CWindows_CGlobalization_CICurrencyIdentifiersStatics3* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_SSP)(__x_ABI_CWindows_CGlobalization_CICurrencyIdentifiersStatics3* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_STN)(__x_ABI_CWindows_CGlobalization_CICurrencyIdentifiersStatics3* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_VES)(__x_ABI_CWindows_CGlobalization_CICurrencyIdentifiersStatics3* This,
        HSTRING* value);

        END_INTERFACE
    } __x_ABI_CWindows_CGlobalization_CICurrencyIdentifiersStatics3Vtbl;

    interface __x_ABI_CWindows_CGlobalization_CICurrencyIdentifiersStatics3
    {
        CONST_VTBL struct __x_ABI_CWindows_CGlobalization_CICurrencyIdentifiersStatics3Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CGlobalization_CICurrencyIdentifiersStatics3;
#endif /* !defined(____x_ABI_CWindows_CGlobalization_CICurrencyIdentifiersStatics3_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CGlobalization_CIGeographicRegion_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CGlobalization_CIGeographicRegion_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CGlobalization_CIGeographicRegionVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CGlobalization_CIGeographicRegion* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CGlobalization_CIGeographicRegion* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CGlobalization_CIGeographicRegion* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CGlobalization_CIGeographicRegion* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CGlobalization_CIGeographicRegion* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CGlobalization_CIGeographicRegion* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Code)(__x_ABI_CWindows_CGlobalization_CIGeographicRegion* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_CodeTwoLetter)(__x_ABI_CWindows_CGlobalization_CIGeographicRegion* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_CodeThreeLetter)(__x_ABI_CWindows_CGlobalization_CIGeographicRegion* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_CodeThreeDigit)(__x_ABI_CWindows_CGlobalization_CIGeographicRegion* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_DisplayName)(__x_ABI_CWindows_CGlobalization_CIGeographicRegion* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_NativeName)(__x_ABI_CWindows_CGlobalization_CIGeographicRegion* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_CurrenciesInUse)(__x_ABI_CWindows_CGlobalization_CIGeographicRegion* This,
        __x_ABI_C__FIVectorView_1_HSTRING** value);

        END_INTERFACE
    } __x_ABI_CWindows_CGlobalization_CIGeographicRegionVtbl;

    interface __x_ABI_CWindows_CGlobalization_CIGeographicRegion
    {
        CONST_VTBL struct __x_ABI_CWindows_CGlobalization_CIGeographicRegionVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CGlobalization_CIGeographicRegion;
#endif /* !defined(____x_ABI_CWindows_CGlobalization_CIGeographicRegion_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CGlobalization_CIGeographicRegionFactory_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CGlobalization_CIGeographicRegionFactory_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CGlobalization_CIGeographicRegionFactoryVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CGlobalization_CIGeographicRegionFactory* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CGlobalization_CIGeographicRegionFactory* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CGlobalization_CIGeographicRegionFactory* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CGlobalization_CIGeographicRegionFactory* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CGlobalization_CIGeographicRegionFactory* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CGlobalization_CIGeographicRegionFactory* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* CreateGeographicRegion)(__x_ABI_CWindows_CGlobalization_CIGeographicRegionFactory* This,
        HSTRING geographicRegionCode,
        __x_ABI_CWindows_CGlobalization_CIGeographicRegion** result);

        END_INTERFACE
    } __x_ABI_CWindows_CGlobalization_CIGeographicRegionFactoryVtbl;

    interface __x_ABI_CWindows_CGlobalization_CIGeographicRegionFactory
    {
        CONST_VTBL struct __x_ABI_CWindows_CGlobalization_CIGeographicRegionFactoryVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CGlobalization_CIGeographicRegionFactory;
#endif /* !defined(____x_ABI_CWindows_CGlobalization_CIGeographicRegionFactory_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CGlobalization_CIGeographicRegionStatics_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CGlobalization_CIGeographicRegionStatics_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CGlobalization_CIGeographicRegionStaticsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CGlobalization_CIGeographicRegionStatics* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CGlobalization_CIGeographicRegionStatics* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CGlobalization_CIGeographicRegionStatics* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CGlobalization_CIGeographicRegionStatics* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CGlobalization_CIGeographicRegionStatics* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CGlobalization_CIGeographicRegionStatics* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* IsSupported)(__x_ABI_CWindows_CGlobalization_CIGeographicRegionStatics* This,
        HSTRING geographicRegionCode,
        boolean* result);

        END_INTERFACE
    } __x_ABI_CWindows_CGlobalization_CIGeographicRegionStaticsVtbl;

    interface __x_ABI_CWindows_CGlobalization_CIGeographicRegionStatics
    {
        CONST_VTBL struct __x_ABI_CWindows_CGlobalization_CIGeographicRegionStaticsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CGlobalization_CIGeographicRegionStatics;
#endif /* !defined(____x_ABI_CWindows_CGlobalization_CIGeographicRegionStatics_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CGlobalization_CIJapanesePhoneme_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CGlobalization_CIJapanesePhoneme_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CGlobalization_CIJapanesePhonemeVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CGlobalization_CIJapanesePhoneme* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CGlobalization_CIJapanesePhoneme* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CGlobalization_CIJapanesePhoneme* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CGlobalization_CIJapanesePhoneme* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CGlobalization_CIJapanesePhoneme* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CGlobalization_CIJapanesePhoneme* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_DisplayText)(__x_ABI_CWindows_CGlobalization_CIJapanesePhoneme* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_YomiText)(__x_ABI_CWindows_CGlobalization_CIJapanesePhoneme* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_IsPhraseStart)(__x_ABI_CWindows_CGlobalization_CIJapanesePhoneme* This,
        boolean* value);

        END_INTERFACE
    } __x_ABI_CWindows_CGlobalization_CIJapanesePhonemeVtbl;

    interface __x_ABI_CWindows_CGlobalization_CIJapanesePhoneme
    {
        CONST_VTBL struct __x_ABI_CWindows_CGlobalization_CIJapanesePhonemeVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CGlobalization_CIJapanesePhoneme;
#endif /* !defined(____x_ABI_CWindows_CGlobalization_CIJapanesePhoneme_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CGlobalization_CIJapanesePhoneticAnalyzerStatics_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CGlobalization_CIJapanesePhoneticAnalyzerStatics_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CGlobalization_CIJapanesePhoneticAnalyzerStaticsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CGlobalization_CIJapanesePhoneticAnalyzerStatics* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CGlobalization_CIJapanesePhoneticAnalyzerStatics* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CGlobalization_CIJapanesePhoneticAnalyzerStatics* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CGlobalization_CIJapanesePhoneticAnalyzerStatics* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CGlobalization_CIJapanesePhoneticAnalyzerStatics* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CGlobalization_CIJapanesePhoneticAnalyzerStatics* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetWords)(__x_ABI_CWindows_CGlobalization_CIJapanesePhoneticAnalyzerStatics* This,
        HSTRING input,
        __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CGlobalization__CJapanesePhoneme** result);
    HRESULT (STDMETHODCALLTYPE* GetWordsWithMonoRubyOption)(__x_ABI_CWindows_CGlobalization_CIJapanesePhoneticAnalyzerStatics* This,
        HSTRING input,
        boolean monoRuby,
        __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CGlobalization__CJapanesePhoneme** result);

        END_INTERFACE
    } __x_ABI_CWindows_CGlobalization_CIJapanesePhoneticAnalyzerStaticsVtbl;

    interface __x_ABI_CWindows_CGlobalization_CIJapanesePhoneticAnalyzerStatics
    {
        CONST_VTBL struct __x_ABI_CWindows_CGlobalization_CIJapanesePhoneticAnalyzerStaticsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CGlobalization_CIJapanesePhoneticAnalyzerStatics;
#endif /* !defined(____x_ABI_CWindows_CGlobalization_CIJapanesePhoneticAnalyzerStatics_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CGlobalization_CILanguage_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CGlobalization_CILanguage_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CGlobalization_CILanguageVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CGlobalization_CILanguage* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CGlobalization_CILanguage* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CGlobalization_CILanguage* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CGlobalization_CILanguage* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CGlobalization_CILanguage* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CGlobalization_CILanguage* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_LanguageTag)(__x_ABI_CWindows_CGlobalization_CILanguage* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_DisplayName)(__x_ABI_CWindows_CGlobalization_CILanguage* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_NativeName)(__x_ABI_CWindows_CGlobalization_CILanguage* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_Script)(__x_ABI_CWindows_CGlobalization_CILanguage* This,
        HSTRING* value);

        END_INTERFACE
    } __x_ABI_CWindows_CGlobalization_CILanguageVtbl;

    interface __x_ABI_CWindows_CGlobalization_CILanguage
    {
        CONST_VTBL struct __x_ABI_CWindows_CGlobalization_CILanguageVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CGlobalization_CILanguage;
#endif /* !defined(____x_ABI_CWindows_CGlobalization_CILanguage_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CGlobalization_CILanguage2_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CGlobalization_CILanguage2_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CGlobalization_CILanguage2Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CGlobalization_CILanguage2* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CGlobalization_CILanguage2* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CGlobalization_CILanguage2* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CGlobalization_CILanguage2* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CGlobalization_CILanguage2* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CGlobalization_CILanguage2* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_LayoutDirection)(__x_ABI_CWindows_CGlobalization_CILanguage2* This,
        enum __x_ABI_CWindows_CGlobalization_CLanguageLayoutDirection* value);

        END_INTERFACE
    } __x_ABI_CWindows_CGlobalization_CILanguage2Vtbl;

    interface __x_ABI_CWindows_CGlobalization_CILanguage2
    {
        CONST_VTBL struct __x_ABI_CWindows_CGlobalization_CILanguage2Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CGlobalization_CILanguage2;
#endif /* !defined(____x_ABI_CWindows_CGlobalization_CILanguage2_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CGlobalization_CILanguageExtensionSubtags_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CGlobalization_CILanguageExtensionSubtags_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CGlobalization_CILanguageExtensionSubtagsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CGlobalization_CILanguageExtensionSubtags* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CGlobalization_CILanguageExtensionSubtags* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CGlobalization_CILanguageExtensionSubtags* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CGlobalization_CILanguageExtensionSubtags* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CGlobalization_CILanguageExtensionSubtags* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CGlobalization_CILanguageExtensionSubtags* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetExtensionSubtags)(__x_ABI_CWindows_CGlobalization_CILanguageExtensionSubtags* This,
        HSTRING singleton,
        __x_ABI_C__FIVectorView_1_HSTRING** value);

        END_INTERFACE
    } __x_ABI_CWindows_CGlobalization_CILanguageExtensionSubtagsVtbl;

    interface __x_ABI_CWindows_CGlobalization_CILanguageExtensionSubtags
    {
        CONST_VTBL struct __x_ABI_CWindows_CGlobalization_CILanguageExtensionSubtagsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CGlobalization_CILanguageExtensionSubtags;
#endif /* !defined(____x_ABI_CWindows_CGlobalization_CILanguageExtensionSubtags_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CGlobalization_CILanguageFactory_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CGlobalization_CILanguageFactory_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CGlobalization_CILanguageFactoryVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CGlobalization_CILanguageFactory* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CGlobalization_CILanguageFactory* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CGlobalization_CILanguageFactory* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CGlobalization_CILanguageFactory* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CGlobalization_CILanguageFactory* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CGlobalization_CILanguageFactory* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* CreateLanguage)(__x_ABI_CWindows_CGlobalization_CILanguageFactory* This,
        HSTRING languageTag,
        __x_ABI_CWindows_CGlobalization_CILanguage** result);

        END_INTERFACE
    } __x_ABI_CWindows_CGlobalization_CILanguageFactoryVtbl;

    interface __x_ABI_CWindows_CGlobalization_CILanguageFactory
    {
        CONST_VTBL struct __x_ABI_CWindows_CGlobalization_CILanguageFactoryVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CGlobalization_CILanguageFactory;
#endif /* !defined(____x_ABI_CWindows_CGlobalization_CILanguageFactory_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CGlobalization_CILanguageStatics_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CGlobalization_CILanguageStatics_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CGlobalization_CILanguageStaticsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CGlobalization_CILanguageStatics* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CGlobalization_CILanguageStatics* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CGlobalization_CILanguageStatics* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CGlobalization_CILanguageStatics* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CGlobalization_CILanguageStatics* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CGlobalization_CILanguageStatics* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* IsWellFormed)(__x_ABI_CWindows_CGlobalization_CILanguageStatics* This,
        HSTRING languageTag,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* get_CurrentInputMethodLanguageTag)(__x_ABI_CWindows_CGlobalization_CILanguageStatics* This,
        HSTRING* value);

        END_INTERFACE
    } __x_ABI_CWindows_CGlobalization_CILanguageStaticsVtbl;

    interface __x_ABI_CWindows_CGlobalization_CILanguageStatics
    {
        CONST_VTBL struct __x_ABI_CWindows_CGlobalization_CILanguageStaticsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CGlobalization_CILanguageStatics;
#endif /* !defined(____x_ABI_CWindows_CGlobalization_CILanguageStatics_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CGlobalization_CILanguageStatics2_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CGlobalization_CILanguageStatics2_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CGlobalization_CILanguageStatics2Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CGlobalization_CILanguageStatics2* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CGlobalization_CILanguageStatics2* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CGlobalization_CILanguageStatics2* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CGlobalization_CILanguageStatics2* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CGlobalization_CILanguageStatics2* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CGlobalization_CILanguageStatics2* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* TrySetInputMethodLanguageTag)(__x_ABI_CWindows_CGlobalization_CILanguageStatics2* This,
        HSTRING languageTag,
        boolean* result);

        END_INTERFACE
    } __x_ABI_CWindows_CGlobalization_CILanguageStatics2Vtbl;

    interface __x_ABI_CWindows_CGlobalization_CILanguageStatics2
    {
        CONST_VTBL struct __x_ABI_CWindows_CGlobalization_CILanguageStatics2Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CGlobalization_CILanguageStatics2;
#endif /* !defined(____x_ABI_CWindows_CGlobalization_CILanguageStatics2_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CGlobalization_CINumeralSystemIdentifiersStatics_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CGlobalization_CINumeralSystemIdentifiersStatics_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CGlobalization_CINumeralSystemIdentifiersStaticsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CGlobalization_CINumeralSystemIdentifiersStatics* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CGlobalization_CINumeralSystemIdentifiersStatics* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CGlobalization_CINumeralSystemIdentifiersStatics* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CGlobalization_CINumeralSystemIdentifiersStatics* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CGlobalization_CINumeralSystemIdentifiersStatics* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CGlobalization_CINumeralSystemIdentifiersStatics* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Arab)(__x_ABI_CWindows_CGlobalization_CINumeralSystemIdentifiersStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_ArabExt)(__x_ABI_CWindows_CGlobalization_CINumeralSystemIdentifiersStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_Bali)(__x_ABI_CWindows_CGlobalization_CINumeralSystemIdentifiersStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_Beng)(__x_ABI_CWindows_CGlobalization_CINumeralSystemIdentifiersStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_Cham)(__x_ABI_CWindows_CGlobalization_CINumeralSystemIdentifiersStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_Deva)(__x_ABI_CWindows_CGlobalization_CINumeralSystemIdentifiersStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_FullWide)(__x_ABI_CWindows_CGlobalization_CINumeralSystemIdentifiersStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_Gujr)(__x_ABI_CWindows_CGlobalization_CINumeralSystemIdentifiersStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_Guru)(__x_ABI_CWindows_CGlobalization_CINumeralSystemIdentifiersStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_HaniDec)(__x_ABI_CWindows_CGlobalization_CINumeralSystemIdentifiersStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_Java)(__x_ABI_CWindows_CGlobalization_CINumeralSystemIdentifiersStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_Kali)(__x_ABI_CWindows_CGlobalization_CINumeralSystemIdentifiersStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_Khmr)(__x_ABI_CWindows_CGlobalization_CINumeralSystemIdentifiersStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_Knda)(__x_ABI_CWindows_CGlobalization_CINumeralSystemIdentifiersStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_Lana)(__x_ABI_CWindows_CGlobalization_CINumeralSystemIdentifiersStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_LanaTham)(__x_ABI_CWindows_CGlobalization_CINumeralSystemIdentifiersStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_Laoo)(__x_ABI_CWindows_CGlobalization_CINumeralSystemIdentifiersStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_Latn)(__x_ABI_CWindows_CGlobalization_CINumeralSystemIdentifiersStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_Lepc)(__x_ABI_CWindows_CGlobalization_CINumeralSystemIdentifiersStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_Limb)(__x_ABI_CWindows_CGlobalization_CINumeralSystemIdentifiersStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_Mlym)(__x_ABI_CWindows_CGlobalization_CINumeralSystemIdentifiersStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_Mong)(__x_ABI_CWindows_CGlobalization_CINumeralSystemIdentifiersStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_Mtei)(__x_ABI_CWindows_CGlobalization_CINumeralSystemIdentifiersStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_Mymr)(__x_ABI_CWindows_CGlobalization_CINumeralSystemIdentifiersStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_MymrShan)(__x_ABI_CWindows_CGlobalization_CINumeralSystemIdentifiersStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_Nkoo)(__x_ABI_CWindows_CGlobalization_CINumeralSystemIdentifiersStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_Olck)(__x_ABI_CWindows_CGlobalization_CINumeralSystemIdentifiersStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_Orya)(__x_ABI_CWindows_CGlobalization_CINumeralSystemIdentifiersStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_Saur)(__x_ABI_CWindows_CGlobalization_CINumeralSystemIdentifiersStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_Sund)(__x_ABI_CWindows_CGlobalization_CINumeralSystemIdentifiersStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_Talu)(__x_ABI_CWindows_CGlobalization_CINumeralSystemIdentifiersStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_TamlDec)(__x_ABI_CWindows_CGlobalization_CINumeralSystemIdentifiersStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_Telu)(__x_ABI_CWindows_CGlobalization_CINumeralSystemIdentifiersStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_Thai)(__x_ABI_CWindows_CGlobalization_CINumeralSystemIdentifiersStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_Tibt)(__x_ABI_CWindows_CGlobalization_CINumeralSystemIdentifiersStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_Vaii)(__x_ABI_CWindows_CGlobalization_CINumeralSystemIdentifiersStatics* This,
        HSTRING* value);

        END_INTERFACE
    } __x_ABI_CWindows_CGlobalization_CINumeralSystemIdentifiersStaticsVtbl;

    interface __x_ABI_CWindows_CGlobalization_CINumeralSystemIdentifiersStatics
    {
        CONST_VTBL struct __x_ABI_CWindows_CGlobalization_CINumeralSystemIdentifiersStaticsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CGlobalization_CINumeralSystemIdentifiersStatics;
#endif /* !defined(____x_ABI_CWindows_CGlobalization_CINumeralSystemIdentifiersStatics_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CGlobalization_CINumeralSystemIdentifiersStatics2_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CGlobalization_CINumeralSystemIdentifiersStatics2_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CGlobalization_CINumeralSystemIdentifiersStatics2Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CGlobalization_CINumeralSystemIdentifiersStatics2* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CGlobalization_CINumeralSystemIdentifiersStatics2* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CGlobalization_CINumeralSystemIdentifiersStatics2* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CGlobalization_CINumeralSystemIdentifiersStatics2* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CGlobalization_CINumeralSystemIdentifiersStatics2* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CGlobalization_CINumeralSystemIdentifiersStatics2* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Brah)(__x_ABI_CWindows_CGlobalization_CINumeralSystemIdentifiersStatics2* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_Osma)(__x_ABI_CWindows_CGlobalization_CINumeralSystemIdentifiersStatics2* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_MathBold)(__x_ABI_CWindows_CGlobalization_CINumeralSystemIdentifiersStatics2* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_MathDbl)(__x_ABI_CWindows_CGlobalization_CINumeralSystemIdentifiersStatics2* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_MathSans)(__x_ABI_CWindows_CGlobalization_CINumeralSystemIdentifiersStatics2* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_MathSanb)(__x_ABI_CWindows_CGlobalization_CINumeralSystemIdentifiersStatics2* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_MathMono)(__x_ABI_CWindows_CGlobalization_CINumeralSystemIdentifiersStatics2* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_ZmthBold)(__x_ABI_CWindows_CGlobalization_CINumeralSystemIdentifiersStatics2* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_ZmthDbl)(__x_ABI_CWindows_CGlobalization_CINumeralSystemIdentifiersStatics2* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_ZmthSans)(__x_ABI_CWindows_CGlobalization_CINumeralSystemIdentifiersStatics2* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_ZmthSanb)(__x_ABI_CWindows_CGlobalization_CINumeralSystemIdentifiersStatics2* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_ZmthMono)(__x_ABI_CWindows_CGlobalization_CINumeralSystemIdentifiersStatics2* This,
        HSTRING* value);

        END_INTERFACE
    } __x_ABI_CWindows_CGlobalization_CINumeralSystemIdentifiersStatics2Vtbl;

    interface __x_ABI_CWindows_CGlobalization_CINumeralSystemIdentifiersStatics2
    {
        CONST_VTBL struct __x_ABI_CWindows_CGlobalization_CINumeralSystemIdentifiersStatics2Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CGlobalization_CINumeralSystemIdentifiersStatics2;
#endif /* !defined(____x_ABI_CWindows_CGlobalization_CINumeralSystemIdentifiersStatics2_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CGlobalization_CITimeZoneOnCalendar_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CGlobalization_CITimeZoneOnCalendar_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CGlobalization_CITimeZoneOnCalendarVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CGlobalization_CITimeZoneOnCalendar* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CGlobalization_CITimeZoneOnCalendar* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CGlobalization_CITimeZoneOnCalendar* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CGlobalization_CITimeZoneOnCalendar* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CGlobalization_CITimeZoneOnCalendar* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CGlobalization_CITimeZoneOnCalendar* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetTimeZone)(__x_ABI_CWindows_CGlobalization_CITimeZoneOnCalendar* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* ChangeTimeZone)(__x_ABI_CWindows_CGlobalization_CITimeZoneOnCalendar* This,
        HSTRING timeZoneId);
    HRESULT (STDMETHODCALLTYPE* TimeZoneAsFullString)(__x_ABI_CWindows_CGlobalization_CITimeZoneOnCalendar* This,
        HSTRING* result);
    HRESULT (STDMETHODCALLTYPE* TimeZoneAsString)(__x_ABI_CWindows_CGlobalization_CITimeZoneOnCalendar* This,
        INT32 idealLength,
        HSTRING* result);

        END_INTERFACE
    } __x_ABI_CWindows_CGlobalization_CITimeZoneOnCalendarVtbl;

    interface __x_ABI_CWindows_CGlobalization_CITimeZoneOnCalendar
    {
        CONST_VTBL struct __x_ABI_CWindows_CGlobalization_CITimeZoneOnCalendarVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CGlobalization_CITimeZoneOnCalendar;
#endif /* !defined(____x_ABI_CWindows_CGlobalization_CITimeZoneOnCalendar_INTERFACE_DEFINED__) */
    

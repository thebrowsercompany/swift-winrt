// WARNING: Please don't edit this file. It was generated by Swift/WinRT v0.0.1

#pragma once
// Header files for imported files
#include <inspectable.h>
#include <EventToken.h>
#include <windowscontracts.h>
#include "Windows.Foundation.h"
#include "Windows.Networking.h"
#include "Windows.Storage.Streams.h"
// Importing Collections header
#include "Windows.Foundation.Collections.h"

/* Forward Declarations */
#ifndef ____x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveDeviceAddress_FWD_DEFINED__
#define ____x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveDeviceAddress_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveDeviceAddress __x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveDeviceAddress;

#endif // ____x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveDeviceAddress_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveDeviceAddressStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveDeviceAddressStatics_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveDeviceAddressStatics __x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveDeviceAddressStatics;

#endif // ____x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveDeviceAddressStatics_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveEndpointPair_FWD_DEFINED__
#define ____x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveEndpointPair_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveEndpointPair __x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveEndpointPair;

#endif // ____x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveEndpointPair_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveEndpointPairCreationResult_FWD_DEFINED__
#define ____x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveEndpointPairCreationResult_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveEndpointPairCreationResult __x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveEndpointPairCreationResult;

#endif // ____x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveEndpointPairCreationResult_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveEndpointPairStateChangedEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveEndpointPairStateChangedEventArgs_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveEndpointPairStateChangedEventArgs __x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveEndpointPairStateChangedEventArgs;

#endif // ____x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveEndpointPairStateChangedEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveEndpointPairStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveEndpointPairStatics_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveEndpointPairStatics __x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveEndpointPairStatics;

#endif // ____x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveEndpointPairStatics_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveEndpointPairTemplate_FWD_DEFINED__
#define ____x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveEndpointPairTemplate_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveEndpointPairTemplate __x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveEndpointPairTemplate;

#endif // ____x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveEndpointPairTemplate_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveEndpointPairTemplateStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveEndpointPairTemplateStatics_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveEndpointPairTemplateStatics __x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveEndpointPairTemplateStatics;

#endif // ____x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveEndpointPairTemplateStatics_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveInboundEndpointPairCreatedEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveInboundEndpointPairCreatedEventArgs_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveInboundEndpointPairCreatedEventArgs __x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveInboundEndpointPairCreatedEventArgs;

#endif // ____x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveInboundEndpointPairCreatedEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveQualityOfServiceMeasurement_FWD_DEFINED__
#define ____x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveQualityOfServiceMeasurement_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveQualityOfServiceMeasurement __x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveQualityOfServiceMeasurement;

#endif // ____x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveQualityOfServiceMeasurement_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveQualityOfServiceMeasurementStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveQualityOfServiceMeasurementStatics_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveQualityOfServiceMeasurementStatics __x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveQualityOfServiceMeasurementStatics;

#endif // ____x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveQualityOfServiceMeasurementStatics_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveQualityOfServiceMetricResult_FWD_DEFINED__
#define ____x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveQualityOfServiceMetricResult_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveQualityOfServiceMetricResult __x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveQualityOfServiceMetricResult;

#endif // ____x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveQualityOfServiceMetricResult_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveQualityOfServicePrivatePayloadResult_FWD_DEFINED__
#define ____x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveQualityOfServicePrivatePayloadResult_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveQualityOfServicePrivatePayloadResult __x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveQualityOfServicePrivatePayloadResult;

#endif // ____x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveQualityOfServicePrivatePayloadResult_FWD_DEFINED__

// Parameterized interface forward declarations (C)

// Collection interface definitions

typedef interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveEndpointPairCreationResult __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveEndpointPairCreationResult;

#if !defined(____x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveEndpointPairCreationResult_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveEndpointPairCreationResult_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveEndpointPairCreationResult __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveEndpointPairCreationResult;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveEndpointPairCreationResult;

    typedef struct __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveEndpointPairCreationResultVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveEndpointPairCreationResult* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveEndpointPairCreationResult* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveEndpointPairCreationResult* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveEndpointPairCreationResult* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveEndpointPairCreationResult* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveEndpointPairCreationResult* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* put_Completed)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveEndpointPairCreationResult* This,
        __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveEndpointPairCreationResult* handler);
    HRESULT (STDMETHODCALLTYPE* get_Completed)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveEndpointPairCreationResult* This,
        __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveEndpointPairCreationResult** result);
    HRESULT (STDMETHODCALLTYPE* GetResults)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveEndpointPairCreationResult* This,
        __x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveEndpointPairCreationResult** result);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveEndpointPairCreationResultVtbl;

    interface __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveEndpointPairCreationResult
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveEndpointPairCreationResultVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveEndpointPairCreationResult_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveEndpointPairCreationResult_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveEndpointPairCreationResult_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveEndpointPairCreationResult __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveEndpointPairCreationResult;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveEndpointPairCreationResult;

    typedef struct __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveEndpointPairCreationResultVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveEndpointPairCreationResult* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveEndpointPairCreationResult* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveEndpointPairCreationResult* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveEndpointPairCreationResult* This,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveEndpointPairCreationResult* asyncInfo,
        enum __x_ABI_CWindows_CFoundation_CAsyncStatus asyncStatus);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveEndpointPairCreationResultVtbl;

    interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveEndpointPairCreationResult
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveEndpointPairCreationResultVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveEndpointPairCreationResult_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveDeviceAddress_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveDeviceAddress_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveDeviceAddress __x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveDeviceAddress;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveDeviceAddress;

    typedef struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveDeviceAddressVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveDeviceAddress* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveDeviceAddress* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveDeviceAddress* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveDeviceAddress* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveDeviceAddress* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveDeviceAddress* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Current)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveDeviceAddress* This,
        __x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveDeviceAddress** result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveDeviceAddress* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveDeviceAddress* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveDeviceAddress* This,
        UINT32 itemsLength,
        __x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveDeviceAddress** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveDeviceAddressVtbl;

    interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveDeviceAddress
    {
        CONST_VTBL struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveDeviceAddressVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveDeviceAddress_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveDeviceAddress_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveDeviceAddress_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveDeviceAddress __x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveDeviceAddress;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveDeviceAddress;

    typedef struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveDeviceAddressVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveDeviceAddress* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveDeviceAddress* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveDeviceAddress* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveDeviceAddress* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveDeviceAddress* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveDeviceAddress* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* First)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveDeviceAddress* This,
        __x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveDeviceAddress** result);

        END_INTERFACE
    } __x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveDeviceAddressVtbl;

    interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveDeviceAddress
    {
        CONST_VTBL struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveDeviceAddressVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveDeviceAddress_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveEndpointPair_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveEndpointPair_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveEndpointPair __x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveEndpointPair;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveEndpointPair;

    typedef struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveEndpointPairVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveEndpointPair* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveEndpointPair* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveEndpointPair* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveEndpointPair* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveEndpointPair* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveEndpointPair* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Current)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveEndpointPair* This,
        __x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveEndpointPair** result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveEndpointPair* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveEndpointPair* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveEndpointPair* This,
        UINT32 itemsLength,
        __x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveEndpointPair** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveEndpointPairVtbl;

    interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveEndpointPair
    {
        CONST_VTBL struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveEndpointPairVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveEndpointPair_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveEndpointPair_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveEndpointPair_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveEndpointPair __x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveEndpointPair;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveEndpointPair;

    typedef struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveEndpointPairVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveEndpointPair* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveEndpointPair* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveEndpointPair* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveEndpointPair* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveEndpointPair* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveEndpointPair* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* First)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveEndpointPair* This,
        __x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveEndpointPair** result);

        END_INTERFACE
    } __x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveEndpointPairVtbl;

    interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveEndpointPair
    {
        CONST_VTBL struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveEndpointPairVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveEndpointPair_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveEndpointPairTemplate_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveEndpointPairTemplate_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveEndpointPairTemplate __x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveEndpointPairTemplate;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveEndpointPairTemplate;

    typedef struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveEndpointPairTemplateVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveEndpointPairTemplate* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveEndpointPairTemplate* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveEndpointPairTemplate* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveEndpointPairTemplate* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveEndpointPairTemplate* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveEndpointPairTemplate* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Current)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveEndpointPairTemplate* This,
        __x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveEndpointPairTemplate** result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveEndpointPairTemplate* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveEndpointPairTemplate* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveEndpointPairTemplate* This,
        UINT32 itemsLength,
        __x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveEndpointPairTemplate** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveEndpointPairTemplateVtbl;

    interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveEndpointPairTemplate
    {
        CONST_VTBL struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveEndpointPairTemplateVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveEndpointPairTemplate_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveEndpointPairTemplate_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveEndpointPairTemplate_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveEndpointPairTemplate __x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveEndpointPairTemplate;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveEndpointPairTemplate;

    typedef struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveEndpointPairTemplateVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveEndpointPairTemplate* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveEndpointPairTemplate* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveEndpointPairTemplate* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveEndpointPairTemplate* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveEndpointPairTemplate* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveEndpointPairTemplate* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* First)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveEndpointPairTemplate* This,
        __x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveEndpointPairTemplate** result);

        END_INTERFACE
    } __x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveEndpointPairTemplateVtbl;

    interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveEndpointPairTemplate
    {
        CONST_VTBL struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveEndpointPairTemplateVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveEndpointPairTemplate_INTERFACE_DEFINED__
    
typedef enum __x_ABI_CWindows_CNetworking_CXboxLive_CXboxLiveQualityOfServiceMetric __x_ABI_CWindows_CNetworking_CXboxLive_CXboxLiveQualityOfServiceMetric;

#if !defined(____x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveQualityOfServiceMetric_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveQualityOfServiceMetric_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveQualityOfServiceMetric __x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveQualityOfServiceMetric;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveQualityOfServiceMetric;

    typedef struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveQualityOfServiceMetricVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveQualityOfServiceMetric* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveQualityOfServiceMetric* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveQualityOfServiceMetric* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveQualityOfServiceMetric* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveQualityOfServiceMetric* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveQualityOfServiceMetric* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Current)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveQualityOfServiceMetric* This,
        enum __x_ABI_CWindows_CNetworking_CXboxLive_CXboxLiveQualityOfServiceMetric* result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveQualityOfServiceMetric* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveQualityOfServiceMetric* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveQualityOfServiceMetric* This,
        UINT32 itemsLength,
        enum __x_ABI_CWindows_CNetworking_CXboxLive_CXboxLiveQualityOfServiceMetric* items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveQualityOfServiceMetricVtbl;

    interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveQualityOfServiceMetric
    {
        CONST_VTBL struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveQualityOfServiceMetricVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveQualityOfServiceMetric_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveQualityOfServiceMetric_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveQualityOfServiceMetric_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveQualityOfServiceMetric __x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveQualityOfServiceMetric;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveQualityOfServiceMetric;

    typedef struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveQualityOfServiceMetricVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveQualityOfServiceMetric* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveQualityOfServiceMetric* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveQualityOfServiceMetric* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveQualityOfServiceMetric* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveQualityOfServiceMetric* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveQualityOfServiceMetric* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* First)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveQualityOfServiceMetric* This,
        __x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveQualityOfServiceMetric** result);

        END_INTERFACE
    } __x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveQualityOfServiceMetricVtbl;

    interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveQualityOfServiceMetric
    {
        CONST_VTBL struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveQualityOfServiceMetricVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveQualityOfServiceMetric_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveQualityOfServiceMetricResult_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveQualityOfServiceMetricResult_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveQualityOfServiceMetricResult __x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveQualityOfServiceMetricResult;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveQualityOfServiceMetricResult;

    typedef struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveQualityOfServiceMetricResultVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveQualityOfServiceMetricResult* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveQualityOfServiceMetricResult* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveQualityOfServiceMetricResult* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveQualityOfServiceMetricResult* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveQualityOfServiceMetricResult* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveQualityOfServiceMetricResult* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Current)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveQualityOfServiceMetricResult* This,
        __x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveQualityOfServiceMetricResult** result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveQualityOfServiceMetricResult* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveQualityOfServiceMetricResult* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveQualityOfServiceMetricResult* This,
        UINT32 itemsLength,
        __x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveQualityOfServiceMetricResult** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveQualityOfServiceMetricResultVtbl;

    interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveQualityOfServiceMetricResult
    {
        CONST_VTBL struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveQualityOfServiceMetricResultVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveQualityOfServiceMetricResult_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveQualityOfServiceMetricResult_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveQualityOfServiceMetricResult_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveQualityOfServiceMetricResult __x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveQualityOfServiceMetricResult;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveQualityOfServiceMetricResult;

    typedef struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveQualityOfServiceMetricResultVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveQualityOfServiceMetricResult* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveQualityOfServiceMetricResult* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveQualityOfServiceMetricResult* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveQualityOfServiceMetricResult* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveQualityOfServiceMetricResult* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveQualityOfServiceMetricResult* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* First)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveQualityOfServiceMetricResult* This,
        __x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveQualityOfServiceMetricResult** result);

        END_INTERFACE
    } __x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveQualityOfServiceMetricResultVtbl;

    interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveQualityOfServiceMetricResult
    {
        CONST_VTBL struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveQualityOfServiceMetricResultVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveQualityOfServiceMetricResult_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveQualityOfServicePrivatePayloadResult_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveQualityOfServicePrivatePayloadResult_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveQualityOfServicePrivatePayloadResult __x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveQualityOfServicePrivatePayloadResult;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveQualityOfServicePrivatePayloadResult;

    typedef struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveQualityOfServicePrivatePayloadResultVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveQualityOfServicePrivatePayloadResult* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveQualityOfServicePrivatePayloadResult* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveQualityOfServicePrivatePayloadResult* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveQualityOfServicePrivatePayloadResult* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveQualityOfServicePrivatePayloadResult* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveQualityOfServicePrivatePayloadResult* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Current)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveQualityOfServicePrivatePayloadResult* This,
        __x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveQualityOfServicePrivatePayloadResult** result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveQualityOfServicePrivatePayloadResult* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveQualityOfServicePrivatePayloadResult* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveQualityOfServicePrivatePayloadResult* This,
        UINT32 itemsLength,
        __x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveQualityOfServicePrivatePayloadResult** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveQualityOfServicePrivatePayloadResultVtbl;

    interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveQualityOfServicePrivatePayloadResult
    {
        CONST_VTBL struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveQualityOfServicePrivatePayloadResultVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveQualityOfServicePrivatePayloadResult_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveQualityOfServicePrivatePayloadResult_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveQualityOfServicePrivatePayloadResult_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveQualityOfServicePrivatePayloadResult __x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveQualityOfServicePrivatePayloadResult;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveQualityOfServicePrivatePayloadResult;

    typedef struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveQualityOfServicePrivatePayloadResultVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveQualityOfServicePrivatePayloadResult* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveQualityOfServicePrivatePayloadResult* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveQualityOfServicePrivatePayloadResult* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveQualityOfServicePrivatePayloadResult* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveQualityOfServicePrivatePayloadResult* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveQualityOfServicePrivatePayloadResult* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* First)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveQualityOfServicePrivatePayloadResult* This,
        __x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveQualityOfServicePrivatePayloadResult** result);

        END_INTERFACE
    } __x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveQualityOfServicePrivatePayloadResultVtbl;

    interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveQualityOfServicePrivatePayloadResult
    {
        CONST_VTBL struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveQualityOfServicePrivatePayloadResultVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveQualityOfServicePrivatePayloadResult_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveDeviceAddress_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveDeviceAddress_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveDeviceAddress __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveDeviceAddress;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveDeviceAddress;

    typedef struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveDeviceAddressVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveDeviceAddress* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveDeviceAddress* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveDeviceAddress* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveDeviceAddress* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveDeviceAddress* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveDeviceAddress* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveDeviceAddress* This,
        UINT32 index,
        __x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveDeviceAddress** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveDeviceAddress* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveDeviceAddress* This,
        __x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveDeviceAddress* value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveDeviceAddress* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        __x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveDeviceAddress** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveDeviceAddressVtbl;

    interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveDeviceAddress
    {
        CONST_VTBL struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveDeviceAddressVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveDeviceAddress_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveEndpointPair_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveEndpointPair_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveEndpointPair __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveEndpointPair;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveEndpointPair;

    typedef struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveEndpointPairVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveEndpointPair* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveEndpointPair* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveEndpointPair* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveEndpointPair* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveEndpointPair* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveEndpointPair* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveEndpointPair* This,
        UINT32 index,
        __x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveEndpointPair** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveEndpointPair* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveEndpointPair* This,
        __x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveEndpointPair* value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveEndpointPair* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        __x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveEndpointPair** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveEndpointPairVtbl;

    interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveEndpointPair
    {
        CONST_VTBL struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveEndpointPairVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveEndpointPair_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveEndpointPairTemplate_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveEndpointPairTemplate_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveEndpointPairTemplate __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveEndpointPairTemplate;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveEndpointPairTemplate;

    typedef struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveEndpointPairTemplateVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveEndpointPairTemplate* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveEndpointPairTemplate* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveEndpointPairTemplate* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveEndpointPairTemplate* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveEndpointPairTemplate* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveEndpointPairTemplate* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveEndpointPairTemplate* This,
        UINT32 index,
        __x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveEndpointPairTemplate** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveEndpointPairTemplate* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveEndpointPairTemplate* This,
        __x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveEndpointPairTemplate* value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveEndpointPairTemplate* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        __x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveEndpointPairTemplate** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveEndpointPairTemplateVtbl;

    interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveEndpointPairTemplate
    {
        CONST_VTBL struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveEndpointPairTemplateVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveEndpointPairTemplate_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveQualityOfServiceMetric_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveQualityOfServiceMetric_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveQualityOfServiceMetric __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveQualityOfServiceMetric;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveQualityOfServiceMetric;

    typedef struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveQualityOfServiceMetricVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveQualityOfServiceMetric* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveQualityOfServiceMetric* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveQualityOfServiceMetric* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveQualityOfServiceMetric* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveQualityOfServiceMetric* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveQualityOfServiceMetric* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveQualityOfServiceMetric* This,
        UINT32 index,
        enum __x_ABI_CWindows_CNetworking_CXboxLive_CXboxLiveQualityOfServiceMetric* result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveQualityOfServiceMetric* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveQualityOfServiceMetric* This,
        enum __x_ABI_CWindows_CNetworking_CXboxLive_CXboxLiveQualityOfServiceMetric value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveQualityOfServiceMetric* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        enum __x_ABI_CWindows_CNetworking_CXboxLive_CXboxLiveQualityOfServiceMetric* items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveQualityOfServiceMetricVtbl;

    interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveQualityOfServiceMetric
    {
        CONST_VTBL struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveQualityOfServiceMetricVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveQualityOfServiceMetric_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveQualityOfServiceMetricResult_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveQualityOfServiceMetricResult_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveQualityOfServiceMetricResult __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveQualityOfServiceMetricResult;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveQualityOfServiceMetricResult;

    typedef struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveQualityOfServiceMetricResultVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveQualityOfServiceMetricResult* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveQualityOfServiceMetricResult* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveQualityOfServiceMetricResult* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveQualityOfServiceMetricResult* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveQualityOfServiceMetricResult* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveQualityOfServiceMetricResult* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveQualityOfServiceMetricResult* This,
        UINT32 index,
        __x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveQualityOfServiceMetricResult** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveQualityOfServiceMetricResult* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveQualityOfServiceMetricResult* This,
        __x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveQualityOfServiceMetricResult* value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveQualityOfServiceMetricResult* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        __x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveQualityOfServiceMetricResult** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveQualityOfServiceMetricResultVtbl;

    interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveQualityOfServiceMetricResult
    {
        CONST_VTBL struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveQualityOfServiceMetricResultVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveQualityOfServiceMetricResult_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveQualityOfServicePrivatePayloadResult_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveQualityOfServicePrivatePayloadResult_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveQualityOfServicePrivatePayloadResult __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveQualityOfServicePrivatePayloadResult;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveQualityOfServicePrivatePayloadResult;

    typedef struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveQualityOfServicePrivatePayloadResultVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveQualityOfServicePrivatePayloadResult* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveQualityOfServicePrivatePayloadResult* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveQualityOfServicePrivatePayloadResult* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveQualityOfServicePrivatePayloadResult* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveQualityOfServicePrivatePayloadResult* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveQualityOfServicePrivatePayloadResult* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveQualityOfServicePrivatePayloadResult* This,
        UINT32 index,
        __x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveQualityOfServicePrivatePayloadResult** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveQualityOfServicePrivatePayloadResult* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveQualityOfServicePrivatePayloadResult* This,
        __x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveQualityOfServicePrivatePayloadResult* value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveQualityOfServicePrivatePayloadResult* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        __x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveQualityOfServicePrivatePayloadResult** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveQualityOfServicePrivatePayloadResultVtbl;

    interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveQualityOfServicePrivatePayloadResult
    {
        CONST_VTBL struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveQualityOfServicePrivatePayloadResultVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveQualityOfServicePrivatePayloadResult_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVector_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveDeviceAddress_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVector_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveDeviceAddress_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVector_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveDeviceAddress __x_ABI_C__FIVector_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveDeviceAddress;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVector_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveDeviceAddress;

    typedef struct __x_ABI_C__FIVector_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveDeviceAddressVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveDeviceAddress* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveDeviceAddress* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveDeviceAddress* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveDeviceAddress* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveDeviceAddress* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveDeviceAddress* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveDeviceAddress* This,
        UINT32 index,
        __x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveDeviceAddress** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveDeviceAddress* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* GetView)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveDeviceAddress* This,
        __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveDeviceAddress** result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveDeviceAddress* This,
        __x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveDeviceAddress* value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* SetAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveDeviceAddress* This,
        UINT32 index,
        __x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveDeviceAddress* value);
    HRESULT (STDMETHODCALLTYPE* InsertAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveDeviceAddress* This,
        UINT32 index,
        __x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveDeviceAddress* value);
    HRESULT (STDMETHODCALLTYPE* RemoveAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveDeviceAddress* This,
        UINT32 index);
    HRESULT (STDMETHODCALLTYPE* Append)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveDeviceAddress* This,
        __x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveDeviceAddress* value);
    HRESULT (STDMETHODCALLTYPE* RemoveAtEnd)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveDeviceAddress* This);
    HRESULT (STDMETHODCALLTYPE* Clear)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveDeviceAddress* This);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveDeviceAddress* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        __x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveDeviceAddress** items,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* ReplaceAll)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveDeviceAddress* This,
        UINT32 itemsLength,
        __x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveDeviceAddress** items);

        END_INTERFACE
    } __x_ABI_C__FIVector_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveDeviceAddressVtbl;

    interface __x_ABI_C__FIVector_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveDeviceAddress
    {
        CONST_VTBL struct __x_ABI_C__FIVector_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveDeviceAddressVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVector_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveDeviceAddress_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVector_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveQualityOfServiceMetric_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVector_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveQualityOfServiceMetric_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVector_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveQualityOfServiceMetric __x_ABI_C__FIVector_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveQualityOfServiceMetric;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVector_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveQualityOfServiceMetric;

    typedef struct __x_ABI_C__FIVector_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveQualityOfServiceMetricVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveQualityOfServiceMetric* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveQualityOfServiceMetric* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveQualityOfServiceMetric* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveQualityOfServiceMetric* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveQualityOfServiceMetric* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveQualityOfServiceMetric* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveQualityOfServiceMetric* This,
        UINT32 index,
        enum __x_ABI_CWindows_CNetworking_CXboxLive_CXboxLiveQualityOfServiceMetric* result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveQualityOfServiceMetric* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* GetView)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveQualityOfServiceMetric* This,
        __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveQualityOfServiceMetric** result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveQualityOfServiceMetric* This,
        enum __x_ABI_CWindows_CNetworking_CXboxLive_CXboxLiveQualityOfServiceMetric value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* SetAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveQualityOfServiceMetric* This,
        UINT32 index,
        enum __x_ABI_CWindows_CNetworking_CXboxLive_CXboxLiveQualityOfServiceMetric value);
    HRESULT (STDMETHODCALLTYPE* InsertAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveQualityOfServiceMetric* This,
        UINT32 index,
        enum __x_ABI_CWindows_CNetworking_CXboxLive_CXboxLiveQualityOfServiceMetric value);
    HRESULT (STDMETHODCALLTYPE* RemoveAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveQualityOfServiceMetric* This,
        UINT32 index);
    HRESULT (STDMETHODCALLTYPE* Append)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveQualityOfServiceMetric* This,
        enum __x_ABI_CWindows_CNetworking_CXboxLive_CXboxLiveQualityOfServiceMetric value);
    HRESULT (STDMETHODCALLTYPE* RemoveAtEnd)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveQualityOfServiceMetric* This);
    HRESULT (STDMETHODCALLTYPE* Clear)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveQualityOfServiceMetric* This);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveQualityOfServiceMetric* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        enum __x_ABI_CWindows_CNetworking_CXboxLive_CXboxLiveQualityOfServiceMetric* items,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* ReplaceAll)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveQualityOfServiceMetric* This,
        UINT32 itemsLength,
        enum __x_ABI_CWindows_CNetworking_CXboxLive_CXboxLiveQualityOfServiceMetric* items);

        END_INTERFACE
    } __x_ABI_C__FIVector_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveQualityOfServiceMetricVtbl;

    interface __x_ABI_C__FIVector_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveQualityOfServiceMetric
    {
        CONST_VTBL struct __x_ABI_C__FIVector_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveQualityOfServiceMetricVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVector_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveQualityOfServiceMetric_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveDeviceAddress_IInspectable_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveDeviceAddress_IInspectable_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveDeviceAddress_IInspectable __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveDeviceAddress_IInspectable;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveDeviceAddress_IInspectable;

    typedef struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveDeviceAddress_IInspectableVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveDeviceAddress_IInspectable* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveDeviceAddress_IInspectable* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveDeviceAddress_IInspectable* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveDeviceAddress_IInspectable* This,
        __x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveDeviceAddress* sender,
        IInspectable* args);

        END_INTERFACE
    } __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveDeviceAddress_IInspectableVtbl;

    interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveDeviceAddress_IInspectable
    {
        CONST_VTBL struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveDeviceAddress_IInspectableVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveDeviceAddress_IInspectable_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveEndpointPair___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveEndpointPairStateChangedEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveEndpointPair___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveEndpointPairStateChangedEventArgs_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveEndpointPair___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveEndpointPairStateChangedEventArgs __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveEndpointPair___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveEndpointPairStateChangedEventArgs;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveEndpointPair___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveEndpointPairStateChangedEventArgs;

    typedef struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveEndpointPair___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveEndpointPairStateChangedEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveEndpointPair___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveEndpointPairStateChangedEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveEndpointPair___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveEndpointPairStateChangedEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveEndpointPair___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveEndpointPairStateChangedEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveEndpointPair___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveEndpointPairStateChangedEventArgs* This,
        __x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveEndpointPair* sender,
        __x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveEndpointPairStateChangedEventArgs* args);

        END_INTERFACE
    } __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveEndpointPair___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveEndpointPairStateChangedEventArgsVtbl;

    interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveEndpointPair___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveEndpointPairStateChangedEventArgs
    {
        CONST_VTBL struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveEndpointPair___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveEndpointPairStateChangedEventArgsVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveEndpointPair___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveEndpointPairStateChangedEventArgs_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveEndpointPairTemplate___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveInboundEndpointPairCreatedEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveEndpointPairTemplate___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveInboundEndpointPairCreatedEventArgs_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveEndpointPairTemplate___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveInboundEndpointPairCreatedEventArgs __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveEndpointPairTemplate___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveInboundEndpointPairCreatedEventArgs;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveEndpointPairTemplate___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveInboundEndpointPairCreatedEventArgs;

    typedef struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveEndpointPairTemplate___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveInboundEndpointPairCreatedEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveEndpointPairTemplate___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveInboundEndpointPairCreatedEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveEndpointPairTemplate___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveInboundEndpointPairCreatedEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveEndpointPairTemplate___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveInboundEndpointPairCreatedEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveEndpointPairTemplate___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveInboundEndpointPairCreatedEventArgs* This,
        __x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveEndpointPairTemplate* sender,
        __x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveInboundEndpointPairCreatedEventArgs* args);

        END_INTERFACE
    } __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveEndpointPairTemplate___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveInboundEndpointPairCreatedEventArgsVtbl;

    interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveEndpointPairTemplate___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveInboundEndpointPairCreatedEventArgs
    {
        CONST_VTBL struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveEndpointPairTemplate___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveInboundEndpointPairCreatedEventArgsVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveEndpointPairTemplate___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveInboundEndpointPairCreatedEventArgs_INTERFACE_DEFINED__
    
typedef enum __x_ABI_CWindows_CFoundation_CAsyncStatus __x_ABI_CWindows_CFoundation_CAsyncStatus;

#ifndef ____x_ABI_CWindows_CFoundation_CIAsyncAction_FWD_DEFINED__
#define ____x_ABI_CWindows_CFoundation_CIAsyncAction_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CFoundation_CIAsyncAction __x_ABI_CWindows_CFoundation_CIAsyncAction;

#endif // ____x_ABI_CWindows_CFoundation_CIAsyncAction_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CFoundation_CIAsyncInfo_FWD_DEFINED__
#define ____x_ABI_CWindows_CFoundation_CIAsyncInfo_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CFoundation_CIAsyncInfo __x_ABI_CWindows_CFoundation_CIAsyncInfo;

#endif // ____x_ABI_CWindows_CFoundation_CIAsyncInfo_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CNetworking_CIHostName_FWD_DEFINED__
#define ____x_ABI_CWindows_CNetworking_CIHostName_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CNetworking_CIHostName __x_ABI_CWindows_CNetworking_CIHostName;

#endif // ____x_ABI_CWindows_CNetworking_CIHostName_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CStorage_CStreams_CIBuffer_FWD_DEFINED__
#define ____x_ABI_CWindows_CStorage_CStreams_CIBuffer_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CStorage_CStreams_CIBuffer __x_ABI_CWindows_CStorage_CStreams_CIBuffer;

#endif // ____x_ABI_CWindows_CStorage_CStreams_CIBuffer_FWD_DEFINED__

typedef enum __x_ABI_CWindows_CNetworking_CXboxLive_CXboxLiveEndpointPairCreationBehaviors __x_ABI_CWindows_CNetworking_CXboxLive_CXboxLiveEndpointPairCreationBehaviors;

typedef enum __x_ABI_CWindows_CNetworking_CXboxLive_CXboxLiveEndpointPairCreationStatus __x_ABI_CWindows_CNetworking_CXboxLive_CXboxLiveEndpointPairCreationStatus;

typedef enum __x_ABI_CWindows_CNetworking_CXboxLive_CXboxLiveEndpointPairState __x_ABI_CWindows_CNetworking_CXboxLive_CXboxLiveEndpointPairState;

typedef enum __x_ABI_CWindows_CNetworking_CXboxLive_CXboxLiveNetworkAccessKind __x_ABI_CWindows_CNetworking_CXboxLive_CXboxLiveNetworkAccessKind;

typedef enum __x_ABI_CWindows_CNetworking_CXboxLive_CXboxLiveQualityOfServiceMeasurementStatus __x_ABI_CWindows_CNetworking_CXboxLive_CXboxLiveQualityOfServiceMeasurementStatus;

typedef enum __x_ABI_CWindows_CNetworking_CXboxLive_CXboxLiveSocketKind __x_ABI_CWindows_CNetworking_CXboxLive_CXboxLiveSocketKind;

enum __x_ABI_CWindows_CNetworking_CXboxLive_CXboxLiveEndpointPairCreationBehaviors
    {
        __x_ABI_CWindows_CNetworking_CXboxLive_CXboxLiveEndpointPairCreationBehaviors_None = 0,
    __x_ABI_CWindows_CNetworking_CXboxLive_CXboxLiveEndpointPairCreationBehaviors_ReevaluatePath = 0x1,
};

enum __x_ABI_CWindows_CNetworking_CXboxLive_CXboxLiveEndpointPairCreationStatus
    {
        __x_ABI_CWindows_CNetworking_CXboxLive_CXboxLiveEndpointPairCreationStatus_Succeeded = 0,
    __x_ABI_CWindows_CNetworking_CXboxLive_CXboxLiveEndpointPairCreationStatus_NoLocalNetworks = 1,
    __x_ABI_CWindows_CNetworking_CXboxLive_CXboxLiveEndpointPairCreationStatus_NoCompatibleNetworkPaths = 2,
    __x_ABI_CWindows_CNetworking_CXboxLive_CXboxLiveEndpointPairCreationStatus_LocalSystemNotAuthorized = 3,
    __x_ABI_CWindows_CNetworking_CXboxLive_CXboxLiveEndpointPairCreationStatus_Canceled = 4,
    __x_ABI_CWindows_CNetworking_CXboxLive_CXboxLiveEndpointPairCreationStatus_TimedOut = 5,
    __x_ABI_CWindows_CNetworking_CXboxLive_CXboxLiveEndpointPairCreationStatus_RemoteSystemNotAuthorized = 6,
    __x_ABI_CWindows_CNetworking_CXboxLive_CXboxLiveEndpointPairCreationStatus_RefusedDueToConfiguration = 7,
    __x_ABI_CWindows_CNetworking_CXboxLive_CXboxLiveEndpointPairCreationStatus_UnexpectedInternalError = 8,
};

enum __x_ABI_CWindows_CNetworking_CXboxLive_CXboxLiveEndpointPairState
    {
        __x_ABI_CWindows_CNetworking_CXboxLive_CXboxLiveEndpointPairState_Invalid = 0,
    __x_ABI_CWindows_CNetworking_CXboxLive_CXboxLiveEndpointPairState_CreatingOutbound = 1,
    __x_ABI_CWindows_CNetworking_CXboxLive_CXboxLiveEndpointPairState_CreatingInbound = 2,
    __x_ABI_CWindows_CNetworking_CXboxLive_CXboxLiveEndpointPairState_Ready = 3,
    __x_ABI_CWindows_CNetworking_CXboxLive_CXboxLiveEndpointPairState_DeletingLocally = 4,
    __x_ABI_CWindows_CNetworking_CXboxLive_CXboxLiveEndpointPairState_RemoteEndpointTerminating = 5,
    __x_ABI_CWindows_CNetworking_CXboxLive_CXboxLiveEndpointPairState_Deleted = 6,
};

enum __x_ABI_CWindows_CNetworking_CXboxLive_CXboxLiveNetworkAccessKind
    {
        __x_ABI_CWindows_CNetworking_CXboxLive_CXboxLiveNetworkAccessKind_Open = 0,
    __x_ABI_CWindows_CNetworking_CXboxLive_CXboxLiveNetworkAccessKind_Moderate = 1,
    __x_ABI_CWindows_CNetworking_CXboxLive_CXboxLiveNetworkAccessKind_Strict = 2,
};

enum __x_ABI_CWindows_CNetworking_CXboxLive_CXboxLiveQualityOfServiceMeasurementStatus
    {
        __x_ABI_CWindows_CNetworking_CXboxLive_CXboxLiveQualityOfServiceMeasurementStatus_NotStarted = 0,
    __x_ABI_CWindows_CNetworking_CXboxLive_CXboxLiveQualityOfServiceMeasurementStatus_InProgress = 1,
    __x_ABI_CWindows_CNetworking_CXboxLive_CXboxLiveQualityOfServiceMeasurementStatus_InProgressWithProvisionalResults = 2,
    __x_ABI_CWindows_CNetworking_CXboxLive_CXboxLiveQualityOfServiceMeasurementStatus_Succeeded = 3,
    __x_ABI_CWindows_CNetworking_CXboxLive_CXboxLiveQualityOfServiceMeasurementStatus_NoLocalNetworks = 4,
    __x_ABI_CWindows_CNetworking_CXboxLive_CXboxLiveQualityOfServiceMeasurementStatus_NoCompatibleNetworkPaths = 5,
    __x_ABI_CWindows_CNetworking_CXboxLive_CXboxLiveQualityOfServiceMeasurementStatus_LocalSystemNotAuthorized = 6,
    __x_ABI_CWindows_CNetworking_CXboxLive_CXboxLiveQualityOfServiceMeasurementStatus_Canceled = 7,
    __x_ABI_CWindows_CNetworking_CXboxLive_CXboxLiveQualityOfServiceMeasurementStatus_TimedOut = 8,
    __x_ABI_CWindows_CNetworking_CXboxLive_CXboxLiveQualityOfServiceMeasurementStatus_RemoteSystemNotAuthorized = 9,
    __x_ABI_CWindows_CNetworking_CXboxLive_CXboxLiveQualityOfServiceMeasurementStatus_RefusedDueToConfiguration = 10,
    __x_ABI_CWindows_CNetworking_CXboxLive_CXboxLiveQualityOfServiceMeasurementStatus_UnexpectedInternalError = 11,
};

enum __x_ABI_CWindows_CNetworking_CXboxLive_CXboxLiveQualityOfServiceMetric
    {
        __x_ABI_CWindows_CNetworking_CXboxLive_CXboxLiveQualityOfServiceMetric_AverageLatencyInMilliseconds = 0,
    __x_ABI_CWindows_CNetworking_CXboxLive_CXboxLiveQualityOfServiceMetric_MinLatencyInMilliseconds = 1,
    __x_ABI_CWindows_CNetworking_CXboxLive_CXboxLiveQualityOfServiceMetric_MaxLatencyInMilliseconds = 2,
    __x_ABI_CWindows_CNetworking_CXboxLive_CXboxLiveQualityOfServiceMetric_AverageOutboundBitsPerSecond = 3,
    __x_ABI_CWindows_CNetworking_CXboxLive_CXboxLiveQualityOfServiceMetric_MinOutboundBitsPerSecond = 4,
    __x_ABI_CWindows_CNetworking_CXboxLive_CXboxLiveQualityOfServiceMetric_MaxOutboundBitsPerSecond = 5,
    __x_ABI_CWindows_CNetworking_CXboxLive_CXboxLiveQualityOfServiceMetric_AverageInboundBitsPerSecond = 6,
    __x_ABI_CWindows_CNetworking_CXboxLive_CXboxLiveQualityOfServiceMetric_MinInboundBitsPerSecond = 7,
    __x_ABI_CWindows_CNetworking_CXboxLive_CXboxLiveQualityOfServiceMetric_MaxInboundBitsPerSecond = 8,
};

enum __x_ABI_CWindows_CNetworking_CXboxLive_CXboxLiveSocketKind
    {
        __x_ABI_CWindows_CNetworking_CXboxLive_CXboxLiveSocketKind_None = 0,
    __x_ABI_CWindows_CNetworking_CXboxLive_CXboxLiveSocketKind_Datagram = 1,
    __x_ABI_CWindows_CNetworking_CXboxLive_CXboxLiveSocketKind_Stream = 2,
};

#if !defined(____x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveDeviceAddress_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveDeviceAddress_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveDeviceAddressVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveDeviceAddress* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveDeviceAddress* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveDeviceAddress* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveDeviceAddress* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveDeviceAddress* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveDeviceAddress* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* add_SnapshotChanged)(__x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveDeviceAddress* This,
        __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveDeviceAddress_IInspectable* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_SnapshotChanged)(__x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveDeviceAddress* This,
        EventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* GetSnapshotAsBase64)(__x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveDeviceAddress* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* GetSnapshotAsBuffer)(__x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveDeviceAddress* This,
        __x_ABI_CWindows_CStorage_CStreams_CIBuffer** value);
    HRESULT (STDMETHODCALLTYPE* GetSnapshotAsBytes)(__x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveDeviceAddress* This,
        UINT32 bufferLength,
        BYTE* buffer,
        UINT32* bytesWritten);
    HRESULT (STDMETHODCALLTYPE* Compare)(__x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveDeviceAddress* This,
        __x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveDeviceAddress* otherDeviceAddress,
        INT32* result);
    HRESULT (STDMETHODCALLTYPE* get_IsValid)(__x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveDeviceAddress* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* get_IsLocal)(__x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveDeviceAddress* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* get_NetworkAccessKind)(__x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveDeviceAddress* This,
        enum __x_ABI_CWindows_CNetworking_CXboxLive_CXboxLiveNetworkAccessKind* value);

        END_INTERFACE
    } __x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveDeviceAddressVtbl;

    interface __x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveDeviceAddress
    {
        CONST_VTBL struct __x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveDeviceAddressVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveDeviceAddress;
#endif /* !defined(____x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveDeviceAddress_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveDeviceAddressStatics_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveDeviceAddressStatics_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveDeviceAddressStaticsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveDeviceAddressStatics* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveDeviceAddressStatics* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveDeviceAddressStatics* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveDeviceAddressStatics* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveDeviceAddressStatics* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveDeviceAddressStatics* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* CreateFromSnapshotBase64)(__x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveDeviceAddressStatics* This,
        HSTRING base64,
        __x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveDeviceAddress** value);
    HRESULT (STDMETHODCALLTYPE* CreateFromSnapshotBuffer)(__x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveDeviceAddressStatics* This,
        __x_ABI_CWindows_CStorage_CStreams_CIBuffer* buffer,
        __x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveDeviceAddress** value);
    HRESULT (STDMETHODCALLTYPE* CreateFromSnapshotBytes)(__x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveDeviceAddressStatics* This,
        UINT32 bufferLength,
        BYTE* buffer,
        __x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveDeviceAddress** value);
    HRESULT (STDMETHODCALLTYPE* GetLocal)(__x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveDeviceAddressStatics* This,
        __x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveDeviceAddress** value);
    HRESULT (STDMETHODCALLTYPE* get_MaxSnapshotBytesSize)(__x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveDeviceAddressStatics* This,
        UINT32* value);

        END_INTERFACE
    } __x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveDeviceAddressStaticsVtbl;

    interface __x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveDeviceAddressStatics
    {
        CONST_VTBL struct __x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveDeviceAddressStaticsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveDeviceAddressStatics;
#endif /* !defined(____x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveDeviceAddressStatics_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveEndpointPair_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveEndpointPair_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveEndpointPairVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveEndpointPair* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveEndpointPair* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveEndpointPair* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveEndpointPair* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveEndpointPair* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveEndpointPair* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* add_StateChanged)(__x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveEndpointPair* This,
        __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveEndpointPair___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveEndpointPairStateChangedEventArgs* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_StateChanged)(__x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveEndpointPair* This,
        EventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* DeleteAsync)(__x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveEndpointPair* This,
        __x_ABI_CWindows_CFoundation_CIAsyncAction** action);
    HRESULT (STDMETHODCALLTYPE* GetRemoteSocketAddressBytes)(__x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveEndpointPair* This,
        UINT32 socketAddressLength,
        BYTE* socketAddress);
    HRESULT (STDMETHODCALLTYPE* GetLocalSocketAddressBytes)(__x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveEndpointPair* This,
        UINT32 socketAddressLength,
        BYTE* socketAddress);
    HRESULT (STDMETHODCALLTYPE* get_State)(__x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveEndpointPair* This,
        enum __x_ABI_CWindows_CNetworking_CXboxLive_CXboxLiveEndpointPairState* value);
    HRESULT (STDMETHODCALLTYPE* get_Template)(__x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveEndpointPair* This,
        __x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveEndpointPairTemplate** value);
    HRESULT (STDMETHODCALLTYPE* get_RemoteDeviceAddress)(__x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveEndpointPair* This,
        __x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveDeviceAddress** value);
    HRESULT (STDMETHODCALLTYPE* get_RemoteHostName)(__x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveEndpointPair* This,
        __x_ABI_CWindows_CNetworking_CIHostName** value);
    HRESULT (STDMETHODCALLTYPE* get_RemotePort)(__x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveEndpointPair* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_LocalHostName)(__x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveEndpointPair* This,
        __x_ABI_CWindows_CNetworking_CIHostName** value);
    HRESULT (STDMETHODCALLTYPE* get_LocalPort)(__x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveEndpointPair* This,
        HSTRING* value);

        END_INTERFACE
    } __x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveEndpointPairVtbl;

    interface __x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveEndpointPair
    {
        CONST_VTBL struct __x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveEndpointPairVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveEndpointPair;
#endif /* !defined(____x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveEndpointPair_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveEndpointPairCreationResult_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveEndpointPairCreationResult_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveEndpointPairCreationResultVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveEndpointPairCreationResult* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveEndpointPairCreationResult* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveEndpointPairCreationResult* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveEndpointPairCreationResult* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveEndpointPairCreationResult* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveEndpointPairCreationResult* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_DeviceAddress)(__x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveEndpointPairCreationResult* This,
        __x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveDeviceAddress** value);
    HRESULT (STDMETHODCALLTYPE* get_Status)(__x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveEndpointPairCreationResult* This,
        enum __x_ABI_CWindows_CNetworking_CXboxLive_CXboxLiveEndpointPairCreationStatus* value);
    HRESULT (STDMETHODCALLTYPE* get_IsExistingPathEvaluation)(__x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveEndpointPairCreationResult* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* get_EndpointPair)(__x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveEndpointPairCreationResult* This,
        __x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveEndpointPair** value);

        END_INTERFACE
    } __x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveEndpointPairCreationResultVtbl;

    interface __x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveEndpointPairCreationResult
    {
        CONST_VTBL struct __x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveEndpointPairCreationResultVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveEndpointPairCreationResult;
#endif /* !defined(____x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveEndpointPairCreationResult_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveEndpointPairStateChangedEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveEndpointPairStateChangedEventArgs_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveEndpointPairStateChangedEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveEndpointPairStateChangedEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveEndpointPairStateChangedEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveEndpointPairStateChangedEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveEndpointPairStateChangedEventArgs* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveEndpointPairStateChangedEventArgs* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveEndpointPairStateChangedEventArgs* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_OldState)(__x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveEndpointPairStateChangedEventArgs* This,
        enum __x_ABI_CWindows_CNetworking_CXboxLive_CXboxLiveEndpointPairState* value);
    HRESULT (STDMETHODCALLTYPE* get_NewState)(__x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveEndpointPairStateChangedEventArgs* This,
        enum __x_ABI_CWindows_CNetworking_CXboxLive_CXboxLiveEndpointPairState* value);

        END_INTERFACE
    } __x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveEndpointPairStateChangedEventArgsVtbl;

    interface __x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveEndpointPairStateChangedEventArgs
    {
        CONST_VTBL struct __x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveEndpointPairStateChangedEventArgsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveEndpointPairStateChangedEventArgs;
#endif /* !defined(____x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveEndpointPairStateChangedEventArgs_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveEndpointPairStatics_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveEndpointPairStatics_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveEndpointPairStaticsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveEndpointPairStatics* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveEndpointPairStatics* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveEndpointPairStatics* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveEndpointPairStatics* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveEndpointPairStatics* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveEndpointPairStatics* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* FindEndpointPairBySocketAddressBytes)(__x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveEndpointPairStatics* This,
        UINT32 localSocketAddressLength,
        BYTE* localSocketAddress,
        UINT32 remoteSocketAddressLength,
        BYTE* remoteSocketAddress,
        __x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveEndpointPair** endpointPair);
    HRESULT (STDMETHODCALLTYPE* FindEndpointPairByHostNamesAndPorts)(__x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveEndpointPairStatics* This,
        __x_ABI_CWindows_CNetworking_CIHostName* localHostName,
        HSTRING localPort,
        __x_ABI_CWindows_CNetworking_CIHostName* remoteHostName,
        HSTRING remotePort,
        __x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveEndpointPair** endpointPair);

        END_INTERFACE
    } __x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveEndpointPairStaticsVtbl;

    interface __x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveEndpointPairStatics
    {
        CONST_VTBL struct __x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveEndpointPairStaticsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveEndpointPairStatics;
#endif /* !defined(____x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveEndpointPairStatics_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveEndpointPairTemplate_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveEndpointPairTemplate_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveEndpointPairTemplateVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveEndpointPairTemplate* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveEndpointPairTemplate* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveEndpointPairTemplate* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveEndpointPairTemplate* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveEndpointPairTemplate* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveEndpointPairTemplate* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* add_InboundEndpointPairCreated)(__x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveEndpointPairTemplate* This,
        __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveEndpointPairTemplate___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveInboundEndpointPairCreatedEventArgs* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_InboundEndpointPairCreated)(__x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveEndpointPairTemplate* This,
        EventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* CreateEndpointPairDefaultAsync)(__x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveEndpointPairTemplate* This,
        __x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveDeviceAddress* deviceAddress,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveEndpointPairCreationResult** operation);
    HRESULT (STDMETHODCALLTYPE* CreateEndpointPairWithBehaviorsAsync)(__x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveEndpointPairTemplate* This,
        __x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveDeviceAddress* deviceAddress,
        enum __x_ABI_CWindows_CNetworking_CXboxLive_CXboxLiveEndpointPairCreationBehaviors behaviors,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveEndpointPairCreationResult** operation);
    HRESULT (STDMETHODCALLTYPE* CreateEndpointPairForPortsDefaultAsync)(__x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveEndpointPairTemplate* This,
        __x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveDeviceAddress* deviceAddress,
        HSTRING initiatorPort,
        HSTRING acceptorPort,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveEndpointPairCreationResult** operation);
    HRESULT (STDMETHODCALLTYPE* CreateEndpointPairForPortsWithBehaviorsAsync)(__x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveEndpointPairTemplate* This,
        __x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveDeviceAddress* deviceAddress,
        HSTRING initiatorPort,
        HSTRING acceptorPort,
        enum __x_ABI_CWindows_CNetworking_CXboxLive_CXboxLiveEndpointPairCreationBehaviors behaviors,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveEndpointPairCreationResult** operation);
    HRESULT (STDMETHODCALLTYPE* get_Name)(__x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveEndpointPairTemplate* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_SocketKind)(__x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveEndpointPairTemplate* This,
        enum __x_ABI_CWindows_CNetworking_CXboxLive_CXboxLiveSocketKind* value);
    HRESULT (STDMETHODCALLTYPE* get_InitiatorBoundPortRangeLower)(__x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveEndpointPairTemplate* This,
        UINT16* value);
    HRESULT (STDMETHODCALLTYPE* get_InitiatorBoundPortRangeUpper)(__x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveEndpointPairTemplate* This,
        UINT16* value);
    HRESULT (STDMETHODCALLTYPE* get_AcceptorBoundPortRangeLower)(__x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveEndpointPairTemplate* This,
        UINT16* value);
    HRESULT (STDMETHODCALLTYPE* get_AcceptorBoundPortRangeUpper)(__x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveEndpointPairTemplate* This,
        UINT16* value);
    HRESULT (STDMETHODCALLTYPE* get_EndpointPairs)(__x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveEndpointPairTemplate* This,
        __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveEndpointPair** value);

        END_INTERFACE
    } __x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveEndpointPairTemplateVtbl;

    interface __x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveEndpointPairTemplate
    {
        CONST_VTBL struct __x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveEndpointPairTemplateVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveEndpointPairTemplate;
#endif /* !defined(____x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveEndpointPairTemplate_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveEndpointPairTemplateStatics_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveEndpointPairTemplateStatics_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveEndpointPairTemplateStaticsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveEndpointPairTemplateStatics* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveEndpointPairTemplateStatics* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveEndpointPairTemplateStatics* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveEndpointPairTemplateStatics* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveEndpointPairTemplateStatics* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveEndpointPairTemplateStatics* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetTemplateByName)(__x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveEndpointPairTemplateStatics* This,
        HSTRING name,
        __x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveEndpointPairTemplate** namedTemplate);
    HRESULT (STDMETHODCALLTYPE* get_Templates)(__x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveEndpointPairTemplateStatics* This,
        __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveEndpointPairTemplate** value);

        END_INTERFACE
    } __x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveEndpointPairTemplateStaticsVtbl;

    interface __x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveEndpointPairTemplateStatics
    {
        CONST_VTBL struct __x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveEndpointPairTemplateStaticsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveEndpointPairTemplateStatics;
#endif /* !defined(____x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveEndpointPairTemplateStatics_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveInboundEndpointPairCreatedEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveInboundEndpointPairCreatedEventArgs_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveInboundEndpointPairCreatedEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveInboundEndpointPairCreatedEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveInboundEndpointPairCreatedEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveInboundEndpointPairCreatedEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveInboundEndpointPairCreatedEventArgs* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveInboundEndpointPairCreatedEventArgs* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveInboundEndpointPairCreatedEventArgs* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_EndpointPair)(__x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveInboundEndpointPairCreatedEventArgs* This,
        __x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveEndpointPair** value);

        END_INTERFACE
    } __x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveInboundEndpointPairCreatedEventArgsVtbl;

    interface __x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveInboundEndpointPairCreatedEventArgs
    {
        CONST_VTBL struct __x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveInboundEndpointPairCreatedEventArgsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveInboundEndpointPairCreatedEventArgs;
#endif /* !defined(____x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveInboundEndpointPairCreatedEventArgs_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveQualityOfServiceMeasurement_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveQualityOfServiceMeasurement_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveQualityOfServiceMeasurementVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveQualityOfServiceMeasurement* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveQualityOfServiceMeasurement* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveQualityOfServiceMeasurement* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveQualityOfServiceMeasurement* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveQualityOfServiceMeasurement* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveQualityOfServiceMeasurement* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* MeasureAsync)(__x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveQualityOfServiceMeasurement* This,
        __x_ABI_CWindows_CFoundation_CIAsyncAction** action);
    HRESULT (STDMETHODCALLTYPE* GetMetricResultsForDevice)(__x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveQualityOfServiceMeasurement* This,
        __x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveDeviceAddress* deviceAddress,
        __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveQualityOfServiceMetricResult** value);
    HRESULT (STDMETHODCALLTYPE* GetMetricResultsForMetric)(__x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveQualityOfServiceMeasurement* This,
        enum __x_ABI_CWindows_CNetworking_CXboxLive_CXboxLiveQualityOfServiceMetric metric,
        __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveQualityOfServiceMetricResult** value);
    HRESULT (STDMETHODCALLTYPE* GetMetricResult)(__x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveQualityOfServiceMeasurement* This,
        __x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveDeviceAddress* deviceAddress,
        enum __x_ABI_CWindows_CNetworking_CXboxLive_CXboxLiveQualityOfServiceMetric metric,
        __x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveQualityOfServiceMetricResult** value);
    HRESULT (STDMETHODCALLTYPE* GetPrivatePayloadResult)(__x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveQualityOfServiceMeasurement* This,
        __x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveDeviceAddress* deviceAddress,
        __x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveQualityOfServicePrivatePayloadResult** value);
    HRESULT (STDMETHODCALLTYPE* get_Metrics)(__x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveQualityOfServiceMeasurement* This,
        __x_ABI_C__FIVector_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveQualityOfServiceMetric** value);
    HRESULT (STDMETHODCALLTYPE* get_DeviceAddresses)(__x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveQualityOfServiceMeasurement* This,
        __x_ABI_C__FIVector_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveDeviceAddress** value);
    HRESULT (STDMETHODCALLTYPE* get_ShouldRequestPrivatePayloads)(__x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveQualityOfServiceMeasurement* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* put_ShouldRequestPrivatePayloads)(__x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveQualityOfServiceMeasurement* This,
        boolean value);
    HRESULT (STDMETHODCALLTYPE* get_TimeoutInMilliseconds)(__x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveQualityOfServiceMeasurement* This,
        UINT32* value);
    HRESULT (STDMETHODCALLTYPE* put_TimeoutInMilliseconds)(__x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveQualityOfServiceMeasurement* This,
        UINT32 value);
    HRESULT (STDMETHODCALLTYPE* get_NumberOfProbesToAttempt)(__x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveQualityOfServiceMeasurement* This,
        UINT32* value);
    HRESULT (STDMETHODCALLTYPE* put_NumberOfProbesToAttempt)(__x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveQualityOfServiceMeasurement* This,
        UINT32 value);
    HRESULT (STDMETHODCALLTYPE* get_NumberOfResultsPending)(__x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveQualityOfServiceMeasurement* This,
        UINT32* value);
    HRESULT (STDMETHODCALLTYPE* get_MetricResults)(__x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveQualityOfServiceMeasurement* This,
        __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveQualityOfServiceMetricResult** value);
    HRESULT (STDMETHODCALLTYPE* get_PrivatePayloadResults)(__x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveQualityOfServiceMeasurement* This,
        __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CXboxLive__CXboxLiveQualityOfServicePrivatePayloadResult** value);

        END_INTERFACE
    } __x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveQualityOfServiceMeasurementVtbl;

    interface __x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveQualityOfServiceMeasurement
    {
        CONST_VTBL struct __x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveQualityOfServiceMeasurementVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveQualityOfServiceMeasurement;
#endif /* !defined(____x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveQualityOfServiceMeasurement_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveQualityOfServiceMeasurementStatics_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveQualityOfServiceMeasurementStatics_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveQualityOfServiceMeasurementStaticsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveQualityOfServiceMeasurementStatics* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveQualityOfServiceMeasurementStatics* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveQualityOfServiceMeasurementStatics* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveQualityOfServiceMeasurementStatics* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveQualityOfServiceMeasurementStatics* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveQualityOfServiceMeasurementStatics* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* PublishPrivatePayloadBytes)(__x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveQualityOfServiceMeasurementStatics* This,
        UINT32 payloadLength,
        BYTE* payload);
    HRESULT (STDMETHODCALLTYPE* ClearPrivatePayload)(__x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveQualityOfServiceMeasurementStatics* This);
    HRESULT (STDMETHODCALLTYPE* get_MaxSimultaneousProbeConnections)(__x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveQualityOfServiceMeasurementStatics* This,
        UINT32* value);
    HRESULT (STDMETHODCALLTYPE* put_MaxSimultaneousProbeConnections)(__x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveQualityOfServiceMeasurementStatics* This,
        UINT32 value);
    HRESULT (STDMETHODCALLTYPE* get_IsSystemOutboundBandwidthConstrained)(__x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveQualityOfServiceMeasurementStatics* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* put_IsSystemOutboundBandwidthConstrained)(__x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveQualityOfServiceMeasurementStatics* This,
        boolean value);
    HRESULT (STDMETHODCALLTYPE* get_IsSystemInboundBandwidthConstrained)(__x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveQualityOfServiceMeasurementStatics* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* put_IsSystemInboundBandwidthConstrained)(__x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveQualityOfServiceMeasurementStatics* This,
        boolean value);
    HRESULT (STDMETHODCALLTYPE* get_PublishedPrivatePayload)(__x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveQualityOfServiceMeasurementStatics* This,
        __x_ABI_CWindows_CStorage_CStreams_CIBuffer** value);
    HRESULT (STDMETHODCALLTYPE* put_PublishedPrivatePayload)(__x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveQualityOfServiceMeasurementStatics* This,
        __x_ABI_CWindows_CStorage_CStreams_CIBuffer* value);
    HRESULT (STDMETHODCALLTYPE* get_MaxPrivatePayloadSize)(__x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveQualityOfServiceMeasurementStatics* This,
        UINT32* value);

        END_INTERFACE
    } __x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveQualityOfServiceMeasurementStaticsVtbl;

    interface __x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveQualityOfServiceMeasurementStatics
    {
        CONST_VTBL struct __x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveQualityOfServiceMeasurementStaticsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveQualityOfServiceMeasurementStatics;
#endif /* !defined(____x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveQualityOfServiceMeasurementStatics_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveQualityOfServiceMetricResult_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveQualityOfServiceMetricResult_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveQualityOfServiceMetricResultVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveQualityOfServiceMetricResult* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveQualityOfServiceMetricResult* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveQualityOfServiceMetricResult* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveQualityOfServiceMetricResult* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveQualityOfServiceMetricResult* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveQualityOfServiceMetricResult* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Status)(__x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveQualityOfServiceMetricResult* This,
        enum __x_ABI_CWindows_CNetworking_CXboxLive_CXboxLiveQualityOfServiceMeasurementStatus* value);
    HRESULT (STDMETHODCALLTYPE* get_DeviceAddress)(__x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveQualityOfServiceMetricResult* This,
        __x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveDeviceAddress** value);
    HRESULT (STDMETHODCALLTYPE* get_Metric)(__x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveQualityOfServiceMetricResult* This,
        enum __x_ABI_CWindows_CNetworking_CXboxLive_CXboxLiveQualityOfServiceMetric* value);
    HRESULT (STDMETHODCALLTYPE* get_Value)(__x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveQualityOfServiceMetricResult* This,
        UINT64* value);

        END_INTERFACE
    } __x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveQualityOfServiceMetricResultVtbl;

    interface __x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveQualityOfServiceMetricResult
    {
        CONST_VTBL struct __x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveQualityOfServiceMetricResultVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveQualityOfServiceMetricResult;
#endif /* !defined(____x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveQualityOfServiceMetricResult_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveQualityOfServicePrivatePayloadResult_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveQualityOfServicePrivatePayloadResult_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveQualityOfServicePrivatePayloadResultVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveQualityOfServicePrivatePayloadResult* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveQualityOfServicePrivatePayloadResult* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveQualityOfServicePrivatePayloadResult* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveQualityOfServicePrivatePayloadResult* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveQualityOfServicePrivatePayloadResult* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveQualityOfServicePrivatePayloadResult* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Status)(__x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveQualityOfServicePrivatePayloadResult* This,
        enum __x_ABI_CWindows_CNetworking_CXboxLive_CXboxLiveQualityOfServiceMeasurementStatus* value);
    HRESULT (STDMETHODCALLTYPE* get_DeviceAddress)(__x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveQualityOfServicePrivatePayloadResult* This,
        __x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveDeviceAddress** value);
    HRESULT (STDMETHODCALLTYPE* get_Value)(__x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveQualityOfServicePrivatePayloadResult* This,
        __x_ABI_CWindows_CStorage_CStreams_CIBuffer** value);

        END_INTERFACE
    } __x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveQualityOfServicePrivatePayloadResultVtbl;

    interface __x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveQualityOfServicePrivatePayloadResult
    {
        CONST_VTBL struct __x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveQualityOfServicePrivatePayloadResultVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveQualityOfServicePrivatePayloadResult;
#endif /* !defined(____x_ABI_CWindows_CNetworking_CXboxLive_CIXboxLiveQualityOfServicePrivatePayloadResult_INTERFACE_DEFINED__) */
    

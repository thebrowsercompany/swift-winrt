// WARNING: Please don't edit this file. It was generated by Swift/WinRT v0.0.1

#pragma once
// Header files for imported files
#include <inspectable.h>
#include <EventToken.h>
#include <windowscontracts.h>
#include "Windows.Foundation.h"
#include "Windows.ApplicationModel.h"
#include "Windows.ApplicationModel.Activation.h"
#include "Windows.ApplicationModel.Core.h"
#include "Windows.ApplicationModel.DataTransfer.h"
#include "Windows.ApplicationModel.DataTransfer.DragDrop.h"
#include "Windows.Foundation.Numerics.h"
#include "Windows.Graphics.Imaging.h"
#include "Windows.UI.h"
#include "Windows.UI.Composition.h"
#include "Windows.UI.Core.h"
#include "Windows.UI.Input.h"
#include "Windows.UI.Xaml.Automation.Peers.h"
#include "Windows.UI.Xaml.Controls.h"
#include "Windows.UI.Xaml.Controls.Primitives.h"
#include "Windows.UI.Xaml.Data.h"
#include "Windows.UI.Xaml.Input.h"
#include "Windows.UI.Xaml.Interop.h"
#include "Windows.UI.Xaml.Media.h"
#include "Windows.UI.Xaml.Media.Animation.h"
#include "Windows.UI.Xaml.Media.Imaging.h"
#include "Windows.UI.Xaml.Media.Media3D.h"
// Importing Collections header
#include "Windows.Foundation.Collections.h"

/* Forward Declarations */
#ifndef ____x_ABI_CWindows_CUI_CXaml_CIApplicationInitializationCallback_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CIApplicationInitializationCallback_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CUI_CXaml_CIApplicationInitializationCallback __x_ABI_CWindows_CUI_CXaml_CIApplicationInitializationCallback;

#endif // ____x_ABI_CWindows_CUI_CXaml_CIApplicationInitializationCallback_FWD_DEFINED__

    #ifndef ____x_ABI_CWindows_CUI_CXaml_CIBindingFailedEventHandler_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CIBindingFailedEventHandler_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CUI_CXaml_CIBindingFailedEventHandler __x_ABI_CWindows_CUI_CXaml_CIBindingFailedEventHandler;

#endif // ____x_ABI_CWindows_CUI_CXaml_CIBindingFailedEventHandler_FWD_DEFINED__

    #ifndef ____x_ABI_CWindows_CUI_CXaml_CICreateDefaultValueCallback_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CICreateDefaultValueCallback_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CUI_CXaml_CICreateDefaultValueCallback __x_ABI_CWindows_CUI_CXaml_CICreateDefaultValueCallback;

#endif // ____x_ABI_CWindows_CUI_CXaml_CICreateDefaultValueCallback_FWD_DEFINED__

    #ifndef ____x_ABI_CWindows_CUI_CXaml_CIDependencyPropertyChangedCallback_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CIDependencyPropertyChangedCallback_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CUI_CXaml_CIDependencyPropertyChangedCallback __x_ABI_CWindows_CUI_CXaml_CIDependencyPropertyChangedCallback;

#endif // ____x_ABI_CWindows_CUI_CXaml_CIDependencyPropertyChangedCallback_FWD_DEFINED__

    #ifndef ____x_ABI_CWindows_CUI_CXaml_CIDependencyPropertyChangedEventHandler_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CIDependencyPropertyChangedEventHandler_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CUI_CXaml_CIDependencyPropertyChangedEventHandler __x_ABI_CWindows_CUI_CXaml_CIDependencyPropertyChangedEventHandler;

#endif // ____x_ABI_CWindows_CUI_CXaml_CIDependencyPropertyChangedEventHandler_FWD_DEFINED__

    #ifndef ____x_ABI_CWindows_CUI_CXaml_CIDragEventHandler_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CIDragEventHandler_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CUI_CXaml_CIDragEventHandler __x_ABI_CWindows_CUI_CXaml_CIDragEventHandler;

#endif // ____x_ABI_CWindows_CUI_CXaml_CIDragEventHandler_FWD_DEFINED__

    #ifndef ____x_ABI_CWindows_CUI_CXaml_CIEnteredBackgroundEventHandler_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CIEnteredBackgroundEventHandler_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CUI_CXaml_CIEnteredBackgroundEventHandler __x_ABI_CWindows_CUI_CXaml_CIEnteredBackgroundEventHandler;

#endif // ____x_ABI_CWindows_CUI_CXaml_CIEnteredBackgroundEventHandler_FWD_DEFINED__

    #ifndef ____x_ABI_CWindows_CUI_CXaml_CIExceptionRoutedEventHandler_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CIExceptionRoutedEventHandler_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CUI_CXaml_CIExceptionRoutedEventHandler __x_ABI_CWindows_CUI_CXaml_CIExceptionRoutedEventHandler;

#endif // ____x_ABI_CWindows_CUI_CXaml_CIExceptionRoutedEventHandler_FWD_DEFINED__

    #ifndef ____x_ABI_CWindows_CUI_CXaml_CILeavingBackgroundEventHandler_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CILeavingBackgroundEventHandler_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CUI_CXaml_CILeavingBackgroundEventHandler __x_ABI_CWindows_CUI_CXaml_CILeavingBackgroundEventHandler;

#endif // ____x_ABI_CWindows_CUI_CXaml_CILeavingBackgroundEventHandler_FWD_DEFINED__

    #ifndef ____x_ABI_CWindows_CUI_CXaml_CIPropertyChangedCallback_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CIPropertyChangedCallback_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CUI_CXaml_CIPropertyChangedCallback __x_ABI_CWindows_CUI_CXaml_CIPropertyChangedCallback;

#endif // ____x_ABI_CWindows_CUI_CXaml_CIPropertyChangedCallback_FWD_DEFINED__

    #ifndef ____x_ABI_CWindows_CUI_CXaml_CIRoutedEventHandler_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CIRoutedEventHandler_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CUI_CXaml_CIRoutedEventHandler __x_ABI_CWindows_CUI_CXaml_CIRoutedEventHandler;

#endif // ____x_ABI_CWindows_CUI_CXaml_CIRoutedEventHandler_FWD_DEFINED__

    #ifndef ____x_ABI_CWindows_CUI_CXaml_CISizeChangedEventHandler_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CISizeChangedEventHandler_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CUI_CXaml_CISizeChangedEventHandler __x_ABI_CWindows_CUI_CXaml_CISizeChangedEventHandler;

#endif // ____x_ABI_CWindows_CUI_CXaml_CISizeChangedEventHandler_FWD_DEFINED__

    #ifndef ____x_ABI_CWindows_CUI_CXaml_CISuspendingEventHandler_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CISuspendingEventHandler_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CUI_CXaml_CISuspendingEventHandler __x_ABI_CWindows_CUI_CXaml_CISuspendingEventHandler;

#endif // ____x_ABI_CWindows_CUI_CXaml_CISuspendingEventHandler_FWD_DEFINED__

    #ifndef ____x_ABI_CWindows_CUI_CXaml_CIUnhandledExceptionEventHandler_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CIUnhandledExceptionEventHandler_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CUI_CXaml_CIUnhandledExceptionEventHandler __x_ABI_CWindows_CUI_CXaml_CIUnhandledExceptionEventHandler;

#endif // ____x_ABI_CWindows_CUI_CXaml_CIUnhandledExceptionEventHandler_FWD_DEFINED__

    #ifndef ____x_ABI_CWindows_CUI_CXaml_CIVisualStateChangedEventHandler_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CIVisualStateChangedEventHandler_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CUI_CXaml_CIVisualStateChangedEventHandler __x_ABI_CWindows_CUI_CXaml_CIVisualStateChangedEventHandler;

#endif // ____x_ABI_CWindows_CUI_CXaml_CIVisualStateChangedEventHandler_FWD_DEFINED__

    #ifndef ____x_ABI_CWindows_CUI_CXaml_CIWindowActivatedEventHandler_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CIWindowActivatedEventHandler_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CUI_CXaml_CIWindowActivatedEventHandler __x_ABI_CWindows_CUI_CXaml_CIWindowActivatedEventHandler;

#endif // ____x_ABI_CWindows_CUI_CXaml_CIWindowActivatedEventHandler_FWD_DEFINED__

    #ifndef ____x_ABI_CWindows_CUI_CXaml_CIWindowClosedEventHandler_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CIWindowClosedEventHandler_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CUI_CXaml_CIWindowClosedEventHandler __x_ABI_CWindows_CUI_CXaml_CIWindowClosedEventHandler;

#endif // ____x_ABI_CWindows_CUI_CXaml_CIWindowClosedEventHandler_FWD_DEFINED__

    #ifndef ____x_ABI_CWindows_CUI_CXaml_CIWindowSizeChangedEventHandler_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CIWindowSizeChangedEventHandler_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CUI_CXaml_CIWindowSizeChangedEventHandler __x_ABI_CWindows_CUI_CXaml_CIWindowSizeChangedEventHandler;

#endif // ____x_ABI_CWindows_CUI_CXaml_CIWindowSizeChangedEventHandler_FWD_DEFINED__

    #ifndef ____x_ABI_CWindows_CUI_CXaml_CIWindowVisibilityChangedEventHandler_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CIWindowVisibilityChangedEventHandler_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CUI_CXaml_CIWindowVisibilityChangedEventHandler __x_ABI_CWindows_CUI_CXaml_CIWindowVisibilityChangedEventHandler;

#endif // ____x_ABI_CWindows_CUI_CXaml_CIWindowVisibilityChangedEventHandler_FWD_DEFINED__

    #ifndef ____x_ABI_CWindows_CUI_CXaml_CIAdaptiveTrigger_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CIAdaptiveTrigger_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CIAdaptiveTrigger __x_ABI_CWindows_CUI_CXaml_CIAdaptiveTrigger;

#endif // ____x_ABI_CWindows_CUI_CXaml_CIAdaptiveTrigger_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CIAdaptiveTriggerFactory_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CIAdaptiveTriggerFactory_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CIAdaptiveTriggerFactory __x_ABI_CWindows_CUI_CXaml_CIAdaptiveTriggerFactory;

#endif // ____x_ABI_CWindows_CUI_CXaml_CIAdaptiveTriggerFactory_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CIAdaptiveTriggerStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CIAdaptiveTriggerStatics_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CIAdaptiveTriggerStatics __x_ABI_CWindows_CUI_CXaml_CIAdaptiveTriggerStatics;

#endif // ____x_ABI_CWindows_CUI_CXaml_CIAdaptiveTriggerStatics_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CIApplication_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CIApplication_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CIApplication __x_ABI_CWindows_CUI_CXaml_CIApplication;

#endif // ____x_ABI_CWindows_CUI_CXaml_CIApplication_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CIApplication2_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CIApplication2_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CIApplication2 __x_ABI_CWindows_CUI_CXaml_CIApplication2;

#endif // ____x_ABI_CWindows_CUI_CXaml_CIApplication2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CIApplication3_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CIApplication3_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CIApplication3 __x_ABI_CWindows_CUI_CXaml_CIApplication3;

#endif // ____x_ABI_CWindows_CUI_CXaml_CIApplication3_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CIApplicationFactory_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CIApplicationFactory_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CIApplicationFactory __x_ABI_CWindows_CUI_CXaml_CIApplicationFactory;

#endif // ____x_ABI_CWindows_CUI_CXaml_CIApplicationFactory_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CIApplicationInitializationCallbackParams_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CIApplicationInitializationCallbackParams_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CIApplicationInitializationCallbackParams __x_ABI_CWindows_CUI_CXaml_CIApplicationInitializationCallbackParams;

#endif // ____x_ABI_CWindows_CUI_CXaml_CIApplicationInitializationCallbackParams_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CIApplicationOverrides_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CIApplicationOverrides_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CIApplicationOverrides __x_ABI_CWindows_CUI_CXaml_CIApplicationOverrides;

#endif // ____x_ABI_CWindows_CUI_CXaml_CIApplicationOverrides_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CIApplicationOverrides2_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CIApplicationOverrides2_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CIApplicationOverrides2 __x_ABI_CWindows_CUI_CXaml_CIApplicationOverrides2;

#endif // ____x_ABI_CWindows_CUI_CXaml_CIApplicationOverrides2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CIApplicationStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CIApplicationStatics_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CIApplicationStatics __x_ABI_CWindows_CUI_CXaml_CIApplicationStatics;

#endif // ____x_ABI_CWindows_CUI_CXaml_CIApplicationStatics_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CIBindingFailedEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CIBindingFailedEventArgs_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CIBindingFailedEventArgs __x_ABI_CWindows_CUI_CXaml_CIBindingFailedEventArgs;

#endif // ____x_ABI_CWindows_CUI_CXaml_CIBindingFailedEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CIBringIntoViewOptions_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CIBringIntoViewOptions_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CIBringIntoViewOptions __x_ABI_CWindows_CUI_CXaml_CIBringIntoViewOptions;

#endif // ____x_ABI_CWindows_CUI_CXaml_CIBringIntoViewOptions_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CIBringIntoViewOptions2_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CIBringIntoViewOptions2_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CIBringIntoViewOptions2 __x_ABI_CWindows_CUI_CXaml_CIBringIntoViewOptions2;

#endif // ____x_ABI_CWindows_CUI_CXaml_CIBringIntoViewOptions2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CIBringIntoViewRequestedEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CIBringIntoViewRequestedEventArgs_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CIBringIntoViewRequestedEventArgs __x_ABI_CWindows_CUI_CXaml_CIBringIntoViewRequestedEventArgs;

#endif // ____x_ABI_CWindows_CUI_CXaml_CIBringIntoViewRequestedEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CIBrushTransition_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CIBrushTransition_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CIBrushTransition __x_ABI_CWindows_CUI_CXaml_CIBrushTransition;

#endif // ____x_ABI_CWindows_CUI_CXaml_CIBrushTransition_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CIBrushTransitionFactory_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CIBrushTransitionFactory_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CIBrushTransitionFactory __x_ABI_CWindows_CUI_CXaml_CIBrushTransitionFactory;

#endif // ____x_ABI_CWindows_CUI_CXaml_CIBrushTransitionFactory_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CIColorPaletteResources_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CIColorPaletteResources_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CIColorPaletteResources __x_ABI_CWindows_CUI_CXaml_CIColorPaletteResources;

#endif // ____x_ABI_CWindows_CUI_CXaml_CIColorPaletteResources_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CIColorPaletteResourcesFactory_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CIColorPaletteResourcesFactory_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CIColorPaletteResourcesFactory __x_ABI_CWindows_CUI_CXaml_CIColorPaletteResourcesFactory;

#endif // ____x_ABI_CWindows_CUI_CXaml_CIColorPaletteResourcesFactory_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CICornerRadiusHelper_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CICornerRadiusHelper_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CICornerRadiusHelper __x_ABI_CWindows_CUI_CXaml_CICornerRadiusHelper;

#endif // ____x_ABI_CWindows_CUI_CXaml_CICornerRadiusHelper_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CICornerRadiusHelperStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CICornerRadiusHelperStatics_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CICornerRadiusHelperStatics __x_ABI_CWindows_CUI_CXaml_CICornerRadiusHelperStatics;

#endif // ____x_ABI_CWindows_CUI_CXaml_CICornerRadiusHelperStatics_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CIDataContextChangedEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CIDataContextChangedEventArgs_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CIDataContextChangedEventArgs __x_ABI_CWindows_CUI_CXaml_CIDataContextChangedEventArgs;

#endif // ____x_ABI_CWindows_CUI_CXaml_CIDataContextChangedEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CIDataTemplate_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CIDataTemplate_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CIDataTemplate __x_ABI_CWindows_CUI_CXaml_CIDataTemplate;

#endif // ____x_ABI_CWindows_CUI_CXaml_CIDataTemplate_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CIDataTemplateExtension_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CIDataTemplateExtension_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CIDataTemplateExtension __x_ABI_CWindows_CUI_CXaml_CIDataTemplateExtension;

#endif // ____x_ABI_CWindows_CUI_CXaml_CIDataTemplateExtension_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CIDataTemplateFactory_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CIDataTemplateFactory_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CIDataTemplateFactory __x_ABI_CWindows_CUI_CXaml_CIDataTemplateFactory;

#endif // ____x_ABI_CWindows_CUI_CXaml_CIDataTemplateFactory_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CIDataTemplateKey_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CIDataTemplateKey_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CIDataTemplateKey __x_ABI_CWindows_CUI_CXaml_CIDataTemplateKey;

#endif // ____x_ABI_CWindows_CUI_CXaml_CIDataTemplateKey_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CIDataTemplateKeyFactory_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CIDataTemplateKeyFactory_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CIDataTemplateKeyFactory __x_ABI_CWindows_CUI_CXaml_CIDataTemplateKeyFactory;

#endif // ____x_ABI_CWindows_CUI_CXaml_CIDataTemplateKeyFactory_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CIDataTemplateStatics2_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CIDataTemplateStatics2_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CIDataTemplateStatics2 __x_ABI_CWindows_CUI_CXaml_CIDataTemplateStatics2;

#endif // ____x_ABI_CWindows_CUI_CXaml_CIDataTemplateStatics2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CIDebugSettings_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CIDebugSettings_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CIDebugSettings __x_ABI_CWindows_CUI_CXaml_CIDebugSettings;

#endif // ____x_ABI_CWindows_CUI_CXaml_CIDebugSettings_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CIDebugSettings2_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CIDebugSettings2_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CIDebugSettings2 __x_ABI_CWindows_CUI_CXaml_CIDebugSettings2;

#endif // ____x_ABI_CWindows_CUI_CXaml_CIDebugSettings2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CIDebugSettings3_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CIDebugSettings3_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CIDebugSettings3 __x_ABI_CWindows_CUI_CXaml_CIDebugSettings3;

#endif // ____x_ABI_CWindows_CUI_CXaml_CIDebugSettings3_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CIDebugSettings4_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CIDebugSettings4_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CIDebugSettings4 __x_ABI_CWindows_CUI_CXaml_CIDebugSettings4;

#endif // ____x_ABI_CWindows_CUI_CXaml_CIDebugSettings4_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CIDependencyObject_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CIDependencyObject_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CIDependencyObject __x_ABI_CWindows_CUI_CXaml_CIDependencyObject;

#endif // ____x_ABI_CWindows_CUI_CXaml_CIDependencyObject_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CIDependencyObject2_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CIDependencyObject2_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CIDependencyObject2 __x_ABI_CWindows_CUI_CXaml_CIDependencyObject2;

#endif // ____x_ABI_CWindows_CUI_CXaml_CIDependencyObject2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CIDependencyObjectCollectionFactory_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CIDependencyObjectCollectionFactory_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CIDependencyObjectCollectionFactory __x_ABI_CWindows_CUI_CXaml_CIDependencyObjectCollectionFactory;

#endif // ____x_ABI_CWindows_CUI_CXaml_CIDependencyObjectCollectionFactory_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CIDependencyObjectFactory_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CIDependencyObjectFactory_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CIDependencyObjectFactory __x_ABI_CWindows_CUI_CXaml_CIDependencyObjectFactory;

#endif // ____x_ABI_CWindows_CUI_CXaml_CIDependencyObjectFactory_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CIDependencyProperty_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CIDependencyProperty_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty;

#endif // ____x_ABI_CWindows_CUI_CXaml_CIDependencyProperty_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CIDependencyPropertyChangedEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CIDependencyPropertyChangedEventArgs_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CIDependencyPropertyChangedEventArgs __x_ABI_CWindows_CUI_CXaml_CIDependencyPropertyChangedEventArgs;

#endif // ____x_ABI_CWindows_CUI_CXaml_CIDependencyPropertyChangedEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CIDependencyPropertyStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CIDependencyPropertyStatics_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CIDependencyPropertyStatics __x_ABI_CWindows_CUI_CXaml_CIDependencyPropertyStatics;

#endif // ____x_ABI_CWindows_CUI_CXaml_CIDependencyPropertyStatics_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CIDispatcherTimer_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CIDispatcherTimer_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CIDispatcherTimer __x_ABI_CWindows_CUI_CXaml_CIDispatcherTimer;

#endif // ____x_ABI_CWindows_CUI_CXaml_CIDispatcherTimer_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CIDispatcherTimerFactory_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CIDispatcherTimerFactory_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CIDispatcherTimerFactory __x_ABI_CWindows_CUI_CXaml_CIDispatcherTimerFactory;

#endif // ____x_ABI_CWindows_CUI_CXaml_CIDispatcherTimerFactory_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CIDragEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CIDragEventArgs_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CIDragEventArgs __x_ABI_CWindows_CUI_CXaml_CIDragEventArgs;

#endif // ____x_ABI_CWindows_CUI_CXaml_CIDragEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CIDragEventArgs2_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CIDragEventArgs2_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CIDragEventArgs2 __x_ABI_CWindows_CUI_CXaml_CIDragEventArgs2;

#endif // ____x_ABI_CWindows_CUI_CXaml_CIDragEventArgs2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CIDragEventArgs3_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CIDragEventArgs3_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CIDragEventArgs3 __x_ABI_CWindows_CUI_CXaml_CIDragEventArgs3;

#endif // ____x_ABI_CWindows_CUI_CXaml_CIDragEventArgs3_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CIDragOperationDeferral_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CIDragOperationDeferral_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CIDragOperationDeferral __x_ABI_CWindows_CUI_CXaml_CIDragOperationDeferral;

#endif // ____x_ABI_CWindows_CUI_CXaml_CIDragOperationDeferral_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CIDragStartingEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CIDragStartingEventArgs_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CIDragStartingEventArgs __x_ABI_CWindows_CUI_CXaml_CIDragStartingEventArgs;

#endif // ____x_ABI_CWindows_CUI_CXaml_CIDragStartingEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CIDragStartingEventArgs2_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CIDragStartingEventArgs2_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CIDragStartingEventArgs2 __x_ABI_CWindows_CUI_CXaml_CIDragStartingEventArgs2;

#endif // ____x_ABI_CWindows_CUI_CXaml_CIDragStartingEventArgs2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CIDragUI_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CIDragUI_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CIDragUI __x_ABI_CWindows_CUI_CXaml_CIDragUI;

#endif // ____x_ABI_CWindows_CUI_CXaml_CIDragUI_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CIDragUIOverride_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CIDragUIOverride_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CIDragUIOverride __x_ABI_CWindows_CUI_CXaml_CIDragUIOverride;

#endif // ____x_ABI_CWindows_CUI_CXaml_CIDragUIOverride_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CIDropCompletedEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CIDropCompletedEventArgs_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CIDropCompletedEventArgs __x_ABI_CWindows_CUI_CXaml_CIDropCompletedEventArgs;

#endif // ____x_ABI_CWindows_CUI_CXaml_CIDropCompletedEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CIDurationHelper_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CIDurationHelper_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CIDurationHelper __x_ABI_CWindows_CUI_CXaml_CIDurationHelper;

#endif // ____x_ABI_CWindows_CUI_CXaml_CIDurationHelper_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CIDurationHelperStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CIDurationHelperStatics_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CIDurationHelperStatics __x_ABI_CWindows_CUI_CXaml_CIDurationHelperStatics;

#endif // ____x_ABI_CWindows_CUI_CXaml_CIDurationHelperStatics_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CIEffectiveViewportChangedEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CIEffectiveViewportChangedEventArgs_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CIEffectiveViewportChangedEventArgs __x_ABI_CWindows_CUI_CXaml_CIEffectiveViewportChangedEventArgs;

#endif // ____x_ABI_CWindows_CUI_CXaml_CIEffectiveViewportChangedEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CIElementFactory_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CIElementFactory_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CIElementFactory __x_ABI_CWindows_CUI_CXaml_CIElementFactory;

#endif // ____x_ABI_CWindows_CUI_CXaml_CIElementFactory_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CIElementFactoryGetArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CIElementFactoryGetArgs_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CIElementFactoryGetArgs __x_ABI_CWindows_CUI_CXaml_CIElementFactoryGetArgs;

#endif // ____x_ABI_CWindows_CUI_CXaml_CIElementFactoryGetArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CIElementFactoryGetArgsFactory_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CIElementFactoryGetArgsFactory_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CIElementFactoryGetArgsFactory __x_ABI_CWindows_CUI_CXaml_CIElementFactoryGetArgsFactory;

#endif // ____x_ABI_CWindows_CUI_CXaml_CIElementFactoryGetArgsFactory_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CIElementFactoryRecycleArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CIElementFactoryRecycleArgs_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CIElementFactoryRecycleArgs __x_ABI_CWindows_CUI_CXaml_CIElementFactoryRecycleArgs;

#endif // ____x_ABI_CWindows_CUI_CXaml_CIElementFactoryRecycleArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CIElementFactoryRecycleArgsFactory_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CIElementFactoryRecycleArgsFactory_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CIElementFactoryRecycleArgsFactory __x_ABI_CWindows_CUI_CXaml_CIElementFactoryRecycleArgsFactory;

#endif // ____x_ABI_CWindows_CUI_CXaml_CIElementFactoryRecycleArgsFactory_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CIElementSoundPlayer_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CIElementSoundPlayer_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CIElementSoundPlayer __x_ABI_CWindows_CUI_CXaml_CIElementSoundPlayer;

#endif // ____x_ABI_CWindows_CUI_CXaml_CIElementSoundPlayer_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CIElementSoundPlayerStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CIElementSoundPlayerStatics_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CIElementSoundPlayerStatics __x_ABI_CWindows_CUI_CXaml_CIElementSoundPlayerStatics;

#endif // ____x_ABI_CWindows_CUI_CXaml_CIElementSoundPlayerStatics_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CIElementSoundPlayerStatics2_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CIElementSoundPlayerStatics2_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CIElementSoundPlayerStatics2 __x_ABI_CWindows_CUI_CXaml_CIElementSoundPlayerStatics2;

#endif // ____x_ABI_CWindows_CUI_CXaml_CIElementSoundPlayerStatics2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CIEventTrigger_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CIEventTrigger_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CIEventTrigger __x_ABI_CWindows_CUI_CXaml_CIEventTrigger;

#endif // ____x_ABI_CWindows_CUI_CXaml_CIEventTrigger_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CIExceptionRoutedEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CIExceptionRoutedEventArgs_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CIExceptionRoutedEventArgs __x_ABI_CWindows_CUI_CXaml_CIExceptionRoutedEventArgs;

#endif // ____x_ABI_CWindows_CUI_CXaml_CIExceptionRoutedEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CIExceptionRoutedEventArgsFactory_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CIExceptionRoutedEventArgsFactory_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CIExceptionRoutedEventArgsFactory __x_ABI_CWindows_CUI_CXaml_CIExceptionRoutedEventArgsFactory;

#endif // ____x_ABI_CWindows_CUI_CXaml_CIExceptionRoutedEventArgsFactory_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CIFrameworkElement_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CIFrameworkElement_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CIFrameworkElement __x_ABI_CWindows_CUI_CXaml_CIFrameworkElement;

#endif // ____x_ABI_CWindows_CUI_CXaml_CIFrameworkElement_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CIFrameworkElement2_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CIFrameworkElement2_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CIFrameworkElement2 __x_ABI_CWindows_CUI_CXaml_CIFrameworkElement2;

#endif // ____x_ABI_CWindows_CUI_CXaml_CIFrameworkElement2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CIFrameworkElement3_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CIFrameworkElement3_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CIFrameworkElement3 __x_ABI_CWindows_CUI_CXaml_CIFrameworkElement3;

#endif // ____x_ABI_CWindows_CUI_CXaml_CIFrameworkElement3_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CIFrameworkElement4_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CIFrameworkElement4_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CIFrameworkElement4 __x_ABI_CWindows_CUI_CXaml_CIFrameworkElement4;

#endif // ____x_ABI_CWindows_CUI_CXaml_CIFrameworkElement4_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CIFrameworkElement6_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CIFrameworkElement6_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CIFrameworkElement6 __x_ABI_CWindows_CUI_CXaml_CIFrameworkElement6;

#endif // ____x_ABI_CWindows_CUI_CXaml_CIFrameworkElement6_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CIFrameworkElement7_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CIFrameworkElement7_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CIFrameworkElement7 __x_ABI_CWindows_CUI_CXaml_CIFrameworkElement7;

#endif // ____x_ABI_CWindows_CUI_CXaml_CIFrameworkElement7_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CIFrameworkElementFactory_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CIFrameworkElementFactory_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CIFrameworkElementFactory __x_ABI_CWindows_CUI_CXaml_CIFrameworkElementFactory;

#endif // ____x_ABI_CWindows_CUI_CXaml_CIFrameworkElementFactory_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CIFrameworkElementOverrides_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CIFrameworkElementOverrides_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CIFrameworkElementOverrides __x_ABI_CWindows_CUI_CXaml_CIFrameworkElementOverrides;

#endif // ____x_ABI_CWindows_CUI_CXaml_CIFrameworkElementOverrides_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CIFrameworkElementOverrides2_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CIFrameworkElementOverrides2_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CIFrameworkElementOverrides2 __x_ABI_CWindows_CUI_CXaml_CIFrameworkElementOverrides2;

#endif // ____x_ABI_CWindows_CUI_CXaml_CIFrameworkElementOverrides2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CIFrameworkElementProtected7_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CIFrameworkElementProtected7_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CIFrameworkElementProtected7 __x_ABI_CWindows_CUI_CXaml_CIFrameworkElementProtected7;

#endif // ____x_ABI_CWindows_CUI_CXaml_CIFrameworkElementProtected7_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CIFrameworkElementStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CIFrameworkElementStatics_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CIFrameworkElementStatics __x_ABI_CWindows_CUI_CXaml_CIFrameworkElementStatics;

#endif // ____x_ABI_CWindows_CUI_CXaml_CIFrameworkElementStatics_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CIFrameworkElementStatics2_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CIFrameworkElementStatics2_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CIFrameworkElementStatics2 __x_ABI_CWindows_CUI_CXaml_CIFrameworkElementStatics2;

#endif // ____x_ABI_CWindows_CUI_CXaml_CIFrameworkElementStatics2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CIFrameworkElementStatics4_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CIFrameworkElementStatics4_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CIFrameworkElementStatics4 __x_ABI_CWindows_CUI_CXaml_CIFrameworkElementStatics4;

#endif // ____x_ABI_CWindows_CUI_CXaml_CIFrameworkElementStatics4_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CIFrameworkElementStatics5_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CIFrameworkElementStatics5_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CIFrameworkElementStatics5 __x_ABI_CWindows_CUI_CXaml_CIFrameworkElementStatics5;

#endif // ____x_ABI_CWindows_CUI_CXaml_CIFrameworkElementStatics5_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CIFrameworkElementStatics6_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CIFrameworkElementStatics6_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CIFrameworkElementStatics6 __x_ABI_CWindows_CUI_CXaml_CIFrameworkElementStatics6;

#endif // ____x_ABI_CWindows_CUI_CXaml_CIFrameworkElementStatics6_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CIFrameworkTemplate_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CIFrameworkTemplate_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CIFrameworkTemplate __x_ABI_CWindows_CUI_CXaml_CIFrameworkTemplate;

#endif // ____x_ABI_CWindows_CUI_CXaml_CIFrameworkTemplate_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CIFrameworkTemplateFactory_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CIFrameworkTemplateFactory_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CIFrameworkTemplateFactory __x_ABI_CWindows_CUI_CXaml_CIFrameworkTemplateFactory;

#endif // ____x_ABI_CWindows_CUI_CXaml_CIFrameworkTemplateFactory_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CIFrameworkView_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CIFrameworkView_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CIFrameworkView __x_ABI_CWindows_CUI_CXaml_CIFrameworkView;

#endif // ____x_ABI_CWindows_CUI_CXaml_CIFrameworkView_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CIFrameworkViewSource_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CIFrameworkViewSource_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CIFrameworkViewSource __x_ABI_CWindows_CUI_CXaml_CIFrameworkViewSource;

#endif // ____x_ABI_CWindows_CUI_CXaml_CIFrameworkViewSource_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CIGridLengthHelper_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CIGridLengthHelper_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CIGridLengthHelper __x_ABI_CWindows_CUI_CXaml_CIGridLengthHelper;

#endif // ____x_ABI_CWindows_CUI_CXaml_CIGridLengthHelper_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CIGridLengthHelperStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CIGridLengthHelperStatics_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CIGridLengthHelperStatics __x_ABI_CWindows_CUI_CXaml_CIGridLengthHelperStatics;

#endif // ____x_ABI_CWindows_CUI_CXaml_CIGridLengthHelperStatics_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CIMediaFailedRoutedEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CIMediaFailedRoutedEventArgs_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CIMediaFailedRoutedEventArgs __x_ABI_CWindows_CUI_CXaml_CIMediaFailedRoutedEventArgs;

#endif // ____x_ABI_CWindows_CUI_CXaml_CIMediaFailedRoutedEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CIPointHelper_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CIPointHelper_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CIPointHelper __x_ABI_CWindows_CUI_CXaml_CIPointHelper;

#endif // ____x_ABI_CWindows_CUI_CXaml_CIPointHelper_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CIPointHelperStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CIPointHelperStatics_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CIPointHelperStatics __x_ABI_CWindows_CUI_CXaml_CIPointHelperStatics;

#endif // ____x_ABI_CWindows_CUI_CXaml_CIPointHelperStatics_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CIPropertyMetadata_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CIPropertyMetadata_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CIPropertyMetadata __x_ABI_CWindows_CUI_CXaml_CIPropertyMetadata;

#endif // ____x_ABI_CWindows_CUI_CXaml_CIPropertyMetadata_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CIPropertyMetadataFactory_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CIPropertyMetadataFactory_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CIPropertyMetadataFactory __x_ABI_CWindows_CUI_CXaml_CIPropertyMetadataFactory;

#endif // ____x_ABI_CWindows_CUI_CXaml_CIPropertyMetadataFactory_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CIPropertyMetadataStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CIPropertyMetadataStatics_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CIPropertyMetadataStatics __x_ABI_CWindows_CUI_CXaml_CIPropertyMetadataStatics;

#endif // ____x_ABI_CWindows_CUI_CXaml_CIPropertyMetadataStatics_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CIPropertyPath_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CIPropertyPath_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CIPropertyPath __x_ABI_CWindows_CUI_CXaml_CIPropertyPath;

#endif // ____x_ABI_CWindows_CUI_CXaml_CIPropertyPath_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CIPropertyPathFactory_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CIPropertyPathFactory_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CIPropertyPathFactory __x_ABI_CWindows_CUI_CXaml_CIPropertyPathFactory;

#endif // ____x_ABI_CWindows_CUI_CXaml_CIPropertyPathFactory_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CIRectHelper_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CIRectHelper_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CIRectHelper __x_ABI_CWindows_CUI_CXaml_CIRectHelper;

#endif // ____x_ABI_CWindows_CUI_CXaml_CIRectHelper_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CIRectHelperStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CIRectHelperStatics_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CIRectHelperStatics __x_ABI_CWindows_CUI_CXaml_CIRectHelperStatics;

#endif // ____x_ABI_CWindows_CUI_CXaml_CIRectHelperStatics_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CIResourceDictionary_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CIResourceDictionary_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CIResourceDictionary __x_ABI_CWindows_CUI_CXaml_CIResourceDictionary;

#endif // ____x_ABI_CWindows_CUI_CXaml_CIResourceDictionary_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CIResourceDictionaryFactory_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CIResourceDictionaryFactory_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CIResourceDictionaryFactory __x_ABI_CWindows_CUI_CXaml_CIResourceDictionaryFactory;

#endif // ____x_ABI_CWindows_CUI_CXaml_CIResourceDictionaryFactory_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CIRoutedEvent_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CIRoutedEvent_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CIRoutedEvent __x_ABI_CWindows_CUI_CXaml_CIRoutedEvent;

#endif // ____x_ABI_CWindows_CUI_CXaml_CIRoutedEvent_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CIRoutedEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CIRoutedEventArgs_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CIRoutedEventArgs __x_ABI_CWindows_CUI_CXaml_CIRoutedEventArgs;

#endif // ____x_ABI_CWindows_CUI_CXaml_CIRoutedEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CIRoutedEventArgsFactory_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CIRoutedEventArgsFactory_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CIRoutedEventArgsFactory __x_ABI_CWindows_CUI_CXaml_CIRoutedEventArgsFactory;

#endif // ____x_ABI_CWindows_CUI_CXaml_CIRoutedEventArgsFactory_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CIScalarTransition_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CIScalarTransition_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CIScalarTransition __x_ABI_CWindows_CUI_CXaml_CIScalarTransition;

#endif // ____x_ABI_CWindows_CUI_CXaml_CIScalarTransition_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CIScalarTransitionFactory_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CIScalarTransitionFactory_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CIScalarTransitionFactory __x_ABI_CWindows_CUI_CXaml_CIScalarTransitionFactory;

#endif // ____x_ABI_CWindows_CUI_CXaml_CIScalarTransitionFactory_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CISetter_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CISetter_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CISetter __x_ABI_CWindows_CUI_CXaml_CISetter;

#endif // ____x_ABI_CWindows_CUI_CXaml_CISetter_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CISetter2_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CISetter2_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CISetter2 __x_ABI_CWindows_CUI_CXaml_CISetter2;

#endif // ____x_ABI_CWindows_CUI_CXaml_CISetter2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CISetterBase_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CISetterBase_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CISetterBase __x_ABI_CWindows_CUI_CXaml_CISetterBase;

#endif // ____x_ABI_CWindows_CUI_CXaml_CISetterBase_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CISetterBaseCollection_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CISetterBaseCollection_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CISetterBaseCollection __x_ABI_CWindows_CUI_CXaml_CISetterBaseCollection;

#endif // ____x_ABI_CWindows_CUI_CXaml_CISetterBaseCollection_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CISetterBaseFactory_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CISetterBaseFactory_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CISetterBaseFactory __x_ABI_CWindows_CUI_CXaml_CISetterBaseFactory;

#endif // ____x_ABI_CWindows_CUI_CXaml_CISetterBaseFactory_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CISetterFactory_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CISetterFactory_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CISetterFactory __x_ABI_CWindows_CUI_CXaml_CISetterFactory;

#endif // ____x_ABI_CWindows_CUI_CXaml_CISetterFactory_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CISizeChangedEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CISizeChangedEventArgs_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CISizeChangedEventArgs __x_ABI_CWindows_CUI_CXaml_CISizeChangedEventArgs;

#endif // ____x_ABI_CWindows_CUI_CXaml_CISizeChangedEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CISizeHelper_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CISizeHelper_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CISizeHelper __x_ABI_CWindows_CUI_CXaml_CISizeHelper;

#endif // ____x_ABI_CWindows_CUI_CXaml_CISizeHelper_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CISizeHelperStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CISizeHelperStatics_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CISizeHelperStatics __x_ABI_CWindows_CUI_CXaml_CISizeHelperStatics;

#endif // ____x_ABI_CWindows_CUI_CXaml_CISizeHelperStatics_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CIStateTrigger_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CIStateTrigger_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CIStateTrigger __x_ABI_CWindows_CUI_CXaml_CIStateTrigger;

#endif // ____x_ABI_CWindows_CUI_CXaml_CIStateTrigger_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CIStateTriggerBase_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CIStateTriggerBase_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CIStateTriggerBase __x_ABI_CWindows_CUI_CXaml_CIStateTriggerBase;

#endif // ____x_ABI_CWindows_CUI_CXaml_CIStateTriggerBase_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CIStateTriggerBaseFactory_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CIStateTriggerBaseFactory_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CIStateTriggerBaseFactory __x_ABI_CWindows_CUI_CXaml_CIStateTriggerBaseFactory;

#endif // ____x_ABI_CWindows_CUI_CXaml_CIStateTriggerBaseFactory_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CIStateTriggerBaseProtected_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CIStateTriggerBaseProtected_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CIStateTriggerBaseProtected __x_ABI_CWindows_CUI_CXaml_CIStateTriggerBaseProtected;

#endif // ____x_ABI_CWindows_CUI_CXaml_CIStateTriggerBaseProtected_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CIStateTriggerStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CIStateTriggerStatics_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CIStateTriggerStatics __x_ABI_CWindows_CUI_CXaml_CIStateTriggerStatics;

#endif // ____x_ABI_CWindows_CUI_CXaml_CIStateTriggerStatics_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CIStyle_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CIStyle_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CIStyle __x_ABI_CWindows_CUI_CXaml_CIStyle;

#endif // ____x_ABI_CWindows_CUI_CXaml_CIStyle_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CIStyleFactory_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CIStyleFactory_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CIStyleFactory __x_ABI_CWindows_CUI_CXaml_CIStyleFactory;

#endif // ____x_ABI_CWindows_CUI_CXaml_CIStyleFactory_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CITargetPropertyPath_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CITargetPropertyPath_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CITargetPropertyPath __x_ABI_CWindows_CUI_CXaml_CITargetPropertyPath;

#endif // ____x_ABI_CWindows_CUI_CXaml_CITargetPropertyPath_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CITargetPropertyPathFactory_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CITargetPropertyPathFactory_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CITargetPropertyPathFactory __x_ABI_CWindows_CUI_CXaml_CITargetPropertyPathFactory;

#endif // ____x_ABI_CWindows_CUI_CXaml_CITargetPropertyPathFactory_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CIThicknessHelper_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CIThicknessHelper_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CIThicknessHelper __x_ABI_CWindows_CUI_CXaml_CIThicknessHelper;

#endif // ____x_ABI_CWindows_CUI_CXaml_CIThicknessHelper_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CIThicknessHelperStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CIThicknessHelperStatics_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CIThicknessHelperStatics __x_ABI_CWindows_CUI_CXaml_CIThicknessHelperStatics;

#endif // ____x_ABI_CWindows_CUI_CXaml_CIThicknessHelperStatics_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CITriggerAction_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CITriggerAction_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CITriggerAction __x_ABI_CWindows_CUI_CXaml_CITriggerAction;

#endif // ____x_ABI_CWindows_CUI_CXaml_CITriggerAction_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CITriggerActionFactory_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CITriggerActionFactory_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CITriggerActionFactory __x_ABI_CWindows_CUI_CXaml_CITriggerActionFactory;

#endif // ____x_ABI_CWindows_CUI_CXaml_CITriggerActionFactory_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CITriggerBase_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CITriggerBase_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CITriggerBase __x_ABI_CWindows_CUI_CXaml_CITriggerBase;

#endif // ____x_ABI_CWindows_CUI_CXaml_CITriggerBase_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CITriggerBaseFactory_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CITriggerBaseFactory_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CITriggerBaseFactory __x_ABI_CWindows_CUI_CXaml_CITriggerBaseFactory;

#endif // ____x_ABI_CWindows_CUI_CXaml_CITriggerBaseFactory_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CIUIElement_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CIUIElement_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CIUIElement __x_ABI_CWindows_CUI_CXaml_CIUIElement;

#endif // ____x_ABI_CWindows_CUI_CXaml_CIUIElement_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CIUIElement10_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CIUIElement10_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CIUIElement10 __x_ABI_CWindows_CUI_CXaml_CIUIElement10;

#endif // ____x_ABI_CWindows_CUI_CXaml_CIUIElement10_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CIUIElement2_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CIUIElement2_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CIUIElement2 __x_ABI_CWindows_CUI_CXaml_CIUIElement2;

#endif // ____x_ABI_CWindows_CUI_CXaml_CIUIElement2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CIUIElement3_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CIUIElement3_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CIUIElement3 __x_ABI_CWindows_CUI_CXaml_CIUIElement3;

#endif // ____x_ABI_CWindows_CUI_CXaml_CIUIElement3_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CIUIElement4_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CIUIElement4_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CIUIElement4 __x_ABI_CWindows_CUI_CXaml_CIUIElement4;

#endif // ____x_ABI_CWindows_CUI_CXaml_CIUIElement4_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CIUIElement5_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CIUIElement5_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CIUIElement5 __x_ABI_CWindows_CUI_CXaml_CIUIElement5;

#endif // ____x_ABI_CWindows_CUI_CXaml_CIUIElement5_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CIUIElement7_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CIUIElement7_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CIUIElement7 __x_ABI_CWindows_CUI_CXaml_CIUIElement7;

#endif // ____x_ABI_CWindows_CUI_CXaml_CIUIElement7_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CIUIElement8_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CIUIElement8_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CIUIElement8 __x_ABI_CWindows_CUI_CXaml_CIUIElement8;

#endif // ____x_ABI_CWindows_CUI_CXaml_CIUIElement8_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CIUIElement9_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CIUIElement9_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CIUIElement9 __x_ABI_CWindows_CUI_CXaml_CIUIElement9;

#endif // ____x_ABI_CWindows_CUI_CXaml_CIUIElement9_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CIUIElementFactory_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CIUIElementFactory_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CIUIElementFactory __x_ABI_CWindows_CUI_CXaml_CIUIElementFactory;

#endif // ____x_ABI_CWindows_CUI_CXaml_CIUIElementFactory_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CIUIElementOverrides_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CIUIElementOverrides_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CIUIElementOverrides __x_ABI_CWindows_CUI_CXaml_CIUIElementOverrides;

#endif // ____x_ABI_CWindows_CUI_CXaml_CIUIElementOverrides_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CIUIElementOverrides7_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CIUIElementOverrides7_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CIUIElementOverrides7 __x_ABI_CWindows_CUI_CXaml_CIUIElementOverrides7;

#endif // ____x_ABI_CWindows_CUI_CXaml_CIUIElementOverrides7_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CIUIElementOverrides8_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CIUIElementOverrides8_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CIUIElementOverrides8 __x_ABI_CWindows_CUI_CXaml_CIUIElementOverrides8;

#endif // ____x_ABI_CWindows_CUI_CXaml_CIUIElementOverrides8_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CIUIElementOverrides9_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CIUIElementOverrides9_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CIUIElementOverrides9 __x_ABI_CWindows_CUI_CXaml_CIUIElementOverrides9;

#endif // ____x_ABI_CWindows_CUI_CXaml_CIUIElementOverrides9_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CIUIElementStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CIUIElementStatics_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CIUIElementStatics __x_ABI_CWindows_CUI_CXaml_CIUIElementStatics;

#endif // ____x_ABI_CWindows_CUI_CXaml_CIUIElementStatics_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CIUIElementStatics10_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CIUIElementStatics10_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CIUIElementStatics10 __x_ABI_CWindows_CUI_CXaml_CIUIElementStatics10;

#endif // ____x_ABI_CWindows_CUI_CXaml_CIUIElementStatics10_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CIUIElementStatics2_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CIUIElementStatics2_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CIUIElementStatics2 __x_ABI_CWindows_CUI_CXaml_CIUIElementStatics2;

#endif // ____x_ABI_CWindows_CUI_CXaml_CIUIElementStatics2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CIUIElementStatics3_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CIUIElementStatics3_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CIUIElementStatics3 __x_ABI_CWindows_CUI_CXaml_CIUIElementStatics3;

#endif // ____x_ABI_CWindows_CUI_CXaml_CIUIElementStatics3_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CIUIElementStatics4_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CIUIElementStatics4_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CIUIElementStatics4 __x_ABI_CWindows_CUI_CXaml_CIUIElementStatics4;

#endif // ____x_ABI_CWindows_CUI_CXaml_CIUIElementStatics4_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CIUIElementStatics5_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CIUIElementStatics5_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CIUIElementStatics5 __x_ABI_CWindows_CUI_CXaml_CIUIElementStatics5;

#endif // ____x_ABI_CWindows_CUI_CXaml_CIUIElementStatics5_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CIUIElementStatics6_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CIUIElementStatics6_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CIUIElementStatics6 __x_ABI_CWindows_CUI_CXaml_CIUIElementStatics6;

#endif // ____x_ABI_CWindows_CUI_CXaml_CIUIElementStatics6_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CIUIElementStatics7_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CIUIElementStatics7_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CIUIElementStatics7 __x_ABI_CWindows_CUI_CXaml_CIUIElementStatics7;

#endif // ____x_ABI_CWindows_CUI_CXaml_CIUIElementStatics7_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CIUIElementStatics8_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CIUIElementStatics8_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CIUIElementStatics8 __x_ABI_CWindows_CUI_CXaml_CIUIElementStatics8;

#endif // ____x_ABI_CWindows_CUI_CXaml_CIUIElementStatics8_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CIUIElementStatics9_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CIUIElementStatics9_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CIUIElementStatics9 __x_ABI_CWindows_CUI_CXaml_CIUIElementStatics9;

#endif // ____x_ABI_CWindows_CUI_CXaml_CIUIElementStatics9_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CIUIElementWeakCollection_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CIUIElementWeakCollection_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CIUIElementWeakCollection __x_ABI_CWindows_CUI_CXaml_CIUIElementWeakCollection;

#endif // ____x_ABI_CWindows_CUI_CXaml_CIUIElementWeakCollection_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CIUIElementWeakCollectionFactory_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CIUIElementWeakCollectionFactory_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CIUIElementWeakCollectionFactory __x_ABI_CWindows_CUI_CXaml_CIUIElementWeakCollectionFactory;

#endif // ____x_ABI_CWindows_CUI_CXaml_CIUIElementWeakCollectionFactory_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CIUnhandledExceptionEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CIUnhandledExceptionEventArgs_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CIUnhandledExceptionEventArgs __x_ABI_CWindows_CUI_CXaml_CIUnhandledExceptionEventArgs;

#endif // ____x_ABI_CWindows_CUI_CXaml_CIUnhandledExceptionEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CIVector3Transition_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CIVector3Transition_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CIVector3Transition __x_ABI_CWindows_CUI_CXaml_CIVector3Transition;

#endif // ____x_ABI_CWindows_CUI_CXaml_CIVector3Transition_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CIVector3TransitionFactory_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CIVector3TransitionFactory_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CIVector3TransitionFactory __x_ABI_CWindows_CUI_CXaml_CIVector3TransitionFactory;

#endif // ____x_ABI_CWindows_CUI_CXaml_CIVector3TransitionFactory_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CIVisualState_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CIVisualState_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CIVisualState __x_ABI_CWindows_CUI_CXaml_CIVisualState;

#endif // ____x_ABI_CWindows_CUI_CXaml_CIVisualState_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CIVisualState2_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CIVisualState2_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CIVisualState2 __x_ABI_CWindows_CUI_CXaml_CIVisualState2;

#endif // ____x_ABI_CWindows_CUI_CXaml_CIVisualState2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CIVisualStateChangedEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CIVisualStateChangedEventArgs_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CIVisualStateChangedEventArgs __x_ABI_CWindows_CUI_CXaml_CIVisualStateChangedEventArgs;

#endif // ____x_ABI_CWindows_CUI_CXaml_CIVisualStateChangedEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CIVisualStateGroup_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CIVisualStateGroup_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CIVisualStateGroup __x_ABI_CWindows_CUI_CXaml_CIVisualStateGroup;

#endif // ____x_ABI_CWindows_CUI_CXaml_CIVisualStateGroup_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CIVisualStateManager_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CIVisualStateManager_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CIVisualStateManager __x_ABI_CWindows_CUI_CXaml_CIVisualStateManager;

#endif // ____x_ABI_CWindows_CUI_CXaml_CIVisualStateManager_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CIVisualStateManagerFactory_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CIVisualStateManagerFactory_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CIVisualStateManagerFactory __x_ABI_CWindows_CUI_CXaml_CIVisualStateManagerFactory;

#endif // ____x_ABI_CWindows_CUI_CXaml_CIVisualStateManagerFactory_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CIVisualStateManagerOverrides_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CIVisualStateManagerOverrides_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CIVisualStateManagerOverrides __x_ABI_CWindows_CUI_CXaml_CIVisualStateManagerOverrides;

#endif // ____x_ABI_CWindows_CUI_CXaml_CIVisualStateManagerOverrides_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CIVisualStateManagerProtected_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CIVisualStateManagerProtected_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CIVisualStateManagerProtected __x_ABI_CWindows_CUI_CXaml_CIVisualStateManagerProtected;

#endif // ____x_ABI_CWindows_CUI_CXaml_CIVisualStateManagerProtected_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CIVisualStateManagerStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CIVisualStateManagerStatics_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CIVisualStateManagerStatics __x_ABI_CWindows_CUI_CXaml_CIVisualStateManagerStatics;

#endif // ____x_ABI_CWindows_CUI_CXaml_CIVisualStateManagerStatics_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CIVisualTransition_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CIVisualTransition_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CIVisualTransition __x_ABI_CWindows_CUI_CXaml_CIVisualTransition;

#endif // ____x_ABI_CWindows_CUI_CXaml_CIVisualTransition_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CIVisualTransitionFactory_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CIVisualTransitionFactory_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CIVisualTransitionFactory __x_ABI_CWindows_CUI_CXaml_CIVisualTransitionFactory;

#endif // ____x_ABI_CWindows_CUI_CXaml_CIVisualTransitionFactory_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CIWindow_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CIWindow_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CIWindow __x_ABI_CWindows_CUI_CXaml_CIWindow;

#endif // ____x_ABI_CWindows_CUI_CXaml_CIWindow_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CIWindow2_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CIWindow2_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CIWindow2 __x_ABI_CWindows_CUI_CXaml_CIWindow2;

#endif // ____x_ABI_CWindows_CUI_CXaml_CIWindow2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CIWindow3_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CIWindow3_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CIWindow3 __x_ABI_CWindows_CUI_CXaml_CIWindow3;

#endif // ____x_ABI_CWindows_CUI_CXaml_CIWindow3_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CIWindow4_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CIWindow4_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CIWindow4 __x_ABI_CWindows_CUI_CXaml_CIWindow4;

#endif // ____x_ABI_CWindows_CUI_CXaml_CIWindow4_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CIWindowCreatedEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CIWindowCreatedEventArgs_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CIWindowCreatedEventArgs __x_ABI_CWindows_CUI_CXaml_CIWindowCreatedEventArgs;

#endif // ____x_ABI_CWindows_CUI_CXaml_CIWindowCreatedEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CIWindowStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CIWindowStatics_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CIWindowStatics __x_ABI_CWindows_CUI_CXaml_CIWindowStatics;

#endif // ____x_ABI_CWindows_CUI_CXaml_CIWindowStatics_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CIXamlRoot_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CIXamlRoot_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CIXamlRoot __x_ABI_CWindows_CUI_CXaml_CIXamlRoot;

#endif // ____x_ABI_CWindows_CUI_CXaml_CIXamlRoot_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CIXamlRootChangedEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CIXamlRootChangedEventArgs_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CIXamlRootChangedEventArgs __x_ABI_CWindows_CUI_CXaml_CIXamlRootChangedEventArgs;

#endif // ____x_ABI_CWindows_CUI_CXaml_CIXamlRootChangedEventArgs_FWD_DEFINED__

// Parameterized interface forward declarations (C)

// Collection interface definitions

typedef enum __x_ABI_CWindows_CApplicationModel_CDataTransfer_CDataPackageOperation __x_ABI_CWindows_CApplicationModel_CDataTransfer_CDataPackageOperation;

typedef interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CApplicationModel__CDataTransfer__CDataPackageOperation __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CApplicationModel__CDataTransfer__CDataPackageOperation;

#if !defined(____x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CApplicationModel__CDataTransfer__CDataPackageOperation_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CApplicationModel__CDataTransfer__CDataPackageOperation_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CApplicationModel__CDataTransfer__CDataPackageOperation __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CApplicationModel__CDataTransfer__CDataPackageOperation;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CApplicationModel__CDataTransfer__CDataPackageOperation;

    typedef struct __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CApplicationModel__CDataTransfer__CDataPackageOperationVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CApplicationModel__CDataTransfer__CDataPackageOperation* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CApplicationModel__CDataTransfer__CDataPackageOperation* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CApplicationModel__CDataTransfer__CDataPackageOperation* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CApplicationModel__CDataTransfer__CDataPackageOperation* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CApplicationModel__CDataTransfer__CDataPackageOperation* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CApplicationModel__CDataTransfer__CDataPackageOperation* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* put_Completed)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CApplicationModel__CDataTransfer__CDataPackageOperation* This,
        __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CApplicationModel__CDataTransfer__CDataPackageOperation* handler);
    HRESULT (STDMETHODCALLTYPE* get_Completed)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CApplicationModel__CDataTransfer__CDataPackageOperation* This,
        __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CApplicationModel__CDataTransfer__CDataPackageOperation** result);
    HRESULT (STDMETHODCALLTYPE* GetResults)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CApplicationModel__CDataTransfer__CDataPackageOperation* This,
        enum __x_ABI_CWindows_CApplicationModel_CDataTransfer_CDataPackageOperation* result);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CApplicationModel__CDataTransfer__CDataPackageOperationVtbl;

    interface __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CApplicationModel__CDataTransfer__CDataPackageOperation
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CApplicationModel__CDataTransfer__CDataPackageOperationVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CApplicationModel__CDataTransfer__CDataPackageOperation_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CApplicationModel__CDataTransfer__CDataPackageOperation_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CApplicationModel__CDataTransfer__CDataPackageOperation_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CApplicationModel__CDataTransfer__CDataPackageOperation __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CApplicationModel__CDataTransfer__CDataPackageOperation;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CApplicationModel__CDataTransfer__CDataPackageOperation;

    typedef struct __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CApplicationModel__CDataTransfer__CDataPackageOperationVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CApplicationModel__CDataTransfer__CDataPackageOperation* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CApplicationModel__CDataTransfer__CDataPackageOperation* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CApplicationModel__CDataTransfer__CDataPackageOperation* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CApplicationModel__CDataTransfer__CDataPackageOperation* This,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CApplicationModel__CDataTransfer__CDataPackageOperation* asyncInfo,
        enum __x_ABI_CWindows_CFoundation_CAsyncStatus asyncStatus);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CApplicationModel__CDataTransfer__CDataPackageOperationVtbl;

    interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CApplicationModel__CDataTransfer__CDataPackageOperation
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CApplicationModel__CDataTransfer__CDataPackageOperationVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CApplicationModel__CDataTransfer__CDataPackageOperation_INTERFACE_DEFINED__
    
typedef struct __x_ABI_CWindows_CFoundation_CPoint __x_ABI_CWindows_CFoundation_CPoint;

#if !defined(____x_ABI_C__FIIterator_1___x_ABI_CWindows__CFoundation__CPoint_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CFoundation__CPoint_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CFoundation__CPoint __x_ABI_C__FIIterator_1___x_ABI_CWindows__CFoundation__CPoint;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterator_1___x_ABI_CWindows__CFoundation__CPoint;

    typedef struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CFoundation__CPointVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CFoundation__CPoint* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CFoundation__CPoint* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CFoundation__CPoint* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CFoundation__CPoint* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CFoundation__CPoint* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CFoundation__CPoint* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Current)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CFoundation__CPoint* This,
        struct __x_ABI_CWindows_CFoundation_CPoint* result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CFoundation__CPoint* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CFoundation__CPoint* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CFoundation__CPoint* This,
        UINT32 itemsLength,
        struct __x_ABI_CWindows_CFoundation_CPoint* items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIIterator_1___x_ABI_CWindows__CFoundation__CPointVtbl;

    interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CFoundation__CPoint
    {
        CONST_VTBL struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CFoundation__CPointVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CFoundation__CPoint_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterable_1___x_ABI_CWindows__CFoundation__CPoint_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CFoundation__CPoint_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CFoundation__CPoint __x_ABI_C__FIIterable_1___x_ABI_CWindows__CFoundation__CPoint;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterable_1___x_ABI_CWindows__CFoundation__CPoint;

    typedef struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CFoundation__CPointVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CFoundation__CPoint* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CFoundation__CPoint* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CFoundation__CPoint* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CFoundation__CPoint* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CFoundation__CPoint* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CFoundation__CPoint* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* First)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CFoundation__CPoint* This,
        __x_ABI_C__FIIterator_1___x_ABI_CWindows__CFoundation__CPoint** result);

        END_INTERFACE
    } __x_ABI_C__FIIterable_1___x_ABI_CWindows__CFoundation__CPointVtbl;

    interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CFoundation__CPoint
    {
        CONST_VTBL struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CFoundation__CPointVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CFoundation__CPoint_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterator_1___x_ABI_C__FIIterable_1___x_ABI_CWindows__CFoundation__CPoint_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterator_1___x_ABI_C__FIIterable_1___x_ABI_CWindows__CFoundation__CPoint_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterator_1___x_ABI_C__FIIterable_1___x_ABI_CWindows__CFoundation__CPoint __x_ABI_C__FIIterator_1___x_ABI_C__FIIterable_1___x_ABI_CWindows__CFoundation__CPoint;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterator_1___x_ABI_C__FIIterable_1___x_ABI_CWindows__CFoundation__CPoint;

    typedef struct __x_ABI_C__FIIterator_1___x_ABI_C__FIIterable_1___x_ABI_CWindows__CFoundation__CPointVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterator_1___x_ABI_C__FIIterable_1___x_ABI_CWindows__CFoundation__CPoint* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterator_1___x_ABI_C__FIIterable_1___x_ABI_CWindows__CFoundation__CPoint* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterator_1___x_ABI_C__FIIterable_1___x_ABI_CWindows__CFoundation__CPoint* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterator_1___x_ABI_C__FIIterable_1___x_ABI_CWindows__CFoundation__CPoint* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterator_1___x_ABI_C__FIIterable_1___x_ABI_CWindows__CFoundation__CPoint* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterator_1___x_ABI_C__FIIterable_1___x_ABI_CWindows__CFoundation__CPoint* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Current)(__x_ABI_C__FIIterator_1___x_ABI_C__FIIterable_1___x_ABI_CWindows__CFoundation__CPoint* This,
        __x_ABI_C__FIIterable_1___x_ABI_CWindows__CFoundation__CPoint** result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__x_ABI_C__FIIterator_1___x_ABI_C__FIIterable_1___x_ABI_CWindows__CFoundation__CPoint* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__x_ABI_C__FIIterator_1___x_ABI_C__FIIterable_1___x_ABI_CWindows__CFoundation__CPoint* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIIterator_1___x_ABI_C__FIIterable_1___x_ABI_CWindows__CFoundation__CPoint* This,
        UINT32 itemsLength,
        __x_ABI_C__FIIterable_1___x_ABI_CWindows__CFoundation__CPoint** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIIterator_1___x_ABI_C__FIIterable_1___x_ABI_CWindows__CFoundation__CPointVtbl;

    interface __x_ABI_C__FIIterator_1___x_ABI_C__FIIterable_1___x_ABI_CWindows__CFoundation__CPoint
    {
        CONST_VTBL struct __x_ABI_C__FIIterator_1___x_ABI_C__FIIterable_1___x_ABI_CWindows__CFoundation__CPointVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterator_1___x_ABI_C__FIIterable_1___x_ABI_CWindows__CFoundation__CPoint_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterable_1___x_ABI_C__FIIterable_1___x_ABI_CWindows__CFoundation__CPoint_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterable_1___x_ABI_C__FIIterable_1___x_ABI_CWindows__CFoundation__CPoint_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterable_1___x_ABI_C__FIIterable_1___x_ABI_CWindows__CFoundation__CPoint __x_ABI_C__FIIterable_1___x_ABI_C__FIIterable_1___x_ABI_CWindows__CFoundation__CPoint;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterable_1___x_ABI_C__FIIterable_1___x_ABI_CWindows__CFoundation__CPoint;

    typedef struct __x_ABI_C__FIIterable_1___x_ABI_C__FIIterable_1___x_ABI_CWindows__CFoundation__CPointVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterable_1___x_ABI_C__FIIterable_1___x_ABI_CWindows__CFoundation__CPoint* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterable_1___x_ABI_C__FIIterable_1___x_ABI_CWindows__CFoundation__CPoint* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterable_1___x_ABI_C__FIIterable_1___x_ABI_CWindows__CFoundation__CPoint* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterable_1___x_ABI_C__FIIterable_1___x_ABI_CWindows__CFoundation__CPoint* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterable_1___x_ABI_C__FIIterable_1___x_ABI_CWindows__CFoundation__CPoint* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterable_1___x_ABI_C__FIIterable_1___x_ABI_CWindows__CFoundation__CPoint* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* First)(__x_ABI_C__FIIterable_1___x_ABI_C__FIIterable_1___x_ABI_CWindows__CFoundation__CPoint* This,
        __x_ABI_C__FIIterator_1___x_ABI_C__FIIterable_1___x_ABI_CWindows__CFoundation__CPoint** result);

        END_INTERFACE
    } __x_ABI_C__FIIterable_1___x_ABI_C__FIIterable_1___x_ABI_CWindows__CFoundation__CPointVtbl;

    interface __x_ABI_C__FIIterable_1___x_ABI_C__FIIterable_1___x_ABI_CWindows__CFoundation__CPoint
    {
        CONST_VTBL struct __x_ABI_C__FIIterable_1___x_ABI_C__FIIterable_1___x_ABI_CWindows__CFoundation__CPointVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterable_1___x_ABI_C__FIIterable_1___x_ABI_CWindows__CFoundation__CPoint_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIKeyValuePair_2_IInspectable_IInspectable_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIKeyValuePair_2_IInspectable_IInspectable_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIKeyValuePair_2_IInspectable_IInspectable __x_ABI_C__FIKeyValuePair_2_IInspectable_IInspectable;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIKeyValuePair_2_IInspectable_IInspectable;

    typedef struct __x_ABI_C__FIKeyValuePair_2_IInspectable_IInspectableVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIKeyValuePair_2_IInspectable_IInspectable* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIKeyValuePair_2_IInspectable_IInspectable* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIKeyValuePair_2_IInspectable_IInspectable* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIKeyValuePair_2_IInspectable_IInspectable* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIKeyValuePair_2_IInspectable_IInspectable* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIKeyValuePair_2_IInspectable_IInspectable* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Key)(__x_ABI_C__FIKeyValuePair_2_IInspectable_IInspectable* This,
        IInspectable** result);
    HRESULT (STDMETHODCALLTYPE* get_Value)(__x_ABI_C__FIKeyValuePair_2_IInspectable_IInspectable* This,
        IInspectable** result);

        END_INTERFACE
    } __x_ABI_C__FIKeyValuePair_2_IInspectable_IInspectableVtbl;

    interface __x_ABI_C__FIKeyValuePair_2_IInspectable_IInspectable
    {
        CONST_VTBL struct __x_ABI_C__FIKeyValuePair_2_IInspectable_IInspectableVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIKeyValuePair_2_IInspectable_IInspectable_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_IInspectable_IInspectable_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_IInspectable_IInspectable_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_IInspectable_IInspectable __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_IInspectable_IInspectable;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_IInspectable_IInspectable;

    typedef struct __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_IInspectable_IInspectableVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_IInspectable_IInspectable* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_IInspectable_IInspectable* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_IInspectable_IInspectable* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_IInspectable_IInspectable* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_IInspectable_IInspectable* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_IInspectable_IInspectable* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Current)(__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_IInspectable_IInspectable* This,
        __x_ABI_C__FIKeyValuePair_2_IInspectable_IInspectable** result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_IInspectable_IInspectable* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_IInspectable_IInspectable* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_IInspectable_IInspectable* This,
        UINT32 itemsLength,
        __x_ABI_C__FIKeyValuePair_2_IInspectable_IInspectable** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_IInspectable_IInspectableVtbl;

    interface __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_IInspectable_IInspectable
    {
        CONST_VTBL struct __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_IInspectable_IInspectableVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_IInspectable_IInspectable_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_IInspectable_IInspectable_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_IInspectable_IInspectable_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_IInspectable_IInspectable __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_IInspectable_IInspectable;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_IInspectable_IInspectable;

    typedef struct __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_IInspectable_IInspectableVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_IInspectable_IInspectable* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_IInspectable_IInspectable* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_IInspectable_IInspectable* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_IInspectable_IInspectable* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_IInspectable_IInspectable* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_IInspectable_IInspectable* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* First)(__x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_IInspectable_IInspectable* This,
        __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_IInspectable_IInspectable** result);

        END_INTERFACE
    } __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_IInspectable_IInspectableVtbl;

    interface __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_IInspectable_IInspectable
    {
        CONST_VTBL struct __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_IInspectable_IInspectableVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_IInspectable_IInspectable_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CDependencyObject_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CDependencyObject_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CDependencyObject __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CDependencyObject;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CDependencyObject;

    typedef struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CDependencyObjectVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CDependencyObject* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CDependencyObject* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CDependencyObject* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CDependencyObject* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CDependencyObject* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CDependencyObject* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Current)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CDependencyObject* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyObject** result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CDependencyObject* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CDependencyObject* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CDependencyObject* This,
        UINT32 itemsLength,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyObject** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CDependencyObjectVtbl;

    interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CDependencyObject
    {
        CONST_VTBL struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CDependencyObjectVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CDependencyObject_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CDependencyObject_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CDependencyObject_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CDependencyObject __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CDependencyObject;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CDependencyObject;

    typedef struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CDependencyObjectVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CDependencyObject* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CDependencyObject* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CDependencyObject* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CDependencyObject* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CDependencyObject* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CDependencyObject* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* First)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CDependencyObject* This,
        __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CDependencyObject** result);

        END_INTERFACE
    } __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CDependencyObjectVtbl;

    interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CDependencyObject
    {
        CONST_VTBL struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CDependencyObjectVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CDependencyObject_INTERFACE_DEFINED__
    
#ifndef ____x_ABI_CWindows_CUI_CXaml_CInput_CIKeyboardAccelerator_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CInput_CIKeyboardAccelerator_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CInput_CIKeyboardAccelerator __x_ABI_CWindows_CUI_CXaml_CInput_CIKeyboardAccelerator;

#endif // ____x_ABI_CWindows_CUI_CXaml_CInput_CIKeyboardAccelerator_FWD_DEFINED__

#if !defined(____x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CInput__CKeyboardAccelerator_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CInput__CKeyboardAccelerator_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CInput__CKeyboardAccelerator __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CInput__CKeyboardAccelerator;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CInput__CKeyboardAccelerator;

    typedef struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CInput__CKeyboardAcceleratorVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CInput__CKeyboardAccelerator* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CInput__CKeyboardAccelerator* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CInput__CKeyboardAccelerator* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CInput__CKeyboardAccelerator* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CInput__CKeyboardAccelerator* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CInput__CKeyboardAccelerator* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Current)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CInput__CKeyboardAccelerator* This,
        __x_ABI_CWindows_CUI_CXaml_CInput_CIKeyboardAccelerator** result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CInput__CKeyboardAccelerator* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CInput__CKeyboardAccelerator* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CInput__CKeyboardAccelerator* This,
        UINT32 itemsLength,
        __x_ABI_CWindows_CUI_CXaml_CInput_CIKeyboardAccelerator** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CInput__CKeyboardAcceleratorVtbl;

    interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CInput__CKeyboardAccelerator
    {
        CONST_VTBL struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CInput__CKeyboardAcceleratorVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CInput__CKeyboardAccelerator_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CInput__CKeyboardAccelerator_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CInput__CKeyboardAccelerator_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CInput__CKeyboardAccelerator __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CInput__CKeyboardAccelerator;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CInput__CKeyboardAccelerator;

    typedef struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CInput__CKeyboardAcceleratorVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CInput__CKeyboardAccelerator* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CInput__CKeyboardAccelerator* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CInput__CKeyboardAccelerator* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CInput__CKeyboardAccelerator* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CInput__CKeyboardAccelerator* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CInput__CKeyboardAccelerator* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* First)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CInput__CKeyboardAccelerator* This,
        __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CInput__CKeyboardAccelerator** result);

        END_INTERFACE
    } __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CInput__CKeyboardAcceleratorVtbl;

    interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CInput__CKeyboardAccelerator
    {
        CONST_VTBL struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CInput__CKeyboardAcceleratorVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CInput__CKeyboardAccelerator_INTERFACE_DEFINED__
    
#ifndef ____x_ABI_CWindows_CUI_CXaml_CInput_CIPointer_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CInput_CIPointer_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CInput_CIPointer __x_ABI_CWindows_CUI_CXaml_CInput_CIPointer;

#endif // ____x_ABI_CWindows_CUI_CXaml_CInput_CIPointer_FWD_DEFINED__

#if !defined(____x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CInput__CPointer_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CInput__CPointer_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CInput__CPointer __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CInput__CPointer;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CInput__CPointer;

    typedef struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CInput__CPointerVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CInput__CPointer* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CInput__CPointer* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CInput__CPointer* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CInput__CPointer* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CInput__CPointer* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CInput__CPointer* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Current)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CInput__CPointer* This,
        __x_ABI_CWindows_CUI_CXaml_CInput_CIPointer** result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CInput__CPointer* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CInput__CPointer* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CInput__CPointer* This,
        UINT32 itemsLength,
        __x_ABI_CWindows_CUI_CXaml_CInput_CIPointer** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CInput__CPointerVtbl;

    interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CInput__CPointer
    {
        CONST_VTBL struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CInput__CPointerVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CInput__CPointer_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CInput__CPointer_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CInput__CPointer_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CInput__CPointer __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CInput__CPointer;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CInput__CPointer;

    typedef struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CInput__CPointerVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CInput__CPointer* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CInput__CPointer* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CInput__CPointer* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CInput__CPointer* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CInput__CPointer* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CInput__CPointer* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* First)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CInput__CPointer* This,
        __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CInput__CPointer** result);

        END_INTERFACE
    } __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CInput__CPointerVtbl;

    interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CInput__CPointer
    {
        CONST_VTBL struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CInput__CPointerVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CInput__CPointer_INTERFACE_DEFINED__
    
#ifndef ____x_ABI_CWindows_CUI_CXaml_CMedia_CIXamlLight_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CMedia_CIXamlLight_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CMedia_CIXamlLight __x_ABI_CWindows_CUI_CXaml_CMedia_CIXamlLight;

#endif // ____x_ABI_CWindows_CUI_CXaml_CMedia_CIXamlLight_FWD_DEFINED__

#if !defined(____x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CMedia__CXamlLight_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CMedia__CXamlLight_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CMedia__CXamlLight __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CMedia__CXamlLight;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CMedia__CXamlLight;

    typedef struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CMedia__CXamlLightVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CMedia__CXamlLight* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CMedia__CXamlLight* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CMedia__CXamlLight* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CMedia__CXamlLight* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CMedia__CXamlLight* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CMedia__CXamlLight* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Current)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CMedia__CXamlLight* This,
        __x_ABI_CWindows_CUI_CXaml_CMedia_CIXamlLight** result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CMedia__CXamlLight* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CMedia__CXamlLight* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CMedia__CXamlLight* This,
        UINT32 itemsLength,
        __x_ABI_CWindows_CUI_CXaml_CMedia_CIXamlLight** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CMedia__CXamlLightVtbl;

    interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CMedia__CXamlLight
    {
        CONST_VTBL struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CMedia__CXamlLightVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CMedia__CXamlLight_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CMedia__CXamlLight_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CMedia__CXamlLight_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CMedia__CXamlLight __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CMedia__CXamlLight;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CMedia__CXamlLight;

    typedef struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CMedia__CXamlLightVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CMedia__CXamlLight* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CMedia__CXamlLight* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CMedia__CXamlLight* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CMedia__CXamlLight* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CMedia__CXamlLight* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CMedia__CXamlLight* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* First)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CMedia__CXamlLight* This,
        __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CMedia__CXamlLight** result);

        END_INTERFACE
    } __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CMedia__CXamlLightVtbl;

    interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CMedia__CXamlLight
    {
        CONST_VTBL struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CMedia__CXamlLightVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CMedia__CXamlLight_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CResourceDictionary_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CResourceDictionary_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CResourceDictionary __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CResourceDictionary;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CResourceDictionary;

    typedef struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CResourceDictionaryVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CResourceDictionary* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CResourceDictionary* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CResourceDictionary* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CResourceDictionary* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CResourceDictionary* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CResourceDictionary* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Current)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CResourceDictionary* This,
        __x_ABI_CWindows_CUI_CXaml_CIResourceDictionary** result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CResourceDictionary* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CResourceDictionary* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CResourceDictionary* This,
        UINT32 itemsLength,
        __x_ABI_CWindows_CUI_CXaml_CIResourceDictionary** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CResourceDictionaryVtbl;

    interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CResourceDictionary
    {
        CONST_VTBL struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CResourceDictionaryVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CResourceDictionary_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CResourceDictionary_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CResourceDictionary_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CResourceDictionary __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CResourceDictionary;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CResourceDictionary;

    typedef struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CResourceDictionaryVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CResourceDictionary* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CResourceDictionary* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CResourceDictionary* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CResourceDictionary* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CResourceDictionary* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CResourceDictionary* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* First)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CResourceDictionary* This,
        __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CResourceDictionary** result);

        END_INTERFACE
    } __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CResourceDictionaryVtbl;

    interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CResourceDictionary
    {
        CONST_VTBL struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CResourceDictionaryVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CResourceDictionary_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CSetterBase_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CSetterBase_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CSetterBase __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CSetterBase;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CSetterBase;

    typedef struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CSetterBaseVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CSetterBase* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CSetterBase* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CSetterBase* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CSetterBase* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CSetterBase* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CSetterBase* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Current)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CSetterBase* This,
        __x_ABI_CWindows_CUI_CXaml_CISetterBase** result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CSetterBase* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CSetterBase* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CSetterBase* This,
        UINT32 itemsLength,
        __x_ABI_CWindows_CUI_CXaml_CISetterBase** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CSetterBaseVtbl;

    interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CSetterBase
    {
        CONST_VTBL struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CSetterBaseVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CSetterBase_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CSetterBase_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CSetterBase_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CSetterBase __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CSetterBase;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CSetterBase;

    typedef struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CSetterBaseVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CSetterBase* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CSetterBase* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CSetterBase* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CSetterBase* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CSetterBase* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CSetterBase* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* First)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CSetterBase* This,
        __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CSetterBase** result);

        END_INTERFACE
    } __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CSetterBaseVtbl;

    interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CSetterBase
    {
        CONST_VTBL struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CSetterBaseVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CSetterBase_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CStateTriggerBase_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CStateTriggerBase_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CStateTriggerBase __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CStateTriggerBase;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CStateTriggerBase;

    typedef struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CStateTriggerBaseVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CStateTriggerBase* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CStateTriggerBase* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CStateTriggerBase* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CStateTriggerBase* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CStateTriggerBase* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CStateTriggerBase* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Current)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CStateTriggerBase* This,
        __x_ABI_CWindows_CUI_CXaml_CIStateTriggerBase** result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CStateTriggerBase* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CStateTriggerBase* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CStateTriggerBase* This,
        UINT32 itemsLength,
        __x_ABI_CWindows_CUI_CXaml_CIStateTriggerBase** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CStateTriggerBaseVtbl;

    interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CStateTriggerBase
    {
        CONST_VTBL struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CStateTriggerBaseVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CStateTriggerBase_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CStateTriggerBase_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CStateTriggerBase_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CStateTriggerBase __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CStateTriggerBase;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CStateTriggerBase;

    typedef struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CStateTriggerBaseVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CStateTriggerBase* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CStateTriggerBase* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CStateTriggerBase* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CStateTriggerBase* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CStateTriggerBase* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CStateTriggerBase* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* First)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CStateTriggerBase* This,
        __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CStateTriggerBase** result);

        END_INTERFACE
    } __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CStateTriggerBaseVtbl;

    interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CStateTriggerBase
    {
        CONST_VTBL struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CStateTriggerBaseVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CStateTriggerBase_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CTriggerAction_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CTriggerAction_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CTriggerAction __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CTriggerAction;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CTriggerAction;

    typedef struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CTriggerActionVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CTriggerAction* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CTriggerAction* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CTriggerAction* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CTriggerAction* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CTriggerAction* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CTriggerAction* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Current)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CTriggerAction* This,
        __x_ABI_CWindows_CUI_CXaml_CITriggerAction** result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CTriggerAction* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CTriggerAction* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CTriggerAction* This,
        UINT32 itemsLength,
        __x_ABI_CWindows_CUI_CXaml_CITriggerAction** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CTriggerActionVtbl;

    interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CTriggerAction
    {
        CONST_VTBL struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CTriggerActionVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CTriggerAction_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CTriggerAction_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CTriggerAction_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CTriggerAction __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CTriggerAction;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CTriggerAction;

    typedef struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CTriggerActionVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CTriggerAction* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CTriggerAction* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CTriggerAction* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CTriggerAction* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CTriggerAction* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CTriggerAction* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* First)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CTriggerAction* This,
        __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CTriggerAction** result);

        END_INTERFACE
    } __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CTriggerActionVtbl;

    interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CTriggerAction
    {
        CONST_VTBL struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CTriggerActionVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CTriggerAction_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CTriggerBase_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CTriggerBase_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CTriggerBase __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CTriggerBase;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CTriggerBase;

    typedef struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CTriggerBaseVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CTriggerBase* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CTriggerBase* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CTriggerBase* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CTriggerBase* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CTriggerBase* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CTriggerBase* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Current)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CTriggerBase* This,
        __x_ABI_CWindows_CUI_CXaml_CITriggerBase** result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CTriggerBase* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CTriggerBase* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CTriggerBase* This,
        UINT32 itemsLength,
        __x_ABI_CWindows_CUI_CXaml_CITriggerBase** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CTriggerBaseVtbl;

    interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CTriggerBase
    {
        CONST_VTBL struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CTriggerBaseVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CTriggerBase_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CTriggerBase_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CTriggerBase_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CTriggerBase __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CTriggerBase;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CTriggerBase;

    typedef struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CTriggerBaseVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CTriggerBase* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CTriggerBase* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CTriggerBase* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CTriggerBase* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CTriggerBase* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CTriggerBase* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* First)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CTriggerBase* This,
        __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CTriggerBase** result);

        END_INTERFACE
    } __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CTriggerBaseVtbl;

    interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CTriggerBase
    {
        CONST_VTBL struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CTriggerBaseVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CTriggerBase_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CUIElement_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CUIElement_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CUIElement __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CUIElement;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CUIElement;

    typedef struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CUIElementVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CUIElement* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CUIElement* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CUIElement* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CUIElement* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CUIElement* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CUIElement* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Current)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CUIElement* This,
        __x_ABI_CWindows_CUI_CXaml_CIUIElement** result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CUIElement* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CUIElement* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CUIElement* This,
        UINT32 itemsLength,
        __x_ABI_CWindows_CUI_CXaml_CIUIElement** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CUIElementVtbl;

    interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CUIElement
    {
        CONST_VTBL struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CUIElementVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CUIElement_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CUIElement_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CUIElement_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CUIElement __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CUIElement;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CUIElement;

    typedef struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CUIElementVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CUIElement* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CUIElement* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CUIElement* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CUIElement* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CUIElement* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CUIElement* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* First)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CUIElement* This,
        __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CUIElement** result);

        END_INTERFACE
    } __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CUIElementVtbl;

    interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CUIElement
    {
        CONST_VTBL struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CUIElementVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CUIElement_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CVisualState_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CVisualState_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CVisualState __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CVisualState;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CVisualState;

    typedef struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CVisualStateVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CVisualState* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CVisualState* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CVisualState* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CVisualState* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CVisualState* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CVisualState* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Current)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CVisualState* This,
        __x_ABI_CWindows_CUI_CXaml_CIVisualState** result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CVisualState* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CVisualState* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CVisualState* This,
        UINT32 itemsLength,
        __x_ABI_CWindows_CUI_CXaml_CIVisualState** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CVisualStateVtbl;

    interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CVisualState
    {
        CONST_VTBL struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CVisualStateVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CVisualState_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CVisualState_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CVisualState_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CVisualState __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CVisualState;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CVisualState;

    typedef struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CVisualStateVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CVisualState* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CVisualState* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CVisualState* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CVisualState* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CVisualState* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CVisualState* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* First)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CVisualState* This,
        __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CVisualState** result);

        END_INTERFACE
    } __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CVisualStateVtbl;

    interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CVisualState
    {
        CONST_VTBL struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CVisualStateVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CVisualState_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CVisualStateGroup_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CVisualStateGroup_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CVisualStateGroup __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CVisualStateGroup;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CVisualStateGroup;

    typedef struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CVisualStateGroupVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CVisualStateGroup* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CVisualStateGroup* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CVisualStateGroup* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CVisualStateGroup* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CVisualStateGroup* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CVisualStateGroup* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Current)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CVisualStateGroup* This,
        __x_ABI_CWindows_CUI_CXaml_CIVisualStateGroup** result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CVisualStateGroup* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CVisualStateGroup* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CVisualStateGroup* This,
        UINT32 itemsLength,
        __x_ABI_CWindows_CUI_CXaml_CIVisualStateGroup** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CVisualStateGroupVtbl;

    interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CVisualStateGroup
    {
        CONST_VTBL struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CVisualStateGroupVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CVisualStateGroup_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CVisualStateGroup_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CVisualStateGroup_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CVisualStateGroup __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CVisualStateGroup;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CVisualStateGroup;

    typedef struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CVisualStateGroupVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CVisualStateGroup* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CVisualStateGroup* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CVisualStateGroup* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CVisualStateGroup* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CVisualStateGroup* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CVisualStateGroup* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* First)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CVisualStateGroup* This,
        __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CVisualStateGroup** result);

        END_INTERFACE
    } __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CVisualStateGroupVtbl;

    interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CVisualStateGroup
    {
        CONST_VTBL struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CVisualStateGroupVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CVisualStateGroup_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CVisualTransition_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CVisualTransition_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CVisualTransition __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CVisualTransition;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CVisualTransition;

    typedef struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CVisualTransitionVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CVisualTransition* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CVisualTransition* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CVisualTransition* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CVisualTransition* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CVisualTransition* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CVisualTransition* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Current)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CVisualTransition* This,
        __x_ABI_CWindows_CUI_CXaml_CIVisualTransition** result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CVisualTransition* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CVisualTransition* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CVisualTransition* This,
        UINT32 itemsLength,
        __x_ABI_CWindows_CUI_CXaml_CIVisualTransition** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CVisualTransitionVtbl;

    interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CVisualTransition
    {
        CONST_VTBL struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CVisualTransitionVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CVisualTransition_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CVisualTransition_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CVisualTransition_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CVisualTransition __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CVisualTransition;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CVisualTransition;

    typedef struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CVisualTransitionVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CVisualTransition* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CVisualTransition* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CVisualTransition* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CVisualTransition* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CVisualTransition* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CVisualTransition* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* First)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CVisualTransition* This,
        __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CVisualTransition** result);

        END_INTERFACE
    } __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CVisualTransitionVtbl;

    interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CVisualTransition
    {
        CONST_VTBL struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CVisualTransitionVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CVisualTransition_INTERFACE_DEFINED__
    
typedef interface __x_ABI_C__FIMapView_2_IInspectable_IInspectable __x_ABI_C__FIMapView_2_IInspectable_IInspectable;

#if !defined(____x_ABI_C__FIMapView_2_IInspectable_IInspectable_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIMapView_2_IInspectable_IInspectable_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIMapView_2_IInspectable_IInspectable __x_ABI_C__FIMapView_2_IInspectable_IInspectable;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIMapView_2_IInspectable_IInspectable;

    typedef struct __x_ABI_C__FIMapView_2_IInspectable_IInspectableVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIMapView_2_IInspectable_IInspectable* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIMapView_2_IInspectable_IInspectable* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIMapView_2_IInspectable_IInspectable* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIMapView_2_IInspectable_IInspectable* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIMapView_2_IInspectable_IInspectable* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIMapView_2_IInspectable_IInspectable* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* Lookup)(__x_ABI_C__FIMapView_2_IInspectable_IInspectable* This,
        IInspectable* key,
        IInspectable** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIMapView_2_IInspectable_IInspectable* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* HasKey)(__x_ABI_C__FIMapView_2_IInspectable_IInspectable* This,
        IInspectable* key,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* Split)(__x_ABI_C__FIMapView_2_IInspectable_IInspectable* This,
        __x_ABI_C__FIMapView_2_IInspectable_IInspectable** first,
        __x_ABI_C__FIMapView_2_IInspectable_IInspectable** second);

        END_INTERFACE
    } __x_ABI_C__FIMapView_2_IInspectable_IInspectableVtbl;

    interface __x_ABI_C__FIMapView_2_IInspectable_IInspectable
    {
        CONST_VTBL struct __x_ABI_C__FIMapView_2_IInspectable_IInspectableVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIMapView_2_IInspectable_IInspectable_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIMap_2_IInspectable_IInspectable_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIMap_2_IInspectable_IInspectable_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIMap_2_IInspectable_IInspectable __x_ABI_C__FIMap_2_IInspectable_IInspectable;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIMap_2_IInspectable_IInspectable;

    typedef struct __x_ABI_C__FIMap_2_IInspectable_IInspectableVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIMap_2_IInspectable_IInspectable* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIMap_2_IInspectable_IInspectable* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIMap_2_IInspectable_IInspectable* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIMap_2_IInspectable_IInspectable* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIMap_2_IInspectable_IInspectable* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIMap_2_IInspectable_IInspectable* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* Lookup)(__x_ABI_C__FIMap_2_IInspectable_IInspectable* This,
        IInspectable* key,
        IInspectable** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIMap_2_IInspectable_IInspectable* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* HasKey)(__x_ABI_C__FIMap_2_IInspectable_IInspectable* This,
        IInspectable* key,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetView)(__x_ABI_C__FIMap_2_IInspectable_IInspectable* This,
        __x_ABI_C__FIMapView_2_IInspectable_IInspectable** result);
    HRESULT (STDMETHODCALLTYPE* Insert)(__x_ABI_C__FIMap_2_IInspectable_IInspectable* This,
        IInspectable* key,
        IInspectable* value,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* Remove)(__x_ABI_C__FIMap_2_IInspectable_IInspectable* This,
        IInspectable* key);
    HRESULT (STDMETHODCALLTYPE* Clear)(__x_ABI_C__FIMap_2_IInspectable_IInspectable* This);

        END_INTERFACE
    } __x_ABI_C__FIMap_2_IInspectable_IInspectableVtbl;

    interface __x_ABI_C__FIMap_2_IInspectable_IInspectable
    {
        CONST_VTBL struct __x_ABI_C__FIMap_2_IInspectable_IInspectableVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIMap_2_IInspectable_IInspectable_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CDependencyObject_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CDependencyObject_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CDependencyObject __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CDependencyObject;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CDependencyObject;

    typedef struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CDependencyObjectVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CDependencyObject* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CDependencyObject* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CDependencyObject* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CDependencyObject* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CDependencyObject* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CDependencyObject* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CDependencyObject* This,
        UINT32 index,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyObject** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CDependencyObject* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CDependencyObject* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyObject* value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CDependencyObject* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyObject** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CDependencyObjectVtbl;

    interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CDependencyObject
    {
        CONST_VTBL struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CDependencyObjectVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CDependencyObject_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CDependencyObject_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CDependencyObject_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CDependencyObject __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CDependencyObject;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CDependencyObject;

    typedef struct __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CDependencyObjectVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CDependencyObject* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CDependencyObject* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CDependencyObject* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CDependencyObject* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CDependencyObject* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CDependencyObject* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CDependencyObject* This,
        UINT32 index,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyObject** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CDependencyObject* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* GetView)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CDependencyObject* This,
        __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CDependencyObject** result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CDependencyObject* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyObject* value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* SetAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CDependencyObject* This,
        UINT32 index,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyObject* value);
    HRESULT (STDMETHODCALLTYPE* InsertAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CDependencyObject* This,
        UINT32 index,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyObject* value);
    HRESULT (STDMETHODCALLTYPE* RemoveAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CDependencyObject* This,
        UINT32 index);
    HRESULT (STDMETHODCALLTYPE* Append)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CDependencyObject* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyObject* value);
    HRESULT (STDMETHODCALLTYPE* RemoveAtEnd)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CDependencyObject* This);
    HRESULT (STDMETHODCALLTYPE* Clear)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CDependencyObject* This);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CDependencyObject* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyObject** items,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* ReplaceAll)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CDependencyObject* This,
        UINT32 itemsLength,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyObject** items);

        END_INTERFACE
    } __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CDependencyObjectVtbl;

    interface __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CDependencyObject
    {
        CONST_VTBL struct __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CDependencyObjectVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CDependencyObject_INTERFACE_DEFINED__
    
typedef interface __x_ABI_C__FIObservableVector_1___x_ABI_CWindows__CUI__CXaml__CDependencyObject __x_ABI_C__FIObservableVector_1___x_ABI_CWindows__CUI__CXaml__CDependencyObject;

#if !defined(____x_ABI_C__FVectorChangedEventHandler_1___x_ABI_CWindows__CUI__CXaml__CDependencyObject_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FVectorChangedEventHandler_1___x_ABI_CWindows__CUI__CXaml__CDependencyObject_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FVectorChangedEventHandler_1___x_ABI_CWindows__CUI__CXaml__CDependencyObject __x_ABI_C__FVectorChangedEventHandler_1___x_ABI_CWindows__CUI__CXaml__CDependencyObject;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FVectorChangedEventHandler_1___x_ABI_CWindows__CUI__CXaml__CDependencyObject;

    typedef struct __x_ABI_C__FVectorChangedEventHandler_1___x_ABI_CWindows__CUI__CXaml__CDependencyObjectVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FVectorChangedEventHandler_1___x_ABI_CWindows__CUI__CXaml__CDependencyObject* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FVectorChangedEventHandler_1___x_ABI_CWindows__CUI__CXaml__CDependencyObject* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FVectorChangedEventHandler_1___x_ABI_CWindows__CUI__CXaml__CDependencyObject* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FVectorChangedEventHandler_1___x_ABI_CWindows__CUI__CXaml__CDependencyObject* This,
        __x_ABI_C__FIObservableVector_1___x_ABI_CWindows__CUI__CXaml__CDependencyObject* sender,
        __x_ABI_CWindows_CFoundation_CCollections_CIVectorChangedEventArgs* event);

        END_INTERFACE
    } __x_ABI_C__FVectorChangedEventHandler_1___x_ABI_CWindows__CUI__CXaml__CDependencyObjectVtbl;

    interface __x_ABI_C__FVectorChangedEventHandler_1___x_ABI_CWindows__CUI__CXaml__CDependencyObject
    {
        CONST_VTBL struct __x_ABI_C__FVectorChangedEventHandler_1___x_ABI_CWindows__CUI__CXaml__CDependencyObjectVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FVectorChangedEventHandler_1___x_ABI_CWindows__CUI__CXaml__CDependencyObject_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIObservableVector_1___x_ABI_CWindows__CUI__CXaml__CDependencyObject_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIObservableVector_1___x_ABI_CWindows__CUI__CXaml__CDependencyObject_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIObservableVector_1___x_ABI_CWindows__CUI__CXaml__CDependencyObject __x_ABI_C__FIObservableVector_1___x_ABI_CWindows__CUI__CXaml__CDependencyObject;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIObservableVector_1___x_ABI_CWindows__CUI__CXaml__CDependencyObject;

    typedef struct __x_ABI_C__FIObservableVector_1___x_ABI_CWindows__CUI__CXaml__CDependencyObjectVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIObservableVector_1___x_ABI_CWindows__CUI__CXaml__CDependencyObject* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIObservableVector_1___x_ABI_CWindows__CUI__CXaml__CDependencyObject* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIObservableVector_1___x_ABI_CWindows__CUI__CXaml__CDependencyObject* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIObservableVector_1___x_ABI_CWindows__CUI__CXaml__CDependencyObject* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIObservableVector_1___x_ABI_CWindows__CUI__CXaml__CDependencyObject* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIObservableVector_1___x_ABI_CWindows__CUI__CXaml__CDependencyObject* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* add_VectorChanged)(__x_ABI_C__FIObservableVector_1___x_ABI_CWindows__CUI__CXaml__CDependencyObject* This,
        __x_ABI_C__FVectorChangedEventHandler_1___x_ABI_CWindows__CUI__CXaml__CDependencyObject* vhnd,
        EventRegistrationToken* result);
    HRESULT (STDMETHODCALLTYPE* remove_VectorChanged)(__x_ABI_C__FIObservableVector_1___x_ABI_CWindows__CUI__CXaml__CDependencyObject* This,
        EventRegistrationToken token);

        END_INTERFACE
    } __x_ABI_C__FIObservableVector_1___x_ABI_CWindows__CUI__CXaml__CDependencyObjectVtbl;

    interface __x_ABI_C__FIObservableVector_1___x_ABI_CWindows__CUI__CXaml__CDependencyObject
    {
        CONST_VTBL struct __x_ABI_C__FIObservableVector_1___x_ABI_CWindows__CUI__CXaml__CDependencyObjectVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIObservableVector_1___x_ABI_CWindows__CUI__CXaml__CDependencyObject_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CInput__CKeyboardAccelerator_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CInput__CKeyboardAccelerator_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CInput__CKeyboardAccelerator __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CInput__CKeyboardAccelerator;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CInput__CKeyboardAccelerator;

    typedef struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CInput__CKeyboardAcceleratorVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CInput__CKeyboardAccelerator* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CInput__CKeyboardAccelerator* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CInput__CKeyboardAccelerator* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CInput__CKeyboardAccelerator* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CInput__CKeyboardAccelerator* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CInput__CKeyboardAccelerator* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CInput__CKeyboardAccelerator* This,
        UINT32 index,
        __x_ABI_CWindows_CUI_CXaml_CInput_CIKeyboardAccelerator** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CInput__CKeyboardAccelerator* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CInput__CKeyboardAccelerator* This,
        __x_ABI_CWindows_CUI_CXaml_CInput_CIKeyboardAccelerator* value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CInput__CKeyboardAccelerator* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        __x_ABI_CWindows_CUI_CXaml_CInput_CIKeyboardAccelerator** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CInput__CKeyboardAcceleratorVtbl;

    interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CInput__CKeyboardAccelerator
    {
        CONST_VTBL struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CInput__CKeyboardAcceleratorVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CInput__CKeyboardAccelerator_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CInput__CPointer_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CInput__CPointer_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CInput__CPointer __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CInput__CPointer;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CInput__CPointer;

    typedef struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CInput__CPointerVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CInput__CPointer* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CInput__CPointer* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CInput__CPointer* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CInput__CPointer* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CInput__CPointer* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CInput__CPointer* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CInput__CPointer* This,
        UINT32 index,
        __x_ABI_CWindows_CUI_CXaml_CInput_CIPointer** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CInput__CPointer* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CInput__CPointer* This,
        __x_ABI_CWindows_CUI_CXaml_CInput_CIPointer* value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CInput__CPointer* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        __x_ABI_CWindows_CUI_CXaml_CInput_CIPointer** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CInput__CPointerVtbl;

    interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CInput__CPointer
    {
        CONST_VTBL struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CInput__CPointerVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CInput__CPointer_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CMedia__CXamlLight_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CMedia__CXamlLight_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CMedia__CXamlLight __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CMedia__CXamlLight;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CMedia__CXamlLight;

    typedef struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CMedia__CXamlLightVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CMedia__CXamlLight* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CMedia__CXamlLight* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CMedia__CXamlLight* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CMedia__CXamlLight* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CMedia__CXamlLight* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CMedia__CXamlLight* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CMedia__CXamlLight* This,
        UINT32 index,
        __x_ABI_CWindows_CUI_CXaml_CMedia_CIXamlLight** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CMedia__CXamlLight* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CMedia__CXamlLight* This,
        __x_ABI_CWindows_CUI_CXaml_CMedia_CIXamlLight* value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CMedia__CXamlLight* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        __x_ABI_CWindows_CUI_CXaml_CMedia_CIXamlLight** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CMedia__CXamlLightVtbl;

    interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CMedia__CXamlLight
    {
        CONST_VTBL struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CMedia__CXamlLightVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CMedia__CXamlLight_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CResourceDictionary_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CResourceDictionary_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CResourceDictionary __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CResourceDictionary;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CResourceDictionary;

    typedef struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CResourceDictionaryVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CResourceDictionary* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CResourceDictionary* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CResourceDictionary* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CResourceDictionary* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CResourceDictionary* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CResourceDictionary* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CResourceDictionary* This,
        UINT32 index,
        __x_ABI_CWindows_CUI_CXaml_CIResourceDictionary** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CResourceDictionary* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CResourceDictionary* This,
        __x_ABI_CWindows_CUI_CXaml_CIResourceDictionary* value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CResourceDictionary* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        __x_ABI_CWindows_CUI_CXaml_CIResourceDictionary** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CResourceDictionaryVtbl;

    interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CResourceDictionary
    {
        CONST_VTBL struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CResourceDictionaryVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CResourceDictionary_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CSetterBase_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CSetterBase_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CSetterBase __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CSetterBase;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CSetterBase;

    typedef struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CSetterBaseVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CSetterBase* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CSetterBase* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CSetterBase* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CSetterBase* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CSetterBase* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CSetterBase* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CSetterBase* This,
        UINT32 index,
        __x_ABI_CWindows_CUI_CXaml_CISetterBase** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CSetterBase* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CSetterBase* This,
        __x_ABI_CWindows_CUI_CXaml_CISetterBase* value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CSetterBase* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        __x_ABI_CWindows_CUI_CXaml_CISetterBase** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CSetterBaseVtbl;

    interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CSetterBase
    {
        CONST_VTBL struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CSetterBaseVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CSetterBase_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CStateTriggerBase_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CStateTriggerBase_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CStateTriggerBase __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CStateTriggerBase;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CStateTriggerBase;

    typedef struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CStateTriggerBaseVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CStateTriggerBase* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CStateTriggerBase* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CStateTriggerBase* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CStateTriggerBase* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CStateTriggerBase* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CStateTriggerBase* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CStateTriggerBase* This,
        UINT32 index,
        __x_ABI_CWindows_CUI_CXaml_CIStateTriggerBase** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CStateTriggerBase* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CStateTriggerBase* This,
        __x_ABI_CWindows_CUI_CXaml_CIStateTriggerBase* value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CStateTriggerBase* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        __x_ABI_CWindows_CUI_CXaml_CIStateTriggerBase** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CStateTriggerBaseVtbl;

    interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CStateTriggerBase
    {
        CONST_VTBL struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CStateTriggerBaseVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CStateTriggerBase_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CTriggerAction_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CTriggerAction_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CTriggerAction __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CTriggerAction;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CTriggerAction;

    typedef struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CTriggerActionVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CTriggerAction* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CTriggerAction* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CTriggerAction* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CTriggerAction* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CTriggerAction* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CTriggerAction* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CTriggerAction* This,
        UINT32 index,
        __x_ABI_CWindows_CUI_CXaml_CITriggerAction** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CTriggerAction* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CTriggerAction* This,
        __x_ABI_CWindows_CUI_CXaml_CITriggerAction* value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CTriggerAction* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        __x_ABI_CWindows_CUI_CXaml_CITriggerAction** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CTriggerActionVtbl;

    interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CTriggerAction
    {
        CONST_VTBL struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CTriggerActionVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CTriggerAction_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CTriggerBase_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CTriggerBase_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CTriggerBase __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CTriggerBase;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CTriggerBase;

    typedef struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CTriggerBaseVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CTriggerBase* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CTriggerBase* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CTriggerBase* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CTriggerBase* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CTriggerBase* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CTriggerBase* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CTriggerBase* This,
        UINT32 index,
        __x_ABI_CWindows_CUI_CXaml_CITriggerBase** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CTriggerBase* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CTriggerBase* This,
        __x_ABI_CWindows_CUI_CXaml_CITriggerBase* value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CTriggerBase* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        __x_ABI_CWindows_CUI_CXaml_CITriggerBase** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CTriggerBaseVtbl;

    interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CTriggerBase
    {
        CONST_VTBL struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CTriggerBaseVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CTriggerBase_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CUIElement_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CUIElement_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CUIElement __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CUIElement;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CUIElement;

    typedef struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CUIElementVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CUIElement* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CUIElement* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CUIElement* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CUIElement* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CUIElement* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CUIElement* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CUIElement* This,
        UINT32 index,
        __x_ABI_CWindows_CUI_CXaml_CIUIElement** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CUIElement* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CUIElement* This,
        __x_ABI_CWindows_CUI_CXaml_CIUIElement* value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CUIElement* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        __x_ABI_CWindows_CUI_CXaml_CIUIElement** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CUIElementVtbl;

    interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CUIElement
    {
        CONST_VTBL struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CUIElementVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CUIElement_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CVisualState_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CVisualState_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CVisualState __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CVisualState;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CVisualState;

    typedef struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CVisualStateVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CVisualState* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CVisualState* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CVisualState* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CVisualState* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CVisualState* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CVisualState* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CVisualState* This,
        UINT32 index,
        __x_ABI_CWindows_CUI_CXaml_CIVisualState** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CVisualState* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CVisualState* This,
        __x_ABI_CWindows_CUI_CXaml_CIVisualState* value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CVisualState* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        __x_ABI_CWindows_CUI_CXaml_CIVisualState** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CVisualStateVtbl;

    interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CVisualState
    {
        CONST_VTBL struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CVisualStateVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CVisualState_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CVisualStateGroup_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CVisualStateGroup_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CVisualStateGroup __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CVisualStateGroup;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CVisualStateGroup;

    typedef struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CVisualStateGroupVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CVisualStateGroup* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CVisualStateGroup* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CVisualStateGroup* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CVisualStateGroup* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CVisualStateGroup* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CVisualStateGroup* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CVisualStateGroup* This,
        UINT32 index,
        __x_ABI_CWindows_CUI_CXaml_CIVisualStateGroup** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CVisualStateGroup* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CVisualStateGroup* This,
        __x_ABI_CWindows_CUI_CXaml_CIVisualStateGroup* value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CVisualStateGroup* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        __x_ABI_CWindows_CUI_CXaml_CIVisualStateGroup** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CVisualStateGroupVtbl;

    interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CVisualStateGroup
    {
        CONST_VTBL struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CVisualStateGroupVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CVisualStateGroup_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CVisualTransition_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CVisualTransition_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CVisualTransition __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CVisualTransition;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CVisualTransition;

    typedef struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CVisualTransitionVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CVisualTransition* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CVisualTransition* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CVisualTransition* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CVisualTransition* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CVisualTransition* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CVisualTransition* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CVisualTransition* This,
        UINT32 index,
        __x_ABI_CWindows_CUI_CXaml_CIVisualTransition** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CVisualTransition* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CVisualTransition* This,
        __x_ABI_CWindows_CUI_CXaml_CIVisualTransition* value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CVisualTransition* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        __x_ABI_CWindows_CUI_CXaml_CIVisualTransition** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CVisualTransitionVtbl;

    interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CVisualTransition
    {
        CONST_VTBL struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CVisualTransitionVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CVisualTransition_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CInput__CKeyboardAccelerator_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CInput__CKeyboardAccelerator_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CInput__CKeyboardAccelerator __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CInput__CKeyboardAccelerator;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CInput__CKeyboardAccelerator;

    typedef struct __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CInput__CKeyboardAcceleratorVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CInput__CKeyboardAccelerator* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CInput__CKeyboardAccelerator* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CInput__CKeyboardAccelerator* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CInput__CKeyboardAccelerator* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CInput__CKeyboardAccelerator* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CInput__CKeyboardAccelerator* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CInput__CKeyboardAccelerator* This,
        UINT32 index,
        __x_ABI_CWindows_CUI_CXaml_CInput_CIKeyboardAccelerator** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CInput__CKeyboardAccelerator* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* GetView)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CInput__CKeyboardAccelerator* This,
        __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CInput__CKeyboardAccelerator** result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CInput__CKeyboardAccelerator* This,
        __x_ABI_CWindows_CUI_CXaml_CInput_CIKeyboardAccelerator* value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* SetAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CInput__CKeyboardAccelerator* This,
        UINT32 index,
        __x_ABI_CWindows_CUI_CXaml_CInput_CIKeyboardAccelerator* value);
    HRESULT (STDMETHODCALLTYPE* InsertAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CInput__CKeyboardAccelerator* This,
        UINT32 index,
        __x_ABI_CWindows_CUI_CXaml_CInput_CIKeyboardAccelerator* value);
    HRESULT (STDMETHODCALLTYPE* RemoveAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CInput__CKeyboardAccelerator* This,
        UINT32 index);
    HRESULT (STDMETHODCALLTYPE* Append)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CInput__CKeyboardAccelerator* This,
        __x_ABI_CWindows_CUI_CXaml_CInput_CIKeyboardAccelerator* value);
    HRESULT (STDMETHODCALLTYPE* RemoveAtEnd)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CInput__CKeyboardAccelerator* This);
    HRESULT (STDMETHODCALLTYPE* Clear)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CInput__CKeyboardAccelerator* This);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CInput__CKeyboardAccelerator* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        __x_ABI_CWindows_CUI_CXaml_CInput_CIKeyboardAccelerator** items,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* ReplaceAll)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CInput__CKeyboardAccelerator* This,
        UINT32 itemsLength,
        __x_ABI_CWindows_CUI_CXaml_CInput_CIKeyboardAccelerator** items);

        END_INTERFACE
    } __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CInput__CKeyboardAcceleratorVtbl;

    interface __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CInput__CKeyboardAccelerator
    {
        CONST_VTBL struct __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CInput__CKeyboardAcceleratorVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CInput__CKeyboardAccelerator_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CMedia__CXamlLight_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CMedia__CXamlLight_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CMedia__CXamlLight __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CMedia__CXamlLight;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CMedia__CXamlLight;

    typedef struct __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CMedia__CXamlLightVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CMedia__CXamlLight* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CMedia__CXamlLight* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CMedia__CXamlLight* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CMedia__CXamlLight* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CMedia__CXamlLight* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CMedia__CXamlLight* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CMedia__CXamlLight* This,
        UINT32 index,
        __x_ABI_CWindows_CUI_CXaml_CMedia_CIXamlLight** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CMedia__CXamlLight* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* GetView)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CMedia__CXamlLight* This,
        __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CMedia__CXamlLight** result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CMedia__CXamlLight* This,
        __x_ABI_CWindows_CUI_CXaml_CMedia_CIXamlLight* value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* SetAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CMedia__CXamlLight* This,
        UINT32 index,
        __x_ABI_CWindows_CUI_CXaml_CMedia_CIXamlLight* value);
    HRESULT (STDMETHODCALLTYPE* InsertAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CMedia__CXamlLight* This,
        UINT32 index,
        __x_ABI_CWindows_CUI_CXaml_CMedia_CIXamlLight* value);
    HRESULT (STDMETHODCALLTYPE* RemoveAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CMedia__CXamlLight* This,
        UINT32 index);
    HRESULT (STDMETHODCALLTYPE* Append)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CMedia__CXamlLight* This,
        __x_ABI_CWindows_CUI_CXaml_CMedia_CIXamlLight* value);
    HRESULT (STDMETHODCALLTYPE* RemoveAtEnd)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CMedia__CXamlLight* This);
    HRESULT (STDMETHODCALLTYPE* Clear)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CMedia__CXamlLight* This);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CMedia__CXamlLight* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        __x_ABI_CWindows_CUI_CXaml_CMedia_CIXamlLight** items,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* ReplaceAll)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CMedia__CXamlLight* This,
        UINT32 itemsLength,
        __x_ABI_CWindows_CUI_CXaml_CMedia_CIXamlLight** items);

        END_INTERFACE
    } __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CMedia__CXamlLightVtbl;

    interface __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CMedia__CXamlLight
    {
        CONST_VTBL struct __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CMedia__CXamlLightVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CMedia__CXamlLight_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CResourceDictionary_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CResourceDictionary_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CResourceDictionary __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CResourceDictionary;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CResourceDictionary;

    typedef struct __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CResourceDictionaryVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CResourceDictionary* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CResourceDictionary* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CResourceDictionary* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CResourceDictionary* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CResourceDictionary* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CResourceDictionary* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CResourceDictionary* This,
        UINT32 index,
        __x_ABI_CWindows_CUI_CXaml_CIResourceDictionary** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CResourceDictionary* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* GetView)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CResourceDictionary* This,
        __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CResourceDictionary** result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CResourceDictionary* This,
        __x_ABI_CWindows_CUI_CXaml_CIResourceDictionary* value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* SetAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CResourceDictionary* This,
        UINT32 index,
        __x_ABI_CWindows_CUI_CXaml_CIResourceDictionary* value);
    HRESULT (STDMETHODCALLTYPE* InsertAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CResourceDictionary* This,
        UINT32 index,
        __x_ABI_CWindows_CUI_CXaml_CIResourceDictionary* value);
    HRESULT (STDMETHODCALLTYPE* RemoveAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CResourceDictionary* This,
        UINT32 index);
    HRESULT (STDMETHODCALLTYPE* Append)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CResourceDictionary* This,
        __x_ABI_CWindows_CUI_CXaml_CIResourceDictionary* value);
    HRESULT (STDMETHODCALLTYPE* RemoveAtEnd)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CResourceDictionary* This);
    HRESULT (STDMETHODCALLTYPE* Clear)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CResourceDictionary* This);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CResourceDictionary* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        __x_ABI_CWindows_CUI_CXaml_CIResourceDictionary** items,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* ReplaceAll)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CResourceDictionary* This,
        UINT32 itemsLength,
        __x_ABI_CWindows_CUI_CXaml_CIResourceDictionary** items);

        END_INTERFACE
    } __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CResourceDictionaryVtbl;

    interface __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CResourceDictionary
    {
        CONST_VTBL struct __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CResourceDictionaryVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CResourceDictionary_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CSetterBase_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CSetterBase_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CSetterBase __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CSetterBase;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CSetterBase;

    typedef struct __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CSetterBaseVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CSetterBase* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CSetterBase* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CSetterBase* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CSetterBase* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CSetterBase* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CSetterBase* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CSetterBase* This,
        UINT32 index,
        __x_ABI_CWindows_CUI_CXaml_CISetterBase** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CSetterBase* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* GetView)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CSetterBase* This,
        __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CSetterBase** result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CSetterBase* This,
        __x_ABI_CWindows_CUI_CXaml_CISetterBase* value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* SetAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CSetterBase* This,
        UINT32 index,
        __x_ABI_CWindows_CUI_CXaml_CISetterBase* value);
    HRESULT (STDMETHODCALLTYPE* InsertAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CSetterBase* This,
        UINT32 index,
        __x_ABI_CWindows_CUI_CXaml_CISetterBase* value);
    HRESULT (STDMETHODCALLTYPE* RemoveAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CSetterBase* This,
        UINT32 index);
    HRESULT (STDMETHODCALLTYPE* Append)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CSetterBase* This,
        __x_ABI_CWindows_CUI_CXaml_CISetterBase* value);
    HRESULT (STDMETHODCALLTYPE* RemoveAtEnd)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CSetterBase* This);
    HRESULT (STDMETHODCALLTYPE* Clear)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CSetterBase* This);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CSetterBase* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        __x_ABI_CWindows_CUI_CXaml_CISetterBase** items,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* ReplaceAll)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CSetterBase* This,
        UINT32 itemsLength,
        __x_ABI_CWindows_CUI_CXaml_CISetterBase** items);

        END_INTERFACE
    } __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CSetterBaseVtbl;

    interface __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CSetterBase
    {
        CONST_VTBL struct __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CSetterBaseVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CSetterBase_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CStateTriggerBase_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CStateTriggerBase_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CStateTriggerBase __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CStateTriggerBase;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CStateTriggerBase;

    typedef struct __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CStateTriggerBaseVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CStateTriggerBase* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CStateTriggerBase* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CStateTriggerBase* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CStateTriggerBase* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CStateTriggerBase* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CStateTriggerBase* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CStateTriggerBase* This,
        UINT32 index,
        __x_ABI_CWindows_CUI_CXaml_CIStateTriggerBase** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CStateTriggerBase* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* GetView)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CStateTriggerBase* This,
        __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CStateTriggerBase** result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CStateTriggerBase* This,
        __x_ABI_CWindows_CUI_CXaml_CIStateTriggerBase* value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* SetAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CStateTriggerBase* This,
        UINT32 index,
        __x_ABI_CWindows_CUI_CXaml_CIStateTriggerBase* value);
    HRESULT (STDMETHODCALLTYPE* InsertAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CStateTriggerBase* This,
        UINT32 index,
        __x_ABI_CWindows_CUI_CXaml_CIStateTriggerBase* value);
    HRESULT (STDMETHODCALLTYPE* RemoveAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CStateTriggerBase* This,
        UINT32 index);
    HRESULT (STDMETHODCALLTYPE* Append)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CStateTriggerBase* This,
        __x_ABI_CWindows_CUI_CXaml_CIStateTriggerBase* value);
    HRESULT (STDMETHODCALLTYPE* RemoveAtEnd)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CStateTriggerBase* This);
    HRESULT (STDMETHODCALLTYPE* Clear)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CStateTriggerBase* This);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CStateTriggerBase* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        __x_ABI_CWindows_CUI_CXaml_CIStateTriggerBase** items,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* ReplaceAll)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CStateTriggerBase* This,
        UINT32 itemsLength,
        __x_ABI_CWindows_CUI_CXaml_CIStateTriggerBase** items);

        END_INTERFACE
    } __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CStateTriggerBaseVtbl;

    interface __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CStateTriggerBase
    {
        CONST_VTBL struct __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CStateTriggerBaseVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CStateTriggerBase_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CTriggerAction_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CTriggerAction_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CTriggerAction __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CTriggerAction;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CTriggerAction;

    typedef struct __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CTriggerActionVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CTriggerAction* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CTriggerAction* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CTriggerAction* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CTriggerAction* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CTriggerAction* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CTriggerAction* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CTriggerAction* This,
        UINT32 index,
        __x_ABI_CWindows_CUI_CXaml_CITriggerAction** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CTriggerAction* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* GetView)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CTriggerAction* This,
        __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CTriggerAction** result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CTriggerAction* This,
        __x_ABI_CWindows_CUI_CXaml_CITriggerAction* value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* SetAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CTriggerAction* This,
        UINT32 index,
        __x_ABI_CWindows_CUI_CXaml_CITriggerAction* value);
    HRESULT (STDMETHODCALLTYPE* InsertAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CTriggerAction* This,
        UINT32 index,
        __x_ABI_CWindows_CUI_CXaml_CITriggerAction* value);
    HRESULT (STDMETHODCALLTYPE* RemoveAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CTriggerAction* This,
        UINT32 index);
    HRESULT (STDMETHODCALLTYPE* Append)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CTriggerAction* This,
        __x_ABI_CWindows_CUI_CXaml_CITriggerAction* value);
    HRESULT (STDMETHODCALLTYPE* RemoveAtEnd)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CTriggerAction* This);
    HRESULT (STDMETHODCALLTYPE* Clear)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CTriggerAction* This);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CTriggerAction* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        __x_ABI_CWindows_CUI_CXaml_CITriggerAction** items,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* ReplaceAll)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CTriggerAction* This,
        UINT32 itemsLength,
        __x_ABI_CWindows_CUI_CXaml_CITriggerAction** items);

        END_INTERFACE
    } __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CTriggerActionVtbl;

    interface __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CTriggerAction
    {
        CONST_VTBL struct __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CTriggerActionVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CTriggerAction_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CTriggerBase_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CTriggerBase_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CTriggerBase __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CTriggerBase;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CTriggerBase;

    typedef struct __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CTriggerBaseVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CTriggerBase* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CTriggerBase* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CTriggerBase* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CTriggerBase* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CTriggerBase* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CTriggerBase* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CTriggerBase* This,
        UINT32 index,
        __x_ABI_CWindows_CUI_CXaml_CITriggerBase** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CTriggerBase* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* GetView)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CTriggerBase* This,
        __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CTriggerBase** result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CTriggerBase* This,
        __x_ABI_CWindows_CUI_CXaml_CITriggerBase* value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* SetAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CTriggerBase* This,
        UINT32 index,
        __x_ABI_CWindows_CUI_CXaml_CITriggerBase* value);
    HRESULT (STDMETHODCALLTYPE* InsertAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CTriggerBase* This,
        UINT32 index,
        __x_ABI_CWindows_CUI_CXaml_CITriggerBase* value);
    HRESULT (STDMETHODCALLTYPE* RemoveAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CTriggerBase* This,
        UINT32 index);
    HRESULT (STDMETHODCALLTYPE* Append)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CTriggerBase* This,
        __x_ABI_CWindows_CUI_CXaml_CITriggerBase* value);
    HRESULT (STDMETHODCALLTYPE* RemoveAtEnd)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CTriggerBase* This);
    HRESULT (STDMETHODCALLTYPE* Clear)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CTriggerBase* This);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CTriggerBase* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        __x_ABI_CWindows_CUI_CXaml_CITriggerBase** items,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* ReplaceAll)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CTriggerBase* This,
        UINT32 itemsLength,
        __x_ABI_CWindows_CUI_CXaml_CITriggerBase** items);

        END_INTERFACE
    } __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CTriggerBaseVtbl;

    interface __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CTriggerBase
    {
        CONST_VTBL struct __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CTriggerBaseVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CTriggerBase_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CUIElement_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CUIElement_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CUIElement __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CUIElement;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CUIElement;

    typedef struct __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CUIElementVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CUIElement* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CUIElement* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CUIElement* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CUIElement* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CUIElement* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CUIElement* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CUIElement* This,
        UINT32 index,
        __x_ABI_CWindows_CUI_CXaml_CIUIElement** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CUIElement* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* GetView)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CUIElement* This,
        __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CUIElement** result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CUIElement* This,
        __x_ABI_CWindows_CUI_CXaml_CIUIElement* value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* SetAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CUIElement* This,
        UINT32 index,
        __x_ABI_CWindows_CUI_CXaml_CIUIElement* value);
    HRESULT (STDMETHODCALLTYPE* InsertAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CUIElement* This,
        UINT32 index,
        __x_ABI_CWindows_CUI_CXaml_CIUIElement* value);
    HRESULT (STDMETHODCALLTYPE* RemoveAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CUIElement* This,
        UINT32 index);
    HRESULT (STDMETHODCALLTYPE* Append)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CUIElement* This,
        __x_ABI_CWindows_CUI_CXaml_CIUIElement* value);
    HRESULT (STDMETHODCALLTYPE* RemoveAtEnd)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CUIElement* This);
    HRESULT (STDMETHODCALLTYPE* Clear)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CUIElement* This);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CUIElement* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        __x_ABI_CWindows_CUI_CXaml_CIUIElement** items,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* ReplaceAll)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CUIElement* This,
        UINT32 itemsLength,
        __x_ABI_CWindows_CUI_CXaml_CIUIElement** items);

        END_INTERFACE
    } __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CUIElementVtbl;

    interface __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CUIElement
    {
        CONST_VTBL struct __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CUIElementVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CUIElement_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CVisualState_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CVisualState_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CVisualState __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CVisualState;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CVisualState;

    typedef struct __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CVisualStateVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CVisualState* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CVisualState* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CVisualState* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CVisualState* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CVisualState* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CVisualState* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CVisualState* This,
        UINT32 index,
        __x_ABI_CWindows_CUI_CXaml_CIVisualState** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CVisualState* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* GetView)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CVisualState* This,
        __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CVisualState** result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CVisualState* This,
        __x_ABI_CWindows_CUI_CXaml_CIVisualState* value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* SetAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CVisualState* This,
        UINT32 index,
        __x_ABI_CWindows_CUI_CXaml_CIVisualState* value);
    HRESULT (STDMETHODCALLTYPE* InsertAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CVisualState* This,
        UINT32 index,
        __x_ABI_CWindows_CUI_CXaml_CIVisualState* value);
    HRESULT (STDMETHODCALLTYPE* RemoveAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CVisualState* This,
        UINT32 index);
    HRESULT (STDMETHODCALLTYPE* Append)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CVisualState* This,
        __x_ABI_CWindows_CUI_CXaml_CIVisualState* value);
    HRESULT (STDMETHODCALLTYPE* RemoveAtEnd)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CVisualState* This);
    HRESULT (STDMETHODCALLTYPE* Clear)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CVisualState* This);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CVisualState* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        __x_ABI_CWindows_CUI_CXaml_CIVisualState** items,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* ReplaceAll)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CVisualState* This,
        UINT32 itemsLength,
        __x_ABI_CWindows_CUI_CXaml_CIVisualState** items);

        END_INTERFACE
    } __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CVisualStateVtbl;

    interface __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CVisualState
    {
        CONST_VTBL struct __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CVisualStateVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CVisualState_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CVisualStateGroup_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CVisualStateGroup_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CVisualStateGroup __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CVisualStateGroup;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CVisualStateGroup;

    typedef struct __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CVisualStateGroupVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CVisualStateGroup* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CVisualStateGroup* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CVisualStateGroup* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CVisualStateGroup* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CVisualStateGroup* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CVisualStateGroup* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CVisualStateGroup* This,
        UINT32 index,
        __x_ABI_CWindows_CUI_CXaml_CIVisualStateGroup** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CVisualStateGroup* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* GetView)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CVisualStateGroup* This,
        __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CVisualStateGroup** result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CVisualStateGroup* This,
        __x_ABI_CWindows_CUI_CXaml_CIVisualStateGroup* value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* SetAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CVisualStateGroup* This,
        UINT32 index,
        __x_ABI_CWindows_CUI_CXaml_CIVisualStateGroup* value);
    HRESULT (STDMETHODCALLTYPE* InsertAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CVisualStateGroup* This,
        UINT32 index,
        __x_ABI_CWindows_CUI_CXaml_CIVisualStateGroup* value);
    HRESULT (STDMETHODCALLTYPE* RemoveAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CVisualStateGroup* This,
        UINT32 index);
    HRESULT (STDMETHODCALLTYPE* Append)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CVisualStateGroup* This,
        __x_ABI_CWindows_CUI_CXaml_CIVisualStateGroup* value);
    HRESULT (STDMETHODCALLTYPE* RemoveAtEnd)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CVisualStateGroup* This);
    HRESULT (STDMETHODCALLTYPE* Clear)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CVisualStateGroup* This);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CVisualStateGroup* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        __x_ABI_CWindows_CUI_CXaml_CIVisualStateGroup** items,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* ReplaceAll)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CVisualStateGroup* This,
        UINT32 itemsLength,
        __x_ABI_CWindows_CUI_CXaml_CIVisualStateGroup** items);

        END_INTERFACE
    } __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CVisualStateGroupVtbl;

    interface __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CVisualStateGroup
    {
        CONST_VTBL struct __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CVisualStateGroupVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CVisualStateGroup_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CVisualTransition_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CVisualTransition_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CVisualTransition __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CVisualTransition;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CVisualTransition;

    typedef struct __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CVisualTransitionVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CVisualTransition* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CVisualTransition* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CVisualTransition* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CVisualTransition* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CVisualTransition* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CVisualTransition* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CVisualTransition* This,
        UINT32 index,
        __x_ABI_CWindows_CUI_CXaml_CIVisualTransition** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CVisualTransition* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* GetView)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CVisualTransition* This,
        __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CVisualTransition** result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CVisualTransition* This,
        __x_ABI_CWindows_CUI_CXaml_CIVisualTransition* value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* SetAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CVisualTransition* This,
        UINT32 index,
        __x_ABI_CWindows_CUI_CXaml_CIVisualTransition* value);
    HRESULT (STDMETHODCALLTYPE* InsertAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CVisualTransition* This,
        UINT32 index,
        __x_ABI_CWindows_CUI_CXaml_CIVisualTransition* value);
    HRESULT (STDMETHODCALLTYPE* RemoveAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CVisualTransition* This,
        UINT32 index);
    HRESULT (STDMETHODCALLTYPE* Append)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CVisualTransition* This,
        __x_ABI_CWindows_CUI_CXaml_CIVisualTransition* value);
    HRESULT (STDMETHODCALLTYPE* RemoveAtEnd)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CVisualTransition* This);
    HRESULT (STDMETHODCALLTYPE* Clear)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CVisualTransition* This);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CVisualTransition* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        __x_ABI_CWindows_CUI_CXaml_CIVisualTransition** items,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* ReplaceAll)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CVisualTransition* This,
        UINT32 itemsLength,
        __x_ABI_CWindows_CUI_CXaml_CIVisualTransition** items);

        END_INTERFACE
    } __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CVisualTransitionVtbl;

    interface __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CVisualTransition
    {
        CONST_VTBL struct __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CVisualTransitionVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CVisualTransition_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIEventHandler_1_IInspectable_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIEventHandler_1_IInspectable_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIEventHandler_1_IInspectable __x_ABI_C__FIEventHandler_1_IInspectable;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIEventHandler_1_IInspectable;

    typedef struct __x_ABI_C__FIEventHandler_1_IInspectableVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIEventHandler_1_IInspectable* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIEventHandler_1_IInspectable* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIEventHandler_1_IInspectable* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FIEventHandler_1_IInspectable* This,
        IInspectable* sender,
        IInspectable* args);

        END_INTERFACE
    } __x_ABI_C__FIEventHandler_1_IInspectableVtbl;

    interface __x_ABI_C__FIEventHandler_1_IInspectable
    {
        CONST_VTBL struct __x_ABI_C__FIEventHandler_1_IInspectableVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIEventHandler_1_IInspectable_INTERFACE_DEFINED__
    
typedef struct __x_ABI_CWindows_CFoundation_CRect __x_ABI_CWindows_CFoundation_CRect;

#if !defined(____x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CRect_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CRect_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CRect __x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CRect;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CRect;

    typedef struct __x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CRectVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CRect* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CRect* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CRect* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CRect* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CRect* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CRect* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Value)(__x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CRect* This,
        struct __x_ABI_CWindows_CFoundation_CRect* result);

        END_INTERFACE
    } __x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CRectVtbl;

    interface __x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CRect
    {
        CONST_VTBL struct __x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CRectVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CRect_INTERFACE_DEFINED__
    
typedef struct __x_ABI_CWindows_CUI_CColor __x_ABI_CWindows_CUI_CColor;

#if !defined(____x_ABI_C__FIReference_1___x_ABI_CWindows__CUI__CColor_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIReference_1___x_ABI_CWindows__CUI__CColor_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIReference_1___x_ABI_CWindows__CUI__CColor __x_ABI_C__FIReference_1___x_ABI_CWindows__CUI__CColor;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIReference_1___x_ABI_CWindows__CUI__CColor;

    typedef struct __x_ABI_C__FIReference_1___x_ABI_CWindows__CUI__CColorVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIReference_1___x_ABI_CWindows__CUI__CColor* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIReference_1___x_ABI_CWindows__CUI__CColor* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIReference_1___x_ABI_CWindows__CUI__CColor* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIReference_1___x_ABI_CWindows__CUI__CColor* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIReference_1___x_ABI_CWindows__CUI__CColor* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIReference_1___x_ABI_CWindows__CUI__CColor* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Value)(__x_ABI_C__FIReference_1___x_ABI_CWindows__CUI__CColor* This,
        struct __x_ABI_CWindows_CUI_CColor* result);

        END_INTERFACE
    } __x_ABI_C__FIReference_1___x_ABI_CWindows__CUI__CColorVtbl;

    interface __x_ABI_C__FIReference_1___x_ABI_CWindows__CUI__CColor
    {
        CONST_VTBL struct __x_ABI_C__FIReference_1___x_ABI_CWindows__CUI__CColorVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIReference_1___x_ABI_CWindows__CUI__CColor_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CFrameworkElement_IInspectable_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CFrameworkElement_IInspectable_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CFrameworkElement_IInspectable __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CFrameworkElement_IInspectable;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CFrameworkElement_IInspectable;

    typedef struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CFrameworkElement_IInspectableVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CFrameworkElement_IInspectable* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CFrameworkElement_IInspectable* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CFrameworkElement_IInspectable* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CFrameworkElement_IInspectable* This,
        __x_ABI_CWindows_CUI_CXaml_CIFrameworkElement* sender,
        IInspectable* args);

        END_INTERFACE
    } __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CFrameworkElement_IInspectableVtbl;

    interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CFrameworkElement_IInspectable
    {
        CONST_VTBL struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CFrameworkElement_IInspectableVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CFrameworkElement_IInspectable_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CFrameworkElement___x_ABI_CWindows__CUI__CXaml__CDataContextChangedEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CFrameworkElement___x_ABI_CWindows__CUI__CXaml__CDataContextChangedEventArgs_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CFrameworkElement___x_ABI_CWindows__CUI__CXaml__CDataContextChangedEventArgs __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CFrameworkElement___x_ABI_CWindows__CUI__CXaml__CDataContextChangedEventArgs;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CFrameworkElement___x_ABI_CWindows__CUI__CXaml__CDataContextChangedEventArgs;

    typedef struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CFrameworkElement___x_ABI_CWindows__CUI__CXaml__CDataContextChangedEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CFrameworkElement___x_ABI_CWindows__CUI__CXaml__CDataContextChangedEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CFrameworkElement___x_ABI_CWindows__CUI__CXaml__CDataContextChangedEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CFrameworkElement___x_ABI_CWindows__CUI__CXaml__CDataContextChangedEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CFrameworkElement___x_ABI_CWindows__CUI__CXaml__CDataContextChangedEventArgs* This,
        __x_ABI_CWindows_CUI_CXaml_CIFrameworkElement* sender,
        __x_ABI_CWindows_CUI_CXaml_CIDataContextChangedEventArgs* args);

        END_INTERFACE
    } __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CFrameworkElement___x_ABI_CWindows__CUI__CXaml__CDataContextChangedEventArgsVtbl;

    interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CFrameworkElement___x_ABI_CWindows__CUI__CXaml__CDataContextChangedEventArgs
    {
        CONST_VTBL struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CFrameworkElement___x_ABI_CWindows__CUI__CXaml__CDataContextChangedEventArgsVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CFrameworkElement___x_ABI_CWindows__CUI__CXaml__CDataContextChangedEventArgs_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CFrameworkElement___x_ABI_CWindows__CUI__CXaml__CEffectiveViewportChangedEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CFrameworkElement___x_ABI_CWindows__CUI__CXaml__CEffectiveViewportChangedEventArgs_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CFrameworkElement___x_ABI_CWindows__CUI__CXaml__CEffectiveViewportChangedEventArgs __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CFrameworkElement___x_ABI_CWindows__CUI__CXaml__CEffectiveViewportChangedEventArgs;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CFrameworkElement___x_ABI_CWindows__CUI__CXaml__CEffectiveViewportChangedEventArgs;

    typedef struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CFrameworkElement___x_ABI_CWindows__CUI__CXaml__CEffectiveViewportChangedEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CFrameworkElement___x_ABI_CWindows__CUI__CXaml__CEffectiveViewportChangedEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CFrameworkElement___x_ABI_CWindows__CUI__CXaml__CEffectiveViewportChangedEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CFrameworkElement___x_ABI_CWindows__CUI__CXaml__CEffectiveViewportChangedEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CFrameworkElement___x_ABI_CWindows__CUI__CXaml__CEffectiveViewportChangedEventArgs* This,
        __x_ABI_CWindows_CUI_CXaml_CIFrameworkElement* sender,
        __x_ABI_CWindows_CUI_CXaml_CIEffectiveViewportChangedEventArgs* args);

        END_INTERFACE
    } __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CFrameworkElement___x_ABI_CWindows__CUI__CXaml__CEffectiveViewportChangedEventArgsVtbl;

    interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CFrameworkElement___x_ABI_CWindows__CUI__CXaml__CEffectiveViewportChangedEventArgs
    {
        CONST_VTBL struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CFrameworkElement___x_ABI_CWindows__CUI__CXaml__CEffectiveViewportChangedEventArgsVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CFrameworkElement___x_ABI_CWindows__CUI__CXaml__CEffectiveViewportChangedEventArgs_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CUIElement___x_ABI_CWindows__CUI__CXaml__CBringIntoViewRequestedEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CUIElement___x_ABI_CWindows__CUI__CXaml__CBringIntoViewRequestedEventArgs_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CUIElement___x_ABI_CWindows__CUI__CXaml__CBringIntoViewRequestedEventArgs __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CUIElement___x_ABI_CWindows__CUI__CXaml__CBringIntoViewRequestedEventArgs;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CUIElement___x_ABI_CWindows__CUI__CXaml__CBringIntoViewRequestedEventArgs;

    typedef struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CUIElement___x_ABI_CWindows__CUI__CXaml__CBringIntoViewRequestedEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CUIElement___x_ABI_CWindows__CUI__CXaml__CBringIntoViewRequestedEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CUIElement___x_ABI_CWindows__CUI__CXaml__CBringIntoViewRequestedEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CUIElement___x_ABI_CWindows__CUI__CXaml__CBringIntoViewRequestedEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CUIElement___x_ABI_CWindows__CUI__CXaml__CBringIntoViewRequestedEventArgs* This,
        __x_ABI_CWindows_CUI_CXaml_CIUIElement* sender,
        __x_ABI_CWindows_CUI_CXaml_CIBringIntoViewRequestedEventArgs* args);

        END_INTERFACE
    } __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CUIElement___x_ABI_CWindows__CUI__CXaml__CBringIntoViewRequestedEventArgsVtbl;

    interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CUIElement___x_ABI_CWindows__CUI__CXaml__CBringIntoViewRequestedEventArgs
    {
        CONST_VTBL struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CUIElement___x_ABI_CWindows__CUI__CXaml__CBringIntoViewRequestedEventArgsVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CUIElement___x_ABI_CWindows__CUI__CXaml__CBringIntoViewRequestedEventArgs_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CUIElement___x_ABI_CWindows__CUI__CXaml__CDragStartingEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CUIElement___x_ABI_CWindows__CUI__CXaml__CDragStartingEventArgs_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CUIElement___x_ABI_CWindows__CUI__CXaml__CDragStartingEventArgs __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CUIElement___x_ABI_CWindows__CUI__CXaml__CDragStartingEventArgs;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CUIElement___x_ABI_CWindows__CUI__CXaml__CDragStartingEventArgs;

    typedef struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CUIElement___x_ABI_CWindows__CUI__CXaml__CDragStartingEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CUIElement___x_ABI_CWindows__CUI__CXaml__CDragStartingEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CUIElement___x_ABI_CWindows__CUI__CXaml__CDragStartingEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CUIElement___x_ABI_CWindows__CUI__CXaml__CDragStartingEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CUIElement___x_ABI_CWindows__CUI__CXaml__CDragStartingEventArgs* This,
        __x_ABI_CWindows_CUI_CXaml_CIUIElement* sender,
        __x_ABI_CWindows_CUI_CXaml_CIDragStartingEventArgs* args);

        END_INTERFACE
    } __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CUIElement___x_ABI_CWindows__CUI__CXaml__CDragStartingEventArgsVtbl;

    interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CUIElement___x_ABI_CWindows__CUI__CXaml__CDragStartingEventArgs
    {
        CONST_VTBL struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CUIElement___x_ABI_CWindows__CUI__CXaml__CDragStartingEventArgsVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CUIElement___x_ABI_CWindows__CUI__CXaml__CDragStartingEventArgs_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CUIElement___x_ABI_CWindows__CUI__CXaml__CDropCompletedEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CUIElement___x_ABI_CWindows__CUI__CXaml__CDropCompletedEventArgs_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CUIElement___x_ABI_CWindows__CUI__CXaml__CDropCompletedEventArgs __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CUIElement___x_ABI_CWindows__CUI__CXaml__CDropCompletedEventArgs;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CUIElement___x_ABI_CWindows__CUI__CXaml__CDropCompletedEventArgs;

    typedef struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CUIElement___x_ABI_CWindows__CUI__CXaml__CDropCompletedEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CUIElement___x_ABI_CWindows__CUI__CXaml__CDropCompletedEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CUIElement___x_ABI_CWindows__CUI__CXaml__CDropCompletedEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CUIElement___x_ABI_CWindows__CUI__CXaml__CDropCompletedEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CUIElement___x_ABI_CWindows__CUI__CXaml__CDropCompletedEventArgs* This,
        __x_ABI_CWindows_CUI_CXaml_CIUIElement* sender,
        __x_ABI_CWindows_CUI_CXaml_CIDropCompletedEventArgs* args);

        END_INTERFACE
    } __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CUIElement___x_ABI_CWindows__CUI__CXaml__CDropCompletedEventArgsVtbl;

    interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CUIElement___x_ABI_CWindows__CUI__CXaml__CDropCompletedEventArgs
    {
        CONST_VTBL struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CUIElement___x_ABI_CWindows__CUI__CXaml__CDropCompletedEventArgsVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CUIElement___x_ABI_CWindows__CUI__CXaml__CDropCompletedEventArgs_INTERFACE_DEFINED__
    
#ifndef ____x_ABI_CWindows_CUI_CXaml_CInput_CIAccessKeyDisplayDismissedEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CInput_CIAccessKeyDisplayDismissedEventArgs_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CInput_CIAccessKeyDisplayDismissedEventArgs __x_ABI_CWindows_CUI_CXaml_CInput_CIAccessKeyDisplayDismissedEventArgs;

#endif // ____x_ABI_CWindows_CUI_CXaml_CInput_CIAccessKeyDisplayDismissedEventArgs_FWD_DEFINED__

#if !defined(____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CUIElement___x_ABI_CWindows__CUI__CXaml__CInput__CAccessKeyDisplayDismissedEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CUIElement___x_ABI_CWindows__CUI__CXaml__CInput__CAccessKeyDisplayDismissedEventArgs_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CUIElement___x_ABI_CWindows__CUI__CXaml__CInput__CAccessKeyDisplayDismissedEventArgs __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CUIElement___x_ABI_CWindows__CUI__CXaml__CInput__CAccessKeyDisplayDismissedEventArgs;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CUIElement___x_ABI_CWindows__CUI__CXaml__CInput__CAccessKeyDisplayDismissedEventArgs;

    typedef struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CUIElement___x_ABI_CWindows__CUI__CXaml__CInput__CAccessKeyDisplayDismissedEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CUIElement___x_ABI_CWindows__CUI__CXaml__CInput__CAccessKeyDisplayDismissedEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CUIElement___x_ABI_CWindows__CUI__CXaml__CInput__CAccessKeyDisplayDismissedEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CUIElement___x_ABI_CWindows__CUI__CXaml__CInput__CAccessKeyDisplayDismissedEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CUIElement___x_ABI_CWindows__CUI__CXaml__CInput__CAccessKeyDisplayDismissedEventArgs* This,
        __x_ABI_CWindows_CUI_CXaml_CIUIElement* sender,
        __x_ABI_CWindows_CUI_CXaml_CInput_CIAccessKeyDisplayDismissedEventArgs* args);

        END_INTERFACE
    } __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CUIElement___x_ABI_CWindows__CUI__CXaml__CInput__CAccessKeyDisplayDismissedEventArgsVtbl;

    interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CUIElement___x_ABI_CWindows__CUI__CXaml__CInput__CAccessKeyDisplayDismissedEventArgs
    {
        CONST_VTBL struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CUIElement___x_ABI_CWindows__CUI__CXaml__CInput__CAccessKeyDisplayDismissedEventArgsVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CUIElement___x_ABI_CWindows__CUI__CXaml__CInput__CAccessKeyDisplayDismissedEventArgs_INTERFACE_DEFINED__
    
#ifndef ____x_ABI_CWindows_CUI_CXaml_CInput_CIAccessKeyDisplayRequestedEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CInput_CIAccessKeyDisplayRequestedEventArgs_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CInput_CIAccessKeyDisplayRequestedEventArgs __x_ABI_CWindows_CUI_CXaml_CInput_CIAccessKeyDisplayRequestedEventArgs;

#endif // ____x_ABI_CWindows_CUI_CXaml_CInput_CIAccessKeyDisplayRequestedEventArgs_FWD_DEFINED__

#if !defined(____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CUIElement___x_ABI_CWindows__CUI__CXaml__CInput__CAccessKeyDisplayRequestedEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CUIElement___x_ABI_CWindows__CUI__CXaml__CInput__CAccessKeyDisplayRequestedEventArgs_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CUIElement___x_ABI_CWindows__CUI__CXaml__CInput__CAccessKeyDisplayRequestedEventArgs __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CUIElement___x_ABI_CWindows__CUI__CXaml__CInput__CAccessKeyDisplayRequestedEventArgs;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CUIElement___x_ABI_CWindows__CUI__CXaml__CInput__CAccessKeyDisplayRequestedEventArgs;

    typedef struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CUIElement___x_ABI_CWindows__CUI__CXaml__CInput__CAccessKeyDisplayRequestedEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CUIElement___x_ABI_CWindows__CUI__CXaml__CInput__CAccessKeyDisplayRequestedEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CUIElement___x_ABI_CWindows__CUI__CXaml__CInput__CAccessKeyDisplayRequestedEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CUIElement___x_ABI_CWindows__CUI__CXaml__CInput__CAccessKeyDisplayRequestedEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CUIElement___x_ABI_CWindows__CUI__CXaml__CInput__CAccessKeyDisplayRequestedEventArgs* This,
        __x_ABI_CWindows_CUI_CXaml_CIUIElement* sender,
        __x_ABI_CWindows_CUI_CXaml_CInput_CIAccessKeyDisplayRequestedEventArgs* args);

        END_INTERFACE
    } __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CUIElement___x_ABI_CWindows__CUI__CXaml__CInput__CAccessKeyDisplayRequestedEventArgsVtbl;

    interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CUIElement___x_ABI_CWindows__CUI__CXaml__CInput__CAccessKeyDisplayRequestedEventArgs
    {
        CONST_VTBL struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CUIElement___x_ABI_CWindows__CUI__CXaml__CInput__CAccessKeyDisplayRequestedEventArgsVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CUIElement___x_ABI_CWindows__CUI__CXaml__CInput__CAccessKeyDisplayRequestedEventArgs_INTERFACE_DEFINED__
    
#ifndef ____x_ABI_CWindows_CUI_CXaml_CInput_CIAccessKeyInvokedEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CInput_CIAccessKeyInvokedEventArgs_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CInput_CIAccessKeyInvokedEventArgs __x_ABI_CWindows_CUI_CXaml_CInput_CIAccessKeyInvokedEventArgs;

#endif // ____x_ABI_CWindows_CUI_CXaml_CInput_CIAccessKeyInvokedEventArgs_FWD_DEFINED__

#if !defined(____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CUIElement___x_ABI_CWindows__CUI__CXaml__CInput__CAccessKeyInvokedEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CUIElement___x_ABI_CWindows__CUI__CXaml__CInput__CAccessKeyInvokedEventArgs_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CUIElement___x_ABI_CWindows__CUI__CXaml__CInput__CAccessKeyInvokedEventArgs __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CUIElement___x_ABI_CWindows__CUI__CXaml__CInput__CAccessKeyInvokedEventArgs;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CUIElement___x_ABI_CWindows__CUI__CXaml__CInput__CAccessKeyInvokedEventArgs;

    typedef struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CUIElement___x_ABI_CWindows__CUI__CXaml__CInput__CAccessKeyInvokedEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CUIElement___x_ABI_CWindows__CUI__CXaml__CInput__CAccessKeyInvokedEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CUIElement___x_ABI_CWindows__CUI__CXaml__CInput__CAccessKeyInvokedEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CUIElement___x_ABI_CWindows__CUI__CXaml__CInput__CAccessKeyInvokedEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CUIElement___x_ABI_CWindows__CUI__CXaml__CInput__CAccessKeyInvokedEventArgs* This,
        __x_ABI_CWindows_CUI_CXaml_CIUIElement* sender,
        __x_ABI_CWindows_CUI_CXaml_CInput_CIAccessKeyInvokedEventArgs* args);

        END_INTERFACE
    } __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CUIElement___x_ABI_CWindows__CUI__CXaml__CInput__CAccessKeyInvokedEventArgsVtbl;

    interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CUIElement___x_ABI_CWindows__CUI__CXaml__CInput__CAccessKeyInvokedEventArgs
    {
        CONST_VTBL struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CUIElement___x_ABI_CWindows__CUI__CXaml__CInput__CAccessKeyInvokedEventArgsVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CUIElement___x_ABI_CWindows__CUI__CXaml__CInput__CAccessKeyInvokedEventArgs_INTERFACE_DEFINED__
    
#ifndef ____x_ABI_CWindows_CUI_CXaml_CInput_CICharacterReceivedRoutedEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CInput_CICharacterReceivedRoutedEventArgs_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CInput_CICharacterReceivedRoutedEventArgs __x_ABI_CWindows_CUI_CXaml_CInput_CICharacterReceivedRoutedEventArgs;

#endif // ____x_ABI_CWindows_CUI_CXaml_CInput_CICharacterReceivedRoutedEventArgs_FWD_DEFINED__

#if !defined(____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CUIElement___x_ABI_CWindows__CUI__CXaml__CInput__CCharacterReceivedRoutedEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CUIElement___x_ABI_CWindows__CUI__CXaml__CInput__CCharacterReceivedRoutedEventArgs_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CUIElement___x_ABI_CWindows__CUI__CXaml__CInput__CCharacterReceivedRoutedEventArgs __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CUIElement___x_ABI_CWindows__CUI__CXaml__CInput__CCharacterReceivedRoutedEventArgs;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CUIElement___x_ABI_CWindows__CUI__CXaml__CInput__CCharacterReceivedRoutedEventArgs;

    typedef struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CUIElement___x_ABI_CWindows__CUI__CXaml__CInput__CCharacterReceivedRoutedEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CUIElement___x_ABI_CWindows__CUI__CXaml__CInput__CCharacterReceivedRoutedEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CUIElement___x_ABI_CWindows__CUI__CXaml__CInput__CCharacterReceivedRoutedEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CUIElement___x_ABI_CWindows__CUI__CXaml__CInput__CCharacterReceivedRoutedEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CUIElement___x_ABI_CWindows__CUI__CXaml__CInput__CCharacterReceivedRoutedEventArgs* This,
        __x_ABI_CWindows_CUI_CXaml_CIUIElement* sender,
        __x_ABI_CWindows_CUI_CXaml_CInput_CICharacterReceivedRoutedEventArgs* args);

        END_INTERFACE
    } __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CUIElement___x_ABI_CWindows__CUI__CXaml__CInput__CCharacterReceivedRoutedEventArgsVtbl;

    interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CUIElement___x_ABI_CWindows__CUI__CXaml__CInput__CCharacterReceivedRoutedEventArgs
    {
        CONST_VTBL struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CUIElement___x_ABI_CWindows__CUI__CXaml__CInput__CCharacterReceivedRoutedEventArgsVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CUIElement___x_ABI_CWindows__CUI__CXaml__CInput__CCharacterReceivedRoutedEventArgs_INTERFACE_DEFINED__
    
#ifndef ____x_ABI_CWindows_CUI_CXaml_CInput_CIContextRequestedEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CInput_CIContextRequestedEventArgs_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CInput_CIContextRequestedEventArgs __x_ABI_CWindows_CUI_CXaml_CInput_CIContextRequestedEventArgs;

#endif // ____x_ABI_CWindows_CUI_CXaml_CInput_CIContextRequestedEventArgs_FWD_DEFINED__

#if !defined(____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CUIElement___x_ABI_CWindows__CUI__CXaml__CInput__CContextRequestedEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CUIElement___x_ABI_CWindows__CUI__CXaml__CInput__CContextRequestedEventArgs_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CUIElement___x_ABI_CWindows__CUI__CXaml__CInput__CContextRequestedEventArgs __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CUIElement___x_ABI_CWindows__CUI__CXaml__CInput__CContextRequestedEventArgs;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CUIElement___x_ABI_CWindows__CUI__CXaml__CInput__CContextRequestedEventArgs;

    typedef struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CUIElement___x_ABI_CWindows__CUI__CXaml__CInput__CContextRequestedEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CUIElement___x_ABI_CWindows__CUI__CXaml__CInput__CContextRequestedEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CUIElement___x_ABI_CWindows__CUI__CXaml__CInput__CContextRequestedEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CUIElement___x_ABI_CWindows__CUI__CXaml__CInput__CContextRequestedEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CUIElement___x_ABI_CWindows__CUI__CXaml__CInput__CContextRequestedEventArgs* This,
        __x_ABI_CWindows_CUI_CXaml_CIUIElement* sender,
        __x_ABI_CWindows_CUI_CXaml_CInput_CIContextRequestedEventArgs* args);

        END_INTERFACE
    } __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CUIElement___x_ABI_CWindows__CUI__CXaml__CInput__CContextRequestedEventArgsVtbl;

    interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CUIElement___x_ABI_CWindows__CUI__CXaml__CInput__CContextRequestedEventArgs
    {
        CONST_VTBL struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CUIElement___x_ABI_CWindows__CUI__CXaml__CInput__CContextRequestedEventArgsVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CUIElement___x_ABI_CWindows__CUI__CXaml__CInput__CContextRequestedEventArgs_INTERFACE_DEFINED__
    
#ifndef ____x_ABI_CWindows_CUI_CXaml_CInput_CIGettingFocusEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CInput_CIGettingFocusEventArgs_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CInput_CIGettingFocusEventArgs __x_ABI_CWindows_CUI_CXaml_CInput_CIGettingFocusEventArgs;

#endif // ____x_ABI_CWindows_CUI_CXaml_CInput_CIGettingFocusEventArgs_FWD_DEFINED__

#if !defined(____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CUIElement___x_ABI_CWindows__CUI__CXaml__CInput__CGettingFocusEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CUIElement___x_ABI_CWindows__CUI__CXaml__CInput__CGettingFocusEventArgs_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CUIElement___x_ABI_CWindows__CUI__CXaml__CInput__CGettingFocusEventArgs __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CUIElement___x_ABI_CWindows__CUI__CXaml__CInput__CGettingFocusEventArgs;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CUIElement___x_ABI_CWindows__CUI__CXaml__CInput__CGettingFocusEventArgs;

    typedef struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CUIElement___x_ABI_CWindows__CUI__CXaml__CInput__CGettingFocusEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CUIElement___x_ABI_CWindows__CUI__CXaml__CInput__CGettingFocusEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CUIElement___x_ABI_CWindows__CUI__CXaml__CInput__CGettingFocusEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CUIElement___x_ABI_CWindows__CUI__CXaml__CInput__CGettingFocusEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CUIElement___x_ABI_CWindows__CUI__CXaml__CInput__CGettingFocusEventArgs* This,
        __x_ABI_CWindows_CUI_CXaml_CIUIElement* sender,
        __x_ABI_CWindows_CUI_CXaml_CInput_CIGettingFocusEventArgs* args);

        END_INTERFACE
    } __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CUIElement___x_ABI_CWindows__CUI__CXaml__CInput__CGettingFocusEventArgsVtbl;

    interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CUIElement___x_ABI_CWindows__CUI__CXaml__CInput__CGettingFocusEventArgs
    {
        CONST_VTBL struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CUIElement___x_ABI_CWindows__CUI__CXaml__CInput__CGettingFocusEventArgsVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CUIElement___x_ABI_CWindows__CUI__CXaml__CInput__CGettingFocusEventArgs_INTERFACE_DEFINED__
    
#ifndef ____x_ABI_CWindows_CUI_CXaml_CInput_CILosingFocusEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CInput_CILosingFocusEventArgs_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CInput_CILosingFocusEventArgs __x_ABI_CWindows_CUI_CXaml_CInput_CILosingFocusEventArgs;

#endif // ____x_ABI_CWindows_CUI_CXaml_CInput_CILosingFocusEventArgs_FWD_DEFINED__

#if !defined(____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CUIElement___x_ABI_CWindows__CUI__CXaml__CInput__CLosingFocusEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CUIElement___x_ABI_CWindows__CUI__CXaml__CInput__CLosingFocusEventArgs_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CUIElement___x_ABI_CWindows__CUI__CXaml__CInput__CLosingFocusEventArgs __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CUIElement___x_ABI_CWindows__CUI__CXaml__CInput__CLosingFocusEventArgs;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CUIElement___x_ABI_CWindows__CUI__CXaml__CInput__CLosingFocusEventArgs;

    typedef struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CUIElement___x_ABI_CWindows__CUI__CXaml__CInput__CLosingFocusEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CUIElement___x_ABI_CWindows__CUI__CXaml__CInput__CLosingFocusEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CUIElement___x_ABI_CWindows__CUI__CXaml__CInput__CLosingFocusEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CUIElement___x_ABI_CWindows__CUI__CXaml__CInput__CLosingFocusEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CUIElement___x_ABI_CWindows__CUI__CXaml__CInput__CLosingFocusEventArgs* This,
        __x_ABI_CWindows_CUI_CXaml_CIUIElement* sender,
        __x_ABI_CWindows_CUI_CXaml_CInput_CILosingFocusEventArgs* args);

        END_INTERFACE
    } __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CUIElement___x_ABI_CWindows__CUI__CXaml__CInput__CLosingFocusEventArgsVtbl;

    interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CUIElement___x_ABI_CWindows__CUI__CXaml__CInput__CLosingFocusEventArgs
    {
        CONST_VTBL struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CUIElement___x_ABI_CWindows__CUI__CXaml__CInput__CLosingFocusEventArgsVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CUIElement___x_ABI_CWindows__CUI__CXaml__CInput__CLosingFocusEventArgs_INTERFACE_DEFINED__
    
#ifndef ____x_ABI_CWindows_CUI_CXaml_CInput_CINoFocusCandidateFoundEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CInput_CINoFocusCandidateFoundEventArgs_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CInput_CINoFocusCandidateFoundEventArgs __x_ABI_CWindows_CUI_CXaml_CInput_CINoFocusCandidateFoundEventArgs;

#endif // ____x_ABI_CWindows_CUI_CXaml_CInput_CINoFocusCandidateFoundEventArgs_FWD_DEFINED__

#if !defined(____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CUIElement___x_ABI_CWindows__CUI__CXaml__CInput__CNoFocusCandidateFoundEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CUIElement___x_ABI_CWindows__CUI__CXaml__CInput__CNoFocusCandidateFoundEventArgs_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CUIElement___x_ABI_CWindows__CUI__CXaml__CInput__CNoFocusCandidateFoundEventArgs __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CUIElement___x_ABI_CWindows__CUI__CXaml__CInput__CNoFocusCandidateFoundEventArgs;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CUIElement___x_ABI_CWindows__CUI__CXaml__CInput__CNoFocusCandidateFoundEventArgs;

    typedef struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CUIElement___x_ABI_CWindows__CUI__CXaml__CInput__CNoFocusCandidateFoundEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CUIElement___x_ABI_CWindows__CUI__CXaml__CInput__CNoFocusCandidateFoundEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CUIElement___x_ABI_CWindows__CUI__CXaml__CInput__CNoFocusCandidateFoundEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CUIElement___x_ABI_CWindows__CUI__CXaml__CInput__CNoFocusCandidateFoundEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CUIElement___x_ABI_CWindows__CUI__CXaml__CInput__CNoFocusCandidateFoundEventArgs* This,
        __x_ABI_CWindows_CUI_CXaml_CIUIElement* sender,
        __x_ABI_CWindows_CUI_CXaml_CInput_CINoFocusCandidateFoundEventArgs* args);

        END_INTERFACE
    } __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CUIElement___x_ABI_CWindows__CUI__CXaml__CInput__CNoFocusCandidateFoundEventArgsVtbl;

    interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CUIElement___x_ABI_CWindows__CUI__CXaml__CInput__CNoFocusCandidateFoundEventArgs
    {
        CONST_VTBL struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CUIElement___x_ABI_CWindows__CUI__CXaml__CInput__CNoFocusCandidateFoundEventArgsVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CUIElement___x_ABI_CWindows__CUI__CXaml__CInput__CNoFocusCandidateFoundEventArgs_INTERFACE_DEFINED__
    
#ifndef ____x_ABI_CWindows_CUI_CXaml_CInput_CIProcessKeyboardAcceleratorEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CInput_CIProcessKeyboardAcceleratorEventArgs_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CInput_CIProcessKeyboardAcceleratorEventArgs __x_ABI_CWindows_CUI_CXaml_CInput_CIProcessKeyboardAcceleratorEventArgs;

#endif // ____x_ABI_CWindows_CUI_CXaml_CInput_CIProcessKeyboardAcceleratorEventArgs_FWD_DEFINED__

#if !defined(____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CUIElement___x_ABI_CWindows__CUI__CXaml__CInput__CProcessKeyboardAcceleratorEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CUIElement___x_ABI_CWindows__CUI__CXaml__CInput__CProcessKeyboardAcceleratorEventArgs_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CUIElement___x_ABI_CWindows__CUI__CXaml__CInput__CProcessKeyboardAcceleratorEventArgs __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CUIElement___x_ABI_CWindows__CUI__CXaml__CInput__CProcessKeyboardAcceleratorEventArgs;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CUIElement___x_ABI_CWindows__CUI__CXaml__CInput__CProcessKeyboardAcceleratorEventArgs;

    typedef struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CUIElement___x_ABI_CWindows__CUI__CXaml__CInput__CProcessKeyboardAcceleratorEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CUIElement___x_ABI_CWindows__CUI__CXaml__CInput__CProcessKeyboardAcceleratorEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CUIElement___x_ABI_CWindows__CUI__CXaml__CInput__CProcessKeyboardAcceleratorEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CUIElement___x_ABI_CWindows__CUI__CXaml__CInput__CProcessKeyboardAcceleratorEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CUIElement___x_ABI_CWindows__CUI__CXaml__CInput__CProcessKeyboardAcceleratorEventArgs* This,
        __x_ABI_CWindows_CUI_CXaml_CIUIElement* sender,
        __x_ABI_CWindows_CUI_CXaml_CInput_CIProcessKeyboardAcceleratorEventArgs* args);

        END_INTERFACE
    } __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CUIElement___x_ABI_CWindows__CUI__CXaml__CInput__CProcessKeyboardAcceleratorEventArgsVtbl;

    interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CUIElement___x_ABI_CWindows__CUI__CXaml__CInput__CProcessKeyboardAcceleratorEventArgs
    {
        CONST_VTBL struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CUIElement___x_ABI_CWindows__CUI__CXaml__CInput__CProcessKeyboardAcceleratorEventArgsVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CUIElement___x_ABI_CWindows__CUI__CXaml__CInput__CProcessKeyboardAcceleratorEventArgs_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CUIElement___x_ABI_CWindows__CUI__CXaml__CRoutedEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CUIElement___x_ABI_CWindows__CUI__CXaml__CRoutedEventArgs_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CUIElement___x_ABI_CWindows__CUI__CXaml__CRoutedEventArgs __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CUIElement___x_ABI_CWindows__CUI__CXaml__CRoutedEventArgs;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CUIElement___x_ABI_CWindows__CUI__CXaml__CRoutedEventArgs;

    typedef struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CUIElement___x_ABI_CWindows__CUI__CXaml__CRoutedEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CUIElement___x_ABI_CWindows__CUI__CXaml__CRoutedEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CUIElement___x_ABI_CWindows__CUI__CXaml__CRoutedEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CUIElement___x_ABI_CWindows__CUI__CXaml__CRoutedEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CUIElement___x_ABI_CWindows__CUI__CXaml__CRoutedEventArgs* This,
        __x_ABI_CWindows_CUI_CXaml_CIUIElement* sender,
        __x_ABI_CWindows_CUI_CXaml_CIRoutedEventArgs* args);

        END_INTERFACE
    } __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CUIElement___x_ABI_CWindows__CUI__CXaml__CRoutedEventArgsVtbl;

    interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CUIElement___x_ABI_CWindows__CUI__CXaml__CRoutedEventArgs
    {
        CONST_VTBL struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CUIElement___x_ABI_CWindows__CUI__CXaml__CRoutedEventArgsVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CUIElement___x_ABI_CWindows__CUI__CXaml__CRoutedEventArgs_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CXamlRoot___x_ABI_CWindows__CUI__CXaml__CXamlRootChangedEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CXamlRoot___x_ABI_CWindows__CUI__CXaml__CXamlRootChangedEventArgs_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CXamlRoot___x_ABI_CWindows__CUI__CXaml__CXamlRootChangedEventArgs __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CXamlRoot___x_ABI_CWindows__CUI__CXaml__CXamlRootChangedEventArgs;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CXamlRoot___x_ABI_CWindows__CUI__CXaml__CXamlRootChangedEventArgs;

    typedef struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CXamlRoot___x_ABI_CWindows__CUI__CXaml__CXamlRootChangedEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CXamlRoot___x_ABI_CWindows__CUI__CXaml__CXamlRootChangedEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CXamlRoot___x_ABI_CWindows__CUI__CXaml__CXamlRootChangedEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CXamlRoot___x_ABI_CWindows__CUI__CXaml__CXamlRootChangedEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CXamlRoot___x_ABI_CWindows__CUI__CXaml__CXamlRootChangedEventArgs* This,
        __x_ABI_CWindows_CUI_CXaml_CIXamlRoot* sender,
        __x_ABI_CWindows_CUI_CXaml_CIXamlRootChangedEventArgs* args);

        END_INTERFACE
    } __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CXamlRoot___x_ABI_CWindows__CUI__CXaml__CXamlRootChangedEventArgsVtbl;

    interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CXamlRoot___x_ABI_CWindows__CUI__CXaml__CXamlRootChangedEventArgs
    {
        CONST_VTBL struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CXamlRoot___x_ABI_CWindows__CUI__CXaml__CXamlRootChangedEventArgsVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CXamlRoot___x_ABI_CWindows__CUI__CXaml__CXamlRootChangedEventArgs_INTERFACE_DEFINED__
    
#ifndef ____x_ABI_CWindows_CApplicationModel_CActivation_CIBackgroundActivatedEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CApplicationModel_CActivation_CIBackgroundActivatedEventArgs_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CApplicationModel_CActivation_CIBackgroundActivatedEventArgs __x_ABI_CWindows_CApplicationModel_CActivation_CIBackgroundActivatedEventArgs;

#endif // ____x_ABI_CWindows_CApplicationModel_CActivation_CIBackgroundActivatedEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CApplicationModel_CActivation_CICachedFileUpdaterActivatedEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CApplicationModel_CActivation_CICachedFileUpdaterActivatedEventArgs_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CApplicationModel_CActivation_CICachedFileUpdaterActivatedEventArgs __x_ABI_CWindows_CApplicationModel_CActivation_CICachedFileUpdaterActivatedEventArgs;

#endif // ____x_ABI_CWindows_CApplicationModel_CActivation_CICachedFileUpdaterActivatedEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CApplicationModel_CActivation_CIFileActivatedEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CApplicationModel_CActivation_CIFileActivatedEventArgs_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CApplicationModel_CActivation_CIFileActivatedEventArgs __x_ABI_CWindows_CApplicationModel_CActivation_CIFileActivatedEventArgs;

#endif // ____x_ABI_CWindows_CApplicationModel_CActivation_CIFileActivatedEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CApplicationModel_CActivation_CIFileOpenPickerActivatedEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CApplicationModel_CActivation_CIFileOpenPickerActivatedEventArgs_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CApplicationModel_CActivation_CIFileOpenPickerActivatedEventArgs __x_ABI_CWindows_CApplicationModel_CActivation_CIFileOpenPickerActivatedEventArgs;

#endif // ____x_ABI_CWindows_CApplicationModel_CActivation_CIFileOpenPickerActivatedEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CApplicationModel_CActivation_CIFileSavePickerActivatedEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CApplicationModel_CActivation_CIFileSavePickerActivatedEventArgs_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CApplicationModel_CActivation_CIFileSavePickerActivatedEventArgs __x_ABI_CWindows_CApplicationModel_CActivation_CIFileSavePickerActivatedEventArgs;

#endif // ____x_ABI_CWindows_CApplicationModel_CActivation_CIFileSavePickerActivatedEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CApplicationModel_CActivation_CIActivatedEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CApplicationModel_CActivation_CIActivatedEventArgs_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CApplicationModel_CActivation_CIActivatedEventArgs __x_ABI_CWindows_CApplicationModel_CActivation_CIActivatedEventArgs;

#endif // ____x_ABI_CWindows_CApplicationModel_CActivation_CIActivatedEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CApplicationModel_CActivation_CILaunchActivatedEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CApplicationModel_CActivation_CILaunchActivatedEventArgs_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CApplicationModel_CActivation_CILaunchActivatedEventArgs __x_ABI_CWindows_CApplicationModel_CActivation_CILaunchActivatedEventArgs;

#endif // ____x_ABI_CWindows_CApplicationModel_CActivation_CILaunchActivatedEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CApplicationModel_CActivation_CISearchActivatedEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CApplicationModel_CActivation_CISearchActivatedEventArgs_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CApplicationModel_CActivation_CISearchActivatedEventArgs __x_ABI_CWindows_CApplicationModel_CActivation_CISearchActivatedEventArgs;

#endif // ____x_ABI_CWindows_CApplicationModel_CActivation_CISearchActivatedEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CApplicationModel_CActivation_CIShareTargetActivatedEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CApplicationModel_CActivation_CIShareTargetActivatedEventArgs_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CApplicationModel_CActivation_CIShareTargetActivatedEventArgs __x_ABI_CWindows_CApplicationModel_CActivation_CIShareTargetActivatedEventArgs;

#endif // ____x_ABI_CWindows_CApplicationModel_CActivation_CIShareTargetActivatedEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CApplicationModel_CCore_CIFrameworkView_FWD_DEFINED__
#define ____x_ABI_CWindows_CApplicationModel_CCore_CIFrameworkView_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CApplicationModel_CCore_CIFrameworkView __x_ABI_CWindows_CApplicationModel_CCore_CIFrameworkView;

#endif // ____x_ABI_CWindows_CApplicationModel_CCore_CIFrameworkView_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CApplicationModel_CCore_CIFrameworkViewSource_FWD_DEFINED__
#define ____x_ABI_CWindows_CApplicationModel_CCore_CIFrameworkViewSource_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CApplicationModel_CCore_CIFrameworkViewSource __x_ABI_CWindows_CApplicationModel_CCore_CIFrameworkViewSource;

#endif // ____x_ABI_CWindows_CApplicationModel_CCore_CIFrameworkViewSource_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CApplicationModel_CDataTransfer_CIDataPackage_FWD_DEFINED__
#define ____x_ABI_CWindows_CApplicationModel_CDataTransfer_CIDataPackage_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CApplicationModel_CDataTransfer_CIDataPackage __x_ABI_CWindows_CApplicationModel_CDataTransfer_CIDataPackage;

#endif // ____x_ABI_CWindows_CApplicationModel_CDataTransfer_CIDataPackage_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CApplicationModel_CDataTransfer_CIDataPackageView_FWD_DEFINED__
#define ____x_ABI_CWindows_CApplicationModel_CDataTransfer_CIDataPackageView_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CApplicationModel_CDataTransfer_CIDataPackageView __x_ABI_CWindows_CApplicationModel_CDataTransfer_CIDataPackageView;

#endif // ____x_ABI_CWindows_CApplicationModel_CDataTransfer_CIDataPackageView_FWD_DEFINED__

typedef enum __x_ABI_CWindows_CApplicationModel_CDataTransfer_CDragDrop_CDragDropModifiers __x_ABI_CWindows_CApplicationModel_CDataTransfer_CDragDrop_CDragDropModifiers;

#ifndef ____x_ABI_CWindows_CApplicationModel_CIEnteredBackgroundEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CApplicationModel_CIEnteredBackgroundEventArgs_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CApplicationModel_CIEnteredBackgroundEventArgs __x_ABI_CWindows_CApplicationModel_CIEnteredBackgroundEventArgs;

#endif // ____x_ABI_CWindows_CApplicationModel_CIEnteredBackgroundEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CApplicationModel_CILeavingBackgroundEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CApplicationModel_CILeavingBackgroundEventArgs_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CApplicationModel_CILeavingBackgroundEventArgs __x_ABI_CWindows_CApplicationModel_CILeavingBackgroundEventArgs;

#endif // ____x_ABI_CWindows_CApplicationModel_CILeavingBackgroundEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CApplicationModel_CISuspendingEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CApplicationModel_CISuspendingEventArgs_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CApplicationModel_CISuspendingEventArgs __x_ABI_CWindows_CApplicationModel_CISuspendingEventArgs;

#endif // ____x_ABI_CWindows_CApplicationModel_CISuspendingEventArgs_FWD_DEFINED__

typedef enum __x_ABI_CWindows_CFoundation_CAsyncStatus __x_ABI_CWindows_CFoundation_CAsyncStatus;

#ifndef ____x_ABI_CWindows_CFoundation_CIAsyncInfo_FWD_DEFINED__
#define ____x_ABI_CWindows_CFoundation_CIAsyncInfo_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CFoundation_CIAsyncInfo __x_ABI_CWindows_CFoundation_CIAsyncInfo;

#endif // ____x_ABI_CWindows_CFoundation_CIAsyncInfo_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CFoundation_CIPropertyValue_FWD_DEFINED__
#define ____x_ABI_CWindows_CFoundation_CIPropertyValue_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CFoundation_CIPropertyValue __x_ABI_CWindows_CFoundation_CIPropertyValue;

#endif // ____x_ABI_CWindows_CFoundation_CIPropertyValue_FWD_DEFINED__

typedef struct __x_ABI_CWindows_CFoundation_CNumerics_CMatrix4x4 __x_ABI_CWindows_CFoundation_CNumerics_CMatrix4x4;

typedef struct __x_ABI_CWindows_CFoundation_CNumerics_CVector2 __x_ABI_CWindows_CFoundation_CNumerics_CVector2;

typedef struct __x_ABI_CWindows_CFoundation_CNumerics_CVector3 __x_ABI_CWindows_CFoundation_CNumerics_CVector3;

typedef struct __x_ABI_CWindows_CFoundation_CSize __x_ABI_CWindows_CFoundation_CSize;

typedef struct __x_ABI_CWindows_CFoundation_CTimeSpan __x_ABI_CWindows_CFoundation_CTimeSpan;

#ifndef ____x_ABI_CWindows_CFoundation_CIUriRuntimeClass_FWD_DEFINED__
#define ____x_ABI_CWindows_CFoundation_CIUriRuntimeClass_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CFoundation_CIUriRuntimeClass __x_ABI_CWindows_CFoundation_CIUriRuntimeClass;

#endif // ____x_ABI_CWindows_CFoundation_CIUriRuntimeClass_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CGraphics_CImaging_CISoftwareBitmap_FWD_DEFINED__
#define ____x_ABI_CWindows_CGraphics_CImaging_CISoftwareBitmap_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CGraphics_CImaging_CISoftwareBitmap __x_ABI_CWindows_CGraphics_CImaging_CISoftwareBitmap;

#endif // ____x_ABI_CWindows_CGraphics_CImaging_CISoftwareBitmap_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CComposition_CIAnimationPropertyInfo_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CComposition_CIAnimationPropertyInfo_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CComposition_CIAnimationPropertyInfo __x_ABI_CWindows_CUI_CComposition_CIAnimationPropertyInfo;

#endif // ____x_ABI_CWindows_CUI_CComposition_CIAnimationPropertyInfo_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CComposition_CICompositor_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CComposition_CICompositor_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CComposition_CICompositor __x_ABI_CWindows_CUI_CComposition_CICompositor;

#endif // ____x_ABI_CWindows_CUI_CComposition_CICompositor_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CComposition_CIAnimationObject_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CComposition_CIAnimationObject_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CComposition_CIAnimationObject __x_ABI_CWindows_CUI_CComposition_CIAnimationObject;

#endif // ____x_ABI_CWindows_CUI_CComposition_CIAnimationObject_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CComposition_CICompositionAnimationBase_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CComposition_CICompositionAnimationBase_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CComposition_CICompositionAnimationBase __x_ABI_CWindows_CUI_CComposition_CICompositionAnimationBase;

#endif // ____x_ABI_CWindows_CUI_CComposition_CICompositionAnimationBase_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CComposition_CIVisualElement_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CComposition_CIVisualElement_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CComposition_CIVisualElement __x_ABI_CWindows_CUI_CComposition_CIVisualElement;

#endif // ____x_ABI_CWindows_CUI_CComposition_CIVisualElement_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CCore_CICoreDispatcher_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CCore_CICoreDispatcher_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CCore_CICoreDispatcher __x_ABI_CWindows_CUI_CCore_CICoreDispatcher;

#endif // ____x_ABI_CWindows_CUI_CCore_CICoreDispatcher_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CCore_CICoreWindow_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CCore_CICoreWindow_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CCore_CICoreWindow __x_ABI_CWindows_CUI_CCore_CICoreWindow;

#endif // ____x_ABI_CWindows_CUI_CCore_CICoreWindow_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CCore_CICoreWindowEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CCore_CICoreWindowEventArgs_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CCore_CICoreWindowEventArgs __x_ABI_CWindows_CUI_CCore_CICoreWindowEventArgs;

#endif // ____x_ABI_CWindows_CUI_CCore_CICoreWindowEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CCore_CIVisibilityChangedEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CCore_CIVisibilityChangedEventArgs_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CCore_CIVisibilityChangedEventArgs __x_ABI_CWindows_CUI_CCore_CIVisibilityChangedEventArgs;

#endif // ____x_ABI_CWindows_CUI_CCore_CIVisibilityChangedEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CCore_CIWindowActivatedEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CCore_CIWindowActivatedEventArgs_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CCore_CIWindowActivatedEventArgs __x_ABI_CWindows_CUI_CCore_CIWindowActivatedEventArgs;

#endif // ____x_ABI_CWindows_CUI_CCore_CIWindowActivatedEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CCore_CIWindowSizeChangedEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CCore_CIWindowSizeChangedEventArgs_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CCore_CIWindowSizeChangedEventArgs __x_ABI_CWindows_CUI_CCore_CIWindowSizeChangedEventArgs;

#endif // ____x_ABI_CWindows_CUI_CCore_CIWindowSizeChangedEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CInput_CIPointerPoint_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CInput_CIPointerPoint_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CInput_CIPointerPoint __x_ABI_CWindows_CUI_CInput_CIPointerPoint;

#endif // ____x_ABI_CWindows_CUI_CInput_CIPointerPoint_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CIUIContext_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CIUIContext_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CIUIContext __x_ABI_CWindows_CUI_CIUIContext;

#endif // ____x_ABI_CWindows_CUI_CIUIContext_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CAutomation_CPeers_CIAutomationPeer_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CAutomation_CPeers_CIAutomationPeer_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CAutomation_CPeers_CIAutomationPeer __x_ABI_CWindows_CUI_CXaml_CAutomation_CPeers_CIAutomationPeer;

#endif // ____x_ABI_CWindows_CUI_CXaml_CAutomation_CPeers_CIAutomationPeer_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CIContainerContentChangingEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CIContainerContentChangingEventArgs_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CIContainerContentChangingEventArgs __x_ABI_CWindows_CUI_CXaml_CControls_CIContainerContentChangingEventArgs;

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CIContainerContentChangingEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CIControl_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CIControl_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CIControl __x_ABI_CWindows_CUI_CXaml_CControls_CIControl;

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CIControl_FWD_DEFINED__

typedef enum __x_ABI_CWindows_CUI_CXaml_CControls_CPrimitives_CComponentResourceLocation __x_ABI_CWindows_CUI_CXaml_CControls_CPrimitives_CComponentResourceLocation;

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CPrimitives_CIFlyoutBase_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CPrimitives_CIFlyoutBase_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CPrimitives_CIFlyoutBase __x_ABI_CWindows_CUI_CXaml_CControls_CPrimitives_CIFlyoutBase;

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CPrimitives_CIFlyoutBase_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CData_CIBindingBase_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CData_CIBindingBase_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CData_CIBindingBase __x_ABI_CWindows_CUI_CXaml_CData_CIBindingBase;

#endif // ____x_ABI_CWindows_CUI_CXaml_CData_CIBindingBase_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CData_CIBindingExpression_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CData_CIBindingExpression_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CData_CIBindingExpression __x_ABI_CWindows_CUI_CXaml_CData_CIBindingExpression;

#endif // ____x_ABI_CWindows_CUI_CXaml_CData_CIBindingExpression_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CInput_CIDoubleTappedEventHandler_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CInput_CIDoubleTappedEventHandler_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CUI_CXaml_CInput_CIDoubleTappedEventHandler __x_ABI_CWindows_CUI_CXaml_CInput_CIDoubleTappedEventHandler;

#endif // ____x_ABI_CWindows_CUI_CXaml_CInput_CIDoubleTappedEventHandler_FWD_DEFINED__

    #ifndef ____x_ABI_CWindows_CUI_CXaml_CInput_CIHoldingEventHandler_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CInput_CIHoldingEventHandler_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CUI_CXaml_CInput_CIHoldingEventHandler __x_ABI_CWindows_CUI_CXaml_CInput_CIHoldingEventHandler;

#endif // ____x_ABI_CWindows_CUI_CXaml_CInput_CIHoldingEventHandler_FWD_DEFINED__

    #ifndef ____x_ABI_CWindows_CUI_CXaml_CInput_CIKeyEventHandler_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CInput_CIKeyEventHandler_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CUI_CXaml_CInput_CIKeyEventHandler __x_ABI_CWindows_CUI_CXaml_CInput_CIKeyEventHandler;

#endif // ____x_ABI_CWindows_CUI_CXaml_CInput_CIKeyEventHandler_FWD_DEFINED__

    typedef enum __x_ABI_CWindows_CUI_CXaml_CInput_CKeyTipPlacementMode __x_ABI_CWindows_CUI_CXaml_CInput_CKeyTipPlacementMode;

#ifndef ____x_ABI_CWindows_CUI_CXaml_CInput_CIKeyboardAcceleratorInvokedEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CInput_CIKeyboardAcceleratorInvokedEventArgs_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CInput_CIKeyboardAcceleratorInvokedEventArgs __x_ABI_CWindows_CUI_CXaml_CInput_CIKeyboardAcceleratorInvokedEventArgs;

#endif // ____x_ABI_CWindows_CUI_CXaml_CInput_CIKeyboardAcceleratorInvokedEventArgs_FWD_DEFINED__

typedef enum __x_ABI_CWindows_CUI_CXaml_CInput_CKeyboardAcceleratorPlacementMode __x_ABI_CWindows_CUI_CXaml_CInput_CKeyboardAcceleratorPlacementMode;

typedef enum __x_ABI_CWindows_CUI_CXaml_CInput_CKeyboardNavigationMode __x_ABI_CWindows_CUI_CXaml_CInput_CKeyboardNavigationMode;

#ifndef ____x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationCompletedEventHandler_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationCompletedEventHandler_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationCompletedEventHandler __x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationCompletedEventHandler;

#endif // ____x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationCompletedEventHandler_FWD_DEFINED__

    #ifndef ____x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationDeltaEventHandler_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationDeltaEventHandler_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationDeltaEventHandler __x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationDeltaEventHandler;

#endif // ____x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationDeltaEventHandler_FWD_DEFINED__

    #ifndef ____x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationInertiaStartingEventHandler_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationInertiaStartingEventHandler_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationInertiaStartingEventHandler __x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationInertiaStartingEventHandler;

#endif // ____x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationInertiaStartingEventHandler_FWD_DEFINED__

    typedef enum __x_ABI_CWindows_CUI_CXaml_CInput_CManipulationModes __x_ABI_CWindows_CUI_CXaml_CInput_CManipulationModes;

#ifndef ____x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationStartedEventHandler_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationStartedEventHandler_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationStartedEventHandler __x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationStartedEventHandler;

#endif // ____x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationStartedEventHandler_FWD_DEFINED__

    #ifndef ____x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationStartingEventHandler_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationStartingEventHandler_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationStartingEventHandler __x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationStartingEventHandler;

#endif // ____x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationStartingEventHandler_FWD_DEFINED__

    #ifndef ____x_ABI_CWindows_CUI_CXaml_CInput_CIPointerEventHandler_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CInput_CIPointerEventHandler_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CUI_CXaml_CInput_CIPointerEventHandler __x_ABI_CWindows_CUI_CXaml_CInput_CIPointerEventHandler;

#endif // ____x_ABI_CWindows_CUI_CXaml_CInput_CIPointerEventHandler_FWD_DEFINED__

    #ifndef ____x_ABI_CWindows_CUI_CXaml_CInput_CIRightTappedEventHandler_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CInput_CIRightTappedEventHandler_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CUI_CXaml_CInput_CIRightTappedEventHandler __x_ABI_CWindows_CUI_CXaml_CInput_CIRightTappedEventHandler;

#endif // ____x_ABI_CWindows_CUI_CXaml_CInput_CIRightTappedEventHandler_FWD_DEFINED__

    #ifndef ____x_ABI_CWindows_CUI_CXaml_CInput_CITappedEventHandler_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CInput_CITappedEventHandler_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CUI_CXaml_CInput_CITappedEventHandler __x_ABI_CWindows_CUI_CXaml_CInput_CITappedEventHandler;

#endif // ____x_ABI_CWindows_CUI_CXaml_CInput_CITappedEventHandler_FWD_DEFINED__

    typedef enum __x_ABI_CWindows_CUI_CXaml_CInput_CXYFocusKeyboardNavigationMode __x_ABI_CWindows_CUI_CXaml_CInput_CXYFocusKeyboardNavigationMode;

typedef enum __x_ABI_CWindows_CUI_CXaml_CInput_CXYFocusNavigationStrategy __x_ABI_CWindows_CUI_CXaml_CInput_CXYFocusNavigationStrategy;

typedef struct __x_ABI_CWindows_CUI_CXaml_CInterop_CTypeName __x_ABI_CWindows_CUI_CXaml_CInterop_CTypeName;

#ifndef ____x_ABI_CWindows_CUI_CXaml_CMedia_CAnimation_CIEasingFunctionBase_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CMedia_CAnimation_CIEasingFunctionBase_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CMedia_CAnimation_CIEasingFunctionBase __x_ABI_CWindows_CUI_CXaml_CMedia_CAnimation_CIEasingFunctionBase;

#endif // ____x_ABI_CWindows_CUI_CXaml_CMedia_CAnimation_CIEasingFunctionBase_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CMedia_CAnimation_CIStoryboard_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CMedia_CAnimation_CIStoryboard_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CMedia_CAnimation_CIStoryboard __x_ABI_CWindows_CUI_CXaml_CMedia_CAnimation_CIStoryboard;

#endif // ____x_ABI_CWindows_CUI_CXaml_CMedia_CAnimation_CIStoryboard_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CMedia_CAnimation_CITransition_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CMedia_CAnimation_CITransition_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CMedia_CAnimation_CITransition __x_ABI_CWindows_CUI_CXaml_CMedia_CAnimation_CITransition;

#endif // ____x_ABI_CWindows_CUI_CXaml_CMedia_CAnimation_CITransition_FWD_DEFINED__

#if !defined(____x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CMedia__CAnimation__CTransition_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CMedia__CAnimation__CTransition_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CMedia__CAnimation__CTransition __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CMedia__CAnimation__CTransition;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CMedia__CAnimation__CTransition;

    typedef struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CMedia__CAnimation__CTransitionVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CMedia__CAnimation__CTransition* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CMedia__CAnimation__CTransition* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CMedia__CAnimation__CTransition* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CMedia__CAnimation__CTransition* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CMedia__CAnimation__CTransition* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CMedia__CAnimation__CTransition* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Current)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CMedia__CAnimation__CTransition* This,
        __x_ABI_CWindows_CUI_CXaml_CMedia_CAnimation_CITransition** result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CMedia__CAnimation__CTransition* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CMedia__CAnimation__CTransition* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CMedia__CAnimation__CTransition* This,
        UINT32 itemsLength,
        __x_ABI_CWindows_CUI_CXaml_CMedia_CAnimation_CITransition** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CMedia__CAnimation__CTransitionVtbl;

    interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CMedia__CAnimation__CTransition
    {
        CONST_VTBL struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CMedia__CAnimation__CTransitionVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CMedia__CAnimation__CTransition_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CMedia__CAnimation__CTransition_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CMedia__CAnimation__CTransition_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CMedia__CAnimation__CTransition __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CMedia__CAnimation__CTransition;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CMedia__CAnimation__CTransition;

    typedef struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CMedia__CAnimation__CTransitionVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CMedia__CAnimation__CTransition* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CMedia__CAnimation__CTransition* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CMedia__CAnimation__CTransition* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CMedia__CAnimation__CTransition* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CMedia__CAnimation__CTransition* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CMedia__CAnimation__CTransition* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* First)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CMedia__CAnimation__CTransition* This,
        __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CMedia__CAnimation__CTransition** result);

        END_INTERFACE
    } __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CMedia__CAnimation__CTransitionVtbl;

    interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CMedia__CAnimation__CTransition
    {
        CONST_VTBL struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CMedia__CAnimation__CTransitionVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CMedia__CAnimation__CTransition_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CMedia__CAnimation__CTransition_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CMedia__CAnimation__CTransition_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CMedia__CAnimation__CTransition __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CMedia__CAnimation__CTransition;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CMedia__CAnimation__CTransition;

    typedef struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CMedia__CAnimation__CTransitionVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CMedia__CAnimation__CTransition* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CMedia__CAnimation__CTransition* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CMedia__CAnimation__CTransition* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CMedia__CAnimation__CTransition* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CMedia__CAnimation__CTransition* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CMedia__CAnimation__CTransition* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CMedia__CAnimation__CTransition* This,
        UINT32 index,
        __x_ABI_CWindows_CUI_CXaml_CMedia_CAnimation_CITransition** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CMedia__CAnimation__CTransition* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CMedia__CAnimation__CTransition* This,
        __x_ABI_CWindows_CUI_CXaml_CMedia_CAnimation_CITransition* value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CMedia__CAnimation__CTransition* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        __x_ABI_CWindows_CUI_CXaml_CMedia_CAnimation_CITransition** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CMedia__CAnimation__CTransitionVtbl;

    interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CMedia__CAnimation__CTransition
    {
        CONST_VTBL struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CMedia__CAnimation__CTransitionVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CMedia__CAnimation__CTransition_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CMedia__CAnimation__CTransition_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CMedia__CAnimation__CTransition_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CMedia__CAnimation__CTransition __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CMedia__CAnimation__CTransition;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CMedia__CAnimation__CTransition;

    typedef struct __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CMedia__CAnimation__CTransitionVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CMedia__CAnimation__CTransition* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CMedia__CAnimation__CTransition* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CMedia__CAnimation__CTransition* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CMedia__CAnimation__CTransition* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CMedia__CAnimation__CTransition* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CMedia__CAnimation__CTransition* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CMedia__CAnimation__CTransition* This,
        UINT32 index,
        __x_ABI_CWindows_CUI_CXaml_CMedia_CAnimation_CITransition** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CMedia__CAnimation__CTransition* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* GetView)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CMedia__CAnimation__CTransition* This,
        __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CMedia__CAnimation__CTransition** result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CMedia__CAnimation__CTransition* This,
        __x_ABI_CWindows_CUI_CXaml_CMedia_CAnimation_CITransition* value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* SetAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CMedia__CAnimation__CTransition* This,
        UINT32 index,
        __x_ABI_CWindows_CUI_CXaml_CMedia_CAnimation_CITransition* value);
    HRESULT (STDMETHODCALLTYPE* InsertAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CMedia__CAnimation__CTransition* This,
        UINT32 index,
        __x_ABI_CWindows_CUI_CXaml_CMedia_CAnimation_CITransition* value);
    HRESULT (STDMETHODCALLTYPE* RemoveAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CMedia__CAnimation__CTransition* This,
        UINT32 index);
    HRESULT (STDMETHODCALLTYPE* Append)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CMedia__CAnimation__CTransition* This,
        __x_ABI_CWindows_CUI_CXaml_CMedia_CAnimation_CITransition* value);
    HRESULT (STDMETHODCALLTYPE* RemoveAtEnd)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CMedia__CAnimation__CTransition* This);
    HRESULT (STDMETHODCALLTYPE* Clear)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CMedia__CAnimation__CTransition* This);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CMedia__CAnimation__CTransition* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        __x_ABI_CWindows_CUI_CXaml_CMedia_CAnimation_CITransition** items,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* ReplaceAll)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CMedia__CAnimation__CTransition* This,
        UINT32 itemsLength,
        __x_ABI_CWindows_CUI_CXaml_CMedia_CAnimation_CITransition** items);

        END_INTERFACE
    } __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CMedia__CAnimation__CTransitionVtbl;

    interface __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CMedia__CAnimation__CTransition
    {
        CONST_VTBL struct __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CMedia__CAnimation__CTransitionVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CMedia__CAnimation__CTransition_INTERFACE_DEFINED__
    
#ifndef ____x_ABI_CWindows_CUI_CXaml_CMedia_CIBrush_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CMedia_CIBrush_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CMedia_CIBrush __x_ABI_CWindows_CUI_CXaml_CMedia_CIBrush;

#endif // ____x_ABI_CWindows_CUI_CXaml_CMedia_CIBrush_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CMedia_CICacheMode_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CMedia_CICacheMode_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CMedia_CICacheMode __x_ABI_CWindows_CUI_CXaml_CMedia_CICacheMode;

#endif // ____x_ABI_CWindows_CUI_CXaml_CMedia_CICacheMode_FWD_DEFINED__

typedef enum __x_ABI_CWindows_CUI_CXaml_CMedia_CElementCompositeMode __x_ABI_CWindows_CUI_CXaml_CMedia_CElementCompositeMode;

#ifndef ____x_ABI_CWindows_CUI_CXaml_CMedia_CIGeneralTransform_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CMedia_CIGeneralTransform_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CMedia_CIGeneralTransform __x_ABI_CWindows_CUI_CXaml_CMedia_CIGeneralTransform;

#endif // ____x_ABI_CWindows_CUI_CXaml_CMedia_CIGeneralTransform_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CMedia_CImaging_CIBitmapImage_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CMedia_CImaging_CIBitmapImage_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CMedia_CImaging_CIBitmapImage __x_ABI_CWindows_CUI_CXaml_CMedia_CImaging_CIBitmapImage;

#endif // ____x_ABI_CWindows_CUI_CXaml_CMedia_CImaging_CIBitmapImage_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CMedia_CMedia3D_CITransform3D_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CMedia_CMedia3D_CITransform3D_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CMedia_CMedia3D_CITransform3D __x_ABI_CWindows_CUI_CXaml_CMedia_CMedia3D_CITransform3D;

#endif // ____x_ABI_CWindows_CUI_CXaml_CMedia_CMedia3D_CITransform3D_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CMedia_CIProjection_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CMedia_CIProjection_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CMedia_CIProjection __x_ABI_CWindows_CUI_CXaml_CMedia_CIProjection;

#endif // ____x_ABI_CWindows_CUI_CXaml_CMedia_CIProjection_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CMedia_CIRectangleGeometry_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CMedia_CIRectangleGeometry_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CMedia_CIRectangleGeometry __x_ABI_CWindows_CUI_CXaml_CMedia_CIRectangleGeometry;

#endif // ____x_ABI_CWindows_CUI_CXaml_CMedia_CIRectangleGeometry_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CMedia_CIShadow_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CMedia_CIShadow_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CMedia_CIShadow __x_ABI_CWindows_CUI_CXaml_CMedia_CIShadow;

#endif // ____x_ABI_CWindows_CUI_CXaml_CMedia_CIShadow_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CMedia_CITransform_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CMedia_CITransform_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CMedia_CITransform __x_ABI_CWindows_CUI_CXaml_CMedia_CITransform;

#endif // ____x_ABI_CWindows_CUI_CXaml_CMedia_CITransform_FWD_DEFINED__

typedef enum __x_ABI_CWindows_CUI_CXaml_CApplicationHighContrastAdjustment __x_ABI_CWindows_CUI_CXaml_CApplicationHighContrastAdjustment;

typedef enum __x_ABI_CWindows_CUI_CXaml_CApplicationRequiresPointerMode __x_ABI_CWindows_CUI_CXaml_CApplicationRequiresPointerMode;

typedef enum __x_ABI_CWindows_CUI_CXaml_CApplicationTheme __x_ABI_CWindows_CUI_CXaml_CApplicationTheme;

typedef enum __x_ABI_CWindows_CUI_CXaml_CDurationType __x_ABI_CWindows_CUI_CXaml_CDurationType;

typedef enum __x_ABI_CWindows_CUI_CXaml_CElementHighContrastAdjustment __x_ABI_CWindows_CUI_CXaml_CElementHighContrastAdjustment;

typedef enum __x_ABI_CWindows_CUI_CXaml_CElementSoundKind __x_ABI_CWindows_CUI_CXaml_CElementSoundKind;

typedef enum __x_ABI_CWindows_CUI_CXaml_CElementSoundPlayerState __x_ABI_CWindows_CUI_CXaml_CElementSoundPlayerState;

typedef enum __x_ABI_CWindows_CUI_CXaml_CElementSpatialAudioMode __x_ABI_CWindows_CUI_CXaml_CElementSpatialAudioMode;

typedef enum __x_ABI_CWindows_CUI_CXaml_CElementTheme __x_ABI_CWindows_CUI_CXaml_CElementTheme;

typedef enum __x_ABI_CWindows_CUI_CXaml_CFlowDirection __x_ABI_CWindows_CUI_CXaml_CFlowDirection;

typedef enum __x_ABI_CWindows_CUI_CXaml_CFocusVisualKind __x_ABI_CWindows_CUI_CXaml_CFocusVisualKind;

typedef enum __x_ABI_CWindows_CUI_CXaml_CGridUnitType __x_ABI_CWindows_CUI_CXaml_CGridUnitType;

typedef enum __x_ABI_CWindows_CUI_CXaml_CHorizontalAlignment __x_ABI_CWindows_CUI_CXaml_CHorizontalAlignment;

typedef enum __x_ABI_CWindows_CUI_CXaml_CVector3TransitionComponents __x_ABI_CWindows_CUI_CXaml_CVector3TransitionComponents;

typedef enum __x_ABI_CWindows_CUI_CXaml_CVerticalAlignment __x_ABI_CWindows_CUI_CXaml_CVerticalAlignment;

typedef enum __x_ABI_CWindows_CUI_CXaml_CVisibility __x_ABI_CWindows_CUI_CXaml_CVisibility;

typedef struct __x_ABI_CWindows_CUI_CXaml_CCornerRadius __x_ABI_CWindows_CUI_CXaml_CCornerRadius;

typedef struct __x_ABI_CWindows_CUI_CXaml_CDuration __x_ABI_CWindows_CUI_CXaml_CDuration;

typedef struct __x_ABI_CWindows_CUI_CXaml_CGridLength __x_ABI_CWindows_CUI_CXaml_CGridLength;

typedef struct __x_ABI_CWindows_CUI_CXaml_CThickness __x_ABI_CWindows_CUI_CXaml_CThickness;

enum __x_ABI_CWindows_CUI_CXaml_CApplicationHighContrastAdjustment
    {
        __x_ABI_CWindows_CUI_CXaml_CApplicationHighContrastAdjustment_None = 0,
    __x_ABI_CWindows_CUI_CXaml_CApplicationHighContrastAdjustment_Auto = 0xffffffff,
};

enum __x_ABI_CWindows_CUI_CXaml_CApplicationRequiresPointerMode
    {
        __x_ABI_CWindows_CUI_CXaml_CApplicationRequiresPointerMode_Auto = 0,
    __x_ABI_CWindows_CUI_CXaml_CApplicationRequiresPointerMode_WhenRequested = 1,
};

enum __x_ABI_CWindows_CUI_CXaml_CApplicationTheme
    {
        __x_ABI_CWindows_CUI_CXaml_CApplicationTheme_Light = 0,
    __x_ABI_CWindows_CUI_CXaml_CApplicationTheme_Dark = 1,
};

enum __x_ABI_CWindows_CUI_CXaml_CAutomationTextAttributesEnum
    {
        __x_ABI_CWindows_CUI_CXaml_CAutomationTextAttributesEnum_AnimationStyleAttribute = 40000,
    __x_ABI_CWindows_CUI_CXaml_CAutomationTextAttributesEnum_BackgroundColorAttribute = 40001,
    __x_ABI_CWindows_CUI_CXaml_CAutomationTextAttributesEnum_BulletStyleAttribute = 40002,
    __x_ABI_CWindows_CUI_CXaml_CAutomationTextAttributesEnum_CapStyleAttribute = 40003,
    __x_ABI_CWindows_CUI_CXaml_CAutomationTextAttributesEnum_CultureAttribute = 40004,
    __x_ABI_CWindows_CUI_CXaml_CAutomationTextAttributesEnum_FontNameAttribute = 40005,
    __x_ABI_CWindows_CUI_CXaml_CAutomationTextAttributesEnum_FontSizeAttribute = 40006,
    __x_ABI_CWindows_CUI_CXaml_CAutomationTextAttributesEnum_FontWeightAttribute = 40007,
    __x_ABI_CWindows_CUI_CXaml_CAutomationTextAttributesEnum_ForegroundColorAttribute = 40008,
    __x_ABI_CWindows_CUI_CXaml_CAutomationTextAttributesEnum_HorizontalTextAlignmentAttribute = 40009,
    __x_ABI_CWindows_CUI_CXaml_CAutomationTextAttributesEnum_IndentationFirstLineAttribute = 40010,
    __x_ABI_CWindows_CUI_CXaml_CAutomationTextAttributesEnum_IndentationLeadingAttribute = 40011,
    __x_ABI_CWindows_CUI_CXaml_CAutomationTextAttributesEnum_IndentationTrailingAttribute = 40012,
    __x_ABI_CWindows_CUI_CXaml_CAutomationTextAttributesEnum_IsHiddenAttribute = 40013,
    __x_ABI_CWindows_CUI_CXaml_CAutomationTextAttributesEnum_IsItalicAttribute = 40014,
    __x_ABI_CWindows_CUI_CXaml_CAutomationTextAttributesEnum_IsReadOnlyAttribute = 40015,
    __x_ABI_CWindows_CUI_CXaml_CAutomationTextAttributesEnum_IsSubscriptAttribute = 40016,
    __x_ABI_CWindows_CUI_CXaml_CAutomationTextAttributesEnum_IsSuperscriptAttribute = 40017,
    __x_ABI_CWindows_CUI_CXaml_CAutomationTextAttributesEnum_MarginBottomAttribute = 40018,
    __x_ABI_CWindows_CUI_CXaml_CAutomationTextAttributesEnum_MarginLeadingAttribute = 40019,
    __x_ABI_CWindows_CUI_CXaml_CAutomationTextAttributesEnum_MarginTopAttribute = 40020,
    __x_ABI_CWindows_CUI_CXaml_CAutomationTextAttributesEnum_MarginTrailingAttribute = 40021,
    __x_ABI_CWindows_CUI_CXaml_CAutomationTextAttributesEnum_OutlineStylesAttribute = 40022,
    __x_ABI_CWindows_CUI_CXaml_CAutomationTextAttributesEnum_OverlineColorAttribute = 40023,
    __x_ABI_CWindows_CUI_CXaml_CAutomationTextAttributesEnum_OverlineStyleAttribute = 40024,
    __x_ABI_CWindows_CUI_CXaml_CAutomationTextAttributesEnum_StrikethroughColorAttribute = 40025,
    __x_ABI_CWindows_CUI_CXaml_CAutomationTextAttributesEnum_StrikethroughStyleAttribute = 40026,
    __x_ABI_CWindows_CUI_CXaml_CAutomationTextAttributesEnum_TabsAttribute = 40027,
    __x_ABI_CWindows_CUI_CXaml_CAutomationTextAttributesEnum_TextFlowDirectionsAttribute = 40028,
    __x_ABI_CWindows_CUI_CXaml_CAutomationTextAttributesEnum_UnderlineColorAttribute = 40029,
    __x_ABI_CWindows_CUI_CXaml_CAutomationTextAttributesEnum_UnderlineStyleAttribute = 40030,
    __x_ABI_CWindows_CUI_CXaml_CAutomationTextAttributesEnum_AnnotationTypesAttribute = 40031,
    __x_ABI_CWindows_CUI_CXaml_CAutomationTextAttributesEnum_AnnotationObjectsAttribute = 40032,
    __x_ABI_CWindows_CUI_CXaml_CAutomationTextAttributesEnum_StyleNameAttribute = 40033,
    __x_ABI_CWindows_CUI_CXaml_CAutomationTextAttributesEnum_StyleIdAttribute = 40034,
    __x_ABI_CWindows_CUI_CXaml_CAutomationTextAttributesEnum_LinkAttribute = 40035,
    __x_ABI_CWindows_CUI_CXaml_CAutomationTextAttributesEnum_IsActiveAttribute = 40036,
    __x_ABI_CWindows_CUI_CXaml_CAutomationTextAttributesEnum_SelectionActiveEndAttribute = 40037,
    __x_ABI_CWindows_CUI_CXaml_CAutomationTextAttributesEnum_CaretPositionAttribute = 40038,
    __x_ABI_CWindows_CUI_CXaml_CAutomationTextAttributesEnum_CaretBidiModeAttribute = 40039,
};

enum __x_ABI_CWindows_CUI_CXaml_CDurationType
    {
        __x_ABI_CWindows_CUI_CXaml_CDurationType_Automatic = 0,
    __x_ABI_CWindows_CUI_CXaml_CDurationType_TimeSpan = 1,
    __x_ABI_CWindows_CUI_CXaml_CDurationType_Forever = 2,
};

enum __x_ABI_CWindows_CUI_CXaml_CElementHighContrastAdjustment
    {
        __x_ABI_CWindows_CUI_CXaml_CElementHighContrastAdjustment_None = 0,
    __x_ABI_CWindows_CUI_CXaml_CElementHighContrastAdjustment_Application = 0x80000000,
    __x_ABI_CWindows_CUI_CXaml_CElementHighContrastAdjustment_Auto = 0xffffffff,
};

enum __x_ABI_CWindows_CUI_CXaml_CElementSoundKind
    {
        __x_ABI_CWindows_CUI_CXaml_CElementSoundKind_Focus = 0,
    __x_ABI_CWindows_CUI_CXaml_CElementSoundKind_Invoke = 1,
    __x_ABI_CWindows_CUI_CXaml_CElementSoundKind_Show = 2,
    __x_ABI_CWindows_CUI_CXaml_CElementSoundKind_Hide = 3,
    __x_ABI_CWindows_CUI_CXaml_CElementSoundKind_MovePrevious = 4,
    __x_ABI_CWindows_CUI_CXaml_CElementSoundKind_MoveNext = 5,
    __x_ABI_CWindows_CUI_CXaml_CElementSoundKind_GoBack = 6,
};

enum __x_ABI_CWindows_CUI_CXaml_CElementSoundMode
    {
        __x_ABI_CWindows_CUI_CXaml_CElementSoundMode_Default = 0,
    __x_ABI_CWindows_CUI_CXaml_CElementSoundMode_FocusOnly = 1,
    __x_ABI_CWindows_CUI_CXaml_CElementSoundMode_Off = 2,
};

enum __x_ABI_CWindows_CUI_CXaml_CElementSoundPlayerState
    {
        __x_ABI_CWindows_CUI_CXaml_CElementSoundPlayerState_Auto = 0,
    __x_ABI_CWindows_CUI_CXaml_CElementSoundPlayerState_Off = 1,
    __x_ABI_CWindows_CUI_CXaml_CElementSoundPlayerState_On = 2,
};

enum __x_ABI_CWindows_CUI_CXaml_CElementSpatialAudioMode
    {
        __x_ABI_CWindows_CUI_CXaml_CElementSpatialAudioMode_Auto = 0,
    __x_ABI_CWindows_CUI_CXaml_CElementSpatialAudioMode_Off = 1,
    __x_ABI_CWindows_CUI_CXaml_CElementSpatialAudioMode_On = 2,
};

enum __x_ABI_CWindows_CUI_CXaml_CElementTheme
    {
        __x_ABI_CWindows_CUI_CXaml_CElementTheme_Default = 0,
    __x_ABI_CWindows_CUI_CXaml_CElementTheme_Light = 1,
    __x_ABI_CWindows_CUI_CXaml_CElementTheme_Dark = 2,
};

enum __x_ABI_CWindows_CUI_CXaml_CFlowDirection
    {
        __x_ABI_CWindows_CUI_CXaml_CFlowDirection_LeftToRight = 0,
    __x_ABI_CWindows_CUI_CXaml_CFlowDirection_RightToLeft = 1,
};

enum __x_ABI_CWindows_CUI_CXaml_CFocusState
    {
        __x_ABI_CWindows_CUI_CXaml_CFocusState_Unfocused = 0,
    __x_ABI_CWindows_CUI_CXaml_CFocusState_Pointer = 1,
    __x_ABI_CWindows_CUI_CXaml_CFocusState_Keyboard = 2,
    __x_ABI_CWindows_CUI_CXaml_CFocusState_Programmatic = 3,
};

enum __x_ABI_CWindows_CUI_CXaml_CFocusVisualKind
    {
        __x_ABI_CWindows_CUI_CXaml_CFocusVisualKind_DottedLine = 0,
    __x_ABI_CWindows_CUI_CXaml_CFocusVisualKind_HighVisibility = 1,
    __x_ABI_CWindows_CUI_CXaml_CFocusVisualKind_Reveal = 2,
};

enum __x_ABI_CWindows_CUI_CXaml_CFontCapitals
    {
        __x_ABI_CWindows_CUI_CXaml_CFontCapitals_Normal = 0,
    __x_ABI_CWindows_CUI_CXaml_CFontCapitals_AllSmallCaps = 1,
    __x_ABI_CWindows_CUI_CXaml_CFontCapitals_SmallCaps = 2,
    __x_ABI_CWindows_CUI_CXaml_CFontCapitals_AllPetiteCaps = 3,
    __x_ABI_CWindows_CUI_CXaml_CFontCapitals_PetiteCaps = 4,
    __x_ABI_CWindows_CUI_CXaml_CFontCapitals_Unicase = 5,
    __x_ABI_CWindows_CUI_CXaml_CFontCapitals_Titling = 6,
};

enum __x_ABI_CWindows_CUI_CXaml_CFontEastAsianLanguage
    {
        __x_ABI_CWindows_CUI_CXaml_CFontEastAsianLanguage_Normal = 0,
    __x_ABI_CWindows_CUI_CXaml_CFontEastAsianLanguage_HojoKanji = 1,
    __x_ABI_CWindows_CUI_CXaml_CFontEastAsianLanguage_Jis04 = 2,
    __x_ABI_CWindows_CUI_CXaml_CFontEastAsianLanguage_Jis78 = 3,
    __x_ABI_CWindows_CUI_CXaml_CFontEastAsianLanguage_Jis83 = 4,
    __x_ABI_CWindows_CUI_CXaml_CFontEastAsianLanguage_Jis90 = 5,
    __x_ABI_CWindows_CUI_CXaml_CFontEastAsianLanguage_NlcKanji = 6,
    __x_ABI_CWindows_CUI_CXaml_CFontEastAsianLanguage_Simplified = 7,
    __x_ABI_CWindows_CUI_CXaml_CFontEastAsianLanguage_Traditional = 8,
    __x_ABI_CWindows_CUI_CXaml_CFontEastAsianLanguage_TraditionalNames = 9,
};

enum __x_ABI_CWindows_CUI_CXaml_CFontEastAsianWidths
    {
        __x_ABI_CWindows_CUI_CXaml_CFontEastAsianWidths_Normal = 0,
    __x_ABI_CWindows_CUI_CXaml_CFontEastAsianWidths_Full = 1,
    __x_ABI_CWindows_CUI_CXaml_CFontEastAsianWidths_Half = 2,
    __x_ABI_CWindows_CUI_CXaml_CFontEastAsianWidths_Proportional = 3,
    __x_ABI_CWindows_CUI_CXaml_CFontEastAsianWidths_Quarter = 4,
    __x_ABI_CWindows_CUI_CXaml_CFontEastAsianWidths_Third = 5,
};

enum __x_ABI_CWindows_CUI_CXaml_CFontFraction
    {
        __x_ABI_CWindows_CUI_CXaml_CFontFraction_Normal = 0,
    __x_ABI_CWindows_CUI_CXaml_CFontFraction_Stacked = 1,
    __x_ABI_CWindows_CUI_CXaml_CFontFraction_Slashed = 2,
};

enum __x_ABI_CWindows_CUI_CXaml_CFontNumeralAlignment
    {
        __x_ABI_CWindows_CUI_CXaml_CFontNumeralAlignment_Normal = 0,
    __x_ABI_CWindows_CUI_CXaml_CFontNumeralAlignment_Proportional = 1,
    __x_ABI_CWindows_CUI_CXaml_CFontNumeralAlignment_Tabular = 2,
};

enum __x_ABI_CWindows_CUI_CXaml_CFontNumeralStyle
    {
        __x_ABI_CWindows_CUI_CXaml_CFontNumeralStyle_Normal = 0,
    __x_ABI_CWindows_CUI_CXaml_CFontNumeralStyle_Lining = 1,
    __x_ABI_CWindows_CUI_CXaml_CFontNumeralStyle_OldStyle = 2,
};

enum __x_ABI_CWindows_CUI_CXaml_CFontVariants
    {
        __x_ABI_CWindows_CUI_CXaml_CFontVariants_Normal = 0,
    __x_ABI_CWindows_CUI_CXaml_CFontVariants_Superscript = 1,
    __x_ABI_CWindows_CUI_CXaml_CFontVariants_Subscript = 2,
    __x_ABI_CWindows_CUI_CXaml_CFontVariants_Ordinal = 3,
    __x_ABI_CWindows_CUI_CXaml_CFontVariants_Inferior = 4,
    __x_ABI_CWindows_CUI_CXaml_CFontVariants_Ruby = 5,
};

enum __x_ABI_CWindows_CUI_CXaml_CGridUnitType
    {
        __x_ABI_CWindows_CUI_CXaml_CGridUnitType_Auto = 0,
    __x_ABI_CWindows_CUI_CXaml_CGridUnitType_Pixel = 1,
    __x_ABI_CWindows_CUI_CXaml_CGridUnitType_Star = 2,
};

enum __x_ABI_CWindows_CUI_CXaml_CHorizontalAlignment
    {
        __x_ABI_CWindows_CUI_CXaml_CHorizontalAlignment_Left = 0,
    __x_ABI_CWindows_CUI_CXaml_CHorizontalAlignment_Center = 1,
    __x_ABI_CWindows_CUI_CXaml_CHorizontalAlignment_Right = 2,
    __x_ABI_CWindows_CUI_CXaml_CHorizontalAlignment_Stretch = 3,
};

enum __x_ABI_CWindows_CUI_CXaml_CLineStackingStrategy
    {
        __x_ABI_CWindows_CUI_CXaml_CLineStackingStrategy_MaxHeight = 0,
    __x_ABI_CWindows_CUI_CXaml_CLineStackingStrategy_BlockLineHeight = 1,
    __x_ABI_CWindows_CUI_CXaml_CLineStackingStrategy_BaselineToBaseline = 2,
};

enum __x_ABI_CWindows_CUI_CXaml_COpticalMarginAlignment
    {
        __x_ABI_CWindows_CUI_CXaml_COpticalMarginAlignment_None = 0,
    __x_ABI_CWindows_CUI_CXaml_COpticalMarginAlignment_TrimSideBearings = 1,
};

enum __x_ABI_CWindows_CUI_CXaml_CTextAlignment
    {
        __x_ABI_CWindows_CUI_CXaml_CTextAlignment_Center = 0,
    __x_ABI_CWindows_CUI_CXaml_CTextAlignment_Left = 1,
    __x_ABI_CWindows_CUI_CXaml_CTextAlignment_Start = 1,
    __x_ABI_CWindows_CUI_CXaml_CTextAlignment_Right = 2,
    __x_ABI_CWindows_CUI_CXaml_CTextAlignment_End = 2,
    __x_ABI_CWindows_CUI_CXaml_CTextAlignment_Justify = 3,
    __x_ABI_CWindows_CUI_CXaml_CTextAlignment_DetectFromContent = 4,
};

enum __x_ABI_CWindows_CUI_CXaml_CTextLineBounds
    {
        __x_ABI_CWindows_CUI_CXaml_CTextLineBounds_Full = 0,
    __x_ABI_CWindows_CUI_CXaml_CTextLineBounds_TrimToCapHeight = 1,
    __x_ABI_CWindows_CUI_CXaml_CTextLineBounds_TrimToBaseline = 2,
    __x_ABI_CWindows_CUI_CXaml_CTextLineBounds_Tight = 3,
};

enum __x_ABI_CWindows_CUI_CXaml_CTextReadingOrder
    {
        __x_ABI_CWindows_CUI_CXaml_CTextReadingOrder_Default = 0,
    __x_ABI_CWindows_CUI_CXaml_CTextReadingOrder_UseFlowDirection = 0,
    __x_ABI_CWindows_CUI_CXaml_CTextReadingOrder_DetectFromContent = 1,
};

enum __x_ABI_CWindows_CUI_CXaml_CTextTrimming
    {
        __x_ABI_CWindows_CUI_CXaml_CTextTrimming_None = 0,
    __x_ABI_CWindows_CUI_CXaml_CTextTrimming_CharacterEllipsis = 1,
    __x_ABI_CWindows_CUI_CXaml_CTextTrimming_WordEllipsis = 2,
    __x_ABI_CWindows_CUI_CXaml_CTextTrimming_Clip = 3,
};

enum __x_ABI_CWindows_CUI_CXaml_CTextWrapping
    {
        __x_ABI_CWindows_CUI_CXaml_CTextWrapping_NoWrap = 1,
    __x_ABI_CWindows_CUI_CXaml_CTextWrapping_Wrap = 2,
    __x_ABI_CWindows_CUI_CXaml_CTextWrapping_WrapWholeWords = 3,
};

enum __x_ABI_CWindows_CUI_CXaml_CVector3TransitionComponents
    {
        __x_ABI_CWindows_CUI_CXaml_CVector3TransitionComponents_X = 0x1,
    __x_ABI_CWindows_CUI_CXaml_CVector3TransitionComponents_Y = 0x2,
    __x_ABI_CWindows_CUI_CXaml_CVector3TransitionComponents_Z = 0x4,
};

enum __x_ABI_CWindows_CUI_CXaml_CVerticalAlignment
    {
        __x_ABI_CWindows_CUI_CXaml_CVerticalAlignment_Top = 0,
    __x_ABI_CWindows_CUI_CXaml_CVerticalAlignment_Center = 1,
    __x_ABI_CWindows_CUI_CXaml_CVerticalAlignment_Bottom = 2,
    __x_ABI_CWindows_CUI_CXaml_CVerticalAlignment_Stretch = 3,
};

enum __x_ABI_CWindows_CUI_CXaml_CVisibility
    {
        __x_ABI_CWindows_CUI_CXaml_CVisibility_Visible = 0,
    __x_ABI_CWindows_CUI_CXaml_CVisibility_Collapsed = 1,
};

struct __x_ABI_CWindows_CUI_CXaml_CCornerRadius
    {
        DOUBLE TopLeft;
    DOUBLE TopRight;
    DOUBLE BottomRight;
    DOUBLE BottomLeft;
};

struct __x_ABI_CWindows_CUI_CXaml_CDuration
    {
        struct __x_ABI_CWindows_CFoundation_CTimeSpan TimeSpan;
    enum __x_ABI_CWindows_CUI_CXaml_CDurationType Type;
};

struct __x_ABI_CWindows_CUI_CXaml_CGridLength
    {
        DOUBLE Value;
    enum __x_ABI_CWindows_CUI_CXaml_CGridUnitType GridUnitType;
};

struct __x_ABI_CWindows_CUI_CXaml_CThickness
    {
        DOUBLE Left;
    DOUBLE Top;
    DOUBLE Right;
    DOUBLE Bottom;
};

#if !defined(____x_ABI_CWindows_CUI_CXaml_CIApplicationInitializationCallback_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CIApplicationInitializationCallback_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CIApplicationInitializationCallbackVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CIApplicationInitializationCallback* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CIApplicationInitializationCallback* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CIApplicationInitializationCallback* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_CWindows_CUI_CXaml_CIApplicationInitializationCallback* This,
        __x_ABI_CWindows_CUI_CXaml_CIApplicationInitializationCallbackParams* p);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CIApplicationInitializationCallbackVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CIApplicationInitializationCallback
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CIApplicationInitializationCallbackVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CIApplicationInitializationCallback;
    #endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CIApplicationInitializationCallback_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CIBindingFailedEventHandler_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CIBindingFailedEventHandler_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CIBindingFailedEventHandlerVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CIBindingFailedEventHandler* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CIBindingFailedEventHandler* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CIBindingFailedEventHandler* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_CWindows_CUI_CXaml_CIBindingFailedEventHandler* This,
        IInspectable* sender,
        __x_ABI_CWindows_CUI_CXaml_CIBindingFailedEventArgs* e);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CIBindingFailedEventHandlerVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CIBindingFailedEventHandler
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CIBindingFailedEventHandlerVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CIBindingFailedEventHandler;
    #endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CIBindingFailedEventHandler_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CICreateDefaultValueCallback_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CICreateDefaultValueCallback_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CICreateDefaultValueCallbackVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CICreateDefaultValueCallback* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CICreateDefaultValueCallback* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CICreateDefaultValueCallback* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_CWindows_CUI_CXaml_CICreateDefaultValueCallback* This,
        IInspectable** result);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CICreateDefaultValueCallbackVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CICreateDefaultValueCallback
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CICreateDefaultValueCallbackVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CICreateDefaultValueCallback;
    #endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CICreateDefaultValueCallback_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CIDependencyPropertyChangedCallback_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CIDependencyPropertyChangedCallback_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CIDependencyPropertyChangedCallbackVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CIDependencyPropertyChangedCallback* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CIDependencyPropertyChangedCallback* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CIDependencyPropertyChangedCallback* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_CWindows_CUI_CXaml_CIDependencyPropertyChangedCallback* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyObject* sender,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty* dp);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CIDependencyPropertyChangedCallbackVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CIDependencyPropertyChangedCallback
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CIDependencyPropertyChangedCallbackVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CIDependencyPropertyChangedCallback;
    #endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CIDependencyPropertyChangedCallback_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CIDependencyPropertyChangedEventHandler_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CIDependencyPropertyChangedEventHandler_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CIDependencyPropertyChangedEventHandlerVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CIDependencyPropertyChangedEventHandler* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CIDependencyPropertyChangedEventHandler* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CIDependencyPropertyChangedEventHandler* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_CWindows_CUI_CXaml_CIDependencyPropertyChangedEventHandler* This,
        IInspectable* sender,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyPropertyChangedEventArgs* e);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CIDependencyPropertyChangedEventHandlerVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CIDependencyPropertyChangedEventHandler
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CIDependencyPropertyChangedEventHandlerVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CIDependencyPropertyChangedEventHandler;
    #endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CIDependencyPropertyChangedEventHandler_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CIDragEventHandler_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CIDragEventHandler_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CIDragEventHandlerVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CIDragEventHandler* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CIDragEventHandler* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CIDragEventHandler* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_CWindows_CUI_CXaml_CIDragEventHandler* This,
        IInspectable* sender,
        __x_ABI_CWindows_CUI_CXaml_CIDragEventArgs* e);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CIDragEventHandlerVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CIDragEventHandler
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CIDragEventHandlerVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CIDragEventHandler;
    #endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CIDragEventHandler_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CIEnteredBackgroundEventHandler_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CIEnteredBackgroundEventHandler_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CIEnteredBackgroundEventHandlerVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CIEnteredBackgroundEventHandler* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CIEnteredBackgroundEventHandler* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CIEnteredBackgroundEventHandler* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_CWindows_CUI_CXaml_CIEnteredBackgroundEventHandler* This,
        IInspectable* sender,
        __x_ABI_CWindows_CApplicationModel_CIEnteredBackgroundEventArgs* e);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CIEnteredBackgroundEventHandlerVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CIEnteredBackgroundEventHandler
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CIEnteredBackgroundEventHandlerVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CIEnteredBackgroundEventHandler;
    #endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CIEnteredBackgroundEventHandler_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CIExceptionRoutedEventHandler_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CIExceptionRoutedEventHandler_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CIExceptionRoutedEventHandlerVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CIExceptionRoutedEventHandler* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CIExceptionRoutedEventHandler* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CIExceptionRoutedEventHandler* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_CWindows_CUI_CXaml_CIExceptionRoutedEventHandler* This,
        IInspectable* sender,
        __x_ABI_CWindows_CUI_CXaml_CIExceptionRoutedEventArgs* e);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CIExceptionRoutedEventHandlerVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CIExceptionRoutedEventHandler
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CIExceptionRoutedEventHandlerVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CIExceptionRoutedEventHandler;
    #endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CIExceptionRoutedEventHandler_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CILeavingBackgroundEventHandler_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CILeavingBackgroundEventHandler_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CILeavingBackgroundEventHandlerVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CILeavingBackgroundEventHandler* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CILeavingBackgroundEventHandler* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CILeavingBackgroundEventHandler* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_CWindows_CUI_CXaml_CILeavingBackgroundEventHandler* This,
        IInspectable* sender,
        __x_ABI_CWindows_CApplicationModel_CILeavingBackgroundEventArgs* e);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CILeavingBackgroundEventHandlerVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CILeavingBackgroundEventHandler
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CILeavingBackgroundEventHandlerVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CILeavingBackgroundEventHandler;
    #endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CILeavingBackgroundEventHandler_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CIPropertyChangedCallback_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CIPropertyChangedCallback_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CIPropertyChangedCallbackVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CIPropertyChangedCallback* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CIPropertyChangedCallback* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CIPropertyChangedCallback* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_CWindows_CUI_CXaml_CIPropertyChangedCallback* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyObject* d,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyPropertyChangedEventArgs* e);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CIPropertyChangedCallbackVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CIPropertyChangedCallback
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CIPropertyChangedCallbackVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CIPropertyChangedCallback;
    #endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CIPropertyChangedCallback_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CIRoutedEventHandler_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CIRoutedEventHandler_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CIRoutedEventHandlerVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CIRoutedEventHandler* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CIRoutedEventHandler* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CIRoutedEventHandler* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_CWindows_CUI_CXaml_CIRoutedEventHandler* This,
        IInspectable* sender,
        __x_ABI_CWindows_CUI_CXaml_CIRoutedEventArgs* e);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CIRoutedEventHandlerVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CIRoutedEventHandler
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CIRoutedEventHandlerVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CIRoutedEventHandler;
    #endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CIRoutedEventHandler_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CISizeChangedEventHandler_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CISizeChangedEventHandler_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CISizeChangedEventHandlerVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CISizeChangedEventHandler* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CISizeChangedEventHandler* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CISizeChangedEventHandler* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_CWindows_CUI_CXaml_CISizeChangedEventHandler* This,
        IInspectable* sender,
        __x_ABI_CWindows_CUI_CXaml_CISizeChangedEventArgs* e);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CISizeChangedEventHandlerVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CISizeChangedEventHandler
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CISizeChangedEventHandlerVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CISizeChangedEventHandler;
    #endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CISizeChangedEventHandler_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CISuspendingEventHandler_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CISuspendingEventHandler_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CISuspendingEventHandlerVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CISuspendingEventHandler* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CISuspendingEventHandler* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CISuspendingEventHandler* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_CWindows_CUI_CXaml_CISuspendingEventHandler* This,
        IInspectable* sender,
        __x_ABI_CWindows_CApplicationModel_CISuspendingEventArgs* e);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CISuspendingEventHandlerVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CISuspendingEventHandler
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CISuspendingEventHandlerVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CISuspendingEventHandler;
    #endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CISuspendingEventHandler_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CIUnhandledExceptionEventHandler_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CIUnhandledExceptionEventHandler_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CIUnhandledExceptionEventHandlerVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CIUnhandledExceptionEventHandler* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CIUnhandledExceptionEventHandler* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CIUnhandledExceptionEventHandler* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_CWindows_CUI_CXaml_CIUnhandledExceptionEventHandler* This,
        IInspectable* sender,
        __x_ABI_CWindows_CUI_CXaml_CIUnhandledExceptionEventArgs* e);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CIUnhandledExceptionEventHandlerVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CIUnhandledExceptionEventHandler
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CIUnhandledExceptionEventHandlerVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CIUnhandledExceptionEventHandler;
    #endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CIUnhandledExceptionEventHandler_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CIVisualStateChangedEventHandler_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CIVisualStateChangedEventHandler_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CIVisualStateChangedEventHandlerVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CIVisualStateChangedEventHandler* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CIVisualStateChangedEventHandler* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CIVisualStateChangedEventHandler* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_CWindows_CUI_CXaml_CIVisualStateChangedEventHandler* This,
        IInspectable* sender,
        __x_ABI_CWindows_CUI_CXaml_CIVisualStateChangedEventArgs* e);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CIVisualStateChangedEventHandlerVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CIVisualStateChangedEventHandler
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CIVisualStateChangedEventHandlerVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CIVisualStateChangedEventHandler;
    #endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CIVisualStateChangedEventHandler_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CIWindowActivatedEventHandler_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CIWindowActivatedEventHandler_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CIWindowActivatedEventHandlerVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CIWindowActivatedEventHandler* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CIWindowActivatedEventHandler* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CIWindowActivatedEventHandler* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_CWindows_CUI_CXaml_CIWindowActivatedEventHandler* This,
        IInspectable* sender,
        __x_ABI_CWindows_CUI_CCore_CIWindowActivatedEventArgs* e);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CIWindowActivatedEventHandlerVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CIWindowActivatedEventHandler
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CIWindowActivatedEventHandlerVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CIWindowActivatedEventHandler;
    #endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CIWindowActivatedEventHandler_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CIWindowClosedEventHandler_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CIWindowClosedEventHandler_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CIWindowClosedEventHandlerVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CIWindowClosedEventHandler* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CIWindowClosedEventHandler* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CIWindowClosedEventHandler* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_CWindows_CUI_CXaml_CIWindowClosedEventHandler* This,
        IInspectable* sender,
        __x_ABI_CWindows_CUI_CCore_CICoreWindowEventArgs* e);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CIWindowClosedEventHandlerVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CIWindowClosedEventHandler
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CIWindowClosedEventHandlerVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CIWindowClosedEventHandler;
    #endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CIWindowClosedEventHandler_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CIWindowSizeChangedEventHandler_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CIWindowSizeChangedEventHandler_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CIWindowSizeChangedEventHandlerVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CIWindowSizeChangedEventHandler* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CIWindowSizeChangedEventHandler* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CIWindowSizeChangedEventHandler* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_CWindows_CUI_CXaml_CIWindowSizeChangedEventHandler* This,
        IInspectable* sender,
        __x_ABI_CWindows_CUI_CCore_CIWindowSizeChangedEventArgs* e);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CIWindowSizeChangedEventHandlerVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CIWindowSizeChangedEventHandler
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CIWindowSizeChangedEventHandlerVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CIWindowSizeChangedEventHandler;
    #endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CIWindowSizeChangedEventHandler_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CIWindowVisibilityChangedEventHandler_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CIWindowVisibilityChangedEventHandler_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CIWindowVisibilityChangedEventHandlerVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CIWindowVisibilityChangedEventHandler* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CIWindowVisibilityChangedEventHandler* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CIWindowVisibilityChangedEventHandler* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_CWindows_CUI_CXaml_CIWindowVisibilityChangedEventHandler* This,
        IInspectable* sender,
        __x_ABI_CWindows_CUI_CCore_CIVisibilityChangedEventArgs* e);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CIWindowVisibilityChangedEventHandlerVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CIWindowVisibilityChangedEventHandler
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CIWindowVisibilityChangedEventHandlerVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CIWindowVisibilityChangedEventHandler;
    #endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CIWindowVisibilityChangedEventHandler_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CIAdaptiveTrigger_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CIAdaptiveTrigger_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CIAdaptiveTriggerVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CIAdaptiveTrigger* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CIAdaptiveTrigger* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CIAdaptiveTrigger* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CIAdaptiveTrigger* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CIAdaptiveTrigger* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CIAdaptiveTrigger* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_MinWindowWidth)(__x_ABI_CWindows_CUI_CXaml_CIAdaptiveTrigger* This,
        DOUBLE* value);
    HRESULT (STDMETHODCALLTYPE* put_MinWindowWidth)(__x_ABI_CWindows_CUI_CXaml_CIAdaptiveTrigger* This,
        DOUBLE value);
    HRESULT (STDMETHODCALLTYPE* get_MinWindowHeight)(__x_ABI_CWindows_CUI_CXaml_CIAdaptiveTrigger* This,
        DOUBLE* value);
    HRESULT (STDMETHODCALLTYPE* put_MinWindowHeight)(__x_ABI_CWindows_CUI_CXaml_CIAdaptiveTrigger* This,
        DOUBLE value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CIAdaptiveTriggerVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CIAdaptiveTrigger
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CIAdaptiveTriggerVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CIAdaptiveTrigger;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CIAdaptiveTrigger_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CIAdaptiveTriggerFactory_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CIAdaptiveTriggerFactory_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CIAdaptiveTriggerFactoryVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CIAdaptiveTriggerFactory* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CIAdaptiveTriggerFactory* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CIAdaptiveTriggerFactory* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CIAdaptiveTriggerFactory* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CIAdaptiveTriggerFactory* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CIAdaptiveTriggerFactory* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* CreateInstance)(__x_ABI_CWindows_CUI_CXaml_CIAdaptiveTriggerFactory* This,
        IInspectable* baseInterface,
        IInspectable** innerInterface,
        __x_ABI_CWindows_CUI_CXaml_CIAdaptiveTrigger** value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CIAdaptiveTriggerFactoryVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CIAdaptiveTriggerFactory
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CIAdaptiveTriggerFactoryVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CIAdaptiveTriggerFactory;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CIAdaptiveTriggerFactory_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CIAdaptiveTriggerStatics_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CIAdaptiveTriggerStatics_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CIAdaptiveTriggerStaticsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CIAdaptiveTriggerStatics* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CIAdaptiveTriggerStatics* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CIAdaptiveTriggerStatics* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CIAdaptiveTriggerStatics* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CIAdaptiveTriggerStatics* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CIAdaptiveTriggerStatics* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_MinWindowWidthProperty)(__x_ABI_CWindows_CUI_CXaml_CIAdaptiveTriggerStatics* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** value);
    HRESULT (STDMETHODCALLTYPE* get_MinWindowHeightProperty)(__x_ABI_CWindows_CUI_CXaml_CIAdaptiveTriggerStatics* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CIAdaptiveTriggerStaticsVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CIAdaptiveTriggerStatics
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CIAdaptiveTriggerStaticsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CIAdaptiveTriggerStatics;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CIAdaptiveTriggerStatics_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CIApplication_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CIApplication_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CIApplicationVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CIApplication* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CIApplication* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CIApplication* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CIApplication* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CIApplication* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CIApplication* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Resources)(__x_ABI_CWindows_CUI_CXaml_CIApplication* This,
        __x_ABI_CWindows_CUI_CXaml_CIResourceDictionary** value);
    HRESULT (STDMETHODCALLTYPE* put_Resources)(__x_ABI_CWindows_CUI_CXaml_CIApplication* This,
        __x_ABI_CWindows_CUI_CXaml_CIResourceDictionary* value);
    HRESULT (STDMETHODCALLTYPE* get_DebugSettings)(__x_ABI_CWindows_CUI_CXaml_CIApplication* This,
        __x_ABI_CWindows_CUI_CXaml_CIDebugSettings** value);
    HRESULT (STDMETHODCALLTYPE* get_RequestedTheme)(__x_ABI_CWindows_CUI_CXaml_CIApplication* This,
        enum __x_ABI_CWindows_CUI_CXaml_CApplicationTheme* value);
    HRESULT (STDMETHODCALLTYPE* put_RequestedTheme)(__x_ABI_CWindows_CUI_CXaml_CIApplication* This,
        enum __x_ABI_CWindows_CUI_CXaml_CApplicationTheme value);
    HRESULT (STDMETHODCALLTYPE* add_UnhandledException)(__x_ABI_CWindows_CUI_CXaml_CIApplication* This,
        __x_ABI_CWindows_CUI_CXaml_CIUnhandledExceptionEventHandler* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_UnhandledException)(__x_ABI_CWindows_CUI_CXaml_CIApplication* This,
        EventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* add_Suspending)(__x_ABI_CWindows_CUI_CXaml_CIApplication* This,
        __x_ABI_CWindows_CUI_CXaml_CISuspendingEventHandler* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_Suspending)(__x_ABI_CWindows_CUI_CXaml_CIApplication* This,
        EventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* add_Resuming)(__x_ABI_CWindows_CUI_CXaml_CIApplication* This,
        __x_ABI_C__FIEventHandler_1_IInspectable* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_Resuming)(__x_ABI_CWindows_CUI_CXaml_CIApplication* This,
        EventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* Exit)(__x_ABI_CWindows_CUI_CXaml_CIApplication* This);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CIApplicationVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CIApplication
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CIApplicationVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CIApplication;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CIApplication_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CIApplication2_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CIApplication2_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CIApplication2Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CIApplication2* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CIApplication2* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CIApplication2* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CIApplication2* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CIApplication2* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CIApplication2* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_FocusVisualKind)(__x_ABI_CWindows_CUI_CXaml_CIApplication2* This,
        enum __x_ABI_CWindows_CUI_CXaml_CFocusVisualKind* value);
    HRESULT (STDMETHODCALLTYPE* put_FocusVisualKind)(__x_ABI_CWindows_CUI_CXaml_CIApplication2* This,
        enum __x_ABI_CWindows_CUI_CXaml_CFocusVisualKind value);
    HRESULT (STDMETHODCALLTYPE* get_RequiresPointerMode)(__x_ABI_CWindows_CUI_CXaml_CIApplication2* This,
        enum __x_ABI_CWindows_CUI_CXaml_CApplicationRequiresPointerMode* value);
    HRESULT (STDMETHODCALLTYPE* put_RequiresPointerMode)(__x_ABI_CWindows_CUI_CXaml_CIApplication2* This,
        enum __x_ABI_CWindows_CUI_CXaml_CApplicationRequiresPointerMode value);
    HRESULT (STDMETHODCALLTYPE* add_LeavingBackground)(__x_ABI_CWindows_CUI_CXaml_CIApplication2* This,
        __x_ABI_CWindows_CUI_CXaml_CILeavingBackgroundEventHandler* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_LeavingBackground)(__x_ABI_CWindows_CUI_CXaml_CIApplication2* This,
        EventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* add_EnteredBackground)(__x_ABI_CWindows_CUI_CXaml_CIApplication2* This,
        __x_ABI_CWindows_CUI_CXaml_CIEnteredBackgroundEventHandler* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_EnteredBackground)(__x_ABI_CWindows_CUI_CXaml_CIApplication2* This,
        EventRegistrationToken token);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CIApplication2Vtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CIApplication2
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CIApplication2Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CIApplication2;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CIApplication2_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CIApplication3_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CIApplication3_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CIApplication3Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CIApplication3* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CIApplication3* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CIApplication3* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CIApplication3* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CIApplication3* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CIApplication3* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_HighContrastAdjustment)(__x_ABI_CWindows_CUI_CXaml_CIApplication3* This,
        enum __x_ABI_CWindows_CUI_CXaml_CApplicationHighContrastAdjustment* value);
    HRESULT (STDMETHODCALLTYPE* put_HighContrastAdjustment)(__x_ABI_CWindows_CUI_CXaml_CIApplication3* This,
        enum __x_ABI_CWindows_CUI_CXaml_CApplicationHighContrastAdjustment value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CIApplication3Vtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CIApplication3
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CIApplication3Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CIApplication3;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CIApplication3_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CIApplicationFactory_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CIApplicationFactory_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CIApplicationFactoryVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CIApplicationFactory* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CIApplicationFactory* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CIApplicationFactory* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CIApplicationFactory* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CIApplicationFactory* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CIApplicationFactory* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* CreateInstance)(__x_ABI_CWindows_CUI_CXaml_CIApplicationFactory* This,
        IInspectable* baseInterface,
        IInspectable** innerInterface,
        __x_ABI_CWindows_CUI_CXaml_CIApplication** value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CIApplicationFactoryVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CIApplicationFactory
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CIApplicationFactoryVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CIApplicationFactory;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CIApplicationFactory_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CIApplicationInitializationCallbackParams_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CIApplicationInitializationCallbackParams_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CIApplicationInitializationCallbackParamsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CIApplicationInitializationCallbackParams* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CIApplicationInitializationCallbackParams* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CIApplicationInitializationCallbackParams* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CIApplicationInitializationCallbackParams* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CIApplicationInitializationCallbackParams* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CIApplicationInitializationCallbackParams* This,
            TrustLevel* trustLevel);
    
        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CIApplicationInitializationCallbackParamsVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CIApplicationInitializationCallbackParams
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CIApplicationInitializationCallbackParamsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CIApplicationInitializationCallbackParams;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CIApplicationInitializationCallbackParams_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CIApplicationOverrides_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CIApplicationOverrides_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CIApplicationOverridesVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CIApplicationOverrides* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CIApplicationOverrides* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CIApplicationOverrides* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CIApplicationOverrides* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CIApplicationOverrides* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CIApplicationOverrides* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* OnActivated)(__x_ABI_CWindows_CUI_CXaml_CIApplicationOverrides* This,
        __x_ABI_CWindows_CApplicationModel_CActivation_CIActivatedEventArgs* args);
    HRESULT (STDMETHODCALLTYPE* OnLaunched)(__x_ABI_CWindows_CUI_CXaml_CIApplicationOverrides* This,
        __x_ABI_CWindows_CApplicationModel_CActivation_CILaunchActivatedEventArgs* args);
    HRESULT (STDMETHODCALLTYPE* OnFileActivated)(__x_ABI_CWindows_CUI_CXaml_CIApplicationOverrides* This,
        __x_ABI_CWindows_CApplicationModel_CActivation_CIFileActivatedEventArgs* args);
    HRESULT (STDMETHODCALLTYPE* OnSearchActivated)(__x_ABI_CWindows_CUI_CXaml_CIApplicationOverrides* This,
        __x_ABI_CWindows_CApplicationModel_CActivation_CISearchActivatedEventArgs* args);
    HRESULT (STDMETHODCALLTYPE* OnShareTargetActivated)(__x_ABI_CWindows_CUI_CXaml_CIApplicationOverrides* This,
        __x_ABI_CWindows_CApplicationModel_CActivation_CIShareTargetActivatedEventArgs* args);
    HRESULT (STDMETHODCALLTYPE* OnFileOpenPickerActivated)(__x_ABI_CWindows_CUI_CXaml_CIApplicationOverrides* This,
        __x_ABI_CWindows_CApplicationModel_CActivation_CIFileOpenPickerActivatedEventArgs* args);
    HRESULT (STDMETHODCALLTYPE* OnFileSavePickerActivated)(__x_ABI_CWindows_CUI_CXaml_CIApplicationOverrides* This,
        __x_ABI_CWindows_CApplicationModel_CActivation_CIFileSavePickerActivatedEventArgs* args);
    HRESULT (STDMETHODCALLTYPE* OnCachedFileUpdaterActivated)(__x_ABI_CWindows_CUI_CXaml_CIApplicationOverrides* This,
        __x_ABI_CWindows_CApplicationModel_CActivation_CICachedFileUpdaterActivatedEventArgs* args);
    HRESULT (STDMETHODCALLTYPE* OnWindowCreated)(__x_ABI_CWindows_CUI_CXaml_CIApplicationOverrides* This,
        __x_ABI_CWindows_CUI_CXaml_CIWindowCreatedEventArgs* args);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CIApplicationOverridesVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CIApplicationOverrides
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CIApplicationOverridesVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CIApplicationOverrides;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CIApplicationOverrides_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CIApplicationOverrides2_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CIApplicationOverrides2_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CIApplicationOverrides2Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CIApplicationOverrides2* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CIApplicationOverrides2* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CIApplicationOverrides2* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CIApplicationOverrides2* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CIApplicationOverrides2* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CIApplicationOverrides2* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* OnBackgroundActivated)(__x_ABI_CWindows_CUI_CXaml_CIApplicationOverrides2* This,
        __x_ABI_CWindows_CApplicationModel_CActivation_CIBackgroundActivatedEventArgs* args);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CIApplicationOverrides2Vtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CIApplicationOverrides2
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CIApplicationOverrides2Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CIApplicationOverrides2;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CIApplicationOverrides2_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CIApplicationStatics_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CIApplicationStatics_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CIApplicationStaticsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CIApplicationStatics* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CIApplicationStatics* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CIApplicationStatics* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CIApplicationStatics* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CIApplicationStatics* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CIApplicationStatics* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Current)(__x_ABI_CWindows_CUI_CXaml_CIApplicationStatics* This,
        __x_ABI_CWindows_CUI_CXaml_CIApplication** value);
    HRESULT (STDMETHODCALLTYPE* Start)(__x_ABI_CWindows_CUI_CXaml_CIApplicationStatics* This,
        __x_ABI_CWindows_CUI_CXaml_CIApplicationInitializationCallback* callback);
    HRESULT (STDMETHODCALLTYPE* LoadComponent)(__x_ABI_CWindows_CUI_CXaml_CIApplicationStatics* This,
        IInspectable* component,
        __x_ABI_CWindows_CFoundation_CIUriRuntimeClass* resourceLocator);
    HRESULT (STDMETHODCALLTYPE* LoadComponentWithResourceLocation)(__x_ABI_CWindows_CUI_CXaml_CIApplicationStatics* This,
        IInspectable* component,
        __x_ABI_CWindows_CFoundation_CIUriRuntimeClass* resourceLocator,
        enum __x_ABI_CWindows_CUI_CXaml_CControls_CPrimitives_CComponentResourceLocation componentResourceLocation);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CIApplicationStaticsVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CIApplicationStatics
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CIApplicationStaticsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CIApplicationStatics;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CIApplicationStatics_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CIBindingFailedEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CIBindingFailedEventArgs_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CIBindingFailedEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CIBindingFailedEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CIBindingFailedEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CIBindingFailedEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CIBindingFailedEventArgs* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CIBindingFailedEventArgs* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CIBindingFailedEventArgs* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Message)(__x_ABI_CWindows_CUI_CXaml_CIBindingFailedEventArgs* This,
        HSTRING* value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CIBindingFailedEventArgsVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CIBindingFailedEventArgs
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CIBindingFailedEventArgsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CIBindingFailedEventArgs;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CIBindingFailedEventArgs_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CIBringIntoViewOptions_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CIBringIntoViewOptions_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CIBringIntoViewOptionsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CIBringIntoViewOptions* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CIBringIntoViewOptions* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CIBringIntoViewOptions* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CIBringIntoViewOptions* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CIBringIntoViewOptions* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CIBringIntoViewOptions* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_AnimationDesired)(__x_ABI_CWindows_CUI_CXaml_CIBringIntoViewOptions* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* put_AnimationDesired)(__x_ABI_CWindows_CUI_CXaml_CIBringIntoViewOptions* This,
        boolean value);
    HRESULT (STDMETHODCALLTYPE* get_TargetRect)(__x_ABI_CWindows_CUI_CXaml_CIBringIntoViewOptions* This,
        __x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CRect** value);
    HRESULT (STDMETHODCALLTYPE* put_TargetRect)(__x_ABI_CWindows_CUI_CXaml_CIBringIntoViewOptions* This,
        __x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CRect* value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CIBringIntoViewOptionsVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CIBringIntoViewOptions
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CIBringIntoViewOptionsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CIBringIntoViewOptions;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CIBringIntoViewOptions_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CIBringIntoViewOptions2_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CIBringIntoViewOptions2_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CIBringIntoViewOptions2Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CIBringIntoViewOptions2* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CIBringIntoViewOptions2* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CIBringIntoViewOptions2* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CIBringIntoViewOptions2* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CIBringIntoViewOptions2* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CIBringIntoViewOptions2* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_HorizontalAlignmentRatio)(__x_ABI_CWindows_CUI_CXaml_CIBringIntoViewOptions2* This,
        DOUBLE* value);
    HRESULT (STDMETHODCALLTYPE* put_HorizontalAlignmentRatio)(__x_ABI_CWindows_CUI_CXaml_CIBringIntoViewOptions2* This,
        DOUBLE value);
    HRESULT (STDMETHODCALLTYPE* get_VerticalAlignmentRatio)(__x_ABI_CWindows_CUI_CXaml_CIBringIntoViewOptions2* This,
        DOUBLE* value);
    HRESULT (STDMETHODCALLTYPE* put_VerticalAlignmentRatio)(__x_ABI_CWindows_CUI_CXaml_CIBringIntoViewOptions2* This,
        DOUBLE value);
    HRESULT (STDMETHODCALLTYPE* get_HorizontalOffset)(__x_ABI_CWindows_CUI_CXaml_CIBringIntoViewOptions2* This,
        DOUBLE* value);
    HRESULT (STDMETHODCALLTYPE* put_HorizontalOffset)(__x_ABI_CWindows_CUI_CXaml_CIBringIntoViewOptions2* This,
        DOUBLE value);
    HRESULT (STDMETHODCALLTYPE* get_VerticalOffset)(__x_ABI_CWindows_CUI_CXaml_CIBringIntoViewOptions2* This,
        DOUBLE* value);
    HRESULT (STDMETHODCALLTYPE* put_VerticalOffset)(__x_ABI_CWindows_CUI_CXaml_CIBringIntoViewOptions2* This,
        DOUBLE value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CIBringIntoViewOptions2Vtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CIBringIntoViewOptions2
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CIBringIntoViewOptions2Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CIBringIntoViewOptions2;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CIBringIntoViewOptions2_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CIBringIntoViewRequestedEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CIBringIntoViewRequestedEventArgs_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CIBringIntoViewRequestedEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CIBringIntoViewRequestedEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CIBringIntoViewRequestedEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CIBringIntoViewRequestedEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CIBringIntoViewRequestedEventArgs* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CIBringIntoViewRequestedEventArgs* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CIBringIntoViewRequestedEventArgs* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_TargetElement)(__x_ABI_CWindows_CUI_CXaml_CIBringIntoViewRequestedEventArgs* This,
        __x_ABI_CWindows_CUI_CXaml_CIUIElement** value);
    HRESULT (STDMETHODCALLTYPE* put_TargetElement)(__x_ABI_CWindows_CUI_CXaml_CIBringIntoViewRequestedEventArgs* This,
        __x_ABI_CWindows_CUI_CXaml_CIUIElement* value);
    HRESULT (STDMETHODCALLTYPE* get_AnimationDesired)(__x_ABI_CWindows_CUI_CXaml_CIBringIntoViewRequestedEventArgs* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* put_AnimationDesired)(__x_ABI_CWindows_CUI_CXaml_CIBringIntoViewRequestedEventArgs* This,
        boolean value);
    HRESULT (STDMETHODCALLTYPE* get_TargetRect)(__x_ABI_CWindows_CUI_CXaml_CIBringIntoViewRequestedEventArgs* This,
        struct __x_ABI_CWindows_CFoundation_CRect* value);
    HRESULT (STDMETHODCALLTYPE* put_TargetRect)(__x_ABI_CWindows_CUI_CXaml_CIBringIntoViewRequestedEventArgs* This,
        struct __x_ABI_CWindows_CFoundation_CRect value);
    HRESULT (STDMETHODCALLTYPE* get_HorizontalAlignmentRatio)(__x_ABI_CWindows_CUI_CXaml_CIBringIntoViewRequestedEventArgs* This,
        DOUBLE* value);
    HRESULT (STDMETHODCALLTYPE* get_VerticalAlignmentRatio)(__x_ABI_CWindows_CUI_CXaml_CIBringIntoViewRequestedEventArgs* This,
        DOUBLE* value);
    HRESULT (STDMETHODCALLTYPE* get_HorizontalOffset)(__x_ABI_CWindows_CUI_CXaml_CIBringIntoViewRequestedEventArgs* This,
        DOUBLE* value);
    HRESULT (STDMETHODCALLTYPE* put_HorizontalOffset)(__x_ABI_CWindows_CUI_CXaml_CIBringIntoViewRequestedEventArgs* This,
        DOUBLE value);
    HRESULT (STDMETHODCALLTYPE* get_VerticalOffset)(__x_ABI_CWindows_CUI_CXaml_CIBringIntoViewRequestedEventArgs* This,
        DOUBLE* value);
    HRESULT (STDMETHODCALLTYPE* put_VerticalOffset)(__x_ABI_CWindows_CUI_CXaml_CIBringIntoViewRequestedEventArgs* This,
        DOUBLE value);
    HRESULT (STDMETHODCALLTYPE* get_Handled)(__x_ABI_CWindows_CUI_CXaml_CIBringIntoViewRequestedEventArgs* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* put_Handled)(__x_ABI_CWindows_CUI_CXaml_CIBringIntoViewRequestedEventArgs* This,
        boolean value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CIBringIntoViewRequestedEventArgsVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CIBringIntoViewRequestedEventArgs
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CIBringIntoViewRequestedEventArgsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CIBringIntoViewRequestedEventArgs;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CIBringIntoViewRequestedEventArgs_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CIBrushTransition_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CIBrushTransition_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CIBrushTransitionVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CIBrushTransition* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CIBrushTransition* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CIBrushTransition* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CIBrushTransition* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CIBrushTransition* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CIBrushTransition* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Duration)(__x_ABI_CWindows_CUI_CXaml_CIBrushTransition* This,
        struct __x_ABI_CWindows_CFoundation_CTimeSpan* value);
    HRESULT (STDMETHODCALLTYPE* put_Duration)(__x_ABI_CWindows_CUI_CXaml_CIBrushTransition* This,
        struct __x_ABI_CWindows_CFoundation_CTimeSpan value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CIBrushTransitionVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CIBrushTransition
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CIBrushTransitionVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CIBrushTransition;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CIBrushTransition_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CIBrushTransitionFactory_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CIBrushTransitionFactory_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CIBrushTransitionFactoryVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CIBrushTransitionFactory* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CIBrushTransitionFactory* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CIBrushTransitionFactory* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CIBrushTransitionFactory* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CIBrushTransitionFactory* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CIBrushTransitionFactory* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* CreateInstance)(__x_ABI_CWindows_CUI_CXaml_CIBrushTransitionFactory* This,
        IInspectable* baseInterface,
        IInspectable** innerInterface,
        __x_ABI_CWindows_CUI_CXaml_CIBrushTransition** value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CIBrushTransitionFactoryVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CIBrushTransitionFactory
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CIBrushTransitionFactoryVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CIBrushTransitionFactory;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CIBrushTransitionFactory_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CIColorPaletteResources_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CIColorPaletteResources_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CIColorPaletteResourcesVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CIColorPaletteResources* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CIColorPaletteResources* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CIColorPaletteResources* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CIColorPaletteResources* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CIColorPaletteResources* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CIColorPaletteResources* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_AltHigh)(__x_ABI_CWindows_CUI_CXaml_CIColorPaletteResources* This,
        __x_ABI_C__FIReference_1___x_ABI_CWindows__CUI__CColor** value);
    HRESULT (STDMETHODCALLTYPE* put_AltHigh)(__x_ABI_CWindows_CUI_CXaml_CIColorPaletteResources* This,
        __x_ABI_C__FIReference_1___x_ABI_CWindows__CUI__CColor* value);
    HRESULT (STDMETHODCALLTYPE* get_AltLow)(__x_ABI_CWindows_CUI_CXaml_CIColorPaletteResources* This,
        __x_ABI_C__FIReference_1___x_ABI_CWindows__CUI__CColor** value);
    HRESULT (STDMETHODCALLTYPE* put_AltLow)(__x_ABI_CWindows_CUI_CXaml_CIColorPaletteResources* This,
        __x_ABI_C__FIReference_1___x_ABI_CWindows__CUI__CColor* value);
    HRESULT (STDMETHODCALLTYPE* get_AltMedium)(__x_ABI_CWindows_CUI_CXaml_CIColorPaletteResources* This,
        __x_ABI_C__FIReference_1___x_ABI_CWindows__CUI__CColor** value);
    HRESULT (STDMETHODCALLTYPE* put_AltMedium)(__x_ABI_CWindows_CUI_CXaml_CIColorPaletteResources* This,
        __x_ABI_C__FIReference_1___x_ABI_CWindows__CUI__CColor* value);
    HRESULT (STDMETHODCALLTYPE* get_AltMediumHigh)(__x_ABI_CWindows_CUI_CXaml_CIColorPaletteResources* This,
        __x_ABI_C__FIReference_1___x_ABI_CWindows__CUI__CColor** value);
    HRESULT (STDMETHODCALLTYPE* put_AltMediumHigh)(__x_ABI_CWindows_CUI_CXaml_CIColorPaletteResources* This,
        __x_ABI_C__FIReference_1___x_ABI_CWindows__CUI__CColor* value);
    HRESULT (STDMETHODCALLTYPE* get_AltMediumLow)(__x_ABI_CWindows_CUI_CXaml_CIColorPaletteResources* This,
        __x_ABI_C__FIReference_1___x_ABI_CWindows__CUI__CColor** value);
    HRESULT (STDMETHODCALLTYPE* put_AltMediumLow)(__x_ABI_CWindows_CUI_CXaml_CIColorPaletteResources* This,
        __x_ABI_C__FIReference_1___x_ABI_CWindows__CUI__CColor* value);
    HRESULT (STDMETHODCALLTYPE* get_BaseHigh)(__x_ABI_CWindows_CUI_CXaml_CIColorPaletteResources* This,
        __x_ABI_C__FIReference_1___x_ABI_CWindows__CUI__CColor** value);
    HRESULT (STDMETHODCALLTYPE* put_BaseHigh)(__x_ABI_CWindows_CUI_CXaml_CIColorPaletteResources* This,
        __x_ABI_C__FIReference_1___x_ABI_CWindows__CUI__CColor* value);
    HRESULT (STDMETHODCALLTYPE* get_BaseLow)(__x_ABI_CWindows_CUI_CXaml_CIColorPaletteResources* This,
        __x_ABI_C__FIReference_1___x_ABI_CWindows__CUI__CColor** value);
    HRESULT (STDMETHODCALLTYPE* put_BaseLow)(__x_ABI_CWindows_CUI_CXaml_CIColorPaletteResources* This,
        __x_ABI_C__FIReference_1___x_ABI_CWindows__CUI__CColor* value);
    HRESULT (STDMETHODCALLTYPE* get_BaseMedium)(__x_ABI_CWindows_CUI_CXaml_CIColorPaletteResources* This,
        __x_ABI_C__FIReference_1___x_ABI_CWindows__CUI__CColor** value);
    HRESULT (STDMETHODCALLTYPE* put_BaseMedium)(__x_ABI_CWindows_CUI_CXaml_CIColorPaletteResources* This,
        __x_ABI_C__FIReference_1___x_ABI_CWindows__CUI__CColor* value);
    HRESULT (STDMETHODCALLTYPE* get_BaseMediumHigh)(__x_ABI_CWindows_CUI_CXaml_CIColorPaletteResources* This,
        __x_ABI_C__FIReference_1___x_ABI_CWindows__CUI__CColor** value);
    HRESULT (STDMETHODCALLTYPE* put_BaseMediumHigh)(__x_ABI_CWindows_CUI_CXaml_CIColorPaletteResources* This,
        __x_ABI_C__FIReference_1___x_ABI_CWindows__CUI__CColor* value);
    HRESULT (STDMETHODCALLTYPE* get_BaseMediumLow)(__x_ABI_CWindows_CUI_CXaml_CIColorPaletteResources* This,
        __x_ABI_C__FIReference_1___x_ABI_CWindows__CUI__CColor** value);
    HRESULT (STDMETHODCALLTYPE* put_BaseMediumLow)(__x_ABI_CWindows_CUI_CXaml_CIColorPaletteResources* This,
        __x_ABI_C__FIReference_1___x_ABI_CWindows__CUI__CColor* value);
    HRESULT (STDMETHODCALLTYPE* get_ChromeAltLow)(__x_ABI_CWindows_CUI_CXaml_CIColorPaletteResources* This,
        __x_ABI_C__FIReference_1___x_ABI_CWindows__CUI__CColor** value);
    HRESULT (STDMETHODCALLTYPE* put_ChromeAltLow)(__x_ABI_CWindows_CUI_CXaml_CIColorPaletteResources* This,
        __x_ABI_C__FIReference_1___x_ABI_CWindows__CUI__CColor* value);
    HRESULT (STDMETHODCALLTYPE* get_ChromeBlackHigh)(__x_ABI_CWindows_CUI_CXaml_CIColorPaletteResources* This,
        __x_ABI_C__FIReference_1___x_ABI_CWindows__CUI__CColor** value);
    HRESULT (STDMETHODCALLTYPE* put_ChromeBlackHigh)(__x_ABI_CWindows_CUI_CXaml_CIColorPaletteResources* This,
        __x_ABI_C__FIReference_1___x_ABI_CWindows__CUI__CColor* value);
    HRESULT (STDMETHODCALLTYPE* get_ChromeBlackLow)(__x_ABI_CWindows_CUI_CXaml_CIColorPaletteResources* This,
        __x_ABI_C__FIReference_1___x_ABI_CWindows__CUI__CColor** value);
    HRESULT (STDMETHODCALLTYPE* put_ChromeBlackLow)(__x_ABI_CWindows_CUI_CXaml_CIColorPaletteResources* This,
        __x_ABI_C__FIReference_1___x_ABI_CWindows__CUI__CColor* value);
    HRESULT (STDMETHODCALLTYPE* get_ChromeBlackMediumLow)(__x_ABI_CWindows_CUI_CXaml_CIColorPaletteResources* This,
        __x_ABI_C__FIReference_1___x_ABI_CWindows__CUI__CColor** value);
    HRESULT (STDMETHODCALLTYPE* put_ChromeBlackMediumLow)(__x_ABI_CWindows_CUI_CXaml_CIColorPaletteResources* This,
        __x_ABI_C__FIReference_1___x_ABI_CWindows__CUI__CColor* value);
    HRESULT (STDMETHODCALLTYPE* get_ChromeBlackMedium)(__x_ABI_CWindows_CUI_CXaml_CIColorPaletteResources* This,
        __x_ABI_C__FIReference_1___x_ABI_CWindows__CUI__CColor** value);
    HRESULT (STDMETHODCALLTYPE* put_ChromeBlackMedium)(__x_ABI_CWindows_CUI_CXaml_CIColorPaletteResources* This,
        __x_ABI_C__FIReference_1___x_ABI_CWindows__CUI__CColor* value);
    HRESULT (STDMETHODCALLTYPE* get_ChromeDisabledHigh)(__x_ABI_CWindows_CUI_CXaml_CIColorPaletteResources* This,
        __x_ABI_C__FIReference_1___x_ABI_CWindows__CUI__CColor** value);
    HRESULT (STDMETHODCALLTYPE* put_ChromeDisabledHigh)(__x_ABI_CWindows_CUI_CXaml_CIColorPaletteResources* This,
        __x_ABI_C__FIReference_1___x_ABI_CWindows__CUI__CColor* value);
    HRESULT (STDMETHODCALLTYPE* get_ChromeDisabledLow)(__x_ABI_CWindows_CUI_CXaml_CIColorPaletteResources* This,
        __x_ABI_C__FIReference_1___x_ABI_CWindows__CUI__CColor** value);
    HRESULT (STDMETHODCALLTYPE* put_ChromeDisabledLow)(__x_ABI_CWindows_CUI_CXaml_CIColorPaletteResources* This,
        __x_ABI_C__FIReference_1___x_ABI_CWindows__CUI__CColor* value);
    HRESULT (STDMETHODCALLTYPE* get_ChromeHigh)(__x_ABI_CWindows_CUI_CXaml_CIColorPaletteResources* This,
        __x_ABI_C__FIReference_1___x_ABI_CWindows__CUI__CColor** value);
    HRESULT (STDMETHODCALLTYPE* put_ChromeHigh)(__x_ABI_CWindows_CUI_CXaml_CIColorPaletteResources* This,
        __x_ABI_C__FIReference_1___x_ABI_CWindows__CUI__CColor* value);
    HRESULT (STDMETHODCALLTYPE* get_ChromeLow)(__x_ABI_CWindows_CUI_CXaml_CIColorPaletteResources* This,
        __x_ABI_C__FIReference_1___x_ABI_CWindows__CUI__CColor** value);
    HRESULT (STDMETHODCALLTYPE* put_ChromeLow)(__x_ABI_CWindows_CUI_CXaml_CIColorPaletteResources* This,
        __x_ABI_C__FIReference_1___x_ABI_CWindows__CUI__CColor* value);
    HRESULT (STDMETHODCALLTYPE* get_ChromeMedium)(__x_ABI_CWindows_CUI_CXaml_CIColorPaletteResources* This,
        __x_ABI_C__FIReference_1___x_ABI_CWindows__CUI__CColor** value);
    HRESULT (STDMETHODCALLTYPE* put_ChromeMedium)(__x_ABI_CWindows_CUI_CXaml_CIColorPaletteResources* This,
        __x_ABI_C__FIReference_1___x_ABI_CWindows__CUI__CColor* value);
    HRESULT (STDMETHODCALLTYPE* get_ChromeMediumLow)(__x_ABI_CWindows_CUI_CXaml_CIColorPaletteResources* This,
        __x_ABI_C__FIReference_1___x_ABI_CWindows__CUI__CColor** value);
    HRESULT (STDMETHODCALLTYPE* put_ChromeMediumLow)(__x_ABI_CWindows_CUI_CXaml_CIColorPaletteResources* This,
        __x_ABI_C__FIReference_1___x_ABI_CWindows__CUI__CColor* value);
    HRESULT (STDMETHODCALLTYPE* get_ChromeWhite)(__x_ABI_CWindows_CUI_CXaml_CIColorPaletteResources* This,
        __x_ABI_C__FIReference_1___x_ABI_CWindows__CUI__CColor** value);
    HRESULT (STDMETHODCALLTYPE* put_ChromeWhite)(__x_ABI_CWindows_CUI_CXaml_CIColorPaletteResources* This,
        __x_ABI_C__FIReference_1___x_ABI_CWindows__CUI__CColor* value);
    HRESULT (STDMETHODCALLTYPE* get_ChromeGray)(__x_ABI_CWindows_CUI_CXaml_CIColorPaletteResources* This,
        __x_ABI_C__FIReference_1___x_ABI_CWindows__CUI__CColor** value);
    HRESULT (STDMETHODCALLTYPE* put_ChromeGray)(__x_ABI_CWindows_CUI_CXaml_CIColorPaletteResources* This,
        __x_ABI_C__FIReference_1___x_ABI_CWindows__CUI__CColor* value);
    HRESULT (STDMETHODCALLTYPE* get_ListLow)(__x_ABI_CWindows_CUI_CXaml_CIColorPaletteResources* This,
        __x_ABI_C__FIReference_1___x_ABI_CWindows__CUI__CColor** value);
    HRESULT (STDMETHODCALLTYPE* put_ListLow)(__x_ABI_CWindows_CUI_CXaml_CIColorPaletteResources* This,
        __x_ABI_C__FIReference_1___x_ABI_CWindows__CUI__CColor* value);
    HRESULT (STDMETHODCALLTYPE* get_ListMedium)(__x_ABI_CWindows_CUI_CXaml_CIColorPaletteResources* This,
        __x_ABI_C__FIReference_1___x_ABI_CWindows__CUI__CColor** value);
    HRESULT (STDMETHODCALLTYPE* put_ListMedium)(__x_ABI_CWindows_CUI_CXaml_CIColorPaletteResources* This,
        __x_ABI_C__FIReference_1___x_ABI_CWindows__CUI__CColor* value);
    HRESULT (STDMETHODCALLTYPE* get_ErrorText)(__x_ABI_CWindows_CUI_CXaml_CIColorPaletteResources* This,
        __x_ABI_C__FIReference_1___x_ABI_CWindows__CUI__CColor** value);
    HRESULT (STDMETHODCALLTYPE* put_ErrorText)(__x_ABI_CWindows_CUI_CXaml_CIColorPaletteResources* This,
        __x_ABI_C__FIReference_1___x_ABI_CWindows__CUI__CColor* value);
    HRESULT (STDMETHODCALLTYPE* get_Accent)(__x_ABI_CWindows_CUI_CXaml_CIColorPaletteResources* This,
        __x_ABI_C__FIReference_1___x_ABI_CWindows__CUI__CColor** value);
    HRESULT (STDMETHODCALLTYPE* put_Accent)(__x_ABI_CWindows_CUI_CXaml_CIColorPaletteResources* This,
        __x_ABI_C__FIReference_1___x_ABI_CWindows__CUI__CColor* value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CIColorPaletteResourcesVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CIColorPaletteResources
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CIColorPaletteResourcesVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CIColorPaletteResources;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CIColorPaletteResources_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CIColorPaletteResourcesFactory_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CIColorPaletteResourcesFactory_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CIColorPaletteResourcesFactoryVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CIColorPaletteResourcesFactory* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CIColorPaletteResourcesFactory* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CIColorPaletteResourcesFactory* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CIColorPaletteResourcesFactory* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CIColorPaletteResourcesFactory* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CIColorPaletteResourcesFactory* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* CreateInstance)(__x_ABI_CWindows_CUI_CXaml_CIColorPaletteResourcesFactory* This,
        IInspectable* baseInterface,
        IInspectable** innerInterface,
        __x_ABI_CWindows_CUI_CXaml_CIColorPaletteResources** value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CIColorPaletteResourcesFactoryVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CIColorPaletteResourcesFactory
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CIColorPaletteResourcesFactoryVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CIColorPaletteResourcesFactory;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CIColorPaletteResourcesFactory_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CICornerRadiusHelper_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CICornerRadiusHelper_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CICornerRadiusHelperVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CICornerRadiusHelper* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CICornerRadiusHelper* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CICornerRadiusHelper* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CICornerRadiusHelper* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CICornerRadiusHelper* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CICornerRadiusHelper* This,
            TrustLevel* trustLevel);
    
        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CICornerRadiusHelperVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CICornerRadiusHelper
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CICornerRadiusHelperVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CICornerRadiusHelper;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CICornerRadiusHelper_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CICornerRadiusHelperStatics_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CICornerRadiusHelperStatics_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CICornerRadiusHelperStaticsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CICornerRadiusHelperStatics* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CICornerRadiusHelperStatics* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CICornerRadiusHelperStatics* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CICornerRadiusHelperStatics* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CICornerRadiusHelperStatics* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CICornerRadiusHelperStatics* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* FromRadii)(__x_ABI_CWindows_CUI_CXaml_CICornerRadiusHelperStatics* This,
        DOUBLE topLeft,
        DOUBLE topRight,
        DOUBLE bottomRight,
        DOUBLE bottomLeft,
        struct __x_ABI_CWindows_CUI_CXaml_CCornerRadius* result);
    HRESULT (STDMETHODCALLTYPE* FromUniformRadius)(__x_ABI_CWindows_CUI_CXaml_CICornerRadiusHelperStatics* This,
        DOUBLE uniformRadius,
        struct __x_ABI_CWindows_CUI_CXaml_CCornerRadius* result);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CICornerRadiusHelperStaticsVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CICornerRadiusHelperStatics
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CICornerRadiusHelperStaticsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CICornerRadiusHelperStatics;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CICornerRadiusHelperStatics_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CIDataContextChangedEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CIDataContextChangedEventArgs_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CIDataContextChangedEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CIDataContextChangedEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CIDataContextChangedEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CIDataContextChangedEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CIDataContextChangedEventArgs* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CIDataContextChangedEventArgs* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CIDataContextChangedEventArgs* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_NewValue)(__x_ABI_CWindows_CUI_CXaml_CIDataContextChangedEventArgs* This,
        IInspectable** value);
    HRESULT (STDMETHODCALLTYPE* get_Handled)(__x_ABI_CWindows_CUI_CXaml_CIDataContextChangedEventArgs* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* put_Handled)(__x_ABI_CWindows_CUI_CXaml_CIDataContextChangedEventArgs* This,
        boolean value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CIDataContextChangedEventArgsVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CIDataContextChangedEventArgs
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CIDataContextChangedEventArgsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CIDataContextChangedEventArgs;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CIDataContextChangedEventArgs_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CIDataTemplate_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CIDataTemplate_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CIDataTemplateVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CIDataTemplate* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CIDataTemplate* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CIDataTemplate* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CIDataTemplate* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CIDataTemplate* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CIDataTemplate* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* LoadContent)(__x_ABI_CWindows_CUI_CXaml_CIDataTemplate* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyObject** result);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CIDataTemplateVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CIDataTemplate
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CIDataTemplateVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CIDataTemplate;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CIDataTemplate_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CIDataTemplateExtension_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CIDataTemplateExtension_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CIDataTemplateExtensionVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CIDataTemplateExtension* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CIDataTemplateExtension* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CIDataTemplateExtension* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CIDataTemplateExtension* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CIDataTemplateExtension* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CIDataTemplateExtension* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* ResetTemplate)(__x_ABI_CWindows_CUI_CXaml_CIDataTemplateExtension* This);
    HRESULT (STDMETHODCALLTYPE* ProcessBinding)(__x_ABI_CWindows_CUI_CXaml_CIDataTemplateExtension* This,
        UINT32 phase,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* ProcessBindings)(__x_ABI_CWindows_CUI_CXaml_CIDataTemplateExtension* This,
        __x_ABI_CWindows_CUI_CXaml_CControls_CIContainerContentChangingEventArgs* arg,
        INT32* result);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CIDataTemplateExtensionVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CIDataTemplateExtension
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CIDataTemplateExtensionVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CIDataTemplateExtension;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CIDataTemplateExtension_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CIDataTemplateFactory_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CIDataTemplateFactory_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CIDataTemplateFactoryVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CIDataTemplateFactory* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CIDataTemplateFactory* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CIDataTemplateFactory* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CIDataTemplateFactory* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CIDataTemplateFactory* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CIDataTemplateFactory* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* CreateInstance)(__x_ABI_CWindows_CUI_CXaml_CIDataTemplateFactory* This,
        IInspectable* baseInterface,
        IInspectable** innerInterface,
        __x_ABI_CWindows_CUI_CXaml_CIDataTemplate** value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CIDataTemplateFactoryVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CIDataTemplateFactory
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CIDataTemplateFactoryVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CIDataTemplateFactory;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CIDataTemplateFactory_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CIDataTemplateKey_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CIDataTemplateKey_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CIDataTemplateKeyVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CIDataTemplateKey* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CIDataTemplateKey* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CIDataTemplateKey* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CIDataTemplateKey* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CIDataTemplateKey* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CIDataTemplateKey* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_DataType)(__x_ABI_CWindows_CUI_CXaml_CIDataTemplateKey* This,
        IInspectable** value);
    HRESULT (STDMETHODCALLTYPE* put_DataType)(__x_ABI_CWindows_CUI_CXaml_CIDataTemplateKey* This,
        IInspectable* value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CIDataTemplateKeyVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CIDataTemplateKey
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CIDataTemplateKeyVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CIDataTemplateKey;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CIDataTemplateKey_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CIDataTemplateKeyFactory_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CIDataTemplateKeyFactory_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CIDataTemplateKeyFactoryVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CIDataTemplateKeyFactory* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CIDataTemplateKeyFactory* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CIDataTemplateKeyFactory* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CIDataTemplateKeyFactory* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CIDataTemplateKeyFactory* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CIDataTemplateKeyFactory* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* CreateInstance)(__x_ABI_CWindows_CUI_CXaml_CIDataTemplateKeyFactory* This,
        IInspectable* baseInterface,
        IInspectable** innerInterface,
        __x_ABI_CWindows_CUI_CXaml_CIDataTemplateKey** value);
    HRESULT (STDMETHODCALLTYPE* CreateInstanceWithType)(__x_ABI_CWindows_CUI_CXaml_CIDataTemplateKeyFactory* This,
        IInspectable* dataType,
        IInspectable* baseInterface,
        IInspectable** innerInterface,
        __x_ABI_CWindows_CUI_CXaml_CIDataTemplateKey** value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CIDataTemplateKeyFactoryVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CIDataTemplateKeyFactory
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CIDataTemplateKeyFactoryVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CIDataTemplateKeyFactory;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CIDataTemplateKeyFactory_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CIDataTemplateStatics2_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CIDataTemplateStatics2_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CIDataTemplateStatics2Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CIDataTemplateStatics2* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CIDataTemplateStatics2* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CIDataTemplateStatics2* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CIDataTemplateStatics2* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CIDataTemplateStatics2* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CIDataTemplateStatics2* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_ExtensionInstanceProperty)(__x_ABI_CWindows_CUI_CXaml_CIDataTemplateStatics2* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** value);
    HRESULT (STDMETHODCALLTYPE* GetExtensionInstance)(__x_ABI_CWindows_CUI_CXaml_CIDataTemplateStatics2* This,
        __x_ABI_CWindows_CUI_CXaml_CIFrameworkElement* element,
        __x_ABI_CWindows_CUI_CXaml_CIDataTemplateExtension** result);
    HRESULT (STDMETHODCALLTYPE* SetExtensionInstance)(__x_ABI_CWindows_CUI_CXaml_CIDataTemplateStatics2* This,
        __x_ABI_CWindows_CUI_CXaml_CIFrameworkElement* element,
        __x_ABI_CWindows_CUI_CXaml_CIDataTemplateExtension* value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CIDataTemplateStatics2Vtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CIDataTemplateStatics2
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CIDataTemplateStatics2Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CIDataTemplateStatics2;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CIDataTemplateStatics2_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CIDebugSettings_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CIDebugSettings_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CIDebugSettingsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CIDebugSettings* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CIDebugSettings* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CIDebugSettings* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CIDebugSettings* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CIDebugSettings* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CIDebugSettings* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_EnableFrameRateCounter)(__x_ABI_CWindows_CUI_CXaml_CIDebugSettings* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* put_EnableFrameRateCounter)(__x_ABI_CWindows_CUI_CXaml_CIDebugSettings* This,
        boolean value);
    HRESULT (STDMETHODCALLTYPE* get_IsBindingTracingEnabled)(__x_ABI_CWindows_CUI_CXaml_CIDebugSettings* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* put_IsBindingTracingEnabled)(__x_ABI_CWindows_CUI_CXaml_CIDebugSettings* This,
        boolean value);
    HRESULT (STDMETHODCALLTYPE* get_IsOverdrawHeatMapEnabled)(__x_ABI_CWindows_CUI_CXaml_CIDebugSettings* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* put_IsOverdrawHeatMapEnabled)(__x_ABI_CWindows_CUI_CXaml_CIDebugSettings* This,
        boolean value);
    HRESULT (STDMETHODCALLTYPE* add_BindingFailed)(__x_ABI_CWindows_CUI_CXaml_CIDebugSettings* This,
        __x_ABI_CWindows_CUI_CXaml_CIBindingFailedEventHandler* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_BindingFailed)(__x_ABI_CWindows_CUI_CXaml_CIDebugSettings* This,
        EventRegistrationToken token);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CIDebugSettingsVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CIDebugSettings
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CIDebugSettingsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CIDebugSettings;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CIDebugSettings_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CIDebugSettings2_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CIDebugSettings2_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CIDebugSettings2Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CIDebugSettings2* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CIDebugSettings2* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CIDebugSettings2* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CIDebugSettings2* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CIDebugSettings2* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CIDebugSettings2* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_EnableRedrawRegions)(__x_ABI_CWindows_CUI_CXaml_CIDebugSettings2* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* put_EnableRedrawRegions)(__x_ABI_CWindows_CUI_CXaml_CIDebugSettings2* This,
        boolean value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CIDebugSettings2Vtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CIDebugSettings2
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CIDebugSettings2Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CIDebugSettings2;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CIDebugSettings2_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CIDebugSettings3_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CIDebugSettings3_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CIDebugSettings3Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CIDebugSettings3* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CIDebugSettings3* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CIDebugSettings3* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CIDebugSettings3* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CIDebugSettings3* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CIDebugSettings3* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_IsTextPerformanceVisualizationEnabled)(__x_ABI_CWindows_CUI_CXaml_CIDebugSettings3* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* put_IsTextPerformanceVisualizationEnabled)(__x_ABI_CWindows_CUI_CXaml_CIDebugSettings3* This,
        boolean value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CIDebugSettings3Vtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CIDebugSettings3
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CIDebugSettings3Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CIDebugSettings3;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CIDebugSettings3_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CIDebugSettings4_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CIDebugSettings4_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CIDebugSettings4Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CIDebugSettings4* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CIDebugSettings4* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CIDebugSettings4* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CIDebugSettings4* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CIDebugSettings4* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CIDebugSettings4* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_FailFastOnErrors)(__x_ABI_CWindows_CUI_CXaml_CIDebugSettings4* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* put_FailFastOnErrors)(__x_ABI_CWindows_CUI_CXaml_CIDebugSettings4* This,
        boolean value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CIDebugSettings4Vtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CIDebugSettings4
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CIDebugSettings4Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CIDebugSettings4;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CIDebugSettings4_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CIDependencyObject_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CIDependencyObject_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CIDependencyObjectVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CIDependencyObject* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CIDependencyObject* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CIDependencyObject* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CIDependencyObject* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CIDependencyObject* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CIDependencyObject* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetValue)(__x_ABI_CWindows_CUI_CXaml_CIDependencyObject* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty* dp,
        IInspectable** result);
    HRESULT (STDMETHODCALLTYPE* SetValue)(__x_ABI_CWindows_CUI_CXaml_CIDependencyObject* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty* dp,
        IInspectable* value);
    HRESULT (STDMETHODCALLTYPE* ClearValue)(__x_ABI_CWindows_CUI_CXaml_CIDependencyObject* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty* dp);
    HRESULT (STDMETHODCALLTYPE* ReadLocalValue)(__x_ABI_CWindows_CUI_CXaml_CIDependencyObject* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty* dp,
        IInspectable** result);
    HRESULT (STDMETHODCALLTYPE* GetAnimationBaseValue)(__x_ABI_CWindows_CUI_CXaml_CIDependencyObject* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty* dp,
        IInspectable** result);
    HRESULT (STDMETHODCALLTYPE* get_Dispatcher)(__x_ABI_CWindows_CUI_CXaml_CIDependencyObject* This,
        __x_ABI_CWindows_CUI_CCore_CICoreDispatcher** value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CIDependencyObjectVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CIDependencyObject
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CIDependencyObjectVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CIDependencyObject;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CIDependencyObject_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CIDependencyObject2_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CIDependencyObject2_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CIDependencyObject2Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CIDependencyObject2* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CIDependencyObject2* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CIDependencyObject2* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CIDependencyObject2* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CIDependencyObject2* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CIDependencyObject2* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* RegisterPropertyChangedCallback)(__x_ABI_CWindows_CUI_CXaml_CIDependencyObject2* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty* dp,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyPropertyChangedCallback* callback,
        INT64* result);
    HRESULT (STDMETHODCALLTYPE* UnregisterPropertyChangedCallback)(__x_ABI_CWindows_CUI_CXaml_CIDependencyObject2* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty* dp,
        INT64 token);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CIDependencyObject2Vtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CIDependencyObject2
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CIDependencyObject2Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CIDependencyObject2;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CIDependencyObject2_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CIDependencyObjectCollectionFactory_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CIDependencyObjectCollectionFactory_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CIDependencyObjectCollectionFactoryVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CIDependencyObjectCollectionFactory* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CIDependencyObjectCollectionFactory* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CIDependencyObjectCollectionFactory* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CIDependencyObjectCollectionFactory* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CIDependencyObjectCollectionFactory* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CIDependencyObjectCollectionFactory* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* CreateInstance)(__x_ABI_CWindows_CUI_CXaml_CIDependencyObjectCollectionFactory* This,
        IInspectable* baseInterface,
        IInspectable** innerInterface,
        __x_ABI_C__FIObservableVector_1___x_ABI_CWindows__CUI__CXaml__CDependencyObject** value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CIDependencyObjectCollectionFactoryVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CIDependencyObjectCollectionFactory
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CIDependencyObjectCollectionFactoryVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CIDependencyObjectCollectionFactory;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CIDependencyObjectCollectionFactory_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CIDependencyObjectFactory_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CIDependencyObjectFactory_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CIDependencyObjectFactoryVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CIDependencyObjectFactory* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CIDependencyObjectFactory* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CIDependencyObjectFactory* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CIDependencyObjectFactory* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CIDependencyObjectFactory* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CIDependencyObjectFactory* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* CreateInstance)(__x_ABI_CWindows_CUI_CXaml_CIDependencyObjectFactory* This,
        IInspectable* baseInterface,
        IInspectable** innerInterface,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyObject** value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CIDependencyObjectFactoryVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CIDependencyObjectFactory
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CIDependencyObjectFactoryVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CIDependencyObjectFactory;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CIDependencyObjectFactory_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CIDependencyProperty_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CIDependencyProperty_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CIDependencyPropertyVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CIDependencyProperty* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CIDependencyProperty* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CIDependencyProperty* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CIDependencyProperty* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CIDependencyProperty* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CIDependencyProperty* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetMetadata)(__x_ABI_CWindows_CUI_CXaml_CIDependencyProperty* This,
        struct __x_ABI_CWindows_CUI_CXaml_CInterop_CTypeName forType,
        __x_ABI_CWindows_CUI_CXaml_CIPropertyMetadata** result);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CIDependencyPropertyVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CIDependencyPropertyVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CIDependencyProperty;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CIDependencyProperty_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CIDependencyPropertyChangedEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CIDependencyPropertyChangedEventArgs_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CIDependencyPropertyChangedEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CIDependencyPropertyChangedEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CIDependencyPropertyChangedEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CIDependencyPropertyChangedEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CIDependencyPropertyChangedEventArgs* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CIDependencyPropertyChangedEventArgs* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CIDependencyPropertyChangedEventArgs* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Property)(__x_ABI_CWindows_CUI_CXaml_CIDependencyPropertyChangedEventArgs* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** value);
    HRESULT (STDMETHODCALLTYPE* get_OldValue)(__x_ABI_CWindows_CUI_CXaml_CIDependencyPropertyChangedEventArgs* This,
        IInspectable** value);
    HRESULT (STDMETHODCALLTYPE* get_NewValue)(__x_ABI_CWindows_CUI_CXaml_CIDependencyPropertyChangedEventArgs* This,
        IInspectable** value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CIDependencyPropertyChangedEventArgsVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CIDependencyPropertyChangedEventArgs
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CIDependencyPropertyChangedEventArgsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CIDependencyPropertyChangedEventArgs;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CIDependencyPropertyChangedEventArgs_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CIDependencyPropertyStatics_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CIDependencyPropertyStatics_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CIDependencyPropertyStaticsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CIDependencyPropertyStatics* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CIDependencyPropertyStatics* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CIDependencyPropertyStatics* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CIDependencyPropertyStatics* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CIDependencyPropertyStatics* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CIDependencyPropertyStatics* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_UnsetValue)(__x_ABI_CWindows_CUI_CXaml_CIDependencyPropertyStatics* This,
        IInspectable** value);
    HRESULT (STDMETHODCALLTYPE* Register)(__x_ABI_CWindows_CUI_CXaml_CIDependencyPropertyStatics* This,
        HSTRING name,
        struct __x_ABI_CWindows_CUI_CXaml_CInterop_CTypeName propertyType,
        struct __x_ABI_CWindows_CUI_CXaml_CInterop_CTypeName ownerType,
        __x_ABI_CWindows_CUI_CXaml_CIPropertyMetadata* typeMetadata,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** result);
    HRESULT (STDMETHODCALLTYPE* RegisterAttached)(__x_ABI_CWindows_CUI_CXaml_CIDependencyPropertyStatics* This,
        HSTRING name,
        struct __x_ABI_CWindows_CUI_CXaml_CInterop_CTypeName propertyType,
        struct __x_ABI_CWindows_CUI_CXaml_CInterop_CTypeName ownerType,
        __x_ABI_CWindows_CUI_CXaml_CIPropertyMetadata* defaultMetadata,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** result);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CIDependencyPropertyStaticsVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CIDependencyPropertyStatics
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CIDependencyPropertyStaticsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CIDependencyPropertyStatics;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CIDependencyPropertyStatics_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CIDispatcherTimer_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CIDispatcherTimer_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CIDispatcherTimerVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CIDispatcherTimer* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CIDispatcherTimer* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CIDispatcherTimer* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CIDispatcherTimer* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CIDispatcherTimer* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CIDispatcherTimer* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Interval)(__x_ABI_CWindows_CUI_CXaml_CIDispatcherTimer* This,
        struct __x_ABI_CWindows_CFoundation_CTimeSpan* value);
    HRESULT (STDMETHODCALLTYPE* put_Interval)(__x_ABI_CWindows_CUI_CXaml_CIDispatcherTimer* This,
        struct __x_ABI_CWindows_CFoundation_CTimeSpan value);
    HRESULT (STDMETHODCALLTYPE* get_IsEnabled)(__x_ABI_CWindows_CUI_CXaml_CIDispatcherTimer* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* add_Tick)(__x_ABI_CWindows_CUI_CXaml_CIDispatcherTimer* This,
        __x_ABI_C__FIEventHandler_1_IInspectable* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_Tick)(__x_ABI_CWindows_CUI_CXaml_CIDispatcherTimer* This,
        EventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* Start)(__x_ABI_CWindows_CUI_CXaml_CIDispatcherTimer* This);
    HRESULT (STDMETHODCALLTYPE* Stop)(__x_ABI_CWindows_CUI_CXaml_CIDispatcherTimer* This);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CIDispatcherTimerVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CIDispatcherTimer
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CIDispatcherTimerVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CIDispatcherTimer;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CIDispatcherTimer_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CIDispatcherTimerFactory_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CIDispatcherTimerFactory_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CIDispatcherTimerFactoryVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CIDispatcherTimerFactory* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CIDispatcherTimerFactory* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CIDispatcherTimerFactory* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CIDispatcherTimerFactory* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CIDispatcherTimerFactory* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CIDispatcherTimerFactory* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* CreateInstance)(__x_ABI_CWindows_CUI_CXaml_CIDispatcherTimerFactory* This,
        IInspectable* baseInterface,
        IInspectable** innerInterface,
        __x_ABI_CWindows_CUI_CXaml_CIDispatcherTimer** value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CIDispatcherTimerFactoryVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CIDispatcherTimerFactory
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CIDispatcherTimerFactoryVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CIDispatcherTimerFactory;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CIDispatcherTimerFactory_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CIDragEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CIDragEventArgs_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CIDragEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CIDragEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CIDragEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CIDragEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CIDragEventArgs* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CIDragEventArgs* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CIDragEventArgs* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Handled)(__x_ABI_CWindows_CUI_CXaml_CIDragEventArgs* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* put_Handled)(__x_ABI_CWindows_CUI_CXaml_CIDragEventArgs* This,
        boolean value);
    HRESULT (STDMETHODCALLTYPE* get_Data)(__x_ABI_CWindows_CUI_CXaml_CIDragEventArgs* This,
        __x_ABI_CWindows_CApplicationModel_CDataTransfer_CIDataPackage** value);
    HRESULT (STDMETHODCALLTYPE* put_Data)(__x_ABI_CWindows_CUI_CXaml_CIDragEventArgs* This,
        __x_ABI_CWindows_CApplicationModel_CDataTransfer_CIDataPackage* value);
    HRESULT (STDMETHODCALLTYPE* GetPosition)(__x_ABI_CWindows_CUI_CXaml_CIDragEventArgs* This,
        __x_ABI_CWindows_CUI_CXaml_CIUIElement* relativeTo,
        struct __x_ABI_CWindows_CFoundation_CPoint* result);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CIDragEventArgsVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CIDragEventArgs
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CIDragEventArgsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CIDragEventArgs;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CIDragEventArgs_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CIDragEventArgs2_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CIDragEventArgs2_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CIDragEventArgs2Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CIDragEventArgs2* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CIDragEventArgs2* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CIDragEventArgs2* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CIDragEventArgs2* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CIDragEventArgs2* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CIDragEventArgs2* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_DataView)(__x_ABI_CWindows_CUI_CXaml_CIDragEventArgs2* This,
        __x_ABI_CWindows_CApplicationModel_CDataTransfer_CIDataPackageView** value);
    HRESULT (STDMETHODCALLTYPE* get_DragUIOverride)(__x_ABI_CWindows_CUI_CXaml_CIDragEventArgs2* This,
        __x_ABI_CWindows_CUI_CXaml_CIDragUIOverride** value);
    HRESULT (STDMETHODCALLTYPE* get_Modifiers)(__x_ABI_CWindows_CUI_CXaml_CIDragEventArgs2* This,
        enum __x_ABI_CWindows_CApplicationModel_CDataTransfer_CDragDrop_CDragDropModifiers* value);
    HRESULT (STDMETHODCALLTYPE* get_AcceptedOperation)(__x_ABI_CWindows_CUI_CXaml_CIDragEventArgs2* This,
        enum __x_ABI_CWindows_CApplicationModel_CDataTransfer_CDataPackageOperation* value);
    HRESULT (STDMETHODCALLTYPE* put_AcceptedOperation)(__x_ABI_CWindows_CUI_CXaml_CIDragEventArgs2* This,
        enum __x_ABI_CWindows_CApplicationModel_CDataTransfer_CDataPackageOperation value);
    HRESULT (STDMETHODCALLTYPE* GetDeferral)(__x_ABI_CWindows_CUI_CXaml_CIDragEventArgs2* This,
        __x_ABI_CWindows_CUI_CXaml_CIDragOperationDeferral** result);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CIDragEventArgs2Vtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CIDragEventArgs2
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CIDragEventArgs2Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CIDragEventArgs2;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CIDragEventArgs2_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CIDragEventArgs3_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CIDragEventArgs3_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CIDragEventArgs3Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CIDragEventArgs3* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CIDragEventArgs3* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CIDragEventArgs3* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CIDragEventArgs3* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CIDragEventArgs3* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CIDragEventArgs3* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_AllowedOperations)(__x_ABI_CWindows_CUI_CXaml_CIDragEventArgs3* This,
        enum __x_ABI_CWindows_CApplicationModel_CDataTransfer_CDataPackageOperation* value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CIDragEventArgs3Vtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CIDragEventArgs3
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CIDragEventArgs3Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CIDragEventArgs3;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CIDragEventArgs3_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CIDragOperationDeferral_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CIDragOperationDeferral_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CIDragOperationDeferralVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CIDragOperationDeferral* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CIDragOperationDeferral* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CIDragOperationDeferral* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CIDragOperationDeferral* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CIDragOperationDeferral* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CIDragOperationDeferral* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* Complete)(__x_ABI_CWindows_CUI_CXaml_CIDragOperationDeferral* This);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CIDragOperationDeferralVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CIDragOperationDeferral
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CIDragOperationDeferralVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CIDragOperationDeferral;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CIDragOperationDeferral_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CIDragStartingEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CIDragStartingEventArgs_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CIDragStartingEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CIDragStartingEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CIDragStartingEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CIDragStartingEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CIDragStartingEventArgs* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CIDragStartingEventArgs* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CIDragStartingEventArgs* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Cancel)(__x_ABI_CWindows_CUI_CXaml_CIDragStartingEventArgs* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* put_Cancel)(__x_ABI_CWindows_CUI_CXaml_CIDragStartingEventArgs* This,
        boolean value);
    HRESULT (STDMETHODCALLTYPE* get_Data)(__x_ABI_CWindows_CUI_CXaml_CIDragStartingEventArgs* This,
        __x_ABI_CWindows_CApplicationModel_CDataTransfer_CIDataPackage** value);
    HRESULT (STDMETHODCALLTYPE* get_DragUI)(__x_ABI_CWindows_CUI_CXaml_CIDragStartingEventArgs* This,
        __x_ABI_CWindows_CUI_CXaml_CIDragUI** value);
    HRESULT (STDMETHODCALLTYPE* GetDeferral)(__x_ABI_CWindows_CUI_CXaml_CIDragStartingEventArgs* This,
        __x_ABI_CWindows_CUI_CXaml_CIDragOperationDeferral** result);
    HRESULT (STDMETHODCALLTYPE* GetPosition)(__x_ABI_CWindows_CUI_CXaml_CIDragStartingEventArgs* This,
        __x_ABI_CWindows_CUI_CXaml_CIUIElement* relativeTo,
        struct __x_ABI_CWindows_CFoundation_CPoint* result);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CIDragStartingEventArgsVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CIDragStartingEventArgs
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CIDragStartingEventArgsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CIDragStartingEventArgs;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CIDragStartingEventArgs_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CIDragStartingEventArgs2_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CIDragStartingEventArgs2_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CIDragStartingEventArgs2Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CIDragStartingEventArgs2* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CIDragStartingEventArgs2* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CIDragStartingEventArgs2* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CIDragStartingEventArgs2* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CIDragStartingEventArgs2* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CIDragStartingEventArgs2* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_AllowedOperations)(__x_ABI_CWindows_CUI_CXaml_CIDragStartingEventArgs2* This,
        enum __x_ABI_CWindows_CApplicationModel_CDataTransfer_CDataPackageOperation* value);
    HRESULT (STDMETHODCALLTYPE* put_AllowedOperations)(__x_ABI_CWindows_CUI_CXaml_CIDragStartingEventArgs2* This,
        enum __x_ABI_CWindows_CApplicationModel_CDataTransfer_CDataPackageOperation value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CIDragStartingEventArgs2Vtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CIDragStartingEventArgs2
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CIDragStartingEventArgs2Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CIDragStartingEventArgs2;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CIDragStartingEventArgs2_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CIDragUI_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CIDragUI_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CIDragUIVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CIDragUI* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CIDragUI* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CIDragUI* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CIDragUI* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CIDragUI* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CIDragUI* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* SetContentFromBitmapImage)(__x_ABI_CWindows_CUI_CXaml_CIDragUI* This,
        __x_ABI_CWindows_CUI_CXaml_CMedia_CImaging_CIBitmapImage* bitmapImage);
    HRESULT (STDMETHODCALLTYPE* SetContentFromBitmapImageWithAnchorPoint)(__x_ABI_CWindows_CUI_CXaml_CIDragUI* This,
        __x_ABI_CWindows_CUI_CXaml_CMedia_CImaging_CIBitmapImage* bitmapImage,
        struct __x_ABI_CWindows_CFoundation_CPoint anchorPoint);
    HRESULT (STDMETHODCALLTYPE* SetContentFromSoftwareBitmap)(__x_ABI_CWindows_CUI_CXaml_CIDragUI* This,
        __x_ABI_CWindows_CGraphics_CImaging_CISoftwareBitmap* softwareBitmap);
    HRESULT (STDMETHODCALLTYPE* SetContentFromSoftwareBitmapWithAnchorPoint)(__x_ABI_CWindows_CUI_CXaml_CIDragUI* This,
        __x_ABI_CWindows_CGraphics_CImaging_CISoftwareBitmap* softwareBitmap,
        struct __x_ABI_CWindows_CFoundation_CPoint anchorPoint);
    HRESULT (STDMETHODCALLTYPE* SetContentFromDataPackage)(__x_ABI_CWindows_CUI_CXaml_CIDragUI* This);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CIDragUIVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CIDragUI
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CIDragUIVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CIDragUI;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CIDragUI_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CIDragUIOverride_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CIDragUIOverride_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CIDragUIOverrideVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CIDragUIOverride* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CIDragUIOverride* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CIDragUIOverride* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CIDragUIOverride* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CIDragUIOverride* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CIDragUIOverride* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Caption)(__x_ABI_CWindows_CUI_CXaml_CIDragUIOverride* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* put_Caption)(__x_ABI_CWindows_CUI_CXaml_CIDragUIOverride* This,
        HSTRING value);
    HRESULT (STDMETHODCALLTYPE* get_IsContentVisible)(__x_ABI_CWindows_CUI_CXaml_CIDragUIOverride* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* put_IsContentVisible)(__x_ABI_CWindows_CUI_CXaml_CIDragUIOverride* This,
        boolean value);
    HRESULT (STDMETHODCALLTYPE* get_IsCaptionVisible)(__x_ABI_CWindows_CUI_CXaml_CIDragUIOverride* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* put_IsCaptionVisible)(__x_ABI_CWindows_CUI_CXaml_CIDragUIOverride* This,
        boolean value);
    HRESULT (STDMETHODCALLTYPE* get_IsGlyphVisible)(__x_ABI_CWindows_CUI_CXaml_CIDragUIOverride* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* put_IsGlyphVisible)(__x_ABI_CWindows_CUI_CXaml_CIDragUIOverride* This,
        boolean value);
    HRESULT (STDMETHODCALLTYPE* Clear)(__x_ABI_CWindows_CUI_CXaml_CIDragUIOverride* This);
    HRESULT (STDMETHODCALLTYPE* SetContentFromBitmapImage)(__x_ABI_CWindows_CUI_CXaml_CIDragUIOverride* This,
        __x_ABI_CWindows_CUI_CXaml_CMedia_CImaging_CIBitmapImage* bitmapImage);
    HRESULT (STDMETHODCALLTYPE* SetContentFromBitmapImageWithAnchorPoint)(__x_ABI_CWindows_CUI_CXaml_CIDragUIOverride* This,
        __x_ABI_CWindows_CUI_CXaml_CMedia_CImaging_CIBitmapImage* bitmapImage,
        struct __x_ABI_CWindows_CFoundation_CPoint anchorPoint);
    HRESULT (STDMETHODCALLTYPE* SetContentFromSoftwareBitmap)(__x_ABI_CWindows_CUI_CXaml_CIDragUIOverride* This,
        __x_ABI_CWindows_CGraphics_CImaging_CISoftwareBitmap* softwareBitmap);
    HRESULT (STDMETHODCALLTYPE* SetContentFromSoftwareBitmapWithAnchorPoint)(__x_ABI_CWindows_CUI_CXaml_CIDragUIOverride* This,
        __x_ABI_CWindows_CGraphics_CImaging_CISoftwareBitmap* softwareBitmap,
        struct __x_ABI_CWindows_CFoundation_CPoint anchorPoint);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CIDragUIOverrideVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CIDragUIOverride
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CIDragUIOverrideVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CIDragUIOverride;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CIDragUIOverride_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CIDropCompletedEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CIDropCompletedEventArgs_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CIDropCompletedEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CIDropCompletedEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CIDropCompletedEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CIDropCompletedEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CIDropCompletedEventArgs* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CIDropCompletedEventArgs* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CIDropCompletedEventArgs* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_DropResult)(__x_ABI_CWindows_CUI_CXaml_CIDropCompletedEventArgs* This,
        enum __x_ABI_CWindows_CApplicationModel_CDataTransfer_CDataPackageOperation* value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CIDropCompletedEventArgsVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CIDropCompletedEventArgs
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CIDropCompletedEventArgsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CIDropCompletedEventArgs;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CIDropCompletedEventArgs_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CIDurationHelper_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CIDurationHelper_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CIDurationHelperVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CIDurationHelper* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CIDurationHelper* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CIDurationHelper* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CIDurationHelper* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CIDurationHelper* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CIDurationHelper* This,
            TrustLevel* trustLevel);
    
        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CIDurationHelperVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CIDurationHelper
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CIDurationHelperVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CIDurationHelper;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CIDurationHelper_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CIDurationHelperStatics_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CIDurationHelperStatics_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CIDurationHelperStaticsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CIDurationHelperStatics* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CIDurationHelperStatics* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CIDurationHelperStatics* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CIDurationHelperStatics* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CIDurationHelperStatics* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CIDurationHelperStatics* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Automatic)(__x_ABI_CWindows_CUI_CXaml_CIDurationHelperStatics* This,
        struct __x_ABI_CWindows_CUI_CXaml_CDuration* value);
    HRESULT (STDMETHODCALLTYPE* get_Forever)(__x_ABI_CWindows_CUI_CXaml_CIDurationHelperStatics* This,
        struct __x_ABI_CWindows_CUI_CXaml_CDuration* value);
    HRESULT (STDMETHODCALLTYPE* Compare)(__x_ABI_CWindows_CUI_CXaml_CIDurationHelperStatics* This,
        struct __x_ABI_CWindows_CUI_CXaml_CDuration duration1,
        struct __x_ABI_CWindows_CUI_CXaml_CDuration duration2,
        INT32* result);
    HRESULT (STDMETHODCALLTYPE* FromTimeSpan)(__x_ABI_CWindows_CUI_CXaml_CIDurationHelperStatics* This,
        struct __x_ABI_CWindows_CFoundation_CTimeSpan timeSpan,
        struct __x_ABI_CWindows_CUI_CXaml_CDuration* result);
    HRESULT (STDMETHODCALLTYPE* GetHasTimeSpan)(__x_ABI_CWindows_CUI_CXaml_CIDurationHelperStatics* This,
        struct __x_ABI_CWindows_CUI_CXaml_CDuration target,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* Add)(__x_ABI_CWindows_CUI_CXaml_CIDurationHelperStatics* This,
        struct __x_ABI_CWindows_CUI_CXaml_CDuration target,
        struct __x_ABI_CWindows_CUI_CXaml_CDuration duration,
        struct __x_ABI_CWindows_CUI_CXaml_CDuration* result);
    HRESULT (STDMETHODCALLTYPE* Equals)(__x_ABI_CWindows_CUI_CXaml_CIDurationHelperStatics* This,
        struct __x_ABI_CWindows_CUI_CXaml_CDuration target,
        struct __x_ABI_CWindows_CUI_CXaml_CDuration value,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* Subtract)(__x_ABI_CWindows_CUI_CXaml_CIDurationHelperStatics* This,
        struct __x_ABI_CWindows_CUI_CXaml_CDuration target,
        struct __x_ABI_CWindows_CUI_CXaml_CDuration duration,
        struct __x_ABI_CWindows_CUI_CXaml_CDuration* result);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CIDurationHelperStaticsVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CIDurationHelperStatics
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CIDurationHelperStaticsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CIDurationHelperStatics;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CIDurationHelperStatics_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CIEffectiveViewportChangedEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CIEffectiveViewportChangedEventArgs_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CIEffectiveViewportChangedEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CIEffectiveViewportChangedEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CIEffectiveViewportChangedEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CIEffectiveViewportChangedEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CIEffectiveViewportChangedEventArgs* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CIEffectiveViewportChangedEventArgs* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CIEffectiveViewportChangedEventArgs* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_EffectiveViewport)(__x_ABI_CWindows_CUI_CXaml_CIEffectiveViewportChangedEventArgs* This,
        struct __x_ABI_CWindows_CFoundation_CRect* value);
    HRESULT (STDMETHODCALLTYPE* get_MaxViewport)(__x_ABI_CWindows_CUI_CXaml_CIEffectiveViewportChangedEventArgs* This,
        struct __x_ABI_CWindows_CFoundation_CRect* value);
    HRESULT (STDMETHODCALLTYPE* get_BringIntoViewDistanceX)(__x_ABI_CWindows_CUI_CXaml_CIEffectiveViewportChangedEventArgs* This,
        DOUBLE* value);
    HRESULT (STDMETHODCALLTYPE* get_BringIntoViewDistanceY)(__x_ABI_CWindows_CUI_CXaml_CIEffectiveViewportChangedEventArgs* This,
        DOUBLE* value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CIEffectiveViewportChangedEventArgsVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CIEffectiveViewportChangedEventArgs
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CIEffectiveViewportChangedEventArgsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CIEffectiveViewportChangedEventArgs;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CIEffectiveViewportChangedEventArgs_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CIElementFactory_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CIElementFactory_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CIElementFactoryVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CIElementFactory* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CIElementFactory* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CIElementFactory* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CIElementFactory* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CIElementFactory* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CIElementFactory* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetElement)(__x_ABI_CWindows_CUI_CXaml_CIElementFactory* This,
        __x_ABI_CWindows_CUI_CXaml_CIElementFactoryGetArgs* args,
        __x_ABI_CWindows_CUI_CXaml_CIUIElement** result);
    HRESULT (STDMETHODCALLTYPE* RecycleElement)(__x_ABI_CWindows_CUI_CXaml_CIElementFactory* This,
        __x_ABI_CWindows_CUI_CXaml_CIElementFactoryRecycleArgs* args);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CIElementFactoryVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CIElementFactory
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CIElementFactoryVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CIElementFactory;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CIElementFactory_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CIElementFactoryGetArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CIElementFactoryGetArgs_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CIElementFactoryGetArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CIElementFactoryGetArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CIElementFactoryGetArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CIElementFactoryGetArgs* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CIElementFactoryGetArgs* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CIElementFactoryGetArgs* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CIElementFactoryGetArgs* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Data)(__x_ABI_CWindows_CUI_CXaml_CIElementFactoryGetArgs* This,
        IInspectable** value);
    HRESULT (STDMETHODCALLTYPE* put_Data)(__x_ABI_CWindows_CUI_CXaml_CIElementFactoryGetArgs* This,
        IInspectable* value);
    HRESULT (STDMETHODCALLTYPE* get_Parent)(__x_ABI_CWindows_CUI_CXaml_CIElementFactoryGetArgs* This,
        __x_ABI_CWindows_CUI_CXaml_CIUIElement** value);
    HRESULT (STDMETHODCALLTYPE* put_Parent)(__x_ABI_CWindows_CUI_CXaml_CIElementFactoryGetArgs* This,
        __x_ABI_CWindows_CUI_CXaml_CIUIElement* value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CIElementFactoryGetArgsVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CIElementFactoryGetArgs
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CIElementFactoryGetArgsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CIElementFactoryGetArgs;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CIElementFactoryGetArgs_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CIElementFactoryGetArgsFactory_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CIElementFactoryGetArgsFactory_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CIElementFactoryGetArgsFactoryVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CIElementFactoryGetArgsFactory* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CIElementFactoryGetArgsFactory* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CIElementFactoryGetArgsFactory* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CIElementFactoryGetArgsFactory* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CIElementFactoryGetArgsFactory* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CIElementFactoryGetArgsFactory* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* CreateInstance)(__x_ABI_CWindows_CUI_CXaml_CIElementFactoryGetArgsFactory* This,
        IInspectable* baseInterface,
        IInspectable** innerInterface,
        __x_ABI_CWindows_CUI_CXaml_CIElementFactoryGetArgs** value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CIElementFactoryGetArgsFactoryVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CIElementFactoryGetArgsFactory
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CIElementFactoryGetArgsFactoryVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CIElementFactoryGetArgsFactory;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CIElementFactoryGetArgsFactory_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CIElementFactoryRecycleArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CIElementFactoryRecycleArgs_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CIElementFactoryRecycleArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CIElementFactoryRecycleArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CIElementFactoryRecycleArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CIElementFactoryRecycleArgs* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CIElementFactoryRecycleArgs* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CIElementFactoryRecycleArgs* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CIElementFactoryRecycleArgs* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Element)(__x_ABI_CWindows_CUI_CXaml_CIElementFactoryRecycleArgs* This,
        __x_ABI_CWindows_CUI_CXaml_CIUIElement** value);
    HRESULT (STDMETHODCALLTYPE* put_Element)(__x_ABI_CWindows_CUI_CXaml_CIElementFactoryRecycleArgs* This,
        __x_ABI_CWindows_CUI_CXaml_CIUIElement* value);
    HRESULT (STDMETHODCALLTYPE* get_Parent)(__x_ABI_CWindows_CUI_CXaml_CIElementFactoryRecycleArgs* This,
        __x_ABI_CWindows_CUI_CXaml_CIUIElement** value);
    HRESULT (STDMETHODCALLTYPE* put_Parent)(__x_ABI_CWindows_CUI_CXaml_CIElementFactoryRecycleArgs* This,
        __x_ABI_CWindows_CUI_CXaml_CIUIElement* value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CIElementFactoryRecycleArgsVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CIElementFactoryRecycleArgs
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CIElementFactoryRecycleArgsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CIElementFactoryRecycleArgs;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CIElementFactoryRecycleArgs_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CIElementFactoryRecycleArgsFactory_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CIElementFactoryRecycleArgsFactory_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CIElementFactoryRecycleArgsFactoryVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CIElementFactoryRecycleArgsFactory* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CIElementFactoryRecycleArgsFactory* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CIElementFactoryRecycleArgsFactory* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CIElementFactoryRecycleArgsFactory* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CIElementFactoryRecycleArgsFactory* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CIElementFactoryRecycleArgsFactory* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* CreateInstance)(__x_ABI_CWindows_CUI_CXaml_CIElementFactoryRecycleArgsFactory* This,
        IInspectable* baseInterface,
        IInspectable** innerInterface,
        __x_ABI_CWindows_CUI_CXaml_CIElementFactoryRecycleArgs** value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CIElementFactoryRecycleArgsFactoryVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CIElementFactoryRecycleArgsFactory
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CIElementFactoryRecycleArgsFactoryVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CIElementFactoryRecycleArgsFactory;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CIElementFactoryRecycleArgsFactory_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CIElementSoundPlayer_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CIElementSoundPlayer_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CIElementSoundPlayerVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CIElementSoundPlayer* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CIElementSoundPlayer* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CIElementSoundPlayer* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CIElementSoundPlayer* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CIElementSoundPlayer* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CIElementSoundPlayer* This,
            TrustLevel* trustLevel);
    
        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CIElementSoundPlayerVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CIElementSoundPlayer
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CIElementSoundPlayerVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CIElementSoundPlayer;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CIElementSoundPlayer_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CIElementSoundPlayerStatics_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CIElementSoundPlayerStatics_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CIElementSoundPlayerStaticsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CIElementSoundPlayerStatics* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CIElementSoundPlayerStatics* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CIElementSoundPlayerStatics* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CIElementSoundPlayerStatics* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CIElementSoundPlayerStatics* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CIElementSoundPlayerStatics* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Volume)(__x_ABI_CWindows_CUI_CXaml_CIElementSoundPlayerStatics* This,
        DOUBLE* value);
    HRESULT (STDMETHODCALLTYPE* put_Volume)(__x_ABI_CWindows_CUI_CXaml_CIElementSoundPlayerStatics* This,
        DOUBLE value);
    HRESULT (STDMETHODCALLTYPE* get_State)(__x_ABI_CWindows_CUI_CXaml_CIElementSoundPlayerStatics* This,
        enum __x_ABI_CWindows_CUI_CXaml_CElementSoundPlayerState* value);
    HRESULT (STDMETHODCALLTYPE* put_State)(__x_ABI_CWindows_CUI_CXaml_CIElementSoundPlayerStatics* This,
        enum __x_ABI_CWindows_CUI_CXaml_CElementSoundPlayerState value);
    HRESULT (STDMETHODCALLTYPE* Play)(__x_ABI_CWindows_CUI_CXaml_CIElementSoundPlayerStatics* This,
        enum __x_ABI_CWindows_CUI_CXaml_CElementSoundKind sound);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CIElementSoundPlayerStaticsVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CIElementSoundPlayerStatics
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CIElementSoundPlayerStaticsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CIElementSoundPlayerStatics;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CIElementSoundPlayerStatics_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CIElementSoundPlayerStatics2_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CIElementSoundPlayerStatics2_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CIElementSoundPlayerStatics2Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CIElementSoundPlayerStatics2* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CIElementSoundPlayerStatics2* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CIElementSoundPlayerStatics2* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CIElementSoundPlayerStatics2* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CIElementSoundPlayerStatics2* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CIElementSoundPlayerStatics2* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_SpatialAudioMode)(__x_ABI_CWindows_CUI_CXaml_CIElementSoundPlayerStatics2* This,
        enum __x_ABI_CWindows_CUI_CXaml_CElementSpatialAudioMode* value);
    HRESULT (STDMETHODCALLTYPE* put_SpatialAudioMode)(__x_ABI_CWindows_CUI_CXaml_CIElementSoundPlayerStatics2* This,
        enum __x_ABI_CWindows_CUI_CXaml_CElementSpatialAudioMode value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CIElementSoundPlayerStatics2Vtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CIElementSoundPlayerStatics2
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CIElementSoundPlayerStatics2Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CIElementSoundPlayerStatics2;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CIElementSoundPlayerStatics2_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CIEventTrigger_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CIEventTrigger_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CIEventTriggerVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CIEventTrigger* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CIEventTrigger* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CIEventTrigger* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CIEventTrigger* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CIEventTrigger* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CIEventTrigger* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_RoutedEvent)(__x_ABI_CWindows_CUI_CXaml_CIEventTrigger* This,
        __x_ABI_CWindows_CUI_CXaml_CIRoutedEvent** value);
    HRESULT (STDMETHODCALLTYPE* put_RoutedEvent)(__x_ABI_CWindows_CUI_CXaml_CIEventTrigger* This,
        __x_ABI_CWindows_CUI_CXaml_CIRoutedEvent* value);
    HRESULT (STDMETHODCALLTYPE* get_Actions)(__x_ABI_CWindows_CUI_CXaml_CIEventTrigger* This,
        __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CTriggerAction** value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CIEventTriggerVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CIEventTrigger
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CIEventTriggerVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CIEventTrigger;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CIEventTrigger_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CIExceptionRoutedEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CIExceptionRoutedEventArgs_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CIExceptionRoutedEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CIExceptionRoutedEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CIExceptionRoutedEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CIExceptionRoutedEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CIExceptionRoutedEventArgs* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CIExceptionRoutedEventArgs* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CIExceptionRoutedEventArgs* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_ErrorMessage)(__x_ABI_CWindows_CUI_CXaml_CIExceptionRoutedEventArgs* This,
        HSTRING* value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CIExceptionRoutedEventArgsVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CIExceptionRoutedEventArgs
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CIExceptionRoutedEventArgsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CIExceptionRoutedEventArgs;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CIExceptionRoutedEventArgs_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CIExceptionRoutedEventArgsFactory_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CIExceptionRoutedEventArgsFactory_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CIExceptionRoutedEventArgsFactoryVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CIExceptionRoutedEventArgsFactory* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CIExceptionRoutedEventArgsFactory* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CIExceptionRoutedEventArgsFactory* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CIExceptionRoutedEventArgsFactory* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CIExceptionRoutedEventArgsFactory* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CIExceptionRoutedEventArgsFactory* This,
            TrustLevel* trustLevel);
    
        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CIExceptionRoutedEventArgsFactoryVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CIExceptionRoutedEventArgsFactory
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CIExceptionRoutedEventArgsFactoryVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CIExceptionRoutedEventArgsFactory;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CIExceptionRoutedEventArgsFactory_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CIFrameworkElement_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CIFrameworkElement_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CIFrameworkElementVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CIFrameworkElement* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CIFrameworkElement* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CIFrameworkElement* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CIFrameworkElement* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CIFrameworkElement* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CIFrameworkElement* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Triggers)(__x_ABI_CWindows_CUI_CXaml_CIFrameworkElement* This,
        __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CTriggerBase** value);
    HRESULT (STDMETHODCALLTYPE* get_Resources)(__x_ABI_CWindows_CUI_CXaml_CIFrameworkElement* This,
        __x_ABI_CWindows_CUI_CXaml_CIResourceDictionary** value);
    HRESULT (STDMETHODCALLTYPE* put_Resources)(__x_ABI_CWindows_CUI_CXaml_CIFrameworkElement* This,
        __x_ABI_CWindows_CUI_CXaml_CIResourceDictionary* value);
    HRESULT (STDMETHODCALLTYPE* get_Tag)(__x_ABI_CWindows_CUI_CXaml_CIFrameworkElement* This,
        IInspectable** value);
    HRESULT (STDMETHODCALLTYPE* put_Tag)(__x_ABI_CWindows_CUI_CXaml_CIFrameworkElement* This,
        IInspectable* value);
    HRESULT (STDMETHODCALLTYPE* get_Language)(__x_ABI_CWindows_CUI_CXaml_CIFrameworkElement* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* put_Language)(__x_ABI_CWindows_CUI_CXaml_CIFrameworkElement* This,
        HSTRING value);
    HRESULT (STDMETHODCALLTYPE* get_ActualWidth)(__x_ABI_CWindows_CUI_CXaml_CIFrameworkElement* This,
        DOUBLE* value);
    HRESULT (STDMETHODCALLTYPE* get_ActualHeight)(__x_ABI_CWindows_CUI_CXaml_CIFrameworkElement* This,
        DOUBLE* value);
    HRESULT (STDMETHODCALLTYPE* get_Width)(__x_ABI_CWindows_CUI_CXaml_CIFrameworkElement* This,
        DOUBLE* value);
    HRESULT (STDMETHODCALLTYPE* put_Width)(__x_ABI_CWindows_CUI_CXaml_CIFrameworkElement* This,
        DOUBLE value);
    HRESULT (STDMETHODCALLTYPE* get_Height)(__x_ABI_CWindows_CUI_CXaml_CIFrameworkElement* This,
        DOUBLE* value);
    HRESULT (STDMETHODCALLTYPE* put_Height)(__x_ABI_CWindows_CUI_CXaml_CIFrameworkElement* This,
        DOUBLE value);
    HRESULT (STDMETHODCALLTYPE* get_MinWidth)(__x_ABI_CWindows_CUI_CXaml_CIFrameworkElement* This,
        DOUBLE* value);
    HRESULT (STDMETHODCALLTYPE* put_MinWidth)(__x_ABI_CWindows_CUI_CXaml_CIFrameworkElement* This,
        DOUBLE value);
    HRESULT (STDMETHODCALLTYPE* get_MaxWidth)(__x_ABI_CWindows_CUI_CXaml_CIFrameworkElement* This,
        DOUBLE* value);
    HRESULT (STDMETHODCALLTYPE* put_MaxWidth)(__x_ABI_CWindows_CUI_CXaml_CIFrameworkElement* This,
        DOUBLE value);
    HRESULT (STDMETHODCALLTYPE* get_MinHeight)(__x_ABI_CWindows_CUI_CXaml_CIFrameworkElement* This,
        DOUBLE* value);
    HRESULT (STDMETHODCALLTYPE* put_MinHeight)(__x_ABI_CWindows_CUI_CXaml_CIFrameworkElement* This,
        DOUBLE value);
    HRESULT (STDMETHODCALLTYPE* get_MaxHeight)(__x_ABI_CWindows_CUI_CXaml_CIFrameworkElement* This,
        DOUBLE* value);
    HRESULT (STDMETHODCALLTYPE* put_MaxHeight)(__x_ABI_CWindows_CUI_CXaml_CIFrameworkElement* This,
        DOUBLE value);
    HRESULT (STDMETHODCALLTYPE* get_HorizontalAlignment)(__x_ABI_CWindows_CUI_CXaml_CIFrameworkElement* This,
        enum __x_ABI_CWindows_CUI_CXaml_CHorizontalAlignment* value);
    HRESULT (STDMETHODCALLTYPE* put_HorizontalAlignment)(__x_ABI_CWindows_CUI_CXaml_CIFrameworkElement* This,
        enum __x_ABI_CWindows_CUI_CXaml_CHorizontalAlignment value);
    HRESULT (STDMETHODCALLTYPE* get_VerticalAlignment)(__x_ABI_CWindows_CUI_CXaml_CIFrameworkElement* This,
        enum __x_ABI_CWindows_CUI_CXaml_CVerticalAlignment* value);
    HRESULT (STDMETHODCALLTYPE* put_VerticalAlignment)(__x_ABI_CWindows_CUI_CXaml_CIFrameworkElement* This,
        enum __x_ABI_CWindows_CUI_CXaml_CVerticalAlignment value);
    HRESULT (STDMETHODCALLTYPE* get_Margin)(__x_ABI_CWindows_CUI_CXaml_CIFrameworkElement* This,
        struct __x_ABI_CWindows_CUI_CXaml_CThickness* value);
    HRESULT (STDMETHODCALLTYPE* put_Margin)(__x_ABI_CWindows_CUI_CXaml_CIFrameworkElement* This,
        struct __x_ABI_CWindows_CUI_CXaml_CThickness value);
    HRESULT (STDMETHODCALLTYPE* get_Name)(__x_ABI_CWindows_CUI_CXaml_CIFrameworkElement* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* put_Name)(__x_ABI_CWindows_CUI_CXaml_CIFrameworkElement* This,
        HSTRING value);
    HRESULT (STDMETHODCALLTYPE* get_BaseUri)(__x_ABI_CWindows_CUI_CXaml_CIFrameworkElement* This,
        __x_ABI_CWindows_CFoundation_CIUriRuntimeClass** value);
    HRESULT (STDMETHODCALLTYPE* get_DataContext)(__x_ABI_CWindows_CUI_CXaml_CIFrameworkElement* This,
        IInspectable** value);
    HRESULT (STDMETHODCALLTYPE* put_DataContext)(__x_ABI_CWindows_CUI_CXaml_CIFrameworkElement* This,
        IInspectable* value);
    HRESULT (STDMETHODCALLTYPE* get_Style)(__x_ABI_CWindows_CUI_CXaml_CIFrameworkElement* This,
        __x_ABI_CWindows_CUI_CXaml_CIStyle** value);
    HRESULT (STDMETHODCALLTYPE* put_Style)(__x_ABI_CWindows_CUI_CXaml_CIFrameworkElement* This,
        __x_ABI_CWindows_CUI_CXaml_CIStyle* value);
    HRESULT (STDMETHODCALLTYPE* get_Parent)(__x_ABI_CWindows_CUI_CXaml_CIFrameworkElement* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyObject** value);
    HRESULT (STDMETHODCALLTYPE* get_FlowDirection)(__x_ABI_CWindows_CUI_CXaml_CIFrameworkElement* This,
        enum __x_ABI_CWindows_CUI_CXaml_CFlowDirection* value);
    HRESULT (STDMETHODCALLTYPE* put_FlowDirection)(__x_ABI_CWindows_CUI_CXaml_CIFrameworkElement* This,
        enum __x_ABI_CWindows_CUI_CXaml_CFlowDirection value);
    HRESULT (STDMETHODCALLTYPE* add_Loaded)(__x_ABI_CWindows_CUI_CXaml_CIFrameworkElement* This,
        __x_ABI_CWindows_CUI_CXaml_CIRoutedEventHandler* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_Loaded)(__x_ABI_CWindows_CUI_CXaml_CIFrameworkElement* This,
        EventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* add_Unloaded)(__x_ABI_CWindows_CUI_CXaml_CIFrameworkElement* This,
        __x_ABI_CWindows_CUI_CXaml_CIRoutedEventHandler* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_Unloaded)(__x_ABI_CWindows_CUI_CXaml_CIFrameworkElement* This,
        EventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* add_SizeChanged)(__x_ABI_CWindows_CUI_CXaml_CIFrameworkElement* This,
        __x_ABI_CWindows_CUI_CXaml_CISizeChangedEventHandler* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_SizeChanged)(__x_ABI_CWindows_CUI_CXaml_CIFrameworkElement* This,
        EventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* add_LayoutUpdated)(__x_ABI_CWindows_CUI_CXaml_CIFrameworkElement* This,
        __x_ABI_C__FIEventHandler_1_IInspectable* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_LayoutUpdated)(__x_ABI_CWindows_CUI_CXaml_CIFrameworkElement* This,
        EventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* FindName)(__x_ABI_CWindows_CUI_CXaml_CIFrameworkElement* This,
        HSTRING name,
        IInspectable** result);
    HRESULT (STDMETHODCALLTYPE* SetBinding)(__x_ABI_CWindows_CUI_CXaml_CIFrameworkElement* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty* dp,
        __x_ABI_CWindows_CUI_CXaml_CData_CIBindingBase* binding);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CIFrameworkElementVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CIFrameworkElement
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CIFrameworkElementVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CIFrameworkElement;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CIFrameworkElement_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CIFrameworkElement2_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CIFrameworkElement2_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CIFrameworkElement2Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CIFrameworkElement2* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CIFrameworkElement2* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CIFrameworkElement2* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CIFrameworkElement2* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CIFrameworkElement2* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CIFrameworkElement2* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_RequestedTheme)(__x_ABI_CWindows_CUI_CXaml_CIFrameworkElement2* This,
        enum __x_ABI_CWindows_CUI_CXaml_CElementTheme* value);
    HRESULT (STDMETHODCALLTYPE* put_RequestedTheme)(__x_ABI_CWindows_CUI_CXaml_CIFrameworkElement2* This,
        enum __x_ABI_CWindows_CUI_CXaml_CElementTheme value);
    HRESULT (STDMETHODCALLTYPE* add_DataContextChanged)(__x_ABI_CWindows_CUI_CXaml_CIFrameworkElement2* This,
        __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CFrameworkElement___x_ABI_CWindows__CUI__CXaml__CDataContextChangedEventArgs* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_DataContextChanged)(__x_ABI_CWindows_CUI_CXaml_CIFrameworkElement2* This,
        EventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* GetBindingExpression)(__x_ABI_CWindows_CUI_CXaml_CIFrameworkElement2* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty* dp,
        __x_ABI_CWindows_CUI_CXaml_CData_CIBindingExpression** result);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CIFrameworkElement2Vtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CIFrameworkElement2
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CIFrameworkElement2Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CIFrameworkElement2;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CIFrameworkElement2_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CIFrameworkElement3_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CIFrameworkElement3_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CIFrameworkElement3Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CIFrameworkElement3* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CIFrameworkElement3* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CIFrameworkElement3* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CIFrameworkElement3* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CIFrameworkElement3* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CIFrameworkElement3* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* add_Loading)(__x_ABI_CWindows_CUI_CXaml_CIFrameworkElement3* This,
        __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CFrameworkElement_IInspectable* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_Loading)(__x_ABI_CWindows_CUI_CXaml_CIFrameworkElement3* This,
        EventRegistrationToken token);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CIFrameworkElement3Vtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CIFrameworkElement3
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CIFrameworkElement3Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CIFrameworkElement3;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CIFrameworkElement3_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CIFrameworkElement4_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CIFrameworkElement4_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CIFrameworkElement4Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CIFrameworkElement4* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CIFrameworkElement4* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CIFrameworkElement4* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CIFrameworkElement4* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CIFrameworkElement4* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CIFrameworkElement4* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_AllowFocusOnInteraction)(__x_ABI_CWindows_CUI_CXaml_CIFrameworkElement4* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* put_AllowFocusOnInteraction)(__x_ABI_CWindows_CUI_CXaml_CIFrameworkElement4* This,
        boolean value);
    HRESULT (STDMETHODCALLTYPE* get_FocusVisualMargin)(__x_ABI_CWindows_CUI_CXaml_CIFrameworkElement4* This,
        struct __x_ABI_CWindows_CUI_CXaml_CThickness* value);
    HRESULT (STDMETHODCALLTYPE* put_FocusVisualMargin)(__x_ABI_CWindows_CUI_CXaml_CIFrameworkElement4* This,
        struct __x_ABI_CWindows_CUI_CXaml_CThickness value);
    HRESULT (STDMETHODCALLTYPE* get_FocusVisualSecondaryThickness)(__x_ABI_CWindows_CUI_CXaml_CIFrameworkElement4* This,
        struct __x_ABI_CWindows_CUI_CXaml_CThickness* value);
    HRESULT (STDMETHODCALLTYPE* put_FocusVisualSecondaryThickness)(__x_ABI_CWindows_CUI_CXaml_CIFrameworkElement4* This,
        struct __x_ABI_CWindows_CUI_CXaml_CThickness value);
    HRESULT (STDMETHODCALLTYPE* get_FocusVisualPrimaryThickness)(__x_ABI_CWindows_CUI_CXaml_CIFrameworkElement4* This,
        struct __x_ABI_CWindows_CUI_CXaml_CThickness* value);
    HRESULT (STDMETHODCALLTYPE* put_FocusVisualPrimaryThickness)(__x_ABI_CWindows_CUI_CXaml_CIFrameworkElement4* This,
        struct __x_ABI_CWindows_CUI_CXaml_CThickness value);
    HRESULT (STDMETHODCALLTYPE* get_FocusVisualSecondaryBrush)(__x_ABI_CWindows_CUI_CXaml_CIFrameworkElement4* This,
        __x_ABI_CWindows_CUI_CXaml_CMedia_CIBrush** value);
    HRESULT (STDMETHODCALLTYPE* put_FocusVisualSecondaryBrush)(__x_ABI_CWindows_CUI_CXaml_CIFrameworkElement4* This,
        __x_ABI_CWindows_CUI_CXaml_CMedia_CIBrush* value);
    HRESULT (STDMETHODCALLTYPE* get_FocusVisualPrimaryBrush)(__x_ABI_CWindows_CUI_CXaml_CIFrameworkElement4* This,
        __x_ABI_CWindows_CUI_CXaml_CMedia_CIBrush** value);
    HRESULT (STDMETHODCALLTYPE* put_FocusVisualPrimaryBrush)(__x_ABI_CWindows_CUI_CXaml_CIFrameworkElement4* This,
        __x_ABI_CWindows_CUI_CXaml_CMedia_CIBrush* value);
    HRESULT (STDMETHODCALLTYPE* get_AllowFocusWhenDisabled)(__x_ABI_CWindows_CUI_CXaml_CIFrameworkElement4* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* put_AllowFocusWhenDisabled)(__x_ABI_CWindows_CUI_CXaml_CIFrameworkElement4* This,
        boolean value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CIFrameworkElement4Vtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CIFrameworkElement4
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CIFrameworkElement4Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CIFrameworkElement4;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CIFrameworkElement4_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CIFrameworkElement6_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CIFrameworkElement6_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CIFrameworkElement6Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CIFrameworkElement6* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CIFrameworkElement6* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CIFrameworkElement6* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CIFrameworkElement6* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CIFrameworkElement6* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CIFrameworkElement6* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_ActualTheme)(__x_ABI_CWindows_CUI_CXaml_CIFrameworkElement6* This,
        enum __x_ABI_CWindows_CUI_CXaml_CElementTheme* value);
    HRESULT (STDMETHODCALLTYPE* add_ActualThemeChanged)(__x_ABI_CWindows_CUI_CXaml_CIFrameworkElement6* This,
        __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CFrameworkElement_IInspectable* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_ActualThemeChanged)(__x_ABI_CWindows_CUI_CXaml_CIFrameworkElement6* This,
        EventRegistrationToken token);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CIFrameworkElement6Vtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CIFrameworkElement6
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CIFrameworkElement6Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CIFrameworkElement6;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CIFrameworkElement6_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CIFrameworkElement7_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CIFrameworkElement7_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CIFrameworkElement7Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CIFrameworkElement7* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CIFrameworkElement7* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CIFrameworkElement7* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CIFrameworkElement7* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CIFrameworkElement7* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CIFrameworkElement7* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_IsLoaded)(__x_ABI_CWindows_CUI_CXaml_CIFrameworkElement7* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* add_EffectiveViewportChanged)(__x_ABI_CWindows_CUI_CXaml_CIFrameworkElement7* This,
        __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CFrameworkElement___x_ABI_CWindows__CUI__CXaml__CEffectiveViewportChangedEventArgs* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_EffectiveViewportChanged)(__x_ABI_CWindows_CUI_CXaml_CIFrameworkElement7* This,
        EventRegistrationToken token);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CIFrameworkElement7Vtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CIFrameworkElement7
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CIFrameworkElement7Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CIFrameworkElement7;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CIFrameworkElement7_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CIFrameworkElementFactory_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CIFrameworkElementFactory_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CIFrameworkElementFactoryVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CIFrameworkElementFactory* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CIFrameworkElementFactory* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CIFrameworkElementFactory* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CIFrameworkElementFactory* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CIFrameworkElementFactory* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CIFrameworkElementFactory* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* CreateInstance)(__x_ABI_CWindows_CUI_CXaml_CIFrameworkElementFactory* This,
        IInspectable* baseInterface,
        IInspectable** innerInterface,
        __x_ABI_CWindows_CUI_CXaml_CIFrameworkElement** value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CIFrameworkElementFactoryVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CIFrameworkElementFactory
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CIFrameworkElementFactoryVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CIFrameworkElementFactory;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CIFrameworkElementFactory_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CIFrameworkElementOverrides_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CIFrameworkElementOverrides_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CIFrameworkElementOverridesVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CIFrameworkElementOverrides* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CIFrameworkElementOverrides* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CIFrameworkElementOverrides* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CIFrameworkElementOverrides* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CIFrameworkElementOverrides* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CIFrameworkElementOverrides* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* MeasureOverride)(__x_ABI_CWindows_CUI_CXaml_CIFrameworkElementOverrides* This,
        struct __x_ABI_CWindows_CFoundation_CSize availableSize,
        struct __x_ABI_CWindows_CFoundation_CSize* result);
    HRESULT (STDMETHODCALLTYPE* ArrangeOverride)(__x_ABI_CWindows_CUI_CXaml_CIFrameworkElementOverrides* This,
        struct __x_ABI_CWindows_CFoundation_CSize finalSize,
        struct __x_ABI_CWindows_CFoundation_CSize* result);
    HRESULT (STDMETHODCALLTYPE* OnApplyTemplate)(__x_ABI_CWindows_CUI_CXaml_CIFrameworkElementOverrides* This);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CIFrameworkElementOverridesVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CIFrameworkElementOverrides
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CIFrameworkElementOverridesVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CIFrameworkElementOverrides;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CIFrameworkElementOverrides_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CIFrameworkElementOverrides2_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CIFrameworkElementOverrides2_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CIFrameworkElementOverrides2Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CIFrameworkElementOverrides2* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CIFrameworkElementOverrides2* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CIFrameworkElementOverrides2* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CIFrameworkElementOverrides2* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CIFrameworkElementOverrides2* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CIFrameworkElementOverrides2* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GoToElementStateCore)(__x_ABI_CWindows_CUI_CXaml_CIFrameworkElementOverrides2* This,
        HSTRING stateName,
        boolean useTransitions,
        boolean* result);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CIFrameworkElementOverrides2Vtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CIFrameworkElementOverrides2
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CIFrameworkElementOverrides2Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CIFrameworkElementOverrides2;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CIFrameworkElementOverrides2_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CIFrameworkElementProtected7_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CIFrameworkElementProtected7_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CIFrameworkElementProtected7Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CIFrameworkElementProtected7* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CIFrameworkElementProtected7* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CIFrameworkElementProtected7* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CIFrameworkElementProtected7* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CIFrameworkElementProtected7* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CIFrameworkElementProtected7* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* InvalidateViewport)(__x_ABI_CWindows_CUI_CXaml_CIFrameworkElementProtected7* This);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CIFrameworkElementProtected7Vtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CIFrameworkElementProtected7
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CIFrameworkElementProtected7Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CIFrameworkElementProtected7;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CIFrameworkElementProtected7_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CIFrameworkElementStatics_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CIFrameworkElementStatics_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CIFrameworkElementStaticsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CIFrameworkElementStatics* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CIFrameworkElementStatics* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CIFrameworkElementStatics* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CIFrameworkElementStatics* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CIFrameworkElementStatics* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CIFrameworkElementStatics* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_TagProperty)(__x_ABI_CWindows_CUI_CXaml_CIFrameworkElementStatics* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** value);
    HRESULT (STDMETHODCALLTYPE* get_LanguageProperty)(__x_ABI_CWindows_CUI_CXaml_CIFrameworkElementStatics* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** value);
    HRESULT (STDMETHODCALLTYPE* get_ActualWidthProperty)(__x_ABI_CWindows_CUI_CXaml_CIFrameworkElementStatics* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** value);
    HRESULT (STDMETHODCALLTYPE* get_ActualHeightProperty)(__x_ABI_CWindows_CUI_CXaml_CIFrameworkElementStatics* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** value);
    HRESULT (STDMETHODCALLTYPE* get_WidthProperty)(__x_ABI_CWindows_CUI_CXaml_CIFrameworkElementStatics* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** value);
    HRESULT (STDMETHODCALLTYPE* get_HeightProperty)(__x_ABI_CWindows_CUI_CXaml_CIFrameworkElementStatics* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** value);
    HRESULT (STDMETHODCALLTYPE* get_MinWidthProperty)(__x_ABI_CWindows_CUI_CXaml_CIFrameworkElementStatics* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** value);
    HRESULT (STDMETHODCALLTYPE* get_MaxWidthProperty)(__x_ABI_CWindows_CUI_CXaml_CIFrameworkElementStatics* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** value);
    HRESULT (STDMETHODCALLTYPE* get_MinHeightProperty)(__x_ABI_CWindows_CUI_CXaml_CIFrameworkElementStatics* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** value);
    HRESULT (STDMETHODCALLTYPE* get_MaxHeightProperty)(__x_ABI_CWindows_CUI_CXaml_CIFrameworkElementStatics* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** value);
    HRESULT (STDMETHODCALLTYPE* get_HorizontalAlignmentProperty)(__x_ABI_CWindows_CUI_CXaml_CIFrameworkElementStatics* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** value);
    HRESULT (STDMETHODCALLTYPE* get_VerticalAlignmentProperty)(__x_ABI_CWindows_CUI_CXaml_CIFrameworkElementStatics* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** value);
    HRESULT (STDMETHODCALLTYPE* get_MarginProperty)(__x_ABI_CWindows_CUI_CXaml_CIFrameworkElementStatics* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** value);
    HRESULT (STDMETHODCALLTYPE* get_NameProperty)(__x_ABI_CWindows_CUI_CXaml_CIFrameworkElementStatics* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** value);
    HRESULT (STDMETHODCALLTYPE* get_DataContextProperty)(__x_ABI_CWindows_CUI_CXaml_CIFrameworkElementStatics* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** value);
    HRESULT (STDMETHODCALLTYPE* get_StyleProperty)(__x_ABI_CWindows_CUI_CXaml_CIFrameworkElementStatics* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** value);
    HRESULT (STDMETHODCALLTYPE* get_FlowDirectionProperty)(__x_ABI_CWindows_CUI_CXaml_CIFrameworkElementStatics* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CIFrameworkElementStaticsVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CIFrameworkElementStatics
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CIFrameworkElementStaticsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CIFrameworkElementStatics;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CIFrameworkElementStatics_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CIFrameworkElementStatics2_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CIFrameworkElementStatics2_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CIFrameworkElementStatics2Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CIFrameworkElementStatics2* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CIFrameworkElementStatics2* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CIFrameworkElementStatics2* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CIFrameworkElementStatics2* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CIFrameworkElementStatics2* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CIFrameworkElementStatics2* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_RequestedThemeProperty)(__x_ABI_CWindows_CUI_CXaml_CIFrameworkElementStatics2* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CIFrameworkElementStatics2Vtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CIFrameworkElementStatics2
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CIFrameworkElementStatics2Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CIFrameworkElementStatics2;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CIFrameworkElementStatics2_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CIFrameworkElementStatics4_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CIFrameworkElementStatics4_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CIFrameworkElementStatics4Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CIFrameworkElementStatics4* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CIFrameworkElementStatics4* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CIFrameworkElementStatics4* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CIFrameworkElementStatics4* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CIFrameworkElementStatics4* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CIFrameworkElementStatics4* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_AllowFocusOnInteractionProperty)(__x_ABI_CWindows_CUI_CXaml_CIFrameworkElementStatics4* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** value);
    HRESULT (STDMETHODCALLTYPE* get_FocusVisualMarginProperty)(__x_ABI_CWindows_CUI_CXaml_CIFrameworkElementStatics4* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** value);
    HRESULT (STDMETHODCALLTYPE* get_FocusVisualSecondaryThicknessProperty)(__x_ABI_CWindows_CUI_CXaml_CIFrameworkElementStatics4* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** value);
    HRESULT (STDMETHODCALLTYPE* get_FocusVisualPrimaryThicknessProperty)(__x_ABI_CWindows_CUI_CXaml_CIFrameworkElementStatics4* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** value);
    HRESULT (STDMETHODCALLTYPE* get_FocusVisualSecondaryBrushProperty)(__x_ABI_CWindows_CUI_CXaml_CIFrameworkElementStatics4* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** value);
    HRESULT (STDMETHODCALLTYPE* get_FocusVisualPrimaryBrushProperty)(__x_ABI_CWindows_CUI_CXaml_CIFrameworkElementStatics4* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** value);
    HRESULT (STDMETHODCALLTYPE* get_AllowFocusWhenDisabledProperty)(__x_ABI_CWindows_CUI_CXaml_CIFrameworkElementStatics4* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CIFrameworkElementStatics4Vtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CIFrameworkElementStatics4
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CIFrameworkElementStatics4Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CIFrameworkElementStatics4;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CIFrameworkElementStatics4_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CIFrameworkElementStatics5_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CIFrameworkElementStatics5_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CIFrameworkElementStatics5Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CIFrameworkElementStatics5* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CIFrameworkElementStatics5* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CIFrameworkElementStatics5* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CIFrameworkElementStatics5* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CIFrameworkElementStatics5* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CIFrameworkElementStatics5* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* DeferTree)(__x_ABI_CWindows_CUI_CXaml_CIFrameworkElementStatics5* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyObject* element);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CIFrameworkElementStatics5Vtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CIFrameworkElementStatics5
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CIFrameworkElementStatics5Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CIFrameworkElementStatics5;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CIFrameworkElementStatics5_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CIFrameworkElementStatics6_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CIFrameworkElementStatics6_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CIFrameworkElementStatics6Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CIFrameworkElementStatics6* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CIFrameworkElementStatics6* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CIFrameworkElementStatics6* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CIFrameworkElementStatics6* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CIFrameworkElementStatics6* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CIFrameworkElementStatics6* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_ActualThemeProperty)(__x_ABI_CWindows_CUI_CXaml_CIFrameworkElementStatics6* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CIFrameworkElementStatics6Vtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CIFrameworkElementStatics6
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CIFrameworkElementStatics6Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CIFrameworkElementStatics6;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CIFrameworkElementStatics6_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CIFrameworkTemplate_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CIFrameworkTemplate_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CIFrameworkTemplateVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CIFrameworkTemplate* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CIFrameworkTemplate* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CIFrameworkTemplate* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CIFrameworkTemplate* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CIFrameworkTemplate* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CIFrameworkTemplate* This,
            TrustLevel* trustLevel);
    
        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CIFrameworkTemplateVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CIFrameworkTemplate
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CIFrameworkTemplateVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CIFrameworkTemplate;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CIFrameworkTemplate_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CIFrameworkTemplateFactory_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CIFrameworkTemplateFactory_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CIFrameworkTemplateFactoryVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CIFrameworkTemplateFactory* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CIFrameworkTemplateFactory* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CIFrameworkTemplateFactory* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CIFrameworkTemplateFactory* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CIFrameworkTemplateFactory* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CIFrameworkTemplateFactory* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* CreateInstance)(__x_ABI_CWindows_CUI_CXaml_CIFrameworkTemplateFactory* This,
        IInspectable* baseInterface,
        IInspectable** innerInterface,
        __x_ABI_CWindows_CUI_CXaml_CIFrameworkTemplate** value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CIFrameworkTemplateFactoryVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CIFrameworkTemplateFactory
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CIFrameworkTemplateFactoryVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CIFrameworkTemplateFactory;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CIFrameworkTemplateFactory_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CIFrameworkView_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CIFrameworkView_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CIFrameworkViewVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CIFrameworkView* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CIFrameworkView* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CIFrameworkView* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CIFrameworkView* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CIFrameworkView* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CIFrameworkView* This,
            TrustLevel* trustLevel);
    
        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CIFrameworkViewVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CIFrameworkView
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CIFrameworkViewVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CIFrameworkView;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CIFrameworkView_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CIFrameworkViewSource_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CIFrameworkViewSource_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CIFrameworkViewSourceVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CIFrameworkViewSource* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CIFrameworkViewSource* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CIFrameworkViewSource* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CIFrameworkViewSource* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CIFrameworkViewSource* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CIFrameworkViewSource* This,
            TrustLevel* trustLevel);
    
        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CIFrameworkViewSourceVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CIFrameworkViewSource
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CIFrameworkViewSourceVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CIFrameworkViewSource;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CIFrameworkViewSource_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CIGridLengthHelper_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CIGridLengthHelper_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CIGridLengthHelperVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CIGridLengthHelper* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CIGridLengthHelper* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CIGridLengthHelper* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CIGridLengthHelper* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CIGridLengthHelper* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CIGridLengthHelper* This,
            TrustLevel* trustLevel);
    
        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CIGridLengthHelperVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CIGridLengthHelper
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CIGridLengthHelperVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CIGridLengthHelper;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CIGridLengthHelper_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CIGridLengthHelperStatics_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CIGridLengthHelperStatics_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CIGridLengthHelperStaticsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CIGridLengthHelperStatics* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CIGridLengthHelperStatics* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CIGridLengthHelperStatics* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CIGridLengthHelperStatics* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CIGridLengthHelperStatics* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CIGridLengthHelperStatics* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Auto)(__x_ABI_CWindows_CUI_CXaml_CIGridLengthHelperStatics* This,
        struct __x_ABI_CWindows_CUI_CXaml_CGridLength* value);
    HRESULT (STDMETHODCALLTYPE* FromPixels)(__x_ABI_CWindows_CUI_CXaml_CIGridLengthHelperStatics* This,
        DOUBLE pixels,
        struct __x_ABI_CWindows_CUI_CXaml_CGridLength* result);
    HRESULT (STDMETHODCALLTYPE* FromValueAndType)(__x_ABI_CWindows_CUI_CXaml_CIGridLengthHelperStatics* This,
        DOUBLE value,
        enum __x_ABI_CWindows_CUI_CXaml_CGridUnitType type,
        struct __x_ABI_CWindows_CUI_CXaml_CGridLength* result);
    HRESULT (STDMETHODCALLTYPE* GetIsAbsolute)(__x_ABI_CWindows_CUI_CXaml_CIGridLengthHelperStatics* This,
        struct __x_ABI_CWindows_CUI_CXaml_CGridLength target,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetIsAuto)(__x_ABI_CWindows_CUI_CXaml_CIGridLengthHelperStatics* This,
        struct __x_ABI_CWindows_CUI_CXaml_CGridLength target,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetIsStar)(__x_ABI_CWindows_CUI_CXaml_CIGridLengthHelperStatics* This,
        struct __x_ABI_CWindows_CUI_CXaml_CGridLength target,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* Equals)(__x_ABI_CWindows_CUI_CXaml_CIGridLengthHelperStatics* This,
        struct __x_ABI_CWindows_CUI_CXaml_CGridLength target,
        struct __x_ABI_CWindows_CUI_CXaml_CGridLength value,
        boolean* result);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CIGridLengthHelperStaticsVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CIGridLengthHelperStatics
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CIGridLengthHelperStaticsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CIGridLengthHelperStatics;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CIGridLengthHelperStatics_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CIMediaFailedRoutedEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CIMediaFailedRoutedEventArgs_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CIMediaFailedRoutedEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CIMediaFailedRoutedEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CIMediaFailedRoutedEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CIMediaFailedRoutedEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CIMediaFailedRoutedEventArgs* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CIMediaFailedRoutedEventArgs* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CIMediaFailedRoutedEventArgs* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_ErrorTrace)(__x_ABI_CWindows_CUI_CXaml_CIMediaFailedRoutedEventArgs* This,
        HSTRING* value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CIMediaFailedRoutedEventArgsVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CIMediaFailedRoutedEventArgs
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CIMediaFailedRoutedEventArgsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CIMediaFailedRoutedEventArgs;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CIMediaFailedRoutedEventArgs_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CIPointHelper_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CIPointHelper_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CIPointHelperVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CIPointHelper* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CIPointHelper* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CIPointHelper* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CIPointHelper* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CIPointHelper* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CIPointHelper* This,
            TrustLevel* trustLevel);
    
        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CIPointHelperVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CIPointHelper
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CIPointHelperVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CIPointHelper;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CIPointHelper_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CIPointHelperStatics_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CIPointHelperStatics_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CIPointHelperStaticsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CIPointHelperStatics* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CIPointHelperStatics* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CIPointHelperStatics* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CIPointHelperStatics* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CIPointHelperStatics* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CIPointHelperStatics* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* FromCoordinates)(__x_ABI_CWindows_CUI_CXaml_CIPointHelperStatics* This,
        FLOAT x,
        FLOAT y,
        struct __x_ABI_CWindows_CFoundation_CPoint* result);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CIPointHelperStaticsVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CIPointHelperStatics
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CIPointHelperStaticsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CIPointHelperStatics;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CIPointHelperStatics_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CIPropertyMetadata_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CIPropertyMetadata_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CIPropertyMetadataVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CIPropertyMetadata* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CIPropertyMetadata* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CIPropertyMetadata* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CIPropertyMetadata* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CIPropertyMetadata* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CIPropertyMetadata* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_DefaultValue)(__x_ABI_CWindows_CUI_CXaml_CIPropertyMetadata* This,
        IInspectable** value);
    HRESULT (STDMETHODCALLTYPE* get_CreateDefaultValueCallback)(__x_ABI_CWindows_CUI_CXaml_CIPropertyMetadata* This,
        __x_ABI_CWindows_CUI_CXaml_CICreateDefaultValueCallback** value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CIPropertyMetadataVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CIPropertyMetadata
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CIPropertyMetadataVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CIPropertyMetadata;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CIPropertyMetadata_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CIPropertyMetadataFactory_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CIPropertyMetadataFactory_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CIPropertyMetadataFactoryVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CIPropertyMetadataFactory* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CIPropertyMetadataFactory* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CIPropertyMetadataFactory* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CIPropertyMetadataFactory* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CIPropertyMetadataFactory* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CIPropertyMetadataFactory* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* CreateInstanceWithDefaultValue)(__x_ABI_CWindows_CUI_CXaml_CIPropertyMetadataFactory* This,
        IInspectable* defaultValue,
        IInspectable* baseInterface,
        IInspectable** innerInterface,
        __x_ABI_CWindows_CUI_CXaml_CIPropertyMetadata** value);
    HRESULT (STDMETHODCALLTYPE* CreateInstanceWithDefaultValueAndCallback)(__x_ABI_CWindows_CUI_CXaml_CIPropertyMetadataFactory* This,
        IInspectable* defaultValue,
        __x_ABI_CWindows_CUI_CXaml_CIPropertyChangedCallback* propertyChangedCallback,
        IInspectable* baseInterface,
        IInspectable** innerInterface,
        __x_ABI_CWindows_CUI_CXaml_CIPropertyMetadata** value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CIPropertyMetadataFactoryVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CIPropertyMetadataFactory
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CIPropertyMetadataFactoryVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CIPropertyMetadataFactory;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CIPropertyMetadataFactory_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CIPropertyMetadataStatics_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CIPropertyMetadataStatics_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CIPropertyMetadataStaticsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CIPropertyMetadataStatics* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CIPropertyMetadataStatics* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CIPropertyMetadataStatics* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CIPropertyMetadataStatics* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CIPropertyMetadataStatics* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CIPropertyMetadataStatics* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* CreateWithDefaultValue)(__x_ABI_CWindows_CUI_CXaml_CIPropertyMetadataStatics* This,
        IInspectable* defaultValue,
        __x_ABI_CWindows_CUI_CXaml_CIPropertyMetadata** result);
    HRESULT (STDMETHODCALLTYPE* CreateWithDefaultValueAndCallback)(__x_ABI_CWindows_CUI_CXaml_CIPropertyMetadataStatics* This,
        IInspectable* defaultValue,
        __x_ABI_CWindows_CUI_CXaml_CIPropertyChangedCallback* propertyChangedCallback,
        __x_ABI_CWindows_CUI_CXaml_CIPropertyMetadata** result);
    HRESULT (STDMETHODCALLTYPE* CreateWithFactory)(__x_ABI_CWindows_CUI_CXaml_CIPropertyMetadataStatics* This,
        __x_ABI_CWindows_CUI_CXaml_CICreateDefaultValueCallback* createDefaultValueCallback,
        __x_ABI_CWindows_CUI_CXaml_CIPropertyMetadata** result);
    HRESULT (STDMETHODCALLTYPE* CreateWithFactoryAndCallback)(__x_ABI_CWindows_CUI_CXaml_CIPropertyMetadataStatics* This,
        __x_ABI_CWindows_CUI_CXaml_CICreateDefaultValueCallback* createDefaultValueCallback,
        __x_ABI_CWindows_CUI_CXaml_CIPropertyChangedCallback* propertyChangedCallback,
        __x_ABI_CWindows_CUI_CXaml_CIPropertyMetadata** result);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CIPropertyMetadataStaticsVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CIPropertyMetadataStatics
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CIPropertyMetadataStaticsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CIPropertyMetadataStatics;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CIPropertyMetadataStatics_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CIPropertyPath_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CIPropertyPath_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CIPropertyPathVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CIPropertyPath* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CIPropertyPath* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CIPropertyPath* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CIPropertyPath* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CIPropertyPath* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CIPropertyPath* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Path)(__x_ABI_CWindows_CUI_CXaml_CIPropertyPath* This,
        HSTRING* value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CIPropertyPathVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CIPropertyPath
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CIPropertyPathVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CIPropertyPath;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CIPropertyPath_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CIPropertyPathFactory_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CIPropertyPathFactory_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CIPropertyPathFactoryVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CIPropertyPathFactory* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CIPropertyPathFactory* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CIPropertyPathFactory* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CIPropertyPathFactory* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CIPropertyPathFactory* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CIPropertyPathFactory* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* CreateInstance)(__x_ABI_CWindows_CUI_CXaml_CIPropertyPathFactory* This,
        HSTRING path,
        __x_ABI_CWindows_CUI_CXaml_CIPropertyPath** value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CIPropertyPathFactoryVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CIPropertyPathFactory
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CIPropertyPathFactoryVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CIPropertyPathFactory;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CIPropertyPathFactory_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CIRectHelper_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CIRectHelper_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CIRectHelperVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CIRectHelper* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CIRectHelper* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CIRectHelper* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CIRectHelper* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CIRectHelper* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CIRectHelper* This,
            TrustLevel* trustLevel);
    
        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CIRectHelperVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CIRectHelper
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CIRectHelperVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CIRectHelper;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CIRectHelper_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CIRectHelperStatics_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CIRectHelperStatics_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CIRectHelperStaticsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CIRectHelperStatics* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CIRectHelperStatics* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CIRectHelperStatics* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CIRectHelperStatics* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CIRectHelperStatics* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CIRectHelperStatics* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Empty)(__x_ABI_CWindows_CUI_CXaml_CIRectHelperStatics* This,
        struct __x_ABI_CWindows_CFoundation_CRect* value);
    HRESULT (STDMETHODCALLTYPE* FromCoordinatesAndDimensions)(__x_ABI_CWindows_CUI_CXaml_CIRectHelperStatics* This,
        FLOAT x,
        FLOAT y,
        FLOAT width,
        FLOAT height,
        struct __x_ABI_CWindows_CFoundation_CRect* result);
    HRESULT (STDMETHODCALLTYPE* FromPoints)(__x_ABI_CWindows_CUI_CXaml_CIRectHelperStatics* This,
        struct __x_ABI_CWindows_CFoundation_CPoint point1,
        struct __x_ABI_CWindows_CFoundation_CPoint point2,
        struct __x_ABI_CWindows_CFoundation_CRect* result);
    HRESULT (STDMETHODCALLTYPE* FromLocationAndSize)(__x_ABI_CWindows_CUI_CXaml_CIRectHelperStatics* This,
        struct __x_ABI_CWindows_CFoundation_CPoint location,
        struct __x_ABI_CWindows_CFoundation_CSize size,
        struct __x_ABI_CWindows_CFoundation_CRect* result);
    HRESULT (STDMETHODCALLTYPE* GetIsEmpty)(__x_ABI_CWindows_CUI_CXaml_CIRectHelperStatics* This,
        struct __x_ABI_CWindows_CFoundation_CRect target,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetBottom)(__x_ABI_CWindows_CUI_CXaml_CIRectHelperStatics* This,
        struct __x_ABI_CWindows_CFoundation_CRect target,
        FLOAT* result);
    HRESULT (STDMETHODCALLTYPE* GetLeft)(__x_ABI_CWindows_CUI_CXaml_CIRectHelperStatics* This,
        struct __x_ABI_CWindows_CFoundation_CRect target,
        FLOAT* result);
    HRESULT (STDMETHODCALLTYPE* GetRight)(__x_ABI_CWindows_CUI_CXaml_CIRectHelperStatics* This,
        struct __x_ABI_CWindows_CFoundation_CRect target,
        FLOAT* result);
    HRESULT (STDMETHODCALLTYPE* GetTop)(__x_ABI_CWindows_CUI_CXaml_CIRectHelperStatics* This,
        struct __x_ABI_CWindows_CFoundation_CRect target,
        FLOAT* result);
    HRESULT (STDMETHODCALLTYPE* Contains)(__x_ABI_CWindows_CUI_CXaml_CIRectHelperStatics* This,
        struct __x_ABI_CWindows_CFoundation_CRect target,
        struct __x_ABI_CWindows_CFoundation_CPoint point,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* Equals)(__x_ABI_CWindows_CUI_CXaml_CIRectHelperStatics* This,
        struct __x_ABI_CWindows_CFoundation_CRect target,
        struct __x_ABI_CWindows_CFoundation_CRect value,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* Intersect)(__x_ABI_CWindows_CUI_CXaml_CIRectHelperStatics* This,
        struct __x_ABI_CWindows_CFoundation_CRect target,
        struct __x_ABI_CWindows_CFoundation_CRect rect,
        struct __x_ABI_CWindows_CFoundation_CRect* result);
    HRESULT (STDMETHODCALLTYPE* UnionWithPoint)(__x_ABI_CWindows_CUI_CXaml_CIRectHelperStatics* This,
        struct __x_ABI_CWindows_CFoundation_CRect target,
        struct __x_ABI_CWindows_CFoundation_CPoint point,
        struct __x_ABI_CWindows_CFoundation_CRect* result);
    HRESULT (STDMETHODCALLTYPE* UnionWithRect)(__x_ABI_CWindows_CUI_CXaml_CIRectHelperStatics* This,
        struct __x_ABI_CWindows_CFoundation_CRect target,
        struct __x_ABI_CWindows_CFoundation_CRect rect,
        struct __x_ABI_CWindows_CFoundation_CRect* result);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CIRectHelperStaticsVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CIRectHelperStatics
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CIRectHelperStaticsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CIRectHelperStatics;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CIRectHelperStatics_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CIResourceDictionary_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CIResourceDictionary_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CIResourceDictionaryVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CIResourceDictionary* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CIResourceDictionary* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CIResourceDictionary* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CIResourceDictionary* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CIResourceDictionary* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CIResourceDictionary* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Source)(__x_ABI_CWindows_CUI_CXaml_CIResourceDictionary* This,
        __x_ABI_CWindows_CFoundation_CIUriRuntimeClass** value);
    HRESULT (STDMETHODCALLTYPE* put_Source)(__x_ABI_CWindows_CUI_CXaml_CIResourceDictionary* This,
        __x_ABI_CWindows_CFoundation_CIUriRuntimeClass* value);
    HRESULT (STDMETHODCALLTYPE* get_MergedDictionaries)(__x_ABI_CWindows_CUI_CXaml_CIResourceDictionary* This,
        __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CResourceDictionary** value);
    HRESULT (STDMETHODCALLTYPE* get_ThemeDictionaries)(__x_ABI_CWindows_CUI_CXaml_CIResourceDictionary* This,
        __x_ABI_C__FIMap_2_IInspectable_IInspectable** value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CIResourceDictionaryVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CIResourceDictionary
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CIResourceDictionaryVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CIResourceDictionary;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CIResourceDictionary_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CIResourceDictionaryFactory_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CIResourceDictionaryFactory_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CIResourceDictionaryFactoryVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CIResourceDictionaryFactory* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CIResourceDictionaryFactory* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CIResourceDictionaryFactory* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CIResourceDictionaryFactory* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CIResourceDictionaryFactory* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CIResourceDictionaryFactory* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* CreateInstance)(__x_ABI_CWindows_CUI_CXaml_CIResourceDictionaryFactory* This,
        IInspectable* baseInterface,
        IInspectable** innerInterface,
        __x_ABI_CWindows_CUI_CXaml_CIResourceDictionary** value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CIResourceDictionaryFactoryVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CIResourceDictionaryFactory
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CIResourceDictionaryFactoryVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CIResourceDictionaryFactory;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CIResourceDictionaryFactory_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CIRoutedEvent_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CIRoutedEvent_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CIRoutedEventVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CIRoutedEvent* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CIRoutedEvent* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CIRoutedEvent* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CIRoutedEvent* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CIRoutedEvent* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CIRoutedEvent* This,
            TrustLevel* trustLevel);
    
        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CIRoutedEventVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CIRoutedEvent
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CIRoutedEventVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CIRoutedEvent;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CIRoutedEvent_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CIRoutedEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CIRoutedEventArgs_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CIRoutedEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CIRoutedEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CIRoutedEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CIRoutedEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CIRoutedEventArgs* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CIRoutedEventArgs* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CIRoutedEventArgs* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_OriginalSource)(__x_ABI_CWindows_CUI_CXaml_CIRoutedEventArgs* This,
        IInspectable** value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CIRoutedEventArgsVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CIRoutedEventArgs
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CIRoutedEventArgsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CIRoutedEventArgs;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CIRoutedEventArgs_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CIRoutedEventArgsFactory_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CIRoutedEventArgsFactory_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CIRoutedEventArgsFactoryVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CIRoutedEventArgsFactory* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CIRoutedEventArgsFactory* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CIRoutedEventArgsFactory* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CIRoutedEventArgsFactory* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CIRoutedEventArgsFactory* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CIRoutedEventArgsFactory* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* CreateInstance)(__x_ABI_CWindows_CUI_CXaml_CIRoutedEventArgsFactory* This,
        IInspectable* baseInterface,
        IInspectable** innerInterface,
        __x_ABI_CWindows_CUI_CXaml_CIRoutedEventArgs** value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CIRoutedEventArgsFactoryVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CIRoutedEventArgsFactory
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CIRoutedEventArgsFactoryVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CIRoutedEventArgsFactory;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CIRoutedEventArgsFactory_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CIScalarTransition_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CIScalarTransition_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CIScalarTransitionVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CIScalarTransition* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CIScalarTransition* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CIScalarTransition* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CIScalarTransition* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CIScalarTransition* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CIScalarTransition* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Duration)(__x_ABI_CWindows_CUI_CXaml_CIScalarTransition* This,
        struct __x_ABI_CWindows_CFoundation_CTimeSpan* value);
    HRESULT (STDMETHODCALLTYPE* put_Duration)(__x_ABI_CWindows_CUI_CXaml_CIScalarTransition* This,
        struct __x_ABI_CWindows_CFoundation_CTimeSpan value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CIScalarTransitionVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CIScalarTransition
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CIScalarTransitionVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CIScalarTransition;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CIScalarTransition_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CIScalarTransitionFactory_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CIScalarTransitionFactory_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CIScalarTransitionFactoryVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CIScalarTransitionFactory* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CIScalarTransitionFactory* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CIScalarTransitionFactory* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CIScalarTransitionFactory* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CIScalarTransitionFactory* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CIScalarTransitionFactory* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* CreateInstance)(__x_ABI_CWindows_CUI_CXaml_CIScalarTransitionFactory* This,
        IInspectable* baseInterface,
        IInspectable** innerInterface,
        __x_ABI_CWindows_CUI_CXaml_CIScalarTransition** value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CIScalarTransitionFactoryVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CIScalarTransitionFactory
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CIScalarTransitionFactoryVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CIScalarTransitionFactory;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CIScalarTransitionFactory_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CISetter_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CISetter_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CISetterVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CISetter* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CISetter* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CISetter* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CISetter* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CISetter* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CISetter* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Property)(__x_ABI_CWindows_CUI_CXaml_CISetter* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** value);
    HRESULT (STDMETHODCALLTYPE* put_Property)(__x_ABI_CWindows_CUI_CXaml_CISetter* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty* value);
    HRESULT (STDMETHODCALLTYPE* get_Value)(__x_ABI_CWindows_CUI_CXaml_CISetter* This,
        IInspectable** value);
    HRESULT (STDMETHODCALLTYPE* put_Value)(__x_ABI_CWindows_CUI_CXaml_CISetter* This,
        IInspectable* value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CISetterVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CISetter
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CISetterVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CISetter;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CISetter_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CISetter2_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CISetter2_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CISetter2Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CISetter2* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CISetter2* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CISetter2* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CISetter2* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CISetter2* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CISetter2* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Target)(__x_ABI_CWindows_CUI_CXaml_CISetter2* This,
        __x_ABI_CWindows_CUI_CXaml_CITargetPropertyPath** value);
    HRESULT (STDMETHODCALLTYPE* put_Target)(__x_ABI_CWindows_CUI_CXaml_CISetter2* This,
        __x_ABI_CWindows_CUI_CXaml_CITargetPropertyPath* value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CISetter2Vtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CISetter2
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CISetter2Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CISetter2;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CISetter2_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CISetterBase_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CISetterBase_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CISetterBaseVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CISetterBase* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CISetterBase* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CISetterBase* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CISetterBase* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CISetterBase* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CISetterBase* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_IsSealed)(__x_ABI_CWindows_CUI_CXaml_CISetterBase* This,
        boolean* value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CISetterBaseVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CISetterBase
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CISetterBaseVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CISetterBase;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CISetterBase_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CISetterBaseCollection_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CISetterBaseCollection_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CISetterBaseCollectionVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CISetterBaseCollection* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CISetterBaseCollection* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CISetterBaseCollection* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CISetterBaseCollection* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CISetterBaseCollection* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CISetterBaseCollection* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_IsSealed)(__x_ABI_CWindows_CUI_CXaml_CISetterBaseCollection* This,
        boolean* value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CISetterBaseCollectionVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CISetterBaseCollection
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CISetterBaseCollectionVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CISetterBaseCollection;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CISetterBaseCollection_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CISetterBaseFactory_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CISetterBaseFactory_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CISetterBaseFactoryVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CISetterBaseFactory* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CISetterBaseFactory* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CISetterBaseFactory* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CISetterBaseFactory* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CISetterBaseFactory* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CISetterBaseFactory* This,
            TrustLevel* trustLevel);
    
        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CISetterBaseFactoryVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CISetterBaseFactory
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CISetterBaseFactoryVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CISetterBaseFactory;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CISetterBaseFactory_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CISetterFactory_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CISetterFactory_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CISetterFactoryVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CISetterFactory* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CISetterFactory* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CISetterFactory* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CISetterFactory* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CISetterFactory* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CISetterFactory* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* CreateInstance)(__x_ABI_CWindows_CUI_CXaml_CISetterFactory* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty* targetProperty,
        IInspectable* value,
        __x_ABI_CWindows_CUI_CXaml_CISetter** instance);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CISetterFactoryVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CISetterFactory
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CISetterFactoryVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CISetterFactory;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CISetterFactory_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CISizeChangedEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CISizeChangedEventArgs_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CISizeChangedEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CISizeChangedEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CISizeChangedEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CISizeChangedEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CISizeChangedEventArgs* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CISizeChangedEventArgs* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CISizeChangedEventArgs* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_PreviousSize)(__x_ABI_CWindows_CUI_CXaml_CISizeChangedEventArgs* This,
        struct __x_ABI_CWindows_CFoundation_CSize* value);
    HRESULT (STDMETHODCALLTYPE* get_NewSize)(__x_ABI_CWindows_CUI_CXaml_CISizeChangedEventArgs* This,
        struct __x_ABI_CWindows_CFoundation_CSize* value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CISizeChangedEventArgsVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CISizeChangedEventArgs
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CISizeChangedEventArgsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CISizeChangedEventArgs;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CISizeChangedEventArgs_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CISizeHelper_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CISizeHelper_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CISizeHelperVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CISizeHelper* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CISizeHelper* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CISizeHelper* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CISizeHelper* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CISizeHelper* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CISizeHelper* This,
            TrustLevel* trustLevel);
    
        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CISizeHelperVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CISizeHelper
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CISizeHelperVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CISizeHelper;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CISizeHelper_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CISizeHelperStatics_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CISizeHelperStatics_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CISizeHelperStaticsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CISizeHelperStatics* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CISizeHelperStatics* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CISizeHelperStatics* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CISizeHelperStatics* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CISizeHelperStatics* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CISizeHelperStatics* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Empty)(__x_ABI_CWindows_CUI_CXaml_CISizeHelperStatics* This,
        struct __x_ABI_CWindows_CFoundation_CSize* value);
    HRESULT (STDMETHODCALLTYPE* FromDimensions)(__x_ABI_CWindows_CUI_CXaml_CISizeHelperStatics* This,
        FLOAT width,
        FLOAT height,
        struct __x_ABI_CWindows_CFoundation_CSize* result);
    HRESULT (STDMETHODCALLTYPE* GetIsEmpty)(__x_ABI_CWindows_CUI_CXaml_CISizeHelperStatics* This,
        struct __x_ABI_CWindows_CFoundation_CSize target,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* Equals)(__x_ABI_CWindows_CUI_CXaml_CISizeHelperStatics* This,
        struct __x_ABI_CWindows_CFoundation_CSize target,
        struct __x_ABI_CWindows_CFoundation_CSize value,
        boolean* result);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CISizeHelperStaticsVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CISizeHelperStatics
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CISizeHelperStaticsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CISizeHelperStatics;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CISizeHelperStatics_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CIStateTrigger_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CIStateTrigger_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CIStateTriggerVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CIStateTrigger* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CIStateTrigger* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CIStateTrigger* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CIStateTrigger* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CIStateTrigger* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CIStateTrigger* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_IsActive)(__x_ABI_CWindows_CUI_CXaml_CIStateTrigger* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* put_IsActive)(__x_ABI_CWindows_CUI_CXaml_CIStateTrigger* This,
        boolean value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CIStateTriggerVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CIStateTrigger
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CIStateTriggerVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CIStateTrigger;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CIStateTrigger_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CIStateTriggerBase_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CIStateTriggerBase_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CIStateTriggerBaseVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CIStateTriggerBase* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CIStateTriggerBase* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CIStateTriggerBase* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CIStateTriggerBase* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CIStateTriggerBase* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CIStateTriggerBase* This,
            TrustLevel* trustLevel);
    
        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CIStateTriggerBaseVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CIStateTriggerBase
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CIStateTriggerBaseVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CIStateTriggerBase;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CIStateTriggerBase_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CIStateTriggerBaseFactory_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CIStateTriggerBaseFactory_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CIStateTriggerBaseFactoryVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CIStateTriggerBaseFactory* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CIStateTriggerBaseFactory* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CIStateTriggerBaseFactory* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CIStateTriggerBaseFactory* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CIStateTriggerBaseFactory* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CIStateTriggerBaseFactory* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* CreateInstance)(__x_ABI_CWindows_CUI_CXaml_CIStateTriggerBaseFactory* This,
        IInspectable* baseInterface,
        IInspectable** innerInterface,
        __x_ABI_CWindows_CUI_CXaml_CIStateTriggerBase** value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CIStateTriggerBaseFactoryVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CIStateTriggerBaseFactory
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CIStateTriggerBaseFactoryVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CIStateTriggerBaseFactory;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CIStateTriggerBaseFactory_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CIStateTriggerBaseProtected_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CIStateTriggerBaseProtected_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CIStateTriggerBaseProtectedVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CIStateTriggerBaseProtected* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CIStateTriggerBaseProtected* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CIStateTriggerBaseProtected* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CIStateTriggerBaseProtected* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CIStateTriggerBaseProtected* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CIStateTriggerBaseProtected* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* SetActive)(__x_ABI_CWindows_CUI_CXaml_CIStateTriggerBaseProtected* This,
        boolean IsActive);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CIStateTriggerBaseProtectedVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CIStateTriggerBaseProtected
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CIStateTriggerBaseProtectedVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CIStateTriggerBaseProtected;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CIStateTriggerBaseProtected_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CIStateTriggerStatics_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CIStateTriggerStatics_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CIStateTriggerStaticsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CIStateTriggerStatics* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CIStateTriggerStatics* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CIStateTriggerStatics* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CIStateTriggerStatics* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CIStateTriggerStatics* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CIStateTriggerStatics* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_IsActiveProperty)(__x_ABI_CWindows_CUI_CXaml_CIStateTriggerStatics* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CIStateTriggerStaticsVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CIStateTriggerStatics
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CIStateTriggerStaticsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CIStateTriggerStatics;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CIStateTriggerStatics_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CIStyle_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CIStyle_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CIStyleVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CIStyle* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CIStyle* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CIStyle* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CIStyle* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CIStyle* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CIStyle* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_IsSealed)(__x_ABI_CWindows_CUI_CXaml_CIStyle* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* get_Setters)(__x_ABI_CWindows_CUI_CXaml_CIStyle* This,
        __x_ABI_CWindows_CUI_CXaml_CISetterBaseCollection** value);
    HRESULT (STDMETHODCALLTYPE* get_TargetType)(__x_ABI_CWindows_CUI_CXaml_CIStyle* This,
        struct __x_ABI_CWindows_CUI_CXaml_CInterop_CTypeName* value);
    HRESULT (STDMETHODCALLTYPE* put_TargetType)(__x_ABI_CWindows_CUI_CXaml_CIStyle* This,
        struct __x_ABI_CWindows_CUI_CXaml_CInterop_CTypeName value);
    HRESULT (STDMETHODCALLTYPE* get_BasedOn)(__x_ABI_CWindows_CUI_CXaml_CIStyle* This,
        __x_ABI_CWindows_CUI_CXaml_CIStyle** value);
    HRESULT (STDMETHODCALLTYPE* put_BasedOn)(__x_ABI_CWindows_CUI_CXaml_CIStyle* This,
        __x_ABI_CWindows_CUI_CXaml_CIStyle* value);
    HRESULT (STDMETHODCALLTYPE* Seal)(__x_ABI_CWindows_CUI_CXaml_CIStyle* This);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CIStyleVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CIStyle
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CIStyleVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CIStyle;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CIStyle_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CIStyleFactory_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CIStyleFactory_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CIStyleFactoryVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CIStyleFactory* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CIStyleFactory* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CIStyleFactory* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CIStyleFactory* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CIStyleFactory* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CIStyleFactory* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* CreateInstance)(__x_ABI_CWindows_CUI_CXaml_CIStyleFactory* This,
        struct __x_ABI_CWindows_CUI_CXaml_CInterop_CTypeName targetType,
        __x_ABI_CWindows_CUI_CXaml_CIStyle** value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CIStyleFactoryVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CIStyleFactory
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CIStyleFactoryVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CIStyleFactory;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CIStyleFactory_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CITargetPropertyPath_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CITargetPropertyPath_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CITargetPropertyPathVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CITargetPropertyPath* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CITargetPropertyPath* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CITargetPropertyPath* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CITargetPropertyPath* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CITargetPropertyPath* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CITargetPropertyPath* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Path)(__x_ABI_CWindows_CUI_CXaml_CITargetPropertyPath* This,
        __x_ABI_CWindows_CUI_CXaml_CIPropertyPath** value);
    HRESULT (STDMETHODCALLTYPE* put_Path)(__x_ABI_CWindows_CUI_CXaml_CITargetPropertyPath* This,
        __x_ABI_CWindows_CUI_CXaml_CIPropertyPath* value);
    HRESULT (STDMETHODCALLTYPE* get_Target)(__x_ABI_CWindows_CUI_CXaml_CITargetPropertyPath* This,
        IInspectable** value);
    HRESULT (STDMETHODCALLTYPE* put_Target)(__x_ABI_CWindows_CUI_CXaml_CITargetPropertyPath* This,
        IInspectable* value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CITargetPropertyPathVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CITargetPropertyPath
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CITargetPropertyPathVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CITargetPropertyPath;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CITargetPropertyPath_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CITargetPropertyPathFactory_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CITargetPropertyPathFactory_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CITargetPropertyPathFactoryVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CITargetPropertyPathFactory* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CITargetPropertyPathFactory* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CITargetPropertyPathFactory* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CITargetPropertyPathFactory* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CITargetPropertyPathFactory* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CITargetPropertyPathFactory* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* CreateInstance)(__x_ABI_CWindows_CUI_CXaml_CITargetPropertyPathFactory* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty* targetProperty,
        __x_ABI_CWindows_CUI_CXaml_CITargetPropertyPath** value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CITargetPropertyPathFactoryVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CITargetPropertyPathFactory
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CITargetPropertyPathFactoryVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CITargetPropertyPathFactory;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CITargetPropertyPathFactory_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CIThicknessHelper_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CIThicknessHelper_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CIThicknessHelperVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CIThicknessHelper* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CIThicknessHelper* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CIThicknessHelper* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CIThicknessHelper* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CIThicknessHelper* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CIThicknessHelper* This,
            TrustLevel* trustLevel);
    
        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CIThicknessHelperVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CIThicknessHelper
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CIThicknessHelperVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CIThicknessHelper;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CIThicknessHelper_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CIThicknessHelperStatics_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CIThicknessHelperStatics_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CIThicknessHelperStaticsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CIThicknessHelperStatics* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CIThicknessHelperStatics* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CIThicknessHelperStatics* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CIThicknessHelperStatics* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CIThicknessHelperStatics* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CIThicknessHelperStatics* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* FromLengths)(__x_ABI_CWindows_CUI_CXaml_CIThicknessHelperStatics* This,
        DOUBLE left,
        DOUBLE top,
        DOUBLE right,
        DOUBLE bottom,
        struct __x_ABI_CWindows_CUI_CXaml_CThickness* result);
    HRESULT (STDMETHODCALLTYPE* FromUniformLength)(__x_ABI_CWindows_CUI_CXaml_CIThicknessHelperStatics* This,
        DOUBLE uniformLength,
        struct __x_ABI_CWindows_CUI_CXaml_CThickness* result);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CIThicknessHelperStaticsVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CIThicknessHelperStatics
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CIThicknessHelperStaticsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CIThicknessHelperStatics;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CIThicknessHelperStatics_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CITriggerAction_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CITriggerAction_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CITriggerActionVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CITriggerAction* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CITriggerAction* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CITriggerAction* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CITriggerAction* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CITriggerAction* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CITriggerAction* This,
            TrustLevel* trustLevel);
    
        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CITriggerActionVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CITriggerAction
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CITriggerActionVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CITriggerAction;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CITriggerAction_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CITriggerActionFactory_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CITriggerActionFactory_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CITriggerActionFactoryVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CITriggerActionFactory* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CITriggerActionFactory* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CITriggerActionFactory* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CITriggerActionFactory* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CITriggerActionFactory* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CITriggerActionFactory* This,
            TrustLevel* trustLevel);
    
        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CITriggerActionFactoryVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CITriggerActionFactory
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CITriggerActionFactoryVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CITriggerActionFactory;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CITriggerActionFactory_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CITriggerBase_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CITriggerBase_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CITriggerBaseVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CITriggerBase* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CITriggerBase* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CITriggerBase* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CITriggerBase* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CITriggerBase* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CITriggerBase* This,
            TrustLevel* trustLevel);
    
        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CITriggerBaseVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CITriggerBase
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CITriggerBaseVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CITriggerBase;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CITriggerBase_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CITriggerBaseFactory_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CITriggerBaseFactory_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CITriggerBaseFactoryVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CITriggerBaseFactory* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CITriggerBaseFactory* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CITriggerBaseFactory* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CITriggerBaseFactory* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CITriggerBaseFactory* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CITriggerBaseFactory* This,
            TrustLevel* trustLevel);
    
        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CITriggerBaseFactoryVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CITriggerBaseFactory
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CITriggerBaseFactoryVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CITriggerBaseFactory;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CITriggerBaseFactory_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CIUIElement_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CIUIElement_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CIUIElementVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CIUIElement* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CIUIElement* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CIUIElement* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CIUIElement* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CIUIElement* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CIUIElement* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_DesiredSize)(__x_ABI_CWindows_CUI_CXaml_CIUIElement* This,
        struct __x_ABI_CWindows_CFoundation_CSize* value);
    HRESULT (STDMETHODCALLTYPE* get_AllowDrop)(__x_ABI_CWindows_CUI_CXaml_CIUIElement* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* put_AllowDrop)(__x_ABI_CWindows_CUI_CXaml_CIUIElement* This,
        boolean value);
    HRESULT (STDMETHODCALLTYPE* get_Opacity)(__x_ABI_CWindows_CUI_CXaml_CIUIElement* This,
        DOUBLE* value);
    HRESULT (STDMETHODCALLTYPE* put_Opacity)(__x_ABI_CWindows_CUI_CXaml_CIUIElement* This,
        DOUBLE value);
    HRESULT (STDMETHODCALLTYPE* get_Clip)(__x_ABI_CWindows_CUI_CXaml_CIUIElement* This,
        __x_ABI_CWindows_CUI_CXaml_CMedia_CIRectangleGeometry** value);
    HRESULT (STDMETHODCALLTYPE* put_Clip)(__x_ABI_CWindows_CUI_CXaml_CIUIElement* This,
        __x_ABI_CWindows_CUI_CXaml_CMedia_CIRectangleGeometry* value);
    HRESULT (STDMETHODCALLTYPE* get_RenderTransform)(__x_ABI_CWindows_CUI_CXaml_CIUIElement* This,
        __x_ABI_CWindows_CUI_CXaml_CMedia_CITransform** value);
    HRESULT (STDMETHODCALLTYPE* put_RenderTransform)(__x_ABI_CWindows_CUI_CXaml_CIUIElement* This,
        __x_ABI_CWindows_CUI_CXaml_CMedia_CITransform* value);
    HRESULT (STDMETHODCALLTYPE* get_Projection)(__x_ABI_CWindows_CUI_CXaml_CIUIElement* This,
        __x_ABI_CWindows_CUI_CXaml_CMedia_CIProjection** value);
    HRESULT (STDMETHODCALLTYPE* put_Projection)(__x_ABI_CWindows_CUI_CXaml_CIUIElement* This,
        __x_ABI_CWindows_CUI_CXaml_CMedia_CIProjection* value);
    HRESULT (STDMETHODCALLTYPE* get_RenderTransformOrigin)(__x_ABI_CWindows_CUI_CXaml_CIUIElement* This,
        struct __x_ABI_CWindows_CFoundation_CPoint* value);
    HRESULT (STDMETHODCALLTYPE* put_RenderTransformOrigin)(__x_ABI_CWindows_CUI_CXaml_CIUIElement* This,
        struct __x_ABI_CWindows_CFoundation_CPoint value);
    HRESULT (STDMETHODCALLTYPE* get_IsHitTestVisible)(__x_ABI_CWindows_CUI_CXaml_CIUIElement* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* put_IsHitTestVisible)(__x_ABI_CWindows_CUI_CXaml_CIUIElement* This,
        boolean value);
    HRESULT (STDMETHODCALLTYPE* get_Visibility)(__x_ABI_CWindows_CUI_CXaml_CIUIElement* This,
        enum __x_ABI_CWindows_CUI_CXaml_CVisibility* value);
    HRESULT (STDMETHODCALLTYPE* put_Visibility)(__x_ABI_CWindows_CUI_CXaml_CIUIElement* This,
        enum __x_ABI_CWindows_CUI_CXaml_CVisibility value);
    HRESULT (STDMETHODCALLTYPE* get_RenderSize)(__x_ABI_CWindows_CUI_CXaml_CIUIElement* This,
        struct __x_ABI_CWindows_CFoundation_CSize* value);
    HRESULT (STDMETHODCALLTYPE* get_UseLayoutRounding)(__x_ABI_CWindows_CUI_CXaml_CIUIElement* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* put_UseLayoutRounding)(__x_ABI_CWindows_CUI_CXaml_CIUIElement* This,
        boolean value);
    HRESULT (STDMETHODCALLTYPE* get_Transitions)(__x_ABI_CWindows_CUI_CXaml_CIUIElement* This,
        __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CMedia__CAnimation__CTransition** value);
    HRESULT (STDMETHODCALLTYPE* put_Transitions)(__x_ABI_CWindows_CUI_CXaml_CIUIElement* This,
        __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CMedia__CAnimation__CTransition* value);
    HRESULT (STDMETHODCALLTYPE* get_CacheMode)(__x_ABI_CWindows_CUI_CXaml_CIUIElement* This,
        __x_ABI_CWindows_CUI_CXaml_CMedia_CICacheMode** value);
    HRESULT (STDMETHODCALLTYPE* put_CacheMode)(__x_ABI_CWindows_CUI_CXaml_CIUIElement* This,
        __x_ABI_CWindows_CUI_CXaml_CMedia_CICacheMode* value);
    HRESULT (STDMETHODCALLTYPE* get_IsTapEnabled)(__x_ABI_CWindows_CUI_CXaml_CIUIElement* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* put_IsTapEnabled)(__x_ABI_CWindows_CUI_CXaml_CIUIElement* This,
        boolean value);
    HRESULT (STDMETHODCALLTYPE* get_IsDoubleTapEnabled)(__x_ABI_CWindows_CUI_CXaml_CIUIElement* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* put_IsDoubleTapEnabled)(__x_ABI_CWindows_CUI_CXaml_CIUIElement* This,
        boolean value);
    HRESULT (STDMETHODCALLTYPE* get_IsRightTapEnabled)(__x_ABI_CWindows_CUI_CXaml_CIUIElement* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* put_IsRightTapEnabled)(__x_ABI_CWindows_CUI_CXaml_CIUIElement* This,
        boolean value);
    HRESULT (STDMETHODCALLTYPE* get_IsHoldingEnabled)(__x_ABI_CWindows_CUI_CXaml_CIUIElement* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* put_IsHoldingEnabled)(__x_ABI_CWindows_CUI_CXaml_CIUIElement* This,
        boolean value);
    HRESULT (STDMETHODCALLTYPE* get_ManipulationMode)(__x_ABI_CWindows_CUI_CXaml_CIUIElement* This,
        enum __x_ABI_CWindows_CUI_CXaml_CInput_CManipulationModes* value);
    HRESULT (STDMETHODCALLTYPE* put_ManipulationMode)(__x_ABI_CWindows_CUI_CXaml_CIUIElement* This,
        enum __x_ABI_CWindows_CUI_CXaml_CInput_CManipulationModes value);
    HRESULT (STDMETHODCALLTYPE* get_PointerCaptures)(__x_ABI_CWindows_CUI_CXaml_CIUIElement* This,
        __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CInput__CPointer** value);
    HRESULT (STDMETHODCALLTYPE* add_KeyUp)(__x_ABI_CWindows_CUI_CXaml_CIUIElement* This,
        __x_ABI_CWindows_CUI_CXaml_CInput_CIKeyEventHandler* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_KeyUp)(__x_ABI_CWindows_CUI_CXaml_CIUIElement* This,
        EventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* add_KeyDown)(__x_ABI_CWindows_CUI_CXaml_CIUIElement* This,
        __x_ABI_CWindows_CUI_CXaml_CInput_CIKeyEventHandler* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_KeyDown)(__x_ABI_CWindows_CUI_CXaml_CIUIElement* This,
        EventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* add_GotFocus)(__x_ABI_CWindows_CUI_CXaml_CIUIElement* This,
        __x_ABI_CWindows_CUI_CXaml_CIRoutedEventHandler* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_GotFocus)(__x_ABI_CWindows_CUI_CXaml_CIUIElement* This,
        EventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* add_LostFocus)(__x_ABI_CWindows_CUI_CXaml_CIUIElement* This,
        __x_ABI_CWindows_CUI_CXaml_CIRoutedEventHandler* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_LostFocus)(__x_ABI_CWindows_CUI_CXaml_CIUIElement* This,
        EventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* add_DragEnter)(__x_ABI_CWindows_CUI_CXaml_CIUIElement* This,
        __x_ABI_CWindows_CUI_CXaml_CIDragEventHandler* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_DragEnter)(__x_ABI_CWindows_CUI_CXaml_CIUIElement* This,
        EventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* add_DragLeave)(__x_ABI_CWindows_CUI_CXaml_CIUIElement* This,
        __x_ABI_CWindows_CUI_CXaml_CIDragEventHandler* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_DragLeave)(__x_ABI_CWindows_CUI_CXaml_CIUIElement* This,
        EventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* add_DragOver)(__x_ABI_CWindows_CUI_CXaml_CIUIElement* This,
        __x_ABI_CWindows_CUI_CXaml_CIDragEventHandler* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_DragOver)(__x_ABI_CWindows_CUI_CXaml_CIUIElement* This,
        EventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* add_Drop)(__x_ABI_CWindows_CUI_CXaml_CIUIElement* This,
        __x_ABI_CWindows_CUI_CXaml_CIDragEventHandler* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_Drop)(__x_ABI_CWindows_CUI_CXaml_CIUIElement* This,
        EventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* add_PointerPressed)(__x_ABI_CWindows_CUI_CXaml_CIUIElement* This,
        __x_ABI_CWindows_CUI_CXaml_CInput_CIPointerEventHandler* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_PointerPressed)(__x_ABI_CWindows_CUI_CXaml_CIUIElement* This,
        EventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* add_PointerMoved)(__x_ABI_CWindows_CUI_CXaml_CIUIElement* This,
        __x_ABI_CWindows_CUI_CXaml_CInput_CIPointerEventHandler* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_PointerMoved)(__x_ABI_CWindows_CUI_CXaml_CIUIElement* This,
        EventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* add_PointerReleased)(__x_ABI_CWindows_CUI_CXaml_CIUIElement* This,
        __x_ABI_CWindows_CUI_CXaml_CInput_CIPointerEventHandler* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_PointerReleased)(__x_ABI_CWindows_CUI_CXaml_CIUIElement* This,
        EventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* add_PointerEntered)(__x_ABI_CWindows_CUI_CXaml_CIUIElement* This,
        __x_ABI_CWindows_CUI_CXaml_CInput_CIPointerEventHandler* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_PointerEntered)(__x_ABI_CWindows_CUI_CXaml_CIUIElement* This,
        EventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* add_PointerExited)(__x_ABI_CWindows_CUI_CXaml_CIUIElement* This,
        __x_ABI_CWindows_CUI_CXaml_CInput_CIPointerEventHandler* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_PointerExited)(__x_ABI_CWindows_CUI_CXaml_CIUIElement* This,
        EventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* add_PointerCaptureLost)(__x_ABI_CWindows_CUI_CXaml_CIUIElement* This,
        __x_ABI_CWindows_CUI_CXaml_CInput_CIPointerEventHandler* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_PointerCaptureLost)(__x_ABI_CWindows_CUI_CXaml_CIUIElement* This,
        EventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* add_PointerCanceled)(__x_ABI_CWindows_CUI_CXaml_CIUIElement* This,
        __x_ABI_CWindows_CUI_CXaml_CInput_CIPointerEventHandler* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_PointerCanceled)(__x_ABI_CWindows_CUI_CXaml_CIUIElement* This,
        EventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* add_PointerWheelChanged)(__x_ABI_CWindows_CUI_CXaml_CIUIElement* This,
        __x_ABI_CWindows_CUI_CXaml_CInput_CIPointerEventHandler* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_PointerWheelChanged)(__x_ABI_CWindows_CUI_CXaml_CIUIElement* This,
        EventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* add_Tapped)(__x_ABI_CWindows_CUI_CXaml_CIUIElement* This,
        __x_ABI_CWindows_CUI_CXaml_CInput_CITappedEventHandler* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_Tapped)(__x_ABI_CWindows_CUI_CXaml_CIUIElement* This,
        EventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* add_DoubleTapped)(__x_ABI_CWindows_CUI_CXaml_CIUIElement* This,
        __x_ABI_CWindows_CUI_CXaml_CInput_CIDoubleTappedEventHandler* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_DoubleTapped)(__x_ABI_CWindows_CUI_CXaml_CIUIElement* This,
        EventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* add_Holding)(__x_ABI_CWindows_CUI_CXaml_CIUIElement* This,
        __x_ABI_CWindows_CUI_CXaml_CInput_CIHoldingEventHandler* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_Holding)(__x_ABI_CWindows_CUI_CXaml_CIUIElement* This,
        EventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* add_RightTapped)(__x_ABI_CWindows_CUI_CXaml_CIUIElement* This,
        __x_ABI_CWindows_CUI_CXaml_CInput_CIRightTappedEventHandler* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_RightTapped)(__x_ABI_CWindows_CUI_CXaml_CIUIElement* This,
        EventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* add_ManipulationStarting)(__x_ABI_CWindows_CUI_CXaml_CIUIElement* This,
        __x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationStartingEventHandler* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_ManipulationStarting)(__x_ABI_CWindows_CUI_CXaml_CIUIElement* This,
        EventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* add_ManipulationInertiaStarting)(__x_ABI_CWindows_CUI_CXaml_CIUIElement* This,
        __x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationInertiaStartingEventHandler* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_ManipulationInertiaStarting)(__x_ABI_CWindows_CUI_CXaml_CIUIElement* This,
        EventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* add_ManipulationStarted)(__x_ABI_CWindows_CUI_CXaml_CIUIElement* This,
        __x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationStartedEventHandler* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_ManipulationStarted)(__x_ABI_CWindows_CUI_CXaml_CIUIElement* This,
        EventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* add_ManipulationDelta)(__x_ABI_CWindows_CUI_CXaml_CIUIElement* This,
        __x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationDeltaEventHandler* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_ManipulationDelta)(__x_ABI_CWindows_CUI_CXaml_CIUIElement* This,
        EventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* add_ManipulationCompleted)(__x_ABI_CWindows_CUI_CXaml_CIUIElement* This,
        __x_ABI_CWindows_CUI_CXaml_CInput_CIManipulationCompletedEventHandler* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_ManipulationCompleted)(__x_ABI_CWindows_CUI_CXaml_CIUIElement* This,
        EventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* Measure)(__x_ABI_CWindows_CUI_CXaml_CIUIElement* This,
        struct __x_ABI_CWindows_CFoundation_CSize availableSize);
    HRESULT (STDMETHODCALLTYPE* Arrange)(__x_ABI_CWindows_CUI_CXaml_CIUIElement* This,
        struct __x_ABI_CWindows_CFoundation_CRect finalRect);
    HRESULT (STDMETHODCALLTYPE* CapturePointer)(__x_ABI_CWindows_CUI_CXaml_CIUIElement* This,
        __x_ABI_CWindows_CUI_CXaml_CInput_CIPointer* value,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* ReleasePointerCapture)(__x_ABI_CWindows_CUI_CXaml_CIUIElement* This,
        __x_ABI_CWindows_CUI_CXaml_CInput_CIPointer* value);
    HRESULT (STDMETHODCALLTYPE* ReleasePointerCaptures)(__x_ABI_CWindows_CUI_CXaml_CIUIElement* This);
    HRESULT (STDMETHODCALLTYPE* AddHandler)(__x_ABI_CWindows_CUI_CXaml_CIUIElement* This,
        __x_ABI_CWindows_CUI_CXaml_CIRoutedEvent* routedEvent,
        IInspectable* handler,
        boolean handledEventsToo);
    HRESULT (STDMETHODCALLTYPE* RemoveHandler)(__x_ABI_CWindows_CUI_CXaml_CIUIElement* This,
        __x_ABI_CWindows_CUI_CXaml_CIRoutedEvent* routedEvent,
        IInspectable* handler);
    HRESULT (STDMETHODCALLTYPE* TransformToVisual)(__x_ABI_CWindows_CUI_CXaml_CIUIElement* This,
        __x_ABI_CWindows_CUI_CXaml_CIUIElement* visual,
        __x_ABI_CWindows_CUI_CXaml_CMedia_CIGeneralTransform** result);
    HRESULT (STDMETHODCALLTYPE* InvalidateMeasure)(__x_ABI_CWindows_CUI_CXaml_CIUIElement* This);
    HRESULT (STDMETHODCALLTYPE* InvalidateArrange)(__x_ABI_CWindows_CUI_CXaml_CIUIElement* This);
    HRESULT (STDMETHODCALLTYPE* UpdateLayout)(__x_ABI_CWindows_CUI_CXaml_CIUIElement* This);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CIUIElementVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CIUIElement
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CIUIElementVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CIUIElement;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CIUIElement_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CIUIElement10_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CIUIElement10_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CIUIElement10Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CIUIElement10* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CIUIElement10* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CIUIElement10* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CIUIElement10* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CIUIElement10* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CIUIElement10* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_ActualOffset)(__x_ABI_CWindows_CUI_CXaml_CIUIElement10* This,
        struct __x_ABI_CWindows_CFoundation_CNumerics_CVector3* value);
    HRESULT (STDMETHODCALLTYPE* get_ActualSize)(__x_ABI_CWindows_CUI_CXaml_CIUIElement10* This,
        struct __x_ABI_CWindows_CFoundation_CNumerics_CVector2* value);
    HRESULT (STDMETHODCALLTYPE* get_XamlRoot)(__x_ABI_CWindows_CUI_CXaml_CIUIElement10* This,
        __x_ABI_CWindows_CUI_CXaml_CIXamlRoot** value);
    HRESULT (STDMETHODCALLTYPE* put_XamlRoot)(__x_ABI_CWindows_CUI_CXaml_CIUIElement10* This,
        __x_ABI_CWindows_CUI_CXaml_CIXamlRoot* value);
    HRESULT (STDMETHODCALLTYPE* get_UIContext)(__x_ABI_CWindows_CUI_CXaml_CIUIElement10* This,
        __x_ABI_CWindows_CUI_CIUIContext** value);
    HRESULT (STDMETHODCALLTYPE* get_Shadow)(__x_ABI_CWindows_CUI_CXaml_CIUIElement10* This,
        __x_ABI_CWindows_CUI_CXaml_CMedia_CIShadow** value);
    HRESULT (STDMETHODCALLTYPE* put_Shadow)(__x_ABI_CWindows_CUI_CXaml_CIUIElement10* This,
        __x_ABI_CWindows_CUI_CXaml_CMedia_CIShadow* value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CIUIElement10Vtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CIUIElement10
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CIUIElement10Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CIUIElement10;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CIUIElement10_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CIUIElement2_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CIUIElement2_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CIUIElement2Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CIUIElement2* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CIUIElement2* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CIUIElement2* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CIUIElement2* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CIUIElement2* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CIUIElement2* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_CompositeMode)(__x_ABI_CWindows_CUI_CXaml_CIUIElement2* This,
        enum __x_ABI_CWindows_CUI_CXaml_CMedia_CElementCompositeMode* value);
    HRESULT (STDMETHODCALLTYPE* put_CompositeMode)(__x_ABI_CWindows_CUI_CXaml_CIUIElement2* This,
        enum __x_ABI_CWindows_CUI_CXaml_CMedia_CElementCompositeMode value);
    HRESULT (STDMETHODCALLTYPE* CancelDirectManipulations)(__x_ABI_CWindows_CUI_CXaml_CIUIElement2* This,
        boolean* result);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CIUIElement2Vtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CIUIElement2
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CIUIElement2Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CIUIElement2;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CIUIElement2_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CIUIElement3_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CIUIElement3_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CIUIElement3Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CIUIElement3* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CIUIElement3* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CIUIElement3* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CIUIElement3* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CIUIElement3* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CIUIElement3* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Transform3D)(__x_ABI_CWindows_CUI_CXaml_CIUIElement3* This,
        __x_ABI_CWindows_CUI_CXaml_CMedia_CMedia3D_CITransform3D** value);
    HRESULT (STDMETHODCALLTYPE* put_Transform3D)(__x_ABI_CWindows_CUI_CXaml_CIUIElement3* This,
        __x_ABI_CWindows_CUI_CXaml_CMedia_CMedia3D_CITransform3D* value);
    HRESULT (STDMETHODCALLTYPE* get_CanDrag)(__x_ABI_CWindows_CUI_CXaml_CIUIElement3* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* put_CanDrag)(__x_ABI_CWindows_CUI_CXaml_CIUIElement3* This,
        boolean value);
    HRESULT (STDMETHODCALLTYPE* add_DragStarting)(__x_ABI_CWindows_CUI_CXaml_CIUIElement3* This,
        __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CUIElement___x_ABI_CWindows__CUI__CXaml__CDragStartingEventArgs* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_DragStarting)(__x_ABI_CWindows_CUI_CXaml_CIUIElement3* This,
        EventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* add_DropCompleted)(__x_ABI_CWindows_CUI_CXaml_CIUIElement3* This,
        __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CUIElement___x_ABI_CWindows__CUI__CXaml__CDropCompletedEventArgs* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_DropCompleted)(__x_ABI_CWindows_CUI_CXaml_CIUIElement3* This,
        EventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* StartDragAsync)(__x_ABI_CWindows_CUI_CXaml_CIUIElement3* This,
        __x_ABI_CWindows_CUI_CInput_CIPointerPoint* pointerPoint,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CApplicationModel__CDataTransfer__CDataPackageOperation** operation);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CIUIElement3Vtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CIUIElement3
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CIUIElement3Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CIUIElement3;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CIUIElement3_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CIUIElement4_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CIUIElement4_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CIUIElement4Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CIUIElement4* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CIUIElement4* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CIUIElement4* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CIUIElement4* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CIUIElement4* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CIUIElement4* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_ContextFlyout)(__x_ABI_CWindows_CUI_CXaml_CIUIElement4* This,
        __x_ABI_CWindows_CUI_CXaml_CControls_CPrimitives_CIFlyoutBase** value);
    HRESULT (STDMETHODCALLTYPE* put_ContextFlyout)(__x_ABI_CWindows_CUI_CXaml_CIUIElement4* This,
        __x_ABI_CWindows_CUI_CXaml_CControls_CPrimitives_CIFlyoutBase* value);
    HRESULT (STDMETHODCALLTYPE* get_ExitDisplayModeOnAccessKeyInvoked)(__x_ABI_CWindows_CUI_CXaml_CIUIElement4* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* put_ExitDisplayModeOnAccessKeyInvoked)(__x_ABI_CWindows_CUI_CXaml_CIUIElement4* This,
        boolean value);
    HRESULT (STDMETHODCALLTYPE* get_IsAccessKeyScope)(__x_ABI_CWindows_CUI_CXaml_CIUIElement4* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* put_IsAccessKeyScope)(__x_ABI_CWindows_CUI_CXaml_CIUIElement4* This,
        boolean value);
    HRESULT (STDMETHODCALLTYPE* get_AccessKeyScopeOwner)(__x_ABI_CWindows_CUI_CXaml_CIUIElement4* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyObject** value);
    HRESULT (STDMETHODCALLTYPE* put_AccessKeyScopeOwner)(__x_ABI_CWindows_CUI_CXaml_CIUIElement4* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyObject* value);
    HRESULT (STDMETHODCALLTYPE* get_AccessKey)(__x_ABI_CWindows_CUI_CXaml_CIUIElement4* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* put_AccessKey)(__x_ABI_CWindows_CUI_CXaml_CIUIElement4* This,
        HSTRING value);
    HRESULT (STDMETHODCALLTYPE* add_ContextRequested)(__x_ABI_CWindows_CUI_CXaml_CIUIElement4* This,
        __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CUIElement___x_ABI_CWindows__CUI__CXaml__CInput__CContextRequestedEventArgs* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_ContextRequested)(__x_ABI_CWindows_CUI_CXaml_CIUIElement4* This,
        EventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* add_ContextCanceled)(__x_ABI_CWindows_CUI_CXaml_CIUIElement4* This,
        __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CUIElement___x_ABI_CWindows__CUI__CXaml__CRoutedEventArgs* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_ContextCanceled)(__x_ABI_CWindows_CUI_CXaml_CIUIElement4* This,
        EventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* add_AccessKeyDisplayRequested)(__x_ABI_CWindows_CUI_CXaml_CIUIElement4* This,
        __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CUIElement___x_ABI_CWindows__CUI__CXaml__CInput__CAccessKeyDisplayRequestedEventArgs* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_AccessKeyDisplayRequested)(__x_ABI_CWindows_CUI_CXaml_CIUIElement4* This,
        EventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* add_AccessKeyDisplayDismissed)(__x_ABI_CWindows_CUI_CXaml_CIUIElement4* This,
        __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CUIElement___x_ABI_CWindows__CUI__CXaml__CInput__CAccessKeyDisplayDismissedEventArgs* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_AccessKeyDisplayDismissed)(__x_ABI_CWindows_CUI_CXaml_CIUIElement4* This,
        EventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* add_AccessKeyInvoked)(__x_ABI_CWindows_CUI_CXaml_CIUIElement4* This,
        __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CUIElement___x_ABI_CWindows__CUI__CXaml__CInput__CAccessKeyInvokedEventArgs* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_AccessKeyInvoked)(__x_ABI_CWindows_CUI_CXaml_CIUIElement4* This,
        EventRegistrationToken token);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CIUIElement4Vtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CIUIElement4
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CIUIElement4Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CIUIElement4;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CIUIElement4_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CIUIElement5_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CIUIElement5_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CIUIElement5Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CIUIElement5* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CIUIElement5* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CIUIElement5* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CIUIElement5* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CIUIElement5* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CIUIElement5* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Lights)(__x_ABI_CWindows_CUI_CXaml_CIUIElement5* This,
        __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CMedia__CXamlLight** value);
    HRESULT (STDMETHODCALLTYPE* get_KeyTipPlacementMode)(__x_ABI_CWindows_CUI_CXaml_CIUIElement5* This,
        enum __x_ABI_CWindows_CUI_CXaml_CInput_CKeyTipPlacementMode* value);
    HRESULT (STDMETHODCALLTYPE* put_KeyTipPlacementMode)(__x_ABI_CWindows_CUI_CXaml_CIUIElement5* This,
        enum __x_ABI_CWindows_CUI_CXaml_CInput_CKeyTipPlacementMode value);
    HRESULT (STDMETHODCALLTYPE* get_KeyTipHorizontalOffset)(__x_ABI_CWindows_CUI_CXaml_CIUIElement5* This,
        DOUBLE* value);
    HRESULT (STDMETHODCALLTYPE* put_KeyTipHorizontalOffset)(__x_ABI_CWindows_CUI_CXaml_CIUIElement5* This,
        DOUBLE value);
    HRESULT (STDMETHODCALLTYPE* get_KeyTipVerticalOffset)(__x_ABI_CWindows_CUI_CXaml_CIUIElement5* This,
        DOUBLE* value);
    HRESULT (STDMETHODCALLTYPE* put_KeyTipVerticalOffset)(__x_ABI_CWindows_CUI_CXaml_CIUIElement5* This,
        DOUBLE value);
    HRESULT (STDMETHODCALLTYPE* get_XYFocusKeyboardNavigation)(__x_ABI_CWindows_CUI_CXaml_CIUIElement5* This,
        enum __x_ABI_CWindows_CUI_CXaml_CInput_CXYFocusKeyboardNavigationMode* value);
    HRESULT (STDMETHODCALLTYPE* put_XYFocusKeyboardNavigation)(__x_ABI_CWindows_CUI_CXaml_CIUIElement5* This,
        enum __x_ABI_CWindows_CUI_CXaml_CInput_CXYFocusKeyboardNavigationMode value);
    HRESULT (STDMETHODCALLTYPE* get_XYFocusUpNavigationStrategy)(__x_ABI_CWindows_CUI_CXaml_CIUIElement5* This,
        enum __x_ABI_CWindows_CUI_CXaml_CInput_CXYFocusNavigationStrategy* value);
    HRESULT (STDMETHODCALLTYPE* put_XYFocusUpNavigationStrategy)(__x_ABI_CWindows_CUI_CXaml_CIUIElement5* This,
        enum __x_ABI_CWindows_CUI_CXaml_CInput_CXYFocusNavigationStrategy value);
    HRESULT (STDMETHODCALLTYPE* get_XYFocusDownNavigationStrategy)(__x_ABI_CWindows_CUI_CXaml_CIUIElement5* This,
        enum __x_ABI_CWindows_CUI_CXaml_CInput_CXYFocusNavigationStrategy* value);
    HRESULT (STDMETHODCALLTYPE* put_XYFocusDownNavigationStrategy)(__x_ABI_CWindows_CUI_CXaml_CIUIElement5* This,
        enum __x_ABI_CWindows_CUI_CXaml_CInput_CXYFocusNavigationStrategy value);
    HRESULT (STDMETHODCALLTYPE* get_XYFocusLeftNavigationStrategy)(__x_ABI_CWindows_CUI_CXaml_CIUIElement5* This,
        enum __x_ABI_CWindows_CUI_CXaml_CInput_CXYFocusNavigationStrategy* value);
    HRESULT (STDMETHODCALLTYPE* put_XYFocusLeftNavigationStrategy)(__x_ABI_CWindows_CUI_CXaml_CIUIElement5* This,
        enum __x_ABI_CWindows_CUI_CXaml_CInput_CXYFocusNavigationStrategy value);
    HRESULT (STDMETHODCALLTYPE* get_XYFocusRightNavigationStrategy)(__x_ABI_CWindows_CUI_CXaml_CIUIElement5* This,
        enum __x_ABI_CWindows_CUI_CXaml_CInput_CXYFocusNavigationStrategy* value);
    HRESULT (STDMETHODCALLTYPE* put_XYFocusRightNavigationStrategy)(__x_ABI_CWindows_CUI_CXaml_CIUIElement5* This,
        enum __x_ABI_CWindows_CUI_CXaml_CInput_CXYFocusNavigationStrategy value);
    HRESULT (STDMETHODCALLTYPE* get_HighContrastAdjustment)(__x_ABI_CWindows_CUI_CXaml_CIUIElement5* This,
        enum __x_ABI_CWindows_CUI_CXaml_CElementHighContrastAdjustment* value);
    HRESULT (STDMETHODCALLTYPE* put_HighContrastAdjustment)(__x_ABI_CWindows_CUI_CXaml_CIUIElement5* This,
        enum __x_ABI_CWindows_CUI_CXaml_CElementHighContrastAdjustment value);
    HRESULT (STDMETHODCALLTYPE* get_TabFocusNavigation)(__x_ABI_CWindows_CUI_CXaml_CIUIElement5* This,
        enum __x_ABI_CWindows_CUI_CXaml_CInput_CKeyboardNavigationMode* value);
    HRESULT (STDMETHODCALLTYPE* put_TabFocusNavigation)(__x_ABI_CWindows_CUI_CXaml_CIUIElement5* This,
        enum __x_ABI_CWindows_CUI_CXaml_CInput_CKeyboardNavigationMode value);
    HRESULT (STDMETHODCALLTYPE* add_GettingFocus)(__x_ABI_CWindows_CUI_CXaml_CIUIElement5* This,
        __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CUIElement___x_ABI_CWindows__CUI__CXaml__CInput__CGettingFocusEventArgs* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_GettingFocus)(__x_ABI_CWindows_CUI_CXaml_CIUIElement5* This,
        EventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* add_LosingFocus)(__x_ABI_CWindows_CUI_CXaml_CIUIElement5* This,
        __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CUIElement___x_ABI_CWindows__CUI__CXaml__CInput__CLosingFocusEventArgs* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_LosingFocus)(__x_ABI_CWindows_CUI_CXaml_CIUIElement5* This,
        EventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* add_NoFocusCandidateFound)(__x_ABI_CWindows_CUI_CXaml_CIUIElement5* This,
        __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CUIElement___x_ABI_CWindows__CUI__CXaml__CInput__CNoFocusCandidateFoundEventArgs* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_NoFocusCandidateFound)(__x_ABI_CWindows_CUI_CXaml_CIUIElement5* This,
        EventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* StartBringIntoView)(__x_ABI_CWindows_CUI_CXaml_CIUIElement5* This);
    HRESULT (STDMETHODCALLTYPE* StartBringIntoViewWithOptions)(__x_ABI_CWindows_CUI_CXaml_CIUIElement5* This,
        __x_ABI_CWindows_CUI_CXaml_CIBringIntoViewOptions* options);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CIUIElement5Vtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CIUIElement5
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CIUIElement5Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CIUIElement5;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CIUIElement5_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CIUIElement7_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CIUIElement7_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CIUIElement7Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CIUIElement7* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CIUIElement7* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CIUIElement7* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CIUIElement7* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CIUIElement7* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CIUIElement7* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_KeyboardAccelerators)(__x_ABI_CWindows_CUI_CXaml_CIUIElement7* This,
        __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CInput__CKeyboardAccelerator** value);
    HRESULT (STDMETHODCALLTYPE* add_CharacterReceived)(__x_ABI_CWindows_CUI_CXaml_CIUIElement7* This,
        __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CUIElement___x_ABI_CWindows__CUI__CXaml__CInput__CCharacterReceivedRoutedEventArgs* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_CharacterReceived)(__x_ABI_CWindows_CUI_CXaml_CIUIElement7* This,
        EventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* add_ProcessKeyboardAccelerators)(__x_ABI_CWindows_CUI_CXaml_CIUIElement7* This,
        __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CUIElement___x_ABI_CWindows__CUI__CXaml__CInput__CProcessKeyboardAcceleratorEventArgs* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_ProcessKeyboardAccelerators)(__x_ABI_CWindows_CUI_CXaml_CIUIElement7* This,
        EventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* add_PreviewKeyDown)(__x_ABI_CWindows_CUI_CXaml_CIUIElement7* This,
        __x_ABI_CWindows_CUI_CXaml_CInput_CIKeyEventHandler* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_PreviewKeyDown)(__x_ABI_CWindows_CUI_CXaml_CIUIElement7* This,
        EventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* add_PreviewKeyUp)(__x_ABI_CWindows_CUI_CXaml_CIUIElement7* This,
        __x_ABI_CWindows_CUI_CXaml_CInput_CIKeyEventHandler* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_PreviewKeyUp)(__x_ABI_CWindows_CUI_CXaml_CIUIElement7* This,
        EventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* TryInvokeKeyboardAccelerator)(__x_ABI_CWindows_CUI_CXaml_CIUIElement7* This,
        __x_ABI_CWindows_CUI_CXaml_CInput_CIProcessKeyboardAcceleratorEventArgs* args);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CIUIElement7Vtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CIUIElement7
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CIUIElement7Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CIUIElement7;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CIUIElement7_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CIUIElement8_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CIUIElement8_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CIUIElement8Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CIUIElement8* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CIUIElement8* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CIUIElement8* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CIUIElement8* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CIUIElement8* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CIUIElement8* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_KeyTipTarget)(__x_ABI_CWindows_CUI_CXaml_CIUIElement8* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyObject** value);
    HRESULT (STDMETHODCALLTYPE* put_KeyTipTarget)(__x_ABI_CWindows_CUI_CXaml_CIUIElement8* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyObject* value);
    HRESULT (STDMETHODCALLTYPE* get_KeyboardAcceleratorPlacementTarget)(__x_ABI_CWindows_CUI_CXaml_CIUIElement8* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyObject** value);
    HRESULT (STDMETHODCALLTYPE* put_KeyboardAcceleratorPlacementTarget)(__x_ABI_CWindows_CUI_CXaml_CIUIElement8* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyObject* value);
    HRESULT (STDMETHODCALLTYPE* get_KeyboardAcceleratorPlacementMode)(__x_ABI_CWindows_CUI_CXaml_CIUIElement8* This,
        enum __x_ABI_CWindows_CUI_CXaml_CInput_CKeyboardAcceleratorPlacementMode* value);
    HRESULT (STDMETHODCALLTYPE* put_KeyboardAcceleratorPlacementMode)(__x_ABI_CWindows_CUI_CXaml_CIUIElement8* This,
        enum __x_ABI_CWindows_CUI_CXaml_CInput_CKeyboardAcceleratorPlacementMode value);
    HRESULT (STDMETHODCALLTYPE* add_BringIntoViewRequested)(__x_ABI_CWindows_CUI_CXaml_CIUIElement8* This,
        __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CUIElement___x_ABI_CWindows__CUI__CXaml__CBringIntoViewRequestedEventArgs* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_BringIntoViewRequested)(__x_ABI_CWindows_CUI_CXaml_CIUIElement8* This,
        EventRegistrationToken token);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CIUIElement8Vtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CIUIElement8
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CIUIElement8Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CIUIElement8;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CIUIElement8_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CIUIElement9_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CIUIElement9_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CIUIElement9Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CIUIElement9* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CIUIElement9* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CIUIElement9* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CIUIElement9* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CIUIElement9* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CIUIElement9* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_CanBeScrollAnchor)(__x_ABI_CWindows_CUI_CXaml_CIUIElement9* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* put_CanBeScrollAnchor)(__x_ABI_CWindows_CUI_CXaml_CIUIElement9* This,
        boolean value);
    HRESULT (STDMETHODCALLTYPE* get_OpacityTransition)(__x_ABI_CWindows_CUI_CXaml_CIUIElement9* This,
        __x_ABI_CWindows_CUI_CXaml_CIScalarTransition** value);
    HRESULT (STDMETHODCALLTYPE* put_OpacityTransition)(__x_ABI_CWindows_CUI_CXaml_CIUIElement9* This,
        __x_ABI_CWindows_CUI_CXaml_CIScalarTransition* value);
    HRESULT (STDMETHODCALLTYPE* get_Translation)(__x_ABI_CWindows_CUI_CXaml_CIUIElement9* This,
        struct __x_ABI_CWindows_CFoundation_CNumerics_CVector3* value);
    HRESULT (STDMETHODCALLTYPE* put_Translation)(__x_ABI_CWindows_CUI_CXaml_CIUIElement9* This,
        struct __x_ABI_CWindows_CFoundation_CNumerics_CVector3 value);
    HRESULT (STDMETHODCALLTYPE* get_TranslationTransition)(__x_ABI_CWindows_CUI_CXaml_CIUIElement9* This,
        __x_ABI_CWindows_CUI_CXaml_CIVector3Transition** value);
    HRESULT (STDMETHODCALLTYPE* put_TranslationTransition)(__x_ABI_CWindows_CUI_CXaml_CIUIElement9* This,
        __x_ABI_CWindows_CUI_CXaml_CIVector3Transition* value);
    HRESULT (STDMETHODCALLTYPE* get_Rotation)(__x_ABI_CWindows_CUI_CXaml_CIUIElement9* This,
        FLOAT* value);
    HRESULT (STDMETHODCALLTYPE* put_Rotation)(__x_ABI_CWindows_CUI_CXaml_CIUIElement9* This,
        FLOAT value);
    HRESULT (STDMETHODCALLTYPE* get_RotationTransition)(__x_ABI_CWindows_CUI_CXaml_CIUIElement9* This,
        __x_ABI_CWindows_CUI_CXaml_CIScalarTransition** value);
    HRESULT (STDMETHODCALLTYPE* put_RotationTransition)(__x_ABI_CWindows_CUI_CXaml_CIUIElement9* This,
        __x_ABI_CWindows_CUI_CXaml_CIScalarTransition* value);
    HRESULT (STDMETHODCALLTYPE* get_Scale)(__x_ABI_CWindows_CUI_CXaml_CIUIElement9* This,
        struct __x_ABI_CWindows_CFoundation_CNumerics_CVector3* value);
    HRESULT (STDMETHODCALLTYPE* put_Scale)(__x_ABI_CWindows_CUI_CXaml_CIUIElement9* This,
        struct __x_ABI_CWindows_CFoundation_CNumerics_CVector3 value);
    HRESULT (STDMETHODCALLTYPE* get_ScaleTransition)(__x_ABI_CWindows_CUI_CXaml_CIUIElement9* This,
        __x_ABI_CWindows_CUI_CXaml_CIVector3Transition** value);
    HRESULT (STDMETHODCALLTYPE* put_ScaleTransition)(__x_ABI_CWindows_CUI_CXaml_CIUIElement9* This,
        __x_ABI_CWindows_CUI_CXaml_CIVector3Transition* value);
    HRESULT (STDMETHODCALLTYPE* get_TransformMatrix)(__x_ABI_CWindows_CUI_CXaml_CIUIElement9* This,
        struct __x_ABI_CWindows_CFoundation_CNumerics_CMatrix4x4* value);
    HRESULT (STDMETHODCALLTYPE* put_TransformMatrix)(__x_ABI_CWindows_CUI_CXaml_CIUIElement9* This,
        struct __x_ABI_CWindows_CFoundation_CNumerics_CMatrix4x4 value);
    HRESULT (STDMETHODCALLTYPE* get_CenterPoint)(__x_ABI_CWindows_CUI_CXaml_CIUIElement9* This,
        struct __x_ABI_CWindows_CFoundation_CNumerics_CVector3* value);
    HRESULT (STDMETHODCALLTYPE* put_CenterPoint)(__x_ABI_CWindows_CUI_CXaml_CIUIElement9* This,
        struct __x_ABI_CWindows_CFoundation_CNumerics_CVector3 value);
    HRESULT (STDMETHODCALLTYPE* get_RotationAxis)(__x_ABI_CWindows_CUI_CXaml_CIUIElement9* This,
        struct __x_ABI_CWindows_CFoundation_CNumerics_CVector3* value);
    HRESULT (STDMETHODCALLTYPE* put_RotationAxis)(__x_ABI_CWindows_CUI_CXaml_CIUIElement9* This,
        struct __x_ABI_CWindows_CFoundation_CNumerics_CVector3 value);
    HRESULT (STDMETHODCALLTYPE* StartAnimation)(__x_ABI_CWindows_CUI_CXaml_CIUIElement9* This,
        __x_ABI_CWindows_CUI_CComposition_CICompositionAnimationBase* animation);
    HRESULT (STDMETHODCALLTYPE* StopAnimation)(__x_ABI_CWindows_CUI_CXaml_CIUIElement9* This,
        __x_ABI_CWindows_CUI_CComposition_CICompositionAnimationBase* animation);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CIUIElement9Vtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CIUIElement9
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CIUIElement9Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CIUIElement9;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CIUIElement9_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CIUIElementFactory_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CIUIElementFactory_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CIUIElementFactoryVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CIUIElementFactory* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CIUIElementFactory* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CIUIElementFactory* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CIUIElementFactory* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CIUIElementFactory* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CIUIElementFactory* This,
            TrustLevel* trustLevel);
    
        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CIUIElementFactoryVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CIUIElementFactory
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CIUIElementFactoryVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CIUIElementFactory;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CIUIElementFactory_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CIUIElementOverrides_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CIUIElementOverrides_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CIUIElementOverridesVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CIUIElementOverrides* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CIUIElementOverrides* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CIUIElementOverrides* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CIUIElementOverrides* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CIUIElementOverrides* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CIUIElementOverrides* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* OnCreateAutomationPeer)(__x_ABI_CWindows_CUI_CXaml_CIUIElementOverrides* This,
        __x_ABI_CWindows_CUI_CXaml_CAutomation_CPeers_CIAutomationPeer** result);
    HRESULT (STDMETHODCALLTYPE* OnDisconnectVisualChildren)(__x_ABI_CWindows_CUI_CXaml_CIUIElementOverrides* This);
    HRESULT (STDMETHODCALLTYPE* FindSubElementsForTouchTargeting)(__x_ABI_CWindows_CUI_CXaml_CIUIElementOverrides* This,
        struct __x_ABI_CWindows_CFoundation_CPoint point,
        struct __x_ABI_CWindows_CFoundation_CRect boundingRect,
        __x_ABI_C__FIIterable_1___x_ABI_C__FIIterable_1___x_ABI_CWindows__CFoundation__CPoint** result);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CIUIElementOverridesVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CIUIElementOverrides
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CIUIElementOverridesVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CIUIElementOverrides;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CIUIElementOverrides_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CIUIElementOverrides7_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CIUIElementOverrides7_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CIUIElementOverrides7Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CIUIElementOverrides7* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CIUIElementOverrides7* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CIUIElementOverrides7* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CIUIElementOverrides7* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CIUIElementOverrides7* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CIUIElementOverrides7* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetChildrenInTabFocusOrder)(__x_ABI_CWindows_CUI_CXaml_CIUIElementOverrides7* This,
        __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CDependencyObject** result);
    HRESULT (STDMETHODCALLTYPE* OnProcessKeyboardAccelerators)(__x_ABI_CWindows_CUI_CXaml_CIUIElementOverrides7* This,
        __x_ABI_CWindows_CUI_CXaml_CInput_CIProcessKeyboardAcceleratorEventArgs* args);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CIUIElementOverrides7Vtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CIUIElementOverrides7
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CIUIElementOverrides7Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CIUIElementOverrides7;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CIUIElementOverrides7_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CIUIElementOverrides8_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CIUIElementOverrides8_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CIUIElementOverrides8Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CIUIElementOverrides8* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CIUIElementOverrides8* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CIUIElementOverrides8* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CIUIElementOverrides8* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CIUIElementOverrides8* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CIUIElementOverrides8* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* OnKeyboardAcceleratorInvoked)(__x_ABI_CWindows_CUI_CXaml_CIUIElementOverrides8* This,
        __x_ABI_CWindows_CUI_CXaml_CInput_CIKeyboardAcceleratorInvokedEventArgs* args);
    HRESULT (STDMETHODCALLTYPE* OnBringIntoViewRequested)(__x_ABI_CWindows_CUI_CXaml_CIUIElementOverrides8* This,
        __x_ABI_CWindows_CUI_CXaml_CIBringIntoViewRequestedEventArgs* e);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CIUIElementOverrides8Vtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CIUIElementOverrides8
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CIUIElementOverrides8Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CIUIElementOverrides8;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CIUIElementOverrides8_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CIUIElementOverrides9_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CIUIElementOverrides9_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CIUIElementOverrides9Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CIUIElementOverrides9* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CIUIElementOverrides9* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CIUIElementOverrides9* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CIUIElementOverrides9* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CIUIElementOverrides9* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CIUIElementOverrides9* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* PopulatePropertyInfoOverride)(__x_ABI_CWindows_CUI_CXaml_CIUIElementOverrides9* This,
        HSTRING propertyName,
        __x_ABI_CWindows_CUI_CComposition_CIAnimationPropertyInfo* animationPropertyInfo);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CIUIElementOverrides9Vtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CIUIElementOverrides9
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CIUIElementOverrides9Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CIUIElementOverrides9;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CIUIElementOverrides9_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CIUIElementStatics_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CIUIElementStatics_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CIUIElementStaticsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CIUIElementStatics* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CIUIElementStatics* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CIUIElementStatics* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CIUIElementStatics* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CIUIElementStatics* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CIUIElementStatics* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_KeyDownEvent)(__x_ABI_CWindows_CUI_CXaml_CIUIElementStatics* This,
        __x_ABI_CWindows_CUI_CXaml_CIRoutedEvent** value);
    HRESULT (STDMETHODCALLTYPE* get_KeyUpEvent)(__x_ABI_CWindows_CUI_CXaml_CIUIElementStatics* This,
        __x_ABI_CWindows_CUI_CXaml_CIRoutedEvent** value);
    HRESULT (STDMETHODCALLTYPE* get_PointerEnteredEvent)(__x_ABI_CWindows_CUI_CXaml_CIUIElementStatics* This,
        __x_ABI_CWindows_CUI_CXaml_CIRoutedEvent** value);
    HRESULT (STDMETHODCALLTYPE* get_PointerPressedEvent)(__x_ABI_CWindows_CUI_CXaml_CIUIElementStatics* This,
        __x_ABI_CWindows_CUI_CXaml_CIRoutedEvent** value);
    HRESULT (STDMETHODCALLTYPE* get_PointerMovedEvent)(__x_ABI_CWindows_CUI_CXaml_CIUIElementStatics* This,
        __x_ABI_CWindows_CUI_CXaml_CIRoutedEvent** value);
    HRESULT (STDMETHODCALLTYPE* get_PointerReleasedEvent)(__x_ABI_CWindows_CUI_CXaml_CIUIElementStatics* This,
        __x_ABI_CWindows_CUI_CXaml_CIRoutedEvent** value);
    HRESULT (STDMETHODCALLTYPE* get_PointerExitedEvent)(__x_ABI_CWindows_CUI_CXaml_CIUIElementStatics* This,
        __x_ABI_CWindows_CUI_CXaml_CIRoutedEvent** value);
    HRESULT (STDMETHODCALLTYPE* get_PointerCaptureLostEvent)(__x_ABI_CWindows_CUI_CXaml_CIUIElementStatics* This,
        __x_ABI_CWindows_CUI_CXaml_CIRoutedEvent** value);
    HRESULT (STDMETHODCALLTYPE* get_PointerCanceledEvent)(__x_ABI_CWindows_CUI_CXaml_CIUIElementStatics* This,
        __x_ABI_CWindows_CUI_CXaml_CIRoutedEvent** value);
    HRESULT (STDMETHODCALLTYPE* get_PointerWheelChangedEvent)(__x_ABI_CWindows_CUI_CXaml_CIUIElementStatics* This,
        __x_ABI_CWindows_CUI_CXaml_CIRoutedEvent** value);
    HRESULT (STDMETHODCALLTYPE* get_TappedEvent)(__x_ABI_CWindows_CUI_CXaml_CIUIElementStatics* This,
        __x_ABI_CWindows_CUI_CXaml_CIRoutedEvent** value);
    HRESULT (STDMETHODCALLTYPE* get_DoubleTappedEvent)(__x_ABI_CWindows_CUI_CXaml_CIUIElementStatics* This,
        __x_ABI_CWindows_CUI_CXaml_CIRoutedEvent** value);
    HRESULT (STDMETHODCALLTYPE* get_HoldingEvent)(__x_ABI_CWindows_CUI_CXaml_CIUIElementStatics* This,
        __x_ABI_CWindows_CUI_CXaml_CIRoutedEvent** value);
    HRESULT (STDMETHODCALLTYPE* get_RightTappedEvent)(__x_ABI_CWindows_CUI_CXaml_CIUIElementStatics* This,
        __x_ABI_CWindows_CUI_CXaml_CIRoutedEvent** value);
    HRESULT (STDMETHODCALLTYPE* get_ManipulationStartingEvent)(__x_ABI_CWindows_CUI_CXaml_CIUIElementStatics* This,
        __x_ABI_CWindows_CUI_CXaml_CIRoutedEvent** value);
    HRESULT (STDMETHODCALLTYPE* get_ManipulationInertiaStartingEvent)(__x_ABI_CWindows_CUI_CXaml_CIUIElementStatics* This,
        __x_ABI_CWindows_CUI_CXaml_CIRoutedEvent** value);
    HRESULT (STDMETHODCALLTYPE* get_ManipulationStartedEvent)(__x_ABI_CWindows_CUI_CXaml_CIUIElementStatics* This,
        __x_ABI_CWindows_CUI_CXaml_CIRoutedEvent** value);
    HRESULT (STDMETHODCALLTYPE* get_ManipulationDeltaEvent)(__x_ABI_CWindows_CUI_CXaml_CIUIElementStatics* This,
        __x_ABI_CWindows_CUI_CXaml_CIRoutedEvent** value);
    HRESULT (STDMETHODCALLTYPE* get_ManipulationCompletedEvent)(__x_ABI_CWindows_CUI_CXaml_CIUIElementStatics* This,
        __x_ABI_CWindows_CUI_CXaml_CIRoutedEvent** value);
    HRESULT (STDMETHODCALLTYPE* get_DragEnterEvent)(__x_ABI_CWindows_CUI_CXaml_CIUIElementStatics* This,
        __x_ABI_CWindows_CUI_CXaml_CIRoutedEvent** value);
    HRESULT (STDMETHODCALLTYPE* get_DragLeaveEvent)(__x_ABI_CWindows_CUI_CXaml_CIUIElementStatics* This,
        __x_ABI_CWindows_CUI_CXaml_CIRoutedEvent** value);
    HRESULT (STDMETHODCALLTYPE* get_DragOverEvent)(__x_ABI_CWindows_CUI_CXaml_CIUIElementStatics* This,
        __x_ABI_CWindows_CUI_CXaml_CIRoutedEvent** value);
    HRESULT (STDMETHODCALLTYPE* get_DropEvent)(__x_ABI_CWindows_CUI_CXaml_CIUIElementStatics* This,
        __x_ABI_CWindows_CUI_CXaml_CIRoutedEvent** value);
    HRESULT (STDMETHODCALLTYPE* get_AllowDropProperty)(__x_ABI_CWindows_CUI_CXaml_CIUIElementStatics* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** value);
    HRESULT (STDMETHODCALLTYPE* get_OpacityProperty)(__x_ABI_CWindows_CUI_CXaml_CIUIElementStatics* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** value);
    HRESULT (STDMETHODCALLTYPE* get_ClipProperty)(__x_ABI_CWindows_CUI_CXaml_CIUIElementStatics* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** value);
    HRESULT (STDMETHODCALLTYPE* get_RenderTransformProperty)(__x_ABI_CWindows_CUI_CXaml_CIUIElementStatics* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** value);
    HRESULT (STDMETHODCALLTYPE* get_ProjectionProperty)(__x_ABI_CWindows_CUI_CXaml_CIUIElementStatics* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** value);
    HRESULT (STDMETHODCALLTYPE* get_RenderTransformOriginProperty)(__x_ABI_CWindows_CUI_CXaml_CIUIElementStatics* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** value);
    HRESULT (STDMETHODCALLTYPE* get_IsHitTestVisibleProperty)(__x_ABI_CWindows_CUI_CXaml_CIUIElementStatics* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** value);
    HRESULT (STDMETHODCALLTYPE* get_VisibilityProperty)(__x_ABI_CWindows_CUI_CXaml_CIUIElementStatics* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** value);
    HRESULT (STDMETHODCALLTYPE* get_UseLayoutRoundingProperty)(__x_ABI_CWindows_CUI_CXaml_CIUIElementStatics* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** value);
    HRESULT (STDMETHODCALLTYPE* get_TransitionsProperty)(__x_ABI_CWindows_CUI_CXaml_CIUIElementStatics* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** value);
    HRESULT (STDMETHODCALLTYPE* get_CacheModeProperty)(__x_ABI_CWindows_CUI_CXaml_CIUIElementStatics* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** value);
    HRESULT (STDMETHODCALLTYPE* get_IsTapEnabledProperty)(__x_ABI_CWindows_CUI_CXaml_CIUIElementStatics* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** value);
    HRESULT (STDMETHODCALLTYPE* get_IsDoubleTapEnabledProperty)(__x_ABI_CWindows_CUI_CXaml_CIUIElementStatics* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** value);
    HRESULT (STDMETHODCALLTYPE* get_IsRightTapEnabledProperty)(__x_ABI_CWindows_CUI_CXaml_CIUIElementStatics* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** value);
    HRESULT (STDMETHODCALLTYPE* get_IsHoldingEnabledProperty)(__x_ABI_CWindows_CUI_CXaml_CIUIElementStatics* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** value);
    HRESULT (STDMETHODCALLTYPE* get_ManipulationModeProperty)(__x_ABI_CWindows_CUI_CXaml_CIUIElementStatics* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** value);
    HRESULT (STDMETHODCALLTYPE* get_PointerCapturesProperty)(__x_ABI_CWindows_CUI_CXaml_CIUIElementStatics* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CIUIElementStaticsVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CIUIElementStatics
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CIUIElementStaticsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CIUIElementStatics;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CIUIElementStatics_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CIUIElementStatics10_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CIUIElementStatics10_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CIUIElementStatics10Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CIUIElementStatics10* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CIUIElementStatics10* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CIUIElementStatics10* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CIUIElementStatics10* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CIUIElementStatics10* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CIUIElementStatics10* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_ShadowProperty)(__x_ABI_CWindows_CUI_CXaml_CIUIElementStatics10* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CIUIElementStatics10Vtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CIUIElementStatics10
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CIUIElementStatics10Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CIUIElementStatics10;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CIUIElementStatics10_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CIUIElementStatics2_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CIUIElementStatics2_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CIUIElementStatics2Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CIUIElementStatics2* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CIUIElementStatics2* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CIUIElementStatics2* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CIUIElementStatics2* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CIUIElementStatics2* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CIUIElementStatics2* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_CompositeModeProperty)(__x_ABI_CWindows_CUI_CXaml_CIUIElementStatics2* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CIUIElementStatics2Vtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CIUIElementStatics2
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CIUIElementStatics2Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CIUIElementStatics2;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CIUIElementStatics2_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CIUIElementStatics3_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CIUIElementStatics3_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CIUIElementStatics3Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CIUIElementStatics3* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CIUIElementStatics3* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CIUIElementStatics3* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CIUIElementStatics3* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CIUIElementStatics3* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CIUIElementStatics3* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Transform3DProperty)(__x_ABI_CWindows_CUI_CXaml_CIUIElementStatics3* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** value);
    HRESULT (STDMETHODCALLTYPE* get_CanDragProperty)(__x_ABI_CWindows_CUI_CXaml_CIUIElementStatics3* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** value);
    HRESULT (STDMETHODCALLTYPE* TryStartDirectManipulation)(__x_ABI_CWindows_CUI_CXaml_CIUIElementStatics3* This,
        __x_ABI_CWindows_CUI_CXaml_CInput_CIPointer* value,
        boolean* result);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CIUIElementStatics3Vtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CIUIElementStatics3
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CIUIElementStatics3Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CIUIElementStatics3;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CIUIElementStatics3_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CIUIElementStatics4_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CIUIElementStatics4_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CIUIElementStatics4Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CIUIElementStatics4* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CIUIElementStatics4* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CIUIElementStatics4* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CIUIElementStatics4* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CIUIElementStatics4* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CIUIElementStatics4* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_ContextFlyoutProperty)(__x_ABI_CWindows_CUI_CXaml_CIUIElementStatics4* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** value);
    HRESULT (STDMETHODCALLTYPE* get_ExitDisplayModeOnAccessKeyInvokedProperty)(__x_ABI_CWindows_CUI_CXaml_CIUIElementStatics4* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** value);
    HRESULT (STDMETHODCALLTYPE* get_IsAccessKeyScopeProperty)(__x_ABI_CWindows_CUI_CXaml_CIUIElementStatics4* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** value);
    HRESULT (STDMETHODCALLTYPE* get_AccessKeyScopeOwnerProperty)(__x_ABI_CWindows_CUI_CXaml_CIUIElementStatics4* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** value);
    HRESULT (STDMETHODCALLTYPE* get_AccessKeyProperty)(__x_ABI_CWindows_CUI_CXaml_CIUIElementStatics4* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CIUIElementStatics4Vtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CIUIElementStatics4
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CIUIElementStatics4Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CIUIElementStatics4;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CIUIElementStatics4_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CIUIElementStatics5_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CIUIElementStatics5_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CIUIElementStatics5Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CIUIElementStatics5* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CIUIElementStatics5* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CIUIElementStatics5* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CIUIElementStatics5* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CIUIElementStatics5* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CIUIElementStatics5* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_LightsProperty)(__x_ABI_CWindows_CUI_CXaml_CIUIElementStatics5* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** value);
    HRESULT (STDMETHODCALLTYPE* get_KeyTipPlacementModeProperty)(__x_ABI_CWindows_CUI_CXaml_CIUIElementStatics5* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** value);
    HRESULT (STDMETHODCALLTYPE* get_KeyTipHorizontalOffsetProperty)(__x_ABI_CWindows_CUI_CXaml_CIUIElementStatics5* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** value);
    HRESULT (STDMETHODCALLTYPE* get_KeyTipVerticalOffsetProperty)(__x_ABI_CWindows_CUI_CXaml_CIUIElementStatics5* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** value);
    HRESULT (STDMETHODCALLTYPE* get_XYFocusKeyboardNavigationProperty)(__x_ABI_CWindows_CUI_CXaml_CIUIElementStatics5* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** value);
    HRESULT (STDMETHODCALLTYPE* get_XYFocusUpNavigationStrategyProperty)(__x_ABI_CWindows_CUI_CXaml_CIUIElementStatics5* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** value);
    HRESULT (STDMETHODCALLTYPE* get_XYFocusDownNavigationStrategyProperty)(__x_ABI_CWindows_CUI_CXaml_CIUIElementStatics5* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** value);
    HRESULT (STDMETHODCALLTYPE* get_XYFocusLeftNavigationStrategyProperty)(__x_ABI_CWindows_CUI_CXaml_CIUIElementStatics5* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** value);
    HRESULT (STDMETHODCALLTYPE* get_XYFocusRightNavigationStrategyProperty)(__x_ABI_CWindows_CUI_CXaml_CIUIElementStatics5* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** value);
    HRESULT (STDMETHODCALLTYPE* get_HighContrastAdjustmentProperty)(__x_ABI_CWindows_CUI_CXaml_CIUIElementStatics5* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** value);
    HRESULT (STDMETHODCALLTYPE* get_TabFocusNavigationProperty)(__x_ABI_CWindows_CUI_CXaml_CIUIElementStatics5* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CIUIElementStatics5Vtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CIUIElementStatics5
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CIUIElementStatics5Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CIUIElementStatics5;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CIUIElementStatics5_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CIUIElementStatics6_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CIUIElementStatics6_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CIUIElementStatics6Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CIUIElementStatics6* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CIUIElementStatics6* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CIUIElementStatics6* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CIUIElementStatics6* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CIUIElementStatics6* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CIUIElementStatics6* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_GettingFocusEvent)(__x_ABI_CWindows_CUI_CXaml_CIUIElementStatics6* This,
        __x_ABI_CWindows_CUI_CXaml_CIRoutedEvent** value);
    HRESULT (STDMETHODCALLTYPE* get_LosingFocusEvent)(__x_ABI_CWindows_CUI_CXaml_CIUIElementStatics6* This,
        __x_ABI_CWindows_CUI_CXaml_CIRoutedEvent** value);
    HRESULT (STDMETHODCALLTYPE* get_NoFocusCandidateFoundEvent)(__x_ABI_CWindows_CUI_CXaml_CIUIElementStatics6* This,
        __x_ABI_CWindows_CUI_CXaml_CIRoutedEvent** value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CIUIElementStatics6Vtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CIUIElementStatics6
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CIUIElementStatics6Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CIUIElementStatics6;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CIUIElementStatics6_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CIUIElementStatics7_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CIUIElementStatics7_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CIUIElementStatics7Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CIUIElementStatics7* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CIUIElementStatics7* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CIUIElementStatics7* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CIUIElementStatics7* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CIUIElementStatics7* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CIUIElementStatics7* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_PreviewKeyDownEvent)(__x_ABI_CWindows_CUI_CXaml_CIUIElementStatics7* This,
        __x_ABI_CWindows_CUI_CXaml_CIRoutedEvent** value);
    HRESULT (STDMETHODCALLTYPE* get_CharacterReceivedEvent)(__x_ABI_CWindows_CUI_CXaml_CIUIElementStatics7* This,
        __x_ABI_CWindows_CUI_CXaml_CIRoutedEvent** value);
    HRESULT (STDMETHODCALLTYPE* get_PreviewKeyUpEvent)(__x_ABI_CWindows_CUI_CXaml_CIUIElementStatics7* This,
        __x_ABI_CWindows_CUI_CXaml_CIRoutedEvent** value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CIUIElementStatics7Vtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CIUIElementStatics7
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CIUIElementStatics7Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CIUIElementStatics7;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CIUIElementStatics7_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CIUIElementStatics8_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CIUIElementStatics8_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CIUIElementStatics8Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CIUIElementStatics8* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CIUIElementStatics8* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CIUIElementStatics8* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CIUIElementStatics8* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CIUIElementStatics8* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CIUIElementStatics8* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_BringIntoViewRequestedEvent)(__x_ABI_CWindows_CUI_CXaml_CIUIElementStatics8* This,
        __x_ABI_CWindows_CUI_CXaml_CIRoutedEvent** value);
    HRESULT (STDMETHODCALLTYPE* get_ContextRequestedEvent)(__x_ABI_CWindows_CUI_CXaml_CIUIElementStatics8* This,
        __x_ABI_CWindows_CUI_CXaml_CIRoutedEvent** value);
    HRESULT (STDMETHODCALLTYPE* get_KeyTipTargetProperty)(__x_ABI_CWindows_CUI_CXaml_CIUIElementStatics8* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** value);
    HRESULT (STDMETHODCALLTYPE* get_KeyboardAcceleratorPlacementTargetProperty)(__x_ABI_CWindows_CUI_CXaml_CIUIElementStatics8* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** value);
    HRESULT (STDMETHODCALLTYPE* get_KeyboardAcceleratorPlacementModeProperty)(__x_ABI_CWindows_CUI_CXaml_CIUIElementStatics8* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** value);
    HRESULT (STDMETHODCALLTYPE* RegisterAsScrollPort)(__x_ABI_CWindows_CUI_CXaml_CIUIElementStatics8* This,
        __x_ABI_CWindows_CUI_CXaml_CIUIElement* element);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CIUIElementStatics8Vtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CIUIElementStatics8
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CIUIElementStatics8Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CIUIElementStatics8;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CIUIElementStatics8_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CIUIElementStatics9_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CIUIElementStatics9_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CIUIElementStatics9Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CIUIElementStatics9* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CIUIElementStatics9* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CIUIElementStatics9* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CIUIElementStatics9* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CIUIElementStatics9* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CIUIElementStatics9* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_CanBeScrollAnchorProperty)(__x_ABI_CWindows_CUI_CXaml_CIUIElementStatics9* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CIUIElementStatics9Vtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CIUIElementStatics9
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CIUIElementStatics9Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CIUIElementStatics9;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CIUIElementStatics9_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CIUIElementWeakCollection_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CIUIElementWeakCollection_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CIUIElementWeakCollectionVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CIUIElementWeakCollection* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CIUIElementWeakCollection* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CIUIElementWeakCollection* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CIUIElementWeakCollection* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CIUIElementWeakCollection* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CIUIElementWeakCollection* This,
            TrustLevel* trustLevel);
    
        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CIUIElementWeakCollectionVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CIUIElementWeakCollection
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CIUIElementWeakCollectionVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CIUIElementWeakCollection;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CIUIElementWeakCollection_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CIUIElementWeakCollectionFactory_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CIUIElementWeakCollectionFactory_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CIUIElementWeakCollectionFactoryVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CIUIElementWeakCollectionFactory* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CIUIElementWeakCollectionFactory* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CIUIElementWeakCollectionFactory* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CIUIElementWeakCollectionFactory* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CIUIElementWeakCollectionFactory* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CIUIElementWeakCollectionFactory* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* CreateInstance)(__x_ABI_CWindows_CUI_CXaml_CIUIElementWeakCollectionFactory* This,
        IInspectable* baseInterface,
        IInspectable** innerInterface,
        __x_ABI_CWindows_CUI_CXaml_CIUIElementWeakCollection** value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CIUIElementWeakCollectionFactoryVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CIUIElementWeakCollectionFactory
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CIUIElementWeakCollectionFactoryVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CIUIElementWeakCollectionFactory;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CIUIElementWeakCollectionFactory_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CIUnhandledExceptionEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CIUnhandledExceptionEventArgs_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CIUnhandledExceptionEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CIUnhandledExceptionEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CIUnhandledExceptionEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CIUnhandledExceptionEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CIUnhandledExceptionEventArgs* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CIUnhandledExceptionEventArgs* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CIUnhandledExceptionEventArgs* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Exception)(__x_ABI_CWindows_CUI_CXaml_CIUnhandledExceptionEventArgs* This,
        HRESULT* value);
    HRESULT (STDMETHODCALLTYPE* get_Message)(__x_ABI_CWindows_CUI_CXaml_CIUnhandledExceptionEventArgs* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_Handled)(__x_ABI_CWindows_CUI_CXaml_CIUnhandledExceptionEventArgs* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* put_Handled)(__x_ABI_CWindows_CUI_CXaml_CIUnhandledExceptionEventArgs* This,
        boolean value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CIUnhandledExceptionEventArgsVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CIUnhandledExceptionEventArgs
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CIUnhandledExceptionEventArgsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CIUnhandledExceptionEventArgs;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CIUnhandledExceptionEventArgs_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CIVector3Transition_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CIVector3Transition_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CIVector3TransitionVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CIVector3Transition* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CIVector3Transition* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CIVector3Transition* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CIVector3Transition* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CIVector3Transition* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CIVector3Transition* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Duration)(__x_ABI_CWindows_CUI_CXaml_CIVector3Transition* This,
        struct __x_ABI_CWindows_CFoundation_CTimeSpan* value);
    HRESULT (STDMETHODCALLTYPE* put_Duration)(__x_ABI_CWindows_CUI_CXaml_CIVector3Transition* This,
        struct __x_ABI_CWindows_CFoundation_CTimeSpan value);
    HRESULT (STDMETHODCALLTYPE* get_Components)(__x_ABI_CWindows_CUI_CXaml_CIVector3Transition* This,
        enum __x_ABI_CWindows_CUI_CXaml_CVector3TransitionComponents* value);
    HRESULT (STDMETHODCALLTYPE* put_Components)(__x_ABI_CWindows_CUI_CXaml_CIVector3Transition* This,
        enum __x_ABI_CWindows_CUI_CXaml_CVector3TransitionComponents value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CIVector3TransitionVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CIVector3Transition
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CIVector3TransitionVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CIVector3Transition;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CIVector3Transition_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CIVector3TransitionFactory_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CIVector3TransitionFactory_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CIVector3TransitionFactoryVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CIVector3TransitionFactory* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CIVector3TransitionFactory* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CIVector3TransitionFactory* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CIVector3TransitionFactory* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CIVector3TransitionFactory* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CIVector3TransitionFactory* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* CreateInstance)(__x_ABI_CWindows_CUI_CXaml_CIVector3TransitionFactory* This,
        IInspectable* baseInterface,
        IInspectable** innerInterface,
        __x_ABI_CWindows_CUI_CXaml_CIVector3Transition** value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CIVector3TransitionFactoryVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CIVector3TransitionFactory
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CIVector3TransitionFactoryVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CIVector3TransitionFactory;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CIVector3TransitionFactory_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CIVisualState_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CIVisualState_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CIVisualStateVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CIVisualState* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CIVisualState* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CIVisualState* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CIVisualState* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CIVisualState* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CIVisualState* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Name)(__x_ABI_CWindows_CUI_CXaml_CIVisualState* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_Storyboard)(__x_ABI_CWindows_CUI_CXaml_CIVisualState* This,
        __x_ABI_CWindows_CUI_CXaml_CMedia_CAnimation_CIStoryboard** value);
    HRESULT (STDMETHODCALLTYPE* put_Storyboard)(__x_ABI_CWindows_CUI_CXaml_CIVisualState* This,
        __x_ABI_CWindows_CUI_CXaml_CMedia_CAnimation_CIStoryboard* value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CIVisualStateVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CIVisualState
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CIVisualStateVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CIVisualState;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CIVisualState_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CIVisualState2_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CIVisualState2_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CIVisualState2Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CIVisualState2* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CIVisualState2* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CIVisualState2* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CIVisualState2* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CIVisualState2* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CIVisualState2* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Setters)(__x_ABI_CWindows_CUI_CXaml_CIVisualState2* This,
        __x_ABI_CWindows_CUI_CXaml_CISetterBaseCollection** value);
    HRESULT (STDMETHODCALLTYPE* get_StateTriggers)(__x_ABI_CWindows_CUI_CXaml_CIVisualState2* This,
        __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CStateTriggerBase** value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CIVisualState2Vtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CIVisualState2
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CIVisualState2Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CIVisualState2;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CIVisualState2_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CIVisualStateChangedEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CIVisualStateChangedEventArgs_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CIVisualStateChangedEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CIVisualStateChangedEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CIVisualStateChangedEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CIVisualStateChangedEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CIVisualStateChangedEventArgs* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CIVisualStateChangedEventArgs* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CIVisualStateChangedEventArgs* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_OldState)(__x_ABI_CWindows_CUI_CXaml_CIVisualStateChangedEventArgs* This,
        __x_ABI_CWindows_CUI_CXaml_CIVisualState** value);
    HRESULT (STDMETHODCALLTYPE* put_OldState)(__x_ABI_CWindows_CUI_CXaml_CIVisualStateChangedEventArgs* This,
        __x_ABI_CWindows_CUI_CXaml_CIVisualState* value);
    HRESULT (STDMETHODCALLTYPE* get_NewState)(__x_ABI_CWindows_CUI_CXaml_CIVisualStateChangedEventArgs* This,
        __x_ABI_CWindows_CUI_CXaml_CIVisualState** value);
    HRESULT (STDMETHODCALLTYPE* put_NewState)(__x_ABI_CWindows_CUI_CXaml_CIVisualStateChangedEventArgs* This,
        __x_ABI_CWindows_CUI_CXaml_CIVisualState* value);
    HRESULT (STDMETHODCALLTYPE* get_Control)(__x_ABI_CWindows_CUI_CXaml_CIVisualStateChangedEventArgs* This,
        __x_ABI_CWindows_CUI_CXaml_CControls_CIControl** value);
    HRESULT (STDMETHODCALLTYPE* put_Control)(__x_ABI_CWindows_CUI_CXaml_CIVisualStateChangedEventArgs* This,
        __x_ABI_CWindows_CUI_CXaml_CControls_CIControl* value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CIVisualStateChangedEventArgsVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CIVisualStateChangedEventArgs
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CIVisualStateChangedEventArgsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CIVisualStateChangedEventArgs;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CIVisualStateChangedEventArgs_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CIVisualStateGroup_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CIVisualStateGroup_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CIVisualStateGroupVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CIVisualStateGroup* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CIVisualStateGroup* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CIVisualStateGroup* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CIVisualStateGroup* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CIVisualStateGroup* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CIVisualStateGroup* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Name)(__x_ABI_CWindows_CUI_CXaml_CIVisualStateGroup* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_Transitions)(__x_ABI_CWindows_CUI_CXaml_CIVisualStateGroup* This,
        __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CVisualTransition** value);
    HRESULT (STDMETHODCALLTYPE* get_States)(__x_ABI_CWindows_CUI_CXaml_CIVisualStateGroup* This,
        __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CVisualState** value);
    HRESULT (STDMETHODCALLTYPE* get_CurrentState)(__x_ABI_CWindows_CUI_CXaml_CIVisualStateGroup* This,
        __x_ABI_CWindows_CUI_CXaml_CIVisualState** value);
    HRESULT (STDMETHODCALLTYPE* add_CurrentStateChanged)(__x_ABI_CWindows_CUI_CXaml_CIVisualStateGroup* This,
        __x_ABI_CWindows_CUI_CXaml_CIVisualStateChangedEventHandler* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_CurrentStateChanged)(__x_ABI_CWindows_CUI_CXaml_CIVisualStateGroup* This,
        EventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* add_CurrentStateChanging)(__x_ABI_CWindows_CUI_CXaml_CIVisualStateGroup* This,
        __x_ABI_CWindows_CUI_CXaml_CIVisualStateChangedEventHandler* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_CurrentStateChanging)(__x_ABI_CWindows_CUI_CXaml_CIVisualStateGroup* This,
        EventRegistrationToken token);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CIVisualStateGroupVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CIVisualStateGroup
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CIVisualStateGroupVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CIVisualStateGroup;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CIVisualStateGroup_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CIVisualStateManager_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CIVisualStateManager_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CIVisualStateManagerVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CIVisualStateManager* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CIVisualStateManager* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CIVisualStateManager* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CIVisualStateManager* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CIVisualStateManager* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CIVisualStateManager* This,
            TrustLevel* trustLevel);
    
        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CIVisualStateManagerVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CIVisualStateManager
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CIVisualStateManagerVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CIVisualStateManager;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CIVisualStateManager_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CIVisualStateManagerFactory_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CIVisualStateManagerFactory_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CIVisualStateManagerFactoryVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CIVisualStateManagerFactory* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CIVisualStateManagerFactory* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CIVisualStateManagerFactory* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CIVisualStateManagerFactory* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CIVisualStateManagerFactory* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CIVisualStateManagerFactory* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* CreateInstance)(__x_ABI_CWindows_CUI_CXaml_CIVisualStateManagerFactory* This,
        IInspectable* baseInterface,
        IInspectable** innerInterface,
        __x_ABI_CWindows_CUI_CXaml_CIVisualStateManager** value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CIVisualStateManagerFactoryVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CIVisualStateManagerFactory
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CIVisualStateManagerFactoryVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CIVisualStateManagerFactory;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CIVisualStateManagerFactory_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CIVisualStateManagerOverrides_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CIVisualStateManagerOverrides_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CIVisualStateManagerOverridesVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CIVisualStateManagerOverrides* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CIVisualStateManagerOverrides* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CIVisualStateManagerOverrides* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CIVisualStateManagerOverrides* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CIVisualStateManagerOverrides* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CIVisualStateManagerOverrides* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GoToStateCore)(__x_ABI_CWindows_CUI_CXaml_CIVisualStateManagerOverrides* This,
        __x_ABI_CWindows_CUI_CXaml_CControls_CIControl* control,
        __x_ABI_CWindows_CUI_CXaml_CIFrameworkElement* templateRoot,
        HSTRING stateName,
        __x_ABI_CWindows_CUI_CXaml_CIVisualStateGroup* group,
        __x_ABI_CWindows_CUI_CXaml_CIVisualState* state,
        boolean useTransitions,
        boolean* result);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CIVisualStateManagerOverridesVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CIVisualStateManagerOverrides
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CIVisualStateManagerOverridesVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CIVisualStateManagerOverrides;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CIVisualStateManagerOverrides_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CIVisualStateManagerProtected_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CIVisualStateManagerProtected_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CIVisualStateManagerProtectedVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CIVisualStateManagerProtected* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CIVisualStateManagerProtected* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CIVisualStateManagerProtected* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CIVisualStateManagerProtected* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CIVisualStateManagerProtected* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CIVisualStateManagerProtected* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* RaiseCurrentStateChanging)(__x_ABI_CWindows_CUI_CXaml_CIVisualStateManagerProtected* This,
        __x_ABI_CWindows_CUI_CXaml_CIVisualStateGroup* stateGroup,
        __x_ABI_CWindows_CUI_CXaml_CIVisualState* oldState,
        __x_ABI_CWindows_CUI_CXaml_CIVisualState* newState,
        __x_ABI_CWindows_CUI_CXaml_CControls_CIControl* control);
    HRESULT (STDMETHODCALLTYPE* RaiseCurrentStateChanged)(__x_ABI_CWindows_CUI_CXaml_CIVisualStateManagerProtected* This,
        __x_ABI_CWindows_CUI_CXaml_CIVisualStateGroup* stateGroup,
        __x_ABI_CWindows_CUI_CXaml_CIVisualState* oldState,
        __x_ABI_CWindows_CUI_CXaml_CIVisualState* newState,
        __x_ABI_CWindows_CUI_CXaml_CControls_CIControl* control);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CIVisualStateManagerProtectedVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CIVisualStateManagerProtected
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CIVisualStateManagerProtectedVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CIVisualStateManagerProtected;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CIVisualStateManagerProtected_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CIVisualStateManagerStatics_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CIVisualStateManagerStatics_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CIVisualStateManagerStaticsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CIVisualStateManagerStatics* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CIVisualStateManagerStatics* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CIVisualStateManagerStatics* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CIVisualStateManagerStatics* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CIVisualStateManagerStatics* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CIVisualStateManagerStatics* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetVisualStateGroups)(__x_ABI_CWindows_CUI_CXaml_CIVisualStateManagerStatics* This,
        __x_ABI_CWindows_CUI_CXaml_CIFrameworkElement* obj,
        __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CVisualStateGroup** result);
    HRESULT (STDMETHODCALLTYPE* get_CustomVisualStateManagerProperty)(__x_ABI_CWindows_CUI_CXaml_CIVisualStateManagerStatics* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** value);
    HRESULT (STDMETHODCALLTYPE* GetCustomVisualStateManager)(__x_ABI_CWindows_CUI_CXaml_CIVisualStateManagerStatics* This,
        __x_ABI_CWindows_CUI_CXaml_CIFrameworkElement* obj,
        __x_ABI_CWindows_CUI_CXaml_CIVisualStateManager** result);
    HRESULT (STDMETHODCALLTYPE* SetCustomVisualStateManager)(__x_ABI_CWindows_CUI_CXaml_CIVisualStateManagerStatics* This,
        __x_ABI_CWindows_CUI_CXaml_CIFrameworkElement* obj,
        __x_ABI_CWindows_CUI_CXaml_CIVisualStateManager* value);
    HRESULT (STDMETHODCALLTYPE* GoToState)(__x_ABI_CWindows_CUI_CXaml_CIVisualStateManagerStatics* This,
        __x_ABI_CWindows_CUI_CXaml_CControls_CIControl* control,
        HSTRING stateName,
        boolean useTransitions,
        boolean* result);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CIVisualStateManagerStaticsVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CIVisualStateManagerStatics
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CIVisualStateManagerStaticsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CIVisualStateManagerStatics;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CIVisualStateManagerStatics_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CIVisualTransition_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CIVisualTransition_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CIVisualTransitionVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CIVisualTransition* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CIVisualTransition* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CIVisualTransition* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CIVisualTransition* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CIVisualTransition* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CIVisualTransition* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_GeneratedDuration)(__x_ABI_CWindows_CUI_CXaml_CIVisualTransition* This,
        struct __x_ABI_CWindows_CUI_CXaml_CDuration* value);
    HRESULT (STDMETHODCALLTYPE* put_GeneratedDuration)(__x_ABI_CWindows_CUI_CXaml_CIVisualTransition* This,
        struct __x_ABI_CWindows_CUI_CXaml_CDuration value);
    HRESULT (STDMETHODCALLTYPE* get_GeneratedEasingFunction)(__x_ABI_CWindows_CUI_CXaml_CIVisualTransition* This,
        __x_ABI_CWindows_CUI_CXaml_CMedia_CAnimation_CIEasingFunctionBase** value);
    HRESULT (STDMETHODCALLTYPE* put_GeneratedEasingFunction)(__x_ABI_CWindows_CUI_CXaml_CIVisualTransition* This,
        __x_ABI_CWindows_CUI_CXaml_CMedia_CAnimation_CIEasingFunctionBase* value);
    HRESULT (STDMETHODCALLTYPE* get_To)(__x_ABI_CWindows_CUI_CXaml_CIVisualTransition* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* put_To)(__x_ABI_CWindows_CUI_CXaml_CIVisualTransition* This,
        HSTRING value);
    HRESULT (STDMETHODCALLTYPE* get_From)(__x_ABI_CWindows_CUI_CXaml_CIVisualTransition* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* put_From)(__x_ABI_CWindows_CUI_CXaml_CIVisualTransition* This,
        HSTRING value);
    HRESULT (STDMETHODCALLTYPE* get_Storyboard)(__x_ABI_CWindows_CUI_CXaml_CIVisualTransition* This,
        __x_ABI_CWindows_CUI_CXaml_CMedia_CAnimation_CIStoryboard** value);
    HRESULT (STDMETHODCALLTYPE* put_Storyboard)(__x_ABI_CWindows_CUI_CXaml_CIVisualTransition* This,
        __x_ABI_CWindows_CUI_CXaml_CMedia_CAnimation_CIStoryboard* value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CIVisualTransitionVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CIVisualTransition
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CIVisualTransitionVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CIVisualTransition;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CIVisualTransition_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CIVisualTransitionFactory_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CIVisualTransitionFactory_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CIVisualTransitionFactoryVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CIVisualTransitionFactory* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CIVisualTransitionFactory* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CIVisualTransitionFactory* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CIVisualTransitionFactory* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CIVisualTransitionFactory* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CIVisualTransitionFactory* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* CreateInstance)(__x_ABI_CWindows_CUI_CXaml_CIVisualTransitionFactory* This,
        IInspectable* baseInterface,
        IInspectable** innerInterface,
        __x_ABI_CWindows_CUI_CXaml_CIVisualTransition** value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CIVisualTransitionFactoryVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CIVisualTransitionFactory
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CIVisualTransitionFactoryVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CIVisualTransitionFactory;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CIVisualTransitionFactory_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CIWindow_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CIWindow_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CIWindowVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CIWindow* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CIWindow* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CIWindow* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CIWindow* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CIWindow* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CIWindow* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Bounds)(__x_ABI_CWindows_CUI_CXaml_CIWindow* This,
        struct __x_ABI_CWindows_CFoundation_CRect* value);
    HRESULT (STDMETHODCALLTYPE* get_Visible)(__x_ABI_CWindows_CUI_CXaml_CIWindow* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* get_Content)(__x_ABI_CWindows_CUI_CXaml_CIWindow* This,
        __x_ABI_CWindows_CUI_CXaml_CIUIElement** value);
    HRESULT (STDMETHODCALLTYPE* put_Content)(__x_ABI_CWindows_CUI_CXaml_CIWindow* This,
        __x_ABI_CWindows_CUI_CXaml_CIUIElement* value);
    HRESULT (STDMETHODCALLTYPE* get_CoreWindow)(__x_ABI_CWindows_CUI_CXaml_CIWindow* This,
        __x_ABI_CWindows_CUI_CCore_CICoreWindow** value);
    HRESULT (STDMETHODCALLTYPE* get_Dispatcher)(__x_ABI_CWindows_CUI_CXaml_CIWindow* This,
        __x_ABI_CWindows_CUI_CCore_CICoreDispatcher** value);
    HRESULT (STDMETHODCALLTYPE* add_Activated)(__x_ABI_CWindows_CUI_CXaml_CIWindow* This,
        __x_ABI_CWindows_CUI_CXaml_CIWindowActivatedEventHandler* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_Activated)(__x_ABI_CWindows_CUI_CXaml_CIWindow* This,
        EventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* add_Closed)(__x_ABI_CWindows_CUI_CXaml_CIWindow* This,
        __x_ABI_CWindows_CUI_CXaml_CIWindowClosedEventHandler* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_Closed)(__x_ABI_CWindows_CUI_CXaml_CIWindow* This,
        EventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* add_SizeChanged)(__x_ABI_CWindows_CUI_CXaml_CIWindow* This,
        __x_ABI_CWindows_CUI_CXaml_CIWindowSizeChangedEventHandler* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_SizeChanged)(__x_ABI_CWindows_CUI_CXaml_CIWindow* This,
        EventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* add_VisibilityChanged)(__x_ABI_CWindows_CUI_CXaml_CIWindow* This,
        __x_ABI_CWindows_CUI_CXaml_CIWindowVisibilityChangedEventHandler* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_VisibilityChanged)(__x_ABI_CWindows_CUI_CXaml_CIWindow* This,
        EventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* Activate)(__x_ABI_CWindows_CUI_CXaml_CIWindow* This);
    HRESULT (STDMETHODCALLTYPE* Close)(__x_ABI_CWindows_CUI_CXaml_CIWindow* This);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CIWindowVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CIWindow
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CIWindowVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CIWindow;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CIWindow_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CIWindow2_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CIWindow2_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CIWindow2Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CIWindow2* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CIWindow2* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CIWindow2* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CIWindow2* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CIWindow2* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CIWindow2* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* SetTitleBar)(__x_ABI_CWindows_CUI_CXaml_CIWindow2* This,
        __x_ABI_CWindows_CUI_CXaml_CIUIElement* value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CIWindow2Vtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CIWindow2
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CIWindow2Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CIWindow2;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CIWindow2_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CIWindow3_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CIWindow3_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CIWindow3Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CIWindow3* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CIWindow3* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CIWindow3* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CIWindow3* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CIWindow3* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CIWindow3* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Compositor)(__x_ABI_CWindows_CUI_CXaml_CIWindow3* This,
        __x_ABI_CWindows_CUI_CComposition_CICompositor** value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CIWindow3Vtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CIWindow3
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CIWindow3Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CIWindow3;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CIWindow3_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CIWindow4_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CIWindow4_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CIWindow4Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CIWindow4* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CIWindow4* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CIWindow4* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CIWindow4* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CIWindow4* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CIWindow4* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_UIContext)(__x_ABI_CWindows_CUI_CXaml_CIWindow4* This,
        __x_ABI_CWindows_CUI_CIUIContext** value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CIWindow4Vtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CIWindow4
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CIWindow4Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CIWindow4;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CIWindow4_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CIWindowCreatedEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CIWindowCreatedEventArgs_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CIWindowCreatedEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CIWindowCreatedEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CIWindowCreatedEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CIWindowCreatedEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CIWindowCreatedEventArgs* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CIWindowCreatedEventArgs* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CIWindowCreatedEventArgs* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Window)(__x_ABI_CWindows_CUI_CXaml_CIWindowCreatedEventArgs* This,
        __x_ABI_CWindows_CUI_CXaml_CIWindow** value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CIWindowCreatedEventArgsVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CIWindowCreatedEventArgs
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CIWindowCreatedEventArgsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CIWindowCreatedEventArgs;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CIWindowCreatedEventArgs_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CIWindowStatics_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CIWindowStatics_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CIWindowStaticsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CIWindowStatics* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CIWindowStatics* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CIWindowStatics* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CIWindowStatics* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CIWindowStatics* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CIWindowStatics* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Current)(__x_ABI_CWindows_CUI_CXaml_CIWindowStatics* This,
        __x_ABI_CWindows_CUI_CXaml_CIWindow** value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CIWindowStaticsVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CIWindowStatics
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CIWindowStaticsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CIWindowStatics;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CIWindowStatics_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CIXamlRoot_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CIXamlRoot_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CIXamlRootVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CIXamlRoot* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CIXamlRoot* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CIXamlRoot* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CIXamlRoot* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CIXamlRoot* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CIXamlRoot* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Content)(__x_ABI_CWindows_CUI_CXaml_CIXamlRoot* This,
        __x_ABI_CWindows_CUI_CXaml_CIUIElement** value);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_CWindows_CUI_CXaml_CIXamlRoot* This,
        struct __x_ABI_CWindows_CFoundation_CSize* value);
    HRESULT (STDMETHODCALLTYPE* get_RasterizationScale)(__x_ABI_CWindows_CUI_CXaml_CIXamlRoot* This,
        DOUBLE* value);
    HRESULT (STDMETHODCALLTYPE* get_IsHostVisible)(__x_ABI_CWindows_CUI_CXaml_CIXamlRoot* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* get_UIContext)(__x_ABI_CWindows_CUI_CXaml_CIXamlRoot* This,
        __x_ABI_CWindows_CUI_CIUIContext** value);
    HRESULT (STDMETHODCALLTYPE* add_Changed)(__x_ABI_CWindows_CUI_CXaml_CIXamlRoot* This,
        __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CXamlRoot___x_ABI_CWindows__CUI__CXaml__CXamlRootChangedEventArgs* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_Changed)(__x_ABI_CWindows_CUI_CXaml_CIXamlRoot* This,
        EventRegistrationToken token);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CIXamlRootVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CIXamlRoot
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CIXamlRootVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CIXamlRoot;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CIXamlRoot_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CIXamlRootChangedEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CIXamlRootChangedEventArgs_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CIXamlRootChangedEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CIXamlRootChangedEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CIXamlRootChangedEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CIXamlRootChangedEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CIXamlRootChangedEventArgs* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CIXamlRootChangedEventArgs* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CIXamlRootChangedEventArgs* This,
            TrustLevel* trustLevel);
    
        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CIXamlRootChangedEventArgsVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CIXamlRootChangedEventArgs
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CIXamlRootChangedEventArgsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CIXamlRootChangedEventArgs;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CIXamlRootChangedEventArgs_INTERFACE_DEFINED__) */
    

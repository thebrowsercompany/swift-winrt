// WARNING: Please don't edit this file. It was generated by Swift/WinRT v0.0.1

#pragma once
// Header files for imported files
#include <inspectable.h>
#include <EventToken.h>
#include <windowscontracts.h>
#include "Windows.Foundation.h"
#include "Windows.Devices.Haptics.h"
#include "Windows.Devices.Input.h"
#include "Windows.Storage.Streams.h"
#include "Windows.UI.Core.h"
// Importing Collections header
#include "Windows.Foundation.Collections.h"

/* Forward Declarations */
#ifndef ____x_ABI_CWindows_CUI_CInput_CIAttachableInputObject_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CInput_CIAttachableInputObject_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CInput_CIAttachableInputObject __x_ABI_CWindows_CUI_CInput_CIAttachableInputObject;

#endif // ____x_ABI_CWindows_CUI_CInput_CIAttachableInputObject_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CInput_CIAttachableInputObjectFactory_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CInput_CIAttachableInputObjectFactory_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CInput_CIAttachableInputObjectFactory __x_ABI_CWindows_CUI_CInput_CIAttachableInputObjectFactory;

#endif // ____x_ABI_CWindows_CUI_CInput_CIAttachableInputObjectFactory_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CInput_CICrossSlidingEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CInput_CICrossSlidingEventArgs_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CInput_CICrossSlidingEventArgs __x_ABI_CWindows_CUI_CInput_CICrossSlidingEventArgs;

#endif // ____x_ABI_CWindows_CUI_CInput_CICrossSlidingEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CInput_CIDraggingEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CInput_CIDraggingEventArgs_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CInput_CIDraggingEventArgs __x_ABI_CWindows_CUI_CInput_CIDraggingEventArgs;

#endif // ____x_ABI_CWindows_CUI_CInput_CIDraggingEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CInput_CIEdgeGesture_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CInput_CIEdgeGesture_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CInput_CIEdgeGesture __x_ABI_CWindows_CUI_CInput_CIEdgeGesture;

#endif // ____x_ABI_CWindows_CUI_CInput_CIEdgeGesture_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CInput_CIEdgeGestureEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CInput_CIEdgeGestureEventArgs_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CInput_CIEdgeGestureEventArgs __x_ABI_CWindows_CUI_CInput_CIEdgeGestureEventArgs;

#endif // ____x_ABI_CWindows_CUI_CInput_CIEdgeGestureEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CInput_CIEdgeGestureStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CInput_CIEdgeGestureStatics_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CInput_CIEdgeGestureStatics __x_ABI_CWindows_CUI_CInput_CIEdgeGestureStatics;

#endif // ____x_ABI_CWindows_CUI_CInput_CIEdgeGestureStatics_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CInput_CIGestureRecognizer_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CInput_CIGestureRecognizer_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CInput_CIGestureRecognizer __x_ABI_CWindows_CUI_CInput_CIGestureRecognizer;

#endif // ____x_ABI_CWindows_CUI_CInput_CIGestureRecognizer_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CInput_CIHoldingEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CInput_CIHoldingEventArgs_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CInput_CIHoldingEventArgs __x_ABI_CWindows_CUI_CInput_CIHoldingEventArgs;

#endif // ____x_ABI_CWindows_CUI_CInput_CIHoldingEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CInput_CIInputActivationListener_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CInput_CIInputActivationListener_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CInput_CIInputActivationListener __x_ABI_CWindows_CUI_CInput_CIInputActivationListener;

#endif // ____x_ABI_CWindows_CUI_CInput_CIInputActivationListener_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CInput_CIInputActivationListenerActivationChangedEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CInput_CIInputActivationListenerActivationChangedEventArgs_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CInput_CIInputActivationListenerActivationChangedEventArgs __x_ABI_CWindows_CUI_CInput_CIInputActivationListenerActivationChangedEventArgs;

#endif // ____x_ABI_CWindows_CUI_CInput_CIInputActivationListenerActivationChangedEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CInput_CIKeyboardDeliveryInterceptor_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CInput_CIKeyboardDeliveryInterceptor_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CInput_CIKeyboardDeliveryInterceptor __x_ABI_CWindows_CUI_CInput_CIKeyboardDeliveryInterceptor;

#endif // ____x_ABI_CWindows_CUI_CInput_CIKeyboardDeliveryInterceptor_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CInput_CIKeyboardDeliveryInterceptorStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CInput_CIKeyboardDeliveryInterceptorStatics_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CInput_CIKeyboardDeliveryInterceptorStatics __x_ABI_CWindows_CUI_CInput_CIKeyboardDeliveryInterceptorStatics;

#endif // ____x_ABI_CWindows_CUI_CInput_CIKeyboardDeliveryInterceptorStatics_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CInput_CIManipulationCompletedEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CInput_CIManipulationCompletedEventArgs_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CInput_CIManipulationCompletedEventArgs __x_ABI_CWindows_CUI_CInput_CIManipulationCompletedEventArgs;

#endif // ____x_ABI_CWindows_CUI_CInput_CIManipulationCompletedEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CInput_CIManipulationInertiaStartingEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CInput_CIManipulationInertiaStartingEventArgs_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CInput_CIManipulationInertiaStartingEventArgs __x_ABI_CWindows_CUI_CInput_CIManipulationInertiaStartingEventArgs;

#endif // ____x_ABI_CWindows_CUI_CInput_CIManipulationInertiaStartingEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CInput_CIManipulationStartedEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CInput_CIManipulationStartedEventArgs_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CInput_CIManipulationStartedEventArgs __x_ABI_CWindows_CUI_CInput_CIManipulationStartedEventArgs;

#endif // ____x_ABI_CWindows_CUI_CInput_CIManipulationStartedEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CInput_CIManipulationUpdatedEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CInput_CIManipulationUpdatedEventArgs_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CInput_CIManipulationUpdatedEventArgs __x_ABI_CWindows_CUI_CInput_CIManipulationUpdatedEventArgs;

#endif // ____x_ABI_CWindows_CUI_CInput_CIManipulationUpdatedEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CInput_CIMouseWheelParameters_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CInput_CIMouseWheelParameters_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CInput_CIMouseWheelParameters __x_ABI_CWindows_CUI_CInput_CIMouseWheelParameters;

#endif // ____x_ABI_CWindows_CUI_CInput_CIMouseWheelParameters_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CInput_CIPointerPoint_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CInput_CIPointerPoint_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CInput_CIPointerPoint __x_ABI_CWindows_CUI_CInput_CIPointerPoint;

#endif // ____x_ABI_CWindows_CUI_CInput_CIPointerPoint_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CInput_CIPointerPointProperties_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CInput_CIPointerPointProperties_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CInput_CIPointerPointProperties __x_ABI_CWindows_CUI_CInput_CIPointerPointProperties;

#endif // ____x_ABI_CWindows_CUI_CInput_CIPointerPointProperties_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CInput_CIPointerPointProperties2_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CInput_CIPointerPointProperties2_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CInput_CIPointerPointProperties2 __x_ABI_CWindows_CUI_CInput_CIPointerPointProperties2;

#endif // ____x_ABI_CWindows_CUI_CInput_CIPointerPointProperties2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CInput_CIPointerPointStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CInput_CIPointerPointStatics_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CInput_CIPointerPointStatics __x_ABI_CWindows_CUI_CInput_CIPointerPointStatics;

#endif // ____x_ABI_CWindows_CUI_CInput_CIPointerPointStatics_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CInput_CIPointerPointTransform_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CInput_CIPointerPointTransform_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CInput_CIPointerPointTransform __x_ABI_CWindows_CUI_CInput_CIPointerPointTransform;

#endif // ____x_ABI_CWindows_CUI_CInput_CIPointerPointTransform_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CInput_CIPointerVisualizationSettings_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CInput_CIPointerVisualizationSettings_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CInput_CIPointerVisualizationSettings __x_ABI_CWindows_CUI_CInput_CIPointerVisualizationSettings;

#endif // ____x_ABI_CWindows_CUI_CInput_CIPointerVisualizationSettings_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CInput_CIPointerVisualizationSettingsStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CInput_CIPointerVisualizationSettingsStatics_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CInput_CIPointerVisualizationSettingsStatics __x_ABI_CWindows_CUI_CInput_CIPointerVisualizationSettingsStatics;

#endif // ____x_ABI_CWindows_CUI_CInput_CIPointerVisualizationSettingsStatics_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CInput_CIRadialController_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CInput_CIRadialController_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CInput_CIRadialController __x_ABI_CWindows_CUI_CInput_CIRadialController;

#endif // ____x_ABI_CWindows_CUI_CInput_CIRadialController_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CInput_CIRadialController2_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CInput_CIRadialController2_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CInput_CIRadialController2 __x_ABI_CWindows_CUI_CInput_CIRadialController2;

#endif // ____x_ABI_CWindows_CUI_CInput_CIRadialController2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CInput_CIRadialControllerButtonClickedEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CInput_CIRadialControllerButtonClickedEventArgs_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CInput_CIRadialControllerButtonClickedEventArgs __x_ABI_CWindows_CUI_CInput_CIRadialControllerButtonClickedEventArgs;

#endif // ____x_ABI_CWindows_CUI_CInput_CIRadialControllerButtonClickedEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CInput_CIRadialControllerButtonClickedEventArgs2_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CInput_CIRadialControllerButtonClickedEventArgs2_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CInput_CIRadialControllerButtonClickedEventArgs2 __x_ABI_CWindows_CUI_CInput_CIRadialControllerButtonClickedEventArgs2;

#endif // ____x_ABI_CWindows_CUI_CInput_CIRadialControllerButtonClickedEventArgs2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CInput_CIRadialControllerButtonHoldingEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CInput_CIRadialControllerButtonHoldingEventArgs_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CInput_CIRadialControllerButtonHoldingEventArgs __x_ABI_CWindows_CUI_CInput_CIRadialControllerButtonHoldingEventArgs;

#endif // ____x_ABI_CWindows_CUI_CInput_CIRadialControllerButtonHoldingEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CInput_CIRadialControllerButtonPressedEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CInput_CIRadialControllerButtonPressedEventArgs_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CInput_CIRadialControllerButtonPressedEventArgs __x_ABI_CWindows_CUI_CInput_CIRadialControllerButtonPressedEventArgs;

#endif // ____x_ABI_CWindows_CUI_CInput_CIRadialControllerButtonPressedEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CInput_CIRadialControllerButtonReleasedEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CInput_CIRadialControllerButtonReleasedEventArgs_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CInput_CIRadialControllerButtonReleasedEventArgs __x_ABI_CWindows_CUI_CInput_CIRadialControllerButtonReleasedEventArgs;

#endif // ____x_ABI_CWindows_CUI_CInput_CIRadialControllerButtonReleasedEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CInput_CIRadialControllerConfiguration_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CInput_CIRadialControllerConfiguration_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CInput_CIRadialControllerConfiguration __x_ABI_CWindows_CUI_CInput_CIRadialControllerConfiguration;

#endif // ____x_ABI_CWindows_CUI_CInput_CIRadialControllerConfiguration_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CInput_CIRadialControllerConfiguration2_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CInput_CIRadialControllerConfiguration2_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CInput_CIRadialControllerConfiguration2 __x_ABI_CWindows_CUI_CInput_CIRadialControllerConfiguration2;

#endif // ____x_ABI_CWindows_CUI_CInput_CIRadialControllerConfiguration2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CInput_CIRadialControllerConfigurationStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CInput_CIRadialControllerConfigurationStatics_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CInput_CIRadialControllerConfigurationStatics __x_ABI_CWindows_CUI_CInput_CIRadialControllerConfigurationStatics;

#endif // ____x_ABI_CWindows_CUI_CInput_CIRadialControllerConfigurationStatics_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CInput_CIRadialControllerConfigurationStatics2_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CInput_CIRadialControllerConfigurationStatics2_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CInput_CIRadialControllerConfigurationStatics2 __x_ABI_CWindows_CUI_CInput_CIRadialControllerConfigurationStatics2;

#endif // ____x_ABI_CWindows_CUI_CInput_CIRadialControllerConfigurationStatics2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CInput_CIRadialControllerControlAcquiredEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CInput_CIRadialControllerControlAcquiredEventArgs_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CInput_CIRadialControllerControlAcquiredEventArgs __x_ABI_CWindows_CUI_CInput_CIRadialControllerControlAcquiredEventArgs;

#endif // ____x_ABI_CWindows_CUI_CInput_CIRadialControllerControlAcquiredEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CInput_CIRadialControllerControlAcquiredEventArgs2_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CInput_CIRadialControllerControlAcquiredEventArgs2_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CInput_CIRadialControllerControlAcquiredEventArgs2 __x_ABI_CWindows_CUI_CInput_CIRadialControllerControlAcquiredEventArgs2;

#endif // ____x_ABI_CWindows_CUI_CInput_CIRadialControllerControlAcquiredEventArgs2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CInput_CIRadialControllerMenu_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CInput_CIRadialControllerMenu_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CInput_CIRadialControllerMenu __x_ABI_CWindows_CUI_CInput_CIRadialControllerMenu;

#endif // ____x_ABI_CWindows_CUI_CInput_CIRadialControllerMenu_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CInput_CIRadialControllerMenuItem_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CInput_CIRadialControllerMenuItem_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CInput_CIRadialControllerMenuItem __x_ABI_CWindows_CUI_CInput_CIRadialControllerMenuItem;

#endif // ____x_ABI_CWindows_CUI_CInput_CIRadialControllerMenuItem_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CInput_CIRadialControllerMenuItemStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CInput_CIRadialControllerMenuItemStatics_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CInput_CIRadialControllerMenuItemStatics __x_ABI_CWindows_CUI_CInput_CIRadialControllerMenuItemStatics;

#endif // ____x_ABI_CWindows_CUI_CInput_CIRadialControllerMenuItemStatics_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CInput_CIRadialControllerMenuItemStatics2_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CInput_CIRadialControllerMenuItemStatics2_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CInput_CIRadialControllerMenuItemStatics2 __x_ABI_CWindows_CUI_CInput_CIRadialControllerMenuItemStatics2;

#endif // ____x_ABI_CWindows_CUI_CInput_CIRadialControllerMenuItemStatics2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CInput_CIRadialControllerRotationChangedEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CInput_CIRadialControllerRotationChangedEventArgs_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CInput_CIRadialControllerRotationChangedEventArgs __x_ABI_CWindows_CUI_CInput_CIRadialControllerRotationChangedEventArgs;

#endif // ____x_ABI_CWindows_CUI_CInput_CIRadialControllerRotationChangedEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CInput_CIRadialControllerRotationChangedEventArgs2_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CInput_CIRadialControllerRotationChangedEventArgs2_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CInput_CIRadialControllerRotationChangedEventArgs2 __x_ABI_CWindows_CUI_CInput_CIRadialControllerRotationChangedEventArgs2;

#endif // ____x_ABI_CWindows_CUI_CInput_CIRadialControllerRotationChangedEventArgs2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CInput_CIRadialControllerScreenContact_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CInput_CIRadialControllerScreenContact_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CInput_CIRadialControllerScreenContact __x_ABI_CWindows_CUI_CInput_CIRadialControllerScreenContact;

#endif // ____x_ABI_CWindows_CUI_CInput_CIRadialControllerScreenContact_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CInput_CIRadialControllerScreenContactContinuedEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CInput_CIRadialControllerScreenContactContinuedEventArgs_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CInput_CIRadialControllerScreenContactContinuedEventArgs __x_ABI_CWindows_CUI_CInput_CIRadialControllerScreenContactContinuedEventArgs;

#endif // ____x_ABI_CWindows_CUI_CInput_CIRadialControllerScreenContactContinuedEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CInput_CIRadialControllerScreenContactContinuedEventArgs2_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CInput_CIRadialControllerScreenContactContinuedEventArgs2_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CInput_CIRadialControllerScreenContactContinuedEventArgs2 __x_ABI_CWindows_CUI_CInput_CIRadialControllerScreenContactContinuedEventArgs2;

#endif // ____x_ABI_CWindows_CUI_CInput_CIRadialControllerScreenContactContinuedEventArgs2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CInput_CIRadialControllerScreenContactEndedEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CInput_CIRadialControllerScreenContactEndedEventArgs_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CInput_CIRadialControllerScreenContactEndedEventArgs __x_ABI_CWindows_CUI_CInput_CIRadialControllerScreenContactEndedEventArgs;

#endif // ____x_ABI_CWindows_CUI_CInput_CIRadialControllerScreenContactEndedEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CInput_CIRadialControllerScreenContactStartedEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CInput_CIRadialControllerScreenContactStartedEventArgs_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CInput_CIRadialControllerScreenContactStartedEventArgs __x_ABI_CWindows_CUI_CInput_CIRadialControllerScreenContactStartedEventArgs;

#endif // ____x_ABI_CWindows_CUI_CInput_CIRadialControllerScreenContactStartedEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CInput_CIRadialControllerScreenContactStartedEventArgs2_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CInput_CIRadialControllerScreenContactStartedEventArgs2_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CInput_CIRadialControllerScreenContactStartedEventArgs2 __x_ABI_CWindows_CUI_CInput_CIRadialControllerScreenContactStartedEventArgs2;

#endif // ____x_ABI_CWindows_CUI_CInput_CIRadialControllerScreenContactStartedEventArgs2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CInput_CIRadialControllerStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CInput_CIRadialControllerStatics_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CInput_CIRadialControllerStatics __x_ABI_CWindows_CUI_CInput_CIRadialControllerStatics;

#endif // ____x_ABI_CWindows_CUI_CInput_CIRadialControllerStatics_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CInput_CIRightTappedEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CInput_CIRightTappedEventArgs_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CInput_CIRightTappedEventArgs __x_ABI_CWindows_CUI_CInput_CIRightTappedEventArgs;

#endif // ____x_ABI_CWindows_CUI_CInput_CIRightTappedEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CInput_CITappedEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CInput_CITappedEventArgs_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CInput_CITappedEventArgs __x_ABI_CWindows_CUI_CInput_CITappedEventArgs;

#endif // ____x_ABI_CWindows_CUI_CInput_CITappedEventArgs_FWD_DEFINED__

// Parameterized interface forward declarations (C)

// Collection interface definitions

#if !defined(____x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CInput__CPointerPoint_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CInput__CPointerPoint_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CInput__CPointerPoint __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CInput__CPointerPoint;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CInput__CPointerPoint;

    typedef struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CInput__CPointerPointVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CInput__CPointerPoint* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CInput__CPointerPoint* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CInput__CPointerPoint* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CInput__CPointerPoint* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CInput__CPointerPoint* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CInput__CPointerPoint* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Current)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CInput__CPointerPoint* This,
        __x_ABI_CWindows_CUI_CInput_CIPointerPoint** result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CInput__CPointerPoint* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CInput__CPointerPoint* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CInput__CPointerPoint* This,
        UINT32 itemsLength,
        __x_ABI_CWindows_CUI_CInput_CIPointerPoint** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CInput__CPointerPointVtbl;

    interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CInput__CPointerPoint
    {
        CONST_VTBL struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CInput__CPointerPointVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CInput__CPointerPoint_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CInput__CPointerPoint_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CInput__CPointerPoint_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CInput__CPointerPoint __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CInput__CPointerPoint;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CInput__CPointerPoint;

    typedef struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CInput__CPointerPointVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CInput__CPointerPoint* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CInput__CPointerPoint* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CInput__CPointerPoint* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CInput__CPointerPoint* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CInput__CPointerPoint* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CInput__CPointerPoint* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* First)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CInput__CPointerPoint* This,
        __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CInput__CPointerPoint** result);

        END_INTERFACE
    } __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CInput__CPointerPointVtbl;

    interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CInput__CPointerPoint
    {
        CONST_VTBL struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CInput__CPointerPointVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CInput__CPointerPoint_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CInput__CRadialControllerMenuItem_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CInput__CRadialControllerMenuItem_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CInput__CRadialControllerMenuItem __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CInput__CRadialControllerMenuItem;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CInput__CRadialControllerMenuItem;

    typedef struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CInput__CRadialControllerMenuItemVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CInput__CRadialControllerMenuItem* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CInput__CRadialControllerMenuItem* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CInput__CRadialControllerMenuItem* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CInput__CRadialControllerMenuItem* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CInput__CRadialControllerMenuItem* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CInput__CRadialControllerMenuItem* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Current)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CInput__CRadialControllerMenuItem* This,
        __x_ABI_CWindows_CUI_CInput_CIRadialControllerMenuItem** result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CInput__CRadialControllerMenuItem* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CInput__CRadialControllerMenuItem* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CInput__CRadialControllerMenuItem* This,
        UINT32 itemsLength,
        __x_ABI_CWindows_CUI_CInput_CIRadialControllerMenuItem** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CInput__CRadialControllerMenuItemVtbl;

    interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CInput__CRadialControllerMenuItem
    {
        CONST_VTBL struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CInput__CRadialControllerMenuItemVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CInput__CRadialControllerMenuItem_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CInput__CRadialControllerMenuItem_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CInput__CRadialControllerMenuItem_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CInput__CRadialControllerMenuItem __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CInput__CRadialControllerMenuItem;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CInput__CRadialControllerMenuItem;

    typedef struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CInput__CRadialControllerMenuItemVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CInput__CRadialControllerMenuItem* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CInput__CRadialControllerMenuItem* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CInput__CRadialControllerMenuItem* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CInput__CRadialControllerMenuItem* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CInput__CRadialControllerMenuItem* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CInput__CRadialControllerMenuItem* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* First)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CInput__CRadialControllerMenuItem* This,
        __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CInput__CRadialControllerMenuItem** result);

        END_INTERFACE
    } __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CInput__CRadialControllerMenuItemVtbl;

    interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CInput__CRadialControllerMenuItem
    {
        CONST_VTBL struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CInput__CRadialControllerMenuItemVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CInput__CRadialControllerMenuItem_INTERFACE_DEFINED__
    
typedef enum __x_ABI_CWindows_CUI_CInput_CRadialControllerSystemMenuItemKind __x_ABI_CWindows_CUI_CInput_CRadialControllerSystemMenuItemKind;

#if !defined(____x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CInput__CRadialControllerSystemMenuItemKind_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CInput__CRadialControllerSystemMenuItemKind_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CInput__CRadialControllerSystemMenuItemKind __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CInput__CRadialControllerSystemMenuItemKind;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CInput__CRadialControllerSystemMenuItemKind;

    typedef struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CInput__CRadialControllerSystemMenuItemKindVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CInput__CRadialControllerSystemMenuItemKind* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CInput__CRadialControllerSystemMenuItemKind* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CInput__CRadialControllerSystemMenuItemKind* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CInput__CRadialControllerSystemMenuItemKind* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CInput__CRadialControllerSystemMenuItemKind* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CInput__CRadialControllerSystemMenuItemKind* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Current)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CInput__CRadialControllerSystemMenuItemKind* This,
        enum __x_ABI_CWindows_CUI_CInput_CRadialControllerSystemMenuItemKind* result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CInput__CRadialControllerSystemMenuItemKind* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CInput__CRadialControllerSystemMenuItemKind* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CInput__CRadialControllerSystemMenuItemKind* This,
        UINT32 itemsLength,
        enum __x_ABI_CWindows_CUI_CInput_CRadialControllerSystemMenuItemKind* items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CInput__CRadialControllerSystemMenuItemKindVtbl;

    interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CInput__CRadialControllerSystemMenuItemKind
    {
        CONST_VTBL struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CInput__CRadialControllerSystemMenuItemKindVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CInput__CRadialControllerSystemMenuItemKind_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CInput__CRadialControllerSystemMenuItemKind_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CInput__CRadialControllerSystemMenuItemKind_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CInput__CRadialControllerSystemMenuItemKind __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CInput__CRadialControllerSystemMenuItemKind;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CInput__CRadialControllerSystemMenuItemKind;

    typedef struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CInput__CRadialControllerSystemMenuItemKindVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CInput__CRadialControllerSystemMenuItemKind* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CInput__CRadialControllerSystemMenuItemKind* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CInput__CRadialControllerSystemMenuItemKind* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CInput__CRadialControllerSystemMenuItemKind* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CInput__CRadialControllerSystemMenuItemKind* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CInput__CRadialControllerSystemMenuItemKind* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* First)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CInput__CRadialControllerSystemMenuItemKind* This,
        __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CInput__CRadialControllerSystemMenuItemKind** result);

        END_INTERFACE
    } __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CInput__CRadialControllerSystemMenuItemKindVtbl;

    interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CInput__CRadialControllerSystemMenuItemKind
    {
        CONST_VTBL struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CInput__CRadialControllerSystemMenuItemKindVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CInput__CRadialControllerSystemMenuItemKind_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CPointerPoint_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CPointerPoint_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CPointerPoint __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CPointerPoint;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CPointerPoint;

    typedef struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CPointerPointVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CPointerPoint* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CPointerPoint* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CPointerPoint* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CPointerPoint* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CPointerPoint* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CPointerPoint* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CPointerPoint* This,
        UINT32 index,
        __x_ABI_CWindows_CUI_CInput_CIPointerPoint** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CPointerPoint* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CPointerPoint* This,
        __x_ABI_CWindows_CUI_CInput_CIPointerPoint* value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CPointerPoint* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        __x_ABI_CWindows_CUI_CInput_CIPointerPoint** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CPointerPointVtbl;

    interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CPointerPoint
    {
        CONST_VTBL struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CPointerPointVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CPointerPoint_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CRadialControllerMenuItem_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CRadialControllerMenuItem_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CRadialControllerMenuItem __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CRadialControllerMenuItem;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CRadialControllerMenuItem;

    typedef struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CRadialControllerMenuItemVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CRadialControllerMenuItem* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CRadialControllerMenuItem* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CRadialControllerMenuItem* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CRadialControllerMenuItem* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CRadialControllerMenuItem* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CRadialControllerMenuItem* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CRadialControllerMenuItem* This,
        UINT32 index,
        __x_ABI_CWindows_CUI_CInput_CIRadialControllerMenuItem** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CRadialControllerMenuItem* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CRadialControllerMenuItem* This,
        __x_ABI_CWindows_CUI_CInput_CIRadialControllerMenuItem* value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CRadialControllerMenuItem* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        __x_ABI_CWindows_CUI_CInput_CIRadialControllerMenuItem** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CRadialControllerMenuItemVtbl;

    interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CRadialControllerMenuItem
    {
        CONST_VTBL struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CRadialControllerMenuItemVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CRadialControllerMenuItem_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CInput__CPointerPoint_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CInput__CPointerPoint_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CInput__CPointerPoint __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CInput__CPointerPoint;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CInput__CPointerPoint;

    typedef struct __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CInput__CPointerPointVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CInput__CPointerPoint* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CInput__CPointerPoint* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CInput__CPointerPoint* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CInput__CPointerPoint* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CInput__CPointerPoint* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CInput__CPointerPoint* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CInput__CPointerPoint* This,
        UINT32 index,
        __x_ABI_CWindows_CUI_CInput_CIPointerPoint** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CInput__CPointerPoint* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* GetView)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CInput__CPointerPoint* This,
        __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CPointerPoint** result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CInput__CPointerPoint* This,
        __x_ABI_CWindows_CUI_CInput_CIPointerPoint* value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* SetAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CInput__CPointerPoint* This,
        UINT32 index,
        __x_ABI_CWindows_CUI_CInput_CIPointerPoint* value);
    HRESULT (STDMETHODCALLTYPE* InsertAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CInput__CPointerPoint* This,
        UINT32 index,
        __x_ABI_CWindows_CUI_CInput_CIPointerPoint* value);
    HRESULT (STDMETHODCALLTYPE* RemoveAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CInput__CPointerPoint* This,
        UINT32 index);
    HRESULT (STDMETHODCALLTYPE* Append)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CInput__CPointerPoint* This,
        __x_ABI_CWindows_CUI_CInput_CIPointerPoint* value);
    HRESULT (STDMETHODCALLTYPE* RemoveAtEnd)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CInput__CPointerPoint* This);
    HRESULT (STDMETHODCALLTYPE* Clear)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CInput__CPointerPoint* This);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CInput__CPointerPoint* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        __x_ABI_CWindows_CUI_CInput_CIPointerPoint** items,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* ReplaceAll)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CInput__CPointerPoint* This,
        UINT32 itemsLength,
        __x_ABI_CWindows_CUI_CInput_CIPointerPoint** items);

        END_INTERFACE
    } __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CInput__CPointerPointVtbl;

    interface __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CInput__CPointerPoint
    {
        CONST_VTBL struct __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CInput__CPointerPointVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CInput__CPointerPoint_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CInput__CRadialControllerMenuItem_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CInput__CRadialControllerMenuItem_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CInput__CRadialControllerMenuItem __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CInput__CRadialControllerMenuItem;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CInput__CRadialControllerMenuItem;

    typedef struct __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CInput__CRadialControllerMenuItemVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CInput__CRadialControllerMenuItem* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CInput__CRadialControllerMenuItem* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CInput__CRadialControllerMenuItem* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CInput__CRadialControllerMenuItem* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CInput__CRadialControllerMenuItem* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CInput__CRadialControllerMenuItem* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CInput__CRadialControllerMenuItem* This,
        UINT32 index,
        __x_ABI_CWindows_CUI_CInput_CIRadialControllerMenuItem** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CInput__CRadialControllerMenuItem* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* GetView)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CInput__CRadialControllerMenuItem* This,
        __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CRadialControllerMenuItem** result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CInput__CRadialControllerMenuItem* This,
        __x_ABI_CWindows_CUI_CInput_CIRadialControllerMenuItem* value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* SetAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CInput__CRadialControllerMenuItem* This,
        UINT32 index,
        __x_ABI_CWindows_CUI_CInput_CIRadialControllerMenuItem* value);
    HRESULT (STDMETHODCALLTYPE* InsertAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CInput__CRadialControllerMenuItem* This,
        UINT32 index,
        __x_ABI_CWindows_CUI_CInput_CIRadialControllerMenuItem* value);
    HRESULT (STDMETHODCALLTYPE* RemoveAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CInput__CRadialControllerMenuItem* This,
        UINT32 index);
    HRESULT (STDMETHODCALLTYPE* Append)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CInput__CRadialControllerMenuItem* This,
        __x_ABI_CWindows_CUI_CInput_CIRadialControllerMenuItem* value);
    HRESULT (STDMETHODCALLTYPE* RemoveAtEnd)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CInput__CRadialControllerMenuItem* This);
    HRESULT (STDMETHODCALLTYPE* Clear)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CInput__CRadialControllerMenuItem* This);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CInput__CRadialControllerMenuItem* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        __x_ABI_CWindows_CUI_CInput_CIRadialControllerMenuItem** items,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* ReplaceAll)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CInput__CRadialControllerMenuItem* This,
        UINT32 itemsLength,
        __x_ABI_CWindows_CUI_CInput_CIRadialControllerMenuItem** items);

        END_INTERFACE
    } __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CInput__CRadialControllerMenuItemVtbl;

    interface __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CInput__CRadialControllerMenuItem
    {
        CONST_VTBL struct __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CInput__CRadialControllerMenuItemVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CInput__CRadialControllerMenuItem_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIReference_1_float_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIReference_1_float_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIReference_1_float __x_ABI_C__FIReference_1_float;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIReference_1_float;

    typedef struct __x_ABI_C__FIReference_1_floatVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIReference_1_float* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIReference_1_float* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIReference_1_float* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIReference_1_float* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIReference_1_float* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIReference_1_float* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Value)(__x_ABI_C__FIReference_1_float* This,
        FLOAT* result);

        END_INTERFACE
    } __x_ABI_C__FIReference_1_floatVtbl;

    interface __x_ABI_C__FIReference_1_float
    {
        CONST_VTBL struct __x_ABI_C__FIReference_1_floatVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIReference_1_float_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CEdgeGesture___x_ABI_CWindows__CUI__CInput__CEdgeGestureEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CEdgeGesture___x_ABI_CWindows__CUI__CInput__CEdgeGestureEventArgs_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CEdgeGesture___x_ABI_CWindows__CUI__CInput__CEdgeGestureEventArgs __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CEdgeGesture___x_ABI_CWindows__CUI__CInput__CEdgeGestureEventArgs;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CEdgeGesture___x_ABI_CWindows__CUI__CInput__CEdgeGestureEventArgs;

    typedef struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CEdgeGesture___x_ABI_CWindows__CUI__CInput__CEdgeGestureEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CEdgeGesture___x_ABI_CWindows__CUI__CInput__CEdgeGestureEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CEdgeGesture___x_ABI_CWindows__CUI__CInput__CEdgeGestureEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CEdgeGesture___x_ABI_CWindows__CUI__CInput__CEdgeGestureEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CEdgeGesture___x_ABI_CWindows__CUI__CInput__CEdgeGestureEventArgs* This,
        __x_ABI_CWindows_CUI_CInput_CIEdgeGesture* sender,
        __x_ABI_CWindows_CUI_CInput_CIEdgeGestureEventArgs* args);

        END_INTERFACE
    } __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CEdgeGesture___x_ABI_CWindows__CUI__CInput__CEdgeGestureEventArgsVtbl;

    interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CEdgeGesture___x_ABI_CWindows__CUI__CInput__CEdgeGestureEventArgs
    {
        CONST_VTBL struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CEdgeGesture___x_ABI_CWindows__CUI__CInput__CEdgeGestureEventArgsVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CEdgeGesture___x_ABI_CWindows__CUI__CInput__CEdgeGestureEventArgs_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CGestureRecognizer___x_ABI_CWindows__CUI__CInput__CCrossSlidingEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CGestureRecognizer___x_ABI_CWindows__CUI__CInput__CCrossSlidingEventArgs_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CGestureRecognizer___x_ABI_CWindows__CUI__CInput__CCrossSlidingEventArgs __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CGestureRecognizer___x_ABI_CWindows__CUI__CInput__CCrossSlidingEventArgs;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CGestureRecognizer___x_ABI_CWindows__CUI__CInput__CCrossSlidingEventArgs;

    typedef struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CGestureRecognizer___x_ABI_CWindows__CUI__CInput__CCrossSlidingEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CGestureRecognizer___x_ABI_CWindows__CUI__CInput__CCrossSlidingEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CGestureRecognizer___x_ABI_CWindows__CUI__CInput__CCrossSlidingEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CGestureRecognizer___x_ABI_CWindows__CUI__CInput__CCrossSlidingEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CGestureRecognizer___x_ABI_CWindows__CUI__CInput__CCrossSlidingEventArgs* This,
        __x_ABI_CWindows_CUI_CInput_CIGestureRecognizer* sender,
        __x_ABI_CWindows_CUI_CInput_CICrossSlidingEventArgs* args);

        END_INTERFACE
    } __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CGestureRecognizer___x_ABI_CWindows__CUI__CInput__CCrossSlidingEventArgsVtbl;

    interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CGestureRecognizer___x_ABI_CWindows__CUI__CInput__CCrossSlidingEventArgs
    {
        CONST_VTBL struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CGestureRecognizer___x_ABI_CWindows__CUI__CInput__CCrossSlidingEventArgsVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CGestureRecognizer___x_ABI_CWindows__CUI__CInput__CCrossSlidingEventArgs_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CGestureRecognizer___x_ABI_CWindows__CUI__CInput__CDraggingEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CGestureRecognizer___x_ABI_CWindows__CUI__CInput__CDraggingEventArgs_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CGestureRecognizer___x_ABI_CWindows__CUI__CInput__CDraggingEventArgs __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CGestureRecognizer___x_ABI_CWindows__CUI__CInput__CDraggingEventArgs;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CGestureRecognizer___x_ABI_CWindows__CUI__CInput__CDraggingEventArgs;

    typedef struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CGestureRecognizer___x_ABI_CWindows__CUI__CInput__CDraggingEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CGestureRecognizer___x_ABI_CWindows__CUI__CInput__CDraggingEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CGestureRecognizer___x_ABI_CWindows__CUI__CInput__CDraggingEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CGestureRecognizer___x_ABI_CWindows__CUI__CInput__CDraggingEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CGestureRecognizer___x_ABI_CWindows__CUI__CInput__CDraggingEventArgs* This,
        __x_ABI_CWindows_CUI_CInput_CIGestureRecognizer* sender,
        __x_ABI_CWindows_CUI_CInput_CIDraggingEventArgs* args);

        END_INTERFACE
    } __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CGestureRecognizer___x_ABI_CWindows__CUI__CInput__CDraggingEventArgsVtbl;

    interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CGestureRecognizer___x_ABI_CWindows__CUI__CInput__CDraggingEventArgs
    {
        CONST_VTBL struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CGestureRecognizer___x_ABI_CWindows__CUI__CInput__CDraggingEventArgsVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CGestureRecognizer___x_ABI_CWindows__CUI__CInput__CDraggingEventArgs_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CGestureRecognizer___x_ABI_CWindows__CUI__CInput__CHoldingEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CGestureRecognizer___x_ABI_CWindows__CUI__CInput__CHoldingEventArgs_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CGestureRecognizer___x_ABI_CWindows__CUI__CInput__CHoldingEventArgs __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CGestureRecognizer___x_ABI_CWindows__CUI__CInput__CHoldingEventArgs;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CGestureRecognizer___x_ABI_CWindows__CUI__CInput__CHoldingEventArgs;

    typedef struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CGestureRecognizer___x_ABI_CWindows__CUI__CInput__CHoldingEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CGestureRecognizer___x_ABI_CWindows__CUI__CInput__CHoldingEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CGestureRecognizer___x_ABI_CWindows__CUI__CInput__CHoldingEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CGestureRecognizer___x_ABI_CWindows__CUI__CInput__CHoldingEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CGestureRecognizer___x_ABI_CWindows__CUI__CInput__CHoldingEventArgs* This,
        __x_ABI_CWindows_CUI_CInput_CIGestureRecognizer* sender,
        __x_ABI_CWindows_CUI_CInput_CIHoldingEventArgs* args);

        END_INTERFACE
    } __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CGestureRecognizer___x_ABI_CWindows__CUI__CInput__CHoldingEventArgsVtbl;

    interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CGestureRecognizer___x_ABI_CWindows__CUI__CInput__CHoldingEventArgs
    {
        CONST_VTBL struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CGestureRecognizer___x_ABI_CWindows__CUI__CInput__CHoldingEventArgsVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CGestureRecognizer___x_ABI_CWindows__CUI__CInput__CHoldingEventArgs_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CGestureRecognizer___x_ABI_CWindows__CUI__CInput__CManipulationCompletedEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CGestureRecognizer___x_ABI_CWindows__CUI__CInput__CManipulationCompletedEventArgs_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CGestureRecognizer___x_ABI_CWindows__CUI__CInput__CManipulationCompletedEventArgs __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CGestureRecognizer___x_ABI_CWindows__CUI__CInput__CManipulationCompletedEventArgs;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CGestureRecognizer___x_ABI_CWindows__CUI__CInput__CManipulationCompletedEventArgs;

    typedef struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CGestureRecognizer___x_ABI_CWindows__CUI__CInput__CManipulationCompletedEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CGestureRecognizer___x_ABI_CWindows__CUI__CInput__CManipulationCompletedEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CGestureRecognizer___x_ABI_CWindows__CUI__CInput__CManipulationCompletedEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CGestureRecognizer___x_ABI_CWindows__CUI__CInput__CManipulationCompletedEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CGestureRecognizer___x_ABI_CWindows__CUI__CInput__CManipulationCompletedEventArgs* This,
        __x_ABI_CWindows_CUI_CInput_CIGestureRecognizer* sender,
        __x_ABI_CWindows_CUI_CInput_CIManipulationCompletedEventArgs* args);

        END_INTERFACE
    } __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CGestureRecognizer___x_ABI_CWindows__CUI__CInput__CManipulationCompletedEventArgsVtbl;

    interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CGestureRecognizer___x_ABI_CWindows__CUI__CInput__CManipulationCompletedEventArgs
    {
        CONST_VTBL struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CGestureRecognizer___x_ABI_CWindows__CUI__CInput__CManipulationCompletedEventArgsVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CGestureRecognizer___x_ABI_CWindows__CUI__CInput__CManipulationCompletedEventArgs_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CGestureRecognizer___x_ABI_CWindows__CUI__CInput__CManipulationInertiaStartingEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CGestureRecognizer___x_ABI_CWindows__CUI__CInput__CManipulationInertiaStartingEventArgs_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CGestureRecognizer___x_ABI_CWindows__CUI__CInput__CManipulationInertiaStartingEventArgs __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CGestureRecognizer___x_ABI_CWindows__CUI__CInput__CManipulationInertiaStartingEventArgs;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CGestureRecognizer___x_ABI_CWindows__CUI__CInput__CManipulationInertiaStartingEventArgs;

    typedef struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CGestureRecognizer___x_ABI_CWindows__CUI__CInput__CManipulationInertiaStartingEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CGestureRecognizer___x_ABI_CWindows__CUI__CInput__CManipulationInertiaStartingEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CGestureRecognizer___x_ABI_CWindows__CUI__CInput__CManipulationInertiaStartingEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CGestureRecognizer___x_ABI_CWindows__CUI__CInput__CManipulationInertiaStartingEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CGestureRecognizer___x_ABI_CWindows__CUI__CInput__CManipulationInertiaStartingEventArgs* This,
        __x_ABI_CWindows_CUI_CInput_CIGestureRecognizer* sender,
        __x_ABI_CWindows_CUI_CInput_CIManipulationInertiaStartingEventArgs* args);

        END_INTERFACE
    } __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CGestureRecognizer___x_ABI_CWindows__CUI__CInput__CManipulationInertiaStartingEventArgsVtbl;

    interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CGestureRecognizer___x_ABI_CWindows__CUI__CInput__CManipulationInertiaStartingEventArgs
    {
        CONST_VTBL struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CGestureRecognizer___x_ABI_CWindows__CUI__CInput__CManipulationInertiaStartingEventArgsVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CGestureRecognizer___x_ABI_CWindows__CUI__CInput__CManipulationInertiaStartingEventArgs_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CGestureRecognizer___x_ABI_CWindows__CUI__CInput__CManipulationStartedEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CGestureRecognizer___x_ABI_CWindows__CUI__CInput__CManipulationStartedEventArgs_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CGestureRecognizer___x_ABI_CWindows__CUI__CInput__CManipulationStartedEventArgs __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CGestureRecognizer___x_ABI_CWindows__CUI__CInput__CManipulationStartedEventArgs;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CGestureRecognizer___x_ABI_CWindows__CUI__CInput__CManipulationStartedEventArgs;

    typedef struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CGestureRecognizer___x_ABI_CWindows__CUI__CInput__CManipulationStartedEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CGestureRecognizer___x_ABI_CWindows__CUI__CInput__CManipulationStartedEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CGestureRecognizer___x_ABI_CWindows__CUI__CInput__CManipulationStartedEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CGestureRecognizer___x_ABI_CWindows__CUI__CInput__CManipulationStartedEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CGestureRecognizer___x_ABI_CWindows__CUI__CInput__CManipulationStartedEventArgs* This,
        __x_ABI_CWindows_CUI_CInput_CIGestureRecognizer* sender,
        __x_ABI_CWindows_CUI_CInput_CIManipulationStartedEventArgs* args);

        END_INTERFACE
    } __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CGestureRecognizer___x_ABI_CWindows__CUI__CInput__CManipulationStartedEventArgsVtbl;

    interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CGestureRecognizer___x_ABI_CWindows__CUI__CInput__CManipulationStartedEventArgs
    {
        CONST_VTBL struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CGestureRecognizer___x_ABI_CWindows__CUI__CInput__CManipulationStartedEventArgsVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CGestureRecognizer___x_ABI_CWindows__CUI__CInput__CManipulationStartedEventArgs_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CGestureRecognizer___x_ABI_CWindows__CUI__CInput__CManipulationUpdatedEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CGestureRecognizer___x_ABI_CWindows__CUI__CInput__CManipulationUpdatedEventArgs_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CGestureRecognizer___x_ABI_CWindows__CUI__CInput__CManipulationUpdatedEventArgs __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CGestureRecognizer___x_ABI_CWindows__CUI__CInput__CManipulationUpdatedEventArgs;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CGestureRecognizer___x_ABI_CWindows__CUI__CInput__CManipulationUpdatedEventArgs;

    typedef struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CGestureRecognizer___x_ABI_CWindows__CUI__CInput__CManipulationUpdatedEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CGestureRecognizer___x_ABI_CWindows__CUI__CInput__CManipulationUpdatedEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CGestureRecognizer___x_ABI_CWindows__CUI__CInput__CManipulationUpdatedEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CGestureRecognizer___x_ABI_CWindows__CUI__CInput__CManipulationUpdatedEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CGestureRecognizer___x_ABI_CWindows__CUI__CInput__CManipulationUpdatedEventArgs* This,
        __x_ABI_CWindows_CUI_CInput_CIGestureRecognizer* sender,
        __x_ABI_CWindows_CUI_CInput_CIManipulationUpdatedEventArgs* args);

        END_INTERFACE
    } __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CGestureRecognizer___x_ABI_CWindows__CUI__CInput__CManipulationUpdatedEventArgsVtbl;

    interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CGestureRecognizer___x_ABI_CWindows__CUI__CInput__CManipulationUpdatedEventArgs
    {
        CONST_VTBL struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CGestureRecognizer___x_ABI_CWindows__CUI__CInput__CManipulationUpdatedEventArgsVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CGestureRecognizer___x_ABI_CWindows__CUI__CInput__CManipulationUpdatedEventArgs_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CGestureRecognizer___x_ABI_CWindows__CUI__CInput__CRightTappedEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CGestureRecognizer___x_ABI_CWindows__CUI__CInput__CRightTappedEventArgs_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CGestureRecognizer___x_ABI_CWindows__CUI__CInput__CRightTappedEventArgs __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CGestureRecognizer___x_ABI_CWindows__CUI__CInput__CRightTappedEventArgs;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CGestureRecognizer___x_ABI_CWindows__CUI__CInput__CRightTappedEventArgs;

    typedef struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CGestureRecognizer___x_ABI_CWindows__CUI__CInput__CRightTappedEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CGestureRecognizer___x_ABI_CWindows__CUI__CInput__CRightTappedEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CGestureRecognizer___x_ABI_CWindows__CUI__CInput__CRightTappedEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CGestureRecognizer___x_ABI_CWindows__CUI__CInput__CRightTappedEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CGestureRecognizer___x_ABI_CWindows__CUI__CInput__CRightTappedEventArgs* This,
        __x_ABI_CWindows_CUI_CInput_CIGestureRecognizer* sender,
        __x_ABI_CWindows_CUI_CInput_CIRightTappedEventArgs* args);

        END_INTERFACE
    } __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CGestureRecognizer___x_ABI_CWindows__CUI__CInput__CRightTappedEventArgsVtbl;

    interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CGestureRecognizer___x_ABI_CWindows__CUI__CInput__CRightTappedEventArgs
    {
        CONST_VTBL struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CGestureRecognizer___x_ABI_CWindows__CUI__CInput__CRightTappedEventArgsVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CGestureRecognizer___x_ABI_CWindows__CUI__CInput__CRightTappedEventArgs_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CGestureRecognizer___x_ABI_CWindows__CUI__CInput__CTappedEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CGestureRecognizer___x_ABI_CWindows__CUI__CInput__CTappedEventArgs_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CGestureRecognizer___x_ABI_CWindows__CUI__CInput__CTappedEventArgs __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CGestureRecognizer___x_ABI_CWindows__CUI__CInput__CTappedEventArgs;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CGestureRecognizer___x_ABI_CWindows__CUI__CInput__CTappedEventArgs;

    typedef struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CGestureRecognizer___x_ABI_CWindows__CUI__CInput__CTappedEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CGestureRecognizer___x_ABI_CWindows__CUI__CInput__CTappedEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CGestureRecognizer___x_ABI_CWindows__CUI__CInput__CTappedEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CGestureRecognizer___x_ABI_CWindows__CUI__CInput__CTappedEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CGestureRecognizer___x_ABI_CWindows__CUI__CInput__CTappedEventArgs* This,
        __x_ABI_CWindows_CUI_CInput_CIGestureRecognizer* sender,
        __x_ABI_CWindows_CUI_CInput_CITappedEventArgs* args);

        END_INTERFACE
    } __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CGestureRecognizer___x_ABI_CWindows__CUI__CInput__CTappedEventArgsVtbl;

    interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CGestureRecognizer___x_ABI_CWindows__CUI__CInput__CTappedEventArgs
    {
        CONST_VTBL struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CGestureRecognizer___x_ABI_CWindows__CUI__CInput__CTappedEventArgsVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CGestureRecognizer___x_ABI_CWindows__CUI__CInput__CTappedEventArgs_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CInputActivationListener___x_ABI_CWindows__CUI__CInput__CInputActivationListenerActivationChangedEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CInputActivationListener___x_ABI_CWindows__CUI__CInput__CInputActivationListenerActivationChangedEventArgs_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CInputActivationListener___x_ABI_CWindows__CUI__CInput__CInputActivationListenerActivationChangedEventArgs __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CInputActivationListener___x_ABI_CWindows__CUI__CInput__CInputActivationListenerActivationChangedEventArgs;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CInputActivationListener___x_ABI_CWindows__CUI__CInput__CInputActivationListenerActivationChangedEventArgs;

    typedef struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CInputActivationListener___x_ABI_CWindows__CUI__CInput__CInputActivationListenerActivationChangedEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CInputActivationListener___x_ABI_CWindows__CUI__CInput__CInputActivationListenerActivationChangedEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CInputActivationListener___x_ABI_CWindows__CUI__CInput__CInputActivationListenerActivationChangedEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CInputActivationListener___x_ABI_CWindows__CUI__CInput__CInputActivationListenerActivationChangedEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CInputActivationListener___x_ABI_CWindows__CUI__CInput__CInputActivationListenerActivationChangedEventArgs* This,
        __x_ABI_CWindows_CUI_CInput_CIInputActivationListener* sender,
        __x_ABI_CWindows_CUI_CInput_CIInputActivationListenerActivationChangedEventArgs* args);

        END_INTERFACE
    } __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CInputActivationListener___x_ABI_CWindows__CUI__CInput__CInputActivationListenerActivationChangedEventArgsVtbl;

    interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CInputActivationListener___x_ABI_CWindows__CUI__CInput__CInputActivationListenerActivationChangedEventArgs
    {
        CONST_VTBL struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CInputActivationListener___x_ABI_CWindows__CUI__CInput__CInputActivationListenerActivationChangedEventArgsVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CInputActivationListener___x_ABI_CWindows__CUI__CInput__CInputActivationListenerActivationChangedEventArgs_INTERFACE_DEFINED__
    
#ifndef ____x_ABI_CWindows_CUI_CCore_CIKeyEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CCore_CIKeyEventArgs_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CCore_CIKeyEventArgs __x_ABI_CWindows_CUI_CCore_CIKeyEventArgs;

#endif // ____x_ABI_CWindows_CUI_CCore_CIKeyEventArgs_FWD_DEFINED__

#if !defined(____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CKeyboardDeliveryInterceptor___x_ABI_CWindows__CUI__CCore__CKeyEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CKeyboardDeliveryInterceptor___x_ABI_CWindows__CUI__CCore__CKeyEventArgs_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CKeyboardDeliveryInterceptor___x_ABI_CWindows__CUI__CCore__CKeyEventArgs __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CKeyboardDeliveryInterceptor___x_ABI_CWindows__CUI__CCore__CKeyEventArgs;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CKeyboardDeliveryInterceptor___x_ABI_CWindows__CUI__CCore__CKeyEventArgs;

    typedef struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CKeyboardDeliveryInterceptor___x_ABI_CWindows__CUI__CCore__CKeyEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CKeyboardDeliveryInterceptor___x_ABI_CWindows__CUI__CCore__CKeyEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CKeyboardDeliveryInterceptor___x_ABI_CWindows__CUI__CCore__CKeyEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CKeyboardDeliveryInterceptor___x_ABI_CWindows__CUI__CCore__CKeyEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CKeyboardDeliveryInterceptor___x_ABI_CWindows__CUI__CCore__CKeyEventArgs* This,
        __x_ABI_CWindows_CUI_CInput_CIKeyboardDeliveryInterceptor* sender,
        __x_ABI_CWindows_CUI_CCore_CIKeyEventArgs* args);

        END_INTERFACE
    } __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CKeyboardDeliveryInterceptor___x_ABI_CWindows__CUI__CCore__CKeyEventArgsVtbl;

    interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CKeyboardDeliveryInterceptor___x_ABI_CWindows__CUI__CCore__CKeyEventArgs
    {
        CONST_VTBL struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CKeyboardDeliveryInterceptor___x_ABI_CWindows__CUI__CCore__CKeyEventArgsVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CKeyboardDeliveryInterceptor___x_ABI_CWindows__CUI__CCore__CKeyEventArgs_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CRadialController_IInspectable_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CRadialController_IInspectable_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CRadialController_IInspectable __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CRadialController_IInspectable;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CRadialController_IInspectable;

    typedef struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CRadialController_IInspectableVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CRadialController_IInspectable* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CRadialController_IInspectable* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CRadialController_IInspectable* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CRadialController_IInspectable* This,
        __x_ABI_CWindows_CUI_CInput_CIRadialController* sender,
        IInspectable* args);

        END_INTERFACE
    } __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CRadialController_IInspectableVtbl;

    interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CRadialController_IInspectable
    {
        CONST_VTBL struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CRadialController_IInspectableVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CRadialController_IInspectable_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CRadialController___x_ABI_CWindows__CUI__CInput__CRadialControllerButtonClickedEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CRadialController___x_ABI_CWindows__CUI__CInput__CRadialControllerButtonClickedEventArgs_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CRadialController___x_ABI_CWindows__CUI__CInput__CRadialControllerButtonClickedEventArgs __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CRadialController___x_ABI_CWindows__CUI__CInput__CRadialControllerButtonClickedEventArgs;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CRadialController___x_ABI_CWindows__CUI__CInput__CRadialControllerButtonClickedEventArgs;

    typedef struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CRadialController___x_ABI_CWindows__CUI__CInput__CRadialControllerButtonClickedEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CRadialController___x_ABI_CWindows__CUI__CInput__CRadialControllerButtonClickedEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CRadialController___x_ABI_CWindows__CUI__CInput__CRadialControllerButtonClickedEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CRadialController___x_ABI_CWindows__CUI__CInput__CRadialControllerButtonClickedEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CRadialController___x_ABI_CWindows__CUI__CInput__CRadialControllerButtonClickedEventArgs* This,
        __x_ABI_CWindows_CUI_CInput_CIRadialController* sender,
        __x_ABI_CWindows_CUI_CInput_CIRadialControllerButtonClickedEventArgs* args);

        END_INTERFACE
    } __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CRadialController___x_ABI_CWindows__CUI__CInput__CRadialControllerButtonClickedEventArgsVtbl;

    interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CRadialController___x_ABI_CWindows__CUI__CInput__CRadialControllerButtonClickedEventArgs
    {
        CONST_VTBL struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CRadialController___x_ABI_CWindows__CUI__CInput__CRadialControllerButtonClickedEventArgsVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CRadialController___x_ABI_CWindows__CUI__CInput__CRadialControllerButtonClickedEventArgs_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CRadialController___x_ABI_CWindows__CUI__CInput__CRadialControllerButtonHoldingEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CRadialController___x_ABI_CWindows__CUI__CInput__CRadialControllerButtonHoldingEventArgs_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CRadialController___x_ABI_CWindows__CUI__CInput__CRadialControllerButtonHoldingEventArgs __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CRadialController___x_ABI_CWindows__CUI__CInput__CRadialControllerButtonHoldingEventArgs;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CRadialController___x_ABI_CWindows__CUI__CInput__CRadialControllerButtonHoldingEventArgs;

    typedef struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CRadialController___x_ABI_CWindows__CUI__CInput__CRadialControllerButtonHoldingEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CRadialController___x_ABI_CWindows__CUI__CInput__CRadialControllerButtonHoldingEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CRadialController___x_ABI_CWindows__CUI__CInput__CRadialControllerButtonHoldingEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CRadialController___x_ABI_CWindows__CUI__CInput__CRadialControllerButtonHoldingEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CRadialController___x_ABI_CWindows__CUI__CInput__CRadialControllerButtonHoldingEventArgs* This,
        __x_ABI_CWindows_CUI_CInput_CIRadialController* sender,
        __x_ABI_CWindows_CUI_CInput_CIRadialControllerButtonHoldingEventArgs* args);

        END_INTERFACE
    } __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CRadialController___x_ABI_CWindows__CUI__CInput__CRadialControllerButtonHoldingEventArgsVtbl;

    interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CRadialController___x_ABI_CWindows__CUI__CInput__CRadialControllerButtonHoldingEventArgs
    {
        CONST_VTBL struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CRadialController___x_ABI_CWindows__CUI__CInput__CRadialControllerButtonHoldingEventArgsVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CRadialController___x_ABI_CWindows__CUI__CInput__CRadialControllerButtonHoldingEventArgs_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CRadialController___x_ABI_CWindows__CUI__CInput__CRadialControllerButtonPressedEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CRadialController___x_ABI_CWindows__CUI__CInput__CRadialControllerButtonPressedEventArgs_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CRadialController___x_ABI_CWindows__CUI__CInput__CRadialControllerButtonPressedEventArgs __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CRadialController___x_ABI_CWindows__CUI__CInput__CRadialControllerButtonPressedEventArgs;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CRadialController___x_ABI_CWindows__CUI__CInput__CRadialControllerButtonPressedEventArgs;

    typedef struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CRadialController___x_ABI_CWindows__CUI__CInput__CRadialControllerButtonPressedEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CRadialController___x_ABI_CWindows__CUI__CInput__CRadialControllerButtonPressedEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CRadialController___x_ABI_CWindows__CUI__CInput__CRadialControllerButtonPressedEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CRadialController___x_ABI_CWindows__CUI__CInput__CRadialControllerButtonPressedEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CRadialController___x_ABI_CWindows__CUI__CInput__CRadialControllerButtonPressedEventArgs* This,
        __x_ABI_CWindows_CUI_CInput_CIRadialController* sender,
        __x_ABI_CWindows_CUI_CInput_CIRadialControllerButtonPressedEventArgs* args);

        END_INTERFACE
    } __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CRadialController___x_ABI_CWindows__CUI__CInput__CRadialControllerButtonPressedEventArgsVtbl;

    interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CRadialController___x_ABI_CWindows__CUI__CInput__CRadialControllerButtonPressedEventArgs
    {
        CONST_VTBL struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CRadialController___x_ABI_CWindows__CUI__CInput__CRadialControllerButtonPressedEventArgsVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CRadialController___x_ABI_CWindows__CUI__CInput__CRadialControllerButtonPressedEventArgs_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CRadialController___x_ABI_CWindows__CUI__CInput__CRadialControllerButtonReleasedEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CRadialController___x_ABI_CWindows__CUI__CInput__CRadialControllerButtonReleasedEventArgs_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CRadialController___x_ABI_CWindows__CUI__CInput__CRadialControllerButtonReleasedEventArgs __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CRadialController___x_ABI_CWindows__CUI__CInput__CRadialControllerButtonReleasedEventArgs;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CRadialController___x_ABI_CWindows__CUI__CInput__CRadialControllerButtonReleasedEventArgs;

    typedef struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CRadialController___x_ABI_CWindows__CUI__CInput__CRadialControllerButtonReleasedEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CRadialController___x_ABI_CWindows__CUI__CInput__CRadialControllerButtonReleasedEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CRadialController___x_ABI_CWindows__CUI__CInput__CRadialControllerButtonReleasedEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CRadialController___x_ABI_CWindows__CUI__CInput__CRadialControllerButtonReleasedEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CRadialController___x_ABI_CWindows__CUI__CInput__CRadialControllerButtonReleasedEventArgs* This,
        __x_ABI_CWindows_CUI_CInput_CIRadialController* sender,
        __x_ABI_CWindows_CUI_CInput_CIRadialControllerButtonReleasedEventArgs* args);

        END_INTERFACE
    } __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CRadialController___x_ABI_CWindows__CUI__CInput__CRadialControllerButtonReleasedEventArgsVtbl;

    interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CRadialController___x_ABI_CWindows__CUI__CInput__CRadialControllerButtonReleasedEventArgs
    {
        CONST_VTBL struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CRadialController___x_ABI_CWindows__CUI__CInput__CRadialControllerButtonReleasedEventArgsVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CRadialController___x_ABI_CWindows__CUI__CInput__CRadialControllerButtonReleasedEventArgs_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CRadialController___x_ABI_CWindows__CUI__CInput__CRadialControllerControlAcquiredEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CRadialController___x_ABI_CWindows__CUI__CInput__CRadialControllerControlAcquiredEventArgs_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CRadialController___x_ABI_CWindows__CUI__CInput__CRadialControllerControlAcquiredEventArgs __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CRadialController___x_ABI_CWindows__CUI__CInput__CRadialControllerControlAcquiredEventArgs;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CRadialController___x_ABI_CWindows__CUI__CInput__CRadialControllerControlAcquiredEventArgs;

    typedef struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CRadialController___x_ABI_CWindows__CUI__CInput__CRadialControllerControlAcquiredEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CRadialController___x_ABI_CWindows__CUI__CInput__CRadialControllerControlAcquiredEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CRadialController___x_ABI_CWindows__CUI__CInput__CRadialControllerControlAcquiredEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CRadialController___x_ABI_CWindows__CUI__CInput__CRadialControllerControlAcquiredEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CRadialController___x_ABI_CWindows__CUI__CInput__CRadialControllerControlAcquiredEventArgs* This,
        __x_ABI_CWindows_CUI_CInput_CIRadialController* sender,
        __x_ABI_CWindows_CUI_CInput_CIRadialControllerControlAcquiredEventArgs* args);

        END_INTERFACE
    } __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CRadialController___x_ABI_CWindows__CUI__CInput__CRadialControllerControlAcquiredEventArgsVtbl;

    interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CRadialController___x_ABI_CWindows__CUI__CInput__CRadialControllerControlAcquiredEventArgs
    {
        CONST_VTBL struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CRadialController___x_ABI_CWindows__CUI__CInput__CRadialControllerControlAcquiredEventArgsVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CRadialController___x_ABI_CWindows__CUI__CInput__CRadialControllerControlAcquiredEventArgs_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CRadialController___x_ABI_CWindows__CUI__CInput__CRadialControllerRotationChangedEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CRadialController___x_ABI_CWindows__CUI__CInput__CRadialControllerRotationChangedEventArgs_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CRadialController___x_ABI_CWindows__CUI__CInput__CRadialControllerRotationChangedEventArgs __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CRadialController___x_ABI_CWindows__CUI__CInput__CRadialControllerRotationChangedEventArgs;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CRadialController___x_ABI_CWindows__CUI__CInput__CRadialControllerRotationChangedEventArgs;

    typedef struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CRadialController___x_ABI_CWindows__CUI__CInput__CRadialControllerRotationChangedEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CRadialController___x_ABI_CWindows__CUI__CInput__CRadialControllerRotationChangedEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CRadialController___x_ABI_CWindows__CUI__CInput__CRadialControllerRotationChangedEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CRadialController___x_ABI_CWindows__CUI__CInput__CRadialControllerRotationChangedEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CRadialController___x_ABI_CWindows__CUI__CInput__CRadialControllerRotationChangedEventArgs* This,
        __x_ABI_CWindows_CUI_CInput_CIRadialController* sender,
        __x_ABI_CWindows_CUI_CInput_CIRadialControllerRotationChangedEventArgs* args);

        END_INTERFACE
    } __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CRadialController___x_ABI_CWindows__CUI__CInput__CRadialControllerRotationChangedEventArgsVtbl;

    interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CRadialController___x_ABI_CWindows__CUI__CInput__CRadialControllerRotationChangedEventArgs
    {
        CONST_VTBL struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CRadialController___x_ABI_CWindows__CUI__CInput__CRadialControllerRotationChangedEventArgsVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CRadialController___x_ABI_CWindows__CUI__CInput__CRadialControllerRotationChangedEventArgs_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CRadialController___x_ABI_CWindows__CUI__CInput__CRadialControllerScreenContactContinuedEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CRadialController___x_ABI_CWindows__CUI__CInput__CRadialControllerScreenContactContinuedEventArgs_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CRadialController___x_ABI_CWindows__CUI__CInput__CRadialControllerScreenContactContinuedEventArgs __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CRadialController___x_ABI_CWindows__CUI__CInput__CRadialControllerScreenContactContinuedEventArgs;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CRadialController___x_ABI_CWindows__CUI__CInput__CRadialControllerScreenContactContinuedEventArgs;

    typedef struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CRadialController___x_ABI_CWindows__CUI__CInput__CRadialControllerScreenContactContinuedEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CRadialController___x_ABI_CWindows__CUI__CInput__CRadialControllerScreenContactContinuedEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CRadialController___x_ABI_CWindows__CUI__CInput__CRadialControllerScreenContactContinuedEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CRadialController___x_ABI_CWindows__CUI__CInput__CRadialControllerScreenContactContinuedEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CRadialController___x_ABI_CWindows__CUI__CInput__CRadialControllerScreenContactContinuedEventArgs* This,
        __x_ABI_CWindows_CUI_CInput_CIRadialController* sender,
        __x_ABI_CWindows_CUI_CInput_CIRadialControllerScreenContactContinuedEventArgs* args);

        END_INTERFACE
    } __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CRadialController___x_ABI_CWindows__CUI__CInput__CRadialControllerScreenContactContinuedEventArgsVtbl;

    interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CRadialController___x_ABI_CWindows__CUI__CInput__CRadialControllerScreenContactContinuedEventArgs
    {
        CONST_VTBL struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CRadialController___x_ABI_CWindows__CUI__CInput__CRadialControllerScreenContactContinuedEventArgsVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CRadialController___x_ABI_CWindows__CUI__CInput__CRadialControllerScreenContactContinuedEventArgs_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CRadialController___x_ABI_CWindows__CUI__CInput__CRadialControllerScreenContactStartedEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CRadialController___x_ABI_CWindows__CUI__CInput__CRadialControllerScreenContactStartedEventArgs_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CRadialController___x_ABI_CWindows__CUI__CInput__CRadialControllerScreenContactStartedEventArgs __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CRadialController___x_ABI_CWindows__CUI__CInput__CRadialControllerScreenContactStartedEventArgs;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CRadialController___x_ABI_CWindows__CUI__CInput__CRadialControllerScreenContactStartedEventArgs;

    typedef struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CRadialController___x_ABI_CWindows__CUI__CInput__CRadialControllerScreenContactStartedEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CRadialController___x_ABI_CWindows__CUI__CInput__CRadialControllerScreenContactStartedEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CRadialController___x_ABI_CWindows__CUI__CInput__CRadialControllerScreenContactStartedEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CRadialController___x_ABI_CWindows__CUI__CInput__CRadialControllerScreenContactStartedEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CRadialController___x_ABI_CWindows__CUI__CInput__CRadialControllerScreenContactStartedEventArgs* This,
        __x_ABI_CWindows_CUI_CInput_CIRadialController* sender,
        __x_ABI_CWindows_CUI_CInput_CIRadialControllerScreenContactStartedEventArgs* args);

        END_INTERFACE
    } __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CRadialController___x_ABI_CWindows__CUI__CInput__CRadialControllerScreenContactStartedEventArgsVtbl;

    interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CRadialController___x_ABI_CWindows__CUI__CInput__CRadialControllerScreenContactStartedEventArgs
    {
        CONST_VTBL struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CRadialController___x_ABI_CWindows__CUI__CInput__CRadialControllerScreenContactStartedEventArgsVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CRadialController___x_ABI_CWindows__CUI__CInput__CRadialControllerScreenContactStartedEventArgs_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CRadialControllerMenuItem_IInspectable_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CRadialControllerMenuItem_IInspectable_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CRadialControllerMenuItem_IInspectable __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CRadialControllerMenuItem_IInspectable;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CRadialControllerMenuItem_IInspectable;

    typedef struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CRadialControllerMenuItem_IInspectableVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CRadialControllerMenuItem_IInspectable* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CRadialControllerMenuItem_IInspectable* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CRadialControllerMenuItem_IInspectable* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CRadialControllerMenuItem_IInspectable* This,
        __x_ABI_CWindows_CUI_CInput_CIRadialControllerMenuItem* sender,
        IInspectable* args);

        END_INTERFACE
    } __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CRadialControllerMenuItem_IInspectableVtbl;

    interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CRadialControllerMenuItem_IInspectable
    {
        CONST_VTBL struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CRadialControllerMenuItem_IInspectableVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CRadialControllerMenuItem_IInspectable_INTERFACE_DEFINED__
    
#ifndef ____x_ABI_CWindows_CDevices_CHaptics_CISimpleHapticsController_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CHaptics_CISimpleHapticsController_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CDevices_CHaptics_CISimpleHapticsController __x_ABI_CWindows_CDevices_CHaptics_CISimpleHapticsController;

#endif // ____x_ABI_CWindows_CDevices_CHaptics_CISimpleHapticsController_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CInput_CIPointerDevice_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CInput_CIPointerDevice_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CDevices_CInput_CIPointerDevice __x_ABI_CWindows_CDevices_CInput_CIPointerDevice;

#endif // ____x_ABI_CWindows_CDevices_CInput_CIPointerDevice_FWD_DEFINED__

typedef enum __x_ABI_CWindows_CDevices_CInput_CPointerDeviceType __x_ABI_CWindows_CDevices_CInput_CPointerDeviceType;

#ifndef ____x_ABI_CWindows_CFoundation_CIClosable_FWD_DEFINED__
#define ____x_ABI_CWindows_CFoundation_CIClosable_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CFoundation_CIClosable __x_ABI_CWindows_CFoundation_CIClosable;

#endif // ____x_ABI_CWindows_CFoundation_CIClosable_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CFoundation_CIPropertyValue_FWD_DEFINED__
#define ____x_ABI_CWindows_CFoundation_CIPropertyValue_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CFoundation_CIPropertyValue __x_ABI_CWindows_CFoundation_CIPropertyValue;

#endif // ____x_ABI_CWindows_CFoundation_CIPropertyValue_FWD_DEFINED__

typedef struct __x_ABI_CWindows_CFoundation_CPoint __x_ABI_CWindows_CFoundation_CPoint;

typedef struct __x_ABI_CWindows_CFoundation_CRect __x_ABI_CWindows_CFoundation_CRect;

#ifndef ____x_ABI_CWindows_CFoundation_CIUriRuntimeClass_FWD_DEFINED__
#define ____x_ABI_CWindows_CFoundation_CIUriRuntimeClass_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CFoundation_CIUriRuntimeClass __x_ABI_CWindows_CFoundation_CIUriRuntimeClass;

#endif // ____x_ABI_CWindows_CFoundation_CIUriRuntimeClass_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CStorage_CStreams_CIRandomAccessStreamReference_FWD_DEFINED__
#define ____x_ABI_CWindows_CStorage_CStreams_CIRandomAccessStreamReference_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CStorage_CStreams_CIRandomAccessStreamReference __x_ABI_CWindows_CStorage_CStreams_CIRandomAccessStreamReference;

#endif // ____x_ABI_CWindows_CStorage_CStreams_CIRandomAccessStreamReference_FWD_DEFINED__

typedef enum __x_ABI_CWindows_CUI_CInput_CCrossSlidingState __x_ABI_CWindows_CUI_CInput_CCrossSlidingState;

typedef enum __x_ABI_CWindows_CUI_CInput_CDraggingState __x_ABI_CWindows_CUI_CInput_CDraggingState;

typedef enum __x_ABI_CWindows_CUI_CInput_CEdgeGestureKind __x_ABI_CWindows_CUI_CInput_CEdgeGestureKind;

typedef enum __x_ABI_CWindows_CUI_CInput_CGestureSettings __x_ABI_CWindows_CUI_CInput_CGestureSettings;

typedef enum __x_ABI_CWindows_CUI_CInput_CHoldingState __x_ABI_CWindows_CUI_CInput_CHoldingState;

typedef enum __x_ABI_CWindows_CUI_CInput_CInputActivationState __x_ABI_CWindows_CUI_CInput_CInputActivationState;

typedef enum __x_ABI_CWindows_CUI_CInput_CPointerUpdateKind __x_ABI_CWindows_CUI_CInput_CPointerUpdateKind;

typedef enum __x_ABI_CWindows_CUI_CInput_CRadialControllerMenuKnownIcon __x_ABI_CWindows_CUI_CInput_CRadialControllerMenuKnownIcon;

typedef struct __x_ABI_CWindows_CUI_CInput_CCrossSlideThresholds __x_ABI_CWindows_CUI_CInput_CCrossSlideThresholds;

typedef struct __x_ABI_CWindows_CUI_CInput_CManipulationDelta __x_ABI_CWindows_CUI_CInput_CManipulationDelta;

typedef struct __x_ABI_CWindows_CUI_CInput_CManipulationVelocities __x_ABI_CWindows_CUI_CInput_CManipulationVelocities;

enum __x_ABI_CWindows_CUI_CInput_CCrossSlidingState
    {
        __x_ABI_CWindows_CUI_CInput_CCrossSlidingState_Started = 0,
    __x_ABI_CWindows_CUI_CInput_CCrossSlidingState_Dragging = 1,
    __x_ABI_CWindows_CUI_CInput_CCrossSlidingState_Selecting = 2,
    __x_ABI_CWindows_CUI_CInput_CCrossSlidingState_SelectSpeedBumping = 3,
    __x_ABI_CWindows_CUI_CInput_CCrossSlidingState_SpeedBumping = 4,
    __x_ABI_CWindows_CUI_CInput_CCrossSlidingState_Rearranging = 5,
    __x_ABI_CWindows_CUI_CInput_CCrossSlidingState_Completed = 6,
};

enum __x_ABI_CWindows_CUI_CInput_CDraggingState
    {
        __x_ABI_CWindows_CUI_CInput_CDraggingState_Started = 0,
    __x_ABI_CWindows_CUI_CInput_CDraggingState_Continuing = 1,
    __x_ABI_CWindows_CUI_CInput_CDraggingState_Completed = 2,
};

enum __x_ABI_CWindows_CUI_CInput_CEdgeGestureKind
    {
        __x_ABI_CWindows_CUI_CInput_CEdgeGestureKind_Touch = 0,
    __x_ABI_CWindows_CUI_CInput_CEdgeGestureKind_Keyboard = 1,
    __x_ABI_CWindows_CUI_CInput_CEdgeGestureKind_Mouse = 2,
};

enum __x_ABI_CWindows_CUI_CInput_CGazeInputAccessStatus
    {
        __x_ABI_CWindows_CUI_CInput_CGazeInputAccessStatus_Unspecified = 0,
    __x_ABI_CWindows_CUI_CInput_CGazeInputAccessStatus_Allowed = 1,
    __x_ABI_CWindows_CUI_CInput_CGazeInputAccessStatus_DeniedByUser = 2,
    __x_ABI_CWindows_CUI_CInput_CGazeInputAccessStatus_DeniedBySystem = 3,
};

enum __x_ABI_CWindows_CUI_CInput_CGestureSettings
    {
        __x_ABI_CWindows_CUI_CInput_CGestureSettings_None = 0,
    __x_ABI_CWindows_CUI_CInput_CGestureSettings_Tap = 0x1,
    __x_ABI_CWindows_CUI_CInput_CGestureSettings_DoubleTap = 0x2,
    __x_ABI_CWindows_CUI_CInput_CGestureSettings_Hold = 0x4,
    __x_ABI_CWindows_CUI_CInput_CGestureSettings_HoldWithMouse = 0x8,
    __x_ABI_CWindows_CUI_CInput_CGestureSettings_RightTap = 0x10,
    __x_ABI_CWindows_CUI_CInput_CGestureSettings_Drag = 0x20,
    __x_ABI_CWindows_CUI_CInput_CGestureSettings_ManipulationTranslateX = 0x40,
    __x_ABI_CWindows_CUI_CInput_CGestureSettings_ManipulationTranslateY = 0x80,
    __x_ABI_CWindows_CUI_CInput_CGestureSettings_ManipulationTranslateRailsX = 0x100,
    __x_ABI_CWindows_CUI_CInput_CGestureSettings_ManipulationTranslateRailsY = 0x200,
    __x_ABI_CWindows_CUI_CInput_CGestureSettings_ManipulationRotate = 0x400,
    __x_ABI_CWindows_CUI_CInput_CGestureSettings_ManipulationScale = 0x800,
    __x_ABI_CWindows_CUI_CInput_CGestureSettings_ManipulationTranslateInertia = 0x1000,
    __x_ABI_CWindows_CUI_CInput_CGestureSettings_ManipulationRotateInertia = 0x2000,
    __x_ABI_CWindows_CUI_CInput_CGestureSettings_ManipulationScaleInertia = 0x4000,
    __x_ABI_CWindows_CUI_CInput_CGestureSettings_CrossSlide = 0x8000,
    __x_ABI_CWindows_CUI_CInput_CGestureSettings_ManipulationMultipleFingerPanning = 0x10000,
};

enum __x_ABI_CWindows_CUI_CInput_CHoldingState
    {
        __x_ABI_CWindows_CUI_CInput_CHoldingState_Started = 0,
    __x_ABI_CWindows_CUI_CInput_CHoldingState_Completed = 1,
    __x_ABI_CWindows_CUI_CInput_CHoldingState_Canceled = 2,
};

enum __x_ABI_CWindows_CUI_CInput_CInputActivationState
    {
        __x_ABI_CWindows_CUI_CInput_CInputActivationState_None = 0,
    __x_ABI_CWindows_CUI_CInput_CInputActivationState_Deactivated = 1,
    __x_ABI_CWindows_CUI_CInput_CInputActivationState_ActivatedNotForeground = 2,
    __x_ABI_CWindows_CUI_CInput_CInputActivationState_ActivatedInForeground = 3,
};

enum __x_ABI_CWindows_CUI_CInput_CPointerUpdateKind
    {
        __x_ABI_CWindows_CUI_CInput_CPointerUpdateKind_Other = 0,
    __x_ABI_CWindows_CUI_CInput_CPointerUpdateKind_LeftButtonPressed = 1,
    __x_ABI_CWindows_CUI_CInput_CPointerUpdateKind_LeftButtonReleased = 2,
    __x_ABI_CWindows_CUI_CInput_CPointerUpdateKind_RightButtonPressed = 3,
    __x_ABI_CWindows_CUI_CInput_CPointerUpdateKind_RightButtonReleased = 4,
    __x_ABI_CWindows_CUI_CInput_CPointerUpdateKind_MiddleButtonPressed = 5,
    __x_ABI_CWindows_CUI_CInput_CPointerUpdateKind_MiddleButtonReleased = 6,
    __x_ABI_CWindows_CUI_CInput_CPointerUpdateKind_XButton1Pressed = 7,
    __x_ABI_CWindows_CUI_CInput_CPointerUpdateKind_XButton1Released = 8,
    __x_ABI_CWindows_CUI_CInput_CPointerUpdateKind_XButton2Pressed = 9,
    __x_ABI_CWindows_CUI_CInput_CPointerUpdateKind_XButton2Released = 10,
};

enum __x_ABI_CWindows_CUI_CInput_CRadialControllerMenuKnownIcon
    {
        __x_ABI_CWindows_CUI_CInput_CRadialControllerMenuKnownIcon_Scroll = 0,
    __x_ABI_CWindows_CUI_CInput_CRadialControllerMenuKnownIcon_Zoom = 1,
    __x_ABI_CWindows_CUI_CInput_CRadialControllerMenuKnownIcon_UndoRedo = 2,
    __x_ABI_CWindows_CUI_CInput_CRadialControllerMenuKnownIcon_Volume = 3,
    __x_ABI_CWindows_CUI_CInput_CRadialControllerMenuKnownIcon_NextPreviousTrack = 4,
    __x_ABI_CWindows_CUI_CInput_CRadialControllerMenuKnownIcon_Ruler = 5,
    __x_ABI_CWindows_CUI_CInput_CRadialControllerMenuKnownIcon_InkColor = 6,
    __x_ABI_CWindows_CUI_CInput_CRadialControllerMenuKnownIcon_InkThickness = 7,
    __x_ABI_CWindows_CUI_CInput_CRadialControllerMenuKnownIcon_PenType = 8,
};

enum __x_ABI_CWindows_CUI_CInput_CRadialControllerSystemMenuItemKind
    {
        __x_ABI_CWindows_CUI_CInput_CRadialControllerSystemMenuItemKind_Scroll = 0,
    __x_ABI_CWindows_CUI_CInput_CRadialControllerSystemMenuItemKind_Zoom = 1,
    __x_ABI_CWindows_CUI_CInput_CRadialControllerSystemMenuItemKind_UndoRedo = 2,
    __x_ABI_CWindows_CUI_CInput_CRadialControllerSystemMenuItemKind_Volume = 3,
    __x_ABI_CWindows_CUI_CInput_CRadialControllerSystemMenuItemKind_NextPreviousTrack = 4,
};

struct __x_ABI_CWindows_CUI_CInput_CCrossSlideThresholds
    {
        FLOAT SelectionStart;
    FLOAT SpeedBumpStart;
    FLOAT SpeedBumpEnd;
    FLOAT RearrangeStart;
};

struct __x_ABI_CWindows_CUI_CInput_CManipulationDelta
    {
        struct __x_ABI_CWindows_CFoundation_CPoint Translation;
    FLOAT Scale;
    FLOAT Rotation;
    FLOAT Expansion;
};

struct __x_ABI_CWindows_CUI_CInput_CManipulationVelocities
    {
        struct __x_ABI_CWindows_CFoundation_CPoint Linear;
    FLOAT Angular;
    FLOAT Expansion;
};

#if !defined(____x_ABI_CWindows_CUI_CInput_CIAttachableInputObject_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CInput_CIAttachableInputObject_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CInput_CIAttachableInputObjectVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CInput_CIAttachableInputObject* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CInput_CIAttachableInputObject* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CInput_CIAttachableInputObject* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CInput_CIAttachableInputObject* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CInput_CIAttachableInputObject* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CInput_CIAttachableInputObject* This,
            TrustLevel* trustLevel);
    
        END_INTERFACE
    } __x_ABI_CWindows_CUI_CInput_CIAttachableInputObjectVtbl;

    interface __x_ABI_CWindows_CUI_CInput_CIAttachableInputObject
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CInput_CIAttachableInputObjectVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CInput_CIAttachableInputObject;
#endif /* !defined(____x_ABI_CWindows_CUI_CInput_CIAttachableInputObject_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CInput_CIAttachableInputObjectFactory_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CInput_CIAttachableInputObjectFactory_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CInput_CIAttachableInputObjectFactoryVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CInput_CIAttachableInputObjectFactory* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CInput_CIAttachableInputObjectFactory* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CInput_CIAttachableInputObjectFactory* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CInput_CIAttachableInputObjectFactory* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CInput_CIAttachableInputObjectFactory* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CInput_CIAttachableInputObjectFactory* This,
            TrustLevel* trustLevel);
    
        END_INTERFACE
    } __x_ABI_CWindows_CUI_CInput_CIAttachableInputObjectFactoryVtbl;

    interface __x_ABI_CWindows_CUI_CInput_CIAttachableInputObjectFactory
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CInput_CIAttachableInputObjectFactoryVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CInput_CIAttachableInputObjectFactory;
#endif /* !defined(____x_ABI_CWindows_CUI_CInput_CIAttachableInputObjectFactory_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CInput_CICrossSlidingEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CInput_CICrossSlidingEventArgs_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CInput_CICrossSlidingEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CInput_CICrossSlidingEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CInput_CICrossSlidingEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CInput_CICrossSlidingEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CInput_CICrossSlidingEventArgs* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CInput_CICrossSlidingEventArgs* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CInput_CICrossSlidingEventArgs* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_PointerDeviceType)(__x_ABI_CWindows_CUI_CInput_CICrossSlidingEventArgs* This,
        enum __x_ABI_CWindows_CDevices_CInput_CPointerDeviceType* value);
    HRESULT (STDMETHODCALLTYPE* get_Position)(__x_ABI_CWindows_CUI_CInput_CICrossSlidingEventArgs* This,
        struct __x_ABI_CWindows_CFoundation_CPoint* value);
    HRESULT (STDMETHODCALLTYPE* get_CrossSlidingState)(__x_ABI_CWindows_CUI_CInput_CICrossSlidingEventArgs* This,
        enum __x_ABI_CWindows_CUI_CInput_CCrossSlidingState* value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CInput_CICrossSlidingEventArgsVtbl;

    interface __x_ABI_CWindows_CUI_CInput_CICrossSlidingEventArgs
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CInput_CICrossSlidingEventArgsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CInput_CICrossSlidingEventArgs;
#endif /* !defined(____x_ABI_CWindows_CUI_CInput_CICrossSlidingEventArgs_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CInput_CIDraggingEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CInput_CIDraggingEventArgs_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CInput_CIDraggingEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CInput_CIDraggingEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CInput_CIDraggingEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CInput_CIDraggingEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CInput_CIDraggingEventArgs* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CInput_CIDraggingEventArgs* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CInput_CIDraggingEventArgs* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_PointerDeviceType)(__x_ABI_CWindows_CUI_CInput_CIDraggingEventArgs* This,
        enum __x_ABI_CWindows_CDevices_CInput_CPointerDeviceType* value);
    HRESULT (STDMETHODCALLTYPE* get_Position)(__x_ABI_CWindows_CUI_CInput_CIDraggingEventArgs* This,
        struct __x_ABI_CWindows_CFoundation_CPoint* value);
    HRESULT (STDMETHODCALLTYPE* get_DraggingState)(__x_ABI_CWindows_CUI_CInput_CIDraggingEventArgs* This,
        enum __x_ABI_CWindows_CUI_CInput_CDraggingState* value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CInput_CIDraggingEventArgsVtbl;

    interface __x_ABI_CWindows_CUI_CInput_CIDraggingEventArgs
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CInput_CIDraggingEventArgsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CInput_CIDraggingEventArgs;
#endif /* !defined(____x_ABI_CWindows_CUI_CInput_CIDraggingEventArgs_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CInput_CIEdgeGesture_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CInput_CIEdgeGesture_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CInput_CIEdgeGestureVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CInput_CIEdgeGesture* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CInput_CIEdgeGesture* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CInput_CIEdgeGesture* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CInput_CIEdgeGesture* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CInput_CIEdgeGesture* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CInput_CIEdgeGesture* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* add_Starting)(__x_ABI_CWindows_CUI_CInput_CIEdgeGesture* This,
        __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CEdgeGesture___x_ABI_CWindows__CUI__CInput__CEdgeGestureEventArgs* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_Starting)(__x_ABI_CWindows_CUI_CInput_CIEdgeGesture* This,
        EventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* add_Completed)(__x_ABI_CWindows_CUI_CInput_CIEdgeGesture* This,
        __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CEdgeGesture___x_ABI_CWindows__CUI__CInput__CEdgeGestureEventArgs* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_Completed)(__x_ABI_CWindows_CUI_CInput_CIEdgeGesture* This,
        EventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* add_Canceled)(__x_ABI_CWindows_CUI_CInput_CIEdgeGesture* This,
        __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CEdgeGesture___x_ABI_CWindows__CUI__CInput__CEdgeGestureEventArgs* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_Canceled)(__x_ABI_CWindows_CUI_CInput_CIEdgeGesture* This,
        EventRegistrationToken token);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CInput_CIEdgeGestureVtbl;

    interface __x_ABI_CWindows_CUI_CInput_CIEdgeGesture
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CInput_CIEdgeGestureVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CInput_CIEdgeGesture;
#endif /* !defined(____x_ABI_CWindows_CUI_CInput_CIEdgeGesture_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CInput_CIEdgeGestureEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CInput_CIEdgeGestureEventArgs_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CInput_CIEdgeGestureEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CInput_CIEdgeGestureEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CInput_CIEdgeGestureEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CInput_CIEdgeGestureEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CInput_CIEdgeGestureEventArgs* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CInput_CIEdgeGestureEventArgs* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CInput_CIEdgeGestureEventArgs* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Kind)(__x_ABI_CWindows_CUI_CInput_CIEdgeGestureEventArgs* This,
        enum __x_ABI_CWindows_CUI_CInput_CEdgeGestureKind* value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CInput_CIEdgeGestureEventArgsVtbl;

    interface __x_ABI_CWindows_CUI_CInput_CIEdgeGestureEventArgs
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CInput_CIEdgeGestureEventArgsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CInput_CIEdgeGestureEventArgs;
#endif /* !defined(____x_ABI_CWindows_CUI_CInput_CIEdgeGestureEventArgs_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CInput_CIEdgeGestureStatics_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CInput_CIEdgeGestureStatics_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CInput_CIEdgeGestureStaticsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CInput_CIEdgeGestureStatics* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CInput_CIEdgeGestureStatics* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CInput_CIEdgeGestureStatics* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CInput_CIEdgeGestureStatics* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CInput_CIEdgeGestureStatics* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CInput_CIEdgeGestureStatics* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetForCurrentView)(__x_ABI_CWindows_CUI_CInput_CIEdgeGestureStatics* This,
        __x_ABI_CWindows_CUI_CInput_CIEdgeGesture** current);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CInput_CIEdgeGestureStaticsVtbl;

    interface __x_ABI_CWindows_CUI_CInput_CIEdgeGestureStatics
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CInput_CIEdgeGestureStaticsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CInput_CIEdgeGestureStatics;
#endif /* !defined(____x_ABI_CWindows_CUI_CInput_CIEdgeGestureStatics_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CInput_CIGestureRecognizer_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CInput_CIGestureRecognizer_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CInput_CIGestureRecognizerVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CInput_CIGestureRecognizer* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CInput_CIGestureRecognizer* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CInput_CIGestureRecognizer* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CInput_CIGestureRecognizer* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CInput_CIGestureRecognizer* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CInput_CIGestureRecognizer* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_GestureSettings)(__x_ABI_CWindows_CUI_CInput_CIGestureRecognizer* This,
        enum __x_ABI_CWindows_CUI_CInput_CGestureSettings* value);
    HRESULT (STDMETHODCALLTYPE* put_GestureSettings)(__x_ABI_CWindows_CUI_CInput_CIGestureRecognizer* This,
        enum __x_ABI_CWindows_CUI_CInput_CGestureSettings value);
    HRESULT (STDMETHODCALLTYPE* get_IsInertial)(__x_ABI_CWindows_CUI_CInput_CIGestureRecognizer* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* get_IsActive)(__x_ABI_CWindows_CUI_CInput_CIGestureRecognizer* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* get_ShowGestureFeedback)(__x_ABI_CWindows_CUI_CInput_CIGestureRecognizer* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* put_ShowGestureFeedback)(__x_ABI_CWindows_CUI_CInput_CIGestureRecognizer* This,
        boolean value);
    HRESULT (STDMETHODCALLTYPE* get_PivotCenter)(__x_ABI_CWindows_CUI_CInput_CIGestureRecognizer* This,
        struct __x_ABI_CWindows_CFoundation_CPoint* value);
    HRESULT (STDMETHODCALLTYPE* put_PivotCenter)(__x_ABI_CWindows_CUI_CInput_CIGestureRecognizer* This,
        struct __x_ABI_CWindows_CFoundation_CPoint value);
    HRESULT (STDMETHODCALLTYPE* get_PivotRadius)(__x_ABI_CWindows_CUI_CInput_CIGestureRecognizer* This,
        FLOAT* value);
    HRESULT (STDMETHODCALLTYPE* put_PivotRadius)(__x_ABI_CWindows_CUI_CInput_CIGestureRecognizer* This,
        FLOAT value);
    HRESULT (STDMETHODCALLTYPE* get_InertiaTranslationDeceleration)(__x_ABI_CWindows_CUI_CInput_CIGestureRecognizer* This,
        FLOAT* value);
    HRESULT (STDMETHODCALLTYPE* put_InertiaTranslationDeceleration)(__x_ABI_CWindows_CUI_CInput_CIGestureRecognizer* This,
        FLOAT value);
    HRESULT (STDMETHODCALLTYPE* get_InertiaRotationDeceleration)(__x_ABI_CWindows_CUI_CInput_CIGestureRecognizer* This,
        FLOAT* value);
    HRESULT (STDMETHODCALLTYPE* put_InertiaRotationDeceleration)(__x_ABI_CWindows_CUI_CInput_CIGestureRecognizer* This,
        FLOAT value);
    HRESULT (STDMETHODCALLTYPE* get_InertiaExpansionDeceleration)(__x_ABI_CWindows_CUI_CInput_CIGestureRecognizer* This,
        FLOAT* value);
    HRESULT (STDMETHODCALLTYPE* put_InertiaExpansionDeceleration)(__x_ABI_CWindows_CUI_CInput_CIGestureRecognizer* This,
        FLOAT value);
    HRESULT (STDMETHODCALLTYPE* get_InertiaTranslationDisplacement)(__x_ABI_CWindows_CUI_CInput_CIGestureRecognizer* This,
        FLOAT* value);
    HRESULT (STDMETHODCALLTYPE* put_InertiaTranslationDisplacement)(__x_ABI_CWindows_CUI_CInput_CIGestureRecognizer* This,
        FLOAT value);
    HRESULT (STDMETHODCALLTYPE* get_InertiaRotationAngle)(__x_ABI_CWindows_CUI_CInput_CIGestureRecognizer* This,
        FLOAT* value);
    HRESULT (STDMETHODCALLTYPE* put_InertiaRotationAngle)(__x_ABI_CWindows_CUI_CInput_CIGestureRecognizer* This,
        FLOAT value);
    HRESULT (STDMETHODCALLTYPE* get_InertiaExpansion)(__x_ABI_CWindows_CUI_CInput_CIGestureRecognizer* This,
        FLOAT* value);
    HRESULT (STDMETHODCALLTYPE* put_InertiaExpansion)(__x_ABI_CWindows_CUI_CInput_CIGestureRecognizer* This,
        FLOAT value);
    HRESULT (STDMETHODCALLTYPE* get_ManipulationExact)(__x_ABI_CWindows_CUI_CInput_CIGestureRecognizer* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* put_ManipulationExact)(__x_ABI_CWindows_CUI_CInput_CIGestureRecognizer* This,
        boolean value);
    HRESULT (STDMETHODCALLTYPE* get_CrossSlideThresholds)(__x_ABI_CWindows_CUI_CInput_CIGestureRecognizer* This,
        struct __x_ABI_CWindows_CUI_CInput_CCrossSlideThresholds* value);
    HRESULT (STDMETHODCALLTYPE* put_CrossSlideThresholds)(__x_ABI_CWindows_CUI_CInput_CIGestureRecognizer* This,
        struct __x_ABI_CWindows_CUI_CInput_CCrossSlideThresholds value);
    HRESULT (STDMETHODCALLTYPE* get_CrossSlideHorizontally)(__x_ABI_CWindows_CUI_CInput_CIGestureRecognizer* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* put_CrossSlideHorizontally)(__x_ABI_CWindows_CUI_CInput_CIGestureRecognizer* This,
        boolean value);
    HRESULT (STDMETHODCALLTYPE* get_CrossSlideExact)(__x_ABI_CWindows_CUI_CInput_CIGestureRecognizer* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* put_CrossSlideExact)(__x_ABI_CWindows_CUI_CInput_CIGestureRecognizer* This,
        boolean value);
    HRESULT (STDMETHODCALLTYPE* get_AutoProcessInertia)(__x_ABI_CWindows_CUI_CInput_CIGestureRecognizer* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* put_AutoProcessInertia)(__x_ABI_CWindows_CUI_CInput_CIGestureRecognizer* This,
        boolean value);
    HRESULT (STDMETHODCALLTYPE* get_MouseWheelParameters)(__x_ABI_CWindows_CUI_CInput_CIGestureRecognizer* This,
        __x_ABI_CWindows_CUI_CInput_CIMouseWheelParameters** value);
    HRESULT (STDMETHODCALLTYPE* CanBeDoubleTap)(__x_ABI_CWindows_CUI_CInput_CIGestureRecognizer* This,
        __x_ABI_CWindows_CUI_CInput_CIPointerPoint* value,
        boolean* canBeDoubleTap);
    HRESULT (STDMETHODCALLTYPE* ProcessDownEvent)(__x_ABI_CWindows_CUI_CInput_CIGestureRecognizer* This,
        __x_ABI_CWindows_CUI_CInput_CIPointerPoint* value);
    HRESULT (STDMETHODCALLTYPE* ProcessMoveEvents)(__x_ABI_CWindows_CUI_CInput_CIGestureRecognizer* This,
        __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CInput__CPointerPoint* value);
    HRESULT (STDMETHODCALLTYPE* ProcessUpEvent)(__x_ABI_CWindows_CUI_CInput_CIGestureRecognizer* This,
        __x_ABI_CWindows_CUI_CInput_CIPointerPoint* value);
    HRESULT (STDMETHODCALLTYPE* ProcessMouseWheelEvent)(__x_ABI_CWindows_CUI_CInput_CIGestureRecognizer* This,
        __x_ABI_CWindows_CUI_CInput_CIPointerPoint* value,
        boolean isShiftKeyDown,
        boolean isControlKeyDown);
    HRESULT (STDMETHODCALLTYPE* ProcessInertia)(__x_ABI_CWindows_CUI_CInput_CIGestureRecognizer* This);
    HRESULT (STDMETHODCALLTYPE* CompleteGesture)(__x_ABI_CWindows_CUI_CInput_CIGestureRecognizer* This);
    HRESULT (STDMETHODCALLTYPE* add_Tapped)(__x_ABI_CWindows_CUI_CInput_CIGestureRecognizer* This,
        __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CGestureRecognizer___x_ABI_CWindows__CUI__CInput__CTappedEventArgs* handler,
        EventRegistrationToken* pCookie);
    HRESULT (STDMETHODCALLTYPE* remove_Tapped)(__x_ABI_CWindows_CUI_CInput_CIGestureRecognizer* This,
        EventRegistrationToken cookie);
    HRESULT (STDMETHODCALLTYPE* add_RightTapped)(__x_ABI_CWindows_CUI_CInput_CIGestureRecognizer* This,
        __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CGestureRecognizer___x_ABI_CWindows__CUI__CInput__CRightTappedEventArgs* handler,
        EventRegistrationToken* pCookie);
    HRESULT (STDMETHODCALLTYPE* remove_RightTapped)(__x_ABI_CWindows_CUI_CInput_CIGestureRecognizer* This,
        EventRegistrationToken cookie);
    HRESULT (STDMETHODCALLTYPE* add_Holding)(__x_ABI_CWindows_CUI_CInput_CIGestureRecognizer* This,
        __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CGestureRecognizer___x_ABI_CWindows__CUI__CInput__CHoldingEventArgs* handler,
        EventRegistrationToken* pCookie);
    HRESULT (STDMETHODCALLTYPE* remove_Holding)(__x_ABI_CWindows_CUI_CInput_CIGestureRecognizer* This,
        EventRegistrationToken cookie);
    HRESULT (STDMETHODCALLTYPE* add_Dragging)(__x_ABI_CWindows_CUI_CInput_CIGestureRecognizer* This,
        __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CGestureRecognizer___x_ABI_CWindows__CUI__CInput__CDraggingEventArgs* handler,
        EventRegistrationToken* pCookie);
    HRESULT (STDMETHODCALLTYPE* remove_Dragging)(__x_ABI_CWindows_CUI_CInput_CIGestureRecognizer* This,
        EventRegistrationToken cookie);
    HRESULT (STDMETHODCALLTYPE* add_ManipulationStarted)(__x_ABI_CWindows_CUI_CInput_CIGestureRecognizer* This,
        __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CGestureRecognizer___x_ABI_CWindows__CUI__CInput__CManipulationStartedEventArgs* handler,
        EventRegistrationToken* pCookie);
    HRESULT (STDMETHODCALLTYPE* remove_ManipulationStarted)(__x_ABI_CWindows_CUI_CInput_CIGestureRecognizer* This,
        EventRegistrationToken cookie);
    HRESULT (STDMETHODCALLTYPE* add_ManipulationUpdated)(__x_ABI_CWindows_CUI_CInput_CIGestureRecognizer* This,
        __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CGestureRecognizer___x_ABI_CWindows__CUI__CInput__CManipulationUpdatedEventArgs* handler,
        EventRegistrationToken* pCookie);
    HRESULT (STDMETHODCALLTYPE* remove_ManipulationUpdated)(__x_ABI_CWindows_CUI_CInput_CIGestureRecognizer* This,
        EventRegistrationToken cookie);
    HRESULT (STDMETHODCALLTYPE* add_ManipulationInertiaStarting)(__x_ABI_CWindows_CUI_CInput_CIGestureRecognizer* This,
        __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CGestureRecognizer___x_ABI_CWindows__CUI__CInput__CManipulationInertiaStartingEventArgs* handler,
        EventRegistrationToken* pCookie);
    HRESULT (STDMETHODCALLTYPE* remove_ManipulationInertiaStarting)(__x_ABI_CWindows_CUI_CInput_CIGestureRecognizer* This,
        EventRegistrationToken cookie);
    HRESULT (STDMETHODCALLTYPE* add_ManipulationCompleted)(__x_ABI_CWindows_CUI_CInput_CIGestureRecognizer* This,
        __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CGestureRecognizer___x_ABI_CWindows__CUI__CInput__CManipulationCompletedEventArgs* handler,
        EventRegistrationToken* pCookie);
    HRESULT (STDMETHODCALLTYPE* remove_ManipulationCompleted)(__x_ABI_CWindows_CUI_CInput_CIGestureRecognizer* This,
        EventRegistrationToken cookie);
    HRESULT (STDMETHODCALLTYPE* add_CrossSliding)(__x_ABI_CWindows_CUI_CInput_CIGestureRecognizer* This,
        __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CGestureRecognizer___x_ABI_CWindows__CUI__CInput__CCrossSlidingEventArgs* handler,
        EventRegistrationToken* pCookie);
    HRESULT (STDMETHODCALLTYPE* remove_CrossSliding)(__x_ABI_CWindows_CUI_CInput_CIGestureRecognizer* This,
        EventRegistrationToken cookie);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CInput_CIGestureRecognizerVtbl;

    interface __x_ABI_CWindows_CUI_CInput_CIGestureRecognizer
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CInput_CIGestureRecognizerVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CInput_CIGestureRecognizer;
#endif /* !defined(____x_ABI_CWindows_CUI_CInput_CIGestureRecognizer_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CInput_CIHoldingEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CInput_CIHoldingEventArgs_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CInput_CIHoldingEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CInput_CIHoldingEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CInput_CIHoldingEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CInput_CIHoldingEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CInput_CIHoldingEventArgs* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CInput_CIHoldingEventArgs* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CInput_CIHoldingEventArgs* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_PointerDeviceType)(__x_ABI_CWindows_CUI_CInput_CIHoldingEventArgs* This,
        enum __x_ABI_CWindows_CDevices_CInput_CPointerDeviceType* value);
    HRESULT (STDMETHODCALLTYPE* get_Position)(__x_ABI_CWindows_CUI_CInput_CIHoldingEventArgs* This,
        struct __x_ABI_CWindows_CFoundation_CPoint* value);
    HRESULT (STDMETHODCALLTYPE* get_HoldingState)(__x_ABI_CWindows_CUI_CInput_CIHoldingEventArgs* This,
        enum __x_ABI_CWindows_CUI_CInput_CHoldingState* value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CInput_CIHoldingEventArgsVtbl;

    interface __x_ABI_CWindows_CUI_CInput_CIHoldingEventArgs
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CInput_CIHoldingEventArgsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CInput_CIHoldingEventArgs;
#endif /* !defined(____x_ABI_CWindows_CUI_CInput_CIHoldingEventArgs_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CInput_CIInputActivationListener_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CInput_CIInputActivationListener_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CInput_CIInputActivationListenerVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CInput_CIInputActivationListener* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CInput_CIInputActivationListener* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CInput_CIInputActivationListener* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CInput_CIInputActivationListener* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CInput_CIInputActivationListener* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CInput_CIInputActivationListener* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_State)(__x_ABI_CWindows_CUI_CInput_CIInputActivationListener* This,
        enum __x_ABI_CWindows_CUI_CInput_CInputActivationState* value);
    HRESULT (STDMETHODCALLTYPE* add_InputActivationChanged)(__x_ABI_CWindows_CUI_CInput_CIInputActivationListener* This,
        __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CInputActivationListener___x_ABI_CWindows__CUI__CInput__CInputActivationListenerActivationChangedEventArgs* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_InputActivationChanged)(__x_ABI_CWindows_CUI_CInput_CIInputActivationListener* This,
        EventRegistrationToken token);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CInput_CIInputActivationListenerVtbl;

    interface __x_ABI_CWindows_CUI_CInput_CIInputActivationListener
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CInput_CIInputActivationListenerVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CInput_CIInputActivationListener;
#endif /* !defined(____x_ABI_CWindows_CUI_CInput_CIInputActivationListener_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CInput_CIInputActivationListenerActivationChangedEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CInput_CIInputActivationListenerActivationChangedEventArgs_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CInput_CIInputActivationListenerActivationChangedEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CInput_CIInputActivationListenerActivationChangedEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CInput_CIInputActivationListenerActivationChangedEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CInput_CIInputActivationListenerActivationChangedEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CInput_CIInputActivationListenerActivationChangedEventArgs* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CInput_CIInputActivationListenerActivationChangedEventArgs* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CInput_CIInputActivationListenerActivationChangedEventArgs* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_State)(__x_ABI_CWindows_CUI_CInput_CIInputActivationListenerActivationChangedEventArgs* This,
        enum __x_ABI_CWindows_CUI_CInput_CInputActivationState* value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CInput_CIInputActivationListenerActivationChangedEventArgsVtbl;

    interface __x_ABI_CWindows_CUI_CInput_CIInputActivationListenerActivationChangedEventArgs
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CInput_CIInputActivationListenerActivationChangedEventArgsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CInput_CIInputActivationListenerActivationChangedEventArgs;
#endif /* !defined(____x_ABI_CWindows_CUI_CInput_CIInputActivationListenerActivationChangedEventArgs_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CInput_CIKeyboardDeliveryInterceptor_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CInput_CIKeyboardDeliveryInterceptor_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CInput_CIKeyboardDeliveryInterceptorVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CInput_CIKeyboardDeliveryInterceptor* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CInput_CIKeyboardDeliveryInterceptor* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CInput_CIKeyboardDeliveryInterceptor* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CInput_CIKeyboardDeliveryInterceptor* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CInput_CIKeyboardDeliveryInterceptor* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CInput_CIKeyboardDeliveryInterceptor* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_IsInterceptionEnabledWhenInForeground)(__x_ABI_CWindows_CUI_CInput_CIKeyboardDeliveryInterceptor* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* put_IsInterceptionEnabledWhenInForeground)(__x_ABI_CWindows_CUI_CInput_CIKeyboardDeliveryInterceptor* This,
        boolean value);
    HRESULT (STDMETHODCALLTYPE* add_KeyDown)(__x_ABI_CWindows_CUI_CInput_CIKeyboardDeliveryInterceptor* This,
        __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CKeyboardDeliveryInterceptor___x_ABI_CWindows__CUI__CCore__CKeyEventArgs* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_KeyDown)(__x_ABI_CWindows_CUI_CInput_CIKeyboardDeliveryInterceptor* This,
        EventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* add_KeyUp)(__x_ABI_CWindows_CUI_CInput_CIKeyboardDeliveryInterceptor* This,
        __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CKeyboardDeliveryInterceptor___x_ABI_CWindows__CUI__CCore__CKeyEventArgs* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_KeyUp)(__x_ABI_CWindows_CUI_CInput_CIKeyboardDeliveryInterceptor* This,
        EventRegistrationToken token);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CInput_CIKeyboardDeliveryInterceptorVtbl;

    interface __x_ABI_CWindows_CUI_CInput_CIKeyboardDeliveryInterceptor
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CInput_CIKeyboardDeliveryInterceptorVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CInput_CIKeyboardDeliveryInterceptor;
#endif /* !defined(____x_ABI_CWindows_CUI_CInput_CIKeyboardDeliveryInterceptor_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CInput_CIKeyboardDeliveryInterceptorStatics_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CInput_CIKeyboardDeliveryInterceptorStatics_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CInput_CIKeyboardDeliveryInterceptorStaticsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CInput_CIKeyboardDeliveryInterceptorStatics* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CInput_CIKeyboardDeliveryInterceptorStatics* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CInput_CIKeyboardDeliveryInterceptorStatics* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CInput_CIKeyboardDeliveryInterceptorStatics* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CInput_CIKeyboardDeliveryInterceptorStatics* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CInput_CIKeyboardDeliveryInterceptorStatics* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetForCurrentView)(__x_ABI_CWindows_CUI_CInput_CIKeyboardDeliveryInterceptorStatics* This,
        __x_ABI_CWindows_CUI_CInput_CIKeyboardDeliveryInterceptor** keyboardDeliverySettings);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CInput_CIKeyboardDeliveryInterceptorStaticsVtbl;

    interface __x_ABI_CWindows_CUI_CInput_CIKeyboardDeliveryInterceptorStatics
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CInput_CIKeyboardDeliveryInterceptorStaticsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CInput_CIKeyboardDeliveryInterceptorStatics;
#endif /* !defined(____x_ABI_CWindows_CUI_CInput_CIKeyboardDeliveryInterceptorStatics_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CInput_CIManipulationCompletedEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CInput_CIManipulationCompletedEventArgs_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CInput_CIManipulationCompletedEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CInput_CIManipulationCompletedEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CInput_CIManipulationCompletedEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CInput_CIManipulationCompletedEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CInput_CIManipulationCompletedEventArgs* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CInput_CIManipulationCompletedEventArgs* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CInput_CIManipulationCompletedEventArgs* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_PointerDeviceType)(__x_ABI_CWindows_CUI_CInput_CIManipulationCompletedEventArgs* This,
        enum __x_ABI_CWindows_CDevices_CInput_CPointerDeviceType* value);
    HRESULT (STDMETHODCALLTYPE* get_Position)(__x_ABI_CWindows_CUI_CInput_CIManipulationCompletedEventArgs* This,
        struct __x_ABI_CWindows_CFoundation_CPoint* value);
    HRESULT (STDMETHODCALLTYPE* get_Cumulative)(__x_ABI_CWindows_CUI_CInput_CIManipulationCompletedEventArgs* This,
        struct __x_ABI_CWindows_CUI_CInput_CManipulationDelta* value);
    HRESULT (STDMETHODCALLTYPE* get_Velocities)(__x_ABI_CWindows_CUI_CInput_CIManipulationCompletedEventArgs* This,
        struct __x_ABI_CWindows_CUI_CInput_CManipulationVelocities* value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CInput_CIManipulationCompletedEventArgsVtbl;

    interface __x_ABI_CWindows_CUI_CInput_CIManipulationCompletedEventArgs
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CInput_CIManipulationCompletedEventArgsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CInput_CIManipulationCompletedEventArgs;
#endif /* !defined(____x_ABI_CWindows_CUI_CInput_CIManipulationCompletedEventArgs_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CInput_CIManipulationInertiaStartingEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CInput_CIManipulationInertiaStartingEventArgs_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CInput_CIManipulationInertiaStartingEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CInput_CIManipulationInertiaStartingEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CInput_CIManipulationInertiaStartingEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CInput_CIManipulationInertiaStartingEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CInput_CIManipulationInertiaStartingEventArgs* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CInput_CIManipulationInertiaStartingEventArgs* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CInput_CIManipulationInertiaStartingEventArgs* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_PointerDeviceType)(__x_ABI_CWindows_CUI_CInput_CIManipulationInertiaStartingEventArgs* This,
        enum __x_ABI_CWindows_CDevices_CInput_CPointerDeviceType* value);
    HRESULT (STDMETHODCALLTYPE* get_Position)(__x_ABI_CWindows_CUI_CInput_CIManipulationInertiaStartingEventArgs* This,
        struct __x_ABI_CWindows_CFoundation_CPoint* value);
    HRESULT (STDMETHODCALLTYPE* get_Delta)(__x_ABI_CWindows_CUI_CInput_CIManipulationInertiaStartingEventArgs* This,
        struct __x_ABI_CWindows_CUI_CInput_CManipulationDelta* value);
    HRESULT (STDMETHODCALLTYPE* get_Cumulative)(__x_ABI_CWindows_CUI_CInput_CIManipulationInertiaStartingEventArgs* This,
        struct __x_ABI_CWindows_CUI_CInput_CManipulationDelta* value);
    HRESULT (STDMETHODCALLTYPE* get_Velocities)(__x_ABI_CWindows_CUI_CInput_CIManipulationInertiaStartingEventArgs* This,
        struct __x_ABI_CWindows_CUI_CInput_CManipulationVelocities* value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CInput_CIManipulationInertiaStartingEventArgsVtbl;

    interface __x_ABI_CWindows_CUI_CInput_CIManipulationInertiaStartingEventArgs
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CInput_CIManipulationInertiaStartingEventArgsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CInput_CIManipulationInertiaStartingEventArgs;
#endif /* !defined(____x_ABI_CWindows_CUI_CInput_CIManipulationInertiaStartingEventArgs_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CInput_CIManipulationStartedEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CInput_CIManipulationStartedEventArgs_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CInput_CIManipulationStartedEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CInput_CIManipulationStartedEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CInput_CIManipulationStartedEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CInput_CIManipulationStartedEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CInput_CIManipulationStartedEventArgs* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CInput_CIManipulationStartedEventArgs* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CInput_CIManipulationStartedEventArgs* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_PointerDeviceType)(__x_ABI_CWindows_CUI_CInput_CIManipulationStartedEventArgs* This,
        enum __x_ABI_CWindows_CDevices_CInput_CPointerDeviceType* value);
    HRESULT (STDMETHODCALLTYPE* get_Position)(__x_ABI_CWindows_CUI_CInput_CIManipulationStartedEventArgs* This,
        struct __x_ABI_CWindows_CFoundation_CPoint* value);
    HRESULT (STDMETHODCALLTYPE* get_Cumulative)(__x_ABI_CWindows_CUI_CInput_CIManipulationStartedEventArgs* This,
        struct __x_ABI_CWindows_CUI_CInput_CManipulationDelta* value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CInput_CIManipulationStartedEventArgsVtbl;

    interface __x_ABI_CWindows_CUI_CInput_CIManipulationStartedEventArgs
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CInput_CIManipulationStartedEventArgsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CInput_CIManipulationStartedEventArgs;
#endif /* !defined(____x_ABI_CWindows_CUI_CInput_CIManipulationStartedEventArgs_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CInput_CIManipulationUpdatedEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CInput_CIManipulationUpdatedEventArgs_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CInput_CIManipulationUpdatedEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CInput_CIManipulationUpdatedEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CInput_CIManipulationUpdatedEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CInput_CIManipulationUpdatedEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CInput_CIManipulationUpdatedEventArgs* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CInput_CIManipulationUpdatedEventArgs* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CInput_CIManipulationUpdatedEventArgs* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_PointerDeviceType)(__x_ABI_CWindows_CUI_CInput_CIManipulationUpdatedEventArgs* This,
        enum __x_ABI_CWindows_CDevices_CInput_CPointerDeviceType* value);
    HRESULT (STDMETHODCALLTYPE* get_Position)(__x_ABI_CWindows_CUI_CInput_CIManipulationUpdatedEventArgs* This,
        struct __x_ABI_CWindows_CFoundation_CPoint* value);
    HRESULT (STDMETHODCALLTYPE* get_Delta)(__x_ABI_CWindows_CUI_CInput_CIManipulationUpdatedEventArgs* This,
        struct __x_ABI_CWindows_CUI_CInput_CManipulationDelta* value);
    HRESULT (STDMETHODCALLTYPE* get_Cumulative)(__x_ABI_CWindows_CUI_CInput_CIManipulationUpdatedEventArgs* This,
        struct __x_ABI_CWindows_CUI_CInput_CManipulationDelta* value);
    HRESULT (STDMETHODCALLTYPE* get_Velocities)(__x_ABI_CWindows_CUI_CInput_CIManipulationUpdatedEventArgs* This,
        struct __x_ABI_CWindows_CUI_CInput_CManipulationVelocities* value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CInput_CIManipulationUpdatedEventArgsVtbl;

    interface __x_ABI_CWindows_CUI_CInput_CIManipulationUpdatedEventArgs
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CInput_CIManipulationUpdatedEventArgsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CInput_CIManipulationUpdatedEventArgs;
#endif /* !defined(____x_ABI_CWindows_CUI_CInput_CIManipulationUpdatedEventArgs_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CInput_CIMouseWheelParameters_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CInput_CIMouseWheelParameters_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CInput_CIMouseWheelParametersVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CInput_CIMouseWheelParameters* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CInput_CIMouseWheelParameters* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CInput_CIMouseWheelParameters* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CInput_CIMouseWheelParameters* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CInput_CIMouseWheelParameters* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CInput_CIMouseWheelParameters* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_CharTranslation)(__x_ABI_CWindows_CUI_CInput_CIMouseWheelParameters* This,
        struct __x_ABI_CWindows_CFoundation_CPoint* value);
    HRESULT (STDMETHODCALLTYPE* put_CharTranslation)(__x_ABI_CWindows_CUI_CInput_CIMouseWheelParameters* This,
        struct __x_ABI_CWindows_CFoundation_CPoint value);
    HRESULT (STDMETHODCALLTYPE* get_DeltaScale)(__x_ABI_CWindows_CUI_CInput_CIMouseWheelParameters* This,
        FLOAT* value);
    HRESULT (STDMETHODCALLTYPE* put_DeltaScale)(__x_ABI_CWindows_CUI_CInput_CIMouseWheelParameters* This,
        FLOAT value);
    HRESULT (STDMETHODCALLTYPE* get_DeltaRotationAngle)(__x_ABI_CWindows_CUI_CInput_CIMouseWheelParameters* This,
        FLOAT* value);
    HRESULT (STDMETHODCALLTYPE* put_DeltaRotationAngle)(__x_ABI_CWindows_CUI_CInput_CIMouseWheelParameters* This,
        FLOAT value);
    HRESULT (STDMETHODCALLTYPE* get_PageTranslation)(__x_ABI_CWindows_CUI_CInput_CIMouseWheelParameters* This,
        struct __x_ABI_CWindows_CFoundation_CPoint* value);
    HRESULT (STDMETHODCALLTYPE* put_PageTranslation)(__x_ABI_CWindows_CUI_CInput_CIMouseWheelParameters* This,
        struct __x_ABI_CWindows_CFoundation_CPoint value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CInput_CIMouseWheelParametersVtbl;

    interface __x_ABI_CWindows_CUI_CInput_CIMouseWheelParameters
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CInput_CIMouseWheelParametersVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CInput_CIMouseWheelParameters;
#endif /* !defined(____x_ABI_CWindows_CUI_CInput_CIMouseWheelParameters_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CInput_CIPointerPoint_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CInput_CIPointerPoint_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CInput_CIPointerPointVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CInput_CIPointerPoint* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CInput_CIPointerPoint* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CInput_CIPointerPoint* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CInput_CIPointerPoint* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CInput_CIPointerPoint* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CInput_CIPointerPoint* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_PointerDevice)(__x_ABI_CWindows_CUI_CInput_CIPointerPoint* This,
        __x_ABI_CWindows_CDevices_CInput_CIPointerDevice** value);
    HRESULT (STDMETHODCALLTYPE* get_Position)(__x_ABI_CWindows_CUI_CInput_CIPointerPoint* This,
        struct __x_ABI_CWindows_CFoundation_CPoint* value);
    HRESULT (STDMETHODCALLTYPE* get_RawPosition)(__x_ABI_CWindows_CUI_CInput_CIPointerPoint* This,
        struct __x_ABI_CWindows_CFoundation_CPoint* value);
    HRESULT (STDMETHODCALLTYPE* get_PointerId)(__x_ABI_CWindows_CUI_CInput_CIPointerPoint* This,
        UINT32* value);
    HRESULT (STDMETHODCALLTYPE* get_FrameId)(__x_ABI_CWindows_CUI_CInput_CIPointerPoint* This,
        UINT32* value);
    HRESULT (STDMETHODCALLTYPE* get_Timestamp)(__x_ABI_CWindows_CUI_CInput_CIPointerPoint* This,
        UINT64* value);
    HRESULT (STDMETHODCALLTYPE* get_IsInContact)(__x_ABI_CWindows_CUI_CInput_CIPointerPoint* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* get_Properties)(__x_ABI_CWindows_CUI_CInput_CIPointerPoint* This,
        __x_ABI_CWindows_CUI_CInput_CIPointerPointProperties** value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CInput_CIPointerPointVtbl;

    interface __x_ABI_CWindows_CUI_CInput_CIPointerPoint
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CInput_CIPointerPointVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CInput_CIPointerPoint;
#endif /* !defined(____x_ABI_CWindows_CUI_CInput_CIPointerPoint_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CInput_CIPointerPointProperties_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CInput_CIPointerPointProperties_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CInput_CIPointerPointPropertiesVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CInput_CIPointerPointProperties* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CInput_CIPointerPointProperties* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CInput_CIPointerPointProperties* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CInput_CIPointerPointProperties* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CInput_CIPointerPointProperties* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CInput_CIPointerPointProperties* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Pressure)(__x_ABI_CWindows_CUI_CInput_CIPointerPointProperties* This,
        FLOAT* value);
    HRESULT (STDMETHODCALLTYPE* get_IsInverted)(__x_ABI_CWindows_CUI_CInput_CIPointerPointProperties* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* get_IsEraser)(__x_ABI_CWindows_CUI_CInput_CIPointerPointProperties* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* get_Orientation)(__x_ABI_CWindows_CUI_CInput_CIPointerPointProperties* This,
        FLOAT* value);
    HRESULT (STDMETHODCALLTYPE* get_XTilt)(__x_ABI_CWindows_CUI_CInput_CIPointerPointProperties* This,
        FLOAT* value);
    HRESULT (STDMETHODCALLTYPE* get_YTilt)(__x_ABI_CWindows_CUI_CInput_CIPointerPointProperties* This,
        FLOAT* value);
    HRESULT (STDMETHODCALLTYPE* get_Twist)(__x_ABI_CWindows_CUI_CInput_CIPointerPointProperties* This,
        FLOAT* value);
    HRESULT (STDMETHODCALLTYPE* get_ContactRect)(__x_ABI_CWindows_CUI_CInput_CIPointerPointProperties* This,
        struct __x_ABI_CWindows_CFoundation_CRect* value);
    HRESULT (STDMETHODCALLTYPE* get_ContactRectRaw)(__x_ABI_CWindows_CUI_CInput_CIPointerPointProperties* This,
        struct __x_ABI_CWindows_CFoundation_CRect* value);
    HRESULT (STDMETHODCALLTYPE* get_TouchConfidence)(__x_ABI_CWindows_CUI_CInput_CIPointerPointProperties* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* get_IsLeftButtonPressed)(__x_ABI_CWindows_CUI_CInput_CIPointerPointProperties* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* get_IsRightButtonPressed)(__x_ABI_CWindows_CUI_CInput_CIPointerPointProperties* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* get_IsMiddleButtonPressed)(__x_ABI_CWindows_CUI_CInput_CIPointerPointProperties* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* get_MouseWheelDelta)(__x_ABI_CWindows_CUI_CInput_CIPointerPointProperties* This,
        INT32* value);
    HRESULT (STDMETHODCALLTYPE* get_IsHorizontalMouseWheel)(__x_ABI_CWindows_CUI_CInput_CIPointerPointProperties* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* get_IsPrimary)(__x_ABI_CWindows_CUI_CInput_CIPointerPointProperties* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* get_IsInRange)(__x_ABI_CWindows_CUI_CInput_CIPointerPointProperties* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* get_IsCanceled)(__x_ABI_CWindows_CUI_CInput_CIPointerPointProperties* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* get_IsBarrelButtonPressed)(__x_ABI_CWindows_CUI_CInput_CIPointerPointProperties* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* get_IsXButton1Pressed)(__x_ABI_CWindows_CUI_CInput_CIPointerPointProperties* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* get_IsXButton2Pressed)(__x_ABI_CWindows_CUI_CInput_CIPointerPointProperties* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* get_PointerUpdateKind)(__x_ABI_CWindows_CUI_CInput_CIPointerPointProperties* This,
        enum __x_ABI_CWindows_CUI_CInput_CPointerUpdateKind* value);
    HRESULT (STDMETHODCALLTYPE* HasUsage)(__x_ABI_CWindows_CUI_CInput_CIPointerPointProperties* This,
        UINT32 usagePage,
        UINT32 usageId,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* GetUsageValue)(__x_ABI_CWindows_CUI_CInput_CIPointerPointProperties* This,
        UINT32 usagePage,
        UINT32 usageId,
        INT32* value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CInput_CIPointerPointPropertiesVtbl;

    interface __x_ABI_CWindows_CUI_CInput_CIPointerPointProperties
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CInput_CIPointerPointPropertiesVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CInput_CIPointerPointProperties;
#endif /* !defined(____x_ABI_CWindows_CUI_CInput_CIPointerPointProperties_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CInput_CIPointerPointProperties2_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CInput_CIPointerPointProperties2_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CInput_CIPointerPointProperties2Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CInput_CIPointerPointProperties2* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CInput_CIPointerPointProperties2* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CInput_CIPointerPointProperties2* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CInput_CIPointerPointProperties2* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CInput_CIPointerPointProperties2* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CInput_CIPointerPointProperties2* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_ZDistance)(__x_ABI_CWindows_CUI_CInput_CIPointerPointProperties2* This,
        __x_ABI_C__FIReference_1_float** value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CInput_CIPointerPointProperties2Vtbl;

    interface __x_ABI_CWindows_CUI_CInput_CIPointerPointProperties2
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CInput_CIPointerPointProperties2Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CInput_CIPointerPointProperties2;
#endif /* !defined(____x_ABI_CWindows_CUI_CInput_CIPointerPointProperties2_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CInput_CIPointerPointStatics_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CInput_CIPointerPointStatics_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CInput_CIPointerPointStaticsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CInput_CIPointerPointStatics* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CInput_CIPointerPointStatics* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CInput_CIPointerPointStatics* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CInput_CIPointerPointStatics* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CInput_CIPointerPointStatics* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CInput_CIPointerPointStatics* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetCurrentPoint)(__x_ABI_CWindows_CUI_CInput_CIPointerPointStatics* This,
        UINT32 pointerId,
        __x_ABI_CWindows_CUI_CInput_CIPointerPoint** pointerPoint);
    HRESULT (STDMETHODCALLTYPE* GetIntermediatePoints)(__x_ABI_CWindows_CUI_CInput_CIPointerPointStatics* This,
        UINT32 pointerId,
        __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CInput__CPointerPoint** pointerPoints);
    HRESULT (STDMETHODCALLTYPE* GetCurrentPointTransformed)(__x_ABI_CWindows_CUI_CInput_CIPointerPointStatics* This,
        UINT32 pointerId,
        __x_ABI_CWindows_CUI_CInput_CIPointerPointTransform* transform,
        __x_ABI_CWindows_CUI_CInput_CIPointerPoint** pointerPoint);
    HRESULT (STDMETHODCALLTYPE* GetIntermediatePointsTransformed)(__x_ABI_CWindows_CUI_CInput_CIPointerPointStatics* This,
        UINT32 pointerId,
        __x_ABI_CWindows_CUI_CInput_CIPointerPointTransform* transform,
        __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CInput__CPointerPoint** pointerPoints);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CInput_CIPointerPointStaticsVtbl;

    interface __x_ABI_CWindows_CUI_CInput_CIPointerPointStatics
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CInput_CIPointerPointStaticsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CInput_CIPointerPointStatics;
#endif /* !defined(____x_ABI_CWindows_CUI_CInput_CIPointerPointStatics_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CInput_CIPointerPointTransform_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CInput_CIPointerPointTransform_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CInput_CIPointerPointTransformVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CInput_CIPointerPointTransform* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CInput_CIPointerPointTransform* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CInput_CIPointerPointTransform* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CInput_CIPointerPointTransform* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CInput_CIPointerPointTransform* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CInput_CIPointerPointTransform* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Inverse)(__x_ABI_CWindows_CUI_CInput_CIPointerPointTransform* This,
        __x_ABI_CWindows_CUI_CInput_CIPointerPointTransform** value);
    HRESULT (STDMETHODCALLTYPE* TryTransform)(__x_ABI_CWindows_CUI_CInput_CIPointerPointTransform* This,
        struct __x_ABI_CWindows_CFoundation_CPoint inPoint,
        struct __x_ABI_CWindows_CFoundation_CPoint* outPoint,
        boolean* returnValue);
    HRESULT (STDMETHODCALLTYPE* TransformBounds)(__x_ABI_CWindows_CUI_CInput_CIPointerPointTransform* This,
        struct __x_ABI_CWindows_CFoundation_CRect rect,
        struct __x_ABI_CWindows_CFoundation_CRect* returnValue);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CInput_CIPointerPointTransformVtbl;

    interface __x_ABI_CWindows_CUI_CInput_CIPointerPointTransform
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CInput_CIPointerPointTransformVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CInput_CIPointerPointTransform;
#endif /* !defined(____x_ABI_CWindows_CUI_CInput_CIPointerPointTransform_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CInput_CIPointerVisualizationSettings_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CInput_CIPointerVisualizationSettings_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CInput_CIPointerVisualizationSettingsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CInput_CIPointerVisualizationSettings* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CInput_CIPointerVisualizationSettings* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CInput_CIPointerVisualizationSettings* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CInput_CIPointerVisualizationSettings* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CInput_CIPointerVisualizationSettings* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CInput_CIPointerVisualizationSettings* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* put_IsContactFeedbackEnabled)(__x_ABI_CWindows_CUI_CInput_CIPointerVisualizationSettings* This,
        boolean value);
    HRESULT (STDMETHODCALLTYPE* get_IsContactFeedbackEnabled)(__x_ABI_CWindows_CUI_CInput_CIPointerVisualizationSettings* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* put_IsBarrelButtonFeedbackEnabled)(__x_ABI_CWindows_CUI_CInput_CIPointerVisualizationSettings* This,
        boolean value);
    HRESULT (STDMETHODCALLTYPE* get_IsBarrelButtonFeedbackEnabled)(__x_ABI_CWindows_CUI_CInput_CIPointerVisualizationSettings* This,
        boolean* value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CInput_CIPointerVisualizationSettingsVtbl;

    interface __x_ABI_CWindows_CUI_CInput_CIPointerVisualizationSettings
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CInput_CIPointerVisualizationSettingsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CInput_CIPointerVisualizationSettings;
#endif /* !defined(____x_ABI_CWindows_CUI_CInput_CIPointerVisualizationSettings_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CInput_CIPointerVisualizationSettingsStatics_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CInput_CIPointerVisualizationSettingsStatics_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CInput_CIPointerVisualizationSettingsStaticsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CInput_CIPointerVisualizationSettingsStatics* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CInput_CIPointerVisualizationSettingsStatics* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CInput_CIPointerVisualizationSettingsStatics* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CInput_CIPointerVisualizationSettingsStatics* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CInput_CIPointerVisualizationSettingsStatics* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CInput_CIPointerVisualizationSettingsStatics* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetForCurrentView)(__x_ABI_CWindows_CUI_CInput_CIPointerVisualizationSettingsStatics* This,
        __x_ABI_CWindows_CUI_CInput_CIPointerVisualizationSettings** visualizationSettings);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CInput_CIPointerVisualizationSettingsStaticsVtbl;

    interface __x_ABI_CWindows_CUI_CInput_CIPointerVisualizationSettingsStatics
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CInput_CIPointerVisualizationSettingsStaticsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CInput_CIPointerVisualizationSettingsStatics;
#endif /* !defined(____x_ABI_CWindows_CUI_CInput_CIPointerVisualizationSettingsStatics_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CInput_CIRadialController_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CInput_CIRadialController_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CInput_CIRadialControllerVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CInput_CIRadialController* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CInput_CIRadialController* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CInput_CIRadialController* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CInput_CIRadialController* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CInput_CIRadialController* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CInput_CIRadialController* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Menu)(__x_ABI_CWindows_CUI_CInput_CIRadialController* This,
        __x_ABI_CWindows_CUI_CInput_CIRadialControllerMenu** value);
    HRESULT (STDMETHODCALLTYPE* get_RotationResolutionInDegrees)(__x_ABI_CWindows_CUI_CInput_CIRadialController* This,
        DOUBLE* value);
    HRESULT (STDMETHODCALLTYPE* put_RotationResolutionInDegrees)(__x_ABI_CWindows_CUI_CInput_CIRadialController* This,
        DOUBLE value);
    HRESULT (STDMETHODCALLTYPE* get_UseAutomaticHapticFeedback)(__x_ABI_CWindows_CUI_CInput_CIRadialController* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* put_UseAutomaticHapticFeedback)(__x_ABI_CWindows_CUI_CInput_CIRadialController* This,
        boolean value);
    HRESULT (STDMETHODCALLTYPE* add_ScreenContactStarted)(__x_ABI_CWindows_CUI_CInput_CIRadialController* This,
        __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CRadialController___x_ABI_CWindows__CUI__CInput__CRadialControllerScreenContactStartedEventArgs* handler,
        EventRegistrationToken* cookie);
    HRESULT (STDMETHODCALLTYPE* remove_ScreenContactStarted)(__x_ABI_CWindows_CUI_CInput_CIRadialController* This,
        EventRegistrationToken cookie);
    HRESULT (STDMETHODCALLTYPE* add_ScreenContactEnded)(__x_ABI_CWindows_CUI_CInput_CIRadialController* This,
        __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CRadialController_IInspectable* handler,
        EventRegistrationToken* cookie);
    HRESULT (STDMETHODCALLTYPE* remove_ScreenContactEnded)(__x_ABI_CWindows_CUI_CInput_CIRadialController* This,
        EventRegistrationToken cookie);
    HRESULT (STDMETHODCALLTYPE* add_ScreenContactContinued)(__x_ABI_CWindows_CUI_CInput_CIRadialController* This,
        __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CRadialController___x_ABI_CWindows__CUI__CInput__CRadialControllerScreenContactContinuedEventArgs* handler,
        EventRegistrationToken* cookie);
    HRESULT (STDMETHODCALLTYPE* remove_ScreenContactContinued)(__x_ABI_CWindows_CUI_CInput_CIRadialController* This,
        EventRegistrationToken cookie);
    HRESULT (STDMETHODCALLTYPE* add_ControlLost)(__x_ABI_CWindows_CUI_CInput_CIRadialController* This,
        __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CRadialController_IInspectable* handler,
        EventRegistrationToken* cookie);
    HRESULT (STDMETHODCALLTYPE* remove_ControlLost)(__x_ABI_CWindows_CUI_CInput_CIRadialController* This,
        EventRegistrationToken cookie);
    HRESULT (STDMETHODCALLTYPE* add_RotationChanged)(__x_ABI_CWindows_CUI_CInput_CIRadialController* This,
        __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CRadialController___x_ABI_CWindows__CUI__CInput__CRadialControllerRotationChangedEventArgs* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_RotationChanged)(__x_ABI_CWindows_CUI_CInput_CIRadialController* This,
        EventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* add_ButtonClicked)(__x_ABI_CWindows_CUI_CInput_CIRadialController* This,
        __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CRadialController___x_ABI_CWindows__CUI__CInput__CRadialControllerButtonClickedEventArgs* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_ButtonClicked)(__x_ABI_CWindows_CUI_CInput_CIRadialController* This,
        EventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* add_ControlAcquired)(__x_ABI_CWindows_CUI_CInput_CIRadialController* This,
        __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CRadialController___x_ABI_CWindows__CUI__CInput__CRadialControllerControlAcquiredEventArgs* handler,
        EventRegistrationToken* cookie);
    HRESULT (STDMETHODCALLTYPE* remove_ControlAcquired)(__x_ABI_CWindows_CUI_CInput_CIRadialController* This,
        EventRegistrationToken cookie);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CInput_CIRadialControllerVtbl;

    interface __x_ABI_CWindows_CUI_CInput_CIRadialController
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CInput_CIRadialControllerVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CInput_CIRadialController;
#endif /* !defined(____x_ABI_CWindows_CUI_CInput_CIRadialController_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CInput_CIRadialController2_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CInput_CIRadialController2_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CInput_CIRadialController2Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CInput_CIRadialController2* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CInput_CIRadialController2* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CInput_CIRadialController2* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CInput_CIRadialController2* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CInput_CIRadialController2* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CInput_CIRadialController2* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* add_ButtonPressed)(__x_ABI_CWindows_CUI_CInput_CIRadialController2* This,
        __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CRadialController___x_ABI_CWindows__CUI__CInput__CRadialControllerButtonPressedEventArgs* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_ButtonPressed)(__x_ABI_CWindows_CUI_CInput_CIRadialController2* This,
        EventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* add_ButtonHolding)(__x_ABI_CWindows_CUI_CInput_CIRadialController2* This,
        __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CRadialController___x_ABI_CWindows__CUI__CInput__CRadialControllerButtonHoldingEventArgs* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_ButtonHolding)(__x_ABI_CWindows_CUI_CInput_CIRadialController2* This,
        EventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* add_ButtonReleased)(__x_ABI_CWindows_CUI_CInput_CIRadialController2* This,
        __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CRadialController___x_ABI_CWindows__CUI__CInput__CRadialControllerButtonReleasedEventArgs* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_ButtonReleased)(__x_ABI_CWindows_CUI_CInput_CIRadialController2* This,
        EventRegistrationToken token);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CInput_CIRadialController2Vtbl;

    interface __x_ABI_CWindows_CUI_CInput_CIRadialController2
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CInput_CIRadialController2Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CInput_CIRadialController2;
#endif /* !defined(____x_ABI_CWindows_CUI_CInput_CIRadialController2_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CInput_CIRadialControllerButtonClickedEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CInput_CIRadialControllerButtonClickedEventArgs_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CInput_CIRadialControllerButtonClickedEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CInput_CIRadialControllerButtonClickedEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CInput_CIRadialControllerButtonClickedEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CInput_CIRadialControllerButtonClickedEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CInput_CIRadialControllerButtonClickedEventArgs* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CInput_CIRadialControllerButtonClickedEventArgs* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CInput_CIRadialControllerButtonClickedEventArgs* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Contact)(__x_ABI_CWindows_CUI_CInput_CIRadialControllerButtonClickedEventArgs* This,
        __x_ABI_CWindows_CUI_CInput_CIRadialControllerScreenContact** value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CInput_CIRadialControllerButtonClickedEventArgsVtbl;

    interface __x_ABI_CWindows_CUI_CInput_CIRadialControllerButtonClickedEventArgs
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CInput_CIRadialControllerButtonClickedEventArgsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CInput_CIRadialControllerButtonClickedEventArgs;
#endif /* !defined(____x_ABI_CWindows_CUI_CInput_CIRadialControllerButtonClickedEventArgs_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CInput_CIRadialControllerButtonClickedEventArgs2_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CInput_CIRadialControllerButtonClickedEventArgs2_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CInput_CIRadialControllerButtonClickedEventArgs2Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CInput_CIRadialControllerButtonClickedEventArgs2* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CInput_CIRadialControllerButtonClickedEventArgs2* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CInput_CIRadialControllerButtonClickedEventArgs2* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CInput_CIRadialControllerButtonClickedEventArgs2* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CInput_CIRadialControllerButtonClickedEventArgs2* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CInput_CIRadialControllerButtonClickedEventArgs2* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_SimpleHapticsController)(__x_ABI_CWindows_CUI_CInput_CIRadialControllerButtonClickedEventArgs2* This,
        __x_ABI_CWindows_CDevices_CHaptics_CISimpleHapticsController** value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CInput_CIRadialControllerButtonClickedEventArgs2Vtbl;

    interface __x_ABI_CWindows_CUI_CInput_CIRadialControllerButtonClickedEventArgs2
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CInput_CIRadialControllerButtonClickedEventArgs2Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CInput_CIRadialControllerButtonClickedEventArgs2;
#endif /* !defined(____x_ABI_CWindows_CUI_CInput_CIRadialControllerButtonClickedEventArgs2_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CInput_CIRadialControllerButtonHoldingEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CInput_CIRadialControllerButtonHoldingEventArgs_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CInput_CIRadialControllerButtonHoldingEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CInput_CIRadialControllerButtonHoldingEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CInput_CIRadialControllerButtonHoldingEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CInput_CIRadialControllerButtonHoldingEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CInput_CIRadialControllerButtonHoldingEventArgs* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CInput_CIRadialControllerButtonHoldingEventArgs* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CInput_CIRadialControllerButtonHoldingEventArgs* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Contact)(__x_ABI_CWindows_CUI_CInput_CIRadialControllerButtonHoldingEventArgs* This,
        __x_ABI_CWindows_CUI_CInput_CIRadialControllerScreenContact** value);
    HRESULT (STDMETHODCALLTYPE* get_SimpleHapticsController)(__x_ABI_CWindows_CUI_CInput_CIRadialControllerButtonHoldingEventArgs* This,
        __x_ABI_CWindows_CDevices_CHaptics_CISimpleHapticsController** value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CInput_CIRadialControllerButtonHoldingEventArgsVtbl;

    interface __x_ABI_CWindows_CUI_CInput_CIRadialControllerButtonHoldingEventArgs
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CInput_CIRadialControllerButtonHoldingEventArgsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CInput_CIRadialControllerButtonHoldingEventArgs;
#endif /* !defined(____x_ABI_CWindows_CUI_CInput_CIRadialControllerButtonHoldingEventArgs_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CInput_CIRadialControllerButtonPressedEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CInput_CIRadialControllerButtonPressedEventArgs_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CInput_CIRadialControllerButtonPressedEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CInput_CIRadialControllerButtonPressedEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CInput_CIRadialControllerButtonPressedEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CInput_CIRadialControllerButtonPressedEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CInput_CIRadialControllerButtonPressedEventArgs* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CInput_CIRadialControllerButtonPressedEventArgs* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CInput_CIRadialControllerButtonPressedEventArgs* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Contact)(__x_ABI_CWindows_CUI_CInput_CIRadialControllerButtonPressedEventArgs* This,
        __x_ABI_CWindows_CUI_CInput_CIRadialControllerScreenContact** value);
    HRESULT (STDMETHODCALLTYPE* get_SimpleHapticsController)(__x_ABI_CWindows_CUI_CInput_CIRadialControllerButtonPressedEventArgs* This,
        __x_ABI_CWindows_CDevices_CHaptics_CISimpleHapticsController** value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CInput_CIRadialControllerButtonPressedEventArgsVtbl;

    interface __x_ABI_CWindows_CUI_CInput_CIRadialControllerButtonPressedEventArgs
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CInput_CIRadialControllerButtonPressedEventArgsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CInput_CIRadialControllerButtonPressedEventArgs;
#endif /* !defined(____x_ABI_CWindows_CUI_CInput_CIRadialControllerButtonPressedEventArgs_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CInput_CIRadialControllerButtonReleasedEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CInput_CIRadialControllerButtonReleasedEventArgs_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CInput_CIRadialControllerButtonReleasedEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CInput_CIRadialControllerButtonReleasedEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CInput_CIRadialControllerButtonReleasedEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CInput_CIRadialControllerButtonReleasedEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CInput_CIRadialControllerButtonReleasedEventArgs* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CInput_CIRadialControllerButtonReleasedEventArgs* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CInput_CIRadialControllerButtonReleasedEventArgs* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Contact)(__x_ABI_CWindows_CUI_CInput_CIRadialControllerButtonReleasedEventArgs* This,
        __x_ABI_CWindows_CUI_CInput_CIRadialControllerScreenContact** value);
    HRESULT (STDMETHODCALLTYPE* get_SimpleHapticsController)(__x_ABI_CWindows_CUI_CInput_CIRadialControllerButtonReleasedEventArgs* This,
        __x_ABI_CWindows_CDevices_CHaptics_CISimpleHapticsController** value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CInput_CIRadialControllerButtonReleasedEventArgsVtbl;

    interface __x_ABI_CWindows_CUI_CInput_CIRadialControllerButtonReleasedEventArgs
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CInput_CIRadialControllerButtonReleasedEventArgsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CInput_CIRadialControllerButtonReleasedEventArgs;
#endif /* !defined(____x_ABI_CWindows_CUI_CInput_CIRadialControllerButtonReleasedEventArgs_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CInput_CIRadialControllerConfiguration_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CInput_CIRadialControllerConfiguration_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CInput_CIRadialControllerConfigurationVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CInput_CIRadialControllerConfiguration* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CInput_CIRadialControllerConfiguration* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CInput_CIRadialControllerConfiguration* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CInput_CIRadialControllerConfiguration* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CInput_CIRadialControllerConfiguration* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CInput_CIRadialControllerConfiguration* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* SetDefaultMenuItems)(__x_ABI_CWindows_CUI_CInput_CIRadialControllerConfiguration* This,
        __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CInput__CRadialControllerSystemMenuItemKind* buttons);
    HRESULT (STDMETHODCALLTYPE* ResetToDefaultMenuItems)(__x_ABI_CWindows_CUI_CInput_CIRadialControllerConfiguration* This);
    HRESULT (STDMETHODCALLTYPE* TrySelectDefaultMenuItem)(__x_ABI_CWindows_CUI_CInput_CIRadialControllerConfiguration* This,
        enum __x_ABI_CWindows_CUI_CInput_CRadialControllerSystemMenuItemKind type,
        boolean* result);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CInput_CIRadialControllerConfigurationVtbl;

    interface __x_ABI_CWindows_CUI_CInput_CIRadialControllerConfiguration
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CInput_CIRadialControllerConfigurationVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CInput_CIRadialControllerConfiguration;
#endif /* !defined(____x_ABI_CWindows_CUI_CInput_CIRadialControllerConfiguration_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CInput_CIRadialControllerConfiguration2_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CInput_CIRadialControllerConfiguration2_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CInput_CIRadialControllerConfiguration2Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CInput_CIRadialControllerConfiguration2* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CInput_CIRadialControllerConfiguration2* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CInput_CIRadialControllerConfiguration2* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CInput_CIRadialControllerConfiguration2* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CInput_CIRadialControllerConfiguration2* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CInput_CIRadialControllerConfiguration2* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* put_ActiveControllerWhenMenuIsSuppressed)(__x_ABI_CWindows_CUI_CInput_CIRadialControllerConfiguration2* This,
        __x_ABI_CWindows_CUI_CInput_CIRadialController* value);
    HRESULT (STDMETHODCALLTYPE* get_ActiveControllerWhenMenuIsSuppressed)(__x_ABI_CWindows_CUI_CInput_CIRadialControllerConfiguration2* This,
        __x_ABI_CWindows_CUI_CInput_CIRadialController** value);
    HRESULT (STDMETHODCALLTYPE* put_IsMenuSuppressed)(__x_ABI_CWindows_CUI_CInput_CIRadialControllerConfiguration2* This,
        boolean value);
    HRESULT (STDMETHODCALLTYPE* get_IsMenuSuppressed)(__x_ABI_CWindows_CUI_CInput_CIRadialControllerConfiguration2* This,
        boolean* value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CInput_CIRadialControllerConfiguration2Vtbl;

    interface __x_ABI_CWindows_CUI_CInput_CIRadialControllerConfiguration2
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CInput_CIRadialControllerConfiguration2Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CInput_CIRadialControllerConfiguration2;
#endif /* !defined(____x_ABI_CWindows_CUI_CInput_CIRadialControllerConfiguration2_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CInput_CIRadialControllerConfigurationStatics_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CInput_CIRadialControllerConfigurationStatics_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CInput_CIRadialControllerConfigurationStaticsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CInput_CIRadialControllerConfigurationStatics* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CInput_CIRadialControllerConfigurationStatics* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CInput_CIRadialControllerConfigurationStatics* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CInput_CIRadialControllerConfigurationStatics* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CInput_CIRadialControllerConfigurationStatics* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CInput_CIRadialControllerConfigurationStatics* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetForCurrentView)(__x_ABI_CWindows_CUI_CInput_CIRadialControllerConfigurationStatics* This,
        __x_ABI_CWindows_CUI_CInput_CIRadialControllerConfiguration** configuration);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CInput_CIRadialControllerConfigurationStaticsVtbl;

    interface __x_ABI_CWindows_CUI_CInput_CIRadialControllerConfigurationStatics
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CInput_CIRadialControllerConfigurationStaticsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CInput_CIRadialControllerConfigurationStatics;
#endif /* !defined(____x_ABI_CWindows_CUI_CInput_CIRadialControllerConfigurationStatics_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CInput_CIRadialControllerConfigurationStatics2_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CInput_CIRadialControllerConfigurationStatics2_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CInput_CIRadialControllerConfigurationStatics2Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CInput_CIRadialControllerConfigurationStatics2* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CInput_CIRadialControllerConfigurationStatics2* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CInput_CIRadialControllerConfigurationStatics2* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CInput_CIRadialControllerConfigurationStatics2* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CInput_CIRadialControllerConfigurationStatics2* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CInput_CIRadialControllerConfigurationStatics2* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* put_AppController)(__x_ABI_CWindows_CUI_CInput_CIRadialControllerConfigurationStatics2* This,
        __x_ABI_CWindows_CUI_CInput_CIRadialController* value);
    HRESULT (STDMETHODCALLTYPE* get_AppController)(__x_ABI_CWindows_CUI_CInput_CIRadialControllerConfigurationStatics2* This,
        __x_ABI_CWindows_CUI_CInput_CIRadialController** value);
    HRESULT (STDMETHODCALLTYPE* put_IsAppControllerEnabled)(__x_ABI_CWindows_CUI_CInput_CIRadialControllerConfigurationStatics2* This,
        boolean value);
    HRESULT (STDMETHODCALLTYPE* get_IsAppControllerEnabled)(__x_ABI_CWindows_CUI_CInput_CIRadialControllerConfigurationStatics2* This,
        boolean* value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CInput_CIRadialControllerConfigurationStatics2Vtbl;

    interface __x_ABI_CWindows_CUI_CInput_CIRadialControllerConfigurationStatics2
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CInput_CIRadialControllerConfigurationStatics2Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CInput_CIRadialControllerConfigurationStatics2;
#endif /* !defined(____x_ABI_CWindows_CUI_CInput_CIRadialControllerConfigurationStatics2_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CInput_CIRadialControllerControlAcquiredEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CInput_CIRadialControllerControlAcquiredEventArgs_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CInput_CIRadialControllerControlAcquiredEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CInput_CIRadialControllerControlAcquiredEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CInput_CIRadialControllerControlAcquiredEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CInput_CIRadialControllerControlAcquiredEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CInput_CIRadialControllerControlAcquiredEventArgs* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CInput_CIRadialControllerControlAcquiredEventArgs* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CInput_CIRadialControllerControlAcquiredEventArgs* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Contact)(__x_ABI_CWindows_CUI_CInput_CIRadialControllerControlAcquiredEventArgs* This,
        __x_ABI_CWindows_CUI_CInput_CIRadialControllerScreenContact** value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CInput_CIRadialControllerControlAcquiredEventArgsVtbl;

    interface __x_ABI_CWindows_CUI_CInput_CIRadialControllerControlAcquiredEventArgs
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CInput_CIRadialControllerControlAcquiredEventArgsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CInput_CIRadialControllerControlAcquiredEventArgs;
#endif /* !defined(____x_ABI_CWindows_CUI_CInput_CIRadialControllerControlAcquiredEventArgs_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CInput_CIRadialControllerControlAcquiredEventArgs2_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CInput_CIRadialControllerControlAcquiredEventArgs2_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CInput_CIRadialControllerControlAcquiredEventArgs2Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CInput_CIRadialControllerControlAcquiredEventArgs2* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CInput_CIRadialControllerControlAcquiredEventArgs2* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CInput_CIRadialControllerControlAcquiredEventArgs2* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CInput_CIRadialControllerControlAcquiredEventArgs2* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CInput_CIRadialControllerControlAcquiredEventArgs2* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CInput_CIRadialControllerControlAcquiredEventArgs2* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_IsButtonPressed)(__x_ABI_CWindows_CUI_CInput_CIRadialControllerControlAcquiredEventArgs2* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* get_SimpleHapticsController)(__x_ABI_CWindows_CUI_CInput_CIRadialControllerControlAcquiredEventArgs2* This,
        __x_ABI_CWindows_CDevices_CHaptics_CISimpleHapticsController** value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CInput_CIRadialControllerControlAcquiredEventArgs2Vtbl;

    interface __x_ABI_CWindows_CUI_CInput_CIRadialControllerControlAcquiredEventArgs2
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CInput_CIRadialControllerControlAcquiredEventArgs2Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CInput_CIRadialControllerControlAcquiredEventArgs2;
#endif /* !defined(____x_ABI_CWindows_CUI_CInput_CIRadialControllerControlAcquiredEventArgs2_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CInput_CIRadialControllerMenu_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CInput_CIRadialControllerMenu_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CInput_CIRadialControllerMenuVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CInput_CIRadialControllerMenu* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CInput_CIRadialControllerMenu* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CInput_CIRadialControllerMenu* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CInput_CIRadialControllerMenu* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CInput_CIRadialControllerMenu* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CInput_CIRadialControllerMenu* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Items)(__x_ABI_CWindows_CUI_CInput_CIRadialControllerMenu* This,
        __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CInput__CRadialControllerMenuItem** value);
    HRESULT (STDMETHODCALLTYPE* get_IsEnabled)(__x_ABI_CWindows_CUI_CInput_CIRadialControllerMenu* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* put_IsEnabled)(__x_ABI_CWindows_CUI_CInput_CIRadialControllerMenu* This,
        boolean value);
    HRESULT (STDMETHODCALLTYPE* GetSelectedMenuItem)(__x_ABI_CWindows_CUI_CInput_CIRadialControllerMenu* This,
        __x_ABI_CWindows_CUI_CInput_CIRadialControllerMenuItem** result);
    HRESULT (STDMETHODCALLTYPE* SelectMenuItem)(__x_ABI_CWindows_CUI_CInput_CIRadialControllerMenu* This,
        __x_ABI_CWindows_CUI_CInput_CIRadialControllerMenuItem* menuItem);
    HRESULT (STDMETHODCALLTYPE* TrySelectPreviouslySelectedMenuItem)(__x_ABI_CWindows_CUI_CInput_CIRadialControllerMenu* This,
        boolean* result);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CInput_CIRadialControllerMenuVtbl;

    interface __x_ABI_CWindows_CUI_CInput_CIRadialControllerMenu
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CInput_CIRadialControllerMenuVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CInput_CIRadialControllerMenu;
#endif /* !defined(____x_ABI_CWindows_CUI_CInput_CIRadialControllerMenu_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CInput_CIRadialControllerMenuItem_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CInput_CIRadialControllerMenuItem_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CInput_CIRadialControllerMenuItemVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CInput_CIRadialControllerMenuItem* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CInput_CIRadialControllerMenuItem* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CInput_CIRadialControllerMenuItem* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CInput_CIRadialControllerMenuItem* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CInput_CIRadialControllerMenuItem* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CInput_CIRadialControllerMenuItem* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_DisplayText)(__x_ABI_CWindows_CUI_CInput_CIRadialControllerMenuItem* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_Tag)(__x_ABI_CWindows_CUI_CInput_CIRadialControllerMenuItem* This,
        IInspectable** value);
    HRESULT (STDMETHODCALLTYPE* put_Tag)(__x_ABI_CWindows_CUI_CInput_CIRadialControllerMenuItem* This,
        IInspectable* value);
    HRESULT (STDMETHODCALLTYPE* add_Invoked)(__x_ABI_CWindows_CUI_CInput_CIRadialControllerMenuItem* This,
        __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CInput__CRadialControllerMenuItem_IInspectable* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_Invoked)(__x_ABI_CWindows_CUI_CInput_CIRadialControllerMenuItem* This,
        EventRegistrationToken token);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CInput_CIRadialControllerMenuItemVtbl;

    interface __x_ABI_CWindows_CUI_CInput_CIRadialControllerMenuItem
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CInput_CIRadialControllerMenuItemVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CInput_CIRadialControllerMenuItem;
#endif /* !defined(____x_ABI_CWindows_CUI_CInput_CIRadialControllerMenuItem_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CInput_CIRadialControllerMenuItemStatics_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CInput_CIRadialControllerMenuItemStatics_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CInput_CIRadialControllerMenuItemStaticsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CInput_CIRadialControllerMenuItemStatics* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CInput_CIRadialControllerMenuItemStatics* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CInput_CIRadialControllerMenuItemStatics* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CInput_CIRadialControllerMenuItemStatics* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CInput_CIRadialControllerMenuItemStatics* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CInput_CIRadialControllerMenuItemStatics* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* CreateFromIcon)(__x_ABI_CWindows_CUI_CInput_CIRadialControllerMenuItemStatics* This,
        HSTRING displayText,
        __x_ABI_CWindows_CStorage_CStreams_CIRandomAccessStreamReference* icon,
        __x_ABI_CWindows_CUI_CInput_CIRadialControllerMenuItem** result);
    HRESULT (STDMETHODCALLTYPE* CreateFromKnownIcon)(__x_ABI_CWindows_CUI_CInput_CIRadialControllerMenuItemStatics* This,
        HSTRING displayText,
        enum __x_ABI_CWindows_CUI_CInput_CRadialControllerMenuKnownIcon value,
        __x_ABI_CWindows_CUI_CInput_CIRadialControllerMenuItem** result);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CInput_CIRadialControllerMenuItemStaticsVtbl;

    interface __x_ABI_CWindows_CUI_CInput_CIRadialControllerMenuItemStatics
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CInput_CIRadialControllerMenuItemStaticsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CInput_CIRadialControllerMenuItemStatics;
#endif /* !defined(____x_ABI_CWindows_CUI_CInput_CIRadialControllerMenuItemStatics_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CInput_CIRadialControllerMenuItemStatics2_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CInput_CIRadialControllerMenuItemStatics2_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CInput_CIRadialControllerMenuItemStatics2Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CInput_CIRadialControllerMenuItemStatics2* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CInput_CIRadialControllerMenuItemStatics2* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CInput_CIRadialControllerMenuItemStatics2* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CInput_CIRadialControllerMenuItemStatics2* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CInput_CIRadialControllerMenuItemStatics2* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CInput_CIRadialControllerMenuItemStatics2* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* CreateFromFontGlyph)(__x_ABI_CWindows_CUI_CInput_CIRadialControllerMenuItemStatics2* This,
        HSTRING displayText,
        HSTRING glyph,
        HSTRING fontFamily,
        __x_ABI_CWindows_CUI_CInput_CIRadialControllerMenuItem** result);
    HRESULT (STDMETHODCALLTYPE* CreateFromFontGlyphWithUri)(__x_ABI_CWindows_CUI_CInput_CIRadialControllerMenuItemStatics2* This,
        HSTRING displayText,
        HSTRING glyph,
        HSTRING fontFamily,
        __x_ABI_CWindows_CFoundation_CIUriRuntimeClass* fontUri,
        __x_ABI_CWindows_CUI_CInput_CIRadialControllerMenuItem** result);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CInput_CIRadialControllerMenuItemStatics2Vtbl;

    interface __x_ABI_CWindows_CUI_CInput_CIRadialControllerMenuItemStatics2
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CInput_CIRadialControllerMenuItemStatics2Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CInput_CIRadialControllerMenuItemStatics2;
#endif /* !defined(____x_ABI_CWindows_CUI_CInput_CIRadialControllerMenuItemStatics2_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CInput_CIRadialControllerRotationChangedEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CInput_CIRadialControllerRotationChangedEventArgs_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CInput_CIRadialControllerRotationChangedEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CInput_CIRadialControllerRotationChangedEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CInput_CIRadialControllerRotationChangedEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CInput_CIRadialControllerRotationChangedEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CInput_CIRadialControllerRotationChangedEventArgs* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CInput_CIRadialControllerRotationChangedEventArgs* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CInput_CIRadialControllerRotationChangedEventArgs* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_RotationDeltaInDegrees)(__x_ABI_CWindows_CUI_CInput_CIRadialControllerRotationChangedEventArgs* This,
        DOUBLE* value);
    HRESULT (STDMETHODCALLTYPE* get_Contact)(__x_ABI_CWindows_CUI_CInput_CIRadialControllerRotationChangedEventArgs* This,
        __x_ABI_CWindows_CUI_CInput_CIRadialControllerScreenContact** value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CInput_CIRadialControllerRotationChangedEventArgsVtbl;

    interface __x_ABI_CWindows_CUI_CInput_CIRadialControllerRotationChangedEventArgs
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CInput_CIRadialControllerRotationChangedEventArgsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CInput_CIRadialControllerRotationChangedEventArgs;
#endif /* !defined(____x_ABI_CWindows_CUI_CInput_CIRadialControllerRotationChangedEventArgs_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CInput_CIRadialControllerRotationChangedEventArgs2_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CInput_CIRadialControllerRotationChangedEventArgs2_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CInput_CIRadialControllerRotationChangedEventArgs2Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CInput_CIRadialControllerRotationChangedEventArgs2* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CInput_CIRadialControllerRotationChangedEventArgs2* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CInput_CIRadialControllerRotationChangedEventArgs2* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CInput_CIRadialControllerRotationChangedEventArgs2* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CInput_CIRadialControllerRotationChangedEventArgs2* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CInput_CIRadialControllerRotationChangedEventArgs2* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_IsButtonPressed)(__x_ABI_CWindows_CUI_CInput_CIRadialControllerRotationChangedEventArgs2* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* get_SimpleHapticsController)(__x_ABI_CWindows_CUI_CInput_CIRadialControllerRotationChangedEventArgs2* This,
        __x_ABI_CWindows_CDevices_CHaptics_CISimpleHapticsController** value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CInput_CIRadialControllerRotationChangedEventArgs2Vtbl;

    interface __x_ABI_CWindows_CUI_CInput_CIRadialControllerRotationChangedEventArgs2
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CInput_CIRadialControllerRotationChangedEventArgs2Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CInput_CIRadialControllerRotationChangedEventArgs2;
#endif /* !defined(____x_ABI_CWindows_CUI_CInput_CIRadialControllerRotationChangedEventArgs2_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CInput_CIRadialControllerScreenContact_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CInput_CIRadialControllerScreenContact_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CInput_CIRadialControllerScreenContactVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CInput_CIRadialControllerScreenContact* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CInput_CIRadialControllerScreenContact* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CInput_CIRadialControllerScreenContact* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CInput_CIRadialControllerScreenContact* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CInput_CIRadialControllerScreenContact* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CInput_CIRadialControllerScreenContact* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Bounds)(__x_ABI_CWindows_CUI_CInput_CIRadialControllerScreenContact* This,
        struct __x_ABI_CWindows_CFoundation_CRect* value);
    HRESULT (STDMETHODCALLTYPE* get_Position)(__x_ABI_CWindows_CUI_CInput_CIRadialControllerScreenContact* This,
        struct __x_ABI_CWindows_CFoundation_CPoint* value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CInput_CIRadialControllerScreenContactVtbl;

    interface __x_ABI_CWindows_CUI_CInput_CIRadialControllerScreenContact
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CInput_CIRadialControllerScreenContactVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CInput_CIRadialControllerScreenContact;
#endif /* !defined(____x_ABI_CWindows_CUI_CInput_CIRadialControllerScreenContact_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CInput_CIRadialControllerScreenContactContinuedEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CInput_CIRadialControllerScreenContactContinuedEventArgs_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CInput_CIRadialControllerScreenContactContinuedEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CInput_CIRadialControllerScreenContactContinuedEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CInput_CIRadialControllerScreenContactContinuedEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CInput_CIRadialControllerScreenContactContinuedEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CInput_CIRadialControllerScreenContactContinuedEventArgs* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CInput_CIRadialControllerScreenContactContinuedEventArgs* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CInput_CIRadialControllerScreenContactContinuedEventArgs* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Contact)(__x_ABI_CWindows_CUI_CInput_CIRadialControllerScreenContactContinuedEventArgs* This,
        __x_ABI_CWindows_CUI_CInput_CIRadialControllerScreenContact** value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CInput_CIRadialControllerScreenContactContinuedEventArgsVtbl;

    interface __x_ABI_CWindows_CUI_CInput_CIRadialControllerScreenContactContinuedEventArgs
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CInput_CIRadialControllerScreenContactContinuedEventArgsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CInput_CIRadialControllerScreenContactContinuedEventArgs;
#endif /* !defined(____x_ABI_CWindows_CUI_CInput_CIRadialControllerScreenContactContinuedEventArgs_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CInput_CIRadialControllerScreenContactContinuedEventArgs2_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CInput_CIRadialControllerScreenContactContinuedEventArgs2_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CInput_CIRadialControllerScreenContactContinuedEventArgs2Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CInput_CIRadialControllerScreenContactContinuedEventArgs2* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CInput_CIRadialControllerScreenContactContinuedEventArgs2* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CInput_CIRadialControllerScreenContactContinuedEventArgs2* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CInput_CIRadialControllerScreenContactContinuedEventArgs2* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CInput_CIRadialControllerScreenContactContinuedEventArgs2* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CInput_CIRadialControllerScreenContactContinuedEventArgs2* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_IsButtonPressed)(__x_ABI_CWindows_CUI_CInput_CIRadialControllerScreenContactContinuedEventArgs2* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* get_SimpleHapticsController)(__x_ABI_CWindows_CUI_CInput_CIRadialControllerScreenContactContinuedEventArgs2* This,
        __x_ABI_CWindows_CDevices_CHaptics_CISimpleHapticsController** value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CInput_CIRadialControllerScreenContactContinuedEventArgs2Vtbl;

    interface __x_ABI_CWindows_CUI_CInput_CIRadialControllerScreenContactContinuedEventArgs2
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CInput_CIRadialControllerScreenContactContinuedEventArgs2Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CInput_CIRadialControllerScreenContactContinuedEventArgs2;
#endif /* !defined(____x_ABI_CWindows_CUI_CInput_CIRadialControllerScreenContactContinuedEventArgs2_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CInput_CIRadialControllerScreenContactEndedEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CInput_CIRadialControllerScreenContactEndedEventArgs_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CInput_CIRadialControllerScreenContactEndedEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CInput_CIRadialControllerScreenContactEndedEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CInput_CIRadialControllerScreenContactEndedEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CInput_CIRadialControllerScreenContactEndedEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CInput_CIRadialControllerScreenContactEndedEventArgs* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CInput_CIRadialControllerScreenContactEndedEventArgs* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CInput_CIRadialControllerScreenContactEndedEventArgs* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_IsButtonPressed)(__x_ABI_CWindows_CUI_CInput_CIRadialControllerScreenContactEndedEventArgs* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* get_SimpleHapticsController)(__x_ABI_CWindows_CUI_CInput_CIRadialControllerScreenContactEndedEventArgs* This,
        __x_ABI_CWindows_CDevices_CHaptics_CISimpleHapticsController** value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CInput_CIRadialControllerScreenContactEndedEventArgsVtbl;

    interface __x_ABI_CWindows_CUI_CInput_CIRadialControllerScreenContactEndedEventArgs
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CInput_CIRadialControllerScreenContactEndedEventArgsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CInput_CIRadialControllerScreenContactEndedEventArgs;
#endif /* !defined(____x_ABI_CWindows_CUI_CInput_CIRadialControllerScreenContactEndedEventArgs_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CInput_CIRadialControllerScreenContactStartedEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CInput_CIRadialControllerScreenContactStartedEventArgs_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CInput_CIRadialControllerScreenContactStartedEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CInput_CIRadialControllerScreenContactStartedEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CInput_CIRadialControllerScreenContactStartedEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CInput_CIRadialControllerScreenContactStartedEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CInput_CIRadialControllerScreenContactStartedEventArgs* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CInput_CIRadialControllerScreenContactStartedEventArgs* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CInput_CIRadialControllerScreenContactStartedEventArgs* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Contact)(__x_ABI_CWindows_CUI_CInput_CIRadialControllerScreenContactStartedEventArgs* This,
        __x_ABI_CWindows_CUI_CInput_CIRadialControllerScreenContact** value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CInput_CIRadialControllerScreenContactStartedEventArgsVtbl;

    interface __x_ABI_CWindows_CUI_CInput_CIRadialControllerScreenContactStartedEventArgs
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CInput_CIRadialControllerScreenContactStartedEventArgsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CInput_CIRadialControllerScreenContactStartedEventArgs;
#endif /* !defined(____x_ABI_CWindows_CUI_CInput_CIRadialControllerScreenContactStartedEventArgs_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CInput_CIRadialControllerScreenContactStartedEventArgs2_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CInput_CIRadialControllerScreenContactStartedEventArgs2_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CInput_CIRadialControllerScreenContactStartedEventArgs2Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CInput_CIRadialControllerScreenContactStartedEventArgs2* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CInput_CIRadialControllerScreenContactStartedEventArgs2* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CInput_CIRadialControllerScreenContactStartedEventArgs2* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CInput_CIRadialControllerScreenContactStartedEventArgs2* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CInput_CIRadialControllerScreenContactStartedEventArgs2* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CInput_CIRadialControllerScreenContactStartedEventArgs2* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_IsButtonPressed)(__x_ABI_CWindows_CUI_CInput_CIRadialControllerScreenContactStartedEventArgs2* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* get_SimpleHapticsController)(__x_ABI_CWindows_CUI_CInput_CIRadialControllerScreenContactStartedEventArgs2* This,
        __x_ABI_CWindows_CDevices_CHaptics_CISimpleHapticsController** value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CInput_CIRadialControllerScreenContactStartedEventArgs2Vtbl;

    interface __x_ABI_CWindows_CUI_CInput_CIRadialControllerScreenContactStartedEventArgs2
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CInput_CIRadialControllerScreenContactStartedEventArgs2Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CInput_CIRadialControllerScreenContactStartedEventArgs2;
#endif /* !defined(____x_ABI_CWindows_CUI_CInput_CIRadialControllerScreenContactStartedEventArgs2_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CInput_CIRadialControllerStatics_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CInput_CIRadialControllerStatics_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CInput_CIRadialControllerStaticsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CInput_CIRadialControllerStatics* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CInput_CIRadialControllerStatics* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CInput_CIRadialControllerStatics* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CInput_CIRadialControllerStatics* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CInput_CIRadialControllerStatics* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CInput_CIRadialControllerStatics* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* IsSupported)(__x_ABI_CWindows_CUI_CInput_CIRadialControllerStatics* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* CreateForCurrentView)(__x_ABI_CWindows_CUI_CInput_CIRadialControllerStatics* This,
        __x_ABI_CWindows_CUI_CInput_CIRadialController** result);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CInput_CIRadialControllerStaticsVtbl;

    interface __x_ABI_CWindows_CUI_CInput_CIRadialControllerStatics
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CInput_CIRadialControllerStaticsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CInput_CIRadialControllerStatics;
#endif /* !defined(____x_ABI_CWindows_CUI_CInput_CIRadialControllerStatics_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CInput_CIRightTappedEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CInput_CIRightTappedEventArgs_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CInput_CIRightTappedEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CInput_CIRightTappedEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CInput_CIRightTappedEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CInput_CIRightTappedEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CInput_CIRightTappedEventArgs* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CInput_CIRightTappedEventArgs* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CInput_CIRightTappedEventArgs* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_PointerDeviceType)(__x_ABI_CWindows_CUI_CInput_CIRightTappedEventArgs* This,
        enum __x_ABI_CWindows_CDevices_CInput_CPointerDeviceType* value);
    HRESULT (STDMETHODCALLTYPE* get_Position)(__x_ABI_CWindows_CUI_CInput_CIRightTappedEventArgs* This,
        struct __x_ABI_CWindows_CFoundation_CPoint* value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CInput_CIRightTappedEventArgsVtbl;

    interface __x_ABI_CWindows_CUI_CInput_CIRightTappedEventArgs
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CInput_CIRightTappedEventArgsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CInput_CIRightTappedEventArgs;
#endif /* !defined(____x_ABI_CWindows_CUI_CInput_CIRightTappedEventArgs_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CInput_CITappedEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CInput_CITappedEventArgs_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CInput_CITappedEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CInput_CITappedEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CInput_CITappedEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CInput_CITappedEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CInput_CITappedEventArgs* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CInput_CITappedEventArgs* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CInput_CITappedEventArgs* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_PointerDeviceType)(__x_ABI_CWindows_CUI_CInput_CITappedEventArgs* This,
        enum __x_ABI_CWindows_CDevices_CInput_CPointerDeviceType* value);
    HRESULT (STDMETHODCALLTYPE* get_Position)(__x_ABI_CWindows_CUI_CInput_CITappedEventArgs* This,
        struct __x_ABI_CWindows_CFoundation_CPoint* value);
    HRESULT (STDMETHODCALLTYPE* get_TapCount)(__x_ABI_CWindows_CUI_CInput_CITappedEventArgs* This,
        UINT32* value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CInput_CITappedEventArgsVtbl;

    interface __x_ABI_CWindows_CUI_CInput_CITappedEventArgs
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CInput_CITappedEventArgsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CInput_CITappedEventArgs;
#endif /* !defined(____x_ABI_CWindows_CUI_CInput_CITappedEventArgs_INTERFACE_DEFINED__) */
    

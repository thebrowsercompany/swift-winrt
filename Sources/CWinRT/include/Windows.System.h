// WARNING: Please don't edit this file. It was generated by Swift/WinRT v0.0.1

#pragma once
// Header files for imported files
#include <inspectable.h>
#include <EventToken.h>
#include <windowscontracts.h>
#include "Windows.Foundation.h"
#include "Windows.ApplicationModel.h"
#include "Windows.Storage.h"
#include "Windows.Storage.Search.h"
#include "Windows.Storage.Streams.h"
#include "Windows.System.Diagnostics.h"
#include "Windows.System.RemoteSystems.h"
#include "Windows.UI.Popups.h"
#include "Windows.UI.ViewManagement.h"
// Importing Collections header
#include "Windows.Foundation.Collections.h"

/* Forward Declarations */
#ifndef ____x_ABI_CWindows_CSystem_CIDispatcherQueueHandler_FWD_DEFINED__
#define ____x_ABI_CWindows_CSystem_CIDispatcherQueueHandler_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CSystem_CIDispatcherQueueHandler __x_ABI_CWindows_CSystem_CIDispatcherQueueHandler;

#endif // ____x_ABI_CWindows_CSystem_CIDispatcherQueueHandler_FWD_DEFINED__

    #ifndef ____x_ABI_CWindows_CSystem_CIAppActivationResult_FWD_DEFINED__
#define ____x_ABI_CWindows_CSystem_CIAppActivationResult_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CSystem_CIAppActivationResult __x_ABI_CWindows_CSystem_CIAppActivationResult;

#endif // ____x_ABI_CWindows_CSystem_CIAppActivationResult_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CSystem_CIAppDiagnosticInfo_FWD_DEFINED__
#define ____x_ABI_CWindows_CSystem_CIAppDiagnosticInfo_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CSystem_CIAppDiagnosticInfo __x_ABI_CWindows_CSystem_CIAppDiagnosticInfo;

#endif // ____x_ABI_CWindows_CSystem_CIAppDiagnosticInfo_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CSystem_CIAppDiagnosticInfo2_FWD_DEFINED__
#define ____x_ABI_CWindows_CSystem_CIAppDiagnosticInfo2_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CSystem_CIAppDiagnosticInfo2 __x_ABI_CWindows_CSystem_CIAppDiagnosticInfo2;

#endif // ____x_ABI_CWindows_CSystem_CIAppDiagnosticInfo2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CSystem_CIAppDiagnosticInfo3_FWD_DEFINED__
#define ____x_ABI_CWindows_CSystem_CIAppDiagnosticInfo3_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CSystem_CIAppDiagnosticInfo3 __x_ABI_CWindows_CSystem_CIAppDiagnosticInfo3;

#endif // ____x_ABI_CWindows_CSystem_CIAppDiagnosticInfo3_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CSystem_CIAppDiagnosticInfoStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CSystem_CIAppDiagnosticInfoStatics_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CSystem_CIAppDiagnosticInfoStatics __x_ABI_CWindows_CSystem_CIAppDiagnosticInfoStatics;

#endif // ____x_ABI_CWindows_CSystem_CIAppDiagnosticInfoStatics_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CSystem_CIAppDiagnosticInfoStatics2_FWD_DEFINED__
#define ____x_ABI_CWindows_CSystem_CIAppDiagnosticInfoStatics2_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CSystem_CIAppDiagnosticInfoStatics2 __x_ABI_CWindows_CSystem_CIAppDiagnosticInfoStatics2;

#endif // ____x_ABI_CWindows_CSystem_CIAppDiagnosticInfoStatics2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CSystem_CIAppDiagnosticInfoWatcher_FWD_DEFINED__
#define ____x_ABI_CWindows_CSystem_CIAppDiagnosticInfoWatcher_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CSystem_CIAppDiagnosticInfoWatcher __x_ABI_CWindows_CSystem_CIAppDiagnosticInfoWatcher;

#endif // ____x_ABI_CWindows_CSystem_CIAppDiagnosticInfoWatcher_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CSystem_CIAppDiagnosticInfoWatcherEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CSystem_CIAppDiagnosticInfoWatcherEventArgs_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CSystem_CIAppDiagnosticInfoWatcherEventArgs __x_ABI_CWindows_CSystem_CIAppDiagnosticInfoWatcherEventArgs;

#endif // ____x_ABI_CWindows_CSystem_CIAppDiagnosticInfoWatcherEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CSystem_CIAppExecutionStateChangeResult_FWD_DEFINED__
#define ____x_ABI_CWindows_CSystem_CIAppExecutionStateChangeResult_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CSystem_CIAppExecutionStateChangeResult __x_ABI_CWindows_CSystem_CIAppExecutionStateChangeResult;

#endif // ____x_ABI_CWindows_CSystem_CIAppExecutionStateChangeResult_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CSystem_CIAppMemoryReport_FWD_DEFINED__
#define ____x_ABI_CWindows_CSystem_CIAppMemoryReport_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CSystem_CIAppMemoryReport __x_ABI_CWindows_CSystem_CIAppMemoryReport;

#endif // ____x_ABI_CWindows_CSystem_CIAppMemoryReport_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CSystem_CIAppMemoryReport2_FWD_DEFINED__
#define ____x_ABI_CWindows_CSystem_CIAppMemoryReport2_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CSystem_CIAppMemoryReport2 __x_ABI_CWindows_CSystem_CIAppMemoryReport2;

#endif // ____x_ABI_CWindows_CSystem_CIAppMemoryReport2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CSystem_CIAppMemoryUsageLimitChangingEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CSystem_CIAppMemoryUsageLimitChangingEventArgs_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CSystem_CIAppMemoryUsageLimitChangingEventArgs __x_ABI_CWindows_CSystem_CIAppMemoryUsageLimitChangingEventArgs;

#endif // ____x_ABI_CWindows_CSystem_CIAppMemoryUsageLimitChangingEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CSystem_CIAppResourceGroupBackgroundTaskReport_FWD_DEFINED__
#define ____x_ABI_CWindows_CSystem_CIAppResourceGroupBackgroundTaskReport_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CSystem_CIAppResourceGroupBackgroundTaskReport __x_ABI_CWindows_CSystem_CIAppResourceGroupBackgroundTaskReport;

#endif // ____x_ABI_CWindows_CSystem_CIAppResourceGroupBackgroundTaskReport_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CSystem_CIAppResourceGroupInfo_FWD_DEFINED__
#define ____x_ABI_CWindows_CSystem_CIAppResourceGroupInfo_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CSystem_CIAppResourceGroupInfo __x_ABI_CWindows_CSystem_CIAppResourceGroupInfo;

#endif // ____x_ABI_CWindows_CSystem_CIAppResourceGroupInfo_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CSystem_CIAppResourceGroupInfo2_FWD_DEFINED__
#define ____x_ABI_CWindows_CSystem_CIAppResourceGroupInfo2_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CSystem_CIAppResourceGroupInfo2 __x_ABI_CWindows_CSystem_CIAppResourceGroupInfo2;

#endif // ____x_ABI_CWindows_CSystem_CIAppResourceGroupInfo2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CSystem_CIAppResourceGroupInfoWatcher_FWD_DEFINED__
#define ____x_ABI_CWindows_CSystem_CIAppResourceGroupInfoWatcher_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CSystem_CIAppResourceGroupInfoWatcher __x_ABI_CWindows_CSystem_CIAppResourceGroupInfoWatcher;

#endif // ____x_ABI_CWindows_CSystem_CIAppResourceGroupInfoWatcher_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CSystem_CIAppResourceGroupInfoWatcherEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CSystem_CIAppResourceGroupInfoWatcherEventArgs_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CSystem_CIAppResourceGroupInfoWatcherEventArgs __x_ABI_CWindows_CSystem_CIAppResourceGroupInfoWatcherEventArgs;

#endif // ____x_ABI_CWindows_CSystem_CIAppResourceGroupInfoWatcherEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CSystem_CIAppResourceGroupInfoWatcherExecutionStateChangedEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CSystem_CIAppResourceGroupInfoWatcherExecutionStateChangedEventArgs_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CSystem_CIAppResourceGroupInfoWatcherExecutionStateChangedEventArgs __x_ABI_CWindows_CSystem_CIAppResourceGroupInfoWatcherExecutionStateChangedEventArgs;

#endif // ____x_ABI_CWindows_CSystem_CIAppResourceGroupInfoWatcherExecutionStateChangedEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CSystem_CIAppResourceGroupMemoryReport_FWD_DEFINED__
#define ____x_ABI_CWindows_CSystem_CIAppResourceGroupMemoryReport_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CSystem_CIAppResourceGroupMemoryReport __x_ABI_CWindows_CSystem_CIAppResourceGroupMemoryReport;

#endif // ____x_ABI_CWindows_CSystem_CIAppResourceGroupMemoryReport_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CSystem_CIAppResourceGroupStateReport_FWD_DEFINED__
#define ____x_ABI_CWindows_CSystem_CIAppResourceGroupStateReport_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CSystem_CIAppResourceGroupStateReport __x_ABI_CWindows_CSystem_CIAppResourceGroupStateReport;

#endif // ____x_ABI_CWindows_CSystem_CIAppResourceGroupStateReport_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CSystem_CIAppUriHandlerHost_FWD_DEFINED__
#define ____x_ABI_CWindows_CSystem_CIAppUriHandlerHost_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CSystem_CIAppUriHandlerHost __x_ABI_CWindows_CSystem_CIAppUriHandlerHost;

#endif // ____x_ABI_CWindows_CSystem_CIAppUriHandlerHost_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CSystem_CIAppUriHandlerHostFactory_FWD_DEFINED__
#define ____x_ABI_CWindows_CSystem_CIAppUriHandlerHostFactory_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CSystem_CIAppUriHandlerHostFactory __x_ABI_CWindows_CSystem_CIAppUriHandlerHostFactory;

#endif // ____x_ABI_CWindows_CSystem_CIAppUriHandlerHostFactory_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CSystem_CIAppUriHandlerRegistration_FWD_DEFINED__
#define ____x_ABI_CWindows_CSystem_CIAppUriHandlerRegistration_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CSystem_CIAppUriHandlerRegistration __x_ABI_CWindows_CSystem_CIAppUriHandlerRegistration;

#endif // ____x_ABI_CWindows_CSystem_CIAppUriHandlerRegistration_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CSystem_CIAppUriHandlerRegistrationManager_FWD_DEFINED__
#define ____x_ABI_CWindows_CSystem_CIAppUriHandlerRegistrationManager_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CSystem_CIAppUriHandlerRegistrationManager __x_ABI_CWindows_CSystem_CIAppUriHandlerRegistrationManager;

#endif // ____x_ABI_CWindows_CSystem_CIAppUriHandlerRegistrationManager_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CSystem_CIAppUriHandlerRegistrationManagerStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CSystem_CIAppUriHandlerRegistrationManagerStatics_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CSystem_CIAppUriHandlerRegistrationManagerStatics __x_ABI_CWindows_CSystem_CIAppUriHandlerRegistrationManagerStatics;

#endif // ____x_ABI_CWindows_CSystem_CIAppUriHandlerRegistrationManagerStatics_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CSystem_CIDateTimeSettingsStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CSystem_CIDateTimeSettingsStatics_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CSystem_CIDateTimeSettingsStatics __x_ABI_CWindows_CSystem_CIDateTimeSettingsStatics;

#endif // ____x_ABI_CWindows_CSystem_CIDateTimeSettingsStatics_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CSystem_CIDispatcherQueue_FWD_DEFINED__
#define ____x_ABI_CWindows_CSystem_CIDispatcherQueue_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CSystem_CIDispatcherQueue __x_ABI_CWindows_CSystem_CIDispatcherQueue;

#endif // ____x_ABI_CWindows_CSystem_CIDispatcherQueue_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CSystem_CIDispatcherQueue2_FWD_DEFINED__
#define ____x_ABI_CWindows_CSystem_CIDispatcherQueue2_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CSystem_CIDispatcherQueue2 __x_ABI_CWindows_CSystem_CIDispatcherQueue2;

#endif // ____x_ABI_CWindows_CSystem_CIDispatcherQueue2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CSystem_CIDispatcherQueueController_FWD_DEFINED__
#define ____x_ABI_CWindows_CSystem_CIDispatcherQueueController_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CSystem_CIDispatcherQueueController __x_ABI_CWindows_CSystem_CIDispatcherQueueController;

#endif // ____x_ABI_CWindows_CSystem_CIDispatcherQueueController_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CSystem_CIDispatcherQueueControllerStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CSystem_CIDispatcherQueueControllerStatics_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CSystem_CIDispatcherQueueControllerStatics __x_ABI_CWindows_CSystem_CIDispatcherQueueControllerStatics;

#endif // ____x_ABI_CWindows_CSystem_CIDispatcherQueueControllerStatics_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CSystem_CIDispatcherQueueShutdownStartingEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CSystem_CIDispatcherQueueShutdownStartingEventArgs_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CSystem_CIDispatcherQueueShutdownStartingEventArgs __x_ABI_CWindows_CSystem_CIDispatcherQueueShutdownStartingEventArgs;

#endif // ____x_ABI_CWindows_CSystem_CIDispatcherQueueShutdownStartingEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CSystem_CIDispatcherQueueStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CSystem_CIDispatcherQueueStatics_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CSystem_CIDispatcherQueueStatics __x_ABI_CWindows_CSystem_CIDispatcherQueueStatics;

#endif // ____x_ABI_CWindows_CSystem_CIDispatcherQueueStatics_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CSystem_CIDispatcherQueueTimer_FWD_DEFINED__
#define ____x_ABI_CWindows_CSystem_CIDispatcherQueueTimer_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CSystem_CIDispatcherQueueTimer __x_ABI_CWindows_CSystem_CIDispatcherQueueTimer;

#endif // ____x_ABI_CWindows_CSystem_CIDispatcherQueueTimer_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CSystem_CIFolderLauncherOptions_FWD_DEFINED__
#define ____x_ABI_CWindows_CSystem_CIFolderLauncherOptions_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CSystem_CIFolderLauncherOptions __x_ABI_CWindows_CSystem_CIFolderLauncherOptions;

#endif // ____x_ABI_CWindows_CSystem_CIFolderLauncherOptions_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CSystem_CIKnownUserPropertiesStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CSystem_CIKnownUserPropertiesStatics_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CSystem_CIKnownUserPropertiesStatics __x_ABI_CWindows_CSystem_CIKnownUserPropertiesStatics;

#endif // ____x_ABI_CWindows_CSystem_CIKnownUserPropertiesStatics_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CSystem_CILaunchUriResult_FWD_DEFINED__
#define ____x_ABI_CWindows_CSystem_CILaunchUriResult_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CSystem_CILaunchUriResult __x_ABI_CWindows_CSystem_CILaunchUriResult;

#endif // ____x_ABI_CWindows_CSystem_CILaunchUriResult_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CSystem_CILauncherOptions_FWD_DEFINED__
#define ____x_ABI_CWindows_CSystem_CILauncherOptions_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CSystem_CILauncherOptions __x_ABI_CWindows_CSystem_CILauncherOptions;

#endif // ____x_ABI_CWindows_CSystem_CILauncherOptions_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CSystem_CILauncherOptions2_FWD_DEFINED__
#define ____x_ABI_CWindows_CSystem_CILauncherOptions2_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CSystem_CILauncherOptions2 __x_ABI_CWindows_CSystem_CILauncherOptions2;

#endif // ____x_ABI_CWindows_CSystem_CILauncherOptions2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CSystem_CILauncherOptions3_FWD_DEFINED__
#define ____x_ABI_CWindows_CSystem_CILauncherOptions3_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CSystem_CILauncherOptions3 __x_ABI_CWindows_CSystem_CILauncherOptions3;

#endif // ____x_ABI_CWindows_CSystem_CILauncherOptions3_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CSystem_CILauncherOptions4_FWD_DEFINED__
#define ____x_ABI_CWindows_CSystem_CILauncherOptions4_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CSystem_CILauncherOptions4 __x_ABI_CWindows_CSystem_CILauncherOptions4;

#endif // ____x_ABI_CWindows_CSystem_CILauncherOptions4_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CSystem_CILauncherStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CSystem_CILauncherStatics_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CSystem_CILauncherStatics __x_ABI_CWindows_CSystem_CILauncherStatics;

#endif // ____x_ABI_CWindows_CSystem_CILauncherStatics_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CSystem_CILauncherStatics2_FWD_DEFINED__
#define ____x_ABI_CWindows_CSystem_CILauncherStatics2_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CSystem_CILauncherStatics2 __x_ABI_CWindows_CSystem_CILauncherStatics2;

#endif // ____x_ABI_CWindows_CSystem_CILauncherStatics2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CSystem_CILauncherStatics3_FWD_DEFINED__
#define ____x_ABI_CWindows_CSystem_CILauncherStatics3_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CSystem_CILauncherStatics3 __x_ABI_CWindows_CSystem_CILauncherStatics3;

#endif // ____x_ABI_CWindows_CSystem_CILauncherStatics3_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CSystem_CILauncherStatics4_FWD_DEFINED__
#define ____x_ABI_CWindows_CSystem_CILauncherStatics4_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CSystem_CILauncherStatics4 __x_ABI_CWindows_CSystem_CILauncherStatics4;

#endif // ____x_ABI_CWindows_CSystem_CILauncherStatics4_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CSystem_CILauncherStatics5_FWD_DEFINED__
#define ____x_ABI_CWindows_CSystem_CILauncherStatics5_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CSystem_CILauncherStatics5 __x_ABI_CWindows_CSystem_CILauncherStatics5;

#endif // ____x_ABI_CWindows_CSystem_CILauncherStatics5_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CSystem_CILauncherUIOptions_FWD_DEFINED__
#define ____x_ABI_CWindows_CSystem_CILauncherUIOptions_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CSystem_CILauncherUIOptions __x_ABI_CWindows_CSystem_CILauncherUIOptions;

#endif // ____x_ABI_CWindows_CSystem_CILauncherUIOptions_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CSystem_CILauncherViewOptions_FWD_DEFINED__
#define ____x_ABI_CWindows_CSystem_CILauncherViewOptions_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CSystem_CILauncherViewOptions __x_ABI_CWindows_CSystem_CILauncherViewOptions;

#endif // ____x_ABI_CWindows_CSystem_CILauncherViewOptions_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CSystem_CIMemoryManagerStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CSystem_CIMemoryManagerStatics_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CSystem_CIMemoryManagerStatics __x_ABI_CWindows_CSystem_CIMemoryManagerStatics;

#endif // ____x_ABI_CWindows_CSystem_CIMemoryManagerStatics_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CSystem_CIMemoryManagerStatics2_FWD_DEFINED__
#define ____x_ABI_CWindows_CSystem_CIMemoryManagerStatics2_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CSystem_CIMemoryManagerStatics2 __x_ABI_CWindows_CSystem_CIMemoryManagerStatics2;

#endif // ____x_ABI_CWindows_CSystem_CIMemoryManagerStatics2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CSystem_CIMemoryManagerStatics3_FWD_DEFINED__
#define ____x_ABI_CWindows_CSystem_CIMemoryManagerStatics3_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CSystem_CIMemoryManagerStatics3 __x_ABI_CWindows_CSystem_CIMemoryManagerStatics3;

#endif // ____x_ABI_CWindows_CSystem_CIMemoryManagerStatics3_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CSystem_CIMemoryManagerStatics4_FWD_DEFINED__
#define ____x_ABI_CWindows_CSystem_CIMemoryManagerStatics4_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CSystem_CIMemoryManagerStatics4 __x_ABI_CWindows_CSystem_CIMemoryManagerStatics4;

#endif // ____x_ABI_CWindows_CSystem_CIMemoryManagerStatics4_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CSystem_CIProcessLauncherOptions_FWD_DEFINED__
#define ____x_ABI_CWindows_CSystem_CIProcessLauncherOptions_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CSystem_CIProcessLauncherOptions __x_ABI_CWindows_CSystem_CIProcessLauncherOptions;

#endif // ____x_ABI_CWindows_CSystem_CIProcessLauncherOptions_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CSystem_CIProcessLauncherResult_FWD_DEFINED__
#define ____x_ABI_CWindows_CSystem_CIProcessLauncherResult_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CSystem_CIProcessLauncherResult __x_ABI_CWindows_CSystem_CIProcessLauncherResult;

#endif // ____x_ABI_CWindows_CSystem_CIProcessLauncherResult_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CSystem_CIProcessLauncherStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CSystem_CIProcessLauncherStatics_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CSystem_CIProcessLauncherStatics __x_ABI_CWindows_CSystem_CIProcessLauncherStatics;

#endif // ____x_ABI_CWindows_CSystem_CIProcessLauncherStatics_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CSystem_CIProcessMemoryReport_FWD_DEFINED__
#define ____x_ABI_CWindows_CSystem_CIProcessMemoryReport_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CSystem_CIProcessMemoryReport __x_ABI_CWindows_CSystem_CIProcessMemoryReport;

#endif // ____x_ABI_CWindows_CSystem_CIProcessMemoryReport_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CSystem_CIProtocolForResultsOperation_FWD_DEFINED__
#define ____x_ABI_CWindows_CSystem_CIProtocolForResultsOperation_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CSystem_CIProtocolForResultsOperation __x_ABI_CWindows_CSystem_CIProtocolForResultsOperation;

#endif // ____x_ABI_CWindows_CSystem_CIProtocolForResultsOperation_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CSystem_CIRemoteLauncherOptions_FWD_DEFINED__
#define ____x_ABI_CWindows_CSystem_CIRemoteLauncherOptions_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CSystem_CIRemoteLauncherOptions __x_ABI_CWindows_CSystem_CIRemoteLauncherOptions;

#endif // ____x_ABI_CWindows_CSystem_CIRemoteLauncherOptions_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CSystem_CIRemoteLauncherStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CSystem_CIRemoteLauncherStatics_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CSystem_CIRemoteLauncherStatics __x_ABI_CWindows_CSystem_CIRemoteLauncherStatics;

#endif // ____x_ABI_CWindows_CSystem_CIRemoteLauncherStatics_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CSystem_CIShutdownManagerStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CSystem_CIShutdownManagerStatics_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CSystem_CIShutdownManagerStatics __x_ABI_CWindows_CSystem_CIShutdownManagerStatics;

#endif // ____x_ABI_CWindows_CSystem_CIShutdownManagerStatics_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CSystem_CIShutdownManagerStatics2_FWD_DEFINED__
#define ____x_ABI_CWindows_CSystem_CIShutdownManagerStatics2_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CSystem_CIShutdownManagerStatics2 __x_ABI_CWindows_CSystem_CIShutdownManagerStatics2;

#endif // ____x_ABI_CWindows_CSystem_CIShutdownManagerStatics2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CSystem_CITimeZoneSettingsStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CSystem_CITimeZoneSettingsStatics_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CSystem_CITimeZoneSettingsStatics __x_ABI_CWindows_CSystem_CITimeZoneSettingsStatics;

#endif // ____x_ABI_CWindows_CSystem_CITimeZoneSettingsStatics_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CSystem_CITimeZoneSettingsStatics2_FWD_DEFINED__
#define ____x_ABI_CWindows_CSystem_CITimeZoneSettingsStatics2_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CSystem_CITimeZoneSettingsStatics2 __x_ABI_CWindows_CSystem_CITimeZoneSettingsStatics2;

#endif // ____x_ABI_CWindows_CSystem_CITimeZoneSettingsStatics2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CSystem_CIUser_FWD_DEFINED__
#define ____x_ABI_CWindows_CSystem_CIUser_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CSystem_CIUser __x_ABI_CWindows_CSystem_CIUser;

#endif // ____x_ABI_CWindows_CSystem_CIUser_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CSystem_CIUserAuthenticationStatusChangeDeferral_FWD_DEFINED__
#define ____x_ABI_CWindows_CSystem_CIUserAuthenticationStatusChangeDeferral_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CSystem_CIUserAuthenticationStatusChangeDeferral __x_ABI_CWindows_CSystem_CIUserAuthenticationStatusChangeDeferral;

#endif // ____x_ABI_CWindows_CSystem_CIUserAuthenticationStatusChangeDeferral_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CSystem_CIUserAuthenticationStatusChangingEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CSystem_CIUserAuthenticationStatusChangingEventArgs_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CSystem_CIUserAuthenticationStatusChangingEventArgs __x_ABI_CWindows_CSystem_CIUserAuthenticationStatusChangingEventArgs;

#endif // ____x_ABI_CWindows_CSystem_CIUserAuthenticationStatusChangingEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CSystem_CIUserChangedEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CSystem_CIUserChangedEventArgs_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CSystem_CIUserChangedEventArgs __x_ABI_CWindows_CSystem_CIUserChangedEventArgs;

#endif // ____x_ABI_CWindows_CSystem_CIUserChangedEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CSystem_CIUserDeviceAssociationChangedEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CSystem_CIUserDeviceAssociationChangedEventArgs_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CSystem_CIUserDeviceAssociationChangedEventArgs __x_ABI_CWindows_CSystem_CIUserDeviceAssociationChangedEventArgs;

#endif // ____x_ABI_CWindows_CSystem_CIUserDeviceAssociationChangedEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CSystem_CIUserDeviceAssociationStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CSystem_CIUserDeviceAssociationStatics_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CSystem_CIUserDeviceAssociationStatics __x_ABI_CWindows_CSystem_CIUserDeviceAssociationStatics;

#endif // ____x_ABI_CWindows_CSystem_CIUserDeviceAssociationStatics_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CSystem_CIUserPicker_FWD_DEFINED__
#define ____x_ABI_CWindows_CSystem_CIUserPicker_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CSystem_CIUserPicker __x_ABI_CWindows_CSystem_CIUserPicker;

#endif // ____x_ABI_CWindows_CSystem_CIUserPicker_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CSystem_CIUserPickerStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CSystem_CIUserPickerStatics_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CSystem_CIUserPickerStatics __x_ABI_CWindows_CSystem_CIUserPickerStatics;

#endif // ____x_ABI_CWindows_CSystem_CIUserPickerStatics_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CSystem_CIUserStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CSystem_CIUserStatics_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CSystem_CIUserStatics __x_ABI_CWindows_CSystem_CIUserStatics;

#endif // ____x_ABI_CWindows_CSystem_CIUserStatics_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CSystem_CIUserWatcher_FWD_DEFINED__
#define ____x_ABI_CWindows_CSystem_CIUserWatcher_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CSystem_CIUserWatcher __x_ABI_CWindows_CSystem_CIUserWatcher;

#endif // ____x_ABI_CWindows_CSystem_CIUserWatcher_FWD_DEFINED__

// Parameterized interface forward declarations (C)

// Collection interface definitions

typedef interface __x_ABI_C__FIAsyncOperationCompletedHandler_1_IInspectable __x_ABI_C__FIAsyncOperationCompletedHandler_1_IInspectable;

#if !defined(____x_ABI_C__FIAsyncOperation_1_IInspectable_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperation_1_IInspectable_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperation_1_IInspectable __x_ABI_C__FIAsyncOperation_1_IInspectable;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperation_1_IInspectable;

    typedef struct __x_ABI_C__FIAsyncOperation_1_IInspectableVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperation_1_IInspectable* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperation_1_IInspectable* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperation_1_IInspectable* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIAsyncOperation_1_IInspectable* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIAsyncOperation_1_IInspectable* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIAsyncOperation_1_IInspectable* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* put_Completed)(__x_ABI_C__FIAsyncOperation_1_IInspectable* This,
        __x_ABI_C__FIAsyncOperationCompletedHandler_1_IInspectable* handler);
    HRESULT (STDMETHODCALLTYPE* get_Completed)(__x_ABI_C__FIAsyncOperation_1_IInspectable* This,
        __x_ABI_C__FIAsyncOperationCompletedHandler_1_IInspectable** result);
    HRESULT (STDMETHODCALLTYPE* GetResults)(__x_ABI_C__FIAsyncOperation_1_IInspectable* This,
        IInspectable** result);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperation_1_IInspectableVtbl;

    interface __x_ABI_C__FIAsyncOperation_1_IInspectable
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperation_1_IInspectableVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperation_1_IInspectable_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIAsyncOperationCompletedHandler_1_IInspectable_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperationCompletedHandler_1_IInspectable_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperationCompletedHandler_1_IInspectable __x_ABI_C__FIAsyncOperationCompletedHandler_1_IInspectable;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperationCompletedHandler_1_IInspectable;

    typedef struct __x_ABI_C__FIAsyncOperationCompletedHandler_1_IInspectableVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperationCompletedHandler_1_IInspectable* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperationCompletedHandler_1_IInspectable* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperationCompletedHandler_1_IInspectable* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FIAsyncOperationCompletedHandler_1_IInspectable* This,
        __x_ABI_C__FIAsyncOperation_1_IInspectable* asyncInfo,
        enum __x_ABI_CWindows_CFoundation_CAsyncStatus asyncStatus);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperationCompletedHandler_1_IInspectableVtbl;

    interface __x_ABI_C__FIAsyncOperationCompletedHandler_1_IInspectable
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperationCompletedHandler_1_IInspectableVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperationCompletedHandler_1_IInspectable_INTERFACE_DEFINED__
    
typedef interface __x_ABI_C__FIAsyncOperationCompletedHandler_1_boolean __x_ABI_C__FIAsyncOperationCompletedHandler_1_boolean;

#if !defined(____x_ABI_C__FIAsyncOperation_1_boolean_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperation_1_boolean_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperation_1_boolean __x_ABI_C__FIAsyncOperation_1_boolean;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperation_1_boolean;

    typedef struct __x_ABI_C__FIAsyncOperation_1_booleanVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperation_1_boolean* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperation_1_boolean* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperation_1_boolean* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIAsyncOperation_1_boolean* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIAsyncOperation_1_boolean* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIAsyncOperation_1_boolean* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* put_Completed)(__x_ABI_C__FIAsyncOperation_1_boolean* This,
        __x_ABI_C__FIAsyncOperationCompletedHandler_1_boolean* handler);
    HRESULT (STDMETHODCALLTYPE* get_Completed)(__x_ABI_C__FIAsyncOperation_1_boolean* This,
        __x_ABI_C__FIAsyncOperationCompletedHandler_1_boolean** result);
    HRESULT (STDMETHODCALLTYPE* GetResults)(__x_ABI_C__FIAsyncOperation_1_boolean* This,
        boolean* result);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperation_1_booleanVtbl;

    interface __x_ABI_C__FIAsyncOperation_1_boolean
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperation_1_booleanVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperation_1_boolean_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIAsyncOperationCompletedHandler_1_boolean_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperationCompletedHandler_1_boolean_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperationCompletedHandler_1_boolean __x_ABI_C__FIAsyncOperationCompletedHandler_1_boolean;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperationCompletedHandler_1_boolean;

    typedef struct __x_ABI_C__FIAsyncOperationCompletedHandler_1_booleanVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperationCompletedHandler_1_boolean* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperationCompletedHandler_1_boolean* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperationCompletedHandler_1_boolean* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FIAsyncOperationCompletedHandler_1_boolean* This,
        __x_ABI_C__FIAsyncOperation_1_boolean* asyncInfo,
        enum __x_ABI_CWindows_CFoundation_CAsyncStatus asyncStatus);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperationCompletedHandler_1_booleanVtbl;

    interface __x_ABI_C__FIAsyncOperationCompletedHandler_1_boolean
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperationCompletedHandler_1_booleanVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperationCompletedHandler_1_boolean_INTERFACE_DEFINED__
    
#ifndef ____x_ABI_CWindows_CFoundation_CCollections_CIPropertySet_FWD_DEFINED__
#define ____x_ABI_CWindows_CFoundation_CCollections_CIPropertySet_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CFoundation_CCollections_CIPropertySet __x_ABI_CWindows_CFoundation_CCollections_CIPropertySet;

#endif // ____x_ABI_CWindows_CFoundation_CCollections_CIPropertySet_FWD_DEFINED__

typedef interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__F__CIPropertySet __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__F__CIPropertySet;

#if !defined(____x_ABI_C__FIAsyncOperation_1___x_ABI_C__F__CIPropertySet_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperation_1___x_ABI_C__F__CIPropertySet_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperation_1___x_ABI_C__F__CIPropertySet __x_ABI_C__FIAsyncOperation_1___x_ABI_C__F__CIPropertySet;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperation_1___x_ABI_C__F__CIPropertySet;

    typedef struct __x_ABI_C__FIAsyncOperation_1___x_ABI_C__F__CIPropertySetVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperation_1___x_ABI_C__F__CIPropertySet* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperation_1___x_ABI_C__F__CIPropertySet* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperation_1___x_ABI_C__F__CIPropertySet* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIAsyncOperation_1___x_ABI_C__F__CIPropertySet* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIAsyncOperation_1___x_ABI_C__F__CIPropertySet* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIAsyncOperation_1___x_ABI_C__F__CIPropertySet* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* put_Completed)(__x_ABI_C__FIAsyncOperation_1___x_ABI_C__F__CIPropertySet* This,
        __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__F__CIPropertySet* handler);
    HRESULT (STDMETHODCALLTYPE* get_Completed)(__x_ABI_C__FIAsyncOperation_1___x_ABI_C__F__CIPropertySet* This,
        __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__F__CIPropertySet** result);
    HRESULT (STDMETHODCALLTYPE* GetResults)(__x_ABI_C__FIAsyncOperation_1___x_ABI_C__F__CIPropertySet* This,
        __x_ABI_CWindows_CFoundation_CCollections_CIPropertySet** result);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperation_1___x_ABI_C__F__CIPropertySetVtbl;

    interface __x_ABI_C__FIAsyncOperation_1___x_ABI_C__F__CIPropertySet
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperation_1___x_ABI_C__F__CIPropertySetVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperation_1___x_ABI_C__F__CIPropertySet_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__F__CIPropertySet_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__F__CIPropertySet_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__F__CIPropertySet __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__F__CIPropertySet;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__F__CIPropertySet;

    typedef struct __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__F__CIPropertySetVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__F__CIPropertySet* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__F__CIPropertySet* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__F__CIPropertySet* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__F__CIPropertySet* This,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_C__F__CIPropertySet* asyncInfo,
        enum __x_ABI_CWindows_CFoundation_CAsyncStatus asyncStatus);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__F__CIPropertySetVtbl;

    interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__F__CIPropertySet
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__F__CIPropertySetVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__F__CIPropertySet_INTERFACE_DEFINED__
    
#ifndef ____x_ABI_CWindows_CApplicationModel_CIAppInfo_FWD_DEFINED__
#define ____x_ABI_CWindows_CApplicationModel_CIAppInfo_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CApplicationModel_CIAppInfo __x_ABI_CWindows_CApplicationModel_CIAppInfo;

#endif // ____x_ABI_CWindows_CApplicationModel_CIAppInfo_FWD_DEFINED__

#if !defined(____x_ABI_C__FIIterator_1___x_ABI_CWindows__CApplicationModel__CAppInfo_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CApplicationModel__CAppInfo_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CApplicationModel__CAppInfo __x_ABI_C__FIIterator_1___x_ABI_CWindows__CApplicationModel__CAppInfo;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterator_1___x_ABI_CWindows__CApplicationModel__CAppInfo;

    typedef struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CApplicationModel__CAppInfoVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CApplicationModel__CAppInfo* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CApplicationModel__CAppInfo* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CApplicationModel__CAppInfo* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CApplicationModel__CAppInfo* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CApplicationModel__CAppInfo* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CApplicationModel__CAppInfo* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Current)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CApplicationModel__CAppInfo* This,
        __x_ABI_CWindows_CApplicationModel_CIAppInfo** result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CApplicationModel__CAppInfo* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CApplicationModel__CAppInfo* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CApplicationModel__CAppInfo* This,
        UINT32 itemsLength,
        __x_ABI_CWindows_CApplicationModel_CIAppInfo** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIIterator_1___x_ABI_CWindows__CApplicationModel__CAppInfoVtbl;

    interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CApplicationModel__CAppInfo
    {
        CONST_VTBL struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CApplicationModel__CAppInfoVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CApplicationModel__CAppInfo_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterable_1___x_ABI_CWindows__CApplicationModel__CAppInfo_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CApplicationModel__CAppInfo_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CApplicationModel__CAppInfo __x_ABI_C__FIIterable_1___x_ABI_CWindows__CApplicationModel__CAppInfo;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterable_1___x_ABI_CWindows__CApplicationModel__CAppInfo;

    typedef struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CApplicationModel__CAppInfoVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CApplicationModel__CAppInfo* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CApplicationModel__CAppInfo* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CApplicationModel__CAppInfo* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CApplicationModel__CAppInfo* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CApplicationModel__CAppInfo* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CApplicationModel__CAppInfo* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* First)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CApplicationModel__CAppInfo* This,
        __x_ABI_C__FIIterator_1___x_ABI_CWindows__CApplicationModel__CAppInfo** result);

        END_INTERFACE
    } __x_ABI_C__FIIterable_1___x_ABI_CWindows__CApplicationModel__CAppInfoVtbl;

    interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CApplicationModel__CAppInfo
    {
        CONST_VTBL struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CApplicationModel__CAppInfoVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CApplicationModel__CAppInfo_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CApplicationModel__CAppInfo_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CApplicationModel__CAppInfo_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CApplicationModel__CAppInfo __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CApplicationModel__CAppInfo;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CApplicationModel__CAppInfo;

    typedef struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CApplicationModel__CAppInfoVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CApplicationModel__CAppInfo* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CApplicationModel__CAppInfo* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CApplicationModel__CAppInfo* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CApplicationModel__CAppInfo* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CApplicationModel__CAppInfo* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CApplicationModel__CAppInfo* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CApplicationModel__CAppInfo* This,
        UINT32 index,
        __x_ABI_CWindows_CApplicationModel_CIAppInfo** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CApplicationModel__CAppInfo* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CApplicationModel__CAppInfo* This,
        __x_ABI_CWindows_CApplicationModel_CIAppInfo* value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CApplicationModel__CAppInfo* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        __x_ABI_CWindows_CApplicationModel_CIAppInfo** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CApplicationModel__CAppInfoVtbl;

    interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CApplicationModel__CAppInfo
    {
        CONST_VTBL struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CApplicationModel__CAppInfoVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CApplicationModel__CAppInfo_INTERFACE_DEFINED__
    
typedef interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CApplicationModel__CAppInfo __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CApplicationModel__CAppInfo;

#if !defined(____x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CApplicationModel__CAppInfo_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CApplicationModel__CAppInfo_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CApplicationModel__CAppInfo __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CApplicationModel__CAppInfo;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CApplicationModel__CAppInfo;

    typedef struct __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CApplicationModel__CAppInfoVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CApplicationModel__CAppInfo* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CApplicationModel__CAppInfo* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CApplicationModel__CAppInfo* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CApplicationModel__CAppInfo* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CApplicationModel__CAppInfo* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CApplicationModel__CAppInfo* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* put_Completed)(__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CApplicationModel__CAppInfo* This,
        __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CApplicationModel__CAppInfo* handler);
    HRESULT (STDMETHODCALLTYPE* get_Completed)(__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CApplicationModel__CAppInfo* This,
        __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CApplicationModel__CAppInfo** result);
    HRESULT (STDMETHODCALLTYPE* GetResults)(__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CApplicationModel__CAppInfo* This,
        __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CApplicationModel__CAppInfo** result);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CApplicationModel__CAppInfoVtbl;

    interface __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CApplicationModel__CAppInfo
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CApplicationModel__CAppInfoVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CApplicationModel__CAppInfo_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CApplicationModel__CAppInfo_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CApplicationModel__CAppInfo_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CApplicationModel__CAppInfo __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CApplicationModel__CAppInfo;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CApplicationModel__CAppInfo;

    typedef struct __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CApplicationModel__CAppInfoVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CApplicationModel__CAppInfo* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CApplicationModel__CAppInfo* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CApplicationModel__CAppInfo* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CApplicationModel__CAppInfo* This,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CApplicationModel__CAppInfo* asyncInfo,
        enum __x_ABI_CWindows_CFoundation_CAsyncStatus asyncStatus);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CApplicationModel__CAppInfoVtbl;

    interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CApplicationModel__CAppInfo
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CApplicationModel__CAppInfoVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CApplicationModel__CAppInfo_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterator_1___x_ABI_CWindows__CSystem__CUser_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CSystem__CUser_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CSystem__CUser __x_ABI_C__FIIterator_1___x_ABI_CWindows__CSystem__CUser;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterator_1___x_ABI_CWindows__CSystem__CUser;

    typedef struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CSystem__CUserVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CSystem__CUser* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CSystem__CUser* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CSystem__CUser* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CSystem__CUser* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CSystem__CUser* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CSystem__CUser* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Current)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CSystem__CUser* This,
        __x_ABI_CWindows_CSystem_CIUser** result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CSystem__CUser* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CSystem__CUser* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CSystem__CUser* This,
        UINT32 itemsLength,
        __x_ABI_CWindows_CSystem_CIUser** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIIterator_1___x_ABI_CWindows__CSystem__CUserVtbl;

    interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CSystem__CUser
    {
        CONST_VTBL struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CSystem__CUserVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CSystem__CUser_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterable_1___x_ABI_CWindows__CSystem__CUser_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CSystem__CUser_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CSystem__CUser __x_ABI_C__FIIterable_1___x_ABI_CWindows__CSystem__CUser;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterable_1___x_ABI_CWindows__CSystem__CUser;

    typedef struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CSystem__CUserVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CSystem__CUser* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CSystem__CUser* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CSystem__CUser* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CSystem__CUser* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CSystem__CUser* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CSystem__CUser* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* First)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CSystem__CUser* This,
        __x_ABI_C__FIIterator_1___x_ABI_CWindows__CSystem__CUser** result);

        END_INTERFACE
    } __x_ABI_C__FIIterable_1___x_ABI_CWindows__CSystem__CUserVtbl;

    interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CSystem__CUser
    {
        CONST_VTBL struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CSystem__CUserVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CSystem__CUser_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CUser_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CUser_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CUser __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CUser;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CUser;

    typedef struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CUserVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CUser* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CUser* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CUser* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CUser* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CUser* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CUser* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CUser* This,
        UINT32 index,
        __x_ABI_CWindows_CSystem_CIUser** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CUser* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CUser* This,
        __x_ABI_CWindows_CSystem_CIUser* value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CUser* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        __x_ABI_CWindows_CSystem_CIUser** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CUserVtbl;

    interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CUser
    {
        CONST_VTBL struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CUserVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CUser_INTERFACE_DEFINED__
    
typedef interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CUser __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CUser;

#if !defined(____x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CUser_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CUser_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CUser __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CUser;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CUser;

    typedef struct __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CUserVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CUser* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CUser* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CUser* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CUser* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CUser* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CUser* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* put_Completed)(__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CUser* This,
        __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CUser* handler);
    HRESULT (STDMETHODCALLTYPE* get_Completed)(__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CUser* This,
        __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CUser** result);
    HRESULT (STDMETHODCALLTYPE* GetResults)(__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CUser* This,
        __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CUser** result);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CUserVtbl;

    interface __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CUser
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CUserVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CUser_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CUser_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CUser_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CUser __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CUser;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CUser;

    typedef struct __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CUserVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CUser* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CUser* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CUser* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CUser* This,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CUser* asyncInfo,
        enum __x_ABI_CWindows_CFoundation_CAsyncStatus asyncStatus);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CUserVtbl;

    interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CUser
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CUserVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CUser_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterator_1___x_ABI_CWindows__CSystem__CAppDiagnosticInfo_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CSystem__CAppDiagnosticInfo_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CSystem__CAppDiagnosticInfo __x_ABI_C__FIIterator_1___x_ABI_CWindows__CSystem__CAppDiagnosticInfo;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterator_1___x_ABI_CWindows__CSystem__CAppDiagnosticInfo;

    typedef struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CSystem__CAppDiagnosticInfoVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CSystem__CAppDiagnosticInfo* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CSystem__CAppDiagnosticInfo* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CSystem__CAppDiagnosticInfo* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CSystem__CAppDiagnosticInfo* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CSystem__CAppDiagnosticInfo* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CSystem__CAppDiagnosticInfo* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Current)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CSystem__CAppDiagnosticInfo* This,
        __x_ABI_CWindows_CSystem_CIAppDiagnosticInfo** result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CSystem__CAppDiagnosticInfo* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CSystem__CAppDiagnosticInfo* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CSystem__CAppDiagnosticInfo* This,
        UINT32 itemsLength,
        __x_ABI_CWindows_CSystem_CIAppDiagnosticInfo** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIIterator_1___x_ABI_CWindows__CSystem__CAppDiagnosticInfoVtbl;

    interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CSystem__CAppDiagnosticInfo
    {
        CONST_VTBL struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CSystem__CAppDiagnosticInfoVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CSystem__CAppDiagnosticInfo_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterable_1___x_ABI_CWindows__CSystem__CAppDiagnosticInfo_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CSystem__CAppDiagnosticInfo_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CSystem__CAppDiagnosticInfo __x_ABI_C__FIIterable_1___x_ABI_CWindows__CSystem__CAppDiagnosticInfo;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterable_1___x_ABI_CWindows__CSystem__CAppDiagnosticInfo;

    typedef struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CSystem__CAppDiagnosticInfoVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CSystem__CAppDiagnosticInfo* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CSystem__CAppDiagnosticInfo* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CSystem__CAppDiagnosticInfo* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CSystem__CAppDiagnosticInfo* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CSystem__CAppDiagnosticInfo* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CSystem__CAppDiagnosticInfo* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* First)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CSystem__CAppDiagnosticInfo* This,
        __x_ABI_C__FIIterator_1___x_ABI_CWindows__CSystem__CAppDiagnosticInfo** result);

        END_INTERFACE
    } __x_ABI_C__FIIterable_1___x_ABI_CWindows__CSystem__CAppDiagnosticInfoVtbl;

    interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CSystem__CAppDiagnosticInfo
    {
        CONST_VTBL struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CSystem__CAppDiagnosticInfoVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CSystem__CAppDiagnosticInfo_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CAppDiagnosticInfo_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CAppDiagnosticInfo_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CAppDiagnosticInfo __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CAppDiagnosticInfo;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CAppDiagnosticInfo;

    typedef struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CAppDiagnosticInfoVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CAppDiagnosticInfo* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CAppDiagnosticInfo* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CAppDiagnosticInfo* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CAppDiagnosticInfo* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CAppDiagnosticInfo* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CAppDiagnosticInfo* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CAppDiagnosticInfo* This,
        UINT32 index,
        __x_ABI_CWindows_CSystem_CIAppDiagnosticInfo** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CAppDiagnosticInfo* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CAppDiagnosticInfo* This,
        __x_ABI_CWindows_CSystem_CIAppDiagnosticInfo* value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CAppDiagnosticInfo* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        __x_ABI_CWindows_CSystem_CIAppDiagnosticInfo** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CAppDiagnosticInfoVtbl;

    interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CAppDiagnosticInfo
    {
        CONST_VTBL struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CAppDiagnosticInfoVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CAppDiagnosticInfo_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVector_1___x_ABI_CWindows__CSystem__CAppDiagnosticInfo_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVector_1___x_ABI_CWindows__CSystem__CAppDiagnosticInfo_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVector_1___x_ABI_CWindows__CSystem__CAppDiagnosticInfo __x_ABI_C__FIVector_1___x_ABI_CWindows__CSystem__CAppDiagnosticInfo;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVector_1___x_ABI_CWindows__CSystem__CAppDiagnosticInfo;

    typedef struct __x_ABI_C__FIVector_1___x_ABI_CWindows__CSystem__CAppDiagnosticInfoVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CSystem__CAppDiagnosticInfo* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CSystem__CAppDiagnosticInfo* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CSystem__CAppDiagnosticInfo* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CSystem__CAppDiagnosticInfo* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CSystem__CAppDiagnosticInfo* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CSystem__CAppDiagnosticInfo* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CSystem__CAppDiagnosticInfo* This,
        UINT32 index,
        __x_ABI_CWindows_CSystem_CIAppDiagnosticInfo** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CSystem__CAppDiagnosticInfo* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* GetView)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CSystem__CAppDiagnosticInfo* This,
        __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CAppDiagnosticInfo** result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CSystem__CAppDiagnosticInfo* This,
        __x_ABI_CWindows_CSystem_CIAppDiagnosticInfo* value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* SetAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CSystem__CAppDiagnosticInfo* This,
        UINT32 index,
        __x_ABI_CWindows_CSystem_CIAppDiagnosticInfo* value);
    HRESULT (STDMETHODCALLTYPE* InsertAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CSystem__CAppDiagnosticInfo* This,
        UINT32 index,
        __x_ABI_CWindows_CSystem_CIAppDiagnosticInfo* value);
    HRESULT (STDMETHODCALLTYPE* RemoveAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CSystem__CAppDiagnosticInfo* This,
        UINT32 index);
    HRESULT (STDMETHODCALLTYPE* Append)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CSystem__CAppDiagnosticInfo* This,
        __x_ABI_CWindows_CSystem_CIAppDiagnosticInfo* value);
    HRESULT (STDMETHODCALLTYPE* RemoveAtEnd)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CSystem__CAppDiagnosticInfo* This);
    HRESULT (STDMETHODCALLTYPE* Clear)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CSystem__CAppDiagnosticInfo* This);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CSystem__CAppDiagnosticInfo* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        __x_ABI_CWindows_CSystem_CIAppDiagnosticInfo** items,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* ReplaceAll)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CSystem__CAppDiagnosticInfo* This,
        UINT32 itemsLength,
        __x_ABI_CWindows_CSystem_CIAppDiagnosticInfo** items);

        END_INTERFACE
    } __x_ABI_C__FIVector_1___x_ABI_CWindows__CSystem__CAppDiagnosticInfoVtbl;

    interface __x_ABI_C__FIVector_1___x_ABI_CWindows__CSystem__CAppDiagnosticInfo
    {
        CONST_VTBL struct __x_ABI_C__FIVector_1___x_ABI_CWindows__CSystem__CAppDiagnosticInfoVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVector_1___x_ABI_CWindows__CSystem__CAppDiagnosticInfo_INTERFACE_DEFINED__
    
typedef interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVector_1___x_ABI_CWindows__CSystem__CAppDiagnosticInfo __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVector_1___x_ABI_CWindows__CSystem__CAppDiagnosticInfo;

#if !defined(____x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVector_1___x_ABI_CWindows__CSystem__CAppDiagnosticInfo_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVector_1___x_ABI_CWindows__CSystem__CAppDiagnosticInfo_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVector_1___x_ABI_CWindows__CSystem__CAppDiagnosticInfo __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVector_1___x_ABI_CWindows__CSystem__CAppDiagnosticInfo;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVector_1___x_ABI_CWindows__CSystem__CAppDiagnosticInfo;

    typedef struct __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVector_1___x_ABI_CWindows__CSystem__CAppDiagnosticInfoVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVector_1___x_ABI_CWindows__CSystem__CAppDiagnosticInfo* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVector_1___x_ABI_CWindows__CSystem__CAppDiagnosticInfo* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVector_1___x_ABI_CWindows__CSystem__CAppDiagnosticInfo* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVector_1___x_ABI_CWindows__CSystem__CAppDiagnosticInfo* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVector_1___x_ABI_CWindows__CSystem__CAppDiagnosticInfo* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVector_1___x_ABI_CWindows__CSystem__CAppDiagnosticInfo* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* put_Completed)(__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVector_1___x_ABI_CWindows__CSystem__CAppDiagnosticInfo* This,
        __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVector_1___x_ABI_CWindows__CSystem__CAppDiagnosticInfo* handler);
    HRESULT (STDMETHODCALLTYPE* get_Completed)(__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVector_1___x_ABI_CWindows__CSystem__CAppDiagnosticInfo* This,
        __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVector_1___x_ABI_CWindows__CSystem__CAppDiagnosticInfo** result);
    HRESULT (STDMETHODCALLTYPE* GetResults)(__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVector_1___x_ABI_CWindows__CSystem__CAppDiagnosticInfo* This,
        __x_ABI_C__FIVector_1___x_ABI_CWindows__CSystem__CAppDiagnosticInfo** result);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVector_1___x_ABI_CWindows__CSystem__CAppDiagnosticInfoVtbl;

    interface __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVector_1___x_ABI_CWindows__CSystem__CAppDiagnosticInfo
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVector_1___x_ABI_CWindows__CSystem__CAppDiagnosticInfoVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVector_1___x_ABI_CWindows__CSystem__CAppDiagnosticInfo_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVector_1___x_ABI_CWindows__CSystem__CAppDiagnosticInfo_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVector_1___x_ABI_CWindows__CSystem__CAppDiagnosticInfo_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVector_1___x_ABI_CWindows__CSystem__CAppDiagnosticInfo __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVector_1___x_ABI_CWindows__CSystem__CAppDiagnosticInfo;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVector_1___x_ABI_CWindows__CSystem__CAppDiagnosticInfo;

    typedef struct __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVector_1___x_ABI_CWindows__CSystem__CAppDiagnosticInfoVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVector_1___x_ABI_CWindows__CSystem__CAppDiagnosticInfo* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVector_1___x_ABI_CWindows__CSystem__CAppDiagnosticInfo* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVector_1___x_ABI_CWindows__CSystem__CAppDiagnosticInfo* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVector_1___x_ABI_CWindows__CSystem__CAppDiagnosticInfo* This,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVector_1___x_ABI_CWindows__CSystem__CAppDiagnosticInfo* asyncInfo,
        enum __x_ABI_CWindows_CFoundation_CAsyncStatus asyncStatus);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVector_1___x_ABI_CWindows__CSystem__CAppDiagnosticInfoVtbl;

    interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVector_1___x_ABI_CWindows__CSystem__CAppDiagnosticInfo
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVector_1___x_ABI_CWindows__CSystem__CAppDiagnosticInfoVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVector_1___x_ABI_CWindows__CSystem__CAppDiagnosticInfo_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterator_1___x_ABI_CWindows__CSystem__CAppUriHandlerHost_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CSystem__CAppUriHandlerHost_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CSystem__CAppUriHandlerHost __x_ABI_C__FIIterator_1___x_ABI_CWindows__CSystem__CAppUriHandlerHost;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterator_1___x_ABI_CWindows__CSystem__CAppUriHandlerHost;

    typedef struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CSystem__CAppUriHandlerHostVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CSystem__CAppUriHandlerHost* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CSystem__CAppUriHandlerHost* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CSystem__CAppUriHandlerHost* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CSystem__CAppUriHandlerHost* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CSystem__CAppUriHandlerHost* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CSystem__CAppUriHandlerHost* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Current)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CSystem__CAppUriHandlerHost* This,
        __x_ABI_CWindows_CSystem_CIAppUriHandlerHost** result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CSystem__CAppUriHandlerHost* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CSystem__CAppUriHandlerHost* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CSystem__CAppUriHandlerHost* This,
        UINT32 itemsLength,
        __x_ABI_CWindows_CSystem_CIAppUriHandlerHost** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIIterator_1___x_ABI_CWindows__CSystem__CAppUriHandlerHostVtbl;

    interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CSystem__CAppUriHandlerHost
    {
        CONST_VTBL struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CSystem__CAppUriHandlerHostVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CSystem__CAppUriHandlerHost_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterable_1___x_ABI_CWindows__CSystem__CAppUriHandlerHost_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CSystem__CAppUriHandlerHost_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CSystem__CAppUriHandlerHost __x_ABI_C__FIIterable_1___x_ABI_CWindows__CSystem__CAppUriHandlerHost;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterable_1___x_ABI_CWindows__CSystem__CAppUriHandlerHost;

    typedef struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CSystem__CAppUriHandlerHostVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CSystem__CAppUriHandlerHost* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CSystem__CAppUriHandlerHost* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CSystem__CAppUriHandlerHost* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CSystem__CAppUriHandlerHost* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CSystem__CAppUriHandlerHost* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CSystem__CAppUriHandlerHost* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* First)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CSystem__CAppUriHandlerHost* This,
        __x_ABI_C__FIIterator_1___x_ABI_CWindows__CSystem__CAppUriHandlerHost** result);

        END_INTERFACE
    } __x_ABI_C__FIIterable_1___x_ABI_CWindows__CSystem__CAppUriHandlerHostVtbl;

    interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CSystem__CAppUriHandlerHost
    {
        CONST_VTBL struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CSystem__CAppUriHandlerHostVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CSystem__CAppUriHandlerHost_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CAppUriHandlerHost_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CAppUriHandlerHost_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CAppUriHandlerHost __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CAppUriHandlerHost;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CAppUriHandlerHost;

    typedef struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CAppUriHandlerHostVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CAppUriHandlerHost* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CAppUriHandlerHost* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CAppUriHandlerHost* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CAppUriHandlerHost* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CAppUriHandlerHost* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CAppUriHandlerHost* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CAppUriHandlerHost* This,
        UINT32 index,
        __x_ABI_CWindows_CSystem_CIAppUriHandlerHost** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CAppUriHandlerHost* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CAppUriHandlerHost* This,
        __x_ABI_CWindows_CSystem_CIAppUriHandlerHost* value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CAppUriHandlerHost* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        __x_ABI_CWindows_CSystem_CIAppUriHandlerHost** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CAppUriHandlerHostVtbl;

    interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CAppUriHandlerHost
    {
        CONST_VTBL struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CAppUriHandlerHostVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CAppUriHandlerHost_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVector_1___x_ABI_CWindows__CSystem__CAppUriHandlerHost_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVector_1___x_ABI_CWindows__CSystem__CAppUriHandlerHost_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVector_1___x_ABI_CWindows__CSystem__CAppUriHandlerHost __x_ABI_C__FIVector_1___x_ABI_CWindows__CSystem__CAppUriHandlerHost;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVector_1___x_ABI_CWindows__CSystem__CAppUriHandlerHost;

    typedef struct __x_ABI_C__FIVector_1___x_ABI_CWindows__CSystem__CAppUriHandlerHostVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CSystem__CAppUriHandlerHost* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CSystem__CAppUriHandlerHost* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CSystem__CAppUriHandlerHost* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CSystem__CAppUriHandlerHost* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CSystem__CAppUriHandlerHost* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CSystem__CAppUriHandlerHost* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CSystem__CAppUriHandlerHost* This,
        UINT32 index,
        __x_ABI_CWindows_CSystem_CIAppUriHandlerHost** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CSystem__CAppUriHandlerHost* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* GetView)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CSystem__CAppUriHandlerHost* This,
        __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CAppUriHandlerHost** result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CSystem__CAppUriHandlerHost* This,
        __x_ABI_CWindows_CSystem_CIAppUriHandlerHost* value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* SetAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CSystem__CAppUriHandlerHost* This,
        UINT32 index,
        __x_ABI_CWindows_CSystem_CIAppUriHandlerHost* value);
    HRESULT (STDMETHODCALLTYPE* InsertAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CSystem__CAppUriHandlerHost* This,
        UINT32 index,
        __x_ABI_CWindows_CSystem_CIAppUriHandlerHost* value);
    HRESULT (STDMETHODCALLTYPE* RemoveAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CSystem__CAppUriHandlerHost* This,
        UINT32 index);
    HRESULT (STDMETHODCALLTYPE* Append)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CSystem__CAppUriHandlerHost* This,
        __x_ABI_CWindows_CSystem_CIAppUriHandlerHost* value);
    HRESULT (STDMETHODCALLTYPE* RemoveAtEnd)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CSystem__CAppUriHandlerHost* This);
    HRESULT (STDMETHODCALLTYPE* Clear)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CSystem__CAppUriHandlerHost* This);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CSystem__CAppUriHandlerHost* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        __x_ABI_CWindows_CSystem_CIAppUriHandlerHost** items,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* ReplaceAll)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CSystem__CAppUriHandlerHost* This,
        UINT32 itemsLength,
        __x_ABI_CWindows_CSystem_CIAppUriHandlerHost** items);

        END_INTERFACE
    } __x_ABI_C__FIVector_1___x_ABI_CWindows__CSystem__CAppUriHandlerHostVtbl;

    interface __x_ABI_C__FIVector_1___x_ABI_CWindows__CSystem__CAppUriHandlerHost
    {
        CONST_VTBL struct __x_ABI_C__FIVector_1___x_ABI_CWindows__CSystem__CAppUriHandlerHostVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVector_1___x_ABI_CWindows__CSystem__CAppUriHandlerHost_INTERFACE_DEFINED__
    
typedef interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVector_1___x_ABI_CWindows__CSystem__CAppUriHandlerHost __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVector_1___x_ABI_CWindows__CSystem__CAppUriHandlerHost;

#if !defined(____x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVector_1___x_ABI_CWindows__CSystem__CAppUriHandlerHost_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVector_1___x_ABI_CWindows__CSystem__CAppUriHandlerHost_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVector_1___x_ABI_CWindows__CSystem__CAppUriHandlerHost __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVector_1___x_ABI_CWindows__CSystem__CAppUriHandlerHost;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVector_1___x_ABI_CWindows__CSystem__CAppUriHandlerHost;

    typedef struct __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVector_1___x_ABI_CWindows__CSystem__CAppUriHandlerHostVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVector_1___x_ABI_CWindows__CSystem__CAppUriHandlerHost* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVector_1___x_ABI_CWindows__CSystem__CAppUriHandlerHost* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVector_1___x_ABI_CWindows__CSystem__CAppUriHandlerHost* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVector_1___x_ABI_CWindows__CSystem__CAppUriHandlerHost* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVector_1___x_ABI_CWindows__CSystem__CAppUriHandlerHost* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVector_1___x_ABI_CWindows__CSystem__CAppUriHandlerHost* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* put_Completed)(__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVector_1___x_ABI_CWindows__CSystem__CAppUriHandlerHost* This,
        __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVector_1___x_ABI_CWindows__CSystem__CAppUriHandlerHost* handler);
    HRESULT (STDMETHODCALLTYPE* get_Completed)(__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVector_1___x_ABI_CWindows__CSystem__CAppUriHandlerHost* This,
        __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVector_1___x_ABI_CWindows__CSystem__CAppUriHandlerHost** result);
    HRESULT (STDMETHODCALLTYPE* GetResults)(__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVector_1___x_ABI_CWindows__CSystem__CAppUriHandlerHost* This,
        __x_ABI_C__FIVector_1___x_ABI_CWindows__CSystem__CAppUriHandlerHost** result);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVector_1___x_ABI_CWindows__CSystem__CAppUriHandlerHostVtbl;

    interface __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVector_1___x_ABI_CWindows__CSystem__CAppUriHandlerHost
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVector_1___x_ABI_CWindows__CSystem__CAppUriHandlerHostVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVector_1___x_ABI_CWindows__CSystem__CAppUriHandlerHost_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVector_1___x_ABI_CWindows__CSystem__CAppUriHandlerHost_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVector_1___x_ABI_CWindows__CSystem__CAppUriHandlerHost_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVector_1___x_ABI_CWindows__CSystem__CAppUriHandlerHost __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVector_1___x_ABI_CWindows__CSystem__CAppUriHandlerHost;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVector_1___x_ABI_CWindows__CSystem__CAppUriHandlerHost;

    typedef struct __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVector_1___x_ABI_CWindows__CSystem__CAppUriHandlerHostVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVector_1___x_ABI_CWindows__CSystem__CAppUriHandlerHost* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVector_1___x_ABI_CWindows__CSystem__CAppUriHandlerHost* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVector_1___x_ABI_CWindows__CSystem__CAppUriHandlerHost* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVector_1___x_ABI_CWindows__CSystem__CAppUriHandlerHost* This,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVector_1___x_ABI_CWindows__CSystem__CAppUriHandlerHost* asyncInfo,
        enum __x_ABI_CWindows_CFoundation_CAsyncStatus asyncStatus);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVector_1___x_ABI_CWindows__CSystem__CAppUriHandlerHostVtbl;

    interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVector_1___x_ABI_CWindows__CSystem__CAppUriHandlerHost
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVector_1___x_ABI_CWindows__CSystem__CAppUriHandlerHostVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVector_1___x_ABI_CWindows__CSystem__CAppUriHandlerHost_INTERFACE_DEFINED__
    
#ifndef ____x_ABI_CWindows_CStorage_CStreams_CIRandomAccessStreamReference_FWD_DEFINED__
#define ____x_ABI_CWindows_CStorage_CStreams_CIRandomAccessStreamReference_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CStorage_CStreams_CIRandomAccessStreamReference __x_ABI_CWindows_CStorage_CStreams_CIRandomAccessStreamReference;

#endif // ____x_ABI_CWindows_CStorage_CStreams_CIRandomAccessStreamReference_FWD_DEFINED__

typedef interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CStreams__CIRandomAccessStreamReference __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CStreams__CIRandomAccessStreamReference;

#if !defined(____x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStreams__CIRandomAccessStreamReference_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStreams__CIRandomAccessStreamReference_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStreams__CIRandomAccessStreamReference __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStreams__CIRandomAccessStreamReference;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStreams__CIRandomAccessStreamReference;

    typedef struct __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStreams__CIRandomAccessStreamReferenceVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStreams__CIRandomAccessStreamReference* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStreams__CIRandomAccessStreamReference* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStreams__CIRandomAccessStreamReference* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStreams__CIRandomAccessStreamReference* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStreams__CIRandomAccessStreamReference* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStreams__CIRandomAccessStreamReference* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* put_Completed)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStreams__CIRandomAccessStreamReference* This,
        __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CStreams__CIRandomAccessStreamReference* handler);
    HRESULT (STDMETHODCALLTYPE* get_Completed)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStreams__CIRandomAccessStreamReference* This,
        __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CStreams__CIRandomAccessStreamReference** result);
    HRESULT (STDMETHODCALLTYPE* GetResults)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStreams__CIRandomAccessStreamReference* This,
        __x_ABI_CWindows_CStorage_CStreams_CIRandomAccessStreamReference** result);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStreams__CIRandomAccessStreamReferenceVtbl;

    interface __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStreams__CIRandomAccessStreamReference
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStreams__CIRandomAccessStreamReferenceVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStreams__CIRandomAccessStreamReference_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CStreams__CIRandomAccessStreamReference_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CStreams__CIRandomAccessStreamReference_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CStreams__CIRandomAccessStreamReference __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CStreams__CIRandomAccessStreamReference;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CStreams__CIRandomAccessStreamReference;

    typedef struct __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CStreams__CIRandomAccessStreamReferenceVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CStreams__CIRandomAccessStreamReference* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CStreams__CIRandomAccessStreamReference* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CStreams__CIRandomAccessStreamReference* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CStreams__CIRandomAccessStreamReference* This,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStreams__CIRandomAccessStreamReference* asyncInfo,
        enum __x_ABI_CWindows_CFoundation_CAsyncStatus asyncStatus);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CStreams__CIRandomAccessStreamReferenceVtbl;

    interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CStreams__CIRandomAccessStreamReference
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CStreams__CIRandomAccessStreamReferenceVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CStreams__CIRandomAccessStreamReference_INTERFACE_DEFINED__
    
typedef interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CSystem__CAppActivationResult __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CSystem__CAppActivationResult;

#if !defined(____x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CAppActivationResult_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CAppActivationResult_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CAppActivationResult __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CAppActivationResult;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CAppActivationResult;

    typedef struct __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CAppActivationResultVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CAppActivationResult* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CAppActivationResult* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CAppActivationResult* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CAppActivationResult* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CAppActivationResult* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CAppActivationResult* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* put_Completed)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CAppActivationResult* This,
        __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CSystem__CAppActivationResult* handler);
    HRESULT (STDMETHODCALLTYPE* get_Completed)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CAppActivationResult* This,
        __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CSystem__CAppActivationResult** result);
    HRESULT (STDMETHODCALLTYPE* GetResults)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CAppActivationResult* This,
        __x_ABI_CWindows_CSystem_CIAppActivationResult** result);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CAppActivationResultVtbl;

    interface __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CAppActivationResult
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CAppActivationResultVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CAppActivationResult_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CSystem__CAppActivationResult_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CSystem__CAppActivationResult_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CSystem__CAppActivationResult __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CSystem__CAppActivationResult;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CSystem__CAppActivationResult;

    typedef struct __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CSystem__CAppActivationResultVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CSystem__CAppActivationResult* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CSystem__CAppActivationResult* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CSystem__CAppActivationResult* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CSystem__CAppActivationResult* This,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CAppActivationResult* asyncInfo,
        enum __x_ABI_CWindows_CFoundation_CAsyncStatus asyncStatus);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CSystem__CAppActivationResultVtbl;

    interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CSystem__CAppActivationResult
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CSystem__CAppActivationResultVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CSystem__CAppActivationResult_INTERFACE_DEFINED__
    
typedef interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CSystem__CAppExecutionStateChangeResult __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CSystem__CAppExecutionStateChangeResult;

#if !defined(____x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CAppExecutionStateChangeResult_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CAppExecutionStateChangeResult_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CAppExecutionStateChangeResult __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CAppExecutionStateChangeResult;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CAppExecutionStateChangeResult;

    typedef struct __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CAppExecutionStateChangeResultVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CAppExecutionStateChangeResult* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CAppExecutionStateChangeResult* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CAppExecutionStateChangeResult* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CAppExecutionStateChangeResult* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CAppExecutionStateChangeResult* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CAppExecutionStateChangeResult* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* put_Completed)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CAppExecutionStateChangeResult* This,
        __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CSystem__CAppExecutionStateChangeResult* handler);
    HRESULT (STDMETHODCALLTYPE* get_Completed)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CAppExecutionStateChangeResult* This,
        __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CSystem__CAppExecutionStateChangeResult** result);
    HRESULT (STDMETHODCALLTYPE* GetResults)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CAppExecutionStateChangeResult* This,
        __x_ABI_CWindows_CSystem_CIAppExecutionStateChangeResult** result);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CAppExecutionStateChangeResultVtbl;

    interface __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CAppExecutionStateChangeResult
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CAppExecutionStateChangeResultVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CAppExecutionStateChangeResult_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CSystem__CAppExecutionStateChangeResult_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CSystem__CAppExecutionStateChangeResult_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CSystem__CAppExecutionStateChangeResult __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CSystem__CAppExecutionStateChangeResult;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CSystem__CAppExecutionStateChangeResult;

    typedef struct __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CSystem__CAppExecutionStateChangeResultVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CSystem__CAppExecutionStateChangeResult* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CSystem__CAppExecutionStateChangeResult* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CSystem__CAppExecutionStateChangeResult* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CSystem__CAppExecutionStateChangeResult* This,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CAppExecutionStateChangeResult* asyncInfo,
        enum __x_ABI_CWindows_CFoundation_CAsyncStatus asyncStatus);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CSystem__CAppExecutionStateChangeResultVtbl;

    interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CSystem__CAppExecutionStateChangeResult
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CSystem__CAppExecutionStateChangeResultVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CSystem__CAppExecutionStateChangeResult_INTERFACE_DEFINED__
    
typedef enum __x_ABI_CWindows_CSystem_CAutoUpdateTimeZoneStatus __x_ABI_CWindows_CSystem_CAutoUpdateTimeZoneStatus;

typedef interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CSystem__CAutoUpdateTimeZoneStatus __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CSystem__CAutoUpdateTimeZoneStatus;

#if !defined(____x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CAutoUpdateTimeZoneStatus_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CAutoUpdateTimeZoneStatus_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CAutoUpdateTimeZoneStatus __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CAutoUpdateTimeZoneStatus;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CAutoUpdateTimeZoneStatus;

    typedef struct __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CAutoUpdateTimeZoneStatusVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CAutoUpdateTimeZoneStatus* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CAutoUpdateTimeZoneStatus* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CAutoUpdateTimeZoneStatus* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CAutoUpdateTimeZoneStatus* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CAutoUpdateTimeZoneStatus* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CAutoUpdateTimeZoneStatus* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* put_Completed)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CAutoUpdateTimeZoneStatus* This,
        __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CSystem__CAutoUpdateTimeZoneStatus* handler);
    HRESULT (STDMETHODCALLTYPE* get_Completed)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CAutoUpdateTimeZoneStatus* This,
        __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CSystem__CAutoUpdateTimeZoneStatus** result);
    HRESULT (STDMETHODCALLTYPE* GetResults)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CAutoUpdateTimeZoneStatus* This,
        enum __x_ABI_CWindows_CSystem_CAutoUpdateTimeZoneStatus* result);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CAutoUpdateTimeZoneStatusVtbl;

    interface __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CAutoUpdateTimeZoneStatus
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CAutoUpdateTimeZoneStatusVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CAutoUpdateTimeZoneStatus_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CSystem__CAutoUpdateTimeZoneStatus_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CSystem__CAutoUpdateTimeZoneStatus_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CSystem__CAutoUpdateTimeZoneStatus __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CSystem__CAutoUpdateTimeZoneStatus;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CSystem__CAutoUpdateTimeZoneStatus;

    typedef struct __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CSystem__CAutoUpdateTimeZoneStatusVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CSystem__CAutoUpdateTimeZoneStatus* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CSystem__CAutoUpdateTimeZoneStatus* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CSystem__CAutoUpdateTimeZoneStatus* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CSystem__CAutoUpdateTimeZoneStatus* This,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CAutoUpdateTimeZoneStatus* asyncInfo,
        enum __x_ABI_CWindows_CFoundation_CAsyncStatus asyncStatus);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CSystem__CAutoUpdateTimeZoneStatusVtbl;

    interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CSystem__CAutoUpdateTimeZoneStatus
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CSystem__CAutoUpdateTimeZoneStatusVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CSystem__CAutoUpdateTimeZoneStatus_INTERFACE_DEFINED__
    
typedef enum __x_ABI_CWindows_CSystem_CDiagnosticAccessStatus __x_ABI_CWindows_CSystem_CDiagnosticAccessStatus;

typedef interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CSystem__CDiagnosticAccessStatus __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CSystem__CDiagnosticAccessStatus;

#if !defined(____x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CDiagnosticAccessStatus_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CDiagnosticAccessStatus_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CDiagnosticAccessStatus __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CDiagnosticAccessStatus;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CDiagnosticAccessStatus;

    typedef struct __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CDiagnosticAccessStatusVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CDiagnosticAccessStatus* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CDiagnosticAccessStatus* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CDiagnosticAccessStatus* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CDiagnosticAccessStatus* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CDiagnosticAccessStatus* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CDiagnosticAccessStatus* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* put_Completed)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CDiagnosticAccessStatus* This,
        __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CSystem__CDiagnosticAccessStatus* handler);
    HRESULT (STDMETHODCALLTYPE* get_Completed)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CDiagnosticAccessStatus* This,
        __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CSystem__CDiagnosticAccessStatus** result);
    HRESULT (STDMETHODCALLTYPE* GetResults)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CDiagnosticAccessStatus* This,
        enum __x_ABI_CWindows_CSystem_CDiagnosticAccessStatus* result);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CDiagnosticAccessStatusVtbl;

    interface __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CDiagnosticAccessStatus
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CDiagnosticAccessStatusVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CDiagnosticAccessStatus_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CSystem__CDiagnosticAccessStatus_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CSystem__CDiagnosticAccessStatus_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CSystem__CDiagnosticAccessStatus __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CSystem__CDiagnosticAccessStatus;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CSystem__CDiagnosticAccessStatus;

    typedef struct __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CSystem__CDiagnosticAccessStatusVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CSystem__CDiagnosticAccessStatus* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CSystem__CDiagnosticAccessStatus* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CSystem__CDiagnosticAccessStatus* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CSystem__CDiagnosticAccessStatus* This,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CDiagnosticAccessStatus* asyncInfo,
        enum __x_ABI_CWindows_CFoundation_CAsyncStatus asyncStatus);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CSystem__CDiagnosticAccessStatusVtbl;

    interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CSystem__CDiagnosticAccessStatus
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CSystem__CDiagnosticAccessStatusVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CSystem__CDiagnosticAccessStatus_INTERFACE_DEFINED__
    
typedef enum __x_ABI_CWindows_CSystem_CLaunchQuerySupportStatus __x_ABI_CWindows_CSystem_CLaunchQuerySupportStatus;

typedef interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CSystem__CLaunchQuerySupportStatus __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CSystem__CLaunchQuerySupportStatus;

#if !defined(____x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CLaunchQuerySupportStatus_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CLaunchQuerySupportStatus_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CLaunchQuerySupportStatus __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CLaunchQuerySupportStatus;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CLaunchQuerySupportStatus;

    typedef struct __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CLaunchQuerySupportStatusVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CLaunchQuerySupportStatus* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CLaunchQuerySupportStatus* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CLaunchQuerySupportStatus* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CLaunchQuerySupportStatus* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CLaunchQuerySupportStatus* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CLaunchQuerySupportStatus* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* put_Completed)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CLaunchQuerySupportStatus* This,
        __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CSystem__CLaunchQuerySupportStatus* handler);
    HRESULT (STDMETHODCALLTYPE* get_Completed)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CLaunchQuerySupportStatus* This,
        __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CSystem__CLaunchQuerySupportStatus** result);
    HRESULT (STDMETHODCALLTYPE* GetResults)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CLaunchQuerySupportStatus* This,
        enum __x_ABI_CWindows_CSystem_CLaunchQuerySupportStatus* result);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CLaunchQuerySupportStatusVtbl;

    interface __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CLaunchQuerySupportStatus
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CLaunchQuerySupportStatusVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CLaunchQuerySupportStatus_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CSystem__CLaunchQuerySupportStatus_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CSystem__CLaunchQuerySupportStatus_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CSystem__CLaunchQuerySupportStatus __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CSystem__CLaunchQuerySupportStatus;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CSystem__CLaunchQuerySupportStatus;

    typedef struct __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CSystem__CLaunchQuerySupportStatusVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CSystem__CLaunchQuerySupportStatus* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CSystem__CLaunchQuerySupportStatus* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CSystem__CLaunchQuerySupportStatus* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CSystem__CLaunchQuerySupportStatus* This,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CLaunchQuerySupportStatus* asyncInfo,
        enum __x_ABI_CWindows_CFoundation_CAsyncStatus asyncStatus);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CSystem__CLaunchQuerySupportStatusVtbl;

    interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CSystem__CLaunchQuerySupportStatus
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CSystem__CLaunchQuerySupportStatusVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CSystem__CLaunchQuerySupportStatus_INTERFACE_DEFINED__
    
typedef interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CSystem__CLaunchUriResult __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CSystem__CLaunchUriResult;

#if !defined(____x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CLaunchUriResult_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CLaunchUriResult_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CLaunchUriResult __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CLaunchUriResult;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CLaunchUriResult;

    typedef struct __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CLaunchUriResultVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CLaunchUriResult* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CLaunchUriResult* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CLaunchUriResult* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CLaunchUriResult* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CLaunchUriResult* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CLaunchUriResult* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* put_Completed)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CLaunchUriResult* This,
        __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CSystem__CLaunchUriResult* handler);
    HRESULT (STDMETHODCALLTYPE* get_Completed)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CLaunchUriResult* This,
        __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CSystem__CLaunchUriResult** result);
    HRESULT (STDMETHODCALLTYPE* GetResults)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CLaunchUriResult* This,
        __x_ABI_CWindows_CSystem_CILaunchUriResult** result);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CLaunchUriResultVtbl;

    interface __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CLaunchUriResult
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CLaunchUriResultVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CLaunchUriResult_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CSystem__CLaunchUriResult_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CSystem__CLaunchUriResult_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CSystem__CLaunchUriResult __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CSystem__CLaunchUriResult;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CSystem__CLaunchUriResult;

    typedef struct __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CSystem__CLaunchUriResultVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CSystem__CLaunchUriResult* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CSystem__CLaunchUriResult* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CSystem__CLaunchUriResult* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CSystem__CLaunchUriResult* This,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CLaunchUriResult* asyncInfo,
        enum __x_ABI_CWindows_CFoundation_CAsyncStatus asyncStatus);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CSystem__CLaunchUriResultVtbl;

    interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CSystem__CLaunchUriResult
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CSystem__CLaunchUriResultVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CSystem__CLaunchUriResult_INTERFACE_DEFINED__
    
typedef enum __x_ABI_CWindows_CSystem_CLaunchUriStatus __x_ABI_CWindows_CSystem_CLaunchUriStatus;

typedef interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CSystem__CLaunchUriStatus __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CSystem__CLaunchUriStatus;

#if !defined(____x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CLaunchUriStatus_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CLaunchUriStatus_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CLaunchUriStatus __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CLaunchUriStatus;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CLaunchUriStatus;

    typedef struct __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CLaunchUriStatusVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CLaunchUriStatus* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CLaunchUriStatus* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CLaunchUriStatus* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CLaunchUriStatus* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CLaunchUriStatus* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CLaunchUriStatus* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* put_Completed)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CLaunchUriStatus* This,
        __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CSystem__CLaunchUriStatus* handler);
    HRESULT (STDMETHODCALLTYPE* get_Completed)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CLaunchUriStatus* This,
        __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CSystem__CLaunchUriStatus** result);
    HRESULT (STDMETHODCALLTYPE* GetResults)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CLaunchUriStatus* This,
        enum __x_ABI_CWindows_CSystem_CLaunchUriStatus* result);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CLaunchUriStatusVtbl;

    interface __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CLaunchUriStatus
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CLaunchUriStatusVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CLaunchUriStatus_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CSystem__CLaunchUriStatus_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CSystem__CLaunchUriStatus_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CSystem__CLaunchUriStatus __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CSystem__CLaunchUriStatus;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CSystem__CLaunchUriStatus;

    typedef struct __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CSystem__CLaunchUriStatusVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CSystem__CLaunchUriStatus* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CSystem__CLaunchUriStatus* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CSystem__CLaunchUriStatus* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CSystem__CLaunchUriStatus* This,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CLaunchUriStatus* asyncInfo,
        enum __x_ABI_CWindows_CFoundation_CAsyncStatus asyncStatus);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CSystem__CLaunchUriStatusVtbl;

    interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CSystem__CLaunchUriStatus
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CSystem__CLaunchUriStatusVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CSystem__CLaunchUriStatus_INTERFACE_DEFINED__
    
typedef interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CSystem__CProcessLauncherResult __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CSystem__CProcessLauncherResult;

#if !defined(____x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CProcessLauncherResult_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CProcessLauncherResult_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CProcessLauncherResult __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CProcessLauncherResult;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CProcessLauncherResult;

    typedef struct __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CProcessLauncherResultVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CProcessLauncherResult* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CProcessLauncherResult* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CProcessLauncherResult* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CProcessLauncherResult* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CProcessLauncherResult* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CProcessLauncherResult* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* put_Completed)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CProcessLauncherResult* This,
        __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CSystem__CProcessLauncherResult* handler);
    HRESULT (STDMETHODCALLTYPE* get_Completed)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CProcessLauncherResult* This,
        __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CSystem__CProcessLauncherResult** result);
    HRESULT (STDMETHODCALLTYPE* GetResults)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CProcessLauncherResult* This,
        __x_ABI_CWindows_CSystem_CIProcessLauncherResult** result);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CProcessLauncherResultVtbl;

    interface __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CProcessLauncherResult
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CProcessLauncherResultVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CProcessLauncherResult_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CSystem__CProcessLauncherResult_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CSystem__CProcessLauncherResult_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CSystem__CProcessLauncherResult __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CSystem__CProcessLauncherResult;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CSystem__CProcessLauncherResult;

    typedef struct __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CSystem__CProcessLauncherResultVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CSystem__CProcessLauncherResult* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CSystem__CProcessLauncherResult* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CSystem__CProcessLauncherResult* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CSystem__CProcessLauncherResult* This,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CProcessLauncherResult* asyncInfo,
        enum __x_ABI_CWindows_CFoundation_CAsyncStatus asyncStatus);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CSystem__CProcessLauncherResultVtbl;

    interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CSystem__CProcessLauncherResult
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CSystem__CProcessLauncherResultVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CSystem__CProcessLauncherResult_INTERFACE_DEFINED__
    
typedef enum __x_ABI_CWindows_CSystem_CRemoteLaunchUriStatus __x_ABI_CWindows_CSystem_CRemoteLaunchUriStatus;

typedef interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CSystem__CRemoteLaunchUriStatus __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CSystem__CRemoteLaunchUriStatus;

#if !defined(____x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CRemoteLaunchUriStatus_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CRemoteLaunchUriStatus_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CRemoteLaunchUriStatus __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CRemoteLaunchUriStatus;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CRemoteLaunchUriStatus;

    typedef struct __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CRemoteLaunchUriStatusVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CRemoteLaunchUriStatus* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CRemoteLaunchUriStatus* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CRemoteLaunchUriStatus* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CRemoteLaunchUriStatus* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CRemoteLaunchUriStatus* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CRemoteLaunchUriStatus* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* put_Completed)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CRemoteLaunchUriStatus* This,
        __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CSystem__CRemoteLaunchUriStatus* handler);
    HRESULT (STDMETHODCALLTYPE* get_Completed)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CRemoteLaunchUriStatus* This,
        __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CSystem__CRemoteLaunchUriStatus** result);
    HRESULT (STDMETHODCALLTYPE* GetResults)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CRemoteLaunchUriStatus* This,
        enum __x_ABI_CWindows_CSystem_CRemoteLaunchUriStatus* result);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CRemoteLaunchUriStatusVtbl;

    interface __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CRemoteLaunchUriStatus
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CRemoteLaunchUriStatusVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CRemoteLaunchUriStatus_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CSystem__CRemoteLaunchUriStatus_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CSystem__CRemoteLaunchUriStatus_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CSystem__CRemoteLaunchUriStatus __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CSystem__CRemoteLaunchUriStatus;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CSystem__CRemoteLaunchUriStatus;

    typedef struct __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CSystem__CRemoteLaunchUriStatusVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CSystem__CRemoteLaunchUriStatus* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CSystem__CRemoteLaunchUriStatus* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CSystem__CRemoteLaunchUriStatus* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CSystem__CRemoteLaunchUriStatus* This,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CRemoteLaunchUriStatus* asyncInfo,
        enum __x_ABI_CWindows_CFoundation_CAsyncStatus asyncStatus);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CSystem__CRemoteLaunchUriStatusVtbl;

    interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CSystem__CRemoteLaunchUriStatus
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CSystem__CRemoteLaunchUriStatusVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CSystem__CRemoteLaunchUriStatus_INTERFACE_DEFINED__
    
typedef interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CSystem__CUser __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CSystem__CUser;

#if !defined(____x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CUser_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CUser_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CUser __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CUser;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CUser;

    typedef struct __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CUserVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CUser* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CUser* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CUser* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CUser* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CUser* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CUser* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* put_Completed)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CUser* This,
        __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CSystem__CUser* handler);
    HRESULT (STDMETHODCALLTYPE* get_Completed)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CUser* This,
        __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CSystem__CUser** result);
    HRESULT (STDMETHODCALLTYPE* GetResults)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CUser* This,
        __x_ABI_CWindows_CSystem_CIUser** result);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CUserVtbl;

    interface __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CUser
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CUserVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CUser_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CSystem__CUser_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CSystem__CUser_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CSystem__CUser __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CSystem__CUser;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CSystem__CUser;

    typedef struct __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CSystem__CUserVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CSystem__CUser* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CSystem__CUser* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CSystem__CUser* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CSystem__CUser* This,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CUser* asyncInfo,
        enum __x_ABI_CWindows_CFoundation_CAsyncStatus asyncStatus);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CSystem__CUserVtbl;

    interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CSystem__CUser
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CSystem__CUserVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CSystem__CUser_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterator_1_HSTRING_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterator_1_HSTRING_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterator_1_HSTRING __x_ABI_C__FIIterator_1_HSTRING;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterator_1_HSTRING;

    typedef struct __x_ABI_C__FIIterator_1_HSTRINGVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterator_1_HSTRING* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterator_1_HSTRING* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterator_1_HSTRING* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterator_1_HSTRING* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterator_1_HSTRING* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterator_1_HSTRING* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Current)(__x_ABI_C__FIIterator_1_HSTRING* This,
        HSTRING* result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__x_ABI_C__FIIterator_1_HSTRING* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__x_ABI_C__FIIterator_1_HSTRING* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIIterator_1_HSTRING* This,
        UINT32 itemsLength,
        HSTRING* items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIIterator_1_HSTRINGVtbl;

    interface __x_ABI_C__FIIterator_1_HSTRING
    {
        CONST_VTBL struct __x_ABI_C__FIIterator_1_HSTRINGVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterator_1_HSTRING_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterable_1_HSTRING_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterable_1_HSTRING_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterable_1_HSTRING __x_ABI_C__FIIterable_1_HSTRING;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterable_1_HSTRING;

    typedef struct __x_ABI_C__FIIterable_1_HSTRINGVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterable_1_HSTRING* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterable_1_HSTRING* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterable_1_HSTRING* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterable_1_HSTRING* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterable_1_HSTRING* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterable_1_HSTRING* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* First)(__x_ABI_C__FIIterable_1_HSTRING* This,
        __x_ABI_C__FIIterator_1_HSTRING** result);

        END_INTERFACE
    } __x_ABI_C__FIIterable_1_HSTRINGVtbl;

    interface __x_ABI_C__FIIterable_1_HSTRING
    {
        CONST_VTBL struct __x_ABI_C__FIIterable_1_HSTRINGVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterable_1_HSTRING_INTERFACE_DEFINED__
    
#ifndef ____x_ABI_CWindows_CStorage_CIStorageItem_FWD_DEFINED__
#define ____x_ABI_CWindows_CStorage_CIStorageItem_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CStorage_CIStorageItem __x_ABI_CWindows_CStorage_CIStorageItem;

#endif // ____x_ABI_CWindows_CStorage_CIStorageItem_FWD_DEFINED__

#if !defined(____x_ABI_C__FIIterator_1___x_ABI_CWindows__CStorage__CIStorageItem_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CStorage__CIStorageItem_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CStorage__CIStorageItem __x_ABI_C__FIIterator_1___x_ABI_CWindows__CStorage__CIStorageItem;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterator_1___x_ABI_CWindows__CStorage__CIStorageItem;

    typedef struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CStorage__CIStorageItemVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CStorage__CIStorageItem* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CStorage__CIStorageItem* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CStorage__CIStorageItem* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CStorage__CIStorageItem* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CStorage__CIStorageItem* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CStorage__CIStorageItem* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Current)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CStorage__CIStorageItem* This,
        __x_ABI_CWindows_CStorage_CIStorageItem** result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CStorage__CIStorageItem* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CStorage__CIStorageItem* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CStorage__CIStorageItem* This,
        UINT32 itemsLength,
        __x_ABI_CWindows_CStorage_CIStorageItem** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIIterator_1___x_ABI_CWindows__CStorage__CIStorageItemVtbl;

    interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CStorage__CIStorageItem
    {
        CONST_VTBL struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CStorage__CIStorageItemVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CStorage__CIStorageItem_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterable_1___x_ABI_CWindows__CStorage__CIStorageItem_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CStorage__CIStorageItem_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CStorage__CIStorageItem __x_ABI_C__FIIterable_1___x_ABI_CWindows__CStorage__CIStorageItem;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterable_1___x_ABI_CWindows__CStorage__CIStorageItem;

    typedef struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CStorage__CIStorageItemVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CStorage__CIStorageItem* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CStorage__CIStorageItem* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CStorage__CIStorageItem* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CStorage__CIStorageItem* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CStorage__CIStorageItem* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CStorage__CIStorageItem* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* First)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CStorage__CIStorageItem* This,
        __x_ABI_C__FIIterator_1___x_ABI_CWindows__CStorage__CIStorageItem** result);

        END_INTERFACE
    } __x_ABI_C__FIIterable_1___x_ABI_CWindows__CStorage__CIStorageItemVtbl;

    interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CStorage__CIStorageItem
    {
        CONST_VTBL struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CStorage__CIStorageItemVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CStorage__CIStorageItem_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterator_1___x_ABI_CWindows__CSystem__CAppResourceGroupBackgroundTaskReport_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CSystem__CAppResourceGroupBackgroundTaskReport_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CSystem__CAppResourceGroupBackgroundTaskReport __x_ABI_C__FIIterator_1___x_ABI_CWindows__CSystem__CAppResourceGroupBackgroundTaskReport;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterator_1___x_ABI_CWindows__CSystem__CAppResourceGroupBackgroundTaskReport;

    typedef struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CSystem__CAppResourceGroupBackgroundTaskReportVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CSystem__CAppResourceGroupBackgroundTaskReport* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CSystem__CAppResourceGroupBackgroundTaskReport* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CSystem__CAppResourceGroupBackgroundTaskReport* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CSystem__CAppResourceGroupBackgroundTaskReport* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CSystem__CAppResourceGroupBackgroundTaskReport* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CSystem__CAppResourceGroupBackgroundTaskReport* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Current)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CSystem__CAppResourceGroupBackgroundTaskReport* This,
        __x_ABI_CWindows_CSystem_CIAppResourceGroupBackgroundTaskReport** result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CSystem__CAppResourceGroupBackgroundTaskReport* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CSystem__CAppResourceGroupBackgroundTaskReport* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CSystem__CAppResourceGroupBackgroundTaskReport* This,
        UINT32 itemsLength,
        __x_ABI_CWindows_CSystem_CIAppResourceGroupBackgroundTaskReport** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIIterator_1___x_ABI_CWindows__CSystem__CAppResourceGroupBackgroundTaskReportVtbl;

    interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CSystem__CAppResourceGroupBackgroundTaskReport
    {
        CONST_VTBL struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CSystem__CAppResourceGroupBackgroundTaskReportVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CSystem__CAppResourceGroupBackgroundTaskReport_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterable_1___x_ABI_CWindows__CSystem__CAppResourceGroupBackgroundTaskReport_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CSystem__CAppResourceGroupBackgroundTaskReport_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CSystem__CAppResourceGroupBackgroundTaskReport __x_ABI_C__FIIterable_1___x_ABI_CWindows__CSystem__CAppResourceGroupBackgroundTaskReport;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterable_1___x_ABI_CWindows__CSystem__CAppResourceGroupBackgroundTaskReport;

    typedef struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CSystem__CAppResourceGroupBackgroundTaskReportVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CSystem__CAppResourceGroupBackgroundTaskReport* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CSystem__CAppResourceGroupBackgroundTaskReport* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CSystem__CAppResourceGroupBackgroundTaskReport* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CSystem__CAppResourceGroupBackgroundTaskReport* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CSystem__CAppResourceGroupBackgroundTaskReport* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CSystem__CAppResourceGroupBackgroundTaskReport* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* First)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CSystem__CAppResourceGroupBackgroundTaskReport* This,
        __x_ABI_C__FIIterator_1___x_ABI_CWindows__CSystem__CAppResourceGroupBackgroundTaskReport** result);

        END_INTERFACE
    } __x_ABI_C__FIIterable_1___x_ABI_CWindows__CSystem__CAppResourceGroupBackgroundTaskReportVtbl;

    interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CSystem__CAppResourceGroupBackgroundTaskReport
    {
        CONST_VTBL struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CSystem__CAppResourceGroupBackgroundTaskReportVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CSystem__CAppResourceGroupBackgroundTaskReport_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterator_1___x_ABI_CWindows__CSystem__CAppResourceGroupInfo_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CSystem__CAppResourceGroupInfo_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CSystem__CAppResourceGroupInfo __x_ABI_C__FIIterator_1___x_ABI_CWindows__CSystem__CAppResourceGroupInfo;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterator_1___x_ABI_CWindows__CSystem__CAppResourceGroupInfo;

    typedef struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CSystem__CAppResourceGroupInfoVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CSystem__CAppResourceGroupInfo* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CSystem__CAppResourceGroupInfo* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CSystem__CAppResourceGroupInfo* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CSystem__CAppResourceGroupInfo* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CSystem__CAppResourceGroupInfo* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CSystem__CAppResourceGroupInfo* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Current)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CSystem__CAppResourceGroupInfo* This,
        __x_ABI_CWindows_CSystem_CIAppResourceGroupInfo** result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CSystem__CAppResourceGroupInfo* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CSystem__CAppResourceGroupInfo* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CSystem__CAppResourceGroupInfo* This,
        UINT32 itemsLength,
        __x_ABI_CWindows_CSystem_CIAppResourceGroupInfo** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIIterator_1___x_ABI_CWindows__CSystem__CAppResourceGroupInfoVtbl;

    interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CSystem__CAppResourceGroupInfo
    {
        CONST_VTBL struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CSystem__CAppResourceGroupInfoVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CSystem__CAppResourceGroupInfo_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterable_1___x_ABI_CWindows__CSystem__CAppResourceGroupInfo_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CSystem__CAppResourceGroupInfo_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CSystem__CAppResourceGroupInfo __x_ABI_C__FIIterable_1___x_ABI_CWindows__CSystem__CAppResourceGroupInfo;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterable_1___x_ABI_CWindows__CSystem__CAppResourceGroupInfo;

    typedef struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CSystem__CAppResourceGroupInfoVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CSystem__CAppResourceGroupInfo* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CSystem__CAppResourceGroupInfo* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CSystem__CAppResourceGroupInfo* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CSystem__CAppResourceGroupInfo* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CSystem__CAppResourceGroupInfo* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CSystem__CAppResourceGroupInfo* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* First)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CSystem__CAppResourceGroupInfo* This,
        __x_ABI_C__FIIterator_1___x_ABI_CWindows__CSystem__CAppResourceGroupInfo** result);

        END_INTERFACE
    } __x_ABI_C__FIIterable_1___x_ABI_CWindows__CSystem__CAppResourceGroupInfoVtbl;

    interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CSystem__CAppResourceGroupInfo
    {
        CONST_VTBL struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CSystem__CAppResourceGroupInfoVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CSystem__CAppResourceGroupInfo_INTERFACE_DEFINED__
    
#ifndef ____x_ABI_CWindows_CSystem_CDiagnostics_CIProcessDiagnosticInfo_FWD_DEFINED__
#define ____x_ABI_CWindows_CSystem_CDiagnostics_CIProcessDiagnosticInfo_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CSystem_CDiagnostics_CIProcessDiagnosticInfo __x_ABI_CWindows_CSystem_CDiagnostics_CIProcessDiagnosticInfo;

#endif // ____x_ABI_CWindows_CSystem_CDiagnostics_CIProcessDiagnosticInfo_FWD_DEFINED__

#if !defined(____x_ABI_C__FIIterator_1___x_ABI_CWindows__CSystem__CDiagnostics__CProcessDiagnosticInfo_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CSystem__CDiagnostics__CProcessDiagnosticInfo_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CSystem__CDiagnostics__CProcessDiagnosticInfo __x_ABI_C__FIIterator_1___x_ABI_CWindows__CSystem__CDiagnostics__CProcessDiagnosticInfo;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterator_1___x_ABI_CWindows__CSystem__CDiagnostics__CProcessDiagnosticInfo;

    typedef struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CSystem__CDiagnostics__CProcessDiagnosticInfoVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CSystem__CDiagnostics__CProcessDiagnosticInfo* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CSystem__CDiagnostics__CProcessDiagnosticInfo* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CSystem__CDiagnostics__CProcessDiagnosticInfo* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CSystem__CDiagnostics__CProcessDiagnosticInfo* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CSystem__CDiagnostics__CProcessDiagnosticInfo* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CSystem__CDiagnostics__CProcessDiagnosticInfo* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Current)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CSystem__CDiagnostics__CProcessDiagnosticInfo* This,
        __x_ABI_CWindows_CSystem_CDiagnostics_CIProcessDiagnosticInfo** result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CSystem__CDiagnostics__CProcessDiagnosticInfo* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CSystem__CDiagnostics__CProcessDiagnosticInfo* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CSystem__CDiagnostics__CProcessDiagnosticInfo* This,
        UINT32 itemsLength,
        __x_ABI_CWindows_CSystem_CDiagnostics_CIProcessDiagnosticInfo** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIIterator_1___x_ABI_CWindows__CSystem__CDiagnostics__CProcessDiagnosticInfoVtbl;

    interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CSystem__CDiagnostics__CProcessDiagnosticInfo
    {
        CONST_VTBL struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CSystem__CDiagnostics__CProcessDiagnosticInfoVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CSystem__CDiagnostics__CProcessDiagnosticInfo_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterable_1___x_ABI_CWindows__CSystem__CDiagnostics__CProcessDiagnosticInfo_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CSystem__CDiagnostics__CProcessDiagnosticInfo_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CSystem__CDiagnostics__CProcessDiagnosticInfo __x_ABI_C__FIIterable_1___x_ABI_CWindows__CSystem__CDiagnostics__CProcessDiagnosticInfo;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterable_1___x_ABI_CWindows__CSystem__CDiagnostics__CProcessDiagnosticInfo;

    typedef struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CSystem__CDiagnostics__CProcessDiagnosticInfoVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CSystem__CDiagnostics__CProcessDiagnosticInfo* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CSystem__CDiagnostics__CProcessDiagnosticInfo* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CSystem__CDiagnostics__CProcessDiagnosticInfo* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CSystem__CDiagnostics__CProcessDiagnosticInfo* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CSystem__CDiagnostics__CProcessDiagnosticInfo* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CSystem__CDiagnostics__CProcessDiagnosticInfo* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* First)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CSystem__CDiagnostics__CProcessDiagnosticInfo* This,
        __x_ABI_C__FIIterator_1___x_ABI_CWindows__CSystem__CDiagnostics__CProcessDiagnosticInfo** result);

        END_INTERFACE
    } __x_ABI_C__FIIterable_1___x_ABI_CWindows__CSystem__CDiagnostics__CProcessDiagnosticInfoVtbl;

    interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CSystem__CDiagnostics__CProcessDiagnosticInfo
    {
        CONST_VTBL struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CSystem__CDiagnostics__CProcessDiagnosticInfoVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CSystem__CDiagnostics__CProcessDiagnosticInfo_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVectorView_1_HSTRING_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVectorView_1_HSTRING_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVectorView_1_HSTRING __x_ABI_C__FIVectorView_1_HSTRING;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVectorView_1_HSTRING;

    typedef struct __x_ABI_C__FIVectorView_1_HSTRINGVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVectorView_1_HSTRING* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVectorView_1_HSTRING* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVectorView_1_HSTRING* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVectorView_1_HSTRING* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVectorView_1_HSTRING* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVectorView_1_HSTRING* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVectorView_1_HSTRING* This,
        UINT32 index,
        HSTRING* result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVectorView_1_HSTRING* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVectorView_1_HSTRING* This,
        HSTRING value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVectorView_1_HSTRING* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        HSTRING* items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIVectorView_1_HSTRINGVtbl;

    interface __x_ABI_C__FIVectorView_1_HSTRING
    {
        CONST_VTBL struct __x_ABI_C__FIVectorView_1_HSTRINGVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVectorView_1_HSTRING_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CIStorageItem_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CIStorageItem_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CIStorageItem __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CIStorageItem;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CIStorageItem;

    typedef struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CIStorageItemVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CIStorageItem* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CIStorageItem* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CIStorageItem* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CIStorageItem* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CIStorageItem* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CIStorageItem* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CIStorageItem* This,
        UINT32 index,
        __x_ABI_CWindows_CStorage_CIStorageItem** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CIStorageItem* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CIStorageItem* This,
        __x_ABI_CWindows_CStorage_CIStorageItem* value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CIStorageItem* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        __x_ABI_CWindows_CStorage_CIStorageItem** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CIStorageItemVtbl;

    interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CIStorageItem
    {
        CONST_VTBL struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CIStorageItemVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CIStorageItem_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CAppResourceGroupBackgroundTaskReport_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CAppResourceGroupBackgroundTaskReport_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CAppResourceGroupBackgroundTaskReport __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CAppResourceGroupBackgroundTaskReport;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CAppResourceGroupBackgroundTaskReport;

    typedef struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CAppResourceGroupBackgroundTaskReportVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CAppResourceGroupBackgroundTaskReport* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CAppResourceGroupBackgroundTaskReport* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CAppResourceGroupBackgroundTaskReport* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CAppResourceGroupBackgroundTaskReport* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CAppResourceGroupBackgroundTaskReport* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CAppResourceGroupBackgroundTaskReport* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CAppResourceGroupBackgroundTaskReport* This,
        UINT32 index,
        __x_ABI_CWindows_CSystem_CIAppResourceGroupBackgroundTaskReport** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CAppResourceGroupBackgroundTaskReport* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CAppResourceGroupBackgroundTaskReport* This,
        __x_ABI_CWindows_CSystem_CIAppResourceGroupBackgroundTaskReport* value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CAppResourceGroupBackgroundTaskReport* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        __x_ABI_CWindows_CSystem_CIAppResourceGroupBackgroundTaskReport** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CAppResourceGroupBackgroundTaskReportVtbl;

    interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CAppResourceGroupBackgroundTaskReport
    {
        CONST_VTBL struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CAppResourceGroupBackgroundTaskReportVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CAppResourceGroupBackgroundTaskReport_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CAppResourceGroupInfo_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CAppResourceGroupInfo_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CAppResourceGroupInfo __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CAppResourceGroupInfo;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CAppResourceGroupInfo;

    typedef struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CAppResourceGroupInfoVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CAppResourceGroupInfo* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CAppResourceGroupInfo* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CAppResourceGroupInfo* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CAppResourceGroupInfo* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CAppResourceGroupInfo* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CAppResourceGroupInfo* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CAppResourceGroupInfo* This,
        UINT32 index,
        __x_ABI_CWindows_CSystem_CIAppResourceGroupInfo** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CAppResourceGroupInfo* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CAppResourceGroupInfo* This,
        __x_ABI_CWindows_CSystem_CIAppResourceGroupInfo* value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CAppResourceGroupInfo* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        __x_ABI_CWindows_CSystem_CIAppResourceGroupInfo** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CAppResourceGroupInfoVtbl;

    interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CAppResourceGroupInfo
    {
        CONST_VTBL struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CAppResourceGroupInfoVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CAppResourceGroupInfo_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CDiagnostics__CProcessDiagnosticInfo_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CDiagnostics__CProcessDiagnosticInfo_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CDiagnostics__CProcessDiagnosticInfo __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CDiagnostics__CProcessDiagnosticInfo;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CDiagnostics__CProcessDiagnosticInfo;

    typedef struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CDiagnostics__CProcessDiagnosticInfoVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CDiagnostics__CProcessDiagnosticInfo* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CDiagnostics__CProcessDiagnosticInfo* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CDiagnostics__CProcessDiagnosticInfo* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CDiagnostics__CProcessDiagnosticInfo* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CDiagnostics__CProcessDiagnosticInfo* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CDiagnostics__CProcessDiagnosticInfo* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CDiagnostics__CProcessDiagnosticInfo* This,
        UINT32 index,
        __x_ABI_CWindows_CSystem_CDiagnostics_CIProcessDiagnosticInfo** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CDiagnostics__CProcessDiagnosticInfo* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CDiagnostics__CProcessDiagnosticInfo* This,
        __x_ABI_CWindows_CSystem_CDiagnostics_CIProcessDiagnosticInfo* value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CDiagnostics__CProcessDiagnosticInfo* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        __x_ABI_CWindows_CSystem_CDiagnostics_CIProcessDiagnosticInfo** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CDiagnostics__CProcessDiagnosticInfoVtbl;

    interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CDiagnostics__CProcessDiagnosticInfo
    {
        CONST_VTBL struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CDiagnostics__CProcessDiagnosticInfoVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CDiagnostics__CProcessDiagnosticInfo_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVector_1_HSTRING_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVector_1_HSTRING_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVector_1_HSTRING __x_ABI_C__FIVector_1_HSTRING;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVector_1_HSTRING;

    typedef struct __x_ABI_C__FIVector_1_HSTRINGVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVector_1_HSTRING* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVector_1_HSTRING* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVector_1_HSTRING* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVector_1_HSTRING* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVector_1_HSTRING* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVector_1_HSTRING* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVector_1_HSTRING* This,
        UINT32 index,
        HSTRING* result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVector_1_HSTRING* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* GetView)(__x_ABI_C__FIVector_1_HSTRING* This,
        __x_ABI_C__FIVectorView_1_HSTRING** result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVector_1_HSTRING* This,
        HSTRING value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* SetAt)(__x_ABI_C__FIVector_1_HSTRING* This,
        UINT32 index,
        HSTRING value);
    HRESULT (STDMETHODCALLTYPE* InsertAt)(__x_ABI_C__FIVector_1_HSTRING* This,
        UINT32 index,
        HSTRING value);
    HRESULT (STDMETHODCALLTYPE* RemoveAt)(__x_ABI_C__FIVector_1_HSTRING* This,
        UINT32 index);
    HRESULT (STDMETHODCALLTYPE* Append)(__x_ABI_C__FIVector_1_HSTRING* This,
        HSTRING value);
    HRESULT (STDMETHODCALLTYPE* RemoveAtEnd)(__x_ABI_C__FIVector_1_HSTRING* This);
    HRESULT (STDMETHODCALLTYPE* Clear)(__x_ABI_C__FIVector_1_HSTRING* This);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVector_1_HSTRING* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        HSTRING* items,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* ReplaceAll)(__x_ABI_C__FIVector_1_HSTRING* This,
        UINT32 itemsLength,
        HSTRING* items);

        END_INTERFACE
    } __x_ABI_C__FIVector_1_HSTRINGVtbl;

    interface __x_ABI_C__FIVector_1_HSTRING
    {
        CONST_VTBL struct __x_ABI_C__FIVector_1_HSTRINGVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVector_1_HSTRING_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVector_1___x_ABI_CWindows__CStorage__CIStorageItem_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVector_1___x_ABI_CWindows__CStorage__CIStorageItem_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVector_1___x_ABI_CWindows__CStorage__CIStorageItem __x_ABI_C__FIVector_1___x_ABI_CWindows__CStorage__CIStorageItem;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVector_1___x_ABI_CWindows__CStorage__CIStorageItem;

    typedef struct __x_ABI_C__FIVector_1___x_ABI_CWindows__CStorage__CIStorageItemVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CStorage__CIStorageItem* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CStorage__CIStorageItem* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CStorage__CIStorageItem* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CStorage__CIStorageItem* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CStorage__CIStorageItem* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CStorage__CIStorageItem* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CStorage__CIStorageItem* This,
        UINT32 index,
        __x_ABI_CWindows_CStorage_CIStorageItem** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CStorage__CIStorageItem* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* GetView)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CStorage__CIStorageItem* This,
        __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CIStorageItem** result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CStorage__CIStorageItem* This,
        __x_ABI_CWindows_CStorage_CIStorageItem* value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* SetAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CStorage__CIStorageItem* This,
        UINT32 index,
        __x_ABI_CWindows_CStorage_CIStorageItem* value);
    HRESULT (STDMETHODCALLTYPE* InsertAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CStorage__CIStorageItem* This,
        UINT32 index,
        __x_ABI_CWindows_CStorage_CIStorageItem* value);
    HRESULT (STDMETHODCALLTYPE* RemoveAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CStorage__CIStorageItem* This,
        UINT32 index);
    HRESULT (STDMETHODCALLTYPE* Append)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CStorage__CIStorageItem* This,
        __x_ABI_CWindows_CStorage_CIStorageItem* value);
    HRESULT (STDMETHODCALLTYPE* RemoveAtEnd)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CStorage__CIStorageItem* This);
    HRESULT (STDMETHODCALLTYPE* Clear)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CStorage__CIStorageItem* This);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CStorage__CIStorageItem* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        __x_ABI_CWindows_CStorage_CIStorageItem** items,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* ReplaceAll)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CStorage__CIStorageItem* This,
        UINT32 itemsLength,
        __x_ABI_CWindows_CStorage_CIStorageItem** items);

        END_INTERFACE
    } __x_ABI_C__FIVector_1___x_ABI_CWindows__CStorage__CIStorageItemVtbl;

    interface __x_ABI_C__FIVector_1___x_ABI_CWindows__CStorage__CIStorageItem
    {
        CONST_VTBL struct __x_ABI_C__FIVector_1___x_ABI_CWindows__CStorage__CIStorageItemVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVector_1___x_ABI_CWindows__CStorage__CIStorageItem_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVector_1___x_ABI_CWindows__CSystem__CAppResourceGroupBackgroundTaskReport_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVector_1___x_ABI_CWindows__CSystem__CAppResourceGroupBackgroundTaskReport_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVector_1___x_ABI_CWindows__CSystem__CAppResourceGroupBackgroundTaskReport __x_ABI_C__FIVector_1___x_ABI_CWindows__CSystem__CAppResourceGroupBackgroundTaskReport;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVector_1___x_ABI_CWindows__CSystem__CAppResourceGroupBackgroundTaskReport;

    typedef struct __x_ABI_C__FIVector_1___x_ABI_CWindows__CSystem__CAppResourceGroupBackgroundTaskReportVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CSystem__CAppResourceGroupBackgroundTaskReport* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CSystem__CAppResourceGroupBackgroundTaskReport* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CSystem__CAppResourceGroupBackgroundTaskReport* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CSystem__CAppResourceGroupBackgroundTaskReport* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CSystem__CAppResourceGroupBackgroundTaskReport* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CSystem__CAppResourceGroupBackgroundTaskReport* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CSystem__CAppResourceGroupBackgroundTaskReport* This,
        UINT32 index,
        __x_ABI_CWindows_CSystem_CIAppResourceGroupBackgroundTaskReport** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CSystem__CAppResourceGroupBackgroundTaskReport* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* GetView)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CSystem__CAppResourceGroupBackgroundTaskReport* This,
        __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CAppResourceGroupBackgroundTaskReport** result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CSystem__CAppResourceGroupBackgroundTaskReport* This,
        __x_ABI_CWindows_CSystem_CIAppResourceGroupBackgroundTaskReport* value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* SetAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CSystem__CAppResourceGroupBackgroundTaskReport* This,
        UINT32 index,
        __x_ABI_CWindows_CSystem_CIAppResourceGroupBackgroundTaskReport* value);
    HRESULT (STDMETHODCALLTYPE* InsertAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CSystem__CAppResourceGroupBackgroundTaskReport* This,
        UINT32 index,
        __x_ABI_CWindows_CSystem_CIAppResourceGroupBackgroundTaskReport* value);
    HRESULT (STDMETHODCALLTYPE* RemoveAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CSystem__CAppResourceGroupBackgroundTaskReport* This,
        UINT32 index);
    HRESULT (STDMETHODCALLTYPE* Append)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CSystem__CAppResourceGroupBackgroundTaskReport* This,
        __x_ABI_CWindows_CSystem_CIAppResourceGroupBackgroundTaskReport* value);
    HRESULT (STDMETHODCALLTYPE* RemoveAtEnd)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CSystem__CAppResourceGroupBackgroundTaskReport* This);
    HRESULT (STDMETHODCALLTYPE* Clear)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CSystem__CAppResourceGroupBackgroundTaskReport* This);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CSystem__CAppResourceGroupBackgroundTaskReport* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        __x_ABI_CWindows_CSystem_CIAppResourceGroupBackgroundTaskReport** items,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* ReplaceAll)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CSystem__CAppResourceGroupBackgroundTaskReport* This,
        UINT32 itemsLength,
        __x_ABI_CWindows_CSystem_CIAppResourceGroupBackgroundTaskReport** items);

        END_INTERFACE
    } __x_ABI_C__FIVector_1___x_ABI_CWindows__CSystem__CAppResourceGroupBackgroundTaskReportVtbl;

    interface __x_ABI_C__FIVector_1___x_ABI_CWindows__CSystem__CAppResourceGroupBackgroundTaskReport
    {
        CONST_VTBL struct __x_ABI_C__FIVector_1___x_ABI_CWindows__CSystem__CAppResourceGroupBackgroundTaskReportVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVector_1___x_ABI_CWindows__CSystem__CAppResourceGroupBackgroundTaskReport_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVector_1___x_ABI_CWindows__CSystem__CAppResourceGroupInfo_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVector_1___x_ABI_CWindows__CSystem__CAppResourceGroupInfo_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVector_1___x_ABI_CWindows__CSystem__CAppResourceGroupInfo __x_ABI_C__FIVector_1___x_ABI_CWindows__CSystem__CAppResourceGroupInfo;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVector_1___x_ABI_CWindows__CSystem__CAppResourceGroupInfo;

    typedef struct __x_ABI_C__FIVector_1___x_ABI_CWindows__CSystem__CAppResourceGroupInfoVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CSystem__CAppResourceGroupInfo* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CSystem__CAppResourceGroupInfo* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CSystem__CAppResourceGroupInfo* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CSystem__CAppResourceGroupInfo* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CSystem__CAppResourceGroupInfo* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CSystem__CAppResourceGroupInfo* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CSystem__CAppResourceGroupInfo* This,
        UINT32 index,
        __x_ABI_CWindows_CSystem_CIAppResourceGroupInfo** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CSystem__CAppResourceGroupInfo* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* GetView)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CSystem__CAppResourceGroupInfo* This,
        __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CAppResourceGroupInfo** result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CSystem__CAppResourceGroupInfo* This,
        __x_ABI_CWindows_CSystem_CIAppResourceGroupInfo* value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* SetAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CSystem__CAppResourceGroupInfo* This,
        UINT32 index,
        __x_ABI_CWindows_CSystem_CIAppResourceGroupInfo* value);
    HRESULT (STDMETHODCALLTYPE* InsertAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CSystem__CAppResourceGroupInfo* This,
        UINT32 index,
        __x_ABI_CWindows_CSystem_CIAppResourceGroupInfo* value);
    HRESULT (STDMETHODCALLTYPE* RemoveAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CSystem__CAppResourceGroupInfo* This,
        UINT32 index);
    HRESULT (STDMETHODCALLTYPE* Append)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CSystem__CAppResourceGroupInfo* This,
        __x_ABI_CWindows_CSystem_CIAppResourceGroupInfo* value);
    HRESULT (STDMETHODCALLTYPE* RemoveAtEnd)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CSystem__CAppResourceGroupInfo* This);
    HRESULT (STDMETHODCALLTYPE* Clear)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CSystem__CAppResourceGroupInfo* This);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CSystem__CAppResourceGroupInfo* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        __x_ABI_CWindows_CSystem_CIAppResourceGroupInfo** items,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* ReplaceAll)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CSystem__CAppResourceGroupInfo* This,
        UINT32 itemsLength,
        __x_ABI_CWindows_CSystem_CIAppResourceGroupInfo** items);

        END_INTERFACE
    } __x_ABI_C__FIVector_1___x_ABI_CWindows__CSystem__CAppResourceGroupInfoVtbl;

    interface __x_ABI_C__FIVector_1___x_ABI_CWindows__CSystem__CAppResourceGroupInfo
    {
        CONST_VTBL struct __x_ABI_C__FIVector_1___x_ABI_CWindows__CSystem__CAppResourceGroupInfoVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVector_1___x_ABI_CWindows__CSystem__CAppResourceGroupInfo_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVector_1___x_ABI_CWindows__CSystem__CDiagnostics__CProcessDiagnosticInfo_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVector_1___x_ABI_CWindows__CSystem__CDiagnostics__CProcessDiagnosticInfo_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVector_1___x_ABI_CWindows__CSystem__CDiagnostics__CProcessDiagnosticInfo __x_ABI_C__FIVector_1___x_ABI_CWindows__CSystem__CDiagnostics__CProcessDiagnosticInfo;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVector_1___x_ABI_CWindows__CSystem__CDiagnostics__CProcessDiagnosticInfo;

    typedef struct __x_ABI_C__FIVector_1___x_ABI_CWindows__CSystem__CDiagnostics__CProcessDiagnosticInfoVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CSystem__CDiagnostics__CProcessDiagnosticInfo* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CSystem__CDiagnostics__CProcessDiagnosticInfo* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CSystem__CDiagnostics__CProcessDiagnosticInfo* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CSystem__CDiagnostics__CProcessDiagnosticInfo* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CSystem__CDiagnostics__CProcessDiagnosticInfo* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CSystem__CDiagnostics__CProcessDiagnosticInfo* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CSystem__CDiagnostics__CProcessDiagnosticInfo* This,
        UINT32 index,
        __x_ABI_CWindows_CSystem_CDiagnostics_CIProcessDiagnosticInfo** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CSystem__CDiagnostics__CProcessDiagnosticInfo* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* GetView)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CSystem__CDiagnostics__CProcessDiagnosticInfo* This,
        __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CDiagnostics__CProcessDiagnosticInfo** result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CSystem__CDiagnostics__CProcessDiagnosticInfo* This,
        __x_ABI_CWindows_CSystem_CDiagnostics_CIProcessDiagnosticInfo* value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* SetAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CSystem__CDiagnostics__CProcessDiagnosticInfo* This,
        UINT32 index,
        __x_ABI_CWindows_CSystem_CDiagnostics_CIProcessDiagnosticInfo* value);
    HRESULT (STDMETHODCALLTYPE* InsertAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CSystem__CDiagnostics__CProcessDiagnosticInfo* This,
        UINT32 index,
        __x_ABI_CWindows_CSystem_CDiagnostics_CIProcessDiagnosticInfo* value);
    HRESULT (STDMETHODCALLTYPE* RemoveAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CSystem__CDiagnostics__CProcessDiagnosticInfo* This,
        UINT32 index);
    HRESULT (STDMETHODCALLTYPE* Append)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CSystem__CDiagnostics__CProcessDiagnosticInfo* This,
        __x_ABI_CWindows_CSystem_CDiagnostics_CIProcessDiagnosticInfo* value);
    HRESULT (STDMETHODCALLTYPE* RemoveAtEnd)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CSystem__CDiagnostics__CProcessDiagnosticInfo* This);
    HRESULT (STDMETHODCALLTYPE* Clear)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CSystem__CDiagnostics__CProcessDiagnosticInfo* This);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CSystem__CDiagnostics__CProcessDiagnosticInfo* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        __x_ABI_CWindows_CSystem_CDiagnostics_CIProcessDiagnosticInfo** items,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* ReplaceAll)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CSystem__CDiagnostics__CProcessDiagnosticInfo* This,
        UINT32 itemsLength,
        __x_ABI_CWindows_CSystem_CDiagnostics_CIProcessDiagnosticInfo** items);

        END_INTERFACE
    } __x_ABI_C__FIVector_1___x_ABI_CWindows__CSystem__CDiagnostics__CProcessDiagnosticInfoVtbl;

    interface __x_ABI_C__FIVector_1___x_ABI_CWindows__CSystem__CDiagnostics__CProcessDiagnosticInfo
    {
        CONST_VTBL struct __x_ABI_C__FIVector_1___x_ABI_CWindows__CSystem__CDiagnostics__CProcessDiagnosticInfoVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVector_1___x_ABI_CWindows__CSystem__CDiagnostics__CProcessDiagnosticInfo_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIEventHandler_1_IInspectable_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIEventHandler_1_IInspectable_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIEventHandler_1_IInspectable __x_ABI_C__FIEventHandler_1_IInspectable;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIEventHandler_1_IInspectable;

    typedef struct __x_ABI_C__FIEventHandler_1_IInspectableVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIEventHandler_1_IInspectable* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIEventHandler_1_IInspectable* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIEventHandler_1_IInspectable* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FIEventHandler_1_IInspectable* This,
        IInspectable* sender,
        IInspectable* args);

        END_INTERFACE
    } __x_ABI_C__FIEventHandler_1_IInspectableVtbl;

    interface __x_ABI_C__FIEventHandler_1_IInspectable
    {
        CONST_VTBL struct __x_ABI_C__FIEventHandler_1_IInspectableVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIEventHandler_1_IInspectable_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIEventHandler_1___x_ABI_CWindows__CSystem__CAppMemoryUsageLimitChangingEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIEventHandler_1___x_ABI_CWindows__CSystem__CAppMemoryUsageLimitChangingEventArgs_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIEventHandler_1___x_ABI_CWindows__CSystem__CAppMemoryUsageLimitChangingEventArgs __x_ABI_C__FIEventHandler_1___x_ABI_CWindows__CSystem__CAppMemoryUsageLimitChangingEventArgs;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIEventHandler_1___x_ABI_CWindows__CSystem__CAppMemoryUsageLimitChangingEventArgs;

    typedef struct __x_ABI_C__FIEventHandler_1___x_ABI_CWindows__CSystem__CAppMemoryUsageLimitChangingEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIEventHandler_1___x_ABI_CWindows__CSystem__CAppMemoryUsageLimitChangingEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIEventHandler_1___x_ABI_CWindows__CSystem__CAppMemoryUsageLimitChangingEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIEventHandler_1___x_ABI_CWindows__CSystem__CAppMemoryUsageLimitChangingEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FIEventHandler_1___x_ABI_CWindows__CSystem__CAppMemoryUsageLimitChangingEventArgs* This,
        IInspectable* sender,
        __x_ABI_CWindows_CSystem_CIAppMemoryUsageLimitChangingEventArgs* args);

        END_INTERFACE
    } __x_ABI_C__FIEventHandler_1___x_ABI_CWindows__CSystem__CAppMemoryUsageLimitChangingEventArgsVtbl;

    interface __x_ABI_C__FIEventHandler_1___x_ABI_CWindows__CSystem__CAppMemoryUsageLimitChangingEventArgs
    {
        CONST_VTBL struct __x_ABI_C__FIEventHandler_1___x_ABI_CWindows__CSystem__CAppMemoryUsageLimitChangingEventArgsVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIEventHandler_1___x_ABI_CWindows__CSystem__CAppMemoryUsageLimitChangingEventArgs_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIEventHandler_1___x_ABI_CWindows__CSystem__CUserDeviceAssociationChangedEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIEventHandler_1___x_ABI_CWindows__CSystem__CUserDeviceAssociationChangedEventArgs_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIEventHandler_1___x_ABI_CWindows__CSystem__CUserDeviceAssociationChangedEventArgs __x_ABI_C__FIEventHandler_1___x_ABI_CWindows__CSystem__CUserDeviceAssociationChangedEventArgs;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIEventHandler_1___x_ABI_CWindows__CSystem__CUserDeviceAssociationChangedEventArgs;

    typedef struct __x_ABI_C__FIEventHandler_1___x_ABI_CWindows__CSystem__CUserDeviceAssociationChangedEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIEventHandler_1___x_ABI_CWindows__CSystem__CUserDeviceAssociationChangedEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIEventHandler_1___x_ABI_CWindows__CSystem__CUserDeviceAssociationChangedEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIEventHandler_1___x_ABI_CWindows__CSystem__CUserDeviceAssociationChangedEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FIEventHandler_1___x_ABI_CWindows__CSystem__CUserDeviceAssociationChangedEventArgs* This,
        IInspectable* sender,
        __x_ABI_CWindows_CSystem_CIUserDeviceAssociationChangedEventArgs* args);

        END_INTERFACE
    } __x_ABI_C__FIEventHandler_1___x_ABI_CWindows__CSystem__CUserDeviceAssociationChangedEventArgsVtbl;

    interface __x_ABI_C__FIEventHandler_1___x_ABI_CWindows__CSystem__CUserDeviceAssociationChangedEventArgs
    {
        CONST_VTBL struct __x_ABI_C__FIEventHandler_1___x_ABI_CWindows__CSystem__CUserDeviceAssociationChangedEventArgsVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIEventHandler_1___x_ABI_CWindows__CSystem__CUserDeviceAssociationChangedEventArgs_INTERFACE_DEFINED__
    
typedef struct __x_ABI_CWindows_CFoundation_CPoint __x_ABI_CWindows_CFoundation_CPoint;

#if !defined(____x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CPoint_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CPoint_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CPoint __x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CPoint;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CPoint;

    typedef struct __x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CPointVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CPoint* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CPoint* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CPoint* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CPoint* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CPoint* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CPoint* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Value)(__x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CPoint* This,
        struct __x_ABI_CWindows_CFoundation_CPoint* result);

        END_INTERFACE
    } __x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CPointVtbl;

    interface __x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CPoint
    {
        CONST_VTBL struct __x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CPointVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CPoint_INTERFACE_DEFINED__
    
typedef struct __x_ABI_CWindows_CFoundation_CRect __x_ABI_CWindows_CFoundation_CRect;

#if !defined(____x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CRect_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CRect_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CRect __x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CRect;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CRect;

    typedef struct __x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CRectVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CRect* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CRect* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CRect* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CRect* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CRect* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CRect* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Value)(__x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CRect* This,
        struct __x_ABI_CWindows_CFoundation_CRect* result);

        END_INTERFACE
    } __x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CRectVtbl;

    interface __x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CRect
    {
        CONST_VTBL struct __x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CRectVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CRect_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CAppDiagnosticInfoWatcher_IInspectable_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CAppDiagnosticInfoWatcher_IInspectable_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CAppDiagnosticInfoWatcher_IInspectable __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CAppDiagnosticInfoWatcher_IInspectable;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CAppDiagnosticInfoWatcher_IInspectable;

    typedef struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CAppDiagnosticInfoWatcher_IInspectableVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CAppDiagnosticInfoWatcher_IInspectable* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CAppDiagnosticInfoWatcher_IInspectable* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CAppDiagnosticInfoWatcher_IInspectable* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CAppDiagnosticInfoWatcher_IInspectable* This,
        __x_ABI_CWindows_CSystem_CIAppDiagnosticInfoWatcher* sender,
        IInspectable* args);

        END_INTERFACE
    } __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CAppDiagnosticInfoWatcher_IInspectableVtbl;

    interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CAppDiagnosticInfoWatcher_IInspectable
    {
        CONST_VTBL struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CAppDiagnosticInfoWatcher_IInspectableVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CAppDiagnosticInfoWatcher_IInspectable_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CAppDiagnosticInfoWatcher___x_ABI_CWindows__CSystem__CAppDiagnosticInfoWatcherEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CAppDiagnosticInfoWatcher___x_ABI_CWindows__CSystem__CAppDiagnosticInfoWatcherEventArgs_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CAppDiagnosticInfoWatcher___x_ABI_CWindows__CSystem__CAppDiagnosticInfoWatcherEventArgs __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CAppDiagnosticInfoWatcher___x_ABI_CWindows__CSystem__CAppDiagnosticInfoWatcherEventArgs;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CAppDiagnosticInfoWatcher___x_ABI_CWindows__CSystem__CAppDiagnosticInfoWatcherEventArgs;

    typedef struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CAppDiagnosticInfoWatcher___x_ABI_CWindows__CSystem__CAppDiagnosticInfoWatcherEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CAppDiagnosticInfoWatcher___x_ABI_CWindows__CSystem__CAppDiagnosticInfoWatcherEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CAppDiagnosticInfoWatcher___x_ABI_CWindows__CSystem__CAppDiagnosticInfoWatcherEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CAppDiagnosticInfoWatcher___x_ABI_CWindows__CSystem__CAppDiagnosticInfoWatcherEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CAppDiagnosticInfoWatcher___x_ABI_CWindows__CSystem__CAppDiagnosticInfoWatcherEventArgs* This,
        __x_ABI_CWindows_CSystem_CIAppDiagnosticInfoWatcher* sender,
        __x_ABI_CWindows_CSystem_CIAppDiagnosticInfoWatcherEventArgs* args);

        END_INTERFACE
    } __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CAppDiagnosticInfoWatcher___x_ABI_CWindows__CSystem__CAppDiagnosticInfoWatcherEventArgsVtbl;

    interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CAppDiagnosticInfoWatcher___x_ABI_CWindows__CSystem__CAppDiagnosticInfoWatcherEventArgs
    {
        CONST_VTBL struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CAppDiagnosticInfoWatcher___x_ABI_CWindows__CSystem__CAppDiagnosticInfoWatcherEventArgsVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CAppDiagnosticInfoWatcher___x_ABI_CWindows__CSystem__CAppDiagnosticInfoWatcherEventArgs_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CAppResourceGroupInfoWatcher_IInspectable_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CAppResourceGroupInfoWatcher_IInspectable_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CAppResourceGroupInfoWatcher_IInspectable __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CAppResourceGroupInfoWatcher_IInspectable;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CAppResourceGroupInfoWatcher_IInspectable;

    typedef struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CAppResourceGroupInfoWatcher_IInspectableVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CAppResourceGroupInfoWatcher_IInspectable* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CAppResourceGroupInfoWatcher_IInspectable* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CAppResourceGroupInfoWatcher_IInspectable* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CAppResourceGroupInfoWatcher_IInspectable* This,
        __x_ABI_CWindows_CSystem_CIAppResourceGroupInfoWatcher* sender,
        IInspectable* args);

        END_INTERFACE
    } __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CAppResourceGroupInfoWatcher_IInspectableVtbl;

    interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CAppResourceGroupInfoWatcher_IInspectable
    {
        CONST_VTBL struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CAppResourceGroupInfoWatcher_IInspectableVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CAppResourceGroupInfoWatcher_IInspectable_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CAppResourceGroupInfoWatcher___x_ABI_CWindows__CSystem__CAppResourceGroupInfoWatcherEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CAppResourceGroupInfoWatcher___x_ABI_CWindows__CSystem__CAppResourceGroupInfoWatcherEventArgs_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CAppResourceGroupInfoWatcher___x_ABI_CWindows__CSystem__CAppResourceGroupInfoWatcherEventArgs __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CAppResourceGroupInfoWatcher___x_ABI_CWindows__CSystem__CAppResourceGroupInfoWatcherEventArgs;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CAppResourceGroupInfoWatcher___x_ABI_CWindows__CSystem__CAppResourceGroupInfoWatcherEventArgs;

    typedef struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CAppResourceGroupInfoWatcher___x_ABI_CWindows__CSystem__CAppResourceGroupInfoWatcherEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CAppResourceGroupInfoWatcher___x_ABI_CWindows__CSystem__CAppResourceGroupInfoWatcherEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CAppResourceGroupInfoWatcher___x_ABI_CWindows__CSystem__CAppResourceGroupInfoWatcherEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CAppResourceGroupInfoWatcher___x_ABI_CWindows__CSystem__CAppResourceGroupInfoWatcherEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CAppResourceGroupInfoWatcher___x_ABI_CWindows__CSystem__CAppResourceGroupInfoWatcherEventArgs* This,
        __x_ABI_CWindows_CSystem_CIAppResourceGroupInfoWatcher* sender,
        __x_ABI_CWindows_CSystem_CIAppResourceGroupInfoWatcherEventArgs* args);

        END_INTERFACE
    } __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CAppResourceGroupInfoWatcher___x_ABI_CWindows__CSystem__CAppResourceGroupInfoWatcherEventArgsVtbl;

    interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CAppResourceGroupInfoWatcher___x_ABI_CWindows__CSystem__CAppResourceGroupInfoWatcherEventArgs
    {
        CONST_VTBL struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CAppResourceGroupInfoWatcher___x_ABI_CWindows__CSystem__CAppResourceGroupInfoWatcherEventArgsVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CAppResourceGroupInfoWatcher___x_ABI_CWindows__CSystem__CAppResourceGroupInfoWatcherEventArgs_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CAppResourceGroupInfoWatcher___x_ABI_CWindows__CSystem__CAppResourceGroupInfoWatcherExecutionStateChangedEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CAppResourceGroupInfoWatcher___x_ABI_CWindows__CSystem__CAppResourceGroupInfoWatcherExecutionStateChangedEventArgs_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CAppResourceGroupInfoWatcher___x_ABI_CWindows__CSystem__CAppResourceGroupInfoWatcherExecutionStateChangedEventArgs __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CAppResourceGroupInfoWatcher___x_ABI_CWindows__CSystem__CAppResourceGroupInfoWatcherExecutionStateChangedEventArgs;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CAppResourceGroupInfoWatcher___x_ABI_CWindows__CSystem__CAppResourceGroupInfoWatcherExecutionStateChangedEventArgs;

    typedef struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CAppResourceGroupInfoWatcher___x_ABI_CWindows__CSystem__CAppResourceGroupInfoWatcherExecutionStateChangedEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CAppResourceGroupInfoWatcher___x_ABI_CWindows__CSystem__CAppResourceGroupInfoWatcherExecutionStateChangedEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CAppResourceGroupInfoWatcher___x_ABI_CWindows__CSystem__CAppResourceGroupInfoWatcherExecutionStateChangedEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CAppResourceGroupInfoWatcher___x_ABI_CWindows__CSystem__CAppResourceGroupInfoWatcherExecutionStateChangedEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CAppResourceGroupInfoWatcher___x_ABI_CWindows__CSystem__CAppResourceGroupInfoWatcherExecutionStateChangedEventArgs* This,
        __x_ABI_CWindows_CSystem_CIAppResourceGroupInfoWatcher* sender,
        __x_ABI_CWindows_CSystem_CIAppResourceGroupInfoWatcherExecutionStateChangedEventArgs* args);

        END_INTERFACE
    } __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CAppResourceGroupInfoWatcher___x_ABI_CWindows__CSystem__CAppResourceGroupInfoWatcherExecutionStateChangedEventArgsVtbl;

    interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CAppResourceGroupInfoWatcher___x_ABI_CWindows__CSystem__CAppResourceGroupInfoWatcherExecutionStateChangedEventArgs
    {
        CONST_VTBL struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CAppResourceGroupInfoWatcher___x_ABI_CWindows__CSystem__CAppResourceGroupInfoWatcherExecutionStateChangedEventArgsVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CAppResourceGroupInfoWatcher___x_ABI_CWindows__CSystem__CAppResourceGroupInfoWatcherExecutionStateChangedEventArgs_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CDispatcherQueue_IInspectable_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CDispatcherQueue_IInspectable_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CDispatcherQueue_IInspectable __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CDispatcherQueue_IInspectable;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CDispatcherQueue_IInspectable;

    typedef struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CDispatcherQueue_IInspectableVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CDispatcherQueue_IInspectable* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CDispatcherQueue_IInspectable* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CDispatcherQueue_IInspectable* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CDispatcherQueue_IInspectable* This,
        __x_ABI_CWindows_CSystem_CIDispatcherQueue* sender,
        IInspectable* args);

        END_INTERFACE
    } __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CDispatcherQueue_IInspectableVtbl;

    interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CDispatcherQueue_IInspectable
    {
        CONST_VTBL struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CDispatcherQueue_IInspectableVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CDispatcherQueue_IInspectable_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CDispatcherQueue___x_ABI_CWindows__CSystem__CDispatcherQueueShutdownStartingEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CDispatcherQueue___x_ABI_CWindows__CSystem__CDispatcherQueueShutdownStartingEventArgs_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CDispatcherQueue___x_ABI_CWindows__CSystem__CDispatcherQueueShutdownStartingEventArgs __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CDispatcherQueue___x_ABI_CWindows__CSystem__CDispatcherQueueShutdownStartingEventArgs;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CDispatcherQueue___x_ABI_CWindows__CSystem__CDispatcherQueueShutdownStartingEventArgs;

    typedef struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CDispatcherQueue___x_ABI_CWindows__CSystem__CDispatcherQueueShutdownStartingEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CDispatcherQueue___x_ABI_CWindows__CSystem__CDispatcherQueueShutdownStartingEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CDispatcherQueue___x_ABI_CWindows__CSystem__CDispatcherQueueShutdownStartingEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CDispatcherQueue___x_ABI_CWindows__CSystem__CDispatcherQueueShutdownStartingEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CDispatcherQueue___x_ABI_CWindows__CSystem__CDispatcherQueueShutdownStartingEventArgs* This,
        __x_ABI_CWindows_CSystem_CIDispatcherQueue* sender,
        __x_ABI_CWindows_CSystem_CIDispatcherQueueShutdownStartingEventArgs* args);

        END_INTERFACE
    } __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CDispatcherQueue___x_ABI_CWindows__CSystem__CDispatcherQueueShutdownStartingEventArgsVtbl;

    interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CDispatcherQueue___x_ABI_CWindows__CSystem__CDispatcherQueueShutdownStartingEventArgs
    {
        CONST_VTBL struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CDispatcherQueue___x_ABI_CWindows__CSystem__CDispatcherQueueShutdownStartingEventArgsVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CDispatcherQueue___x_ABI_CWindows__CSystem__CDispatcherQueueShutdownStartingEventArgs_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CDispatcherQueueTimer_IInspectable_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CDispatcherQueueTimer_IInspectable_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CDispatcherQueueTimer_IInspectable __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CDispatcherQueueTimer_IInspectable;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CDispatcherQueueTimer_IInspectable;

    typedef struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CDispatcherQueueTimer_IInspectableVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CDispatcherQueueTimer_IInspectable* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CDispatcherQueueTimer_IInspectable* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CDispatcherQueueTimer_IInspectable* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CDispatcherQueueTimer_IInspectable* This,
        __x_ABI_CWindows_CSystem_CIDispatcherQueueTimer* sender,
        IInspectable* args);

        END_INTERFACE
    } __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CDispatcherQueueTimer_IInspectableVtbl;

    interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CDispatcherQueueTimer_IInspectable
    {
        CONST_VTBL struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CDispatcherQueueTimer_IInspectableVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CDispatcherQueueTimer_IInspectable_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CUserWatcher_IInspectable_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CUserWatcher_IInspectable_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CUserWatcher_IInspectable __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CUserWatcher_IInspectable;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CUserWatcher_IInspectable;

    typedef struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CUserWatcher_IInspectableVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CUserWatcher_IInspectable* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CUserWatcher_IInspectable* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CUserWatcher_IInspectable* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CUserWatcher_IInspectable* This,
        __x_ABI_CWindows_CSystem_CIUserWatcher* sender,
        IInspectable* args);

        END_INTERFACE
    } __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CUserWatcher_IInspectableVtbl;

    interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CUserWatcher_IInspectable
    {
        CONST_VTBL struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CUserWatcher_IInspectableVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CUserWatcher_IInspectable_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CUserWatcher___x_ABI_CWindows__CSystem__CUserAuthenticationStatusChangingEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CUserWatcher___x_ABI_CWindows__CSystem__CUserAuthenticationStatusChangingEventArgs_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CUserWatcher___x_ABI_CWindows__CSystem__CUserAuthenticationStatusChangingEventArgs __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CUserWatcher___x_ABI_CWindows__CSystem__CUserAuthenticationStatusChangingEventArgs;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CUserWatcher___x_ABI_CWindows__CSystem__CUserAuthenticationStatusChangingEventArgs;

    typedef struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CUserWatcher___x_ABI_CWindows__CSystem__CUserAuthenticationStatusChangingEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CUserWatcher___x_ABI_CWindows__CSystem__CUserAuthenticationStatusChangingEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CUserWatcher___x_ABI_CWindows__CSystem__CUserAuthenticationStatusChangingEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CUserWatcher___x_ABI_CWindows__CSystem__CUserAuthenticationStatusChangingEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CUserWatcher___x_ABI_CWindows__CSystem__CUserAuthenticationStatusChangingEventArgs* This,
        __x_ABI_CWindows_CSystem_CIUserWatcher* sender,
        __x_ABI_CWindows_CSystem_CIUserAuthenticationStatusChangingEventArgs* args);

        END_INTERFACE
    } __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CUserWatcher___x_ABI_CWindows__CSystem__CUserAuthenticationStatusChangingEventArgsVtbl;

    interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CUserWatcher___x_ABI_CWindows__CSystem__CUserAuthenticationStatusChangingEventArgs
    {
        CONST_VTBL struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CUserWatcher___x_ABI_CWindows__CSystem__CUserAuthenticationStatusChangingEventArgsVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CUserWatcher___x_ABI_CWindows__CSystem__CUserAuthenticationStatusChangingEventArgs_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CUserWatcher___x_ABI_CWindows__CSystem__CUserChangedEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CUserWatcher___x_ABI_CWindows__CSystem__CUserChangedEventArgs_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CUserWatcher___x_ABI_CWindows__CSystem__CUserChangedEventArgs __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CUserWatcher___x_ABI_CWindows__CSystem__CUserChangedEventArgs;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CUserWatcher___x_ABI_CWindows__CSystem__CUserChangedEventArgs;

    typedef struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CUserWatcher___x_ABI_CWindows__CSystem__CUserChangedEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CUserWatcher___x_ABI_CWindows__CSystem__CUserChangedEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CUserWatcher___x_ABI_CWindows__CSystem__CUserChangedEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CUserWatcher___x_ABI_CWindows__CSystem__CUserChangedEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CUserWatcher___x_ABI_CWindows__CSystem__CUserChangedEventArgs* This,
        __x_ABI_CWindows_CSystem_CIUserWatcher* sender,
        __x_ABI_CWindows_CSystem_CIUserChangedEventArgs* args);

        END_INTERFACE
    } __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CUserWatcher___x_ABI_CWindows__CSystem__CUserChangedEventArgsVtbl;

    interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CUserWatcher___x_ABI_CWindows__CSystem__CUserChangedEventArgs
    {
        CONST_VTBL struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CUserWatcher___x_ABI_CWindows__CSystem__CUserChangedEventArgsVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CUserWatcher___x_ABI_CWindows__CSystem__CUserChangedEventArgs_INTERFACE_DEFINED__
    
typedef enum __x_ABI_CWindows_CFoundation_CAsyncStatus __x_ABI_CWindows_CFoundation_CAsyncStatus;

typedef struct __x_ABI_CWindows_CFoundation_CDateTime __x_ABI_CWindows_CFoundation_CDateTime;

#ifndef ____x_ABI_CWindows_CFoundation_CIDeferral_FWD_DEFINED__
#define ____x_ABI_CWindows_CFoundation_CIDeferral_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CFoundation_CIDeferral __x_ABI_CWindows_CFoundation_CIDeferral;

#endif // ____x_ABI_CWindows_CFoundation_CIDeferral_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CFoundation_CIAsyncAction_FWD_DEFINED__
#define ____x_ABI_CWindows_CFoundation_CIAsyncAction_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CFoundation_CIAsyncAction __x_ABI_CWindows_CFoundation_CIAsyncAction;

#endif // ____x_ABI_CWindows_CFoundation_CIAsyncAction_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CFoundation_CIAsyncInfo_FWD_DEFINED__
#define ____x_ABI_CWindows_CFoundation_CIAsyncInfo_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CFoundation_CIAsyncInfo __x_ABI_CWindows_CFoundation_CIAsyncInfo;

#endif // ____x_ABI_CWindows_CFoundation_CIAsyncInfo_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CFoundation_CIPropertyValue_FWD_DEFINED__
#define ____x_ABI_CWindows_CFoundation_CIPropertyValue_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CFoundation_CIPropertyValue __x_ABI_CWindows_CFoundation_CIPropertyValue;

#endif // ____x_ABI_CWindows_CFoundation_CIPropertyValue_FWD_DEFINED__

typedef struct __x_ABI_CWindows_CFoundation_CTimeSpan __x_ABI_CWindows_CFoundation_CTimeSpan;

#ifndef ____x_ABI_CWindows_CFoundation_CIUriRuntimeClass_FWD_DEFINED__
#define ____x_ABI_CWindows_CFoundation_CIUriRuntimeClass_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CFoundation_CIUriRuntimeClass __x_ABI_CWindows_CFoundation_CIUriRuntimeClass;

#endif // ____x_ABI_CWindows_CFoundation_CIUriRuntimeClass_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CStorage_CIStorageFile_FWD_DEFINED__
#define ____x_ABI_CWindows_CStorage_CIStorageFile_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CStorage_CIStorageFile __x_ABI_CWindows_CStorage_CIStorageFile;

#endif // ____x_ABI_CWindows_CStorage_CIStorageFile_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CStorage_CIStorageFolder_FWD_DEFINED__
#define ____x_ABI_CWindows_CStorage_CIStorageFolder_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CStorage_CIStorageFolder __x_ABI_CWindows_CStorage_CIStorageFolder;

#endif // ____x_ABI_CWindows_CStorage_CIStorageFolder_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CStorage_CSearch_CIStorageFileQueryResult_FWD_DEFINED__
#define ____x_ABI_CWindows_CStorage_CSearch_CIStorageFileQueryResult_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CStorage_CSearch_CIStorageFileQueryResult __x_ABI_CWindows_CStorage_CSearch_CIStorageFileQueryResult;

#endif // ____x_ABI_CWindows_CStorage_CSearch_CIStorageFileQueryResult_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CStorage_CStreams_CIInputStream_FWD_DEFINED__
#define ____x_ABI_CWindows_CStorage_CStreams_CIInputStream_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CStorage_CStreams_CIInputStream __x_ABI_CWindows_CStorage_CStreams_CIInputStream;

#endif // ____x_ABI_CWindows_CStorage_CStreams_CIInputStream_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CStorage_CStreams_CIOutputStream_FWD_DEFINED__
#define ____x_ABI_CWindows_CStorage_CStreams_CIOutputStream_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CStorage_CStreams_CIOutputStream __x_ABI_CWindows_CStorage_CStreams_CIOutputStream;

#endif // ____x_ABI_CWindows_CStorage_CStreams_CIOutputStream_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CSystem_CRemoteSystems_CIRemoteSystemConnectionRequest_FWD_DEFINED__
#define ____x_ABI_CWindows_CSystem_CRemoteSystems_CIRemoteSystemConnectionRequest_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CSystem_CRemoteSystems_CIRemoteSystemConnectionRequest __x_ABI_CWindows_CSystem_CRemoteSystems_CIRemoteSystemConnectionRequest;

#endif // ____x_ABI_CWindows_CSystem_CRemoteSystems_CIRemoteSystemConnectionRequest_FWD_DEFINED__

typedef enum __x_ABI_CWindows_CUI_CPopups_CPlacement __x_ABI_CWindows_CUI_CPopups_CPlacement;

typedef enum __x_ABI_CWindows_CUI_CViewManagement_CViewSizePreference __x_ABI_CWindows_CUI_CViewManagement_CViewSizePreference;

typedef enum __x_ABI_CWindows_CSystem_CAppDiagnosticInfoWatcherStatus __x_ABI_CWindows_CSystem_CAppDiagnosticInfoWatcherStatus;

typedef enum __x_ABI_CWindows_CSystem_CAppMemoryUsageLevel __x_ABI_CWindows_CSystem_CAppMemoryUsageLevel;

typedef enum __x_ABI_CWindows_CSystem_CAppResourceGroupEnergyQuotaState __x_ABI_CWindows_CSystem_CAppResourceGroupEnergyQuotaState;

typedef enum __x_ABI_CWindows_CSystem_CAppResourceGroupExecutionState __x_ABI_CWindows_CSystem_CAppResourceGroupExecutionState;

typedef enum __x_ABI_CWindows_CSystem_CAppResourceGroupInfoWatcherStatus __x_ABI_CWindows_CSystem_CAppResourceGroupInfoWatcherStatus;

typedef enum __x_ABI_CWindows_CSystem_CDispatcherQueuePriority __x_ABI_CWindows_CSystem_CDispatcherQueuePriority;

typedef enum __x_ABI_CWindows_CSystem_CLaunchQuerySupportType __x_ABI_CWindows_CSystem_CLaunchQuerySupportType;

typedef enum __x_ABI_CWindows_CSystem_CPowerState __x_ABI_CWindows_CSystem_CPowerState;

typedef enum __x_ABI_CWindows_CSystem_CShutdownKind __x_ABI_CWindows_CSystem_CShutdownKind;

typedef enum __x_ABI_CWindows_CSystem_CUserAuthenticationStatus __x_ABI_CWindows_CSystem_CUserAuthenticationStatus;

typedef enum __x_ABI_CWindows_CSystem_CUserPictureSize __x_ABI_CWindows_CSystem_CUserPictureSize;

typedef enum __x_ABI_CWindows_CSystem_CUserType __x_ABI_CWindows_CSystem_CUserType;

typedef enum __x_ABI_CWindows_CSystem_CUserWatcherStatus __x_ABI_CWindows_CSystem_CUserWatcherStatus;

enum __x_ABI_CWindows_CSystem_CAppDiagnosticInfoWatcherStatus
    {
        __x_ABI_CWindows_CSystem_CAppDiagnosticInfoWatcherStatus_Created = 0,
    __x_ABI_CWindows_CSystem_CAppDiagnosticInfoWatcherStatus_Started = 1,
    __x_ABI_CWindows_CSystem_CAppDiagnosticInfoWatcherStatus_EnumerationCompleted = 2,
    __x_ABI_CWindows_CSystem_CAppDiagnosticInfoWatcherStatus_Stopping = 3,
    __x_ABI_CWindows_CSystem_CAppDiagnosticInfoWatcherStatus_Stopped = 4,
    __x_ABI_CWindows_CSystem_CAppDiagnosticInfoWatcherStatus_Aborted = 5,
};

enum __x_ABI_CWindows_CSystem_CAppMemoryUsageLevel
    {
        __x_ABI_CWindows_CSystem_CAppMemoryUsageLevel_Low = 0,
    __x_ABI_CWindows_CSystem_CAppMemoryUsageLevel_Medium = 1,
    __x_ABI_CWindows_CSystem_CAppMemoryUsageLevel_High = 2,
    __x_ABI_CWindows_CSystem_CAppMemoryUsageLevel_OverLimit = 3,
};

enum __x_ABI_CWindows_CSystem_CAppResourceGroupEnergyQuotaState
    {
        __x_ABI_CWindows_CSystem_CAppResourceGroupEnergyQuotaState_Unknown = 0,
    __x_ABI_CWindows_CSystem_CAppResourceGroupEnergyQuotaState_Over = 1,
    __x_ABI_CWindows_CSystem_CAppResourceGroupEnergyQuotaState_Under = 2,
};

enum __x_ABI_CWindows_CSystem_CAppResourceGroupExecutionState
    {
        __x_ABI_CWindows_CSystem_CAppResourceGroupExecutionState_Unknown = 0,
    __x_ABI_CWindows_CSystem_CAppResourceGroupExecutionState_Running = 1,
    __x_ABI_CWindows_CSystem_CAppResourceGroupExecutionState_Suspending = 2,
    __x_ABI_CWindows_CSystem_CAppResourceGroupExecutionState_Suspended = 3,
    __x_ABI_CWindows_CSystem_CAppResourceGroupExecutionState_NotRunning = 4,
};

enum __x_ABI_CWindows_CSystem_CAppResourceGroupInfoWatcherStatus
    {
        __x_ABI_CWindows_CSystem_CAppResourceGroupInfoWatcherStatus_Created = 0,
    __x_ABI_CWindows_CSystem_CAppResourceGroupInfoWatcherStatus_Started = 1,
    __x_ABI_CWindows_CSystem_CAppResourceGroupInfoWatcherStatus_EnumerationCompleted = 2,
    __x_ABI_CWindows_CSystem_CAppResourceGroupInfoWatcherStatus_Stopping = 3,
    __x_ABI_CWindows_CSystem_CAppResourceGroupInfoWatcherStatus_Stopped = 4,
    __x_ABI_CWindows_CSystem_CAppResourceGroupInfoWatcherStatus_Aborted = 5,
};

enum __x_ABI_CWindows_CSystem_CAutoUpdateTimeZoneStatus
    {
        __x_ABI_CWindows_CSystem_CAutoUpdateTimeZoneStatus_Attempted = 0,
    __x_ABI_CWindows_CSystem_CAutoUpdateTimeZoneStatus_TimedOut = 1,
    __x_ABI_CWindows_CSystem_CAutoUpdateTimeZoneStatus_Failed = 2,
};

enum __x_ABI_CWindows_CSystem_CDiagnosticAccessStatus
    {
        __x_ABI_CWindows_CSystem_CDiagnosticAccessStatus_Unspecified = 0,
    __x_ABI_CWindows_CSystem_CDiagnosticAccessStatus_Denied = 1,
    __x_ABI_CWindows_CSystem_CDiagnosticAccessStatus_Limited = 2,
    __x_ABI_CWindows_CSystem_CDiagnosticAccessStatus_Allowed = 3,
};

enum __x_ABI_CWindows_CSystem_CDispatcherQueuePriority
    {
        __x_ABI_CWindows_CSystem_CDispatcherQueuePriority_Low = -10,
    __x_ABI_CWindows_CSystem_CDispatcherQueuePriority_Normal = 0,
    __x_ABI_CWindows_CSystem_CDispatcherQueuePriority_High = 10,
};

enum __x_ABI_CWindows_CSystem_CLaunchFileStatus
    {
        __x_ABI_CWindows_CSystem_CLaunchFileStatus_Success = 0,
    __x_ABI_CWindows_CSystem_CLaunchFileStatus_AppUnavailable = 1,
    __x_ABI_CWindows_CSystem_CLaunchFileStatus_DeniedByPolicy = 2,
    __x_ABI_CWindows_CSystem_CLaunchFileStatus_FileTypeNotSupported = 3,
    __x_ABI_CWindows_CSystem_CLaunchFileStatus_Unknown = 4,
};

enum __x_ABI_CWindows_CSystem_CLaunchQuerySupportStatus
    {
        __x_ABI_CWindows_CSystem_CLaunchQuerySupportStatus_Available = 0,
    __x_ABI_CWindows_CSystem_CLaunchQuerySupportStatus_AppNotInstalled = 1,
    __x_ABI_CWindows_CSystem_CLaunchQuerySupportStatus_AppUnavailable = 2,
    __x_ABI_CWindows_CSystem_CLaunchQuerySupportStatus_NotSupported = 3,
    __x_ABI_CWindows_CSystem_CLaunchQuerySupportStatus_Unknown = 4,
};

enum __x_ABI_CWindows_CSystem_CLaunchQuerySupportType
    {
        __x_ABI_CWindows_CSystem_CLaunchQuerySupportType_Uri = 0,
    __x_ABI_CWindows_CSystem_CLaunchQuerySupportType_UriForResults = 1,
};

enum __x_ABI_CWindows_CSystem_CLaunchUriStatus
    {
        __x_ABI_CWindows_CSystem_CLaunchUriStatus_Success = 0,
    __x_ABI_CWindows_CSystem_CLaunchUriStatus_AppUnavailable = 1,
    __x_ABI_CWindows_CSystem_CLaunchUriStatus_ProtocolUnavailable = 2,
    __x_ABI_CWindows_CSystem_CLaunchUriStatus_Unknown = 3,
};

enum __x_ABI_CWindows_CSystem_CPowerState
    {
        __x_ABI_CWindows_CSystem_CPowerState_ConnectedStandby = 0,
    __x_ABI_CWindows_CSystem_CPowerState_SleepS3 = 1,
};

enum __x_ABI_CWindows_CSystem_CProcessorArchitecture
    {
        __x_ABI_CWindows_CSystem_CProcessorArchitecture_X86 = 0,
    __x_ABI_CWindows_CSystem_CProcessorArchitecture_Arm = 5,
    __x_ABI_CWindows_CSystem_CProcessorArchitecture_X64 = 9,
    __x_ABI_CWindows_CSystem_CProcessorArchitecture_Neutral = 11,
    __x_ABI_CWindows_CSystem_CProcessorArchitecture_Arm64 = 12,
    __x_ABI_CWindows_CSystem_CProcessorArchitecture_X86OnArm64 = 14,
    __x_ABI_CWindows_CSystem_CProcessorArchitecture_Unknown = 65535,
};

enum __x_ABI_CWindows_CSystem_CRemoteLaunchUriStatus
    {
        __x_ABI_CWindows_CSystem_CRemoteLaunchUriStatus_Unknown = 0,
    __x_ABI_CWindows_CSystem_CRemoteLaunchUriStatus_Success = 1,
    __x_ABI_CWindows_CSystem_CRemoteLaunchUriStatus_AppUnavailable = 2,
    __x_ABI_CWindows_CSystem_CRemoteLaunchUriStatus_ProtocolUnavailable = 3,
    __x_ABI_CWindows_CSystem_CRemoteLaunchUriStatus_RemoteSystemUnavailable = 4,
    __x_ABI_CWindows_CSystem_CRemoteLaunchUriStatus_ValueSetTooLarge = 5,
    __x_ABI_CWindows_CSystem_CRemoteLaunchUriStatus_DeniedByLocalSystem = 6,
    __x_ABI_CWindows_CSystem_CRemoteLaunchUriStatus_DeniedByRemoteSystem = 7,
};

enum __x_ABI_CWindows_CSystem_CShutdownKind
    {
        __x_ABI_CWindows_CSystem_CShutdownKind_Shutdown = 0,
    __x_ABI_CWindows_CSystem_CShutdownKind_Restart = 1,
};

enum __x_ABI_CWindows_CSystem_CUserAuthenticationStatus
    {
        __x_ABI_CWindows_CSystem_CUserAuthenticationStatus_Unauthenticated = 0,
    __x_ABI_CWindows_CSystem_CUserAuthenticationStatus_LocallyAuthenticated = 1,
    __x_ABI_CWindows_CSystem_CUserAuthenticationStatus_RemotelyAuthenticated = 2,
};

enum __x_ABI_CWindows_CSystem_CUserPictureSize
    {
        __x_ABI_CWindows_CSystem_CUserPictureSize_Size64x64 = 0,
    __x_ABI_CWindows_CSystem_CUserPictureSize_Size208x208 = 1,
    __x_ABI_CWindows_CSystem_CUserPictureSize_Size424x424 = 2,
    __x_ABI_CWindows_CSystem_CUserPictureSize_Size1080x1080 = 3,
};

enum __x_ABI_CWindows_CSystem_CUserType
    {
        __x_ABI_CWindows_CSystem_CUserType_LocalUser = 0,
    __x_ABI_CWindows_CSystem_CUserType_RemoteUser = 1,
    __x_ABI_CWindows_CSystem_CUserType_LocalGuest = 2,
    __x_ABI_CWindows_CSystem_CUserType_RemoteGuest = 3,
};

enum __x_ABI_CWindows_CSystem_CUserWatcherStatus
    {
        __x_ABI_CWindows_CSystem_CUserWatcherStatus_Created = 0,
    __x_ABI_CWindows_CSystem_CUserWatcherStatus_Started = 1,
    __x_ABI_CWindows_CSystem_CUserWatcherStatus_EnumerationCompleted = 2,
    __x_ABI_CWindows_CSystem_CUserWatcherStatus_Stopping = 3,
    __x_ABI_CWindows_CSystem_CUserWatcherStatus_Stopped = 4,
    __x_ABI_CWindows_CSystem_CUserWatcherStatus_Aborted = 5,
};

enum __x_ABI_CWindows_CSystem_CVirtualKey
    {
        __x_ABI_CWindows_CSystem_CVirtualKey_None = 0,
    __x_ABI_CWindows_CSystem_CVirtualKey_LeftButton = 1,
    __x_ABI_CWindows_CSystem_CVirtualKey_RightButton = 2,
    __x_ABI_CWindows_CSystem_CVirtualKey_Cancel = 3,
    __x_ABI_CWindows_CSystem_CVirtualKey_MiddleButton = 4,
    __x_ABI_CWindows_CSystem_CVirtualKey_XButton1 = 5,
    __x_ABI_CWindows_CSystem_CVirtualKey_XButton2 = 6,
    __x_ABI_CWindows_CSystem_CVirtualKey_Back = 8,
    __x_ABI_CWindows_CSystem_CVirtualKey_Tab = 9,
    __x_ABI_CWindows_CSystem_CVirtualKey_Clear = 12,
    __x_ABI_CWindows_CSystem_CVirtualKey_Enter = 13,
    __x_ABI_CWindows_CSystem_CVirtualKey_Shift = 16,
    __x_ABI_CWindows_CSystem_CVirtualKey_Control = 17,
    __x_ABI_CWindows_CSystem_CVirtualKey_Menu = 18,
    __x_ABI_CWindows_CSystem_CVirtualKey_Pause = 19,
    __x_ABI_CWindows_CSystem_CVirtualKey_CapitalLock = 20,
    __x_ABI_CWindows_CSystem_CVirtualKey_Kana = 21,
    __x_ABI_CWindows_CSystem_CVirtualKey_Hangul = 21,
    __x_ABI_CWindows_CSystem_CVirtualKey_Junja = 23,
    __x_ABI_CWindows_CSystem_CVirtualKey_Final = 24,
    __x_ABI_CWindows_CSystem_CVirtualKey_Hanja = 25,
    __x_ABI_CWindows_CSystem_CVirtualKey_Kanji = 25,
    __x_ABI_CWindows_CSystem_CVirtualKey_Escape = 27,
    __x_ABI_CWindows_CSystem_CVirtualKey_Convert = 28,
    __x_ABI_CWindows_CSystem_CVirtualKey_NonConvert = 29,
    __x_ABI_CWindows_CSystem_CVirtualKey_Accept = 30,
    __x_ABI_CWindows_CSystem_CVirtualKey_ModeChange = 31,
    __x_ABI_CWindows_CSystem_CVirtualKey_Space = 32,
    __x_ABI_CWindows_CSystem_CVirtualKey_PageUp = 33,
    __x_ABI_CWindows_CSystem_CVirtualKey_PageDown = 34,
    __x_ABI_CWindows_CSystem_CVirtualKey_End = 35,
    __x_ABI_CWindows_CSystem_CVirtualKey_Home = 36,
    __x_ABI_CWindows_CSystem_CVirtualKey_Left = 37,
    __x_ABI_CWindows_CSystem_CVirtualKey_Up = 38,
    __x_ABI_CWindows_CSystem_CVirtualKey_Right = 39,
    __x_ABI_CWindows_CSystem_CVirtualKey_Down = 40,
    __x_ABI_CWindows_CSystem_CVirtualKey_Select = 41,
    __x_ABI_CWindows_CSystem_CVirtualKey_Print = 42,
    __x_ABI_CWindows_CSystem_CVirtualKey_Execute = 43,
    __x_ABI_CWindows_CSystem_CVirtualKey_Snapshot = 44,
    __x_ABI_CWindows_CSystem_CVirtualKey_Insert = 45,
    __x_ABI_CWindows_CSystem_CVirtualKey_Delete = 46,
    __x_ABI_CWindows_CSystem_CVirtualKey_Help = 47,
    __x_ABI_CWindows_CSystem_CVirtualKey_Number0 = 48,
    __x_ABI_CWindows_CSystem_CVirtualKey_Number1 = 49,
    __x_ABI_CWindows_CSystem_CVirtualKey_Number2 = 50,
    __x_ABI_CWindows_CSystem_CVirtualKey_Number3 = 51,
    __x_ABI_CWindows_CSystem_CVirtualKey_Number4 = 52,
    __x_ABI_CWindows_CSystem_CVirtualKey_Number5 = 53,
    __x_ABI_CWindows_CSystem_CVirtualKey_Number6 = 54,
    __x_ABI_CWindows_CSystem_CVirtualKey_Number7 = 55,
    __x_ABI_CWindows_CSystem_CVirtualKey_Number8 = 56,
    __x_ABI_CWindows_CSystem_CVirtualKey_Number9 = 57,
    __x_ABI_CWindows_CSystem_CVirtualKey_A = 65,
    __x_ABI_CWindows_CSystem_CVirtualKey_B = 66,
    __x_ABI_CWindows_CSystem_CVirtualKey_C = 67,
    __x_ABI_CWindows_CSystem_CVirtualKey_D = 68,
    __x_ABI_CWindows_CSystem_CVirtualKey_E = 69,
    __x_ABI_CWindows_CSystem_CVirtualKey_F = 70,
    __x_ABI_CWindows_CSystem_CVirtualKey_G = 71,
    __x_ABI_CWindows_CSystem_CVirtualKey_H = 72,
    __x_ABI_CWindows_CSystem_CVirtualKey_I = 73,
    __x_ABI_CWindows_CSystem_CVirtualKey_J = 74,
    __x_ABI_CWindows_CSystem_CVirtualKey_K = 75,
    __x_ABI_CWindows_CSystem_CVirtualKey_L = 76,
    __x_ABI_CWindows_CSystem_CVirtualKey_M = 77,
    __x_ABI_CWindows_CSystem_CVirtualKey_N = 78,
    __x_ABI_CWindows_CSystem_CVirtualKey_O = 79,
    __x_ABI_CWindows_CSystem_CVirtualKey_P = 80,
    __x_ABI_CWindows_CSystem_CVirtualKey_Q = 81,
    __x_ABI_CWindows_CSystem_CVirtualKey_R = 82,
    __x_ABI_CWindows_CSystem_CVirtualKey_S = 83,
    __x_ABI_CWindows_CSystem_CVirtualKey_T = 84,
    __x_ABI_CWindows_CSystem_CVirtualKey_U = 85,
    __x_ABI_CWindows_CSystem_CVirtualKey_V = 86,
    __x_ABI_CWindows_CSystem_CVirtualKey_W = 87,
    __x_ABI_CWindows_CSystem_CVirtualKey_X = 88,
    __x_ABI_CWindows_CSystem_CVirtualKey_Y = 89,
    __x_ABI_CWindows_CSystem_CVirtualKey_Z = 90,
    __x_ABI_CWindows_CSystem_CVirtualKey_LeftWindows = 91,
    __x_ABI_CWindows_CSystem_CVirtualKey_RightWindows = 92,
    __x_ABI_CWindows_CSystem_CVirtualKey_Application = 93,
    __x_ABI_CWindows_CSystem_CVirtualKey_Sleep = 95,
    __x_ABI_CWindows_CSystem_CVirtualKey_NumberPad0 = 96,
    __x_ABI_CWindows_CSystem_CVirtualKey_NumberPad1 = 97,
    __x_ABI_CWindows_CSystem_CVirtualKey_NumberPad2 = 98,
    __x_ABI_CWindows_CSystem_CVirtualKey_NumberPad3 = 99,
    __x_ABI_CWindows_CSystem_CVirtualKey_NumberPad4 = 100,
    __x_ABI_CWindows_CSystem_CVirtualKey_NumberPad5 = 101,
    __x_ABI_CWindows_CSystem_CVirtualKey_NumberPad6 = 102,
    __x_ABI_CWindows_CSystem_CVirtualKey_NumberPad7 = 103,
    __x_ABI_CWindows_CSystem_CVirtualKey_NumberPad8 = 104,
    __x_ABI_CWindows_CSystem_CVirtualKey_NumberPad9 = 105,
    __x_ABI_CWindows_CSystem_CVirtualKey_Multiply = 106,
    __x_ABI_CWindows_CSystem_CVirtualKey_Add = 107,
    __x_ABI_CWindows_CSystem_CVirtualKey_Separator = 108,
    __x_ABI_CWindows_CSystem_CVirtualKey_Subtract = 109,
    __x_ABI_CWindows_CSystem_CVirtualKey_Decimal = 110,
    __x_ABI_CWindows_CSystem_CVirtualKey_Divide = 111,
    __x_ABI_CWindows_CSystem_CVirtualKey_F1 = 112,
    __x_ABI_CWindows_CSystem_CVirtualKey_F2 = 113,
    __x_ABI_CWindows_CSystem_CVirtualKey_F3 = 114,
    __x_ABI_CWindows_CSystem_CVirtualKey_F4 = 115,
    __x_ABI_CWindows_CSystem_CVirtualKey_F5 = 116,
    __x_ABI_CWindows_CSystem_CVirtualKey_F6 = 117,
    __x_ABI_CWindows_CSystem_CVirtualKey_F7 = 118,
    __x_ABI_CWindows_CSystem_CVirtualKey_F8 = 119,
    __x_ABI_CWindows_CSystem_CVirtualKey_F9 = 120,
    __x_ABI_CWindows_CSystem_CVirtualKey_F10 = 121,
    __x_ABI_CWindows_CSystem_CVirtualKey_F11 = 122,
    __x_ABI_CWindows_CSystem_CVirtualKey_F12 = 123,
    __x_ABI_CWindows_CSystem_CVirtualKey_F13 = 124,
    __x_ABI_CWindows_CSystem_CVirtualKey_F14 = 125,
    __x_ABI_CWindows_CSystem_CVirtualKey_F15 = 126,
    __x_ABI_CWindows_CSystem_CVirtualKey_F16 = 127,
    __x_ABI_CWindows_CSystem_CVirtualKey_F17 = 128,
    __x_ABI_CWindows_CSystem_CVirtualKey_F18 = 129,
    __x_ABI_CWindows_CSystem_CVirtualKey_F19 = 130,
    __x_ABI_CWindows_CSystem_CVirtualKey_F20 = 131,
    __x_ABI_CWindows_CSystem_CVirtualKey_F21 = 132,
    __x_ABI_CWindows_CSystem_CVirtualKey_F22 = 133,
    __x_ABI_CWindows_CSystem_CVirtualKey_F23 = 134,
    __x_ABI_CWindows_CSystem_CVirtualKey_F24 = 135,
    __x_ABI_CWindows_CSystem_CVirtualKey_NavigationView = 136,
    __x_ABI_CWindows_CSystem_CVirtualKey_NavigationMenu = 137,
    __x_ABI_CWindows_CSystem_CVirtualKey_NavigationUp = 138,
    __x_ABI_CWindows_CSystem_CVirtualKey_NavigationDown = 139,
    __x_ABI_CWindows_CSystem_CVirtualKey_NavigationLeft = 140,
    __x_ABI_CWindows_CSystem_CVirtualKey_NavigationRight = 141,
    __x_ABI_CWindows_CSystem_CVirtualKey_NavigationAccept = 142,
    __x_ABI_CWindows_CSystem_CVirtualKey_NavigationCancel = 143,
    __x_ABI_CWindows_CSystem_CVirtualKey_NumberKeyLock = 144,
    __x_ABI_CWindows_CSystem_CVirtualKey_Scroll = 145,
    __x_ABI_CWindows_CSystem_CVirtualKey_LeftShift = 160,
    __x_ABI_CWindows_CSystem_CVirtualKey_RightShift = 161,
    __x_ABI_CWindows_CSystem_CVirtualKey_LeftControl = 162,
    __x_ABI_CWindows_CSystem_CVirtualKey_RightControl = 163,
    __x_ABI_CWindows_CSystem_CVirtualKey_LeftMenu = 164,
    __x_ABI_CWindows_CSystem_CVirtualKey_RightMenu = 165,
    __x_ABI_CWindows_CSystem_CVirtualKey_GoBack = 166,
    __x_ABI_CWindows_CSystem_CVirtualKey_GoForward = 167,
    __x_ABI_CWindows_CSystem_CVirtualKey_Refresh = 168,
    __x_ABI_CWindows_CSystem_CVirtualKey_Stop = 169,
    __x_ABI_CWindows_CSystem_CVirtualKey_Search = 170,
    __x_ABI_CWindows_CSystem_CVirtualKey_Favorites = 171,
    __x_ABI_CWindows_CSystem_CVirtualKey_GoHome = 172,
    __x_ABI_CWindows_CSystem_CVirtualKey_GamepadA = 195,
    __x_ABI_CWindows_CSystem_CVirtualKey_GamepadB = 196,
    __x_ABI_CWindows_CSystem_CVirtualKey_GamepadX = 197,
    __x_ABI_CWindows_CSystem_CVirtualKey_GamepadY = 198,
    __x_ABI_CWindows_CSystem_CVirtualKey_GamepadRightShoulder = 199,
    __x_ABI_CWindows_CSystem_CVirtualKey_GamepadLeftShoulder = 200,
    __x_ABI_CWindows_CSystem_CVirtualKey_GamepadLeftTrigger = 201,
    __x_ABI_CWindows_CSystem_CVirtualKey_GamepadRightTrigger = 202,
    __x_ABI_CWindows_CSystem_CVirtualKey_GamepadDPadUp = 203,
    __x_ABI_CWindows_CSystem_CVirtualKey_GamepadDPadDown = 204,
    __x_ABI_CWindows_CSystem_CVirtualKey_GamepadDPadLeft = 205,
    __x_ABI_CWindows_CSystem_CVirtualKey_GamepadDPadRight = 206,
    __x_ABI_CWindows_CSystem_CVirtualKey_GamepadMenu = 207,
    __x_ABI_CWindows_CSystem_CVirtualKey_GamepadView = 208,
    __x_ABI_CWindows_CSystem_CVirtualKey_GamepadLeftThumbstickButton = 209,
    __x_ABI_CWindows_CSystem_CVirtualKey_GamepadRightThumbstickButton = 210,
    __x_ABI_CWindows_CSystem_CVirtualKey_GamepadLeftThumbstickUp = 211,
    __x_ABI_CWindows_CSystem_CVirtualKey_GamepadLeftThumbstickDown = 212,
    __x_ABI_CWindows_CSystem_CVirtualKey_GamepadLeftThumbstickRight = 213,
    __x_ABI_CWindows_CSystem_CVirtualKey_GamepadLeftThumbstickLeft = 214,
    __x_ABI_CWindows_CSystem_CVirtualKey_GamepadRightThumbstickUp = 215,
    __x_ABI_CWindows_CSystem_CVirtualKey_GamepadRightThumbstickDown = 216,
    __x_ABI_CWindows_CSystem_CVirtualKey_GamepadRightThumbstickRight = 217,
    __x_ABI_CWindows_CSystem_CVirtualKey_GamepadRightThumbstickLeft = 218,
};

enum __x_ABI_CWindows_CSystem_CVirtualKeyModifiers
    {
        __x_ABI_CWindows_CSystem_CVirtualKeyModifiers_None = 0,
    __x_ABI_CWindows_CSystem_CVirtualKeyModifiers_Control = 0x1,
    __x_ABI_CWindows_CSystem_CVirtualKeyModifiers_Menu = 0x2,
    __x_ABI_CWindows_CSystem_CVirtualKeyModifiers_Shift = 0x4,
    __x_ABI_CWindows_CSystem_CVirtualKeyModifiers_Windows = 0x8,
};

#if !defined(____x_ABI_CWindows_CSystem_CIDispatcherQueueHandler_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CSystem_CIDispatcherQueueHandler_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CSystem_CIDispatcherQueueHandlerVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CSystem_CIDispatcherQueueHandler* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CSystem_CIDispatcherQueueHandler* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CSystem_CIDispatcherQueueHandler* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_CWindows_CSystem_CIDispatcherQueueHandler* This);

        END_INTERFACE
    } __x_ABI_CWindows_CSystem_CIDispatcherQueueHandlerVtbl;

    interface __x_ABI_CWindows_CSystem_CIDispatcherQueueHandler
    {
        CONST_VTBL struct __x_ABI_CWindows_CSystem_CIDispatcherQueueHandlerVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CSystem_CIDispatcherQueueHandler;
    #endif /* !defined(____x_ABI_CWindows_CSystem_CIDispatcherQueueHandler_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CSystem_CIAppActivationResult_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CSystem_CIAppActivationResult_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CSystem_CIAppActivationResultVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CSystem_CIAppActivationResult* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CSystem_CIAppActivationResult* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CSystem_CIAppActivationResult* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CSystem_CIAppActivationResult* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CSystem_CIAppActivationResult* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CSystem_CIAppActivationResult* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_ExtendedError)(__x_ABI_CWindows_CSystem_CIAppActivationResult* This,
        HRESULT* value);
    HRESULT (STDMETHODCALLTYPE* get_AppResourceGroupInfo)(__x_ABI_CWindows_CSystem_CIAppActivationResult* This,
        __x_ABI_CWindows_CSystem_CIAppResourceGroupInfo** value);

        END_INTERFACE
    } __x_ABI_CWindows_CSystem_CIAppActivationResultVtbl;

    interface __x_ABI_CWindows_CSystem_CIAppActivationResult
    {
        CONST_VTBL struct __x_ABI_CWindows_CSystem_CIAppActivationResultVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CSystem_CIAppActivationResult;
#endif /* !defined(____x_ABI_CWindows_CSystem_CIAppActivationResult_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CSystem_CIAppDiagnosticInfo_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CSystem_CIAppDiagnosticInfo_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CSystem_CIAppDiagnosticInfoVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CSystem_CIAppDiagnosticInfo* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CSystem_CIAppDiagnosticInfo* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CSystem_CIAppDiagnosticInfo* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CSystem_CIAppDiagnosticInfo* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CSystem_CIAppDiagnosticInfo* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CSystem_CIAppDiagnosticInfo* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_AppInfo)(__x_ABI_CWindows_CSystem_CIAppDiagnosticInfo* This,
        __x_ABI_CWindows_CApplicationModel_CIAppInfo** value);

        END_INTERFACE
    } __x_ABI_CWindows_CSystem_CIAppDiagnosticInfoVtbl;

    interface __x_ABI_CWindows_CSystem_CIAppDiagnosticInfo
    {
        CONST_VTBL struct __x_ABI_CWindows_CSystem_CIAppDiagnosticInfoVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CSystem_CIAppDiagnosticInfo;
#endif /* !defined(____x_ABI_CWindows_CSystem_CIAppDiagnosticInfo_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CSystem_CIAppDiagnosticInfo2_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CSystem_CIAppDiagnosticInfo2_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CSystem_CIAppDiagnosticInfo2Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CSystem_CIAppDiagnosticInfo2* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CSystem_CIAppDiagnosticInfo2* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CSystem_CIAppDiagnosticInfo2* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CSystem_CIAppDiagnosticInfo2* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CSystem_CIAppDiagnosticInfo2* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CSystem_CIAppDiagnosticInfo2* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetResourceGroups)(__x_ABI_CWindows_CSystem_CIAppDiagnosticInfo2* This,
        __x_ABI_C__FIVector_1___x_ABI_CWindows__CSystem__CAppResourceGroupInfo** result);
    HRESULT (STDMETHODCALLTYPE* CreateResourceGroupWatcher)(__x_ABI_CWindows_CSystem_CIAppDiagnosticInfo2* This,
        __x_ABI_CWindows_CSystem_CIAppResourceGroupInfoWatcher** result);

        END_INTERFACE
    } __x_ABI_CWindows_CSystem_CIAppDiagnosticInfo2Vtbl;

    interface __x_ABI_CWindows_CSystem_CIAppDiagnosticInfo2
    {
        CONST_VTBL struct __x_ABI_CWindows_CSystem_CIAppDiagnosticInfo2Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CSystem_CIAppDiagnosticInfo2;
#endif /* !defined(____x_ABI_CWindows_CSystem_CIAppDiagnosticInfo2_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CSystem_CIAppDiagnosticInfo3_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CSystem_CIAppDiagnosticInfo3_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CSystem_CIAppDiagnosticInfo3Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CSystem_CIAppDiagnosticInfo3* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CSystem_CIAppDiagnosticInfo3* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CSystem_CIAppDiagnosticInfo3* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CSystem_CIAppDiagnosticInfo3* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CSystem_CIAppDiagnosticInfo3* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CSystem_CIAppDiagnosticInfo3* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* LaunchAsync)(__x_ABI_CWindows_CSystem_CIAppDiagnosticInfo3* This,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CAppActivationResult** operation);

        END_INTERFACE
    } __x_ABI_CWindows_CSystem_CIAppDiagnosticInfo3Vtbl;

    interface __x_ABI_CWindows_CSystem_CIAppDiagnosticInfo3
    {
        CONST_VTBL struct __x_ABI_CWindows_CSystem_CIAppDiagnosticInfo3Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CSystem_CIAppDiagnosticInfo3;
#endif /* !defined(____x_ABI_CWindows_CSystem_CIAppDiagnosticInfo3_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CSystem_CIAppDiagnosticInfoStatics_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CSystem_CIAppDiagnosticInfoStatics_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CSystem_CIAppDiagnosticInfoStaticsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CSystem_CIAppDiagnosticInfoStatics* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CSystem_CIAppDiagnosticInfoStatics* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CSystem_CIAppDiagnosticInfoStatics* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CSystem_CIAppDiagnosticInfoStatics* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CSystem_CIAppDiagnosticInfoStatics* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CSystem_CIAppDiagnosticInfoStatics* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* RequestInfoAsync)(__x_ABI_CWindows_CSystem_CIAppDiagnosticInfoStatics* This,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVector_1___x_ABI_CWindows__CSystem__CAppDiagnosticInfo** operation);

        END_INTERFACE
    } __x_ABI_CWindows_CSystem_CIAppDiagnosticInfoStaticsVtbl;

    interface __x_ABI_CWindows_CSystem_CIAppDiagnosticInfoStatics
    {
        CONST_VTBL struct __x_ABI_CWindows_CSystem_CIAppDiagnosticInfoStaticsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CSystem_CIAppDiagnosticInfoStatics;
#endif /* !defined(____x_ABI_CWindows_CSystem_CIAppDiagnosticInfoStatics_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CSystem_CIAppDiagnosticInfoStatics2_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CSystem_CIAppDiagnosticInfoStatics2_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CSystem_CIAppDiagnosticInfoStatics2Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CSystem_CIAppDiagnosticInfoStatics2* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CSystem_CIAppDiagnosticInfoStatics2* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CSystem_CIAppDiagnosticInfoStatics2* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CSystem_CIAppDiagnosticInfoStatics2* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CSystem_CIAppDiagnosticInfoStatics2* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CSystem_CIAppDiagnosticInfoStatics2* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* CreateWatcher)(__x_ABI_CWindows_CSystem_CIAppDiagnosticInfoStatics2* This,
        __x_ABI_CWindows_CSystem_CIAppDiagnosticInfoWatcher** watcher);
    HRESULT (STDMETHODCALLTYPE* RequestAccessAsync)(__x_ABI_CWindows_CSystem_CIAppDiagnosticInfoStatics2* This,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CDiagnosticAccessStatus** operation);
    HRESULT (STDMETHODCALLTYPE* RequestInfoForPackageAsync)(__x_ABI_CWindows_CSystem_CIAppDiagnosticInfoStatics2* This,
        HSTRING packageFamilyName,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVector_1___x_ABI_CWindows__CSystem__CAppDiagnosticInfo** operation);
    HRESULT (STDMETHODCALLTYPE* RequestInfoForAppAsync)(__x_ABI_CWindows_CSystem_CIAppDiagnosticInfoStatics2* This,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVector_1___x_ABI_CWindows__CSystem__CAppDiagnosticInfo** operation);
    HRESULT (STDMETHODCALLTYPE* RequestInfoForAppUserModelId)(__x_ABI_CWindows_CSystem_CIAppDiagnosticInfoStatics2* This,
        HSTRING appUserModelId,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVector_1___x_ABI_CWindows__CSystem__CAppDiagnosticInfo** operation);

        END_INTERFACE
    } __x_ABI_CWindows_CSystem_CIAppDiagnosticInfoStatics2Vtbl;

    interface __x_ABI_CWindows_CSystem_CIAppDiagnosticInfoStatics2
    {
        CONST_VTBL struct __x_ABI_CWindows_CSystem_CIAppDiagnosticInfoStatics2Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CSystem_CIAppDiagnosticInfoStatics2;
#endif /* !defined(____x_ABI_CWindows_CSystem_CIAppDiagnosticInfoStatics2_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CSystem_CIAppDiagnosticInfoWatcher_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CSystem_CIAppDiagnosticInfoWatcher_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CSystem_CIAppDiagnosticInfoWatcherVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CSystem_CIAppDiagnosticInfoWatcher* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CSystem_CIAppDiagnosticInfoWatcher* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CSystem_CIAppDiagnosticInfoWatcher* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CSystem_CIAppDiagnosticInfoWatcher* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CSystem_CIAppDiagnosticInfoWatcher* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CSystem_CIAppDiagnosticInfoWatcher* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* add_Added)(__x_ABI_CWindows_CSystem_CIAppDiagnosticInfoWatcher* This,
        __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CAppDiagnosticInfoWatcher___x_ABI_CWindows__CSystem__CAppDiagnosticInfoWatcherEventArgs* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_Added)(__x_ABI_CWindows_CSystem_CIAppDiagnosticInfoWatcher* This,
        EventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* add_Removed)(__x_ABI_CWindows_CSystem_CIAppDiagnosticInfoWatcher* This,
        __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CAppDiagnosticInfoWatcher___x_ABI_CWindows__CSystem__CAppDiagnosticInfoWatcherEventArgs* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_Removed)(__x_ABI_CWindows_CSystem_CIAppDiagnosticInfoWatcher* This,
        EventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* add_EnumerationCompleted)(__x_ABI_CWindows_CSystem_CIAppDiagnosticInfoWatcher* This,
        __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CAppDiagnosticInfoWatcher_IInspectable* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_EnumerationCompleted)(__x_ABI_CWindows_CSystem_CIAppDiagnosticInfoWatcher* This,
        EventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* add_Stopped)(__x_ABI_CWindows_CSystem_CIAppDiagnosticInfoWatcher* This,
        __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CAppDiagnosticInfoWatcher_IInspectable* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_Stopped)(__x_ABI_CWindows_CSystem_CIAppDiagnosticInfoWatcher* This,
        EventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* get_Status)(__x_ABI_CWindows_CSystem_CIAppDiagnosticInfoWatcher* This,
        enum __x_ABI_CWindows_CSystem_CAppDiagnosticInfoWatcherStatus* value);
    HRESULT (STDMETHODCALLTYPE* Start)(__x_ABI_CWindows_CSystem_CIAppDiagnosticInfoWatcher* This);
    HRESULT (STDMETHODCALLTYPE* Stop)(__x_ABI_CWindows_CSystem_CIAppDiagnosticInfoWatcher* This);

        END_INTERFACE
    } __x_ABI_CWindows_CSystem_CIAppDiagnosticInfoWatcherVtbl;

    interface __x_ABI_CWindows_CSystem_CIAppDiagnosticInfoWatcher
    {
        CONST_VTBL struct __x_ABI_CWindows_CSystem_CIAppDiagnosticInfoWatcherVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CSystem_CIAppDiagnosticInfoWatcher;
#endif /* !defined(____x_ABI_CWindows_CSystem_CIAppDiagnosticInfoWatcher_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CSystem_CIAppDiagnosticInfoWatcherEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CSystem_CIAppDiagnosticInfoWatcherEventArgs_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CSystem_CIAppDiagnosticInfoWatcherEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CSystem_CIAppDiagnosticInfoWatcherEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CSystem_CIAppDiagnosticInfoWatcherEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CSystem_CIAppDiagnosticInfoWatcherEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CSystem_CIAppDiagnosticInfoWatcherEventArgs* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CSystem_CIAppDiagnosticInfoWatcherEventArgs* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CSystem_CIAppDiagnosticInfoWatcherEventArgs* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_AppDiagnosticInfo)(__x_ABI_CWindows_CSystem_CIAppDiagnosticInfoWatcherEventArgs* This,
        __x_ABI_CWindows_CSystem_CIAppDiagnosticInfo** value);

        END_INTERFACE
    } __x_ABI_CWindows_CSystem_CIAppDiagnosticInfoWatcherEventArgsVtbl;

    interface __x_ABI_CWindows_CSystem_CIAppDiagnosticInfoWatcherEventArgs
    {
        CONST_VTBL struct __x_ABI_CWindows_CSystem_CIAppDiagnosticInfoWatcherEventArgsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CSystem_CIAppDiagnosticInfoWatcherEventArgs;
#endif /* !defined(____x_ABI_CWindows_CSystem_CIAppDiagnosticInfoWatcherEventArgs_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CSystem_CIAppExecutionStateChangeResult_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CSystem_CIAppExecutionStateChangeResult_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CSystem_CIAppExecutionStateChangeResultVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CSystem_CIAppExecutionStateChangeResult* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CSystem_CIAppExecutionStateChangeResult* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CSystem_CIAppExecutionStateChangeResult* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CSystem_CIAppExecutionStateChangeResult* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CSystem_CIAppExecutionStateChangeResult* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CSystem_CIAppExecutionStateChangeResult* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_ExtendedError)(__x_ABI_CWindows_CSystem_CIAppExecutionStateChangeResult* This,
        HRESULT* value);

        END_INTERFACE
    } __x_ABI_CWindows_CSystem_CIAppExecutionStateChangeResultVtbl;

    interface __x_ABI_CWindows_CSystem_CIAppExecutionStateChangeResult
    {
        CONST_VTBL struct __x_ABI_CWindows_CSystem_CIAppExecutionStateChangeResultVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CSystem_CIAppExecutionStateChangeResult;
#endif /* !defined(____x_ABI_CWindows_CSystem_CIAppExecutionStateChangeResult_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CSystem_CIAppMemoryReport_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CSystem_CIAppMemoryReport_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CSystem_CIAppMemoryReportVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CSystem_CIAppMemoryReport* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CSystem_CIAppMemoryReport* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CSystem_CIAppMemoryReport* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CSystem_CIAppMemoryReport* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CSystem_CIAppMemoryReport* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CSystem_CIAppMemoryReport* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_PrivateCommitUsage)(__x_ABI_CWindows_CSystem_CIAppMemoryReport* This,
        UINT64* value);
    HRESULT (STDMETHODCALLTYPE* get_PeakPrivateCommitUsage)(__x_ABI_CWindows_CSystem_CIAppMemoryReport* This,
        UINT64* value);
    HRESULT (STDMETHODCALLTYPE* get_TotalCommitUsage)(__x_ABI_CWindows_CSystem_CIAppMemoryReport* This,
        UINT64* value);
    HRESULT (STDMETHODCALLTYPE* get_TotalCommitLimit)(__x_ABI_CWindows_CSystem_CIAppMemoryReport* This,
        UINT64* value);

        END_INTERFACE
    } __x_ABI_CWindows_CSystem_CIAppMemoryReportVtbl;

    interface __x_ABI_CWindows_CSystem_CIAppMemoryReport
    {
        CONST_VTBL struct __x_ABI_CWindows_CSystem_CIAppMemoryReportVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CSystem_CIAppMemoryReport;
#endif /* !defined(____x_ABI_CWindows_CSystem_CIAppMemoryReport_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CSystem_CIAppMemoryReport2_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CSystem_CIAppMemoryReport2_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CSystem_CIAppMemoryReport2Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CSystem_CIAppMemoryReport2* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CSystem_CIAppMemoryReport2* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CSystem_CIAppMemoryReport2* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CSystem_CIAppMemoryReport2* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CSystem_CIAppMemoryReport2* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CSystem_CIAppMemoryReport2* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_ExpectedTotalCommitLimit)(__x_ABI_CWindows_CSystem_CIAppMemoryReport2* This,
        UINT64* value);

        END_INTERFACE
    } __x_ABI_CWindows_CSystem_CIAppMemoryReport2Vtbl;

    interface __x_ABI_CWindows_CSystem_CIAppMemoryReport2
    {
        CONST_VTBL struct __x_ABI_CWindows_CSystem_CIAppMemoryReport2Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CSystem_CIAppMemoryReport2;
#endif /* !defined(____x_ABI_CWindows_CSystem_CIAppMemoryReport2_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CSystem_CIAppMemoryUsageLimitChangingEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CSystem_CIAppMemoryUsageLimitChangingEventArgs_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CSystem_CIAppMemoryUsageLimitChangingEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CSystem_CIAppMemoryUsageLimitChangingEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CSystem_CIAppMemoryUsageLimitChangingEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CSystem_CIAppMemoryUsageLimitChangingEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CSystem_CIAppMemoryUsageLimitChangingEventArgs* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CSystem_CIAppMemoryUsageLimitChangingEventArgs* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CSystem_CIAppMemoryUsageLimitChangingEventArgs* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_OldLimit)(__x_ABI_CWindows_CSystem_CIAppMemoryUsageLimitChangingEventArgs* This,
        UINT64* value);
    HRESULT (STDMETHODCALLTYPE* get_NewLimit)(__x_ABI_CWindows_CSystem_CIAppMemoryUsageLimitChangingEventArgs* This,
        UINT64* value);

        END_INTERFACE
    } __x_ABI_CWindows_CSystem_CIAppMemoryUsageLimitChangingEventArgsVtbl;

    interface __x_ABI_CWindows_CSystem_CIAppMemoryUsageLimitChangingEventArgs
    {
        CONST_VTBL struct __x_ABI_CWindows_CSystem_CIAppMemoryUsageLimitChangingEventArgsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CSystem_CIAppMemoryUsageLimitChangingEventArgs;
#endif /* !defined(____x_ABI_CWindows_CSystem_CIAppMemoryUsageLimitChangingEventArgs_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CSystem_CIAppResourceGroupBackgroundTaskReport_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CSystem_CIAppResourceGroupBackgroundTaskReport_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CSystem_CIAppResourceGroupBackgroundTaskReportVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CSystem_CIAppResourceGroupBackgroundTaskReport* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CSystem_CIAppResourceGroupBackgroundTaskReport* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CSystem_CIAppResourceGroupBackgroundTaskReport* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CSystem_CIAppResourceGroupBackgroundTaskReport* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CSystem_CIAppResourceGroupBackgroundTaskReport* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CSystem_CIAppResourceGroupBackgroundTaskReport* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_TaskId)(__x_ABI_CWindows_CSystem_CIAppResourceGroupBackgroundTaskReport* This,
        GUID* value);
    HRESULT (STDMETHODCALLTYPE* get_Name)(__x_ABI_CWindows_CSystem_CIAppResourceGroupBackgroundTaskReport* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_Trigger)(__x_ABI_CWindows_CSystem_CIAppResourceGroupBackgroundTaskReport* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_EntryPoint)(__x_ABI_CWindows_CSystem_CIAppResourceGroupBackgroundTaskReport* This,
        HSTRING* value);

        END_INTERFACE
    } __x_ABI_CWindows_CSystem_CIAppResourceGroupBackgroundTaskReportVtbl;

    interface __x_ABI_CWindows_CSystem_CIAppResourceGroupBackgroundTaskReport
    {
        CONST_VTBL struct __x_ABI_CWindows_CSystem_CIAppResourceGroupBackgroundTaskReportVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CSystem_CIAppResourceGroupBackgroundTaskReport;
#endif /* !defined(____x_ABI_CWindows_CSystem_CIAppResourceGroupBackgroundTaskReport_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CSystem_CIAppResourceGroupInfo_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CSystem_CIAppResourceGroupInfo_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CSystem_CIAppResourceGroupInfoVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CSystem_CIAppResourceGroupInfo* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CSystem_CIAppResourceGroupInfo* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CSystem_CIAppResourceGroupInfo* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CSystem_CIAppResourceGroupInfo* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CSystem_CIAppResourceGroupInfo* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CSystem_CIAppResourceGroupInfo* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_InstanceId)(__x_ABI_CWindows_CSystem_CIAppResourceGroupInfo* This,
        GUID* value);
    HRESULT (STDMETHODCALLTYPE* get_IsShared)(__x_ABI_CWindows_CSystem_CIAppResourceGroupInfo* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* GetBackgroundTaskReports)(__x_ABI_CWindows_CSystem_CIAppResourceGroupInfo* This,
        __x_ABI_C__FIVector_1___x_ABI_CWindows__CSystem__CAppResourceGroupBackgroundTaskReport** result);
    HRESULT (STDMETHODCALLTYPE* GetMemoryReport)(__x_ABI_CWindows_CSystem_CIAppResourceGroupInfo* This,
        __x_ABI_CWindows_CSystem_CIAppResourceGroupMemoryReport** result);
    HRESULT (STDMETHODCALLTYPE* GetProcessDiagnosticInfos)(__x_ABI_CWindows_CSystem_CIAppResourceGroupInfo* This,
        __x_ABI_C__FIVector_1___x_ABI_CWindows__CSystem__CDiagnostics__CProcessDiagnosticInfo** result);
    HRESULT (STDMETHODCALLTYPE* GetStateReport)(__x_ABI_CWindows_CSystem_CIAppResourceGroupInfo* This,
        __x_ABI_CWindows_CSystem_CIAppResourceGroupStateReport** result);

        END_INTERFACE
    } __x_ABI_CWindows_CSystem_CIAppResourceGroupInfoVtbl;

    interface __x_ABI_CWindows_CSystem_CIAppResourceGroupInfo
    {
        CONST_VTBL struct __x_ABI_CWindows_CSystem_CIAppResourceGroupInfoVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CSystem_CIAppResourceGroupInfo;
#endif /* !defined(____x_ABI_CWindows_CSystem_CIAppResourceGroupInfo_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CSystem_CIAppResourceGroupInfo2_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CSystem_CIAppResourceGroupInfo2_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CSystem_CIAppResourceGroupInfo2Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CSystem_CIAppResourceGroupInfo2* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CSystem_CIAppResourceGroupInfo2* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CSystem_CIAppResourceGroupInfo2* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CSystem_CIAppResourceGroupInfo2* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CSystem_CIAppResourceGroupInfo2* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CSystem_CIAppResourceGroupInfo2* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* StartSuspendAsync)(__x_ABI_CWindows_CSystem_CIAppResourceGroupInfo2* This,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CAppExecutionStateChangeResult** operation);
    HRESULT (STDMETHODCALLTYPE* StartResumeAsync)(__x_ABI_CWindows_CSystem_CIAppResourceGroupInfo2* This,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CAppExecutionStateChangeResult** operation);
    HRESULT (STDMETHODCALLTYPE* StartTerminateAsync)(__x_ABI_CWindows_CSystem_CIAppResourceGroupInfo2* This,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CAppExecutionStateChangeResult** operation);

        END_INTERFACE
    } __x_ABI_CWindows_CSystem_CIAppResourceGroupInfo2Vtbl;

    interface __x_ABI_CWindows_CSystem_CIAppResourceGroupInfo2
    {
        CONST_VTBL struct __x_ABI_CWindows_CSystem_CIAppResourceGroupInfo2Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CSystem_CIAppResourceGroupInfo2;
#endif /* !defined(____x_ABI_CWindows_CSystem_CIAppResourceGroupInfo2_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CSystem_CIAppResourceGroupInfoWatcher_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CSystem_CIAppResourceGroupInfoWatcher_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CSystem_CIAppResourceGroupInfoWatcherVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CSystem_CIAppResourceGroupInfoWatcher* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CSystem_CIAppResourceGroupInfoWatcher* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CSystem_CIAppResourceGroupInfoWatcher* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CSystem_CIAppResourceGroupInfoWatcher* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CSystem_CIAppResourceGroupInfoWatcher* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CSystem_CIAppResourceGroupInfoWatcher* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* add_Added)(__x_ABI_CWindows_CSystem_CIAppResourceGroupInfoWatcher* This,
        __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CAppResourceGroupInfoWatcher___x_ABI_CWindows__CSystem__CAppResourceGroupInfoWatcherEventArgs* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_Added)(__x_ABI_CWindows_CSystem_CIAppResourceGroupInfoWatcher* This,
        EventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* add_Removed)(__x_ABI_CWindows_CSystem_CIAppResourceGroupInfoWatcher* This,
        __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CAppResourceGroupInfoWatcher___x_ABI_CWindows__CSystem__CAppResourceGroupInfoWatcherEventArgs* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_Removed)(__x_ABI_CWindows_CSystem_CIAppResourceGroupInfoWatcher* This,
        EventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* add_EnumerationCompleted)(__x_ABI_CWindows_CSystem_CIAppResourceGroupInfoWatcher* This,
        __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CAppResourceGroupInfoWatcher_IInspectable* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_EnumerationCompleted)(__x_ABI_CWindows_CSystem_CIAppResourceGroupInfoWatcher* This,
        EventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* add_Stopped)(__x_ABI_CWindows_CSystem_CIAppResourceGroupInfoWatcher* This,
        __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CAppResourceGroupInfoWatcher_IInspectable* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_Stopped)(__x_ABI_CWindows_CSystem_CIAppResourceGroupInfoWatcher* This,
        EventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* add_ExecutionStateChanged)(__x_ABI_CWindows_CSystem_CIAppResourceGroupInfoWatcher* This,
        __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CAppResourceGroupInfoWatcher___x_ABI_CWindows__CSystem__CAppResourceGroupInfoWatcherExecutionStateChangedEventArgs* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_ExecutionStateChanged)(__x_ABI_CWindows_CSystem_CIAppResourceGroupInfoWatcher* This,
        EventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* get_Status)(__x_ABI_CWindows_CSystem_CIAppResourceGroupInfoWatcher* This,
        enum __x_ABI_CWindows_CSystem_CAppResourceGroupInfoWatcherStatus* status);
    HRESULT (STDMETHODCALLTYPE* Start)(__x_ABI_CWindows_CSystem_CIAppResourceGroupInfoWatcher* This);
    HRESULT (STDMETHODCALLTYPE* Stop)(__x_ABI_CWindows_CSystem_CIAppResourceGroupInfoWatcher* This);

        END_INTERFACE
    } __x_ABI_CWindows_CSystem_CIAppResourceGroupInfoWatcherVtbl;

    interface __x_ABI_CWindows_CSystem_CIAppResourceGroupInfoWatcher
    {
        CONST_VTBL struct __x_ABI_CWindows_CSystem_CIAppResourceGroupInfoWatcherVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CSystem_CIAppResourceGroupInfoWatcher;
#endif /* !defined(____x_ABI_CWindows_CSystem_CIAppResourceGroupInfoWatcher_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CSystem_CIAppResourceGroupInfoWatcherEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CSystem_CIAppResourceGroupInfoWatcherEventArgs_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CSystem_CIAppResourceGroupInfoWatcherEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CSystem_CIAppResourceGroupInfoWatcherEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CSystem_CIAppResourceGroupInfoWatcherEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CSystem_CIAppResourceGroupInfoWatcherEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CSystem_CIAppResourceGroupInfoWatcherEventArgs* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CSystem_CIAppResourceGroupInfoWatcherEventArgs* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CSystem_CIAppResourceGroupInfoWatcherEventArgs* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_AppDiagnosticInfos)(__x_ABI_CWindows_CSystem_CIAppResourceGroupInfoWatcherEventArgs* This,
        __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CAppDiagnosticInfo** value);
    HRESULT (STDMETHODCALLTYPE* get_AppResourceGroupInfo)(__x_ABI_CWindows_CSystem_CIAppResourceGroupInfoWatcherEventArgs* This,
        __x_ABI_CWindows_CSystem_CIAppResourceGroupInfo** value);

        END_INTERFACE
    } __x_ABI_CWindows_CSystem_CIAppResourceGroupInfoWatcherEventArgsVtbl;

    interface __x_ABI_CWindows_CSystem_CIAppResourceGroupInfoWatcherEventArgs
    {
        CONST_VTBL struct __x_ABI_CWindows_CSystem_CIAppResourceGroupInfoWatcherEventArgsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CSystem_CIAppResourceGroupInfoWatcherEventArgs;
#endif /* !defined(____x_ABI_CWindows_CSystem_CIAppResourceGroupInfoWatcherEventArgs_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CSystem_CIAppResourceGroupInfoWatcherExecutionStateChangedEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CSystem_CIAppResourceGroupInfoWatcherExecutionStateChangedEventArgs_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CSystem_CIAppResourceGroupInfoWatcherExecutionStateChangedEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CSystem_CIAppResourceGroupInfoWatcherExecutionStateChangedEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CSystem_CIAppResourceGroupInfoWatcherExecutionStateChangedEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CSystem_CIAppResourceGroupInfoWatcherExecutionStateChangedEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CSystem_CIAppResourceGroupInfoWatcherExecutionStateChangedEventArgs* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CSystem_CIAppResourceGroupInfoWatcherExecutionStateChangedEventArgs* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CSystem_CIAppResourceGroupInfoWatcherExecutionStateChangedEventArgs* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_AppDiagnosticInfos)(__x_ABI_CWindows_CSystem_CIAppResourceGroupInfoWatcherExecutionStateChangedEventArgs* This,
        __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CAppDiagnosticInfo** value);
    HRESULT (STDMETHODCALLTYPE* get_AppResourceGroupInfo)(__x_ABI_CWindows_CSystem_CIAppResourceGroupInfoWatcherExecutionStateChangedEventArgs* This,
        __x_ABI_CWindows_CSystem_CIAppResourceGroupInfo** value);

        END_INTERFACE
    } __x_ABI_CWindows_CSystem_CIAppResourceGroupInfoWatcherExecutionStateChangedEventArgsVtbl;

    interface __x_ABI_CWindows_CSystem_CIAppResourceGroupInfoWatcherExecutionStateChangedEventArgs
    {
        CONST_VTBL struct __x_ABI_CWindows_CSystem_CIAppResourceGroupInfoWatcherExecutionStateChangedEventArgsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CSystem_CIAppResourceGroupInfoWatcherExecutionStateChangedEventArgs;
#endif /* !defined(____x_ABI_CWindows_CSystem_CIAppResourceGroupInfoWatcherExecutionStateChangedEventArgs_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CSystem_CIAppResourceGroupMemoryReport_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CSystem_CIAppResourceGroupMemoryReport_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CSystem_CIAppResourceGroupMemoryReportVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CSystem_CIAppResourceGroupMemoryReport* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CSystem_CIAppResourceGroupMemoryReport* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CSystem_CIAppResourceGroupMemoryReport* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CSystem_CIAppResourceGroupMemoryReport* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CSystem_CIAppResourceGroupMemoryReport* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CSystem_CIAppResourceGroupMemoryReport* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_CommitUsageLimit)(__x_ABI_CWindows_CSystem_CIAppResourceGroupMemoryReport* This,
        UINT64* value);
    HRESULT (STDMETHODCALLTYPE* get_CommitUsageLevel)(__x_ABI_CWindows_CSystem_CIAppResourceGroupMemoryReport* This,
        enum __x_ABI_CWindows_CSystem_CAppMemoryUsageLevel* value);
    HRESULT (STDMETHODCALLTYPE* get_PrivateCommitUsage)(__x_ABI_CWindows_CSystem_CIAppResourceGroupMemoryReport* This,
        UINT64* value);
    HRESULT (STDMETHODCALLTYPE* get_TotalCommitUsage)(__x_ABI_CWindows_CSystem_CIAppResourceGroupMemoryReport* This,
        UINT64* value);

        END_INTERFACE
    } __x_ABI_CWindows_CSystem_CIAppResourceGroupMemoryReportVtbl;

    interface __x_ABI_CWindows_CSystem_CIAppResourceGroupMemoryReport
    {
        CONST_VTBL struct __x_ABI_CWindows_CSystem_CIAppResourceGroupMemoryReportVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CSystem_CIAppResourceGroupMemoryReport;
#endif /* !defined(____x_ABI_CWindows_CSystem_CIAppResourceGroupMemoryReport_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CSystem_CIAppResourceGroupStateReport_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CSystem_CIAppResourceGroupStateReport_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CSystem_CIAppResourceGroupStateReportVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CSystem_CIAppResourceGroupStateReport* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CSystem_CIAppResourceGroupStateReport* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CSystem_CIAppResourceGroupStateReport* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CSystem_CIAppResourceGroupStateReport* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CSystem_CIAppResourceGroupStateReport* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CSystem_CIAppResourceGroupStateReport* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_ExecutionState)(__x_ABI_CWindows_CSystem_CIAppResourceGroupStateReport* This,
        enum __x_ABI_CWindows_CSystem_CAppResourceGroupExecutionState* value);
    HRESULT (STDMETHODCALLTYPE* get_EnergyQuotaState)(__x_ABI_CWindows_CSystem_CIAppResourceGroupStateReport* This,
        enum __x_ABI_CWindows_CSystem_CAppResourceGroupEnergyQuotaState* value);

        END_INTERFACE
    } __x_ABI_CWindows_CSystem_CIAppResourceGroupStateReportVtbl;

    interface __x_ABI_CWindows_CSystem_CIAppResourceGroupStateReport
    {
        CONST_VTBL struct __x_ABI_CWindows_CSystem_CIAppResourceGroupStateReportVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CSystem_CIAppResourceGroupStateReport;
#endif /* !defined(____x_ABI_CWindows_CSystem_CIAppResourceGroupStateReport_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CSystem_CIAppUriHandlerHost_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CSystem_CIAppUriHandlerHost_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CSystem_CIAppUriHandlerHostVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CSystem_CIAppUriHandlerHost* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CSystem_CIAppUriHandlerHost* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CSystem_CIAppUriHandlerHost* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CSystem_CIAppUriHandlerHost* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CSystem_CIAppUriHandlerHost* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CSystem_CIAppUriHandlerHost* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Name)(__x_ABI_CWindows_CSystem_CIAppUriHandlerHost* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* put_Name)(__x_ABI_CWindows_CSystem_CIAppUriHandlerHost* This,
        HSTRING value);

        END_INTERFACE
    } __x_ABI_CWindows_CSystem_CIAppUriHandlerHostVtbl;

    interface __x_ABI_CWindows_CSystem_CIAppUriHandlerHost
    {
        CONST_VTBL struct __x_ABI_CWindows_CSystem_CIAppUriHandlerHostVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CSystem_CIAppUriHandlerHost;
#endif /* !defined(____x_ABI_CWindows_CSystem_CIAppUriHandlerHost_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CSystem_CIAppUriHandlerHostFactory_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CSystem_CIAppUriHandlerHostFactory_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CSystem_CIAppUriHandlerHostFactoryVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CSystem_CIAppUriHandlerHostFactory* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CSystem_CIAppUriHandlerHostFactory* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CSystem_CIAppUriHandlerHostFactory* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CSystem_CIAppUriHandlerHostFactory* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CSystem_CIAppUriHandlerHostFactory* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CSystem_CIAppUriHandlerHostFactory* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* CreateInstance)(__x_ABI_CWindows_CSystem_CIAppUriHandlerHostFactory* This,
        HSTRING name,
        __x_ABI_CWindows_CSystem_CIAppUriHandlerHost** value);

        END_INTERFACE
    } __x_ABI_CWindows_CSystem_CIAppUriHandlerHostFactoryVtbl;

    interface __x_ABI_CWindows_CSystem_CIAppUriHandlerHostFactory
    {
        CONST_VTBL struct __x_ABI_CWindows_CSystem_CIAppUriHandlerHostFactoryVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CSystem_CIAppUriHandlerHostFactory;
#endif /* !defined(____x_ABI_CWindows_CSystem_CIAppUriHandlerHostFactory_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CSystem_CIAppUriHandlerRegistration_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CSystem_CIAppUriHandlerRegistration_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CSystem_CIAppUriHandlerRegistrationVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CSystem_CIAppUriHandlerRegistration* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CSystem_CIAppUriHandlerRegistration* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CSystem_CIAppUriHandlerRegistration* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CSystem_CIAppUriHandlerRegistration* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CSystem_CIAppUriHandlerRegistration* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CSystem_CIAppUriHandlerRegistration* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Name)(__x_ABI_CWindows_CSystem_CIAppUriHandlerRegistration* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_User)(__x_ABI_CWindows_CSystem_CIAppUriHandlerRegistration* This,
        __x_ABI_CWindows_CSystem_CIUser** value);
    HRESULT (STDMETHODCALLTYPE* GetAppAddedHostsAsync)(__x_ABI_CWindows_CSystem_CIAppUriHandlerRegistration* This,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVector_1___x_ABI_CWindows__CSystem__CAppUriHandlerHost** operation);
    HRESULT (STDMETHODCALLTYPE* SetAppAddedHostsAsync)(__x_ABI_CWindows_CSystem_CIAppUriHandlerRegistration* This,
        __x_ABI_C__FIIterable_1___x_ABI_CWindows__CSystem__CAppUriHandlerHost* hosts,
        __x_ABI_CWindows_CFoundation_CIAsyncAction** operation);

        END_INTERFACE
    } __x_ABI_CWindows_CSystem_CIAppUriHandlerRegistrationVtbl;

    interface __x_ABI_CWindows_CSystem_CIAppUriHandlerRegistration
    {
        CONST_VTBL struct __x_ABI_CWindows_CSystem_CIAppUriHandlerRegistrationVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CSystem_CIAppUriHandlerRegistration;
#endif /* !defined(____x_ABI_CWindows_CSystem_CIAppUriHandlerRegistration_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CSystem_CIAppUriHandlerRegistrationManager_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CSystem_CIAppUriHandlerRegistrationManager_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CSystem_CIAppUriHandlerRegistrationManagerVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CSystem_CIAppUriHandlerRegistrationManager* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CSystem_CIAppUriHandlerRegistrationManager* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CSystem_CIAppUriHandlerRegistrationManager* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CSystem_CIAppUriHandlerRegistrationManager* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CSystem_CIAppUriHandlerRegistrationManager* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CSystem_CIAppUriHandlerRegistrationManager* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_User)(__x_ABI_CWindows_CSystem_CIAppUriHandlerRegistrationManager* This,
        __x_ABI_CWindows_CSystem_CIUser** value);
    HRESULT (STDMETHODCALLTYPE* TryGetRegistration)(__x_ABI_CWindows_CSystem_CIAppUriHandlerRegistrationManager* This,
        HSTRING name,
        __x_ABI_CWindows_CSystem_CIAppUriHandlerRegistration** result);

        END_INTERFACE
    } __x_ABI_CWindows_CSystem_CIAppUriHandlerRegistrationManagerVtbl;

    interface __x_ABI_CWindows_CSystem_CIAppUriHandlerRegistrationManager
    {
        CONST_VTBL struct __x_ABI_CWindows_CSystem_CIAppUriHandlerRegistrationManagerVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CSystem_CIAppUriHandlerRegistrationManager;
#endif /* !defined(____x_ABI_CWindows_CSystem_CIAppUriHandlerRegistrationManager_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CSystem_CIAppUriHandlerRegistrationManagerStatics_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CSystem_CIAppUriHandlerRegistrationManagerStatics_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CSystem_CIAppUriHandlerRegistrationManagerStaticsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CSystem_CIAppUriHandlerRegistrationManagerStatics* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CSystem_CIAppUriHandlerRegistrationManagerStatics* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CSystem_CIAppUriHandlerRegistrationManagerStatics* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CSystem_CIAppUriHandlerRegistrationManagerStatics* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CSystem_CIAppUriHandlerRegistrationManagerStatics* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CSystem_CIAppUriHandlerRegistrationManagerStatics* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetDefault)(__x_ABI_CWindows_CSystem_CIAppUriHandlerRegistrationManagerStatics* This,
        __x_ABI_CWindows_CSystem_CIAppUriHandlerRegistrationManager** result);
    HRESULT (STDMETHODCALLTYPE* GetForUser)(__x_ABI_CWindows_CSystem_CIAppUriHandlerRegistrationManagerStatics* This,
        __x_ABI_CWindows_CSystem_CIUser* user,
        __x_ABI_CWindows_CSystem_CIAppUriHandlerRegistrationManager** result);

        END_INTERFACE
    } __x_ABI_CWindows_CSystem_CIAppUriHandlerRegistrationManagerStaticsVtbl;

    interface __x_ABI_CWindows_CSystem_CIAppUriHandlerRegistrationManagerStatics
    {
        CONST_VTBL struct __x_ABI_CWindows_CSystem_CIAppUriHandlerRegistrationManagerStaticsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CSystem_CIAppUriHandlerRegistrationManagerStatics;
#endif /* !defined(____x_ABI_CWindows_CSystem_CIAppUriHandlerRegistrationManagerStatics_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CSystem_CIDateTimeSettingsStatics_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CSystem_CIDateTimeSettingsStatics_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CSystem_CIDateTimeSettingsStaticsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CSystem_CIDateTimeSettingsStatics* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CSystem_CIDateTimeSettingsStatics* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CSystem_CIDateTimeSettingsStatics* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CSystem_CIDateTimeSettingsStatics* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CSystem_CIDateTimeSettingsStatics* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CSystem_CIDateTimeSettingsStatics* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* SetSystemDateTime)(__x_ABI_CWindows_CSystem_CIDateTimeSettingsStatics* This,
        struct __x_ABI_CWindows_CFoundation_CDateTime utcDateTime);

        END_INTERFACE
    } __x_ABI_CWindows_CSystem_CIDateTimeSettingsStaticsVtbl;

    interface __x_ABI_CWindows_CSystem_CIDateTimeSettingsStatics
    {
        CONST_VTBL struct __x_ABI_CWindows_CSystem_CIDateTimeSettingsStaticsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CSystem_CIDateTimeSettingsStatics;
#endif /* !defined(____x_ABI_CWindows_CSystem_CIDateTimeSettingsStatics_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CSystem_CIDispatcherQueue_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CSystem_CIDispatcherQueue_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CSystem_CIDispatcherQueueVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CSystem_CIDispatcherQueue* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CSystem_CIDispatcherQueue* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CSystem_CIDispatcherQueue* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CSystem_CIDispatcherQueue* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CSystem_CIDispatcherQueue* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CSystem_CIDispatcherQueue* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* CreateTimer)(__x_ABI_CWindows_CSystem_CIDispatcherQueue* This,
        __x_ABI_CWindows_CSystem_CIDispatcherQueueTimer** result);
    HRESULT (STDMETHODCALLTYPE* TryEnqueue)(__x_ABI_CWindows_CSystem_CIDispatcherQueue* This,
        __x_ABI_CWindows_CSystem_CIDispatcherQueueHandler* callback,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* TryEnqueueWithPriority)(__x_ABI_CWindows_CSystem_CIDispatcherQueue* This,
        enum __x_ABI_CWindows_CSystem_CDispatcherQueuePriority priority,
        __x_ABI_CWindows_CSystem_CIDispatcherQueueHandler* callback,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* add_ShutdownStarting)(__x_ABI_CWindows_CSystem_CIDispatcherQueue* This,
        __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CDispatcherQueue___x_ABI_CWindows__CSystem__CDispatcherQueueShutdownStartingEventArgs* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_ShutdownStarting)(__x_ABI_CWindows_CSystem_CIDispatcherQueue* This,
        EventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* add_ShutdownCompleted)(__x_ABI_CWindows_CSystem_CIDispatcherQueue* This,
        __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CDispatcherQueue_IInspectable* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_ShutdownCompleted)(__x_ABI_CWindows_CSystem_CIDispatcherQueue* This,
        EventRegistrationToken token);

        END_INTERFACE
    } __x_ABI_CWindows_CSystem_CIDispatcherQueueVtbl;

    interface __x_ABI_CWindows_CSystem_CIDispatcherQueue
    {
        CONST_VTBL struct __x_ABI_CWindows_CSystem_CIDispatcherQueueVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CSystem_CIDispatcherQueue;
#endif /* !defined(____x_ABI_CWindows_CSystem_CIDispatcherQueue_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CSystem_CIDispatcherQueue2_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CSystem_CIDispatcherQueue2_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CSystem_CIDispatcherQueue2Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CSystem_CIDispatcherQueue2* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CSystem_CIDispatcherQueue2* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CSystem_CIDispatcherQueue2* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CSystem_CIDispatcherQueue2* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CSystem_CIDispatcherQueue2* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CSystem_CIDispatcherQueue2* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_HasThreadAccess)(__x_ABI_CWindows_CSystem_CIDispatcherQueue2* This,
        boolean* value);

        END_INTERFACE
    } __x_ABI_CWindows_CSystem_CIDispatcherQueue2Vtbl;

    interface __x_ABI_CWindows_CSystem_CIDispatcherQueue2
    {
        CONST_VTBL struct __x_ABI_CWindows_CSystem_CIDispatcherQueue2Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CSystem_CIDispatcherQueue2;
#endif /* !defined(____x_ABI_CWindows_CSystem_CIDispatcherQueue2_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CSystem_CIDispatcherQueueController_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CSystem_CIDispatcherQueueController_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CSystem_CIDispatcherQueueControllerVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CSystem_CIDispatcherQueueController* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CSystem_CIDispatcherQueueController* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CSystem_CIDispatcherQueueController* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CSystem_CIDispatcherQueueController* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CSystem_CIDispatcherQueueController* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CSystem_CIDispatcherQueueController* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_DispatcherQueue)(__x_ABI_CWindows_CSystem_CIDispatcherQueueController* This,
        __x_ABI_CWindows_CSystem_CIDispatcherQueue** value);
    HRESULT (STDMETHODCALLTYPE* ShutdownQueueAsync)(__x_ABI_CWindows_CSystem_CIDispatcherQueueController* This,
        __x_ABI_CWindows_CFoundation_CIAsyncAction** operation);

        END_INTERFACE
    } __x_ABI_CWindows_CSystem_CIDispatcherQueueControllerVtbl;

    interface __x_ABI_CWindows_CSystem_CIDispatcherQueueController
    {
        CONST_VTBL struct __x_ABI_CWindows_CSystem_CIDispatcherQueueControllerVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CSystem_CIDispatcherQueueController;
#endif /* !defined(____x_ABI_CWindows_CSystem_CIDispatcherQueueController_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CSystem_CIDispatcherQueueControllerStatics_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CSystem_CIDispatcherQueueControllerStatics_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CSystem_CIDispatcherQueueControllerStaticsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CSystem_CIDispatcherQueueControllerStatics* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CSystem_CIDispatcherQueueControllerStatics* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CSystem_CIDispatcherQueueControllerStatics* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CSystem_CIDispatcherQueueControllerStatics* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CSystem_CIDispatcherQueueControllerStatics* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CSystem_CIDispatcherQueueControllerStatics* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* CreateOnDedicatedThread)(__x_ABI_CWindows_CSystem_CIDispatcherQueueControllerStatics* This,
        __x_ABI_CWindows_CSystem_CIDispatcherQueueController** result);

        END_INTERFACE
    } __x_ABI_CWindows_CSystem_CIDispatcherQueueControllerStaticsVtbl;

    interface __x_ABI_CWindows_CSystem_CIDispatcherQueueControllerStatics
    {
        CONST_VTBL struct __x_ABI_CWindows_CSystem_CIDispatcherQueueControllerStaticsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CSystem_CIDispatcherQueueControllerStatics;
#endif /* !defined(____x_ABI_CWindows_CSystem_CIDispatcherQueueControllerStatics_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CSystem_CIDispatcherQueueShutdownStartingEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CSystem_CIDispatcherQueueShutdownStartingEventArgs_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CSystem_CIDispatcherQueueShutdownStartingEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CSystem_CIDispatcherQueueShutdownStartingEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CSystem_CIDispatcherQueueShutdownStartingEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CSystem_CIDispatcherQueueShutdownStartingEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CSystem_CIDispatcherQueueShutdownStartingEventArgs* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CSystem_CIDispatcherQueueShutdownStartingEventArgs* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CSystem_CIDispatcherQueueShutdownStartingEventArgs* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetDeferral)(__x_ABI_CWindows_CSystem_CIDispatcherQueueShutdownStartingEventArgs* This,
        __x_ABI_CWindows_CFoundation_CIDeferral** result);

        END_INTERFACE
    } __x_ABI_CWindows_CSystem_CIDispatcherQueueShutdownStartingEventArgsVtbl;

    interface __x_ABI_CWindows_CSystem_CIDispatcherQueueShutdownStartingEventArgs
    {
        CONST_VTBL struct __x_ABI_CWindows_CSystem_CIDispatcherQueueShutdownStartingEventArgsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CSystem_CIDispatcherQueueShutdownStartingEventArgs;
#endif /* !defined(____x_ABI_CWindows_CSystem_CIDispatcherQueueShutdownStartingEventArgs_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CSystem_CIDispatcherQueueStatics_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CSystem_CIDispatcherQueueStatics_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CSystem_CIDispatcherQueueStaticsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CSystem_CIDispatcherQueueStatics* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CSystem_CIDispatcherQueueStatics* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CSystem_CIDispatcherQueueStatics* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CSystem_CIDispatcherQueueStatics* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CSystem_CIDispatcherQueueStatics* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CSystem_CIDispatcherQueueStatics* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetForCurrentThread)(__x_ABI_CWindows_CSystem_CIDispatcherQueueStatics* This,
        __x_ABI_CWindows_CSystem_CIDispatcherQueue** result);

        END_INTERFACE
    } __x_ABI_CWindows_CSystem_CIDispatcherQueueStaticsVtbl;

    interface __x_ABI_CWindows_CSystem_CIDispatcherQueueStatics
    {
        CONST_VTBL struct __x_ABI_CWindows_CSystem_CIDispatcherQueueStaticsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CSystem_CIDispatcherQueueStatics;
#endif /* !defined(____x_ABI_CWindows_CSystem_CIDispatcherQueueStatics_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CSystem_CIDispatcherQueueTimer_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CSystem_CIDispatcherQueueTimer_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CSystem_CIDispatcherQueueTimerVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CSystem_CIDispatcherQueueTimer* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CSystem_CIDispatcherQueueTimer* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CSystem_CIDispatcherQueueTimer* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CSystem_CIDispatcherQueueTimer* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CSystem_CIDispatcherQueueTimer* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CSystem_CIDispatcherQueueTimer* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Interval)(__x_ABI_CWindows_CSystem_CIDispatcherQueueTimer* This,
        struct __x_ABI_CWindows_CFoundation_CTimeSpan* value);
    HRESULT (STDMETHODCALLTYPE* put_Interval)(__x_ABI_CWindows_CSystem_CIDispatcherQueueTimer* This,
        struct __x_ABI_CWindows_CFoundation_CTimeSpan value);
    HRESULT (STDMETHODCALLTYPE* get_IsRunning)(__x_ABI_CWindows_CSystem_CIDispatcherQueueTimer* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* get_IsRepeating)(__x_ABI_CWindows_CSystem_CIDispatcherQueueTimer* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* put_IsRepeating)(__x_ABI_CWindows_CSystem_CIDispatcherQueueTimer* This,
        boolean value);
    HRESULT (STDMETHODCALLTYPE* Start)(__x_ABI_CWindows_CSystem_CIDispatcherQueueTimer* This);
    HRESULT (STDMETHODCALLTYPE* Stop)(__x_ABI_CWindows_CSystem_CIDispatcherQueueTimer* This);
    HRESULT (STDMETHODCALLTYPE* add_Tick)(__x_ABI_CWindows_CSystem_CIDispatcherQueueTimer* This,
        __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CDispatcherQueueTimer_IInspectable* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_Tick)(__x_ABI_CWindows_CSystem_CIDispatcherQueueTimer* This,
        EventRegistrationToken token);

        END_INTERFACE
    } __x_ABI_CWindows_CSystem_CIDispatcherQueueTimerVtbl;

    interface __x_ABI_CWindows_CSystem_CIDispatcherQueueTimer
    {
        CONST_VTBL struct __x_ABI_CWindows_CSystem_CIDispatcherQueueTimerVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CSystem_CIDispatcherQueueTimer;
#endif /* !defined(____x_ABI_CWindows_CSystem_CIDispatcherQueueTimer_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CSystem_CIFolderLauncherOptions_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CSystem_CIFolderLauncherOptions_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CSystem_CIFolderLauncherOptionsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CSystem_CIFolderLauncherOptions* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CSystem_CIFolderLauncherOptions* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CSystem_CIFolderLauncherOptions* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CSystem_CIFolderLauncherOptions* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CSystem_CIFolderLauncherOptions* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CSystem_CIFolderLauncherOptions* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_ItemsToSelect)(__x_ABI_CWindows_CSystem_CIFolderLauncherOptions* This,
        __x_ABI_C__FIVector_1___x_ABI_CWindows__CStorage__CIStorageItem** value);

        END_INTERFACE
    } __x_ABI_CWindows_CSystem_CIFolderLauncherOptionsVtbl;

    interface __x_ABI_CWindows_CSystem_CIFolderLauncherOptions
    {
        CONST_VTBL struct __x_ABI_CWindows_CSystem_CIFolderLauncherOptionsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CSystem_CIFolderLauncherOptions;
#endif /* !defined(____x_ABI_CWindows_CSystem_CIFolderLauncherOptions_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CSystem_CIKnownUserPropertiesStatics_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CSystem_CIKnownUserPropertiesStatics_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CSystem_CIKnownUserPropertiesStaticsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CSystem_CIKnownUserPropertiesStatics* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CSystem_CIKnownUserPropertiesStatics* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CSystem_CIKnownUserPropertiesStatics* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CSystem_CIKnownUserPropertiesStatics* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CSystem_CIKnownUserPropertiesStatics* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CSystem_CIKnownUserPropertiesStatics* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_DisplayName)(__x_ABI_CWindows_CSystem_CIKnownUserPropertiesStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_FirstName)(__x_ABI_CWindows_CSystem_CIKnownUserPropertiesStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_LastName)(__x_ABI_CWindows_CSystem_CIKnownUserPropertiesStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_ProviderName)(__x_ABI_CWindows_CSystem_CIKnownUserPropertiesStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_AccountName)(__x_ABI_CWindows_CSystem_CIKnownUserPropertiesStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_GuestHost)(__x_ABI_CWindows_CSystem_CIKnownUserPropertiesStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_PrincipalName)(__x_ABI_CWindows_CSystem_CIKnownUserPropertiesStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_DomainName)(__x_ABI_CWindows_CSystem_CIKnownUserPropertiesStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_SessionInitiationProtocolUri)(__x_ABI_CWindows_CSystem_CIKnownUserPropertiesStatics* This,
        HSTRING* value);

        END_INTERFACE
    } __x_ABI_CWindows_CSystem_CIKnownUserPropertiesStaticsVtbl;

    interface __x_ABI_CWindows_CSystem_CIKnownUserPropertiesStatics
    {
        CONST_VTBL struct __x_ABI_CWindows_CSystem_CIKnownUserPropertiesStaticsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CSystem_CIKnownUserPropertiesStatics;
#endif /* !defined(____x_ABI_CWindows_CSystem_CIKnownUserPropertiesStatics_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CSystem_CILaunchUriResult_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CSystem_CILaunchUriResult_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CSystem_CILaunchUriResultVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CSystem_CILaunchUriResult* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CSystem_CILaunchUriResult* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CSystem_CILaunchUriResult* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CSystem_CILaunchUriResult* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CSystem_CILaunchUriResult* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CSystem_CILaunchUriResult* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Status)(__x_ABI_CWindows_CSystem_CILaunchUriResult* This,
        enum __x_ABI_CWindows_CSystem_CLaunchUriStatus* value);
    HRESULT (STDMETHODCALLTYPE* get_Result)(__x_ABI_CWindows_CSystem_CILaunchUriResult* This,
        __x_ABI_CWindows_CFoundation_CCollections_CIPropertySet** value);

        END_INTERFACE
    } __x_ABI_CWindows_CSystem_CILaunchUriResultVtbl;

    interface __x_ABI_CWindows_CSystem_CILaunchUriResult
    {
        CONST_VTBL struct __x_ABI_CWindows_CSystem_CILaunchUriResultVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CSystem_CILaunchUriResult;
#endif /* !defined(____x_ABI_CWindows_CSystem_CILaunchUriResult_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CSystem_CILauncherOptions_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CSystem_CILauncherOptions_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CSystem_CILauncherOptionsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CSystem_CILauncherOptions* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CSystem_CILauncherOptions* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CSystem_CILauncherOptions* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CSystem_CILauncherOptions* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CSystem_CILauncherOptions* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CSystem_CILauncherOptions* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_TreatAsUntrusted)(__x_ABI_CWindows_CSystem_CILauncherOptions* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* put_TreatAsUntrusted)(__x_ABI_CWindows_CSystem_CILauncherOptions* This,
        boolean value);
    HRESULT (STDMETHODCALLTYPE* get_DisplayApplicationPicker)(__x_ABI_CWindows_CSystem_CILauncherOptions* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* put_DisplayApplicationPicker)(__x_ABI_CWindows_CSystem_CILauncherOptions* This,
        boolean value);
    HRESULT (STDMETHODCALLTYPE* get_UI)(__x_ABI_CWindows_CSystem_CILauncherOptions* This,
        __x_ABI_CWindows_CSystem_CILauncherUIOptions** value);
    HRESULT (STDMETHODCALLTYPE* get_PreferredApplicationPackageFamilyName)(__x_ABI_CWindows_CSystem_CILauncherOptions* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* put_PreferredApplicationPackageFamilyName)(__x_ABI_CWindows_CSystem_CILauncherOptions* This,
        HSTRING value);
    HRESULT (STDMETHODCALLTYPE* get_PreferredApplicationDisplayName)(__x_ABI_CWindows_CSystem_CILauncherOptions* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* put_PreferredApplicationDisplayName)(__x_ABI_CWindows_CSystem_CILauncherOptions* This,
        HSTRING value);
    HRESULT (STDMETHODCALLTYPE* get_FallbackUri)(__x_ABI_CWindows_CSystem_CILauncherOptions* This,
        __x_ABI_CWindows_CFoundation_CIUriRuntimeClass** value);
    HRESULT (STDMETHODCALLTYPE* put_FallbackUri)(__x_ABI_CWindows_CSystem_CILauncherOptions* This,
        __x_ABI_CWindows_CFoundation_CIUriRuntimeClass* value);
    HRESULT (STDMETHODCALLTYPE* get_ContentType)(__x_ABI_CWindows_CSystem_CILauncherOptions* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* put_ContentType)(__x_ABI_CWindows_CSystem_CILauncherOptions* This,
        HSTRING value);

        END_INTERFACE
    } __x_ABI_CWindows_CSystem_CILauncherOptionsVtbl;

    interface __x_ABI_CWindows_CSystem_CILauncherOptions
    {
        CONST_VTBL struct __x_ABI_CWindows_CSystem_CILauncherOptionsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CSystem_CILauncherOptions;
#endif /* !defined(____x_ABI_CWindows_CSystem_CILauncherOptions_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CSystem_CILauncherOptions2_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CSystem_CILauncherOptions2_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CSystem_CILauncherOptions2Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CSystem_CILauncherOptions2* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CSystem_CILauncherOptions2* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CSystem_CILauncherOptions2* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CSystem_CILauncherOptions2* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CSystem_CILauncherOptions2* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CSystem_CILauncherOptions2* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_TargetApplicationPackageFamilyName)(__x_ABI_CWindows_CSystem_CILauncherOptions2* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* put_TargetApplicationPackageFamilyName)(__x_ABI_CWindows_CSystem_CILauncherOptions2* This,
        HSTRING value);
    HRESULT (STDMETHODCALLTYPE* get_NeighboringFilesQuery)(__x_ABI_CWindows_CSystem_CILauncherOptions2* This,
        __x_ABI_CWindows_CStorage_CSearch_CIStorageFileQueryResult** value);
    HRESULT (STDMETHODCALLTYPE* put_NeighboringFilesQuery)(__x_ABI_CWindows_CSystem_CILauncherOptions2* This,
        __x_ABI_CWindows_CStorage_CSearch_CIStorageFileQueryResult* value);

        END_INTERFACE
    } __x_ABI_CWindows_CSystem_CILauncherOptions2Vtbl;

    interface __x_ABI_CWindows_CSystem_CILauncherOptions2
    {
        CONST_VTBL struct __x_ABI_CWindows_CSystem_CILauncherOptions2Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CSystem_CILauncherOptions2;
#endif /* !defined(____x_ABI_CWindows_CSystem_CILauncherOptions2_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CSystem_CILauncherOptions3_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CSystem_CILauncherOptions3_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CSystem_CILauncherOptions3Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CSystem_CILauncherOptions3* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CSystem_CILauncherOptions3* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CSystem_CILauncherOptions3* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CSystem_CILauncherOptions3* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CSystem_CILauncherOptions3* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CSystem_CILauncherOptions3* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_IgnoreAppUriHandlers)(__x_ABI_CWindows_CSystem_CILauncherOptions3* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* put_IgnoreAppUriHandlers)(__x_ABI_CWindows_CSystem_CILauncherOptions3* This,
        boolean value);

        END_INTERFACE
    } __x_ABI_CWindows_CSystem_CILauncherOptions3Vtbl;

    interface __x_ABI_CWindows_CSystem_CILauncherOptions3
    {
        CONST_VTBL struct __x_ABI_CWindows_CSystem_CILauncherOptions3Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CSystem_CILauncherOptions3;
#endif /* !defined(____x_ABI_CWindows_CSystem_CILauncherOptions3_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CSystem_CILauncherOptions4_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CSystem_CILauncherOptions4_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CSystem_CILauncherOptions4Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CSystem_CILauncherOptions4* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CSystem_CILauncherOptions4* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CSystem_CILauncherOptions4* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CSystem_CILauncherOptions4* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CSystem_CILauncherOptions4* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CSystem_CILauncherOptions4* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_LimitPickerToCurrentAppAndAppUriHandlers)(__x_ABI_CWindows_CSystem_CILauncherOptions4* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* put_LimitPickerToCurrentAppAndAppUriHandlers)(__x_ABI_CWindows_CSystem_CILauncherOptions4* This,
        boolean value);

        END_INTERFACE
    } __x_ABI_CWindows_CSystem_CILauncherOptions4Vtbl;

    interface __x_ABI_CWindows_CSystem_CILauncherOptions4
    {
        CONST_VTBL struct __x_ABI_CWindows_CSystem_CILauncherOptions4Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CSystem_CILauncherOptions4;
#endif /* !defined(____x_ABI_CWindows_CSystem_CILauncherOptions4_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CSystem_CILauncherStatics_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CSystem_CILauncherStatics_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CSystem_CILauncherStaticsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CSystem_CILauncherStatics* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CSystem_CILauncherStatics* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CSystem_CILauncherStatics* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CSystem_CILauncherStatics* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CSystem_CILauncherStatics* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CSystem_CILauncherStatics* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* LaunchFileAsync)(__x_ABI_CWindows_CSystem_CILauncherStatics* This,
        __x_ABI_CWindows_CStorage_CIStorageFile* file,
        __x_ABI_C__FIAsyncOperation_1_boolean** operation);
    HRESULT (STDMETHODCALLTYPE* LaunchFileWithOptionsAsync)(__x_ABI_CWindows_CSystem_CILauncherStatics* This,
        __x_ABI_CWindows_CStorage_CIStorageFile* file,
        __x_ABI_CWindows_CSystem_CILauncherOptions* options,
        __x_ABI_C__FIAsyncOperation_1_boolean** operation);
    HRESULT (STDMETHODCALLTYPE* LaunchUriAsync)(__x_ABI_CWindows_CSystem_CILauncherStatics* This,
        __x_ABI_CWindows_CFoundation_CIUriRuntimeClass* uri,
        __x_ABI_C__FIAsyncOperation_1_boolean** operation);
    HRESULT (STDMETHODCALLTYPE* LaunchUriWithOptionsAsync)(__x_ABI_CWindows_CSystem_CILauncherStatics* This,
        __x_ABI_CWindows_CFoundation_CIUriRuntimeClass* uri,
        __x_ABI_CWindows_CSystem_CILauncherOptions* options,
        __x_ABI_C__FIAsyncOperation_1_boolean** operation);

        END_INTERFACE
    } __x_ABI_CWindows_CSystem_CILauncherStaticsVtbl;

    interface __x_ABI_CWindows_CSystem_CILauncherStatics
    {
        CONST_VTBL struct __x_ABI_CWindows_CSystem_CILauncherStaticsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CSystem_CILauncherStatics;
#endif /* !defined(____x_ABI_CWindows_CSystem_CILauncherStatics_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CSystem_CILauncherStatics2_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CSystem_CILauncherStatics2_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CSystem_CILauncherStatics2Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CSystem_CILauncherStatics2* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CSystem_CILauncherStatics2* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CSystem_CILauncherStatics2* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CSystem_CILauncherStatics2* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CSystem_CILauncherStatics2* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CSystem_CILauncherStatics2* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* LaunchUriForResultsAsync)(__x_ABI_CWindows_CSystem_CILauncherStatics2* This,
        __x_ABI_CWindows_CFoundation_CIUriRuntimeClass* uri,
        __x_ABI_CWindows_CSystem_CILauncherOptions* options,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CLaunchUriResult** operation);
    HRESULT (STDMETHODCALLTYPE* LaunchUriForResultsWithDataAsync)(__x_ABI_CWindows_CSystem_CILauncherStatics2* This,
        __x_ABI_CWindows_CFoundation_CIUriRuntimeClass* uri,
        __x_ABI_CWindows_CSystem_CILauncherOptions* options,
        __x_ABI_CWindows_CFoundation_CCollections_CIPropertySet* inputData,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CLaunchUriResult** operation);
    HRESULT (STDMETHODCALLTYPE* LaunchUriWithDataAsync)(__x_ABI_CWindows_CSystem_CILauncherStatics2* This,
        __x_ABI_CWindows_CFoundation_CIUriRuntimeClass* uri,
        __x_ABI_CWindows_CSystem_CILauncherOptions* options,
        __x_ABI_CWindows_CFoundation_CCollections_CIPropertySet* inputData,
        __x_ABI_C__FIAsyncOperation_1_boolean** operation);
    HRESULT (STDMETHODCALLTYPE* QueryUriSupportAsync)(__x_ABI_CWindows_CSystem_CILauncherStatics2* This,
        __x_ABI_CWindows_CFoundation_CIUriRuntimeClass* uri,
        enum __x_ABI_CWindows_CSystem_CLaunchQuerySupportType launchQuerySupportType,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CLaunchQuerySupportStatus** operation);
    HRESULT (STDMETHODCALLTYPE* QueryUriSupportWithPackageFamilyNameAsync)(__x_ABI_CWindows_CSystem_CILauncherStatics2* This,
        __x_ABI_CWindows_CFoundation_CIUriRuntimeClass* uri,
        enum __x_ABI_CWindows_CSystem_CLaunchQuerySupportType launchQuerySupportType,
        HSTRING packageFamilyName,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CLaunchQuerySupportStatus** operation);
    HRESULT (STDMETHODCALLTYPE* QueryFileSupportAsync)(__x_ABI_CWindows_CSystem_CILauncherStatics2* This,
        __x_ABI_CWindows_CStorage_CIStorageFile* file,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CLaunchQuerySupportStatus** operation);
    HRESULT (STDMETHODCALLTYPE* QueryFileSupportWithPackageFamilyNameAsync)(__x_ABI_CWindows_CSystem_CILauncherStatics2* This,
        __x_ABI_CWindows_CStorage_CIStorageFile* file,
        HSTRING packageFamilyName,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CLaunchQuerySupportStatus** operation);
    HRESULT (STDMETHODCALLTYPE* FindUriSchemeHandlersAsync)(__x_ABI_CWindows_CSystem_CILauncherStatics2* This,
        HSTRING scheme,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CApplicationModel__CAppInfo** operation);
    HRESULT (STDMETHODCALLTYPE* FindUriSchemeHandlersWithLaunchUriTypeAsync)(__x_ABI_CWindows_CSystem_CILauncherStatics2* This,
        HSTRING scheme,
        enum __x_ABI_CWindows_CSystem_CLaunchQuerySupportType launchQuerySupportType,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CApplicationModel__CAppInfo** operation);
    HRESULT (STDMETHODCALLTYPE* FindFileHandlersAsync)(__x_ABI_CWindows_CSystem_CILauncherStatics2* This,
        HSTRING extension,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CApplicationModel__CAppInfo** operation);

        END_INTERFACE
    } __x_ABI_CWindows_CSystem_CILauncherStatics2Vtbl;

    interface __x_ABI_CWindows_CSystem_CILauncherStatics2
    {
        CONST_VTBL struct __x_ABI_CWindows_CSystem_CILauncherStatics2Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CSystem_CILauncherStatics2;
#endif /* !defined(____x_ABI_CWindows_CSystem_CILauncherStatics2_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CSystem_CILauncherStatics3_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CSystem_CILauncherStatics3_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CSystem_CILauncherStatics3Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CSystem_CILauncherStatics3* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CSystem_CILauncherStatics3* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CSystem_CILauncherStatics3* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CSystem_CILauncherStatics3* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CSystem_CILauncherStatics3* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CSystem_CILauncherStatics3* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* LaunchFolderAsync)(__x_ABI_CWindows_CSystem_CILauncherStatics3* This,
        __x_ABI_CWindows_CStorage_CIStorageFolder* folder,
        __x_ABI_C__FIAsyncOperation_1_boolean** operation);
    HRESULT (STDMETHODCALLTYPE* LaunchFolderWithOptionsAsync)(__x_ABI_CWindows_CSystem_CILauncherStatics3* This,
        __x_ABI_CWindows_CStorage_CIStorageFolder* folder,
        __x_ABI_CWindows_CSystem_CIFolderLauncherOptions* options,
        __x_ABI_C__FIAsyncOperation_1_boolean** operation);

        END_INTERFACE
    } __x_ABI_CWindows_CSystem_CILauncherStatics3Vtbl;

    interface __x_ABI_CWindows_CSystem_CILauncherStatics3
    {
        CONST_VTBL struct __x_ABI_CWindows_CSystem_CILauncherStatics3Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CSystem_CILauncherStatics3;
#endif /* !defined(____x_ABI_CWindows_CSystem_CILauncherStatics3_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CSystem_CILauncherStatics4_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CSystem_CILauncherStatics4_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CSystem_CILauncherStatics4Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CSystem_CILauncherStatics4* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CSystem_CILauncherStatics4* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CSystem_CILauncherStatics4* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CSystem_CILauncherStatics4* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CSystem_CILauncherStatics4* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CSystem_CILauncherStatics4* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* QueryAppUriSupportAsync)(__x_ABI_CWindows_CSystem_CILauncherStatics4* This,
        __x_ABI_CWindows_CFoundation_CIUriRuntimeClass* uri,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CLaunchQuerySupportStatus** operation);
    HRESULT (STDMETHODCALLTYPE* QueryAppUriSupportWithPackageFamilyNameAsync)(__x_ABI_CWindows_CSystem_CILauncherStatics4* This,
        __x_ABI_CWindows_CFoundation_CIUriRuntimeClass* uri,
        HSTRING packageFamilyName,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CLaunchQuerySupportStatus** operation);
    HRESULT (STDMETHODCALLTYPE* FindAppUriHandlersAsync)(__x_ABI_CWindows_CSystem_CILauncherStatics4* This,
        __x_ABI_CWindows_CFoundation_CIUriRuntimeClass* uri,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CApplicationModel__CAppInfo** operation);
    HRESULT (STDMETHODCALLTYPE* LaunchUriForUserAsync)(__x_ABI_CWindows_CSystem_CILauncherStatics4* This,
        __x_ABI_CWindows_CSystem_CIUser* user,
        __x_ABI_CWindows_CFoundation_CIUriRuntimeClass* uri,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CLaunchUriStatus** operation);
    HRESULT (STDMETHODCALLTYPE* LaunchUriWithOptionsForUserAsync)(__x_ABI_CWindows_CSystem_CILauncherStatics4* This,
        __x_ABI_CWindows_CSystem_CIUser* user,
        __x_ABI_CWindows_CFoundation_CIUriRuntimeClass* uri,
        __x_ABI_CWindows_CSystem_CILauncherOptions* options,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CLaunchUriStatus** operation);
    HRESULT (STDMETHODCALLTYPE* LaunchUriWithDataForUserAsync)(__x_ABI_CWindows_CSystem_CILauncherStatics4* This,
        __x_ABI_CWindows_CSystem_CIUser* user,
        __x_ABI_CWindows_CFoundation_CIUriRuntimeClass* uri,
        __x_ABI_CWindows_CSystem_CILauncherOptions* options,
        __x_ABI_CWindows_CFoundation_CCollections_CIPropertySet* inputData,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CLaunchUriStatus** operation);
    HRESULT (STDMETHODCALLTYPE* LaunchUriForResultsForUserAsync)(__x_ABI_CWindows_CSystem_CILauncherStatics4* This,
        __x_ABI_CWindows_CSystem_CIUser* user,
        __x_ABI_CWindows_CFoundation_CIUriRuntimeClass* uri,
        __x_ABI_CWindows_CSystem_CILauncherOptions* options,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CLaunchUriResult** operation);
    HRESULT (STDMETHODCALLTYPE* LaunchUriForResultsWithDataForUserAsync)(__x_ABI_CWindows_CSystem_CILauncherStatics4* This,
        __x_ABI_CWindows_CSystem_CIUser* user,
        __x_ABI_CWindows_CFoundation_CIUriRuntimeClass* uri,
        __x_ABI_CWindows_CSystem_CILauncherOptions* options,
        __x_ABI_CWindows_CFoundation_CCollections_CIPropertySet* inputData,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CLaunchUriResult** operation);

        END_INTERFACE
    } __x_ABI_CWindows_CSystem_CILauncherStatics4Vtbl;

    interface __x_ABI_CWindows_CSystem_CILauncherStatics4
    {
        CONST_VTBL struct __x_ABI_CWindows_CSystem_CILauncherStatics4Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CSystem_CILauncherStatics4;
#endif /* !defined(____x_ABI_CWindows_CSystem_CILauncherStatics4_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CSystem_CILauncherStatics5_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CSystem_CILauncherStatics5_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CSystem_CILauncherStatics5Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CSystem_CILauncherStatics5* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CSystem_CILauncherStatics5* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CSystem_CILauncherStatics5* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CSystem_CILauncherStatics5* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CSystem_CILauncherStatics5* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CSystem_CILauncherStatics5* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* LaunchFolderPathAsync)(__x_ABI_CWindows_CSystem_CILauncherStatics5* This,
        HSTRING path,
        __x_ABI_C__FIAsyncOperation_1_boolean** operation);
    HRESULT (STDMETHODCALLTYPE* LaunchFolderPathWithOptionsAsync)(__x_ABI_CWindows_CSystem_CILauncherStatics5* This,
        HSTRING path,
        __x_ABI_CWindows_CSystem_CIFolderLauncherOptions* options,
        __x_ABI_C__FIAsyncOperation_1_boolean** operation);
    HRESULT (STDMETHODCALLTYPE* LaunchFolderPathForUserAsync)(__x_ABI_CWindows_CSystem_CILauncherStatics5* This,
        __x_ABI_CWindows_CSystem_CIUser* user,
        HSTRING path,
        __x_ABI_C__FIAsyncOperation_1_boolean** operation);
    HRESULT (STDMETHODCALLTYPE* LaunchFolderPathWithOptionsForUserAsync)(__x_ABI_CWindows_CSystem_CILauncherStatics5* This,
        __x_ABI_CWindows_CSystem_CIUser* user,
        HSTRING path,
        __x_ABI_CWindows_CSystem_CIFolderLauncherOptions* options,
        __x_ABI_C__FIAsyncOperation_1_boolean** operation);

        END_INTERFACE
    } __x_ABI_CWindows_CSystem_CILauncherStatics5Vtbl;

    interface __x_ABI_CWindows_CSystem_CILauncherStatics5
    {
        CONST_VTBL struct __x_ABI_CWindows_CSystem_CILauncherStatics5Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CSystem_CILauncherStatics5;
#endif /* !defined(____x_ABI_CWindows_CSystem_CILauncherStatics5_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CSystem_CILauncherUIOptions_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CSystem_CILauncherUIOptions_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CSystem_CILauncherUIOptionsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CSystem_CILauncherUIOptions* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CSystem_CILauncherUIOptions* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CSystem_CILauncherUIOptions* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CSystem_CILauncherUIOptions* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CSystem_CILauncherUIOptions* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CSystem_CILauncherUIOptions* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_InvocationPoint)(__x_ABI_CWindows_CSystem_CILauncherUIOptions* This,
        __x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CPoint** value);
    HRESULT (STDMETHODCALLTYPE* put_InvocationPoint)(__x_ABI_CWindows_CSystem_CILauncherUIOptions* This,
        __x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CPoint* value);
    HRESULT (STDMETHODCALLTYPE* get_SelectionRect)(__x_ABI_CWindows_CSystem_CILauncherUIOptions* This,
        __x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CRect** value);
    HRESULT (STDMETHODCALLTYPE* put_SelectionRect)(__x_ABI_CWindows_CSystem_CILauncherUIOptions* This,
        __x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CRect* value);
    HRESULT (STDMETHODCALLTYPE* get_PreferredPlacement)(__x_ABI_CWindows_CSystem_CILauncherUIOptions* This,
        enum __x_ABI_CWindows_CUI_CPopups_CPlacement* value);
    HRESULT (STDMETHODCALLTYPE* put_PreferredPlacement)(__x_ABI_CWindows_CSystem_CILauncherUIOptions* This,
        enum __x_ABI_CWindows_CUI_CPopups_CPlacement value);

        END_INTERFACE
    } __x_ABI_CWindows_CSystem_CILauncherUIOptionsVtbl;

    interface __x_ABI_CWindows_CSystem_CILauncherUIOptions
    {
        CONST_VTBL struct __x_ABI_CWindows_CSystem_CILauncherUIOptionsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CSystem_CILauncherUIOptions;
#endif /* !defined(____x_ABI_CWindows_CSystem_CILauncherUIOptions_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CSystem_CILauncherViewOptions_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CSystem_CILauncherViewOptions_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CSystem_CILauncherViewOptionsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CSystem_CILauncherViewOptions* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CSystem_CILauncherViewOptions* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CSystem_CILauncherViewOptions* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CSystem_CILauncherViewOptions* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CSystem_CILauncherViewOptions* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CSystem_CILauncherViewOptions* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_DesiredRemainingView)(__x_ABI_CWindows_CSystem_CILauncherViewOptions* This,
        enum __x_ABI_CWindows_CUI_CViewManagement_CViewSizePreference* value);
    HRESULT (STDMETHODCALLTYPE* put_DesiredRemainingView)(__x_ABI_CWindows_CSystem_CILauncherViewOptions* This,
        enum __x_ABI_CWindows_CUI_CViewManagement_CViewSizePreference value);

        END_INTERFACE
    } __x_ABI_CWindows_CSystem_CILauncherViewOptionsVtbl;

    interface __x_ABI_CWindows_CSystem_CILauncherViewOptions
    {
        CONST_VTBL struct __x_ABI_CWindows_CSystem_CILauncherViewOptionsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CSystem_CILauncherViewOptions;
#endif /* !defined(____x_ABI_CWindows_CSystem_CILauncherViewOptions_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CSystem_CIMemoryManagerStatics_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CSystem_CIMemoryManagerStatics_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CSystem_CIMemoryManagerStaticsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CSystem_CIMemoryManagerStatics* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CSystem_CIMemoryManagerStatics* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CSystem_CIMemoryManagerStatics* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CSystem_CIMemoryManagerStatics* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CSystem_CIMemoryManagerStatics* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CSystem_CIMemoryManagerStatics* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_AppMemoryUsage)(__x_ABI_CWindows_CSystem_CIMemoryManagerStatics* This,
        UINT64* value);
    HRESULT (STDMETHODCALLTYPE* get_AppMemoryUsageLimit)(__x_ABI_CWindows_CSystem_CIMemoryManagerStatics* This,
        UINT64* value);
    HRESULT (STDMETHODCALLTYPE* get_AppMemoryUsageLevel)(__x_ABI_CWindows_CSystem_CIMemoryManagerStatics* This,
        enum __x_ABI_CWindows_CSystem_CAppMemoryUsageLevel* value);
    HRESULT (STDMETHODCALLTYPE* add_AppMemoryUsageIncreased)(__x_ABI_CWindows_CSystem_CIMemoryManagerStatics* This,
        __x_ABI_C__FIEventHandler_1_IInspectable* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_AppMemoryUsageIncreased)(__x_ABI_CWindows_CSystem_CIMemoryManagerStatics* This,
        EventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* add_AppMemoryUsageDecreased)(__x_ABI_CWindows_CSystem_CIMemoryManagerStatics* This,
        __x_ABI_C__FIEventHandler_1_IInspectable* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_AppMemoryUsageDecreased)(__x_ABI_CWindows_CSystem_CIMemoryManagerStatics* This,
        EventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* add_AppMemoryUsageLimitChanging)(__x_ABI_CWindows_CSystem_CIMemoryManagerStatics* This,
        __x_ABI_C__FIEventHandler_1___x_ABI_CWindows__CSystem__CAppMemoryUsageLimitChangingEventArgs* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_AppMemoryUsageLimitChanging)(__x_ABI_CWindows_CSystem_CIMemoryManagerStatics* This,
        EventRegistrationToken token);

        END_INTERFACE
    } __x_ABI_CWindows_CSystem_CIMemoryManagerStaticsVtbl;

    interface __x_ABI_CWindows_CSystem_CIMemoryManagerStatics
    {
        CONST_VTBL struct __x_ABI_CWindows_CSystem_CIMemoryManagerStaticsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CSystem_CIMemoryManagerStatics;
#endif /* !defined(____x_ABI_CWindows_CSystem_CIMemoryManagerStatics_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CSystem_CIMemoryManagerStatics2_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CSystem_CIMemoryManagerStatics2_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CSystem_CIMemoryManagerStatics2Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CSystem_CIMemoryManagerStatics2* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CSystem_CIMemoryManagerStatics2* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CSystem_CIMemoryManagerStatics2* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CSystem_CIMemoryManagerStatics2* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CSystem_CIMemoryManagerStatics2* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CSystem_CIMemoryManagerStatics2* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAppMemoryReport)(__x_ABI_CWindows_CSystem_CIMemoryManagerStatics2* This,
        __x_ABI_CWindows_CSystem_CIAppMemoryReport** memoryReport);
    HRESULT (STDMETHODCALLTYPE* GetProcessMemoryReport)(__x_ABI_CWindows_CSystem_CIMemoryManagerStatics2* This,
        __x_ABI_CWindows_CSystem_CIProcessMemoryReport** memoryReport);

        END_INTERFACE
    } __x_ABI_CWindows_CSystem_CIMemoryManagerStatics2Vtbl;

    interface __x_ABI_CWindows_CSystem_CIMemoryManagerStatics2
    {
        CONST_VTBL struct __x_ABI_CWindows_CSystem_CIMemoryManagerStatics2Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CSystem_CIMemoryManagerStatics2;
#endif /* !defined(____x_ABI_CWindows_CSystem_CIMemoryManagerStatics2_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CSystem_CIMemoryManagerStatics3_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CSystem_CIMemoryManagerStatics3_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CSystem_CIMemoryManagerStatics3Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CSystem_CIMemoryManagerStatics3* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CSystem_CIMemoryManagerStatics3* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CSystem_CIMemoryManagerStatics3* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CSystem_CIMemoryManagerStatics3* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CSystem_CIMemoryManagerStatics3* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CSystem_CIMemoryManagerStatics3* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* TrySetAppMemoryUsageLimit)(__x_ABI_CWindows_CSystem_CIMemoryManagerStatics3* This,
        UINT64 value,
        boolean* result);

        END_INTERFACE
    } __x_ABI_CWindows_CSystem_CIMemoryManagerStatics3Vtbl;

    interface __x_ABI_CWindows_CSystem_CIMemoryManagerStatics3
    {
        CONST_VTBL struct __x_ABI_CWindows_CSystem_CIMemoryManagerStatics3Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CSystem_CIMemoryManagerStatics3;
#endif /* !defined(____x_ABI_CWindows_CSystem_CIMemoryManagerStatics3_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CSystem_CIMemoryManagerStatics4_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CSystem_CIMemoryManagerStatics4_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CSystem_CIMemoryManagerStatics4Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CSystem_CIMemoryManagerStatics4* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CSystem_CIMemoryManagerStatics4* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CSystem_CIMemoryManagerStatics4* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CSystem_CIMemoryManagerStatics4* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CSystem_CIMemoryManagerStatics4* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CSystem_CIMemoryManagerStatics4* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_ExpectedAppMemoryUsageLimit)(__x_ABI_CWindows_CSystem_CIMemoryManagerStatics4* This,
        UINT64* value);

        END_INTERFACE
    } __x_ABI_CWindows_CSystem_CIMemoryManagerStatics4Vtbl;

    interface __x_ABI_CWindows_CSystem_CIMemoryManagerStatics4
    {
        CONST_VTBL struct __x_ABI_CWindows_CSystem_CIMemoryManagerStatics4Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CSystem_CIMemoryManagerStatics4;
#endif /* !defined(____x_ABI_CWindows_CSystem_CIMemoryManagerStatics4_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CSystem_CIProcessLauncherOptions_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CSystem_CIProcessLauncherOptions_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CSystem_CIProcessLauncherOptionsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CSystem_CIProcessLauncherOptions* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CSystem_CIProcessLauncherOptions* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CSystem_CIProcessLauncherOptions* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CSystem_CIProcessLauncherOptions* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CSystem_CIProcessLauncherOptions* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CSystem_CIProcessLauncherOptions* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_StandardInput)(__x_ABI_CWindows_CSystem_CIProcessLauncherOptions* This,
        __x_ABI_CWindows_CStorage_CStreams_CIInputStream** value);
    HRESULT (STDMETHODCALLTYPE* put_StandardInput)(__x_ABI_CWindows_CSystem_CIProcessLauncherOptions* This,
        __x_ABI_CWindows_CStorage_CStreams_CIInputStream* value);
    HRESULT (STDMETHODCALLTYPE* get_StandardOutput)(__x_ABI_CWindows_CSystem_CIProcessLauncherOptions* This,
        __x_ABI_CWindows_CStorage_CStreams_CIOutputStream** value);
    HRESULT (STDMETHODCALLTYPE* put_StandardOutput)(__x_ABI_CWindows_CSystem_CIProcessLauncherOptions* This,
        __x_ABI_CWindows_CStorage_CStreams_CIOutputStream* value);
    HRESULT (STDMETHODCALLTYPE* get_StandardError)(__x_ABI_CWindows_CSystem_CIProcessLauncherOptions* This,
        __x_ABI_CWindows_CStorage_CStreams_CIOutputStream** value);
    HRESULT (STDMETHODCALLTYPE* put_StandardError)(__x_ABI_CWindows_CSystem_CIProcessLauncherOptions* This,
        __x_ABI_CWindows_CStorage_CStreams_CIOutputStream* value);
    HRESULT (STDMETHODCALLTYPE* get_WorkingDirectory)(__x_ABI_CWindows_CSystem_CIProcessLauncherOptions* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* put_WorkingDirectory)(__x_ABI_CWindows_CSystem_CIProcessLauncherOptions* This,
        HSTRING value);

        END_INTERFACE
    } __x_ABI_CWindows_CSystem_CIProcessLauncherOptionsVtbl;

    interface __x_ABI_CWindows_CSystem_CIProcessLauncherOptions
    {
        CONST_VTBL struct __x_ABI_CWindows_CSystem_CIProcessLauncherOptionsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CSystem_CIProcessLauncherOptions;
#endif /* !defined(____x_ABI_CWindows_CSystem_CIProcessLauncherOptions_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CSystem_CIProcessLauncherResult_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CSystem_CIProcessLauncherResult_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CSystem_CIProcessLauncherResultVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CSystem_CIProcessLauncherResult* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CSystem_CIProcessLauncherResult* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CSystem_CIProcessLauncherResult* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CSystem_CIProcessLauncherResult* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CSystem_CIProcessLauncherResult* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CSystem_CIProcessLauncherResult* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_ExitCode)(__x_ABI_CWindows_CSystem_CIProcessLauncherResult* This,
        UINT32* value);

        END_INTERFACE
    } __x_ABI_CWindows_CSystem_CIProcessLauncherResultVtbl;

    interface __x_ABI_CWindows_CSystem_CIProcessLauncherResult
    {
        CONST_VTBL struct __x_ABI_CWindows_CSystem_CIProcessLauncherResultVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CSystem_CIProcessLauncherResult;
#endif /* !defined(____x_ABI_CWindows_CSystem_CIProcessLauncherResult_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CSystem_CIProcessLauncherStatics_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CSystem_CIProcessLauncherStatics_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CSystem_CIProcessLauncherStaticsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CSystem_CIProcessLauncherStatics* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CSystem_CIProcessLauncherStatics* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CSystem_CIProcessLauncherStatics* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CSystem_CIProcessLauncherStatics* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CSystem_CIProcessLauncherStatics* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CSystem_CIProcessLauncherStatics* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* RunToCompletionAsync)(__x_ABI_CWindows_CSystem_CIProcessLauncherStatics* This,
        HSTRING fileName,
        HSTRING args,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CProcessLauncherResult** asyncOperationResult);
    HRESULT (STDMETHODCALLTYPE* RunToCompletionAsyncWithOptions)(__x_ABI_CWindows_CSystem_CIProcessLauncherStatics* This,
        HSTRING fileName,
        HSTRING args,
        __x_ABI_CWindows_CSystem_CIProcessLauncherOptions* options,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CProcessLauncherResult** asyncOperationResult);

        END_INTERFACE
    } __x_ABI_CWindows_CSystem_CIProcessLauncherStaticsVtbl;

    interface __x_ABI_CWindows_CSystem_CIProcessLauncherStatics
    {
        CONST_VTBL struct __x_ABI_CWindows_CSystem_CIProcessLauncherStaticsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CSystem_CIProcessLauncherStatics;
#endif /* !defined(____x_ABI_CWindows_CSystem_CIProcessLauncherStatics_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CSystem_CIProcessMemoryReport_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CSystem_CIProcessMemoryReport_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CSystem_CIProcessMemoryReportVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CSystem_CIProcessMemoryReport* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CSystem_CIProcessMemoryReport* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CSystem_CIProcessMemoryReport* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CSystem_CIProcessMemoryReport* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CSystem_CIProcessMemoryReport* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CSystem_CIProcessMemoryReport* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_PrivateWorkingSetUsage)(__x_ABI_CWindows_CSystem_CIProcessMemoryReport* This,
        UINT64* value);
    HRESULT (STDMETHODCALLTYPE* get_TotalWorkingSetUsage)(__x_ABI_CWindows_CSystem_CIProcessMemoryReport* This,
        UINT64* value);

        END_INTERFACE
    } __x_ABI_CWindows_CSystem_CIProcessMemoryReportVtbl;

    interface __x_ABI_CWindows_CSystem_CIProcessMemoryReport
    {
        CONST_VTBL struct __x_ABI_CWindows_CSystem_CIProcessMemoryReportVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CSystem_CIProcessMemoryReport;
#endif /* !defined(____x_ABI_CWindows_CSystem_CIProcessMemoryReport_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CSystem_CIProtocolForResultsOperation_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CSystem_CIProtocolForResultsOperation_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CSystem_CIProtocolForResultsOperationVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CSystem_CIProtocolForResultsOperation* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CSystem_CIProtocolForResultsOperation* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CSystem_CIProtocolForResultsOperation* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CSystem_CIProtocolForResultsOperation* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CSystem_CIProtocolForResultsOperation* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CSystem_CIProtocolForResultsOperation* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* ReportCompleted)(__x_ABI_CWindows_CSystem_CIProtocolForResultsOperation* This,
        __x_ABI_CWindows_CFoundation_CCollections_CIPropertySet* data);

        END_INTERFACE
    } __x_ABI_CWindows_CSystem_CIProtocolForResultsOperationVtbl;

    interface __x_ABI_CWindows_CSystem_CIProtocolForResultsOperation
    {
        CONST_VTBL struct __x_ABI_CWindows_CSystem_CIProtocolForResultsOperationVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CSystem_CIProtocolForResultsOperation;
#endif /* !defined(____x_ABI_CWindows_CSystem_CIProtocolForResultsOperation_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CSystem_CIRemoteLauncherOptions_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CSystem_CIRemoteLauncherOptions_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CSystem_CIRemoteLauncherOptionsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CSystem_CIRemoteLauncherOptions* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CSystem_CIRemoteLauncherOptions* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CSystem_CIRemoteLauncherOptions* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CSystem_CIRemoteLauncherOptions* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CSystem_CIRemoteLauncherOptions* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CSystem_CIRemoteLauncherOptions* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_FallbackUri)(__x_ABI_CWindows_CSystem_CIRemoteLauncherOptions* This,
        __x_ABI_CWindows_CFoundation_CIUriRuntimeClass** value);
    HRESULT (STDMETHODCALLTYPE* put_FallbackUri)(__x_ABI_CWindows_CSystem_CIRemoteLauncherOptions* This,
        __x_ABI_CWindows_CFoundation_CIUriRuntimeClass* value);
    HRESULT (STDMETHODCALLTYPE* get_PreferredAppIds)(__x_ABI_CWindows_CSystem_CIRemoteLauncherOptions* This,
        __x_ABI_C__FIVector_1_HSTRING** value);

        END_INTERFACE
    } __x_ABI_CWindows_CSystem_CIRemoteLauncherOptionsVtbl;

    interface __x_ABI_CWindows_CSystem_CIRemoteLauncherOptions
    {
        CONST_VTBL struct __x_ABI_CWindows_CSystem_CIRemoteLauncherOptionsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CSystem_CIRemoteLauncherOptions;
#endif /* !defined(____x_ABI_CWindows_CSystem_CIRemoteLauncherOptions_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CSystem_CIRemoteLauncherStatics_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CSystem_CIRemoteLauncherStatics_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CSystem_CIRemoteLauncherStaticsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CSystem_CIRemoteLauncherStatics* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CSystem_CIRemoteLauncherStatics* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CSystem_CIRemoteLauncherStatics* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CSystem_CIRemoteLauncherStatics* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CSystem_CIRemoteLauncherStatics* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CSystem_CIRemoteLauncherStatics* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* LaunchUriAsync)(__x_ABI_CWindows_CSystem_CIRemoteLauncherStatics* This,
        __x_ABI_CWindows_CSystem_CRemoteSystems_CIRemoteSystemConnectionRequest* remoteSystemConnectionRequest,
        __x_ABI_CWindows_CFoundation_CIUriRuntimeClass* uri,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CRemoteLaunchUriStatus** operation);
    HRESULT (STDMETHODCALLTYPE* LaunchUriWithOptionsAsync)(__x_ABI_CWindows_CSystem_CIRemoteLauncherStatics* This,
        __x_ABI_CWindows_CSystem_CRemoteSystems_CIRemoteSystemConnectionRequest* remoteSystemConnectionRequest,
        __x_ABI_CWindows_CFoundation_CIUriRuntimeClass* uri,
        __x_ABI_CWindows_CSystem_CIRemoteLauncherOptions* options,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CRemoteLaunchUriStatus** operation);
    HRESULT (STDMETHODCALLTYPE* LaunchUriWithDataAsync)(__x_ABI_CWindows_CSystem_CIRemoteLauncherStatics* This,
        __x_ABI_CWindows_CSystem_CRemoteSystems_CIRemoteSystemConnectionRequest* remoteSystemConnectionRequest,
        __x_ABI_CWindows_CFoundation_CIUriRuntimeClass* uri,
        __x_ABI_CWindows_CSystem_CIRemoteLauncherOptions* options,
        __x_ABI_CWindows_CFoundation_CCollections_CIPropertySet* inputData,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CRemoteLaunchUriStatus** operation);

        END_INTERFACE
    } __x_ABI_CWindows_CSystem_CIRemoteLauncherStaticsVtbl;

    interface __x_ABI_CWindows_CSystem_CIRemoteLauncherStatics
    {
        CONST_VTBL struct __x_ABI_CWindows_CSystem_CIRemoteLauncherStaticsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CSystem_CIRemoteLauncherStatics;
#endif /* !defined(____x_ABI_CWindows_CSystem_CIRemoteLauncherStatics_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CSystem_CIShutdownManagerStatics_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CSystem_CIShutdownManagerStatics_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CSystem_CIShutdownManagerStaticsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CSystem_CIShutdownManagerStatics* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CSystem_CIShutdownManagerStatics* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CSystem_CIShutdownManagerStatics* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CSystem_CIShutdownManagerStatics* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CSystem_CIShutdownManagerStatics* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CSystem_CIShutdownManagerStatics* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* BeginShutdown)(__x_ABI_CWindows_CSystem_CIShutdownManagerStatics* This,
        enum __x_ABI_CWindows_CSystem_CShutdownKind shutdownKind,
        struct __x_ABI_CWindows_CFoundation_CTimeSpan timeout);
    HRESULT (STDMETHODCALLTYPE* CancelShutdown)(__x_ABI_CWindows_CSystem_CIShutdownManagerStatics* This);

        END_INTERFACE
    } __x_ABI_CWindows_CSystem_CIShutdownManagerStaticsVtbl;

    interface __x_ABI_CWindows_CSystem_CIShutdownManagerStatics
    {
        CONST_VTBL struct __x_ABI_CWindows_CSystem_CIShutdownManagerStaticsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CSystem_CIShutdownManagerStatics;
#endif /* !defined(____x_ABI_CWindows_CSystem_CIShutdownManagerStatics_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CSystem_CIShutdownManagerStatics2_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CSystem_CIShutdownManagerStatics2_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CSystem_CIShutdownManagerStatics2Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CSystem_CIShutdownManagerStatics2* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CSystem_CIShutdownManagerStatics2* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CSystem_CIShutdownManagerStatics2* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CSystem_CIShutdownManagerStatics2* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CSystem_CIShutdownManagerStatics2* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CSystem_CIShutdownManagerStatics2* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* IsPowerStateSupported)(__x_ABI_CWindows_CSystem_CIShutdownManagerStatics2* This,
        enum __x_ABI_CWindows_CSystem_CPowerState powerState,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* EnterPowerState)(__x_ABI_CWindows_CSystem_CIShutdownManagerStatics2* This,
        enum __x_ABI_CWindows_CSystem_CPowerState powerState);
    HRESULT (STDMETHODCALLTYPE* EnterPowerStateWithTimeSpan)(__x_ABI_CWindows_CSystem_CIShutdownManagerStatics2* This,
        enum __x_ABI_CWindows_CSystem_CPowerState powerState,
        struct __x_ABI_CWindows_CFoundation_CTimeSpan wakeUpAfter);

        END_INTERFACE
    } __x_ABI_CWindows_CSystem_CIShutdownManagerStatics2Vtbl;

    interface __x_ABI_CWindows_CSystem_CIShutdownManagerStatics2
    {
        CONST_VTBL struct __x_ABI_CWindows_CSystem_CIShutdownManagerStatics2Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CSystem_CIShutdownManagerStatics2;
#endif /* !defined(____x_ABI_CWindows_CSystem_CIShutdownManagerStatics2_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CSystem_CITimeZoneSettingsStatics_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CSystem_CITimeZoneSettingsStatics_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CSystem_CITimeZoneSettingsStaticsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CSystem_CITimeZoneSettingsStatics* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CSystem_CITimeZoneSettingsStatics* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CSystem_CITimeZoneSettingsStatics* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CSystem_CITimeZoneSettingsStatics* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CSystem_CITimeZoneSettingsStatics* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CSystem_CITimeZoneSettingsStatics* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_CurrentTimeZoneDisplayName)(__x_ABI_CWindows_CSystem_CITimeZoneSettingsStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_SupportedTimeZoneDisplayNames)(__x_ABI_CWindows_CSystem_CITimeZoneSettingsStatics* This,
        __x_ABI_C__FIVectorView_1_HSTRING** value);
    HRESULT (STDMETHODCALLTYPE* get_CanChangeTimeZone)(__x_ABI_CWindows_CSystem_CITimeZoneSettingsStatics* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* ChangeTimeZoneByDisplayName)(__x_ABI_CWindows_CSystem_CITimeZoneSettingsStatics* This,
        HSTRING timeZoneDisplayName);

        END_INTERFACE
    } __x_ABI_CWindows_CSystem_CITimeZoneSettingsStaticsVtbl;

    interface __x_ABI_CWindows_CSystem_CITimeZoneSettingsStatics
    {
        CONST_VTBL struct __x_ABI_CWindows_CSystem_CITimeZoneSettingsStaticsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CSystem_CITimeZoneSettingsStatics;
#endif /* !defined(____x_ABI_CWindows_CSystem_CITimeZoneSettingsStatics_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CSystem_CITimeZoneSettingsStatics2_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CSystem_CITimeZoneSettingsStatics2_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CSystem_CITimeZoneSettingsStatics2Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CSystem_CITimeZoneSettingsStatics2* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CSystem_CITimeZoneSettingsStatics2* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CSystem_CITimeZoneSettingsStatics2* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CSystem_CITimeZoneSettingsStatics2* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CSystem_CITimeZoneSettingsStatics2* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CSystem_CITimeZoneSettingsStatics2* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* AutoUpdateTimeZoneAsync)(__x_ABI_CWindows_CSystem_CITimeZoneSettingsStatics2* This,
        struct __x_ABI_CWindows_CFoundation_CTimeSpan timeout,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CAutoUpdateTimeZoneStatus** operation);

        END_INTERFACE
    } __x_ABI_CWindows_CSystem_CITimeZoneSettingsStatics2Vtbl;

    interface __x_ABI_CWindows_CSystem_CITimeZoneSettingsStatics2
    {
        CONST_VTBL struct __x_ABI_CWindows_CSystem_CITimeZoneSettingsStatics2Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CSystem_CITimeZoneSettingsStatics2;
#endif /* !defined(____x_ABI_CWindows_CSystem_CITimeZoneSettingsStatics2_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CSystem_CIUser_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CSystem_CIUser_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CSystem_CIUserVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CSystem_CIUser* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CSystem_CIUser* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CSystem_CIUser* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CSystem_CIUser* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CSystem_CIUser* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CSystem_CIUser* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_NonRoamableId)(__x_ABI_CWindows_CSystem_CIUser* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_AuthenticationStatus)(__x_ABI_CWindows_CSystem_CIUser* This,
        enum __x_ABI_CWindows_CSystem_CUserAuthenticationStatus* value);
    HRESULT (STDMETHODCALLTYPE* get_Type)(__x_ABI_CWindows_CSystem_CIUser* This,
        enum __x_ABI_CWindows_CSystem_CUserType* value);
    HRESULT (STDMETHODCALLTYPE* GetPropertyAsync)(__x_ABI_CWindows_CSystem_CIUser* This,
        HSTRING value,
        __x_ABI_C__FIAsyncOperation_1_IInspectable** operation);
    HRESULT (STDMETHODCALLTYPE* GetPropertiesAsync)(__x_ABI_CWindows_CSystem_CIUser* This,
        __x_ABI_C__FIVectorView_1_HSTRING* values,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_C__F__CIPropertySet** operation);
    HRESULT (STDMETHODCALLTYPE* GetPictureAsync)(__x_ABI_CWindows_CSystem_CIUser* This,
        enum __x_ABI_CWindows_CSystem_CUserPictureSize desiredSize,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStreams__CIRandomAccessStreamReference** operation);

        END_INTERFACE
    } __x_ABI_CWindows_CSystem_CIUserVtbl;

    interface __x_ABI_CWindows_CSystem_CIUser
    {
        CONST_VTBL struct __x_ABI_CWindows_CSystem_CIUserVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CSystem_CIUser;
#endif /* !defined(____x_ABI_CWindows_CSystem_CIUser_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CSystem_CIUserAuthenticationStatusChangeDeferral_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CSystem_CIUserAuthenticationStatusChangeDeferral_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CSystem_CIUserAuthenticationStatusChangeDeferralVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CSystem_CIUserAuthenticationStatusChangeDeferral* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CSystem_CIUserAuthenticationStatusChangeDeferral* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CSystem_CIUserAuthenticationStatusChangeDeferral* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CSystem_CIUserAuthenticationStatusChangeDeferral* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CSystem_CIUserAuthenticationStatusChangeDeferral* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CSystem_CIUserAuthenticationStatusChangeDeferral* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* Complete)(__x_ABI_CWindows_CSystem_CIUserAuthenticationStatusChangeDeferral* This);

        END_INTERFACE
    } __x_ABI_CWindows_CSystem_CIUserAuthenticationStatusChangeDeferralVtbl;

    interface __x_ABI_CWindows_CSystem_CIUserAuthenticationStatusChangeDeferral
    {
        CONST_VTBL struct __x_ABI_CWindows_CSystem_CIUserAuthenticationStatusChangeDeferralVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CSystem_CIUserAuthenticationStatusChangeDeferral;
#endif /* !defined(____x_ABI_CWindows_CSystem_CIUserAuthenticationStatusChangeDeferral_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CSystem_CIUserAuthenticationStatusChangingEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CSystem_CIUserAuthenticationStatusChangingEventArgs_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CSystem_CIUserAuthenticationStatusChangingEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CSystem_CIUserAuthenticationStatusChangingEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CSystem_CIUserAuthenticationStatusChangingEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CSystem_CIUserAuthenticationStatusChangingEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CSystem_CIUserAuthenticationStatusChangingEventArgs* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CSystem_CIUserAuthenticationStatusChangingEventArgs* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CSystem_CIUserAuthenticationStatusChangingEventArgs* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetDeferral)(__x_ABI_CWindows_CSystem_CIUserAuthenticationStatusChangingEventArgs* This,
        __x_ABI_CWindows_CSystem_CIUserAuthenticationStatusChangeDeferral** result);
    HRESULT (STDMETHODCALLTYPE* get_User)(__x_ABI_CWindows_CSystem_CIUserAuthenticationStatusChangingEventArgs* This,
        __x_ABI_CWindows_CSystem_CIUser** value);
    HRESULT (STDMETHODCALLTYPE* get_NewStatus)(__x_ABI_CWindows_CSystem_CIUserAuthenticationStatusChangingEventArgs* This,
        enum __x_ABI_CWindows_CSystem_CUserAuthenticationStatus* value);
    HRESULT (STDMETHODCALLTYPE* get_CurrentStatus)(__x_ABI_CWindows_CSystem_CIUserAuthenticationStatusChangingEventArgs* This,
        enum __x_ABI_CWindows_CSystem_CUserAuthenticationStatus* value);

        END_INTERFACE
    } __x_ABI_CWindows_CSystem_CIUserAuthenticationStatusChangingEventArgsVtbl;

    interface __x_ABI_CWindows_CSystem_CIUserAuthenticationStatusChangingEventArgs
    {
        CONST_VTBL struct __x_ABI_CWindows_CSystem_CIUserAuthenticationStatusChangingEventArgsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CSystem_CIUserAuthenticationStatusChangingEventArgs;
#endif /* !defined(____x_ABI_CWindows_CSystem_CIUserAuthenticationStatusChangingEventArgs_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CSystem_CIUserChangedEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CSystem_CIUserChangedEventArgs_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CSystem_CIUserChangedEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CSystem_CIUserChangedEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CSystem_CIUserChangedEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CSystem_CIUserChangedEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CSystem_CIUserChangedEventArgs* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CSystem_CIUserChangedEventArgs* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CSystem_CIUserChangedEventArgs* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_User)(__x_ABI_CWindows_CSystem_CIUserChangedEventArgs* This,
        __x_ABI_CWindows_CSystem_CIUser** value);

        END_INTERFACE
    } __x_ABI_CWindows_CSystem_CIUserChangedEventArgsVtbl;

    interface __x_ABI_CWindows_CSystem_CIUserChangedEventArgs
    {
        CONST_VTBL struct __x_ABI_CWindows_CSystem_CIUserChangedEventArgsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CSystem_CIUserChangedEventArgs;
#endif /* !defined(____x_ABI_CWindows_CSystem_CIUserChangedEventArgs_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CSystem_CIUserDeviceAssociationChangedEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CSystem_CIUserDeviceAssociationChangedEventArgs_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CSystem_CIUserDeviceAssociationChangedEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CSystem_CIUserDeviceAssociationChangedEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CSystem_CIUserDeviceAssociationChangedEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CSystem_CIUserDeviceAssociationChangedEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CSystem_CIUserDeviceAssociationChangedEventArgs* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CSystem_CIUserDeviceAssociationChangedEventArgs* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CSystem_CIUserDeviceAssociationChangedEventArgs* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_DeviceId)(__x_ABI_CWindows_CSystem_CIUserDeviceAssociationChangedEventArgs* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_NewUser)(__x_ABI_CWindows_CSystem_CIUserDeviceAssociationChangedEventArgs* This,
        __x_ABI_CWindows_CSystem_CIUser** value);
    HRESULT (STDMETHODCALLTYPE* get_OldUser)(__x_ABI_CWindows_CSystem_CIUserDeviceAssociationChangedEventArgs* This,
        __x_ABI_CWindows_CSystem_CIUser** value);

        END_INTERFACE
    } __x_ABI_CWindows_CSystem_CIUserDeviceAssociationChangedEventArgsVtbl;

    interface __x_ABI_CWindows_CSystem_CIUserDeviceAssociationChangedEventArgs
    {
        CONST_VTBL struct __x_ABI_CWindows_CSystem_CIUserDeviceAssociationChangedEventArgsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CSystem_CIUserDeviceAssociationChangedEventArgs;
#endif /* !defined(____x_ABI_CWindows_CSystem_CIUserDeviceAssociationChangedEventArgs_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CSystem_CIUserDeviceAssociationStatics_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CSystem_CIUserDeviceAssociationStatics_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CSystem_CIUserDeviceAssociationStaticsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CSystem_CIUserDeviceAssociationStatics* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CSystem_CIUserDeviceAssociationStatics* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CSystem_CIUserDeviceAssociationStatics* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CSystem_CIUserDeviceAssociationStatics* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CSystem_CIUserDeviceAssociationStatics* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CSystem_CIUserDeviceAssociationStatics* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* FindUserFromDeviceId)(__x_ABI_CWindows_CSystem_CIUserDeviceAssociationStatics* This,
        HSTRING deviceId,
        __x_ABI_CWindows_CSystem_CIUser** user);
    HRESULT (STDMETHODCALLTYPE* add_UserDeviceAssociationChanged)(__x_ABI_CWindows_CSystem_CIUserDeviceAssociationStatics* This,
        __x_ABI_C__FIEventHandler_1___x_ABI_CWindows__CSystem__CUserDeviceAssociationChangedEventArgs* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_UserDeviceAssociationChanged)(__x_ABI_CWindows_CSystem_CIUserDeviceAssociationStatics* This,
        EventRegistrationToken token);

        END_INTERFACE
    } __x_ABI_CWindows_CSystem_CIUserDeviceAssociationStaticsVtbl;

    interface __x_ABI_CWindows_CSystem_CIUserDeviceAssociationStatics
    {
        CONST_VTBL struct __x_ABI_CWindows_CSystem_CIUserDeviceAssociationStaticsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CSystem_CIUserDeviceAssociationStatics;
#endif /* !defined(____x_ABI_CWindows_CSystem_CIUserDeviceAssociationStatics_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CSystem_CIUserPicker_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CSystem_CIUserPicker_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CSystem_CIUserPickerVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CSystem_CIUserPicker* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CSystem_CIUserPicker* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CSystem_CIUserPicker* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CSystem_CIUserPicker* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CSystem_CIUserPicker* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CSystem_CIUserPicker* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_AllowGuestAccounts)(__x_ABI_CWindows_CSystem_CIUserPicker* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* put_AllowGuestAccounts)(__x_ABI_CWindows_CSystem_CIUserPicker* This,
        boolean value);
    HRESULT (STDMETHODCALLTYPE* get_SuggestedSelectedUser)(__x_ABI_CWindows_CSystem_CIUserPicker* This,
        __x_ABI_CWindows_CSystem_CIUser** value);
    HRESULT (STDMETHODCALLTYPE* put_SuggestedSelectedUser)(__x_ABI_CWindows_CSystem_CIUserPicker* This,
        __x_ABI_CWindows_CSystem_CIUser* value);
    HRESULT (STDMETHODCALLTYPE* PickSingleUserAsync)(__x_ABI_CWindows_CSystem_CIUserPicker* This,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CUser** operation);

        END_INTERFACE
    } __x_ABI_CWindows_CSystem_CIUserPickerVtbl;

    interface __x_ABI_CWindows_CSystem_CIUserPicker
    {
        CONST_VTBL struct __x_ABI_CWindows_CSystem_CIUserPickerVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CSystem_CIUserPicker;
#endif /* !defined(____x_ABI_CWindows_CSystem_CIUserPicker_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CSystem_CIUserPickerStatics_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CSystem_CIUserPickerStatics_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CSystem_CIUserPickerStaticsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CSystem_CIUserPickerStatics* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CSystem_CIUserPickerStatics* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CSystem_CIUserPickerStatics* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CSystem_CIUserPickerStatics* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CSystem_CIUserPickerStatics* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CSystem_CIUserPickerStatics* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* IsSupported)(__x_ABI_CWindows_CSystem_CIUserPickerStatics* This,
        boolean* result);

        END_INTERFACE
    } __x_ABI_CWindows_CSystem_CIUserPickerStaticsVtbl;

    interface __x_ABI_CWindows_CSystem_CIUserPickerStatics
    {
        CONST_VTBL struct __x_ABI_CWindows_CSystem_CIUserPickerStaticsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CSystem_CIUserPickerStatics;
#endif /* !defined(____x_ABI_CWindows_CSystem_CIUserPickerStatics_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CSystem_CIUserStatics_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CSystem_CIUserStatics_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CSystem_CIUserStaticsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CSystem_CIUserStatics* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CSystem_CIUserStatics* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CSystem_CIUserStatics* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CSystem_CIUserStatics* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CSystem_CIUserStatics* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CSystem_CIUserStatics* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* CreateWatcher)(__x_ABI_CWindows_CSystem_CIUserStatics* This,
        __x_ABI_CWindows_CSystem_CIUserWatcher** result);
    HRESULT (STDMETHODCALLTYPE* FindAllAsync)(__x_ABI_CWindows_CSystem_CIUserStatics* This,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CUser** operation);
    HRESULT (STDMETHODCALLTYPE* FindAllAsyncByType)(__x_ABI_CWindows_CSystem_CIUserStatics* This,
        enum __x_ABI_CWindows_CSystem_CUserType type,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CUser** operation);
    HRESULT (STDMETHODCALLTYPE* FindAllAsyncByTypeAndStatus)(__x_ABI_CWindows_CSystem_CIUserStatics* This,
        enum __x_ABI_CWindows_CSystem_CUserType type,
        enum __x_ABI_CWindows_CSystem_CUserAuthenticationStatus status,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CUser** operation);
    HRESULT (STDMETHODCALLTYPE* GetFromId)(__x_ABI_CWindows_CSystem_CIUserStatics* This,
        HSTRING nonRoamableId,
        __x_ABI_CWindows_CSystem_CIUser** result);

        END_INTERFACE
    } __x_ABI_CWindows_CSystem_CIUserStaticsVtbl;

    interface __x_ABI_CWindows_CSystem_CIUserStatics
    {
        CONST_VTBL struct __x_ABI_CWindows_CSystem_CIUserStaticsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CSystem_CIUserStatics;
#endif /* !defined(____x_ABI_CWindows_CSystem_CIUserStatics_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CSystem_CIUserWatcher_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CSystem_CIUserWatcher_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CSystem_CIUserWatcherVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CSystem_CIUserWatcher* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CSystem_CIUserWatcher* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CSystem_CIUserWatcher* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CSystem_CIUserWatcher* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CSystem_CIUserWatcher* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CSystem_CIUserWatcher* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Status)(__x_ABI_CWindows_CSystem_CIUserWatcher* This,
        enum __x_ABI_CWindows_CSystem_CUserWatcherStatus* value);
    HRESULT (STDMETHODCALLTYPE* Start)(__x_ABI_CWindows_CSystem_CIUserWatcher* This);
    HRESULT (STDMETHODCALLTYPE* Stop)(__x_ABI_CWindows_CSystem_CIUserWatcher* This);
    HRESULT (STDMETHODCALLTYPE* add_Added)(__x_ABI_CWindows_CSystem_CIUserWatcher* This,
        __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CUserWatcher___x_ABI_CWindows__CSystem__CUserChangedEventArgs* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_Added)(__x_ABI_CWindows_CSystem_CIUserWatcher* This,
        EventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* add_Removed)(__x_ABI_CWindows_CSystem_CIUserWatcher* This,
        __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CUserWatcher___x_ABI_CWindows__CSystem__CUserChangedEventArgs* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_Removed)(__x_ABI_CWindows_CSystem_CIUserWatcher* This,
        EventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* add_Updated)(__x_ABI_CWindows_CSystem_CIUserWatcher* This,
        __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CUserWatcher___x_ABI_CWindows__CSystem__CUserChangedEventArgs* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_Updated)(__x_ABI_CWindows_CSystem_CIUserWatcher* This,
        EventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* add_AuthenticationStatusChanged)(__x_ABI_CWindows_CSystem_CIUserWatcher* This,
        __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CUserWatcher___x_ABI_CWindows__CSystem__CUserChangedEventArgs* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_AuthenticationStatusChanged)(__x_ABI_CWindows_CSystem_CIUserWatcher* This,
        EventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* add_AuthenticationStatusChanging)(__x_ABI_CWindows_CSystem_CIUserWatcher* This,
        __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CUserWatcher___x_ABI_CWindows__CSystem__CUserAuthenticationStatusChangingEventArgs* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_AuthenticationStatusChanging)(__x_ABI_CWindows_CSystem_CIUserWatcher* This,
        EventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* add_EnumerationCompleted)(__x_ABI_CWindows_CSystem_CIUserWatcher* This,
        __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CUserWatcher_IInspectable* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_EnumerationCompleted)(__x_ABI_CWindows_CSystem_CIUserWatcher* This,
        EventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* add_Stopped)(__x_ABI_CWindows_CSystem_CIUserWatcher* This,
        __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CUserWatcher_IInspectable* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_Stopped)(__x_ABI_CWindows_CSystem_CIUserWatcher* This,
        EventRegistrationToken token);

        END_INTERFACE
    } __x_ABI_CWindows_CSystem_CIUserWatcherVtbl;

    interface __x_ABI_CWindows_CSystem_CIUserWatcher
    {
        CONST_VTBL struct __x_ABI_CWindows_CSystem_CIUserWatcherVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CSystem_CIUserWatcher;
#endif /* !defined(____x_ABI_CWindows_CSystem_CIUserWatcher_INTERFACE_DEFINED__) */
    

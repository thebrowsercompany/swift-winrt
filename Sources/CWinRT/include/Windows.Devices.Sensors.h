// WARNING: Please don't edit this file. It was generated by Swift/WinRT v0.0.1

#pragma once
// Header files for imported files
#include <inspectable.h>
#include <EventToken.h>
#include <windowscontracts.h>
#include "Windows.Foundation.h"
#include "Windows.Graphics.Display.h"
// Importing Collections header
#include "Windows.Foundation.Collections.h"

/* Forward Declarations */
#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIAccelerometer_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIAccelerometer_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CDevices_CSensors_CIAccelerometer __x_ABI_CWindows_CDevices_CSensors_CIAccelerometer;

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIAccelerometer_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIAccelerometer2_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIAccelerometer2_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CDevices_CSensors_CIAccelerometer2 __x_ABI_CWindows_CDevices_CSensors_CIAccelerometer2;

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIAccelerometer2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIAccelerometer3_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIAccelerometer3_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CDevices_CSensors_CIAccelerometer3 __x_ABI_CWindows_CDevices_CSensors_CIAccelerometer3;

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIAccelerometer3_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIAccelerometer4_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIAccelerometer4_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CDevices_CSensors_CIAccelerometer4 __x_ABI_CWindows_CDevices_CSensors_CIAccelerometer4;

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIAccelerometer4_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIAccelerometerDeviceId_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIAccelerometerDeviceId_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerDeviceId __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerDeviceId;

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIAccelerometerDeviceId_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIAccelerometerReading_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIAccelerometerReading_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerReading __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerReading;

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIAccelerometerReading_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIAccelerometerReading2_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIAccelerometerReading2_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerReading2 __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerReading2;

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIAccelerometerReading2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIAccelerometerReadingChangedEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIAccelerometerReadingChangedEventArgs_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerReadingChangedEventArgs __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerReadingChangedEventArgs;

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIAccelerometerReadingChangedEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIAccelerometerShakenEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIAccelerometerShakenEventArgs_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerShakenEventArgs __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerShakenEventArgs;

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIAccelerometerShakenEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIAccelerometerStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIAccelerometerStatics_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerStatics __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerStatics;

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIAccelerometerStatics_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIAccelerometerStatics2_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIAccelerometerStatics2_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerStatics2 __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerStatics2;

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIAccelerometerStatics2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIAccelerometerStatics3_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIAccelerometerStatics3_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerStatics3 __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerStatics3;

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIAccelerometerStatics3_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIActivitySensor_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIActivitySensor_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CDevices_CSensors_CIActivitySensor __x_ABI_CWindows_CDevices_CSensors_CIActivitySensor;

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIActivitySensor_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReading_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReading_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReading __x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReading;

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReading_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReadingChangeReport_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReadingChangeReport_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReadingChangeReport __x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReadingChangeReport;

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReadingChangeReport_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReadingChangedEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReadingChangedEventArgs_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReadingChangedEventArgs __x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReadingChangedEventArgs;

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReadingChangedEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIActivitySensorStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIActivitySensorStatics_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CDevices_CSensors_CIActivitySensorStatics __x_ABI_CWindows_CDevices_CSensors_CIActivitySensorStatics;

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIActivitySensorStatics_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIActivitySensorTriggerDetails_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIActivitySensorTriggerDetails_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CDevices_CSensors_CIActivitySensorTriggerDetails __x_ABI_CWindows_CDevices_CSensors_CIActivitySensorTriggerDetails;

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIActivitySensorTriggerDetails_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIAltimeter_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIAltimeter_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CDevices_CSensors_CIAltimeter __x_ABI_CWindows_CDevices_CSensors_CIAltimeter;

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIAltimeter_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIAltimeter2_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIAltimeter2_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CDevices_CSensors_CIAltimeter2 __x_ABI_CWindows_CDevices_CSensors_CIAltimeter2;

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIAltimeter2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIAltimeterReading_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIAltimeterReading_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CDevices_CSensors_CIAltimeterReading __x_ABI_CWindows_CDevices_CSensors_CIAltimeterReading;

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIAltimeterReading_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIAltimeterReading2_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIAltimeterReading2_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CDevices_CSensors_CIAltimeterReading2 __x_ABI_CWindows_CDevices_CSensors_CIAltimeterReading2;

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIAltimeterReading2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIAltimeterReadingChangedEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIAltimeterReadingChangedEventArgs_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CDevices_CSensors_CIAltimeterReadingChangedEventArgs __x_ABI_CWindows_CDevices_CSensors_CIAltimeterReadingChangedEventArgs;

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIAltimeterReadingChangedEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIAltimeterStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIAltimeterStatics_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CDevices_CSensors_CIAltimeterStatics __x_ABI_CWindows_CDevices_CSensors_CIAltimeterStatics;

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIAltimeterStatics_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIBarometer_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIBarometer_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CDevices_CSensors_CIBarometer __x_ABI_CWindows_CDevices_CSensors_CIBarometer;

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIBarometer_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIBarometer2_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIBarometer2_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CDevices_CSensors_CIBarometer2 __x_ABI_CWindows_CDevices_CSensors_CIBarometer2;

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIBarometer2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIBarometerReading_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIBarometerReading_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CDevices_CSensors_CIBarometerReading __x_ABI_CWindows_CDevices_CSensors_CIBarometerReading;

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIBarometerReading_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIBarometerReading2_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIBarometerReading2_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CDevices_CSensors_CIBarometerReading2 __x_ABI_CWindows_CDevices_CSensors_CIBarometerReading2;

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIBarometerReading2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIBarometerReadingChangedEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIBarometerReadingChangedEventArgs_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CDevices_CSensors_CIBarometerReadingChangedEventArgs __x_ABI_CWindows_CDevices_CSensors_CIBarometerReadingChangedEventArgs;

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIBarometerReadingChangedEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIBarometerStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIBarometerStatics_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CDevices_CSensors_CIBarometerStatics __x_ABI_CWindows_CDevices_CSensors_CIBarometerStatics;

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIBarometerStatics_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIBarometerStatics2_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIBarometerStatics2_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CDevices_CSensors_CIBarometerStatics2 __x_ABI_CWindows_CDevices_CSensors_CIBarometerStatics2;

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIBarometerStatics2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CICompass_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CICompass_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CDevices_CSensors_CICompass __x_ABI_CWindows_CDevices_CSensors_CICompass;

#endif // ____x_ABI_CWindows_CDevices_CSensors_CICompass_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CICompass2_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CICompass2_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CDevices_CSensors_CICompass2 __x_ABI_CWindows_CDevices_CSensors_CICompass2;

#endif // ____x_ABI_CWindows_CDevices_CSensors_CICompass2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CICompass3_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CICompass3_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CDevices_CSensors_CICompass3 __x_ABI_CWindows_CDevices_CSensors_CICompass3;

#endif // ____x_ABI_CWindows_CDevices_CSensors_CICompass3_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CICompassDeviceId_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CICompassDeviceId_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CDevices_CSensors_CICompassDeviceId __x_ABI_CWindows_CDevices_CSensors_CICompassDeviceId;

#endif // ____x_ABI_CWindows_CDevices_CSensors_CICompassDeviceId_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CICompassReading_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CICompassReading_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CDevices_CSensors_CICompassReading __x_ABI_CWindows_CDevices_CSensors_CICompassReading;

#endif // ____x_ABI_CWindows_CDevices_CSensors_CICompassReading_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CICompassReading2_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CICompassReading2_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CDevices_CSensors_CICompassReading2 __x_ABI_CWindows_CDevices_CSensors_CICompassReading2;

#endif // ____x_ABI_CWindows_CDevices_CSensors_CICompassReading2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CICompassReadingChangedEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CICompassReadingChangedEventArgs_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CDevices_CSensors_CICompassReadingChangedEventArgs __x_ABI_CWindows_CDevices_CSensors_CICompassReadingChangedEventArgs;

#endif // ____x_ABI_CWindows_CDevices_CSensors_CICompassReadingChangedEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CICompassReadingHeadingAccuracy_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CICompassReadingHeadingAccuracy_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CDevices_CSensors_CICompassReadingHeadingAccuracy __x_ABI_CWindows_CDevices_CSensors_CICompassReadingHeadingAccuracy;

#endif // ____x_ABI_CWindows_CDevices_CSensors_CICompassReadingHeadingAccuracy_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CICompassStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CICompassStatics_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CDevices_CSensors_CICompassStatics __x_ABI_CWindows_CDevices_CSensors_CICompassStatics;

#endif // ____x_ABI_CWindows_CDevices_CSensors_CICompassStatics_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CICompassStatics2_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CICompassStatics2_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CDevices_CSensors_CICompassStatics2 __x_ABI_CWindows_CDevices_CSensors_CICompassStatics2;

#endif // ____x_ABI_CWindows_CDevices_CSensors_CICompassStatics2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIGyrometer_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIGyrometer_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CDevices_CSensors_CIGyrometer __x_ABI_CWindows_CDevices_CSensors_CIGyrometer;

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIGyrometer_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIGyrometer2_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIGyrometer2_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CDevices_CSensors_CIGyrometer2 __x_ABI_CWindows_CDevices_CSensors_CIGyrometer2;

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIGyrometer2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIGyrometer3_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIGyrometer3_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CDevices_CSensors_CIGyrometer3 __x_ABI_CWindows_CDevices_CSensors_CIGyrometer3;

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIGyrometer3_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIGyrometerDeviceId_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIGyrometerDeviceId_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CDevices_CSensors_CIGyrometerDeviceId __x_ABI_CWindows_CDevices_CSensors_CIGyrometerDeviceId;

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIGyrometerDeviceId_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIGyrometerReading_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIGyrometerReading_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CDevices_CSensors_CIGyrometerReading __x_ABI_CWindows_CDevices_CSensors_CIGyrometerReading;

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIGyrometerReading_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIGyrometerReading2_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIGyrometerReading2_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CDevices_CSensors_CIGyrometerReading2 __x_ABI_CWindows_CDevices_CSensors_CIGyrometerReading2;

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIGyrometerReading2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIGyrometerReadingChangedEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIGyrometerReadingChangedEventArgs_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CDevices_CSensors_CIGyrometerReadingChangedEventArgs __x_ABI_CWindows_CDevices_CSensors_CIGyrometerReadingChangedEventArgs;

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIGyrometerReadingChangedEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIGyrometerStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIGyrometerStatics_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CDevices_CSensors_CIGyrometerStatics __x_ABI_CWindows_CDevices_CSensors_CIGyrometerStatics;

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIGyrometerStatics_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIGyrometerStatics2_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIGyrometerStatics2_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CDevices_CSensors_CIGyrometerStatics2 __x_ABI_CWindows_CDevices_CSensors_CIGyrometerStatics2;

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIGyrometerStatics2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIHingeAngleReading_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIHingeAngleReading_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CDevices_CSensors_CIHingeAngleReading __x_ABI_CWindows_CDevices_CSensors_CIHingeAngleReading;

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIHingeAngleReading_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIHingeAngleSensor_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIHingeAngleSensor_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CDevices_CSensors_CIHingeAngleSensor __x_ABI_CWindows_CDevices_CSensors_CIHingeAngleSensor;

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIHingeAngleSensor_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIHingeAngleSensorReadingChangedEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIHingeAngleSensorReadingChangedEventArgs_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CDevices_CSensors_CIHingeAngleSensorReadingChangedEventArgs __x_ABI_CWindows_CDevices_CSensors_CIHingeAngleSensorReadingChangedEventArgs;

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIHingeAngleSensorReadingChangedEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIHingeAngleSensorStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIHingeAngleSensorStatics_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CDevices_CSensors_CIHingeAngleSensorStatics __x_ABI_CWindows_CDevices_CSensors_CIHingeAngleSensorStatics;

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIHingeAngleSensorStatics_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIInclinometer_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIInclinometer_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CDevices_CSensors_CIInclinometer __x_ABI_CWindows_CDevices_CSensors_CIInclinometer;

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIInclinometer_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIInclinometer2_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIInclinometer2_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CDevices_CSensors_CIInclinometer2 __x_ABI_CWindows_CDevices_CSensors_CIInclinometer2;

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIInclinometer2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIInclinometer3_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIInclinometer3_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CDevices_CSensors_CIInclinometer3 __x_ABI_CWindows_CDevices_CSensors_CIInclinometer3;

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIInclinometer3_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIInclinometerDeviceId_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIInclinometerDeviceId_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CDevices_CSensors_CIInclinometerDeviceId __x_ABI_CWindows_CDevices_CSensors_CIInclinometerDeviceId;

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIInclinometerDeviceId_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIInclinometerReading_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIInclinometerReading_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CDevices_CSensors_CIInclinometerReading __x_ABI_CWindows_CDevices_CSensors_CIInclinometerReading;

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIInclinometerReading_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIInclinometerReading2_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIInclinometerReading2_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CDevices_CSensors_CIInclinometerReading2 __x_ABI_CWindows_CDevices_CSensors_CIInclinometerReading2;

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIInclinometerReading2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIInclinometerReadingChangedEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIInclinometerReadingChangedEventArgs_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CDevices_CSensors_CIInclinometerReadingChangedEventArgs __x_ABI_CWindows_CDevices_CSensors_CIInclinometerReadingChangedEventArgs;

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIInclinometerReadingChangedEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIInclinometerReadingYawAccuracy_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIInclinometerReadingYawAccuracy_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CDevices_CSensors_CIInclinometerReadingYawAccuracy __x_ABI_CWindows_CDevices_CSensors_CIInclinometerReadingYawAccuracy;

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIInclinometerReadingYawAccuracy_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIInclinometerStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIInclinometerStatics_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CDevices_CSensors_CIInclinometerStatics __x_ABI_CWindows_CDevices_CSensors_CIInclinometerStatics;

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIInclinometerStatics_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIInclinometerStatics2_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIInclinometerStatics2_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CDevices_CSensors_CIInclinometerStatics2 __x_ABI_CWindows_CDevices_CSensors_CIInclinometerStatics2;

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIInclinometerStatics2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIInclinometerStatics3_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIInclinometerStatics3_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CDevices_CSensors_CIInclinometerStatics3 __x_ABI_CWindows_CDevices_CSensors_CIInclinometerStatics3;

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIInclinometerStatics3_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIInclinometerStatics4_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIInclinometerStatics4_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CDevices_CSensors_CIInclinometerStatics4 __x_ABI_CWindows_CDevices_CSensors_CIInclinometerStatics4;

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIInclinometerStatics4_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CILightSensor_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CILightSensor_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CDevices_CSensors_CILightSensor __x_ABI_CWindows_CDevices_CSensors_CILightSensor;

#endif // ____x_ABI_CWindows_CDevices_CSensors_CILightSensor_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CILightSensor2_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CILightSensor2_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CDevices_CSensors_CILightSensor2 __x_ABI_CWindows_CDevices_CSensors_CILightSensor2;

#endif // ____x_ABI_CWindows_CDevices_CSensors_CILightSensor2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CILightSensorDeviceId_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CILightSensorDeviceId_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CDevices_CSensors_CILightSensorDeviceId __x_ABI_CWindows_CDevices_CSensors_CILightSensorDeviceId;

#endif // ____x_ABI_CWindows_CDevices_CSensors_CILightSensorDeviceId_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CILightSensorReading_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CILightSensorReading_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CDevices_CSensors_CILightSensorReading __x_ABI_CWindows_CDevices_CSensors_CILightSensorReading;

#endif // ____x_ABI_CWindows_CDevices_CSensors_CILightSensorReading_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CILightSensorReading2_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CILightSensorReading2_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CDevices_CSensors_CILightSensorReading2 __x_ABI_CWindows_CDevices_CSensors_CILightSensorReading2;

#endif // ____x_ABI_CWindows_CDevices_CSensors_CILightSensorReading2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CILightSensorReadingChangedEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CILightSensorReadingChangedEventArgs_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CDevices_CSensors_CILightSensorReadingChangedEventArgs __x_ABI_CWindows_CDevices_CSensors_CILightSensorReadingChangedEventArgs;

#endif // ____x_ABI_CWindows_CDevices_CSensors_CILightSensorReadingChangedEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CILightSensorStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CILightSensorStatics_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CDevices_CSensors_CILightSensorStatics __x_ABI_CWindows_CDevices_CSensors_CILightSensorStatics;

#endif // ____x_ABI_CWindows_CDevices_CSensors_CILightSensorStatics_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CILightSensorStatics2_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CILightSensorStatics2_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CDevices_CSensors_CILightSensorStatics2 __x_ABI_CWindows_CDevices_CSensors_CILightSensorStatics2;

#endif // ____x_ABI_CWindows_CDevices_CSensors_CILightSensorStatics2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIMagnetometer_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIMagnetometer_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CDevices_CSensors_CIMagnetometer __x_ABI_CWindows_CDevices_CSensors_CIMagnetometer;

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIMagnetometer_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIMagnetometer2_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIMagnetometer2_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CDevices_CSensors_CIMagnetometer2 __x_ABI_CWindows_CDevices_CSensors_CIMagnetometer2;

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIMagnetometer2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIMagnetometer3_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIMagnetometer3_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CDevices_CSensors_CIMagnetometer3 __x_ABI_CWindows_CDevices_CSensors_CIMagnetometer3;

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIMagnetometer3_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIMagnetometerDeviceId_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIMagnetometerDeviceId_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CDevices_CSensors_CIMagnetometerDeviceId __x_ABI_CWindows_CDevices_CSensors_CIMagnetometerDeviceId;

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIMagnetometerDeviceId_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIMagnetometerReading_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIMagnetometerReading_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CDevices_CSensors_CIMagnetometerReading __x_ABI_CWindows_CDevices_CSensors_CIMagnetometerReading;

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIMagnetometerReading_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIMagnetometerReading2_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIMagnetometerReading2_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CDevices_CSensors_CIMagnetometerReading2 __x_ABI_CWindows_CDevices_CSensors_CIMagnetometerReading2;

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIMagnetometerReading2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIMagnetometerReadingChangedEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIMagnetometerReadingChangedEventArgs_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CDevices_CSensors_CIMagnetometerReadingChangedEventArgs __x_ABI_CWindows_CDevices_CSensors_CIMagnetometerReadingChangedEventArgs;

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIMagnetometerReadingChangedEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIMagnetometerStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIMagnetometerStatics_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CDevices_CSensors_CIMagnetometerStatics __x_ABI_CWindows_CDevices_CSensors_CIMagnetometerStatics;

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIMagnetometerStatics_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIMagnetometerStatics2_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIMagnetometerStatics2_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CDevices_CSensors_CIMagnetometerStatics2 __x_ABI_CWindows_CDevices_CSensors_CIMagnetometerStatics2;

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIMagnetometerStatics2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIOrientationSensor_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIOrientationSensor_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensor __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensor;

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIOrientationSensor_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIOrientationSensor2_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIOrientationSensor2_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensor2 __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensor2;

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIOrientationSensor2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIOrientationSensor3_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIOrientationSensor3_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensor3 __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensor3;

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIOrientationSensor3_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorDeviceId_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorDeviceId_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorDeviceId __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorDeviceId;

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorDeviceId_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReading_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReading_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReading __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReading;

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReading_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReading2_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReading2_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReading2 __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReading2;

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReading2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReadingChangedEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReadingChangedEventArgs_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReadingChangedEventArgs __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReadingChangedEventArgs;

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReadingChangedEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReadingYawAccuracy_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReadingYawAccuracy_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReadingYawAccuracy __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReadingYawAccuracy;

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReadingYawAccuracy_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStatics_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStatics __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStatics;

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStatics_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStatics2_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStatics2_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStatics2 __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStatics2;

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStatics2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStatics3_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStatics3_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStatics3 __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStatics3;

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStatics3_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStatics4_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStatics4_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStatics4 __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStatics4;

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStatics4_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIPedometer_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIPedometer_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CDevices_CSensors_CIPedometer __x_ABI_CWindows_CDevices_CSensors_CIPedometer;

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIPedometer_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIPedometer2_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIPedometer2_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CDevices_CSensors_CIPedometer2 __x_ABI_CWindows_CDevices_CSensors_CIPedometer2;

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIPedometer2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIPedometerDataThresholdFactory_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIPedometerDataThresholdFactory_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CDevices_CSensors_CIPedometerDataThresholdFactory __x_ABI_CWindows_CDevices_CSensors_CIPedometerDataThresholdFactory;

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIPedometerDataThresholdFactory_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIPedometerReading_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIPedometerReading_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CDevices_CSensors_CIPedometerReading __x_ABI_CWindows_CDevices_CSensors_CIPedometerReading;

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIPedometerReading_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIPedometerReadingChangedEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIPedometerReadingChangedEventArgs_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CDevices_CSensors_CIPedometerReadingChangedEventArgs __x_ABI_CWindows_CDevices_CSensors_CIPedometerReadingChangedEventArgs;

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIPedometerReadingChangedEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIPedometerStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIPedometerStatics_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CDevices_CSensors_CIPedometerStatics __x_ABI_CWindows_CDevices_CSensors_CIPedometerStatics;

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIPedometerStatics_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIPedometerStatics2_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIPedometerStatics2_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CDevices_CSensors_CIPedometerStatics2 __x_ABI_CWindows_CDevices_CSensors_CIPedometerStatics2;

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIPedometerStatics2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIProximitySensor_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIProximitySensor_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CDevices_CSensors_CIProximitySensor __x_ABI_CWindows_CDevices_CSensors_CIProximitySensor;

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIProximitySensor_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIProximitySensorDataThresholdFactory_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIProximitySensorDataThresholdFactory_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CDevices_CSensors_CIProximitySensorDataThresholdFactory __x_ABI_CWindows_CDevices_CSensors_CIProximitySensorDataThresholdFactory;

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIProximitySensorDataThresholdFactory_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIProximitySensorReading_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIProximitySensorReading_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CDevices_CSensors_CIProximitySensorReading __x_ABI_CWindows_CDevices_CSensors_CIProximitySensorReading;

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIProximitySensorReading_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIProximitySensorReadingChangedEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIProximitySensorReadingChangedEventArgs_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CDevices_CSensors_CIProximitySensorReadingChangedEventArgs __x_ABI_CWindows_CDevices_CSensors_CIProximitySensorReadingChangedEventArgs;

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIProximitySensorReadingChangedEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIProximitySensorStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIProximitySensorStatics_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CDevices_CSensors_CIProximitySensorStatics __x_ABI_CWindows_CDevices_CSensors_CIProximitySensorStatics;

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIProximitySensorStatics_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIProximitySensorStatics2_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIProximitySensorStatics2_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CDevices_CSensors_CIProximitySensorStatics2 __x_ABI_CWindows_CDevices_CSensors_CIProximitySensorStatics2;

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIProximitySensorStatics2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CISensorDataThreshold_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CISensorDataThreshold_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CDevices_CSensors_CISensorDataThreshold __x_ABI_CWindows_CDevices_CSensors_CISensorDataThreshold;

#endif // ____x_ABI_CWindows_CDevices_CSensors_CISensorDataThreshold_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CISensorDataThresholdTriggerDetails_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CISensorDataThresholdTriggerDetails_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CDevices_CSensors_CISensorDataThresholdTriggerDetails __x_ABI_CWindows_CDevices_CSensors_CISensorDataThresholdTriggerDetails;

#endif // ____x_ABI_CWindows_CDevices_CSensors_CISensorDataThresholdTriggerDetails_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CISensorQuaternion_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CISensorQuaternion_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CDevices_CSensors_CISensorQuaternion __x_ABI_CWindows_CDevices_CSensors_CISensorQuaternion;

#endif // ____x_ABI_CWindows_CDevices_CSensors_CISensorQuaternion_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CISensorRotationMatrix_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CISensorRotationMatrix_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CDevices_CSensors_CISensorRotationMatrix __x_ABI_CWindows_CDevices_CSensors_CISensorRotationMatrix;

#endif // ____x_ABI_CWindows_CDevices_CSensors_CISensorRotationMatrix_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensor_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensor_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensor __x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensor;

#endif // ____x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensor_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensor2_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensor2_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensor2 __x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensor2;

#endif // ____x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensor2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorDeviceId_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorDeviceId_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorDeviceId __x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorDeviceId;

#endif // ____x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorDeviceId_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorOrientationChangedEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorOrientationChangedEventArgs_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorOrientationChangedEventArgs __x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorOrientationChangedEventArgs;

#endif // ____x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorOrientationChangedEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorStatics_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorStatics __x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorStatics;

#endif // ____x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorStatics_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorStatics2_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorStatics2_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorStatics2 __x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorStatics2;

#endif // ____x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorStatics2_FWD_DEFINED__

// Parameterized interface forward declarations (C)

// Collection interface definitions

typedef interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CSensors__CAccelerometer __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CSensors__CAccelerometer;

#if !defined(____x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__CAccelerometer_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__CAccelerometer_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__CAccelerometer __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__CAccelerometer;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__CAccelerometer;

    typedef struct __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__CAccelerometerVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__CAccelerometer* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__CAccelerometer* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__CAccelerometer* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__CAccelerometer* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__CAccelerometer* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__CAccelerometer* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* put_Completed)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__CAccelerometer* This,
        __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CSensors__CAccelerometer* handler);
    HRESULT (STDMETHODCALLTYPE* get_Completed)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__CAccelerometer* This,
        __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CSensors__CAccelerometer** result);
    HRESULT (STDMETHODCALLTYPE* GetResults)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__CAccelerometer* This,
        __x_ABI_CWindows_CDevices_CSensors_CIAccelerometer** result);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__CAccelerometerVtbl;

    interface __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__CAccelerometer
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__CAccelerometerVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__CAccelerometer_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CSensors__CAccelerometer_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CSensors__CAccelerometer_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CSensors__CAccelerometer __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CSensors__CAccelerometer;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CSensors__CAccelerometer;

    typedef struct __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CSensors__CAccelerometerVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CSensors__CAccelerometer* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CSensors__CAccelerometer* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CSensors__CAccelerometer* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CSensors__CAccelerometer* This,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__CAccelerometer* asyncInfo,
        enum __x_ABI_CWindows_CFoundation_CAsyncStatus asyncStatus);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CSensors__CAccelerometerVtbl;

    interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CSensors__CAccelerometer
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CSensors__CAccelerometerVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CSensors__CAccelerometer_INTERFACE_DEFINED__
    
typedef interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CSensors__CActivitySensor __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CSensors__CActivitySensor;

#if !defined(____x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__CActivitySensor_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__CActivitySensor_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__CActivitySensor __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__CActivitySensor;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__CActivitySensor;

    typedef struct __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__CActivitySensorVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__CActivitySensor* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__CActivitySensor* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__CActivitySensor* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__CActivitySensor* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__CActivitySensor* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__CActivitySensor* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* put_Completed)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__CActivitySensor* This,
        __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CSensors__CActivitySensor* handler);
    HRESULT (STDMETHODCALLTYPE* get_Completed)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__CActivitySensor* This,
        __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CSensors__CActivitySensor** result);
    HRESULT (STDMETHODCALLTYPE* GetResults)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__CActivitySensor* This,
        __x_ABI_CWindows_CDevices_CSensors_CIActivitySensor** result);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__CActivitySensorVtbl;

    interface __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__CActivitySensor
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__CActivitySensorVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__CActivitySensor_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CSensors__CActivitySensor_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CSensors__CActivitySensor_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CSensors__CActivitySensor __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CSensors__CActivitySensor;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CSensors__CActivitySensor;

    typedef struct __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CSensors__CActivitySensorVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CSensors__CActivitySensor* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CSensors__CActivitySensor* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CSensors__CActivitySensor* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CSensors__CActivitySensor* This,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__CActivitySensor* asyncInfo,
        enum __x_ABI_CWindows_CFoundation_CAsyncStatus asyncStatus);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CSensors__CActivitySensorVtbl;

    interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CSensors__CActivitySensor
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CSensors__CActivitySensorVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CSensors__CActivitySensor_INTERFACE_DEFINED__
    
typedef interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CSensors__CActivitySensorReading __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CSensors__CActivitySensorReading;

#if !defined(____x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__CActivitySensorReading_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__CActivitySensorReading_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__CActivitySensorReading __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__CActivitySensorReading;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__CActivitySensorReading;

    typedef struct __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__CActivitySensorReadingVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__CActivitySensorReading* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__CActivitySensorReading* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__CActivitySensorReading* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__CActivitySensorReading* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__CActivitySensorReading* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__CActivitySensorReading* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* put_Completed)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__CActivitySensorReading* This,
        __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CSensors__CActivitySensorReading* handler);
    HRESULT (STDMETHODCALLTYPE* get_Completed)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__CActivitySensorReading* This,
        __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CSensors__CActivitySensorReading** result);
    HRESULT (STDMETHODCALLTYPE* GetResults)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__CActivitySensorReading* This,
        __x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReading** result);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__CActivitySensorReadingVtbl;

    interface __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__CActivitySensorReading
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__CActivitySensorReadingVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__CActivitySensorReading_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CSensors__CActivitySensorReading_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CSensors__CActivitySensorReading_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CSensors__CActivitySensorReading __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CSensors__CActivitySensorReading;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CSensors__CActivitySensorReading;

    typedef struct __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CSensors__CActivitySensorReadingVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CSensors__CActivitySensorReading* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CSensors__CActivitySensorReading* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CSensors__CActivitySensorReading* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CSensors__CActivitySensorReading* This,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__CActivitySensorReading* asyncInfo,
        enum __x_ABI_CWindows_CFoundation_CAsyncStatus asyncStatus);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CSensors__CActivitySensorReadingVtbl;

    interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CSensors__CActivitySensorReading
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CSensors__CActivitySensorReadingVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CSensors__CActivitySensorReading_INTERFACE_DEFINED__
    
typedef interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CSensors__CBarometer __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CSensors__CBarometer;

#if !defined(____x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__CBarometer_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__CBarometer_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__CBarometer __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__CBarometer;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__CBarometer;

    typedef struct __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__CBarometerVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__CBarometer* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__CBarometer* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__CBarometer* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__CBarometer* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__CBarometer* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__CBarometer* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* put_Completed)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__CBarometer* This,
        __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CSensors__CBarometer* handler);
    HRESULT (STDMETHODCALLTYPE* get_Completed)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__CBarometer* This,
        __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CSensors__CBarometer** result);
    HRESULT (STDMETHODCALLTYPE* GetResults)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__CBarometer* This,
        __x_ABI_CWindows_CDevices_CSensors_CIBarometer** result);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__CBarometerVtbl;

    interface __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__CBarometer
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__CBarometerVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__CBarometer_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CSensors__CBarometer_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CSensors__CBarometer_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CSensors__CBarometer __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CSensors__CBarometer;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CSensors__CBarometer;

    typedef struct __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CSensors__CBarometerVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CSensors__CBarometer* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CSensors__CBarometer* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CSensors__CBarometer* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CSensors__CBarometer* This,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__CBarometer* asyncInfo,
        enum __x_ABI_CWindows_CFoundation_CAsyncStatus asyncStatus);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CSensors__CBarometerVtbl;

    interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CSensors__CBarometer
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CSensors__CBarometerVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CSensors__CBarometer_INTERFACE_DEFINED__
    
typedef interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CSensors__CCompass __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CSensors__CCompass;

#if !defined(____x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__CCompass_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__CCompass_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__CCompass __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__CCompass;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__CCompass;

    typedef struct __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__CCompassVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__CCompass* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__CCompass* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__CCompass* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__CCompass* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__CCompass* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__CCompass* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* put_Completed)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__CCompass* This,
        __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CSensors__CCompass* handler);
    HRESULT (STDMETHODCALLTYPE* get_Completed)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__CCompass* This,
        __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CSensors__CCompass** result);
    HRESULT (STDMETHODCALLTYPE* GetResults)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__CCompass* This,
        __x_ABI_CWindows_CDevices_CSensors_CICompass** result);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__CCompassVtbl;

    interface __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__CCompass
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__CCompassVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__CCompass_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CSensors__CCompass_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CSensors__CCompass_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CSensors__CCompass __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CSensors__CCompass;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CSensors__CCompass;

    typedef struct __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CSensors__CCompassVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CSensors__CCompass* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CSensors__CCompass* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CSensors__CCompass* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CSensors__CCompass* This,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__CCompass* asyncInfo,
        enum __x_ABI_CWindows_CFoundation_CAsyncStatus asyncStatus);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CSensors__CCompassVtbl;

    interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CSensors__CCompass
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CSensors__CCompassVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CSensors__CCompass_INTERFACE_DEFINED__
    
typedef interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CSensors__CGyrometer __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CSensors__CGyrometer;

#if !defined(____x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__CGyrometer_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__CGyrometer_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__CGyrometer __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__CGyrometer;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__CGyrometer;

    typedef struct __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__CGyrometerVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__CGyrometer* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__CGyrometer* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__CGyrometer* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__CGyrometer* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__CGyrometer* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__CGyrometer* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* put_Completed)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__CGyrometer* This,
        __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CSensors__CGyrometer* handler);
    HRESULT (STDMETHODCALLTYPE* get_Completed)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__CGyrometer* This,
        __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CSensors__CGyrometer** result);
    HRESULT (STDMETHODCALLTYPE* GetResults)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__CGyrometer* This,
        __x_ABI_CWindows_CDevices_CSensors_CIGyrometer** result);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__CGyrometerVtbl;

    interface __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__CGyrometer
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__CGyrometerVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__CGyrometer_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CSensors__CGyrometer_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CSensors__CGyrometer_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CSensors__CGyrometer __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CSensors__CGyrometer;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CSensors__CGyrometer;

    typedef struct __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CSensors__CGyrometerVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CSensors__CGyrometer* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CSensors__CGyrometer* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CSensors__CGyrometer* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CSensors__CGyrometer* This,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__CGyrometer* asyncInfo,
        enum __x_ABI_CWindows_CFoundation_CAsyncStatus asyncStatus);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CSensors__CGyrometerVtbl;

    interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CSensors__CGyrometer
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CSensors__CGyrometerVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CSensors__CGyrometer_INTERFACE_DEFINED__
    
typedef interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CSensors__CHingeAngleReading __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CSensors__CHingeAngleReading;

#if !defined(____x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__CHingeAngleReading_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__CHingeAngleReading_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__CHingeAngleReading __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__CHingeAngleReading;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__CHingeAngleReading;

    typedef struct __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__CHingeAngleReadingVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__CHingeAngleReading* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__CHingeAngleReading* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__CHingeAngleReading* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__CHingeAngleReading* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__CHingeAngleReading* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__CHingeAngleReading* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* put_Completed)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__CHingeAngleReading* This,
        __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CSensors__CHingeAngleReading* handler);
    HRESULT (STDMETHODCALLTYPE* get_Completed)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__CHingeAngleReading* This,
        __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CSensors__CHingeAngleReading** result);
    HRESULT (STDMETHODCALLTYPE* GetResults)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__CHingeAngleReading* This,
        __x_ABI_CWindows_CDevices_CSensors_CIHingeAngleReading** result);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__CHingeAngleReadingVtbl;

    interface __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__CHingeAngleReading
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__CHingeAngleReadingVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__CHingeAngleReading_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CSensors__CHingeAngleReading_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CSensors__CHingeAngleReading_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CSensors__CHingeAngleReading __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CSensors__CHingeAngleReading;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CSensors__CHingeAngleReading;

    typedef struct __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CSensors__CHingeAngleReadingVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CSensors__CHingeAngleReading* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CSensors__CHingeAngleReading* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CSensors__CHingeAngleReading* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CSensors__CHingeAngleReading* This,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__CHingeAngleReading* asyncInfo,
        enum __x_ABI_CWindows_CFoundation_CAsyncStatus asyncStatus);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CSensors__CHingeAngleReadingVtbl;

    interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CSensors__CHingeAngleReading
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CSensors__CHingeAngleReadingVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CSensors__CHingeAngleReading_INTERFACE_DEFINED__
    
typedef interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CSensors__CHingeAngleSensor __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CSensors__CHingeAngleSensor;

#if !defined(____x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__CHingeAngleSensor_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__CHingeAngleSensor_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__CHingeAngleSensor __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__CHingeAngleSensor;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__CHingeAngleSensor;

    typedef struct __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__CHingeAngleSensorVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__CHingeAngleSensor* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__CHingeAngleSensor* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__CHingeAngleSensor* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__CHingeAngleSensor* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__CHingeAngleSensor* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__CHingeAngleSensor* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* put_Completed)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__CHingeAngleSensor* This,
        __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CSensors__CHingeAngleSensor* handler);
    HRESULT (STDMETHODCALLTYPE* get_Completed)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__CHingeAngleSensor* This,
        __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CSensors__CHingeAngleSensor** result);
    HRESULT (STDMETHODCALLTYPE* GetResults)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__CHingeAngleSensor* This,
        __x_ABI_CWindows_CDevices_CSensors_CIHingeAngleSensor** result);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__CHingeAngleSensorVtbl;

    interface __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__CHingeAngleSensor
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__CHingeAngleSensorVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__CHingeAngleSensor_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CSensors__CHingeAngleSensor_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CSensors__CHingeAngleSensor_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CSensors__CHingeAngleSensor __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CSensors__CHingeAngleSensor;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CSensors__CHingeAngleSensor;

    typedef struct __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CSensors__CHingeAngleSensorVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CSensors__CHingeAngleSensor* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CSensors__CHingeAngleSensor* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CSensors__CHingeAngleSensor* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CSensors__CHingeAngleSensor* This,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__CHingeAngleSensor* asyncInfo,
        enum __x_ABI_CWindows_CFoundation_CAsyncStatus asyncStatus);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CSensors__CHingeAngleSensorVtbl;

    interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CSensors__CHingeAngleSensor
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CSensors__CHingeAngleSensorVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CSensors__CHingeAngleSensor_INTERFACE_DEFINED__
    
typedef interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CSensors__CInclinometer __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CSensors__CInclinometer;

#if !defined(____x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__CInclinometer_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__CInclinometer_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__CInclinometer __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__CInclinometer;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__CInclinometer;

    typedef struct __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__CInclinometerVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__CInclinometer* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__CInclinometer* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__CInclinometer* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__CInclinometer* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__CInclinometer* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__CInclinometer* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* put_Completed)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__CInclinometer* This,
        __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CSensors__CInclinometer* handler);
    HRESULT (STDMETHODCALLTYPE* get_Completed)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__CInclinometer* This,
        __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CSensors__CInclinometer** result);
    HRESULT (STDMETHODCALLTYPE* GetResults)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__CInclinometer* This,
        __x_ABI_CWindows_CDevices_CSensors_CIInclinometer** result);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__CInclinometerVtbl;

    interface __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__CInclinometer
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__CInclinometerVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__CInclinometer_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CSensors__CInclinometer_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CSensors__CInclinometer_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CSensors__CInclinometer __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CSensors__CInclinometer;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CSensors__CInclinometer;

    typedef struct __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CSensors__CInclinometerVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CSensors__CInclinometer* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CSensors__CInclinometer* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CSensors__CInclinometer* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CSensors__CInclinometer* This,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__CInclinometer* asyncInfo,
        enum __x_ABI_CWindows_CFoundation_CAsyncStatus asyncStatus);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CSensors__CInclinometerVtbl;

    interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CSensors__CInclinometer
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CSensors__CInclinometerVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CSensors__CInclinometer_INTERFACE_DEFINED__
    
typedef interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CSensors__CLightSensor __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CSensors__CLightSensor;

#if !defined(____x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__CLightSensor_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__CLightSensor_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__CLightSensor __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__CLightSensor;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__CLightSensor;

    typedef struct __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__CLightSensorVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__CLightSensor* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__CLightSensor* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__CLightSensor* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__CLightSensor* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__CLightSensor* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__CLightSensor* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* put_Completed)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__CLightSensor* This,
        __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CSensors__CLightSensor* handler);
    HRESULT (STDMETHODCALLTYPE* get_Completed)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__CLightSensor* This,
        __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CSensors__CLightSensor** result);
    HRESULT (STDMETHODCALLTYPE* GetResults)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__CLightSensor* This,
        __x_ABI_CWindows_CDevices_CSensors_CILightSensor** result);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__CLightSensorVtbl;

    interface __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__CLightSensor
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__CLightSensorVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__CLightSensor_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CSensors__CLightSensor_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CSensors__CLightSensor_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CSensors__CLightSensor __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CSensors__CLightSensor;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CSensors__CLightSensor;

    typedef struct __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CSensors__CLightSensorVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CSensors__CLightSensor* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CSensors__CLightSensor* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CSensors__CLightSensor* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CSensors__CLightSensor* This,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__CLightSensor* asyncInfo,
        enum __x_ABI_CWindows_CFoundation_CAsyncStatus asyncStatus);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CSensors__CLightSensorVtbl;

    interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CSensors__CLightSensor
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CSensors__CLightSensorVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CSensors__CLightSensor_INTERFACE_DEFINED__
    
typedef interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CSensors__CMagnetometer __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CSensors__CMagnetometer;

#if !defined(____x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__CMagnetometer_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__CMagnetometer_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__CMagnetometer __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__CMagnetometer;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__CMagnetometer;

    typedef struct __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__CMagnetometerVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__CMagnetometer* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__CMagnetometer* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__CMagnetometer* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__CMagnetometer* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__CMagnetometer* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__CMagnetometer* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* put_Completed)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__CMagnetometer* This,
        __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CSensors__CMagnetometer* handler);
    HRESULT (STDMETHODCALLTYPE* get_Completed)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__CMagnetometer* This,
        __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CSensors__CMagnetometer** result);
    HRESULT (STDMETHODCALLTYPE* GetResults)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__CMagnetometer* This,
        __x_ABI_CWindows_CDevices_CSensors_CIMagnetometer** result);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__CMagnetometerVtbl;

    interface __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__CMagnetometer
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__CMagnetometerVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__CMagnetometer_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CSensors__CMagnetometer_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CSensors__CMagnetometer_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CSensors__CMagnetometer __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CSensors__CMagnetometer;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CSensors__CMagnetometer;

    typedef struct __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CSensors__CMagnetometerVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CSensors__CMagnetometer* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CSensors__CMagnetometer* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CSensors__CMagnetometer* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CSensors__CMagnetometer* This,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__CMagnetometer* asyncInfo,
        enum __x_ABI_CWindows_CFoundation_CAsyncStatus asyncStatus);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CSensors__CMagnetometerVtbl;

    interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CSensors__CMagnetometer
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CSensors__CMagnetometerVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CSensors__CMagnetometer_INTERFACE_DEFINED__
    
typedef interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CSensors__COrientationSensor __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CSensors__COrientationSensor;

#if !defined(____x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__COrientationSensor_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__COrientationSensor_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__COrientationSensor __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__COrientationSensor;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__COrientationSensor;

    typedef struct __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__COrientationSensorVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__COrientationSensor* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__COrientationSensor* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__COrientationSensor* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__COrientationSensor* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__COrientationSensor* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__COrientationSensor* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* put_Completed)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__COrientationSensor* This,
        __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CSensors__COrientationSensor* handler);
    HRESULT (STDMETHODCALLTYPE* get_Completed)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__COrientationSensor* This,
        __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CSensors__COrientationSensor** result);
    HRESULT (STDMETHODCALLTYPE* GetResults)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__COrientationSensor* This,
        __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensor** result);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__COrientationSensorVtbl;

    interface __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__COrientationSensor
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__COrientationSensorVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__COrientationSensor_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CSensors__COrientationSensor_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CSensors__COrientationSensor_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CSensors__COrientationSensor __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CSensors__COrientationSensor;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CSensors__COrientationSensor;

    typedef struct __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CSensors__COrientationSensorVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CSensors__COrientationSensor* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CSensors__COrientationSensor* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CSensors__COrientationSensor* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CSensors__COrientationSensor* This,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__COrientationSensor* asyncInfo,
        enum __x_ABI_CWindows_CFoundation_CAsyncStatus asyncStatus);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CSensors__COrientationSensorVtbl;

    interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CSensors__COrientationSensor
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CSensors__COrientationSensorVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CSensors__COrientationSensor_INTERFACE_DEFINED__
    
typedef interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CSensors__CPedometer __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CSensors__CPedometer;

#if !defined(____x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__CPedometer_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__CPedometer_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__CPedometer __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__CPedometer;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__CPedometer;

    typedef struct __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__CPedometerVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__CPedometer* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__CPedometer* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__CPedometer* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__CPedometer* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__CPedometer* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__CPedometer* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* put_Completed)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__CPedometer* This,
        __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CSensors__CPedometer* handler);
    HRESULT (STDMETHODCALLTYPE* get_Completed)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__CPedometer* This,
        __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CSensors__CPedometer** result);
    HRESULT (STDMETHODCALLTYPE* GetResults)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__CPedometer* This,
        __x_ABI_CWindows_CDevices_CSensors_CIPedometer** result);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__CPedometerVtbl;

    interface __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__CPedometer
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__CPedometerVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__CPedometer_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CSensors__CPedometer_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CSensors__CPedometer_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CSensors__CPedometer __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CSensors__CPedometer;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CSensors__CPedometer;

    typedef struct __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CSensors__CPedometerVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CSensors__CPedometer* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CSensors__CPedometer* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CSensors__CPedometer* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CSensors__CPedometer* This,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__CPedometer* asyncInfo,
        enum __x_ABI_CWindows_CFoundation_CAsyncStatus asyncStatus);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CSensors__CPedometerVtbl;

    interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CSensors__CPedometer
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CSensors__CPedometerVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CSensors__CPedometer_INTERFACE_DEFINED__
    
typedef interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CSensors__CSimpleOrientationSensor __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CSensors__CSimpleOrientationSensor;

#if !defined(____x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__CSimpleOrientationSensor_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__CSimpleOrientationSensor_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__CSimpleOrientationSensor __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__CSimpleOrientationSensor;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__CSimpleOrientationSensor;

    typedef struct __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__CSimpleOrientationSensorVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__CSimpleOrientationSensor* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__CSimpleOrientationSensor* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__CSimpleOrientationSensor* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__CSimpleOrientationSensor* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__CSimpleOrientationSensor* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__CSimpleOrientationSensor* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* put_Completed)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__CSimpleOrientationSensor* This,
        __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CSensors__CSimpleOrientationSensor* handler);
    HRESULT (STDMETHODCALLTYPE* get_Completed)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__CSimpleOrientationSensor* This,
        __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CSensors__CSimpleOrientationSensor** result);
    HRESULT (STDMETHODCALLTYPE* GetResults)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__CSimpleOrientationSensor* This,
        __x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensor** result);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__CSimpleOrientationSensorVtbl;

    interface __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__CSimpleOrientationSensor
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__CSimpleOrientationSensorVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__CSimpleOrientationSensor_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CSensors__CSimpleOrientationSensor_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CSensors__CSimpleOrientationSensor_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CSensors__CSimpleOrientationSensor __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CSensors__CSimpleOrientationSensor;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CSensors__CSimpleOrientationSensor;

    typedef struct __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CSensors__CSimpleOrientationSensorVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CSensors__CSimpleOrientationSensor* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CSensors__CSimpleOrientationSensor* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CSensors__CSimpleOrientationSensor* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CSensors__CSimpleOrientationSensor* This,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__CSimpleOrientationSensor* asyncInfo,
        enum __x_ABI_CWindows_CFoundation_CAsyncStatus asyncStatus);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CSensors__CSimpleOrientationSensorVtbl;

    interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CSensors__CSimpleOrientationSensor
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CSensors__CSimpleOrientationSensorVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CSensors__CSimpleOrientationSensor_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CSensors__CActivitySensorReading_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CSensors__CActivitySensorReading_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CSensors__CActivitySensorReading __x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CSensors__CActivitySensorReading;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CSensors__CActivitySensorReading;

    typedef struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CSensors__CActivitySensorReadingVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CSensors__CActivitySensorReading* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CSensors__CActivitySensorReading* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CSensors__CActivitySensorReading* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CSensors__CActivitySensorReading* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CSensors__CActivitySensorReading* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CSensors__CActivitySensorReading* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Current)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CSensors__CActivitySensorReading* This,
        __x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReading** result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CSensors__CActivitySensorReading* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CSensors__CActivitySensorReading* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CSensors__CActivitySensorReading* This,
        UINT32 itemsLength,
        __x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReading** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CSensors__CActivitySensorReadingVtbl;

    interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CSensors__CActivitySensorReading
    {
        CONST_VTBL struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CSensors__CActivitySensorReadingVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CSensors__CActivitySensorReading_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CSensors__CActivitySensorReading_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CSensors__CActivitySensorReading_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CSensors__CActivitySensorReading __x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CSensors__CActivitySensorReading;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CSensors__CActivitySensorReading;

    typedef struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CSensors__CActivitySensorReadingVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CSensors__CActivitySensorReading* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CSensors__CActivitySensorReading* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CSensors__CActivitySensorReading* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CSensors__CActivitySensorReading* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CSensors__CActivitySensorReading* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CSensors__CActivitySensorReading* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* First)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CSensors__CActivitySensorReading* This,
        __x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CSensors__CActivitySensorReading** result);

        END_INTERFACE
    } __x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CSensors__CActivitySensorReadingVtbl;

    interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CSensors__CActivitySensorReading
    {
        CONST_VTBL struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CSensors__CActivitySensorReadingVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CSensors__CActivitySensorReading_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CSensors__CActivitySensorReading_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CSensors__CActivitySensorReading_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CSensors__CActivitySensorReading __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CSensors__CActivitySensorReading;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CSensors__CActivitySensorReading;

    typedef struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CSensors__CActivitySensorReadingVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CSensors__CActivitySensorReading* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CSensors__CActivitySensorReading* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CSensors__CActivitySensorReading* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CSensors__CActivitySensorReading* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CSensors__CActivitySensorReading* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CSensors__CActivitySensorReading* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CSensors__CActivitySensorReading* This,
        UINT32 index,
        __x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReading** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CSensors__CActivitySensorReading* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CSensors__CActivitySensorReading* This,
        __x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReading* value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CSensors__CActivitySensorReading* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        __x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReading** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CSensors__CActivitySensorReadingVtbl;

    interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CSensors__CActivitySensorReading
    {
        CONST_VTBL struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CSensors__CActivitySensorReadingVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CSensors__CActivitySensorReading_INTERFACE_DEFINED__
    
typedef interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CSensors__CActivitySensorReading __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CSensors__CActivitySensorReading;

#if !defined(____x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CSensors__CActivitySensorReading_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CSensors__CActivitySensorReading_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CSensors__CActivitySensorReading __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CSensors__CActivitySensorReading;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CSensors__CActivitySensorReading;

    typedef struct __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CSensors__CActivitySensorReadingVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CSensors__CActivitySensorReading* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CSensors__CActivitySensorReading* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CSensors__CActivitySensorReading* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CSensors__CActivitySensorReading* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CSensors__CActivitySensorReading* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CSensors__CActivitySensorReading* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* put_Completed)(__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CSensors__CActivitySensorReading* This,
        __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CSensors__CActivitySensorReading* handler);
    HRESULT (STDMETHODCALLTYPE* get_Completed)(__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CSensors__CActivitySensorReading* This,
        __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CSensors__CActivitySensorReading** result);
    HRESULT (STDMETHODCALLTYPE* GetResults)(__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CSensors__CActivitySensorReading* This,
        __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CSensors__CActivitySensorReading** result);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CSensors__CActivitySensorReadingVtbl;

    interface __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CSensors__CActivitySensorReading
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CSensors__CActivitySensorReadingVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CSensors__CActivitySensorReading_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CSensors__CActivitySensorReading_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CSensors__CActivitySensorReading_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CSensors__CActivitySensorReading __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CSensors__CActivitySensorReading;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CSensors__CActivitySensorReading;

    typedef struct __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CSensors__CActivitySensorReadingVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CSensors__CActivitySensorReading* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CSensors__CActivitySensorReading* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CSensors__CActivitySensorReading* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CSensors__CActivitySensorReading* This,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CSensors__CActivitySensorReading* asyncInfo,
        enum __x_ABI_CWindows_CFoundation_CAsyncStatus asyncStatus);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CSensors__CActivitySensorReadingVtbl;

    interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CSensors__CActivitySensorReading
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CSensors__CActivitySensorReadingVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CSensors__CActivitySensorReading_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CSensors__CPedometerReading_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CSensors__CPedometerReading_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CSensors__CPedometerReading __x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CSensors__CPedometerReading;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CSensors__CPedometerReading;

    typedef struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CSensors__CPedometerReadingVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CSensors__CPedometerReading* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CSensors__CPedometerReading* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CSensors__CPedometerReading* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CSensors__CPedometerReading* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CSensors__CPedometerReading* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CSensors__CPedometerReading* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Current)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CSensors__CPedometerReading* This,
        __x_ABI_CWindows_CDevices_CSensors_CIPedometerReading** result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CSensors__CPedometerReading* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CSensors__CPedometerReading* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CSensors__CPedometerReading* This,
        UINT32 itemsLength,
        __x_ABI_CWindows_CDevices_CSensors_CIPedometerReading** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CSensors__CPedometerReadingVtbl;

    interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CSensors__CPedometerReading
    {
        CONST_VTBL struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CSensors__CPedometerReadingVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CSensors__CPedometerReading_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CSensors__CPedometerReading_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CSensors__CPedometerReading_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CSensors__CPedometerReading __x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CSensors__CPedometerReading;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CSensors__CPedometerReading;

    typedef struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CSensors__CPedometerReadingVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CSensors__CPedometerReading* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CSensors__CPedometerReading* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CSensors__CPedometerReading* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CSensors__CPedometerReading* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CSensors__CPedometerReading* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CSensors__CPedometerReading* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* First)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CSensors__CPedometerReading* This,
        __x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CSensors__CPedometerReading** result);

        END_INTERFACE
    } __x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CSensors__CPedometerReadingVtbl;

    interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CSensors__CPedometerReading
    {
        CONST_VTBL struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CSensors__CPedometerReadingVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CSensors__CPedometerReading_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CSensors__CPedometerReading_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CSensors__CPedometerReading_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CSensors__CPedometerReading __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CSensors__CPedometerReading;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CSensors__CPedometerReading;

    typedef struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CSensors__CPedometerReadingVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CSensors__CPedometerReading* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CSensors__CPedometerReading* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CSensors__CPedometerReading* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CSensors__CPedometerReading* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CSensors__CPedometerReading* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CSensors__CPedometerReading* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CSensors__CPedometerReading* This,
        UINT32 index,
        __x_ABI_CWindows_CDevices_CSensors_CIPedometerReading** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CSensors__CPedometerReading* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CSensors__CPedometerReading* This,
        __x_ABI_CWindows_CDevices_CSensors_CIPedometerReading* value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CSensors__CPedometerReading* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        __x_ABI_CWindows_CDevices_CSensors_CIPedometerReading** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CSensors__CPedometerReadingVtbl;

    interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CSensors__CPedometerReading
    {
        CONST_VTBL struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CSensors__CPedometerReadingVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CSensors__CPedometerReading_INTERFACE_DEFINED__
    
typedef interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CSensors__CPedometerReading __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CSensors__CPedometerReading;

#if !defined(____x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CSensors__CPedometerReading_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CSensors__CPedometerReading_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CSensors__CPedometerReading __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CSensors__CPedometerReading;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CSensors__CPedometerReading;

    typedef struct __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CSensors__CPedometerReadingVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CSensors__CPedometerReading* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CSensors__CPedometerReading* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CSensors__CPedometerReading* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CSensors__CPedometerReading* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CSensors__CPedometerReading* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CSensors__CPedometerReading* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* put_Completed)(__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CSensors__CPedometerReading* This,
        __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CSensors__CPedometerReading* handler);
    HRESULT (STDMETHODCALLTYPE* get_Completed)(__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CSensors__CPedometerReading* This,
        __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CSensors__CPedometerReading** result);
    HRESULT (STDMETHODCALLTYPE* GetResults)(__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CSensors__CPedometerReading* This,
        __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CSensors__CPedometerReading** result);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CSensors__CPedometerReadingVtbl;

    interface __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CSensors__CPedometerReading
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CSensors__CPedometerReadingVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CSensors__CPedometerReading_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CSensors__CPedometerReading_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CSensors__CPedometerReading_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CSensors__CPedometerReading __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CSensors__CPedometerReading;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CSensors__CPedometerReading;

    typedef struct __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CSensors__CPedometerReadingVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CSensors__CPedometerReading* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CSensors__CPedometerReading* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CSensors__CPedometerReading* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CSensors__CPedometerReading* This,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CSensors__CPedometerReading* asyncInfo,
        enum __x_ABI_CWindows_CFoundation_CAsyncStatus asyncStatus);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CSensors__CPedometerReadingVtbl;

    interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CSensors__CPedometerReading
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CSensors__CPedometerReadingVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CSensors__CPedometerReading_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CSensors__CActivitySensorReadingChangeReport_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CSensors__CActivitySensorReadingChangeReport_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CSensors__CActivitySensorReadingChangeReport __x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CSensors__CActivitySensorReadingChangeReport;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CSensors__CActivitySensorReadingChangeReport;

    typedef struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CSensors__CActivitySensorReadingChangeReportVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CSensors__CActivitySensorReadingChangeReport* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CSensors__CActivitySensorReadingChangeReport* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CSensors__CActivitySensorReadingChangeReport* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CSensors__CActivitySensorReadingChangeReport* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CSensors__CActivitySensorReadingChangeReport* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CSensors__CActivitySensorReadingChangeReport* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Current)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CSensors__CActivitySensorReadingChangeReport* This,
        __x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReadingChangeReport** result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CSensors__CActivitySensorReadingChangeReport* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CSensors__CActivitySensorReadingChangeReport* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CSensors__CActivitySensorReadingChangeReport* This,
        UINT32 itemsLength,
        __x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReadingChangeReport** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CSensors__CActivitySensorReadingChangeReportVtbl;

    interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CSensors__CActivitySensorReadingChangeReport
    {
        CONST_VTBL struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CSensors__CActivitySensorReadingChangeReportVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CSensors__CActivitySensorReadingChangeReport_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CSensors__CActivitySensorReadingChangeReport_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CSensors__CActivitySensorReadingChangeReport_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CSensors__CActivitySensorReadingChangeReport __x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CSensors__CActivitySensorReadingChangeReport;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CSensors__CActivitySensorReadingChangeReport;

    typedef struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CSensors__CActivitySensorReadingChangeReportVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CSensors__CActivitySensorReadingChangeReport* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CSensors__CActivitySensorReadingChangeReport* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CSensors__CActivitySensorReadingChangeReport* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CSensors__CActivitySensorReadingChangeReport* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CSensors__CActivitySensorReadingChangeReport* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CSensors__CActivitySensorReadingChangeReport* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* First)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CSensors__CActivitySensorReadingChangeReport* This,
        __x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CSensors__CActivitySensorReadingChangeReport** result);

        END_INTERFACE
    } __x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CSensors__CActivitySensorReadingChangeReportVtbl;

    interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CSensors__CActivitySensorReadingChangeReport
    {
        CONST_VTBL struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CSensors__CActivitySensorReadingChangeReportVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CSensors__CActivitySensorReadingChangeReport_INTERFACE_DEFINED__
    
typedef enum __x_ABI_CWindows_CDevices_CSensors_CActivityType __x_ABI_CWindows_CDevices_CSensors_CActivityType;

#if !defined(____x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CSensors__CActivityType_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CSensors__CActivityType_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CSensors__CActivityType __x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CSensors__CActivityType;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CSensors__CActivityType;

    typedef struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CSensors__CActivityTypeVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CSensors__CActivityType* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CSensors__CActivityType* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CSensors__CActivityType* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CSensors__CActivityType* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CSensors__CActivityType* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CSensors__CActivityType* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Current)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CSensors__CActivityType* This,
        enum __x_ABI_CWindows_CDevices_CSensors_CActivityType* result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CSensors__CActivityType* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CSensors__CActivityType* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CSensors__CActivityType* This,
        UINT32 itemsLength,
        enum __x_ABI_CWindows_CDevices_CSensors_CActivityType* items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CSensors__CActivityTypeVtbl;

    interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CSensors__CActivityType
    {
        CONST_VTBL struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CSensors__CActivityTypeVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CSensors__CActivityType_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CSensors__CActivityType_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CSensors__CActivityType_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CSensors__CActivityType __x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CSensors__CActivityType;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CSensors__CActivityType;

    typedef struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CSensors__CActivityTypeVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CSensors__CActivityType* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CSensors__CActivityType* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CSensors__CActivityType* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CSensors__CActivityType* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CSensors__CActivityType* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CSensors__CActivityType* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* First)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CSensors__CActivityType* This,
        __x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CSensors__CActivityType** result);

        END_INTERFACE
    } __x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CSensors__CActivityTypeVtbl;

    interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CSensors__CActivityType
    {
        CONST_VTBL struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CSensors__CActivityTypeVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CSensors__CActivityType_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CSensors__CProximitySensorReading_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CSensors__CProximitySensorReading_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CSensors__CProximitySensorReading __x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CSensors__CProximitySensorReading;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CSensors__CProximitySensorReading;

    typedef struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CSensors__CProximitySensorReadingVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CSensors__CProximitySensorReading* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CSensors__CProximitySensorReading* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CSensors__CProximitySensorReading* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CSensors__CProximitySensorReading* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CSensors__CProximitySensorReading* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CSensors__CProximitySensorReading* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Current)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CSensors__CProximitySensorReading* This,
        __x_ABI_CWindows_CDevices_CSensors_CIProximitySensorReading** result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CSensors__CProximitySensorReading* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CSensors__CProximitySensorReading* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CSensors__CProximitySensorReading* This,
        UINT32 itemsLength,
        __x_ABI_CWindows_CDevices_CSensors_CIProximitySensorReading** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CSensors__CProximitySensorReadingVtbl;

    interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CSensors__CProximitySensorReading
    {
        CONST_VTBL struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CSensors__CProximitySensorReadingVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CSensors__CProximitySensorReading_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CSensors__CProximitySensorReading_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CSensors__CProximitySensorReading_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CSensors__CProximitySensorReading __x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CSensors__CProximitySensorReading;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CSensors__CProximitySensorReading;

    typedef struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CSensors__CProximitySensorReadingVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CSensors__CProximitySensorReading* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CSensors__CProximitySensorReading* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CSensors__CProximitySensorReading* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CSensors__CProximitySensorReading* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CSensors__CProximitySensorReading* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CSensors__CProximitySensorReading* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* First)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CSensors__CProximitySensorReading* This,
        __x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CSensors__CProximitySensorReading** result);

        END_INTERFACE
    } __x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CSensors__CProximitySensorReadingVtbl;

    interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CSensors__CProximitySensorReading
    {
        CONST_VTBL struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CSensors__CProximitySensorReadingVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CSensors__CProximitySensorReading_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectable_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectable_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectable __x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectable;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectable;

    typedef struct __x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectableVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectable* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectable* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectable* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectable* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectable* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectable* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Key)(__x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectable* This,
        HSTRING* result);
    HRESULT (STDMETHODCALLTYPE* get_Value)(__x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectable* This,
        IInspectable** result);

        END_INTERFACE
    } __x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectableVtbl;

    interface __x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectable
    {
        CONST_VTBL struct __x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectableVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectable_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectable_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectable_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectable __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectable;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectable;

    typedef struct __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectableVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectable* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectable* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectable* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectable* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectable* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectable* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Current)(__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectable* This,
        __x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectable** result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectable* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectable* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectable* This,
        UINT32 itemsLength,
        __x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectable** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectableVtbl;

    interface __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectable
    {
        CONST_VTBL struct __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectableVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectable_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectable_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectable_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectable __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectable;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectable;

    typedef struct __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectableVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectable* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectable* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectable* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectable* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectable* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectable* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* First)(__x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectable* This,
        __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectable** result);

        END_INTERFACE
    } __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectableVtbl;

    interface __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectable
    {
        CONST_VTBL struct __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectableVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectable_INTERFACE_DEFINED__
    
typedef enum __x_ABI_CWindows_CDevices_CSensors_CPedometerStepKind __x_ABI_CWindows_CDevices_CSensors_CPedometerStepKind;

#if !defined(____x_ABI_C__FIKeyValuePair_2___x_ABI_CWindows__CDevices__CSensors__CPedometerStepKind___x_ABI_CWindows__CDevices__CSensors__CPedometerReading_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIKeyValuePair_2___x_ABI_CWindows__CDevices__CSensors__CPedometerStepKind___x_ABI_CWindows__CDevices__CSensors__CPedometerReading_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIKeyValuePair_2___x_ABI_CWindows__CDevices__CSensors__CPedometerStepKind___x_ABI_CWindows__CDevices__CSensors__CPedometerReading __x_ABI_C__FIKeyValuePair_2___x_ABI_CWindows__CDevices__CSensors__CPedometerStepKind___x_ABI_CWindows__CDevices__CSensors__CPedometerReading;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIKeyValuePair_2___x_ABI_CWindows__CDevices__CSensors__CPedometerStepKind___x_ABI_CWindows__CDevices__CSensors__CPedometerReading;

    typedef struct __x_ABI_C__FIKeyValuePair_2___x_ABI_CWindows__CDevices__CSensors__CPedometerStepKind___x_ABI_CWindows__CDevices__CSensors__CPedometerReadingVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIKeyValuePair_2___x_ABI_CWindows__CDevices__CSensors__CPedometerStepKind___x_ABI_CWindows__CDevices__CSensors__CPedometerReading* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIKeyValuePair_2___x_ABI_CWindows__CDevices__CSensors__CPedometerStepKind___x_ABI_CWindows__CDevices__CSensors__CPedometerReading* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIKeyValuePair_2___x_ABI_CWindows__CDevices__CSensors__CPedometerStepKind___x_ABI_CWindows__CDevices__CSensors__CPedometerReading* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIKeyValuePair_2___x_ABI_CWindows__CDevices__CSensors__CPedometerStepKind___x_ABI_CWindows__CDevices__CSensors__CPedometerReading* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIKeyValuePair_2___x_ABI_CWindows__CDevices__CSensors__CPedometerStepKind___x_ABI_CWindows__CDevices__CSensors__CPedometerReading* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIKeyValuePair_2___x_ABI_CWindows__CDevices__CSensors__CPedometerStepKind___x_ABI_CWindows__CDevices__CSensors__CPedometerReading* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Key)(__x_ABI_C__FIKeyValuePair_2___x_ABI_CWindows__CDevices__CSensors__CPedometerStepKind___x_ABI_CWindows__CDevices__CSensors__CPedometerReading* This,
        enum __x_ABI_CWindows_CDevices_CSensors_CPedometerStepKind* result);
    HRESULT (STDMETHODCALLTYPE* get_Value)(__x_ABI_C__FIKeyValuePair_2___x_ABI_CWindows__CDevices__CSensors__CPedometerStepKind___x_ABI_CWindows__CDevices__CSensors__CPedometerReading* This,
        __x_ABI_CWindows_CDevices_CSensors_CIPedometerReading** result);

        END_INTERFACE
    } __x_ABI_C__FIKeyValuePair_2___x_ABI_CWindows__CDevices__CSensors__CPedometerStepKind___x_ABI_CWindows__CDevices__CSensors__CPedometerReadingVtbl;

    interface __x_ABI_C__FIKeyValuePair_2___x_ABI_CWindows__CDevices__CSensors__CPedometerStepKind___x_ABI_CWindows__CDevices__CSensors__CPedometerReading
    {
        CONST_VTBL struct __x_ABI_C__FIKeyValuePair_2___x_ABI_CWindows__CDevices__CSensors__CPedometerStepKind___x_ABI_CWindows__CDevices__CSensors__CPedometerReadingVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIKeyValuePair_2___x_ABI_CWindows__CDevices__CSensors__CPedometerStepKind___x_ABI_CWindows__CDevices__CSensors__CPedometerReading_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CWindows__CDevices__CSensors__CPedometerStepKind___x_ABI_CWindows__CDevices__CSensors__CPedometerReading_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CWindows__CDevices__CSensors__CPedometerStepKind___x_ABI_CWindows__CDevices__CSensors__CPedometerReading_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CWindows__CDevices__CSensors__CPedometerStepKind___x_ABI_CWindows__CDevices__CSensors__CPedometerReading __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CWindows__CDevices__CSensors__CPedometerStepKind___x_ABI_CWindows__CDevices__CSensors__CPedometerReading;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CWindows__CDevices__CSensors__CPedometerStepKind___x_ABI_CWindows__CDevices__CSensors__CPedometerReading;

    typedef struct __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CWindows__CDevices__CSensors__CPedometerStepKind___x_ABI_CWindows__CDevices__CSensors__CPedometerReadingVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CWindows__CDevices__CSensors__CPedometerStepKind___x_ABI_CWindows__CDevices__CSensors__CPedometerReading* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CWindows__CDevices__CSensors__CPedometerStepKind___x_ABI_CWindows__CDevices__CSensors__CPedometerReading* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CWindows__CDevices__CSensors__CPedometerStepKind___x_ABI_CWindows__CDevices__CSensors__CPedometerReading* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CWindows__CDevices__CSensors__CPedometerStepKind___x_ABI_CWindows__CDevices__CSensors__CPedometerReading* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CWindows__CDevices__CSensors__CPedometerStepKind___x_ABI_CWindows__CDevices__CSensors__CPedometerReading* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CWindows__CDevices__CSensors__CPedometerStepKind___x_ABI_CWindows__CDevices__CSensors__CPedometerReading* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Current)(__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CWindows__CDevices__CSensors__CPedometerStepKind___x_ABI_CWindows__CDevices__CSensors__CPedometerReading* This,
        __x_ABI_C__FIKeyValuePair_2___x_ABI_CWindows__CDevices__CSensors__CPedometerStepKind___x_ABI_CWindows__CDevices__CSensors__CPedometerReading** result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CWindows__CDevices__CSensors__CPedometerStepKind___x_ABI_CWindows__CDevices__CSensors__CPedometerReading* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CWindows__CDevices__CSensors__CPedometerStepKind___x_ABI_CWindows__CDevices__CSensors__CPedometerReading* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CWindows__CDevices__CSensors__CPedometerStepKind___x_ABI_CWindows__CDevices__CSensors__CPedometerReading* This,
        UINT32 itemsLength,
        __x_ABI_C__FIKeyValuePair_2___x_ABI_CWindows__CDevices__CSensors__CPedometerStepKind___x_ABI_CWindows__CDevices__CSensors__CPedometerReading** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CWindows__CDevices__CSensors__CPedometerStepKind___x_ABI_CWindows__CDevices__CSensors__CPedometerReadingVtbl;

    interface __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CWindows__CDevices__CSensors__CPedometerStepKind___x_ABI_CWindows__CDevices__CSensors__CPedometerReading
    {
        CONST_VTBL struct __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CWindows__CDevices__CSensors__CPedometerStepKind___x_ABI_CWindows__CDevices__CSensors__CPedometerReadingVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CWindows__CDevices__CSensors__CPedometerStepKind___x_ABI_CWindows__CDevices__CSensors__CPedometerReading_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CWindows__CDevices__CSensors__CPedometerStepKind___x_ABI_CWindows__CDevices__CSensors__CPedometerReading_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CWindows__CDevices__CSensors__CPedometerStepKind___x_ABI_CWindows__CDevices__CSensors__CPedometerReading_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CWindows__CDevices__CSensors__CPedometerStepKind___x_ABI_CWindows__CDevices__CSensors__CPedometerReading __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CWindows__CDevices__CSensors__CPedometerStepKind___x_ABI_CWindows__CDevices__CSensors__CPedometerReading;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CWindows__CDevices__CSensors__CPedometerStepKind___x_ABI_CWindows__CDevices__CSensors__CPedometerReading;

    typedef struct __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CWindows__CDevices__CSensors__CPedometerStepKind___x_ABI_CWindows__CDevices__CSensors__CPedometerReadingVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CWindows__CDevices__CSensors__CPedometerStepKind___x_ABI_CWindows__CDevices__CSensors__CPedometerReading* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CWindows__CDevices__CSensors__CPedometerStepKind___x_ABI_CWindows__CDevices__CSensors__CPedometerReading* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CWindows__CDevices__CSensors__CPedometerStepKind___x_ABI_CWindows__CDevices__CSensors__CPedometerReading* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CWindows__CDevices__CSensors__CPedometerStepKind___x_ABI_CWindows__CDevices__CSensors__CPedometerReading* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CWindows__CDevices__CSensors__CPedometerStepKind___x_ABI_CWindows__CDevices__CSensors__CPedometerReading* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CWindows__CDevices__CSensors__CPedometerStepKind___x_ABI_CWindows__CDevices__CSensors__CPedometerReading* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* First)(__x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CWindows__CDevices__CSensors__CPedometerStepKind___x_ABI_CWindows__CDevices__CSensors__CPedometerReading* This,
        __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CWindows__CDevices__CSensors__CPedometerStepKind___x_ABI_CWindows__CDevices__CSensors__CPedometerReading** result);

        END_INTERFACE
    } __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CWindows__CDevices__CSensors__CPedometerStepKind___x_ABI_CWindows__CDevices__CSensors__CPedometerReadingVtbl;

    interface __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CWindows__CDevices__CSensors__CPedometerStepKind___x_ABI_CWindows__CDevices__CSensors__CPedometerReading
    {
        CONST_VTBL struct __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CWindows__CDevices__CSensors__CPedometerStepKind___x_ABI_CWindows__CDevices__CSensors__CPedometerReadingVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CWindows__CDevices__CSensors__CPedometerStepKind___x_ABI_CWindows__CDevices__CSensors__CPedometerReading_INTERFACE_DEFINED__
    
typedef interface __x_ABI_C__FIMapView_2_HSTRING_IInspectable __x_ABI_C__FIMapView_2_HSTRING_IInspectable;

#if !defined(____x_ABI_C__FIMapView_2_HSTRING_IInspectable_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIMapView_2_HSTRING_IInspectable_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIMapView_2_HSTRING_IInspectable __x_ABI_C__FIMapView_2_HSTRING_IInspectable;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIMapView_2_HSTRING_IInspectable;

    typedef struct __x_ABI_C__FIMapView_2_HSTRING_IInspectableVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIMapView_2_HSTRING_IInspectable* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIMapView_2_HSTRING_IInspectable* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIMapView_2_HSTRING_IInspectable* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIMapView_2_HSTRING_IInspectable* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIMapView_2_HSTRING_IInspectable* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIMapView_2_HSTRING_IInspectable* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* Lookup)(__x_ABI_C__FIMapView_2_HSTRING_IInspectable* This,
        HSTRING key,
        IInspectable** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIMapView_2_HSTRING_IInspectable* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* HasKey)(__x_ABI_C__FIMapView_2_HSTRING_IInspectable* This,
        HSTRING key,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* Split)(__x_ABI_C__FIMapView_2_HSTRING_IInspectable* This,
        __x_ABI_C__FIMapView_2_HSTRING_IInspectable** first,
        __x_ABI_C__FIMapView_2_HSTRING_IInspectable** second);

        END_INTERFACE
    } __x_ABI_C__FIMapView_2_HSTRING_IInspectableVtbl;

    interface __x_ABI_C__FIMapView_2_HSTRING_IInspectable
    {
        CONST_VTBL struct __x_ABI_C__FIMapView_2_HSTRING_IInspectableVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIMapView_2_HSTRING_IInspectable_INTERFACE_DEFINED__
    
typedef interface __x_ABI_C__FIMapView_2___x_ABI_CWindows__CDevices__CSensors__CPedometerStepKind___x_ABI_CWindows__CDevices__CSensors__CPedometerReading __x_ABI_C__FIMapView_2___x_ABI_CWindows__CDevices__CSensors__CPedometerStepKind___x_ABI_CWindows__CDevices__CSensors__CPedometerReading;

#if !defined(____x_ABI_C__FIMapView_2___x_ABI_CWindows__CDevices__CSensors__CPedometerStepKind___x_ABI_CWindows__CDevices__CSensors__CPedometerReading_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIMapView_2___x_ABI_CWindows__CDevices__CSensors__CPedometerStepKind___x_ABI_CWindows__CDevices__CSensors__CPedometerReading_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIMapView_2___x_ABI_CWindows__CDevices__CSensors__CPedometerStepKind___x_ABI_CWindows__CDevices__CSensors__CPedometerReading __x_ABI_C__FIMapView_2___x_ABI_CWindows__CDevices__CSensors__CPedometerStepKind___x_ABI_CWindows__CDevices__CSensors__CPedometerReading;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIMapView_2___x_ABI_CWindows__CDevices__CSensors__CPedometerStepKind___x_ABI_CWindows__CDevices__CSensors__CPedometerReading;

    typedef struct __x_ABI_C__FIMapView_2___x_ABI_CWindows__CDevices__CSensors__CPedometerStepKind___x_ABI_CWindows__CDevices__CSensors__CPedometerReadingVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIMapView_2___x_ABI_CWindows__CDevices__CSensors__CPedometerStepKind___x_ABI_CWindows__CDevices__CSensors__CPedometerReading* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIMapView_2___x_ABI_CWindows__CDevices__CSensors__CPedometerStepKind___x_ABI_CWindows__CDevices__CSensors__CPedometerReading* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIMapView_2___x_ABI_CWindows__CDevices__CSensors__CPedometerStepKind___x_ABI_CWindows__CDevices__CSensors__CPedometerReading* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIMapView_2___x_ABI_CWindows__CDevices__CSensors__CPedometerStepKind___x_ABI_CWindows__CDevices__CSensors__CPedometerReading* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIMapView_2___x_ABI_CWindows__CDevices__CSensors__CPedometerStepKind___x_ABI_CWindows__CDevices__CSensors__CPedometerReading* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIMapView_2___x_ABI_CWindows__CDevices__CSensors__CPedometerStepKind___x_ABI_CWindows__CDevices__CSensors__CPedometerReading* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* Lookup)(__x_ABI_C__FIMapView_2___x_ABI_CWindows__CDevices__CSensors__CPedometerStepKind___x_ABI_CWindows__CDevices__CSensors__CPedometerReading* This,
        enum __x_ABI_CWindows_CDevices_CSensors_CPedometerStepKind key,
        __x_ABI_CWindows_CDevices_CSensors_CIPedometerReading** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIMapView_2___x_ABI_CWindows__CDevices__CSensors__CPedometerStepKind___x_ABI_CWindows__CDevices__CSensors__CPedometerReading* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* HasKey)(__x_ABI_C__FIMapView_2___x_ABI_CWindows__CDevices__CSensors__CPedometerStepKind___x_ABI_CWindows__CDevices__CSensors__CPedometerReading* This,
        enum __x_ABI_CWindows_CDevices_CSensors_CPedometerStepKind key,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* Split)(__x_ABI_C__FIMapView_2___x_ABI_CWindows__CDevices__CSensors__CPedometerStepKind___x_ABI_CWindows__CDevices__CSensors__CPedometerReading* This,
        __x_ABI_C__FIMapView_2___x_ABI_CWindows__CDevices__CSensors__CPedometerStepKind___x_ABI_CWindows__CDevices__CSensors__CPedometerReading** first,
        __x_ABI_C__FIMapView_2___x_ABI_CWindows__CDevices__CSensors__CPedometerStepKind___x_ABI_CWindows__CDevices__CSensors__CPedometerReading** second);

        END_INTERFACE
    } __x_ABI_C__FIMapView_2___x_ABI_CWindows__CDevices__CSensors__CPedometerStepKind___x_ABI_CWindows__CDevices__CSensors__CPedometerReadingVtbl;

    interface __x_ABI_C__FIMapView_2___x_ABI_CWindows__CDevices__CSensors__CPedometerStepKind___x_ABI_CWindows__CDevices__CSensors__CPedometerReading
    {
        CONST_VTBL struct __x_ABI_C__FIMapView_2___x_ABI_CWindows__CDevices__CSensors__CPedometerStepKind___x_ABI_CWindows__CDevices__CSensors__CPedometerReadingVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIMapView_2___x_ABI_CWindows__CDevices__CSensors__CPedometerStepKind___x_ABI_CWindows__CDevices__CSensors__CPedometerReading_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CSensors__CActivitySensorReadingChangeReport_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CSensors__CActivitySensorReadingChangeReport_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CSensors__CActivitySensorReadingChangeReport __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CSensors__CActivitySensorReadingChangeReport;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CSensors__CActivitySensorReadingChangeReport;

    typedef struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CSensors__CActivitySensorReadingChangeReportVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CSensors__CActivitySensorReadingChangeReport* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CSensors__CActivitySensorReadingChangeReport* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CSensors__CActivitySensorReadingChangeReport* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CSensors__CActivitySensorReadingChangeReport* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CSensors__CActivitySensorReadingChangeReport* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CSensors__CActivitySensorReadingChangeReport* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CSensors__CActivitySensorReadingChangeReport* This,
        UINT32 index,
        __x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReadingChangeReport** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CSensors__CActivitySensorReadingChangeReport* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CSensors__CActivitySensorReadingChangeReport* This,
        __x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReadingChangeReport* value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CSensors__CActivitySensorReadingChangeReport* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        __x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReadingChangeReport** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CSensors__CActivitySensorReadingChangeReportVtbl;

    interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CSensors__CActivitySensorReadingChangeReport
    {
        CONST_VTBL struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CSensors__CActivitySensorReadingChangeReportVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CSensors__CActivitySensorReadingChangeReport_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CSensors__CActivityType_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CSensors__CActivityType_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CSensors__CActivityType __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CSensors__CActivityType;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CSensors__CActivityType;

    typedef struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CSensors__CActivityTypeVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CSensors__CActivityType* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CSensors__CActivityType* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CSensors__CActivityType* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CSensors__CActivityType* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CSensors__CActivityType* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CSensors__CActivityType* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CSensors__CActivityType* This,
        UINT32 index,
        enum __x_ABI_CWindows_CDevices_CSensors_CActivityType* result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CSensors__CActivityType* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CSensors__CActivityType* This,
        enum __x_ABI_CWindows_CDevices_CSensors_CActivityType value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CSensors__CActivityType* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        enum __x_ABI_CWindows_CDevices_CSensors_CActivityType* items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CSensors__CActivityTypeVtbl;

    interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CSensors__CActivityType
    {
        CONST_VTBL struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CSensors__CActivityTypeVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CSensors__CActivityType_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CSensors__CProximitySensorReading_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CSensors__CProximitySensorReading_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CSensors__CProximitySensorReading __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CSensors__CProximitySensorReading;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CSensors__CProximitySensorReading;

    typedef struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CSensors__CProximitySensorReadingVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CSensors__CProximitySensorReading* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CSensors__CProximitySensorReading* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CSensors__CProximitySensorReading* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CSensors__CProximitySensorReading* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CSensors__CProximitySensorReading* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CSensors__CProximitySensorReading* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CSensors__CProximitySensorReading* This,
        UINT32 index,
        __x_ABI_CWindows_CDevices_CSensors_CIProximitySensorReading** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CSensors__CProximitySensorReading* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CSensors__CProximitySensorReading* This,
        __x_ABI_CWindows_CDevices_CSensors_CIProximitySensorReading* value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CSensors__CProximitySensorReading* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        __x_ABI_CWindows_CDevices_CSensors_CIProximitySensorReading** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CSensors__CProximitySensorReadingVtbl;

    interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CSensors__CProximitySensorReading
    {
        CONST_VTBL struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CSensors__CProximitySensorReadingVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CSensors__CProximitySensorReading_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVector_1___x_ABI_CWindows__CDevices__CSensors__CActivityType_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVector_1___x_ABI_CWindows__CDevices__CSensors__CActivityType_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVector_1___x_ABI_CWindows__CDevices__CSensors__CActivityType __x_ABI_C__FIVector_1___x_ABI_CWindows__CDevices__CSensors__CActivityType;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVector_1___x_ABI_CWindows__CDevices__CSensors__CActivityType;

    typedef struct __x_ABI_C__FIVector_1___x_ABI_CWindows__CDevices__CSensors__CActivityTypeVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CDevices__CSensors__CActivityType* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CDevices__CSensors__CActivityType* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CDevices__CSensors__CActivityType* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CDevices__CSensors__CActivityType* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CDevices__CSensors__CActivityType* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CDevices__CSensors__CActivityType* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CDevices__CSensors__CActivityType* This,
        UINT32 index,
        enum __x_ABI_CWindows_CDevices_CSensors_CActivityType* result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CDevices__CSensors__CActivityType* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* GetView)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CDevices__CSensors__CActivityType* This,
        __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CSensors__CActivityType** result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CDevices__CSensors__CActivityType* This,
        enum __x_ABI_CWindows_CDevices_CSensors_CActivityType value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* SetAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CDevices__CSensors__CActivityType* This,
        UINT32 index,
        enum __x_ABI_CWindows_CDevices_CSensors_CActivityType value);
    HRESULT (STDMETHODCALLTYPE* InsertAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CDevices__CSensors__CActivityType* This,
        UINT32 index,
        enum __x_ABI_CWindows_CDevices_CSensors_CActivityType value);
    HRESULT (STDMETHODCALLTYPE* RemoveAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CDevices__CSensors__CActivityType* This,
        UINT32 index);
    HRESULT (STDMETHODCALLTYPE* Append)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CDevices__CSensors__CActivityType* This,
        enum __x_ABI_CWindows_CDevices_CSensors_CActivityType value);
    HRESULT (STDMETHODCALLTYPE* RemoveAtEnd)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CDevices__CSensors__CActivityType* This);
    HRESULT (STDMETHODCALLTYPE* Clear)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CDevices__CSensors__CActivityType* This);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CDevices__CSensors__CActivityType* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        enum __x_ABI_CWindows_CDevices_CSensors_CActivityType* items,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* ReplaceAll)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CDevices__CSensors__CActivityType* This,
        UINT32 itemsLength,
        enum __x_ABI_CWindows_CDevices_CSensors_CActivityType* items);

        END_INTERFACE
    } __x_ABI_C__FIVector_1___x_ABI_CWindows__CDevices__CSensors__CActivityTypeVtbl;

    interface __x_ABI_C__FIVector_1___x_ABI_CWindows__CDevices__CSensors__CActivityType
    {
        CONST_VTBL struct __x_ABI_C__FIVector_1___x_ABI_CWindows__CDevices__CSensors__CActivityTypeVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVector_1___x_ABI_CWindows__CDevices__CSensors__CActivityType_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIReference_1_double_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIReference_1_double_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIReference_1_double __x_ABI_C__FIReference_1_double;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIReference_1_double;

    typedef struct __x_ABI_C__FIReference_1_doubleVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIReference_1_double* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIReference_1_double* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIReference_1_double* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIReference_1_double* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIReference_1_double* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIReference_1_double* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Value)(__x_ABI_C__FIReference_1_double* This,
        DOUBLE* result);

        END_INTERFACE
    } __x_ABI_C__FIReference_1_doubleVtbl;

    interface __x_ABI_C__FIReference_1_double
    {
        CONST_VTBL struct __x_ABI_C__FIReference_1_doubleVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIReference_1_double_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIReference_1_UINT32_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIReference_1_UINT32_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIReference_1_UINT32 __x_ABI_C__FIReference_1_UINT32;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIReference_1_UINT32;

    typedef struct __x_ABI_C__FIReference_1_UINT32Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIReference_1_UINT32* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIReference_1_UINT32* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIReference_1_UINT32* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIReference_1_UINT32* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIReference_1_UINT32* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIReference_1_UINT32* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Value)(__x_ABI_C__FIReference_1_UINT32* This,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIReference_1_UINT32Vtbl;

    interface __x_ABI_C__FIReference_1_UINT32
    {
        CONST_VTBL struct __x_ABI_C__FIReference_1_UINT32Vtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIReference_1_UINT32_INTERFACE_DEFINED__
    
typedef struct __x_ABI_CWindows_CFoundation_CTimeSpan __x_ABI_CWindows_CFoundation_CTimeSpan;

#if !defined(____x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CTimeSpan_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CTimeSpan_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CTimeSpan __x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CTimeSpan;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CTimeSpan;

    typedef struct __x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CTimeSpanVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CTimeSpan* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CTimeSpan* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CTimeSpan* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CTimeSpan* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CTimeSpan* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CTimeSpan* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Value)(__x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CTimeSpan* This,
        struct __x_ABI_CWindows_CFoundation_CTimeSpan* result);

        END_INTERFACE
    } __x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CTimeSpanVtbl;

    interface __x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CTimeSpan
    {
        CONST_VTBL struct __x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CTimeSpanVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CTimeSpan_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CSensors__CAccelerometer___x_ABI_CWindows__CDevices__CSensors__CAccelerometerReadingChangedEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CSensors__CAccelerometer___x_ABI_CWindows__CDevices__CSensors__CAccelerometerReadingChangedEventArgs_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CSensors__CAccelerometer___x_ABI_CWindows__CDevices__CSensors__CAccelerometerReadingChangedEventArgs __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CSensors__CAccelerometer___x_ABI_CWindows__CDevices__CSensors__CAccelerometerReadingChangedEventArgs;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CSensors__CAccelerometer___x_ABI_CWindows__CDevices__CSensors__CAccelerometerReadingChangedEventArgs;

    typedef struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CSensors__CAccelerometer___x_ABI_CWindows__CDevices__CSensors__CAccelerometerReadingChangedEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CSensors__CAccelerometer___x_ABI_CWindows__CDevices__CSensors__CAccelerometerReadingChangedEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CSensors__CAccelerometer___x_ABI_CWindows__CDevices__CSensors__CAccelerometerReadingChangedEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CSensors__CAccelerometer___x_ABI_CWindows__CDevices__CSensors__CAccelerometerReadingChangedEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CSensors__CAccelerometer___x_ABI_CWindows__CDevices__CSensors__CAccelerometerReadingChangedEventArgs* This,
        __x_ABI_CWindows_CDevices_CSensors_CIAccelerometer* sender,
        __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerReadingChangedEventArgs* args);

        END_INTERFACE
    } __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CSensors__CAccelerometer___x_ABI_CWindows__CDevices__CSensors__CAccelerometerReadingChangedEventArgsVtbl;

    interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CSensors__CAccelerometer___x_ABI_CWindows__CDevices__CSensors__CAccelerometerReadingChangedEventArgs
    {
        CONST_VTBL struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CSensors__CAccelerometer___x_ABI_CWindows__CDevices__CSensors__CAccelerometerReadingChangedEventArgsVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CSensors__CAccelerometer___x_ABI_CWindows__CDevices__CSensors__CAccelerometerReadingChangedEventArgs_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CSensors__CAccelerometer___x_ABI_CWindows__CDevices__CSensors__CAccelerometerShakenEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CSensors__CAccelerometer___x_ABI_CWindows__CDevices__CSensors__CAccelerometerShakenEventArgs_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CSensors__CAccelerometer___x_ABI_CWindows__CDevices__CSensors__CAccelerometerShakenEventArgs __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CSensors__CAccelerometer___x_ABI_CWindows__CDevices__CSensors__CAccelerometerShakenEventArgs;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CSensors__CAccelerometer___x_ABI_CWindows__CDevices__CSensors__CAccelerometerShakenEventArgs;

    typedef struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CSensors__CAccelerometer___x_ABI_CWindows__CDevices__CSensors__CAccelerometerShakenEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CSensors__CAccelerometer___x_ABI_CWindows__CDevices__CSensors__CAccelerometerShakenEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CSensors__CAccelerometer___x_ABI_CWindows__CDevices__CSensors__CAccelerometerShakenEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CSensors__CAccelerometer___x_ABI_CWindows__CDevices__CSensors__CAccelerometerShakenEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CSensors__CAccelerometer___x_ABI_CWindows__CDevices__CSensors__CAccelerometerShakenEventArgs* This,
        __x_ABI_CWindows_CDevices_CSensors_CIAccelerometer* sender,
        __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerShakenEventArgs* args);

        END_INTERFACE
    } __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CSensors__CAccelerometer___x_ABI_CWindows__CDevices__CSensors__CAccelerometerShakenEventArgsVtbl;

    interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CSensors__CAccelerometer___x_ABI_CWindows__CDevices__CSensors__CAccelerometerShakenEventArgs
    {
        CONST_VTBL struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CSensors__CAccelerometer___x_ABI_CWindows__CDevices__CSensors__CAccelerometerShakenEventArgsVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CSensors__CAccelerometer___x_ABI_CWindows__CDevices__CSensors__CAccelerometerShakenEventArgs_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CSensors__CActivitySensor___x_ABI_CWindows__CDevices__CSensors__CActivitySensorReadingChangedEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CSensors__CActivitySensor___x_ABI_CWindows__CDevices__CSensors__CActivitySensorReadingChangedEventArgs_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CSensors__CActivitySensor___x_ABI_CWindows__CDevices__CSensors__CActivitySensorReadingChangedEventArgs __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CSensors__CActivitySensor___x_ABI_CWindows__CDevices__CSensors__CActivitySensorReadingChangedEventArgs;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CSensors__CActivitySensor___x_ABI_CWindows__CDevices__CSensors__CActivitySensorReadingChangedEventArgs;

    typedef struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CSensors__CActivitySensor___x_ABI_CWindows__CDevices__CSensors__CActivitySensorReadingChangedEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CSensors__CActivitySensor___x_ABI_CWindows__CDevices__CSensors__CActivitySensorReadingChangedEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CSensors__CActivitySensor___x_ABI_CWindows__CDevices__CSensors__CActivitySensorReadingChangedEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CSensors__CActivitySensor___x_ABI_CWindows__CDevices__CSensors__CActivitySensorReadingChangedEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CSensors__CActivitySensor___x_ABI_CWindows__CDevices__CSensors__CActivitySensorReadingChangedEventArgs* This,
        __x_ABI_CWindows_CDevices_CSensors_CIActivitySensor* sender,
        __x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReadingChangedEventArgs* args);

        END_INTERFACE
    } __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CSensors__CActivitySensor___x_ABI_CWindows__CDevices__CSensors__CActivitySensorReadingChangedEventArgsVtbl;

    interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CSensors__CActivitySensor___x_ABI_CWindows__CDevices__CSensors__CActivitySensorReadingChangedEventArgs
    {
        CONST_VTBL struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CSensors__CActivitySensor___x_ABI_CWindows__CDevices__CSensors__CActivitySensorReadingChangedEventArgsVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CSensors__CActivitySensor___x_ABI_CWindows__CDevices__CSensors__CActivitySensorReadingChangedEventArgs_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CSensors__CAltimeter___x_ABI_CWindows__CDevices__CSensors__CAltimeterReadingChangedEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CSensors__CAltimeter___x_ABI_CWindows__CDevices__CSensors__CAltimeterReadingChangedEventArgs_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CSensors__CAltimeter___x_ABI_CWindows__CDevices__CSensors__CAltimeterReadingChangedEventArgs __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CSensors__CAltimeter___x_ABI_CWindows__CDevices__CSensors__CAltimeterReadingChangedEventArgs;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CSensors__CAltimeter___x_ABI_CWindows__CDevices__CSensors__CAltimeterReadingChangedEventArgs;

    typedef struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CSensors__CAltimeter___x_ABI_CWindows__CDevices__CSensors__CAltimeterReadingChangedEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CSensors__CAltimeter___x_ABI_CWindows__CDevices__CSensors__CAltimeterReadingChangedEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CSensors__CAltimeter___x_ABI_CWindows__CDevices__CSensors__CAltimeterReadingChangedEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CSensors__CAltimeter___x_ABI_CWindows__CDevices__CSensors__CAltimeterReadingChangedEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CSensors__CAltimeter___x_ABI_CWindows__CDevices__CSensors__CAltimeterReadingChangedEventArgs* This,
        __x_ABI_CWindows_CDevices_CSensors_CIAltimeter* sender,
        __x_ABI_CWindows_CDevices_CSensors_CIAltimeterReadingChangedEventArgs* args);

        END_INTERFACE
    } __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CSensors__CAltimeter___x_ABI_CWindows__CDevices__CSensors__CAltimeterReadingChangedEventArgsVtbl;

    interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CSensors__CAltimeter___x_ABI_CWindows__CDevices__CSensors__CAltimeterReadingChangedEventArgs
    {
        CONST_VTBL struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CSensors__CAltimeter___x_ABI_CWindows__CDevices__CSensors__CAltimeterReadingChangedEventArgsVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CSensors__CAltimeter___x_ABI_CWindows__CDevices__CSensors__CAltimeterReadingChangedEventArgs_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CSensors__CBarometer___x_ABI_CWindows__CDevices__CSensors__CBarometerReadingChangedEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CSensors__CBarometer___x_ABI_CWindows__CDevices__CSensors__CBarometerReadingChangedEventArgs_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CSensors__CBarometer___x_ABI_CWindows__CDevices__CSensors__CBarometerReadingChangedEventArgs __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CSensors__CBarometer___x_ABI_CWindows__CDevices__CSensors__CBarometerReadingChangedEventArgs;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CSensors__CBarometer___x_ABI_CWindows__CDevices__CSensors__CBarometerReadingChangedEventArgs;

    typedef struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CSensors__CBarometer___x_ABI_CWindows__CDevices__CSensors__CBarometerReadingChangedEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CSensors__CBarometer___x_ABI_CWindows__CDevices__CSensors__CBarometerReadingChangedEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CSensors__CBarometer___x_ABI_CWindows__CDevices__CSensors__CBarometerReadingChangedEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CSensors__CBarometer___x_ABI_CWindows__CDevices__CSensors__CBarometerReadingChangedEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CSensors__CBarometer___x_ABI_CWindows__CDevices__CSensors__CBarometerReadingChangedEventArgs* This,
        __x_ABI_CWindows_CDevices_CSensors_CIBarometer* sender,
        __x_ABI_CWindows_CDevices_CSensors_CIBarometerReadingChangedEventArgs* args);

        END_INTERFACE
    } __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CSensors__CBarometer___x_ABI_CWindows__CDevices__CSensors__CBarometerReadingChangedEventArgsVtbl;

    interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CSensors__CBarometer___x_ABI_CWindows__CDevices__CSensors__CBarometerReadingChangedEventArgs
    {
        CONST_VTBL struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CSensors__CBarometer___x_ABI_CWindows__CDevices__CSensors__CBarometerReadingChangedEventArgsVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CSensors__CBarometer___x_ABI_CWindows__CDevices__CSensors__CBarometerReadingChangedEventArgs_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CSensors__CCompass___x_ABI_CWindows__CDevices__CSensors__CCompassReadingChangedEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CSensors__CCompass___x_ABI_CWindows__CDevices__CSensors__CCompassReadingChangedEventArgs_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CSensors__CCompass___x_ABI_CWindows__CDevices__CSensors__CCompassReadingChangedEventArgs __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CSensors__CCompass___x_ABI_CWindows__CDevices__CSensors__CCompassReadingChangedEventArgs;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CSensors__CCompass___x_ABI_CWindows__CDevices__CSensors__CCompassReadingChangedEventArgs;

    typedef struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CSensors__CCompass___x_ABI_CWindows__CDevices__CSensors__CCompassReadingChangedEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CSensors__CCompass___x_ABI_CWindows__CDevices__CSensors__CCompassReadingChangedEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CSensors__CCompass___x_ABI_CWindows__CDevices__CSensors__CCompassReadingChangedEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CSensors__CCompass___x_ABI_CWindows__CDevices__CSensors__CCompassReadingChangedEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CSensors__CCompass___x_ABI_CWindows__CDevices__CSensors__CCompassReadingChangedEventArgs* This,
        __x_ABI_CWindows_CDevices_CSensors_CICompass* sender,
        __x_ABI_CWindows_CDevices_CSensors_CICompassReadingChangedEventArgs* args);

        END_INTERFACE
    } __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CSensors__CCompass___x_ABI_CWindows__CDevices__CSensors__CCompassReadingChangedEventArgsVtbl;

    interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CSensors__CCompass___x_ABI_CWindows__CDevices__CSensors__CCompassReadingChangedEventArgs
    {
        CONST_VTBL struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CSensors__CCompass___x_ABI_CWindows__CDevices__CSensors__CCompassReadingChangedEventArgsVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CSensors__CCompass___x_ABI_CWindows__CDevices__CSensors__CCompassReadingChangedEventArgs_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CSensors__CGyrometer___x_ABI_CWindows__CDevices__CSensors__CGyrometerReadingChangedEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CSensors__CGyrometer___x_ABI_CWindows__CDevices__CSensors__CGyrometerReadingChangedEventArgs_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CSensors__CGyrometer___x_ABI_CWindows__CDevices__CSensors__CGyrometerReadingChangedEventArgs __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CSensors__CGyrometer___x_ABI_CWindows__CDevices__CSensors__CGyrometerReadingChangedEventArgs;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CSensors__CGyrometer___x_ABI_CWindows__CDevices__CSensors__CGyrometerReadingChangedEventArgs;

    typedef struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CSensors__CGyrometer___x_ABI_CWindows__CDevices__CSensors__CGyrometerReadingChangedEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CSensors__CGyrometer___x_ABI_CWindows__CDevices__CSensors__CGyrometerReadingChangedEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CSensors__CGyrometer___x_ABI_CWindows__CDevices__CSensors__CGyrometerReadingChangedEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CSensors__CGyrometer___x_ABI_CWindows__CDevices__CSensors__CGyrometerReadingChangedEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CSensors__CGyrometer___x_ABI_CWindows__CDevices__CSensors__CGyrometerReadingChangedEventArgs* This,
        __x_ABI_CWindows_CDevices_CSensors_CIGyrometer* sender,
        __x_ABI_CWindows_CDevices_CSensors_CIGyrometerReadingChangedEventArgs* args);

        END_INTERFACE
    } __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CSensors__CGyrometer___x_ABI_CWindows__CDevices__CSensors__CGyrometerReadingChangedEventArgsVtbl;

    interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CSensors__CGyrometer___x_ABI_CWindows__CDevices__CSensors__CGyrometerReadingChangedEventArgs
    {
        CONST_VTBL struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CSensors__CGyrometer___x_ABI_CWindows__CDevices__CSensors__CGyrometerReadingChangedEventArgsVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CSensors__CGyrometer___x_ABI_CWindows__CDevices__CSensors__CGyrometerReadingChangedEventArgs_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CSensors__CHingeAngleSensor___x_ABI_CWindows__CDevices__CSensors__CHingeAngleSensorReadingChangedEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CSensors__CHingeAngleSensor___x_ABI_CWindows__CDevices__CSensors__CHingeAngleSensorReadingChangedEventArgs_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CSensors__CHingeAngleSensor___x_ABI_CWindows__CDevices__CSensors__CHingeAngleSensorReadingChangedEventArgs __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CSensors__CHingeAngleSensor___x_ABI_CWindows__CDevices__CSensors__CHingeAngleSensorReadingChangedEventArgs;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CSensors__CHingeAngleSensor___x_ABI_CWindows__CDevices__CSensors__CHingeAngleSensorReadingChangedEventArgs;

    typedef struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CSensors__CHingeAngleSensor___x_ABI_CWindows__CDevices__CSensors__CHingeAngleSensorReadingChangedEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CSensors__CHingeAngleSensor___x_ABI_CWindows__CDevices__CSensors__CHingeAngleSensorReadingChangedEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CSensors__CHingeAngleSensor___x_ABI_CWindows__CDevices__CSensors__CHingeAngleSensorReadingChangedEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CSensors__CHingeAngleSensor___x_ABI_CWindows__CDevices__CSensors__CHingeAngleSensorReadingChangedEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CSensors__CHingeAngleSensor___x_ABI_CWindows__CDevices__CSensors__CHingeAngleSensorReadingChangedEventArgs* This,
        __x_ABI_CWindows_CDevices_CSensors_CIHingeAngleSensor* sender,
        __x_ABI_CWindows_CDevices_CSensors_CIHingeAngleSensorReadingChangedEventArgs* args);

        END_INTERFACE
    } __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CSensors__CHingeAngleSensor___x_ABI_CWindows__CDevices__CSensors__CHingeAngleSensorReadingChangedEventArgsVtbl;

    interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CSensors__CHingeAngleSensor___x_ABI_CWindows__CDevices__CSensors__CHingeAngleSensorReadingChangedEventArgs
    {
        CONST_VTBL struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CSensors__CHingeAngleSensor___x_ABI_CWindows__CDevices__CSensors__CHingeAngleSensorReadingChangedEventArgsVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CSensors__CHingeAngleSensor___x_ABI_CWindows__CDevices__CSensors__CHingeAngleSensorReadingChangedEventArgs_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CSensors__CInclinometer___x_ABI_CWindows__CDevices__CSensors__CInclinometerReadingChangedEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CSensors__CInclinometer___x_ABI_CWindows__CDevices__CSensors__CInclinometerReadingChangedEventArgs_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CSensors__CInclinometer___x_ABI_CWindows__CDevices__CSensors__CInclinometerReadingChangedEventArgs __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CSensors__CInclinometer___x_ABI_CWindows__CDevices__CSensors__CInclinometerReadingChangedEventArgs;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CSensors__CInclinometer___x_ABI_CWindows__CDevices__CSensors__CInclinometerReadingChangedEventArgs;

    typedef struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CSensors__CInclinometer___x_ABI_CWindows__CDevices__CSensors__CInclinometerReadingChangedEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CSensors__CInclinometer___x_ABI_CWindows__CDevices__CSensors__CInclinometerReadingChangedEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CSensors__CInclinometer___x_ABI_CWindows__CDevices__CSensors__CInclinometerReadingChangedEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CSensors__CInclinometer___x_ABI_CWindows__CDevices__CSensors__CInclinometerReadingChangedEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CSensors__CInclinometer___x_ABI_CWindows__CDevices__CSensors__CInclinometerReadingChangedEventArgs* This,
        __x_ABI_CWindows_CDevices_CSensors_CIInclinometer* sender,
        __x_ABI_CWindows_CDevices_CSensors_CIInclinometerReadingChangedEventArgs* args);

        END_INTERFACE
    } __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CSensors__CInclinometer___x_ABI_CWindows__CDevices__CSensors__CInclinometerReadingChangedEventArgsVtbl;

    interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CSensors__CInclinometer___x_ABI_CWindows__CDevices__CSensors__CInclinometerReadingChangedEventArgs
    {
        CONST_VTBL struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CSensors__CInclinometer___x_ABI_CWindows__CDevices__CSensors__CInclinometerReadingChangedEventArgsVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CSensors__CInclinometer___x_ABI_CWindows__CDevices__CSensors__CInclinometerReadingChangedEventArgs_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CSensors__CLightSensor___x_ABI_CWindows__CDevices__CSensors__CLightSensorReadingChangedEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CSensors__CLightSensor___x_ABI_CWindows__CDevices__CSensors__CLightSensorReadingChangedEventArgs_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CSensors__CLightSensor___x_ABI_CWindows__CDevices__CSensors__CLightSensorReadingChangedEventArgs __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CSensors__CLightSensor___x_ABI_CWindows__CDevices__CSensors__CLightSensorReadingChangedEventArgs;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CSensors__CLightSensor___x_ABI_CWindows__CDevices__CSensors__CLightSensorReadingChangedEventArgs;

    typedef struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CSensors__CLightSensor___x_ABI_CWindows__CDevices__CSensors__CLightSensorReadingChangedEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CSensors__CLightSensor___x_ABI_CWindows__CDevices__CSensors__CLightSensorReadingChangedEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CSensors__CLightSensor___x_ABI_CWindows__CDevices__CSensors__CLightSensorReadingChangedEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CSensors__CLightSensor___x_ABI_CWindows__CDevices__CSensors__CLightSensorReadingChangedEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CSensors__CLightSensor___x_ABI_CWindows__CDevices__CSensors__CLightSensorReadingChangedEventArgs* This,
        __x_ABI_CWindows_CDevices_CSensors_CILightSensor* sender,
        __x_ABI_CWindows_CDevices_CSensors_CILightSensorReadingChangedEventArgs* args);

        END_INTERFACE
    } __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CSensors__CLightSensor___x_ABI_CWindows__CDevices__CSensors__CLightSensorReadingChangedEventArgsVtbl;

    interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CSensors__CLightSensor___x_ABI_CWindows__CDevices__CSensors__CLightSensorReadingChangedEventArgs
    {
        CONST_VTBL struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CSensors__CLightSensor___x_ABI_CWindows__CDevices__CSensors__CLightSensorReadingChangedEventArgsVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CSensors__CLightSensor___x_ABI_CWindows__CDevices__CSensors__CLightSensorReadingChangedEventArgs_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CSensors__CMagnetometer___x_ABI_CWindows__CDevices__CSensors__CMagnetometerReadingChangedEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CSensors__CMagnetometer___x_ABI_CWindows__CDevices__CSensors__CMagnetometerReadingChangedEventArgs_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CSensors__CMagnetometer___x_ABI_CWindows__CDevices__CSensors__CMagnetometerReadingChangedEventArgs __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CSensors__CMagnetometer___x_ABI_CWindows__CDevices__CSensors__CMagnetometerReadingChangedEventArgs;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CSensors__CMagnetometer___x_ABI_CWindows__CDevices__CSensors__CMagnetometerReadingChangedEventArgs;

    typedef struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CSensors__CMagnetometer___x_ABI_CWindows__CDevices__CSensors__CMagnetometerReadingChangedEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CSensors__CMagnetometer___x_ABI_CWindows__CDevices__CSensors__CMagnetometerReadingChangedEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CSensors__CMagnetometer___x_ABI_CWindows__CDevices__CSensors__CMagnetometerReadingChangedEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CSensors__CMagnetometer___x_ABI_CWindows__CDevices__CSensors__CMagnetometerReadingChangedEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CSensors__CMagnetometer___x_ABI_CWindows__CDevices__CSensors__CMagnetometerReadingChangedEventArgs* This,
        __x_ABI_CWindows_CDevices_CSensors_CIMagnetometer* sender,
        __x_ABI_CWindows_CDevices_CSensors_CIMagnetometerReadingChangedEventArgs* args);

        END_INTERFACE
    } __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CSensors__CMagnetometer___x_ABI_CWindows__CDevices__CSensors__CMagnetometerReadingChangedEventArgsVtbl;

    interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CSensors__CMagnetometer___x_ABI_CWindows__CDevices__CSensors__CMagnetometerReadingChangedEventArgs
    {
        CONST_VTBL struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CSensors__CMagnetometer___x_ABI_CWindows__CDevices__CSensors__CMagnetometerReadingChangedEventArgsVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CSensors__CMagnetometer___x_ABI_CWindows__CDevices__CSensors__CMagnetometerReadingChangedEventArgs_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CSensors__COrientationSensor___x_ABI_CWindows__CDevices__CSensors__COrientationSensorReadingChangedEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CSensors__COrientationSensor___x_ABI_CWindows__CDevices__CSensors__COrientationSensorReadingChangedEventArgs_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CSensors__COrientationSensor___x_ABI_CWindows__CDevices__CSensors__COrientationSensorReadingChangedEventArgs __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CSensors__COrientationSensor___x_ABI_CWindows__CDevices__CSensors__COrientationSensorReadingChangedEventArgs;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CSensors__COrientationSensor___x_ABI_CWindows__CDevices__CSensors__COrientationSensorReadingChangedEventArgs;

    typedef struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CSensors__COrientationSensor___x_ABI_CWindows__CDevices__CSensors__COrientationSensorReadingChangedEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CSensors__COrientationSensor___x_ABI_CWindows__CDevices__CSensors__COrientationSensorReadingChangedEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CSensors__COrientationSensor___x_ABI_CWindows__CDevices__CSensors__COrientationSensorReadingChangedEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CSensors__COrientationSensor___x_ABI_CWindows__CDevices__CSensors__COrientationSensorReadingChangedEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CSensors__COrientationSensor___x_ABI_CWindows__CDevices__CSensors__COrientationSensorReadingChangedEventArgs* This,
        __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensor* sender,
        __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReadingChangedEventArgs* args);

        END_INTERFACE
    } __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CSensors__COrientationSensor___x_ABI_CWindows__CDevices__CSensors__COrientationSensorReadingChangedEventArgsVtbl;

    interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CSensors__COrientationSensor___x_ABI_CWindows__CDevices__CSensors__COrientationSensorReadingChangedEventArgs
    {
        CONST_VTBL struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CSensors__COrientationSensor___x_ABI_CWindows__CDevices__CSensors__COrientationSensorReadingChangedEventArgsVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CSensors__COrientationSensor___x_ABI_CWindows__CDevices__CSensors__COrientationSensorReadingChangedEventArgs_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CSensors__CPedometer___x_ABI_CWindows__CDevices__CSensors__CPedometerReadingChangedEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CSensors__CPedometer___x_ABI_CWindows__CDevices__CSensors__CPedometerReadingChangedEventArgs_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CSensors__CPedometer___x_ABI_CWindows__CDevices__CSensors__CPedometerReadingChangedEventArgs __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CSensors__CPedometer___x_ABI_CWindows__CDevices__CSensors__CPedometerReadingChangedEventArgs;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CSensors__CPedometer___x_ABI_CWindows__CDevices__CSensors__CPedometerReadingChangedEventArgs;

    typedef struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CSensors__CPedometer___x_ABI_CWindows__CDevices__CSensors__CPedometerReadingChangedEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CSensors__CPedometer___x_ABI_CWindows__CDevices__CSensors__CPedometerReadingChangedEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CSensors__CPedometer___x_ABI_CWindows__CDevices__CSensors__CPedometerReadingChangedEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CSensors__CPedometer___x_ABI_CWindows__CDevices__CSensors__CPedometerReadingChangedEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CSensors__CPedometer___x_ABI_CWindows__CDevices__CSensors__CPedometerReadingChangedEventArgs* This,
        __x_ABI_CWindows_CDevices_CSensors_CIPedometer* sender,
        __x_ABI_CWindows_CDevices_CSensors_CIPedometerReadingChangedEventArgs* args);

        END_INTERFACE
    } __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CSensors__CPedometer___x_ABI_CWindows__CDevices__CSensors__CPedometerReadingChangedEventArgsVtbl;

    interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CSensors__CPedometer___x_ABI_CWindows__CDevices__CSensors__CPedometerReadingChangedEventArgs
    {
        CONST_VTBL struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CSensors__CPedometer___x_ABI_CWindows__CDevices__CSensors__CPedometerReadingChangedEventArgsVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CSensors__CPedometer___x_ABI_CWindows__CDevices__CSensors__CPedometerReadingChangedEventArgs_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CSensors__CProximitySensor___x_ABI_CWindows__CDevices__CSensors__CProximitySensorReadingChangedEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CSensors__CProximitySensor___x_ABI_CWindows__CDevices__CSensors__CProximitySensorReadingChangedEventArgs_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CSensors__CProximitySensor___x_ABI_CWindows__CDevices__CSensors__CProximitySensorReadingChangedEventArgs __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CSensors__CProximitySensor___x_ABI_CWindows__CDevices__CSensors__CProximitySensorReadingChangedEventArgs;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CSensors__CProximitySensor___x_ABI_CWindows__CDevices__CSensors__CProximitySensorReadingChangedEventArgs;

    typedef struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CSensors__CProximitySensor___x_ABI_CWindows__CDevices__CSensors__CProximitySensorReadingChangedEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CSensors__CProximitySensor___x_ABI_CWindows__CDevices__CSensors__CProximitySensorReadingChangedEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CSensors__CProximitySensor___x_ABI_CWindows__CDevices__CSensors__CProximitySensorReadingChangedEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CSensors__CProximitySensor___x_ABI_CWindows__CDevices__CSensors__CProximitySensorReadingChangedEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CSensors__CProximitySensor___x_ABI_CWindows__CDevices__CSensors__CProximitySensorReadingChangedEventArgs* This,
        __x_ABI_CWindows_CDevices_CSensors_CIProximitySensor* sender,
        __x_ABI_CWindows_CDevices_CSensors_CIProximitySensorReadingChangedEventArgs* args);

        END_INTERFACE
    } __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CSensors__CProximitySensor___x_ABI_CWindows__CDevices__CSensors__CProximitySensorReadingChangedEventArgsVtbl;

    interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CSensors__CProximitySensor___x_ABI_CWindows__CDevices__CSensors__CProximitySensorReadingChangedEventArgs
    {
        CONST_VTBL struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CSensors__CProximitySensor___x_ABI_CWindows__CDevices__CSensors__CProximitySensorReadingChangedEventArgsVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CSensors__CProximitySensor___x_ABI_CWindows__CDevices__CSensors__CProximitySensorReadingChangedEventArgs_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CSensors__CSimpleOrientationSensor___x_ABI_CWindows__CDevices__CSensors__CSimpleOrientationSensorOrientationChangedEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CSensors__CSimpleOrientationSensor___x_ABI_CWindows__CDevices__CSensors__CSimpleOrientationSensorOrientationChangedEventArgs_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CSensors__CSimpleOrientationSensor___x_ABI_CWindows__CDevices__CSensors__CSimpleOrientationSensorOrientationChangedEventArgs __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CSensors__CSimpleOrientationSensor___x_ABI_CWindows__CDevices__CSensors__CSimpleOrientationSensorOrientationChangedEventArgs;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CSensors__CSimpleOrientationSensor___x_ABI_CWindows__CDevices__CSensors__CSimpleOrientationSensorOrientationChangedEventArgs;

    typedef struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CSensors__CSimpleOrientationSensor___x_ABI_CWindows__CDevices__CSensors__CSimpleOrientationSensorOrientationChangedEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CSensors__CSimpleOrientationSensor___x_ABI_CWindows__CDevices__CSensors__CSimpleOrientationSensorOrientationChangedEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CSensors__CSimpleOrientationSensor___x_ABI_CWindows__CDevices__CSensors__CSimpleOrientationSensorOrientationChangedEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CSensors__CSimpleOrientationSensor___x_ABI_CWindows__CDevices__CSensors__CSimpleOrientationSensorOrientationChangedEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CSensors__CSimpleOrientationSensor___x_ABI_CWindows__CDevices__CSensors__CSimpleOrientationSensorOrientationChangedEventArgs* This,
        __x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensor* sender,
        __x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorOrientationChangedEventArgs* args);

        END_INTERFACE
    } __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CSensors__CSimpleOrientationSensor___x_ABI_CWindows__CDevices__CSensors__CSimpleOrientationSensorOrientationChangedEventArgsVtbl;

    interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CSensors__CSimpleOrientationSensor___x_ABI_CWindows__CDevices__CSensors__CSimpleOrientationSensorOrientationChangedEventArgs
    {
        CONST_VTBL struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CSensors__CSimpleOrientationSensor___x_ABI_CWindows__CDevices__CSensors__CSimpleOrientationSensorOrientationChangedEventArgsVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CSensors__CSimpleOrientationSensor___x_ABI_CWindows__CDevices__CSensors__CSimpleOrientationSensorOrientationChangedEventArgs_INTERFACE_DEFINED__
    
typedef enum __x_ABI_CWindows_CFoundation_CAsyncStatus __x_ABI_CWindows_CFoundation_CAsyncStatus;

typedef struct __x_ABI_CWindows_CFoundation_CDateTime __x_ABI_CWindows_CFoundation_CDateTime;

#ifndef ____x_ABI_CWindows_CFoundation_CIAsyncInfo_FWD_DEFINED__
#define ____x_ABI_CWindows_CFoundation_CIAsyncInfo_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CFoundation_CIAsyncInfo __x_ABI_CWindows_CFoundation_CIAsyncInfo;

#endif // ____x_ABI_CWindows_CFoundation_CIAsyncInfo_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CFoundation_CIClosable_FWD_DEFINED__
#define ____x_ABI_CWindows_CFoundation_CIClosable_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CFoundation_CIClosable __x_ABI_CWindows_CFoundation_CIClosable;

#endif // ____x_ABI_CWindows_CFoundation_CIClosable_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CFoundation_CIPropertyValue_FWD_DEFINED__
#define ____x_ABI_CWindows_CFoundation_CIPropertyValue_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CFoundation_CIPropertyValue __x_ABI_CWindows_CFoundation_CIPropertyValue;

#endif // ____x_ABI_CWindows_CFoundation_CIPropertyValue_FWD_DEFINED__

typedef enum __x_ABI_CWindows_CGraphics_CDisplay_CDisplayOrientations __x_ABI_CWindows_CGraphics_CDisplay_CDisplayOrientations;

typedef enum __x_ABI_CWindows_CDevices_CSensors_CAccelerometerReadingType __x_ABI_CWindows_CDevices_CSensors_CAccelerometerReadingType;

typedef enum __x_ABI_CWindows_CDevices_CSensors_CActivitySensorReadingConfidence __x_ABI_CWindows_CDevices_CSensors_CActivitySensorReadingConfidence;

typedef enum __x_ABI_CWindows_CDevices_CSensors_CMagnetometerAccuracy __x_ABI_CWindows_CDevices_CSensors_CMagnetometerAccuracy;

typedef enum __x_ABI_CWindows_CDevices_CSensors_CSensorOptimizationGoal __x_ABI_CWindows_CDevices_CSensors_CSensorOptimizationGoal;

typedef enum __x_ABI_CWindows_CDevices_CSensors_CSensorReadingType __x_ABI_CWindows_CDevices_CSensors_CSensorReadingType;

typedef enum __x_ABI_CWindows_CDevices_CSensors_CSensorType __x_ABI_CWindows_CDevices_CSensors_CSensorType;

typedef enum __x_ABI_CWindows_CDevices_CSensors_CSimpleOrientation __x_ABI_CWindows_CDevices_CSensors_CSimpleOrientation;

enum __x_ABI_CWindows_CDevices_CSensors_CAccelerometerReadingType
    {
        __x_ABI_CWindows_CDevices_CSensors_CAccelerometerReadingType_Standard = 0,
    __x_ABI_CWindows_CDevices_CSensors_CAccelerometerReadingType_Linear = 1,
    __x_ABI_CWindows_CDevices_CSensors_CAccelerometerReadingType_Gravity = 2,
};

enum __x_ABI_CWindows_CDevices_CSensors_CActivitySensorReadingConfidence
    {
        __x_ABI_CWindows_CDevices_CSensors_CActivitySensorReadingConfidence_High = 0,
    __x_ABI_CWindows_CDevices_CSensors_CActivitySensorReadingConfidence_Low = 1,
};

enum __x_ABI_CWindows_CDevices_CSensors_CActivityType
    {
        __x_ABI_CWindows_CDevices_CSensors_CActivityType_Unknown = 0,
    __x_ABI_CWindows_CDevices_CSensors_CActivityType_Idle = 1,
    __x_ABI_CWindows_CDevices_CSensors_CActivityType_Stationary = 2,
    __x_ABI_CWindows_CDevices_CSensors_CActivityType_Fidgeting = 3,
    __x_ABI_CWindows_CDevices_CSensors_CActivityType_Walking = 4,
    __x_ABI_CWindows_CDevices_CSensors_CActivityType_Running = 5,
    __x_ABI_CWindows_CDevices_CSensors_CActivityType_InVehicle = 6,
    __x_ABI_CWindows_CDevices_CSensors_CActivityType_Biking = 7,
};

enum __x_ABI_CWindows_CDevices_CSensors_CMagnetometerAccuracy
    {
        __x_ABI_CWindows_CDevices_CSensors_CMagnetometerAccuracy_Unknown = 0,
    __x_ABI_CWindows_CDevices_CSensors_CMagnetometerAccuracy_Unreliable = 1,
    __x_ABI_CWindows_CDevices_CSensors_CMagnetometerAccuracy_Approximate = 2,
    __x_ABI_CWindows_CDevices_CSensors_CMagnetometerAccuracy_High = 3,
};

enum __x_ABI_CWindows_CDevices_CSensors_CPedometerStepKind
    {
        __x_ABI_CWindows_CDevices_CSensors_CPedometerStepKind_Unknown = 0,
    __x_ABI_CWindows_CDevices_CSensors_CPedometerStepKind_Walking = 1,
    __x_ABI_CWindows_CDevices_CSensors_CPedometerStepKind_Running = 2,
};

enum __x_ABI_CWindows_CDevices_CSensors_CSensorOptimizationGoal
    {
        __x_ABI_CWindows_CDevices_CSensors_CSensorOptimizationGoal_Precision = 0,
    __x_ABI_CWindows_CDevices_CSensors_CSensorOptimizationGoal_PowerEfficiency = 1,
};

enum __x_ABI_CWindows_CDevices_CSensors_CSensorReadingType
    {
        __x_ABI_CWindows_CDevices_CSensors_CSensorReadingType_Absolute = 0,
    __x_ABI_CWindows_CDevices_CSensors_CSensorReadingType_Relative = 1,
};

enum __x_ABI_CWindows_CDevices_CSensors_CSensorType
    {
        __x_ABI_CWindows_CDevices_CSensors_CSensorType_Accelerometer = 0,
    __x_ABI_CWindows_CDevices_CSensors_CSensorType_ActivitySensor = 1,
    __x_ABI_CWindows_CDevices_CSensors_CSensorType_Barometer = 2,
    __x_ABI_CWindows_CDevices_CSensors_CSensorType_Compass = 3,
    __x_ABI_CWindows_CDevices_CSensors_CSensorType_CustomSensor = 4,
    __x_ABI_CWindows_CDevices_CSensors_CSensorType_Gyroscope = 5,
    __x_ABI_CWindows_CDevices_CSensors_CSensorType_ProximitySensor = 6,
    __x_ABI_CWindows_CDevices_CSensors_CSensorType_Inclinometer = 7,
    __x_ABI_CWindows_CDevices_CSensors_CSensorType_LightSensor = 8,
    __x_ABI_CWindows_CDevices_CSensors_CSensorType_OrientationSensor = 9,
    __x_ABI_CWindows_CDevices_CSensors_CSensorType_Pedometer = 10,
    __x_ABI_CWindows_CDevices_CSensors_CSensorType_RelativeInclinometer = 11,
    __x_ABI_CWindows_CDevices_CSensors_CSensorType_RelativeOrientationSensor = 12,
    __x_ABI_CWindows_CDevices_CSensors_CSensorType_SimpleOrientationSensor = 13,
};

enum __x_ABI_CWindows_CDevices_CSensors_CSimpleOrientation
    {
        __x_ABI_CWindows_CDevices_CSensors_CSimpleOrientation_NotRotated = 0,
    __x_ABI_CWindows_CDevices_CSensors_CSimpleOrientation_Rotated90DegreesCounterclockwise = 1,
    __x_ABI_CWindows_CDevices_CSensors_CSimpleOrientation_Rotated180DegreesCounterclockwise = 2,
    __x_ABI_CWindows_CDevices_CSensors_CSimpleOrientation_Rotated270DegreesCounterclockwise = 3,
    __x_ABI_CWindows_CDevices_CSensors_CSimpleOrientation_Faceup = 4,
    __x_ABI_CWindows_CDevices_CSensors_CSimpleOrientation_Facedown = 5,
};

#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIAccelerometer_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CDevices_CSensors_CIAccelerometer_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CSensors_CIAccelerometer* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CSensors_CIAccelerometer* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CSensors_CIAccelerometer* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CSensors_CIAccelerometer* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CSensors_CIAccelerometer* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CSensors_CIAccelerometer* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetCurrentReading)(__x_ABI_CWindows_CDevices_CSensors_CIAccelerometer* This,
        __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerReading** value);
    HRESULT (STDMETHODCALLTYPE* get_MinimumReportInterval)(__x_ABI_CWindows_CDevices_CSensors_CIAccelerometer* This,
        UINT32* value);
    HRESULT (STDMETHODCALLTYPE* put_ReportInterval)(__x_ABI_CWindows_CDevices_CSensors_CIAccelerometer* This,
        UINT32 value);
    HRESULT (STDMETHODCALLTYPE* get_ReportInterval)(__x_ABI_CWindows_CDevices_CSensors_CIAccelerometer* This,
        UINT32* value);
    HRESULT (STDMETHODCALLTYPE* add_ReadingChanged)(__x_ABI_CWindows_CDevices_CSensors_CIAccelerometer* This,
        __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CSensors__CAccelerometer___x_ABI_CWindows__CDevices__CSensors__CAccelerometerReadingChangedEventArgs* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_ReadingChanged)(__x_ABI_CWindows_CDevices_CSensors_CIAccelerometer* This,
        EventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* add_Shaken)(__x_ABI_CWindows_CDevices_CSensors_CIAccelerometer* This,
        __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CSensors__CAccelerometer___x_ABI_CWindows__CDevices__CSensors__CAccelerometerShakenEventArgs* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_Shaken)(__x_ABI_CWindows_CDevices_CSensors_CIAccelerometer* This,
        EventRegistrationToken token);

        END_INTERFACE
    } __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerVtbl;

    interface __x_ABI_CWindows_CDevices_CSensors_CIAccelerometer
    {
        CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIAccelerometer;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIAccelerometer_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIAccelerometer2_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CDevices_CSensors_CIAccelerometer2_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CDevices_CSensors_CIAccelerometer2Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CSensors_CIAccelerometer2* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CSensors_CIAccelerometer2* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CSensors_CIAccelerometer2* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CSensors_CIAccelerometer2* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CSensors_CIAccelerometer2* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CSensors_CIAccelerometer2* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* put_ReadingTransform)(__x_ABI_CWindows_CDevices_CSensors_CIAccelerometer2* This,
        enum __x_ABI_CWindows_CGraphics_CDisplay_CDisplayOrientations value);
    HRESULT (STDMETHODCALLTYPE* get_ReadingTransform)(__x_ABI_CWindows_CDevices_CSensors_CIAccelerometer2* This,
        enum __x_ABI_CWindows_CGraphics_CDisplay_CDisplayOrientations* value);

        END_INTERFACE
    } __x_ABI_CWindows_CDevices_CSensors_CIAccelerometer2Vtbl;

    interface __x_ABI_CWindows_CDevices_CSensors_CIAccelerometer2
    {
        CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CIAccelerometer2Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIAccelerometer2;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIAccelerometer2_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIAccelerometer3_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CDevices_CSensors_CIAccelerometer3_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CDevices_CSensors_CIAccelerometer3Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CSensors_CIAccelerometer3* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CSensors_CIAccelerometer3* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CSensors_CIAccelerometer3* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CSensors_CIAccelerometer3* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CSensors_CIAccelerometer3* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CSensors_CIAccelerometer3* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* put_ReportLatency)(__x_ABI_CWindows_CDevices_CSensors_CIAccelerometer3* This,
        UINT32 value);
    HRESULT (STDMETHODCALLTYPE* get_ReportLatency)(__x_ABI_CWindows_CDevices_CSensors_CIAccelerometer3* This,
        UINT32* value);
    HRESULT (STDMETHODCALLTYPE* get_MaxBatchSize)(__x_ABI_CWindows_CDevices_CSensors_CIAccelerometer3* This,
        UINT32* value);

        END_INTERFACE
    } __x_ABI_CWindows_CDevices_CSensors_CIAccelerometer3Vtbl;

    interface __x_ABI_CWindows_CDevices_CSensors_CIAccelerometer3
    {
        CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CIAccelerometer3Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIAccelerometer3;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIAccelerometer3_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIAccelerometer4_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CDevices_CSensors_CIAccelerometer4_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CDevices_CSensors_CIAccelerometer4Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CSensors_CIAccelerometer4* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CSensors_CIAccelerometer4* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CSensors_CIAccelerometer4* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CSensors_CIAccelerometer4* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CSensors_CIAccelerometer4* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CSensors_CIAccelerometer4* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_ReadingType)(__x_ABI_CWindows_CDevices_CSensors_CIAccelerometer4* This,
        enum __x_ABI_CWindows_CDevices_CSensors_CAccelerometerReadingType* type);

        END_INTERFACE
    } __x_ABI_CWindows_CDevices_CSensors_CIAccelerometer4Vtbl;

    interface __x_ABI_CWindows_CDevices_CSensors_CIAccelerometer4
    {
        CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CIAccelerometer4Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIAccelerometer4;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIAccelerometer4_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIAccelerometerDeviceId_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CDevices_CSensors_CIAccelerometerDeviceId_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerDeviceIdVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CSensors_CIAccelerometerDeviceId* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CSensors_CIAccelerometerDeviceId* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CSensors_CIAccelerometerDeviceId* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CSensors_CIAccelerometerDeviceId* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CSensors_CIAccelerometerDeviceId* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CSensors_CIAccelerometerDeviceId* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_DeviceId)(__x_ABI_CWindows_CDevices_CSensors_CIAccelerometerDeviceId* This,
        HSTRING* value);

        END_INTERFACE
    } __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerDeviceIdVtbl;

    interface __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerDeviceId
    {
        CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerDeviceIdVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIAccelerometerDeviceId;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIAccelerometerDeviceId_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIAccelerometerReading_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CDevices_CSensors_CIAccelerometerReading_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerReadingVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CSensors_CIAccelerometerReading* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CSensors_CIAccelerometerReading* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CSensors_CIAccelerometerReading* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CSensors_CIAccelerometerReading* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CSensors_CIAccelerometerReading* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CSensors_CIAccelerometerReading* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Timestamp)(__x_ABI_CWindows_CDevices_CSensors_CIAccelerometerReading* This,
        struct __x_ABI_CWindows_CFoundation_CDateTime* value);
    HRESULT (STDMETHODCALLTYPE* get_AccelerationX)(__x_ABI_CWindows_CDevices_CSensors_CIAccelerometerReading* This,
        DOUBLE* value);
    HRESULT (STDMETHODCALLTYPE* get_AccelerationY)(__x_ABI_CWindows_CDevices_CSensors_CIAccelerometerReading* This,
        DOUBLE* value);
    HRESULT (STDMETHODCALLTYPE* get_AccelerationZ)(__x_ABI_CWindows_CDevices_CSensors_CIAccelerometerReading* This,
        DOUBLE* value);

        END_INTERFACE
    } __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerReadingVtbl;

    interface __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerReading
    {
        CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerReadingVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIAccelerometerReading;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIAccelerometerReading_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIAccelerometerReading2_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CDevices_CSensors_CIAccelerometerReading2_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerReading2Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CSensors_CIAccelerometerReading2* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CSensors_CIAccelerometerReading2* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CSensors_CIAccelerometerReading2* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CSensors_CIAccelerometerReading2* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CSensors_CIAccelerometerReading2* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CSensors_CIAccelerometerReading2* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_PerformanceCount)(__x_ABI_CWindows_CDevices_CSensors_CIAccelerometerReading2* This,
        __x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CTimeSpan** value);
    HRESULT (STDMETHODCALLTYPE* get_Properties)(__x_ABI_CWindows_CDevices_CSensors_CIAccelerometerReading2* This,
        __x_ABI_C__FIMapView_2_HSTRING_IInspectable** value);

        END_INTERFACE
    } __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerReading2Vtbl;

    interface __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerReading2
    {
        CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerReading2Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIAccelerometerReading2;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIAccelerometerReading2_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIAccelerometerReadingChangedEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CDevices_CSensors_CIAccelerometerReadingChangedEventArgs_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerReadingChangedEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CSensors_CIAccelerometerReadingChangedEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CSensors_CIAccelerometerReadingChangedEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CSensors_CIAccelerometerReadingChangedEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CSensors_CIAccelerometerReadingChangedEventArgs* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CSensors_CIAccelerometerReadingChangedEventArgs* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CSensors_CIAccelerometerReadingChangedEventArgs* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Reading)(__x_ABI_CWindows_CDevices_CSensors_CIAccelerometerReadingChangedEventArgs* This,
        __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerReading** value);

        END_INTERFACE
    } __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerReadingChangedEventArgsVtbl;

    interface __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerReadingChangedEventArgs
    {
        CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerReadingChangedEventArgsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIAccelerometerReadingChangedEventArgs;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIAccelerometerReadingChangedEventArgs_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIAccelerometerShakenEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CDevices_CSensors_CIAccelerometerShakenEventArgs_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerShakenEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CSensors_CIAccelerometerShakenEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CSensors_CIAccelerometerShakenEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CSensors_CIAccelerometerShakenEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CSensors_CIAccelerometerShakenEventArgs* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CSensors_CIAccelerometerShakenEventArgs* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CSensors_CIAccelerometerShakenEventArgs* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Timestamp)(__x_ABI_CWindows_CDevices_CSensors_CIAccelerometerShakenEventArgs* This,
        struct __x_ABI_CWindows_CFoundation_CDateTime* value);

        END_INTERFACE
    } __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerShakenEventArgsVtbl;

    interface __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerShakenEventArgs
    {
        CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerShakenEventArgsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIAccelerometerShakenEventArgs;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIAccelerometerShakenEventArgs_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIAccelerometerStatics_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CDevices_CSensors_CIAccelerometerStatics_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerStaticsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CSensors_CIAccelerometerStatics* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CSensors_CIAccelerometerStatics* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CSensors_CIAccelerometerStatics* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CSensors_CIAccelerometerStatics* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CSensors_CIAccelerometerStatics* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CSensors_CIAccelerometerStatics* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetDefault)(__x_ABI_CWindows_CDevices_CSensors_CIAccelerometerStatics* This,
        __x_ABI_CWindows_CDevices_CSensors_CIAccelerometer** result);

        END_INTERFACE
    } __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerStaticsVtbl;

    interface __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerStatics
    {
        CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerStaticsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIAccelerometerStatics;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIAccelerometerStatics_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIAccelerometerStatics2_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CDevices_CSensors_CIAccelerometerStatics2_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerStatics2Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CSensors_CIAccelerometerStatics2* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CSensors_CIAccelerometerStatics2* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CSensors_CIAccelerometerStatics2* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CSensors_CIAccelerometerStatics2* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CSensors_CIAccelerometerStatics2* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CSensors_CIAccelerometerStatics2* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetDefaultWithAccelerometerReadingType)(__x_ABI_CWindows_CDevices_CSensors_CIAccelerometerStatics2* This,
        enum __x_ABI_CWindows_CDevices_CSensors_CAccelerometerReadingType readingType,
        __x_ABI_CWindows_CDevices_CSensors_CIAccelerometer** result);

        END_INTERFACE
    } __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerStatics2Vtbl;

    interface __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerStatics2
    {
        CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerStatics2Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIAccelerometerStatics2;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIAccelerometerStatics2_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIAccelerometerStatics3_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CDevices_CSensors_CIAccelerometerStatics3_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerStatics3Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CSensors_CIAccelerometerStatics3* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CSensors_CIAccelerometerStatics3* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CSensors_CIAccelerometerStatics3* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CSensors_CIAccelerometerStatics3* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CSensors_CIAccelerometerStatics3* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CSensors_CIAccelerometerStatics3* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* FromIdAsync)(__x_ABI_CWindows_CDevices_CSensors_CIAccelerometerStatics3* This,
        HSTRING deviceId,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__CAccelerometer** operation);
    HRESULT (STDMETHODCALLTYPE* GetDeviceSelector)(__x_ABI_CWindows_CDevices_CSensors_CIAccelerometerStatics3* This,
        enum __x_ABI_CWindows_CDevices_CSensors_CAccelerometerReadingType readingType,
        HSTRING* result);

        END_INTERFACE
    } __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerStatics3Vtbl;

    interface __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerStatics3
    {
        CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerStatics3Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIAccelerometerStatics3;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIAccelerometerStatics3_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIActivitySensor_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CDevices_CSensors_CIActivitySensor_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CDevices_CSensors_CIActivitySensorVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CSensors_CIActivitySensor* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CSensors_CIActivitySensor* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CSensors_CIActivitySensor* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CSensors_CIActivitySensor* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CSensors_CIActivitySensor* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CSensors_CIActivitySensor* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetCurrentReadingAsync)(__x_ABI_CWindows_CDevices_CSensors_CIActivitySensor* This,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__CActivitySensorReading** result);
    HRESULT (STDMETHODCALLTYPE* get_SubscribedActivities)(__x_ABI_CWindows_CDevices_CSensors_CIActivitySensor* This,
        __x_ABI_C__FIVector_1___x_ABI_CWindows__CDevices__CSensors__CActivityType** value);
    HRESULT (STDMETHODCALLTYPE* get_PowerInMilliwatts)(__x_ABI_CWindows_CDevices_CSensors_CIActivitySensor* This,
        DOUBLE* value);
    HRESULT (STDMETHODCALLTYPE* get_DeviceId)(__x_ABI_CWindows_CDevices_CSensors_CIActivitySensor* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_SupportedActivities)(__x_ABI_CWindows_CDevices_CSensors_CIActivitySensor* This,
        __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CSensors__CActivityType** value);
    HRESULT (STDMETHODCALLTYPE* get_MinimumReportInterval)(__x_ABI_CWindows_CDevices_CSensors_CIActivitySensor* This,
        UINT32* value);
    HRESULT (STDMETHODCALLTYPE* add_ReadingChanged)(__x_ABI_CWindows_CDevices_CSensors_CIActivitySensor* This,
        __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CSensors__CActivitySensor___x_ABI_CWindows__CDevices__CSensors__CActivitySensorReadingChangedEventArgs* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_ReadingChanged)(__x_ABI_CWindows_CDevices_CSensors_CIActivitySensor* This,
        EventRegistrationToken token);

        END_INTERFACE
    } __x_ABI_CWindows_CDevices_CSensors_CIActivitySensorVtbl;

    interface __x_ABI_CWindows_CDevices_CSensors_CIActivitySensor
    {
        CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CIActivitySensorVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIActivitySensor;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIActivitySensor_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReading_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReading_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReadingVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReading* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReading* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReading* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReading* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReading* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReading* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Timestamp)(__x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReading* This,
        struct __x_ABI_CWindows_CFoundation_CDateTime* value);
    HRESULT (STDMETHODCALLTYPE* get_Activity)(__x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReading* This,
        enum __x_ABI_CWindows_CDevices_CSensors_CActivityType* value);
    HRESULT (STDMETHODCALLTYPE* get_Confidence)(__x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReading* This,
        enum __x_ABI_CWindows_CDevices_CSensors_CActivitySensorReadingConfidence* value);

        END_INTERFACE
    } __x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReadingVtbl;

    interface __x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReading
    {
        CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReadingVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReading;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReading_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReadingChangeReport_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReadingChangeReport_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReadingChangeReportVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReadingChangeReport* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReadingChangeReport* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReadingChangeReport* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReadingChangeReport* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReadingChangeReport* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReadingChangeReport* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Reading)(__x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReadingChangeReport* This,
        __x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReading** value);

        END_INTERFACE
    } __x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReadingChangeReportVtbl;

    interface __x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReadingChangeReport
    {
        CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReadingChangeReportVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReadingChangeReport;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReadingChangeReport_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReadingChangedEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReadingChangedEventArgs_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReadingChangedEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReadingChangedEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReadingChangedEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReadingChangedEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReadingChangedEventArgs* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReadingChangedEventArgs* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReadingChangedEventArgs* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Reading)(__x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReadingChangedEventArgs* This,
        __x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReading** value);

        END_INTERFACE
    } __x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReadingChangedEventArgsVtbl;

    interface __x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReadingChangedEventArgs
    {
        CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReadingChangedEventArgsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReadingChangedEventArgs;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReadingChangedEventArgs_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIActivitySensorStatics_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CDevices_CSensors_CIActivitySensorStatics_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CDevices_CSensors_CIActivitySensorStaticsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CSensors_CIActivitySensorStatics* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CSensors_CIActivitySensorStatics* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CSensors_CIActivitySensorStatics* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CSensors_CIActivitySensorStatics* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CSensors_CIActivitySensorStatics* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CSensors_CIActivitySensorStatics* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetDefaultAsync)(__x_ABI_CWindows_CDevices_CSensors_CIActivitySensorStatics* This,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__CActivitySensor** result);
    HRESULT (STDMETHODCALLTYPE* GetDeviceSelector)(__x_ABI_CWindows_CDevices_CSensors_CIActivitySensorStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* FromIdAsync)(__x_ABI_CWindows_CDevices_CSensors_CIActivitySensorStatics* This,
        HSTRING deviceId,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__CActivitySensor** result);
    HRESULT (STDMETHODCALLTYPE* GetSystemHistoryAsync)(__x_ABI_CWindows_CDevices_CSensors_CIActivitySensorStatics* This,
        struct __x_ABI_CWindows_CFoundation_CDateTime fromTime,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CSensors__CActivitySensorReading** result);
    HRESULT (STDMETHODCALLTYPE* GetSystemHistoryWithDurationAsync)(__x_ABI_CWindows_CDevices_CSensors_CIActivitySensorStatics* This,
        struct __x_ABI_CWindows_CFoundation_CDateTime fromTime,
        struct __x_ABI_CWindows_CFoundation_CTimeSpan duration,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CSensors__CActivitySensorReading** result);

        END_INTERFACE
    } __x_ABI_CWindows_CDevices_CSensors_CIActivitySensorStaticsVtbl;

    interface __x_ABI_CWindows_CDevices_CSensors_CIActivitySensorStatics
    {
        CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CIActivitySensorStaticsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIActivitySensorStatics;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIActivitySensorStatics_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIActivitySensorTriggerDetails_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CDevices_CSensors_CIActivitySensorTriggerDetails_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CDevices_CSensors_CIActivitySensorTriggerDetailsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CSensors_CIActivitySensorTriggerDetails* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CSensors_CIActivitySensorTriggerDetails* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CSensors_CIActivitySensorTriggerDetails* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CSensors_CIActivitySensorTriggerDetails* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CSensors_CIActivitySensorTriggerDetails* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CSensors_CIActivitySensorTriggerDetails* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* ReadReports)(__x_ABI_CWindows_CDevices_CSensors_CIActivitySensorTriggerDetails* This,
        __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CSensors__CActivitySensorReadingChangeReport** value);

        END_INTERFACE
    } __x_ABI_CWindows_CDevices_CSensors_CIActivitySensorTriggerDetailsVtbl;

    interface __x_ABI_CWindows_CDevices_CSensors_CIActivitySensorTriggerDetails
    {
        CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CIActivitySensorTriggerDetailsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIActivitySensorTriggerDetails;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIActivitySensorTriggerDetails_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIAltimeter_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CDevices_CSensors_CIAltimeter_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CDevices_CSensors_CIAltimeterVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CSensors_CIAltimeter* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CSensors_CIAltimeter* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CSensors_CIAltimeter* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CSensors_CIAltimeter* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CSensors_CIAltimeter* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CSensors_CIAltimeter* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetCurrentReading)(__x_ABI_CWindows_CDevices_CSensors_CIAltimeter* This,
        __x_ABI_CWindows_CDevices_CSensors_CIAltimeterReading** value);
    HRESULT (STDMETHODCALLTYPE* get_DeviceId)(__x_ABI_CWindows_CDevices_CSensors_CIAltimeter* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_MinimumReportInterval)(__x_ABI_CWindows_CDevices_CSensors_CIAltimeter* This,
        UINT32* value);
    HRESULT (STDMETHODCALLTYPE* put_ReportInterval)(__x_ABI_CWindows_CDevices_CSensors_CIAltimeter* This,
        UINT32 value);
    HRESULT (STDMETHODCALLTYPE* get_ReportInterval)(__x_ABI_CWindows_CDevices_CSensors_CIAltimeter* This,
        UINT32* value);
    HRESULT (STDMETHODCALLTYPE* add_ReadingChanged)(__x_ABI_CWindows_CDevices_CSensors_CIAltimeter* This,
        __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CSensors__CAltimeter___x_ABI_CWindows__CDevices__CSensors__CAltimeterReadingChangedEventArgs* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_ReadingChanged)(__x_ABI_CWindows_CDevices_CSensors_CIAltimeter* This,
        EventRegistrationToken token);

        END_INTERFACE
    } __x_ABI_CWindows_CDevices_CSensors_CIAltimeterVtbl;

    interface __x_ABI_CWindows_CDevices_CSensors_CIAltimeter
    {
        CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CIAltimeterVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIAltimeter;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIAltimeter_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIAltimeter2_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CDevices_CSensors_CIAltimeter2_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CDevices_CSensors_CIAltimeter2Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CSensors_CIAltimeter2* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CSensors_CIAltimeter2* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CSensors_CIAltimeter2* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CSensors_CIAltimeter2* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CSensors_CIAltimeter2* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CSensors_CIAltimeter2* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* put_ReportLatency)(__x_ABI_CWindows_CDevices_CSensors_CIAltimeter2* This,
        UINT32 value);
    HRESULT (STDMETHODCALLTYPE* get_ReportLatency)(__x_ABI_CWindows_CDevices_CSensors_CIAltimeter2* This,
        UINT32* value);
    HRESULT (STDMETHODCALLTYPE* get_MaxBatchSize)(__x_ABI_CWindows_CDevices_CSensors_CIAltimeter2* This,
        UINT32* value);

        END_INTERFACE
    } __x_ABI_CWindows_CDevices_CSensors_CIAltimeter2Vtbl;

    interface __x_ABI_CWindows_CDevices_CSensors_CIAltimeter2
    {
        CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CIAltimeter2Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIAltimeter2;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIAltimeter2_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIAltimeterReading_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CDevices_CSensors_CIAltimeterReading_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CDevices_CSensors_CIAltimeterReadingVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CSensors_CIAltimeterReading* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CSensors_CIAltimeterReading* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CSensors_CIAltimeterReading* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CSensors_CIAltimeterReading* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CSensors_CIAltimeterReading* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CSensors_CIAltimeterReading* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Timestamp)(__x_ABI_CWindows_CDevices_CSensors_CIAltimeterReading* This,
        struct __x_ABI_CWindows_CFoundation_CDateTime* value);
    HRESULT (STDMETHODCALLTYPE* get_AltitudeChangeInMeters)(__x_ABI_CWindows_CDevices_CSensors_CIAltimeterReading* This,
        DOUBLE* value);

        END_INTERFACE
    } __x_ABI_CWindows_CDevices_CSensors_CIAltimeterReadingVtbl;

    interface __x_ABI_CWindows_CDevices_CSensors_CIAltimeterReading
    {
        CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CIAltimeterReadingVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIAltimeterReading;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIAltimeterReading_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIAltimeterReading2_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CDevices_CSensors_CIAltimeterReading2_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CDevices_CSensors_CIAltimeterReading2Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CSensors_CIAltimeterReading2* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CSensors_CIAltimeterReading2* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CSensors_CIAltimeterReading2* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CSensors_CIAltimeterReading2* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CSensors_CIAltimeterReading2* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CSensors_CIAltimeterReading2* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_PerformanceCount)(__x_ABI_CWindows_CDevices_CSensors_CIAltimeterReading2* This,
        __x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CTimeSpan** value);
    HRESULT (STDMETHODCALLTYPE* get_Properties)(__x_ABI_CWindows_CDevices_CSensors_CIAltimeterReading2* This,
        __x_ABI_C__FIMapView_2_HSTRING_IInspectable** value);

        END_INTERFACE
    } __x_ABI_CWindows_CDevices_CSensors_CIAltimeterReading2Vtbl;

    interface __x_ABI_CWindows_CDevices_CSensors_CIAltimeterReading2
    {
        CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CIAltimeterReading2Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIAltimeterReading2;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIAltimeterReading2_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIAltimeterReadingChangedEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CDevices_CSensors_CIAltimeterReadingChangedEventArgs_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CDevices_CSensors_CIAltimeterReadingChangedEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CSensors_CIAltimeterReadingChangedEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CSensors_CIAltimeterReadingChangedEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CSensors_CIAltimeterReadingChangedEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CSensors_CIAltimeterReadingChangedEventArgs* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CSensors_CIAltimeterReadingChangedEventArgs* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CSensors_CIAltimeterReadingChangedEventArgs* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Reading)(__x_ABI_CWindows_CDevices_CSensors_CIAltimeterReadingChangedEventArgs* This,
        __x_ABI_CWindows_CDevices_CSensors_CIAltimeterReading** value);

        END_INTERFACE
    } __x_ABI_CWindows_CDevices_CSensors_CIAltimeterReadingChangedEventArgsVtbl;

    interface __x_ABI_CWindows_CDevices_CSensors_CIAltimeterReadingChangedEventArgs
    {
        CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CIAltimeterReadingChangedEventArgsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIAltimeterReadingChangedEventArgs;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIAltimeterReadingChangedEventArgs_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIAltimeterStatics_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CDevices_CSensors_CIAltimeterStatics_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CDevices_CSensors_CIAltimeterStaticsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CSensors_CIAltimeterStatics* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CSensors_CIAltimeterStatics* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CSensors_CIAltimeterStatics* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CSensors_CIAltimeterStatics* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CSensors_CIAltimeterStatics* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CSensors_CIAltimeterStatics* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetDefault)(__x_ABI_CWindows_CDevices_CSensors_CIAltimeterStatics* This,
        __x_ABI_CWindows_CDevices_CSensors_CIAltimeter** result);

        END_INTERFACE
    } __x_ABI_CWindows_CDevices_CSensors_CIAltimeterStaticsVtbl;

    interface __x_ABI_CWindows_CDevices_CSensors_CIAltimeterStatics
    {
        CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CIAltimeterStaticsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIAltimeterStatics;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIAltimeterStatics_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIBarometer_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CDevices_CSensors_CIBarometer_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CDevices_CSensors_CIBarometerVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CSensors_CIBarometer* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CSensors_CIBarometer* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CSensors_CIBarometer* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CSensors_CIBarometer* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CSensors_CIBarometer* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CSensors_CIBarometer* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetCurrentReading)(__x_ABI_CWindows_CDevices_CSensors_CIBarometer* This,
        __x_ABI_CWindows_CDevices_CSensors_CIBarometerReading** value);
    HRESULT (STDMETHODCALLTYPE* get_DeviceId)(__x_ABI_CWindows_CDevices_CSensors_CIBarometer* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_MinimumReportInterval)(__x_ABI_CWindows_CDevices_CSensors_CIBarometer* This,
        UINT32* value);
    HRESULT (STDMETHODCALLTYPE* put_ReportInterval)(__x_ABI_CWindows_CDevices_CSensors_CIBarometer* This,
        UINT32 value);
    HRESULT (STDMETHODCALLTYPE* get_ReportInterval)(__x_ABI_CWindows_CDevices_CSensors_CIBarometer* This,
        UINT32* value);
    HRESULT (STDMETHODCALLTYPE* add_ReadingChanged)(__x_ABI_CWindows_CDevices_CSensors_CIBarometer* This,
        __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CSensors__CBarometer___x_ABI_CWindows__CDevices__CSensors__CBarometerReadingChangedEventArgs* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_ReadingChanged)(__x_ABI_CWindows_CDevices_CSensors_CIBarometer* This,
        EventRegistrationToken token);

        END_INTERFACE
    } __x_ABI_CWindows_CDevices_CSensors_CIBarometerVtbl;

    interface __x_ABI_CWindows_CDevices_CSensors_CIBarometer
    {
        CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CIBarometerVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIBarometer;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIBarometer_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIBarometer2_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CDevices_CSensors_CIBarometer2_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CDevices_CSensors_CIBarometer2Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CSensors_CIBarometer2* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CSensors_CIBarometer2* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CSensors_CIBarometer2* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CSensors_CIBarometer2* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CSensors_CIBarometer2* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CSensors_CIBarometer2* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* put_ReportLatency)(__x_ABI_CWindows_CDevices_CSensors_CIBarometer2* This,
        UINT32 value);
    HRESULT (STDMETHODCALLTYPE* get_ReportLatency)(__x_ABI_CWindows_CDevices_CSensors_CIBarometer2* This,
        UINT32* value);
    HRESULT (STDMETHODCALLTYPE* get_MaxBatchSize)(__x_ABI_CWindows_CDevices_CSensors_CIBarometer2* This,
        UINT32* value);

        END_INTERFACE
    } __x_ABI_CWindows_CDevices_CSensors_CIBarometer2Vtbl;

    interface __x_ABI_CWindows_CDevices_CSensors_CIBarometer2
    {
        CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CIBarometer2Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIBarometer2;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIBarometer2_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIBarometerReading_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CDevices_CSensors_CIBarometerReading_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CDevices_CSensors_CIBarometerReadingVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CSensors_CIBarometerReading* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CSensors_CIBarometerReading* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CSensors_CIBarometerReading* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CSensors_CIBarometerReading* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CSensors_CIBarometerReading* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CSensors_CIBarometerReading* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Timestamp)(__x_ABI_CWindows_CDevices_CSensors_CIBarometerReading* This,
        struct __x_ABI_CWindows_CFoundation_CDateTime* value);
    HRESULT (STDMETHODCALLTYPE* get_StationPressureInHectopascals)(__x_ABI_CWindows_CDevices_CSensors_CIBarometerReading* This,
        DOUBLE* value);

        END_INTERFACE
    } __x_ABI_CWindows_CDevices_CSensors_CIBarometerReadingVtbl;

    interface __x_ABI_CWindows_CDevices_CSensors_CIBarometerReading
    {
        CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CIBarometerReadingVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIBarometerReading;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIBarometerReading_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIBarometerReading2_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CDevices_CSensors_CIBarometerReading2_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CDevices_CSensors_CIBarometerReading2Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CSensors_CIBarometerReading2* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CSensors_CIBarometerReading2* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CSensors_CIBarometerReading2* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CSensors_CIBarometerReading2* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CSensors_CIBarometerReading2* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CSensors_CIBarometerReading2* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_PerformanceCount)(__x_ABI_CWindows_CDevices_CSensors_CIBarometerReading2* This,
        __x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CTimeSpan** value);
    HRESULT (STDMETHODCALLTYPE* get_Properties)(__x_ABI_CWindows_CDevices_CSensors_CIBarometerReading2* This,
        __x_ABI_C__FIMapView_2_HSTRING_IInspectable** value);

        END_INTERFACE
    } __x_ABI_CWindows_CDevices_CSensors_CIBarometerReading2Vtbl;

    interface __x_ABI_CWindows_CDevices_CSensors_CIBarometerReading2
    {
        CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CIBarometerReading2Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIBarometerReading2;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIBarometerReading2_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIBarometerReadingChangedEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CDevices_CSensors_CIBarometerReadingChangedEventArgs_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CDevices_CSensors_CIBarometerReadingChangedEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CSensors_CIBarometerReadingChangedEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CSensors_CIBarometerReadingChangedEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CSensors_CIBarometerReadingChangedEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CSensors_CIBarometerReadingChangedEventArgs* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CSensors_CIBarometerReadingChangedEventArgs* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CSensors_CIBarometerReadingChangedEventArgs* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Reading)(__x_ABI_CWindows_CDevices_CSensors_CIBarometerReadingChangedEventArgs* This,
        __x_ABI_CWindows_CDevices_CSensors_CIBarometerReading** value);

        END_INTERFACE
    } __x_ABI_CWindows_CDevices_CSensors_CIBarometerReadingChangedEventArgsVtbl;

    interface __x_ABI_CWindows_CDevices_CSensors_CIBarometerReadingChangedEventArgs
    {
        CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CIBarometerReadingChangedEventArgsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIBarometerReadingChangedEventArgs;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIBarometerReadingChangedEventArgs_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIBarometerStatics_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CDevices_CSensors_CIBarometerStatics_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CDevices_CSensors_CIBarometerStaticsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CSensors_CIBarometerStatics* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CSensors_CIBarometerStatics* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CSensors_CIBarometerStatics* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CSensors_CIBarometerStatics* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CSensors_CIBarometerStatics* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CSensors_CIBarometerStatics* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetDefault)(__x_ABI_CWindows_CDevices_CSensors_CIBarometerStatics* This,
        __x_ABI_CWindows_CDevices_CSensors_CIBarometer** result);

        END_INTERFACE
    } __x_ABI_CWindows_CDevices_CSensors_CIBarometerStaticsVtbl;

    interface __x_ABI_CWindows_CDevices_CSensors_CIBarometerStatics
    {
        CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CIBarometerStaticsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIBarometerStatics;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIBarometerStatics_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIBarometerStatics2_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CDevices_CSensors_CIBarometerStatics2_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CDevices_CSensors_CIBarometerStatics2Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CSensors_CIBarometerStatics2* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CSensors_CIBarometerStatics2* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CSensors_CIBarometerStatics2* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CSensors_CIBarometerStatics2* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CSensors_CIBarometerStatics2* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CSensors_CIBarometerStatics2* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* FromIdAsync)(__x_ABI_CWindows_CDevices_CSensors_CIBarometerStatics2* This,
        HSTRING deviceId,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__CBarometer** operation);
    HRESULT (STDMETHODCALLTYPE* GetDeviceSelector)(__x_ABI_CWindows_CDevices_CSensors_CIBarometerStatics2* This,
        HSTRING* result);

        END_INTERFACE
    } __x_ABI_CWindows_CDevices_CSensors_CIBarometerStatics2Vtbl;

    interface __x_ABI_CWindows_CDevices_CSensors_CIBarometerStatics2
    {
        CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CIBarometerStatics2Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIBarometerStatics2;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIBarometerStatics2_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CICompass_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CDevices_CSensors_CICompass_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CDevices_CSensors_CICompassVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CSensors_CICompass* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CSensors_CICompass* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CSensors_CICompass* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CSensors_CICompass* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CSensors_CICompass* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CSensors_CICompass* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetCurrentReading)(__x_ABI_CWindows_CDevices_CSensors_CICompass* This,
        __x_ABI_CWindows_CDevices_CSensors_CICompassReading** value);
    HRESULT (STDMETHODCALLTYPE* get_MinimumReportInterval)(__x_ABI_CWindows_CDevices_CSensors_CICompass* This,
        UINT32* value);
    HRESULT (STDMETHODCALLTYPE* put_ReportInterval)(__x_ABI_CWindows_CDevices_CSensors_CICompass* This,
        UINT32 value);
    HRESULT (STDMETHODCALLTYPE* get_ReportInterval)(__x_ABI_CWindows_CDevices_CSensors_CICompass* This,
        UINT32* value);
    HRESULT (STDMETHODCALLTYPE* add_ReadingChanged)(__x_ABI_CWindows_CDevices_CSensors_CICompass* This,
        __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CSensors__CCompass___x_ABI_CWindows__CDevices__CSensors__CCompassReadingChangedEventArgs* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_ReadingChanged)(__x_ABI_CWindows_CDevices_CSensors_CICompass* This,
        EventRegistrationToken token);

        END_INTERFACE
    } __x_ABI_CWindows_CDevices_CSensors_CICompassVtbl;

    interface __x_ABI_CWindows_CDevices_CSensors_CICompass
    {
        CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CICompassVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CICompass;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CICompass_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CICompass2_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CDevices_CSensors_CICompass2_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CDevices_CSensors_CICompass2Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CSensors_CICompass2* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CSensors_CICompass2* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CSensors_CICompass2* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CSensors_CICompass2* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CSensors_CICompass2* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CSensors_CICompass2* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* put_ReadingTransform)(__x_ABI_CWindows_CDevices_CSensors_CICompass2* This,
        enum __x_ABI_CWindows_CGraphics_CDisplay_CDisplayOrientations value);
    HRESULT (STDMETHODCALLTYPE* get_ReadingTransform)(__x_ABI_CWindows_CDevices_CSensors_CICompass2* This,
        enum __x_ABI_CWindows_CGraphics_CDisplay_CDisplayOrientations* value);

        END_INTERFACE
    } __x_ABI_CWindows_CDevices_CSensors_CICompass2Vtbl;

    interface __x_ABI_CWindows_CDevices_CSensors_CICompass2
    {
        CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CICompass2Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CICompass2;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CICompass2_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CICompass3_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CDevices_CSensors_CICompass3_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CDevices_CSensors_CICompass3Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CSensors_CICompass3* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CSensors_CICompass3* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CSensors_CICompass3* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CSensors_CICompass3* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CSensors_CICompass3* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CSensors_CICompass3* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* put_ReportLatency)(__x_ABI_CWindows_CDevices_CSensors_CICompass3* This,
        UINT32 value);
    HRESULT (STDMETHODCALLTYPE* get_ReportLatency)(__x_ABI_CWindows_CDevices_CSensors_CICompass3* This,
        UINT32* value);
    HRESULT (STDMETHODCALLTYPE* get_MaxBatchSize)(__x_ABI_CWindows_CDevices_CSensors_CICompass3* This,
        UINT32* value);

        END_INTERFACE
    } __x_ABI_CWindows_CDevices_CSensors_CICompass3Vtbl;

    interface __x_ABI_CWindows_CDevices_CSensors_CICompass3
    {
        CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CICompass3Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CICompass3;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CICompass3_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CICompassDeviceId_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CDevices_CSensors_CICompassDeviceId_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CDevices_CSensors_CICompassDeviceIdVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CSensors_CICompassDeviceId* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CSensors_CICompassDeviceId* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CSensors_CICompassDeviceId* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CSensors_CICompassDeviceId* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CSensors_CICompassDeviceId* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CSensors_CICompassDeviceId* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_DeviceId)(__x_ABI_CWindows_CDevices_CSensors_CICompassDeviceId* This,
        HSTRING* value);

        END_INTERFACE
    } __x_ABI_CWindows_CDevices_CSensors_CICompassDeviceIdVtbl;

    interface __x_ABI_CWindows_CDevices_CSensors_CICompassDeviceId
    {
        CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CICompassDeviceIdVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CICompassDeviceId;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CICompassDeviceId_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CICompassReading_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CDevices_CSensors_CICompassReading_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CDevices_CSensors_CICompassReadingVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CSensors_CICompassReading* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CSensors_CICompassReading* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CSensors_CICompassReading* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CSensors_CICompassReading* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CSensors_CICompassReading* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CSensors_CICompassReading* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Timestamp)(__x_ABI_CWindows_CDevices_CSensors_CICompassReading* This,
        struct __x_ABI_CWindows_CFoundation_CDateTime* value);
    HRESULT (STDMETHODCALLTYPE* get_HeadingMagneticNorth)(__x_ABI_CWindows_CDevices_CSensors_CICompassReading* This,
        DOUBLE* value);
    HRESULT (STDMETHODCALLTYPE* get_HeadingTrueNorth)(__x_ABI_CWindows_CDevices_CSensors_CICompassReading* This,
        __x_ABI_C__FIReference_1_double** value);

        END_INTERFACE
    } __x_ABI_CWindows_CDevices_CSensors_CICompassReadingVtbl;

    interface __x_ABI_CWindows_CDevices_CSensors_CICompassReading
    {
        CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CICompassReadingVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CICompassReading;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CICompassReading_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CICompassReading2_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CDevices_CSensors_CICompassReading2_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CDevices_CSensors_CICompassReading2Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CSensors_CICompassReading2* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CSensors_CICompassReading2* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CSensors_CICompassReading2* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CSensors_CICompassReading2* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CSensors_CICompassReading2* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CSensors_CICompassReading2* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_PerformanceCount)(__x_ABI_CWindows_CDevices_CSensors_CICompassReading2* This,
        __x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CTimeSpan** value);
    HRESULT (STDMETHODCALLTYPE* get_Properties)(__x_ABI_CWindows_CDevices_CSensors_CICompassReading2* This,
        __x_ABI_C__FIMapView_2_HSTRING_IInspectable** value);

        END_INTERFACE
    } __x_ABI_CWindows_CDevices_CSensors_CICompassReading2Vtbl;

    interface __x_ABI_CWindows_CDevices_CSensors_CICompassReading2
    {
        CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CICompassReading2Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CICompassReading2;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CICompassReading2_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CICompassReadingChangedEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CDevices_CSensors_CICompassReadingChangedEventArgs_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CDevices_CSensors_CICompassReadingChangedEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CSensors_CICompassReadingChangedEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CSensors_CICompassReadingChangedEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CSensors_CICompassReadingChangedEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CSensors_CICompassReadingChangedEventArgs* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CSensors_CICompassReadingChangedEventArgs* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CSensors_CICompassReadingChangedEventArgs* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Reading)(__x_ABI_CWindows_CDevices_CSensors_CICompassReadingChangedEventArgs* This,
        __x_ABI_CWindows_CDevices_CSensors_CICompassReading** value);

        END_INTERFACE
    } __x_ABI_CWindows_CDevices_CSensors_CICompassReadingChangedEventArgsVtbl;

    interface __x_ABI_CWindows_CDevices_CSensors_CICompassReadingChangedEventArgs
    {
        CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CICompassReadingChangedEventArgsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CICompassReadingChangedEventArgs;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CICompassReadingChangedEventArgs_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CICompassReadingHeadingAccuracy_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CDevices_CSensors_CICompassReadingHeadingAccuracy_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CDevices_CSensors_CICompassReadingHeadingAccuracyVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CSensors_CICompassReadingHeadingAccuracy* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CSensors_CICompassReadingHeadingAccuracy* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CSensors_CICompassReadingHeadingAccuracy* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CSensors_CICompassReadingHeadingAccuracy* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CSensors_CICompassReadingHeadingAccuracy* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CSensors_CICompassReadingHeadingAccuracy* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_HeadingAccuracy)(__x_ABI_CWindows_CDevices_CSensors_CICompassReadingHeadingAccuracy* This,
        enum __x_ABI_CWindows_CDevices_CSensors_CMagnetometerAccuracy* value);

        END_INTERFACE
    } __x_ABI_CWindows_CDevices_CSensors_CICompassReadingHeadingAccuracyVtbl;

    interface __x_ABI_CWindows_CDevices_CSensors_CICompassReadingHeadingAccuracy
    {
        CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CICompassReadingHeadingAccuracyVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CICompassReadingHeadingAccuracy;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CICompassReadingHeadingAccuracy_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CICompassStatics_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CDevices_CSensors_CICompassStatics_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CDevices_CSensors_CICompassStaticsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CSensors_CICompassStatics* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CSensors_CICompassStatics* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CSensors_CICompassStatics* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CSensors_CICompassStatics* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CSensors_CICompassStatics* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CSensors_CICompassStatics* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetDefault)(__x_ABI_CWindows_CDevices_CSensors_CICompassStatics* This,
        __x_ABI_CWindows_CDevices_CSensors_CICompass** result);

        END_INTERFACE
    } __x_ABI_CWindows_CDevices_CSensors_CICompassStaticsVtbl;

    interface __x_ABI_CWindows_CDevices_CSensors_CICompassStatics
    {
        CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CICompassStaticsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CICompassStatics;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CICompassStatics_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CICompassStatics2_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CDevices_CSensors_CICompassStatics2_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CDevices_CSensors_CICompassStatics2Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CSensors_CICompassStatics2* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CSensors_CICompassStatics2* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CSensors_CICompassStatics2* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CSensors_CICompassStatics2* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CSensors_CICompassStatics2* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CSensors_CICompassStatics2* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetDeviceSelector)(__x_ABI_CWindows_CDevices_CSensors_CICompassStatics2* This,
        HSTRING* result);
    HRESULT (STDMETHODCALLTYPE* FromIdAsync)(__x_ABI_CWindows_CDevices_CSensors_CICompassStatics2* This,
        HSTRING deviceId,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__CCompass** operation);

        END_INTERFACE
    } __x_ABI_CWindows_CDevices_CSensors_CICompassStatics2Vtbl;

    interface __x_ABI_CWindows_CDevices_CSensors_CICompassStatics2
    {
        CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CICompassStatics2Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CICompassStatics2;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CICompassStatics2_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIGyrometer_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CDevices_CSensors_CIGyrometer_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CDevices_CSensors_CIGyrometerVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CSensors_CIGyrometer* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CSensors_CIGyrometer* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CSensors_CIGyrometer* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CSensors_CIGyrometer* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CSensors_CIGyrometer* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CSensors_CIGyrometer* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetCurrentReading)(__x_ABI_CWindows_CDevices_CSensors_CIGyrometer* This,
        __x_ABI_CWindows_CDevices_CSensors_CIGyrometerReading** value);
    HRESULT (STDMETHODCALLTYPE* get_MinimumReportInterval)(__x_ABI_CWindows_CDevices_CSensors_CIGyrometer* This,
        UINT32* value);
    HRESULT (STDMETHODCALLTYPE* put_ReportInterval)(__x_ABI_CWindows_CDevices_CSensors_CIGyrometer* This,
        UINT32 value);
    HRESULT (STDMETHODCALLTYPE* get_ReportInterval)(__x_ABI_CWindows_CDevices_CSensors_CIGyrometer* This,
        UINT32* value);
    HRESULT (STDMETHODCALLTYPE* add_ReadingChanged)(__x_ABI_CWindows_CDevices_CSensors_CIGyrometer* This,
        __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CSensors__CGyrometer___x_ABI_CWindows__CDevices__CSensors__CGyrometerReadingChangedEventArgs* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_ReadingChanged)(__x_ABI_CWindows_CDevices_CSensors_CIGyrometer* This,
        EventRegistrationToken token);

        END_INTERFACE
    } __x_ABI_CWindows_CDevices_CSensors_CIGyrometerVtbl;

    interface __x_ABI_CWindows_CDevices_CSensors_CIGyrometer
    {
        CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CIGyrometerVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIGyrometer;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIGyrometer_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIGyrometer2_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CDevices_CSensors_CIGyrometer2_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CDevices_CSensors_CIGyrometer2Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CSensors_CIGyrometer2* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CSensors_CIGyrometer2* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CSensors_CIGyrometer2* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CSensors_CIGyrometer2* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CSensors_CIGyrometer2* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CSensors_CIGyrometer2* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* put_ReadingTransform)(__x_ABI_CWindows_CDevices_CSensors_CIGyrometer2* This,
        enum __x_ABI_CWindows_CGraphics_CDisplay_CDisplayOrientations value);
    HRESULT (STDMETHODCALLTYPE* get_ReadingTransform)(__x_ABI_CWindows_CDevices_CSensors_CIGyrometer2* This,
        enum __x_ABI_CWindows_CGraphics_CDisplay_CDisplayOrientations* value);

        END_INTERFACE
    } __x_ABI_CWindows_CDevices_CSensors_CIGyrometer2Vtbl;

    interface __x_ABI_CWindows_CDevices_CSensors_CIGyrometer2
    {
        CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CIGyrometer2Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIGyrometer2;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIGyrometer2_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIGyrometer3_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CDevices_CSensors_CIGyrometer3_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CDevices_CSensors_CIGyrometer3Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CSensors_CIGyrometer3* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CSensors_CIGyrometer3* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CSensors_CIGyrometer3* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CSensors_CIGyrometer3* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CSensors_CIGyrometer3* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CSensors_CIGyrometer3* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* put_ReportLatency)(__x_ABI_CWindows_CDevices_CSensors_CIGyrometer3* This,
        UINT32 value);
    HRESULT (STDMETHODCALLTYPE* get_ReportLatency)(__x_ABI_CWindows_CDevices_CSensors_CIGyrometer3* This,
        UINT32* value);
    HRESULT (STDMETHODCALLTYPE* get_MaxBatchSize)(__x_ABI_CWindows_CDevices_CSensors_CIGyrometer3* This,
        UINT32* value);

        END_INTERFACE
    } __x_ABI_CWindows_CDevices_CSensors_CIGyrometer3Vtbl;

    interface __x_ABI_CWindows_CDevices_CSensors_CIGyrometer3
    {
        CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CIGyrometer3Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIGyrometer3;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIGyrometer3_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIGyrometerDeviceId_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CDevices_CSensors_CIGyrometerDeviceId_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CDevices_CSensors_CIGyrometerDeviceIdVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CSensors_CIGyrometerDeviceId* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CSensors_CIGyrometerDeviceId* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CSensors_CIGyrometerDeviceId* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CSensors_CIGyrometerDeviceId* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CSensors_CIGyrometerDeviceId* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CSensors_CIGyrometerDeviceId* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_DeviceId)(__x_ABI_CWindows_CDevices_CSensors_CIGyrometerDeviceId* This,
        HSTRING* value);

        END_INTERFACE
    } __x_ABI_CWindows_CDevices_CSensors_CIGyrometerDeviceIdVtbl;

    interface __x_ABI_CWindows_CDevices_CSensors_CIGyrometerDeviceId
    {
        CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CIGyrometerDeviceIdVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIGyrometerDeviceId;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIGyrometerDeviceId_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIGyrometerReading_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CDevices_CSensors_CIGyrometerReading_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CDevices_CSensors_CIGyrometerReadingVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CSensors_CIGyrometerReading* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CSensors_CIGyrometerReading* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CSensors_CIGyrometerReading* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CSensors_CIGyrometerReading* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CSensors_CIGyrometerReading* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CSensors_CIGyrometerReading* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Timestamp)(__x_ABI_CWindows_CDevices_CSensors_CIGyrometerReading* This,
        struct __x_ABI_CWindows_CFoundation_CDateTime* value);
    HRESULT (STDMETHODCALLTYPE* get_AngularVelocityX)(__x_ABI_CWindows_CDevices_CSensors_CIGyrometerReading* This,
        DOUBLE* value);
    HRESULT (STDMETHODCALLTYPE* get_AngularVelocityY)(__x_ABI_CWindows_CDevices_CSensors_CIGyrometerReading* This,
        DOUBLE* value);
    HRESULT (STDMETHODCALLTYPE* get_AngularVelocityZ)(__x_ABI_CWindows_CDevices_CSensors_CIGyrometerReading* This,
        DOUBLE* value);

        END_INTERFACE
    } __x_ABI_CWindows_CDevices_CSensors_CIGyrometerReadingVtbl;

    interface __x_ABI_CWindows_CDevices_CSensors_CIGyrometerReading
    {
        CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CIGyrometerReadingVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIGyrometerReading;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIGyrometerReading_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIGyrometerReading2_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CDevices_CSensors_CIGyrometerReading2_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CDevices_CSensors_CIGyrometerReading2Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CSensors_CIGyrometerReading2* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CSensors_CIGyrometerReading2* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CSensors_CIGyrometerReading2* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CSensors_CIGyrometerReading2* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CSensors_CIGyrometerReading2* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CSensors_CIGyrometerReading2* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_PerformanceCount)(__x_ABI_CWindows_CDevices_CSensors_CIGyrometerReading2* This,
        __x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CTimeSpan** value);
    HRESULT (STDMETHODCALLTYPE* get_Properties)(__x_ABI_CWindows_CDevices_CSensors_CIGyrometerReading2* This,
        __x_ABI_C__FIMapView_2_HSTRING_IInspectable** value);

        END_INTERFACE
    } __x_ABI_CWindows_CDevices_CSensors_CIGyrometerReading2Vtbl;

    interface __x_ABI_CWindows_CDevices_CSensors_CIGyrometerReading2
    {
        CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CIGyrometerReading2Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIGyrometerReading2;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIGyrometerReading2_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIGyrometerReadingChangedEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CDevices_CSensors_CIGyrometerReadingChangedEventArgs_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CDevices_CSensors_CIGyrometerReadingChangedEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CSensors_CIGyrometerReadingChangedEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CSensors_CIGyrometerReadingChangedEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CSensors_CIGyrometerReadingChangedEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CSensors_CIGyrometerReadingChangedEventArgs* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CSensors_CIGyrometerReadingChangedEventArgs* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CSensors_CIGyrometerReadingChangedEventArgs* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Reading)(__x_ABI_CWindows_CDevices_CSensors_CIGyrometerReadingChangedEventArgs* This,
        __x_ABI_CWindows_CDevices_CSensors_CIGyrometerReading** value);

        END_INTERFACE
    } __x_ABI_CWindows_CDevices_CSensors_CIGyrometerReadingChangedEventArgsVtbl;

    interface __x_ABI_CWindows_CDevices_CSensors_CIGyrometerReadingChangedEventArgs
    {
        CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CIGyrometerReadingChangedEventArgsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIGyrometerReadingChangedEventArgs;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIGyrometerReadingChangedEventArgs_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIGyrometerStatics_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CDevices_CSensors_CIGyrometerStatics_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CDevices_CSensors_CIGyrometerStaticsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CSensors_CIGyrometerStatics* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CSensors_CIGyrometerStatics* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CSensors_CIGyrometerStatics* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CSensors_CIGyrometerStatics* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CSensors_CIGyrometerStatics* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CSensors_CIGyrometerStatics* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetDefault)(__x_ABI_CWindows_CDevices_CSensors_CIGyrometerStatics* This,
        __x_ABI_CWindows_CDevices_CSensors_CIGyrometer** result);

        END_INTERFACE
    } __x_ABI_CWindows_CDevices_CSensors_CIGyrometerStaticsVtbl;

    interface __x_ABI_CWindows_CDevices_CSensors_CIGyrometerStatics
    {
        CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CIGyrometerStaticsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIGyrometerStatics;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIGyrometerStatics_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIGyrometerStatics2_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CDevices_CSensors_CIGyrometerStatics2_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CDevices_CSensors_CIGyrometerStatics2Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CSensors_CIGyrometerStatics2* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CSensors_CIGyrometerStatics2* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CSensors_CIGyrometerStatics2* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CSensors_CIGyrometerStatics2* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CSensors_CIGyrometerStatics2* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CSensors_CIGyrometerStatics2* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetDeviceSelector)(__x_ABI_CWindows_CDevices_CSensors_CIGyrometerStatics2* This,
        HSTRING* result);
    HRESULT (STDMETHODCALLTYPE* FromIdAsync)(__x_ABI_CWindows_CDevices_CSensors_CIGyrometerStatics2* This,
        HSTRING deviceId,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__CGyrometer** operation);

        END_INTERFACE
    } __x_ABI_CWindows_CDevices_CSensors_CIGyrometerStatics2Vtbl;

    interface __x_ABI_CWindows_CDevices_CSensors_CIGyrometerStatics2
    {
        CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CIGyrometerStatics2Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIGyrometerStatics2;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIGyrometerStatics2_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIHingeAngleReading_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CDevices_CSensors_CIHingeAngleReading_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CDevices_CSensors_CIHingeAngleReadingVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CSensors_CIHingeAngleReading* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CSensors_CIHingeAngleReading* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CSensors_CIHingeAngleReading* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CSensors_CIHingeAngleReading* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CSensors_CIHingeAngleReading* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CSensors_CIHingeAngleReading* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Timestamp)(__x_ABI_CWindows_CDevices_CSensors_CIHingeAngleReading* This,
        struct __x_ABI_CWindows_CFoundation_CDateTime* value);
    HRESULT (STDMETHODCALLTYPE* get_AngleInDegrees)(__x_ABI_CWindows_CDevices_CSensors_CIHingeAngleReading* This,
        DOUBLE* value);
    HRESULT (STDMETHODCALLTYPE* get_Properties)(__x_ABI_CWindows_CDevices_CSensors_CIHingeAngleReading* This,
        __x_ABI_C__FIMapView_2_HSTRING_IInspectable** value);

        END_INTERFACE
    } __x_ABI_CWindows_CDevices_CSensors_CIHingeAngleReadingVtbl;

    interface __x_ABI_CWindows_CDevices_CSensors_CIHingeAngleReading
    {
        CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CIHingeAngleReadingVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIHingeAngleReading;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIHingeAngleReading_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIHingeAngleSensor_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CDevices_CSensors_CIHingeAngleSensor_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CDevices_CSensors_CIHingeAngleSensorVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CSensors_CIHingeAngleSensor* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CSensors_CIHingeAngleSensor* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CSensors_CIHingeAngleSensor* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CSensors_CIHingeAngleSensor* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CSensors_CIHingeAngleSensor* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CSensors_CIHingeAngleSensor* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetCurrentReadingAsync)(__x_ABI_CWindows_CDevices_CSensors_CIHingeAngleSensor* This,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__CHingeAngleReading** value);
    HRESULT (STDMETHODCALLTYPE* get_DeviceId)(__x_ABI_CWindows_CDevices_CSensors_CIHingeAngleSensor* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_MinReportThresholdInDegrees)(__x_ABI_CWindows_CDevices_CSensors_CIHingeAngleSensor* This,
        DOUBLE* value);
    HRESULT (STDMETHODCALLTYPE* get_ReportThresholdInDegrees)(__x_ABI_CWindows_CDevices_CSensors_CIHingeAngleSensor* This,
        DOUBLE* value);
    HRESULT (STDMETHODCALLTYPE* put_ReportThresholdInDegrees)(__x_ABI_CWindows_CDevices_CSensors_CIHingeAngleSensor* This,
        DOUBLE value);
    HRESULT (STDMETHODCALLTYPE* add_ReadingChanged)(__x_ABI_CWindows_CDevices_CSensors_CIHingeAngleSensor* This,
        __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CSensors__CHingeAngleSensor___x_ABI_CWindows__CDevices__CSensors__CHingeAngleSensorReadingChangedEventArgs* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_ReadingChanged)(__x_ABI_CWindows_CDevices_CSensors_CIHingeAngleSensor* This,
        EventRegistrationToken token);

        END_INTERFACE
    } __x_ABI_CWindows_CDevices_CSensors_CIHingeAngleSensorVtbl;

    interface __x_ABI_CWindows_CDevices_CSensors_CIHingeAngleSensor
    {
        CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CIHingeAngleSensorVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIHingeAngleSensor;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIHingeAngleSensor_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIHingeAngleSensorReadingChangedEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CDevices_CSensors_CIHingeAngleSensorReadingChangedEventArgs_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CDevices_CSensors_CIHingeAngleSensorReadingChangedEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CSensors_CIHingeAngleSensorReadingChangedEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CSensors_CIHingeAngleSensorReadingChangedEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CSensors_CIHingeAngleSensorReadingChangedEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CSensors_CIHingeAngleSensorReadingChangedEventArgs* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CSensors_CIHingeAngleSensorReadingChangedEventArgs* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CSensors_CIHingeAngleSensorReadingChangedEventArgs* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Reading)(__x_ABI_CWindows_CDevices_CSensors_CIHingeAngleSensorReadingChangedEventArgs* This,
        __x_ABI_CWindows_CDevices_CSensors_CIHingeAngleReading** value);

        END_INTERFACE
    } __x_ABI_CWindows_CDevices_CSensors_CIHingeAngleSensorReadingChangedEventArgsVtbl;

    interface __x_ABI_CWindows_CDevices_CSensors_CIHingeAngleSensorReadingChangedEventArgs
    {
        CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CIHingeAngleSensorReadingChangedEventArgsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIHingeAngleSensorReadingChangedEventArgs;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIHingeAngleSensorReadingChangedEventArgs_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIHingeAngleSensorStatics_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CDevices_CSensors_CIHingeAngleSensorStatics_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CDevices_CSensors_CIHingeAngleSensorStaticsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CSensors_CIHingeAngleSensorStatics* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CSensors_CIHingeAngleSensorStatics* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CSensors_CIHingeAngleSensorStatics* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CSensors_CIHingeAngleSensorStatics* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CSensors_CIHingeAngleSensorStatics* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CSensors_CIHingeAngleSensorStatics* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetDeviceSelector)(__x_ABI_CWindows_CDevices_CSensors_CIHingeAngleSensorStatics* This,
        HSTRING* result);
    HRESULT (STDMETHODCALLTYPE* GetDefaultAsync)(__x_ABI_CWindows_CDevices_CSensors_CIHingeAngleSensorStatics* This,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__CHingeAngleSensor** result);
    HRESULT (STDMETHODCALLTYPE* GetRelatedToAdjacentPanelsAsync)(__x_ABI_CWindows_CDevices_CSensors_CIHingeAngleSensorStatics* This,
        HSTRING firstPanelId,
        HSTRING secondPanelId,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__CHingeAngleSensor** result);
    HRESULT (STDMETHODCALLTYPE* FromIdAsync)(__x_ABI_CWindows_CDevices_CSensors_CIHingeAngleSensorStatics* This,
        HSTRING deviceId,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__CHingeAngleSensor** result);

        END_INTERFACE
    } __x_ABI_CWindows_CDevices_CSensors_CIHingeAngleSensorStaticsVtbl;

    interface __x_ABI_CWindows_CDevices_CSensors_CIHingeAngleSensorStatics
    {
        CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CIHingeAngleSensorStaticsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIHingeAngleSensorStatics;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIHingeAngleSensorStatics_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIInclinometer_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CDevices_CSensors_CIInclinometer_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CDevices_CSensors_CIInclinometerVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CSensors_CIInclinometer* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CSensors_CIInclinometer* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CSensors_CIInclinometer* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CSensors_CIInclinometer* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CSensors_CIInclinometer* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CSensors_CIInclinometer* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetCurrentReading)(__x_ABI_CWindows_CDevices_CSensors_CIInclinometer* This,
        __x_ABI_CWindows_CDevices_CSensors_CIInclinometerReading** value);
    HRESULT (STDMETHODCALLTYPE* get_MinimumReportInterval)(__x_ABI_CWindows_CDevices_CSensors_CIInclinometer* This,
        UINT32* value);
    HRESULT (STDMETHODCALLTYPE* put_ReportInterval)(__x_ABI_CWindows_CDevices_CSensors_CIInclinometer* This,
        UINT32 value);
    HRESULT (STDMETHODCALLTYPE* get_ReportInterval)(__x_ABI_CWindows_CDevices_CSensors_CIInclinometer* This,
        UINT32* value);
    HRESULT (STDMETHODCALLTYPE* add_ReadingChanged)(__x_ABI_CWindows_CDevices_CSensors_CIInclinometer* This,
        __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CSensors__CInclinometer___x_ABI_CWindows__CDevices__CSensors__CInclinometerReadingChangedEventArgs* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_ReadingChanged)(__x_ABI_CWindows_CDevices_CSensors_CIInclinometer* This,
        EventRegistrationToken token);

        END_INTERFACE
    } __x_ABI_CWindows_CDevices_CSensors_CIInclinometerVtbl;

    interface __x_ABI_CWindows_CDevices_CSensors_CIInclinometer
    {
        CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CIInclinometerVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIInclinometer;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIInclinometer_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIInclinometer2_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CDevices_CSensors_CIInclinometer2_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CDevices_CSensors_CIInclinometer2Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CSensors_CIInclinometer2* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CSensors_CIInclinometer2* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CSensors_CIInclinometer2* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CSensors_CIInclinometer2* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CSensors_CIInclinometer2* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CSensors_CIInclinometer2* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* put_ReadingTransform)(__x_ABI_CWindows_CDevices_CSensors_CIInclinometer2* This,
        enum __x_ABI_CWindows_CGraphics_CDisplay_CDisplayOrientations value);
    HRESULT (STDMETHODCALLTYPE* get_ReadingTransform)(__x_ABI_CWindows_CDevices_CSensors_CIInclinometer2* This,
        enum __x_ABI_CWindows_CGraphics_CDisplay_CDisplayOrientations* value);
    HRESULT (STDMETHODCALLTYPE* get_ReadingType)(__x_ABI_CWindows_CDevices_CSensors_CIInclinometer2* This,
        enum __x_ABI_CWindows_CDevices_CSensors_CSensorReadingType* type);

        END_INTERFACE
    } __x_ABI_CWindows_CDevices_CSensors_CIInclinometer2Vtbl;

    interface __x_ABI_CWindows_CDevices_CSensors_CIInclinometer2
    {
        CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CIInclinometer2Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIInclinometer2;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIInclinometer2_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIInclinometer3_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CDevices_CSensors_CIInclinometer3_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CDevices_CSensors_CIInclinometer3Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CSensors_CIInclinometer3* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CSensors_CIInclinometer3* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CSensors_CIInclinometer3* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CSensors_CIInclinometer3* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CSensors_CIInclinometer3* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CSensors_CIInclinometer3* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* put_ReportLatency)(__x_ABI_CWindows_CDevices_CSensors_CIInclinometer3* This,
        UINT32 value);
    HRESULT (STDMETHODCALLTYPE* get_ReportLatency)(__x_ABI_CWindows_CDevices_CSensors_CIInclinometer3* This,
        UINT32* value);
    HRESULT (STDMETHODCALLTYPE* get_MaxBatchSize)(__x_ABI_CWindows_CDevices_CSensors_CIInclinometer3* This,
        UINT32* value);

        END_INTERFACE
    } __x_ABI_CWindows_CDevices_CSensors_CIInclinometer3Vtbl;

    interface __x_ABI_CWindows_CDevices_CSensors_CIInclinometer3
    {
        CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CIInclinometer3Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIInclinometer3;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIInclinometer3_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIInclinometerDeviceId_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CDevices_CSensors_CIInclinometerDeviceId_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CDevices_CSensors_CIInclinometerDeviceIdVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CSensors_CIInclinometerDeviceId* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CSensors_CIInclinometerDeviceId* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CSensors_CIInclinometerDeviceId* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CSensors_CIInclinometerDeviceId* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CSensors_CIInclinometerDeviceId* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CSensors_CIInclinometerDeviceId* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_DeviceId)(__x_ABI_CWindows_CDevices_CSensors_CIInclinometerDeviceId* This,
        HSTRING* value);

        END_INTERFACE
    } __x_ABI_CWindows_CDevices_CSensors_CIInclinometerDeviceIdVtbl;

    interface __x_ABI_CWindows_CDevices_CSensors_CIInclinometerDeviceId
    {
        CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CIInclinometerDeviceIdVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIInclinometerDeviceId;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIInclinometerDeviceId_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIInclinometerReading_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CDevices_CSensors_CIInclinometerReading_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CDevices_CSensors_CIInclinometerReadingVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CSensors_CIInclinometerReading* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CSensors_CIInclinometerReading* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CSensors_CIInclinometerReading* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CSensors_CIInclinometerReading* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CSensors_CIInclinometerReading* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CSensors_CIInclinometerReading* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Timestamp)(__x_ABI_CWindows_CDevices_CSensors_CIInclinometerReading* This,
        struct __x_ABI_CWindows_CFoundation_CDateTime* value);
    HRESULT (STDMETHODCALLTYPE* get_PitchDegrees)(__x_ABI_CWindows_CDevices_CSensors_CIInclinometerReading* This,
        FLOAT* value);
    HRESULT (STDMETHODCALLTYPE* get_RollDegrees)(__x_ABI_CWindows_CDevices_CSensors_CIInclinometerReading* This,
        FLOAT* value);
    HRESULT (STDMETHODCALLTYPE* get_YawDegrees)(__x_ABI_CWindows_CDevices_CSensors_CIInclinometerReading* This,
        FLOAT* value);

        END_INTERFACE
    } __x_ABI_CWindows_CDevices_CSensors_CIInclinometerReadingVtbl;

    interface __x_ABI_CWindows_CDevices_CSensors_CIInclinometerReading
    {
        CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CIInclinometerReadingVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIInclinometerReading;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIInclinometerReading_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIInclinometerReading2_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CDevices_CSensors_CIInclinometerReading2_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CDevices_CSensors_CIInclinometerReading2Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CSensors_CIInclinometerReading2* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CSensors_CIInclinometerReading2* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CSensors_CIInclinometerReading2* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CSensors_CIInclinometerReading2* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CSensors_CIInclinometerReading2* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CSensors_CIInclinometerReading2* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_PerformanceCount)(__x_ABI_CWindows_CDevices_CSensors_CIInclinometerReading2* This,
        __x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CTimeSpan** value);
    HRESULT (STDMETHODCALLTYPE* get_Properties)(__x_ABI_CWindows_CDevices_CSensors_CIInclinometerReading2* This,
        __x_ABI_C__FIMapView_2_HSTRING_IInspectable** value);

        END_INTERFACE
    } __x_ABI_CWindows_CDevices_CSensors_CIInclinometerReading2Vtbl;

    interface __x_ABI_CWindows_CDevices_CSensors_CIInclinometerReading2
    {
        CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CIInclinometerReading2Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIInclinometerReading2;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIInclinometerReading2_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIInclinometerReadingChangedEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CDevices_CSensors_CIInclinometerReadingChangedEventArgs_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CDevices_CSensors_CIInclinometerReadingChangedEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CSensors_CIInclinometerReadingChangedEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CSensors_CIInclinometerReadingChangedEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CSensors_CIInclinometerReadingChangedEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CSensors_CIInclinometerReadingChangedEventArgs* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CSensors_CIInclinometerReadingChangedEventArgs* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CSensors_CIInclinometerReadingChangedEventArgs* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Reading)(__x_ABI_CWindows_CDevices_CSensors_CIInclinometerReadingChangedEventArgs* This,
        __x_ABI_CWindows_CDevices_CSensors_CIInclinometerReading** value);

        END_INTERFACE
    } __x_ABI_CWindows_CDevices_CSensors_CIInclinometerReadingChangedEventArgsVtbl;

    interface __x_ABI_CWindows_CDevices_CSensors_CIInclinometerReadingChangedEventArgs
    {
        CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CIInclinometerReadingChangedEventArgsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIInclinometerReadingChangedEventArgs;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIInclinometerReadingChangedEventArgs_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIInclinometerReadingYawAccuracy_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CDevices_CSensors_CIInclinometerReadingYawAccuracy_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CDevices_CSensors_CIInclinometerReadingYawAccuracyVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CSensors_CIInclinometerReadingYawAccuracy* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CSensors_CIInclinometerReadingYawAccuracy* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CSensors_CIInclinometerReadingYawAccuracy* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CSensors_CIInclinometerReadingYawAccuracy* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CSensors_CIInclinometerReadingYawAccuracy* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CSensors_CIInclinometerReadingYawAccuracy* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_YawAccuracy)(__x_ABI_CWindows_CDevices_CSensors_CIInclinometerReadingYawAccuracy* This,
        enum __x_ABI_CWindows_CDevices_CSensors_CMagnetometerAccuracy* value);

        END_INTERFACE
    } __x_ABI_CWindows_CDevices_CSensors_CIInclinometerReadingYawAccuracyVtbl;

    interface __x_ABI_CWindows_CDevices_CSensors_CIInclinometerReadingYawAccuracy
    {
        CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CIInclinometerReadingYawAccuracyVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIInclinometerReadingYawAccuracy;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIInclinometerReadingYawAccuracy_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIInclinometerStatics_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CDevices_CSensors_CIInclinometerStatics_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CDevices_CSensors_CIInclinometerStaticsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CSensors_CIInclinometerStatics* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CSensors_CIInclinometerStatics* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CSensors_CIInclinometerStatics* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CSensors_CIInclinometerStatics* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CSensors_CIInclinometerStatics* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CSensors_CIInclinometerStatics* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetDefault)(__x_ABI_CWindows_CDevices_CSensors_CIInclinometerStatics* This,
        __x_ABI_CWindows_CDevices_CSensors_CIInclinometer** result);

        END_INTERFACE
    } __x_ABI_CWindows_CDevices_CSensors_CIInclinometerStaticsVtbl;

    interface __x_ABI_CWindows_CDevices_CSensors_CIInclinometerStatics
    {
        CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CIInclinometerStaticsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIInclinometerStatics;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIInclinometerStatics_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIInclinometerStatics2_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CDevices_CSensors_CIInclinometerStatics2_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CDevices_CSensors_CIInclinometerStatics2Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CSensors_CIInclinometerStatics2* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CSensors_CIInclinometerStatics2* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CSensors_CIInclinometerStatics2* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CSensors_CIInclinometerStatics2* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CSensors_CIInclinometerStatics2* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CSensors_CIInclinometerStatics2* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetDefaultForRelativeReadings)(__x_ABI_CWindows_CDevices_CSensors_CIInclinometerStatics2* This,
        __x_ABI_CWindows_CDevices_CSensors_CIInclinometer** result);

        END_INTERFACE
    } __x_ABI_CWindows_CDevices_CSensors_CIInclinometerStatics2Vtbl;

    interface __x_ABI_CWindows_CDevices_CSensors_CIInclinometerStatics2
    {
        CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CIInclinometerStatics2Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIInclinometerStatics2;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIInclinometerStatics2_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIInclinometerStatics3_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CDevices_CSensors_CIInclinometerStatics3_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CDevices_CSensors_CIInclinometerStatics3Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CSensors_CIInclinometerStatics3* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CSensors_CIInclinometerStatics3* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CSensors_CIInclinometerStatics3* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CSensors_CIInclinometerStatics3* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CSensors_CIInclinometerStatics3* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CSensors_CIInclinometerStatics3* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetDefaultWithSensorReadingType)(__x_ABI_CWindows_CDevices_CSensors_CIInclinometerStatics3* This,
        enum __x_ABI_CWindows_CDevices_CSensors_CSensorReadingType sensorReadingtype,
        __x_ABI_CWindows_CDevices_CSensors_CIInclinometer** result);

        END_INTERFACE
    } __x_ABI_CWindows_CDevices_CSensors_CIInclinometerStatics3Vtbl;

    interface __x_ABI_CWindows_CDevices_CSensors_CIInclinometerStatics3
    {
        CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CIInclinometerStatics3Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIInclinometerStatics3;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIInclinometerStatics3_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIInclinometerStatics4_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CDevices_CSensors_CIInclinometerStatics4_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CDevices_CSensors_CIInclinometerStatics4Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CSensors_CIInclinometerStatics4* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CSensors_CIInclinometerStatics4* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CSensors_CIInclinometerStatics4* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CSensors_CIInclinometerStatics4* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CSensors_CIInclinometerStatics4* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CSensors_CIInclinometerStatics4* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetDeviceSelector)(__x_ABI_CWindows_CDevices_CSensors_CIInclinometerStatics4* This,
        enum __x_ABI_CWindows_CDevices_CSensors_CSensorReadingType readingType,
        HSTRING* result);
    HRESULT (STDMETHODCALLTYPE* FromIdAsync)(__x_ABI_CWindows_CDevices_CSensors_CIInclinometerStatics4* This,
        HSTRING deviceId,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__CInclinometer** operation);

        END_INTERFACE
    } __x_ABI_CWindows_CDevices_CSensors_CIInclinometerStatics4Vtbl;

    interface __x_ABI_CWindows_CDevices_CSensors_CIInclinometerStatics4
    {
        CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CIInclinometerStatics4Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIInclinometerStatics4;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIInclinometerStatics4_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CILightSensor_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CDevices_CSensors_CILightSensor_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CDevices_CSensors_CILightSensorVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CSensors_CILightSensor* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CSensors_CILightSensor* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CSensors_CILightSensor* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CSensors_CILightSensor* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CSensors_CILightSensor* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CSensors_CILightSensor* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetCurrentReading)(__x_ABI_CWindows_CDevices_CSensors_CILightSensor* This,
        __x_ABI_CWindows_CDevices_CSensors_CILightSensorReading** value);
    HRESULT (STDMETHODCALLTYPE* get_MinimumReportInterval)(__x_ABI_CWindows_CDevices_CSensors_CILightSensor* This,
        UINT32* value);
    HRESULT (STDMETHODCALLTYPE* put_ReportInterval)(__x_ABI_CWindows_CDevices_CSensors_CILightSensor* This,
        UINT32 value);
    HRESULT (STDMETHODCALLTYPE* get_ReportInterval)(__x_ABI_CWindows_CDevices_CSensors_CILightSensor* This,
        UINT32* value);
    HRESULT (STDMETHODCALLTYPE* add_ReadingChanged)(__x_ABI_CWindows_CDevices_CSensors_CILightSensor* This,
        __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CSensors__CLightSensor___x_ABI_CWindows__CDevices__CSensors__CLightSensorReadingChangedEventArgs* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_ReadingChanged)(__x_ABI_CWindows_CDevices_CSensors_CILightSensor* This,
        EventRegistrationToken token);

        END_INTERFACE
    } __x_ABI_CWindows_CDevices_CSensors_CILightSensorVtbl;

    interface __x_ABI_CWindows_CDevices_CSensors_CILightSensor
    {
        CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CILightSensorVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CILightSensor;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CILightSensor_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CILightSensor2_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CDevices_CSensors_CILightSensor2_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CDevices_CSensors_CILightSensor2Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CSensors_CILightSensor2* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CSensors_CILightSensor2* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CSensors_CILightSensor2* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CSensors_CILightSensor2* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CSensors_CILightSensor2* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CSensors_CILightSensor2* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* put_ReportLatency)(__x_ABI_CWindows_CDevices_CSensors_CILightSensor2* This,
        UINT32 value);
    HRESULT (STDMETHODCALLTYPE* get_ReportLatency)(__x_ABI_CWindows_CDevices_CSensors_CILightSensor2* This,
        UINT32* value);
    HRESULT (STDMETHODCALLTYPE* get_MaxBatchSize)(__x_ABI_CWindows_CDevices_CSensors_CILightSensor2* This,
        UINT32* value);

        END_INTERFACE
    } __x_ABI_CWindows_CDevices_CSensors_CILightSensor2Vtbl;

    interface __x_ABI_CWindows_CDevices_CSensors_CILightSensor2
    {
        CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CILightSensor2Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CILightSensor2;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CILightSensor2_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CILightSensorDeviceId_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CDevices_CSensors_CILightSensorDeviceId_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CDevices_CSensors_CILightSensorDeviceIdVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CSensors_CILightSensorDeviceId* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CSensors_CILightSensorDeviceId* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CSensors_CILightSensorDeviceId* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CSensors_CILightSensorDeviceId* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CSensors_CILightSensorDeviceId* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CSensors_CILightSensorDeviceId* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_DeviceId)(__x_ABI_CWindows_CDevices_CSensors_CILightSensorDeviceId* This,
        HSTRING* value);

        END_INTERFACE
    } __x_ABI_CWindows_CDevices_CSensors_CILightSensorDeviceIdVtbl;

    interface __x_ABI_CWindows_CDevices_CSensors_CILightSensorDeviceId
    {
        CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CILightSensorDeviceIdVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CILightSensorDeviceId;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CILightSensorDeviceId_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CILightSensorReading_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CDevices_CSensors_CILightSensorReading_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CDevices_CSensors_CILightSensorReadingVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CSensors_CILightSensorReading* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CSensors_CILightSensorReading* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CSensors_CILightSensorReading* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CSensors_CILightSensorReading* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CSensors_CILightSensorReading* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CSensors_CILightSensorReading* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Timestamp)(__x_ABI_CWindows_CDevices_CSensors_CILightSensorReading* This,
        struct __x_ABI_CWindows_CFoundation_CDateTime* value);
    HRESULT (STDMETHODCALLTYPE* get_IlluminanceInLux)(__x_ABI_CWindows_CDevices_CSensors_CILightSensorReading* This,
        FLOAT* value);

        END_INTERFACE
    } __x_ABI_CWindows_CDevices_CSensors_CILightSensorReadingVtbl;

    interface __x_ABI_CWindows_CDevices_CSensors_CILightSensorReading
    {
        CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CILightSensorReadingVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CILightSensorReading;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CILightSensorReading_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CILightSensorReading2_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CDevices_CSensors_CILightSensorReading2_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CDevices_CSensors_CILightSensorReading2Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CSensors_CILightSensorReading2* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CSensors_CILightSensorReading2* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CSensors_CILightSensorReading2* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CSensors_CILightSensorReading2* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CSensors_CILightSensorReading2* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CSensors_CILightSensorReading2* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_PerformanceCount)(__x_ABI_CWindows_CDevices_CSensors_CILightSensorReading2* This,
        __x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CTimeSpan** value);
    HRESULT (STDMETHODCALLTYPE* get_Properties)(__x_ABI_CWindows_CDevices_CSensors_CILightSensorReading2* This,
        __x_ABI_C__FIMapView_2_HSTRING_IInspectable** value);

        END_INTERFACE
    } __x_ABI_CWindows_CDevices_CSensors_CILightSensorReading2Vtbl;

    interface __x_ABI_CWindows_CDevices_CSensors_CILightSensorReading2
    {
        CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CILightSensorReading2Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CILightSensorReading2;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CILightSensorReading2_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CILightSensorReadingChangedEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CDevices_CSensors_CILightSensorReadingChangedEventArgs_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CDevices_CSensors_CILightSensorReadingChangedEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CSensors_CILightSensorReadingChangedEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CSensors_CILightSensorReadingChangedEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CSensors_CILightSensorReadingChangedEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CSensors_CILightSensorReadingChangedEventArgs* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CSensors_CILightSensorReadingChangedEventArgs* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CSensors_CILightSensorReadingChangedEventArgs* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Reading)(__x_ABI_CWindows_CDevices_CSensors_CILightSensorReadingChangedEventArgs* This,
        __x_ABI_CWindows_CDevices_CSensors_CILightSensorReading** value);

        END_INTERFACE
    } __x_ABI_CWindows_CDevices_CSensors_CILightSensorReadingChangedEventArgsVtbl;

    interface __x_ABI_CWindows_CDevices_CSensors_CILightSensorReadingChangedEventArgs
    {
        CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CILightSensorReadingChangedEventArgsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CILightSensorReadingChangedEventArgs;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CILightSensorReadingChangedEventArgs_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CILightSensorStatics_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CDevices_CSensors_CILightSensorStatics_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CDevices_CSensors_CILightSensorStaticsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CSensors_CILightSensorStatics* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CSensors_CILightSensorStatics* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CSensors_CILightSensorStatics* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CSensors_CILightSensorStatics* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CSensors_CILightSensorStatics* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CSensors_CILightSensorStatics* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetDefault)(__x_ABI_CWindows_CDevices_CSensors_CILightSensorStatics* This,
        __x_ABI_CWindows_CDevices_CSensors_CILightSensor** result);

        END_INTERFACE
    } __x_ABI_CWindows_CDevices_CSensors_CILightSensorStaticsVtbl;

    interface __x_ABI_CWindows_CDevices_CSensors_CILightSensorStatics
    {
        CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CILightSensorStaticsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CILightSensorStatics;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CILightSensorStatics_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CILightSensorStatics2_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CDevices_CSensors_CILightSensorStatics2_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CDevices_CSensors_CILightSensorStatics2Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CSensors_CILightSensorStatics2* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CSensors_CILightSensorStatics2* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CSensors_CILightSensorStatics2* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CSensors_CILightSensorStatics2* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CSensors_CILightSensorStatics2* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CSensors_CILightSensorStatics2* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetDeviceSelector)(__x_ABI_CWindows_CDevices_CSensors_CILightSensorStatics2* This,
        HSTRING* result);
    HRESULT (STDMETHODCALLTYPE* FromIdAsync)(__x_ABI_CWindows_CDevices_CSensors_CILightSensorStatics2* This,
        HSTRING deviceId,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__CLightSensor** operation);

        END_INTERFACE
    } __x_ABI_CWindows_CDevices_CSensors_CILightSensorStatics2Vtbl;

    interface __x_ABI_CWindows_CDevices_CSensors_CILightSensorStatics2
    {
        CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CILightSensorStatics2Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CILightSensorStatics2;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CILightSensorStatics2_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIMagnetometer_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CDevices_CSensors_CIMagnetometer_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CDevices_CSensors_CIMagnetometerVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CSensors_CIMagnetometer* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CSensors_CIMagnetometer* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CSensors_CIMagnetometer* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CSensors_CIMagnetometer* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CSensors_CIMagnetometer* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CSensors_CIMagnetometer* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetCurrentReading)(__x_ABI_CWindows_CDevices_CSensors_CIMagnetometer* This,
        __x_ABI_CWindows_CDevices_CSensors_CIMagnetometerReading** value);
    HRESULT (STDMETHODCALLTYPE* get_MinimumReportInterval)(__x_ABI_CWindows_CDevices_CSensors_CIMagnetometer* This,
        UINT32* value);
    HRESULT (STDMETHODCALLTYPE* put_ReportInterval)(__x_ABI_CWindows_CDevices_CSensors_CIMagnetometer* This,
        UINT32 value);
    HRESULT (STDMETHODCALLTYPE* get_ReportInterval)(__x_ABI_CWindows_CDevices_CSensors_CIMagnetometer* This,
        UINT32* value);
    HRESULT (STDMETHODCALLTYPE* add_ReadingChanged)(__x_ABI_CWindows_CDevices_CSensors_CIMagnetometer* This,
        __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CSensors__CMagnetometer___x_ABI_CWindows__CDevices__CSensors__CMagnetometerReadingChangedEventArgs* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_ReadingChanged)(__x_ABI_CWindows_CDevices_CSensors_CIMagnetometer* This,
        EventRegistrationToken token);

        END_INTERFACE
    } __x_ABI_CWindows_CDevices_CSensors_CIMagnetometerVtbl;

    interface __x_ABI_CWindows_CDevices_CSensors_CIMagnetometer
    {
        CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CIMagnetometerVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIMagnetometer;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIMagnetometer_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIMagnetometer2_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CDevices_CSensors_CIMagnetometer2_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CDevices_CSensors_CIMagnetometer2Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CSensors_CIMagnetometer2* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CSensors_CIMagnetometer2* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CSensors_CIMagnetometer2* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CSensors_CIMagnetometer2* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CSensors_CIMagnetometer2* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CSensors_CIMagnetometer2* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* put_ReadingTransform)(__x_ABI_CWindows_CDevices_CSensors_CIMagnetometer2* This,
        enum __x_ABI_CWindows_CGraphics_CDisplay_CDisplayOrientations value);
    HRESULT (STDMETHODCALLTYPE* get_ReadingTransform)(__x_ABI_CWindows_CDevices_CSensors_CIMagnetometer2* This,
        enum __x_ABI_CWindows_CGraphics_CDisplay_CDisplayOrientations* value);

        END_INTERFACE
    } __x_ABI_CWindows_CDevices_CSensors_CIMagnetometer2Vtbl;

    interface __x_ABI_CWindows_CDevices_CSensors_CIMagnetometer2
    {
        CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CIMagnetometer2Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIMagnetometer2;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIMagnetometer2_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIMagnetometer3_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CDevices_CSensors_CIMagnetometer3_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CDevices_CSensors_CIMagnetometer3Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CSensors_CIMagnetometer3* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CSensors_CIMagnetometer3* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CSensors_CIMagnetometer3* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CSensors_CIMagnetometer3* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CSensors_CIMagnetometer3* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CSensors_CIMagnetometer3* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* put_ReportLatency)(__x_ABI_CWindows_CDevices_CSensors_CIMagnetometer3* This,
        UINT32 value);
    HRESULT (STDMETHODCALLTYPE* get_ReportLatency)(__x_ABI_CWindows_CDevices_CSensors_CIMagnetometer3* This,
        UINT32* value);
    HRESULT (STDMETHODCALLTYPE* get_MaxBatchSize)(__x_ABI_CWindows_CDevices_CSensors_CIMagnetometer3* This,
        UINT32* value);

        END_INTERFACE
    } __x_ABI_CWindows_CDevices_CSensors_CIMagnetometer3Vtbl;

    interface __x_ABI_CWindows_CDevices_CSensors_CIMagnetometer3
    {
        CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CIMagnetometer3Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIMagnetometer3;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIMagnetometer3_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIMagnetometerDeviceId_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CDevices_CSensors_CIMagnetometerDeviceId_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CDevices_CSensors_CIMagnetometerDeviceIdVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CSensors_CIMagnetometerDeviceId* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CSensors_CIMagnetometerDeviceId* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CSensors_CIMagnetometerDeviceId* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CSensors_CIMagnetometerDeviceId* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CSensors_CIMagnetometerDeviceId* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CSensors_CIMagnetometerDeviceId* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_DeviceId)(__x_ABI_CWindows_CDevices_CSensors_CIMagnetometerDeviceId* This,
        HSTRING* value);

        END_INTERFACE
    } __x_ABI_CWindows_CDevices_CSensors_CIMagnetometerDeviceIdVtbl;

    interface __x_ABI_CWindows_CDevices_CSensors_CIMagnetometerDeviceId
    {
        CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CIMagnetometerDeviceIdVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIMagnetometerDeviceId;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIMagnetometerDeviceId_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIMagnetometerReading_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CDevices_CSensors_CIMagnetometerReading_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CDevices_CSensors_CIMagnetometerReadingVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CSensors_CIMagnetometerReading* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CSensors_CIMagnetometerReading* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CSensors_CIMagnetometerReading* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CSensors_CIMagnetometerReading* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CSensors_CIMagnetometerReading* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CSensors_CIMagnetometerReading* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Timestamp)(__x_ABI_CWindows_CDevices_CSensors_CIMagnetometerReading* This,
        struct __x_ABI_CWindows_CFoundation_CDateTime* value);
    HRESULT (STDMETHODCALLTYPE* get_MagneticFieldX)(__x_ABI_CWindows_CDevices_CSensors_CIMagnetometerReading* This,
        FLOAT* value);
    HRESULT (STDMETHODCALLTYPE* get_MagneticFieldY)(__x_ABI_CWindows_CDevices_CSensors_CIMagnetometerReading* This,
        FLOAT* value);
    HRESULT (STDMETHODCALLTYPE* get_MagneticFieldZ)(__x_ABI_CWindows_CDevices_CSensors_CIMagnetometerReading* This,
        FLOAT* value);
    HRESULT (STDMETHODCALLTYPE* get_DirectionalAccuracy)(__x_ABI_CWindows_CDevices_CSensors_CIMagnetometerReading* This,
        enum __x_ABI_CWindows_CDevices_CSensors_CMagnetometerAccuracy* value);

        END_INTERFACE
    } __x_ABI_CWindows_CDevices_CSensors_CIMagnetometerReadingVtbl;

    interface __x_ABI_CWindows_CDevices_CSensors_CIMagnetometerReading
    {
        CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CIMagnetometerReadingVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIMagnetometerReading;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIMagnetometerReading_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIMagnetometerReading2_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CDevices_CSensors_CIMagnetometerReading2_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CDevices_CSensors_CIMagnetometerReading2Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CSensors_CIMagnetometerReading2* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CSensors_CIMagnetometerReading2* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CSensors_CIMagnetometerReading2* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CSensors_CIMagnetometerReading2* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CSensors_CIMagnetometerReading2* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CSensors_CIMagnetometerReading2* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_PerformanceCount)(__x_ABI_CWindows_CDevices_CSensors_CIMagnetometerReading2* This,
        __x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CTimeSpan** value);
    HRESULT (STDMETHODCALLTYPE* get_Properties)(__x_ABI_CWindows_CDevices_CSensors_CIMagnetometerReading2* This,
        __x_ABI_C__FIMapView_2_HSTRING_IInspectable** value);

        END_INTERFACE
    } __x_ABI_CWindows_CDevices_CSensors_CIMagnetometerReading2Vtbl;

    interface __x_ABI_CWindows_CDevices_CSensors_CIMagnetometerReading2
    {
        CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CIMagnetometerReading2Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIMagnetometerReading2;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIMagnetometerReading2_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIMagnetometerReadingChangedEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CDevices_CSensors_CIMagnetometerReadingChangedEventArgs_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CDevices_CSensors_CIMagnetometerReadingChangedEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CSensors_CIMagnetometerReadingChangedEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CSensors_CIMagnetometerReadingChangedEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CSensors_CIMagnetometerReadingChangedEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CSensors_CIMagnetometerReadingChangedEventArgs* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CSensors_CIMagnetometerReadingChangedEventArgs* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CSensors_CIMagnetometerReadingChangedEventArgs* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Reading)(__x_ABI_CWindows_CDevices_CSensors_CIMagnetometerReadingChangedEventArgs* This,
        __x_ABI_CWindows_CDevices_CSensors_CIMagnetometerReading** value);

        END_INTERFACE
    } __x_ABI_CWindows_CDevices_CSensors_CIMagnetometerReadingChangedEventArgsVtbl;

    interface __x_ABI_CWindows_CDevices_CSensors_CIMagnetometerReadingChangedEventArgs
    {
        CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CIMagnetometerReadingChangedEventArgsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIMagnetometerReadingChangedEventArgs;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIMagnetometerReadingChangedEventArgs_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIMagnetometerStatics_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CDevices_CSensors_CIMagnetometerStatics_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CDevices_CSensors_CIMagnetometerStaticsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CSensors_CIMagnetometerStatics* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CSensors_CIMagnetometerStatics* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CSensors_CIMagnetometerStatics* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CSensors_CIMagnetometerStatics* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CSensors_CIMagnetometerStatics* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CSensors_CIMagnetometerStatics* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetDefault)(__x_ABI_CWindows_CDevices_CSensors_CIMagnetometerStatics* This,
        __x_ABI_CWindows_CDevices_CSensors_CIMagnetometer** result);

        END_INTERFACE
    } __x_ABI_CWindows_CDevices_CSensors_CIMagnetometerStaticsVtbl;

    interface __x_ABI_CWindows_CDevices_CSensors_CIMagnetometerStatics
    {
        CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CIMagnetometerStaticsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIMagnetometerStatics;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIMagnetometerStatics_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIMagnetometerStatics2_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CDevices_CSensors_CIMagnetometerStatics2_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CDevices_CSensors_CIMagnetometerStatics2Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CSensors_CIMagnetometerStatics2* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CSensors_CIMagnetometerStatics2* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CSensors_CIMagnetometerStatics2* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CSensors_CIMagnetometerStatics2* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CSensors_CIMagnetometerStatics2* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CSensors_CIMagnetometerStatics2* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetDeviceSelector)(__x_ABI_CWindows_CDevices_CSensors_CIMagnetometerStatics2* This,
        HSTRING* result);
    HRESULT (STDMETHODCALLTYPE* FromIdAsync)(__x_ABI_CWindows_CDevices_CSensors_CIMagnetometerStatics2* This,
        HSTRING deviceId,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__CMagnetometer** operation);

        END_INTERFACE
    } __x_ABI_CWindows_CDevices_CSensors_CIMagnetometerStatics2Vtbl;

    interface __x_ABI_CWindows_CDevices_CSensors_CIMagnetometerStatics2
    {
        CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CIMagnetometerStatics2Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIMagnetometerStatics2;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIMagnetometerStatics2_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIOrientationSensor_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CDevices_CSensors_CIOrientationSensor_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CSensors_CIOrientationSensor* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CSensors_CIOrientationSensor* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CSensors_CIOrientationSensor* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CSensors_CIOrientationSensor* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CSensors_CIOrientationSensor* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CSensors_CIOrientationSensor* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetCurrentReading)(__x_ABI_CWindows_CDevices_CSensors_CIOrientationSensor* This,
        __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReading** value);
    HRESULT (STDMETHODCALLTYPE* get_MinimumReportInterval)(__x_ABI_CWindows_CDevices_CSensors_CIOrientationSensor* This,
        UINT32* value);
    HRESULT (STDMETHODCALLTYPE* put_ReportInterval)(__x_ABI_CWindows_CDevices_CSensors_CIOrientationSensor* This,
        UINT32 value);
    HRESULT (STDMETHODCALLTYPE* get_ReportInterval)(__x_ABI_CWindows_CDevices_CSensors_CIOrientationSensor* This,
        UINT32* value);
    HRESULT (STDMETHODCALLTYPE* add_ReadingChanged)(__x_ABI_CWindows_CDevices_CSensors_CIOrientationSensor* This,
        __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CSensors__COrientationSensor___x_ABI_CWindows__CDevices__CSensors__COrientationSensorReadingChangedEventArgs* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_ReadingChanged)(__x_ABI_CWindows_CDevices_CSensors_CIOrientationSensor* This,
        EventRegistrationToken token);

        END_INTERFACE
    } __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorVtbl;

    interface __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensor
    {
        CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIOrientationSensor;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIOrientationSensor_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIOrientationSensor2_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CDevices_CSensors_CIOrientationSensor2_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensor2Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CSensors_CIOrientationSensor2* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CSensors_CIOrientationSensor2* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CSensors_CIOrientationSensor2* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CSensors_CIOrientationSensor2* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CSensors_CIOrientationSensor2* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CSensors_CIOrientationSensor2* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* put_ReadingTransform)(__x_ABI_CWindows_CDevices_CSensors_CIOrientationSensor2* This,
        enum __x_ABI_CWindows_CGraphics_CDisplay_CDisplayOrientations value);
    HRESULT (STDMETHODCALLTYPE* get_ReadingTransform)(__x_ABI_CWindows_CDevices_CSensors_CIOrientationSensor2* This,
        enum __x_ABI_CWindows_CGraphics_CDisplay_CDisplayOrientations* value);
    HRESULT (STDMETHODCALLTYPE* get_ReadingType)(__x_ABI_CWindows_CDevices_CSensors_CIOrientationSensor2* This,
        enum __x_ABI_CWindows_CDevices_CSensors_CSensorReadingType* type);

        END_INTERFACE
    } __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensor2Vtbl;

    interface __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensor2
    {
        CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensor2Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIOrientationSensor2;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIOrientationSensor2_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIOrientationSensor3_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CDevices_CSensors_CIOrientationSensor3_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensor3Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CSensors_CIOrientationSensor3* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CSensors_CIOrientationSensor3* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CSensors_CIOrientationSensor3* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CSensors_CIOrientationSensor3* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CSensors_CIOrientationSensor3* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CSensors_CIOrientationSensor3* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* put_ReportLatency)(__x_ABI_CWindows_CDevices_CSensors_CIOrientationSensor3* This,
        UINT32 value);
    HRESULT (STDMETHODCALLTYPE* get_ReportLatency)(__x_ABI_CWindows_CDevices_CSensors_CIOrientationSensor3* This,
        UINT32* value);
    HRESULT (STDMETHODCALLTYPE* get_MaxBatchSize)(__x_ABI_CWindows_CDevices_CSensors_CIOrientationSensor3* This,
        UINT32* value);

        END_INTERFACE
    } __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensor3Vtbl;

    interface __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensor3
    {
        CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensor3Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIOrientationSensor3;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIOrientationSensor3_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorDeviceId_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorDeviceId_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorDeviceIdVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorDeviceId* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorDeviceId* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorDeviceId* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorDeviceId* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorDeviceId* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorDeviceId* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_DeviceId)(__x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorDeviceId* This,
        HSTRING* value);

        END_INTERFACE
    } __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorDeviceIdVtbl;

    interface __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorDeviceId
    {
        CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorDeviceIdVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorDeviceId;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorDeviceId_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReading_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReading_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReadingVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReading* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReading* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReading* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReading* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReading* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReading* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Timestamp)(__x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReading* This,
        struct __x_ABI_CWindows_CFoundation_CDateTime* value);
    HRESULT (STDMETHODCALLTYPE* get_RotationMatrix)(__x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReading* This,
        __x_ABI_CWindows_CDevices_CSensors_CISensorRotationMatrix** value);
    HRESULT (STDMETHODCALLTYPE* get_Quaternion)(__x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReading* This,
        __x_ABI_CWindows_CDevices_CSensors_CISensorQuaternion** value);

        END_INTERFACE
    } __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReadingVtbl;

    interface __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReading
    {
        CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReadingVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReading;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReading_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReading2_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReading2_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReading2Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReading2* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReading2* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReading2* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReading2* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReading2* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReading2* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_PerformanceCount)(__x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReading2* This,
        __x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CTimeSpan** value);
    HRESULT (STDMETHODCALLTYPE* get_Properties)(__x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReading2* This,
        __x_ABI_C__FIMapView_2_HSTRING_IInspectable** value);

        END_INTERFACE
    } __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReading2Vtbl;

    interface __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReading2
    {
        CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReading2Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReading2;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReading2_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReadingChangedEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReadingChangedEventArgs_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReadingChangedEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReadingChangedEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReadingChangedEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReadingChangedEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReadingChangedEventArgs* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReadingChangedEventArgs* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReadingChangedEventArgs* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Reading)(__x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReadingChangedEventArgs* This,
        __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReading** value);

        END_INTERFACE
    } __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReadingChangedEventArgsVtbl;

    interface __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReadingChangedEventArgs
    {
        CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReadingChangedEventArgsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReadingChangedEventArgs;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReadingChangedEventArgs_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReadingYawAccuracy_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReadingYawAccuracy_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReadingYawAccuracyVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReadingYawAccuracy* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReadingYawAccuracy* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReadingYawAccuracy* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReadingYawAccuracy* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReadingYawAccuracy* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReadingYawAccuracy* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_YawAccuracy)(__x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReadingYawAccuracy* This,
        enum __x_ABI_CWindows_CDevices_CSensors_CMagnetometerAccuracy* value);

        END_INTERFACE
    } __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReadingYawAccuracyVtbl;

    interface __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReadingYawAccuracy
    {
        CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReadingYawAccuracyVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReadingYawAccuracy;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReadingYawAccuracy_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStatics_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStatics_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStaticsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStatics* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStatics* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStatics* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStatics* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStatics* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStatics* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetDefault)(__x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStatics* This,
        __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensor** result);

        END_INTERFACE
    } __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStaticsVtbl;

    interface __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStatics
    {
        CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStaticsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStatics;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStatics_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStatics2_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStatics2_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStatics2Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStatics2* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStatics2* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStatics2* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStatics2* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStatics2* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStatics2* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetDefaultForRelativeReadings)(__x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStatics2* This,
        __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensor** result);

        END_INTERFACE
    } __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStatics2Vtbl;

    interface __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStatics2
    {
        CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStatics2Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStatics2;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStatics2_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStatics3_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStatics3_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStatics3Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStatics3* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStatics3* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStatics3* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStatics3* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStatics3* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStatics3* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetDefaultWithSensorReadingType)(__x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStatics3* This,
        enum __x_ABI_CWindows_CDevices_CSensors_CSensorReadingType sensorReadingtype,
        __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensor** result);
    HRESULT (STDMETHODCALLTYPE* GetDefaultWithSensorReadingTypeAndSensorOptimizationGoal)(__x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStatics3* This,
        enum __x_ABI_CWindows_CDevices_CSensors_CSensorReadingType sensorReadingType,
        enum __x_ABI_CWindows_CDevices_CSensors_CSensorOptimizationGoal optimizationGoal,
        __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensor** result);

        END_INTERFACE
    } __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStatics3Vtbl;

    interface __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStatics3
    {
        CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStatics3Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStatics3;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStatics3_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStatics4_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStatics4_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStatics4Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStatics4* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStatics4* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStatics4* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStatics4* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStatics4* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStatics4* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetDeviceSelector)(__x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStatics4* This,
        enum __x_ABI_CWindows_CDevices_CSensors_CSensorReadingType readingType,
        HSTRING* result);
    HRESULT (STDMETHODCALLTYPE* GetDeviceSelectorWithSensorReadingTypeAndSensorOptimizationGoal)(__x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStatics4* This,
        enum __x_ABI_CWindows_CDevices_CSensors_CSensorReadingType readingType,
        enum __x_ABI_CWindows_CDevices_CSensors_CSensorOptimizationGoal optimizationGoal,
        HSTRING* result);
    HRESULT (STDMETHODCALLTYPE* FromIdAsync)(__x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStatics4* This,
        HSTRING deviceId,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__COrientationSensor** operation);

        END_INTERFACE
    } __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStatics4Vtbl;

    interface __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStatics4
    {
        CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStatics4Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStatics4;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStatics4_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIPedometer_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CDevices_CSensors_CIPedometer_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CDevices_CSensors_CIPedometerVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CSensors_CIPedometer* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CSensors_CIPedometer* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CSensors_CIPedometer* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CSensors_CIPedometer* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CSensors_CIPedometer* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CSensors_CIPedometer* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_DeviceId)(__x_ABI_CWindows_CDevices_CSensors_CIPedometer* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_PowerInMilliwatts)(__x_ABI_CWindows_CDevices_CSensors_CIPedometer* This,
        DOUBLE* value);
    HRESULT (STDMETHODCALLTYPE* get_MinimumReportInterval)(__x_ABI_CWindows_CDevices_CSensors_CIPedometer* This,
        UINT32* value);
    HRESULT (STDMETHODCALLTYPE* put_ReportInterval)(__x_ABI_CWindows_CDevices_CSensors_CIPedometer* This,
        UINT32 value);
    HRESULT (STDMETHODCALLTYPE* get_ReportInterval)(__x_ABI_CWindows_CDevices_CSensors_CIPedometer* This,
        UINT32* value);
    HRESULT (STDMETHODCALLTYPE* add_ReadingChanged)(__x_ABI_CWindows_CDevices_CSensors_CIPedometer* This,
        __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CSensors__CPedometer___x_ABI_CWindows__CDevices__CSensors__CPedometerReadingChangedEventArgs* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_ReadingChanged)(__x_ABI_CWindows_CDevices_CSensors_CIPedometer* This,
        EventRegistrationToken token);

        END_INTERFACE
    } __x_ABI_CWindows_CDevices_CSensors_CIPedometerVtbl;

    interface __x_ABI_CWindows_CDevices_CSensors_CIPedometer
    {
        CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CIPedometerVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIPedometer;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIPedometer_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIPedometer2_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CDevices_CSensors_CIPedometer2_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CDevices_CSensors_CIPedometer2Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CSensors_CIPedometer2* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CSensors_CIPedometer2* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CSensors_CIPedometer2* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CSensors_CIPedometer2* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CSensors_CIPedometer2* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CSensors_CIPedometer2* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetCurrentReadings)(__x_ABI_CWindows_CDevices_CSensors_CIPedometer2* This,
        __x_ABI_C__FIMapView_2___x_ABI_CWindows__CDevices__CSensors__CPedometerStepKind___x_ABI_CWindows__CDevices__CSensors__CPedometerReading** value);

        END_INTERFACE
    } __x_ABI_CWindows_CDevices_CSensors_CIPedometer2Vtbl;

    interface __x_ABI_CWindows_CDevices_CSensors_CIPedometer2
    {
        CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CIPedometer2Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIPedometer2;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIPedometer2_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIPedometerDataThresholdFactory_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CDevices_CSensors_CIPedometerDataThresholdFactory_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CDevices_CSensors_CIPedometerDataThresholdFactoryVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CSensors_CIPedometerDataThresholdFactory* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CSensors_CIPedometerDataThresholdFactory* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CSensors_CIPedometerDataThresholdFactory* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CSensors_CIPedometerDataThresholdFactory* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CSensors_CIPedometerDataThresholdFactory* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CSensors_CIPedometerDataThresholdFactory* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* Create)(__x_ABI_CWindows_CDevices_CSensors_CIPedometerDataThresholdFactory* This,
        __x_ABI_CWindows_CDevices_CSensors_CIPedometer* sensor,
        INT32 stepGoal,
        __x_ABI_CWindows_CDevices_CSensors_CISensorDataThreshold** threshold);

        END_INTERFACE
    } __x_ABI_CWindows_CDevices_CSensors_CIPedometerDataThresholdFactoryVtbl;

    interface __x_ABI_CWindows_CDevices_CSensors_CIPedometerDataThresholdFactory
    {
        CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CIPedometerDataThresholdFactoryVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIPedometerDataThresholdFactory;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIPedometerDataThresholdFactory_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIPedometerReading_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CDevices_CSensors_CIPedometerReading_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CDevices_CSensors_CIPedometerReadingVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CSensors_CIPedometerReading* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CSensors_CIPedometerReading* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CSensors_CIPedometerReading* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CSensors_CIPedometerReading* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CSensors_CIPedometerReading* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CSensors_CIPedometerReading* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_StepKind)(__x_ABI_CWindows_CDevices_CSensors_CIPedometerReading* This,
        enum __x_ABI_CWindows_CDevices_CSensors_CPedometerStepKind* value);
    HRESULT (STDMETHODCALLTYPE* get_CumulativeSteps)(__x_ABI_CWindows_CDevices_CSensors_CIPedometerReading* This,
        INT32* value);
    HRESULT (STDMETHODCALLTYPE* get_Timestamp)(__x_ABI_CWindows_CDevices_CSensors_CIPedometerReading* This,
        struct __x_ABI_CWindows_CFoundation_CDateTime* value);
    HRESULT (STDMETHODCALLTYPE* get_CumulativeStepsDuration)(__x_ABI_CWindows_CDevices_CSensors_CIPedometerReading* This,
        struct __x_ABI_CWindows_CFoundation_CTimeSpan* value);

        END_INTERFACE
    } __x_ABI_CWindows_CDevices_CSensors_CIPedometerReadingVtbl;

    interface __x_ABI_CWindows_CDevices_CSensors_CIPedometerReading
    {
        CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CIPedometerReadingVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIPedometerReading;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIPedometerReading_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIPedometerReadingChangedEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CDevices_CSensors_CIPedometerReadingChangedEventArgs_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CDevices_CSensors_CIPedometerReadingChangedEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CSensors_CIPedometerReadingChangedEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CSensors_CIPedometerReadingChangedEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CSensors_CIPedometerReadingChangedEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CSensors_CIPedometerReadingChangedEventArgs* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CSensors_CIPedometerReadingChangedEventArgs* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CSensors_CIPedometerReadingChangedEventArgs* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Reading)(__x_ABI_CWindows_CDevices_CSensors_CIPedometerReadingChangedEventArgs* This,
        __x_ABI_CWindows_CDevices_CSensors_CIPedometerReading** value);

        END_INTERFACE
    } __x_ABI_CWindows_CDevices_CSensors_CIPedometerReadingChangedEventArgsVtbl;

    interface __x_ABI_CWindows_CDevices_CSensors_CIPedometerReadingChangedEventArgs
    {
        CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CIPedometerReadingChangedEventArgsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIPedometerReadingChangedEventArgs;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIPedometerReadingChangedEventArgs_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIPedometerStatics_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CDevices_CSensors_CIPedometerStatics_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CDevices_CSensors_CIPedometerStaticsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CSensors_CIPedometerStatics* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CSensors_CIPedometerStatics* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CSensors_CIPedometerStatics* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CSensors_CIPedometerStatics* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CSensors_CIPedometerStatics* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CSensors_CIPedometerStatics* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* FromIdAsync)(__x_ABI_CWindows_CDevices_CSensors_CIPedometerStatics* This,
        HSTRING deviceId,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__CPedometer** operation);
    HRESULT (STDMETHODCALLTYPE* GetDefaultAsync)(__x_ABI_CWindows_CDevices_CSensors_CIPedometerStatics* This,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__CPedometer** operation);
    HRESULT (STDMETHODCALLTYPE* GetDeviceSelector)(__x_ABI_CWindows_CDevices_CSensors_CIPedometerStatics* This,
        HSTRING* result);
    HRESULT (STDMETHODCALLTYPE* GetSystemHistoryAsync)(__x_ABI_CWindows_CDevices_CSensors_CIPedometerStatics* This,
        struct __x_ABI_CWindows_CFoundation_CDateTime fromTime,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CSensors__CPedometerReading** operation);
    HRESULT (STDMETHODCALLTYPE* GetSystemHistoryWithDurationAsync)(__x_ABI_CWindows_CDevices_CSensors_CIPedometerStatics* This,
        struct __x_ABI_CWindows_CFoundation_CDateTime fromTime,
        struct __x_ABI_CWindows_CFoundation_CTimeSpan duration,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CSensors__CPedometerReading** operation);

        END_INTERFACE
    } __x_ABI_CWindows_CDevices_CSensors_CIPedometerStaticsVtbl;

    interface __x_ABI_CWindows_CDevices_CSensors_CIPedometerStatics
    {
        CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CIPedometerStaticsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIPedometerStatics;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIPedometerStatics_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIPedometerStatics2_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CDevices_CSensors_CIPedometerStatics2_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CDevices_CSensors_CIPedometerStatics2Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CSensors_CIPedometerStatics2* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CSensors_CIPedometerStatics2* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CSensors_CIPedometerStatics2* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CSensors_CIPedometerStatics2* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CSensors_CIPedometerStatics2* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CSensors_CIPedometerStatics2* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetReadingsFromTriggerDetails)(__x_ABI_CWindows_CDevices_CSensors_CIPedometerStatics2* This,
        __x_ABI_CWindows_CDevices_CSensors_CISensorDataThresholdTriggerDetails* triggerDetails,
        __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CSensors__CPedometerReading** result);

        END_INTERFACE
    } __x_ABI_CWindows_CDevices_CSensors_CIPedometerStatics2Vtbl;

    interface __x_ABI_CWindows_CDevices_CSensors_CIPedometerStatics2
    {
        CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CIPedometerStatics2Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIPedometerStatics2;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIPedometerStatics2_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIProximitySensor_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CDevices_CSensors_CIProximitySensor_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CDevices_CSensors_CIProximitySensorVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CSensors_CIProximitySensor* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CSensors_CIProximitySensor* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CSensors_CIProximitySensor* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CSensors_CIProximitySensor* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CSensors_CIProximitySensor* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CSensors_CIProximitySensor* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_DeviceId)(__x_ABI_CWindows_CDevices_CSensors_CIProximitySensor* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_MaxDistanceInMillimeters)(__x_ABI_CWindows_CDevices_CSensors_CIProximitySensor* This,
        __x_ABI_C__FIReference_1_UINT32** value);
    HRESULT (STDMETHODCALLTYPE* get_MinDistanceInMillimeters)(__x_ABI_CWindows_CDevices_CSensors_CIProximitySensor* This,
        __x_ABI_C__FIReference_1_UINT32** value);
    HRESULT (STDMETHODCALLTYPE* GetCurrentReading)(__x_ABI_CWindows_CDevices_CSensors_CIProximitySensor* This,
        __x_ABI_CWindows_CDevices_CSensors_CIProximitySensorReading** value);
    HRESULT (STDMETHODCALLTYPE* add_ReadingChanged)(__x_ABI_CWindows_CDevices_CSensors_CIProximitySensor* This,
        __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CSensors__CProximitySensor___x_ABI_CWindows__CDevices__CSensors__CProximitySensorReadingChangedEventArgs* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_ReadingChanged)(__x_ABI_CWindows_CDevices_CSensors_CIProximitySensor* This,
        EventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* CreateDisplayOnOffController)(__x_ABI_CWindows_CDevices_CSensors_CIProximitySensor* This,
        __x_ABI_CWindows_CFoundation_CIClosable** controller);

        END_INTERFACE
    } __x_ABI_CWindows_CDevices_CSensors_CIProximitySensorVtbl;

    interface __x_ABI_CWindows_CDevices_CSensors_CIProximitySensor
    {
        CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CIProximitySensorVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIProximitySensor;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIProximitySensor_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIProximitySensorDataThresholdFactory_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CDevices_CSensors_CIProximitySensorDataThresholdFactory_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CDevices_CSensors_CIProximitySensorDataThresholdFactoryVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CSensors_CIProximitySensorDataThresholdFactory* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CSensors_CIProximitySensorDataThresholdFactory* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CSensors_CIProximitySensorDataThresholdFactory* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CSensors_CIProximitySensorDataThresholdFactory* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CSensors_CIProximitySensorDataThresholdFactory* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CSensors_CIProximitySensorDataThresholdFactory* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* Create)(__x_ABI_CWindows_CDevices_CSensors_CIProximitySensorDataThresholdFactory* This,
        __x_ABI_CWindows_CDevices_CSensors_CIProximitySensor* sensor,
        __x_ABI_CWindows_CDevices_CSensors_CISensorDataThreshold** threshold);

        END_INTERFACE
    } __x_ABI_CWindows_CDevices_CSensors_CIProximitySensorDataThresholdFactoryVtbl;

    interface __x_ABI_CWindows_CDevices_CSensors_CIProximitySensorDataThresholdFactory
    {
        CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CIProximitySensorDataThresholdFactoryVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIProximitySensorDataThresholdFactory;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIProximitySensorDataThresholdFactory_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIProximitySensorReading_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CDevices_CSensors_CIProximitySensorReading_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CDevices_CSensors_CIProximitySensorReadingVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CSensors_CIProximitySensorReading* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CSensors_CIProximitySensorReading* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CSensors_CIProximitySensorReading* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CSensors_CIProximitySensorReading* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CSensors_CIProximitySensorReading* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CSensors_CIProximitySensorReading* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Timestamp)(__x_ABI_CWindows_CDevices_CSensors_CIProximitySensorReading* This,
        struct __x_ABI_CWindows_CFoundation_CDateTime* value);
    HRESULT (STDMETHODCALLTYPE* get_IsDetected)(__x_ABI_CWindows_CDevices_CSensors_CIProximitySensorReading* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* get_DistanceInMillimeters)(__x_ABI_CWindows_CDevices_CSensors_CIProximitySensorReading* This,
        __x_ABI_C__FIReference_1_UINT32** value);

        END_INTERFACE
    } __x_ABI_CWindows_CDevices_CSensors_CIProximitySensorReadingVtbl;

    interface __x_ABI_CWindows_CDevices_CSensors_CIProximitySensorReading
    {
        CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CIProximitySensorReadingVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIProximitySensorReading;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIProximitySensorReading_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIProximitySensorReadingChangedEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CDevices_CSensors_CIProximitySensorReadingChangedEventArgs_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CDevices_CSensors_CIProximitySensorReadingChangedEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CSensors_CIProximitySensorReadingChangedEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CSensors_CIProximitySensorReadingChangedEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CSensors_CIProximitySensorReadingChangedEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CSensors_CIProximitySensorReadingChangedEventArgs* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CSensors_CIProximitySensorReadingChangedEventArgs* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CSensors_CIProximitySensorReadingChangedEventArgs* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Reading)(__x_ABI_CWindows_CDevices_CSensors_CIProximitySensorReadingChangedEventArgs* This,
        __x_ABI_CWindows_CDevices_CSensors_CIProximitySensorReading** value);

        END_INTERFACE
    } __x_ABI_CWindows_CDevices_CSensors_CIProximitySensorReadingChangedEventArgsVtbl;

    interface __x_ABI_CWindows_CDevices_CSensors_CIProximitySensorReadingChangedEventArgs
    {
        CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CIProximitySensorReadingChangedEventArgsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIProximitySensorReadingChangedEventArgs;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIProximitySensorReadingChangedEventArgs_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIProximitySensorStatics_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CDevices_CSensors_CIProximitySensorStatics_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CDevices_CSensors_CIProximitySensorStaticsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CSensors_CIProximitySensorStatics* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CSensors_CIProximitySensorStatics* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CSensors_CIProximitySensorStatics* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CSensors_CIProximitySensorStatics* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CSensors_CIProximitySensorStatics* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CSensors_CIProximitySensorStatics* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetDeviceSelector)(__x_ABI_CWindows_CDevices_CSensors_CIProximitySensorStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* FromId)(__x_ABI_CWindows_CDevices_CSensors_CIProximitySensorStatics* This,
        HSTRING sensorId,
        __x_ABI_CWindows_CDevices_CSensors_CIProximitySensor** result);

        END_INTERFACE
    } __x_ABI_CWindows_CDevices_CSensors_CIProximitySensorStaticsVtbl;

    interface __x_ABI_CWindows_CDevices_CSensors_CIProximitySensorStatics
    {
        CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CIProximitySensorStaticsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIProximitySensorStatics;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIProximitySensorStatics_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIProximitySensorStatics2_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CDevices_CSensors_CIProximitySensorStatics2_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CDevices_CSensors_CIProximitySensorStatics2Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CSensors_CIProximitySensorStatics2* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CSensors_CIProximitySensorStatics2* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CSensors_CIProximitySensorStatics2* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CSensors_CIProximitySensorStatics2* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CSensors_CIProximitySensorStatics2* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CSensors_CIProximitySensorStatics2* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetReadingsFromTriggerDetails)(__x_ABI_CWindows_CDevices_CSensors_CIProximitySensorStatics2* This,
        __x_ABI_CWindows_CDevices_CSensors_CISensorDataThresholdTriggerDetails* triggerDetails,
        __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CSensors__CProximitySensorReading** result);

        END_INTERFACE
    } __x_ABI_CWindows_CDevices_CSensors_CIProximitySensorStatics2Vtbl;

    interface __x_ABI_CWindows_CDevices_CSensors_CIProximitySensorStatics2
    {
        CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CIProximitySensorStatics2Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIProximitySensorStatics2;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIProximitySensorStatics2_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CISensorDataThreshold_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CDevices_CSensors_CISensorDataThreshold_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CDevices_CSensors_CISensorDataThresholdVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CSensors_CISensorDataThreshold* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CSensors_CISensorDataThreshold* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CSensors_CISensorDataThreshold* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CSensors_CISensorDataThreshold* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CSensors_CISensorDataThreshold* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CSensors_CISensorDataThreshold* This,
            TrustLevel* trustLevel);
    
        END_INTERFACE
    } __x_ABI_CWindows_CDevices_CSensors_CISensorDataThresholdVtbl;

    interface __x_ABI_CWindows_CDevices_CSensors_CISensorDataThreshold
    {
        CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CISensorDataThresholdVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CISensorDataThreshold;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CISensorDataThreshold_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CISensorDataThresholdTriggerDetails_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CDevices_CSensors_CISensorDataThresholdTriggerDetails_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CDevices_CSensors_CISensorDataThresholdTriggerDetailsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CSensors_CISensorDataThresholdTriggerDetails* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CSensors_CISensorDataThresholdTriggerDetails* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CSensors_CISensorDataThresholdTriggerDetails* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CSensors_CISensorDataThresholdTriggerDetails* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CSensors_CISensorDataThresholdTriggerDetails* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CSensors_CISensorDataThresholdTriggerDetails* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_DeviceId)(__x_ABI_CWindows_CDevices_CSensors_CISensorDataThresholdTriggerDetails* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_SensorType)(__x_ABI_CWindows_CDevices_CSensors_CISensorDataThresholdTriggerDetails* This,
        enum __x_ABI_CWindows_CDevices_CSensors_CSensorType* value);

        END_INTERFACE
    } __x_ABI_CWindows_CDevices_CSensors_CISensorDataThresholdTriggerDetailsVtbl;

    interface __x_ABI_CWindows_CDevices_CSensors_CISensorDataThresholdTriggerDetails
    {
        CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CISensorDataThresholdTriggerDetailsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CISensorDataThresholdTriggerDetails;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CISensorDataThresholdTriggerDetails_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CISensorQuaternion_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CDevices_CSensors_CISensorQuaternion_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CDevices_CSensors_CISensorQuaternionVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CSensors_CISensorQuaternion* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CSensors_CISensorQuaternion* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CSensors_CISensorQuaternion* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CSensors_CISensorQuaternion* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CSensors_CISensorQuaternion* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CSensors_CISensorQuaternion* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_W)(__x_ABI_CWindows_CDevices_CSensors_CISensorQuaternion* This,
        FLOAT* value);
    HRESULT (STDMETHODCALLTYPE* get_X)(__x_ABI_CWindows_CDevices_CSensors_CISensorQuaternion* This,
        FLOAT* value);
    HRESULT (STDMETHODCALLTYPE* get_Y)(__x_ABI_CWindows_CDevices_CSensors_CISensorQuaternion* This,
        FLOAT* value);
    HRESULT (STDMETHODCALLTYPE* get_Z)(__x_ABI_CWindows_CDevices_CSensors_CISensorQuaternion* This,
        FLOAT* value);

        END_INTERFACE
    } __x_ABI_CWindows_CDevices_CSensors_CISensorQuaternionVtbl;

    interface __x_ABI_CWindows_CDevices_CSensors_CISensorQuaternion
    {
        CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CISensorQuaternionVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CISensorQuaternion;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CISensorQuaternion_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CISensorRotationMatrix_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CDevices_CSensors_CISensorRotationMatrix_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CDevices_CSensors_CISensorRotationMatrixVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CSensors_CISensorRotationMatrix* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CSensors_CISensorRotationMatrix* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CSensors_CISensorRotationMatrix* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CSensors_CISensorRotationMatrix* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CSensors_CISensorRotationMatrix* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CSensors_CISensorRotationMatrix* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_M11)(__x_ABI_CWindows_CDevices_CSensors_CISensorRotationMatrix* This,
        FLOAT* value);
    HRESULT (STDMETHODCALLTYPE* get_M12)(__x_ABI_CWindows_CDevices_CSensors_CISensorRotationMatrix* This,
        FLOAT* value);
    HRESULT (STDMETHODCALLTYPE* get_M13)(__x_ABI_CWindows_CDevices_CSensors_CISensorRotationMatrix* This,
        FLOAT* value);
    HRESULT (STDMETHODCALLTYPE* get_M21)(__x_ABI_CWindows_CDevices_CSensors_CISensorRotationMatrix* This,
        FLOAT* value);
    HRESULT (STDMETHODCALLTYPE* get_M22)(__x_ABI_CWindows_CDevices_CSensors_CISensorRotationMatrix* This,
        FLOAT* value);
    HRESULT (STDMETHODCALLTYPE* get_M23)(__x_ABI_CWindows_CDevices_CSensors_CISensorRotationMatrix* This,
        FLOAT* value);
    HRESULT (STDMETHODCALLTYPE* get_M31)(__x_ABI_CWindows_CDevices_CSensors_CISensorRotationMatrix* This,
        FLOAT* value);
    HRESULT (STDMETHODCALLTYPE* get_M32)(__x_ABI_CWindows_CDevices_CSensors_CISensorRotationMatrix* This,
        FLOAT* value);
    HRESULT (STDMETHODCALLTYPE* get_M33)(__x_ABI_CWindows_CDevices_CSensors_CISensorRotationMatrix* This,
        FLOAT* value);

        END_INTERFACE
    } __x_ABI_CWindows_CDevices_CSensors_CISensorRotationMatrixVtbl;

    interface __x_ABI_CWindows_CDevices_CSensors_CISensorRotationMatrix
    {
        CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CISensorRotationMatrixVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CISensorRotationMatrix;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CISensorRotationMatrix_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensor_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensor_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensor* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensor* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensor* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensor* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensor* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensor* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetCurrentOrientation)(__x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensor* This,
        enum __x_ABI_CWindows_CDevices_CSensors_CSimpleOrientation* value);
    HRESULT (STDMETHODCALLTYPE* add_OrientationChanged)(__x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensor* This,
        __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CSensors__CSimpleOrientationSensor___x_ABI_CWindows__CDevices__CSensors__CSimpleOrientationSensorOrientationChangedEventArgs* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_OrientationChanged)(__x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensor* This,
        EventRegistrationToken token);

        END_INTERFACE
    } __x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorVtbl;

    interface __x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensor
    {
        CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensor;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensor_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensor2_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensor2_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensor2Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensor2* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensor2* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensor2* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensor2* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensor2* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensor2* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* put_ReadingTransform)(__x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensor2* This,
        enum __x_ABI_CWindows_CGraphics_CDisplay_CDisplayOrientations value);
    HRESULT (STDMETHODCALLTYPE* get_ReadingTransform)(__x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensor2* This,
        enum __x_ABI_CWindows_CGraphics_CDisplay_CDisplayOrientations* value);

        END_INTERFACE
    } __x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensor2Vtbl;

    interface __x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensor2
    {
        CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensor2Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensor2;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensor2_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorDeviceId_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorDeviceId_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorDeviceIdVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorDeviceId* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorDeviceId* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorDeviceId* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorDeviceId* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorDeviceId* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorDeviceId* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_DeviceId)(__x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorDeviceId* This,
        HSTRING* value);

        END_INTERFACE
    } __x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorDeviceIdVtbl;

    interface __x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorDeviceId
    {
        CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorDeviceIdVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorDeviceId;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorDeviceId_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorOrientationChangedEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorOrientationChangedEventArgs_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorOrientationChangedEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorOrientationChangedEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorOrientationChangedEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorOrientationChangedEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorOrientationChangedEventArgs* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorOrientationChangedEventArgs* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorOrientationChangedEventArgs* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Timestamp)(__x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorOrientationChangedEventArgs* This,
        struct __x_ABI_CWindows_CFoundation_CDateTime* value);
    HRESULT (STDMETHODCALLTYPE* get_Orientation)(__x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorOrientationChangedEventArgs* This,
        enum __x_ABI_CWindows_CDevices_CSensors_CSimpleOrientation* value);

        END_INTERFACE
    } __x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorOrientationChangedEventArgsVtbl;

    interface __x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorOrientationChangedEventArgs
    {
        CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorOrientationChangedEventArgsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorOrientationChangedEventArgs;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorOrientationChangedEventArgs_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorStatics_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorStatics_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorStaticsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorStatics* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorStatics* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorStatics* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorStatics* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorStatics* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorStatics* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetDefault)(__x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorStatics* This,
        __x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensor** result);

        END_INTERFACE
    } __x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorStaticsVtbl;

    interface __x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorStatics
    {
        CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorStaticsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorStatics;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorStatics_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorStatics2_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorStatics2_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorStatics2Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorStatics2* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorStatics2* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorStatics2* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorStatics2* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorStatics2* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorStatics2* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetDeviceSelector)(__x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorStatics2* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* FromIdAsync)(__x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorStatics2* This,
        HSTRING deviceId,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CSensors__CSimpleOrientationSensor** result);

        END_INTERFACE
    } __x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorStatics2Vtbl;

    interface __x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorStatics2
    {
        CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorStatics2Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorStatics2;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorStatics2_INTERFACE_DEFINED__) */
    

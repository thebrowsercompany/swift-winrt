// WARNING: Please don't edit this file. It was generated by Swift/WinRT v0.0.1

#pragma once
// Header files for imported files
#include <inspectable.h>
#include <EventToken.h>
#include <windowscontracts.h>
#include "Windows.Foundation.h"
#include "Windows.Storage.Streams.h"
#include "Windows.UI.h"

/* Forward Declarations */
#ifndef ____x_ABI_CWindows_CUI_CText_CIContentLinkInfo_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CText_CIContentLinkInfo_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CText_CIContentLinkInfo __x_ABI_CWindows_CUI_CText_CIContentLinkInfo;

#endif // ____x_ABI_CWindows_CUI_CText_CIContentLinkInfo_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CText_CIFontWeights_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CText_CIFontWeights_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CText_CIFontWeights __x_ABI_CWindows_CUI_CText_CIFontWeights;

#endif // ____x_ABI_CWindows_CUI_CText_CIFontWeights_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CText_CIFontWeightsStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CText_CIFontWeightsStatics_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CText_CIFontWeightsStatics __x_ABI_CWindows_CUI_CText_CIFontWeightsStatics;

#endif // ____x_ABI_CWindows_CUI_CText_CIFontWeightsStatics_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CText_CIRichEditTextRange_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CText_CIRichEditTextRange_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CText_CIRichEditTextRange __x_ABI_CWindows_CUI_CText_CIRichEditTextRange;

#endif // ____x_ABI_CWindows_CUI_CText_CIRichEditTextRange_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CText_CITextCharacterFormat_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CText_CITextCharacterFormat_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CText_CITextCharacterFormat __x_ABI_CWindows_CUI_CText_CITextCharacterFormat;

#endif // ____x_ABI_CWindows_CUI_CText_CITextCharacterFormat_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CText_CITextConstantsStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CText_CITextConstantsStatics_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CText_CITextConstantsStatics __x_ABI_CWindows_CUI_CText_CITextConstantsStatics;

#endif // ____x_ABI_CWindows_CUI_CText_CITextConstantsStatics_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CText_CITextDocument_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CText_CITextDocument_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CText_CITextDocument __x_ABI_CWindows_CUI_CText_CITextDocument;

#endif // ____x_ABI_CWindows_CUI_CText_CITextDocument_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CText_CITextDocument2_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CText_CITextDocument2_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CText_CITextDocument2 __x_ABI_CWindows_CUI_CText_CITextDocument2;

#endif // ____x_ABI_CWindows_CUI_CText_CITextDocument2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CText_CITextDocument3_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CText_CITextDocument3_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CText_CITextDocument3 __x_ABI_CWindows_CUI_CText_CITextDocument3;

#endif // ____x_ABI_CWindows_CUI_CText_CITextDocument3_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CText_CITextParagraphFormat_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CText_CITextParagraphFormat_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CText_CITextParagraphFormat __x_ABI_CWindows_CUI_CText_CITextParagraphFormat;

#endif // ____x_ABI_CWindows_CUI_CText_CITextParagraphFormat_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CText_CITextRange_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CText_CITextRange_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CText_CITextRange __x_ABI_CWindows_CUI_CText_CITextRange;

#endif // ____x_ABI_CWindows_CUI_CText_CITextRange_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CText_CITextSelection_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CText_CITextSelection_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CText_CITextSelection __x_ABI_CWindows_CUI_CText_CITextSelection;

#endif // ____x_ABI_CWindows_CUI_CText_CITextSelection_FWD_DEFINED__

// Parameterized interface forward declarations (C)

// Collection interface definitions

typedef struct __x_ABI_CWindows_CFoundation_CPoint __x_ABI_CWindows_CFoundation_CPoint;

typedef struct __x_ABI_CWindows_CFoundation_CRect __x_ABI_CWindows_CFoundation_CRect;

#ifndef ____x_ABI_CWindows_CFoundation_CIUriRuntimeClass_FWD_DEFINED__
#define ____x_ABI_CWindows_CFoundation_CIUriRuntimeClass_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CFoundation_CIUriRuntimeClass __x_ABI_CWindows_CFoundation_CIUriRuntimeClass;

#endif // ____x_ABI_CWindows_CFoundation_CIUriRuntimeClass_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CStorage_CStreams_CIRandomAccessStream_FWD_DEFINED__
#define ____x_ABI_CWindows_CStorage_CStreams_CIRandomAccessStream_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CStorage_CStreams_CIRandomAccessStream __x_ABI_CWindows_CStorage_CStreams_CIRandomAccessStream;

#endif // ____x_ABI_CWindows_CStorage_CStreams_CIRandomAccessStream_FWD_DEFINED__

typedef struct __x_ABI_CWindows_CUI_CColor __x_ABI_CWindows_CUI_CColor;

typedef enum __x_ABI_CWindows_CUI_CText_CCaretType __x_ABI_CWindows_CUI_CText_CCaretType;

typedef enum __x_ABI_CWindows_CUI_CText_CFindOptions __x_ABI_CWindows_CUI_CText_CFindOptions;

typedef enum __x_ABI_CWindows_CUI_CText_CFontStretch __x_ABI_CWindows_CUI_CText_CFontStretch;

typedef enum __x_ABI_CWindows_CUI_CText_CFontStyle __x_ABI_CWindows_CUI_CText_CFontStyle;

typedef enum __x_ABI_CWindows_CUI_CText_CFormatEffect __x_ABI_CWindows_CUI_CText_CFormatEffect;

typedef enum __x_ABI_CWindows_CUI_CText_CHorizontalCharacterAlignment __x_ABI_CWindows_CUI_CText_CHorizontalCharacterAlignment;

typedef enum __x_ABI_CWindows_CUI_CText_CLetterCase __x_ABI_CWindows_CUI_CText_CLetterCase;

typedef enum __x_ABI_CWindows_CUI_CText_CLineSpacingRule __x_ABI_CWindows_CUI_CText_CLineSpacingRule;

typedef enum __x_ABI_CWindows_CUI_CText_CLinkType __x_ABI_CWindows_CUI_CText_CLinkType;

typedef enum __x_ABI_CWindows_CUI_CText_CMarkerAlignment __x_ABI_CWindows_CUI_CText_CMarkerAlignment;

typedef enum __x_ABI_CWindows_CUI_CText_CMarkerStyle __x_ABI_CWindows_CUI_CText_CMarkerStyle;

typedef enum __x_ABI_CWindows_CUI_CText_CMarkerType __x_ABI_CWindows_CUI_CText_CMarkerType;

typedef enum __x_ABI_CWindows_CUI_CText_CParagraphAlignment __x_ABI_CWindows_CUI_CText_CParagraphAlignment;

typedef enum __x_ABI_CWindows_CUI_CText_CParagraphStyle __x_ABI_CWindows_CUI_CText_CParagraphStyle;

typedef enum __x_ABI_CWindows_CUI_CText_CPointOptions __x_ABI_CWindows_CUI_CText_CPointOptions;

typedef enum __x_ABI_CWindows_CUI_CText_CRangeGravity __x_ABI_CWindows_CUI_CText_CRangeGravity;

typedef enum __x_ABI_CWindows_CUI_CText_CSelectionOptions __x_ABI_CWindows_CUI_CText_CSelectionOptions;

typedef enum __x_ABI_CWindows_CUI_CText_CSelectionType __x_ABI_CWindows_CUI_CText_CSelectionType;

typedef enum __x_ABI_CWindows_CUI_CText_CTabAlignment __x_ABI_CWindows_CUI_CText_CTabAlignment;

typedef enum __x_ABI_CWindows_CUI_CText_CTabLeader __x_ABI_CWindows_CUI_CText_CTabLeader;

typedef enum __x_ABI_CWindows_CUI_CText_CTextGetOptions __x_ABI_CWindows_CUI_CText_CTextGetOptions;

typedef enum __x_ABI_CWindows_CUI_CText_CTextRangeUnit __x_ABI_CWindows_CUI_CText_CTextRangeUnit;

typedef enum __x_ABI_CWindows_CUI_CText_CTextScript __x_ABI_CWindows_CUI_CText_CTextScript;

typedef enum __x_ABI_CWindows_CUI_CText_CTextSetOptions __x_ABI_CWindows_CUI_CText_CTextSetOptions;

typedef enum __x_ABI_CWindows_CUI_CText_CUnderlineType __x_ABI_CWindows_CUI_CText_CUnderlineType;

typedef enum __x_ABI_CWindows_CUI_CText_CVerticalCharacterAlignment __x_ABI_CWindows_CUI_CText_CVerticalCharacterAlignment;

typedef struct __x_ABI_CWindows_CUI_CText_CFontWeight __x_ABI_CWindows_CUI_CText_CFontWeight;

enum __x_ABI_CWindows_CUI_CText_CCaretType
    {
        __x_ABI_CWindows_CUI_CText_CCaretType_Normal = 0,
    __x_ABI_CWindows_CUI_CText_CCaretType_Null = 1,
};

enum __x_ABI_CWindows_CUI_CText_CFindOptions
    {
        __x_ABI_CWindows_CUI_CText_CFindOptions_None = 0,
    __x_ABI_CWindows_CUI_CText_CFindOptions_Word = 0x2,
    __x_ABI_CWindows_CUI_CText_CFindOptions_Case = 0x4,
};

enum __x_ABI_CWindows_CUI_CText_CFontStretch
    {
        __x_ABI_CWindows_CUI_CText_CFontStretch_Undefined = 0,
    __x_ABI_CWindows_CUI_CText_CFontStretch_UltraCondensed = 1,
    __x_ABI_CWindows_CUI_CText_CFontStretch_ExtraCondensed = 2,
    __x_ABI_CWindows_CUI_CText_CFontStretch_Condensed = 3,
    __x_ABI_CWindows_CUI_CText_CFontStretch_SemiCondensed = 4,
    __x_ABI_CWindows_CUI_CText_CFontStretch_Normal = 5,
    __x_ABI_CWindows_CUI_CText_CFontStretch_SemiExpanded = 6,
    __x_ABI_CWindows_CUI_CText_CFontStretch_Expanded = 7,
    __x_ABI_CWindows_CUI_CText_CFontStretch_ExtraExpanded = 8,
    __x_ABI_CWindows_CUI_CText_CFontStretch_UltraExpanded = 9,
};

enum __x_ABI_CWindows_CUI_CText_CFontStyle
    {
        __x_ABI_CWindows_CUI_CText_CFontStyle_Normal = 0,
    __x_ABI_CWindows_CUI_CText_CFontStyle_Oblique = 1,
    __x_ABI_CWindows_CUI_CText_CFontStyle_Italic = 2,
};

enum __x_ABI_CWindows_CUI_CText_CFormatEffect
    {
        __x_ABI_CWindows_CUI_CText_CFormatEffect_Off = 0,
    __x_ABI_CWindows_CUI_CText_CFormatEffect_On = 1,
    __x_ABI_CWindows_CUI_CText_CFormatEffect_Toggle = 2,
    __x_ABI_CWindows_CUI_CText_CFormatEffect_Undefined = 3,
};

enum __x_ABI_CWindows_CUI_CText_CHorizontalCharacterAlignment
    {
        __x_ABI_CWindows_CUI_CText_CHorizontalCharacterAlignment_Left = 0,
    __x_ABI_CWindows_CUI_CText_CHorizontalCharacterAlignment_Right = 1,
    __x_ABI_CWindows_CUI_CText_CHorizontalCharacterAlignment_Center = 2,
};

enum __x_ABI_CWindows_CUI_CText_CLetterCase
    {
        __x_ABI_CWindows_CUI_CText_CLetterCase_Lower = 0,
    __x_ABI_CWindows_CUI_CText_CLetterCase_Upper = 1,
};

enum __x_ABI_CWindows_CUI_CText_CLineSpacingRule
    {
        __x_ABI_CWindows_CUI_CText_CLineSpacingRule_Undefined = 0,
    __x_ABI_CWindows_CUI_CText_CLineSpacingRule_Single = 1,
    __x_ABI_CWindows_CUI_CText_CLineSpacingRule_OneAndHalf = 2,
    __x_ABI_CWindows_CUI_CText_CLineSpacingRule_Double = 3,
    __x_ABI_CWindows_CUI_CText_CLineSpacingRule_AtLeast = 4,
    __x_ABI_CWindows_CUI_CText_CLineSpacingRule_Exactly = 5,
    __x_ABI_CWindows_CUI_CText_CLineSpacingRule_Multiple = 6,
    __x_ABI_CWindows_CUI_CText_CLineSpacingRule_Percent = 7,
};

enum __x_ABI_CWindows_CUI_CText_CLinkType
    {
        __x_ABI_CWindows_CUI_CText_CLinkType_Undefined = 0,
    __x_ABI_CWindows_CUI_CText_CLinkType_NotALink = 1,
    __x_ABI_CWindows_CUI_CText_CLinkType_ClientLink = 2,
    __x_ABI_CWindows_CUI_CText_CLinkType_FriendlyLinkName = 3,
    __x_ABI_CWindows_CUI_CText_CLinkType_FriendlyLinkAddress = 4,
    __x_ABI_CWindows_CUI_CText_CLinkType_AutoLink = 5,
    __x_ABI_CWindows_CUI_CText_CLinkType_AutoLinkEmail = 6,
    __x_ABI_CWindows_CUI_CText_CLinkType_AutoLinkPhone = 7,
    __x_ABI_CWindows_CUI_CText_CLinkType_AutoLinkPath = 8,
};

enum __x_ABI_CWindows_CUI_CText_CMarkerAlignment
    {
        __x_ABI_CWindows_CUI_CText_CMarkerAlignment_Undefined = 0,
    __x_ABI_CWindows_CUI_CText_CMarkerAlignment_Left = 1,
    __x_ABI_CWindows_CUI_CText_CMarkerAlignment_Center = 2,
    __x_ABI_CWindows_CUI_CText_CMarkerAlignment_Right = 3,
};

enum __x_ABI_CWindows_CUI_CText_CMarkerStyle
    {
        __x_ABI_CWindows_CUI_CText_CMarkerStyle_Undefined = 0,
    __x_ABI_CWindows_CUI_CText_CMarkerStyle_Parenthesis = 1,
    __x_ABI_CWindows_CUI_CText_CMarkerStyle_Parentheses = 2,
    __x_ABI_CWindows_CUI_CText_CMarkerStyle_Period = 3,
    __x_ABI_CWindows_CUI_CText_CMarkerStyle_Plain = 4,
    __x_ABI_CWindows_CUI_CText_CMarkerStyle_Minus = 5,
    __x_ABI_CWindows_CUI_CText_CMarkerStyle_NoNumber = 6,
};

enum __x_ABI_CWindows_CUI_CText_CMarkerType
    {
        __x_ABI_CWindows_CUI_CText_CMarkerType_Undefined = 0,
    __x_ABI_CWindows_CUI_CText_CMarkerType_None = 1,
    __x_ABI_CWindows_CUI_CText_CMarkerType_Bullet = 2,
    __x_ABI_CWindows_CUI_CText_CMarkerType_Arabic = 3,
    __x_ABI_CWindows_CUI_CText_CMarkerType_LowercaseEnglishLetter = 4,
    __x_ABI_CWindows_CUI_CText_CMarkerType_UppercaseEnglishLetter = 5,
    __x_ABI_CWindows_CUI_CText_CMarkerType_LowercaseRoman = 6,
    __x_ABI_CWindows_CUI_CText_CMarkerType_UppercaseRoman = 7,
    __x_ABI_CWindows_CUI_CText_CMarkerType_UnicodeSequence = 8,
    __x_ABI_CWindows_CUI_CText_CMarkerType_CircledNumber = 9,
    __x_ABI_CWindows_CUI_CText_CMarkerType_BlackCircleWingding = 10,
    __x_ABI_CWindows_CUI_CText_CMarkerType_WhiteCircleWingding = 11,
    __x_ABI_CWindows_CUI_CText_CMarkerType_ArabicWide = 12,
    __x_ABI_CWindows_CUI_CText_CMarkerType_SimplifiedChinese = 13,
    __x_ABI_CWindows_CUI_CText_CMarkerType_TraditionalChinese = 14,
    __x_ABI_CWindows_CUI_CText_CMarkerType_JapanSimplifiedChinese = 15,
    __x_ABI_CWindows_CUI_CText_CMarkerType_JapanKorea = 16,
    __x_ABI_CWindows_CUI_CText_CMarkerType_ArabicDictionary = 17,
    __x_ABI_CWindows_CUI_CText_CMarkerType_ArabicAbjad = 18,
    __x_ABI_CWindows_CUI_CText_CMarkerType_Hebrew = 19,
    __x_ABI_CWindows_CUI_CText_CMarkerType_ThaiAlphabetic = 20,
    __x_ABI_CWindows_CUI_CText_CMarkerType_ThaiNumeric = 21,
    __x_ABI_CWindows_CUI_CText_CMarkerType_DevanagariVowel = 22,
    __x_ABI_CWindows_CUI_CText_CMarkerType_DevanagariConsonant = 23,
    __x_ABI_CWindows_CUI_CText_CMarkerType_DevanagariNumeric = 24,
};

enum __x_ABI_CWindows_CUI_CText_CParagraphAlignment
    {
        __x_ABI_CWindows_CUI_CText_CParagraphAlignment_Undefined = 0,
    __x_ABI_CWindows_CUI_CText_CParagraphAlignment_Left = 1,
    __x_ABI_CWindows_CUI_CText_CParagraphAlignment_Center = 2,
    __x_ABI_CWindows_CUI_CText_CParagraphAlignment_Right = 3,
    __x_ABI_CWindows_CUI_CText_CParagraphAlignment_Justify = 4,
};

enum __x_ABI_CWindows_CUI_CText_CParagraphStyle
    {
        __x_ABI_CWindows_CUI_CText_CParagraphStyle_Undefined = 0,
    __x_ABI_CWindows_CUI_CText_CParagraphStyle_None = 1,
    __x_ABI_CWindows_CUI_CText_CParagraphStyle_Normal = 2,
    __x_ABI_CWindows_CUI_CText_CParagraphStyle_Heading1 = 3,
    __x_ABI_CWindows_CUI_CText_CParagraphStyle_Heading2 = 4,
    __x_ABI_CWindows_CUI_CText_CParagraphStyle_Heading3 = 5,
    __x_ABI_CWindows_CUI_CText_CParagraphStyle_Heading4 = 6,
    __x_ABI_CWindows_CUI_CText_CParagraphStyle_Heading5 = 7,
    __x_ABI_CWindows_CUI_CText_CParagraphStyle_Heading6 = 8,
    __x_ABI_CWindows_CUI_CText_CParagraphStyle_Heading7 = 9,
    __x_ABI_CWindows_CUI_CText_CParagraphStyle_Heading8 = 10,
    __x_ABI_CWindows_CUI_CText_CParagraphStyle_Heading9 = 11,
};

enum __x_ABI_CWindows_CUI_CText_CPointOptions
    {
        __x_ABI_CWindows_CUI_CText_CPointOptions_None = 0,
    __x_ABI_CWindows_CUI_CText_CPointOptions_IncludeInset = 0x1,
    __x_ABI_CWindows_CUI_CText_CPointOptions_Start = 0x20,
    __x_ABI_CWindows_CUI_CText_CPointOptions_ClientCoordinates = 0x100,
    __x_ABI_CWindows_CUI_CText_CPointOptions_AllowOffClient = 0x200,
    __x_ABI_CWindows_CUI_CText_CPointOptions_Transform = 0x400,
    __x_ABI_CWindows_CUI_CText_CPointOptions_NoHorizontalScroll = 0x10000,
    __x_ABI_CWindows_CUI_CText_CPointOptions_NoVerticalScroll = 0x40000,
};

enum __x_ABI_CWindows_CUI_CText_CRangeGravity
    {
        __x_ABI_CWindows_CUI_CText_CRangeGravity_UIBehavior = 0,
    __x_ABI_CWindows_CUI_CText_CRangeGravity_Backward = 1,
    __x_ABI_CWindows_CUI_CText_CRangeGravity_Forward = 2,
    __x_ABI_CWindows_CUI_CText_CRangeGravity_Inward = 3,
    __x_ABI_CWindows_CUI_CText_CRangeGravity_Outward = 4,
};

enum __x_ABI_CWindows_CUI_CText_CSelectionOptions
    {
        __x_ABI_CWindows_CUI_CText_CSelectionOptions_StartActive = 0x1,
    __x_ABI_CWindows_CUI_CText_CSelectionOptions_AtEndOfLine = 0x2,
    __x_ABI_CWindows_CUI_CText_CSelectionOptions_Overtype = 0x4,
    __x_ABI_CWindows_CUI_CText_CSelectionOptions_Active = 0x8,
    __x_ABI_CWindows_CUI_CText_CSelectionOptions_Replace = 0x10,
};

enum __x_ABI_CWindows_CUI_CText_CSelectionType
    {
        __x_ABI_CWindows_CUI_CText_CSelectionType_None = 0,
    __x_ABI_CWindows_CUI_CText_CSelectionType_InsertionPoint = 1,
    __x_ABI_CWindows_CUI_CText_CSelectionType_Normal = 2,
    __x_ABI_CWindows_CUI_CText_CSelectionType_InlineShape = 7,
    __x_ABI_CWindows_CUI_CText_CSelectionType_Shape = 8,
};

enum __x_ABI_CWindows_CUI_CText_CTabAlignment
    {
        __x_ABI_CWindows_CUI_CText_CTabAlignment_Left = 0,
    __x_ABI_CWindows_CUI_CText_CTabAlignment_Center = 1,
    __x_ABI_CWindows_CUI_CText_CTabAlignment_Right = 2,
    __x_ABI_CWindows_CUI_CText_CTabAlignment_Decimal = 3,
    __x_ABI_CWindows_CUI_CText_CTabAlignment_Bar = 4,
};

enum __x_ABI_CWindows_CUI_CText_CTabLeader
    {
        __x_ABI_CWindows_CUI_CText_CTabLeader_Spaces = 0,
    __x_ABI_CWindows_CUI_CText_CTabLeader_Dots = 1,
    __x_ABI_CWindows_CUI_CText_CTabLeader_Dashes = 2,
    __x_ABI_CWindows_CUI_CText_CTabLeader_Lines = 3,
    __x_ABI_CWindows_CUI_CText_CTabLeader_ThickLines = 4,
    __x_ABI_CWindows_CUI_CText_CTabLeader_Equals = 5,
};

enum __x_ABI_CWindows_CUI_CText_CTextDecorations
    {
        __x_ABI_CWindows_CUI_CText_CTextDecorations_None = 0,
    __x_ABI_CWindows_CUI_CText_CTextDecorations_Underline = 0x1,
    __x_ABI_CWindows_CUI_CText_CTextDecorations_Strikethrough = 0x2,
};

enum __x_ABI_CWindows_CUI_CText_CTextGetOptions
    {
        __x_ABI_CWindows_CUI_CText_CTextGetOptions_None = 0,
    __x_ABI_CWindows_CUI_CText_CTextGetOptions_AdjustCrlf = 0x1,
    __x_ABI_CWindows_CUI_CText_CTextGetOptions_UseCrlf = 0x2,
    __x_ABI_CWindows_CUI_CText_CTextGetOptions_UseObjectText = 0x4,
    __x_ABI_CWindows_CUI_CText_CTextGetOptions_AllowFinalEop = 0x8,
    __x_ABI_CWindows_CUI_CText_CTextGetOptions_NoHidden = 0x20,
    __x_ABI_CWindows_CUI_CText_CTextGetOptions_IncludeNumbering = 0x40,
    __x_ABI_CWindows_CUI_CText_CTextGetOptions_FormatRtf = 0x2000,
    __x_ABI_CWindows_CUI_CText_CTextGetOptions_UseLf = 0x1000000,
};

enum __x_ABI_CWindows_CUI_CText_CTextRangeUnit
    {
        __x_ABI_CWindows_CUI_CText_CTextRangeUnit_Character = 0,
    __x_ABI_CWindows_CUI_CText_CTextRangeUnit_Word = 1,
    __x_ABI_CWindows_CUI_CText_CTextRangeUnit_Sentence = 2,
    __x_ABI_CWindows_CUI_CText_CTextRangeUnit_Paragraph = 3,
    __x_ABI_CWindows_CUI_CText_CTextRangeUnit_Line = 4,
    __x_ABI_CWindows_CUI_CText_CTextRangeUnit_Story = 5,
    __x_ABI_CWindows_CUI_CText_CTextRangeUnit_Screen = 6,
    __x_ABI_CWindows_CUI_CText_CTextRangeUnit_Section = 7,
    __x_ABI_CWindows_CUI_CText_CTextRangeUnit_Window = 8,
    __x_ABI_CWindows_CUI_CText_CTextRangeUnit_CharacterFormat = 9,
    __x_ABI_CWindows_CUI_CText_CTextRangeUnit_ParagraphFormat = 10,
    __x_ABI_CWindows_CUI_CText_CTextRangeUnit_Object = 11,
    __x_ABI_CWindows_CUI_CText_CTextRangeUnit_HardParagraph = 12,
    __x_ABI_CWindows_CUI_CText_CTextRangeUnit_Cluster = 13,
    __x_ABI_CWindows_CUI_CText_CTextRangeUnit_Bold = 14,
    __x_ABI_CWindows_CUI_CText_CTextRangeUnit_Italic = 15,
    __x_ABI_CWindows_CUI_CText_CTextRangeUnit_Underline = 16,
    __x_ABI_CWindows_CUI_CText_CTextRangeUnit_Strikethrough = 17,
    __x_ABI_CWindows_CUI_CText_CTextRangeUnit_ProtectedText = 18,
    __x_ABI_CWindows_CUI_CText_CTextRangeUnit_Link = 19,
    __x_ABI_CWindows_CUI_CText_CTextRangeUnit_SmallCaps = 20,
    __x_ABI_CWindows_CUI_CText_CTextRangeUnit_AllCaps = 21,
    __x_ABI_CWindows_CUI_CText_CTextRangeUnit_Hidden = 22,
    __x_ABI_CWindows_CUI_CText_CTextRangeUnit_Outline = 23,
    __x_ABI_CWindows_CUI_CText_CTextRangeUnit_Shadow = 24,
    __x_ABI_CWindows_CUI_CText_CTextRangeUnit_Imprint = 25,
    __x_ABI_CWindows_CUI_CText_CTextRangeUnit_Disabled = 26,
    __x_ABI_CWindows_CUI_CText_CTextRangeUnit_Revised = 27,
    __x_ABI_CWindows_CUI_CText_CTextRangeUnit_Subscript = 28,
    __x_ABI_CWindows_CUI_CText_CTextRangeUnit_Superscript = 29,
    __x_ABI_CWindows_CUI_CText_CTextRangeUnit_FontBound = 30,
    __x_ABI_CWindows_CUI_CText_CTextRangeUnit_LinkProtected = 31,
    __x_ABI_CWindows_CUI_CText_CTextRangeUnit_ContentLink = 32,
};

enum __x_ABI_CWindows_CUI_CText_CTextScript
    {
        __x_ABI_CWindows_CUI_CText_CTextScript_Undefined = 0,
    __x_ABI_CWindows_CUI_CText_CTextScript_Ansi = 1,
    __x_ABI_CWindows_CUI_CText_CTextScript_EastEurope = 2,
    __x_ABI_CWindows_CUI_CText_CTextScript_Cyrillic = 3,
    __x_ABI_CWindows_CUI_CText_CTextScript_Greek = 4,
    __x_ABI_CWindows_CUI_CText_CTextScript_Turkish = 5,
    __x_ABI_CWindows_CUI_CText_CTextScript_Hebrew = 6,
    __x_ABI_CWindows_CUI_CText_CTextScript_Arabic = 7,
    __x_ABI_CWindows_CUI_CText_CTextScript_Baltic = 8,
    __x_ABI_CWindows_CUI_CText_CTextScript_Vietnamese = 9,
    __x_ABI_CWindows_CUI_CText_CTextScript_Default = 10,
    __x_ABI_CWindows_CUI_CText_CTextScript_Symbol = 11,
    __x_ABI_CWindows_CUI_CText_CTextScript_Thai = 12,
    __x_ABI_CWindows_CUI_CText_CTextScript_ShiftJis = 13,
    __x_ABI_CWindows_CUI_CText_CTextScript_GB2312 = 14,
    __x_ABI_CWindows_CUI_CText_CTextScript_Hangul = 15,
    __x_ABI_CWindows_CUI_CText_CTextScript_Big5 = 16,
    __x_ABI_CWindows_CUI_CText_CTextScript_PC437 = 17,
    __x_ABI_CWindows_CUI_CText_CTextScript_Oem = 18,
    __x_ABI_CWindows_CUI_CText_CTextScript_Mac = 19,
    __x_ABI_CWindows_CUI_CText_CTextScript_Armenian = 20,
    __x_ABI_CWindows_CUI_CText_CTextScript_Syriac = 21,
    __x_ABI_CWindows_CUI_CText_CTextScript_Thaana = 22,
    __x_ABI_CWindows_CUI_CText_CTextScript_Devanagari = 23,
    __x_ABI_CWindows_CUI_CText_CTextScript_Bengali = 24,
    __x_ABI_CWindows_CUI_CText_CTextScript_Gurmukhi = 25,
    __x_ABI_CWindows_CUI_CText_CTextScript_Gujarati = 26,
    __x_ABI_CWindows_CUI_CText_CTextScript_Oriya = 27,
    __x_ABI_CWindows_CUI_CText_CTextScript_Tamil = 28,
    __x_ABI_CWindows_CUI_CText_CTextScript_Telugu = 29,
    __x_ABI_CWindows_CUI_CText_CTextScript_Kannada = 30,
    __x_ABI_CWindows_CUI_CText_CTextScript_Malayalam = 31,
    __x_ABI_CWindows_CUI_CText_CTextScript_Sinhala = 32,
    __x_ABI_CWindows_CUI_CText_CTextScript_Lao = 33,
    __x_ABI_CWindows_CUI_CText_CTextScript_Tibetan = 34,
    __x_ABI_CWindows_CUI_CText_CTextScript_Myanmar = 35,
    __x_ABI_CWindows_CUI_CText_CTextScript_Georgian = 36,
    __x_ABI_CWindows_CUI_CText_CTextScript_Jamo = 37,
    __x_ABI_CWindows_CUI_CText_CTextScript_Ethiopic = 38,
    __x_ABI_CWindows_CUI_CText_CTextScript_Cherokee = 39,
    __x_ABI_CWindows_CUI_CText_CTextScript_Aboriginal = 40,
    __x_ABI_CWindows_CUI_CText_CTextScript_Ogham = 41,
    __x_ABI_CWindows_CUI_CText_CTextScript_Runic = 42,
    __x_ABI_CWindows_CUI_CText_CTextScript_Khmer = 43,
    __x_ABI_CWindows_CUI_CText_CTextScript_Mongolian = 44,
    __x_ABI_CWindows_CUI_CText_CTextScript_Braille = 45,
    __x_ABI_CWindows_CUI_CText_CTextScript_Yi = 46,
    __x_ABI_CWindows_CUI_CText_CTextScript_Limbu = 47,
    __x_ABI_CWindows_CUI_CText_CTextScript_TaiLe = 48,
    __x_ABI_CWindows_CUI_CText_CTextScript_NewTaiLue = 49,
    __x_ABI_CWindows_CUI_CText_CTextScript_SylotiNagri = 50,
    __x_ABI_CWindows_CUI_CText_CTextScript_Kharoshthi = 51,
    __x_ABI_CWindows_CUI_CText_CTextScript_Kayahli = 52,
    __x_ABI_CWindows_CUI_CText_CTextScript_UnicodeSymbol = 53,
    __x_ABI_CWindows_CUI_CText_CTextScript_Emoji = 54,
    __x_ABI_CWindows_CUI_CText_CTextScript_Glagolitic = 55,
    __x_ABI_CWindows_CUI_CText_CTextScript_Lisu = 56,
    __x_ABI_CWindows_CUI_CText_CTextScript_Vai = 57,
    __x_ABI_CWindows_CUI_CText_CTextScript_NKo = 58,
    __x_ABI_CWindows_CUI_CText_CTextScript_Osmanya = 59,
    __x_ABI_CWindows_CUI_CText_CTextScript_PhagsPa = 60,
    __x_ABI_CWindows_CUI_CText_CTextScript_Gothic = 61,
    __x_ABI_CWindows_CUI_CText_CTextScript_Deseret = 62,
    __x_ABI_CWindows_CUI_CText_CTextScript_Tifinagh = 63,
};

enum __x_ABI_CWindows_CUI_CText_CTextSetOptions
    {
        __x_ABI_CWindows_CUI_CText_CTextSetOptions_None = 0,
    __x_ABI_CWindows_CUI_CText_CTextSetOptions_UnicodeBidi = 0x1,
    __x_ABI_CWindows_CUI_CText_CTextSetOptions_Unlink = 0x8,
    __x_ABI_CWindows_CUI_CText_CTextSetOptions_Unhide = 0x10,
    __x_ABI_CWindows_CUI_CText_CTextSetOptions_CheckTextLimit = 0x20,
    __x_ABI_CWindows_CUI_CText_CTextSetOptions_FormatRtf = 0x2000,
    __x_ABI_CWindows_CUI_CText_CTextSetOptions_ApplyRtfDocumentDefaults = 0x4000,
};

enum __x_ABI_CWindows_CUI_CText_CUnderlineType
    {
        __x_ABI_CWindows_CUI_CText_CUnderlineType_Undefined = 0,
    __x_ABI_CWindows_CUI_CText_CUnderlineType_None = 1,
    __x_ABI_CWindows_CUI_CText_CUnderlineType_Single = 2,
    __x_ABI_CWindows_CUI_CText_CUnderlineType_Words = 3,
    __x_ABI_CWindows_CUI_CText_CUnderlineType_Double = 4,
    __x_ABI_CWindows_CUI_CText_CUnderlineType_Dotted = 5,
    __x_ABI_CWindows_CUI_CText_CUnderlineType_Dash = 6,
    __x_ABI_CWindows_CUI_CText_CUnderlineType_DashDot = 7,
    __x_ABI_CWindows_CUI_CText_CUnderlineType_DashDotDot = 8,
    __x_ABI_CWindows_CUI_CText_CUnderlineType_Wave = 9,
    __x_ABI_CWindows_CUI_CText_CUnderlineType_Thick = 10,
    __x_ABI_CWindows_CUI_CText_CUnderlineType_Thin = 11,
    __x_ABI_CWindows_CUI_CText_CUnderlineType_DoubleWave = 12,
    __x_ABI_CWindows_CUI_CText_CUnderlineType_HeavyWave = 13,
    __x_ABI_CWindows_CUI_CText_CUnderlineType_LongDash = 14,
    __x_ABI_CWindows_CUI_CText_CUnderlineType_ThickDash = 15,
    __x_ABI_CWindows_CUI_CText_CUnderlineType_ThickDashDot = 16,
    __x_ABI_CWindows_CUI_CText_CUnderlineType_ThickDashDotDot = 17,
    __x_ABI_CWindows_CUI_CText_CUnderlineType_ThickDotted = 18,
    __x_ABI_CWindows_CUI_CText_CUnderlineType_ThickLongDash = 19,
};

enum __x_ABI_CWindows_CUI_CText_CVerticalCharacterAlignment
    {
        __x_ABI_CWindows_CUI_CText_CVerticalCharacterAlignment_Top = 0,
    __x_ABI_CWindows_CUI_CText_CVerticalCharacterAlignment_Baseline = 1,
    __x_ABI_CWindows_CUI_CText_CVerticalCharacterAlignment_Bottom = 2,
};

struct __x_ABI_CWindows_CUI_CText_CFontWeight
    {
        UINT16 Weight;
};

#if !defined(____x_ABI_CWindows_CUI_CText_CIContentLinkInfo_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CText_CIContentLinkInfo_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CText_CIContentLinkInfoVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CText_CIContentLinkInfo* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CText_CIContentLinkInfo* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CText_CIContentLinkInfo* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CText_CIContentLinkInfo* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CText_CIContentLinkInfo* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CText_CIContentLinkInfo* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Id)(__x_ABI_CWindows_CUI_CText_CIContentLinkInfo* This,
        UINT32* value);
    HRESULT (STDMETHODCALLTYPE* put_Id)(__x_ABI_CWindows_CUI_CText_CIContentLinkInfo* This,
        UINT32 value);
    HRESULT (STDMETHODCALLTYPE* get_DisplayText)(__x_ABI_CWindows_CUI_CText_CIContentLinkInfo* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* put_DisplayText)(__x_ABI_CWindows_CUI_CText_CIContentLinkInfo* This,
        HSTRING value);
    HRESULT (STDMETHODCALLTYPE* get_SecondaryText)(__x_ABI_CWindows_CUI_CText_CIContentLinkInfo* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* put_SecondaryText)(__x_ABI_CWindows_CUI_CText_CIContentLinkInfo* This,
        HSTRING value);
    HRESULT (STDMETHODCALLTYPE* get_Uri)(__x_ABI_CWindows_CUI_CText_CIContentLinkInfo* This,
        __x_ABI_CWindows_CFoundation_CIUriRuntimeClass** value);
    HRESULT (STDMETHODCALLTYPE* put_Uri)(__x_ABI_CWindows_CUI_CText_CIContentLinkInfo* This,
        __x_ABI_CWindows_CFoundation_CIUriRuntimeClass* value);
    HRESULT (STDMETHODCALLTYPE* get_LinkContentKind)(__x_ABI_CWindows_CUI_CText_CIContentLinkInfo* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* put_LinkContentKind)(__x_ABI_CWindows_CUI_CText_CIContentLinkInfo* This,
        HSTRING value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CText_CIContentLinkInfoVtbl;

    interface __x_ABI_CWindows_CUI_CText_CIContentLinkInfo
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CText_CIContentLinkInfoVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CText_CIContentLinkInfo;
#endif /* !defined(____x_ABI_CWindows_CUI_CText_CIContentLinkInfo_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CText_CIFontWeights_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CText_CIFontWeights_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CText_CIFontWeightsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CText_CIFontWeights* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CText_CIFontWeights* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CText_CIFontWeights* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CText_CIFontWeights* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CText_CIFontWeights* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CText_CIFontWeights* This,
            TrustLevel* trustLevel);
    
        END_INTERFACE
    } __x_ABI_CWindows_CUI_CText_CIFontWeightsVtbl;

    interface __x_ABI_CWindows_CUI_CText_CIFontWeights
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CText_CIFontWeightsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CText_CIFontWeights;
#endif /* !defined(____x_ABI_CWindows_CUI_CText_CIFontWeights_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CText_CIFontWeightsStatics_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CText_CIFontWeightsStatics_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CText_CIFontWeightsStaticsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CText_CIFontWeightsStatics* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CText_CIFontWeightsStatics* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CText_CIFontWeightsStatics* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CText_CIFontWeightsStatics* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CText_CIFontWeightsStatics* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CText_CIFontWeightsStatics* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Black)(__x_ABI_CWindows_CUI_CText_CIFontWeightsStatics* This,
        struct __x_ABI_CWindows_CUI_CText_CFontWeight* value);
    HRESULT (STDMETHODCALLTYPE* get_Bold)(__x_ABI_CWindows_CUI_CText_CIFontWeightsStatics* This,
        struct __x_ABI_CWindows_CUI_CText_CFontWeight* value);
    HRESULT (STDMETHODCALLTYPE* get_ExtraBlack)(__x_ABI_CWindows_CUI_CText_CIFontWeightsStatics* This,
        struct __x_ABI_CWindows_CUI_CText_CFontWeight* value);
    HRESULT (STDMETHODCALLTYPE* get_ExtraBold)(__x_ABI_CWindows_CUI_CText_CIFontWeightsStatics* This,
        struct __x_ABI_CWindows_CUI_CText_CFontWeight* value);
    HRESULT (STDMETHODCALLTYPE* get_ExtraLight)(__x_ABI_CWindows_CUI_CText_CIFontWeightsStatics* This,
        struct __x_ABI_CWindows_CUI_CText_CFontWeight* value);
    HRESULT (STDMETHODCALLTYPE* get_Light)(__x_ABI_CWindows_CUI_CText_CIFontWeightsStatics* This,
        struct __x_ABI_CWindows_CUI_CText_CFontWeight* value);
    HRESULT (STDMETHODCALLTYPE* get_Medium)(__x_ABI_CWindows_CUI_CText_CIFontWeightsStatics* This,
        struct __x_ABI_CWindows_CUI_CText_CFontWeight* value);
    HRESULT (STDMETHODCALLTYPE* get_Normal)(__x_ABI_CWindows_CUI_CText_CIFontWeightsStatics* This,
        struct __x_ABI_CWindows_CUI_CText_CFontWeight* value);
    HRESULT (STDMETHODCALLTYPE* get_SemiBold)(__x_ABI_CWindows_CUI_CText_CIFontWeightsStatics* This,
        struct __x_ABI_CWindows_CUI_CText_CFontWeight* value);
    HRESULT (STDMETHODCALLTYPE* get_SemiLight)(__x_ABI_CWindows_CUI_CText_CIFontWeightsStatics* This,
        struct __x_ABI_CWindows_CUI_CText_CFontWeight* value);
    HRESULT (STDMETHODCALLTYPE* get_Thin)(__x_ABI_CWindows_CUI_CText_CIFontWeightsStatics* This,
        struct __x_ABI_CWindows_CUI_CText_CFontWeight* value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CText_CIFontWeightsStaticsVtbl;

    interface __x_ABI_CWindows_CUI_CText_CIFontWeightsStatics
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CText_CIFontWeightsStaticsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CText_CIFontWeightsStatics;
#endif /* !defined(____x_ABI_CWindows_CUI_CText_CIFontWeightsStatics_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CText_CIRichEditTextRange_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CText_CIRichEditTextRange_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CText_CIRichEditTextRangeVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CText_CIRichEditTextRange* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CText_CIRichEditTextRange* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CText_CIRichEditTextRange* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CText_CIRichEditTextRange* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CText_CIRichEditTextRange* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CText_CIRichEditTextRange* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_ContentLinkInfo)(__x_ABI_CWindows_CUI_CText_CIRichEditTextRange* This,
        __x_ABI_CWindows_CUI_CText_CIContentLinkInfo** value);
    HRESULT (STDMETHODCALLTYPE* put_ContentLinkInfo)(__x_ABI_CWindows_CUI_CText_CIRichEditTextRange* This,
        __x_ABI_CWindows_CUI_CText_CIContentLinkInfo* value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CText_CIRichEditTextRangeVtbl;

    interface __x_ABI_CWindows_CUI_CText_CIRichEditTextRange
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CText_CIRichEditTextRangeVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CText_CIRichEditTextRange;
#endif /* !defined(____x_ABI_CWindows_CUI_CText_CIRichEditTextRange_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CText_CITextCharacterFormat_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CText_CITextCharacterFormat_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CText_CITextCharacterFormatVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CText_CITextCharacterFormat* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CText_CITextCharacterFormat* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CText_CITextCharacterFormat* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CText_CITextCharacterFormat* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CText_CITextCharacterFormat* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CText_CITextCharacterFormat* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_AllCaps)(__x_ABI_CWindows_CUI_CText_CITextCharacterFormat* This,
        enum __x_ABI_CWindows_CUI_CText_CFormatEffect* value);
    HRESULT (STDMETHODCALLTYPE* put_AllCaps)(__x_ABI_CWindows_CUI_CText_CITextCharacterFormat* This,
        enum __x_ABI_CWindows_CUI_CText_CFormatEffect value);
    HRESULT (STDMETHODCALLTYPE* get_BackgroundColor)(__x_ABI_CWindows_CUI_CText_CITextCharacterFormat* This,
        struct __x_ABI_CWindows_CUI_CColor* value);
    HRESULT (STDMETHODCALLTYPE* put_BackgroundColor)(__x_ABI_CWindows_CUI_CText_CITextCharacterFormat* This,
        struct __x_ABI_CWindows_CUI_CColor value);
    HRESULT (STDMETHODCALLTYPE* get_Bold)(__x_ABI_CWindows_CUI_CText_CITextCharacterFormat* This,
        enum __x_ABI_CWindows_CUI_CText_CFormatEffect* value);
    HRESULT (STDMETHODCALLTYPE* put_Bold)(__x_ABI_CWindows_CUI_CText_CITextCharacterFormat* This,
        enum __x_ABI_CWindows_CUI_CText_CFormatEffect value);
    HRESULT (STDMETHODCALLTYPE* get_FontStretch)(__x_ABI_CWindows_CUI_CText_CITextCharacterFormat* This,
        enum __x_ABI_CWindows_CUI_CText_CFontStretch* value);
    HRESULT (STDMETHODCALLTYPE* put_FontStretch)(__x_ABI_CWindows_CUI_CText_CITextCharacterFormat* This,
        enum __x_ABI_CWindows_CUI_CText_CFontStretch value);
    HRESULT (STDMETHODCALLTYPE* get_FontStyle)(__x_ABI_CWindows_CUI_CText_CITextCharacterFormat* This,
        enum __x_ABI_CWindows_CUI_CText_CFontStyle* value);
    HRESULT (STDMETHODCALLTYPE* put_FontStyle)(__x_ABI_CWindows_CUI_CText_CITextCharacterFormat* This,
        enum __x_ABI_CWindows_CUI_CText_CFontStyle value);
    HRESULT (STDMETHODCALLTYPE* get_ForegroundColor)(__x_ABI_CWindows_CUI_CText_CITextCharacterFormat* This,
        struct __x_ABI_CWindows_CUI_CColor* value);
    HRESULT (STDMETHODCALLTYPE* put_ForegroundColor)(__x_ABI_CWindows_CUI_CText_CITextCharacterFormat* This,
        struct __x_ABI_CWindows_CUI_CColor value);
    HRESULT (STDMETHODCALLTYPE* get_Hidden)(__x_ABI_CWindows_CUI_CText_CITextCharacterFormat* This,
        enum __x_ABI_CWindows_CUI_CText_CFormatEffect* value);
    HRESULT (STDMETHODCALLTYPE* put_Hidden)(__x_ABI_CWindows_CUI_CText_CITextCharacterFormat* This,
        enum __x_ABI_CWindows_CUI_CText_CFormatEffect value);
    HRESULT (STDMETHODCALLTYPE* get_Italic)(__x_ABI_CWindows_CUI_CText_CITextCharacterFormat* This,
        enum __x_ABI_CWindows_CUI_CText_CFormatEffect* value);
    HRESULT (STDMETHODCALLTYPE* put_Italic)(__x_ABI_CWindows_CUI_CText_CITextCharacterFormat* This,
        enum __x_ABI_CWindows_CUI_CText_CFormatEffect value);
    HRESULT (STDMETHODCALLTYPE* get_Kerning)(__x_ABI_CWindows_CUI_CText_CITextCharacterFormat* This,
        FLOAT* value);
    HRESULT (STDMETHODCALLTYPE* put_Kerning)(__x_ABI_CWindows_CUI_CText_CITextCharacterFormat* This,
        FLOAT value);
    HRESULT (STDMETHODCALLTYPE* get_LanguageTag)(__x_ABI_CWindows_CUI_CText_CITextCharacterFormat* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* put_LanguageTag)(__x_ABI_CWindows_CUI_CText_CITextCharacterFormat* This,
        HSTRING value);
    HRESULT (STDMETHODCALLTYPE* get_LinkType)(__x_ABI_CWindows_CUI_CText_CITextCharacterFormat* This,
        enum __x_ABI_CWindows_CUI_CText_CLinkType* value);
    HRESULT (STDMETHODCALLTYPE* get_Name)(__x_ABI_CWindows_CUI_CText_CITextCharacterFormat* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* put_Name)(__x_ABI_CWindows_CUI_CText_CITextCharacterFormat* This,
        HSTRING value);
    HRESULT (STDMETHODCALLTYPE* get_Outline)(__x_ABI_CWindows_CUI_CText_CITextCharacterFormat* This,
        enum __x_ABI_CWindows_CUI_CText_CFormatEffect* value);
    HRESULT (STDMETHODCALLTYPE* put_Outline)(__x_ABI_CWindows_CUI_CText_CITextCharacterFormat* This,
        enum __x_ABI_CWindows_CUI_CText_CFormatEffect value);
    HRESULT (STDMETHODCALLTYPE* get_Position)(__x_ABI_CWindows_CUI_CText_CITextCharacterFormat* This,
        FLOAT* value);
    HRESULT (STDMETHODCALLTYPE* put_Position)(__x_ABI_CWindows_CUI_CText_CITextCharacterFormat* This,
        FLOAT value);
    HRESULT (STDMETHODCALLTYPE* get_ProtectedText)(__x_ABI_CWindows_CUI_CText_CITextCharacterFormat* This,
        enum __x_ABI_CWindows_CUI_CText_CFormatEffect* value);
    HRESULT (STDMETHODCALLTYPE* put_ProtectedText)(__x_ABI_CWindows_CUI_CText_CITextCharacterFormat* This,
        enum __x_ABI_CWindows_CUI_CText_CFormatEffect value);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_CWindows_CUI_CText_CITextCharacterFormat* This,
        FLOAT* value);
    HRESULT (STDMETHODCALLTYPE* put_Size)(__x_ABI_CWindows_CUI_CText_CITextCharacterFormat* This,
        FLOAT value);
    HRESULT (STDMETHODCALLTYPE* get_SmallCaps)(__x_ABI_CWindows_CUI_CText_CITextCharacterFormat* This,
        enum __x_ABI_CWindows_CUI_CText_CFormatEffect* value);
    HRESULT (STDMETHODCALLTYPE* put_SmallCaps)(__x_ABI_CWindows_CUI_CText_CITextCharacterFormat* This,
        enum __x_ABI_CWindows_CUI_CText_CFormatEffect value);
    HRESULT (STDMETHODCALLTYPE* get_Spacing)(__x_ABI_CWindows_CUI_CText_CITextCharacterFormat* This,
        FLOAT* value);
    HRESULT (STDMETHODCALLTYPE* put_Spacing)(__x_ABI_CWindows_CUI_CText_CITextCharacterFormat* This,
        FLOAT value);
    HRESULT (STDMETHODCALLTYPE* get_Strikethrough)(__x_ABI_CWindows_CUI_CText_CITextCharacterFormat* This,
        enum __x_ABI_CWindows_CUI_CText_CFormatEffect* value);
    HRESULT (STDMETHODCALLTYPE* put_Strikethrough)(__x_ABI_CWindows_CUI_CText_CITextCharacterFormat* This,
        enum __x_ABI_CWindows_CUI_CText_CFormatEffect value);
    HRESULT (STDMETHODCALLTYPE* get_Subscript)(__x_ABI_CWindows_CUI_CText_CITextCharacterFormat* This,
        enum __x_ABI_CWindows_CUI_CText_CFormatEffect* value);
    HRESULT (STDMETHODCALLTYPE* put_Subscript)(__x_ABI_CWindows_CUI_CText_CITextCharacterFormat* This,
        enum __x_ABI_CWindows_CUI_CText_CFormatEffect value);
    HRESULT (STDMETHODCALLTYPE* get_Superscript)(__x_ABI_CWindows_CUI_CText_CITextCharacterFormat* This,
        enum __x_ABI_CWindows_CUI_CText_CFormatEffect* value);
    HRESULT (STDMETHODCALLTYPE* put_Superscript)(__x_ABI_CWindows_CUI_CText_CITextCharacterFormat* This,
        enum __x_ABI_CWindows_CUI_CText_CFormatEffect value);
    HRESULT (STDMETHODCALLTYPE* get_TextScript)(__x_ABI_CWindows_CUI_CText_CITextCharacterFormat* This,
        enum __x_ABI_CWindows_CUI_CText_CTextScript* value);
    HRESULT (STDMETHODCALLTYPE* put_TextScript)(__x_ABI_CWindows_CUI_CText_CITextCharacterFormat* This,
        enum __x_ABI_CWindows_CUI_CText_CTextScript value);
    HRESULT (STDMETHODCALLTYPE* get_Underline)(__x_ABI_CWindows_CUI_CText_CITextCharacterFormat* This,
        enum __x_ABI_CWindows_CUI_CText_CUnderlineType* value);
    HRESULT (STDMETHODCALLTYPE* put_Underline)(__x_ABI_CWindows_CUI_CText_CITextCharacterFormat* This,
        enum __x_ABI_CWindows_CUI_CText_CUnderlineType value);
    HRESULT (STDMETHODCALLTYPE* get_Weight)(__x_ABI_CWindows_CUI_CText_CITextCharacterFormat* This,
        INT32* value);
    HRESULT (STDMETHODCALLTYPE* put_Weight)(__x_ABI_CWindows_CUI_CText_CITextCharacterFormat* This,
        INT32 value);
    HRESULT (STDMETHODCALLTYPE* SetClone)(__x_ABI_CWindows_CUI_CText_CITextCharacterFormat* This,
        __x_ABI_CWindows_CUI_CText_CITextCharacterFormat* value);
    HRESULT (STDMETHODCALLTYPE* GetClone)(__x_ABI_CWindows_CUI_CText_CITextCharacterFormat* This,
        __x_ABI_CWindows_CUI_CText_CITextCharacterFormat** result);
    HRESULT (STDMETHODCALLTYPE* IsEqual)(__x_ABI_CWindows_CUI_CText_CITextCharacterFormat* This,
        __x_ABI_CWindows_CUI_CText_CITextCharacterFormat* format,
        boolean* result);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CText_CITextCharacterFormatVtbl;

    interface __x_ABI_CWindows_CUI_CText_CITextCharacterFormat
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CText_CITextCharacterFormatVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CText_CITextCharacterFormat;
#endif /* !defined(____x_ABI_CWindows_CUI_CText_CITextCharacterFormat_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CText_CITextConstantsStatics_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CText_CITextConstantsStatics_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CText_CITextConstantsStaticsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CText_CITextConstantsStatics* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CText_CITextConstantsStatics* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CText_CITextConstantsStatics* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CText_CITextConstantsStatics* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CText_CITextConstantsStatics* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CText_CITextConstantsStatics* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_AutoColor)(__x_ABI_CWindows_CUI_CText_CITextConstantsStatics* This,
        struct __x_ABI_CWindows_CUI_CColor* value);
    HRESULT (STDMETHODCALLTYPE* get_MinUnitCount)(__x_ABI_CWindows_CUI_CText_CITextConstantsStatics* This,
        INT32* value);
    HRESULT (STDMETHODCALLTYPE* get_MaxUnitCount)(__x_ABI_CWindows_CUI_CText_CITextConstantsStatics* This,
        INT32* value);
    HRESULT (STDMETHODCALLTYPE* get_UndefinedColor)(__x_ABI_CWindows_CUI_CText_CITextConstantsStatics* This,
        struct __x_ABI_CWindows_CUI_CColor* value);
    HRESULT (STDMETHODCALLTYPE* get_UndefinedFloatValue)(__x_ABI_CWindows_CUI_CText_CITextConstantsStatics* This,
        FLOAT* value);
    HRESULT (STDMETHODCALLTYPE* get_UndefinedInt32Value)(__x_ABI_CWindows_CUI_CText_CITextConstantsStatics* This,
        INT32* value);
    HRESULT (STDMETHODCALLTYPE* get_UndefinedFontStretch)(__x_ABI_CWindows_CUI_CText_CITextConstantsStatics* This,
        enum __x_ABI_CWindows_CUI_CText_CFontStretch* value);
    HRESULT (STDMETHODCALLTYPE* get_UndefinedFontStyle)(__x_ABI_CWindows_CUI_CText_CITextConstantsStatics* This,
        enum __x_ABI_CWindows_CUI_CText_CFontStyle* value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CText_CITextConstantsStaticsVtbl;

    interface __x_ABI_CWindows_CUI_CText_CITextConstantsStatics
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CText_CITextConstantsStaticsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CText_CITextConstantsStatics;
#endif /* !defined(____x_ABI_CWindows_CUI_CText_CITextConstantsStatics_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CText_CITextDocument_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CText_CITextDocument_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CText_CITextDocumentVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CText_CITextDocument* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CText_CITextDocument* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CText_CITextDocument* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CText_CITextDocument* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CText_CITextDocument* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CText_CITextDocument* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_CaretType)(__x_ABI_CWindows_CUI_CText_CITextDocument* This,
        enum __x_ABI_CWindows_CUI_CText_CCaretType* value);
    HRESULT (STDMETHODCALLTYPE* put_CaretType)(__x_ABI_CWindows_CUI_CText_CITextDocument* This,
        enum __x_ABI_CWindows_CUI_CText_CCaretType value);
    HRESULT (STDMETHODCALLTYPE* get_DefaultTabStop)(__x_ABI_CWindows_CUI_CText_CITextDocument* This,
        FLOAT* value);
    HRESULT (STDMETHODCALLTYPE* put_DefaultTabStop)(__x_ABI_CWindows_CUI_CText_CITextDocument* This,
        FLOAT value);
    HRESULT (STDMETHODCALLTYPE* get_Selection)(__x_ABI_CWindows_CUI_CText_CITextDocument* This,
        __x_ABI_CWindows_CUI_CText_CITextSelection** value);
    HRESULT (STDMETHODCALLTYPE* get_UndoLimit)(__x_ABI_CWindows_CUI_CText_CITextDocument* This,
        UINT32* value);
    HRESULT (STDMETHODCALLTYPE* put_UndoLimit)(__x_ABI_CWindows_CUI_CText_CITextDocument* This,
        UINT32 value);
    HRESULT (STDMETHODCALLTYPE* CanCopy)(__x_ABI_CWindows_CUI_CText_CITextDocument* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* CanPaste)(__x_ABI_CWindows_CUI_CText_CITextDocument* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* CanRedo)(__x_ABI_CWindows_CUI_CText_CITextDocument* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* CanUndo)(__x_ABI_CWindows_CUI_CText_CITextDocument* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* ApplyDisplayUpdates)(__x_ABI_CWindows_CUI_CText_CITextDocument* This,
        INT32* result);
    HRESULT (STDMETHODCALLTYPE* BatchDisplayUpdates)(__x_ABI_CWindows_CUI_CText_CITextDocument* This,
        INT32* result);
    HRESULT (STDMETHODCALLTYPE* BeginUndoGroup)(__x_ABI_CWindows_CUI_CText_CITextDocument* This);
    HRESULT (STDMETHODCALLTYPE* EndUndoGroup)(__x_ABI_CWindows_CUI_CText_CITextDocument* This);
    HRESULT (STDMETHODCALLTYPE* GetDefaultCharacterFormat)(__x_ABI_CWindows_CUI_CText_CITextDocument* This,
        __x_ABI_CWindows_CUI_CText_CITextCharacterFormat** result);
    HRESULT (STDMETHODCALLTYPE* GetDefaultParagraphFormat)(__x_ABI_CWindows_CUI_CText_CITextDocument* This,
        __x_ABI_CWindows_CUI_CText_CITextParagraphFormat** result);
    HRESULT (STDMETHODCALLTYPE* GetRange)(__x_ABI_CWindows_CUI_CText_CITextDocument* This,
        INT32 startPosition,
        INT32 endPosition,
        __x_ABI_CWindows_CUI_CText_CITextRange** result);
    HRESULT (STDMETHODCALLTYPE* GetRangeFromPoint)(__x_ABI_CWindows_CUI_CText_CITextDocument* This,
        struct __x_ABI_CWindows_CFoundation_CPoint point,
        enum __x_ABI_CWindows_CUI_CText_CPointOptions options,
        __x_ABI_CWindows_CUI_CText_CITextRange** result);
    HRESULT (STDMETHODCALLTYPE* GetText)(__x_ABI_CWindows_CUI_CText_CITextDocument* This,
        enum __x_ABI_CWindows_CUI_CText_CTextGetOptions options,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* LoadFromStream)(__x_ABI_CWindows_CUI_CText_CITextDocument* This,
        enum __x_ABI_CWindows_CUI_CText_CTextSetOptions options,
        __x_ABI_CWindows_CStorage_CStreams_CIRandomAccessStream* value);
    HRESULT (STDMETHODCALLTYPE* Redo)(__x_ABI_CWindows_CUI_CText_CITextDocument* This);
    HRESULT (STDMETHODCALLTYPE* SaveToStream)(__x_ABI_CWindows_CUI_CText_CITextDocument* This,
        enum __x_ABI_CWindows_CUI_CText_CTextGetOptions options,
        __x_ABI_CWindows_CStorage_CStreams_CIRandomAccessStream* value);
    HRESULT (STDMETHODCALLTYPE* SetDefaultCharacterFormat)(__x_ABI_CWindows_CUI_CText_CITextDocument* This,
        __x_ABI_CWindows_CUI_CText_CITextCharacterFormat* value);
    HRESULT (STDMETHODCALLTYPE* SetDefaultParagraphFormat)(__x_ABI_CWindows_CUI_CText_CITextDocument* This,
        __x_ABI_CWindows_CUI_CText_CITextParagraphFormat* value);
    HRESULT (STDMETHODCALLTYPE* SetText)(__x_ABI_CWindows_CUI_CText_CITextDocument* This,
        enum __x_ABI_CWindows_CUI_CText_CTextSetOptions options,
        HSTRING value);
    HRESULT (STDMETHODCALLTYPE* Undo)(__x_ABI_CWindows_CUI_CText_CITextDocument* This);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CText_CITextDocumentVtbl;

    interface __x_ABI_CWindows_CUI_CText_CITextDocument
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CText_CITextDocumentVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CText_CITextDocument;
#endif /* !defined(____x_ABI_CWindows_CUI_CText_CITextDocument_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CText_CITextDocument2_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CText_CITextDocument2_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CText_CITextDocument2Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CText_CITextDocument2* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CText_CITextDocument2* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CText_CITextDocument2* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CText_CITextDocument2* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CText_CITextDocument2* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CText_CITextDocument2* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_AlignmentIncludesTrailingWhitespace)(__x_ABI_CWindows_CUI_CText_CITextDocument2* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* put_AlignmentIncludesTrailingWhitespace)(__x_ABI_CWindows_CUI_CText_CITextDocument2* This,
        boolean value);
    HRESULT (STDMETHODCALLTYPE* get_IgnoreTrailingCharacterSpacing)(__x_ABI_CWindows_CUI_CText_CITextDocument2* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* put_IgnoreTrailingCharacterSpacing)(__x_ABI_CWindows_CUI_CText_CITextDocument2* This,
        boolean value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CText_CITextDocument2Vtbl;

    interface __x_ABI_CWindows_CUI_CText_CITextDocument2
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CText_CITextDocument2Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CText_CITextDocument2;
#endif /* !defined(____x_ABI_CWindows_CUI_CText_CITextDocument2_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CText_CITextDocument3_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CText_CITextDocument3_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CText_CITextDocument3Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CText_CITextDocument3* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CText_CITextDocument3* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CText_CITextDocument3* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CText_CITextDocument3* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CText_CITextDocument3* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CText_CITextDocument3* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* ClearUndoRedoHistory)(__x_ABI_CWindows_CUI_CText_CITextDocument3* This);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CText_CITextDocument3Vtbl;

    interface __x_ABI_CWindows_CUI_CText_CITextDocument3
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CText_CITextDocument3Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CText_CITextDocument3;
#endif /* !defined(____x_ABI_CWindows_CUI_CText_CITextDocument3_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CText_CITextParagraphFormat_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CText_CITextParagraphFormat_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CText_CITextParagraphFormatVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CText_CITextParagraphFormat* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CText_CITextParagraphFormat* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CText_CITextParagraphFormat* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CText_CITextParagraphFormat* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CText_CITextParagraphFormat* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CText_CITextParagraphFormat* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Alignment)(__x_ABI_CWindows_CUI_CText_CITextParagraphFormat* This,
        enum __x_ABI_CWindows_CUI_CText_CParagraphAlignment* value);
    HRESULT (STDMETHODCALLTYPE* put_Alignment)(__x_ABI_CWindows_CUI_CText_CITextParagraphFormat* This,
        enum __x_ABI_CWindows_CUI_CText_CParagraphAlignment value);
    HRESULT (STDMETHODCALLTYPE* get_FirstLineIndent)(__x_ABI_CWindows_CUI_CText_CITextParagraphFormat* This,
        FLOAT* value);
    HRESULT (STDMETHODCALLTYPE* get_KeepTogether)(__x_ABI_CWindows_CUI_CText_CITextParagraphFormat* This,
        enum __x_ABI_CWindows_CUI_CText_CFormatEffect* value);
    HRESULT (STDMETHODCALLTYPE* put_KeepTogether)(__x_ABI_CWindows_CUI_CText_CITextParagraphFormat* This,
        enum __x_ABI_CWindows_CUI_CText_CFormatEffect value);
    HRESULT (STDMETHODCALLTYPE* get_KeepWithNext)(__x_ABI_CWindows_CUI_CText_CITextParagraphFormat* This,
        enum __x_ABI_CWindows_CUI_CText_CFormatEffect* value);
    HRESULT (STDMETHODCALLTYPE* put_KeepWithNext)(__x_ABI_CWindows_CUI_CText_CITextParagraphFormat* This,
        enum __x_ABI_CWindows_CUI_CText_CFormatEffect value);
    HRESULT (STDMETHODCALLTYPE* get_LeftIndent)(__x_ABI_CWindows_CUI_CText_CITextParagraphFormat* This,
        FLOAT* value);
    HRESULT (STDMETHODCALLTYPE* get_LineSpacing)(__x_ABI_CWindows_CUI_CText_CITextParagraphFormat* This,
        FLOAT* value);
    HRESULT (STDMETHODCALLTYPE* get_LineSpacingRule)(__x_ABI_CWindows_CUI_CText_CITextParagraphFormat* This,
        enum __x_ABI_CWindows_CUI_CText_CLineSpacingRule* value);
    HRESULT (STDMETHODCALLTYPE* get_ListAlignment)(__x_ABI_CWindows_CUI_CText_CITextParagraphFormat* This,
        enum __x_ABI_CWindows_CUI_CText_CMarkerAlignment* value);
    HRESULT (STDMETHODCALLTYPE* put_ListAlignment)(__x_ABI_CWindows_CUI_CText_CITextParagraphFormat* This,
        enum __x_ABI_CWindows_CUI_CText_CMarkerAlignment value);
    HRESULT (STDMETHODCALLTYPE* get_ListLevelIndex)(__x_ABI_CWindows_CUI_CText_CITextParagraphFormat* This,
        INT32* value);
    HRESULT (STDMETHODCALLTYPE* put_ListLevelIndex)(__x_ABI_CWindows_CUI_CText_CITextParagraphFormat* This,
        INT32 value);
    HRESULT (STDMETHODCALLTYPE* get_ListStart)(__x_ABI_CWindows_CUI_CText_CITextParagraphFormat* This,
        INT32* value);
    HRESULT (STDMETHODCALLTYPE* put_ListStart)(__x_ABI_CWindows_CUI_CText_CITextParagraphFormat* This,
        INT32 value);
    HRESULT (STDMETHODCALLTYPE* get_ListStyle)(__x_ABI_CWindows_CUI_CText_CITextParagraphFormat* This,
        enum __x_ABI_CWindows_CUI_CText_CMarkerStyle* value);
    HRESULT (STDMETHODCALLTYPE* put_ListStyle)(__x_ABI_CWindows_CUI_CText_CITextParagraphFormat* This,
        enum __x_ABI_CWindows_CUI_CText_CMarkerStyle value);
    HRESULT (STDMETHODCALLTYPE* get_ListTab)(__x_ABI_CWindows_CUI_CText_CITextParagraphFormat* This,
        FLOAT* value);
    HRESULT (STDMETHODCALLTYPE* put_ListTab)(__x_ABI_CWindows_CUI_CText_CITextParagraphFormat* This,
        FLOAT value);
    HRESULT (STDMETHODCALLTYPE* get_ListType)(__x_ABI_CWindows_CUI_CText_CITextParagraphFormat* This,
        enum __x_ABI_CWindows_CUI_CText_CMarkerType* value);
    HRESULT (STDMETHODCALLTYPE* put_ListType)(__x_ABI_CWindows_CUI_CText_CITextParagraphFormat* This,
        enum __x_ABI_CWindows_CUI_CText_CMarkerType value);
    HRESULT (STDMETHODCALLTYPE* get_NoLineNumber)(__x_ABI_CWindows_CUI_CText_CITextParagraphFormat* This,
        enum __x_ABI_CWindows_CUI_CText_CFormatEffect* value);
    HRESULT (STDMETHODCALLTYPE* put_NoLineNumber)(__x_ABI_CWindows_CUI_CText_CITextParagraphFormat* This,
        enum __x_ABI_CWindows_CUI_CText_CFormatEffect value);
    HRESULT (STDMETHODCALLTYPE* get_PageBreakBefore)(__x_ABI_CWindows_CUI_CText_CITextParagraphFormat* This,
        enum __x_ABI_CWindows_CUI_CText_CFormatEffect* value);
    HRESULT (STDMETHODCALLTYPE* put_PageBreakBefore)(__x_ABI_CWindows_CUI_CText_CITextParagraphFormat* This,
        enum __x_ABI_CWindows_CUI_CText_CFormatEffect value);
    HRESULT (STDMETHODCALLTYPE* get_RightIndent)(__x_ABI_CWindows_CUI_CText_CITextParagraphFormat* This,
        FLOAT* value);
    HRESULT (STDMETHODCALLTYPE* put_RightIndent)(__x_ABI_CWindows_CUI_CText_CITextParagraphFormat* This,
        FLOAT value);
    HRESULT (STDMETHODCALLTYPE* get_RightToLeft)(__x_ABI_CWindows_CUI_CText_CITextParagraphFormat* This,
        enum __x_ABI_CWindows_CUI_CText_CFormatEffect* value);
    HRESULT (STDMETHODCALLTYPE* put_RightToLeft)(__x_ABI_CWindows_CUI_CText_CITextParagraphFormat* This,
        enum __x_ABI_CWindows_CUI_CText_CFormatEffect value);
    HRESULT (STDMETHODCALLTYPE* get_Style)(__x_ABI_CWindows_CUI_CText_CITextParagraphFormat* This,
        enum __x_ABI_CWindows_CUI_CText_CParagraphStyle* value);
    HRESULT (STDMETHODCALLTYPE* put_Style)(__x_ABI_CWindows_CUI_CText_CITextParagraphFormat* This,
        enum __x_ABI_CWindows_CUI_CText_CParagraphStyle value);
    HRESULT (STDMETHODCALLTYPE* get_SpaceAfter)(__x_ABI_CWindows_CUI_CText_CITextParagraphFormat* This,
        FLOAT* value);
    HRESULT (STDMETHODCALLTYPE* put_SpaceAfter)(__x_ABI_CWindows_CUI_CText_CITextParagraphFormat* This,
        FLOAT value);
    HRESULT (STDMETHODCALLTYPE* get_SpaceBefore)(__x_ABI_CWindows_CUI_CText_CITextParagraphFormat* This,
        FLOAT* value);
    HRESULT (STDMETHODCALLTYPE* put_SpaceBefore)(__x_ABI_CWindows_CUI_CText_CITextParagraphFormat* This,
        FLOAT value);
    HRESULT (STDMETHODCALLTYPE* get_WidowControl)(__x_ABI_CWindows_CUI_CText_CITextParagraphFormat* This,
        enum __x_ABI_CWindows_CUI_CText_CFormatEffect* value);
    HRESULT (STDMETHODCALLTYPE* put_WidowControl)(__x_ABI_CWindows_CUI_CText_CITextParagraphFormat* This,
        enum __x_ABI_CWindows_CUI_CText_CFormatEffect value);
    HRESULT (STDMETHODCALLTYPE* get_TabCount)(__x_ABI_CWindows_CUI_CText_CITextParagraphFormat* This,
        INT32* value);
    HRESULT (STDMETHODCALLTYPE* AddTab)(__x_ABI_CWindows_CUI_CText_CITextParagraphFormat* This,
        FLOAT position,
        enum __x_ABI_CWindows_CUI_CText_CTabAlignment align,
        enum __x_ABI_CWindows_CUI_CText_CTabLeader leader);
    HRESULT (STDMETHODCALLTYPE* ClearAllTabs)(__x_ABI_CWindows_CUI_CText_CITextParagraphFormat* This);
    HRESULT (STDMETHODCALLTYPE* DeleteTab)(__x_ABI_CWindows_CUI_CText_CITextParagraphFormat* This,
        FLOAT position);
    HRESULT (STDMETHODCALLTYPE* GetClone)(__x_ABI_CWindows_CUI_CText_CITextParagraphFormat* This,
        __x_ABI_CWindows_CUI_CText_CITextParagraphFormat** result);
    HRESULT (STDMETHODCALLTYPE* GetTab)(__x_ABI_CWindows_CUI_CText_CITextParagraphFormat* This,
        INT32 index,
        FLOAT* position,
        enum __x_ABI_CWindows_CUI_CText_CTabAlignment* align,
        enum __x_ABI_CWindows_CUI_CText_CTabLeader* leader);
    HRESULT (STDMETHODCALLTYPE* IsEqual)(__x_ABI_CWindows_CUI_CText_CITextParagraphFormat* This,
        __x_ABI_CWindows_CUI_CText_CITextParagraphFormat* format,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* SetClone)(__x_ABI_CWindows_CUI_CText_CITextParagraphFormat* This,
        __x_ABI_CWindows_CUI_CText_CITextParagraphFormat* format);
    HRESULT (STDMETHODCALLTYPE* SetIndents)(__x_ABI_CWindows_CUI_CText_CITextParagraphFormat* This,
        FLOAT start,
        FLOAT left,
        FLOAT right);
    HRESULT (STDMETHODCALLTYPE* SetLineSpacing)(__x_ABI_CWindows_CUI_CText_CITextParagraphFormat* This,
        enum __x_ABI_CWindows_CUI_CText_CLineSpacingRule rule,
        FLOAT spacing);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CText_CITextParagraphFormatVtbl;

    interface __x_ABI_CWindows_CUI_CText_CITextParagraphFormat
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CText_CITextParagraphFormatVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CText_CITextParagraphFormat;
#endif /* !defined(____x_ABI_CWindows_CUI_CText_CITextParagraphFormat_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CText_CITextRange_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CText_CITextRange_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CText_CITextRangeVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CText_CITextRange* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CText_CITextRange* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CText_CITextRange* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CText_CITextRange* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CText_CITextRange* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CText_CITextRange* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Character)(__x_ABI_CWindows_CUI_CText_CITextRange* This,
        WCHAR* value);
    HRESULT (STDMETHODCALLTYPE* put_Character)(__x_ABI_CWindows_CUI_CText_CITextRange* This,
        WCHAR value);
    HRESULT (STDMETHODCALLTYPE* get_CharacterFormat)(__x_ABI_CWindows_CUI_CText_CITextRange* This,
        __x_ABI_CWindows_CUI_CText_CITextCharacterFormat** value);
    HRESULT (STDMETHODCALLTYPE* put_CharacterFormat)(__x_ABI_CWindows_CUI_CText_CITextRange* This,
        __x_ABI_CWindows_CUI_CText_CITextCharacterFormat* value);
    HRESULT (STDMETHODCALLTYPE* get_FormattedText)(__x_ABI_CWindows_CUI_CText_CITextRange* This,
        __x_ABI_CWindows_CUI_CText_CITextRange** value);
    HRESULT (STDMETHODCALLTYPE* put_FormattedText)(__x_ABI_CWindows_CUI_CText_CITextRange* This,
        __x_ABI_CWindows_CUI_CText_CITextRange* value);
    HRESULT (STDMETHODCALLTYPE* get_EndPosition)(__x_ABI_CWindows_CUI_CText_CITextRange* This,
        INT32* value);
    HRESULT (STDMETHODCALLTYPE* put_EndPosition)(__x_ABI_CWindows_CUI_CText_CITextRange* This,
        INT32 value);
    HRESULT (STDMETHODCALLTYPE* get_Gravity)(__x_ABI_CWindows_CUI_CText_CITextRange* This,
        enum __x_ABI_CWindows_CUI_CText_CRangeGravity* value);
    HRESULT (STDMETHODCALLTYPE* put_Gravity)(__x_ABI_CWindows_CUI_CText_CITextRange* This,
        enum __x_ABI_CWindows_CUI_CText_CRangeGravity value);
    HRESULT (STDMETHODCALLTYPE* get_Length)(__x_ABI_CWindows_CUI_CText_CITextRange* This,
        INT32* value);
    HRESULT (STDMETHODCALLTYPE* get_Link)(__x_ABI_CWindows_CUI_CText_CITextRange* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* put_Link)(__x_ABI_CWindows_CUI_CText_CITextRange* This,
        HSTRING value);
    HRESULT (STDMETHODCALLTYPE* get_ParagraphFormat)(__x_ABI_CWindows_CUI_CText_CITextRange* This,
        __x_ABI_CWindows_CUI_CText_CITextParagraphFormat** value);
    HRESULT (STDMETHODCALLTYPE* put_ParagraphFormat)(__x_ABI_CWindows_CUI_CText_CITextRange* This,
        __x_ABI_CWindows_CUI_CText_CITextParagraphFormat* value);
    HRESULT (STDMETHODCALLTYPE* get_StartPosition)(__x_ABI_CWindows_CUI_CText_CITextRange* This,
        INT32* value);
    HRESULT (STDMETHODCALLTYPE* put_StartPosition)(__x_ABI_CWindows_CUI_CText_CITextRange* This,
        INT32 value);
    HRESULT (STDMETHODCALLTYPE* get_StoryLength)(__x_ABI_CWindows_CUI_CText_CITextRange* This,
        INT32* value);
    HRESULT (STDMETHODCALLTYPE* get_Text)(__x_ABI_CWindows_CUI_CText_CITextRange* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* put_Text)(__x_ABI_CWindows_CUI_CText_CITextRange* This,
        HSTRING value);
    HRESULT (STDMETHODCALLTYPE* CanPaste)(__x_ABI_CWindows_CUI_CText_CITextRange* This,
        INT32 format,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* ChangeCase)(__x_ABI_CWindows_CUI_CText_CITextRange* This,
        enum __x_ABI_CWindows_CUI_CText_CLetterCase value);
    HRESULT (STDMETHODCALLTYPE* Collapse)(__x_ABI_CWindows_CUI_CText_CITextRange* This,
        boolean value);
    HRESULT (STDMETHODCALLTYPE* Copy)(__x_ABI_CWindows_CUI_CText_CITextRange* This);
    HRESULT (STDMETHODCALLTYPE* Cut)(__x_ABI_CWindows_CUI_CText_CITextRange* This);
    HRESULT (STDMETHODCALLTYPE* Delete)(__x_ABI_CWindows_CUI_CText_CITextRange* This,
        enum __x_ABI_CWindows_CUI_CText_CTextRangeUnit unit,
        INT32 count,
        INT32* result);
    HRESULT (STDMETHODCALLTYPE* EndOf)(__x_ABI_CWindows_CUI_CText_CITextRange* This,
        enum __x_ABI_CWindows_CUI_CText_CTextRangeUnit unit,
        boolean extend,
        INT32* result);
    HRESULT (STDMETHODCALLTYPE* Expand)(__x_ABI_CWindows_CUI_CText_CITextRange* This,
        enum __x_ABI_CWindows_CUI_CText_CTextRangeUnit unit,
        INT32* result);
    HRESULT (STDMETHODCALLTYPE* FindText)(__x_ABI_CWindows_CUI_CText_CITextRange* This,
        HSTRING value,
        INT32 scanLength,
        enum __x_ABI_CWindows_CUI_CText_CFindOptions options,
        INT32* result);
    HRESULT (STDMETHODCALLTYPE* GetCharacterUtf32)(__x_ABI_CWindows_CUI_CText_CITextRange* This,
        UINT32* value,
        INT32 offset);
    HRESULT (STDMETHODCALLTYPE* GetClone)(__x_ABI_CWindows_CUI_CText_CITextRange* This,
        __x_ABI_CWindows_CUI_CText_CITextRange** result);
    HRESULT (STDMETHODCALLTYPE* GetIndex)(__x_ABI_CWindows_CUI_CText_CITextRange* This,
        enum __x_ABI_CWindows_CUI_CText_CTextRangeUnit unit,
        INT32* result);
    HRESULT (STDMETHODCALLTYPE* GetPoint)(__x_ABI_CWindows_CUI_CText_CITextRange* This,
        enum __x_ABI_CWindows_CUI_CText_CHorizontalCharacterAlignment horizontalAlign,
        enum __x_ABI_CWindows_CUI_CText_CVerticalCharacterAlignment verticalAlign,
        enum __x_ABI_CWindows_CUI_CText_CPointOptions options,
        struct __x_ABI_CWindows_CFoundation_CPoint* point);
    HRESULT (STDMETHODCALLTYPE* GetRect)(__x_ABI_CWindows_CUI_CText_CITextRange* This,
        enum __x_ABI_CWindows_CUI_CText_CPointOptions options,
        struct __x_ABI_CWindows_CFoundation_CRect* rect,
        INT32* hit);
    HRESULT (STDMETHODCALLTYPE* GetText)(__x_ABI_CWindows_CUI_CText_CITextRange* This,
        enum __x_ABI_CWindows_CUI_CText_CTextGetOptions options,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* GetTextViaStream)(__x_ABI_CWindows_CUI_CText_CITextRange* This,
        enum __x_ABI_CWindows_CUI_CText_CTextGetOptions options,
        __x_ABI_CWindows_CStorage_CStreams_CIRandomAccessStream* value);
    HRESULT (STDMETHODCALLTYPE* InRange)(__x_ABI_CWindows_CUI_CText_CITextRange* This,
        __x_ABI_CWindows_CUI_CText_CITextRange* range,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* InsertImage)(__x_ABI_CWindows_CUI_CText_CITextRange* This,
        INT32 width,
        INT32 height,
        INT32 ascent,
        enum __x_ABI_CWindows_CUI_CText_CVerticalCharacterAlignment verticalAlign,
        HSTRING alternateText,
        __x_ABI_CWindows_CStorage_CStreams_CIRandomAccessStream* value);
    HRESULT (STDMETHODCALLTYPE* InStory)(__x_ABI_CWindows_CUI_CText_CITextRange* This,
        __x_ABI_CWindows_CUI_CText_CITextRange* range,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* IsEqual)(__x_ABI_CWindows_CUI_CText_CITextRange* This,
        __x_ABI_CWindows_CUI_CText_CITextRange* range,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* Move)(__x_ABI_CWindows_CUI_CText_CITextRange* This,
        enum __x_ABI_CWindows_CUI_CText_CTextRangeUnit unit,
        INT32 count,
        INT32* result);
    HRESULT (STDMETHODCALLTYPE* MoveEnd)(__x_ABI_CWindows_CUI_CText_CITextRange* This,
        enum __x_ABI_CWindows_CUI_CText_CTextRangeUnit unit,
        INT32 count,
        INT32* result);
    HRESULT (STDMETHODCALLTYPE* MoveStart)(__x_ABI_CWindows_CUI_CText_CITextRange* This,
        enum __x_ABI_CWindows_CUI_CText_CTextRangeUnit unit,
        INT32 count,
        INT32* result);
    HRESULT (STDMETHODCALLTYPE* Paste)(__x_ABI_CWindows_CUI_CText_CITextRange* This,
        INT32 format);
    HRESULT (STDMETHODCALLTYPE* ScrollIntoView)(__x_ABI_CWindows_CUI_CText_CITextRange* This,
        enum __x_ABI_CWindows_CUI_CText_CPointOptions value);
    HRESULT (STDMETHODCALLTYPE* MatchSelection)(__x_ABI_CWindows_CUI_CText_CITextRange* This);
    HRESULT (STDMETHODCALLTYPE* SetIndex)(__x_ABI_CWindows_CUI_CText_CITextRange* This,
        enum __x_ABI_CWindows_CUI_CText_CTextRangeUnit unit,
        INT32 index,
        boolean extend);
    HRESULT (STDMETHODCALLTYPE* SetPoint)(__x_ABI_CWindows_CUI_CText_CITextRange* This,
        struct __x_ABI_CWindows_CFoundation_CPoint point,
        enum __x_ABI_CWindows_CUI_CText_CPointOptions options,
        boolean extend);
    HRESULT (STDMETHODCALLTYPE* SetRange)(__x_ABI_CWindows_CUI_CText_CITextRange* This,
        INT32 startPosition,
        INT32 endPosition);
    HRESULT (STDMETHODCALLTYPE* SetText)(__x_ABI_CWindows_CUI_CText_CITextRange* This,
        enum __x_ABI_CWindows_CUI_CText_CTextSetOptions options,
        HSTRING value);
    HRESULT (STDMETHODCALLTYPE* SetTextViaStream)(__x_ABI_CWindows_CUI_CText_CITextRange* This,
        enum __x_ABI_CWindows_CUI_CText_CTextSetOptions options,
        __x_ABI_CWindows_CStorage_CStreams_CIRandomAccessStream* value);
    HRESULT (STDMETHODCALLTYPE* StartOf)(__x_ABI_CWindows_CUI_CText_CITextRange* This,
        enum __x_ABI_CWindows_CUI_CText_CTextRangeUnit unit,
        boolean extend,
        INT32* result);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CText_CITextRangeVtbl;

    interface __x_ABI_CWindows_CUI_CText_CITextRange
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CText_CITextRangeVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CText_CITextRange;
#endif /* !defined(____x_ABI_CWindows_CUI_CText_CITextRange_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CText_CITextSelection_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CText_CITextSelection_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CText_CITextSelectionVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CText_CITextSelection* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CText_CITextSelection* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CText_CITextSelection* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CText_CITextSelection* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CText_CITextSelection* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CText_CITextSelection* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Options)(__x_ABI_CWindows_CUI_CText_CITextSelection* This,
        enum __x_ABI_CWindows_CUI_CText_CSelectionOptions* value);
    HRESULT (STDMETHODCALLTYPE* put_Options)(__x_ABI_CWindows_CUI_CText_CITextSelection* This,
        enum __x_ABI_CWindows_CUI_CText_CSelectionOptions value);
    HRESULT (STDMETHODCALLTYPE* get_Type)(__x_ABI_CWindows_CUI_CText_CITextSelection* This,
        enum __x_ABI_CWindows_CUI_CText_CSelectionType* value);
    HRESULT (STDMETHODCALLTYPE* EndKey)(__x_ABI_CWindows_CUI_CText_CITextSelection* This,
        enum __x_ABI_CWindows_CUI_CText_CTextRangeUnit unit,
        boolean extend,
        INT32* result);
    HRESULT (STDMETHODCALLTYPE* HomeKey)(__x_ABI_CWindows_CUI_CText_CITextSelection* This,
        enum __x_ABI_CWindows_CUI_CText_CTextRangeUnit unit,
        boolean extend,
        INT32* result);
    HRESULT (STDMETHODCALLTYPE* MoveDown)(__x_ABI_CWindows_CUI_CText_CITextSelection* This,
        enum __x_ABI_CWindows_CUI_CText_CTextRangeUnit unit,
        INT32 count,
        boolean extend,
        INT32* result);
    HRESULT (STDMETHODCALLTYPE* MoveLeft)(__x_ABI_CWindows_CUI_CText_CITextSelection* This,
        enum __x_ABI_CWindows_CUI_CText_CTextRangeUnit unit,
        INT32 count,
        boolean extend,
        INT32* result);
    HRESULT (STDMETHODCALLTYPE* MoveRight)(__x_ABI_CWindows_CUI_CText_CITextSelection* This,
        enum __x_ABI_CWindows_CUI_CText_CTextRangeUnit unit,
        INT32 count,
        boolean extend,
        INT32* result);
    HRESULT (STDMETHODCALLTYPE* MoveUp)(__x_ABI_CWindows_CUI_CText_CITextSelection* This,
        enum __x_ABI_CWindows_CUI_CText_CTextRangeUnit unit,
        INT32 count,
        boolean extend,
        INT32* result);
    HRESULT (STDMETHODCALLTYPE* TypeText)(__x_ABI_CWindows_CUI_CText_CITextSelection* This,
        HSTRING value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CText_CITextSelectionVtbl;

    interface __x_ABI_CWindows_CUI_CText_CITextSelection
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CText_CITextSelectionVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CText_CITextSelection;
#endif /* !defined(____x_ABI_CWindows_CUI_CText_CITextSelection_INTERFACE_DEFINED__) */
    

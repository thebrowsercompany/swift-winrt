// WARNING: Please don't edit this file. It was generated by Swift/WinRT v0.0.1

#pragma once
// Header files for imported files
#include <inspectable.h>
#include <EventToken.h>
#include <windowscontracts.h>
#include "Windows.Foundation.h"
#include "Windows.Graphics.DirectX.Direct3D11.h"
#include "Windows.Storage.Streams.h"
// Importing Collections header
#include "Windows.Foundation.Collections.h"

/* Forward Declarations */
#ifndef ____x_ABI_CWindows_CGraphics_CImaging_CIBitmapBuffer_FWD_DEFINED__
#define ____x_ABI_CWindows_CGraphics_CImaging_CIBitmapBuffer_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CGraphics_CImaging_CIBitmapBuffer __x_ABI_CWindows_CGraphics_CImaging_CIBitmapBuffer;

#endif // ____x_ABI_CWindows_CGraphics_CImaging_CIBitmapBuffer_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CGraphics_CImaging_CIBitmapCodecInformation_FWD_DEFINED__
#define ____x_ABI_CWindows_CGraphics_CImaging_CIBitmapCodecInformation_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CGraphics_CImaging_CIBitmapCodecInformation __x_ABI_CWindows_CGraphics_CImaging_CIBitmapCodecInformation;

#endif // ____x_ABI_CWindows_CGraphics_CImaging_CIBitmapCodecInformation_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CGraphics_CImaging_CIBitmapDecoder_FWD_DEFINED__
#define ____x_ABI_CWindows_CGraphics_CImaging_CIBitmapDecoder_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CGraphics_CImaging_CIBitmapDecoder __x_ABI_CWindows_CGraphics_CImaging_CIBitmapDecoder;

#endif // ____x_ABI_CWindows_CGraphics_CImaging_CIBitmapDecoder_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CGraphics_CImaging_CIBitmapDecoderStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CGraphics_CImaging_CIBitmapDecoderStatics_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CGraphics_CImaging_CIBitmapDecoderStatics __x_ABI_CWindows_CGraphics_CImaging_CIBitmapDecoderStatics;

#endif // ____x_ABI_CWindows_CGraphics_CImaging_CIBitmapDecoderStatics_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CGraphics_CImaging_CIBitmapDecoderStatics2_FWD_DEFINED__
#define ____x_ABI_CWindows_CGraphics_CImaging_CIBitmapDecoderStatics2_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CGraphics_CImaging_CIBitmapDecoderStatics2 __x_ABI_CWindows_CGraphics_CImaging_CIBitmapDecoderStatics2;

#endif // ____x_ABI_CWindows_CGraphics_CImaging_CIBitmapDecoderStatics2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CGraphics_CImaging_CIBitmapEncoder_FWD_DEFINED__
#define ____x_ABI_CWindows_CGraphics_CImaging_CIBitmapEncoder_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CGraphics_CImaging_CIBitmapEncoder __x_ABI_CWindows_CGraphics_CImaging_CIBitmapEncoder;

#endif // ____x_ABI_CWindows_CGraphics_CImaging_CIBitmapEncoder_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CGraphics_CImaging_CIBitmapEncoderStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CGraphics_CImaging_CIBitmapEncoderStatics_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CGraphics_CImaging_CIBitmapEncoderStatics __x_ABI_CWindows_CGraphics_CImaging_CIBitmapEncoderStatics;

#endif // ____x_ABI_CWindows_CGraphics_CImaging_CIBitmapEncoderStatics_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CGraphics_CImaging_CIBitmapEncoderStatics2_FWD_DEFINED__
#define ____x_ABI_CWindows_CGraphics_CImaging_CIBitmapEncoderStatics2_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CGraphics_CImaging_CIBitmapEncoderStatics2 __x_ABI_CWindows_CGraphics_CImaging_CIBitmapEncoderStatics2;

#endif // ____x_ABI_CWindows_CGraphics_CImaging_CIBitmapEncoderStatics2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CGraphics_CImaging_CIBitmapEncoderWithSoftwareBitmap_FWD_DEFINED__
#define ____x_ABI_CWindows_CGraphics_CImaging_CIBitmapEncoderWithSoftwareBitmap_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CGraphics_CImaging_CIBitmapEncoderWithSoftwareBitmap __x_ABI_CWindows_CGraphics_CImaging_CIBitmapEncoderWithSoftwareBitmap;

#endif // ____x_ABI_CWindows_CGraphics_CImaging_CIBitmapEncoderWithSoftwareBitmap_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CGraphics_CImaging_CIBitmapFrame_FWD_DEFINED__
#define ____x_ABI_CWindows_CGraphics_CImaging_CIBitmapFrame_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CGraphics_CImaging_CIBitmapFrame __x_ABI_CWindows_CGraphics_CImaging_CIBitmapFrame;

#endif // ____x_ABI_CWindows_CGraphics_CImaging_CIBitmapFrame_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CGraphics_CImaging_CIBitmapFrameWithSoftwareBitmap_FWD_DEFINED__
#define ____x_ABI_CWindows_CGraphics_CImaging_CIBitmapFrameWithSoftwareBitmap_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CGraphics_CImaging_CIBitmapFrameWithSoftwareBitmap __x_ABI_CWindows_CGraphics_CImaging_CIBitmapFrameWithSoftwareBitmap;

#endif // ____x_ABI_CWindows_CGraphics_CImaging_CIBitmapFrameWithSoftwareBitmap_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CGraphics_CImaging_CIBitmapProperties_FWD_DEFINED__
#define ____x_ABI_CWindows_CGraphics_CImaging_CIBitmapProperties_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CGraphics_CImaging_CIBitmapProperties __x_ABI_CWindows_CGraphics_CImaging_CIBitmapProperties;

#endif // ____x_ABI_CWindows_CGraphics_CImaging_CIBitmapProperties_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CGraphics_CImaging_CIBitmapPropertiesView_FWD_DEFINED__
#define ____x_ABI_CWindows_CGraphics_CImaging_CIBitmapPropertiesView_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CGraphics_CImaging_CIBitmapPropertiesView __x_ABI_CWindows_CGraphics_CImaging_CIBitmapPropertiesView;

#endif // ____x_ABI_CWindows_CGraphics_CImaging_CIBitmapPropertiesView_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CGraphics_CImaging_CIBitmapTransform_FWD_DEFINED__
#define ____x_ABI_CWindows_CGraphics_CImaging_CIBitmapTransform_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CGraphics_CImaging_CIBitmapTransform __x_ABI_CWindows_CGraphics_CImaging_CIBitmapTransform;

#endif // ____x_ABI_CWindows_CGraphics_CImaging_CIBitmapTransform_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CGraphics_CImaging_CIBitmapTypedValue_FWD_DEFINED__
#define ____x_ABI_CWindows_CGraphics_CImaging_CIBitmapTypedValue_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CGraphics_CImaging_CIBitmapTypedValue __x_ABI_CWindows_CGraphics_CImaging_CIBitmapTypedValue;

#endif // ____x_ABI_CWindows_CGraphics_CImaging_CIBitmapTypedValue_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CGraphics_CImaging_CIBitmapTypedValueFactory_FWD_DEFINED__
#define ____x_ABI_CWindows_CGraphics_CImaging_CIBitmapTypedValueFactory_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CGraphics_CImaging_CIBitmapTypedValueFactory __x_ABI_CWindows_CGraphics_CImaging_CIBitmapTypedValueFactory;

#endif // ____x_ABI_CWindows_CGraphics_CImaging_CIBitmapTypedValueFactory_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CGraphics_CImaging_CIPixelDataProvider_FWD_DEFINED__
#define ____x_ABI_CWindows_CGraphics_CImaging_CIPixelDataProvider_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CGraphics_CImaging_CIPixelDataProvider __x_ABI_CWindows_CGraphics_CImaging_CIPixelDataProvider;

#endif // ____x_ABI_CWindows_CGraphics_CImaging_CIPixelDataProvider_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CGraphics_CImaging_CISoftwareBitmap_FWD_DEFINED__
#define ____x_ABI_CWindows_CGraphics_CImaging_CISoftwareBitmap_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CGraphics_CImaging_CISoftwareBitmap __x_ABI_CWindows_CGraphics_CImaging_CISoftwareBitmap;

#endif // ____x_ABI_CWindows_CGraphics_CImaging_CISoftwareBitmap_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CGraphics_CImaging_CISoftwareBitmapFactory_FWD_DEFINED__
#define ____x_ABI_CWindows_CGraphics_CImaging_CISoftwareBitmapFactory_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CGraphics_CImaging_CISoftwareBitmapFactory __x_ABI_CWindows_CGraphics_CImaging_CISoftwareBitmapFactory;

#endif // ____x_ABI_CWindows_CGraphics_CImaging_CISoftwareBitmapFactory_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CGraphics_CImaging_CISoftwareBitmapStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CGraphics_CImaging_CISoftwareBitmapStatics_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CGraphics_CImaging_CISoftwareBitmapStatics __x_ABI_CWindows_CGraphics_CImaging_CISoftwareBitmapStatics;

#endif // ____x_ABI_CWindows_CGraphics_CImaging_CISoftwareBitmapStatics_FWD_DEFINED__

// Parameterized interface forward declarations (C)

// Collection interface definitions

typedef interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapDecoder __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapDecoder;

#if !defined(____x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapDecoder_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapDecoder_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapDecoder __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapDecoder;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapDecoder;

    typedef struct __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapDecoderVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapDecoder* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapDecoder* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapDecoder* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapDecoder* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapDecoder* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapDecoder* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* put_Completed)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapDecoder* This,
        __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapDecoder* handler);
    HRESULT (STDMETHODCALLTYPE* get_Completed)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapDecoder* This,
        __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapDecoder** result);
    HRESULT (STDMETHODCALLTYPE* GetResults)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapDecoder* This,
        __x_ABI_CWindows_CGraphics_CImaging_CIBitmapDecoder** result);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapDecoderVtbl;

    interface __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapDecoder
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapDecoderVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapDecoder_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapDecoder_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapDecoder_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapDecoder __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapDecoder;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapDecoder;

    typedef struct __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapDecoderVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapDecoder* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapDecoder* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapDecoder* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapDecoder* This,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapDecoder* asyncInfo,
        enum __x_ABI_CWindows_CFoundation_CAsyncStatus asyncStatus);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapDecoderVtbl;

    interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapDecoder
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapDecoderVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapDecoder_INTERFACE_DEFINED__
    
typedef interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapEncoder __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapEncoder;

#if !defined(____x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapEncoder_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapEncoder_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapEncoder __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapEncoder;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapEncoder;

    typedef struct __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapEncoderVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapEncoder* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapEncoder* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapEncoder* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapEncoder* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapEncoder* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapEncoder* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* put_Completed)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapEncoder* This,
        __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapEncoder* handler);
    HRESULT (STDMETHODCALLTYPE* get_Completed)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapEncoder* This,
        __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapEncoder** result);
    HRESULT (STDMETHODCALLTYPE* GetResults)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapEncoder* This,
        __x_ABI_CWindows_CGraphics_CImaging_CIBitmapEncoder** result);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapEncoderVtbl;

    interface __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapEncoder
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapEncoderVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapEncoder_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapEncoder_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapEncoder_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapEncoder __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapEncoder;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapEncoder;

    typedef struct __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapEncoderVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapEncoder* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapEncoder* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapEncoder* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapEncoder* This,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapEncoder* asyncInfo,
        enum __x_ABI_CWindows_CFoundation_CAsyncStatus asyncStatus);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapEncoderVtbl;

    interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapEncoder
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapEncoderVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapEncoder_INTERFACE_DEFINED__
    
typedef interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapFrame __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapFrame;

#if !defined(____x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapFrame_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapFrame_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapFrame __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapFrame;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapFrame;

    typedef struct __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapFrameVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapFrame* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapFrame* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapFrame* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapFrame* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapFrame* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapFrame* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* put_Completed)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapFrame* This,
        __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapFrame* handler);
    HRESULT (STDMETHODCALLTYPE* get_Completed)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapFrame* This,
        __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapFrame** result);
    HRESULT (STDMETHODCALLTYPE* GetResults)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapFrame* This,
        __x_ABI_CWindows_CGraphics_CImaging_CIBitmapFrame** result);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapFrameVtbl;

    interface __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapFrame
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapFrameVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapFrame_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapFrame_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapFrame_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapFrame __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapFrame;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapFrame;

    typedef struct __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapFrameVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapFrame* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapFrame* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapFrame* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapFrame* This,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapFrame* asyncInfo,
        enum __x_ABI_CWindows_CFoundation_CAsyncStatus asyncStatus);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapFrameVtbl;

    interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapFrame
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapFrameVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapFrame_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CGraphics__CImaging__CBitmapTypedValue_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CGraphics__CImaging__CBitmapTypedValue_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CGraphics__CImaging__CBitmapTypedValue __x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CGraphics__CImaging__CBitmapTypedValue;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CGraphics__CImaging__CBitmapTypedValue;

    typedef struct __x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CGraphics__CImaging__CBitmapTypedValueVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CGraphics__CImaging__CBitmapTypedValue* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CGraphics__CImaging__CBitmapTypedValue* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CGraphics__CImaging__CBitmapTypedValue* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CGraphics__CImaging__CBitmapTypedValue* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CGraphics__CImaging__CBitmapTypedValue* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CGraphics__CImaging__CBitmapTypedValue* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Key)(__x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CGraphics__CImaging__CBitmapTypedValue* This,
        HSTRING* result);
    HRESULT (STDMETHODCALLTYPE* get_Value)(__x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CGraphics__CImaging__CBitmapTypedValue* This,
        __x_ABI_CWindows_CGraphics_CImaging_CIBitmapTypedValue** result);

        END_INTERFACE
    } __x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CGraphics__CImaging__CBitmapTypedValueVtbl;

    interface __x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CGraphics__CImaging__CBitmapTypedValue
    {
        CONST_VTBL struct __x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CGraphics__CImaging__CBitmapTypedValueVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CGraphics__CImaging__CBitmapTypedValue_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CGraphics__CImaging__CBitmapTypedValue_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CGraphics__CImaging__CBitmapTypedValue_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CGraphics__CImaging__CBitmapTypedValue __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CGraphics__CImaging__CBitmapTypedValue;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CGraphics__CImaging__CBitmapTypedValue;

    typedef struct __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CGraphics__CImaging__CBitmapTypedValueVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CGraphics__CImaging__CBitmapTypedValue* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CGraphics__CImaging__CBitmapTypedValue* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CGraphics__CImaging__CBitmapTypedValue* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CGraphics__CImaging__CBitmapTypedValue* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CGraphics__CImaging__CBitmapTypedValue* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CGraphics__CImaging__CBitmapTypedValue* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Current)(__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CGraphics__CImaging__CBitmapTypedValue* This,
        __x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CGraphics__CImaging__CBitmapTypedValue** result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CGraphics__CImaging__CBitmapTypedValue* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CGraphics__CImaging__CBitmapTypedValue* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CGraphics__CImaging__CBitmapTypedValue* This,
        UINT32 itemsLength,
        __x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CGraphics__CImaging__CBitmapTypedValue** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CGraphics__CImaging__CBitmapTypedValueVtbl;

    interface __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CGraphics__CImaging__CBitmapTypedValue
    {
        CONST_VTBL struct __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CGraphics__CImaging__CBitmapTypedValueVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CGraphics__CImaging__CBitmapTypedValue_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CGraphics__CImaging__CBitmapTypedValue_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CGraphics__CImaging__CBitmapTypedValue_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CGraphics__CImaging__CBitmapTypedValue __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CGraphics__CImaging__CBitmapTypedValue;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CGraphics__CImaging__CBitmapTypedValue;

    typedef struct __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CGraphics__CImaging__CBitmapTypedValueVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CGraphics__CImaging__CBitmapTypedValue* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CGraphics__CImaging__CBitmapTypedValue* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CGraphics__CImaging__CBitmapTypedValue* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CGraphics__CImaging__CBitmapTypedValue* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CGraphics__CImaging__CBitmapTypedValue* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CGraphics__CImaging__CBitmapTypedValue* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* First)(__x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CGraphics__CImaging__CBitmapTypedValue* This,
        __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CGraphics__CImaging__CBitmapTypedValue** result);

        END_INTERFACE
    } __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CGraphics__CImaging__CBitmapTypedValueVtbl;

    interface __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CGraphics__CImaging__CBitmapTypedValue
    {
        CONST_VTBL struct __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CGraphics__CImaging__CBitmapTypedValueVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CGraphics__CImaging__CBitmapTypedValue_INTERFACE_DEFINED__
    
typedef interface __x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CGraphics__CImaging__CBitmapTypedValue __x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CGraphics__CImaging__CBitmapTypedValue;

#if !defined(____x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CGraphics__CImaging__CBitmapTypedValue_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CGraphics__CImaging__CBitmapTypedValue_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CGraphics__CImaging__CBitmapTypedValue __x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CGraphics__CImaging__CBitmapTypedValue;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CGraphics__CImaging__CBitmapTypedValue;

    typedef struct __x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CGraphics__CImaging__CBitmapTypedValueVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CGraphics__CImaging__CBitmapTypedValue* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CGraphics__CImaging__CBitmapTypedValue* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CGraphics__CImaging__CBitmapTypedValue* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CGraphics__CImaging__CBitmapTypedValue* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CGraphics__CImaging__CBitmapTypedValue* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CGraphics__CImaging__CBitmapTypedValue* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* Lookup)(__x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CGraphics__CImaging__CBitmapTypedValue* This,
        HSTRING key,
        __x_ABI_CWindows_CGraphics_CImaging_CIBitmapTypedValue** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CGraphics__CImaging__CBitmapTypedValue* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* HasKey)(__x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CGraphics__CImaging__CBitmapTypedValue* This,
        HSTRING key,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* Split)(__x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CGraphics__CImaging__CBitmapTypedValue* This,
        __x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CGraphics__CImaging__CBitmapTypedValue** first,
        __x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CGraphics__CImaging__CBitmapTypedValue** second);

        END_INTERFACE
    } __x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CGraphics__CImaging__CBitmapTypedValueVtbl;

    interface __x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CGraphics__CImaging__CBitmapTypedValue
    {
        CONST_VTBL struct __x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CGraphics__CImaging__CBitmapTypedValueVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CGraphics__CImaging__CBitmapTypedValue_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIMap_2_HSTRING___x_ABI_CWindows__CGraphics__CImaging__CBitmapTypedValue_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIMap_2_HSTRING___x_ABI_CWindows__CGraphics__CImaging__CBitmapTypedValue_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIMap_2_HSTRING___x_ABI_CWindows__CGraphics__CImaging__CBitmapTypedValue __x_ABI_C__FIMap_2_HSTRING___x_ABI_CWindows__CGraphics__CImaging__CBitmapTypedValue;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIMap_2_HSTRING___x_ABI_CWindows__CGraphics__CImaging__CBitmapTypedValue;

    typedef struct __x_ABI_C__FIMap_2_HSTRING___x_ABI_CWindows__CGraphics__CImaging__CBitmapTypedValueVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIMap_2_HSTRING___x_ABI_CWindows__CGraphics__CImaging__CBitmapTypedValue* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIMap_2_HSTRING___x_ABI_CWindows__CGraphics__CImaging__CBitmapTypedValue* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIMap_2_HSTRING___x_ABI_CWindows__CGraphics__CImaging__CBitmapTypedValue* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIMap_2_HSTRING___x_ABI_CWindows__CGraphics__CImaging__CBitmapTypedValue* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIMap_2_HSTRING___x_ABI_CWindows__CGraphics__CImaging__CBitmapTypedValue* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIMap_2_HSTRING___x_ABI_CWindows__CGraphics__CImaging__CBitmapTypedValue* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* Lookup)(__x_ABI_C__FIMap_2_HSTRING___x_ABI_CWindows__CGraphics__CImaging__CBitmapTypedValue* This,
        HSTRING key,
        __x_ABI_CWindows_CGraphics_CImaging_CIBitmapTypedValue** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIMap_2_HSTRING___x_ABI_CWindows__CGraphics__CImaging__CBitmapTypedValue* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* HasKey)(__x_ABI_C__FIMap_2_HSTRING___x_ABI_CWindows__CGraphics__CImaging__CBitmapTypedValue* This,
        HSTRING key,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetView)(__x_ABI_C__FIMap_2_HSTRING___x_ABI_CWindows__CGraphics__CImaging__CBitmapTypedValue* This,
        __x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CGraphics__CImaging__CBitmapTypedValue** result);
    HRESULT (STDMETHODCALLTYPE* Insert)(__x_ABI_C__FIMap_2_HSTRING___x_ABI_CWindows__CGraphics__CImaging__CBitmapTypedValue* This,
        HSTRING key,
        __x_ABI_CWindows_CGraphics_CImaging_CIBitmapTypedValue* value,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* Remove)(__x_ABI_C__FIMap_2_HSTRING___x_ABI_CWindows__CGraphics__CImaging__CBitmapTypedValue* This,
        HSTRING key);
    HRESULT (STDMETHODCALLTYPE* Clear)(__x_ABI_C__FIMap_2_HSTRING___x_ABI_CWindows__CGraphics__CImaging__CBitmapTypedValue* This);

        END_INTERFACE
    } __x_ABI_C__FIMap_2_HSTRING___x_ABI_CWindows__CGraphics__CImaging__CBitmapTypedValueVtbl;

    interface __x_ABI_C__FIMap_2_HSTRING___x_ABI_CWindows__CGraphics__CImaging__CBitmapTypedValue
    {
        CONST_VTBL struct __x_ABI_C__FIMap_2_HSTRING___x_ABI_CWindows__CGraphics__CImaging__CBitmapTypedValueVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIMap_2_HSTRING___x_ABI_CWindows__CGraphics__CImaging__CBitmapTypedValue_INTERFACE_DEFINED__
    
typedef interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapPropertySet __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapPropertySet;

#if !defined(____x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapPropertySet_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapPropertySet_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapPropertySet __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapPropertySet;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapPropertySet;

    typedef struct __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapPropertySetVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapPropertySet* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapPropertySet* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapPropertySet* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapPropertySet* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapPropertySet* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapPropertySet* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* put_Completed)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapPropertySet* This,
        __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapPropertySet* handler);
    HRESULT (STDMETHODCALLTYPE* get_Completed)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapPropertySet* This,
        __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapPropertySet** result);
    HRESULT (STDMETHODCALLTYPE* GetResults)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapPropertySet* This,
        __x_ABI_C__FIMap_2_HSTRING___x_ABI_CWindows__CGraphics__CImaging__CBitmapTypedValue** result);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapPropertySetVtbl;

    interface __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapPropertySet
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapPropertySetVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapPropertySet_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapPropertySet_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapPropertySet_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapPropertySet __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapPropertySet;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapPropertySet;

    typedef struct __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapPropertySetVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapPropertySet* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapPropertySet* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapPropertySet* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapPropertySet* This,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapPropertySet* asyncInfo,
        enum __x_ABI_CWindows_CFoundation_CAsyncStatus asyncStatus);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapPropertySetVtbl;

    interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapPropertySet
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapPropertySetVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapPropertySet_INTERFACE_DEFINED__
    
#ifndef ____x_ABI_CWindows_CStorage_CStreams_CIRandomAccessStreamWithContentType_FWD_DEFINED__
#define ____x_ABI_CWindows_CStorage_CStreams_CIRandomAccessStreamWithContentType_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CStorage_CStreams_CIRandomAccessStreamWithContentType __x_ABI_CWindows_CStorage_CStreams_CIRandomAccessStreamWithContentType;

#endif // ____x_ABI_CWindows_CStorage_CStreams_CIRandomAccessStreamWithContentType_FWD_DEFINED__

typedef interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CGraphics__CImaging__CImageStream __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CGraphics__CImaging__CImageStream;

#if !defined(____x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CImageStream_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CImageStream_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CImageStream __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CImageStream;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CImageStream;

    typedef struct __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CImageStreamVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CImageStream* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CImageStream* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CImageStream* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CImageStream* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CImageStream* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CImageStream* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* put_Completed)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CImageStream* This,
        __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CGraphics__CImaging__CImageStream* handler);
    HRESULT (STDMETHODCALLTYPE* get_Completed)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CImageStream* This,
        __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CGraphics__CImaging__CImageStream** result);
    HRESULT (STDMETHODCALLTYPE* GetResults)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CImageStream* This,
        __x_ABI_CWindows_CStorage_CStreams_CIRandomAccessStreamWithContentType** result);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CImageStreamVtbl;

    interface __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CImageStream
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CImageStreamVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CImageStream_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CGraphics__CImaging__CImageStream_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CGraphics__CImaging__CImageStream_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CGraphics__CImaging__CImageStream __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CGraphics__CImaging__CImageStream;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CGraphics__CImaging__CImageStream;

    typedef struct __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CGraphics__CImaging__CImageStreamVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CGraphics__CImaging__CImageStream* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CGraphics__CImaging__CImageStream* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CGraphics__CImaging__CImageStream* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CGraphics__CImaging__CImageStream* This,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CImageStream* asyncInfo,
        enum __x_ABI_CWindows_CFoundation_CAsyncStatus asyncStatus);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CGraphics__CImaging__CImageStreamVtbl;

    interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CGraphics__CImaging__CImageStream
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CGraphics__CImaging__CImageStreamVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CGraphics__CImaging__CImageStream_INTERFACE_DEFINED__
    
typedef interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CGraphics__CImaging__CPixelDataProvider __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CGraphics__CImaging__CPixelDataProvider;

#if !defined(____x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CPixelDataProvider_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CPixelDataProvider_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CPixelDataProvider __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CPixelDataProvider;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CPixelDataProvider;

    typedef struct __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CPixelDataProviderVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CPixelDataProvider* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CPixelDataProvider* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CPixelDataProvider* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CPixelDataProvider* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CPixelDataProvider* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CPixelDataProvider* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* put_Completed)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CPixelDataProvider* This,
        __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CGraphics__CImaging__CPixelDataProvider* handler);
    HRESULT (STDMETHODCALLTYPE* get_Completed)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CPixelDataProvider* This,
        __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CGraphics__CImaging__CPixelDataProvider** result);
    HRESULT (STDMETHODCALLTYPE* GetResults)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CPixelDataProvider* This,
        __x_ABI_CWindows_CGraphics_CImaging_CIPixelDataProvider** result);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CPixelDataProviderVtbl;

    interface __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CPixelDataProvider
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CPixelDataProviderVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CPixelDataProvider_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CGraphics__CImaging__CPixelDataProvider_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CGraphics__CImaging__CPixelDataProvider_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CGraphics__CImaging__CPixelDataProvider __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CGraphics__CImaging__CPixelDataProvider;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CGraphics__CImaging__CPixelDataProvider;

    typedef struct __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CGraphics__CImaging__CPixelDataProviderVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CGraphics__CImaging__CPixelDataProvider* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CGraphics__CImaging__CPixelDataProvider* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CGraphics__CImaging__CPixelDataProvider* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CGraphics__CImaging__CPixelDataProvider* This,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CPixelDataProvider* asyncInfo,
        enum __x_ABI_CWindows_CFoundation_CAsyncStatus asyncStatus);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CGraphics__CImaging__CPixelDataProviderVtbl;

    interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CGraphics__CImaging__CPixelDataProvider
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CGraphics__CImaging__CPixelDataProviderVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CGraphics__CImaging__CPixelDataProvider_INTERFACE_DEFINED__
    
typedef interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CGraphics__CImaging__CSoftwareBitmap __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CGraphics__CImaging__CSoftwareBitmap;

#if !defined(____x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CSoftwareBitmap_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CSoftwareBitmap_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CSoftwareBitmap __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CSoftwareBitmap;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CSoftwareBitmap;

    typedef struct __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CSoftwareBitmapVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CSoftwareBitmap* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CSoftwareBitmap* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CSoftwareBitmap* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CSoftwareBitmap* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CSoftwareBitmap* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CSoftwareBitmap* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* put_Completed)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CSoftwareBitmap* This,
        __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CGraphics__CImaging__CSoftwareBitmap* handler);
    HRESULT (STDMETHODCALLTYPE* get_Completed)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CSoftwareBitmap* This,
        __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CGraphics__CImaging__CSoftwareBitmap** result);
    HRESULT (STDMETHODCALLTYPE* GetResults)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CSoftwareBitmap* This,
        __x_ABI_CWindows_CGraphics_CImaging_CISoftwareBitmap** result);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CSoftwareBitmapVtbl;

    interface __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CSoftwareBitmap
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CSoftwareBitmapVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CSoftwareBitmap_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CGraphics__CImaging__CSoftwareBitmap_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CGraphics__CImaging__CSoftwareBitmap_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CGraphics__CImaging__CSoftwareBitmap __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CGraphics__CImaging__CSoftwareBitmap;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CGraphics__CImaging__CSoftwareBitmap;

    typedef struct __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CGraphics__CImaging__CSoftwareBitmapVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CGraphics__CImaging__CSoftwareBitmap* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CGraphics__CImaging__CSoftwareBitmap* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CGraphics__CImaging__CSoftwareBitmap* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CGraphics__CImaging__CSoftwareBitmap* This,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CSoftwareBitmap* asyncInfo,
        enum __x_ABI_CWindows_CFoundation_CAsyncStatus asyncStatus);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CGraphics__CImaging__CSoftwareBitmapVtbl;

    interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CGraphics__CImaging__CSoftwareBitmap
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CGraphics__CImaging__CSoftwareBitmapVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CGraphics__CImaging__CSoftwareBitmap_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterator_1_HSTRING_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterator_1_HSTRING_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterator_1_HSTRING __x_ABI_C__FIIterator_1_HSTRING;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterator_1_HSTRING;

    typedef struct __x_ABI_C__FIIterator_1_HSTRINGVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterator_1_HSTRING* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterator_1_HSTRING* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterator_1_HSTRING* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterator_1_HSTRING* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterator_1_HSTRING* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterator_1_HSTRING* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Current)(__x_ABI_C__FIIterator_1_HSTRING* This,
        HSTRING* result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__x_ABI_C__FIIterator_1_HSTRING* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__x_ABI_C__FIIterator_1_HSTRING* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIIterator_1_HSTRING* This,
        UINT32 itemsLength,
        HSTRING* items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIIterator_1_HSTRINGVtbl;

    interface __x_ABI_C__FIIterator_1_HSTRING
    {
        CONST_VTBL struct __x_ABI_C__FIIterator_1_HSTRINGVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterator_1_HSTRING_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterable_1_HSTRING_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterable_1_HSTRING_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterable_1_HSTRING __x_ABI_C__FIIterable_1_HSTRING;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterable_1_HSTRING;

    typedef struct __x_ABI_C__FIIterable_1_HSTRINGVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterable_1_HSTRING* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterable_1_HSTRING* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterable_1_HSTRING* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterable_1_HSTRING* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterable_1_HSTRING* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterable_1_HSTRING* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* First)(__x_ABI_C__FIIterable_1_HSTRING* This,
        __x_ABI_C__FIIterator_1_HSTRING** result);

        END_INTERFACE
    } __x_ABI_C__FIIterable_1_HSTRINGVtbl;

    interface __x_ABI_C__FIIterable_1_HSTRING
    {
        CONST_VTBL struct __x_ABI_C__FIIterable_1_HSTRINGVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterable_1_HSTRING_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterator_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapCodecInformation_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapCodecInformation_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapCodecInformation __x_ABI_C__FIIterator_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapCodecInformation;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterator_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapCodecInformation;

    typedef struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapCodecInformationVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapCodecInformation* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapCodecInformation* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapCodecInformation* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapCodecInformation* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapCodecInformation* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapCodecInformation* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Current)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapCodecInformation* This,
        __x_ABI_CWindows_CGraphics_CImaging_CIBitmapCodecInformation** result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapCodecInformation* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapCodecInformation* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapCodecInformation* This,
        UINT32 itemsLength,
        __x_ABI_CWindows_CGraphics_CImaging_CIBitmapCodecInformation** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIIterator_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapCodecInformationVtbl;

    interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapCodecInformation
    {
        CONST_VTBL struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapCodecInformationVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapCodecInformation_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterable_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapCodecInformation_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapCodecInformation_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapCodecInformation __x_ABI_C__FIIterable_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapCodecInformation;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterable_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapCodecInformation;

    typedef struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapCodecInformationVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapCodecInformation* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapCodecInformation* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapCodecInformation* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapCodecInformation* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapCodecInformation* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapCodecInformation* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* First)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapCodecInformation* This,
        __x_ABI_C__FIIterator_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapCodecInformation** result);

        END_INTERFACE
    } __x_ABI_C__FIIterable_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapCodecInformationVtbl;

    interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapCodecInformation
    {
        CONST_VTBL struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapCodecInformationVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapCodecInformation_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVectorView_1_HSTRING_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVectorView_1_HSTRING_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVectorView_1_HSTRING __x_ABI_C__FIVectorView_1_HSTRING;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVectorView_1_HSTRING;

    typedef struct __x_ABI_C__FIVectorView_1_HSTRINGVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVectorView_1_HSTRING* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVectorView_1_HSTRING* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVectorView_1_HSTRING* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVectorView_1_HSTRING* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVectorView_1_HSTRING* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVectorView_1_HSTRING* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVectorView_1_HSTRING* This,
        UINT32 index,
        HSTRING* result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVectorView_1_HSTRING* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVectorView_1_HSTRING* This,
        HSTRING value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVectorView_1_HSTRING* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        HSTRING* items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIVectorView_1_HSTRINGVtbl;

    interface __x_ABI_C__FIVectorView_1_HSTRING
    {
        CONST_VTBL struct __x_ABI_C__FIVectorView_1_HSTRINGVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVectorView_1_HSTRING_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapCodecInformation_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapCodecInformation_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapCodecInformation __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapCodecInformation;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapCodecInformation;

    typedef struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapCodecInformationVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapCodecInformation* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapCodecInformation* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapCodecInformation* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapCodecInformation* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapCodecInformation* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapCodecInformation* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapCodecInformation* This,
        UINT32 index,
        __x_ABI_CWindows_CGraphics_CImaging_CIBitmapCodecInformation** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapCodecInformation* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapCodecInformation* This,
        __x_ABI_CWindows_CGraphics_CImaging_CIBitmapCodecInformation* value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapCodecInformation* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        __x_ABI_CWindows_CGraphics_CImaging_CIBitmapCodecInformation** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapCodecInformationVtbl;

    interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapCodecInformation
    {
        CONST_VTBL struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapCodecInformationVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapCodecInformation_INTERFACE_DEFINED__
    
typedef enum __x_ABI_CWindows_CFoundation_CAsyncStatus __x_ABI_CWindows_CFoundation_CAsyncStatus;

#ifndef ____x_ABI_CWindows_CFoundation_CIAsyncAction_FWD_DEFINED__
#define ____x_ABI_CWindows_CFoundation_CIAsyncAction_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CFoundation_CIAsyncAction __x_ABI_CWindows_CFoundation_CIAsyncAction;

#endif // ____x_ABI_CWindows_CFoundation_CIAsyncAction_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CFoundation_CIAsyncInfo_FWD_DEFINED__
#define ____x_ABI_CWindows_CFoundation_CIAsyncInfo_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CFoundation_CIAsyncInfo __x_ABI_CWindows_CFoundation_CIAsyncInfo;

#endif // ____x_ABI_CWindows_CFoundation_CIAsyncInfo_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CFoundation_CIClosable_FWD_DEFINED__
#define ____x_ABI_CWindows_CFoundation_CIClosable_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CFoundation_CIClosable __x_ABI_CWindows_CFoundation_CIClosable;

#endif // ____x_ABI_CWindows_CFoundation_CIClosable_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CFoundation_CIMemoryBuffer_FWD_DEFINED__
#define ____x_ABI_CWindows_CFoundation_CIMemoryBuffer_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CFoundation_CIMemoryBuffer __x_ABI_CWindows_CFoundation_CIMemoryBuffer;

#endif // ____x_ABI_CWindows_CFoundation_CIMemoryBuffer_FWD_DEFINED__

typedef enum __x_ABI_CWindows_CFoundation_CPropertyType __x_ABI_CWindows_CFoundation_CPropertyType;

#ifndef ____x_ABI_CWindows_CGraphics_CDirectX_CDirect3D11_CIDirect3DSurface_FWD_DEFINED__
#define ____x_ABI_CWindows_CGraphics_CDirectX_CDirect3D11_CIDirect3DSurface_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CGraphics_CDirectX_CDirect3D11_CIDirect3DSurface __x_ABI_CWindows_CGraphics_CDirectX_CDirect3D11_CIDirect3DSurface;

#endif // ____x_ABI_CWindows_CGraphics_CDirectX_CDirect3D11_CIDirect3DSurface_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CStorage_CStreams_CIBuffer_FWD_DEFINED__
#define ____x_ABI_CWindows_CStorage_CStreams_CIBuffer_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CStorage_CStreams_CIBuffer __x_ABI_CWindows_CStorage_CStreams_CIBuffer;

#endif // ____x_ABI_CWindows_CStorage_CStreams_CIBuffer_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CStorage_CStreams_CIContentTypeProvider_FWD_DEFINED__
#define ____x_ABI_CWindows_CStorage_CStreams_CIContentTypeProvider_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CStorage_CStreams_CIContentTypeProvider __x_ABI_CWindows_CStorage_CStreams_CIContentTypeProvider;

#endif // ____x_ABI_CWindows_CStorage_CStreams_CIContentTypeProvider_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CStorage_CStreams_CIInputStream_FWD_DEFINED__
#define ____x_ABI_CWindows_CStorage_CStreams_CIInputStream_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CStorage_CStreams_CIInputStream __x_ABI_CWindows_CStorage_CStreams_CIInputStream;

#endif // ____x_ABI_CWindows_CStorage_CStreams_CIInputStream_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CStorage_CStreams_CIOutputStream_FWD_DEFINED__
#define ____x_ABI_CWindows_CStorage_CStreams_CIOutputStream_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CStorage_CStreams_CIOutputStream __x_ABI_CWindows_CStorage_CStreams_CIOutputStream;

#endif // ____x_ABI_CWindows_CStorage_CStreams_CIOutputStream_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CStorage_CStreams_CIRandomAccessStream_FWD_DEFINED__
#define ____x_ABI_CWindows_CStorage_CStreams_CIRandomAccessStream_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CStorage_CStreams_CIRandomAccessStream __x_ABI_CWindows_CStorage_CStreams_CIRandomAccessStream;

#endif // ____x_ABI_CWindows_CStorage_CStreams_CIRandomAccessStream_FWD_DEFINED__

typedef enum __x_ABI_CWindows_CGraphics_CImaging_CBitmapAlphaMode __x_ABI_CWindows_CGraphics_CImaging_CBitmapAlphaMode;

typedef enum __x_ABI_CWindows_CGraphics_CImaging_CBitmapBufferAccessMode __x_ABI_CWindows_CGraphics_CImaging_CBitmapBufferAccessMode;

typedef enum __x_ABI_CWindows_CGraphics_CImaging_CBitmapFlip __x_ABI_CWindows_CGraphics_CImaging_CBitmapFlip;

typedef enum __x_ABI_CWindows_CGraphics_CImaging_CBitmapInterpolationMode __x_ABI_CWindows_CGraphics_CImaging_CBitmapInterpolationMode;

typedef enum __x_ABI_CWindows_CGraphics_CImaging_CBitmapPixelFormat __x_ABI_CWindows_CGraphics_CImaging_CBitmapPixelFormat;

typedef enum __x_ABI_CWindows_CGraphics_CImaging_CBitmapRotation __x_ABI_CWindows_CGraphics_CImaging_CBitmapRotation;

typedef enum __x_ABI_CWindows_CGraphics_CImaging_CColorManagementMode __x_ABI_CWindows_CGraphics_CImaging_CColorManagementMode;

typedef enum __x_ABI_CWindows_CGraphics_CImaging_CExifOrientationMode __x_ABI_CWindows_CGraphics_CImaging_CExifOrientationMode;

typedef struct __x_ABI_CWindows_CGraphics_CImaging_CBitmapBounds __x_ABI_CWindows_CGraphics_CImaging_CBitmapBounds;

typedef struct __x_ABI_CWindows_CGraphics_CImaging_CBitmapPlaneDescription __x_ABI_CWindows_CGraphics_CImaging_CBitmapPlaneDescription;

enum __x_ABI_CWindows_CGraphics_CImaging_CBitmapAlphaMode
    {
        __x_ABI_CWindows_CGraphics_CImaging_CBitmapAlphaMode_Premultiplied = 0,
    __x_ABI_CWindows_CGraphics_CImaging_CBitmapAlphaMode_Straight = 1,
    __x_ABI_CWindows_CGraphics_CImaging_CBitmapAlphaMode_Ignore = 2,
};

enum __x_ABI_CWindows_CGraphics_CImaging_CBitmapBufferAccessMode
    {
        __x_ABI_CWindows_CGraphics_CImaging_CBitmapBufferAccessMode_Read = 0,
    __x_ABI_CWindows_CGraphics_CImaging_CBitmapBufferAccessMode_ReadWrite = 1,
    __x_ABI_CWindows_CGraphics_CImaging_CBitmapBufferAccessMode_Write = 2,
};

enum __x_ABI_CWindows_CGraphics_CImaging_CBitmapFlip
    {
        __x_ABI_CWindows_CGraphics_CImaging_CBitmapFlip_None = 0,
    __x_ABI_CWindows_CGraphics_CImaging_CBitmapFlip_Horizontal = 1,
    __x_ABI_CWindows_CGraphics_CImaging_CBitmapFlip_Vertical = 2,
};

enum __x_ABI_CWindows_CGraphics_CImaging_CBitmapInterpolationMode
    {
        __x_ABI_CWindows_CGraphics_CImaging_CBitmapInterpolationMode_NearestNeighbor = 0,
    __x_ABI_CWindows_CGraphics_CImaging_CBitmapInterpolationMode_Linear = 1,
    __x_ABI_CWindows_CGraphics_CImaging_CBitmapInterpolationMode_Cubic = 2,
    __x_ABI_CWindows_CGraphics_CImaging_CBitmapInterpolationMode_Fant = 3,
};

enum __x_ABI_CWindows_CGraphics_CImaging_CBitmapPixelFormat
    {
        __x_ABI_CWindows_CGraphics_CImaging_CBitmapPixelFormat_Unknown = 0,
    __x_ABI_CWindows_CGraphics_CImaging_CBitmapPixelFormat_Rgba16 = 12,
    __x_ABI_CWindows_CGraphics_CImaging_CBitmapPixelFormat_Rgba8 = 30,
    __x_ABI_CWindows_CGraphics_CImaging_CBitmapPixelFormat_Gray16 = 57,
    __x_ABI_CWindows_CGraphics_CImaging_CBitmapPixelFormat_Gray8 = 62,
    __x_ABI_CWindows_CGraphics_CImaging_CBitmapPixelFormat_Bgra8 = 87,
    __x_ABI_CWindows_CGraphics_CImaging_CBitmapPixelFormat_Nv12 = 103,
    __x_ABI_CWindows_CGraphics_CImaging_CBitmapPixelFormat_P010 = 104,
    __x_ABI_CWindows_CGraphics_CImaging_CBitmapPixelFormat_Yuy2 = 107,
};

enum __x_ABI_CWindows_CGraphics_CImaging_CBitmapRotation
    {
        __x_ABI_CWindows_CGraphics_CImaging_CBitmapRotation_None = 0,
    __x_ABI_CWindows_CGraphics_CImaging_CBitmapRotation_Clockwise90Degrees = 1,
    __x_ABI_CWindows_CGraphics_CImaging_CBitmapRotation_Clockwise180Degrees = 2,
    __x_ABI_CWindows_CGraphics_CImaging_CBitmapRotation_Clockwise270Degrees = 3,
};

enum __x_ABI_CWindows_CGraphics_CImaging_CColorManagementMode
    {
        __x_ABI_CWindows_CGraphics_CImaging_CColorManagementMode_DoNotColorManage = 0,
    __x_ABI_CWindows_CGraphics_CImaging_CColorManagementMode_ColorManageToSRgb = 1,
};

enum __x_ABI_CWindows_CGraphics_CImaging_CExifOrientationMode
    {
        __x_ABI_CWindows_CGraphics_CImaging_CExifOrientationMode_IgnoreExifOrientation = 0,
    __x_ABI_CWindows_CGraphics_CImaging_CExifOrientationMode_RespectExifOrientation = 1,
};

enum __x_ABI_CWindows_CGraphics_CImaging_CJpegSubsamplingMode
    {
        __x_ABI_CWindows_CGraphics_CImaging_CJpegSubsamplingMode_Default = 0,
    __x_ABI_CWindows_CGraphics_CImaging_CJpegSubsamplingMode_Y4Cb2Cr0 = 1,
    __x_ABI_CWindows_CGraphics_CImaging_CJpegSubsamplingMode_Y4Cb2Cr2 = 2,
    __x_ABI_CWindows_CGraphics_CImaging_CJpegSubsamplingMode_Y4Cb4Cr4 = 3,
};

enum __x_ABI_CWindows_CGraphics_CImaging_CPngFilterMode
    {
        __x_ABI_CWindows_CGraphics_CImaging_CPngFilterMode_Automatic = 0,
    __x_ABI_CWindows_CGraphics_CImaging_CPngFilterMode_None = 1,
    __x_ABI_CWindows_CGraphics_CImaging_CPngFilterMode_Sub = 2,
    __x_ABI_CWindows_CGraphics_CImaging_CPngFilterMode_Up = 3,
    __x_ABI_CWindows_CGraphics_CImaging_CPngFilterMode_Average = 4,
    __x_ABI_CWindows_CGraphics_CImaging_CPngFilterMode_Paeth = 5,
    __x_ABI_CWindows_CGraphics_CImaging_CPngFilterMode_Adaptive = 6,
};

enum __x_ABI_CWindows_CGraphics_CImaging_CTiffCompressionMode
    {
        __x_ABI_CWindows_CGraphics_CImaging_CTiffCompressionMode_Automatic = 0,
    __x_ABI_CWindows_CGraphics_CImaging_CTiffCompressionMode_None = 1,
    __x_ABI_CWindows_CGraphics_CImaging_CTiffCompressionMode_Ccitt3 = 2,
    __x_ABI_CWindows_CGraphics_CImaging_CTiffCompressionMode_Ccitt4 = 3,
    __x_ABI_CWindows_CGraphics_CImaging_CTiffCompressionMode_Lzw = 4,
    __x_ABI_CWindows_CGraphics_CImaging_CTiffCompressionMode_Rle = 5,
    __x_ABI_CWindows_CGraphics_CImaging_CTiffCompressionMode_Zip = 6,
    __x_ABI_CWindows_CGraphics_CImaging_CTiffCompressionMode_LzwhDifferencing = 7,
};

struct __x_ABI_CWindows_CGraphics_CImaging_CBitmapBounds
    {
        UINT32 X;
    UINT32 Y;
    UINT32 Width;
    UINT32 Height;
};

struct __x_ABI_CWindows_CGraphics_CImaging_CBitmapPlaneDescription
    {
        INT32 StartIndex;
    INT32 Width;
    INT32 Height;
    INT32 Stride;
};

struct __x_ABI_CWindows_CGraphics_CImaging_CBitmapSize
    {
        UINT32 Width;
    UINT32 Height;
};

#if !defined(____x_ABI_CWindows_CGraphics_CImaging_CIBitmapBuffer_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CGraphics_CImaging_CIBitmapBuffer_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CGraphics_CImaging_CIBitmapBufferVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CGraphics_CImaging_CIBitmapBuffer* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CGraphics_CImaging_CIBitmapBuffer* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CGraphics_CImaging_CIBitmapBuffer* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CGraphics_CImaging_CIBitmapBuffer* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CGraphics_CImaging_CIBitmapBuffer* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CGraphics_CImaging_CIBitmapBuffer* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetPlaneCount)(__x_ABI_CWindows_CGraphics_CImaging_CIBitmapBuffer* This,
        INT32* value);
    HRESULT (STDMETHODCALLTYPE* GetPlaneDescription)(__x_ABI_CWindows_CGraphics_CImaging_CIBitmapBuffer* This,
        INT32 index,
        struct __x_ABI_CWindows_CGraphics_CImaging_CBitmapPlaneDescription* value);

        END_INTERFACE
    } __x_ABI_CWindows_CGraphics_CImaging_CIBitmapBufferVtbl;

    interface __x_ABI_CWindows_CGraphics_CImaging_CIBitmapBuffer
    {
        CONST_VTBL struct __x_ABI_CWindows_CGraphics_CImaging_CIBitmapBufferVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CGraphics_CImaging_CIBitmapBuffer;
#endif /* !defined(____x_ABI_CWindows_CGraphics_CImaging_CIBitmapBuffer_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CGraphics_CImaging_CIBitmapCodecInformation_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CGraphics_CImaging_CIBitmapCodecInformation_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CGraphics_CImaging_CIBitmapCodecInformationVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CGraphics_CImaging_CIBitmapCodecInformation* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CGraphics_CImaging_CIBitmapCodecInformation* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CGraphics_CImaging_CIBitmapCodecInformation* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CGraphics_CImaging_CIBitmapCodecInformation* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CGraphics_CImaging_CIBitmapCodecInformation* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CGraphics_CImaging_CIBitmapCodecInformation* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_CodecId)(__x_ABI_CWindows_CGraphics_CImaging_CIBitmapCodecInformation* This,
        GUID* value);
    HRESULT (STDMETHODCALLTYPE* get_FileExtensions)(__x_ABI_CWindows_CGraphics_CImaging_CIBitmapCodecInformation* This,
        __x_ABI_C__FIVectorView_1_HSTRING** value);
    HRESULT (STDMETHODCALLTYPE* get_FriendlyName)(__x_ABI_CWindows_CGraphics_CImaging_CIBitmapCodecInformation* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_MimeTypes)(__x_ABI_CWindows_CGraphics_CImaging_CIBitmapCodecInformation* This,
        __x_ABI_C__FIVectorView_1_HSTRING** value);

        END_INTERFACE
    } __x_ABI_CWindows_CGraphics_CImaging_CIBitmapCodecInformationVtbl;

    interface __x_ABI_CWindows_CGraphics_CImaging_CIBitmapCodecInformation
    {
        CONST_VTBL struct __x_ABI_CWindows_CGraphics_CImaging_CIBitmapCodecInformationVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CGraphics_CImaging_CIBitmapCodecInformation;
#endif /* !defined(____x_ABI_CWindows_CGraphics_CImaging_CIBitmapCodecInformation_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CGraphics_CImaging_CIBitmapDecoder_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CGraphics_CImaging_CIBitmapDecoder_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CGraphics_CImaging_CIBitmapDecoderVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CGraphics_CImaging_CIBitmapDecoder* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CGraphics_CImaging_CIBitmapDecoder* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CGraphics_CImaging_CIBitmapDecoder* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CGraphics_CImaging_CIBitmapDecoder* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CGraphics_CImaging_CIBitmapDecoder* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CGraphics_CImaging_CIBitmapDecoder* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_BitmapContainerProperties)(__x_ABI_CWindows_CGraphics_CImaging_CIBitmapDecoder* This,
        __x_ABI_CWindows_CGraphics_CImaging_CIBitmapPropertiesView** value);
    HRESULT (STDMETHODCALLTYPE* get_DecoderInformation)(__x_ABI_CWindows_CGraphics_CImaging_CIBitmapDecoder* This,
        __x_ABI_CWindows_CGraphics_CImaging_CIBitmapCodecInformation** value);
    HRESULT (STDMETHODCALLTYPE* get_FrameCount)(__x_ABI_CWindows_CGraphics_CImaging_CIBitmapDecoder* This,
        UINT32* value);
    HRESULT (STDMETHODCALLTYPE* GetPreviewAsync)(__x_ABI_CWindows_CGraphics_CImaging_CIBitmapDecoder* This,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CImageStream** asyncInfo);
    HRESULT (STDMETHODCALLTYPE* GetFrameAsync)(__x_ABI_CWindows_CGraphics_CImaging_CIBitmapDecoder* This,
        UINT32 frameIndex,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapFrame** asyncInfo);

        END_INTERFACE
    } __x_ABI_CWindows_CGraphics_CImaging_CIBitmapDecoderVtbl;

    interface __x_ABI_CWindows_CGraphics_CImaging_CIBitmapDecoder
    {
        CONST_VTBL struct __x_ABI_CWindows_CGraphics_CImaging_CIBitmapDecoderVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CGraphics_CImaging_CIBitmapDecoder;
#endif /* !defined(____x_ABI_CWindows_CGraphics_CImaging_CIBitmapDecoder_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CGraphics_CImaging_CIBitmapDecoderStatics_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CGraphics_CImaging_CIBitmapDecoderStatics_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CGraphics_CImaging_CIBitmapDecoderStaticsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CGraphics_CImaging_CIBitmapDecoderStatics* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CGraphics_CImaging_CIBitmapDecoderStatics* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CGraphics_CImaging_CIBitmapDecoderStatics* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CGraphics_CImaging_CIBitmapDecoderStatics* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CGraphics_CImaging_CIBitmapDecoderStatics* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CGraphics_CImaging_CIBitmapDecoderStatics* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_BmpDecoderId)(__x_ABI_CWindows_CGraphics_CImaging_CIBitmapDecoderStatics* This,
        GUID* value);
    HRESULT (STDMETHODCALLTYPE* get_JpegDecoderId)(__x_ABI_CWindows_CGraphics_CImaging_CIBitmapDecoderStatics* This,
        GUID* value);
    HRESULT (STDMETHODCALLTYPE* get_PngDecoderId)(__x_ABI_CWindows_CGraphics_CImaging_CIBitmapDecoderStatics* This,
        GUID* value);
    HRESULT (STDMETHODCALLTYPE* get_TiffDecoderId)(__x_ABI_CWindows_CGraphics_CImaging_CIBitmapDecoderStatics* This,
        GUID* value);
    HRESULT (STDMETHODCALLTYPE* get_GifDecoderId)(__x_ABI_CWindows_CGraphics_CImaging_CIBitmapDecoderStatics* This,
        GUID* value);
    HRESULT (STDMETHODCALLTYPE* get_JpegXRDecoderId)(__x_ABI_CWindows_CGraphics_CImaging_CIBitmapDecoderStatics* This,
        GUID* value);
    HRESULT (STDMETHODCALLTYPE* get_IcoDecoderId)(__x_ABI_CWindows_CGraphics_CImaging_CIBitmapDecoderStatics* This,
        GUID* value);
    HRESULT (STDMETHODCALLTYPE* GetDecoderInformationEnumerator)(__x_ABI_CWindows_CGraphics_CImaging_CIBitmapDecoderStatics* This,
        __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapCodecInformation** decoderInformationEnumerator);
    HRESULT (STDMETHODCALLTYPE* CreateAsync)(__x_ABI_CWindows_CGraphics_CImaging_CIBitmapDecoderStatics* This,
        __x_ABI_CWindows_CStorage_CStreams_CIRandomAccessStream* stream,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapDecoder** asyncInfo);
    HRESULT (STDMETHODCALLTYPE* CreateWithIdAsync)(__x_ABI_CWindows_CGraphics_CImaging_CIBitmapDecoderStatics* This,
        GUID decoderId,
        __x_ABI_CWindows_CStorage_CStreams_CIRandomAccessStream* stream,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapDecoder** asyncInfo);

        END_INTERFACE
    } __x_ABI_CWindows_CGraphics_CImaging_CIBitmapDecoderStaticsVtbl;

    interface __x_ABI_CWindows_CGraphics_CImaging_CIBitmapDecoderStatics
    {
        CONST_VTBL struct __x_ABI_CWindows_CGraphics_CImaging_CIBitmapDecoderStaticsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CGraphics_CImaging_CIBitmapDecoderStatics;
#endif /* !defined(____x_ABI_CWindows_CGraphics_CImaging_CIBitmapDecoderStatics_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CGraphics_CImaging_CIBitmapDecoderStatics2_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CGraphics_CImaging_CIBitmapDecoderStatics2_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CGraphics_CImaging_CIBitmapDecoderStatics2Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CGraphics_CImaging_CIBitmapDecoderStatics2* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CGraphics_CImaging_CIBitmapDecoderStatics2* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CGraphics_CImaging_CIBitmapDecoderStatics2* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CGraphics_CImaging_CIBitmapDecoderStatics2* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CGraphics_CImaging_CIBitmapDecoderStatics2* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CGraphics_CImaging_CIBitmapDecoderStatics2* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_HeifDecoderId)(__x_ABI_CWindows_CGraphics_CImaging_CIBitmapDecoderStatics2* This,
        GUID* value);
    HRESULT (STDMETHODCALLTYPE* get_WebpDecoderId)(__x_ABI_CWindows_CGraphics_CImaging_CIBitmapDecoderStatics2* This,
        GUID* value);

        END_INTERFACE
    } __x_ABI_CWindows_CGraphics_CImaging_CIBitmapDecoderStatics2Vtbl;

    interface __x_ABI_CWindows_CGraphics_CImaging_CIBitmapDecoderStatics2
    {
        CONST_VTBL struct __x_ABI_CWindows_CGraphics_CImaging_CIBitmapDecoderStatics2Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CGraphics_CImaging_CIBitmapDecoderStatics2;
#endif /* !defined(____x_ABI_CWindows_CGraphics_CImaging_CIBitmapDecoderStatics2_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CGraphics_CImaging_CIBitmapEncoder_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CGraphics_CImaging_CIBitmapEncoder_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CGraphics_CImaging_CIBitmapEncoderVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CGraphics_CImaging_CIBitmapEncoder* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CGraphics_CImaging_CIBitmapEncoder* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CGraphics_CImaging_CIBitmapEncoder* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CGraphics_CImaging_CIBitmapEncoder* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CGraphics_CImaging_CIBitmapEncoder* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CGraphics_CImaging_CIBitmapEncoder* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_EncoderInformation)(__x_ABI_CWindows_CGraphics_CImaging_CIBitmapEncoder* This,
        __x_ABI_CWindows_CGraphics_CImaging_CIBitmapCodecInformation** value);
    HRESULT (STDMETHODCALLTYPE* get_BitmapProperties)(__x_ABI_CWindows_CGraphics_CImaging_CIBitmapEncoder* This,
        __x_ABI_CWindows_CGraphics_CImaging_CIBitmapProperties** value);
    HRESULT (STDMETHODCALLTYPE* get_BitmapContainerProperties)(__x_ABI_CWindows_CGraphics_CImaging_CIBitmapEncoder* This,
        __x_ABI_CWindows_CGraphics_CImaging_CIBitmapProperties** value);
    HRESULT (STDMETHODCALLTYPE* get_IsThumbnailGenerated)(__x_ABI_CWindows_CGraphics_CImaging_CIBitmapEncoder* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* put_IsThumbnailGenerated)(__x_ABI_CWindows_CGraphics_CImaging_CIBitmapEncoder* This,
        boolean value);
    HRESULT (STDMETHODCALLTYPE* get_GeneratedThumbnailWidth)(__x_ABI_CWindows_CGraphics_CImaging_CIBitmapEncoder* This,
        UINT32* value);
    HRESULT (STDMETHODCALLTYPE* put_GeneratedThumbnailWidth)(__x_ABI_CWindows_CGraphics_CImaging_CIBitmapEncoder* This,
        UINT32 value);
    HRESULT (STDMETHODCALLTYPE* get_GeneratedThumbnailHeight)(__x_ABI_CWindows_CGraphics_CImaging_CIBitmapEncoder* This,
        UINT32* value);
    HRESULT (STDMETHODCALLTYPE* put_GeneratedThumbnailHeight)(__x_ABI_CWindows_CGraphics_CImaging_CIBitmapEncoder* This,
        UINT32 value);
    HRESULT (STDMETHODCALLTYPE* get_BitmapTransform)(__x_ABI_CWindows_CGraphics_CImaging_CIBitmapEncoder* This,
        __x_ABI_CWindows_CGraphics_CImaging_CIBitmapTransform** value);
    HRESULT (STDMETHODCALLTYPE* SetPixelData)(__x_ABI_CWindows_CGraphics_CImaging_CIBitmapEncoder* This,
        enum __x_ABI_CWindows_CGraphics_CImaging_CBitmapPixelFormat pixelFormat,
        enum __x_ABI_CWindows_CGraphics_CImaging_CBitmapAlphaMode alphaMode,
        UINT32 width,
        UINT32 height,
        DOUBLE dpiX,
        DOUBLE dpiY,
        UINT32 pixelsLength,
        BYTE* pixels);
    HRESULT (STDMETHODCALLTYPE* GoToNextFrameAsync)(__x_ABI_CWindows_CGraphics_CImaging_CIBitmapEncoder* This,
        __x_ABI_CWindows_CFoundation_CIAsyncAction** asyncInfo);
    HRESULT (STDMETHODCALLTYPE* GoToNextFrameWithEncodingOptionsAsync)(__x_ABI_CWindows_CGraphics_CImaging_CIBitmapEncoder* This,
        __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CGraphics__CImaging__CBitmapTypedValue* encodingOptions,
        __x_ABI_CWindows_CFoundation_CIAsyncAction** asyncInfo);
    HRESULT (STDMETHODCALLTYPE* FlushAsync)(__x_ABI_CWindows_CGraphics_CImaging_CIBitmapEncoder* This,
        __x_ABI_CWindows_CFoundation_CIAsyncAction** asyncInfo);

        END_INTERFACE
    } __x_ABI_CWindows_CGraphics_CImaging_CIBitmapEncoderVtbl;

    interface __x_ABI_CWindows_CGraphics_CImaging_CIBitmapEncoder
    {
        CONST_VTBL struct __x_ABI_CWindows_CGraphics_CImaging_CIBitmapEncoderVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CGraphics_CImaging_CIBitmapEncoder;
#endif /* !defined(____x_ABI_CWindows_CGraphics_CImaging_CIBitmapEncoder_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CGraphics_CImaging_CIBitmapEncoderStatics_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CGraphics_CImaging_CIBitmapEncoderStatics_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CGraphics_CImaging_CIBitmapEncoderStaticsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CGraphics_CImaging_CIBitmapEncoderStatics* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CGraphics_CImaging_CIBitmapEncoderStatics* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CGraphics_CImaging_CIBitmapEncoderStatics* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CGraphics_CImaging_CIBitmapEncoderStatics* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CGraphics_CImaging_CIBitmapEncoderStatics* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CGraphics_CImaging_CIBitmapEncoderStatics* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_BmpEncoderId)(__x_ABI_CWindows_CGraphics_CImaging_CIBitmapEncoderStatics* This,
        GUID* value);
    HRESULT (STDMETHODCALLTYPE* get_JpegEncoderId)(__x_ABI_CWindows_CGraphics_CImaging_CIBitmapEncoderStatics* This,
        GUID* value);
    HRESULT (STDMETHODCALLTYPE* get_PngEncoderId)(__x_ABI_CWindows_CGraphics_CImaging_CIBitmapEncoderStatics* This,
        GUID* value);
    HRESULT (STDMETHODCALLTYPE* get_TiffEncoderId)(__x_ABI_CWindows_CGraphics_CImaging_CIBitmapEncoderStatics* This,
        GUID* value);
    HRESULT (STDMETHODCALLTYPE* get_GifEncoderId)(__x_ABI_CWindows_CGraphics_CImaging_CIBitmapEncoderStatics* This,
        GUID* value);
    HRESULT (STDMETHODCALLTYPE* get_JpegXREncoderId)(__x_ABI_CWindows_CGraphics_CImaging_CIBitmapEncoderStatics* This,
        GUID* value);
    HRESULT (STDMETHODCALLTYPE* GetEncoderInformationEnumerator)(__x_ABI_CWindows_CGraphics_CImaging_CIBitmapEncoderStatics* This,
        __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapCodecInformation** encoderInformationEnumerator);
    HRESULT (STDMETHODCALLTYPE* CreateAsync)(__x_ABI_CWindows_CGraphics_CImaging_CIBitmapEncoderStatics* This,
        GUID encoderId,
        __x_ABI_CWindows_CStorage_CStreams_CIRandomAccessStream* stream,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapEncoder** asyncInfo);
    HRESULT (STDMETHODCALLTYPE* CreateWithEncodingOptionsAsync)(__x_ABI_CWindows_CGraphics_CImaging_CIBitmapEncoderStatics* This,
        GUID encoderId,
        __x_ABI_CWindows_CStorage_CStreams_CIRandomAccessStream* stream,
        __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CGraphics__CImaging__CBitmapTypedValue* encodingOptions,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapEncoder** asyncInfo);
    HRESULT (STDMETHODCALLTYPE* CreateForTranscodingAsync)(__x_ABI_CWindows_CGraphics_CImaging_CIBitmapEncoderStatics* This,
        __x_ABI_CWindows_CStorage_CStreams_CIRandomAccessStream* stream,
        __x_ABI_CWindows_CGraphics_CImaging_CIBitmapDecoder* bitmapDecoder,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapEncoder** asyncInfo);
    HRESULT (STDMETHODCALLTYPE* CreateForInPlacePropertyEncodingAsync)(__x_ABI_CWindows_CGraphics_CImaging_CIBitmapEncoderStatics* This,
        __x_ABI_CWindows_CGraphics_CImaging_CIBitmapDecoder* bitmapDecoder,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapEncoder** asyncInfo);

        END_INTERFACE
    } __x_ABI_CWindows_CGraphics_CImaging_CIBitmapEncoderStaticsVtbl;

    interface __x_ABI_CWindows_CGraphics_CImaging_CIBitmapEncoderStatics
    {
        CONST_VTBL struct __x_ABI_CWindows_CGraphics_CImaging_CIBitmapEncoderStaticsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CGraphics_CImaging_CIBitmapEncoderStatics;
#endif /* !defined(____x_ABI_CWindows_CGraphics_CImaging_CIBitmapEncoderStatics_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CGraphics_CImaging_CIBitmapEncoderStatics2_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CGraphics_CImaging_CIBitmapEncoderStatics2_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CGraphics_CImaging_CIBitmapEncoderStatics2Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CGraphics_CImaging_CIBitmapEncoderStatics2* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CGraphics_CImaging_CIBitmapEncoderStatics2* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CGraphics_CImaging_CIBitmapEncoderStatics2* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CGraphics_CImaging_CIBitmapEncoderStatics2* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CGraphics_CImaging_CIBitmapEncoderStatics2* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CGraphics_CImaging_CIBitmapEncoderStatics2* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_HeifEncoderId)(__x_ABI_CWindows_CGraphics_CImaging_CIBitmapEncoderStatics2* This,
        GUID* value);

        END_INTERFACE
    } __x_ABI_CWindows_CGraphics_CImaging_CIBitmapEncoderStatics2Vtbl;

    interface __x_ABI_CWindows_CGraphics_CImaging_CIBitmapEncoderStatics2
    {
        CONST_VTBL struct __x_ABI_CWindows_CGraphics_CImaging_CIBitmapEncoderStatics2Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CGraphics_CImaging_CIBitmapEncoderStatics2;
#endif /* !defined(____x_ABI_CWindows_CGraphics_CImaging_CIBitmapEncoderStatics2_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CGraphics_CImaging_CIBitmapEncoderWithSoftwareBitmap_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CGraphics_CImaging_CIBitmapEncoderWithSoftwareBitmap_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CGraphics_CImaging_CIBitmapEncoderWithSoftwareBitmapVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CGraphics_CImaging_CIBitmapEncoderWithSoftwareBitmap* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CGraphics_CImaging_CIBitmapEncoderWithSoftwareBitmap* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CGraphics_CImaging_CIBitmapEncoderWithSoftwareBitmap* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CGraphics_CImaging_CIBitmapEncoderWithSoftwareBitmap* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CGraphics_CImaging_CIBitmapEncoderWithSoftwareBitmap* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CGraphics_CImaging_CIBitmapEncoderWithSoftwareBitmap* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* SetSoftwareBitmap)(__x_ABI_CWindows_CGraphics_CImaging_CIBitmapEncoderWithSoftwareBitmap* This,
        __x_ABI_CWindows_CGraphics_CImaging_CISoftwareBitmap* bitmap);

        END_INTERFACE
    } __x_ABI_CWindows_CGraphics_CImaging_CIBitmapEncoderWithSoftwareBitmapVtbl;

    interface __x_ABI_CWindows_CGraphics_CImaging_CIBitmapEncoderWithSoftwareBitmap
    {
        CONST_VTBL struct __x_ABI_CWindows_CGraphics_CImaging_CIBitmapEncoderWithSoftwareBitmapVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CGraphics_CImaging_CIBitmapEncoderWithSoftwareBitmap;
#endif /* !defined(____x_ABI_CWindows_CGraphics_CImaging_CIBitmapEncoderWithSoftwareBitmap_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CGraphics_CImaging_CIBitmapFrame_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CGraphics_CImaging_CIBitmapFrame_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CGraphics_CImaging_CIBitmapFrameVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CGraphics_CImaging_CIBitmapFrame* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CGraphics_CImaging_CIBitmapFrame* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CGraphics_CImaging_CIBitmapFrame* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CGraphics_CImaging_CIBitmapFrame* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CGraphics_CImaging_CIBitmapFrame* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CGraphics_CImaging_CIBitmapFrame* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetThumbnailAsync)(__x_ABI_CWindows_CGraphics_CImaging_CIBitmapFrame* This,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CImageStream** asyncInfo);
    HRESULT (STDMETHODCALLTYPE* get_BitmapProperties)(__x_ABI_CWindows_CGraphics_CImaging_CIBitmapFrame* This,
        __x_ABI_CWindows_CGraphics_CImaging_CIBitmapPropertiesView** value);
    HRESULT (STDMETHODCALLTYPE* get_BitmapPixelFormat)(__x_ABI_CWindows_CGraphics_CImaging_CIBitmapFrame* This,
        enum __x_ABI_CWindows_CGraphics_CImaging_CBitmapPixelFormat* value);
    HRESULT (STDMETHODCALLTYPE* get_BitmapAlphaMode)(__x_ABI_CWindows_CGraphics_CImaging_CIBitmapFrame* This,
        enum __x_ABI_CWindows_CGraphics_CImaging_CBitmapAlphaMode* value);
    HRESULT (STDMETHODCALLTYPE* get_DpiX)(__x_ABI_CWindows_CGraphics_CImaging_CIBitmapFrame* This,
        DOUBLE* value);
    HRESULT (STDMETHODCALLTYPE* get_DpiY)(__x_ABI_CWindows_CGraphics_CImaging_CIBitmapFrame* This,
        DOUBLE* value);
    HRESULT (STDMETHODCALLTYPE* get_PixelWidth)(__x_ABI_CWindows_CGraphics_CImaging_CIBitmapFrame* This,
        UINT32* value);
    HRESULT (STDMETHODCALLTYPE* get_PixelHeight)(__x_ABI_CWindows_CGraphics_CImaging_CIBitmapFrame* This,
        UINT32* value);
    HRESULT (STDMETHODCALLTYPE* get_OrientedPixelWidth)(__x_ABI_CWindows_CGraphics_CImaging_CIBitmapFrame* This,
        UINT32* value);
    HRESULT (STDMETHODCALLTYPE* get_OrientedPixelHeight)(__x_ABI_CWindows_CGraphics_CImaging_CIBitmapFrame* This,
        UINT32* value);
    HRESULT (STDMETHODCALLTYPE* GetPixelDataAsync)(__x_ABI_CWindows_CGraphics_CImaging_CIBitmapFrame* This,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CPixelDataProvider** asyncInfo);
    HRESULT (STDMETHODCALLTYPE* GetPixelDataTransformedAsync)(__x_ABI_CWindows_CGraphics_CImaging_CIBitmapFrame* This,
        enum __x_ABI_CWindows_CGraphics_CImaging_CBitmapPixelFormat pixelFormat,
        enum __x_ABI_CWindows_CGraphics_CImaging_CBitmapAlphaMode alphaMode,
        __x_ABI_CWindows_CGraphics_CImaging_CIBitmapTransform* transform,
        enum __x_ABI_CWindows_CGraphics_CImaging_CExifOrientationMode exifOrientationMode,
        enum __x_ABI_CWindows_CGraphics_CImaging_CColorManagementMode colorManagementMode,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CPixelDataProvider** asyncInfo);

        END_INTERFACE
    } __x_ABI_CWindows_CGraphics_CImaging_CIBitmapFrameVtbl;

    interface __x_ABI_CWindows_CGraphics_CImaging_CIBitmapFrame
    {
        CONST_VTBL struct __x_ABI_CWindows_CGraphics_CImaging_CIBitmapFrameVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CGraphics_CImaging_CIBitmapFrame;
#endif /* !defined(____x_ABI_CWindows_CGraphics_CImaging_CIBitmapFrame_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CGraphics_CImaging_CIBitmapFrameWithSoftwareBitmap_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CGraphics_CImaging_CIBitmapFrameWithSoftwareBitmap_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CGraphics_CImaging_CIBitmapFrameWithSoftwareBitmapVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CGraphics_CImaging_CIBitmapFrameWithSoftwareBitmap* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CGraphics_CImaging_CIBitmapFrameWithSoftwareBitmap* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CGraphics_CImaging_CIBitmapFrameWithSoftwareBitmap* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CGraphics_CImaging_CIBitmapFrameWithSoftwareBitmap* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CGraphics_CImaging_CIBitmapFrameWithSoftwareBitmap* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CGraphics_CImaging_CIBitmapFrameWithSoftwareBitmap* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetSoftwareBitmapAsync)(__x_ABI_CWindows_CGraphics_CImaging_CIBitmapFrameWithSoftwareBitmap* This,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CSoftwareBitmap** value);
    HRESULT (STDMETHODCALLTYPE* GetSoftwareBitmapConvertedAsync)(__x_ABI_CWindows_CGraphics_CImaging_CIBitmapFrameWithSoftwareBitmap* This,
        enum __x_ABI_CWindows_CGraphics_CImaging_CBitmapPixelFormat pixelFormat,
        enum __x_ABI_CWindows_CGraphics_CImaging_CBitmapAlphaMode alphaMode,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CSoftwareBitmap** value);
    HRESULT (STDMETHODCALLTYPE* GetSoftwareBitmapTransformedAsync)(__x_ABI_CWindows_CGraphics_CImaging_CIBitmapFrameWithSoftwareBitmap* This,
        enum __x_ABI_CWindows_CGraphics_CImaging_CBitmapPixelFormat pixelFormat,
        enum __x_ABI_CWindows_CGraphics_CImaging_CBitmapAlphaMode alphaMode,
        __x_ABI_CWindows_CGraphics_CImaging_CIBitmapTransform* transform,
        enum __x_ABI_CWindows_CGraphics_CImaging_CExifOrientationMode exifOrientationMode,
        enum __x_ABI_CWindows_CGraphics_CImaging_CColorManagementMode colorManagementMode,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CSoftwareBitmap** value);

        END_INTERFACE
    } __x_ABI_CWindows_CGraphics_CImaging_CIBitmapFrameWithSoftwareBitmapVtbl;

    interface __x_ABI_CWindows_CGraphics_CImaging_CIBitmapFrameWithSoftwareBitmap
    {
        CONST_VTBL struct __x_ABI_CWindows_CGraphics_CImaging_CIBitmapFrameWithSoftwareBitmapVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CGraphics_CImaging_CIBitmapFrameWithSoftwareBitmap;
#endif /* !defined(____x_ABI_CWindows_CGraphics_CImaging_CIBitmapFrameWithSoftwareBitmap_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CGraphics_CImaging_CIBitmapProperties_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CGraphics_CImaging_CIBitmapProperties_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CGraphics_CImaging_CIBitmapPropertiesVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CGraphics_CImaging_CIBitmapProperties* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CGraphics_CImaging_CIBitmapProperties* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CGraphics_CImaging_CIBitmapProperties* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CGraphics_CImaging_CIBitmapProperties* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CGraphics_CImaging_CIBitmapProperties* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CGraphics_CImaging_CIBitmapProperties* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* SetPropertiesAsync)(__x_ABI_CWindows_CGraphics_CImaging_CIBitmapProperties* This,
        __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CGraphics__CImaging__CBitmapTypedValue* propertiesToSet,
        __x_ABI_CWindows_CFoundation_CIAsyncAction** asyncInfo);

        END_INTERFACE
    } __x_ABI_CWindows_CGraphics_CImaging_CIBitmapPropertiesVtbl;

    interface __x_ABI_CWindows_CGraphics_CImaging_CIBitmapProperties
    {
        CONST_VTBL struct __x_ABI_CWindows_CGraphics_CImaging_CIBitmapPropertiesVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CGraphics_CImaging_CIBitmapProperties;
#endif /* !defined(____x_ABI_CWindows_CGraphics_CImaging_CIBitmapProperties_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CGraphics_CImaging_CIBitmapPropertiesView_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CGraphics_CImaging_CIBitmapPropertiesView_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CGraphics_CImaging_CIBitmapPropertiesViewVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CGraphics_CImaging_CIBitmapPropertiesView* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CGraphics_CImaging_CIBitmapPropertiesView* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CGraphics_CImaging_CIBitmapPropertiesView* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CGraphics_CImaging_CIBitmapPropertiesView* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CGraphics_CImaging_CIBitmapPropertiesView* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CGraphics_CImaging_CIBitmapPropertiesView* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetPropertiesAsync)(__x_ABI_CWindows_CGraphics_CImaging_CIBitmapPropertiesView* This,
        __x_ABI_C__FIIterable_1_HSTRING* propertiesToRetrieve,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapPropertySet** asyncInfo);

        END_INTERFACE
    } __x_ABI_CWindows_CGraphics_CImaging_CIBitmapPropertiesViewVtbl;

    interface __x_ABI_CWindows_CGraphics_CImaging_CIBitmapPropertiesView
    {
        CONST_VTBL struct __x_ABI_CWindows_CGraphics_CImaging_CIBitmapPropertiesViewVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CGraphics_CImaging_CIBitmapPropertiesView;
#endif /* !defined(____x_ABI_CWindows_CGraphics_CImaging_CIBitmapPropertiesView_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CGraphics_CImaging_CIBitmapTransform_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CGraphics_CImaging_CIBitmapTransform_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CGraphics_CImaging_CIBitmapTransformVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CGraphics_CImaging_CIBitmapTransform* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CGraphics_CImaging_CIBitmapTransform* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CGraphics_CImaging_CIBitmapTransform* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CGraphics_CImaging_CIBitmapTransform* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CGraphics_CImaging_CIBitmapTransform* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CGraphics_CImaging_CIBitmapTransform* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_ScaledWidth)(__x_ABI_CWindows_CGraphics_CImaging_CIBitmapTransform* This,
        UINT32* value);
    HRESULT (STDMETHODCALLTYPE* put_ScaledWidth)(__x_ABI_CWindows_CGraphics_CImaging_CIBitmapTransform* This,
        UINT32 value);
    HRESULT (STDMETHODCALLTYPE* get_ScaledHeight)(__x_ABI_CWindows_CGraphics_CImaging_CIBitmapTransform* This,
        UINT32* value);
    HRESULT (STDMETHODCALLTYPE* put_ScaledHeight)(__x_ABI_CWindows_CGraphics_CImaging_CIBitmapTransform* This,
        UINT32 value);
    HRESULT (STDMETHODCALLTYPE* get_InterpolationMode)(__x_ABI_CWindows_CGraphics_CImaging_CIBitmapTransform* This,
        enum __x_ABI_CWindows_CGraphics_CImaging_CBitmapInterpolationMode* value);
    HRESULT (STDMETHODCALLTYPE* put_InterpolationMode)(__x_ABI_CWindows_CGraphics_CImaging_CIBitmapTransform* This,
        enum __x_ABI_CWindows_CGraphics_CImaging_CBitmapInterpolationMode value);
    HRESULT (STDMETHODCALLTYPE* get_Flip)(__x_ABI_CWindows_CGraphics_CImaging_CIBitmapTransform* This,
        enum __x_ABI_CWindows_CGraphics_CImaging_CBitmapFlip* value);
    HRESULT (STDMETHODCALLTYPE* put_Flip)(__x_ABI_CWindows_CGraphics_CImaging_CIBitmapTransform* This,
        enum __x_ABI_CWindows_CGraphics_CImaging_CBitmapFlip value);
    HRESULT (STDMETHODCALLTYPE* get_Rotation)(__x_ABI_CWindows_CGraphics_CImaging_CIBitmapTransform* This,
        enum __x_ABI_CWindows_CGraphics_CImaging_CBitmapRotation* value);
    HRESULT (STDMETHODCALLTYPE* put_Rotation)(__x_ABI_CWindows_CGraphics_CImaging_CIBitmapTransform* This,
        enum __x_ABI_CWindows_CGraphics_CImaging_CBitmapRotation value);
    HRESULT (STDMETHODCALLTYPE* get_Bounds)(__x_ABI_CWindows_CGraphics_CImaging_CIBitmapTransform* This,
        struct __x_ABI_CWindows_CGraphics_CImaging_CBitmapBounds* value);
    HRESULT (STDMETHODCALLTYPE* put_Bounds)(__x_ABI_CWindows_CGraphics_CImaging_CIBitmapTransform* This,
        struct __x_ABI_CWindows_CGraphics_CImaging_CBitmapBounds value);

        END_INTERFACE
    } __x_ABI_CWindows_CGraphics_CImaging_CIBitmapTransformVtbl;

    interface __x_ABI_CWindows_CGraphics_CImaging_CIBitmapTransform
    {
        CONST_VTBL struct __x_ABI_CWindows_CGraphics_CImaging_CIBitmapTransformVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CGraphics_CImaging_CIBitmapTransform;
#endif /* !defined(____x_ABI_CWindows_CGraphics_CImaging_CIBitmapTransform_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CGraphics_CImaging_CIBitmapTypedValue_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CGraphics_CImaging_CIBitmapTypedValue_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CGraphics_CImaging_CIBitmapTypedValueVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CGraphics_CImaging_CIBitmapTypedValue* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CGraphics_CImaging_CIBitmapTypedValue* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CGraphics_CImaging_CIBitmapTypedValue* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CGraphics_CImaging_CIBitmapTypedValue* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CGraphics_CImaging_CIBitmapTypedValue* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CGraphics_CImaging_CIBitmapTypedValue* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Value)(__x_ABI_CWindows_CGraphics_CImaging_CIBitmapTypedValue* This,
        IInspectable** value);
    HRESULT (STDMETHODCALLTYPE* get_Type)(__x_ABI_CWindows_CGraphics_CImaging_CIBitmapTypedValue* This,
        enum __x_ABI_CWindows_CFoundation_CPropertyType* value);

        END_INTERFACE
    } __x_ABI_CWindows_CGraphics_CImaging_CIBitmapTypedValueVtbl;

    interface __x_ABI_CWindows_CGraphics_CImaging_CIBitmapTypedValue
    {
        CONST_VTBL struct __x_ABI_CWindows_CGraphics_CImaging_CIBitmapTypedValueVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CGraphics_CImaging_CIBitmapTypedValue;
#endif /* !defined(____x_ABI_CWindows_CGraphics_CImaging_CIBitmapTypedValue_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CGraphics_CImaging_CIBitmapTypedValueFactory_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CGraphics_CImaging_CIBitmapTypedValueFactory_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CGraphics_CImaging_CIBitmapTypedValueFactoryVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CGraphics_CImaging_CIBitmapTypedValueFactory* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CGraphics_CImaging_CIBitmapTypedValueFactory* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CGraphics_CImaging_CIBitmapTypedValueFactory* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CGraphics_CImaging_CIBitmapTypedValueFactory* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CGraphics_CImaging_CIBitmapTypedValueFactory* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CGraphics_CImaging_CIBitmapTypedValueFactory* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* Create)(__x_ABI_CWindows_CGraphics_CImaging_CIBitmapTypedValueFactory* This,
        IInspectable* value,
        enum __x_ABI_CWindows_CFoundation_CPropertyType type,
        __x_ABI_CWindows_CGraphics_CImaging_CIBitmapTypedValue** bitmapTypedValue);

        END_INTERFACE
    } __x_ABI_CWindows_CGraphics_CImaging_CIBitmapTypedValueFactoryVtbl;

    interface __x_ABI_CWindows_CGraphics_CImaging_CIBitmapTypedValueFactory
    {
        CONST_VTBL struct __x_ABI_CWindows_CGraphics_CImaging_CIBitmapTypedValueFactoryVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CGraphics_CImaging_CIBitmapTypedValueFactory;
#endif /* !defined(____x_ABI_CWindows_CGraphics_CImaging_CIBitmapTypedValueFactory_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CGraphics_CImaging_CIPixelDataProvider_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CGraphics_CImaging_CIPixelDataProvider_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CGraphics_CImaging_CIPixelDataProviderVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CGraphics_CImaging_CIPixelDataProvider* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CGraphics_CImaging_CIPixelDataProvider* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CGraphics_CImaging_CIPixelDataProvider* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CGraphics_CImaging_CIPixelDataProvider* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CGraphics_CImaging_CIPixelDataProvider* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CGraphics_CImaging_CIPixelDataProvider* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* DetachPixelData)(__x_ABI_CWindows_CGraphics_CImaging_CIPixelDataProvider* This,
        UINT32* pixelDataLength,
        BYTE** pixelData);

        END_INTERFACE
    } __x_ABI_CWindows_CGraphics_CImaging_CIPixelDataProviderVtbl;

    interface __x_ABI_CWindows_CGraphics_CImaging_CIPixelDataProvider
    {
        CONST_VTBL struct __x_ABI_CWindows_CGraphics_CImaging_CIPixelDataProviderVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CGraphics_CImaging_CIPixelDataProvider;
#endif /* !defined(____x_ABI_CWindows_CGraphics_CImaging_CIPixelDataProvider_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CGraphics_CImaging_CISoftwareBitmap_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CGraphics_CImaging_CISoftwareBitmap_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CGraphics_CImaging_CISoftwareBitmapVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CGraphics_CImaging_CISoftwareBitmap* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CGraphics_CImaging_CISoftwareBitmap* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CGraphics_CImaging_CISoftwareBitmap* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CGraphics_CImaging_CISoftwareBitmap* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CGraphics_CImaging_CISoftwareBitmap* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CGraphics_CImaging_CISoftwareBitmap* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_BitmapPixelFormat)(__x_ABI_CWindows_CGraphics_CImaging_CISoftwareBitmap* This,
        enum __x_ABI_CWindows_CGraphics_CImaging_CBitmapPixelFormat* value);
    HRESULT (STDMETHODCALLTYPE* get_BitmapAlphaMode)(__x_ABI_CWindows_CGraphics_CImaging_CISoftwareBitmap* This,
        enum __x_ABI_CWindows_CGraphics_CImaging_CBitmapAlphaMode* value);
    HRESULT (STDMETHODCALLTYPE* get_PixelWidth)(__x_ABI_CWindows_CGraphics_CImaging_CISoftwareBitmap* This,
        INT32* value);
    HRESULT (STDMETHODCALLTYPE* get_PixelHeight)(__x_ABI_CWindows_CGraphics_CImaging_CISoftwareBitmap* This,
        INT32* value);
    HRESULT (STDMETHODCALLTYPE* get_IsReadOnly)(__x_ABI_CWindows_CGraphics_CImaging_CISoftwareBitmap* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* put_DpiX)(__x_ABI_CWindows_CGraphics_CImaging_CISoftwareBitmap* This,
        DOUBLE value);
    HRESULT (STDMETHODCALLTYPE* get_DpiX)(__x_ABI_CWindows_CGraphics_CImaging_CISoftwareBitmap* This,
        DOUBLE* value);
    HRESULT (STDMETHODCALLTYPE* put_DpiY)(__x_ABI_CWindows_CGraphics_CImaging_CISoftwareBitmap* This,
        DOUBLE value);
    HRESULT (STDMETHODCALLTYPE* get_DpiY)(__x_ABI_CWindows_CGraphics_CImaging_CISoftwareBitmap* This,
        DOUBLE* value);
    HRESULT (STDMETHODCALLTYPE* LockBuffer)(__x_ABI_CWindows_CGraphics_CImaging_CISoftwareBitmap* This,
        enum __x_ABI_CWindows_CGraphics_CImaging_CBitmapBufferAccessMode mode,
        __x_ABI_CWindows_CGraphics_CImaging_CIBitmapBuffer** value);
    HRESULT (STDMETHODCALLTYPE* CopyTo)(__x_ABI_CWindows_CGraphics_CImaging_CISoftwareBitmap* This,
        __x_ABI_CWindows_CGraphics_CImaging_CISoftwareBitmap* bitmap);
    HRESULT (STDMETHODCALLTYPE* CopyFromBuffer)(__x_ABI_CWindows_CGraphics_CImaging_CISoftwareBitmap* This,
        __x_ABI_CWindows_CStorage_CStreams_CIBuffer* buffer);
    HRESULT (STDMETHODCALLTYPE* CopyToBuffer)(__x_ABI_CWindows_CGraphics_CImaging_CISoftwareBitmap* This,
        __x_ABI_CWindows_CStorage_CStreams_CIBuffer* buffer);
    HRESULT (STDMETHODCALLTYPE* GetReadOnlyView)(__x_ABI_CWindows_CGraphics_CImaging_CISoftwareBitmap* This,
        __x_ABI_CWindows_CGraphics_CImaging_CISoftwareBitmap** value);

        END_INTERFACE
    } __x_ABI_CWindows_CGraphics_CImaging_CISoftwareBitmapVtbl;

    interface __x_ABI_CWindows_CGraphics_CImaging_CISoftwareBitmap
    {
        CONST_VTBL struct __x_ABI_CWindows_CGraphics_CImaging_CISoftwareBitmapVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CGraphics_CImaging_CISoftwareBitmap;
#endif /* !defined(____x_ABI_CWindows_CGraphics_CImaging_CISoftwareBitmap_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CGraphics_CImaging_CISoftwareBitmapFactory_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CGraphics_CImaging_CISoftwareBitmapFactory_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CGraphics_CImaging_CISoftwareBitmapFactoryVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CGraphics_CImaging_CISoftwareBitmapFactory* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CGraphics_CImaging_CISoftwareBitmapFactory* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CGraphics_CImaging_CISoftwareBitmapFactory* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CGraphics_CImaging_CISoftwareBitmapFactory* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CGraphics_CImaging_CISoftwareBitmapFactory* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CGraphics_CImaging_CISoftwareBitmapFactory* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* Create)(__x_ABI_CWindows_CGraphics_CImaging_CISoftwareBitmapFactory* This,
        enum __x_ABI_CWindows_CGraphics_CImaging_CBitmapPixelFormat format,
        INT32 width,
        INT32 height,
        __x_ABI_CWindows_CGraphics_CImaging_CISoftwareBitmap** value);
    HRESULT (STDMETHODCALLTYPE* CreateWithAlpha)(__x_ABI_CWindows_CGraphics_CImaging_CISoftwareBitmapFactory* This,
        enum __x_ABI_CWindows_CGraphics_CImaging_CBitmapPixelFormat format,
        INT32 width,
        INT32 height,
        enum __x_ABI_CWindows_CGraphics_CImaging_CBitmapAlphaMode alpha,
        __x_ABI_CWindows_CGraphics_CImaging_CISoftwareBitmap** value);

        END_INTERFACE
    } __x_ABI_CWindows_CGraphics_CImaging_CISoftwareBitmapFactoryVtbl;

    interface __x_ABI_CWindows_CGraphics_CImaging_CISoftwareBitmapFactory
    {
        CONST_VTBL struct __x_ABI_CWindows_CGraphics_CImaging_CISoftwareBitmapFactoryVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CGraphics_CImaging_CISoftwareBitmapFactory;
#endif /* !defined(____x_ABI_CWindows_CGraphics_CImaging_CISoftwareBitmapFactory_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CGraphics_CImaging_CISoftwareBitmapStatics_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CGraphics_CImaging_CISoftwareBitmapStatics_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CGraphics_CImaging_CISoftwareBitmapStaticsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CGraphics_CImaging_CISoftwareBitmapStatics* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CGraphics_CImaging_CISoftwareBitmapStatics* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CGraphics_CImaging_CISoftwareBitmapStatics* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CGraphics_CImaging_CISoftwareBitmapStatics* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CGraphics_CImaging_CISoftwareBitmapStatics* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CGraphics_CImaging_CISoftwareBitmapStatics* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* Copy)(__x_ABI_CWindows_CGraphics_CImaging_CISoftwareBitmapStatics* This,
        __x_ABI_CWindows_CGraphics_CImaging_CISoftwareBitmap* source,
        __x_ABI_CWindows_CGraphics_CImaging_CISoftwareBitmap** value);
    HRESULT (STDMETHODCALLTYPE* Convert)(__x_ABI_CWindows_CGraphics_CImaging_CISoftwareBitmapStatics* This,
        __x_ABI_CWindows_CGraphics_CImaging_CISoftwareBitmap* source,
        enum __x_ABI_CWindows_CGraphics_CImaging_CBitmapPixelFormat format,
        __x_ABI_CWindows_CGraphics_CImaging_CISoftwareBitmap** value);
    HRESULT (STDMETHODCALLTYPE* ConvertWithAlpha)(__x_ABI_CWindows_CGraphics_CImaging_CISoftwareBitmapStatics* This,
        __x_ABI_CWindows_CGraphics_CImaging_CISoftwareBitmap* source,
        enum __x_ABI_CWindows_CGraphics_CImaging_CBitmapPixelFormat format,
        enum __x_ABI_CWindows_CGraphics_CImaging_CBitmapAlphaMode alpha,
        __x_ABI_CWindows_CGraphics_CImaging_CISoftwareBitmap** value);
    HRESULT (STDMETHODCALLTYPE* CreateCopyFromBuffer)(__x_ABI_CWindows_CGraphics_CImaging_CISoftwareBitmapStatics* This,
        __x_ABI_CWindows_CStorage_CStreams_CIBuffer* source,
        enum __x_ABI_CWindows_CGraphics_CImaging_CBitmapPixelFormat format,
        INT32 width,
        INT32 height,
        __x_ABI_CWindows_CGraphics_CImaging_CISoftwareBitmap** value);
    HRESULT (STDMETHODCALLTYPE* CreateCopyWithAlphaFromBuffer)(__x_ABI_CWindows_CGraphics_CImaging_CISoftwareBitmapStatics* This,
        __x_ABI_CWindows_CStorage_CStreams_CIBuffer* source,
        enum __x_ABI_CWindows_CGraphics_CImaging_CBitmapPixelFormat format,
        INT32 width,
        INT32 height,
        enum __x_ABI_CWindows_CGraphics_CImaging_CBitmapAlphaMode alpha,
        __x_ABI_CWindows_CGraphics_CImaging_CISoftwareBitmap** value);
    HRESULT (STDMETHODCALLTYPE* CreateCopyFromSurfaceAsync)(__x_ABI_CWindows_CGraphics_CImaging_CISoftwareBitmapStatics* This,
        __x_ABI_CWindows_CGraphics_CDirectX_CDirect3D11_CIDirect3DSurface* surface,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CSoftwareBitmap** value);
    HRESULT (STDMETHODCALLTYPE* CreateCopyWithAlphaFromSurfaceAsync)(__x_ABI_CWindows_CGraphics_CImaging_CISoftwareBitmapStatics* This,
        __x_ABI_CWindows_CGraphics_CDirectX_CDirect3D11_CIDirect3DSurface* surface,
        enum __x_ABI_CWindows_CGraphics_CImaging_CBitmapAlphaMode alpha,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CSoftwareBitmap** value);

        END_INTERFACE
    } __x_ABI_CWindows_CGraphics_CImaging_CISoftwareBitmapStaticsVtbl;

    interface __x_ABI_CWindows_CGraphics_CImaging_CISoftwareBitmapStatics
    {
        CONST_VTBL struct __x_ABI_CWindows_CGraphics_CImaging_CISoftwareBitmapStaticsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CGraphics_CImaging_CISoftwareBitmapStatics;
#endif /* !defined(____x_ABI_CWindows_CGraphics_CImaging_CISoftwareBitmapStatics_INTERFACE_DEFINED__) */
    

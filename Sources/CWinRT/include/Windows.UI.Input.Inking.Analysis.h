// WARNING: Please don't edit this file. It was generated by Swift/WinRT v0.0.1

#pragma once
// Header files for imported files
#include <inspectable.h>
#include <EventToken.h>
#include <windowscontracts.h>
#include "Windows.Foundation.h"
#include "Windows.UI.Input.Inking.h"
// Importing Collections header
#include "Windows.Foundation.Collections.h"

/* Forward Declarations */
#ifndef ____x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CIInkAnalysisInkBullet_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CIInkAnalysisInkBullet_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CIInkAnalysisInkBullet __x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CIInkAnalysisInkBullet;

#endif // ____x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CIInkAnalysisInkBullet_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CIInkAnalysisInkDrawing_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CIInkAnalysisInkDrawing_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CIInkAnalysisInkDrawing __x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CIInkAnalysisInkDrawing;

#endif // ____x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CIInkAnalysisInkDrawing_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CIInkAnalysisInkWord_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CIInkAnalysisInkWord_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CIInkAnalysisInkWord __x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CIInkAnalysisInkWord;

#endif // ____x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CIInkAnalysisInkWord_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CIInkAnalysisLine_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CIInkAnalysisLine_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CIInkAnalysisLine __x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CIInkAnalysisLine;

#endif // ____x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CIInkAnalysisLine_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CIInkAnalysisListItem_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CIInkAnalysisListItem_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CIInkAnalysisListItem __x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CIInkAnalysisListItem;

#endif // ____x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CIInkAnalysisListItem_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CIInkAnalysisNode_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CIInkAnalysisNode_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CIInkAnalysisNode __x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CIInkAnalysisNode;

#endif // ____x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CIInkAnalysisNode_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CIInkAnalysisParagraph_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CIInkAnalysisParagraph_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CIInkAnalysisParagraph __x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CIInkAnalysisParagraph;

#endif // ____x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CIInkAnalysisParagraph_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CIInkAnalysisResult_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CIInkAnalysisResult_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CIInkAnalysisResult __x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CIInkAnalysisResult;

#endif // ____x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CIInkAnalysisResult_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CIInkAnalysisRoot_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CIInkAnalysisRoot_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CIInkAnalysisRoot __x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CIInkAnalysisRoot;

#endif // ____x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CIInkAnalysisRoot_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CIInkAnalysisWritingRegion_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CIInkAnalysisWritingRegion_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CIInkAnalysisWritingRegion __x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CIInkAnalysisWritingRegion;

#endif // ____x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CIInkAnalysisWritingRegion_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CIInkAnalyzer_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CIInkAnalyzer_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CIInkAnalyzer __x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CIInkAnalyzer;

#endif // ____x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CIInkAnalyzer_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CIInkAnalyzerFactory_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CIInkAnalyzerFactory_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CIInkAnalyzerFactory __x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CIInkAnalyzerFactory;

#endif // ____x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CIInkAnalyzerFactory_FWD_DEFINED__

// Parameterized interface forward declarations (C)

// Collection interface definitions

typedef interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CUI__CInput__CInking__CAnalysis__CInkAnalysisResult __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CUI__CInput__CInking__CAnalysis__CInkAnalysisResult;

#if !defined(____x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CUI__CInput__CInking__CAnalysis__CInkAnalysisResult_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CUI__CInput__CInking__CAnalysis__CInkAnalysisResult_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CUI__CInput__CInking__CAnalysis__CInkAnalysisResult __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CUI__CInput__CInking__CAnalysis__CInkAnalysisResult;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CUI__CInput__CInking__CAnalysis__CInkAnalysisResult;

    typedef struct __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CUI__CInput__CInking__CAnalysis__CInkAnalysisResultVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CUI__CInput__CInking__CAnalysis__CInkAnalysisResult* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CUI__CInput__CInking__CAnalysis__CInkAnalysisResult* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CUI__CInput__CInking__CAnalysis__CInkAnalysisResult* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CUI__CInput__CInking__CAnalysis__CInkAnalysisResult* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CUI__CInput__CInking__CAnalysis__CInkAnalysisResult* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CUI__CInput__CInking__CAnalysis__CInkAnalysisResult* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* put_Completed)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CUI__CInput__CInking__CAnalysis__CInkAnalysisResult* This,
        __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CUI__CInput__CInking__CAnalysis__CInkAnalysisResult* handler);
    HRESULT (STDMETHODCALLTYPE* get_Completed)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CUI__CInput__CInking__CAnalysis__CInkAnalysisResult* This,
        __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CUI__CInput__CInking__CAnalysis__CInkAnalysisResult** result);
    HRESULT (STDMETHODCALLTYPE* GetResults)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CUI__CInput__CInking__CAnalysis__CInkAnalysisResult* This,
        __x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CIInkAnalysisResult** result);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CUI__CInput__CInking__CAnalysis__CInkAnalysisResultVtbl;

    interface __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CUI__CInput__CInking__CAnalysis__CInkAnalysisResult
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CUI__CInput__CInking__CAnalysis__CInkAnalysisResultVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CUI__CInput__CInking__CAnalysis__CInkAnalysisResult_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CUI__CInput__CInking__CAnalysis__CInkAnalysisResult_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CUI__CInput__CInking__CAnalysis__CInkAnalysisResult_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CUI__CInput__CInking__CAnalysis__CInkAnalysisResult __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CUI__CInput__CInking__CAnalysis__CInkAnalysisResult;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CUI__CInput__CInking__CAnalysis__CInkAnalysisResult;

    typedef struct __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CUI__CInput__CInking__CAnalysis__CInkAnalysisResultVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CUI__CInput__CInking__CAnalysis__CInkAnalysisResult* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CUI__CInput__CInking__CAnalysis__CInkAnalysisResult* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CUI__CInput__CInking__CAnalysis__CInkAnalysisResult* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CUI__CInput__CInking__CAnalysis__CInkAnalysisResult* This,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CUI__CInput__CInking__CAnalysis__CInkAnalysisResult* asyncInfo,
        enum __x_ABI_CWindows_CFoundation_CAsyncStatus asyncStatus);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CUI__CInput__CInking__CAnalysis__CInkAnalysisResultVtbl;

    interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CUI__CInput__CInking__CAnalysis__CInkAnalysisResult
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CUI__CInput__CInking__CAnalysis__CInkAnalysisResultVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CUI__CInput__CInking__CAnalysis__CInkAnalysisResult_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterator_1_HSTRING_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterator_1_HSTRING_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterator_1_HSTRING __x_ABI_C__FIIterator_1_HSTRING;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterator_1_HSTRING;

    typedef struct __x_ABI_C__FIIterator_1_HSTRINGVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterator_1_HSTRING* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterator_1_HSTRING* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterator_1_HSTRING* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterator_1_HSTRING* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterator_1_HSTRING* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterator_1_HSTRING* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Current)(__x_ABI_C__FIIterator_1_HSTRING* This,
        HSTRING* result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__x_ABI_C__FIIterator_1_HSTRING* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__x_ABI_C__FIIterator_1_HSTRING* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIIterator_1_HSTRING* This,
        UINT32 itemsLength,
        HSTRING* items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIIterator_1_HSTRINGVtbl;

    interface __x_ABI_C__FIIterator_1_HSTRING
    {
        CONST_VTBL struct __x_ABI_C__FIIterator_1_HSTRINGVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterator_1_HSTRING_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterable_1_HSTRING_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterable_1_HSTRING_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterable_1_HSTRING __x_ABI_C__FIIterable_1_HSTRING;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterable_1_HSTRING;

    typedef struct __x_ABI_C__FIIterable_1_HSTRINGVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterable_1_HSTRING* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterable_1_HSTRING* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterable_1_HSTRING* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterable_1_HSTRING* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterable_1_HSTRING* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterable_1_HSTRING* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* First)(__x_ABI_C__FIIterable_1_HSTRING* This,
        __x_ABI_C__FIIterator_1_HSTRING** result);

        END_INTERFACE
    } __x_ABI_C__FIIterable_1_HSTRINGVtbl;

    interface __x_ABI_C__FIIterable_1_HSTRING
    {
        CONST_VTBL struct __x_ABI_C__FIIterable_1_HSTRINGVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterable_1_HSTRING_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterator_1_UINT32_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterator_1_UINT32_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterator_1_UINT32 __x_ABI_C__FIIterator_1_UINT32;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterator_1_UINT32;

    typedef struct __x_ABI_C__FIIterator_1_UINT32Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterator_1_UINT32* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterator_1_UINT32* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterator_1_UINT32* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterator_1_UINT32* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterator_1_UINT32* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterator_1_UINT32* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Current)(__x_ABI_C__FIIterator_1_UINT32* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__x_ABI_C__FIIterator_1_UINT32* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__x_ABI_C__FIIterator_1_UINT32* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIIterator_1_UINT32* This,
        UINT32 itemsLength,
        UINT32* items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIIterator_1_UINT32Vtbl;

    interface __x_ABI_C__FIIterator_1_UINT32
    {
        CONST_VTBL struct __x_ABI_C__FIIterator_1_UINT32Vtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterator_1_UINT32_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterable_1_UINT32_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterable_1_UINT32_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterable_1_UINT32 __x_ABI_C__FIIterable_1_UINT32;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterable_1_UINT32;

    typedef struct __x_ABI_C__FIIterable_1_UINT32Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterable_1_UINT32* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterable_1_UINT32* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterable_1_UINT32* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterable_1_UINT32* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterable_1_UINT32* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterable_1_UINT32* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* First)(__x_ABI_C__FIIterable_1_UINT32* This,
        __x_ABI_C__FIIterator_1_UINT32** result);

        END_INTERFACE
    } __x_ABI_C__FIIterable_1_UINT32Vtbl;

    interface __x_ABI_C__FIIterable_1_UINT32
    {
        CONST_VTBL struct __x_ABI_C__FIIterable_1_UINT32Vtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterable_1_UINT32_INTERFACE_DEFINED__
    
typedef struct __x_ABI_CWindows_CFoundation_CPoint __x_ABI_CWindows_CFoundation_CPoint;

#if !defined(____x_ABI_C__FIIterator_1___x_ABI_CWindows__CFoundation__CPoint_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CFoundation__CPoint_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CFoundation__CPoint __x_ABI_C__FIIterator_1___x_ABI_CWindows__CFoundation__CPoint;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterator_1___x_ABI_CWindows__CFoundation__CPoint;

    typedef struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CFoundation__CPointVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CFoundation__CPoint* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CFoundation__CPoint* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CFoundation__CPoint* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CFoundation__CPoint* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CFoundation__CPoint* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CFoundation__CPoint* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Current)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CFoundation__CPoint* This,
        struct __x_ABI_CWindows_CFoundation_CPoint* result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CFoundation__CPoint* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CFoundation__CPoint* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CFoundation__CPoint* This,
        UINT32 itemsLength,
        struct __x_ABI_CWindows_CFoundation_CPoint* items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIIterator_1___x_ABI_CWindows__CFoundation__CPointVtbl;

    interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CFoundation__CPoint
    {
        CONST_VTBL struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CFoundation__CPointVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CFoundation__CPoint_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterable_1___x_ABI_CWindows__CFoundation__CPoint_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CFoundation__CPoint_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CFoundation__CPoint __x_ABI_C__FIIterable_1___x_ABI_CWindows__CFoundation__CPoint;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterable_1___x_ABI_CWindows__CFoundation__CPoint;

    typedef struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CFoundation__CPointVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CFoundation__CPoint* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CFoundation__CPoint* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CFoundation__CPoint* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CFoundation__CPoint* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CFoundation__CPoint* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CFoundation__CPoint* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* First)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CFoundation__CPoint* This,
        __x_ABI_C__FIIterator_1___x_ABI_CWindows__CFoundation__CPoint** result);

        END_INTERFACE
    } __x_ABI_C__FIIterable_1___x_ABI_CWindows__CFoundation__CPointVtbl;

    interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CFoundation__CPoint
    {
        CONST_VTBL struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CFoundation__CPointVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CFoundation__CPoint_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CInput__CInking__CAnalysis__CIInkAnalysisNode_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CInput__CInking__CAnalysis__CIInkAnalysisNode_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CInput__CInking__CAnalysis__CIInkAnalysisNode __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CInput__CInking__CAnalysis__CIInkAnalysisNode;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CInput__CInking__CAnalysis__CIInkAnalysisNode;

    typedef struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CInput__CInking__CAnalysis__CIInkAnalysisNodeVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CInput__CInking__CAnalysis__CIInkAnalysisNode* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CInput__CInking__CAnalysis__CIInkAnalysisNode* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CInput__CInking__CAnalysis__CIInkAnalysisNode* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CInput__CInking__CAnalysis__CIInkAnalysisNode* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CInput__CInking__CAnalysis__CIInkAnalysisNode* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CInput__CInking__CAnalysis__CIInkAnalysisNode* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Current)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CInput__CInking__CAnalysis__CIInkAnalysisNode* This,
        __x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CIInkAnalysisNode** result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CInput__CInking__CAnalysis__CIInkAnalysisNode* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CInput__CInking__CAnalysis__CIInkAnalysisNode* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CInput__CInking__CAnalysis__CIInkAnalysisNode* This,
        UINT32 itemsLength,
        __x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CIInkAnalysisNode** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CInput__CInking__CAnalysis__CIInkAnalysisNodeVtbl;

    interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CInput__CInking__CAnalysis__CIInkAnalysisNode
    {
        CONST_VTBL struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CInput__CInking__CAnalysis__CIInkAnalysisNodeVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CInput__CInking__CAnalysis__CIInkAnalysisNode_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CInput__CInking__CAnalysis__CIInkAnalysisNode_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CInput__CInking__CAnalysis__CIInkAnalysisNode_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CInput__CInking__CAnalysis__CIInkAnalysisNode __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CInput__CInking__CAnalysis__CIInkAnalysisNode;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CInput__CInking__CAnalysis__CIInkAnalysisNode;

    typedef struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CInput__CInking__CAnalysis__CIInkAnalysisNodeVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CInput__CInking__CAnalysis__CIInkAnalysisNode* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CInput__CInking__CAnalysis__CIInkAnalysisNode* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CInput__CInking__CAnalysis__CIInkAnalysisNode* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CInput__CInking__CAnalysis__CIInkAnalysisNode* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CInput__CInking__CAnalysis__CIInkAnalysisNode* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CInput__CInking__CAnalysis__CIInkAnalysisNode* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* First)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CInput__CInking__CAnalysis__CIInkAnalysisNode* This,
        __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CInput__CInking__CAnalysis__CIInkAnalysisNode** result);

        END_INTERFACE
    } __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CInput__CInking__CAnalysis__CIInkAnalysisNodeVtbl;

    interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CInput__CInking__CAnalysis__CIInkAnalysisNode
    {
        CONST_VTBL struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CInput__CInking__CAnalysis__CIInkAnalysisNodeVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CInput__CInking__CAnalysis__CIInkAnalysisNode_INTERFACE_DEFINED__
    
#ifndef ____x_ABI_CWindows_CUI_CInput_CInking_CIInkStroke_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CInput_CInking_CIInkStroke_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CInput_CInking_CIInkStroke __x_ABI_CWindows_CUI_CInput_CInking_CIInkStroke;

#endif // ____x_ABI_CWindows_CUI_CInput_CInking_CIInkStroke_FWD_DEFINED__

#if !defined(____x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CInput__CInking__CInkStroke_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CInput__CInking__CInkStroke_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CInput__CInking__CInkStroke __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CInput__CInking__CInkStroke;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CInput__CInking__CInkStroke;

    typedef struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CInput__CInking__CInkStrokeVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CInput__CInking__CInkStroke* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CInput__CInking__CInkStroke* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CInput__CInking__CInkStroke* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CInput__CInking__CInkStroke* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CInput__CInking__CInkStroke* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CInput__CInking__CInkStroke* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Current)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CInput__CInking__CInkStroke* This,
        __x_ABI_CWindows_CUI_CInput_CInking_CIInkStroke** result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CInput__CInking__CInkStroke* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CInput__CInking__CInkStroke* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CInput__CInking__CInkStroke* This,
        UINT32 itemsLength,
        __x_ABI_CWindows_CUI_CInput_CInking_CIInkStroke** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CInput__CInking__CInkStrokeVtbl;

    interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CInput__CInking__CInkStroke
    {
        CONST_VTBL struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CInput__CInking__CInkStrokeVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CInput__CInking__CInkStroke_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CInput__CInking__CInkStroke_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CInput__CInking__CInkStroke_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CInput__CInking__CInkStroke __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CInput__CInking__CInkStroke;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CInput__CInking__CInkStroke;

    typedef struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CInput__CInking__CInkStrokeVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CInput__CInking__CInkStroke* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CInput__CInking__CInkStroke* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CInput__CInking__CInkStroke* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CInput__CInking__CInkStroke* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CInput__CInking__CInkStroke* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CInput__CInking__CInkStroke* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* First)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CInput__CInking__CInkStroke* This,
        __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CInput__CInking__CInkStroke** result);

        END_INTERFACE
    } __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CInput__CInking__CInkStrokeVtbl;

    interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CInput__CInking__CInkStroke
    {
        CONST_VTBL struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CInput__CInking__CInkStrokeVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CInput__CInking__CInkStroke_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVectorView_1_HSTRING_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVectorView_1_HSTRING_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVectorView_1_HSTRING __x_ABI_C__FIVectorView_1_HSTRING;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVectorView_1_HSTRING;

    typedef struct __x_ABI_C__FIVectorView_1_HSTRINGVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVectorView_1_HSTRING* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVectorView_1_HSTRING* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVectorView_1_HSTRING* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVectorView_1_HSTRING* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVectorView_1_HSTRING* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVectorView_1_HSTRING* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVectorView_1_HSTRING* This,
        UINT32 index,
        HSTRING* result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVectorView_1_HSTRING* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVectorView_1_HSTRING* This,
        HSTRING value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVectorView_1_HSTRING* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        HSTRING* items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIVectorView_1_HSTRINGVtbl;

    interface __x_ABI_C__FIVectorView_1_HSTRING
    {
        CONST_VTBL struct __x_ABI_C__FIVectorView_1_HSTRINGVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVectorView_1_HSTRING_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVectorView_1_UINT32_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVectorView_1_UINT32_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVectorView_1_UINT32 __x_ABI_C__FIVectorView_1_UINT32;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVectorView_1_UINT32;

    typedef struct __x_ABI_C__FIVectorView_1_UINT32Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVectorView_1_UINT32* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVectorView_1_UINT32* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVectorView_1_UINT32* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVectorView_1_UINT32* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVectorView_1_UINT32* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVectorView_1_UINT32* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVectorView_1_UINT32* This,
        UINT32 index,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVectorView_1_UINT32* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVectorView_1_UINT32* This,
        UINT32 value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVectorView_1_UINT32* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        UINT32* items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIVectorView_1_UINT32Vtbl;

    interface __x_ABI_C__FIVectorView_1_UINT32
    {
        CONST_VTBL struct __x_ABI_C__FIVectorView_1_UINT32Vtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVectorView_1_UINT32_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CFoundation__CPoint_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CFoundation__CPoint_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CFoundation__CPoint __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CFoundation__CPoint;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CFoundation__CPoint;

    typedef struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CFoundation__CPointVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CFoundation__CPoint* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CFoundation__CPoint* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CFoundation__CPoint* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CFoundation__CPoint* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CFoundation__CPoint* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CFoundation__CPoint* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CFoundation__CPoint* This,
        UINT32 index,
        struct __x_ABI_CWindows_CFoundation_CPoint* result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CFoundation__CPoint* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CFoundation__CPoint* This,
        struct __x_ABI_CWindows_CFoundation_CPoint value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CFoundation__CPoint* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        struct __x_ABI_CWindows_CFoundation_CPoint* items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CFoundation__CPointVtbl;

    interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CFoundation__CPoint
    {
        CONST_VTBL struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CFoundation__CPointVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CFoundation__CPoint_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CInking__CAnalysis__CIInkAnalysisNode_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CInking__CAnalysis__CIInkAnalysisNode_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CInking__CAnalysis__CIInkAnalysisNode __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CInking__CAnalysis__CIInkAnalysisNode;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CInking__CAnalysis__CIInkAnalysisNode;

    typedef struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CInking__CAnalysis__CIInkAnalysisNodeVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CInking__CAnalysis__CIInkAnalysisNode* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CInking__CAnalysis__CIInkAnalysisNode* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CInking__CAnalysis__CIInkAnalysisNode* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CInking__CAnalysis__CIInkAnalysisNode* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CInking__CAnalysis__CIInkAnalysisNode* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CInking__CAnalysis__CIInkAnalysisNode* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CInking__CAnalysis__CIInkAnalysisNode* This,
        UINT32 index,
        __x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CIInkAnalysisNode** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CInking__CAnalysis__CIInkAnalysisNode* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CInking__CAnalysis__CIInkAnalysisNode* This,
        __x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CIInkAnalysisNode* value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CInking__CAnalysis__CIInkAnalysisNode* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        __x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CIInkAnalysisNode** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CInking__CAnalysis__CIInkAnalysisNodeVtbl;

    interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CInking__CAnalysis__CIInkAnalysisNode
    {
        CONST_VTBL struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CInking__CAnalysis__CIInkAnalysisNodeVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CInking__CAnalysis__CIInkAnalysisNode_INTERFACE_DEFINED__
    
typedef enum __x_ABI_CWindows_CFoundation_CAsyncStatus __x_ABI_CWindows_CFoundation_CAsyncStatus;

#ifndef ____x_ABI_CWindows_CFoundation_CIAsyncInfo_FWD_DEFINED__
#define ____x_ABI_CWindows_CFoundation_CIAsyncInfo_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CFoundation_CIAsyncInfo __x_ABI_CWindows_CFoundation_CIAsyncInfo;

#endif // ____x_ABI_CWindows_CFoundation_CIAsyncInfo_FWD_DEFINED__

typedef struct __x_ABI_CWindows_CFoundation_CRect __x_ABI_CWindows_CFoundation_CRect;

typedef enum __x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CInkAnalysisDrawingKind __x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CInkAnalysisDrawingKind;

typedef enum __x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CInkAnalysisNodeKind __x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CInkAnalysisNodeKind;

typedef enum __x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CInkAnalysisStatus __x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CInkAnalysisStatus;

typedef enum __x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CInkAnalysisStrokeKind __x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CInkAnalysisStrokeKind;

enum __x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CInkAnalysisDrawingKind
    {
        __x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CInkAnalysisDrawingKind_Drawing = 0,
    __x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CInkAnalysisDrawingKind_Circle = 1,
    __x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CInkAnalysisDrawingKind_Ellipse = 2,
    __x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CInkAnalysisDrawingKind_Triangle = 3,
    __x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CInkAnalysisDrawingKind_IsoscelesTriangle = 4,
    __x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CInkAnalysisDrawingKind_EquilateralTriangle = 5,
    __x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CInkAnalysisDrawingKind_RightTriangle = 6,
    __x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CInkAnalysisDrawingKind_Quadrilateral = 7,
    __x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CInkAnalysisDrawingKind_Rectangle = 8,
    __x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CInkAnalysisDrawingKind_Square = 9,
    __x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CInkAnalysisDrawingKind_Diamond = 10,
    __x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CInkAnalysisDrawingKind_Trapezoid = 11,
    __x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CInkAnalysisDrawingKind_Parallelogram = 12,
    __x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CInkAnalysisDrawingKind_Pentagon = 13,
    __x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CInkAnalysisDrawingKind_Hexagon = 14,
};

enum __x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CInkAnalysisNodeKind
    {
        __x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CInkAnalysisNodeKind_UnclassifiedInk = 0,
    __x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CInkAnalysisNodeKind_Root = 1,
    __x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CInkAnalysisNodeKind_WritingRegion = 2,
    __x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CInkAnalysisNodeKind_Paragraph = 3,
    __x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CInkAnalysisNodeKind_Line = 4,
    __x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CInkAnalysisNodeKind_InkWord = 5,
    __x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CInkAnalysisNodeKind_InkBullet = 6,
    __x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CInkAnalysisNodeKind_InkDrawing = 7,
    __x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CInkAnalysisNodeKind_ListItem = 8,
};

enum __x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CInkAnalysisStatus
    {
        __x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CInkAnalysisStatus_Updated = 0,
    __x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CInkAnalysisStatus_Unchanged = 1,
};

enum __x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CInkAnalysisStrokeKind
    {
        __x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CInkAnalysisStrokeKind_Auto = 0,
    __x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CInkAnalysisStrokeKind_Writing = 1,
    __x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CInkAnalysisStrokeKind_Drawing = 2,
};

#if !defined(____x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CIInkAnalysisInkBullet_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CIInkAnalysisInkBullet_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CIInkAnalysisInkBulletVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CIInkAnalysisInkBullet* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CIInkAnalysisInkBullet* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CIInkAnalysisInkBullet* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CIInkAnalysisInkBullet* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CIInkAnalysisInkBullet* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CIInkAnalysisInkBullet* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_RecognizedText)(__x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CIInkAnalysisInkBullet* This,
        HSTRING* value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CIInkAnalysisInkBulletVtbl;

    interface __x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CIInkAnalysisInkBullet
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CIInkAnalysisInkBulletVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CIInkAnalysisInkBullet;
#endif /* !defined(____x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CIInkAnalysisInkBullet_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CIInkAnalysisInkDrawing_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CIInkAnalysisInkDrawing_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CIInkAnalysisInkDrawingVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CIInkAnalysisInkDrawing* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CIInkAnalysisInkDrawing* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CIInkAnalysisInkDrawing* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CIInkAnalysisInkDrawing* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CIInkAnalysisInkDrawing* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CIInkAnalysisInkDrawing* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_DrawingKind)(__x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CIInkAnalysisInkDrawing* This,
        enum __x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CInkAnalysisDrawingKind* value);
    HRESULT (STDMETHODCALLTYPE* get_Center)(__x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CIInkAnalysisInkDrawing* This,
        struct __x_ABI_CWindows_CFoundation_CPoint* value);
    HRESULT (STDMETHODCALLTYPE* get_Points)(__x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CIInkAnalysisInkDrawing* This,
        __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CFoundation__CPoint** value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CIInkAnalysisInkDrawingVtbl;

    interface __x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CIInkAnalysisInkDrawing
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CIInkAnalysisInkDrawingVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CIInkAnalysisInkDrawing;
#endif /* !defined(____x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CIInkAnalysisInkDrawing_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CIInkAnalysisInkWord_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CIInkAnalysisInkWord_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CIInkAnalysisInkWordVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CIInkAnalysisInkWord* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CIInkAnalysisInkWord* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CIInkAnalysisInkWord* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CIInkAnalysisInkWord* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CIInkAnalysisInkWord* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CIInkAnalysisInkWord* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_RecognizedText)(__x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CIInkAnalysisInkWord* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_TextAlternates)(__x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CIInkAnalysisInkWord* This,
        __x_ABI_C__FIVectorView_1_HSTRING** value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CIInkAnalysisInkWordVtbl;

    interface __x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CIInkAnalysisInkWord
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CIInkAnalysisInkWordVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CIInkAnalysisInkWord;
#endif /* !defined(____x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CIInkAnalysisInkWord_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CIInkAnalysisLine_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CIInkAnalysisLine_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CIInkAnalysisLineVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CIInkAnalysisLine* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CIInkAnalysisLine* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CIInkAnalysisLine* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CIInkAnalysisLine* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CIInkAnalysisLine* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CIInkAnalysisLine* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_RecognizedText)(__x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CIInkAnalysisLine* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_IndentLevel)(__x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CIInkAnalysisLine* This,
        INT32* value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CIInkAnalysisLineVtbl;

    interface __x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CIInkAnalysisLine
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CIInkAnalysisLineVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CIInkAnalysisLine;
#endif /* !defined(____x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CIInkAnalysisLine_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CIInkAnalysisListItem_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CIInkAnalysisListItem_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CIInkAnalysisListItemVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CIInkAnalysisListItem* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CIInkAnalysisListItem* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CIInkAnalysisListItem* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CIInkAnalysisListItem* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CIInkAnalysisListItem* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CIInkAnalysisListItem* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_RecognizedText)(__x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CIInkAnalysisListItem* This,
        HSTRING* value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CIInkAnalysisListItemVtbl;

    interface __x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CIInkAnalysisListItem
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CIInkAnalysisListItemVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CIInkAnalysisListItem;
#endif /* !defined(____x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CIInkAnalysisListItem_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CIInkAnalysisNode_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CIInkAnalysisNode_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CIInkAnalysisNodeVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CIInkAnalysisNode* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CIInkAnalysisNode* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CIInkAnalysisNode* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CIInkAnalysisNode* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CIInkAnalysisNode* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CIInkAnalysisNode* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Id)(__x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CIInkAnalysisNode* This,
        UINT32* value);
    HRESULT (STDMETHODCALLTYPE* get_Kind)(__x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CIInkAnalysisNode* This,
        enum __x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CInkAnalysisNodeKind* value);
    HRESULT (STDMETHODCALLTYPE* get_BoundingRect)(__x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CIInkAnalysisNode* This,
        struct __x_ABI_CWindows_CFoundation_CRect* value);
    HRESULT (STDMETHODCALLTYPE* get_RotatedBoundingRect)(__x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CIInkAnalysisNode* This,
        __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CFoundation__CPoint** value);
    HRESULT (STDMETHODCALLTYPE* get_Children)(__x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CIInkAnalysisNode* This,
        __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CInking__CAnalysis__CIInkAnalysisNode** value);
    HRESULT (STDMETHODCALLTYPE* get_Parent)(__x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CIInkAnalysisNode* This,
        __x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CIInkAnalysisNode** value);
    HRESULT (STDMETHODCALLTYPE* GetStrokeIds)(__x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CIInkAnalysisNode* This,
        __x_ABI_C__FIVectorView_1_UINT32** strokeIds);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CIInkAnalysisNodeVtbl;

    interface __x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CIInkAnalysisNode
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CIInkAnalysisNodeVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CIInkAnalysisNode;
#endif /* !defined(____x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CIInkAnalysisNode_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CIInkAnalysisParagraph_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CIInkAnalysisParagraph_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CIInkAnalysisParagraphVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CIInkAnalysisParagraph* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CIInkAnalysisParagraph* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CIInkAnalysisParagraph* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CIInkAnalysisParagraph* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CIInkAnalysisParagraph* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CIInkAnalysisParagraph* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_RecognizedText)(__x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CIInkAnalysisParagraph* This,
        HSTRING* value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CIInkAnalysisParagraphVtbl;

    interface __x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CIInkAnalysisParagraph
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CIInkAnalysisParagraphVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CIInkAnalysisParagraph;
#endif /* !defined(____x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CIInkAnalysisParagraph_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CIInkAnalysisResult_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CIInkAnalysisResult_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CIInkAnalysisResultVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CIInkAnalysisResult* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CIInkAnalysisResult* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CIInkAnalysisResult* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CIInkAnalysisResult* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CIInkAnalysisResult* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CIInkAnalysisResult* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Status)(__x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CIInkAnalysisResult* This,
        enum __x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CInkAnalysisStatus* value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CIInkAnalysisResultVtbl;

    interface __x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CIInkAnalysisResult
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CIInkAnalysisResultVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CIInkAnalysisResult;
#endif /* !defined(____x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CIInkAnalysisResult_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CIInkAnalysisRoot_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CIInkAnalysisRoot_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CIInkAnalysisRootVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CIInkAnalysisRoot* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CIInkAnalysisRoot* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CIInkAnalysisRoot* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CIInkAnalysisRoot* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CIInkAnalysisRoot* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CIInkAnalysisRoot* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_RecognizedText)(__x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CIInkAnalysisRoot* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* FindNodes)(__x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CIInkAnalysisRoot* This,
        enum __x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CInkAnalysisNodeKind nodeKind,
        __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CInking__CAnalysis__CIInkAnalysisNode** result);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CIInkAnalysisRootVtbl;

    interface __x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CIInkAnalysisRoot
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CIInkAnalysisRootVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CIInkAnalysisRoot;
#endif /* !defined(____x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CIInkAnalysisRoot_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CIInkAnalysisWritingRegion_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CIInkAnalysisWritingRegion_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CIInkAnalysisWritingRegionVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CIInkAnalysisWritingRegion* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CIInkAnalysisWritingRegion* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CIInkAnalysisWritingRegion* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CIInkAnalysisWritingRegion* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CIInkAnalysisWritingRegion* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CIInkAnalysisWritingRegion* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_RecognizedText)(__x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CIInkAnalysisWritingRegion* This,
        HSTRING* value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CIInkAnalysisWritingRegionVtbl;

    interface __x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CIInkAnalysisWritingRegion
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CIInkAnalysisWritingRegionVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CIInkAnalysisWritingRegion;
#endif /* !defined(____x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CIInkAnalysisWritingRegion_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CIInkAnalyzer_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CIInkAnalyzer_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CIInkAnalyzerVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CIInkAnalyzer* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CIInkAnalyzer* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CIInkAnalyzer* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CIInkAnalyzer* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CIInkAnalyzer* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CIInkAnalyzer* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_AnalysisRoot)(__x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CIInkAnalyzer* This,
        __x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CIInkAnalysisRoot** value);
    HRESULT (STDMETHODCALLTYPE* get_IsAnalyzing)(__x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CIInkAnalyzer* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* AddDataForStroke)(__x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CIInkAnalyzer* This,
        __x_ABI_CWindows_CUI_CInput_CInking_CIInkStroke* stroke);
    HRESULT (STDMETHODCALLTYPE* AddDataForStrokes)(__x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CIInkAnalyzer* This,
        __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CInput__CInking__CInkStroke* strokes);
    HRESULT (STDMETHODCALLTYPE* ClearDataForAllStrokes)(__x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CIInkAnalyzer* This);
    HRESULT (STDMETHODCALLTYPE* RemoveDataForStroke)(__x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CIInkAnalyzer* This,
        UINT32 strokeId);
    HRESULT (STDMETHODCALLTYPE* RemoveDataForStrokes)(__x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CIInkAnalyzer* This,
        __x_ABI_C__FIIterable_1_UINT32* strokeIds);
    HRESULT (STDMETHODCALLTYPE* ReplaceDataForStroke)(__x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CIInkAnalyzer* This,
        __x_ABI_CWindows_CUI_CInput_CInking_CIInkStroke* stroke);
    HRESULT (STDMETHODCALLTYPE* SetStrokeDataKind)(__x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CIInkAnalyzer* This,
        UINT32 strokeId,
        enum __x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CInkAnalysisStrokeKind strokeKind);
    HRESULT (STDMETHODCALLTYPE* AnalyzeAsync)(__x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CIInkAnalyzer* This,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CUI__CInput__CInking__CAnalysis__CInkAnalysisResult** result);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CIInkAnalyzerVtbl;

    interface __x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CIInkAnalyzer
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CIInkAnalyzerVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CIInkAnalyzer;
#endif /* !defined(____x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CIInkAnalyzer_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CIInkAnalyzerFactory_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CIInkAnalyzerFactory_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CIInkAnalyzerFactoryVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CIInkAnalyzerFactory* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CIInkAnalyzerFactory* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CIInkAnalyzerFactory* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CIInkAnalyzerFactory* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CIInkAnalyzerFactory* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CIInkAnalyzerFactory* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* CreateAnalyzer)(__x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CIInkAnalyzerFactory* This,
        __x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CIInkAnalyzer** result);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CIInkAnalyzerFactoryVtbl;

    interface __x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CIInkAnalyzerFactory
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CIInkAnalyzerFactoryVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CIInkAnalyzerFactory;
#endif /* !defined(____x_ABI_CWindows_CUI_CInput_CInking_CAnalysis_CIInkAnalyzerFactory_INTERFACE_DEFINED__) */
    

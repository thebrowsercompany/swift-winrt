// WARNING: Please don't edit this file. It was generated by Swift/WinRT v0.0.1

#pragma once
// Header files for imported files
#include <inspectable.h>
#include <EventToken.h>
#include <windowscontracts.h>
#include "Windows.Foundation.h"
#include "Windows.Globalization.h"
#include "Windows.Graphics.Imaging.h"
// Importing Collections header
#include "Windows.Foundation.Collections.h"

/* Forward Declarations */
#ifndef ____x_ABI_CWindows_CMedia_COcr_CIOcrEngine_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_COcr_CIOcrEngine_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_COcr_CIOcrEngine __x_ABI_CWindows_CMedia_COcr_CIOcrEngine;

#endif // ____x_ABI_CWindows_CMedia_COcr_CIOcrEngine_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_COcr_CIOcrEngineStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_COcr_CIOcrEngineStatics_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_COcr_CIOcrEngineStatics __x_ABI_CWindows_CMedia_COcr_CIOcrEngineStatics;

#endif // ____x_ABI_CWindows_CMedia_COcr_CIOcrEngineStatics_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_COcr_CIOcrLine_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_COcr_CIOcrLine_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_COcr_CIOcrLine __x_ABI_CWindows_CMedia_COcr_CIOcrLine;

#endif // ____x_ABI_CWindows_CMedia_COcr_CIOcrLine_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_COcr_CIOcrResult_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_COcr_CIOcrResult_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_COcr_CIOcrResult __x_ABI_CWindows_CMedia_COcr_CIOcrResult;

#endif // ____x_ABI_CWindows_CMedia_COcr_CIOcrResult_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_COcr_CIOcrWord_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_COcr_CIOcrWord_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_COcr_CIOcrWord __x_ABI_CWindows_CMedia_COcr_CIOcrWord;

#endif // ____x_ABI_CWindows_CMedia_COcr_CIOcrWord_FWD_DEFINED__

// Parameterized interface forward declarations (C)

// Collection interface definitions

typedef interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__COcr__COcrResult __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__COcr__COcrResult;

#if !defined(____x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__COcr__COcrResult_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__COcr__COcrResult_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__COcr__COcrResult __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__COcr__COcrResult;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__COcr__COcrResult;

    typedef struct __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__COcr__COcrResultVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__COcr__COcrResult* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__COcr__COcrResult* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__COcr__COcrResult* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__COcr__COcrResult* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__COcr__COcrResult* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__COcr__COcrResult* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* put_Completed)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__COcr__COcrResult* This,
        __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__COcr__COcrResult* handler);
    HRESULT (STDMETHODCALLTYPE* get_Completed)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__COcr__COcrResult* This,
        __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__COcr__COcrResult** result);
    HRESULT (STDMETHODCALLTYPE* GetResults)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__COcr__COcrResult* This,
        __x_ABI_CWindows_CMedia_COcr_CIOcrResult** result);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__COcr__COcrResultVtbl;

    interface __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__COcr__COcrResult
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__COcr__COcrResultVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__COcr__COcrResult_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__COcr__COcrResult_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__COcr__COcrResult_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__COcr__COcrResult __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__COcr__COcrResult;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__COcr__COcrResult;

    typedef struct __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__COcr__COcrResultVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__COcr__COcrResult* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__COcr__COcrResult* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__COcr__COcrResult* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__COcr__COcrResult* This,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__COcr__COcrResult* asyncInfo,
        enum __x_ABI_CWindows_CFoundation_CAsyncStatus asyncStatus);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__COcr__COcrResultVtbl;

    interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__COcr__COcrResult
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__COcr__COcrResultVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__COcr__COcrResult_INTERFACE_DEFINED__
    
#ifndef ____x_ABI_CWindows_CGlobalization_CILanguage_FWD_DEFINED__
#define ____x_ABI_CWindows_CGlobalization_CILanguage_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CGlobalization_CILanguage __x_ABI_CWindows_CGlobalization_CILanguage;

#endif // ____x_ABI_CWindows_CGlobalization_CILanguage_FWD_DEFINED__

#if !defined(____x_ABI_C__FIIterator_1___x_ABI_CWindows__CGlobalization__CLanguage_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CGlobalization__CLanguage_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CGlobalization__CLanguage __x_ABI_C__FIIterator_1___x_ABI_CWindows__CGlobalization__CLanguage;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterator_1___x_ABI_CWindows__CGlobalization__CLanguage;

    typedef struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CGlobalization__CLanguageVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CGlobalization__CLanguage* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CGlobalization__CLanguage* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CGlobalization__CLanguage* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CGlobalization__CLanguage* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CGlobalization__CLanguage* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CGlobalization__CLanguage* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Current)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CGlobalization__CLanguage* This,
        __x_ABI_CWindows_CGlobalization_CILanguage** result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CGlobalization__CLanguage* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CGlobalization__CLanguage* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CGlobalization__CLanguage* This,
        UINT32 itemsLength,
        __x_ABI_CWindows_CGlobalization_CILanguage** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIIterator_1___x_ABI_CWindows__CGlobalization__CLanguageVtbl;

    interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CGlobalization__CLanguage
    {
        CONST_VTBL struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CGlobalization__CLanguageVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CGlobalization__CLanguage_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterable_1___x_ABI_CWindows__CGlobalization__CLanguage_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CGlobalization__CLanguage_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CGlobalization__CLanguage __x_ABI_C__FIIterable_1___x_ABI_CWindows__CGlobalization__CLanguage;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterable_1___x_ABI_CWindows__CGlobalization__CLanguage;

    typedef struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CGlobalization__CLanguageVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CGlobalization__CLanguage* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CGlobalization__CLanguage* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CGlobalization__CLanguage* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CGlobalization__CLanguage* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CGlobalization__CLanguage* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CGlobalization__CLanguage* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* First)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CGlobalization__CLanguage* This,
        __x_ABI_C__FIIterator_1___x_ABI_CWindows__CGlobalization__CLanguage** result);

        END_INTERFACE
    } __x_ABI_C__FIIterable_1___x_ABI_CWindows__CGlobalization__CLanguageVtbl;

    interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CGlobalization__CLanguage
    {
        CONST_VTBL struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CGlobalization__CLanguageVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CGlobalization__CLanguage_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__COcr__COcrLine_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__COcr__COcrLine_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__COcr__COcrLine __x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__COcr__COcrLine;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__COcr__COcrLine;

    typedef struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__COcr__COcrLineVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__COcr__COcrLine* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__COcr__COcrLine* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__COcr__COcrLine* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__COcr__COcrLine* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__COcr__COcrLine* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__COcr__COcrLine* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Current)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__COcr__COcrLine* This,
        __x_ABI_CWindows_CMedia_COcr_CIOcrLine** result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__COcr__COcrLine* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__COcr__COcrLine* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__COcr__COcrLine* This,
        UINT32 itemsLength,
        __x_ABI_CWindows_CMedia_COcr_CIOcrLine** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__COcr__COcrLineVtbl;

    interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__COcr__COcrLine
    {
        CONST_VTBL struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__COcr__COcrLineVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__COcr__COcrLine_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__COcr__COcrLine_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__COcr__COcrLine_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__COcr__COcrLine __x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__COcr__COcrLine;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__COcr__COcrLine;

    typedef struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__COcr__COcrLineVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__COcr__COcrLine* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__COcr__COcrLine* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__COcr__COcrLine* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__COcr__COcrLine* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__COcr__COcrLine* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__COcr__COcrLine* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* First)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__COcr__COcrLine* This,
        __x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__COcr__COcrLine** result);

        END_INTERFACE
    } __x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__COcr__COcrLineVtbl;

    interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__COcr__COcrLine
    {
        CONST_VTBL struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__COcr__COcrLineVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__COcr__COcrLine_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__COcr__COcrWord_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__COcr__COcrWord_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__COcr__COcrWord __x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__COcr__COcrWord;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__COcr__COcrWord;

    typedef struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__COcr__COcrWordVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__COcr__COcrWord* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__COcr__COcrWord* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__COcr__COcrWord* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__COcr__COcrWord* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__COcr__COcrWord* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__COcr__COcrWord* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Current)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__COcr__COcrWord* This,
        __x_ABI_CWindows_CMedia_COcr_CIOcrWord** result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__COcr__COcrWord* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__COcr__COcrWord* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__COcr__COcrWord* This,
        UINT32 itemsLength,
        __x_ABI_CWindows_CMedia_COcr_CIOcrWord** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__COcr__COcrWordVtbl;

    interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__COcr__COcrWord
    {
        CONST_VTBL struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__COcr__COcrWordVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__COcr__COcrWord_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__COcr__COcrWord_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__COcr__COcrWord_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__COcr__COcrWord __x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__COcr__COcrWord;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__COcr__COcrWord;

    typedef struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__COcr__COcrWordVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__COcr__COcrWord* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__COcr__COcrWord* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__COcr__COcrWord* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__COcr__COcrWord* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__COcr__COcrWord* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__COcr__COcrWord* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* First)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__COcr__COcrWord* This,
        __x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__COcr__COcrWord** result);

        END_INTERFACE
    } __x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__COcr__COcrWordVtbl;

    interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__COcr__COcrWord
    {
        CONST_VTBL struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__COcr__COcrWordVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__COcr__COcrWord_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CGlobalization__CLanguage_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CGlobalization__CLanguage_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CGlobalization__CLanguage __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CGlobalization__CLanguage;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CGlobalization__CLanguage;

    typedef struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CGlobalization__CLanguageVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CGlobalization__CLanguage* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CGlobalization__CLanguage* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CGlobalization__CLanguage* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CGlobalization__CLanguage* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CGlobalization__CLanguage* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CGlobalization__CLanguage* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CGlobalization__CLanguage* This,
        UINT32 index,
        __x_ABI_CWindows_CGlobalization_CILanguage** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CGlobalization__CLanguage* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CGlobalization__CLanguage* This,
        __x_ABI_CWindows_CGlobalization_CILanguage* value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CGlobalization__CLanguage* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        __x_ABI_CWindows_CGlobalization_CILanguage** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CGlobalization__CLanguageVtbl;

    interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CGlobalization__CLanguage
    {
        CONST_VTBL struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CGlobalization__CLanguageVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CGlobalization__CLanguage_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__COcr__COcrLine_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__COcr__COcrLine_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__COcr__COcrLine __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__COcr__COcrLine;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__COcr__COcrLine;

    typedef struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__COcr__COcrLineVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__COcr__COcrLine* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__COcr__COcrLine* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__COcr__COcrLine* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__COcr__COcrLine* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__COcr__COcrLine* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__COcr__COcrLine* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__COcr__COcrLine* This,
        UINT32 index,
        __x_ABI_CWindows_CMedia_COcr_CIOcrLine** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__COcr__COcrLine* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__COcr__COcrLine* This,
        __x_ABI_CWindows_CMedia_COcr_CIOcrLine* value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__COcr__COcrLine* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        __x_ABI_CWindows_CMedia_COcr_CIOcrLine** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__COcr__COcrLineVtbl;

    interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__COcr__COcrLine
    {
        CONST_VTBL struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__COcr__COcrLineVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__COcr__COcrLine_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__COcr__COcrWord_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__COcr__COcrWord_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__COcr__COcrWord __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__COcr__COcrWord;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__COcr__COcrWord;

    typedef struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__COcr__COcrWordVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__COcr__COcrWord* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__COcr__COcrWord* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__COcr__COcrWord* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__COcr__COcrWord* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__COcr__COcrWord* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__COcr__COcrWord* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__COcr__COcrWord* This,
        UINT32 index,
        __x_ABI_CWindows_CMedia_COcr_CIOcrWord** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__COcr__COcrWord* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__COcr__COcrWord* This,
        __x_ABI_CWindows_CMedia_COcr_CIOcrWord* value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__COcr__COcrWord* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        __x_ABI_CWindows_CMedia_COcr_CIOcrWord** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__COcr__COcrWordVtbl;

    interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__COcr__COcrWord
    {
        CONST_VTBL struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__COcr__COcrWordVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__COcr__COcrWord_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIReference_1_double_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIReference_1_double_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIReference_1_double __x_ABI_C__FIReference_1_double;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIReference_1_double;

    typedef struct __x_ABI_C__FIReference_1_doubleVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIReference_1_double* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIReference_1_double* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIReference_1_double* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIReference_1_double* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIReference_1_double* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIReference_1_double* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Value)(__x_ABI_C__FIReference_1_double* This,
        DOUBLE* result);

        END_INTERFACE
    } __x_ABI_C__FIReference_1_doubleVtbl;

    interface __x_ABI_C__FIReference_1_double
    {
        CONST_VTBL struct __x_ABI_C__FIReference_1_doubleVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIReference_1_double_INTERFACE_DEFINED__
    
typedef enum __x_ABI_CWindows_CFoundation_CAsyncStatus __x_ABI_CWindows_CFoundation_CAsyncStatus;

#ifndef ____x_ABI_CWindows_CFoundation_CIAsyncInfo_FWD_DEFINED__
#define ____x_ABI_CWindows_CFoundation_CIAsyncInfo_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CFoundation_CIAsyncInfo __x_ABI_CWindows_CFoundation_CIAsyncInfo;

#endif // ____x_ABI_CWindows_CFoundation_CIAsyncInfo_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CFoundation_CIPropertyValue_FWD_DEFINED__
#define ____x_ABI_CWindows_CFoundation_CIPropertyValue_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CFoundation_CIPropertyValue __x_ABI_CWindows_CFoundation_CIPropertyValue;

#endif // ____x_ABI_CWindows_CFoundation_CIPropertyValue_FWD_DEFINED__

typedef struct __x_ABI_CWindows_CFoundation_CRect __x_ABI_CWindows_CFoundation_CRect;

#ifndef ____x_ABI_CWindows_CGraphics_CImaging_CISoftwareBitmap_FWD_DEFINED__
#define ____x_ABI_CWindows_CGraphics_CImaging_CISoftwareBitmap_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CGraphics_CImaging_CISoftwareBitmap __x_ABI_CWindows_CGraphics_CImaging_CISoftwareBitmap;

#endif // ____x_ABI_CWindows_CGraphics_CImaging_CISoftwareBitmap_FWD_DEFINED__

#if !defined(____x_ABI_CWindows_CMedia_COcr_CIOcrEngine_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CMedia_COcr_CIOcrEngine_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CMedia_COcr_CIOcrEngineVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_COcr_CIOcrEngine* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_COcr_CIOcrEngine* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_COcr_CIOcrEngine* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_COcr_CIOcrEngine* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_COcr_CIOcrEngine* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_COcr_CIOcrEngine* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* RecognizeAsync)(__x_ABI_CWindows_CMedia_COcr_CIOcrEngine* This,
        __x_ABI_CWindows_CGraphics_CImaging_CISoftwareBitmap* bitmap,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__COcr__COcrResult** result);
    HRESULT (STDMETHODCALLTYPE* get_RecognizerLanguage)(__x_ABI_CWindows_CMedia_COcr_CIOcrEngine* This,
        __x_ABI_CWindows_CGlobalization_CILanguage** value);

        END_INTERFACE
    } __x_ABI_CWindows_CMedia_COcr_CIOcrEngineVtbl;

    interface __x_ABI_CWindows_CMedia_COcr_CIOcrEngine
    {
        CONST_VTBL struct __x_ABI_CWindows_CMedia_COcr_CIOcrEngineVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CMedia_COcr_CIOcrEngine;
#endif /* !defined(____x_ABI_CWindows_CMedia_COcr_CIOcrEngine_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CMedia_COcr_CIOcrEngineStatics_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CMedia_COcr_CIOcrEngineStatics_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CMedia_COcr_CIOcrEngineStaticsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_COcr_CIOcrEngineStatics* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_COcr_CIOcrEngineStatics* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_COcr_CIOcrEngineStatics* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_COcr_CIOcrEngineStatics* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_COcr_CIOcrEngineStatics* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_COcr_CIOcrEngineStatics* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_MaxImageDimension)(__x_ABI_CWindows_CMedia_COcr_CIOcrEngineStatics* This,
        UINT32* value);
    HRESULT (STDMETHODCALLTYPE* get_AvailableRecognizerLanguages)(__x_ABI_CWindows_CMedia_COcr_CIOcrEngineStatics* This,
        __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CGlobalization__CLanguage** value);
    HRESULT (STDMETHODCALLTYPE* IsLanguageSupported)(__x_ABI_CWindows_CMedia_COcr_CIOcrEngineStatics* This,
        __x_ABI_CWindows_CGlobalization_CILanguage* language,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* TryCreateFromLanguage)(__x_ABI_CWindows_CMedia_COcr_CIOcrEngineStatics* This,
        __x_ABI_CWindows_CGlobalization_CILanguage* language,
        __x_ABI_CWindows_CMedia_COcr_CIOcrEngine** result);
    HRESULT (STDMETHODCALLTYPE* TryCreateFromUserProfileLanguages)(__x_ABI_CWindows_CMedia_COcr_CIOcrEngineStatics* This,
        __x_ABI_CWindows_CMedia_COcr_CIOcrEngine** result);

        END_INTERFACE
    } __x_ABI_CWindows_CMedia_COcr_CIOcrEngineStaticsVtbl;

    interface __x_ABI_CWindows_CMedia_COcr_CIOcrEngineStatics
    {
        CONST_VTBL struct __x_ABI_CWindows_CMedia_COcr_CIOcrEngineStaticsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CMedia_COcr_CIOcrEngineStatics;
#endif /* !defined(____x_ABI_CWindows_CMedia_COcr_CIOcrEngineStatics_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CMedia_COcr_CIOcrLine_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CMedia_COcr_CIOcrLine_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CMedia_COcr_CIOcrLineVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_COcr_CIOcrLine* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_COcr_CIOcrLine* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_COcr_CIOcrLine* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_COcr_CIOcrLine* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_COcr_CIOcrLine* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_COcr_CIOcrLine* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Words)(__x_ABI_CWindows_CMedia_COcr_CIOcrLine* This,
        __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__COcr__COcrWord** value);
    HRESULT (STDMETHODCALLTYPE* get_Text)(__x_ABI_CWindows_CMedia_COcr_CIOcrLine* This,
        HSTRING* value);

        END_INTERFACE
    } __x_ABI_CWindows_CMedia_COcr_CIOcrLineVtbl;

    interface __x_ABI_CWindows_CMedia_COcr_CIOcrLine
    {
        CONST_VTBL struct __x_ABI_CWindows_CMedia_COcr_CIOcrLineVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CMedia_COcr_CIOcrLine;
#endif /* !defined(____x_ABI_CWindows_CMedia_COcr_CIOcrLine_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CMedia_COcr_CIOcrResult_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CMedia_COcr_CIOcrResult_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CMedia_COcr_CIOcrResultVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_COcr_CIOcrResult* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_COcr_CIOcrResult* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_COcr_CIOcrResult* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_COcr_CIOcrResult* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_COcr_CIOcrResult* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_COcr_CIOcrResult* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Lines)(__x_ABI_CWindows_CMedia_COcr_CIOcrResult* This,
        __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__COcr__COcrLine** value);
    HRESULT (STDMETHODCALLTYPE* get_TextAngle)(__x_ABI_CWindows_CMedia_COcr_CIOcrResult* This,
        __x_ABI_C__FIReference_1_double** value);
    HRESULT (STDMETHODCALLTYPE* get_Text)(__x_ABI_CWindows_CMedia_COcr_CIOcrResult* This,
        HSTRING* value);

        END_INTERFACE
    } __x_ABI_CWindows_CMedia_COcr_CIOcrResultVtbl;

    interface __x_ABI_CWindows_CMedia_COcr_CIOcrResult
    {
        CONST_VTBL struct __x_ABI_CWindows_CMedia_COcr_CIOcrResultVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CMedia_COcr_CIOcrResult;
#endif /* !defined(____x_ABI_CWindows_CMedia_COcr_CIOcrResult_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CMedia_COcr_CIOcrWord_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CMedia_COcr_CIOcrWord_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CMedia_COcr_CIOcrWordVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_COcr_CIOcrWord* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_COcr_CIOcrWord* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_COcr_CIOcrWord* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_COcr_CIOcrWord* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_COcr_CIOcrWord* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_COcr_CIOcrWord* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_BoundingRect)(__x_ABI_CWindows_CMedia_COcr_CIOcrWord* This,
        struct __x_ABI_CWindows_CFoundation_CRect* value);
    HRESULT (STDMETHODCALLTYPE* get_Text)(__x_ABI_CWindows_CMedia_COcr_CIOcrWord* This,
        HSTRING* value);

        END_INTERFACE
    } __x_ABI_CWindows_CMedia_COcr_CIOcrWordVtbl;

    interface __x_ABI_CWindows_CMedia_COcr_CIOcrWord
    {
        CONST_VTBL struct __x_ABI_CWindows_CMedia_COcr_CIOcrWordVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CMedia_COcr_CIOcrWord;
#endif /* !defined(____x_ABI_CWindows_CMedia_COcr_CIOcrWord_INTERFACE_DEFINED__) */
    

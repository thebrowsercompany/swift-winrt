// WARNING: Please don't edit this file. It was generated by Swift/WinRT v0.0.1

#pragma once
// Header files for imported files
#include <inspectable.h>
#include <EventToken.h>
#include <windowscontracts.h>
#include "Windows.Foundation.h"
#include "Windows.Foundation.Numerics.h"
#include "Windows.Media.MediaProperties.h"
#include "Windows.Perception.Spatial.h"
// Importing Collections header
#include "Windows.Foundation.Collections.h"

/* Forward Declarations */
#ifndef ____x_ABI_CWindows_CMedia_CDevices_CCore_CICameraIntrinsics_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CDevices_CCore_CICameraIntrinsics_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_CDevices_CCore_CICameraIntrinsics __x_ABI_CWindows_CMedia_CDevices_CCore_CICameraIntrinsics;

#endif // ____x_ABI_CWindows_CMedia_CDevices_CCore_CICameraIntrinsics_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CDevices_CCore_CICameraIntrinsics2_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CDevices_CCore_CICameraIntrinsics2_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_CDevices_CCore_CICameraIntrinsics2 __x_ABI_CWindows_CMedia_CDevices_CCore_CICameraIntrinsics2;

#endif // ____x_ABI_CWindows_CMedia_CDevices_CCore_CICameraIntrinsics2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CDevices_CCore_CICameraIntrinsicsFactory_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CDevices_CCore_CICameraIntrinsicsFactory_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_CDevices_CCore_CICameraIntrinsicsFactory __x_ABI_CWindows_CMedia_CDevices_CCore_CICameraIntrinsicsFactory;

#endif // ____x_ABI_CWindows_CMedia_CDevices_CCore_CICameraIntrinsicsFactory_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CDevices_CCore_CIDepthCorrelatedCoordinateMapper_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CDevices_CCore_CIDepthCorrelatedCoordinateMapper_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_CDevices_CCore_CIDepthCorrelatedCoordinateMapper __x_ABI_CWindows_CMedia_CDevices_CCore_CIDepthCorrelatedCoordinateMapper;

#endif // ____x_ABI_CWindows_CMedia_CDevices_CCore_CIDepthCorrelatedCoordinateMapper_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameControlCapabilities_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameControlCapabilities_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameControlCapabilities __x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameControlCapabilities;

#endif // ____x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameControlCapabilities_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameControlCapabilities2_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameControlCapabilities2_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameControlCapabilities2 __x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameControlCapabilities2;

#endif // ____x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameControlCapabilities2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameController_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameController_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameController __x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameController;

#endif // ____x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameController_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameController2_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameController2_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameController2 __x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameController2;

#endif // ____x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameController2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameExposureCapabilities_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameExposureCapabilities_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameExposureCapabilities __x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameExposureCapabilities;

#endif // ____x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameExposureCapabilities_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameExposureCompensationCapabilities_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameExposureCompensationCapabilities_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameExposureCompensationCapabilities __x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameExposureCompensationCapabilities;

#endif // ____x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameExposureCompensationCapabilities_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameExposureCompensationControl_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameExposureCompensationControl_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameExposureCompensationControl __x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameExposureCompensationControl;

#endif // ____x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameExposureCompensationControl_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameExposureControl_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameExposureControl_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameExposureControl __x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameExposureControl;

#endif // ____x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameExposureControl_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameFlashCapabilities_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameFlashCapabilities_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameFlashCapabilities __x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameFlashCapabilities;

#endif // ____x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameFlashCapabilities_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameFlashControl_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameFlashControl_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameFlashControl __x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameFlashControl;

#endif // ____x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameFlashControl_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameFocusCapabilities_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameFocusCapabilities_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameFocusCapabilities __x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameFocusCapabilities;

#endif // ____x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameFocusCapabilities_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameFocusControl_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameFocusControl_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameFocusControl __x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameFocusControl;

#endif // ____x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameFocusControl_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameIsoSpeedCapabilities_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameIsoSpeedCapabilities_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameIsoSpeedCapabilities __x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameIsoSpeedCapabilities;

#endif // ____x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameIsoSpeedCapabilities_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameIsoSpeedControl_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameIsoSpeedControl_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameIsoSpeedControl __x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameIsoSpeedControl;

#endif // ____x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameIsoSpeedControl_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CDevices_CCore_CIVariablePhotoSequenceController_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CDevices_CCore_CIVariablePhotoSequenceController_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_CDevices_CCore_CIVariablePhotoSequenceController __x_ABI_CWindows_CMedia_CDevices_CCore_CIVariablePhotoSequenceController;

#endif // ____x_ABI_CWindows_CMedia_CDevices_CCore_CIVariablePhotoSequenceController_FWD_DEFINED__

// Parameterized interface forward declarations (C)

// Collection interface definitions

#if !defined(____x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CDevices__CCore__CFrameController_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CDevices__CCore__CFrameController_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CDevices__CCore__CFrameController __x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CDevices__CCore__CFrameController;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CDevices__CCore__CFrameController;

    typedef struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CDevices__CCore__CFrameControllerVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CDevices__CCore__CFrameController* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CDevices__CCore__CFrameController* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CDevices__CCore__CFrameController* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CDevices__CCore__CFrameController* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CDevices__CCore__CFrameController* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CDevices__CCore__CFrameController* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Current)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CDevices__CCore__CFrameController* This,
        __x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameController** result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CDevices__CCore__CFrameController* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CDevices__CCore__CFrameController* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CDevices__CCore__CFrameController* This,
        UINT32 itemsLength,
        __x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameController** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CDevices__CCore__CFrameControllerVtbl;

    interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CDevices__CCore__CFrameController
    {
        CONST_VTBL struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CDevices__CCore__CFrameControllerVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CDevices__CCore__CFrameController_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CDevices__CCore__CFrameController_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CDevices__CCore__CFrameController_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CDevices__CCore__CFrameController __x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CDevices__CCore__CFrameController;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CDevices__CCore__CFrameController;

    typedef struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CDevices__CCore__CFrameControllerVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CDevices__CCore__CFrameController* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CDevices__CCore__CFrameController* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CDevices__CCore__CFrameController* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CDevices__CCore__CFrameController* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CDevices__CCore__CFrameController* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CDevices__CCore__CFrameController* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* First)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CDevices__CCore__CFrameController* This,
        __x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CDevices__CCore__CFrameController** result);

        END_INTERFACE
    } __x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CDevices__CCore__CFrameControllerVtbl;

    interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CDevices__CCore__CFrameController
    {
        CONST_VTBL struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CDevices__CCore__CFrameControllerVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CDevices__CCore__CFrameController_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CDevices__CCore__CFrameController_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CDevices__CCore__CFrameController_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CDevices__CCore__CFrameController __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CDevices__CCore__CFrameController;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CDevices__CCore__CFrameController;

    typedef struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CDevices__CCore__CFrameControllerVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CDevices__CCore__CFrameController* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CDevices__CCore__CFrameController* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CDevices__CCore__CFrameController* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CDevices__CCore__CFrameController* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CDevices__CCore__CFrameController* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CDevices__CCore__CFrameController* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CDevices__CCore__CFrameController* This,
        UINT32 index,
        __x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameController** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CDevices__CCore__CFrameController* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CDevices__CCore__CFrameController* This,
        __x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameController* value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CDevices__CCore__CFrameController* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        __x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameController** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CDevices__CCore__CFrameControllerVtbl;

    interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CDevices__CCore__CFrameController
    {
        CONST_VTBL struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CDevices__CCore__CFrameControllerVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CDevices__CCore__CFrameController_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CDevices__CCore__CFrameController_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CDevices__CCore__CFrameController_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CDevices__CCore__CFrameController __x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CDevices__CCore__CFrameController;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CDevices__CCore__CFrameController;

    typedef struct __x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CDevices__CCore__CFrameControllerVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CDevices__CCore__CFrameController* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CDevices__CCore__CFrameController* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CDevices__CCore__CFrameController* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CDevices__CCore__CFrameController* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CDevices__CCore__CFrameController* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CDevices__CCore__CFrameController* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CDevices__CCore__CFrameController* This,
        UINT32 index,
        __x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameController** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CDevices__CCore__CFrameController* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* GetView)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CDevices__CCore__CFrameController* This,
        __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CDevices__CCore__CFrameController** result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CDevices__CCore__CFrameController* This,
        __x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameController* value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* SetAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CDevices__CCore__CFrameController* This,
        UINT32 index,
        __x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameController* value);
    HRESULT (STDMETHODCALLTYPE* InsertAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CDevices__CCore__CFrameController* This,
        UINT32 index,
        __x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameController* value);
    HRESULT (STDMETHODCALLTYPE* RemoveAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CDevices__CCore__CFrameController* This,
        UINT32 index);
    HRESULT (STDMETHODCALLTYPE* Append)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CDevices__CCore__CFrameController* This,
        __x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameController* value);
    HRESULT (STDMETHODCALLTYPE* RemoveAtEnd)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CDevices__CCore__CFrameController* This);
    HRESULT (STDMETHODCALLTYPE* Clear)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CDevices__CCore__CFrameController* This);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CDevices__CCore__CFrameController* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        __x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameController** items,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* ReplaceAll)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CDevices__CCore__CFrameController* This,
        UINT32 itemsLength,
        __x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameController** items);

        END_INTERFACE
    } __x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CDevices__CCore__CFrameControllerVtbl;

    interface __x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CDevices__CCore__CFrameController
    {
        CONST_VTBL struct __x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CDevices__CCore__CFrameControllerVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CDevices__CCore__CFrameController_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIReference_1_boolean_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIReference_1_boolean_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIReference_1_boolean __x_ABI_C__FIReference_1_boolean;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIReference_1_boolean;

    typedef struct __x_ABI_C__FIReference_1_booleanVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIReference_1_boolean* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIReference_1_boolean* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIReference_1_boolean* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIReference_1_boolean* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIReference_1_boolean* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIReference_1_boolean* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Value)(__x_ABI_C__FIReference_1_boolean* This,
        boolean* result);

        END_INTERFACE
    } __x_ABI_C__FIReference_1_booleanVtbl;

    interface __x_ABI_C__FIReference_1_boolean
    {
        CONST_VTBL struct __x_ABI_C__FIReference_1_booleanVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIReference_1_boolean_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIReference_1_float_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIReference_1_float_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIReference_1_float __x_ABI_C__FIReference_1_float;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIReference_1_float;

    typedef struct __x_ABI_C__FIReference_1_floatVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIReference_1_float* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIReference_1_float* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIReference_1_float* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIReference_1_float* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIReference_1_float* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIReference_1_float* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Value)(__x_ABI_C__FIReference_1_float* This,
        FLOAT* result);

        END_INTERFACE
    } __x_ABI_C__FIReference_1_floatVtbl;

    interface __x_ABI_C__FIReference_1_float
    {
        CONST_VTBL struct __x_ABI_C__FIReference_1_floatVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIReference_1_float_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIReference_1_UINT32_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIReference_1_UINT32_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIReference_1_UINT32 __x_ABI_C__FIReference_1_UINT32;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIReference_1_UINT32;

    typedef struct __x_ABI_C__FIReference_1_UINT32Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIReference_1_UINT32* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIReference_1_UINT32* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIReference_1_UINT32* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIReference_1_UINT32* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIReference_1_UINT32* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIReference_1_UINT32* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Value)(__x_ABI_C__FIReference_1_UINT32* This,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIReference_1_UINT32Vtbl;

    interface __x_ABI_C__FIReference_1_UINT32
    {
        CONST_VTBL struct __x_ABI_C__FIReference_1_UINT32Vtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIReference_1_UINT32_INTERFACE_DEFINED__
    
typedef struct __x_ABI_CWindows_CFoundation_CTimeSpan __x_ABI_CWindows_CFoundation_CTimeSpan;

#if !defined(____x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CTimeSpan_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CTimeSpan_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CTimeSpan __x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CTimeSpan;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CTimeSpan;

    typedef struct __x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CTimeSpanVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CTimeSpan* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CTimeSpan* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CTimeSpan* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CTimeSpan* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CTimeSpan* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CTimeSpan* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Value)(__x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CTimeSpan* This,
        struct __x_ABI_CWindows_CFoundation_CTimeSpan* result);

        END_INTERFACE
    } __x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CTimeSpanVtbl;

    interface __x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CTimeSpan
    {
        CONST_VTBL struct __x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CTimeSpanVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CTimeSpan_INTERFACE_DEFINED__
    
#ifndef ____x_ABI_CWindows_CFoundation_CIClosable_FWD_DEFINED__
#define ____x_ABI_CWindows_CFoundation_CIClosable_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CFoundation_CIClosable __x_ABI_CWindows_CFoundation_CIClosable;

#endif // ____x_ABI_CWindows_CFoundation_CIClosable_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CFoundation_CIPropertyValue_FWD_DEFINED__
#define ____x_ABI_CWindows_CFoundation_CIPropertyValue_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CFoundation_CIPropertyValue __x_ABI_CWindows_CFoundation_CIPropertyValue;

#endif // ____x_ABI_CWindows_CFoundation_CIPropertyValue_FWD_DEFINED__

typedef struct __x_ABI_CWindows_CFoundation_CNumerics_CMatrix4x4 __x_ABI_CWindows_CFoundation_CNumerics_CMatrix4x4;

typedef struct __x_ABI_CWindows_CFoundation_CNumerics_CVector2 __x_ABI_CWindows_CFoundation_CNumerics_CVector2;

typedef struct __x_ABI_CWindows_CFoundation_CNumerics_CVector3 __x_ABI_CWindows_CFoundation_CNumerics_CVector3;

typedef struct __x_ABI_CWindows_CFoundation_CPoint __x_ABI_CWindows_CFoundation_CPoint;

#ifndef ____x_ABI_CWindows_CMedia_CMediaProperties_CIMediaEncodingProperties_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CMediaProperties_CIMediaEncodingProperties_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_CMediaProperties_CIMediaEncodingProperties __x_ABI_CWindows_CMedia_CMediaProperties_CIMediaEncodingProperties;

#endif // ____x_ABI_CWindows_CMedia_CMediaProperties_CIMediaEncodingProperties_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CMediaProperties_CIMediaRatio_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CMediaProperties_CIMediaRatio_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_CMediaProperties_CIMediaRatio __x_ABI_CWindows_CMedia_CMediaProperties_CIMediaRatio;

#endif // ____x_ABI_CWindows_CMedia_CMediaProperties_CIMediaRatio_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CPerception_CSpatial_CISpatialCoordinateSystem_FWD_DEFINED__
#define ____x_ABI_CWindows_CPerception_CSpatial_CISpatialCoordinateSystem_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CPerception_CSpatial_CISpatialCoordinateSystem __x_ABI_CWindows_CPerception_CSpatial_CISpatialCoordinateSystem;

#endif // ____x_ABI_CWindows_CPerception_CSpatial_CISpatialCoordinateSystem_FWD_DEFINED__

typedef enum __x_ABI_CWindows_CMedia_CDevices_CCore_CFrameFlashMode __x_ABI_CWindows_CMedia_CDevices_CCore_CFrameFlashMode;

enum __x_ABI_CWindows_CMedia_CDevices_CCore_CFrameFlashMode
    {
        __x_ABI_CWindows_CMedia_CDevices_CCore_CFrameFlashMode_Disable = 0,
    __x_ABI_CWindows_CMedia_CDevices_CCore_CFrameFlashMode_Enable = 1,
    __x_ABI_CWindows_CMedia_CDevices_CCore_CFrameFlashMode_Global = 2,
};

#if !defined(____x_ABI_CWindows_CMedia_CDevices_CCore_CICameraIntrinsics_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CMedia_CDevices_CCore_CICameraIntrinsics_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CMedia_CDevices_CCore_CICameraIntrinsicsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CDevices_CCore_CICameraIntrinsics* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CDevices_CCore_CICameraIntrinsics* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CDevices_CCore_CICameraIntrinsics* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CDevices_CCore_CICameraIntrinsics* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CDevices_CCore_CICameraIntrinsics* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CDevices_CCore_CICameraIntrinsics* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_FocalLength)(__x_ABI_CWindows_CMedia_CDevices_CCore_CICameraIntrinsics* This,
        struct __x_ABI_CWindows_CFoundation_CNumerics_CVector2* value);
    HRESULT (STDMETHODCALLTYPE* get_PrincipalPoint)(__x_ABI_CWindows_CMedia_CDevices_CCore_CICameraIntrinsics* This,
        struct __x_ABI_CWindows_CFoundation_CNumerics_CVector2* value);
    HRESULT (STDMETHODCALLTYPE* get_RadialDistortion)(__x_ABI_CWindows_CMedia_CDevices_CCore_CICameraIntrinsics* This,
        struct __x_ABI_CWindows_CFoundation_CNumerics_CVector3* value);
    HRESULT (STDMETHODCALLTYPE* get_TangentialDistortion)(__x_ABI_CWindows_CMedia_CDevices_CCore_CICameraIntrinsics* This,
        struct __x_ABI_CWindows_CFoundation_CNumerics_CVector2* value);
    HRESULT (STDMETHODCALLTYPE* get_ImageWidth)(__x_ABI_CWindows_CMedia_CDevices_CCore_CICameraIntrinsics* This,
        UINT32* value);
    HRESULT (STDMETHODCALLTYPE* get_ImageHeight)(__x_ABI_CWindows_CMedia_CDevices_CCore_CICameraIntrinsics* This,
        UINT32* value);
    HRESULT (STDMETHODCALLTYPE* ProjectOntoFrame)(__x_ABI_CWindows_CMedia_CDevices_CCore_CICameraIntrinsics* This,
        struct __x_ABI_CWindows_CFoundation_CNumerics_CVector3 coordinate,
        struct __x_ABI_CWindows_CFoundation_CPoint* result);
    HRESULT (STDMETHODCALLTYPE* UnprojectAtUnitDepth)(__x_ABI_CWindows_CMedia_CDevices_CCore_CICameraIntrinsics* This,
        struct __x_ABI_CWindows_CFoundation_CPoint pixelCoordinate,
        struct __x_ABI_CWindows_CFoundation_CNumerics_CVector2* result);
    HRESULT (STDMETHODCALLTYPE* ProjectManyOntoFrame)(__x_ABI_CWindows_CMedia_CDevices_CCore_CICameraIntrinsics* This,
        UINT32 coordinatesLength,
        struct __x_ABI_CWindows_CFoundation_CNumerics_CVector3* coordinates,
        UINT32 resultsLength,
        struct __x_ABI_CWindows_CFoundation_CPoint* results);
    HRESULT (STDMETHODCALLTYPE* UnprojectPixelsAtUnitDepth)(__x_ABI_CWindows_CMedia_CDevices_CCore_CICameraIntrinsics* This,
        UINT32 pixelCoordinatesLength,
        struct __x_ABI_CWindows_CFoundation_CPoint* pixelCoordinates,
        UINT32 resultsLength,
        struct __x_ABI_CWindows_CFoundation_CNumerics_CVector2* results);

        END_INTERFACE
    } __x_ABI_CWindows_CMedia_CDevices_CCore_CICameraIntrinsicsVtbl;

    interface __x_ABI_CWindows_CMedia_CDevices_CCore_CICameraIntrinsics
    {
        CONST_VTBL struct __x_ABI_CWindows_CMedia_CDevices_CCore_CICameraIntrinsicsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CDevices_CCore_CICameraIntrinsics;
#endif /* !defined(____x_ABI_CWindows_CMedia_CDevices_CCore_CICameraIntrinsics_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CMedia_CDevices_CCore_CICameraIntrinsics2_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CMedia_CDevices_CCore_CICameraIntrinsics2_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CMedia_CDevices_CCore_CICameraIntrinsics2Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CDevices_CCore_CICameraIntrinsics2* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CDevices_CCore_CICameraIntrinsics2* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CDevices_CCore_CICameraIntrinsics2* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CDevices_CCore_CICameraIntrinsics2* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CDevices_CCore_CICameraIntrinsics2* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CDevices_CCore_CICameraIntrinsics2* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_UndistortedProjectionTransform)(__x_ABI_CWindows_CMedia_CDevices_CCore_CICameraIntrinsics2* This,
        struct __x_ABI_CWindows_CFoundation_CNumerics_CMatrix4x4* value);
    HRESULT (STDMETHODCALLTYPE* DistortPoint)(__x_ABI_CWindows_CMedia_CDevices_CCore_CICameraIntrinsics2* This,
        struct __x_ABI_CWindows_CFoundation_CPoint input,
        struct __x_ABI_CWindows_CFoundation_CPoint* result);
    HRESULT (STDMETHODCALLTYPE* DistortPoints)(__x_ABI_CWindows_CMedia_CDevices_CCore_CICameraIntrinsics2* This,
        UINT32 inputsLength,
        struct __x_ABI_CWindows_CFoundation_CPoint* inputs,
        UINT32 resultsLength,
        struct __x_ABI_CWindows_CFoundation_CPoint* results);
    HRESULT (STDMETHODCALLTYPE* UndistortPoint)(__x_ABI_CWindows_CMedia_CDevices_CCore_CICameraIntrinsics2* This,
        struct __x_ABI_CWindows_CFoundation_CPoint input,
        struct __x_ABI_CWindows_CFoundation_CPoint* result);
    HRESULT (STDMETHODCALLTYPE* UndistortPoints)(__x_ABI_CWindows_CMedia_CDevices_CCore_CICameraIntrinsics2* This,
        UINT32 inputsLength,
        struct __x_ABI_CWindows_CFoundation_CPoint* inputs,
        UINT32 resultsLength,
        struct __x_ABI_CWindows_CFoundation_CPoint* results);

        END_INTERFACE
    } __x_ABI_CWindows_CMedia_CDevices_CCore_CICameraIntrinsics2Vtbl;

    interface __x_ABI_CWindows_CMedia_CDevices_CCore_CICameraIntrinsics2
    {
        CONST_VTBL struct __x_ABI_CWindows_CMedia_CDevices_CCore_CICameraIntrinsics2Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CDevices_CCore_CICameraIntrinsics2;
#endif /* !defined(____x_ABI_CWindows_CMedia_CDevices_CCore_CICameraIntrinsics2_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CMedia_CDevices_CCore_CICameraIntrinsicsFactory_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CMedia_CDevices_CCore_CICameraIntrinsicsFactory_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CMedia_CDevices_CCore_CICameraIntrinsicsFactoryVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CDevices_CCore_CICameraIntrinsicsFactory* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CDevices_CCore_CICameraIntrinsicsFactory* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CDevices_CCore_CICameraIntrinsicsFactory* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CDevices_CCore_CICameraIntrinsicsFactory* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CDevices_CCore_CICameraIntrinsicsFactory* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CDevices_CCore_CICameraIntrinsicsFactory* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* Create)(__x_ABI_CWindows_CMedia_CDevices_CCore_CICameraIntrinsicsFactory* This,
        struct __x_ABI_CWindows_CFoundation_CNumerics_CVector2 focalLength,
        struct __x_ABI_CWindows_CFoundation_CNumerics_CVector2 principalPoint,
        struct __x_ABI_CWindows_CFoundation_CNumerics_CVector3 radialDistortion,
        struct __x_ABI_CWindows_CFoundation_CNumerics_CVector2 tangentialDistortion,
        UINT32 imageWidth,
        UINT32 imageHeight,
        __x_ABI_CWindows_CMedia_CDevices_CCore_CICameraIntrinsics** result);

        END_INTERFACE
    } __x_ABI_CWindows_CMedia_CDevices_CCore_CICameraIntrinsicsFactoryVtbl;

    interface __x_ABI_CWindows_CMedia_CDevices_CCore_CICameraIntrinsicsFactory
    {
        CONST_VTBL struct __x_ABI_CWindows_CMedia_CDevices_CCore_CICameraIntrinsicsFactoryVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CDevices_CCore_CICameraIntrinsicsFactory;
#endif /* !defined(____x_ABI_CWindows_CMedia_CDevices_CCore_CICameraIntrinsicsFactory_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CMedia_CDevices_CCore_CIDepthCorrelatedCoordinateMapper_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CMedia_CDevices_CCore_CIDepthCorrelatedCoordinateMapper_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CMedia_CDevices_CCore_CIDepthCorrelatedCoordinateMapperVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CDevices_CCore_CIDepthCorrelatedCoordinateMapper* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CDevices_CCore_CIDepthCorrelatedCoordinateMapper* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CDevices_CCore_CIDepthCorrelatedCoordinateMapper* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CDevices_CCore_CIDepthCorrelatedCoordinateMapper* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CDevices_CCore_CIDepthCorrelatedCoordinateMapper* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CDevices_CCore_CIDepthCorrelatedCoordinateMapper* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* UnprojectPoint)(__x_ABI_CWindows_CMedia_CDevices_CCore_CIDepthCorrelatedCoordinateMapper* This,
        struct __x_ABI_CWindows_CFoundation_CPoint sourcePoint,
        __x_ABI_CWindows_CPerception_CSpatial_CISpatialCoordinateSystem* targetCoordinateSystem,
        struct __x_ABI_CWindows_CFoundation_CNumerics_CVector3* result);
    HRESULT (STDMETHODCALLTYPE* UnprojectPoints)(__x_ABI_CWindows_CMedia_CDevices_CCore_CIDepthCorrelatedCoordinateMapper* This,
        UINT32 sourcePointsLength,
        struct __x_ABI_CWindows_CFoundation_CPoint* sourcePoints,
        __x_ABI_CWindows_CPerception_CSpatial_CISpatialCoordinateSystem* targetCoordinateSystem,
        UINT32 resultsLength,
        struct __x_ABI_CWindows_CFoundation_CNumerics_CVector3* results);
    HRESULT (STDMETHODCALLTYPE* MapPoint)(__x_ABI_CWindows_CMedia_CDevices_CCore_CIDepthCorrelatedCoordinateMapper* This,
        struct __x_ABI_CWindows_CFoundation_CPoint sourcePoint,
        __x_ABI_CWindows_CPerception_CSpatial_CISpatialCoordinateSystem* targetCoordinateSystem,
        __x_ABI_CWindows_CMedia_CDevices_CCore_CICameraIntrinsics* targetCameraIntrinsics,
        struct __x_ABI_CWindows_CFoundation_CPoint* result);
    HRESULT (STDMETHODCALLTYPE* MapPoints)(__x_ABI_CWindows_CMedia_CDevices_CCore_CIDepthCorrelatedCoordinateMapper* This,
        UINT32 sourcePointsLength,
        struct __x_ABI_CWindows_CFoundation_CPoint* sourcePoints,
        __x_ABI_CWindows_CPerception_CSpatial_CISpatialCoordinateSystem* targetCoordinateSystem,
        __x_ABI_CWindows_CMedia_CDevices_CCore_CICameraIntrinsics* targetCameraIntrinsics,
        UINT32 resultsLength,
        struct __x_ABI_CWindows_CFoundation_CPoint* results);

        END_INTERFACE
    } __x_ABI_CWindows_CMedia_CDevices_CCore_CIDepthCorrelatedCoordinateMapperVtbl;

    interface __x_ABI_CWindows_CMedia_CDevices_CCore_CIDepthCorrelatedCoordinateMapper
    {
        CONST_VTBL struct __x_ABI_CWindows_CMedia_CDevices_CCore_CIDepthCorrelatedCoordinateMapperVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CDevices_CCore_CIDepthCorrelatedCoordinateMapper;
#endif /* !defined(____x_ABI_CWindows_CMedia_CDevices_CCore_CIDepthCorrelatedCoordinateMapper_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameControlCapabilities_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameControlCapabilities_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameControlCapabilitiesVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameControlCapabilities* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameControlCapabilities* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameControlCapabilities* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameControlCapabilities* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameControlCapabilities* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameControlCapabilities* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Exposure)(__x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameControlCapabilities* This,
        __x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameExposureCapabilities** value);
    HRESULT (STDMETHODCALLTYPE* get_ExposureCompensation)(__x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameControlCapabilities* This,
        __x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameExposureCompensationCapabilities** value);
    HRESULT (STDMETHODCALLTYPE* get_IsoSpeed)(__x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameControlCapabilities* This,
        __x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameIsoSpeedCapabilities** value);
    HRESULT (STDMETHODCALLTYPE* get_Focus)(__x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameControlCapabilities* This,
        __x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameFocusCapabilities** value);
    HRESULT (STDMETHODCALLTYPE* get_PhotoConfirmationSupported)(__x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameControlCapabilities* This,
        boolean* value);

        END_INTERFACE
    } __x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameControlCapabilitiesVtbl;

    interface __x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameControlCapabilities
    {
        CONST_VTBL struct __x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameControlCapabilitiesVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameControlCapabilities;
#endif /* !defined(____x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameControlCapabilities_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameControlCapabilities2_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameControlCapabilities2_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameControlCapabilities2Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameControlCapabilities2* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameControlCapabilities2* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameControlCapabilities2* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameControlCapabilities2* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameControlCapabilities2* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameControlCapabilities2* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Flash)(__x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameControlCapabilities2* This,
        __x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameFlashCapabilities** value);

        END_INTERFACE
    } __x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameControlCapabilities2Vtbl;

    interface __x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameControlCapabilities2
    {
        CONST_VTBL struct __x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameControlCapabilities2Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameControlCapabilities2;
#endif /* !defined(____x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameControlCapabilities2_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameController_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameController_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameControllerVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameController* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameController* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameController* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameController* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameController* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameController* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_ExposureControl)(__x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameController* This,
        __x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameExposureControl** value);
    HRESULT (STDMETHODCALLTYPE* get_ExposureCompensationControl)(__x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameController* This,
        __x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameExposureCompensationControl** value);
    HRESULT (STDMETHODCALLTYPE* get_IsoSpeedControl)(__x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameController* This,
        __x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameIsoSpeedControl** value);
    HRESULT (STDMETHODCALLTYPE* get_FocusControl)(__x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameController* This,
        __x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameFocusControl** value);
    HRESULT (STDMETHODCALLTYPE* get_PhotoConfirmationEnabled)(__x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameController* This,
        __x_ABI_C__FIReference_1_boolean** value);
    HRESULT (STDMETHODCALLTYPE* put_PhotoConfirmationEnabled)(__x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameController* This,
        __x_ABI_C__FIReference_1_boolean* value);

        END_INTERFACE
    } __x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameControllerVtbl;

    interface __x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameController
    {
        CONST_VTBL struct __x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameControllerVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameController;
#endif /* !defined(____x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameController_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameController2_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameController2_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameController2Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameController2* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameController2* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameController2* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameController2* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameController2* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameController2* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_FlashControl)(__x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameController2* This,
        __x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameFlashControl** value);

        END_INTERFACE
    } __x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameController2Vtbl;

    interface __x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameController2
    {
        CONST_VTBL struct __x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameController2Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameController2;
#endif /* !defined(____x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameController2_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameExposureCapabilities_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameExposureCapabilities_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameExposureCapabilitiesVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameExposureCapabilities* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameExposureCapabilities* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameExposureCapabilities* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameExposureCapabilities* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameExposureCapabilities* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameExposureCapabilities* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Supported)(__x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameExposureCapabilities* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* get_Min)(__x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameExposureCapabilities* This,
        struct __x_ABI_CWindows_CFoundation_CTimeSpan* value);
    HRESULT (STDMETHODCALLTYPE* get_Max)(__x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameExposureCapabilities* This,
        struct __x_ABI_CWindows_CFoundation_CTimeSpan* value);
    HRESULT (STDMETHODCALLTYPE* get_Step)(__x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameExposureCapabilities* This,
        struct __x_ABI_CWindows_CFoundation_CTimeSpan* value);

        END_INTERFACE
    } __x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameExposureCapabilitiesVtbl;

    interface __x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameExposureCapabilities
    {
        CONST_VTBL struct __x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameExposureCapabilitiesVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameExposureCapabilities;
#endif /* !defined(____x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameExposureCapabilities_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameExposureCompensationCapabilities_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameExposureCompensationCapabilities_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameExposureCompensationCapabilitiesVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameExposureCompensationCapabilities* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameExposureCompensationCapabilities* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameExposureCompensationCapabilities* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameExposureCompensationCapabilities* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameExposureCompensationCapabilities* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameExposureCompensationCapabilities* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Supported)(__x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameExposureCompensationCapabilities* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* get_Min)(__x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameExposureCompensationCapabilities* This,
        FLOAT* value);
    HRESULT (STDMETHODCALLTYPE* get_Max)(__x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameExposureCompensationCapabilities* This,
        FLOAT* value);
    HRESULT (STDMETHODCALLTYPE* get_Step)(__x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameExposureCompensationCapabilities* This,
        FLOAT* value);

        END_INTERFACE
    } __x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameExposureCompensationCapabilitiesVtbl;

    interface __x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameExposureCompensationCapabilities
    {
        CONST_VTBL struct __x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameExposureCompensationCapabilitiesVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameExposureCompensationCapabilities;
#endif /* !defined(____x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameExposureCompensationCapabilities_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameExposureCompensationControl_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameExposureCompensationControl_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameExposureCompensationControlVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameExposureCompensationControl* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameExposureCompensationControl* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameExposureCompensationControl* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameExposureCompensationControl* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameExposureCompensationControl* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameExposureCompensationControl* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Value)(__x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameExposureCompensationControl* This,
        __x_ABI_C__FIReference_1_float** value);
    HRESULT (STDMETHODCALLTYPE* put_Value)(__x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameExposureCompensationControl* This,
        __x_ABI_C__FIReference_1_float* value);

        END_INTERFACE
    } __x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameExposureCompensationControlVtbl;

    interface __x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameExposureCompensationControl
    {
        CONST_VTBL struct __x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameExposureCompensationControlVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameExposureCompensationControl;
#endif /* !defined(____x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameExposureCompensationControl_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameExposureControl_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameExposureControl_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameExposureControlVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameExposureControl* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameExposureControl* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameExposureControl* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameExposureControl* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameExposureControl* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameExposureControl* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Auto)(__x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameExposureControl* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* put_Auto)(__x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameExposureControl* This,
        boolean value);
    HRESULT (STDMETHODCALLTYPE* get_Value)(__x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameExposureControl* This,
        __x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CTimeSpan** value);
    HRESULT (STDMETHODCALLTYPE* put_Value)(__x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameExposureControl* This,
        __x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CTimeSpan* value);

        END_INTERFACE
    } __x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameExposureControlVtbl;

    interface __x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameExposureControl
    {
        CONST_VTBL struct __x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameExposureControlVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameExposureControl;
#endif /* !defined(____x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameExposureControl_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameFlashCapabilities_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameFlashCapabilities_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameFlashCapabilitiesVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameFlashCapabilities* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameFlashCapabilities* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameFlashCapabilities* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameFlashCapabilities* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameFlashCapabilities* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameFlashCapabilities* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Supported)(__x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameFlashCapabilities* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* get_RedEyeReductionSupported)(__x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameFlashCapabilities* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* get_PowerSupported)(__x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameFlashCapabilities* This,
        boolean* value);

        END_INTERFACE
    } __x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameFlashCapabilitiesVtbl;

    interface __x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameFlashCapabilities
    {
        CONST_VTBL struct __x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameFlashCapabilitiesVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameFlashCapabilities;
#endif /* !defined(____x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameFlashCapabilities_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameFlashControl_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameFlashControl_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameFlashControlVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameFlashControl* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameFlashControl* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameFlashControl* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameFlashControl* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameFlashControl* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameFlashControl* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Mode)(__x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameFlashControl* This,
        enum __x_ABI_CWindows_CMedia_CDevices_CCore_CFrameFlashMode* value);
    HRESULT (STDMETHODCALLTYPE* put_Mode)(__x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameFlashControl* This,
        enum __x_ABI_CWindows_CMedia_CDevices_CCore_CFrameFlashMode value);
    HRESULT (STDMETHODCALLTYPE* get_Auto)(__x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameFlashControl* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* put_Auto)(__x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameFlashControl* This,
        boolean value);
    HRESULT (STDMETHODCALLTYPE* get_RedEyeReduction)(__x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameFlashControl* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* put_RedEyeReduction)(__x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameFlashControl* This,
        boolean value);
    HRESULT (STDMETHODCALLTYPE* get_PowerPercent)(__x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameFlashControl* This,
        FLOAT* value);
    HRESULT (STDMETHODCALLTYPE* put_PowerPercent)(__x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameFlashControl* This,
        FLOAT value);

        END_INTERFACE
    } __x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameFlashControlVtbl;

    interface __x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameFlashControl
    {
        CONST_VTBL struct __x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameFlashControlVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameFlashControl;
#endif /* !defined(____x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameFlashControl_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameFocusCapabilities_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameFocusCapabilities_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameFocusCapabilitiesVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameFocusCapabilities* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameFocusCapabilities* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameFocusCapabilities* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameFocusCapabilities* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameFocusCapabilities* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameFocusCapabilities* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Supported)(__x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameFocusCapabilities* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* get_Min)(__x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameFocusCapabilities* This,
        UINT32* value);
    HRESULT (STDMETHODCALLTYPE* get_Max)(__x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameFocusCapabilities* This,
        UINT32* value);
    HRESULT (STDMETHODCALLTYPE* get_Step)(__x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameFocusCapabilities* This,
        UINT32* value);

        END_INTERFACE
    } __x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameFocusCapabilitiesVtbl;

    interface __x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameFocusCapabilities
    {
        CONST_VTBL struct __x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameFocusCapabilitiesVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameFocusCapabilities;
#endif /* !defined(____x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameFocusCapabilities_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameFocusControl_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameFocusControl_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameFocusControlVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameFocusControl* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameFocusControl* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameFocusControl* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameFocusControl* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameFocusControl* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameFocusControl* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Value)(__x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameFocusControl* This,
        __x_ABI_C__FIReference_1_UINT32** value);
    HRESULT (STDMETHODCALLTYPE* put_Value)(__x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameFocusControl* This,
        __x_ABI_C__FIReference_1_UINT32* value);

        END_INTERFACE
    } __x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameFocusControlVtbl;

    interface __x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameFocusControl
    {
        CONST_VTBL struct __x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameFocusControlVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameFocusControl;
#endif /* !defined(____x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameFocusControl_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameIsoSpeedCapabilities_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameIsoSpeedCapabilities_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameIsoSpeedCapabilitiesVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameIsoSpeedCapabilities* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameIsoSpeedCapabilities* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameIsoSpeedCapabilities* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameIsoSpeedCapabilities* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameIsoSpeedCapabilities* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameIsoSpeedCapabilities* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Supported)(__x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameIsoSpeedCapabilities* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* get_Min)(__x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameIsoSpeedCapabilities* This,
        UINT32* value);
    HRESULT (STDMETHODCALLTYPE* get_Max)(__x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameIsoSpeedCapabilities* This,
        UINT32* value);
    HRESULT (STDMETHODCALLTYPE* get_Step)(__x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameIsoSpeedCapabilities* This,
        UINT32* value);

        END_INTERFACE
    } __x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameIsoSpeedCapabilitiesVtbl;

    interface __x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameIsoSpeedCapabilities
    {
        CONST_VTBL struct __x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameIsoSpeedCapabilitiesVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameIsoSpeedCapabilities;
#endif /* !defined(____x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameIsoSpeedCapabilities_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameIsoSpeedControl_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameIsoSpeedControl_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameIsoSpeedControlVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameIsoSpeedControl* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameIsoSpeedControl* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameIsoSpeedControl* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameIsoSpeedControl* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameIsoSpeedControl* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameIsoSpeedControl* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Auto)(__x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameIsoSpeedControl* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* put_Auto)(__x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameIsoSpeedControl* This,
        boolean value);
    HRESULT (STDMETHODCALLTYPE* get_Value)(__x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameIsoSpeedControl* This,
        __x_ABI_C__FIReference_1_UINT32** value);
    HRESULT (STDMETHODCALLTYPE* put_Value)(__x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameIsoSpeedControl* This,
        __x_ABI_C__FIReference_1_UINT32* value);

        END_INTERFACE
    } __x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameIsoSpeedControlVtbl;

    interface __x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameIsoSpeedControl
    {
        CONST_VTBL struct __x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameIsoSpeedControlVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameIsoSpeedControl;
#endif /* !defined(____x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameIsoSpeedControl_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CMedia_CDevices_CCore_CIVariablePhotoSequenceController_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CMedia_CDevices_CCore_CIVariablePhotoSequenceController_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CMedia_CDevices_CCore_CIVariablePhotoSequenceControllerVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CDevices_CCore_CIVariablePhotoSequenceController* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CDevices_CCore_CIVariablePhotoSequenceController* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CDevices_CCore_CIVariablePhotoSequenceController* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CDevices_CCore_CIVariablePhotoSequenceController* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CDevices_CCore_CIVariablePhotoSequenceController* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CDevices_CCore_CIVariablePhotoSequenceController* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Supported)(__x_ABI_CWindows_CMedia_CDevices_CCore_CIVariablePhotoSequenceController* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* get_MaxPhotosPerSecond)(__x_ABI_CWindows_CMedia_CDevices_CCore_CIVariablePhotoSequenceController* This,
        FLOAT* value);
    HRESULT (STDMETHODCALLTYPE* get_PhotosPerSecondLimit)(__x_ABI_CWindows_CMedia_CDevices_CCore_CIVariablePhotoSequenceController* This,
        FLOAT* value);
    HRESULT (STDMETHODCALLTYPE* put_PhotosPerSecondLimit)(__x_ABI_CWindows_CMedia_CDevices_CCore_CIVariablePhotoSequenceController* This,
        FLOAT value);
    HRESULT (STDMETHODCALLTYPE* GetHighestConcurrentFrameRate)(__x_ABI_CWindows_CMedia_CDevices_CCore_CIVariablePhotoSequenceController* This,
        __x_ABI_CWindows_CMedia_CMediaProperties_CIMediaEncodingProperties* captureProperties,
        __x_ABI_CWindows_CMedia_CMediaProperties_CIMediaRatio** value);
    HRESULT (STDMETHODCALLTYPE* GetCurrentFrameRate)(__x_ABI_CWindows_CMedia_CDevices_CCore_CIVariablePhotoSequenceController* This,
        __x_ABI_CWindows_CMedia_CMediaProperties_CIMediaRatio** value);
    HRESULT (STDMETHODCALLTYPE* get_FrameCapabilities)(__x_ABI_CWindows_CMedia_CDevices_CCore_CIVariablePhotoSequenceController* This,
        __x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameControlCapabilities** value);
    HRESULT (STDMETHODCALLTYPE* get_DesiredFrameControllers)(__x_ABI_CWindows_CMedia_CDevices_CCore_CIVariablePhotoSequenceController* This,
        __x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CDevices__CCore__CFrameController** items);

        END_INTERFACE
    } __x_ABI_CWindows_CMedia_CDevices_CCore_CIVariablePhotoSequenceControllerVtbl;

    interface __x_ABI_CWindows_CMedia_CDevices_CCore_CIVariablePhotoSequenceController
    {
        CONST_VTBL struct __x_ABI_CWindows_CMedia_CDevices_CCore_CIVariablePhotoSequenceControllerVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CDevices_CCore_CIVariablePhotoSequenceController;
#endif /* !defined(____x_ABI_CWindows_CMedia_CDevices_CCore_CIVariablePhotoSequenceController_INTERFACE_DEFINED__) */
    

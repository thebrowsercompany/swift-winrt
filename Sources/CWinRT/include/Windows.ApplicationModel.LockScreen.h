// WARNING: Please don't edit this file. It was generated by Swift/WinRT v0.0.1

#pragma once
// Header files for imported files
#include <inspectable.h>
#include <EventToken.h>
#include <windowscontracts.h>
#include "Windows.Foundation.h"
#include "Windows.Storage.Streams.h"
// Importing Collections header
#include "Windows.Foundation.Collections.h"

/* Forward Declarations */
#ifndef ____x_ABI_CWindows_CApplicationModel_CLockScreen_CILockApplicationHost_FWD_DEFINED__
#define ____x_ABI_CWindows_CApplicationModel_CLockScreen_CILockApplicationHost_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CApplicationModel_CLockScreen_CILockApplicationHost __x_ABI_CWindows_CApplicationModel_CLockScreen_CILockApplicationHost;

#endif // ____x_ABI_CWindows_CApplicationModel_CLockScreen_CILockApplicationHost_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CApplicationModel_CLockScreen_CILockApplicationHostStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CApplicationModel_CLockScreen_CILockApplicationHostStatics_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CApplicationModel_CLockScreen_CILockApplicationHostStatics __x_ABI_CWindows_CApplicationModel_CLockScreen_CILockApplicationHostStatics;

#endif // ____x_ABI_CWindows_CApplicationModel_CLockScreen_CILockApplicationHostStatics_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CApplicationModel_CLockScreen_CILockScreenBadge_FWD_DEFINED__
#define ____x_ABI_CWindows_CApplicationModel_CLockScreen_CILockScreenBadge_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CApplicationModel_CLockScreen_CILockScreenBadge __x_ABI_CWindows_CApplicationModel_CLockScreen_CILockScreenBadge;

#endif // ____x_ABI_CWindows_CApplicationModel_CLockScreen_CILockScreenBadge_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CApplicationModel_CLockScreen_CILockScreenInfo_FWD_DEFINED__
#define ____x_ABI_CWindows_CApplicationModel_CLockScreen_CILockScreenInfo_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CApplicationModel_CLockScreen_CILockScreenInfo __x_ABI_CWindows_CApplicationModel_CLockScreen_CILockScreenInfo;

#endif // ____x_ABI_CWindows_CApplicationModel_CLockScreen_CILockScreenInfo_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CApplicationModel_CLockScreen_CILockScreenUnlockingDeferral_FWD_DEFINED__
#define ____x_ABI_CWindows_CApplicationModel_CLockScreen_CILockScreenUnlockingDeferral_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CApplicationModel_CLockScreen_CILockScreenUnlockingDeferral __x_ABI_CWindows_CApplicationModel_CLockScreen_CILockScreenUnlockingDeferral;

#endif // ____x_ABI_CWindows_CApplicationModel_CLockScreen_CILockScreenUnlockingDeferral_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CApplicationModel_CLockScreen_CILockScreenUnlockingEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CApplicationModel_CLockScreen_CILockScreenUnlockingEventArgs_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CApplicationModel_CLockScreen_CILockScreenUnlockingEventArgs __x_ABI_CWindows_CApplicationModel_CLockScreen_CILockScreenUnlockingEventArgs;

#endif // ____x_ABI_CWindows_CApplicationModel_CLockScreen_CILockScreenUnlockingEventArgs_FWD_DEFINED__

// Parameterized interface forward declarations (C)

// Collection interface definitions

#if !defined(____x_ABI_C__FIIterator_1_HSTRING_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterator_1_HSTRING_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterator_1_HSTRING __x_ABI_C__FIIterator_1_HSTRING;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterator_1_HSTRING;

    typedef struct __x_ABI_C__FIIterator_1_HSTRINGVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterator_1_HSTRING* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterator_1_HSTRING* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterator_1_HSTRING* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterator_1_HSTRING* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterator_1_HSTRING* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterator_1_HSTRING* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Current)(__x_ABI_C__FIIterator_1_HSTRING* This,
        HSTRING* result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__x_ABI_C__FIIterator_1_HSTRING* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__x_ABI_C__FIIterator_1_HSTRING* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIIterator_1_HSTRING* This,
        UINT32 itemsLength,
        HSTRING* items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIIterator_1_HSTRINGVtbl;

    interface __x_ABI_C__FIIterator_1_HSTRING
    {
        CONST_VTBL struct __x_ABI_C__FIIterator_1_HSTRINGVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterator_1_HSTRING_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterable_1_HSTRING_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterable_1_HSTRING_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterable_1_HSTRING __x_ABI_C__FIIterable_1_HSTRING;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterable_1_HSTRING;

    typedef struct __x_ABI_C__FIIterable_1_HSTRINGVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterable_1_HSTRING* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterable_1_HSTRING* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterable_1_HSTRING* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterable_1_HSTRING* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterable_1_HSTRING* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterable_1_HSTRING* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* First)(__x_ABI_C__FIIterable_1_HSTRING* This,
        __x_ABI_C__FIIterator_1_HSTRING** result);

        END_INTERFACE
    } __x_ABI_C__FIIterable_1_HSTRINGVtbl;

    interface __x_ABI_C__FIIterable_1_HSTRING
    {
        CONST_VTBL struct __x_ABI_C__FIIterable_1_HSTRINGVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterable_1_HSTRING_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterator_1___x_ABI_CWindows__CApplicationModel__CLockScreen__CLockScreenBadge_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CApplicationModel__CLockScreen__CLockScreenBadge_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CApplicationModel__CLockScreen__CLockScreenBadge __x_ABI_C__FIIterator_1___x_ABI_CWindows__CApplicationModel__CLockScreen__CLockScreenBadge;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterator_1___x_ABI_CWindows__CApplicationModel__CLockScreen__CLockScreenBadge;

    typedef struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CApplicationModel__CLockScreen__CLockScreenBadgeVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CApplicationModel__CLockScreen__CLockScreenBadge* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CApplicationModel__CLockScreen__CLockScreenBadge* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CApplicationModel__CLockScreen__CLockScreenBadge* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CApplicationModel__CLockScreen__CLockScreenBadge* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CApplicationModel__CLockScreen__CLockScreenBadge* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CApplicationModel__CLockScreen__CLockScreenBadge* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Current)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CApplicationModel__CLockScreen__CLockScreenBadge* This,
        __x_ABI_CWindows_CApplicationModel_CLockScreen_CILockScreenBadge** result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CApplicationModel__CLockScreen__CLockScreenBadge* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CApplicationModel__CLockScreen__CLockScreenBadge* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CApplicationModel__CLockScreen__CLockScreenBadge* This,
        UINT32 itemsLength,
        __x_ABI_CWindows_CApplicationModel_CLockScreen_CILockScreenBadge** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIIterator_1___x_ABI_CWindows__CApplicationModel__CLockScreen__CLockScreenBadgeVtbl;

    interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CApplicationModel__CLockScreen__CLockScreenBadge
    {
        CONST_VTBL struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CApplicationModel__CLockScreen__CLockScreenBadgeVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CApplicationModel__CLockScreen__CLockScreenBadge_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterable_1___x_ABI_CWindows__CApplicationModel__CLockScreen__CLockScreenBadge_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CApplicationModel__CLockScreen__CLockScreenBadge_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CApplicationModel__CLockScreen__CLockScreenBadge __x_ABI_C__FIIterable_1___x_ABI_CWindows__CApplicationModel__CLockScreen__CLockScreenBadge;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterable_1___x_ABI_CWindows__CApplicationModel__CLockScreen__CLockScreenBadge;

    typedef struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CApplicationModel__CLockScreen__CLockScreenBadgeVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CApplicationModel__CLockScreen__CLockScreenBadge* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CApplicationModel__CLockScreen__CLockScreenBadge* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CApplicationModel__CLockScreen__CLockScreenBadge* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CApplicationModel__CLockScreen__CLockScreenBadge* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CApplicationModel__CLockScreen__CLockScreenBadge* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CApplicationModel__CLockScreen__CLockScreenBadge* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* First)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CApplicationModel__CLockScreen__CLockScreenBadge* This,
        __x_ABI_C__FIIterator_1___x_ABI_CWindows__CApplicationModel__CLockScreen__CLockScreenBadge** result);

        END_INTERFACE
    } __x_ABI_C__FIIterable_1___x_ABI_CWindows__CApplicationModel__CLockScreen__CLockScreenBadgeVtbl;

    interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CApplicationModel__CLockScreen__CLockScreenBadge
    {
        CONST_VTBL struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CApplicationModel__CLockScreen__CLockScreenBadgeVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CApplicationModel__CLockScreen__CLockScreenBadge_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVectorView_1_HSTRING_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVectorView_1_HSTRING_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVectorView_1_HSTRING __x_ABI_C__FIVectorView_1_HSTRING;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVectorView_1_HSTRING;

    typedef struct __x_ABI_C__FIVectorView_1_HSTRINGVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVectorView_1_HSTRING* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVectorView_1_HSTRING* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVectorView_1_HSTRING* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVectorView_1_HSTRING* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVectorView_1_HSTRING* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVectorView_1_HSTRING* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVectorView_1_HSTRING* This,
        UINT32 index,
        HSTRING* result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVectorView_1_HSTRING* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVectorView_1_HSTRING* This,
        HSTRING value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVectorView_1_HSTRING* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        HSTRING* items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIVectorView_1_HSTRINGVtbl;

    interface __x_ABI_C__FIVectorView_1_HSTRING
    {
        CONST_VTBL struct __x_ABI_C__FIVectorView_1_HSTRINGVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVectorView_1_HSTRING_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CApplicationModel__CLockScreen__CLockScreenBadge_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CApplicationModel__CLockScreen__CLockScreenBadge_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CApplicationModel__CLockScreen__CLockScreenBadge __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CApplicationModel__CLockScreen__CLockScreenBadge;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CApplicationModel__CLockScreen__CLockScreenBadge;

    typedef struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CApplicationModel__CLockScreen__CLockScreenBadgeVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CApplicationModel__CLockScreen__CLockScreenBadge* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CApplicationModel__CLockScreen__CLockScreenBadge* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CApplicationModel__CLockScreen__CLockScreenBadge* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CApplicationModel__CLockScreen__CLockScreenBadge* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CApplicationModel__CLockScreen__CLockScreenBadge* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CApplicationModel__CLockScreen__CLockScreenBadge* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CApplicationModel__CLockScreen__CLockScreenBadge* This,
        UINT32 index,
        __x_ABI_CWindows_CApplicationModel_CLockScreen_CILockScreenBadge** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CApplicationModel__CLockScreen__CLockScreenBadge* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CApplicationModel__CLockScreen__CLockScreenBadge* This,
        __x_ABI_CWindows_CApplicationModel_CLockScreen_CILockScreenBadge* value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CApplicationModel__CLockScreen__CLockScreenBadge* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        __x_ABI_CWindows_CApplicationModel_CLockScreen_CILockScreenBadge** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CApplicationModel__CLockScreen__CLockScreenBadgeVtbl;

    interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CApplicationModel__CLockScreen__CLockScreenBadge
    {
        CONST_VTBL struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CApplicationModel__CLockScreen__CLockScreenBadgeVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CApplicationModel__CLockScreen__CLockScreenBadge_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIReference_1_UINT32_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIReference_1_UINT32_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIReference_1_UINT32 __x_ABI_C__FIReference_1_UINT32;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIReference_1_UINT32;

    typedef struct __x_ABI_C__FIReference_1_UINT32Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIReference_1_UINT32* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIReference_1_UINT32* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIReference_1_UINT32* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIReference_1_UINT32* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIReference_1_UINT32* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIReference_1_UINT32* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Value)(__x_ABI_C__FIReference_1_UINT32* This,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIReference_1_UINT32Vtbl;

    interface __x_ABI_C__FIReference_1_UINT32
    {
        CONST_VTBL struct __x_ABI_C__FIReference_1_UINT32Vtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIReference_1_UINT32_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CApplicationModel__CLockScreen__CLockApplicationHost___x_ABI_CWindows__CApplicationModel__CLockScreen__CLockScreenUnlockingEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CApplicationModel__CLockScreen__CLockApplicationHost___x_ABI_CWindows__CApplicationModel__CLockScreen__CLockScreenUnlockingEventArgs_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CApplicationModel__CLockScreen__CLockApplicationHost___x_ABI_CWindows__CApplicationModel__CLockScreen__CLockScreenUnlockingEventArgs __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CApplicationModel__CLockScreen__CLockApplicationHost___x_ABI_CWindows__CApplicationModel__CLockScreen__CLockScreenUnlockingEventArgs;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CApplicationModel__CLockScreen__CLockApplicationHost___x_ABI_CWindows__CApplicationModel__CLockScreen__CLockScreenUnlockingEventArgs;

    typedef struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CApplicationModel__CLockScreen__CLockApplicationHost___x_ABI_CWindows__CApplicationModel__CLockScreen__CLockScreenUnlockingEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CApplicationModel__CLockScreen__CLockApplicationHost___x_ABI_CWindows__CApplicationModel__CLockScreen__CLockScreenUnlockingEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CApplicationModel__CLockScreen__CLockApplicationHost___x_ABI_CWindows__CApplicationModel__CLockScreen__CLockScreenUnlockingEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CApplicationModel__CLockScreen__CLockApplicationHost___x_ABI_CWindows__CApplicationModel__CLockScreen__CLockScreenUnlockingEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CApplicationModel__CLockScreen__CLockApplicationHost___x_ABI_CWindows__CApplicationModel__CLockScreen__CLockScreenUnlockingEventArgs* This,
        __x_ABI_CWindows_CApplicationModel_CLockScreen_CILockApplicationHost* sender,
        __x_ABI_CWindows_CApplicationModel_CLockScreen_CILockScreenUnlockingEventArgs* args);

        END_INTERFACE
    } __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CApplicationModel__CLockScreen__CLockApplicationHost___x_ABI_CWindows__CApplicationModel__CLockScreen__CLockScreenUnlockingEventArgsVtbl;

    interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CApplicationModel__CLockScreen__CLockApplicationHost___x_ABI_CWindows__CApplicationModel__CLockScreen__CLockScreenUnlockingEventArgs
    {
        CONST_VTBL struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CApplicationModel__CLockScreen__CLockApplicationHost___x_ABI_CWindows__CApplicationModel__CLockScreen__CLockScreenUnlockingEventArgsVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CApplicationModel__CLockScreen__CLockApplicationHost___x_ABI_CWindows__CApplicationModel__CLockScreen__CLockScreenUnlockingEventArgs_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CApplicationModel__CLockScreen__CLockScreenInfo_IInspectable_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CApplicationModel__CLockScreen__CLockScreenInfo_IInspectable_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CApplicationModel__CLockScreen__CLockScreenInfo_IInspectable __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CApplicationModel__CLockScreen__CLockScreenInfo_IInspectable;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CApplicationModel__CLockScreen__CLockScreenInfo_IInspectable;

    typedef struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CApplicationModel__CLockScreen__CLockScreenInfo_IInspectableVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CApplicationModel__CLockScreen__CLockScreenInfo_IInspectable* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CApplicationModel__CLockScreen__CLockScreenInfo_IInspectable* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CApplicationModel__CLockScreen__CLockScreenInfo_IInspectable* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CApplicationModel__CLockScreen__CLockScreenInfo_IInspectable* This,
        __x_ABI_CWindows_CApplicationModel_CLockScreen_CILockScreenInfo* sender,
        IInspectable* args);

        END_INTERFACE
    } __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CApplicationModel__CLockScreen__CLockScreenInfo_IInspectableVtbl;

    interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CApplicationModel__CLockScreen__CLockScreenInfo_IInspectable
    {
        CONST_VTBL struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CApplicationModel__CLockScreen__CLockScreenInfo_IInspectableVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CApplicationModel__CLockScreen__CLockScreenInfo_IInspectable_INTERFACE_DEFINED__
    
typedef struct __x_ABI_CWindows_CFoundation_CDateTime __x_ABI_CWindows_CFoundation_CDateTime;

#ifndef ____x_ABI_CWindows_CFoundation_CIPropertyValue_FWD_DEFINED__
#define ____x_ABI_CWindows_CFoundation_CIPropertyValue_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CFoundation_CIPropertyValue __x_ABI_CWindows_CFoundation_CIPropertyValue;

#endif // ____x_ABI_CWindows_CFoundation_CIPropertyValue_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CStorage_CStreams_CIRandomAccessStream_FWD_DEFINED__
#define ____x_ABI_CWindows_CStorage_CStreams_CIRandomAccessStream_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CStorage_CStreams_CIRandomAccessStream __x_ABI_CWindows_CStorage_CStreams_CIRandomAccessStream;

#endif // ____x_ABI_CWindows_CStorage_CStreams_CIRandomAccessStream_FWD_DEFINED__

#if !defined(____x_ABI_CWindows_CApplicationModel_CLockScreen_CILockApplicationHost_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CApplicationModel_CLockScreen_CILockApplicationHost_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CApplicationModel_CLockScreen_CILockApplicationHostVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CApplicationModel_CLockScreen_CILockApplicationHost* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CApplicationModel_CLockScreen_CILockApplicationHost* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CApplicationModel_CLockScreen_CILockApplicationHost* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CApplicationModel_CLockScreen_CILockApplicationHost* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CApplicationModel_CLockScreen_CILockApplicationHost* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CApplicationModel_CLockScreen_CILockApplicationHost* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* RequestUnlock)(__x_ABI_CWindows_CApplicationModel_CLockScreen_CILockApplicationHost* This);
    HRESULT (STDMETHODCALLTYPE* add_Unlocking)(__x_ABI_CWindows_CApplicationModel_CLockScreen_CILockApplicationHost* This,
        __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CApplicationModel__CLockScreen__CLockApplicationHost___x_ABI_CWindows__CApplicationModel__CLockScreen__CLockScreenUnlockingEventArgs* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_Unlocking)(__x_ABI_CWindows_CApplicationModel_CLockScreen_CILockApplicationHost* This,
        EventRegistrationToken token);

        END_INTERFACE
    } __x_ABI_CWindows_CApplicationModel_CLockScreen_CILockApplicationHostVtbl;

    interface __x_ABI_CWindows_CApplicationModel_CLockScreen_CILockApplicationHost
    {
        CONST_VTBL struct __x_ABI_CWindows_CApplicationModel_CLockScreen_CILockApplicationHostVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CApplicationModel_CLockScreen_CILockApplicationHost;
#endif /* !defined(____x_ABI_CWindows_CApplicationModel_CLockScreen_CILockApplicationHost_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CApplicationModel_CLockScreen_CILockApplicationHostStatics_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CApplicationModel_CLockScreen_CILockApplicationHostStatics_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CApplicationModel_CLockScreen_CILockApplicationHostStaticsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CApplicationModel_CLockScreen_CILockApplicationHostStatics* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CApplicationModel_CLockScreen_CILockApplicationHostStatics* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CApplicationModel_CLockScreen_CILockApplicationHostStatics* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CApplicationModel_CLockScreen_CILockApplicationHostStatics* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CApplicationModel_CLockScreen_CILockApplicationHostStatics* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CApplicationModel_CLockScreen_CILockApplicationHostStatics* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetForCurrentView)(__x_ABI_CWindows_CApplicationModel_CLockScreen_CILockApplicationHostStatics* This,
        __x_ABI_CWindows_CApplicationModel_CLockScreen_CILockApplicationHost** result);

        END_INTERFACE
    } __x_ABI_CWindows_CApplicationModel_CLockScreen_CILockApplicationHostStaticsVtbl;

    interface __x_ABI_CWindows_CApplicationModel_CLockScreen_CILockApplicationHostStatics
    {
        CONST_VTBL struct __x_ABI_CWindows_CApplicationModel_CLockScreen_CILockApplicationHostStaticsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CApplicationModel_CLockScreen_CILockApplicationHostStatics;
#endif /* !defined(____x_ABI_CWindows_CApplicationModel_CLockScreen_CILockApplicationHostStatics_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CApplicationModel_CLockScreen_CILockScreenBadge_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CApplicationModel_CLockScreen_CILockScreenBadge_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CApplicationModel_CLockScreen_CILockScreenBadgeVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CApplicationModel_CLockScreen_CILockScreenBadge* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CApplicationModel_CLockScreen_CILockScreenBadge* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CApplicationModel_CLockScreen_CILockScreenBadge* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CApplicationModel_CLockScreen_CILockScreenBadge* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CApplicationModel_CLockScreen_CILockScreenBadge* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CApplicationModel_CLockScreen_CILockScreenBadge* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Logo)(__x_ABI_CWindows_CApplicationModel_CLockScreen_CILockScreenBadge* This,
        __x_ABI_CWindows_CStorage_CStreams_CIRandomAccessStream** value);
    HRESULT (STDMETHODCALLTYPE* get_Glyph)(__x_ABI_CWindows_CApplicationModel_CLockScreen_CILockScreenBadge* This,
        __x_ABI_CWindows_CStorage_CStreams_CIRandomAccessStream** value);
    HRESULT (STDMETHODCALLTYPE* get_Number)(__x_ABI_CWindows_CApplicationModel_CLockScreen_CILockScreenBadge* This,
        __x_ABI_C__FIReference_1_UINT32** value);
    HRESULT (STDMETHODCALLTYPE* get_AutomationName)(__x_ABI_CWindows_CApplicationModel_CLockScreen_CILockScreenBadge* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* LaunchApp)(__x_ABI_CWindows_CApplicationModel_CLockScreen_CILockScreenBadge* This);

        END_INTERFACE
    } __x_ABI_CWindows_CApplicationModel_CLockScreen_CILockScreenBadgeVtbl;

    interface __x_ABI_CWindows_CApplicationModel_CLockScreen_CILockScreenBadge
    {
        CONST_VTBL struct __x_ABI_CWindows_CApplicationModel_CLockScreen_CILockScreenBadgeVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CApplicationModel_CLockScreen_CILockScreenBadge;
#endif /* !defined(____x_ABI_CWindows_CApplicationModel_CLockScreen_CILockScreenBadge_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CApplicationModel_CLockScreen_CILockScreenInfo_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CApplicationModel_CLockScreen_CILockScreenInfo_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CApplicationModel_CLockScreen_CILockScreenInfoVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CApplicationModel_CLockScreen_CILockScreenInfo* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CApplicationModel_CLockScreen_CILockScreenInfo* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CApplicationModel_CLockScreen_CILockScreenInfo* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CApplicationModel_CLockScreen_CILockScreenInfo* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CApplicationModel_CLockScreen_CILockScreenInfo* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CApplicationModel_CLockScreen_CILockScreenInfo* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* add_LockScreenImageChanged)(__x_ABI_CWindows_CApplicationModel_CLockScreen_CILockScreenInfo* This,
        __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CApplicationModel__CLockScreen__CLockScreenInfo_IInspectable* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_LockScreenImageChanged)(__x_ABI_CWindows_CApplicationModel_CLockScreen_CILockScreenInfo* This,
        EventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* get_LockScreenImage)(__x_ABI_CWindows_CApplicationModel_CLockScreen_CILockScreenInfo* This,
        __x_ABI_CWindows_CStorage_CStreams_CIRandomAccessStream** value);
    HRESULT (STDMETHODCALLTYPE* add_BadgesChanged)(__x_ABI_CWindows_CApplicationModel_CLockScreen_CILockScreenInfo* This,
        __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CApplicationModel__CLockScreen__CLockScreenInfo_IInspectable* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_BadgesChanged)(__x_ABI_CWindows_CApplicationModel_CLockScreen_CILockScreenInfo* This,
        EventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* get_Badges)(__x_ABI_CWindows_CApplicationModel_CLockScreen_CILockScreenInfo* This,
        __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CApplicationModel__CLockScreen__CLockScreenBadge** value);
    HRESULT (STDMETHODCALLTYPE* add_DetailTextChanged)(__x_ABI_CWindows_CApplicationModel_CLockScreen_CILockScreenInfo* This,
        __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CApplicationModel__CLockScreen__CLockScreenInfo_IInspectable* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_DetailTextChanged)(__x_ABI_CWindows_CApplicationModel_CLockScreen_CILockScreenInfo* This,
        EventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* get_DetailText)(__x_ABI_CWindows_CApplicationModel_CLockScreen_CILockScreenInfo* This,
        __x_ABI_C__FIVectorView_1_HSTRING** value);
    HRESULT (STDMETHODCALLTYPE* add_AlarmIconChanged)(__x_ABI_CWindows_CApplicationModel_CLockScreen_CILockScreenInfo* This,
        __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CApplicationModel__CLockScreen__CLockScreenInfo_IInspectable* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_AlarmIconChanged)(__x_ABI_CWindows_CApplicationModel_CLockScreen_CILockScreenInfo* This,
        EventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* get_AlarmIcon)(__x_ABI_CWindows_CApplicationModel_CLockScreen_CILockScreenInfo* This,
        __x_ABI_CWindows_CStorage_CStreams_CIRandomAccessStream** value);

        END_INTERFACE
    } __x_ABI_CWindows_CApplicationModel_CLockScreen_CILockScreenInfoVtbl;

    interface __x_ABI_CWindows_CApplicationModel_CLockScreen_CILockScreenInfo
    {
        CONST_VTBL struct __x_ABI_CWindows_CApplicationModel_CLockScreen_CILockScreenInfoVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CApplicationModel_CLockScreen_CILockScreenInfo;
#endif /* !defined(____x_ABI_CWindows_CApplicationModel_CLockScreen_CILockScreenInfo_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CApplicationModel_CLockScreen_CILockScreenUnlockingDeferral_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CApplicationModel_CLockScreen_CILockScreenUnlockingDeferral_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CApplicationModel_CLockScreen_CILockScreenUnlockingDeferralVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CApplicationModel_CLockScreen_CILockScreenUnlockingDeferral* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CApplicationModel_CLockScreen_CILockScreenUnlockingDeferral* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CApplicationModel_CLockScreen_CILockScreenUnlockingDeferral* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CApplicationModel_CLockScreen_CILockScreenUnlockingDeferral* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CApplicationModel_CLockScreen_CILockScreenUnlockingDeferral* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CApplicationModel_CLockScreen_CILockScreenUnlockingDeferral* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* Complete)(__x_ABI_CWindows_CApplicationModel_CLockScreen_CILockScreenUnlockingDeferral* This);

        END_INTERFACE
    } __x_ABI_CWindows_CApplicationModel_CLockScreen_CILockScreenUnlockingDeferralVtbl;

    interface __x_ABI_CWindows_CApplicationModel_CLockScreen_CILockScreenUnlockingDeferral
    {
        CONST_VTBL struct __x_ABI_CWindows_CApplicationModel_CLockScreen_CILockScreenUnlockingDeferralVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CApplicationModel_CLockScreen_CILockScreenUnlockingDeferral;
#endif /* !defined(____x_ABI_CWindows_CApplicationModel_CLockScreen_CILockScreenUnlockingDeferral_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CApplicationModel_CLockScreen_CILockScreenUnlockingEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CApplicationModel_CLockScreen_CILockScreenUnlockingEventArgs_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CApplicationModel_CLockScreen_CILockScreenUnlockingEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CApplicationModel_CLockScreen_CILockScreenUnlockingEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CApplicationModel_CLockScreen_CILockScreenUnlockingEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CApplicationModel_CLockScreen_CILockScreenUnlockingEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CApplicationModel_CLockScreen_CILockScreenUnlockingEventArgs* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CApplicationModel_CLockScreen_CILockScreenUnlockingEventArgs* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CApplicationModel_CLockScreen_CILockScreenUnlockingEventArgs* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetDeferral)(__x_ABI_CWindows_CApplicationModel_CLockScreen_CILockScreenUnlockingEventArgs* This,
        __x_ABI_CWindows_CApplicationModel_CLockScreen_CILockScreenUnlockingDeferral** deferral);
    HRESULT (STDMETHODCALLTYPE* get_Deadline)(__x_ABI_CWindows_CApplicationModel_CLockScreen_CILockScreenUnlockingEventArgs* This,
        struct __x_ABI_CWindows_CFoundation_CDateTime* value);

        END_INTERFACE
    } __x_ABI_CWindows_CApplicationModel_CLockScreen_CILockScreenUnlockingEventArgsVtbl;

    interface __x_ABI_CWindows_CApplicationModel_CLockScreen_CILockScreenUnlockingEventArgs
    {
        CONST_VTBL struct __x_ABI_CWindows_CApplicationModel_CLockScreen_CILockScreenUnlockingEventArgsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CApplicationModel_CLockScreen_CILockScreenUnlockingEventArgs;
#endif /* !defined(____x_ABI_CWindows_CApplicationModel_CLockScreen_CILockScreenUnlockingEventArgs_INTERFACE_DEFINED__) */
    

// WARNING: Please don't edit this file. It was generated by Swift/WinRT v0.0.1

#pragma once
// Header files for imported files
#include <inspectable.h>
#include <EventToken.h>
#include <windowscontracts.h>
#include "Windows.Foundation.h"
#include "Windows.Devices.Geolocation.h"
#include "Windows.Foundation.Numerics.h"
#include "Windows.Services.Maps.h"
#include "Windows.Services.Maps.LocalSearch.h"
#include "Windows.Storage.Streams.h"
#include "Windows.UI.h"
#include "Windows.UI.Composition.h"
#include "Windows.UI.Xaml.h"
#include "Windows.UI.Xaml.Controls.h"
// Importing Collections header
#include "Windows.Foundation.Collections.h"

/* Forward Declarations */
#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CICustomMapTileDataSource_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CICustomMapTileDataSource_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CICustomMapTileDataSource __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CICustomMapTileDataSource;

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CICustomMapTileDataSource_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CICustomMapTileDataSourceFactory_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CICustomMapTileDataSourceFactory_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CICustomMapTileDataSourceFactory __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CICustomMapTileDataSourceFactory;

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CICustomMapTileDataSourceFactory_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIHttpMapTileDataSource_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIHttpMapTileDataSource_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIHttpMapTileDataSource __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIHttpMapTileDataSource;

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIHttpMapTileDataSource_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIHttpMapTileDataSourceFactory_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIHttpMapTileDataSourceFactory_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIHttpMapTileDataSourceFactory __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIHttpMapTileDataSourceFactory;

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIHttpMapTileDataSourceFactory_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CILocalMapTileDataSource_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CILocalMapTileDataSource_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CILocalMapTileDataSource __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CILocalMapTileDataSource;

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CILocalMapTileDataSource_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CILocalMapTileDataSourceFactory_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CILocalMapTileDataSourceFactory_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CILocalMapTileDataSourceFactory __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CILocalMapTileDataSourceFactory;

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CILocalMapTileDataSourceFactory_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangedEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangedEventArgs_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangedEventArgs __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangedEventArgs;

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangedEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangedEventArgs2_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangedEventArgs2_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangedEventArgs2 __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangedEventArgs2;

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangedEventArgs2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangingEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangingEventArgs_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangingEventArgs __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangingEventArgs;

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangingEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangingEventArgs2_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangingEventArgs2_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangingEventArgs2 __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangingEventArgs2;

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangingEventArgs2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapBillboard_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapBillboard_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapBillboard __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapBillboard;

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapBillboard_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapBillboardFactory_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapBillboardFactory_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapBillboardFactory __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapBillboardFactory;

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapBillboardFactory_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapBillboardStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapBillboardStatics_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapBillboardStatics __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapBillboardStatics;

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapBillboardStatics_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCamera_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCamera_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCamera __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCamera;

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCamera_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCameraFactory_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCameraFactory_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCameraFactory __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCameraFactory;

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCameraFactory_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapContextRequestedEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapContextRequestedEventArgs_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapContextRequestedEventArgs __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapContextRequestedEventArgs;

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapContextRequestedEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl;

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2 __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2;

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl3_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl3_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl3 __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl3;

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl3_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl4_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl4_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl4 __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl4;

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl4_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl5_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl5_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl5 __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl5;

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl5_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl6_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl6_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl6 __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl6;

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl6_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl7_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl7_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl7 __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl7;

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl7_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl8_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl8_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl8 __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl8;

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl8_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkClickEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkClickEventArgs_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkClickEventArgs __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkClickEventArgs;

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkClickEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkPointerEnteredEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkPointerEnteredEventArgs_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkPointerEnteredEventArgs __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkPointerEnteredEventArgs;

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkPointerEnteredEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkPointerExitedEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkPointerExitedEventArgs_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkPointerExitedEventArgs __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkPointerExitedEventArgs;

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkPointerExitedEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkRightTappedEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkRightTappedEventArgs_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkRightTappedEventArgs __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkRightTappedEventArgs;

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkRightTappedEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelper_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelper_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelper __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelper;

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelper_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelper2_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelper2_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelper2 __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelper2;

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelper2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelperFactory_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelperFactory_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelperFactory __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelperFactory;

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelperFactory_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelperStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelperStatics_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelperStatics __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelperStatics;

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelperStatics_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics;

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics2_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics2_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics2 __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics2;

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics4_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics4_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics4 __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics4;

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics4_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics5_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics5_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics5 __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics5;

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics5_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics6_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics6_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics6 __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics6;

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics6_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics7_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics7_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics7 __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics7;

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics7_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics8_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics8_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics8 __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics8;

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics8_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeatureClickEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeatureClickEventArgs_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeatureClickEventArgs __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeatureClickEventArgs;

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeatureClickEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeaturePointerEnteredEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeaturePointerEnteredEventArgs_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeaturePointerEnteredEventArgs __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeaturePointerEnteredEventArgs;

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeaturePointerEnteredEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeaturePointerExitedEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeaturePointerExitedEventArgs_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeaturePointerExitedEventArgs __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeaturePointerExitedEventArgs;

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeaturePointerExitedEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeatureRightTappedEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeatureRightTappedEventArgs_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeatureRightTappedEventArgs __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeatureRightTappedEventArgs;

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeatureRightTappedEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCustomExperience_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCustomExperience_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCustomExperience __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCustomExperience;

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCustomExperience_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCustomExperienceChangedEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCustomExperienceChangedEventArgs_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCustomExperienceChangedEventArgs __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCustomExperienceChangedEventArgs;

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCustomExperienceChangedEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCustomExperienceFactory_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCustomExperienceFactory_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCustomExperienceFactory __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCustomExperienceFactory;

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCustomExperienceFactory_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement;

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement2_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement2_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement2 __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement2;

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement3_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement3_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement3 __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement3;

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement3_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement3D_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement3D_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement3D __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement3D;

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement3D_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement3DStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement3DStatics_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement3DStatics __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement3DStatics;

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement3DStatics_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement4_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement4_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement4 __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement4;

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement4_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementClickEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementClickEventArgs_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementClickEventArgs __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementClickEventArgs;

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementClickEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementFactory_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementFactory_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementFactory __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementFactory;

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementFactory_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementPointerEnteredEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementPointerEnteredEventArgs_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementPointerEnteredEventArgs __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementPointerEnteredEventArgs;

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementPointerEnteredEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementPointerExitedEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementPointerExitedEventArgs_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementPointerExitedEventArgs __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementPointerExitedEventArgs;

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementPointerExitedEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics;

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics2_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics2_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics2 __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics2;

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics3_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics3_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics3 __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics3;

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics3_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics4_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics4_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics4 __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics4;

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics4_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayer_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayer_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayer __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayer;

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayer_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerClickEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerClickEventArgs_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerClickEventArgs __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerClickEventArgs;

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerClickEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerContextRequestedEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerContextRequestedEventArgs_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerContextRequestedEventArgs __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerContextRequestedEventArgs;

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerContextRequestedEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerPointerEnteredEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerPointerEnteredEventArgs_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerPointerEnteredEventArgs __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerPointerEnteredEventArgs;

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerPointerEnteredEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerPointerExitedEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerPointerExitedEventArgs_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerPointerExitedEventArgs __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerPointerExitedEventArgs;

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerPointerExitedEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerStatics_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerStatics __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerStatics;

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerStatics_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIcon_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIcon_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIcon __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIcon;

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIcon_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIcon2_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIcon2_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIcon2 __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIcon2;

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIcon2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIconStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIconStatics_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIconStatics __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIconStatics;

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIconStatics_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIconStatics2_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIconStatics2_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIconStatics2 __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIconStatics2;

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIconStatics2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapInputEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapInputEventArgs_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapInputEventArgs __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapInputEventArgs;

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapInputEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapItemsControl_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapItemsControl_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapItemsControl __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapItemsControl;

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapItemsControl_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapItemsControlStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapItemsControlStatics_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapItemsControlStatics __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapItemsControlStatics;

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapItemsControlStatics_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapLayer_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapLayer_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapLayer __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapLayer;

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapLayer_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapLayerFactory_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapLayerFactory_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapLayerFactory __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapLayerFactory;

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapLayerFactory_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapLayerStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapLayerStatics_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapLayerStatics __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapLayerStatics;

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapLayerStatics_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapModel3D_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapModel3D_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapModel3D __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapModel3D;

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapModel3D_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapModel3DFactory_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapModel3DFactory_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapModel3DFactory __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapModel3DFactory;

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapModel3DFactory_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapModel3DStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapModel3DStatics_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapModel3DStatics __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapModel3DStatics;

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapModel3DStatics_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygon_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygon_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygon __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygon;

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygon_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygon2_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygon2_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygon2 __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygon2;

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygon2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygonStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygonStatics_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygonStatics __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygonStatics;

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygonStatics_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolyline_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolyline_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolyline __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolyline;

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolyline_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolylineStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolylineStatics_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolylineStatics __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolylineStatics;

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolylineStatics_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRightTappedEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRightTappedEventArgs_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRightTappedEventArgs __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRightTappedEventArgs;

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRightTappedEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRouteView_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRouteView_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRouteView __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRouteView;

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRouteView_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRouteViewFactory_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRouteViewFactory_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRouteViewFactory __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRouteViewFactory;

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRouteViewFactory_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapScene_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapScene_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapScene __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapScene;

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapScene_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapSceneStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapSceneStatics_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapSceneStatics __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapSceneStatics;

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapSceneStatics_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheet_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheet_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheet __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheet;

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheet_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntriesStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntriesStatics_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntriesStatics __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntriesStatics;

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntriesStatics_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntryStatesStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntryStatesStatics_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntryStatesStatics __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntryStatesStatics;

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntryStatesStatics_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetStatics_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetStatics __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetStatics;

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetStatics_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTargetCameraChangedEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTargetCameraChangedEventArgs_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTargetCameraChangedEventArgs __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTargetCameraChangedEventArgs;

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTargetCameraChangedEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTargetCameraChangedEventArgs2_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTargetCameraChangedEventArgs2_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTargetCameraChangedEventArgs2 __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTargetCameraChangedEventArgs2;

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTargetCameraChangedEventArgs2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequest_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequest_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequest __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequest;

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequest_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequestDeferral_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequestDeferral_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequestDeferral __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequestDeferral;

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequestDeferral_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequestedEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequestedEventArgs_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequestedEventArgs __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequestedEventArgs;

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequestedEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequestedEventArgs2_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequestedEventArgs2_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequestedEventArgs2 __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequestedEventArgs2;

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequestedEventArgs2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileDataSource_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileDataSource_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileDataSource __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileDataSource;

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileDataSource_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileDataSourceFactory_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileDataSourceFactory_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileDataSourceFactory __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileDataSourceFactory;

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileDataSourceFactory_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource;

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource2_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource2_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource2 __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource2;

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceFactory_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceFactory_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceFactory __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceFactory;

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceFactory_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceStatics_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceStatics __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceStatics;

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceStatics_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceStatics2_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceStatics2_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceStatics2 __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceStatics2;

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceStatics2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequest_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequest_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequest __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequest;

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequest_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequestDeferral_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequestDeferral_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequestDeferral __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequestDeferral;

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequestDeferral_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequestedEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequestedEventArgs_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequestedEventArgs __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequestedEventArgs;

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequestedEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequestedEventArgs2_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequestedEventArgs2_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequestedEventArgs2 __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequestedEventArgs2;

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequestedEventArgs2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsideExperience_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsideExperience_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsideExperience __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsideExperience;

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsideExperience_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsideExperienceFactory_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsideExperienceFactory_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsideExperienceFactory __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsideExperienceFactory;

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsideExperienceFactory_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsidePanorama_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsidePanorama_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsidePanorama __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsidePanorama;

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsidePanorama_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsidePanoramaStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsidePanoramaStatics_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsidePanoramaStatics __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsidePanoramaStatics;

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsidePanoramaStatics_FWD_DEFINED__

// Parameterized interface forward declarations (C)

// Collection interface definitions

typedef interface __x_ABI_C__FIAsyncOperationCompletedHandler_1_boolean __x_ABI_C__FIAsyncOperationCompletedHandler_1_boolean;

#if !defined(____x_ABI_C__FIAsyncOperation_1_boolean_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperation_1_boolean_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperation_1_boolean __x_ABI_C__FIAsyncOperation_1_boolean;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperation_1_boolean;

    typedef struct __x_ABI_C__FIAsyncOperation_1_booleanVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperation_1_boolean* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperation_1_boolean* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperation_1_boolean* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIAsyncOperation_1_boolean* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIAsyncOperation_1_boolean* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIAsyncOperation_1_boolean* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* put_Completed)(__x_ABI_C__FIAsyncOperation_1_boolean* This,
        __x_ABI_C__FIAsyncOperationCompletedHandler_1_boolean* handler);
    HRESULT (STDMETHODCALLTYPE* get_Completed)(__x_ABI_C__FIAsyncOperation_1_boolean* This,
        __x_ABI_C__FIAsyncOperationCompletedHandler_1_boolean** result);
    HRESULT (STDMETHODCALLTYPE* GetResults)(__x_ABI_C__FIAsyncOperation_1_boolean* This,
        boolean* result);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperation_1_booleanVtbl;

    interface __x_ABI_C__FIAsyncOperation_1_boolean
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperation_1_booleanVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperation_1_boolean_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIAsyncOperationCompletedHandler_1_boolean_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperationCompletedHandler_1_boolean_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperationCompletedHandler_1_boolean __x_ABI_C__FIAsyncOperationCompletedHandler_1_boolean;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperationCompletedHandler_1_boolean;

    typedef struct __x_ABI_C__FIAsyncOperationCompletedHandler_1_booleanVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperationCompletedHandler_1_boolean* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperationCompletedHandler_1_boolean* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperationCompletedHandler_1_boolean* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FIAsyncOperationCompletedHandler_1_boolean* This,
        __x_ABI_C__FIAsyncOperation_1_boolean* asyncInfo,
        enum __x_ABI_CWindows_CFoundation_CAsyncStatus asyncStatus);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperationCompletedHandler_1_booleanVtbl;

    interface __x_ABI_C__FIAsyncOperationCompletedHandler_1_boolean
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperationCompletedHandler_1_booleanVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperationCompletedHandler_1_boolean_INTERFACE_DEFINED__
    
typedef interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapModel3D __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapModel3D;

#if !defined(____x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapModel3D_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapModel3D_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapModel3D __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapModel3D;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapModel3D;

    typedef struct __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapModel3DVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapModel3D* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapModel3D* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapModel3D* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapModel3D* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapModel3D* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapModel3D* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* put_Completed)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapModel3D* This,
        __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapModel3D* handler);
    HRESULT (STDMETHODCALLTYPE* get_Completed)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapModel3D* This,
        __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapModel3D** result);
    HRESULT (STDMETHODCALLTYPE* GetResults)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapModel3D* This,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapModel3D** result);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapModel3DVtbl;

    interface __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapModel3D
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapModel3DVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapModel3D_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapModel3D_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapModel3D_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapModel3D __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapModel3D;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapModel3D;

    typedef struct __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapModel3DVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapModel3D* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapModel3D* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapModel3D* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapModel3D* This,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapModel3D* asyncInfo,
        enum __x_ABI_CWindows_CFoundation_CAsyncStatus asyncStatus);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapModel3DVtbl;

    interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapModel3D
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapModel3DVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapModel3D_INTERFACE_DEFINED__
    
typedef interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CStreetsidePanorama __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CStreetsidePanorama;

#if !defined(____x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CStreetsidePanorama_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CStreetsidePanorama_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CStreetsidePanorama __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CStreetsidePanorama;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CStreetsidePanorama;

    typedef struct __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CStreetsidePanoramaVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CStreetsidePanorama* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CStreetsidePanorama* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CStreetsidePanorama* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CStreetsidePanorama* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CStreetsidePanorama* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CStreetsidePanorama* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* put_Completed)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CStreetsidePanorama* This,
        __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CStreetsidePanorama* handler);
    HRESULT (STDMETHODCALLTYPE* get_Completed)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CStreetsidePanorama* This,
        __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CStreetsidePanorama** result);
    HRESULT (STDMETHODCALLTYPE* GetResults)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CStreetsidePanorama* This,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsidePanorama** result);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CStreetsidePanoramaVtbl;

    interface __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CStreetsidePanorama
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CStreetsidePanoramaVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CStreetsidePanorama_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CStreetsidePanorama_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CStreetsidePanorama_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CStreetsidePanorama __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CStreetsidePanorama;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CStreetsidePanorama;

    typedef struct __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CStreetsidePanoramaVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CStreetsidePanorama* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CStreetsidePanorama* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CStreetsidePanorama* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CStreetsidePanorama* This,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CStreetsidePanorama* asyncInfo,
        enum __x_ABI_CWindows_CFoundation_CAsyncStatus asyncStatus);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CStreetsidePanoramaVtbl;

    interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CStreetsidePanorama
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CStreetsidePanoramaVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CStreetsidePanorama_INTERFACE_DEFINED__
    
#ifndef ____x_ABI_CWindows_CDevices_CGeolocation_CIGeopath_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CGeolocation_CIGeopath_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CDevices_CGeolocation_CIGeopath __x_ABI_CWindows_CDevices_CGeolocation_CIGeopath;

#endif // ____x_ABI_CWindows_CDevices_CGeolocation_CIGeopath_FWD_DEFINED__

#if !defined(____x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CGeolocation__CGeopath_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CGeolocation__CGeopath_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CGeolocation__CGeopath __x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CGeolocation__CGeopath;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CGeolocation__CGeopath;

    typedef struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CGeolocation__CGeopathVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CGeolocation__CGeopath* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CGeolocation__CGeopath* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CGeolocation__CGeopath* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CGeolocation__CGeopath* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CGeolocation__CGeopath* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CGeolocation__CGeopath* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Current)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CGeolocation__CGeopath* This,
        __x_ABI_CWindows_CDevices_CGeolocation_CIGeopath** result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CGeolocation__CGeopath* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CGeolocation__CGeopath* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CGeolocation__CGeopath* This,
        UINT32 itemsLength,
        __x_ABI_CWindows_CDevices_CGeolocation_CIGeopath** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CGeolocation__CGeopathVtbl;

    interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CGeolocation__CGeopath
    {
        CONST_VTBL struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CGeolocation__CGeopathVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CGeolocation__CGeopath_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CGeolocation__CGeopath_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CGeolocation__CGeopath_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CGeolocation__CGeopath __x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CGeolocation__CGeopath;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CGeolocation__CGeopath;

    typedef struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CGeolocation__CGeopathVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CGeolocation__CGeopath* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CGeolocation__CGeopath* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CGeolocation__CGeopath* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CGeolocation__CGeopath* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CGeolocation__CGeopath* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CGeolocation__CGeopath* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* First)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CGeolocation__CGeopath* This,
        __x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CGeolocation__CGeopath** result);

        END_INTERFACE
    } __x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CGeolocation__CGeopathVtbl;

    interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CGeolocation__CGeopath
    {
        CONST_VTBL struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CGeolocation__CGeopathVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CGeolocation__CGeopath_INTERFACE_DEFINED__
    
#ifndef ____x_ABI_CWindows_CDevices_CGeolocation_CIGeopoint_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CGeolocation_CIGeopoint_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CDevices_CGeolocation_CIGeopoint __x_ABI_CWindows_CDevices_CGeolocation_CIGeopoint;

#endif // ____x_ABI_CWindows_CDevices_CGeolocation_CIGeopoint_FWD_DEFINED__

#if !defined(____x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CGeolocation__CGeopoint_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CGeolocation__CGeopoint_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CGeolocation__CGeopoint __x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CGeolocation__CGeopoint;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CGeolocation__CGeopoint;

    typedef struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CGeolocation__CGeopointVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CGeolocation__CGeopoint* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CGeolocation__CGeopoint* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CGeolocation__CGeopoint* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CGeolocation__CGeopoint* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CGeolocation__CGeopoint* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CGeolocation__CGeopoint* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Current)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CGeolocation__CGeopoint* This,
        __x_ABI_CWindows_CDevices_CGeolocation_CIGeopoint** result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CGeolocation__CGeopoint* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CGeolocation__CGeopoint* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CGeolocation__CGeopoint* This,
        UINT32 itemsLength,
        __x_ABI_CWindows_CDevices_CGeolocation_CIGeopoint** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CGeolocation__CGeopointVtbl;

    interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CGeolocation__CGeopoint
    {
        CONST_VTBL struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CGeolocation__CGeopointVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CGeolocation__CGeopoint_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CGeolocation__CGeopoint_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CGeolocation__CGeopoint_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CGeolocation__CGeopoint __x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CGeolocation__CGeopoint;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CGeolocation__CGeopoint;

    typedef struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CGeolocation__CGeopointVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CGeolocation__CGeopoint* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CGeolocation__CGeopoint* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CGeolocation__CGeopoint* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CGeolocation__CGeopoint* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CGeolocation__CGeopoint* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CGeolocation__CGeopoint* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* First)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CGeolocation__CGeopoint* This,
        __x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CGeolocation__CGeopoint** result);

        END_INTERFACE
    } __x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CGeolocation__CGeopointVtbl;

    interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CGeolocation__CGeopoint
    {
        CONST_VTBL struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CGeolocation__CGeopointVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CGeolocation__CGeopoint_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectable_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectable_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectable __x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectable;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectable;

    typedef struct __x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectableVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectable* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectable* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectable* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectable* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectable* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectable* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Key)(__x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectable* This,
        HSTRING* result);
    HRESULT (STDMETHODCALLTYPE* get_Value)(__x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectable* This,
        IInspectable** result);

        END_INTERFACE
    } __x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectableVtbl;

    interface __x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectable
    {
        CONST_VTBL struct __x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectableVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectable_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectable_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectable_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectable __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectable;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectable;

    typedef struct __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectableVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectable* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectable* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectable* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectable* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectable* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectable* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Current)(__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectable* This,
        __x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectable** result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectable* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectable* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectable* This,
        UINT32 itemsLength,
        __x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectable** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectableVtbl;

    interface __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectable
    {
        CONST_VTBL struct __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectableVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectable_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectable_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectable_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectable __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectable;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectable;

    typedef struct __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectableVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectable* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectable* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectable* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectable* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectable* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectable* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* First)(__x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectable* This,
        __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectable** result);

        END_INTERFACE
    } __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectableVtbl;

    interface __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectable
    {
        CONST_VTBL struct __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectableVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectable_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING __x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING;

    typedef struct __x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRINGVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Key)(__x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING* This,
        HSTRING* result);
    HRESULT (STDMETHODCALLTYPE* get_Value)(__x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING* This,
        HSTRING* result);

        END_INTERFACE
    } __x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRINGVtbl;

    interface __x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING
    {
        CONST_VTBL struct __x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRINGVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING;

    typedef struct __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRINGVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Current)(__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING* This,
        __x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING** result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING* This,
        UINT32 itemsLength,
        __x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRINGVtbl;

    interface __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING
    {
        CONST_VTBL struct __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRINGVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING;

    typedef struct __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRINGVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* First)(__x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING* This,
        __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING** result);

        END_INTERFACE
    } __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRINGVtbl;

    interface __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING
    {
        CONST_VTBL struct __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRINGVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING_INTERFACE_DEFINED__
    
#ifndef ____x_ABI_CWindows_CServices_CMaps_CLocalSearch_CILocalLocation_FWD_DEFINED__
#define ____x_ABI_CWindows_CServices_CMaps_CLocalSearch_CILocalLocation_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CServices_CMaps_CLocalSearch_CILocalLocation __x_ABI_CWindows_CServices_CMaps_CLocalSearch_CILocalLocation;

#endif // ____x_ABI_CWindows_CServices_CMaps_CLocalSearch_CILocalLocation_FWD_DEFINED__

#if !defined(____x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CMaps__CLocalSearch__CLocalLocation_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CMaps__CLocalSearch__CLocalLocation_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CMaps__CLocalSearch__CLocalLocation __x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CMaps__CLocalSearch__CLocalLocation;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CMaps__CLocalSearch__CLocalLocation;

    typedef struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CMaps__CLocalSearch__CLocalLocationVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CMaps__CLocalSearch__CLocalLocation* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CMaps__CLocalSearch__CLocalLocation* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CMaps__CLocalSearch__CLocalLocation* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CMaps__CLocalSearch__CLocalLocation* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CMaps__CLocalSearch__CLocalLocation* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CMaps__CLocalSearch__CLocalLocation* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Current)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CMaps__CLocalSearch__CLocalLocation* This,
        __x_ABI_CWindows_CServices_CMaps_CLocalSearch_CILocalLocation** result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CMaps__CLocalSearch__CLocalLocation* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CMaps__CLocalSearch__CLocalLocation* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CMaps__CLocalSearch__CLocalLocation* This,
        UINT32 itemsLength,
        __x_ABI_CWindows_CServices_CMaps_CLocalSearch_CILocalLocation** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CMaps__CLocalSearch__CLocalLocationVtbl;

    interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CMaps__CLocalSearch__CLocalLocation
    {
        CONST_VTBL struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CMaps__CLocalSearch__CLocalLocationVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CMaps__CLocalSearch__CLocalLocation_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CMaps__CLocalSearch__CLocalLocation_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CMaps__CLocalSearch__CLocalLocation_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CMaps__CLocalSearch__CLocalLocation __x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CMaps__CLocalSearch__CLocalLocation;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CMaps__CLocalSearch__CLocalLocation;

    typedef struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CMaps__CLocalSearch__CLocalLocationVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CMaps__CLocalSearch__CLocalLocation* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CMaps__CLocalSearch__CLocalLocation* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CMaps__CLocalSearch__CLocalLocation* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CMaps__CLocalSearch__CLocalLocation* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CMaps__CLocalSearch__CLocalLocation* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CMaps__CLocalSearch__CLocalLocation* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* First)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CMaps__CLocalSearch__CLocalLocation* This,
        __x_ABI_C__FIIterator_1___x_ABI_CWindows__CServices__CMaps__CLocalSearch__CLocalLocation** result);

        END_INTERFACE
    } __x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CMaps__CLocalSearch__CLocalLocationVtbl;

    interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CMaps__CLocalSearch__CLocalLocation
    {
        CONST_VTBL struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CMaps__CLocalSearch__CLocalLocationVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CServices__CMaps__CLocalSearch__CLocalLocation_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapElement_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapElement_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapElement __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapElement;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapElement;

    typedef struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapElementVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapElement* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapElement* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapElement* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapElement* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapElement* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapElement* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Current)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapElement* This,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement** result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapElement* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapElement* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapElement* This,
        UINT32 itemsLength,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapElementVtbl;

    interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapElement
    {
        CONST_VTBL struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapElementVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapElement_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapElement_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapElement_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapElement __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapElement;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapElement;

    typedef struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapElementVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapElement* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapElement* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapElement* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapElement* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapElement* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapElement* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* First)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapElement* This,
        __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapElement** result);

        END_INTERFACE
    } __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapElementVtbl;

    interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapElement
    {
        CONST_VTBL struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapElementVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapElement_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapLayer_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapLayer_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapLayer __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapLayer;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapLayer;

    typedef struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapLayerVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapLayer* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapLayer* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapLayer* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapLayer* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapLayer* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapLayer* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Current)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapLayer* This,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapLayer** result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapLayer* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapLayer* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapLayer* This,
        UINT32 itemsLength,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapLayer** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapLayerVtbl;

    interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapLayer
    {
        CONST_VTBL struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapLayerVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapLayer_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapLayer_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapLayer_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapLayer __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapLayer;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapLayer;

    typedef struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapLayerVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapLayer* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapLayer* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapLayer* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapLayer* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapLayer* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapLayer* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* First)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapLayer* This,
        __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapLayer** result);

        END_INTERFACE
    } __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapLayerVtbl;

    interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapLayer
    {
        CONST_VTBL struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapLayerVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapLayer_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapRouteView_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapRouteView_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapRouteView __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapRouteView;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapRouteView;

    typedef struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapRouteViewVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapRouteView* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapRouteView* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapRouteView* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapRouteView* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapRouteView* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapRouteView* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Current)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapRouteView* This,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRouteView** result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapRouteView* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapRouteView* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapRouteView* This,
        UINT32 itemsLength,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRouteView** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapRouteViewVtbl;

    interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapRouteView
    {
        CONST_VTBL struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapRouteViewVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapRouteView_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapRouteView_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapRouteView_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapRouteView __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapRouteView;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapRouteView;

    typedef struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapRouteViewVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapRouteView* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapRouteView* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapRouteView* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapRouteView* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapRouteView* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapRouteView* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* First)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapRouteView* This,
        __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapRouteView** result);

        END_INTERFACE
    } __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapRouteViewVtbl;

    interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapRouteView
    {
        CONST_VTBL struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapRouteViewVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapRouteView_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapStyleSheet_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapStyleSheet_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapStyleSheet __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapStyleSheet;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapStyleSheet;

    typedef struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapStyleSheetVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapStyleSheet* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapStyleSheet* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapStyleSheet* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapStyleSheet* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapStyleSheet* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapStyleSheet* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Current)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapStyleSheet* This,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheet** result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapStyleSheet* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapStyleSheet* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapStyleSheet* This,
        UINT32 itemsLength,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheet** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapStyleSheetVtbl;

    interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapStyleSheet
    {
        CONST_VTBL struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapStyleSheetVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapStyleSheet_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapStyleSheet_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapStyleSheet_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapStyleSheet __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapStyleSheet;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapStyleSheet;

    typedef struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapStyleSheetVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapStyleSheet* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapStyleSheet* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapStyleSheet* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapStyleSheet* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapStyleSheet* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapStyleSheet* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* First)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapStyleSheet* This,
        __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapStyleSheet** result);

        END_INTERFACE
    } __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapStyleSheetVtbl;

    interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapStyleSheet
    {
        CONST_VTBL struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapStyleSheetVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapStyleSheet_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapTileSource_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapTileSource_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapTileSource __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapTileSource;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapTileSource;

    typedef struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapTileSourceVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapTileSource* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapTileSource* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapTileSource* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapTileSource* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapTileSource* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapTileSource* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Current)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapTileSource* This,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource** result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapTileSource* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapTileSource* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapTileSource* This,
        UINT32 itemsLength,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapTileSourceVtbl;

    interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapTileSource
    {
        CONST_VTBL struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapTileSourceVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapTileSource_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapTileSource_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapTileSource_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapTileSource __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapTileSource;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapTileSource;

    typedef struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapTileSourceVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapTileSource* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapTileSource* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapTileSource* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapTileSource* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapTileSource* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapTileSource* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* First)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapTileSource* This,
        __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapTileSource** result);

        END_INTERFACE
    } __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapTileSourceVtbl;

    interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapTileSource
    {
        CONST_VTBL struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapTileSourceVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapTileSource_INTERFACE_DEFINED__
    
#ifndef ____x_ABI_CWindows_CUI_CXaml_CIDependencyObject_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CIDependencyObject_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CIDependencyObject __x_ABI_CWindows_CUI_CXaml_CIDependencyObject;

#endif // ____x_ABI_CWindows_CUI_CXaml_CIDependencyObject_FWD_DEFINED__

#if !defined(____x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CDependencyObject_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CDependencyObject_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CDependencyObject __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CDependencyObject;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CDependencyObject;

    typedef struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CDependencyObjectVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CDependencyObject* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CDependencyObject* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CDependencyObject* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CDependencyObject* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CDependencyObject* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CDependencyObject* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Current)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CDependencyObject* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyObject** result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CDependencyObject* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CDependencyObject* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CDependencyObject* This,
        UINT32 itemsLength,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyObject** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CDependencyObjectVtbl;

    interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CDependencyObject
    {
        CONST_VTBL struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CDependencyObjectVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CDependencyObject_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CDependencyObject_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CDependencyObject_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CDependencyObject __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CDependencyObject;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CDependencyObject;

    typedef struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CDependencyObjectVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CDependencyObject* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CDependencyObject* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CDependencyObject* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CDependencyObject* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CDependencyObject* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CDependencyObject* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* First)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CDependencyObject* This,
        __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CXaml__CDependencyObject** result);

        END_INTERFACE
    } __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CDependencyObjectVtbl;

    interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CDependencyObject
    {
        CONST_VTBL struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CDependencyObjectVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CDependencyObject_INTERFACE_DEFINED__
    
typedef interface __x_ABI_C__FIMapView_2_HSTRING_IInspectable __x_ABI_C__FIMapView_2_HSTRING_IInspectable;

#if !defined(____x_ABI_C__FIMapView_2_HSTRING_IInspectable_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIMapView_2_HSTRING_IInspectable_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIMapView_2_HSTRING_IInspectable __x_ABI_C__FIMapView_2_HSTRING_IInspectable;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIMapView_2_HSTRING_IInspectable;

    typedef struct __x_ABI_C__FIMapView_2_HSTRING_IInspectableVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIMapView_2_HSTRING_IInspectable* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIMapView_2_HSTRING_IInspectable* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIMapView_2_HSTRING_IInspectable* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIMapView_2_HSTRING_IInspectable* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIMapView_2_HSTRING_IInspectable* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIMapView_2_HSTRING_IInspectable* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* Lookup)(__x_ABI_C__FIMapView_2_HSTRING_IInspectable* This,
        HSTRING key,
        IInspectable** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIMapView_2_HSTRING_IInspectable* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* HasKey)(__x_ABI_C__FIMapView_2_HSTRING_IInspectable* This,
        HSTRING key,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* Split)(__x_ABI_C__FIMapView_2_HSTRING_IInspectable* This,
        __x_ABI_C__FIMapView_2_HSTRING_IInspectable** first,
        __x_ABI_C__FIMapView_2_HSTRING_IInspectable** second);

        END_INTERFACE
    } __x_ABI_C__FIMapView_2_HSTRING_IInspectableVtbl;

    interface __x_ABI_C__FIMapView_2_HSTRING_IInspectable
    {
        CONST_VTBL struct __x_ABI_C__FIMapView_2_HSTRING_IInspectableVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIMapView_2_HSTRING_IInspectable_INTERFACE_DEFINED__
    
typedef interface __x_ABI_C__FIMapView_2_HSTRING_HSTRING __x_ABI_C__FIMapView_2_HSTRING_HSTRING;

#if !defined(____x_ABI_C__FIMapView_2_HSTRING_HSTRING_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIMapView_2_HSTRING_HSTRING_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIMapView_2_HSTRING_HSTRING __x_ABI_C__FIMapView_2_HSTRING_HSTRING;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIMapView_2_HSTRING_HSTRING;

    typedef struct __x_ABI_C__FIMapView_2_HSTRING_HSTRINGVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIMapView_2_HSTRING_HSTRING* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIMapView_2_HSTRING_HSTRING* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIMapView_2_HSTRING_HSTRING* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIMapView_2_HSTRING_HSTRING* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIMapView_2_HSTRING_HSTRING* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIMapView_2_HSTRING_HSTRING* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* Lookup)(__x_ABI_C__FIMapView_2_HSTRING_HSTRING* This,
        HSTRING key,
        HSTRING* result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIMapView_2_HSTRING_HSTRING* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* HasKey)(__x_ABI_C__FIMapView_2_HSTRING_HSTRING* This,
        HSTRING key,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* Split)(__x_ABI_C__FIMapView_2_HSTRING_HSTRING* This,
        __x_ABI_C__FIMapView_2_HSTRING_HSTRING** first,
        __x_ABI_C__FIMapView_2_HSTRING_HSTRING** second);

        END_INTERFACE
    } __x_ABI_C__FIMapView_2_HSTRING_HSTRINGVtbl;

    interface __x_ABI_C__FIMapView_2_HSTRING_HSTRING
    {
        CONST_VTBL struct __x_ABI_C__FIMapView_2_HSTRING_HSTRINGVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIMapView_2_HSTRING_HSTRING_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIMap_2_HSTRING_HSTRING_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIMap_2_HSTRING_HSTRING_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIMap_2_HSTRING_HSTRING __x_ABI_C__FIMap_2_HSTRING_HSTRING;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIMap_2_HSTRING_HSTRING;

    typedef struct __x_ABI_C__FIMap_2_HSTRING_HSTRINGVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIMap_2_HSTRING_HSTRING* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIMap_2_HSTRING_HSTRING* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIMap_2_HSTRING_HSTRING* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIMap_2_HSTRING_HSTRING* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIMap_2_HSTRING_HSTRING* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIMap_2_HSTRING_HSTRING* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* Lookup)(__x_ABI_C__FIMap_2_HSTRING_HSTRING* This,
        HSTRING key,
        HSTRING* result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIMap_2_HSTRING_HSTRING* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* HasKey)(__x_ABI_C__FIMap_2_HSTRING_HSTRING* This,
        HSTRING key,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetView)(__x_ABI_C__FIMap_2_HSTRING_HSTRING* This,
        __x_ABI_C__FIMapView_2_HSTRING_HSTRING** result);
    HRESULT (STDMETHODCALLTYPE* Insert)(__x_ABI_C__FIMap_2_HSTRING_HSTRING* This,
        HSTRING key,
        HSTRING value,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* Remove)(__x_ABI_C__FIMap_2_HSTRING_HSTRING* This,
        HSTRING key);
    HRESULT (STDMETHODCALLTYPE* Clear)(__x_ABI_C__FIMap_2_HSTRING_HSTRING* This);

        END_INTERFACE
    } __x_ABI_C__FIMap_2_HSTRING_HSTRINGVtbl;

    interface __x_ABI_C__FIMap_2_HSTRING_HSTRING
    {
        CONST_VTBL struct __x_ABI_C__FIMap_2_HSTRING_HSTRINGVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIMap_2_HSTRING_HSTRING_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CGeolocation__CGeopath_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CGeolocation__CGeopath_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CGeolocation__CGeopath __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CGeolocation__CGeopath;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CGeolocation__CGeopath;

    typedef struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CGeolocation__CGeopathVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CGeolocation__CGeopath* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CGeolocation__CGeopath* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CGeolocation__CGeopath* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CGeolocation__CGeopath* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CGeolocation__CGeopath* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CGeolocation__CGeopath* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CGeolocation__CGeopath* This,
        UINT32 index,
        __x_ABI_CWindows_CDevices_CGeolocation_CIGeopath** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CGeolocation__CGeopath* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CGeolocation__CGeopath* This,
        __x_ABI_CWindows_CDevices_CGeolocation_CIGeopath* value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CGeolocation__CGeopath* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        __x_ABI_CWindows_CDevices_CGeolocation_CIGeopath** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CGeolocation__CGeopathVtbl;

    interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CGeolocation__CGeopath
    {
        CONST_VTBL struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CGeolocation__CGeopathVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CGeolocation__CGeopath_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CMaps__CLocalSearch__CLocalLocation_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CMaps__CLocalSearch__CLocalLocation_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CMaps__CLocalSearch__CLocalLocation __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CMaps__CLocalSearch__CLocalLocation;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CMaps__CLocalSearch__CLocalLocation;

    typedef struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CMaps__CLocalSearch__CLocalLocationVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CMaps__CLocalSearch__CLocalLocation* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CMaps__CLocalSearch__CLocalLocation* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CMaps__CLocalSearch__CLocalLocation* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CMaps__CLocalSearch__CLocalLocation* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CMaps__CLocalSearch__CLocalLocation* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CMaps__CLocalSearch__CLocalLocation* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CMaps__CLocalSearch__CLocalLocation* This,
        UINT32 index,
        __x_ABI_CWindows_CServices_CMaps_CLocalSearch_CILocalLocation** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CMaps__CLocalSearch__CLocalLocation* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CMaps__CLocalSearch__CLocalLocation* This,
        __x_ABI_CWindows_CServices_CMaps_CLocalSearch_CILocalLocation* value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CMaps__CLocalSearch__CLocalLocation* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        __x_ABI_CWindows_CServices_CMaps_CLocalSearch_CILocalLocation** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CMaps__CLocalSearch__CLocalLocationVtbl;

    interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CMaps__CLocalSearch__CLocalLocation
    {
        CONST_VTBL struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CMaps__CLocalSearch__CLocalLocationVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CMaps__CLocalSearch__CLocalLocation_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapElement_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapElement_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapElement __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapElement;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapElement;

    typedef struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapElementVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapElement* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapElement* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapElement* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapElement* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapElement* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapElement* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapElement* This,
        UINT32 index,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapElement* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapElement* This,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement* value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapElement* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapElementVtbl;

    interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapElement
    {
        CONST_VTBL struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapElementVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapElement_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapLayer_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapLayer_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapLayer __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapLayer;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapLayer;

    typedef struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapLayerVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapLayer* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapLayer* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapLayer* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapLayer* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapLayer* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapLayer* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapLayer* This,
        UINT32 index,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapLayer** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapLayer* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapLayer* This,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapLayer* value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapLayer* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapLayer** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapLayerVtbl;

    interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapLayer
    {
        CONST_VTBL struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapLayerVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapLayer_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapRouteView_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapRouteView_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapRouteView __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapRouteView;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapRouteView;

    typedef struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapRouteViewVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapRouteView* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapRouteView* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapRouteView* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapRouteView* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapRouteView* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapRouteView* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapRouteView* This,
        UINT32 index,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRouteView** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapRouteView* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapRouteView* This,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRouteView* value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapRouteView* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRouteView** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapRouteViewVtbl;

    interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapRouteView
    {
        CONST_VTBL struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapRouteViewVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapRouteView_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapTileSource_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapTileSource_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapTileSource __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapTileSource;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapTileSource;

    typedef struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapTileSourceVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapTileSource* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapTileSource* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapTileSource* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapTileSource* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapTileSource* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapTileSource* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapTileSource* This,
        UINT32 index,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapTileSource* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapTileSource* This,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource* value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapTileSource* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapTileSourceVtbl;

    interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapTileSource
    {
        CONST_VTBL struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapTileSourceVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapTileSource_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CDependencyObject_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CDependencyObject_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CDependencyObject __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CDependencyObject;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CDependencyObject;

    typedef struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CDependencyObjectVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CDependencyObject* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CDependencyObject* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CDependencyObject* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CDependencyObject* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CDependencyObject* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CDependencyObject* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CDependencyObject* This,
        UINT32 index,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyObject** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CDependencyObject* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CDependencyObject* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyObject* value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CDependencyObject* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyObject** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CDependencyObjectVtbl;

    interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CDependencyObject
    {
        CONST_VTBL struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CDependencyObjectVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CDependencyObject_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVector_1___x_ABI_CWindows__CDevices__CGeolocation__CGeopath_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVector_1___x_ABI_CWindows__CDevices__CGeolocation__CGeopath_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVector_1___x_ABI_CWindows__CDevices__CGeolocation__CGeopath __x_ABI_C__FIVector_1___x_ABI_CWindows__CDevices__CGeolocation__CGeopath;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVector_1___x_ABI_CWindows__CDevices__CGeolocation__CGeopath;

    typedef struct __x_ABI_C__FIVector_1___x_ABI_CWindows__CDevices__CGeolocation__CGeopathVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CDevices__CGeolocation__CGeopath* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CDevices__CGeolocation__CGeopath* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CDevices__CGeolocation__CGeopath* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CDevices__CGeolocation__CGeopath* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CDevices__CGeolocation__CGeopath* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CDevices__CGeolocation__CGeopath* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CDevices__CGeolocation__CGeopath* This,
        UINT32 index,
        __x_ABI_CWindows_CDevices_CGeolocation_CIGeopath** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CDevices__CGeolocation__CGeopath* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* GetView)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CDevices__CGeolocation__CGeopath* This,
        __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CGeolocation__CGeopath** result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CDevices__CGeolocation__CGeopath* This,
        __x_ABI_CWindows_CDevices_CGeolocation_CIGeopath* value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* SetAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CDevices__CGeolocation__CGeopath* This,
        UINT32 index,
        __x_ABI_CWindows_CDevices_CGeolocation_CIGeopath* value);
    HRESULT (STDMETHODCALLTYPE* InsertAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CDevices__CGeolocation__CGeopath* This,
        UINT32 index,
        __x_ABI_CWindows_CDevices_CGeolocation_CIGeopath* value);
    HRESULT (STDMETHODCALLTYPE* RemoveAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CDevices__CGeolocation__CGeopath* This,
        UINT32 index);
    HRESULT (STDMETHODCALLTYPE* Append)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CDevices__CGeolocation__CGeopath* This,
        __x_ABI_CWindows_CDevices_CGeolocation_CIGeopath* value);
    HRESULT (STDMETHODCALLTYPE* RemoveAtEnd)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CDevices__CGeolocation__CGeopath* This);
    HRESULT (STDMETHODCALLTYPE* Clear)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CDevices__CGeolocation__CGeopath* This);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CDevices__CGeolocation__CGeopath* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        __x_ABI_CWindows_CDevices_CGeolocation_CIGeopath** items,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* ReplaceAll)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CDevices__CGeolocation__CGeopath* This,
        UINT32 itemsLength,
        __x_ABI_CWindows_CDevices_CGeolocation_CIGeopath** items);

        END_INTERFACE
    } __x_ABI_C__FIVector_1___x_ABI_CWindows__CDevices__CGeolocation__CGeopathVtbl;

    interface __x_ABI_C__FIVector_1___x_ABI_CWindows__CDevices__CGeolocation__CGeopath
    {
        CONST_VTBL struct __x_ABI_C__FIVector_1___x_ABI_CWindows__CDevices__CGeolocation__CGeopathVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVector_1___x_ABI_CWindows__CDevices__CGeolocation__CGeopath_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapElement_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapElement_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapElement __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapElement;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapElement;

    typedef struct __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapElementVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapElement* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapElement* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapElement* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapElement* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapElement* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapElement* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapElement* This,
        UINT32 index,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapElement* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* GetView)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapElement* This,
        __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapElement** result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapElement* This,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement* value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* SetAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapElement* This,
        UINT32 index,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement* value);
    HRESULT (STDMETHODCALLTYPE* InsertAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapElement* This,
        UINT32 index,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement* value);
    HRESULT (STDMETHODCALLTYPE* RemoveAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapElement* This,
        UINT32 index);
    HRESULT (STDMETHODCALLTYPE* Append)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapElement* This,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement* value);
    HRESULT (STDMETHODCALLTYPE* RemoveAtEnd)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapElement* This);
    HRESULT (STDMETHODCALLTYPE* Clear)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapElement* This);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapElement* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement** items,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* ReplaceAll)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapElement* This,
        UINT32 itemsLength,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement** items);

        END_INTERFACE
    } __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapElementVtbl;

    interface __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapElement
    {
        CONST_VTBL struct __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapElementVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapElement_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapLayer_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapLayer_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapLayer __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapLayer;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapLayer;

    typedef struct __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapLayerVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapLayer* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapLayer* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapLayer* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapLayer* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapLayer* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapLayer* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapLayer* This,
        UINT32 index,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapLayer** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapLayer* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* GetView)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapLayer* This,
        __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapLayer** result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapLayer* This,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapLayer* value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* SetAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapLayer* This,
        UINT32 index,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapLayer* value);
    HRESULT (STDMETHODCALLTYPE* InsertAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapLayer* This,
        UINT32 index,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapLayer* value);
    HRESULT (STDMETHODCALLTYPE* RemoveAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapLayer* This,
        UINT32 index);
    HRESULT (STDMETHODCALLTYPE* Append)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapLayer* This,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapLayer* value);
    HRESULT (STDMETHODCALLTYPE* RemoveAtEnd)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapLayer* This);
    HRESULT (STDMETHODCALLTYPE* Clear)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapLayer* This);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapLayer* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapLayer** items,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* ReplaceAll)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapLayer* This,
        UINT32 itemsLength,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapLayer** items);

        END_INTERFACE
    } __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapLayerVtbl;

    interface __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapLayer
    {
        CONST_VTBL struct __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapLayerVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapLayer_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapRouteView_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapRouteView_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapRouteView __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapRouteView;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapRouteView;

    typedef struct __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapRouteViewVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapRouteView* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapRouteView* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapRouteView* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapRouteView* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapRouteView* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapRouteView* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapRouteView* This,
        UINT32 index,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRouteView** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapRouteView* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* GetView)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapRouteView* This,
        __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapRouteView** result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapRouteView* This,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRouteView* value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* SetAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapRouteView* This,
        UINT32 index,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRouteView* value);
    HRESULT (STDMETHODCALLTYPE* InsertAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapRouteView* This,
        UINT32 index,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRouteView* value);
    HRESULT (STDMETHODCALLTYPE* RemoveAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapRouteView* This,
        UINT32 index);
    HRESULT (STDMETHODCALLTYPE* Append)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapRouteView* This,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRouteView* value);
    HRESULT (STDMETHODCALLTYPE* RemoveAtEnd)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapRouteView* This);
    HRESULT (STDMETHODCALLTYPE* Clear)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapRouteView* This);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapRouteView* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRouteView** items,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* ReplaceAll)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapRouteView* This,
        UINT32 itemsLength,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRouteView** items);

        END_INTERFACE
    } __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapRouteViewVtbl;

    interface __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapRouteView
    {
        CONST_VTBL struct __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapRouteViewVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapRouteView_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapTileSource_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapTileSource_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapTileSource __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapTileSource;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapTileSource;

    typedef struct __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapTileSourceVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapTileSource* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapTileSource* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapTileSource* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapTileSource* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapTileSource* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapTileSource* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapTileSource* This,
        UINT32 index,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapTileSource* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* GetView)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapTileSource* This,
        __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapTileSource** result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapTileSource* This,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource* value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* SetAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapTileSource* This,
        UINT32 index,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource* value);
    HRESULT (STDMETHODCALLTYPE* InsertAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapTileSource* This,
        UINT32 index,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource* value);
    HRESULT (STDMETHODCALLTYPE* RemoveAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapTileSource* This,
        UINT32 index);
    HRESULT (STDMETHODCALLTYPE* Append)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapTileSource* This,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource* value);
    HRESULT (STDMETHODCALLTYPE* RemoveAtEnd)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapTileSource* This);
    HRESULT (STDMETHODCALLTYPE* Clear)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapTileSource* This);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapTileSource* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource** items,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* ReplaceAll)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapTileSource* This,
        UINT32 itemsLength,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource** items);

        END_INTERFACE
    } __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapTileSourceVtbl;

    interface __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapTileSource
    {
        CONST_VTBL struct __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapTileSourceVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapTileSource_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CDependencyObject_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CDependencyObject_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CDependencyObject __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CDependencyObject;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CDependencyObject;

    typedef struct __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CDependencyObjectVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CDependencyObject* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CDependencyObject* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CDependencyObject* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CDependencyObject* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CDependencyObject* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CDependencyObject* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CDependencyObject* This,
        UINT32 index,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyObject** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CDependencyObject* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* GetView)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CDependencyObject* This,
        __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CDependencyObject** result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CDependencyObject* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyObject* value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* SetAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CDependencyObject* This,
        UINT32 index,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyObject* value);
    HRESULT (STDMETHODCALLTYPE* InsertAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CDependencyObject* This,
        UINT32 index,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyObject* value);
    HRESULT (STDMETHODCALLTYPE* RemoveAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CDependencyObject* This,
        UINT32 index);
    HRESULT (STDMETHODCALLTYPE* Append)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CDependencyObject* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyObject* value);
    HRESULT (STDMETHODCALLTYPE* RemoveAtEnd)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CDependencyObject* This);
    HRESULT (STDMETHODCALLTYPE* Clear)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CDependencyObject* This);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CDependencyObject* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyObject** items,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* ReplaceAll)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CDependencyObject* This,
        UINT32 itemsLength,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyObject** items);

        END_INTERFACE
    } __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CDependencyObjectVtbl;

    interface __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CDependencyObject
    {
        CONST_VTBL struct __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CDependencyObjectVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CDependencyObject_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIReference_1_double_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIReference_1_double_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIReference_1_double __x_ABI_C__FIReference_1_double;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIReference_1_double;

    typedef struct __x_ABI_C__FIReference_1_doubleVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIReference_1_double* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIReference_1_double* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIReference_1_double* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIReference_1_double* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIReference_1_double* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIReference_1_double* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Value)(__x_ABI_C__FIReference_1_double* This,
        DOUBLE* result);

        END_INTERFACE
    } __x_ABI_C__FIReference_1_doubleVtbl;

    interface __x_ABI_C__FIReference_1_double
    {
        CONST_VTBL struct __x_ABI_C__FIReference_1_doubleVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIReference_1_double_INTERFACE_DEFINED__
    
typedef struct __x_ABI_CWindows_CUI_CXaml_CThickness __x_ABI_CWindows_CUI_CXaml_CThickness;

#if !defined(____x_ABI_C__FIReference_1___x_ABI_CWindows__CUI__CXaml__CThickness_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIReference_1___x_ABI_CWindows__CUI__CXaml__CThickness_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIReference_1___x_ABI_CWindows__CUI__CXaml__CThickness __x_ABI_C__FIReference_1___x_ABI_CWindows__CUI__CXaml__CThickness;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIReference_1___x_ABI_CWindows__CUI__CXaml__CThickness;

    typedef struct __x_ABI_C__FIReference_1___x_ABI_CWindows__CUI__CXaml__CThicknessVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIReference_1___x_ABI_CWindows__CUI__CXaml__CThickness* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIReference_1___x_ABI_CWindows__CUI__CXaml__CThickness* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIReference_1___x_ABI_CWindows__CUI__CXaml__CThickness* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIReference_1___x_ABI_CWindows__CUI__CXaml__CThickness* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIReference_1___x_ABI_CWindows__CUI__CXaml__CThickness* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIReference_1___x_ABI_CWindows__CUI__CXaml__CThickness* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Value)(__x_ABI_C__FIReference_1___x_ABI_CWindows__CUI__CXaml__CThickness* This,
        struct __x_ABI_CWindows_CUI_CXaml_CThickness* result);

        END_INTERFACE
    } __x_ABI_C__FIReference_1___x_ABI_CWindows__CUI__CXaml__CThicknessVtbl;

    interface __x_ABI_C__FIReference_1___x_ABI_CWindows__CUI__CXaml__CThickness
    {
        CONST_VTBL struct __x_ABI_C__FIReference_1___x_ABI_CWindows__CUI__CXaml__CThicknessVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIReference_1___x_ABI_CWindows__CUI__CXaml__CThickness_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CCustomMapTileDataSource___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapTileBitmapRequestedEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CCustomMapTileDataSource___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapTileBitmapRequestedEventArgs_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CCustomMapTileDataSource___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapTileBitmapRequestedEventArgs __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CCustomMapTileDataSource___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapTileBitmapRequestedEventArgs;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CCustomMapTileDataSource___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapTileBitmapRequestedEventArgs;

    typedef struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CCustomMapTileDataSource___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapTileBitmapRequestedEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CCustomMapTileDataSource___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapTileBitmapRequestedEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CCustomMapTileDataSource___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapTileBitmapRequestedEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CCustomMapTileDataSource___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapTileBitmapRequestedEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CCustomMapTileDataSource___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapTileBitmapRequestedEventArgs* This,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CICustomMapTileDataSource* sender,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequestedEventArgs* args);

        END_INTERFACE
    } __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CCustomMapTileDataSource___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapTileBitmapRequestedEventArgsVtbl;

    interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CCustomMapTileDataSource___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapTileBitmapRequestedEventArgs
    {
        CONST_VTBL struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CCustomMapTileDataSource___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapTileBitmapRequestedEventArgsVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CCustomMapTileDataSource___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapTileBitmapRequestedEventArgs_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CHttpMapTileDataSource___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapTileUriRequestedEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CHttpMapTileDataSource___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapTileUriRequestedEventArgs_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CHttpMapTileDataSource___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapTileUriRequestedEventArgs __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CHttpMapTileDataSource___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapTileUriRequestedEventArgs;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CHttpMapTileDataSource___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapTileUriRequestedEventArgs;

    typedef struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CHttpMapTileDataSource___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapTileUriRequestedEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CHttpMapTileDataSource___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapTileUriRequestedEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CHttpMapTileDataSource___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapTileUriRequestedEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CHttpMapTileDataSource___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapTileUriRequestedEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CHttpMapTileDataSource___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapTileUriRequestedEventArgs* This,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIHttpMapTileDataSource* sender,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequestedEventArgs* args);

        END_INTERFACE
    } __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CHttpMapTileDataSource___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapTileUriRequestedEventArgsVtbl;

    interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CHttpMapTileDataSource___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapTileUriRequestedEventArgs
    {
        CONST_VTBL struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CHttpMapTileDataSource___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapTileUriRequestedEventArgsVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CHttpMapTileDataSource___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapTileUriRequestedEventArgs_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CLocalMapTileDataSource___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapTileUriRequestedEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CLocalMapTileDataSource___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapTileUriRequestedEventArgs_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CLocalMapTileDataSource___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapTileUriRequestedEventArgs __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CLocalMapTileDataSource___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapTileUriRequestedEventArgs;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CLocalMapTileDataSource___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapTileUriRequestedEventArgs;

    typedef struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CLocalMapTileDataSource___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapTileUriRequestedEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CLocalMapTileDataSource___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapTileUriRequestedEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CLocalMapTileDataSource___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapTileUriRequestedEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CLocalMapTileDataSource___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapTileUriRequestedEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CLocalMapTileDataSource___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapTileUriRequestedEventArgs* This,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CILocalMapTileDataSource* sender,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequestedEventArgs* args);

        END_INTERFACE
    } __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CLocalMapTileDataSource___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapTileUriRequestedEventArgsVtbl;

    interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CLocalMapTileDataSource___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapTileUriRequestedEventArgs
    {
        CONST_VTBL struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CLocalMapTileDataSource___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapTileUriRequestedEventArgsVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CLocalMapTileDataSource___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapTileUriRequestedEventArgs_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl_IInspectable_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl_IInspectable_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl_IInspectable __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl_IInspectable;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl_IInspectable;

    typedef struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl_IInspectableVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl_IInspectable* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl_IInspectable* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl_IInspectable* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl_IInspectable* This,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl* sender,
        IInspectable* args);

        END_INTERFACE
    } __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl_IInspectableVtbl;

    interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl_IInspectable
    {
        CONST_VTBL struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl_IInspectableVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl_IInspectable_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapActualCameraChangedEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapActualCameraChangedEventArgs_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapActualCameraChangedEventArgs __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapActualCameraChangedEventArgs;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapActualCameraChangedEventArgs;

    typedef struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapActualCameraChangedEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapActualCameraChangedEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapActualCameraChangedEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapActualCameraChangedEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapActualCameraChangedEventArgs* This,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl* sender,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangedEventArgs* args);

        END_INTERFACE
    } __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapActualCameraChangedEventArgsVtbl;

    interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapActualCameraChangedEventArgs
    {
        CONST_VTBL struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapActualCameraChangedEventArgsVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapActualCameraChangedEventArgs_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapActualCameraChangingEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapActualCameraChangingEventArgs_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapActualCameraChangingEventArgs __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapActualCameraChangingEventArgs;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapActualCameraChangingEventArgs;

    typedef struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapActualCameraChangingEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapActualCameraChangingEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapActualCameraChangingEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapActualCameraChangingEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapActualCameraChangingEventArgs* This,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl* sender,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangingEventArgs* args);

        END_INTERFACE
    } __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapActualCameraChangingEventArgsVtbl;

    interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapActualCameraChangingEventArgs
    {
        CONST_VTBL struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapActualCameraChangingEventArgsVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapActualCameraChangingEventArgs_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapContextRequestedEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapContextRequestedEventArgs_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapContextRequestedEventArgs __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapContextRequestedEventArgs;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapContextRequestedEventArgs;

    typedef struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapContextRequestedEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapContextRequestedEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapContextRequestedEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapContextRequestedEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapContextRequestedEventArgs* This,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl* sender,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapContextRequestedEventArgs* args);

        END_INTERFACE
    } __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapContextRequestedEventArgsVtbl;

    interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapContextRequestedEventArgs
    {
        CONST_VTBL struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapContextRequestedEventArgsVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapContextRequestedEventArgs_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControlBusinessLandmarkClickEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControlBusinessLandmarkClickEventArgs_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControlBusinessLandmarkClickEventArgs __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControlBusinessLandmarkClickEventArgs;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControlBusinessLandmarkClickEventArgs;

    typedef struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControlBusinessLandmarkClickEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControlBusinessLandmarkClickEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControlBusinessLandmarkClickEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControlBusinessLandmarkClickEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControlBusinessLandmarkClickEventArgs* This,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl* sender,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkClickEventArgs* args);

        END_INTERFACE
    } __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControlBusinessLandmarkClickEventArgsVtbl;

    interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControlBusinessLandmarkClickEventArgs
    {
        CONST_VTBL struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControlBusinessLandmarkClickEventArgsVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControlBusinessLandmarkClickEventArgs_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControlBusinessLandmarkPointerEnteredEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControlBusinessLandmarkPointerEnteredEventArgs_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControlBusinessLandmarkPointerEnteredEventArgs __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControlBusinessLandmarkPointerEnteredEventArgs;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControlBusinessLandmarkPointerEnteredEventArgs;

    typedef struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControlBusinessLandmarkPointerEnteredEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControlBusinessLandmarkPointerEnteredEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControlBusinessLandmarkPointerEnteredEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControlBusinessLandmarkPointerEnteredEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControlBusinessLandmarkPointerEnteredEventArgs* This,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl* sender,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkPointerEnteredEventArgs* args);

        END_INTERFACE
    } __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControlBusinessLandmarkPointerEnteredEventArgsVtbl;

    interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControlBusinessLandmarkPointerEnteredEventArgs
    {
        CONST_VTBL struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControlBusinessLandmarkPointerEnteredEventArgsVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControlBusinessLandmarkPointerEnteredEventArgs_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControlBusinessLandmarkPointerExitedEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControlBusinessLandmarkPointerExitedEventArgs_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControlBusinessLandmarkPointerExitedEventArgs __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControlBusinessLandmarkPointerExitedEventArgs;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControlBusinessLandmarkPointerExitedEventArgs;

    typedef struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControlBusinessLandmarkPointerExitedEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControlBusinessLandmarkPointerExitedEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControlBusinessLandmarkPointerExitedEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControlBusinessLandmarkPointerExitedEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControlBusinessLandmarkPointerExitedEventArgs* This,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl* sender,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkPointerExitedEventArgs* args);

        END_INTERFACE
    } __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControlBusinessLandmarkPointerExitedEventArgsVtbl;

    interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControlBusinessLandmarkPointerExitedEventArgs
    {
        CONST_VTBL struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControlBusinessLandmarkPointerExitedEventArgsVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControlBusinessLandmarkPointerExitedEventArgs_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControlBusinessLandmarkRightTappedEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControlBusinessLandmarkRightTappedEventArgs_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControlBusinessLandmarkRightTappedEventArgs __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControlBusinessLandmarkRightTappedEventArgs;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControlBusinessLandmarkRightTappedEventArgs;

    typedef struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControlBusinessLandmarkRightTappedEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControlBusinessLandmarkRightTappedEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControlBusinessLandmarkRightTappedEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControlBusinessLandmarkRightTappedEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControlBusinessLandmarkRightTappedEventArgs* This,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl* sender,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkRightTappedEventArgs* args);

        END_INTERFACE
    } __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControlBusinessLandmarkRightTappedEventArgsVtbl;

    interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControlBusinessLandmarkRightTappedEventArgs
    {
        CONST_VTBL struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControlBusinessLandmarkRightTappedEventArgsVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControlBusinessLandmarkRightTappedEventArgs_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControlTransitFeatureClickEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControlTransitFeatureClickEventArgs_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControlTransitFeatureClickEventArgs __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControlTransitFeatureClickEventArgs;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControlTransitFeatureClickEventArgs;

    typedef struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControlTransitFeatureClickEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControlTransitFeatureClickEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControlTransitFeatureClickEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControlTransitFeatureClickEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControlTransitFeatureClickEventArgs* This,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl* sender,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeatureClickEventArgs* args);

        END_INTERFACE
    } __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControlTransitFeatureClickEventArgsVtbl;

    interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControlTransitFeatureClickEventArgs
    {
        CONST_VTBL struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControlTransitFeatureClickEventArgsVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControlTransitFeatureClickEventArgs_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControlTransitFeaturePointerEnteredEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControlTransitFeaturePointerEnteredEventArgs_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControlTransitFeaturePointerEnteredEventArgs __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControlTransitFeaturePointerEnteredEventArgs;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControlTransitFeaturePointerEnteredEventArgs;

    typedef struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControlTransitFeaturePointerEnteredEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControlTransitFeaturePointerEnteredEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControlTransitFeaturePointerEnteredEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControlTransitFeaturePointerEnteredEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControlTransitFeaturePointerEnteredEventArgs* This,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl* sender,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeaturePointerEnteredEventArgs* args);

        END_INTERFACE
    } __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControlTransitFeaturePointerEnteredEventArgsVtbl;

    interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControlTransitFeaturePointerEnteredEventArgs
    {
        CONST_VTBL struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControlTransitFeaturePointerEnteredEventArgsVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControlTransitFeaturePointerEnteredEventArgs_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControlTransitFeaturePointerExitedEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControlTransitFeaturePointerExitedEventArgs_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControlTransitFeaturePointerExitedEventArgs __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControlTransitFeaturePointerExitedEventArgs;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControlTransitFeaturePointerExitedEventArgs;

    typedef struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControlTransitFeaturePointerExitedEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControlTransitFeaturePointerExitedEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControlTransitFeaturePointerExitedEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControlTransitFeaturePointerExitedEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControlTransitFeaturePointerExitedEventArgs* This,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl* sender,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeaturePointerExitedEventArgs* args);

        END_INTERFACE
    } __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControlTransitFeaturePointerExitedEventArgsVtbl;

    interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControlTransitFeaturePointerExitedEventArgs
    {
        CONST_VTBL struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControlTransitFeaturePointerExitedEventArgsVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControlTransitFeaturePointerExitedEventArgs_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControlTransitFeatureRightTappedEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControlTransitFeatureRightTappedEventArgs_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControlTransitFeatureRightTappedEventArgs __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControlTransitFeatureRightTappedEventArgs;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControlTransitFeatureRightTappedEventArgs;

    typedef struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControlTransitFeatureRightTappedEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControlTransitFeatureRightTappedEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControlTransitFeatureRightTappedEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControlTransitFeatureRightTappedEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControlTransitFeatureRightTappedEventArgs* This,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl* sender,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeatureRightTappedEventArgs* args);

        END_INTERFACE
    } __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControlTransitFeatureRightTappedEventArgsVtbl;

    interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControlTransitFeatureRightTappedEventArgs
    {
        CONST_VTBL struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControlTransitFeatureRightTappedEventArgsVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControlTransitFeatureRightTappedEventArgs_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapCustomExperienceChangedEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapCustomExperienceChangedEventArgs_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapCustomExperienceChangedEventArgs __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapCustomExperienceChangedEventArgs;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapCustomExperienceChangedEventArgs;

    typedef struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapCustomExperienceChangedEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapCustomExperienceChangedEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapCustomExperienceChangedEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapCustomExperienceChangedEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapCustomExperienceChangedEventArgs* This,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl* sender,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCustomExperienceChangedEventArgs* args);

        END_INTERFACE
    } __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapCustomExperienceChangedEventArgsVtbl;

    interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapCustomExperienceChangedEventArgs
    {
        CONST_VTBL struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapCustomExperienceChangedEventArgsVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapCustomExperienceChangedEventArgs_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapElementClickEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapElementClickEventArgs_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapElementClickEventArgs __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapElementClickEventArgs;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapElementClickEventArgs;

    typedef struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapElementClickEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapElementClickEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapElementClickEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapElementClickEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapElementClickEventArgs* This,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl* sender,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementClickEventArgs* args);

        END_INTERFACE
    } __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapElementClickEventArgsVtbl;

    interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapElementClickEventArgs
    {
        CONST_VTBL struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapElementClickEventArgsVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapElementClickEventArgs_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapElementPointerEnteredEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapElementPointerEnteredEventArgs_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapElementPointerEnteredEventArgs __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapElementPointerEnteredEventArgs;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapElementPointerEnteredEventArgs;

    typedef struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapElementPointerEnteredEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapElementPointerEnteredEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapElementPointerEnteredEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapElementPointerEnteredEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapElementPointerEnteredEventArgs* This,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl* sender,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementPointerEnteredEventArgs* args);

        END_INTERFACE
    } __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapElementPointerEnteredEventArgsVtbl;

    interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapElementPointerEnteredEventArgs
    {
        CONST_VTBL struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapElementPointerEnteredEventArgsVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapElementPointerEnteredEventArgs_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapElementPointerExitedEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapElementPointerExitedEventArgs_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapElementPointerExitedEventArgs __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapElementPointerExitedEventArgs;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapElementPointerExitedEventArgs;

    typedef struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapElementPointerExitedEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapElementPointerExitedEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapElementPointerExitedEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapElementPointerExitedEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapElementPointerExitedEventArgs* This,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl* sender,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementPointerExitedEventArgs* args);

        END_INTERFACE
    } __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapElementPointerExitedEventArgsVtbl;

    interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapElementPointerExitedEventArgs
    {
        CONST_VTBL struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapElementPointerExitedEventArgsVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapElementPointerExitedEventArgs_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapInputEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapInputEventArgs_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapInputEventArgs __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapInputEventArgs;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapInputEventArgs;

    typedef struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapInputEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapInputEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapInputEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapInputEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapInputEventArgs* This,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl* sender,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapInputEventArgs* args);

        END_INTERFACE
    } __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapInputEventArgsVtbl;

    interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapInputEventArgs
    {
        CONST_VTBL struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapInputEventArgsVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapInputEventArgs_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapRightTappedEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapRightTappedEventArgs_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapRightTappedEventArgs __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapRightTappedEventArgs;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapRightTappedEventArgs;

    typedef struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapRightTappedEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapRightTappedEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapRightTappedEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapRightTappedEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapRightTappedEventArgs* This,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl* sender,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRightTappedEventArgs* args);

        END_INTERFACE
    } __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapRightTappedEventArgsVtbl;

    interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapRightTappedEventArgs
    {
        CONST_VTBL struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapRightTappedEventArgsVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapRightTappedEventArgs_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapTargetCameraChangedEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapTargetCameraChangedEventArgs_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapTargetCameraChangedEventArgs __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapTargetCameraChangedEventArgs;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapTargetCameraChangedEventArgs;

    typedef struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapTargetCameraChangedEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapTargetCameraChangedEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapTargetCameraChangedEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapTargetCameraChangedEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapTargetCameraChangedEventArgs* This,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl* sender,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTargetCameraChangedEventArgs* args);

        END_INTERFACE
    } __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapTargetCameraChangedEventArgsVtbl;

    interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapTargetCameraChangedEventArgs
    {
        CONST_VTBL struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapTargetCameraChangedEventArgsVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapTargetCameraChangedEventArgs_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapElementsLayer___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapElementsLayerClickEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapElementsLayer___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapElementsLayerClickEventArgs_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapElementsLayer___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapElementsLayerClickEventArgs __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapElementsLayer___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapElementsLayerClickEventArgs;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapElementsLayer___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapElementsLayerClickEventArgs;

    typedef struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapElementsLayer___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapElementsLayerClickEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapElementsLayer___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapElementsLayerClickEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapElementsLayer___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapElementsLayerClickEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapElementsLayer___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapElementsLayerClickEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapElementsLayer___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapElementsLayerClickEventArgs* This,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayer* sender,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerClickEventArgs* args);

        END_INTERFACE
    } __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapElementsLayer___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapElementsLayerClickEventArgsVtbl;

    interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapElementsLayer___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapElementsLayerClickEventArgs
    {
        CONST_VTBL struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapElementsLayer___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapElementsLayerClickEventArgsVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapElementsLayer___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapElementsLayerClickEventArgs_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapElementsLayer___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapElementsLayerContextRequestedEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapElementsLayer___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapElementsLayerContextRequestedEventArgs_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapElementsLayer___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapElementsLayerContextRequestedEventArgs __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapElementsLayer___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapElementsLayerContextRequestedEventArgs;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapElementsLayer___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapElementsLayerContextRequestedEventArgs;

    typedef struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapElementsLayer___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapElementsLayerContextRequestedEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapElementsLayer___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapElementsLayerContextRequestedEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapElementsLayer___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapElementsLayerContextRequestedEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapElementsLayer___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapElementsLayerContextRequestedEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapElementsLayer___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapElementsLayerContextRequestedEventArgs* This,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayer* sender,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerContextRequestedEventArgs* args);

        END_INTERFACE
    } __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapElementsLayer___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapElementsLayerContextRequestedEventArgsVtbl;

    interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapElementsLayer___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapElementsLayerContextRequestedEventArgs
    {
        CONST_VTBL struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapElementsLayer___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapElementsLayerContextRequestedEventArgsVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapElementsLayer___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapElementsLayerContextRequestedEventArgs_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapElementsLayer___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapElementsLayerPointerEnteredEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapElementsLayer___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapElementsLayerPointerEnteredEventArgs_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapElementsLayer___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapElementsLayerPointerEnteredEventArgs __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapElementsLayer___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapElementsLayerPointerEnteredEventArgs;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapElementsLayer___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapElementsLayerPointerEnteredEventArgs;

    typedef struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapElementsLayer___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapElementsLayerPointerEnteredEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapElementsLayer___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapElementsLayerPointerEnteredEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapElementsLayer___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapElementsLayerPointerEnteredEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapElementsLayer___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapElementsLayerPointerEnteredEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapElementsLayer___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapElementsLayerPointerEnteredEventArgs* This,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayer* sender,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerPointerEnteredEventArgs* args);

        END_INTERFACE
    } __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapElementsLayer___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapElementsLayerPointerEnteredEventArgsVtbl;

    interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapElementsLayer___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapElementsLayerPointerEnteredEventArgs
    {
        CONST_VTBL struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapElementsLayer___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapElementsLayerPointerEnteredEventArgsVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapElementsLayer___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapElementsLayerPointerEnteredEventArgs_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapElementsLayer___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapElementsLayerPointerExitedEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapElementsLayer___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapElementsLayerPointerExitedEventArgs_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapElementsLayer___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapElementsLayerPointerExitedEventArgs __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapElementsLayer___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapElementsLayerPointerExitedEventArgs;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapElementsLayer___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapElementsLayerPointerExitedEventArgs;

    typedef struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapElementsLayer___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapElementsLayerPointerExitedEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapElementsLayer___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapElementsLayerPointerExitedEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapElementsLayer___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapElementsLayerPointerExitedEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapElementsLayer___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapElementsLayerPointerExitedEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapElementsLayer___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapElementsLayerPointerExitedEventArgs* This,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayer* sender,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerPointerExitedEventArgs* args);

        END_INTERFACE
    } __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapElementsLayer___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapElementsLayerPointerExitedEventArgsVtbl;

    interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapElementsLayer___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapElementsLayerPointerExitedEventArgs
    {
        CONST_VTBL struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapElementsLayer___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapElementsLayerPointerExitedEventArgsVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapElementsLayer___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapElementsLayerPointerExitedEventArgs_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapScene___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapTargetCameraChangedEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapScene___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapTargetCameraChangedEventArgs_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapScene___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapTargetCameraChangedEventArgs __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapScene___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapTargetCameraChangedEventArgs;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapScene___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapTargetCameraChangedEventArgs;

    typedef struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapScene___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapTargetCameraChangedEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapScene___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapTargetCameraChangedEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapScene___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapTargetCameraChangedEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapScene___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapTargetCameraChangedEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapScene___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapTargetCameraChangedEventArgs* This,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapScene* sender,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTargetCameraChangedEventArgs* args);

        END_INTERFACE
    } __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapScene___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapTargetCameraChangedEventArgsVtbl;

    interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapScene___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapTargetCameraChangedEventArgs
    {
        CONST_VTBL struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapScene___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapTargetCameraChangedEventArgsVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapScene___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapTargetCameraChangedEventArgs_INTERFACE_DEFINED__
    
typedef enum __x_ABI_CWindows_CDevices_CGeolocation_CAltitudeReferenceSystem __x_ABI_CWindows_CDevices_CGeolocation_CAltitudeReferenceSystem;

#ifndef ____x_ABI_CWindows_CDevices_CGeolocation_CIGeoboundingBox_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CGeolocation_CIGeoboundingBox_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CDevices_CGeolocation_CIGeoboundingBox __x_ABI_CWindows_CDevices_CGeolocation_CIGeoboundingBox;

#endif // ____x_ABI_CWindows_CDevices_CGeolocation_CIGeoboundingBox_FWD_DEFINED__

typedef enum __x_ABI_CWindows_CFoundation_CAsyncStatus __x_ABI_CWindows_CFoundation_CAsyncStatus;

#ifndef ____x_ABI_CWindows_CFoundation_CIAsyncInfo_FWD_DEFINED__
#define ____x_ABI_CWindows_CFoundation_CIAsyncInfo_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CFoundation_CIAsyncInfo __x_ABI_CWindows_CFoundation_CIAsyncInfo;

#endif // ____x_ABI_CWindows_CFoundation_CIAsyncInfo_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CFoundation_CIPropertyValue_FWD_DEFINED__
#define ____x_ABI_CWindows_CFoundation_CIPropertyValue_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CFoundation_CIPropertyValue __x_ABI_CWindows_CFoundation_CIPropertyValue;

#endif // ____x_ABI_CWindows_CFoundation_CIPropertyValue_FWD_DEFINED__

typedef struct __x_ABI_CWindows_CFoundation_CNumerics_CVector3 __x_ABI_CWindows_CFoundation_CNumerics_CVector3;

typedef struct __x_ABI_CWindows_CFoundation_CPoint __x_ABI_CWindows_CFoundation_CPoint;

typedef struct __x_ABI_CWindows_CFoundation_CTimeSpan __x_ABI_CWindows_CFoundation_CTimeSpan;

#ifndef ____x_ABI_CWindows_CFoundation_CIUriRuntimeClass_FWD_DEFINED__
#define ____x_ABI_CWindows_CFoundation_CIUriRuntimeClass_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CFoundation_CIUriRuntimeClass __x_ABI_CWindows_CFoundation_CIUriRuntimeClass;

#endif // ____x_ABI_CWindows_CFoundation_CIUriRuntimeClass_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CServices_CMaps_CIMapRoute_FWD_DEFINED__
#define ____x_ABI_CWindows_CServices_CMaps_CIMapRoute_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CServices_CMaps_CIMapRoute __x_ABI_CWindows_CServices_CMaps_CIMapRoute;

#endif // ____x_ABI_CWindows_CServices_CMaps_CIMapRoute_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CStorage_CStreams_CIRandomAccessStreamReference_FWD_DEFINED__
#define ____x_ABI_CWindows_CStorage_CStreams_CIRandomAccessStreamReference_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CStorage_CStreams_CIRandomAccessStreamReference __x_ABI_CWindows_CStorage_CStreams_CIRandomAccessStreamReference;

#endif // ____x_ABI_CWindows_CStorage_CStreams_CIRandomAccessStreamReference_FWD_DEFINED__

typedef struct __x_ABI_CWindows_CUI_CColor __x_ABI_CWindows_CUI_CColor;

#ifndef ____x_ABI_CWindows_CUI_CComposition_CIAnimationObject_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CComposition_CIAnimationObject_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CComposition_CIAnimationObject __x_ABI_CWindows_CUI_CComposition_CIAnimationObject;

#endif // ____x_ABI_CWindows_CUI_CComposition_CIAnimationObject_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CComposition_CIVisualElement_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CComposition_CIVisualElement_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CComposition_CIVisualElement __x_ABI_CWindows_CUI_CComposition_CIVisualElement;

#endif // ____x_ABI_CWindows_CUI_CComposition_CIVisualElement_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CIControl_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CIControl_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CIControl __x_ABI_CWindows_CUI_CXaml_CControls_CIControl;

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CIControl_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CIControl2_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CIControl2_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CIControl2 __x_ABI_CWindows_CUI_CXaml_CControls_CIControl2;

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CIControl2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CIControl3_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CIControl3_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CIControl3 __x_ABI_CWindows_CUI_CXaml_CControls_CIControl3;

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CIControl3_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CIControl4_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CIControl4_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CIControl4 __x_ABI_CWindows_CUI_CXaml_CControls_CIControl4;

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CIControl4_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CIControl5_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CIControl5_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CIControl5 __x_ABI_CWindows_CUI_CXaml_CControls_CIControl5;

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CIControl5_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CIControl7_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CIControl7_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CIControl7 __x_ABI_CWindows_CUI_CXaml_CControls_CIControl7;

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CIControl7_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CIControlOverrides_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CIControlOverrides_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CIControlOverrides __x_ABI_CWindows_CUI_CXaml_CControls_CIControlOverrides;

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CIControlOverrides_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CIControlOverrides6_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CIControlOverrides6_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CIControlOverrides6 __x_ABI_CWindows_CUI_CXaml_CControls_CIControlOverrides6;

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CIControlOverrides6_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CIControlProtected_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CIControlProtected_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CIControlProtected __x_ABI_CWindows_CUI_CXaml_CControls_CIControlProtected;

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CIControlProtected_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CIDataTemplate_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CIDataTemplate_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CIDataTemplate __x_ABI_CWindows_CUI_CXaml_CIDataTemplate;

#endif // ____x_ABI_CWindows_CUI_CXaml_CIDataTemplate_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CIDependencyProperty_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CIDependencyProperty_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty;

#endif // ____x_ABI_CWindows_CUI_CXaml_CIDependencyProperty_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CIDependencyObject2_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CIDependencyObject2_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CIDependencyObject2 __x_ABI_CWindows_CUI_CXaml_CIDependencyObject2;

#endif // ____x_ABI_CWindows_CUI_CXaml_CIDependencyObject2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CIFrameworkElement_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CIFrameworkElement_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CIFrameworkElement __x_ABI_CWindows_CUI_CXaml_CIFrameworkElement;

#endif // ____x_ABI_CWindows_CUI_CXaml_CIFrameworkElement_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CIFrameworkElement2_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CIFrameworkElement2_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CIFrameworkElement2 __x_ABI_CWindows_CUI_CXaml_CIFrameworkElement2;

#endif // ____x_ABI_CWindows_CUI_CXaml_CIFrameworkElement2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CIFrameworkElement3_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CIFrameworkElement3_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CIFrameworkElement3 __x_ABI_CWindows_CUI_CXaml_CIFrameworkElement3;

#endif // ____x_ABI_CWindows_CUI_CXaml_CIFrameworkElement3_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CIFrameworkElement4_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CIFrameworkElement4_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CIFrameworkElement4 __x_ABI_CWindows_CUI_CXaml_CIFrameworkElement4;

#endif // ____x_ABI_CWindows_CUI_CXaml_CIFrameworkElement4_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CIFrameworkElement6_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CIFrameworkElement6_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CIFrameworkElement6 __x_ABI_CWindows_CUI_CXaml_CIFrameworkElement6;

#endif // ____x_ABI_CWindows_CUI_CXaml_CIFrameworkElement6_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CIFrameworkElement7_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CIFrameworkElement7_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CIFrameworkElement7 __x_ABI_CWindows_CUI_CXaml_CIFrameworkElement7;

#endif // ____x_ABI_CWindows_CUI_CXaml_CIFrameworkElement7_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CIFrameworkElementOverrides_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CIFrameworkElementOverrides_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CIFrameworkElementOverrides __x_ABI_CWindows_CUI_CXaml_CIFrameworkElementOverrides;

#endif // ____x_ABI_CWindows_CUI_CXaml_CIFrameworkElementOverrides_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CIFrameworkElementOverrides2_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CIFrameworkElementOverrides2_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CIFrameworkElementOverrides2 __x_ABI_CWindows_CUI_CXaml_CIFrameworkElementOverrides2;

#endif // ____x_ABI_CWindows_CUI_CXaml_CIFrameworkElementOverrides2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CIFrameworkElementProtected7_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CIFrameworkElementProtected7_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CIFrameworkElementProtected7 __x_ABI_CWindows_CUI_CXaml_CIFrameworkElementProtected7;

#endif // ____x_ABI_CWindows_CUI_CXaml_CIFrameworkElementProtected7_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CIUIElement_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CIUIElement_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CIUIElement __x_ABI_CWindows_CUI_CXaml_CIUIElement;

#endif // ____x_ABI_CWindows_CUI_CXaml_CIUIElement_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CIUIElement10_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CIUIElement10_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CIUIElement10 __x_ABI_CWindows_CUI_CXaml_CIUIElement10;

#endif // ____x_ABI_CWindows_CUI_CXaml_CIUIElement10_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CIUIElement2_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CIUIElement2_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CIUIElement2 __x_ABI_CWindows_CUI_CXaml_CIUIElement2;

#endif // ____x_ABI_CWindows_CUI_CXaml_CIUIElement2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CIUIElement3_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CIUIElement3_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CIUIElement3 __x_ABI_CWindows_CUI_CXaml_CIUIElement3;

#endif // ____x_ABI_CWindows_CUI_CXaml_CIUIElement3_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CIUIElement4_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CIUIElement4_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CIUIElement4 __x_ABI_CWindows_CUI_CXaml_CIUIElement4;

#endif // ____x_ABI_CWindows_CUI_CXaml_CIUIElement4_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CIUIElement5_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CIUIElement5_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CIUIElement5 __x_ABI_CWindows_CUI_CXaml_CIUIElement5;

#endif // ____x_ABI_CWindows_CUI_CXaml_CIUIElement5_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CIUIElement7_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CIUIElement7_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CIUIElement7 __x_ABI_CWindows_CUI_CXaml_CIUIElement7;

#endif // ____x_ABI_CWindows_CUI_CXaml_CIUIElement7_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CIUIElement8_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CIUIElement8_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CIUIElement8 __x_ABI_CWindows_CUI_CXaml_CIUIElement8;

#endif // ____x_ABI_CWindows_CUI_CXaml_CIUIElement8_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CIUIElement9_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CIUIElement9_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CIUIElement9 __x_ABI_CWindows_CUI_CXaml_CIUIElement9;

#endif // ____x_ABI_CWindows_CUI_CXaml_CIUIElement9_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CIUIElementOverrides_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CIUIElementOverrides_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CIUIElementOverrides __x_ABI_CWindows_CUI_CXaml_CIUIElementOverrides;

#endif // ____x_ABI_CWindows_CUI_CXaml_CIUIElementOverrides_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CIUIElementOverrides7_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CIUIElementOverrides7_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CIUIElementOverrides7 __x_ABI_CWindows_CUI_CXaml_CIUIElementOverrides7;

#endif // ____x_ABI_CWindows_CUI_CXaml_CIUIElementOverrides7_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CIUIElementOverrides8_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CIUIElementOverrides8_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CIUIElementOverrides8 __x_ABI_CWindows_CUI_CXaml_CIUIElementOverrides8;

#endif // ____x_ABI_CWindows_CUI_CXaml_CIUIElementOverrides8_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CIUIElementOverrides9_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CIUIElementOverrides9_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CXaml_CIUIElementOverrides9 __x_ABI_CWindows_CUI_CXaml_CIUIElementOverrides9;

#endif // ____x_ABI_CWindows_CUI_CXaml_CIUIElementOverrides9_FWD_DEFINED__

typedef enum __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CMapAnimationKind __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CMapAnimationKind;

typedef enum __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CMapCameraChangeReason __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CMapCameraChangeReason;

typedef enum __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CMapColorScheme __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CMapColorScheme;

typedef enum __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CMapElementCollisionBehavior __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CMapElementCollisionBehavior;

typedef enum __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CMapInteractionMode __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CMapInteractionMode;

typedef enum __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CMapLoadingStatus __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CMapLoadingStatus;

typedef enum __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CMapModel3DShadingOption __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CMapModel3DShadingOption;

typedef enum __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CMapPanInteractionMode __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CMapPanInteractionMode;

typedef enum __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CMapProjection __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CMapProjection;

typedef enum __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CMapStyle __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CMapStyle;

typedef enum __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CMapTileAnimationState __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CMapTileAnimationState;

typedef enum __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CMapTileLayer __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CMapTileLayer;

typedef enum __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CMapVisibleRegionKind __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CMapVisibleRegionKind;

typedef enum __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CMapWatermarkMode __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CMapWatermarkMode;

typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CMapZoomLevelRange __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CMapZoomLevelRange;

enum __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CMapAnimationKind
    {
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CMapAnimationKind_Default = 0,
    __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CMapAnimationKind_None = 1,
    __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CMapAnimationKind_Linear = 2,
    __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CMapAnimationKind_Bow = 3,
};

enum __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CMapCameraChangeReason
    {
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CMapCameraChangeReason_System = 0,
    __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CMapCameraChangeReason_UserInteraction = 1,
    __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CMapCameraChangeReason_Programmatic = 2,
};

enum __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CMapColorScheme
    {
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CMapColorScheme_Light = 0,
    __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CMapColorScheme_Dark = 1,
};

enum __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CMapElementCollisionBehavior
    {
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CMapElementCollisionBehavior_Hide = 0,
    __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CMapElementCollisionBehavior_RemainVisible = 1,
};

enum __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CMapInteractionMode
    {
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CMapInteractionMode_Auto = 0,
    __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CMapInteractionMode_Disabled = 1,
    __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CMapInteractionMode_GestureOnly = 2,
    __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CMapInteractionMode_PointerAndKeyboard = 2,
    __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CMapInteractionMode_ControlOnly = 3,
    __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CMapInteractionMode_GestureAndControl = 4,
    __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CMapInteractionMode_PointerKeyboardAndControl = 4,
    __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CMapInteractionMode_PointerOnly = 5,
};

enum __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CMapLoadingStatus
    {
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CMapLoadingStatus_Loading = 0,
    __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CMapLoadingStatus_Loaded = 1,
    __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CMapLoadingStatus_DataUnavailable = 2,
    __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CMapLoadingStatus_DownloadedMapsManagerUnavailable = 3,
};

enum __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CMapModel3DShadingOption
    {
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CMapModel3DShadingOption_Default = 0,
    __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CMapModel3DShadingOption_Flat = 1,
    __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CMapModel3DShadingOption_Smooth = 2,
};

enum __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CMapPanInteractionMode
    {
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CMapPanInteractionMode_Auto = 0,
    __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CMapPanInteractionMode_Disabled = 1,
};

enum __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CMapProjection
    {
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CMapProjection_WebMercator = 0,
    __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CMapProjection_Globe = 1,
};

enum __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CMapStyle
    {
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CMapStyle_None = 0,
    __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CMapStyle_Road = 1,
    __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CMapStyle_Aerial = 2,
    __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CMapStyle_AerialWithRoads = 3,
    __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CMapStyle_Terrain = 4,
    __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CMapStyle_Aerial3D = 5,
    __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CMapStyle_Aerial3DWithRoads = 6,
    __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CMapStyle_Custom = 7,
};

enum __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CMapTileAnimationState
    {
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CMapTileAnimationState_Stopped = 0,
    __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CMapTileAnimationState_Paused = 1,
    __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CMapTileAnimationState_Playing = 2,
};

enum __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CMapTileLayer
    {
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CMapTileLayer_LabelOverlay = 0,
    __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CMapTileLayer_RoadOverlay = 1,
    __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CMapTileLayer_AreaOverlay = 2,
    __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CMapTileLayer_BackgroundOverlay = 3,
    __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CMapTileLayer_BackgroundReplacement = 4,
};

enum __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CMapVisibleRegionKind
    {
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CMapVisibleRegionKind_Near = 0,
    __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CMapVisibleRegionKind_Full = 1,
};

enum __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CMapWatermarkMode
    {
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CMapWatermarkMode_Automatic = 0,
    __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CMapWatermarkMode_On = 1,
};

struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CMapZoomLevelRange
    {
        DOUBLE Min;
    DOUBLE Max;
};

#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CICustomMapTileDataSource_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CICustomMapTileDataSource_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CICustomMapTileDataSourceVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CICustomMapTileDataSource* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CICustomMapTileDataSource* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CICustomMapTileDataSource* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CICustomMapTileDataSource* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CICustomMapTileDataSource* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CICustomMapTileDataSource* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* add_BitmapRequested)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CICustomMapTileDataSource* This,
        __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CCustomMapTileDataSource___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapTileBitmapRequestedEventArgs* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_BitmapRequested)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CICustomMapTileDataSource* This,
        EventRegistrationToken token);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CICustomMapTileDataSourceVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CICustomMapTileDataSource
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CICustomMapTileDataSourceVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CICustomMapTileDataSource;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CICustomMapTileDataSource_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CICustomMapTileDataSourceFactory_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CICustomMapTileDataSourceFactory_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CICustomMapTileDataSourceFactoryVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CICustomMapTileDataSourceFactory* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CICustomMapTileDataSourceFactory* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CICustomMapTileDataSourceFactory* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CICustomMapTileDataSourceFactory* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CICustomMapTileDataSourceFactory* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CICustomMapTileDataSourceFactory* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* CreateInstance)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CICustomMapTileDataSourceFactory* This,
        IInspectable* baseInterface,
        IInspectable** innerInterface,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CICustomMapTileDataSource** value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CICustomMapTileDataSourceFactoryVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CICustomMapTileDataSourceFactory
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CICustomMapTileDataSourceFactoryVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CICustomMapTileDataSourceFactory;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CICustomMapTileDataSourceFactory_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIHttpMapTileDataSource_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIHttpMapTileDataSource_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIHttpMapTileDataSourceVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIHttpMapTileDataSource* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIHttpMapTileDataSource* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIHttpMapTileDataSource* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIHttpMapTileDataSource* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIHttpMapTileDataSource* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIHttpMapTileDataSource* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_UriFormatString)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIHttpMapTileDataSource* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* put_UriFormatString)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIHttpMapTileDataSource* This,
        HSTRING value);
    HRESULT (STDMETHODCALLTYPE* get_AdditionalRequestHeaders)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIHttpMapTileDataSource* This,
        __x_ABI_C__FIMap_2_HSTRING_HSTRING** value);
    HRESULT (STDMETHODCALLTYPE* get_AllowCaching)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIHttpMapTileDataSource* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* put_AllowCaching)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIHttpMapTileDataSource* This,
        boolean value);
    HRESULT (STDMETHODCALLTYPE* add_UriRequested)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIHttpMapTileDataSource* This,
        __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CHttpMapTileDataSource___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapTileUriRequestedEventArgs* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_UriRequested)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIHttpMapTileDataSource* This,
        EventRegistrationToken token);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIHttpMapTileDataSourceVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIHttpMapTileDataSource
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIHttpMapTileDataSourceVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIHttpMapTileDataSource;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIHttpMapTileDataSource_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIHttpMapTileDataSourceFactory_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIHttpMapTileDataSourceFactory_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIHttpMapTileDataSourceFactoryVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIHttpMapTileDataSourceFactory* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIHttpMapTileDataSourceFactory* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIHttpMapTileDataSourceFactory* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIHttpMapTileDataSourceFactory* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIHttpMapTileDataSourceFactory* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIHttpMapTileDataSourceFactory* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* CreateInstance)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIHttpMapTileDataSourceFactory* This,
        IInspectable* baseInterface,
        IInspectable** innerInterface,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIHttpMapTileDataSource** value);
    HRESULT (STDMETHODCALLTYPE* CreateInstanceWithUriFormatString)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIHttpMapTileDataSourceFactory* This,
        HSTRING uriFormatString,
        IInspectable* baseInterface,
        IInspectable** innerInterface,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIHttpMapTileDataSource** value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIHttpMapTileDataSourceFactoryVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIHttpMapTileDataSourceFactory
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIHttpMapTileDataSourceFactoryVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIHttpMapTileDataSourceFactory;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIHttpMapTileDataSourceFactory_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CILocalMapTileDataSource_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CILocalMapTileDataSource_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CILocalMapTileDataSourceVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CILocalMapTileDataSource* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CILocalMapTileDataSource* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CILocalMapTileDataSource* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CILocalMapTileDataSource* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CILocalMapTileDataSource* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CILocalMapTileDataSource* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_UriFormatString)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CILocalMapTileDataSource* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* put_UriFormatString)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CILocalMapTileDataSource* This,
        HSTRING value);
    HRESULT (STDMETHODCALLTYPE* add_UriRequested)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CILocalMapTileDataSource* This,
        __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CLocalMapTileDataSource___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapTileUriRequestedEventArgs* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_UriRequested)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CILocalMapTileDataSource* This,
        EventRegistrationToken token);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CILocalMapTileDataSourceVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CILocalMapTileDataSource
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CILocalMapTileDataSourceVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CILocalMapTileDataSource;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CILocalMapTileDataSource_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CILocalMapTileDataSourceFactory_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CILocalMapTileDataSourceFactory_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CILocalMapTileDataSourceFactoryVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CILocalMapTileDataSourceFactory* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CILocalMapTileDataSourceFactory* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CILocalMapTileDataSourceFactory* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CILocalMapTileDataSourceFactory* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CILocalMapTileDataSourceFactory* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CILocalMapTileDataSourceFactory* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* CreateInstance)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CILocalMapTileDataSourceFactory* This,
        IInspectable* baseInterface,
        IInspectable** innerInterface,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CILocalMapTileDataSource** value);
    HRESULT (STDMETHODCALLTYPE* CreateInstanceWithUriFormatString)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CILocalMapTileDataSourceFactory* This,
        HSTRING uriFormatString,
        IInspectable* baseInterface,
        IInspectable** innerInterface,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CILocalMapTileDataSource** value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CILocalMapTileDataSourceFactoryVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CILocalMapTileDataSourceFactory
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CILocalMapTileDataSourceFactoryVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CILocalMapTileDataSourceFactory;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CILocalMapTileDataSourceFactory_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangedEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangedEventArgs_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangedEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangedEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangedEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangedEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangedEventArgs* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangedEventArgs* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangedEventArgs* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Camera)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangedEventArgs* This,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCamera** value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangedEventArgsVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangedEventArgs
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangedEventArgsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangedEventArgs;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangedEventArgs_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangedEventArgs2_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangedEventArgs2_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangedEventArgs2Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangedEventArgs2* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangedEventArgs2* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangedEventArgs2* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangedEventArgs2* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangedEventArgs2* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangedEventArgs2* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_ChangeReason)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangedEventArgs2* This,
        enum __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CMapCameraChangeReason* value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangedEventArgs2Vtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangedEventArgs2
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangedEventArgs2Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangedEventArgs2;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangedEventArgs2_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangingEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangingEventArgs_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangingEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangingEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangingEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangingEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangingEventArgs* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangingEventArgs* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangingEventArgs* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Camera)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangingEventArgs* This,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCamera** value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangingEventArgsVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangingEventArgs
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangingEventArgsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangingEventArgs;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangingEventArgs_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangingEventArgs2_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangingEventArgs2_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangingEventArgs2Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangingEventArgs2* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangingEventArgs2* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangingEventArgs2* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangingEventArgs2* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangingEventArgs2* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangingEventArgs2* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_ChangeReason)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangingEventArgs2* This,
        enum __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CMapCameraChangeReason* value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangingEventArgs2Vtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangingEventArgs2
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangingEventArgs2Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangingEventArgs2;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangingEventArgs2_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapBillboard_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapBillboard_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapBillboardVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapBillboard* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapBillboard* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapBillboard* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapBillboard* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapBillboard* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapBillboard* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Location)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapBillboard* This,
        __x_ABI_CWindows_CDevices_CGeolocation_CIGeopoint** value);
    HRESULT (STDMETHODCALLTYPE* put_Location)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapBillboard* This,
        __x_ABI_CWindows_CDevices_CGeolocation_CIGeopoint* value);
    HRESULT (STDMETHODCALLTYPE* get_NormalizedAnchorPoint)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapBillboard* This,
        struct __x_ABI_CWindows_CFoundation_CPoint* value);
    HRESULT (STDMETHODCALLTYPE* put_NormalizedAnchorPoint)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapBillboard* This,
        struct __x_ABI_CWindows_CFoundation_CPoint value);
    HRESULT (STDMETHODCALLTYPE* get_Image)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapBillboard* This,
        __x_ABI_CWindows_CStorage_CStreams_CIRandomAccessStreamReference** value);
    HRESULT (STDMETHODCALLTYPE* put_Image)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapBillboard* This,
        __x_ABI_CWindows_CStorage_CStreams_CIRandomAccessStreamReference* value);
    HRESULT (STDMETHODCALLTYPE* get_CollisionBehaviorDesired)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapBillboard* This,
        enum __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CMapElementCollisionBehavior* value);
    HRESULT (STDMETHODCALLTYPE* put_CollisionBehaviorDesired)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapBillboard* This,
        enum __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CMapElementCollisionBehavior value);
    HRESULT (STDMETHODCALLTYPE* get_ReferenceCamera)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapBillboard* This,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCamera** value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapBillboardVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapBillboard
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapBillboardVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapBillboard;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapBillboard_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapBillboardFactory_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapBillboardFactory_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapBillboardFactoryVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapBillboardFactory* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapBillboardFactory* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapBillboardFactory* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapBillboardFactory* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapBillboardFactory* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapBillboardFactory* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* CreateInstanceFromCamera)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapBillboardFactory* This,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCamera* camera,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapBillboard** value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapBillboardFactoryVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapBillboardFactory
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapBillboardFactoryVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapBillboardFactory;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapBillboardFactory_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapBillboardStatics_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapBillboardStatics_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapBillboardStaticsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapBillboardStatics* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapBillboardStatics* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapBillboardStatics* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapBillboardStatics* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapBillboardStatics* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapBillboardStatics* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_LocationProperty)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapBillboardStatics* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** value);
    HRESULT (STDMETHODCALLTYPE* get_NormalizedAnchorPointProperty)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapBillboardStatics* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** value);
    HRESULT (STDMETHODCALLTYPE* get_CollisionBehaviorDesiredProperty)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapBillboardStatics* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapBillboardStaticsVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapBillboardStatics
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapBillboardStaticsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapBillboardStatics;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapBillboardStatics_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCamera_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCamera_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCameraVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCamera* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCamera* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCamera* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCamera* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCamera* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCamera* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Location)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCamera* This,
        __x_ABI_CWindows_CDevices_CGeolocation_CIGeopoint** value);
    HRESULT (STDMETHODCALLTYPE* put_Location)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCamera* This,
        __x_ABI_CWindows_CDevices_CGeolocation_CIGeopoint* value);
    HRESULT (STDMETHODCALLTYPE* get_Heading)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCamera* This,
        DOUBLE* value);
    HRESULT (STDMETHODCALLTYPE* put_Heading)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCamera* This,
        DOUBLE value);
    HRESULT (STDMETHODCALLTYPE* get_Pitch)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCamera* This,
        DOUBLE* value);
    HRESULT (STDMETHODCALLTYPE* put_Pitch)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCamera* This,
        DOUBLE value);
    HRESULT (STDMETHODCALLTYPE* get_Roll)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCamera* This,
        DOUBLE* value);
    HRESULT (STDMETHODCALLTYPE* put_Roll)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCamera* This,
        DOUBLE value);
    HRESULT (STDMETHODCALLTYPE* get_FieldOfView)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCamera* This,
        DOUBLE* value);
    HRESULT (STDMETHODCALLTYPE* put_FieldOfView)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCamera* This,
        DOUBLE value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCameraVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCamera
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCameraVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCamera;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCamera_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCameraFactory_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCameraFactory_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCameraFactoryVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCameraFactory* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCameraFactory* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCameraFactory* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCameraFactory* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCameraFactory* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCameraFactory* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* CreateInstanceWithLocation)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCameraFactory* This,
        __x_ABI_CWindows_CDevices_CGeolocation_CIGeopoint* location,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCamera** value);
    HRESULT (STDMETHODCALLTYPE* CreateInstanceWithLocationAndHeading)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCameraFactory* This,
        __x_ABI_CWindows_CDevices_CGeolocation_CIGeopoint* location,
        DOUBLE headingInDegrees,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCamera** value);
    HRESULT (STDMETHODCALLTYPE* CreateInstanceWithLocationHeadingAndPitch)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCameraFactory* This,
        __x_ABI_CWindows_CDevices_CGeolocation_CIGeopoint* location,
        DOUBLE headingInDegrees,
        DOUBLE pitchInDegrees,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCamera** value);
    HRESULT (STDMETHODCALLTYPE* CreateInstanceWithLocationHeadingPitchRollAndFieldOfView)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCameraFactory* This,
        __x_ABI_CWindows_CDevices_CGeolocation_CIGeopoint* location,
        DOUBLE headingInDegrees,
        DOUBLE pitchInDegrees,
        DOUBLE rollInDegrees,
        DOUBLE fieldOfViewInDegrees,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCamera** value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCameraFactoryVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCameraFactory
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCameraFactoryVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCameraFactory;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCameraFactory_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapContextRequestedEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapContextRequestedEventArgs_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapContextRequestedEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapContextRequestedEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapContextRequestedEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapContextRequestedEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapContextRequestedEventArgs* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapContextRequestedEventArgs* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapContextRequestedEventArgs* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Position)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapContextRequestedEventArgs* This,
        struct __x_ABI_CWindows_CFoundation_CPoint* value);
    HRESULT (STDMETHODCALLTYPE* get_Location)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapContextRequestedEventArgs* This,
        __x_ABI_CWindows_CDevices_CGeolocation_CIGeopoint** value);
    HRESULT (STDMETHODCALLTYPE* get_MapElements)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapContextRequestedEventArgs* This,
        __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapElement** value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapContextRequestedEventArgsVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapContextRequestedEventArgs
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapContextRequestedEventArgsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapContextRequestedEventArgs;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapContextRequestedEventArgs_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Center)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl* This,
        __x_ABI_CWindows_CDevices_CGeolocation_CIGeopoint** value);
    HRESULT (STDMETHODCALLTYPE* put_Center)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl* This,
        __x_ABI_CWindows_CDevices_CGeolocation_CIGeopoint* value);
    HRESULT (STDMETHODCALLTYPE* get_Children)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl* This,
        __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CDependencyObject** value);
    HRESULT (STDMETHODCALLTYPE* get_ColorScheme)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl* This,
        enum __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CMapColorScheme* value);
    HRESULT (STDMETHODCALLTYPE* put_ColorScheme)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl* This,
        enum __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CMapColorScheme value);
    HRESULT (STDMETHODCALLTYPE* get_DesiredPitch)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl* This,
        DOUBLE* value);
    HRESULT (STDMETHODCALLTYPE* put_DesiredPitch)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl* This,
        DOUBLE value);
    HRESULT (STDMETHODCALLTYPE* get_Heading)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl* This,
        DOUBLE* value);
    HRESULT (STDMETHODCALLTYPE* put_Heading)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl* This,
        DOUBLE value);
    HRESULT (STDMETHODCALLTYPE* get_LandmarksVisible)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* put_LandmarksVisible)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl* This,
        boolean value);
    HRESULT (STDMETHODCALLTYPE* get_LoadingStatus)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl* This,
        enum __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CMapLoadingStatus* value);
    HRESULT (STDMETHODCALLTYPE* get_MapServiceToken)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* put_MapServiceToken)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl* This,
        HSTRING value);
    HRESULT (STDMETHODCALLTYPE* get_MaxZoomLevel)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl* This,
        DOUBLE* value);
    HRESULT (STDMETHODCALLTYPE* get_MinZoomLevel)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl* This,
        DOUBLE* value);
    HRESULT (STDMETHODCALLTYPE* get_PedestrianFeaturesVisible)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* put_PedestrianFeaturesVisible)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl* This,
        boolean value);
    HRESULT (STDMETHODCALLTYPE* get_Pitch)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl* This,
        DOUBLE* value);
    HRESULT (STDMETHODCALLTYPE* get_Style)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl* This,
        enum __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CMapStyle* value);
    HRESULT (STDMETHODCALLTYPE* put_Style)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl* This,
        enum __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CMapStyle value);
    HRESULT (STDMETHODCALLTYPE* get_TrafficFlowVisible)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* put_TrafficFlowVisible)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl* This,
        boolean value);
    HRESULT (STDMETHODCALLTYPE* get_TransformOrigin)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl* This,
        struct __x_ABI_CWindows_CFoundation_CPoint* value);
    HRESULT (STDMETHODCALLTYPE* put_TransformOrigin)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl* This,
        struct __x_ABI_CWindows_CFoundation_CPoint value);
    HRESULT (STDMETHODCALLTYPE* get_WatermarkMode)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl* This,
        enum __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CMapWatermarkMode* value);
    HRESULT (STDMETHODCALLTYPE* put_WatermarkMode)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl* This,
        enum __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CMapWatermarkMode value);
    HRESULT (STDMETHODCALLTYPE* get_ZoomLevel)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl* This,
        DOUBLE* value);
    HRESULT (STDMETHODCALLTYPE* put_ZoomLevel)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl* This,
        DOUBLE value);
    HRESULT (STDMETHODCALLTYPE* get_MapElements)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl* This,
        __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapElement** value);
    HRESULT (STDMETHODCALLTYPE* get_Routes)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl* This,
        __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapRouteView** value);
    HRESULT (STDMETHODCALLTYPE* get_TileSources)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl* This,
        __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapTileSource** value);
    HRESULT (STDMETHODCALLTYPE* add_CenterChanged)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl* This,
        __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl_IInspectable* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_CenterChanged)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl* This,
        EventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* add_HeadingChanged)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl* This,
        __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl_IInspectable* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_HeadingChanged)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl* This,
        EventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* add_LoadingStatusChanged)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl* This,
        __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl_IInspectable* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_LoadingStatusChanged)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl* This,
        EventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* add_MapDoubleTapped)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl* This,
        __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapInputEventArgs* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_MapDoubleTapped)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl* This,
        EventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* add_MapHolding)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl* This,
        __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapInputEventArgs* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_MapHolding)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl* This,
        EventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* add_MapTapped)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl* This,
        __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapInputEventArgs* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_MapTapped)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl* This,
        EventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* add_PitchChanged)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl* This,
        __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl_IInspectable* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_PitchChanged)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl* This,
        EventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* add_TransformOriginChanged)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl* This,
        __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl_IInspectable* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_TransformOriginChanged)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl* This,
        EventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* add_ZoomLevelChanged)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl* This,
        __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl_IInspectable* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_ZoomLevelChanged)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl* This,
        EventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* FindMapElementsAtOffset)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl* This,
        struct __x_ABI_CWindows_CFoundation_CPoint offset,
        __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapElement** result);
    HRESULT (STDMETHODCALLTYPE* GetLocationFromOffset)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl* This,
        struct __x_ABI_CWindows_CFoundation_CPoint offset,
        __x_ABI_CWindows_CDevices_CGeolocation_CIGeopoint** location);
    HRESULT (STDMETHODCALLTYPE* GetOffsetFromLocation)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl* This,
        __x_ABI_CWindows_CDevices_CGeolocation_CIGeopoint* location,
        struct __x_ABI_CWindows_CFoundation_CPoint* offset);
    HRESULT (STDMETHODCALLTYPE* IsLocationInView)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl* This,
        __x_ABI_CWindows_CDevices_CGeolocation_CIGeopoint* location,
        boolean* isInView);
    HRESULT (STDMETHODCALLTYPE* TrySetViewBoundsAsync)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl* This,
        __x_ABI_CWindows_CDevices_CGeolocation_CIGeoboundingBox* bounds,
        __x_ABI_C__FIReference_1___x_ABI_CWindows__CUI__CXaml__CThickness* margin,
        enum __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CMapAnimationKind animation,
        __x_ABI_C__FIAsyncOperation_1_boolean** operation);
    HRESULT (STDMETHODCALLTYPE* TrySetViewWithCenterAsync)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl* This,
        __x_ABI_CWindows_CDevices_CGeolocation_CIGeopoint* center,
        __x_ABI_C__FIAsyncOperation_1_boolean** operation);
    HRESULT (STDMETHODCALLTYPE* TrySetViewWithCenterAndZoomAsync)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl* This,
        __x_ABI_CWindows_CDevices_CGeolocation_CIGeopoint* center,
        __x_ABI_C__FIReference_1_double* zoomLevel,
        __x_ABI_C__FIAsyncOperation_1_boolean** operation);
    HRESULT (STDMETHODCALLTYPE* TrySetViewWithCenterZoomHeadingAndPitchAsync)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl* This,
        __x_ABI_CWindows_CDevices_CGeolocation_CIGeopoint* center,
        __x_ABI_C__FIReference_1_double* zoomLevel,
        __x_ABI_C__FIReference_1_double* heading,
        __x_ABI_C__FIReference_1_double* desiredPitch,
        __x_ABI_C__FIAsyncOperation_1_boolean** operation);
    HRESULT (STDMETHODCALLTYPE* TrySetViewWithCenterZoomHeadingPitchAndAnimationAsync)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl* This,
        __x_ABI_CWindows_CDevices_CGeolocation_CIGeopoint* center,
        __x_ABI_C__FIReference_1_double* zoomLevel,
        __x_ABI_C__FIReference_1_double* heading,
        __x_ABI_C__FIReference_1_double* desiredPitch,
        enum __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CMapAnimationKind animation,
        __x_ABI_C__FIAsyncOperation_1_boolean** operation);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_BusinessLandmarksVisible)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* put_BusinessLandmarksVisible)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2* This,
        boolean value);
    HRESULT (STDMETHODCALLTYPE* get_TransitFeaturesVisible)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* put_TransitFeaturesVisible)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2* This,
        boolean value);
    HRESULT (STDMETHODCALLTYPE* get_PanInteractionMode)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2* This,
        enum __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CMapPanInteractionMode* value);
    HRESULT (STDMETHODCALLTYPE* put_PanInteractionMode)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2* This,
        enum __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CMapPanInteractionMode value);
    HRESULT (STDMETHODCALLTYPE* get_RotateInteractionMode)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2* This,
        enum __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CMapInteractionMode* value);
    HRESULT (STDMETHODCALLTYPE* put_RotateInteractionMode)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2* This,
        enum __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CMapInteractionMode value);
    HRESULT (STDMETHODCALLTYPE* get_TiltInteractionMode)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2* This,
        enum __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CMapInteractionMode* value);
    HRESULT (STDMETHODCALLTYPE* put_TiltInteractionMode)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2* This,
        enum __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CMapInteractionMode value);
    HRESULT (STDMETHODCALLTYPE* get_ZoomInteractionMode)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2* This,
        enum __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CMapInteractionMode* value);
    HRESULT (STDMETHODCALLTYPE* put_ZoomInteractionMode)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2* This,
        enum __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CMapInteractionMode value);
    HRESULT (STDMETHODCALLTYPE* get_Is3DSupported)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* get_IsStreetsideSupported)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* get_Scene)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2* This,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapScene** value);
    HRESULT (STDMETHODCALLTYPE* put_Scene)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2* This,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapScene* value);
    HRESULT (STDMETHODCALLTYPE* get_ActualCamera)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2* This,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCamera** value);
    HRESULT (STDMETHODCALLTYPE* get_TargetCamera)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2* This,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCamera** value);
    HRESULT (STDMETHODCALLTYPE* get_CustomExperience)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2* This,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCustomExperience** value);
    HRESULT (STDMETHODCALLTYPE* put_CustomExperience)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2* This,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCustomExperience* value);
    HRESULT (STDMETHODCALLTYPE* add_MapElementClick)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2* This,
        __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapElementClickEventArgs* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_MapElementClick)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2* This,
        EventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* add_MapElementPointerEntered)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2* This,
        __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapElementPointerEnteredEventArgs* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_MapElementPointerEntered)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2* This,
        EventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* add_MapElementPointerExited)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2* This,
        __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapElementPointerExitedEventArgs* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_MapElementPointerExited)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2* This,
        EventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* add_ActualCameraChanged)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2* This,
        __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapActualCameraChangedEventArgs* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_ActualCameraChanged)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2* This,
        EventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* add_ActualCameraChanging)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2* This,
        __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapActualCameraChangingEventArgs* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_ActualCameraChanging)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2* This,
        EventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* add_TargetCameraChanged)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2* This,
        __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapTargetCameraChangedEventArgs* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_TargetCameraChanged)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2* This,
        EventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* add_CustomExperienceChanged)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2* This,
        __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapCustomExperienceChangedEventArgs* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_CustomExperienceChanged)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2* This,
        EventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* StartContinuousRotate)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2* This,
        DOUBLE rateInDegreesPerSecond);
    HRESULT (STDMETHODCALLTYPE* StopContinuousRotate)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2* This);
    HRESULT (STDMETHODCALLTYPE* StartContinuousTilt)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2* This,
        DOUBLE rateInDegreesPerSecond);
    HRESULT (STDMETHODCALLTYPE* StopContinuousTilt)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2* This);
    HRESULT (STDMETHODCALLTYPE* StartContinuousZoom)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2* This,
        DOUBLE rateOfChangePerSecond);
    HRESULT (STDMETHODCALLTYPE* StopContinuousZoom)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2* This);
    HRESULT (STDMETHODCALLTYPE* TryRotateAsync)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2* This,
        DOUBLE degrees,
        __x_ABI_C__FIAsyncOperation_1_boolean** operation);
    HRESULT (STDMETHODCALLTYPE* TryRotateToAsync)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2* This,
        DOUBLE angleInDegrees,
        __x_ABI_C__FIAsyncOperation_1_boolean** operation);
    HRESULT (STDMETHODCALLTYPE* TryTiltAsync)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2* This,
        DOUBLE degrees,
        __x_ABI_C__FIAsyncOperation_1_boolean** operation);
    HRESULT (STDMETHODCALLTYPE* TryTiltToAsync)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2* This,
        DOUBLE angleInDegrees,
        __x_ABI_C__FIAsyncOperation_1_boolean** operation);
    HRESULT (STDMETHODCALLTYPE* TryZoomInAsync)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2* This,
        __x_ABI_C__FIAsyncOperation_1_boolean** operation);
    HRESULT (STDMETHODCALLTYPE* TryZoomOutAsync)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2* This,
        __x_ABI_C__FIAsyncOperation_1_boolean** operation);
    HRESULT (STDMETHODCALLTYPE* TryZoomToAsync)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2* This,
        DOUBLE zoomLevel,
        __x_ABI_C__FIAsyncOperation_1_boolean** operation);
    HRESULT (STDMETHODCALLTYPE* TrySetSceneAsync)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2* This,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapScene* scene,
        __x_ABI_C__FIAsyncOperation_1_boolean** operation);
    HRESULT (STDMETHODCALLTYPE* TrySetSceneWithAnimationAsync)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2* This,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapScene* scene,
        enum __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CMapAnimationKind animationKind,
        __x_ABI_C__FIAsyncOperation_1_boolean** operation);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2Vtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl3_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl3_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl3Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl3* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl3* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl3* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl3* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl3* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl3* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* add_MapRightTapped)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl3* This,
        __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapRightTappedEventArgs* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_MapRightTapped)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl3* This,
        EventRegistrationToken token);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl3Vtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl3
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl3Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl3;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl3_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl4_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl4_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl4Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl4* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl4* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl4* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl4* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl4* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl4* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_BusinessLandmarksEnabled)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl4* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* put_BusinessLandmarksEnabled)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl4* This,
        boolean value);
    HRESULT (STDMETHODCALLTYPE* get_TransitFeaturesEnabled)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl4* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* put_TransitFeaturesEnabled)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl4* This,
        boolean value);
    HRESULT (STDMETHODCALLTYPE* GetVisibleRegion)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl4* This,
        enum __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CMapVisibleRegionKind region,
        __x_ABI_CWindows_CDevices_CGeolocation_CIGeopath** result);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl4Vtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl4
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl4Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl4;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl4_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl5_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl5_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl5Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl5* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl5* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl5* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl5* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl5* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl5* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_MapProjection)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl5* This,
        enum __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CMapProjection* value);
    HRESULT (STDMETHODCALLTYPE* put_MapProjection)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl5* This,
        enum __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CMapProjection value);
    HRESULT (STDMETHODCALLTYPE* get_StyleSheet)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl5* This,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheet** value);
    HRESULT (STDMETHODCALLTYPE* put_StyleSheet)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl5* This,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheet* value);
    HRESULT (STDMETHODCALLTYPE* get_ViewPadding)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl5* This,
        struct __x_ABI_CWindows_CUI_CXaml_CThickness* value);
    HRESULT (STDMETHODCALLTYPE* put_ViewPadding)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl5* This,
        struct __x_ABI_CWindows_CUI_CXaml_CThickness value);
    HRESULT (STDMETHODCALLTYPE* add_MapContextRequested)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl5* This,
        __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapContextRequestedEventArgs* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_MapContextRequested)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl5* This,
        EventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* FindMapElementsAtOffsetWithRadius)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl5* This,
        struct __x_ABI_CWindows_CFoundation_CPoint offset,
        DOUBLE radius,
        __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapElement** result);
    HRESULT (STDMETHODCALLTYPE* GetLocationFromOffsetWithReferenceSystem)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl5* This,
        struct __x_ABI_CWindows_CFoundation_CPoint offset,
        enum __x_ABI_CWindows_CDevices_CGeolocation_CAltitudeReferenceSystem desiredReferenceSystem,
        __x_ABI_CWindows_CDevices_CGeolocation_CIGeopoint** location);
    HRESULT (STDMETHODCALLTYPE* StartContinuousPan)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl5* This,
        DOUBLE horizontalPixelsPerSecond,
        DOUBLE verticalPixelsPerSecond);
    HRESULT (STDMETHODCALLTYPE* StopContinuousPan)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl5* This);
    HRESULT (STDMETHODCALLTYPE* TryPanAsync)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl5* This,
        DOUBLE horizontalPixels,
        DOUBLE verticalPixels,
        __x_ABI_C__FIAsyncOperation_1_boolean** operation);
    HRESULT (STDMETHODCALLTYPE* TryPanToAsync)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl5* This,
        __x_ABI_CWindows_CDevices_CGeolocation_CIGeopoint* location,
        __x_ABI_C__FIAsyncOperation_1_boolean** operation);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl5Vtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl5
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl5Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl5;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl5_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl6_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl6_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl6Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl6* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl6* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl6* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl6* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl6* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl6* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Layers)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl6* This,
        __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapLayer** value);
    HRESULT (STDMETHODCALLTYPE* put_Layers)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl6* This,
        __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapLayer* value);
    HRESULT (STDMETHODCALLTYPE* TryGetLocationFromOffset)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl6* This,
        struct __x_ABI_CWindows_CFoundation_CPoint offset,
        __x_ABI_CWindows_CDevices_CGeolocation_CIGeopoint** location,
        boolean* returnValue);
    HRESULT (STDMETHODCALLTYPE* TryGetLocationFromOffsetWithReferenceSystem)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl6* This,
        struct __x_ABI_CWindows_CFoundation_CPoint offset,
        enum __x_ABI_CWindows_CDevices_CGeolocation_CAltitudeReferenceSystem desiredReferenceSystem,
        __x_ABI_CWindows_CDevices_CGeolocation_CIGeopoint** location,
        boolean* returnValue);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl6Vtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl6
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl6Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl6;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl6_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl7_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl7_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl7Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl7* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl7* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl7* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl7* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl7* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl7* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Region)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl7* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* put_Region)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl7* This,
        HSTRING value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl7Vtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl7
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl7Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl7;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl7_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl8_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl8_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl8Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl8* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl8* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl8* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl8* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl8* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl8* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_CanTiltDown)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl8* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* get_CanTiltUp)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl8* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* get_CanZoomIn)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl8* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* get_CanZoomOut)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl8* This,
        boolean* value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl8Vtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl8
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl8Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl8;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl8_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkClickEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkClickEventArgs_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkClickEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkClickEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkClickEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkClickEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkClickEventArgs* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkClickEventArgs* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkClickEventArgs* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_LocalLocations)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkClickEventArgs* This,
        __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CMaps__CLocalSearch__CLocalLocation** value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkClickEventArgsVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkClickEventArgs
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkClickEventArgsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkClickEventArgs;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkClickEventArgs_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkPointerEnteredEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkPointerEnteredEventArgs_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkPointerEnteredEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkPointerEnteredEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkPointerEnteredEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkPointerEnteredEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkPointerEnteredEventArgs* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkPointerEnteredEventArgs* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkPointerEnteredEventArgs* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_LocalLocations)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkPointerEnteredEventArgs* This,
        __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CMaps__CLocalSearch__CLocalLocation** value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkPointerEnteredEventArgsVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkPointerEnteredEventArgs
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkPointerEnteredEventArgsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkPointerEnteredEventArgs;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkPointerEnteredEventArgs_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkPointerExitedEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkPointerExitedEventArgs_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkPointerExitedEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkPointerExitedEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkPointerExitedEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkPointerExitedEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkPointerExitedEventArgs* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkPointerExitedEventArgs* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkPointerExitedEventArgs* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_LocalLocations)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkPointerExitedEventArgs* This,
        __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CMaps__CLocalSearch__CLocalLocation** value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkPointerExitedEventArgsVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkPointerExitedEventArgs
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkPointerExitedEventArgsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkPointerExitedEventArgs;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkPointerExitedEventArgs_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkRightTappedEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkRightTappedEventArgs_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkRightTappedEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkRightTappedEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkRightTappedEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkRightTappedEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkRightTappedEventArgs* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkRightTappedEventArgs* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkRightTappedEventArgs* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_LocalLocations)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkRightTappedEventArgs* This,
        __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CServices__CMaps__CLocalSearch__CLocalLocation** value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkRightTappedEventArgsVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkRightTappedEventArgs
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkRightTappedEventArgsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkRightTappedEventArgs;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkRightTappedEventArgs_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelper_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelper_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelperVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelper* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelper* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelper* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelper* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelper* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelper* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* add_BusinessLandmarkClick)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelper* This,
        __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControlBusinessLandmarkClickEventArgs* value,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_BusinessLandmarkClick)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelper* This,
        EventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* add_TransitFeatureClick)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelper* This,
        __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControlTransitFeatureClickEventArgs* value,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_TransitFeatureClick)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelper* This,
        EventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* add_BusinessLandmarkRightTapped)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelper* This,
        __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControlBusinessLandmarkRightTappedEventArgs* value,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_BusinessLandmarkRightTapped)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelper* This,
        EventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* add_TransitFeatureRightTapped)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelper* This,
        __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControlTransitFeatureRightTappedEventArgs* value,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_TransitFeatureRightTapped)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelper* This,
        EventRegistrationToken token);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelperVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelper
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelperVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelper;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelper_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelper2_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelper2_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelper2Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelper2* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelper2* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelper2* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelper2* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelper2* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelper2* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* add_BusinessLandmarkPointerEntered)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelper2* This,
        __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControlBusinessLandmarkPointerEnteredEventArgs* value,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_BusinessLandmarkPointerEntered)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelper2* This,
        EventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* add_TransitFeaturePointerEntered)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelper2* This,
        __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControlTransitFeaturePointerEnteredEventArgs* value,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_TransitFeaturePointerEntered)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelper2* This,
        EventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* add_BusinessLandmarkPointerExited)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelper2* This,
        __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControlBusinessLandmarkPointerExitedEventArgs* value,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_BusinessLandmarkPointerExited)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelper2* This,
        EventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* add_TransitFeaturePointerExited)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelper2* This,
        __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControl___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapControlTransitFeaturePointerExitedEventArgs* value,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_TransitFeaturePointerExited)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelper2* This,
        EventRegistrationToken token);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelper2Vtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelper2
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelper2Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelper2;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelper2_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelperFactory_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelperFactory_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelperFactoryVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelperFactory* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelperFactory* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelperFactory* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelperFactory* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelperFactory* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelperFactory* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* CreateInstance)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelperFactory* This,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl* map,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelper** instance);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelperFactoryVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelperFactory
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelperFactoryVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelperFactory;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelperFactory_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelperStatics_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelperStatics_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelperStaticsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelperStatics* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelperStatics* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelperStatics* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelperStatics* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelperStatics* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelperStatics* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* CreateMapControl)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelperStatics* This,
        boolean rasterRenderMode,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl** returnValue);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelperStaticsVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelperStatics
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelperStaticsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelperStatics;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelperStatics_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStaticsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_CenterProperty)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** value);
    HRESULT (STDMETHODCALLTYPE* get_ChildrenProperty)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** value);
    HRESULT (STDMETHODCALLTYPE* get_ColorSchemeProperty)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** value);
    HRESULT (STDMETHODCALLTYPE* get_DesiredPitchProperty)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** value);
    HRESULT (STDMETHODCALLTYPE* get_HeadingProperty)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** value);
    HRESULT (STDMETHODCALLTYPE* get_LandmarksVisibleProperty)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** value);
    HRESULT (STDMETHODCALLTYPE* get_LoadingStatusProperty)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** value);
    HRESULT (STDMETHODCALLTYPE* get_MapServiceTokenProperty)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** value);
    HRESULT (STDMETHODCALLTYPE* get_PedestrianFeaturesVisibleProperty)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** value);
    HRESULT (STDMETHODCALLTYPE* get_PitchProperty)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** value);
    HRESULT (STDMETHODCALLTYPE* get_StyleProperty)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** value);
    HRESULT (STDMETHODCALLTYPE* get_TrafficFlowVisibleProperty)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** value);
    HRESULT (STDMETHODCALLTYPE* get_TransformOriginProperty)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** value);
    HRESULT (STDMETHODCALLTYPE* get_WatermarkModeProperty)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** value);
    HRESULT (STDMETHODCALLTYPE* get_ZoomLevelProperty)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** value);
    HRESULT (STDMETHODCALLTYPE* get_MapElementsProperty)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** value);
    HRESULT (STDMETHODCALLTYPE* get_RoutesProperty)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** value);
    HRESULT (STDMETHODCALLTYPE* get_TileSourcesProperty)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** value);
    HRESULT (STDMETHODCALLTYPE* get_LocationProperty)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** value);
    HRESULT (STDMETHODCALLTYPE* GetLocation)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyObject* element,
        __x_ABI_CWindows_CDevices_CGeolocation_CIGeopoint** result);
    HRESULT (STDMETHODCALLTYPE* SetLocation)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyObject* element,
        __x_ABI_CWindows_CDevices_CGeolocation_CIGeopoint* value);
    HRESULT (STDMETHODCALLTYPE* get_NormalizedAnchorPointProperty)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** value);
    HRESULT (STDMETHODCALLTYPE* GetNormalizedAnchorPoint)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyObject* element,
        struct __x_ABI_CWindows_CFoundation_CPoint* result);
    HRESULT (STDMETHODCALLTYPE* SetNormalizedAnchorPoint)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyObject* element,
        struct __x_ABI_CWindows_CFoundation_CPoint value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStaticsVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStaticsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics2_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics2_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics2Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics2* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics2* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics2* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics2* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics2* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics2* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_BusinessLandmarksVisibleProperty)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics2* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** value);
    HRESULT (STDMETHODCALLTYPE* get_TransitFeaturesVisibleProperty)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics2* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** value);
    HRESULT (STDMETHODCALLTYPE* get_PanInteractionModeProperty)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics2* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** value);
    HRESULT (STDMETHODCALLTYPE* get_RotateInteractionModeProperty)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics2* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** value);
    HRESULT (STDMETHODCALLTYPE* get_TiltInteractionModeProperty)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics2* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** value);
    HRESULT (STDMETHODCALLTYPE* get_ZoomInteractionModeProperty)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics2* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** value);
    HRESULT (STDMETHODCALLTYPE* get_Is3DSupportedProperty)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics2* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** value);
    HRESULT (STDMETHODCALLTYPE* get_IsStreetsideSupportedProperty)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics2* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** value);
    HRESULT (STDMETHODCALLTYPE* get_SceneProperty)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics2* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics2Vtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics2
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics2Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics2;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics2_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics4_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics4_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics4Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics4* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics4* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics4* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics4* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics4* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics4* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_BusinessLandmarksEnabledProperty)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics4* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** value);
    HRESULT (STDMETHODCALLTYPE* get_TransitFeaturesEnabledProperty)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics4* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics4Vtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics4
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics4Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics4;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics4_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics5_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics5_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics5Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics5* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics5* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics5* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics5* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics5* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics5* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_MapProjectionProperty)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics5* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** value);
    HRESULT (STDMETHODCALLTYPE* get_StyleSheetProperty)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics5* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** value);
    HRESULT (STDMETHODCALLTYPE* get_ViewPaddingProperty)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics5* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics5Vtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics5
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics5Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics5;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics5_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics6_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics6_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics6Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics6* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics6* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics6* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics6* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics6* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics6* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_LayersProperty)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics6* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics6Vtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics6
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics6Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics6;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics6_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics7_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics7_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics7Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics7* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics7* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics7* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics7* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics7* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics7* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_RegionProperty)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics7* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics7Vtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics7
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics7Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics7;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics7_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics8_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics8_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics8Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics8* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics8* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics8* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics8* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics8* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics8* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_CanTiltDownProperty)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics8* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** value);
    HRESULT (STDMETHODCALLTYPE* get_CanTiltUpProperty)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics8* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** value);
    HRESULT (STDMETHODCALLTYPE* get_CanZoomInProperty)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics8* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** value);
    HRESULT (STDMETHODCALLTYPE* get_CanZoomOutProperty)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics8* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics8Vtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics8
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics8Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics8;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics8_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeatureClickEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeatureClickEventArgs_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeatureClickEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeatureClickEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeatureClickEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeatureClickEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeatureClickEventArgs* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeatureClickEventArgs* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeatureClickEventArgs* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_DisplayName)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeatureClickEventArgs* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_Location)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeatureClickEventArgs* This,
        __x_ABI_CWindows_CDevices_CGeolocation_CIGeopoint** value);
    HRESULT (STDMETHODCALLTYPE* get_TransitProperties)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeatureClickEventArgs* This,
        __x_ABI_C__FIMapView_2_HSTRING_IInspectable** value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeatureClickEventArgsVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeatureClickEventArgs
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeatureClickEventArgsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeatureClickEventArgs;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeatureClickEventArgs_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeaturePointerEnteredEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeaturePointerEnteredEventArgs_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeaturePointerEnteredEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeaturePointerEnteredEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeaturePointerEnteredEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeaturePointerEnteredEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeaturePointerEnteredEventArgs* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeaturePointerEnteredEventArgs* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeaturePointerEnteredEventArgs* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_DisplayName)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeaturePointerEnteredEventArgs* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_Location)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeaturePointerEnteredEventArgs* This,
        __x_ABI_CWindows_CDevices_CGeolocation_CIGeopoint** value);
    HRESULT (STDMETHODCALLTYPE* get_TransitProperties)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeaturePointerEnteredEventArgs* This,
        __x_ABI_C__FIMapView_2_HSTRING_IInspectable** value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeaturePointerEnteredEventArgsVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeaturePointerEnteredEventArgs
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeaturePointerEnteredEventArgsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeaturePointerEnteredEventArgs;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeaturePointerEnteredEventArgs_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeaturePointerExitedEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeaturePointerExitedEventArgs_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeaturePointerExitedEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeaturePointerExitedEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeaturePointerExitedEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeaturePointerExitedEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeaturePointerExitedEventArgs* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeaturePointerExitedEventArgs* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeaturePointerExitedEventArgs* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_DisplayName)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeaturePointerExitedEventArgs* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_Location)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeaturePointerExitedEventArgs* This,
        __x_ABI_CWindows_CDevices_CGeolocation_CIGeopoint** value);
    HRESULT (STDMETHODCALLTYPE* get_TransitProperties)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeaturePointerExitedEventArgs* This,
        __x_ABI_C__FIMapView_2_HSTRING_IInspectable** value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeaturePointerExitedEventArgsVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeaturePointerExitedEventArgs
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeaturePointerExitedEventArgsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeaturePointerExitedEventArgs;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeaturePointerExitedEventArgs_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeatureRightTappedEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeatureRightTappedEventArgs_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeatureRightTappedEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeatureRightTappedEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeatureRightTappedEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeatureRightTappedEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeatureRightTappedEventArgs* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeatureRightTappedEventArgs* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeatureRightTappedEventArgs* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_DisplayName)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeatureRightTappedEventArgs* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_Location)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeatureRightTappedEventArgs* This,
        __x_ABI_CWindows_CDevices_CGeolocation_CIGeopoint** value);
    HRESULT (STDMETHODCALLTYPE* get_TransitProperties)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeatureRightTappedEventArgs* This,
        __x_ABI_C__FIMapView_2_HSTRING_IInspectable** value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeatureRightTappedEventArgsVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeatureRightTappedEventArgs
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeatureRightTappedEventArgsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeatureRightTappedEventArgs;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeatureRightTappedEventArgs_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCustomExperience_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCustomExperience_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCustomExperienceVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCustomExperience* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCustomExperience* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCustomExperience* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCustomExperience* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCustomExperience* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCustomExperience* This,
            TrustLevel* trustLevel);
    
        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCustomExperienceVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCustomExperience
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCustomExperienceVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCustomExperience;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCustomExperience_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCustomExperienceChangedEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCustomExperienceChangedEventArgs_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCustomExperienceChangedEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCustomExperienceChangedEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCustomExperienceChangedEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCustomExperienceChangedEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCustomExperienceChangedEventArgs* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCustomExperienceChangedEventArgs* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCustomExperienceChangedEventArgs* This,
            TrustLevel* trustLevel);
    
        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCustomExperienceChangedEventArgsVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCustomExperienceChangedEventArgs
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCustomExperienceChangedEventArgsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCustomExperienceChangedEventArgs;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCustomExperienceChangedEventArgs_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCustomExperienceFactory_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCustomExperienceFactory_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCustomExperienceFactoryVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCustomExperienceFactory* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCustomExperienceFactory* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCustomExperienceFactory* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCustomExperienceFactory* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCustomExperienceFactory* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCustomExperienceFactory* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* CreateInstance)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCustomExperienceFactory* This,
        IInspectable* baseInterface,
        IInspectable** innerInterface,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCustomExperience** value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCustomExperienceFactoryVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCustomExperienceFactory
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCustomExperienceFactoryVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCustomExperienceFactory;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCustomExperienceFactory_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_ZIndex)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement* This,
        INT32* value);
    HRESULT (STDMETHODCALLTYPE* put_ZIndex)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement* This,
        INT32 value);
    HRESULT (STDMETHODCALLTYPE* get_Visible)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* put_Visible)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement* This,
        boolean value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement2_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement2_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement2Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement2* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement2* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement2* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement2* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement2* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement2* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_MapTabIndex)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement2* This,
        INT32* value);
    HRESULT (STDMETHODCALLTYPE* put_MapTabIndex)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement2* This,
        INT32 value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement2Vtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement2
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement2Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement2;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement2_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement3_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement3_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement3Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement3* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement3* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement3* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement3* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement3* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement3* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_MapStyleSheetEntry)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement3* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* put_MapStyleSheetEntry)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement3* This,
        HSTRING value);
    HRESULT (STDMETHODCALLTYPE* get_MapStyleSheetEntryState)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement3* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* put_MapStyleSheetEntryState)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement3* This,
        HSTRING value);
    HRESULT (STDMETHODCALLTYPE* get_Tag)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement3* This,
        IInspectable** value);
    HRESULT (STDMETHODCALLTYPE* put_Tag)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement3* This,
        IInspectable* value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement3Vtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement3
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement3Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement3;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement3_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement3D_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement3D_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement3DVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement3D* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement3D* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement3D* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement3D* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement3D* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement3D* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Location)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement3D* This,
        __x_ABI_CWindows_CDevices_CGeolocation_CIGeopoint** value);
    HRESULT (STDMETHODCALLTYPE* put_Location)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement3D* This,
        __x_ABI_CWindows_CDevices_CGeolocation_CIGeopoint* value);
    HRESULT (STDMETHODCALLTYPE* get_Model)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement3D* This,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapModel3D** value);
    HRESULT (STDMETHODCALLTYPE* put_Model)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement3D* This,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapModel3D* value);
    HRESULT (STDMETHODCALLTYPE* get_Heading)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement3D* This,
        DOUBLE* value);
    HRESULT (STDMETHODCALLTYPE* put_Heading)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement3D* This,
        DOUBLE value);
    HRESULT (STDMETHODCALLTYPE* get_Pitch)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement3D* This,
        DOUBLE* value);
    HRESULT (STDMETHODCALLTYPE* put_Pitch)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement3D* This,
        DOUBLE value);
    HRESULT (STDMETHODCALLTYPE* get_Roll)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement3D* This,
        DOUBLE* value);
    HRESULT (STDMETHODCALLTYPE* put_Roll)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement3D* This,
        DOUBLE value);
    HRESULT (STDMETHODCALLTYPE* get_Scale)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement3D* This,
        struct __x_ABI_CWindows_CFoundation_CNumerics_CVector3* value);
    HRESULT (STDMETHODCALLTYPE* put_Scale)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement3D* This,
        struct __x_ABI_CWindows_CFoundation_CNumerics_CVector3 value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement3DVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement3D
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement3DVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement3D;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement3D_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement3DStatics_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement3DStatics_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement3DStaticsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement3DStatics* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement3DStatics* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement3DStatics* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement3DStatics* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement3DStatics* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement3DStatics* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_LocationProperty)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement3DStatics* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** value);
    HRESULT (STDMETHODCALLTYPE* get_HeadingProperty)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement3DStatics* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** value);
    HRESULT (STDMETHODCALLTYPE* get_PitchProperty)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement3DStatics* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** value);
    HRESULT (STDMETHODCALLTYPE* get_RollProperty)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement3DStatics* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** value);
    HRESULT (STDMETHODCALLTYPE* get_ScaleProperty)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement3DStatics* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement3DStaticsVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement3DStatics
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement3DStaticsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement3DStatics;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement3DStatics_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement4_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement4_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement4Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement4* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement4* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement4* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement4* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement4* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement4* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_IsEnabled)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement4* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* put_IsEnabled)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement4* This,
        boolean value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement4Vtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement4
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement4Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement4;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement4_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementClickEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementClickEventArgs_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementClickEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementClickEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementClickEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementClickEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementClickEventArgs* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementClickEventArgs* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementClickEventArgs* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Position)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementClickEventArgs* This,
        struct __x_ABI_CWindows_CFoundation_CPoint* value);
    HRESULT (STDMETHODCALLTYPE* get_Location)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementClickEventArgs* This,
        __x_ABI_CWindows_CDevices_CGeolocation_CIGeopoint** value);
    HRESULT (STDMETHODCALLTYPE* get_MapElements)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementClickEventArgs* This,
        __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapElement** value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementClickEventArgsVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementClickEventArgs
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementClickEventArgsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementClickEventArgs;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementClickEventArgs_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementFactory_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementFactory_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementFactoryVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementFactory* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementFactory* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementFactory* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementFactory* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementFactory* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementFactory* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* CreateInstance)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementFactory* This,
        IInspectable* baseInterface,
        IInspectable** innerInterface,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement** value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementFactoryVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementFactory
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementFactoryVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementFactory;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementFactory_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementPointerEnteredEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementPointerEnteredEventArgs_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementPointerEnteredEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementPointerEnteredEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementPointerEnteredEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementPointerEnteredEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementPointerEnteredEventArgs* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementPointerEnteredEventArgs* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementPointerEnteredEventArgs* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Position)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementPointerEnteredEventArgs* This,
        struct __x_ABI_CWindows_CFoundation_CPoint* value);
    HRESULT (STDMETHODCALLTYPE* get_Location)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementPointerEnteredEventArgs* This,
        __x_ABI_CWindows_CDevices_CGeolocation_CIGeopoint** value);
    HRESULT (STDMETHODCALLTYPE* get_MapElement)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementPointerEnteredEventArgs* This,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement** value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementPointerEnteredEventArgsVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementPointerEnteredEventArgs
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementPointerEnteredEventArgsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementPointerEnteredEventArgs;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementPointerEnteredEventArgs_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementPointerExitedEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementPointerExitedEventArgs_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementPointerExitedEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementPointerExitedEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementPointerExitedEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementPointerExitedEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementPointerExitedEventArgs* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementPointerExitedEventArgs* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementPointerExitedEventArgs* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Position)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementPointerExitedEventArgs* This,
        struct __x_ABI_CWindows_CFoundation_CPoint* value);
    HRESULT (STDMETHODCALLTYPE* get_Location)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementPointerExitedEventArgs* This,
        __x_ABI_CWindows_CDevices_CGeolocation_CIGeopoint** value);
    HRESULT (STDMETHODCALLTYPE* get_MapElement)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementPointerExitedEventArgs* This,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement** value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementPointerExitedEventArgsVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementPointerExitedEventArgs
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementPointerExitedEventArgsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementPointerExitedEventArgs;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementPointerExitedEventArgs_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStaticsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_ZIndexProperty)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** value);
    HRESULT (STDMETHODCALLTYPE* get_VisibleProperty)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStaticsVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStaticsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics2_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics2_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics2Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics2* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics2* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics2* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics2* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics2* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics2* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_MapTabIndexProperty)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics2* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics2Vtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics2
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics2Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics2;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics2_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics3_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics3_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics3Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics3* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics3* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics3* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics3* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics3* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics3* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_MapStyleSheetEntryProperty)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics3* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** value);
    HRESULT (STDMETHODCALLTYPE* get_MapStyleSheetEntryStateProperty)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics3* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** value);
    HRESULT (STDMETHODCALLTYPE* get_TagProperty)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics3* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics3Vtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics3
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics3Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics3;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics3_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics4_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics4_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics4Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics4* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics4* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics4* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics4* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics4* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics4* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_IsEnabledProperty)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics4* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics4Vtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics4
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics4Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics4;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics4_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayer_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayer_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayer* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayer* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayer* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayer* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayer* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayer* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_MapElements)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayer* This,
        __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapElement** value);
    HRESULT (STDMETHODCALLTYPE* put_MapElements)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayer* This,
        __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapElement* value);
    HRESULT (STDMETHODCALLTYPE* add_MapElementClick)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayer* This,
        __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapElementsLayer___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapElementsLayerClickEventArgs* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_MapElementClick)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayer* This,
        EventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* add_MapElementPointerEntered)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayer* This,
        __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapElementsLayer___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapElementsLayerPointerEnteredEventArgs* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_MapElementPointerEntered)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayer* This,
        EventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* add_MapElementPointerExited)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayer* This,
        __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapElementsLayer___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapElementsLayerPointerExitedEventArgs* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_MapElementPointerExited)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayer* This,
        EventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* add_MapContextRequested)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayer* This,
        __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapElementsLayer___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapElementsLayerContextRequestedEventArgs* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_MapContextRequested)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayer* This,
        EventRegistrationToken token);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayer
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayer;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayer_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerClickEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerClickEventArgs_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerClickEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerClickEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerClickEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerClickEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerClickEventArgs* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerClickEventArgs* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerClickEventArgs* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Position)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerClickEventArgs* This,
        struct __x_ABI_CWindows_CFoundation_CPoint* value);
    HRESULT (STDMETHODCALLTYPE* get_Location)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerClickEventArgs* This,
        __x_ABI_CWindows_CDevices_CGeolocation_CIGeopoint** value);
    HRESULT (STDMETHODCALLTYPE* get_MapElements)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerClickEventArgs* This,
        __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapElement** value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerClickEventArgsVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerClickEventArgs
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerClickEventArgsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerClickEventArgs;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerClickEventArgs_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerContextRequestedEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerContextRequestedEventArgs_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerContextRequestedEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerContextRequestedEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerContextRequestedEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerContextRequestedEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerContextRequestedEventArgs* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerContextRequestedEventArgs* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerContextRequestedEventArgs* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Position)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerContextRequestedEventArgs* This,
        struct __x_ABI_CWindows_CFoundation_CPoint* value);
    HRESULT (STDMETHODCALLTYPE* get_Location)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerContextRequestedEventArgs* This,
        __x_ABI_CWindows_CDevices_CGeolocation_CIGeopoint** value);
    HRESULT (STDMETHODCALLTYPE* get_MapElements)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerContextRequestedEventArgs* This,
        __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapElement** value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerContextRequestedEventArgsVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerContextRequestedEventArgs
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerContextRequestedEventArgsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerContextRequestedEventArgs;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerContextRequestedEventArgs_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerPointerEnteredEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerPointerEnteredEventArgs_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerPointerEnteredEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerPointerEnteredEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerPointerEnteredEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerPointerEnteredEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerPointerEnteredEventArgs* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerPointerEnteredEventArgs* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerPointerEnteredEventArgs* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Position)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerPointerEnteredEventArgs* This,
        struct __x_ABI_CWindows_CFoundation_CPoint* value);
    HRESULT (STDMETHODCALLTYPE* get_Location)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerPointerEnteredEventArgs* This,
        __x_ABI_CWindows_CDevices_CGeolocation_CIGeopoint** value);
    HRESULT (STDMETHODCALLTYPE* get_MapElement)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerPointerEnteredEventArgs* This,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement** value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerPointerEnteredEventArgsVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerPointerEnteredEventArgs
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerPointerEnteredEventArgsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerPointerEnteredEventArgs;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerPointerEnteredEventArgs_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerPointerExitedEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerPointerExitedEventArgs_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerPointerExitedEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerPointerExitedEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerPointerExitedEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerPointerExitedEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerPointerExitedEventArgs* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerPointerExitedEventArgs* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerPointerExitedEventArgs* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Position)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerPointerExitedEventArgs* This,
        struct __x_ABI_CWindows_CFoundation_CPoint* value);
    HRESULT (STDMETHODCALLTYPE* get_Location)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerPointerExitedEventArgs* This,
        __x_ABI_CWindows_CDevices_CGeolocation_CIGeopoint** value);
    HRESULT (STDMETHODCALLTYPE* get_MapElement)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerPointerExitedEventArgs* This,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement** value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerPointerExitedEventArgsVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerPointerExitedEventArgs
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerPointerExitedEventArgsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerPointerExitedEventArgs;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerPointerExitedEventArgs_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerStatics_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerStatics_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerStaticsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerStatics* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerStatics* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerStatics* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerStatics* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerStatics* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerStatics* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_MapElementsProperty)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerStatics* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerStaticsVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerStatics
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerStaticsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerStatics;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerStatics_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIcon_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIcon_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIconVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIcon* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIcon* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIcon* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIcon* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIcon* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIcon* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Location)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIcon* This,
        __x_ABI_CWindows_CDevices_CGeolocation_CIGeopoint** value);
    HRESULT (STDMETHODCALLTYPE* put_Location)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIcon* This,
        __x_ABI_CWindows_CDevices_CGeolocation_CIGeopoint* value);
    HRESULT (STDMETHODCALLTYPE* get_Title)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIcon* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* put_Title)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIcon* This,
        HSTRING value);
    HRESULT (STDMETHODCALLTYPE* get_NormalizedAnchorPoint)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIcon* This,
        struct __x_ABI_CWindows_CFoundation_CPoint* value);
    HRESULT (STDMETHODCALLTYPE* put_NormalizedAnchorPoint)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIcon* This,
        struct __x_ABI_CWindows_CFoundation_CPoint value);
    HRESULT (STDMETHODCALLTYPE* get_Image)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIcon* This,
        __x_ABI_CWindows_CStorage_CStreams_CIRandomAccessStreamReference** value);
    HRESULT (STDMETHODCALLTYPE* put_Image)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIcon* This,
        __x_ABI_CWindows_CStorage_CStreams_CIRandomAccessStreamReference* value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIconVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIcon
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIconVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIcon;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIcon_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIcon2_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIcon2_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIcon2Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIcon2* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIcon2* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIcon2* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIcon2* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIcon2* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIcon2* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_CollisionBehaviorDesired)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIcon2* This,
        enum __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CMapElementCollisionBehavior* value);
    HRESULT (STDMETHODCALLTYPE* put_CollisionBehaviorDesired)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIcon2* This,
        enum __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CMapElementCollisionBehavior value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIcon2Vtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIcon2
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIcon2Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIcon2;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIcon2_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIconStatics_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIconStatics_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIconStaticsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIconStatics* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIconStatics* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIconStatics* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIconStatics* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIconStatics* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIconStatics* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_LocationProperty)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIconStatics* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** value);
    HRESULT (STDMETHODCALLTYPE* get_TitleProperty)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIconStatics* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** value);
    HRESULT (STDMETHODCALLTYPE* get_NormalizedAnchorPointProperty)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIconStatics* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIconStaticsVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIconStatics
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIconStaticsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIconStatics;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIconStatics_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIconStatics2_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIconStatics2_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIconStatics2Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIconStatics2* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIconStatics2* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIconStatics2* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIconStatics2* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIconStatics2* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIconStatics2* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_CollisionBehaviorDesiredProperty)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIconStatics2* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIconStatics2Vtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIconStatics2
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIconStatics2Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIconStatics2;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIconStatics2_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapInputEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapInputEventArgs_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapInputEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapInputEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapInputEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapInputEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapInputEventArgs* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapInputEventArgs* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapInputEventArgs* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Position)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapInputEventArgs* This,
        struct __x_ABI_CWindows_CFoundation_CPoint* value);
    HRESULT (STDMETHODCALLTYPE* get_Location)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapInputEventArgs* This,
        __x_ABI_CWindows_CDevices_CGeolocation_CIGeopoint** value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapInputEventArgsVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapInputEventArgs
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapInputEventArgsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapInputEventArgs;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapInputEventArgs_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapItemsControl_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapItemsControl_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapItemsControlVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapItemsControl* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapItemsControl* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapItemsControl* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapItemsControl* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapItemsControl* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapItemsControl* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_ItemsSource)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapItemsControl* This,
        IInspectable** value);
    HRESULT (STDMETHODCALLTYPE* put_ItemsSource)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapItemsControl* This,
        IInspectable* value);
    HRESULT (STDMETHODCALLTYPE* get_Items)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapItemsControl* This,
        __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CXaml__CDependencyObject** value);
    HRESULT (STDMETHODCALLTYPE* get_ItemTemplate)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapItemsControl* This,
        __x_ABI_CWindows_CUI_CXaml_CIDataTemplate** value);
    HRESULT (STDMETHODCALLTYPE* put_ItemTemplate)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapItemsControl* This,
        __x_ABI_CWindows_CUI_CXaml_CIDataTemplate* value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapItemsControlVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapItemsControl
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapItemsControlVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapItemsControl;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapItemsControl_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapItemsControlStatics_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapItemsControlStatics_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapItemsControlStaticsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapItemsControlStatics* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapItemsControlStatics* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapItemsControlStatics* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapItemsControlStatics* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapItemsControlStatics* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapItemsControlStatics* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_ItemsSourceProperty)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapItemsControlStatics* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** value);
    HRESULT (STDMETHODCALLTYPE* get_ItemsProperty)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapItemsControlStatics* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** value);
    HRESULT (STDMETHODCALLTYPE* get_ItemTemplateProperty)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapItemsControlStatics* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapItemsControlStaticsVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapItemsControlStatics
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapItemsControlStaticsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapItemsControlStatics;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapItemsControlStatics_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapLayer_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapLayer_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapLayerVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapLayer* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapLayer* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapLayer* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapLayer* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapLayer* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapLayer* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_MapTabIndex)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapLayer* This,
        INT32* value);
    HRESULT (STDMETHODCALLTYPE* put_MapTabIndex)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapLayer* This,
        INT32 value);
    HRESULT (STDMETHODCALLTYPE* get_Visible)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapLayer* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* put_Visible)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapLayer* This,
        boolean value);
    HRESULT (STDMETHODCALLTYPE* get_ZIndex)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapLayer* This,
        INT32* value);
    HRESULT (STDMETHODCALLTYPE* put_ZIndex)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapLayer* This,
        INT32 value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapLayerVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapLayer
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapLayerVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapLayer;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapLayer_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapLayerFactory_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapLayerFactory_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapLayerFactoryVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapLayerFactory* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapLayerFactory* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapLayerFactory* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapLayerFactory* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapLayerFactory* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapLayerFactory* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* CreateInstance)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapLayerFactory* This,
        IInspectable* baseInterface,
        IInspectable** innerInterface,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapLayer** value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapLayerFactoryVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapLayerFactory
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapLayerFactoryVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapLayerFactory;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapLayerFactory_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapLayerStatics_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapLayerStatics_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapLayerStaticsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapLayerStatics* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapLayerStatics* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapLayerStatics* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapLayerStatics* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapLayerStatics* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapLayerStatics* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_MapTabIndexProperty)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapLayerStatics* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** value);
    HRESULT (STDMETHODCALLTYPE* get_VisibleProperty)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapLayerStatics* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** value);
    HRESULT (STDMETHODCALLTYPE* get_ZIndexProperty)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapLayerStatics* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapLayerStaticsVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapLayerStatics
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapLayerStaticsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapLayerStatics;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapLayerStatics_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapModel3D_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapModel3D_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapModel3DVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapModel3D* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapModel3D* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapModel3D* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapModel3D* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapModel3D* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapModel3D* This,
            TrustLevel* trustLevel);
    
        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapModel3DVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapModel3D
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapModel3DVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapModel3D;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapModel3D_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapModel3DFactory_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapModel3DFactory_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapModel3DFactoryVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapModel3DFactory* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapModel3DFactory* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapModel3DFactory* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapModel3DFactory* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapModel3DFactory* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapModel3DFactory* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* CreateInstance)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapModel3DFactory* This,
        IInspectable* baseInterface,
        IInspectable** innerInterface,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapModel3D** value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapModel3DFactoryVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapModel3DFactory
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapModel3DFactoryVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapModel3DFactory;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapModel3DFactory_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapModel3DStatics_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapModel3DStatics_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapModel3DStaticsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapModel3DStatics* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapModel3DStatics* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapModel3DStatics* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapModel3DStatics* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapModel3DStatics* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapModel3DStatics* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* CreateFrom3MFAsync)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapModel3DStatics* This,
        __x_ABI_CWindows_CStorage_CStreams_CIRandomAccessStreamReference* source,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapModel3D** operation);
    HRESULT (STDMETHODCALLTYPE* CreateFrom3MFWithShadingOptionAsync)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapModel3DStatics* This,
        __x_ABI_CWindows_CStorage_CStreams_CIRandomAccessStreamReference* source,
        enum __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CMapModel3DShadingOption shadingOption,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapModel3D** operation);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapModel3DStaticsVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapModel3DStatics
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapModel3DStaticsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapModel3DStatics;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapModel3DStatics_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygon_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygon_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygonVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygon* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygon* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygon* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygon* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygon* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygon* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Path)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygon* This,
        __x_ABI_CWindows_CDevices_CGeolocation_CIGeopath** value);
    HRESULT (STDMETHODCALLTYPE* put_Path)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygon* This,
        __x_ABI_CWindows_CDevices_CGeolocation_CIGeopath* value);
    HRESULT (STDMETHODCALLTYPE* get_StrokeColor)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygon* This,
        struct __x_ABI_CWindows_CUI_CColor* value);
    HRESULT (STDMETHODCALLTYPE* put_StrokeColor)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygon* This,
        struct __x_ABI_CWindows_CUI_CColor value);
    HRESULT (STDMETHODCALLTYPE* get_StrokeThickness)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygon* This,
        DOUBLE* value);
    HRESULT (STDMETHODCALLTYPE* put_StrokeThickness)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygon* This,
        DOUBLE value);
    HRESULT (STDMETHODCALLTYPE* get_StrokeDashed)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygon* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* put_StrokeDashed)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygon* This,
        boolean value);
    HRESULT (STDMETHODCALLTYPE* get_FillColor)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygon* This,
        struct __x_ABI_CWindows_CUI_CColor* value);
    HRESULT (STDMETHODCALLTYPE* put_FillColor)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygon* This,
        struct __x_ABI_CWindows_CUI_CColor value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygonVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygon
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygonVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygon;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygon_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygon2_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygon2_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygon2Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygon2* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygon2* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygon2* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygon2* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygon2* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygon2* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Paths)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygon2* This,
        __x_ABI_C__FIVector_1___x_ABI_CWindows__CDevices__CGeolocation__CGeopath** value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygon2Vtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygon2
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygon2Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygon2;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygon2_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygonStatics_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygonStatics_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygonStaticsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygonStatics* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygonStatics* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygonStatics* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygonStatics* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygonStatics* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygonStatics* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_PathProperty)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygonStatics* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** value);
    HRESULT (STDMETHODCALLTYPE* get_StrokeThicknessProperty)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygonStatics* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** value);
    HRESULT (STDMETHODCALLTYPE* get_StrokeDashedProperty)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygonStatics* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygonStaticsVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygonStatics
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygonStaticsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygonStatics;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygonStatics_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolyline_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolyline_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolylineVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolyline* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolyline* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolyline* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolyline* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolyline* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolyline* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Path)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolyline* This,
        __x_ABI_CWindows_CDevices_CGeolocation_CIGeopath** value);
    HRESULT (STDMETHODCALLTYPE* put_Path)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolyline* This,
        __x_ABI_CWindows_CDevices_CGeolocation_CIGeopath* value);
    HRESULT (STDMETHODCALLTYPE* get_StrokeColor)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolyline* This,
        struct __x_ABI_CWindows_CUI_CColor* value);
    HRESULT (STDMETHODCALLTYPE* put_StrokeColor)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolyline* This,
        struct __x_ABI_CWindows_CUI_CColor value);
    HRESULT (STDMETHODCALLTYPE* get_StrokeThickness)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolyline* This,
        DOUBLE* value);
    HRESULT (STDMETHODCALLTYPE* put_StrokeThickness)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolyline* This,
        DOUBLE value);
    HRESULT (STDMETHODCALLTYPE* get_StrokeDashed)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolyline* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* put_StrokeDashed)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolyline* This,
        boolean value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolylineVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolyline
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolylineVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolyline;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolyline_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolylineStatics_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolylineStatics_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolylineStaticsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolylineStatics* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolylineStatics* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolylineStatics* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolylineStatics* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolylineStatics* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolylineStatics* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_PathProperty)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolylineStatics* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** value);
    HRESULT (STDMETHODCALLTYPE* get_StrokeDashedProperty)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolylineStatics* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolylineStaticsVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolylineStatics
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolylineStaticsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolylineStatics;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolylineStatics_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRightTappedEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRightTappedEventArgs_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRightTappedEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRightTappedEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRightTappedEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRightTappedEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRightTappedEventArgs* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRightTappedEventArgs* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRightTappedEventArgs* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Position)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRightTappedEventArgs* This,
        struct __x_ABI_CWindows_CFoundation_CPoint* value);
    HRESULT (STDMETHODCALLTYPE* get_Location)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRightTappedEventArgs* This,
        __x_ABI_CWindows_CDevices_CGeolocation_CIGeopoint** value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRightTappedEventArgsVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRightTappedEventArgs
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRightTappedEventArgsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRightTappedEventArgs;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRightTappedEventArgs_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRouteView_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRouteView_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRouteViewVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRouteView* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRouteView* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRouteView* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRouteView* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRouteView* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRouteView* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_RouteColor)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRouteView* This,
        struct __x_ABI_CWindows_CUI_CColor* value);
    HRESULT (STDMETHODCALLTYPE* put_RouteColor)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRouteView* This,
        struct __x_ABI_CWindows_CUI_CColor value);
    HRESULT (STDMETHODCALLTYPE* get_OutlineColor)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRouteView* This,
        struct __x_ABI_CWindows_CUI_CColor* value);
    HRESULT (STDMETHODCALLTYPE* put_OutlineColor)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRouteView* This,
        struct __x_ABI_CWindows_CUI_CColor value);
    HRESULT (STDMETHODCALLTYPE* get_Route)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRouteView* This,
        __x_ABI_CWindows_CServices_CMaps_CIMapRoute** value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRouteViewVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRouteView
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRouteViewVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRouteView;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRouteView_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRouteViewFactory_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRouteViewFactory_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRouteViewFactoryVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRouteViewFactory* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRouteViewFactory* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRouteViewFactory* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRouteViewFactory* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRouteViewFactory* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRouteViewFactory* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* CreateInstanceWithMapRoute)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRouteViewFactory* This,
        __x_ABI_CWindows_CServices_CMaps_CIMapRoute* route,
        IInspectable* baseInterface,
        IInspectable** innerInterface,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRouteView** value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRouteViewFactoryVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRouteViewFactory
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRouteViewFactoryVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRouteViewFactory;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRouteViewFactory_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapScene_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapScene_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapSceneVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapScene* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapScene* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapScene* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapScene* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapScene* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapScene* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_TargetCamera)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapScene* This,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCamera** value);
    HRESULT (STDMETHODCALLTYPE* add_TargetCameraChanged)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapScene* This,
        __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapScene___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapTargetCameraChangedEventArgs* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_TargetCameraChanged)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapScene* This,
        EventRegistrationToken token);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapSceneVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapScene
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapSceneVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapScene;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapScene_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapSceneStatics_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapSceneStatics_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapSceneStaticsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapSceneStatics* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapSceneStatics* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapSceneStatics* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapSceneStatics* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapSceneStatics* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapSceneStatics* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* CreateFromBoundingBox)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapSceneStatics* This,
        __x_ABI_CWindows_CDevices_CGeolocation_CIGeoboundingBox* bounds,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapScene** result);
    HRESULT (STDMETHODCALLTYPE* CreateFromBoundingBoxWithHeadingAndPitch)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapSceneStatics* This,
        __x_ABI_CWindows_CDevices_CGeolocation_CIGeoboundingBox* bounds,
        DOUBLE headingInDegrees,
        DOUBLE pitchInDegrees,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapScene** result);
    HRESULT (STDMETHODCALLTYPE* CreateFromCamera)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapSceneStatics* This,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCamera* camera,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapScene** result);
    HRESULT (STDMETHODCALLTYPE* CreateFromLocation)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapSceneStatics* This,
        __x_ABI_CWindows_CDevices_CGeolocation_CIGeopoint* location,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapScene** result);
    HRESULT (STDMETHODCALLTYPE* CreateFromLocationWithHeadingAndPitch)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapSceneStatics* This,
        __x_ABI_CWindows_CDevices_CGeolocation_CIGeopoint* location,
        DOUBLE headingInDegrees,
        DOUBLE pitchInDegrees,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapScene** result);
    HRESULT (STDMETHODCALLTYPE* CreateFromLocationAndRadius)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapSceneStatics* This,
        __x_ABI_CWindows_CDevices_CGeolocation_CIGeopoint* location,
        DOUBLE radiusInMeters,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapScene** result);
    HRESULT (STDMETHODCALLTYPE* CreateFromLocationAndRadiusWithHeadingAndPitch)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapSceneStatics* This,
        __x_ABI_CWindows_CDevices_CGeolocation_CIGeopoint* location,
        DOUBLE radiusInMeters,
        DOUBLE headingInDegrees,
        DOUBLE pitchInDegrees,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapScene** result);
    HRESULT (STDMETHODCALLTYPE* CreateFromLocations)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapSceneStatics* This,
        __x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CGeolocation__CGeopoint* locations,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapScene** result);
    HRESULT (STDMETHODCALLTYPE* CreateFromLocationsWithHeadingAndPitch)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapSceneStatics* This,
        __x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CGeolocation__CGeopoint* locations,
        DOUBLE headingInDegrees,
        DOUBLE pitchInDegrees,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapScene** result);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapSceneStaticsVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapSceneStatics
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapSceneStaticsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapSceneStatics;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapSceneStatics_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheet_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheet_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheet* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheet* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheet* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheet* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheet* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheet* This,
            TrustLevel* trustLevel);
    
        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheet
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheet;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheet_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntriesStatics_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntriesStatics_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntriesStaticsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntriesStatics* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntriesStatics* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntriesStatics* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntriesStatics* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntriesStatics* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntriesStatics* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Area)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntriesStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_Airport)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntriesStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_Cemetery)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntriesStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_Continent)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntriesStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_Education)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntriesStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_IndigenousPeoplesReserve)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntriesStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_Island)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntriesStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_Medical)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntriesStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_Military)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntriesStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_Nautical)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntriesStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_Neighborhood)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntriesStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_Runway)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntriesStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_Sand)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntriesStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_ShoppingCenter)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntriesStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_Stadium)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntriesStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_Vegetation)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntriesStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_Forest)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntriesStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_GolfCourse)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntriesStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_Park)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntriesStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_PlayingField)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntriesStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_Reserve)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntriesStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_Point)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntriesStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_NaturalPoint)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntriesStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_Peak)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntriesStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_VolcanicPeak)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntriesStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_WaterPoint)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntriesStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_PointOfInterest)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntriesStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_Business)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntriesStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_FoodPoint)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntriesStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_PopulatedPlace)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntriesStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_Capital)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntriesStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_AdminDistrictCapital)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntriesStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_CountryRegionCapital)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntriesStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_RoadShield)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntriesStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_RoadExit)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntriesStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_Transit)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntriesStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_Political)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntriesStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_CountryRegion)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntriesStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_AdminDistrict)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntriesStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_District)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntriesStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_Structure)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntriesStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_Building)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntriesStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_EducationBuilding)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntriesStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_MedicalBuilding)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntriesStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_TransitBuilding)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntriesStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_Transportation)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntriesStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_Road)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntriesStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_ControlledAccessHighway)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntriesStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_HighSpeedRamp)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntriesStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_Highway)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntriesStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_MajorRoad)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntriesStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_ArterialRoad)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntriesStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_Street)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntriesStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_Ramp)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntriesStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_UnpavedStreet)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntriesStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_TollRoad)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntriesStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_Railway)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntriesStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_Trail)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntriesStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_WaterRoute)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntriesStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_Water)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntriesStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_River)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntriesStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_RouteLine)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntriesStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_WalkingRoute)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntriesStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_DrivingRoute)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntriesStatics* This,
        HSTRING* value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntriesStaticsVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntriesStatics
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntriesStaticsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntriesStatics;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntriesStatics_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntryStatesStatics_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntryStatesStatics_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntryStatesStaticsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntryStatesStatics* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntryStatesStatics* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntryStatesStatics* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntryStatesStatics* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntryStatesStatics* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntryStatesStatics* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Disabled)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntryStatesStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_Hover)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntryStatesStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_Selected)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntryStatesStatics* This,
        HSTRING* value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntryStatesStaticsVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntryStatesStatics
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntryStatesStaticsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntryStatesStatics;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntryStatesStatics_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetStatics_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetStatics_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetStaticsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetStatics* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetStatics* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetStatics* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetStatics* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetStatics* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetStatics* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* Aerial)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetStatics* This,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheet** result);
    HRESULT (STDMETHODCALLTYPE* AerialWithOverlay)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetStatics* This,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheet** result);
    HRESULT (STDMETHODCALLTYPE* RoadLight)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetStatics* This,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheet** result);
    HRESULT (STDMETHODCALLTYPE* RoadDark)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetStatics* This,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheet** result);
    HRESULT (STDMETHODCALLTYPE* RoadHighContrastLight)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetStatics* This,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheet** result);
    HRESULT (STDMETHODCALLTYPE* RoadHighContrastDark)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetStatics* This,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheet** result);
    HRESULT (STDMETHODCALLTYPE* Combine)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetStatics* This,
        __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CMapStyleSheet* styleSheets,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheet** result);
    HRESULT (STDMETHODCALLTYPE* ParseFromJson)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetStatics* This,
        HSTRING styleAsJson,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheet** result);
    HRESULT (STDMETHODCALLTYPE* TryParseFromJson)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetStatics* This,
        HSTRING styleAsJson,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheet** styleSheet,
        boolean* returnValue);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetStaticsVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetStatics
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetStaticsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetStatics;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetStatics_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTargetCameraChangedEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTargetCameraChangedEventArgs_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTargetCameraChangedEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTargetCameraChangedEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTargetCameraChangedEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTargetCameraChangedEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTargetCameraChangedEventArgs* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTargetCameraChangedEventArgs* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTargetCameraChangedEventArgs* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Camera)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTargetCameraChangedEventArgs* This,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCamera** value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTargetCameraChangedEventArgsVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTargetCameraChangedEventArgs
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTargetCameraChangedEventArgsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTargetCameraChangedEventArgs;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTargetCameraChangedEventArgs_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTargetCameraChangedEventArgs2_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTargetCameraChangedEventArgs2_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTargetCameraChangedEventArgs2Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTargetCameraChangedEventArgs2* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTargetCameraChangedEventArgs2* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTargetCameraChangedEventArgs2* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTargetCameraChangedEventArgs2* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTargetCameraChangedEventArgs2* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTargetCameraChangedEventArgs2* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_ChangeReason)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTargetCameraChangedEventArgs2* This,
        enum __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CMapCameraChangeReason* value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTargetCameraChangedEventArgs2Vtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTargetCameraChangedEventArgs2
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTargetCameraChangedEventArgs2Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTargetCameraChangedEventArgs2;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTargetCameraChangedEventArgs2_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequest_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequest_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequestVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequest* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequest* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequest* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequest* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequest* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequest* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_PixelData)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequest* This,
        __x_ABI_CWindows_CStorage_CStreams_CIRandomAccessStreamReference** value);
    HRESULT (STDMETHODCALLTYPE* put_PixelData)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequest* This,
        __x_ABI_CWindows_CStorage_CStreams_CIRandomAccessStreamReference* value);
    HRESULT (STDMETHODCALLTYPE* GetDeferral)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequest* This,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequestDeferral** result);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequestVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequest
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequestVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequest;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequest_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequestDeferral_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequestDeferral_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequestDeferralVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequestDeferral* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequestDeferral* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequestDeferral* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequestDeferral* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequestDeferral* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequestDeferral* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* Complete)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequestDeferral* This);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequestDeferralVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequestDeferral
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequestDeferralVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequestDeferral;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequestDeferral_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequestedEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequestedEventArgs_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequestedEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequestedEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequestedEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequestedEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequestedEventArgs* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequestedEventArgs* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequestedEventArgs* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_X)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequestedEventArgs* This,
        INT32* value);
    HRESULT (STDMETHODCALLTYPE* get_Y)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequestedEventArgs* This,
        INT32* value);
    HRESULT (STDMETHODCALLTYPE* get_ZoomLevel)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequestedEventArgs* This,
        INT32* value);
    HRESULT (STDMETHODCALLTYPE* get_Request)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequestedEventArgs* This,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequest** value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequestedEventArgsVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequestedEventArgs
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequestedEventArgsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequestedEventArgs;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequestedEventArgs_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequestedEventArgs2_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequestedEventArgs2_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequestedEventArgs2Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequestedEventArgs2* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequestedEventArgs2* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequestedEventArgs2* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequestedEventArgs2* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequestedEventArgs2* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequestedEventArgs2* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_FrameIndex)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequestedEventArgs2* This,
        INT32* value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequestedEventArgs2Vtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequestedEventArgs2
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequestedEventArgs2Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequestedEventArgs2;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequestedEventArgs2_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileDataSource_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileDataSource_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileDataSourceVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileDataSource* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileDataSource* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileDataSource* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileDataSource* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileDataSource* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileDataSource* This,
            TrustLevel* trustLevel);
    
        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileDataSourceVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileDataSource
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileDataSourceVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileDataSource;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileDataSource_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileDataSourceFactory_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileDataSourceFactory_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileDataSourceFactoryVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileDataSourceFactory* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileDataSourceFactory* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileDataSourceFactory* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileDataSourceFactory* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileDataSourceFactory* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileDataSourceFactory* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* CreateInstance)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileDataSourceFactory* This,
        IInspectable* baseInterface,
        IInspectable** innerInterface,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileDataSource** value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileDataSourceFactoryVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileDataSourceFactory
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileDataSourceFactoryVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileDataSourceFactory;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileDataSourceFactory_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_DataSource)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource* This,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileDataSource** value);
    HRESULT (STDMETHODCALLTYPE* put_DataSource)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource* This,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileDataSource* value);
    HRESULT (STDMETHODCALLTYPE* get_Layer)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource* This,
        enum __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CMapTileLayer* value);
    HRESULT (STDMETHODCALLTYPE* put_Layer)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource* This,
        enum __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CMapTileLayer value);
    HRESULT (STDMETHODCALLTYPE* get_ZoomLevelRange)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource* This,
        struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CMapZoomLevelRange* value);
    HRESULT (STDMETHODCALLTYPE* put_ZoomLevelRange)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource* This,
        struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CMapZoomLevelRange value);
    HRESULT (STDMETHODCALLTYPE* get_Bounds)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource* This,
        __x_ABI_CWindows_CDevices_CGeolocation_CIGeoboundingBox** value);
    HRESULT (STDMETHODCALLTYPE* put_Bounds)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource* This,
        __x_ABI_CWindows_CDevices_CGeolocation_CIGeoboundingBox* value);
    HRESULT (STDMETHODCALLTYPE* get_AllowOverstretch)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* put_AllowOverstretch)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource* This,
        boolean value);
    HRESULT (STDMETHODCALLTYPE* get_IsFadingEnabled)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* put_IsFadingEnabled)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource* This,
        boolean value);
    HRESULT (STDMETHODCALLTYPE* get_IsTransparencyEnabled)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* put_IsTransparencyEnabled)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource* This,
        boolean value);
    HRESULT (STDMETHODCALLTYPE* get_IsRetryEnabled)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* put_IsRetryEnabled)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource* This,
        boolean value);
    HRESULT (STDMETHODCALLTYPE* get_ZIndex)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource* This,
        INT32* value);
    HRESULT (STDMETHODCALLTYPE* put_ZIndex)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource* This,
        INT32 value);
    HRESULT (STDMETHODCALLTYPE* get_TilePixelSize)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource* This,
        INT32* value);
    HRESULT (STDMETHODCALLTYPE* put_TilePixelSize)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource* This,
        INT32 value);
    HRESULT (STDMETHODCALLTYPE* get_Visible)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* put_Visible)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource* This,
        boolean value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource2_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource2_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource2Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource2* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource2* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource2* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource2* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource2* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource2* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_AnimationState)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource2* This,
        enum __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CMapTileAnimationState* value);
    HRESULT (STDMETHODCALLTYPE* get_AutoPlay)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource2* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* put_AutoPlay)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource2* This,
        boolean value);
    HRESULT (STDMETHODCALLTYPE* get_FrameCount)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource2* This,
        INT32* value);
    HRESULT (STDMETHODCALLTYPE* put_FrameCount)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource2* This,
        INT32 value);
    HRESULT (STDMETHODCALLTYPE* get_FrameDuration)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource2* This,
        struct __x_ABI_CWindows_CFoundation_CTimeSpan* value);
    HRESULT (STDMETHODCALLTYPE* put_FrameDuration)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource2* This,
        struct __x_ABI_CWindows_CFoundation_CTimeSpan value);
    HRESULT (STDMETHODCALLTYPE* Pause)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource2* This);
    HRESULT (STDMETHODCALLTYPE* Play)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource2* This);
    HRESULT (STDMETHODCALLTYPE* Stop)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource2* This);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource2Vtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource2
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource2Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource2;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource2_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceFactory_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceFactory_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceFactoryVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceFactory* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceFactory* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceFactory* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceFactory* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceFactory* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceFactory* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* CreateInstance)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceFactory* This,
        IInspectable* baseInterface,
        IInspectable** innerInterface,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource** value);
    HRESULT (STDMETHODCALLTYPE* CreateInstanceWithDataSource)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceFactory* This,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileDataSource* dataSource,
        IInspectable* baseInterface,
        IInspectable** innerInterface,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource** value);
    HRESULT (STDMETHODCALLTYPE* CreateInstanceWithDataSourceAndZoomRange)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceFactory* This,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileDataSource* dataSource,
        struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CMapZoomLevelRange zoomLevelRange,
        IInspectable* baseInterface,
        IInspectable** innerInterface,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource** value);
    HRESULT (STDMETHODCALLTYPE* CreateInstanceWithDataSourceZoomRangeAndBounds)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceFactory* This,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileDataSource* dataSource,
        struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CMapZoomLevelRange zoomLevelRange,
        __x_ABI_CWindows_CDevices_CGeolocation_CIGeoboundingBox* bounds,
        IInspectable* baseInterface,
        IInspectable** innerInterface,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource** value);
    HRESULT (STDMETHODCALLTYPE* CreateInstanceWithDataSourceZoomRangeBoundsAndTileSize)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceFactory* This,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileDataSource* dataSource,
        struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CMapZoomLevelRange zoomLevelRange,
        __x_ABI_CWindows_CDevices_CGeolocation_CIGeoboundingBox* bounds,
        INT32 tileSizeInPixels,
        IInspectable* baseInterface,
        IInspectable** innerInterface,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource** value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceFactoryVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceFactory
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceFactoryVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceFactory;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceFactory_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceStatics_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceStatics_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceStaticsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceStatics* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceStatics* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceStatics* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceStatics* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceStatics* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceStatics* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_DataSourceProperty)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceStatics* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** value);
    HRESULT (STDMETHODCALLTYPE* get_LayerProperty)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceStatics* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** value);
    HRESULT (STDMETHODCALLTYPE* get_ZoomLevelRangeProperty)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceStatics* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** value);
    HRESULT (STDMETHODCALLTYPE* get_BoundsProperty)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceStatics* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** value);
    HRESULT (STDMETHODCALLTYPE* get_AllowOverstretchProperty)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceStatics* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** value);
    HRESULT (STDMETHODCALLTYPE* get_IsFadingEnabledProperty)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceStatics* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** value);
    HRESULT (STDMETHODCALLTYPE* get_IsTransparencyEnabledProperty)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceStatics* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** value);
    HRESULT (STDMETHODCALLTYPE* get_IsRetryEnabledProperty)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceStatics* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** value);
    HRESULT (STDMETHODCALLTYPE* get_ZIndexProperty)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceStatics* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** value);
    HRESULT (STDMETHODCALLTYPE* get_TilePixelSizeProperty)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceStatics* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** value);
    HRESULT (STDMETHODCALLTYPE* get_VisibleProperty)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceStatics* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceStaticsVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceStatics
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceStaticsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceStatics;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceStatics_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceStatics2_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceStatics2_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceStatics2Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceStatics2* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceStatics2* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceStatics2* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceStatics2* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceStatics2* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceStatics2* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_AnimationStateProperty)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceStatics2* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** value);
    HRESULT (STDMETHODCALLTYPE* get_AutoPlayProperty)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceStatics2* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** value);
    HRESULT (STDMETHODCALLTYPE* get_FrameCountProperty)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceStatics2* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** value);
    HRESULT (STDMETHODCALLTYPE* get_FrameDurationProperty)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceStatics2* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceStatics2Vtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceStatics2
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceStatics2Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceStatics2;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceStatics2_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequest_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequest_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequestVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequest* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequest* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequest* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequest* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequest* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequest* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Uri)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequest* This,
        __x_ABI_CWindows_CFoundation_CIUriRuntimeClass** value);
    HRESULT (STDMETHODCALLTYPE* put_Uri)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequest* This,
        __x_ABI_CWindows_CFoundation_CIUriRuntimeClass* value);
    HRESULT (STDMETHODCALLTYPE* GetDeferral)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequest* This,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequestDeferral** result);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequestVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequest
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequestVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequest;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequest_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequestDeferral_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequestDeferral_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequestDeferralVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequestDeferral* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequestDeferral* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequestDeferral* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequestDeferral* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequestDeferral* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequestDeferral* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* Complete)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequestDeferral* This);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequestDeferralVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequestDeferral
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequestDeferralVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequestDeferral;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequestDeferral_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequestedEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequestedEventArgs_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequestedEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequestedEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequestedEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequestedEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequestedEventArgs* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequestedEventArgs* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequestedEventArgs* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_X)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequestedEventArgs* This,
        INT32* value);
    HRESULT (STDMETHODCALLTYPE* get_Y)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequestedEventArgs* This,
        INT32* value);
    HRESULT (STDMETHODCALLTYPE* get_ZoomLevel)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequestedEventArgs* This,
        INT32* value);
    HRESULT (STDMETHODCALLTYPE* get_Request)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequestedEventArgs* This,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequest** value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequestedEventArgsVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequestedEventArgs
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequestedEventArgsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequestedEventArgs;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequestedEventArgs_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequestedEventArgs2_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequestedEventArgs2_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequestedEventArgs2Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequestedEventArgs2* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequestedEventArgs2* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequestedEventArgs2* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequestedEventArgs2* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequestedEventArgs2* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequestedEventArgs2* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_FrameIndex)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequestedEventArgs2* This,
        INT32* value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequestedEventArgs2Vtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequestedEventArgs2
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequestedEventArgs2Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequestedEventArgs2;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequestedEventArgs2_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsideExperience_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsideExperience_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsideExperienceVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsideExperience* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsideExperience* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsideExperience* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsideExperience* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsideExperience* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsideExperience* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_AddressTextVisible)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsideExperience* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* put_AddressTextVisible)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsideExperience* This,
        boolean value);
    HRESULT (STDMETHODCALLTYPE* get_CursorVisible)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsideExperience* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* put_CursorVisible)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsideExperience* This,
        boolean value);
    HRESULT (STDMETHODCALLTYPE* get_OverviewMapVisible)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsideExperience* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* put_OverviewMapVisible)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsideExperience* This,
        boolean value);
    HRESULT (STDMETHODCALLTYPE* get_StreetLabelsVisible)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsideExperience* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* put_StreetLabelsVisible)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsideExperience* This,
        boolean value);
    HRESULT (STDMETHODCALLTYPE* get_ExitButtonVisible)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsideExperience* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* put_ExitButtonVisible)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsideExperience* This,
        boolean value);
    HRESULT (STDMETHODCALLTYPE* get_ZoomButtonsVisible)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsideExperience* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* put_ZoomButtonsVisible)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsideExperience* This,
        boolean value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsideExperienceVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsideExperience
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsideExperienceVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsideExperience;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsideExperience_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsideExperienceFactory_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsideExperienceFactory_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsideExperienceFactoryVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsideExperienceFactory* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsideExperienceFactory* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsideExperienceFactory* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsideExperienceFactory* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsideExperienceFactory* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsideExperienceFactory* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* CreateInstanceWithPanorama)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsideExperienceFactory* This,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsidePanorama* panorama,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsideExperience** value);
    HRESULT (STDMETHODCALLTYPE* CreateInstanceWithPanoramaHeadingPitchAndFieldOfView)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsideExperienceFactory* This,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsidePanorama* panorama,
        DOUBLE headingInDegrees,
        DOUBLE pitchInDegrees,
        DOUBLE fieldOfViewInDegrees,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsideExperience** value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsideExperienceFactoryVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsideExperienceFactory
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsideExperienceFactoryVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsideExperienceFactory;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsideExperienceFactory_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsidePanorama_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsidePanorama_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsidePanoramaVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsidePanorama* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsidePanorama* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsidePanorama* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsidePanorama* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsidePanorama* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsidePanorama* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Location)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsidePanorama* This,
        __x_ABI_CWindows_CDevices_CGeolocation_CIGeopoint** value);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsidePanoramaVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsidePanorama
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsidePanoramaVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsidePanorama;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsidePanorama_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsidePanoramaStatics_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsidePanoramaStatics_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsidePanoramaStaticsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsidePanoramaStatics* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsidePanoramaStatics* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsidePanoramaStatics* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsidePanoramaStatics* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsidePanoramaStatics* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsidePanoramaStatics* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* FindNearbyWithLocationAsync)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsidePanoramaStatics* This,
        __x_ABI_CWindows_CDevices_CGeolocation_CIGeopoint* location,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CStreetsidePanorama** operation);
    HRESULT (STDMETHODCALLTYPE* FindNearbyWithLocationAndRadiusAsync)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsidePanoramaStatics* This,
        __x_ABI_CWindows_CDevices_CGeolocation_CIGeopoint* location,
        DOUBLE radiusInMeters,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CUI__CXaml__CControls__CMaps__CStreetsidePanorama** operation);

        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsidePanoramaStaticsVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsidePanoramaStatics
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsidePanoramaStaticsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsidePanoramaStatics;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsidePanoramaStatics_INTERFACE_DEFINED__) */
    

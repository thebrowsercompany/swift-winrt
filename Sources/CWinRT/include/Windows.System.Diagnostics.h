// WARNING: Please don't edit this file. It was generated by Swift/WinRT v0.0.1

#pragma once
// Header files for imported files
#include <inspectable.h>
#include <EventToken.h>
#include <windowscontracts.h>
#include "Windows.Foundation.h"
#include "Windows.Data.Json.h"
#include "Windows.System.h"
// Importing Collections header
#include "Windows.Foundation.Collections.h"

/* Forward Declarations */
#ifndef ____x_ABI_CWindows_CSystem_CDiagnostics_CIDiagnosticActionResult_FWD_DEFINED__
#define ____x_ABI_CWindows_CSystem_CDiagnostics_CIDiagnosticActionResult_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CSystem_CDiagnostics_CIDiagnosticActionResult __x_ABI_CWindows_CSystem_CDiagnostics_CIDiagnosticActionResult;

#endif // ____x_ABI_CWindows_CSystem_CDiagnostics_CIDiagnosticActionResult_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CSystem_CDiagnostics_CIDiagnosticInvoker_FWD_DEFINED__
#define ____x_ABI_CWindows_CSystem_CDiagnostics_CIDiagnosticInvoker_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CSystem_CDiagnostics_CIDiagnosticInvoker __x_ABI_CWindows_CSystem_CDiagnostics_CIDiagnosticInvoker;

#endif // ____x_ABI_CWindows_CSystem_CDiagnostics_CIDiagnosticInvoker_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CSystem_CDiagnostics_CIDiagnosticInvoker2_FWD_DEFINED__
#define ____x_ABI_CWindows_CSystem_CDiagnostics_CIDiagnosticInvoker2_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CSystem_CDiagnostics_CIDiagnosticInvoker2 __x_ABI_CWindows_CSystem_CDiagnostics_CIDiagnosticInvoker2;

#endif // ____x_ABI_CWindows_CSystem_CDiagnostics_CIDiagnosticInvoker2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CSystem_CDiagnostics_CIDiagnosticInvokerStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CSystem_CDiagnostics_CIDiagnosticInvokerStatics_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CSystem_CDiagnostics_CIDiagnosticInvokerStatics __x_ABI_CWindows_CSystem_CDiagnostics_CIDiagnosticInvokerStatics;

#endif // ____x_ABI_CWindows_CSystem_CDiagnostics_CIDiagnosticInvokerStatics_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CSystem_CDiagnostics_CIProcessCpuUsage_FWD_DEFINED__
#define ____x_ABI_CWindows_CSystem_CDiagnostics_CIProcessCpuUsage_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CSystem_CDiagnostics_CIProcessCpuUsage __x_ABI_CWindows_CSystem_CDiagnostics_CIProcessCpuUsage;

#endif // ____x_ABI_CWindows_CSystem_CDiagnostics_CIProcessCpuUsage_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CSystem_CDiagnostics_CIProcessCpuUsageReport_FWD_DEFINED__
#define ____x_ABI_CWindows_CSystem_CDiagnostics_CIProcessCpuUsageReport_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CSystem_CDiagnostics_CIProcessCpuUsageReport __x_ABI_CWindows_CSystem_CDiagnostics_CIProcessCpuUsageReport;

#endif // ____x_ABI_CWindows_CSystem_CDiagnostics_CIProcessCpuUsageReport_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CSystem_CDiagnostics_CIProcessDiagnosticInfo_FWD_DEFINED__
#define ____x_ABI_CWindows_CSystem_CDiagnostics_CIProcessDiagnosticInfo_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CSystem_CDiagnostics_CIProcessDiagnosticInfo __x_ABI_CWindows_CSystem_CDiagnostics_CIProcessDiagnosticInfo;

#endif // ____x_ABI_CWindows_CSystem_CDiagnostics_CIProcessDiagnosticInfo_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CSystem_CDiagnostics_CIProcessDiagnosticInfo2_FWD_DEFINED__
#define ____x_ABI_CWindows_CSystem_CDiagnostics_CIProcessDiagnosticInfo2_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CSystem_CDiagnostics_CIProcessDiagnosticInfo2 __x_ABI_CWindows_CSystem_CDiagnostics_CIProcessDiagnosticInfo2;

#endif // ____x_ABI_CWindows_CSystem_CDiagnostics_CIProcessDiagnosticInfo2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CSystem_CDiagnostics_CIProcessDiagnosticInfoStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CSystem_CDiagnostics_CIProcessDiagnosticInfoStatics_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CSystem_CDiagnostics_CIProcessDiagnosticInfoStatics __x_ABI_CWindows_CSystem_CDiagnostics_CIProcessDiagnosticInfoStatics;

#endif // ____x_ABI_CWindows_CSystem_CDiagnostics_CIProcessDiagnosticInfoStatics_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CSystem_CDiagnostics_CIProcessDiagnosticInfoStatics2_FWD_DEFINED__
#define ____x_ABI_CWindows_CSystem_CDiagnostics_CIProcessDiagnosticInfoStatics2_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CSystem_CDiagnostics_CIProcessDiagnosticInfoStatics2 __x_ABI_CWindows_CSystem_CDiagnostics_CIProcessDiagnosticInfoStatics2;

#endif // ____x_ABI_CWindows_CSystem_CDiagnostics_CIProcessDiagnosticInfoStatics2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CSystem_CDiagnostics_CIProcessDiskUsage_FWD_DEFINED__
#define ____x_ABI_CWindows_CSystem_CDiagnostics_CIProcessDiskUsage_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CSystem_CDiagnostics_CIProcessDiskUsage __x_ABI_CWindows_CSystem_CDiagnostics_CIProcessDiskUsage;

#endif // ____x_ABI_CWindows_CSystem_CDiagnostics_CIProcessDiskUsage_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CSystem_CDiagnostics_CIProcessDiskUsageReport_FWD_DEFINED__
#define ____x_ABI_CWindows_CSystem_CDiagnostics_CIProcessDiskUsageReport_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CSystem_CDiagnostics_CIProcessDiskUsageReport __x_ABI_CWindows_CSystem_CDiagnostics_CIProcessDiskUsageReport;

#endif // ____x_ABI_CWindows_CSystem_CDiagnostics_CIProcessDiskUsageReport_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CSystem_CDiagnostics_CIProcessMemoryUsage_FWD_DEFINED__
#define ____x_ABI_CWindows_CSystem_CDiagnostics_CIProcessMemoryUsage_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CSystem_CDiagnostics_CIProcessMemoryUsage __x_ABI_CWindows_CSystem_CDiagnostics_CIProcessMemoryUsage;

#endif // ____x_ABI_CWindows_CSystem_CDiagnostics_CIProcessMemoryUsage_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CSystem_CDiagnostics_CIProcessMemoryUsageReport_FWD_DEFINED__
#define ____x_ABI_CWindows_CSystem_CDiagnostics_CIProcessMemoryUsageReport_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CSystem_CDiagnostics_CIProcessMemoryUsageReport __x_ABI_CWindows_CSystem_CDiagnostics_CIProcessMemoryUsageReport;

#endif // ____x_ABI_CWindows_CSystem_CDiagnostics_CIProcessMemoryUsageReport_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CSystem_CDiagnostics_CISystemCpuUsage_FWD_DEFINED__
#define ____x_ABI_CWindows_CSystem_CDiagnostics_CISystemCpuUsage_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CSystem_CDiagnostics_CISystemCpuUsage __x_ABI_CWindows_CSystem_CDiagnostics_CISystemCpuUsage;

#endif // ____x_ABI_CWindows_CSystem_CDiagnostics_CISystemCpuUsage_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CSystem_CDiagnostics_CISystemCpuUsageReport_FWD_DEFINED__
#define ____x_ABI_CWindows_CSystem_CDiagnostics_CISystemCpuUsageReport_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CSystem_CDiagnostics_CISystemCpuUsageReport __x_ABI_CWindows_CSystem_CDiagnostics_CISystemCpuUsageReport;

#endif // ____x_ABI_CWindows_CSystem_CDiagnostics_CISystemCpuUsageReport_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CSystem_CDiagnostics_CISystemDiagnosticInfo_FWD_DEFINED__
#define ____x_ABI_CWindows_CSystem_CDiagnostics_CISystemDiagnosticInfo_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CSystem_CDiagnostics_CISystemDiagnosticInfo __x_ABI_CWindows_CSystem_CDiagnostics_CISystemDiagnosticInfo;

#endif // ____x_ABI_CWindows_CSystem_CDiagnostics_CISystemDiagnosticInfo_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CSystem_CDiagnostics_CISystemDiagnosticInfoStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CSystem_CDiagnostics_CISystemDiagnosticInfoStatics_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CSystem_CDiagnostics_CISystemDiagnosticInfoStatics __x_ABI_CWindows_CSystem_CDiagnostics_CISystemDiagnosticInfoStatics;

#endif // ____x_ABI_CWindows_CSystem_CDiagnostics_CISystemDiagnosticInfoStatics_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CSystem_CDiagnostics_CISystemMemoryUsage_FWD_DEFINED__
#define ____x_ABI_CWindows_CSystem_CDiagnostics_CISystemMemoryUsage_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CSystem_CDiagnostics_CISystemMemoryUsage __x_ABI_CWindows_CSystem_CDiagnostics_CISystemMemoryUsage;

#endif // ____x_ABI_CWindows_CSystem_CDiagnostics_CISystemMemoryUsage_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CSystem_CDiagnostics_CISystemMemoryUsageReport_FWD_DEFINED__
#define ____x_ABI_CWindows_CSystem_CDiagnostics_CISystemMemoryUsageReport_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CSystem_CDiagnostics_CISystemMemoryUsageReport __x_ABI_CWindows_CSystem_CDiagnostics_CISystemMemoryUsageReport;

#endif // ____x_ABI_CWindows_CSystem_CDiagnostics_CISystemMemoryUsageReport_FWD_DEFINED__

// Parameterized interface forward declarations (C)

// Collection interface definitions

typedef enum __x_ABI_CWindows_CSystem_CDiagnostics_CDiagnosticActionState __x_ABI_CWindows_CSystem_CDiagnostics_CDiagnosticActionState;

typedef interface __x_ABI_C__FIAsyncOperationProgressHandler_2___x_ABI_CWindows__CSystem__CDiagnostics__CDiagnosticActionResult___x_ABI_CWindows__CSystem__CDiagnostics__CDiagnosticActionState __x_ABI_C__FIAsyncOperationProgressHandler_2___x_ABI_CWindows__CSystem__CDiagnostics__CDiagnosticActionResult___x_ABI_CWindows__CSystem__CDiagnostics__CDiagnosticActionState;

typedef interface __x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CSystem__CDiagnostics__CDiagnosticActionResult___x_ABI_CWindows__CSystem__CDiagnostics__CDiagnosticActionState __x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CSystem__CDiagnostics__CDiagnosticActionResult___x_ABI_CWindows__CSystem__CDiagnostics__CDiagnosticActionState;

#if !defined(____x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2___x_ABI_CWindows__CSystem__CDiagnostics__CDiagnosticActionResult___x_ABI_CWindows__CSystem__CDiagnostics__CDiagnosticActionState_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2___x_ABI_CWindows__CSystem__CDiagnostics__CDiagnosticActionResult___x_ABI_CWindows__CSystem__CDiagnostics__CDiagnosticActionState_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2___x_ABI_CWindows__CSystem__CDiagnostics__CDiagnosticActionResult___x_ABI_CWindows__CSystem__CDiagnostics__CDiagnosticActionState __x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2___x_ABI_CWindows__CSystem__CDiagnostics__CDiagnosticActionResult___x_ABI_CWindows__CSystem__CDiagnostics__CDiagnosticActionState;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2___x_ABI_CWindows__CSystem__CDiagnostics__CDiagnosticActionResult___x_ABI_CWindows__CSystem__CDiagnostics__CDiagnosticActionState;

    typedef struct __x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2___x_ABI_CWindows__CSystem__CDiagnostics__CDiagnosticActionResult___x_ABI_CWindows__CSystem__CDiagnostics__CDiagnosticActionStateVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2___x_ABI_CWindows__CSystem__CDiagnostics__CDiagnosticActionResult___x_ABI_CWindows__CSystem__CDiagnostics__CDiagnosticActionState* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2___x_ABI_CWindows__CSystem__CDiagnostics__CDiagnosticActionResult___x_ABI_CWindows__CSystem__CDiagnostics__CDiagnosticActionState* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2___x_ABI_CWindows__CSystem__CDiagnostics__CDiagnosticActionResult___x_ABI_CWindows__CSystem__CDiagnostics__CDiagnosticActionState* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2___x_ABI_CWindows__CSystem__CDiagnostics__CDiagnosticActionResult___x_ABI_CWindows__CSystem__CDiagnostics__CDiagnosticActionState* This,
        __x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CSystem__CDiagnostics__CDiagnosticActionResult___x_ABI_CWindows__CSystem__CDiagnostics__CDiagnosticActionState* asyncInfo,
        enum __x_ABI_CWindows_CFoundation_CAsyncStatus asyncStatus);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2___x_ABI_CWindows__CSystem__CDiagnostics__CDiagnosticActionResult___x_ABI_CWindows__CSystem__CDiagnostics__CDiagnosticActionStateVtbl;

    interface __x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2___x_ABI_CWindows__CSystem__CDiagnostics__CDiagnosticActionResult___x_ABI_CWindows__CSystem__CDiagnostics__CDiagnosticActionState
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2___x_ABI_CWindows__CSystem__CDiagnostics__CDiagnosticActionResult___x_ABI_CWindows__CSystem__CDiagnostics__CDiagnosticActionStateVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2___x_ABI_CWindows__CSystem__CDiagnostics__CDiagnosticActionResult___x_ABI_CWindows__CSystem__CDiagnostics__CDiagnosticActionState_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CSystem__CDiagnostics__CDiagnosticActionResult___x_ABI_CWindows__CSystem__CDiagnostics__CDiagnosticActionState_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CSystem__CDiagnostics__CDiagnosticActionResult___x_ABI_CWindows__CSystem__CDiagnostics__CDiagnosticActionState_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CSystem__CDiagnostics__CDiagnosticActionResult___x_ABI_CWindows__CSystem__CDiagnostics__CDiagnosticActionState __x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CSystem__CDiagnostics__CDiagnosticActionResult___x_ABI_CWindows__CSystem__CDiagnostics__CDiagnosticActionState;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CSystem__CDiagnostics__CDiagnosticActionResult___x_ABI_CWindows__CSystem__CDiagnostics__CDiagnosticActionState;

    typedef struct __x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CSystem__CDiagnostics__CDiagnosticActionResult___x_ABI_CWindows__CSystem__CDiagnostics__CDiagnosticActionStateVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CSystem__CDiagnostics__CDiagnosticActionResult___x_ABI_CWindows__CSystem__CDiagnostics__CDiagnosticActionState* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CSystem__CDiagnostics__CDiagnosticActionResult___x_ABI_CWindows__CSystem__CDiagnostics__CDiagnosticActionState* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CSystem__CDiagnostics__CDiagnosticActionResult___x_ABI_CWindows__CSystem__CDiagnostics__CDiagnosticActionState* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CSystem__CDiagnostics__CDiagnosticActionResult___x_ABI_CWindows__CSystem__CDiagnostics__CDiagnosticActionState* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CSystem__CDiagnostics__CDiagnosticActionResult___x_ABI_CWindows__CSystem__CDiagnostics__CDiagnosticActionState* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CSystem__CDiagnostics__CDiagnosticActionResult___x_ABI_CWindows__CSystem__CDiagnostics__CDiagnosticActionState* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* put_Progress)(__x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CSystem__CDiagnostics__CDiagnosticActionResult___x_ABI_CWindows__CSystem__CDiagnostics__CDiagnosticActionState* This,
        __x_ABI_C__FIAsyncOperationProgressHandler_2___x_ABI_CWindows__CSystem__CDiagnostics__CDiagnosticActionResult___x_ABI_CWindows__CSystem__CDiagnostics__CDiagnosticActionState* handler);
    HRESULT (STDMETHODCALLTYPE* get_Progress)(__x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CSystem__CDiagnostics__CDiagnosticActionResult___x_ABI_CWindows__CSystem__CDiagnostics__CDiagnosticActionState* This,
        __x_ABI_C__FIAsyncOperationProgressHandler_2___x_ABI_CWindows__CSystem__CDiagnostics__CDiagnosticActionResult___x_ABI_CWindows__CSystem__CDiagnostics__CDiagnosticActionState** result);
    HRESULT (STDMETHODCALLTYPE* put_Completed)(__x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CSystem__CDiagnostics__CDiagnosticActionResult___x_ABI_CWindows__CSystem__CDiagnostics__CDiagnosticActionState* This,
        __x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2___x_ABI_CWindows__CSystem__CDiagnostics__CDiagnosticActionResult___x_ABI_CWindows__CSystem__CDiagnostics__CDiagnosticActionState* handler);
    HRESULT (STDMETHODCALLTYPE* get_Completed)(__x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CSystem__CDiagnostics__CDiagnosticActionResult___x_ABI_CWindows__CSystem__CDiagnostics__CDiagnosticActionState* This,
        __x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2___x_ABI_CWindows__CSystem__CDiagnostics__CDiagnosticActionResult___x_ABI_CWindows__CSystem__CDiagnostics__CDiagnosticActionState** result);
    HRESULT (STDMETHODCALLTYPE* GetResults)(__x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CSystem__CDiagnostics__CDiagnosticActionResult___x_ABI_CWindows__CSystem__CDiagnostics__CDiagnosticActionState* This,
        __x_ABI_CWindows_CSystem_CDiagnostics_CIDiagnosticActionResult** result);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CSystem__CDiagnostics__CDiagnosticActionResult___x_ABI_CWindows__CSystem__CDiagnostics__CDiagnosticActionStateVtbl;

    interface __x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CSystem__CDiagnostics__CDiagnosticActionResult___x_ABI_CWindows__CSystem__CDiagnostics__CDiagnosticActionState
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CSystem__CDiagnostics__CDiagnosticActionResult___x_ABI_CWindows__CSystem__CDiagnostics__CDiagnosticActionStateVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CSystem__CDiagnostics__CDiagnosticActionResult___x_ABI_CWindows__CSystem__CDiagnostics__CDiagnosticActionState_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIAsyncOperationProgressHandler_2___x_ABI_CWindows__CSystem__CDiagnostics__CDiagnosticActionResult___x_ABI_CWindows__CSystem__CDiagnostics__CDiagnosticActionState_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperationProgressHandler_2___x_ABI_CWindows__CSystem__CDiagnostics__CDiagnosticActionResult___x_ABI_CWindows__CSystem__CDiagnostics__CDiagnosticActionState_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperationProgressHandler_2___x_ABI_CWindows__CSystem__CDiagnostics__CDiagnosticActionResult___x_ABI_CWindows__CSystem__CDiagnostics__CDiagnosticActionState __x_ABI_C__FIAsyncOperationProgressHandler_2___x_ABI_CWindows__CSystem__CDiagnostics__CDiagnosticActionResult___x_ABI_CWindows__CSystem__CDiagnostics__CDiagnosticActionState;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperationProgressHandler_2___x_ABI_CWindows__CSystem__CDiagnostics__CDiagnosticActionResult___x_ABI_CWindows__CSystem__CDiagnostics__CDiagnosticActionState;

    typedef struct __x_ABI_C__FIAsyncOperationProgressHandler_2___x_ABI_CWindows__CSystem__CDiagnostics__CDiagnosticActionResult___x_ABI_CWindows__CSystem__CDiagnostics__CDiagnosticActionStateVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperationProgressHandler_2___x_ABI_CWindows__CSystem__CDiagnostics__CDiagnosticActionResult___x_ABI_CWindows__CSystem__CDiagnostics__CDiagnosticActionState* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperationProgressHandler_2___x_ABI_CWindows__CSystem__CDiagnostics__CDiagnosticActionResult___x_ABI_CWindows__CSystem__CDiagnostics__CDiagnosticActionState* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperationProgressHandler_2___x_ABI_CWindows__CSystem__CDiagnostics__CDiagnosticActionResult___x_ABI_CWindows__CSystem__CDiagnostics__CDiagnosticActionState* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FIAsyncOperationProgressHandler_2___x_ABI_CWindows__CSystem__CDiagnostics__CDiagnosticActionResult___x_ABI_CWindows__CSystem__CDiagnostics__CDiagnosticActionState* This,
        __x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CSystem__CDiagnostics__CDiagnosticActionResult___x_ABI_CWindows__CSystem__CDiagnostics__CDiagnosticActionState* asyncInfo,
        enum __x_ABI_CWindows_CSystem_CDiagnostics_CDiagnosticActionState progressInfo);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperationProgressHandler_2___x_ABI_CWindows__CSystem__CDiagnostics__CDiagnosticActionResult___x_ABI_CWindows__CSystem__CDiagnostics__CDiagnosticActionStateVtbl;

    interface __x_ABI_C__FIAsyncOperationProgressHandler_2___x_ABI_CWindows__CSystem__CDiagnostics__CDiagnosticActionResult___x_ABI_CWindows__CSystem__CDiagnostics__CDiagnosticActionState
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperationProgressHandler_2___x_ABI_CWindows__CSystem__CDiagnostics__CDiagnosticActionResult___x_ABI_CWindows__CSystem__CDiagnostics__CDiagnosticActionStateVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperationProgressHandler_2___x_ABI_CWindows__CSystem__CDiagnostics__CDiagnosticActionResult___x_ABI_CWindows__CSystem__CDiagnostics__CDiagnosticActionState_INTERFACE_DEFINED__
    
#ifndef ____x_ABI_CWindows_CSystem_CIAppDiagnosticInfo_FWD_DEFINED__
#define ____x_ABI_CWindows_CSystem_CIAppDiagnosticInfo_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CSystem_CIAppDiagnosticInfo __x_ABI_CWindows_CSystem_CIAppDiagnosticInfo;

#endif // ____x_ABI_CWindows_CSystem_CIAppDiagnosticInfo_FWD_DEFINED__

#if !defined(____x_ABI_C__FIIterator_1___x_ABI_CWindows__CSystem__CAppDiagnosticInfo_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CSystem__CAppDiagnosticInfo_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CSystem__CAppDiagnosticInfo __x_ABI_C__FIIterator_1___x_ABI_CWindows__CSystem__CAppDiagnosticInfo;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterator_1___x_ABI_CWindows__CSystem__CAppDiagnosticInfo;

    typedef struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CSystem__CAppDiagnosticInfoVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CSystem__CAppDiagnosticInfo* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CSystem__CAppDiagnosticInfo* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CSystem__CAppDiagnosticInfo* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CSystem__CAppDiagnosticInfo* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CSystem__CAppDiagnosticInfo* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CSystem__CAppDiagnosticInfo* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Current)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CSystem__CAppDiagnosticInfo* This,
        __x_ABI_CWindows_CSystem_CIAppDiagnosticInfo** result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CSystem__CAppDiagnosticInfo* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CSystem__CAppDiagnosticInfo* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CSystem__CAppDiagnosticInfo* This,
        UINT32 itemsLength,
        __x_ABI_CWindows_CSystem_CIAppDiagnosticInfo** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIIterator_1___x_ABI_CWindows__CSystem__CAppDiagnosticInfoVtbl;

    interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CSystem__CAppDiagnosticInfo
    {
        CONST_VTBL struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CSystem__CAppDiagnosticInfoVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CSystem__CAppDiagnosticInfo_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterable_1___x_ABI_CWindows__CSystem__CAppDiagnosticInfo_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CSystem__CAppDiagnosticInfo_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CSystem__CAppDiagnosticInfo __x_ABI_C__FIIterable_1___x_ABI_CWindows__CSystem__CAppDiagnosticInfo;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterable_1___x_ABI_CWindows__CSystem__CAppDiagnosticInfo;

    typedef struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CSystem__CAppDiagnosticInfoVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CSystem__CAppDiagnosticInfo* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CSystem__CAppDiagnosticInfo* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CSystem__CAppDiagnosticInfo* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CSystem__CAppDiagnosticInfo* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CSystem__CAppDiagnosticInfo* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CSystem__CAppDiagnosticInfo* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* First)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CSystem__CAppDiagnosticInfo* This,
        __x_ABI_C__FIIterator_1___x_ABI_CWindows__CSystem__CAppDiagnosticInfo** result);

        END_INTERFACE
    } __x_ABI_C__FIIterable_1___x_ABI_CWindows__CSystem__CAppDiagnosticInfoVtbl;

    interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CSystem__CAppDiagnosticInfo
    {
        CONST_VTBL struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CSystem__CAppDiagnosticInfoVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CSystem__CAppDiagnosticInfo_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterator_1___x_ABI_CWindows__CSystem__CDiagnostics__CProcessDiagnosticInfo_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CSystem__CDiagnostics__CProcessDiagnosticInfo_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CSystem__CDiagnostics__CProcessDiagnosticInfo __x_ABI_C__FIIterator_1___x_ABI_CWindows__CSystem__CDiagnostics__CProcessDiagnosticInfo;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterator_1___x_ABI_CWindows__CSystem__CDiagnostics__CProcessDiagnosticInfo;

    typedef struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CSystem__CDiagnostics__CProcessDiagnosticInfoVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CSystem__CDiagnostics__CProcessDiagnosticInfo* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CSystem__CDiagnostics__CProcessDiagnosticInfo* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CSystem__CDiagnostics__CProcessDiagnosticInfo* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CSystem__CDiagnostics__CProcessDiagnosticInfo* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CSystem__CDiagnostics__CProcessDiagnosticInfo* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CSystem__CDiagnostics__CProcessDiagnosticInfo* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Current)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CSystem__CDiagnostics__CProcessDiagnosticInfo* This,
        __x_ABI_CWindows_CSystem_CDiagnostics_CIProcessDiagnosticInfo** result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CSystem__CDiagnostics__CProcessDiagnosticInfo* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CSystem__CDiagnostics__CProcessDiagnosticInfo* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CSystem__CDiagnostics__CProcessDiagnosticInfo* This,
        UINT32 itemsLength,
        __x_ABI_CWindows_CSystem_CDiagnostics_CIProcessDiagnosticInfo** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIIterator_1___x_ABI_CWindows__CSystem__CDiagnostics__CProcessDiagnosticInfoVtbl;

    interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CSystem__CDiagnostics__CProcessDiagnosticInfo
    {
        CONST_VTBL struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CSystem__CDiagnostics__CProcessDiagnosticInfoVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CSystem__CDiagnostics__CProcessDiagnosticInfo_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterable_1___x_ABI_CWindows__CSystem__CDiagnostics__CProcessDiagnosticInfo_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CSystem__CDiagnostics__CProcessDiagnosticInfo_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CSystem__CDiagnostics__CProcessDiagnosticInfo __x_ABI_C__FIIterable_1___x_ABI_CWindows__CSystem__CDiagnostics__CProcessDiagnosticInfo;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterable_1___x_ABI_CWindows__CSystem__CDiagnostics__CProcessDiagnosticInfo;

    typedef struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CSystem__CDiagnostics__CProcessDiagnosticInfoVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CSystem__CDiagnostics__CProcessDiagnosticInfo* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CSystem__CDiagnostics__CProcessDiagnosticInfo* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CSystem__CDiagnostics__CProcessDiagnosticInfo* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CSystem__CDiagnostics__CProcessDiagnosticInfo* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CSystem__CDiagnostics__CProcessDiagnosticInfo* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CSystem__CDiagnostics__CProcessDiagnosticInfo* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* First)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CSystem__CDiagnostics__CProcessDiagnosticInfo* This,
        __x_ABI_C__FIIterator_1___x_ABI_CWindows__CSystem__CDiagnostics__CProcessDiagnosticInfo** result);

        END_INTERFACE
    } __x_ABI_C__FIIterable_1___x_ABI_CWindows__CSystem__CDiagnostics__CProcessDiagnosticInfoVtbl;

    interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CSystem__CDiagnostics__CProcessDiagnosticInfo
    {
        CONST_VTBL struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CSystem__CDiagnostics__CProcessDiagnosticInfoVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CSystem__CDiagnostics__CProcessDiagnosticInfo_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CAppDiagnosticInfo_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CAppDiagnosticInfo_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CAppDiagnosticInfo __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CAppDiagnosticInfo;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CAppDiagnosticInfo;

    typedef struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CAppDiagnosticInfoVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CAppDiagnosticInfo* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CAppDiagnosticInfo* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CAppDiagnosticInfo* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CAppDiagnosticInfo* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CAppDiagnosticInfo* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CAppDiagnosticInfo* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CAppDiagnosticInfo* This,
        UINT32 index,
        __x_ABI_CWindows_CSystem_CIAppDiagnosticInfo** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CAppDiagnosticInfo* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CAppDiagnosticInfo* This,
        __x_ABI_CWindows_CSystem_CIAppDiagnosticInfo* value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CAppDiagnosticInfo* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        __x_ABI_CWindows_CSystem_CIAppDiagnosticInfo** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CAppDiagnosticInfoVtbl;

    interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CAppDiagnosticInfo
    {
        CONST_VTBL struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CAppDiagnosticInfoVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CAppDiagnosticInfo_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CDiagnostics__CProcessDiagnosticInfo_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CDiagnostics__CProcessDiagnosticInfo_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CDiagnostics__CProcessDiagnosticInfo __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CDiagnostics__CProcessDiagnosticInfo;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CDiagnostics__CProcessDiagnosticInfo;

    typedef struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CDiagnostics__CProcessDiagnosticInfoVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CDiagnostics__CProcessDiagnosticInfo* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CDiagnostics__CProcessDiagnosticInfo* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CDiagnostics__CProcessDiagnosticInfo* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CDiagnostics__CProcessDiagnosticInfo* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CDiagnostics__CProcessDiagnosticInfo* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CDiagnostics__CProcessDiagnosticInfo* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CDiagnostics__CProcessDiagnosticInfo* This,
        UINT32 index,
        __x_ABI_CWindows_CSystem_CDiagnostics_CIProcessDiagnosticInfo** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CDiagnostics__CProcessDiagnosticInfo* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CDiagnostics__CProcessDiagnosticInfo* This,
        __x_ABI_CWindows_CSystem_CDiagnostics_CIProcessDiagnosticInfo* value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CDiagnostics__CProcessDiagnosticInfo* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        __x_ABI_CWindows_CSystem_CDiagnostics_CIProcessDiagnosticInfo** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CDiagnostics__CProcessDiagnosticInfoVtbl;

    interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CDiagnostics__CProcessDiagnosticInfo
    {
        CONST_VTBL struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CDiagnostics__CProcessDiagnosticInfoVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CDiagnostics__CProcessDiagnosticInfo_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVector_1___x_ABI_CWindows__CSystem__CAppDiagnosticInfo_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVector_1___x_ABI_CWindows__CSystem__CAppDiagnosticInfo_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVector_1___x_ABI_CWindows__CSystem__CAppDiagnosticInfo __x_ABI_C__FIVector_1___x_ABI_CWindows__CSystem__CAppDiagnosticInfo;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVector_1___x_ABI_CWindows__CSystem__CAppDiagnosticInfo;

    typedef struct __x_ABI_C__FIVector_1___x_ABI_CWindows__CSystem__CAppDiagnosticInfoVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CSystem__CAppDiagnosticInfo* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CSystem__CAppDiagnosticInfo* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CSystem__CAppDiagnosticInfo* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CSystem__CAppDiagnosticInfo* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CSystem__CAppDiagnosticInfo* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CSystem__CAppDiagnosticInfo* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CSystem__CAppDiagnosticInfo* This,
        UINT32 index,
        __x_ABI_CWindows_CSystem_CIAppDiagnosticInfo** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CSystem__CAppDiagnosticInfo* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* GetView)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CSystem__CAppDiagnosticInfo* This,
        __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CAppDiagnosticInfo** result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CSystem__CAppDiagnosticInfo* This,
        __x_ABI_CWindows_CSystem_CIAppDiagnosticInfo* value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* SetAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CSystem__CAppDiagnosticInfo* This,
        UINT32 index,
        __x_ABI_CWindows_CSystem_CIAppDiagnosticInfo* value);
    HRESULT (STDMETHODCALLTYPE* InsertAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CSystem__CAppDiagnosticInfo* This,
        UINT32 index,
        __x_ABI_CWindows_CSystem_CIAppDiagnosticInfo* value);
    HRESULT (STDMETHODCALLTYPE* RemoveAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CSystem__CAppDiagnosticInfo* This,
        UINT32 index);
    HRESULT (STDMETHODCALLTYPE* Append)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CSystem__CAppDiagnosticInfo* This,
        __x_ABI_CWindows_CSystem_CIAppDiagnosticInfo* value);
    HRESULT (STDMETHODCALLTYPE* RemoveAtEnd)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CSystem__CAppDiagnosticInfo* This);
    HRESULT (STDMETHODCALLTYPE* Clear)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CSystem__CAppDiagnosticInfo* This);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CSystem__CAppDiagnosticInfo* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        __x_ABI_CWindows_CSystem_CIAppDiagnosticInfo** items,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* ReplaceAll)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CSystem__CAppDiagnosticInfo* This,
        UINT32 itemsLength,
        __x_ABI_CWindows_CSystem_CIAppDiagnosticInfo** items);

        END_INTERFACE
    } __x_ABI_C__FIVector_1___x_ABI_CWindows__CSystem__CAppDiagnosticInfoVtbl;

    interface __x_ABI_C__FIVector_1___x_ABI_CWindows__CSystem__CAppDiagnosticInfo
    {
        CONST_VTBL struct __x_ABI_C__FIVector_1___x_ABI_CWindows__CSystem__CAppDiagnosticInfoVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVector_1___x_ABI_CWindows__CSystem__CAppDiagnosticInfo_INTERFACE_DEFINED__
    
#ifndef ____x_ABI_CWindows_CData_CJson_CIJsonObject_FWD_DEFINED__
#define ____x_ABI_CWindows_CData_CJson_CIJsonObject_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CData_CJson_CIJsonObject __x_ABI_CWindows_CData_CJson_CIJsonObject;

#endif // ____x_ABI_CWindows_CData_CJson_CIJsonObject_FWD_DEFINED__

typedef enum __x_ABI_CWindows_CFoundation_CAsyncStatus __x_ABI_CWindows_CFoundation_CAsyncStatus;

#ifndef ____x_ABI_CWindows_CFoundation_CCollections_CIPropertySet_FWD_DEFINED__
#define ____x_ABI_CWindows_CFoundation_CCollections_CIPropertySet_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CFoundation_CCollections_CIPropertySet __x_ABI_CWindows_CFoundation_CCollections_CIPropertySet;

#endif // ____x_ABI_CWindows_CFoundation_CCollections_CIPropertySet_FWD_DEFINED__

typedef struct __x_ABI_CWindows_CFoundation_CDateTime __x_ABI_CWindows_CFoundation_CDateTime;

#ifndef ____x_ABI_CWindows_CFoundation_CIAsyncInfo_FWD_DEFINED__
#define ____x_ABI_CWindows_CFoundation_CIAsyncInfo_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CFoundation_CIAsyncInfo __x_ABI_CWindows_CFoundation_CIAsyncInfo;

#endif // ____x_ABI_CWindows_CFoundation_CIAsyncInfo_FWD_DEFINED__

typedef struct __x_ABI_CWindows_CFoundation_CTimeSpan __x_ABI_CWindows_CFoundation_CTimeSpan;

#ifndef ____x_ABI_CWindows_CSystem_CIUser_FWD_DEFINED__
#define ____x_ABI_CWindows_CSystem_CIUser_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CSystem_CIUser __x_ABI_CWindows_CSystem_CIUser;

#endif // ____x_ABI_CWindows_CSystem_CIUser_FWD_DEFINED__

enum __x_ABI_CWindows_CSystem_CDiagnostics_CDiagnosticActionState
    {
        __x_ABI_CWindows_CSystem_CDiagnostics_CDiagnosticActionState_Initializing = 0,
    __x_ABI_CWindows_CSystem_CDiagnostics_CDiagnosticActionState_Downloading = 1,
    __x_ABI_CWindows_CSystem_CDiagnostics_CDiagnosticActionState_VerifyingTrust = 2,
    __x_ABI_CWindows_CSystem_CDiagnostics_CDiagnosticActionState_Detecting = 3,
    __x_ABI_CWindows_CSystem_CDiagnostics_CDiagnosticActionState_Resolving = 4,
    __x_ABI_CWindows_CSystem_CDiagnostics_CDiagnosticActionState_VerifyingResolution = 5,
};

#if !defined(____x_ABI_CWindows_CSystem_CDiagnostics_CIDiagnosticActionResult_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CSystem_CDiagnostics_CIDiagnosticActionResult_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CSystem_CDiagnostics_CIDiagnosticActionResultVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CSystem_CDiagnostics_CIDiagnosticActionResult* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CSystem_CDiagnostics_CIDiagnosticActionResult* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CSystem_CDiagnostics_CIDiagnosticActionResult* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CSystem_CDiagnostics_CIDiagnosticActionResult* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CSystem_CDiagnostics_CIDiagnosticActionResult* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CSystem_CDiagnostics_CIDiagnosticActionResult* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_ExtendedError)(__x_ABI_CWindows_CSystem_CDiagnostics_CIDiagnosticActionResult* This,
        HRESULT* value);
    HRESULT (STDMETHODCALLTYPE* get_Results)(__x_ABI_CWindows_CSystem_CDiagnostics_CIDiagnosticActionResult* This,
        __x_ABI_CWindows_CFoundation_CCollections_CIPropertySet** value);

        END_INTERFACE
    } __x_ABI_CWindows_CSystem_CDiagnostics_CIDiagnosticActionResultVtbl;

    interface __x_ABI_CWindows_CSystem_CDiagnostics_CIDiagnosticActionResult
    {
        CONST_VTBL struct __x_ABI_CWindows_CSystem_CDiagnostics_CIDiagnosticActionResultVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CSystem_CDiagnostics_CIDiagnosticActionResult;
#endif /* !defined(____x_ABI_CWindows_CSystem_CDiagnostics_CIDiagnosticActionResult_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CSystem_CDiagnostics_CIDiagnosticInvoker_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CSystem_CDiagnostics_CIDiagnosticInvoker_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CSystem_CDiagnostics_CIDiagnosticInvokerVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CSystem_CDiagnostics_CIDiagnosticInvoker* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CSystem_CDiagnostics_CIDiagnosticInvoker* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CSystem_CDiagnostics_CIDiagnosticInvoker* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CSystem_CDiagnostics_CIDiagnosticInvoker* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CSystem_CDiagnostics_CIDiagnosticInvoker* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CSystem_CDiagnostics_CIDiagnosticInvoker* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* RunDiagnosticActionAsync)(__x_ABI_CWindows_CSystem_CDiagnostics_CIDiagnosticInvoker* This,
        __x_ABI_CWindows_CData_CJson_CIJsonObject* context,
        __x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CSystem__CDiagnostics__CDiagnosticActionResult___x_ABI_CWindows__CSystem__CDiagnostics__CDiagnosticActionState** operation);

        END_INTERFACE
    } __x_ABI_CWindows_CSystem_CDiagnostics_CIDiagnosticInvokerVtbl;

    interface __x_ABI_CWindows_CSystem_CDiagnostics_CIDiagnosticInvoker
    {
        CONST_VTBL struct __x_ABI_CWindows_CSystem_CDiagnostics_CIDiagnosticInvokerVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CSystem_CDiagnostics_CIDiagnosticInvoker;
#endif /* !defined(____x_ABI_CWindows_CSystem_CDiagnostics_CIDiagnosticInvoker_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CSystem_CDiagnostics_CIDiagnosticInvoker2_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CSystem_CDiagnostics_CIDiagnosticInvoker2_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CSystem_CDiagnostics_CIDiagnosticInvoker2Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CSystem_CDiagnostics_CIDiagnosticInvoker2* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CSystem_CDiagnostics_CIDiagnosticInvoker2* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CSystem_CDiagnostics_CIDiagnosticInvoker2* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CSystem_CDiagnostics_CIDiagnosticInvoker2* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CSystem_CDiagnostics_CIDiagnosticInvoker2* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CSystem_CDiagnostics_CIDiagnosticInvoker2* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* RunDiagnosticActionFromStringAsync)(__x_ABI_CWindows_CSystem_CDiagnostics_CIDiagnosticInvoker2* This,
        HSTRING context,
        __x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CSystem__CDiagnostics__CDiagnosticActionResult___x_ABI_CWindows__CSystem__CDiagnostics__CDiagnosticActionState** operation);

        END_INTERFACE
    } __x_ABI_CWindows_CSystem_CDiagnostics_CIDiagnosticInvoker2Vtbl;

    interface __x_ABI_CWindows_CSystem_CDiagnostics_CIDiagnosticInvoker2
    {
        CONST_VTBL struct __x_ABI_CWindows_CSystem_CDiagnostics_CIDiagnosticInvoker2Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CSystem_CDiagnostics_CIDiagnosticInvoker2;
#endif /* !defined(____x_ABI_CWindows_CSystem_CDiagnostics_CIDiagnosticInvoker2_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CSystem_CDiagnostics_CIDiagnosticInvokerStatics_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CSystem_CDiagnostics_CIDiagnosticInvokerStatics_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CSystem_CDiagnostics_CIDiagnosticInvokerStaticsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CSystem_CDiagnostics_CIDiagnosticInvokerStatics* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CSystem_CDiagnostics_CIDiagnosticInvokerStatics* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CSystem_CDiagnostics_CIDiagnosticInvokerStatics* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CSystem_CDiagnostics_CIDiagnosticInvokerStatics* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CSystem_CDiagnostics_CIDiagnosticInvokerStatics* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CSystem_CDiagnostics_CIDiagnosticInvokerStatics* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetDefault)(__x_ABI_CWindows_CSystem_CDiagnostics_CIDiagnosticInvokerStatics* This,
        __x_ABI_CWindows_CSystem_CDiagnostics_CIDiagnosticInvoker** result);
    HRESULT (STDMETHODCALLTYPE* GetForUser)(__x_ABI_CWindows_CSystem_CDiagnostics_CIDiagnosticInvokerStatics* This,
        __x_ABI_CWindows_CSystem_CIUser* user,
        __x_ABI_CWindows_CSystem_CDiagnostics_CIDiagnosticInvoker** result);
    HRESULT (STDMETHODCALLTYPE* get_IsSupported)(__x_ABI_CWindows_CSystem_CDiagnostics_CIDiagnosticInvokerStatics* This,
        boolean* value);

        END_INTERFACE
    } __x_ABI_CWindows_CSystem_CDiagnostics_CIDiagnosticInvokerStaticsVtbl;

    interface __x_ABI_CWindows_CSystem_CDiagnostics_CIDiagnosticInvokerStatics
    {
        CONST_VTBL struct __x_ABI_CWindows_CSystem_CDiagnostics_CIDiagnosticInvokerStaticsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CSystem_CDiagnostics_CIDiagnosticInvokerStatics;
#endif /* !defined(____x_ABI_CWindows_CSystem_CDiagnostics_CIDiagnosticInvokerStatics_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CSystem_CDiagnostics_CIProcessCpuUsage_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CSystem_CDiagnostics_CIProcessCpuUsage_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CSystem_CDiagnostics_CIProcessCpuUsageVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CSystem_CDiagnostics_CIProcessCpuUsage* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CSystem_CDiagnostics_CIProcessCpuUsage* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CSystem_CDiagnostics_CIProcessCpuUsage* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CSystem_CDiagnostics_CIProcessCpuUsage* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CSystem_CDiagnostics_CIProcessCpuUsage* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CSystem_CDiagnostics_CIProcessCpuUsage* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetReport)(__x_ABI_CWindows_CSystem_CDiagnostics_CIProcessCpuUsage* This,
        __x_ABI_CWindows_CSystem_CDiagnostics_CIProcessCpuUsageReport** value);

        END_INTERFACE
    } __x_ABI_CWindows_CSystem_CDiagnostics_CIProcessCpuUsageVtbl;

    interface __x_ABI_CWindows_CSystem_CDiagnostics_CIProcessCpuUsage
    {
        CONST_VTBL struct __x_ABI_CWindows_CSystem_CDiagnostics_CIProcessCpuUsageVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CSystem_CDiagnostics_CIProcessCpuUsage;
#endif /* !defined(____x_ABI_CWindows_CSystem_CDiagnostics_CIProcessCpuUsage_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CSystem_CDiagnostics_CIProcessCpuUsageReport_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CSystem_CDiagnostics_CIProcessCpuUsageReport_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CSystem_CDiagnostics_CIProcessCpuUsageReportVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CSystem_CDiagnostics_CIProcessCpuUsageReport* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CSystem_CDiagnostics_CIProcessCpuUsageReport* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CSystem_CDiagnostics_CIProcessCpuUsageReport* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CSystem_CDiagnostics_CIProcessCpuUsageReport* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CSystem_CDiagnostics_CIProcessCpuUsageReport* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CSystem_CDiagnostics_CIProcessCpuUsageReport* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_KernelTime)(__x_ABI_CWindows_CSystem_CDiagnostics_CIProcessCpuUsageReport* This,
        struct __x_ABI_CWindows_CFoundation_CTimeSpan* value);
    HRESULT (STDMETHODCALLTYPE* get_UserTime)(__x_ABI_CWindows_CSystem_CDiagnostics_CIProcessCpuUsageReport* This,
        struct __x_ABI_CWindows_CFoundation_CTimeSpan* value);

        END_INTERFACE
    } __x_ABI_CWindows_CSystem_CDiagnostics_CIProcessCpuUsageReportVtbl;

    interface __x_ABI_CWindows_CSystem_CDiagnostics_CIProcessCpuUsageReport
    {
        CONST_VTBL struct __x_ABI_CWindows_CSystem_CDiagnostics_CIProcessCpuUsageReportVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CSystem_CDiagnostics_CIProcessCpuUsageReport;
#endif /* !defined(____x_ABI_CWindows_CSystem_CDiagnostics_CIProcessCpuUsageReport_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CSystem_CDiagnostics_CIProcessDiagnosticInfo_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CSystem_CDiagnostics_CIProcessDiagnosticInfo_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CSystem_CDiagnostics_CIProcessDiagnosticInfoVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CSystem_CDiagnostics_CIProcessDiagnosticInfo* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CSystem_CDiagnostics_CIProcessDiagnosticInfo* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CSystem_CDiagnostics_CIProcessDiagnosticInfo* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CSystem_CDiagnostics_CIProcessDiagnosticInfo* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CSystem_CDiagnostics_CIProcessDiagnosticInfo* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CSystem_CDiagnostics_CIProcessDiagnosticInfo* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_ProcessId)(__x_ABI_CWindows_CSystem_CDiagnostics_CIProcessDiagnosticInfo* This,
        UINT32* value);
    HRESULT (STDMETHODCALLTYPE* get_ExecutableFileName)(__x_ABI_CWindows_CSystem_CDiagnostics_CIProcessDiagnosticInfo* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_Parent)(__x_ABI_CWindows_CSystem_CDiagnostics_CIProcessDiagnosticInfo* This,
        __x_ABI_CWindows_CSystem_CDiagnostics_CIProcessDiagnosticInfo** value);
    HRESULT (STDMETHODCALLTYPE* get_ProcessStartTime)(__x_ABI_CWindows_CSystem_CDiagnostics_CIProcessDiagnosticInfo* This,
        struct __x_ABI_CWindows_CFoundation_CDateTime* value);
    HRESULT (STDMETHODCALLTYPE* get_DiskUsage)(__x_ABI_CWindows_CSystem_CDiagnostics_CIProcessDiagnosticInfo* This,
        __x_ABI_CWindows_CSystem_CDiagnostics_CIProcessDiskUsage** value);
    HRESULT (STDMETHODCALLTYPE* get_MemoryUsage)(__x_ABI_CWindows_CSystem_CDiagnostics_CIProcessDiagnosticInfo* This,
        __x_ABI_CWindows_CSystem_CDiagnostics_CIProcessMemoryUsage** value);
    HRESULT (STDMETHODCALLTYPE* get_CpuUsage)(__x_ABI_CWindows_CSystem_CDiagnostics_CIProcessDiagnosticInfo* This,
        __x_ABI_CWindows_CSystem_CDiagnostics_CIProcessCpuUsage** value);

        END_INTERFACE
    } __x_ABI_CWindows_CSystem_CDiagnostics_CIProcessDiagnosticInfoVtbl;

    interface __x_ABI_CWindows_CSystem_CDiagnostics_CIProcessDiagnosticInfo
    {
        CONST_VTBL struct __x_ABI_CWindows_CSystem_CDiagnostics_CIProcessDiagnosticInfoVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CSystem_CDiagnostics_CIProcessDiagnosticInfo;
#endif /* !defined(____x_ABI_CWindows_CSystem_CDiagnostics_CIProcessDiagnosticInfo_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CSystem_CDiagnostics_CIProcessDiagnosticInfo2_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CSystem_CDiagnostics_CIProcessDiagnosticInfo2_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CSystem_CDiagnostics_CIProcessDiagnosticInfo2Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CSystem_CDiagnostics_CIProcessDiagnosticInfo2* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CSystem_CDiagnostics_CIProcessDiagnosticInfo2* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CSystem_CDiagnostics_CIProcessDiagnosticInfo2* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CSystem_CDiagnostics_CIProcessDiagnosticInfo2* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CSystem_CDiagnostics_CIProcessDiagnosticInfo2* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CSystem_CDiagnostics_CIProcessDiagnosticInfo2* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAppDiagnosticInfos)(__x_ABI_CWindows_CSystem_CDiagnostics_CIProcessDiagnosticInfo2* This,
        __x_ABI_C__FIVector_1___x_ABI_CWindows__CSystem__CAppDiagnosticInfo** result);
    HRESULT (STDMETHODCALLTYPE* get_IsPackaged)(__x_ABI_CWindows_CSystem_CDiagnostics_CIProcessDiagnosticInfo2* This,
        boolean* value);

        END_INTERFACE
    } __x_ABI_CWindows_CSystem_CDiagnostics_CIProcessDiagnosticInfo2Vtbl;

    interface __x_ABI_CWindows_CSystem_CDiagnostics_CIProcessDiagnosticInfo2
    {
        CONST_VTBL struct __x_ABI_CWindows_CSystem_CDiagnostics_CIProcessDiagnosticInfo2Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CSystem_CDiagnostics_CIProcessDiagnosticInfo2;
#endif /* !defined(____x_ABI_CWindows_CSystem_CDiagnostics_CIProcessDiagnosticInfo2_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CSystem_CDiagnostics_CIProcessDiagnosticInfoStatics_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CSystem_CDiagnostics_CIProcessDiagnosticInfoStatics_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CSystem_CDiagnostics_CIProcessDiagnosticInfoStaticsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CSystem_CDiagnostics_CIProcessDiagnosticInfoStatics* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CSystem_CDiagnostics_CIProcessDiagnosticInfoStatics* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CSystem_CDiagnostics_CIProcessDiagnosticInfoStatics* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CSystem_CDiagnostics_CIProcessDiagnosticInfoStatics* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CSystem_CDiagnostics_CIProcessDiagnosticInfoStatics* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CSystem_CDiagnostics_CIProcessDiagnosticInfoStatics* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetForProcesses)(__x_ABI_CWindows_CSystem_CDiagnostics_CIProcessDiagnosticInfoStatics* This,
        __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CDiagnostics__CProcessDiagnosticInfo** processes);
    HRESULT (STDMETHODCALLTYPE* GetForCurrentProcess)(__x_ABI_CWindows_CSystem_CDiagnostics_CIProcessDiagnosticInfoStatics* This,
        __x_ABI_CWindows_CSystem_CDiagnostics_CIProcessDiagnosticInfo** processes);

        END_INTERFACE
    } __x_ABI_CWindows_CSystem_CDiagnostics_CIProcessDiagnosticInfoStaticsVtbl;

    interface __x_ABI_CWindows_CSystem_CDiagnostics_CIProcessDiagnosticInfoStatics
    {
        CONST_VTBL struct __x_ABI_CWindows_CSystem_CDiagnostics_CIProcessDiagnosticInfoStaticsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CSystem_CDiagnostics_CIProcessDiagnosticInfoStatics;
#endif /* !defined(____x_ABI_CWindows_CSystem_CDiagnostics_CIProcessDiagnosticInfoStatics_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CSystem_CDiagnostics_CIProcessDiagnosticInfoStatics2_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CSystem_CDiagnostics_CIProcessDiagnosticInfoStatics2_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CSystem_CDiagnostics_CIProcessDiagnosticInfoStatics2Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CSystem_CDiagnostics_CIProcessDiagnosticInfoStatics2* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CSystem_CDiagnostics_CIProcessDiagnosticInfoStatics2* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CSystem_CDiagnostics_CIProcessDiagnosticInfoStatics2* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CSystem_CDiagnostics_CIProcessDiagnosticInfoStatics2* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CSystem_CDiagnostics_CIProcessDiagnosticInfoStatics2* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CSystem_CDiagnostics_CIProcessDiagnosticInfoStatics2* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* TryGetForProcessId)(__x_ABI_CWindows_CSystem_CDiagnostics_CIProcessDiagnosticInfoStatics2* This,
        UINT32 processId,
        __x_ABI_CWindows_CSystem_CDiagnostics_CIProcessDiagnosticInfo** result);

        END_INTERFACE
    } __x_ABI_CWindows_CSystem_CDiagnostics_CIProcessDiagnosticInfoStatics2Vtbl;

    interface __x_ABI_CWindows_CSystem_CDiagnostics_CIProcessDiagnosticInfoStatics2
    {
        CONST_VTBL struct __x_ABI_CWindows_CSystem_CDiagnostics_CIProcessDiagnosticInfoStatics2Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CSystem_CDiagnostics_CIProcessDiagnosticInfoStatics2;
#endif /* !defined(____x_ABI_CWindows_CSystem_CDiagnostics_CIProcessDiagnosticInfoStatics2_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CSystem_CDiagnostics_CIProcessDiskUsage_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CSystem_CDiagnostics_CIProcessDiskUsage_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CSystem_CDiagnostics_CIProcessDiskUsageVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CSystem_CDiagnostics_CIProcessDiskUsage* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CSystem_CDiagnostics_CIProcessDiskUsage* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CSystem_CDiagnostics_CIProcessDiskUsage* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CSystem_CDiagnostics_CIProcessDiskUsage* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CSystem_CDiagnostics_CIProcessDiskUsage* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CSystem_CDiagnostics_CIProcessDiskUsage* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetReport)(__x_ABI_CWindows_CSystem_CDiagnostics_CIProcessDiskUsage* This,
        __x_ABI_CWindows_CSystem_CDiagnostics_CIProcessDiskUsageReport** value);

        END_INTERFACE
    } __x_ABI_CWindows_CSystem_CDiagnostics_CIProcessDiskUsageVtbl;

    interface __x_ABI_CWindows_CSystem_CDiagnostics_CIProcessDiskUsage
    {
        CONST_VTBL struct __x_ABI_CWindows_CSystem_CDiagnostics_CIProcessDiskUsageVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CSystem_CDiagnostics_CIProcessDiskUsage;
#endif /* !defined(____x_ABI_CWindows_CSystem_CDiagnostics_CIProcessDiskUsage_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CSystem_CDiagnostics_CIProcessDiskUsageReport_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CSystem_CDiagnostics_CIProcessDiskUsageReport_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CSystem_CDiagnostics_CIProcessDiskUsageReportVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CSystem_CDiagnostics_CIProcessDiskUsageReport* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CSystem_CDiagnostics_CIProcessDiskUsageReport* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CSystem_CDiagnostics_CIProcessDiskUsageReport* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CSystem_CDiagnostics_CIProcessDiskUsageReport* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CSystem_CDiagnostics_CIProcessDiskUsageReport* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CSystem_CDiagnostics_CIProcessDiskUsageReport* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_ReadOperationCount)(__x_ABI_CWindows_CSystem_CDiagnostics_CIProcessDiskUsageReport* This,
        INT64* value);
    HRESULT (STDMETHODCALLTYPE* get_WriteOperationCount)(__x_ABI_CWindows_CSystem_CDiagnostics_CIProcessDiskUsageReport* This,
        INT64* value);
    HRESULT (STDMETHODCALLTYPE* get_OtherOperationCount)(__x_ABI_CWindows_CSystem_CDiagnostics_CIProcessDiskUsageReport* This,
        INT64* value);
    HRESULT (STDMETHODCALLTYPE* get_BytesReadCount)(__x_ABI_CWindows_CSystem_CDiagnostics_CIProcessDiskUsageReport* This,
        INT64* value);
    HRESULT (STDMETHODCALLTYPE* get_BytesWrittenCount)(__x_ABI_CWindows_CSystem_CDiagnostics_CIProcessDiskUsageReport* This,
        INT64* value);
    HRESULT (STDMETHODCALLTYPE* get_OtherBytesCount)(__x_ABI_CWindows_CSystem_CDiagnostics_CIProcessDiskUsageReport* This,
        INT64* value);

        END_INTERFACE
    } __x_ABI_CWindows_CSystem_CDiagnostics_CIProcessDiskUsageReportVtbl;

    interface __x_ABI_CWindows_CSystem_CDiagnostics_CIProcessDiskUsageReport
    {
        CONST_VTBL struct __x_ABI_CWindows_CSystem_CDiagnostics_CIProcessDiskUsageReportVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CSystem_CDiagnostics_CIProcessDiskUsageReport;
#endif /* !defined(____x_ABI_CWindows_CSystem_CDiagnostics_CIProcessDiskUsageReport_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CSystem_CDiagnostics_CIProcessMemoryUsage_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CSystem_CDiagnostics_CIProcessMemoryUsage_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CSystem_CDiagnostics_CIProcessMemoryUsageVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CSystem_CDiagnostics_CIProcessMemoryUsage* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CSystem_CDiagnostics_CIProcessMemoryUsage* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CSystem_CDiagnostics_CIProcessMemoryUsage* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CSystem_CDiagnostics_CIProcessMemoryUsage* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CSystem_CDiagnostics_CIProcessMemoryUsage* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CSystem_CDiagnostics_CIProcessMemoryUsage* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetReport)(__x_ABI_CWindows_CSystem_CDiagnostics_CIProcessMemoryUsage* This,
        __x_ABI_CWindows_CSystem_CDiagnostics_CIProcessMemoryUsageReport** value);

        END_INTERFACE
    } __x_ABI_CWindows_CSystem_CDiagnostics_CIProcessMemoryUsageVtbl;

    interface __x_ABI_CWindows_CSystem_CDiagnostics_CIProcessMemoryUsage
    {
        CONST_VTBL struct __x_ABI_CWindows_CSystem_CDiagnostics_CIProcessMemoryUsageVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CSystem_CDiagnostics_CIProcessMemoryUsage;
#endif /* !defined(____x_ABI_CWindows_CSystem_CDiagnostics_CIProcessMemoryUsage_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CSystem_CDiagnostics_CIProcessMemoryUsageReport_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CSystem_CDiagnostics_CIProcessMemoryUsageReport_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CSystem_CDiagnostics_CIProcessMemoryUsageReportVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CSystem_CDiagnostics_CIProcessMemoryUsageReport* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CSystem_CDiagnostics_CIProcessMemoryUsageReport* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CSystem_CDiagnostics_CIProcessMemoryUsageReport* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CSystem_CDiagnostics_CIProcessMemoryUsageReport* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CSystem_CDiagnostics_CIProcessMemoryUsageReport* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CSystem_CDiagnostics_CIProcessMemoryUsageReport* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_NonPagedPoolSizeInBytes)(__x_ABI_CWindows_CSystem_CDiagnostics_CIProcessMemoryUsageReport* This,
        UINT64* value);
    HRESULT (STDMETHODCALLTYPE* get_PageFaultCount)(__x_ABI_CWindows_CSystem_CDiagnostics_CIProcessMemoryUsageReport* This,
        UINT32* value);
    HRESULT (STDMETHODCALLTYPE* get_PageFileSizeInBytes)(__x_ABI_CWindows_CSystem_CDiagnostics_CIProcessMemoryUsageReport* This,
        UINT64* value);
    HRESULT (STDMETHODCALLTYPE* get_PagedPoolSizeInBytes)(__x_ABI_CWindows_CSystem_CDiagnostics_CIProcessMemoryUsageReport* This,
        UINT64* value);
    HRESULT (STDMETHODCALLTYPE* get_PeakNonPagedPoolSizeInBytes)(__x_ABI_CWindows_CSystem_CDiagnostics_CIProcessMemoryUsageReport* This,
        UINT64* value);
    HRESULT (STDMETHODCALLTYPE* get_PeakPageFileSizeInBytes)(__x_ABI_CWindows_CSystem_CDiagnostics_CIProcessMemoryUsageReport* This,
        UINT64* value);
    HRESULT (STDMETHODCALLTYPE* get_PeakPagedPoolSizeInBytes)(__x_ABI_CWindows_CSystem_CDiagnostics_CIProcessMemoryUsageReport* This,
        UINT64* value);
    HRESULT (STDMETHODCALLTYPE* get_PeakVirtualMemorySizeInBytes)(__x_ABI_CWindows_CSystem_CDiagnostics_CIProcessMemoryUsageReport* This,
        UINT64* value);
    HRESULT (STDMETHODCALLTYPE* get_PeakWorkingSetSizeInBytes)(__x_ABI_CWindows_CSystem_CDiagnostics_CIProcessMemoryUsageReport* This,
        UINT64* value);
    HRESULT (STDMETHODCALLTYPE* get_PrivatePageCount)(__x_ABI_CWindows_CSystem_CDiagnostics_CIProcessMemoryUsageReport* This,
        UINT64* value);
    HRESULT (STDMETHODCALLTYPE* get_VirtualMemorySizeInBytes)(__x_ABI_CWindows_CSystem_CDiagnostics_CIProcessMemoryUsageReport* This,
        UINT64* value);
    HRESULT (STDMETHODCALLTYPE* get_WorkingSetSizeInBytes)(__x_ABI_CWindows_CSystem_CDiagnostics_CIProcessMemoryUsageReport* This,
        UINT64* value);

        END_INTERFACE
    } __x_ABI_CWindows_CSystem_CDiagnostics_CIProcessMemoryUsageReportVtbl;

    interface __x_ABI_CWindows_CSystem_CDiagnostics_CIProcessMemoryUsageReport
    {
        CONST_VTBL struct __x_ABI_CWindows_CSystem_CDiagnostics_CIProcessMemoryUsageReportVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CSystem_CDiagnostics_CIProcessMemoryUsageReport;
#endif /* !defined(____x_ABI_CWindows_CSystem_CDiagnostics_CIProcessMemoryUsageReport_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CSystem_CDiagnostics_CISystemCpuUsage_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CSystem_CDiagnostics_CISystemCpuUsage_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CSystem_CDiagnostics_CISystemCpuUsageVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CSystem_CDiagnostics_CISystemCpuUsage* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CSystem_CDiagnostics_CISystemCpuUsage* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CSystem_CDiagnostics_CISystemCpuUsage* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CSystem_CDiagnostics_CISystemCpuUsage* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CSystem_CDiagnostics_CISystemCpuUsage* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CSystem_CDiagnostics_CISystemCpuUsage* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetReport)(__x_ABI_CWindows_CSystem_CDiagnostics_CISystemCpuUsage* This,
        __x_ABI_CWindows_CSystem_CDiagnostics_CISystemCpuUsageReport** value);

        END_INTERFACE
    } __x_ABI_CWindows_CSystem_CDiagnostics_CISystemCpuUsageVtbl;

    interface __x_ABI_CWindows_CSystem_CDiagnostics_CISystemCpuUsage
    {
        CONST_VTBL struct __x_ABI_CWindows_CSystem_CDiagnostics_CISystemCpuUsageVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CSystem_CDiagnostics_CISystemCpuUsage;
#endif /* !defined(____x_ABI_CWindows_CSystem_CDiagnostics_CISystemCpuUsage_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CSystem_CDiagnostics_CISystemCpuUsageReport_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CSystem_CDiagnostics_CISystemCpuUsageReport_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CSystem_CDiagnostics_CISystemCpuUsageReportVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CSystem_CDiagnostics_CISystemCpuUsageReport* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CSystem_CDiagnostics_CISystemCpuUsageReport* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CSystem_CDiagnostics_CISystemCpuUsageReport* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CSystem_CDiagnostics_CISystemCpuUsageReport* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CSystem_CDiagnostics_CISystemCpuUsageReport* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CSystem_CDiagnostics_CISystemCpuUsageReport* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_KernelTime)(__x_ABI_CWindows_CSystem_CDiagnostics_CISystemCpuUsageReport* This,
        struct __x_ABI_CWindows_CFoundation_CTimeSpan* value);
    HRESULT (STDMETHODCALLTYPE* get_UserTime)(__x_ABI_CWindows_CSystem_CDiagnostics_CISystemCpuUsageReport* This,
        struct __x_ABI_CWindows_CFoundation_CTimeSpan* value);
    HRESULT (STDMETHODCALLTYPE* get_IdleTime)(__x_ABI_CWindows_CSystem_CDiagnostics_CISystemCpuUsageReport* This,
        struct __x_ABI_CWindows_CFoundation_CTimeSpan* value);

        END_INTERFACE
    } __x_ABI_CWindows_CSystem_CDiagnostics_CISystemCpuUsageReportVtbl;

    interface __x_ABI_CWindows_CSystem_CDiagnostics_CISystemCpuUsageReport
    {
        CONST_VTBL struct __x_ABI_CWindows_CSystem_CDiagnostics_CISystemCpuUsageReportVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CSystem_CDiagnostics_CISystemCpuUsageReport;
#endif /* !defined(____x_ABI_CWindows_CSystem_CDiagnostics_CISystemCpuUsageReport_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CSystem_CDiagnostics_CISystemDiagnosticInfo_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CSystem_CDiagnostics_CISystemDiagnosticInfo_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CSystem_CDiagnostics_CISystemDiagnosticInfoVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CSystem_CDiagnostics_CISystemDiagnosticInfo* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CSystem_CDiagnostics_CISystemDiagnosticInfo* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CSystem_CDiagnostics_CISystemDiagnosticInfo* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CSystem_CDiagnostics_CISystemDiagnosticInfo* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CSystem_CDiagnostics_CISystemDiagnosticInfo* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CSystem_CDiagnostics_CISystemDiagnosticInfo* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_MemoryUsage)(__x_ABI_CWindows_CSystem_CDiagnostics_CISystemDiagnosticInfo* This,
        __x_ABI_CWindows_CSystem_CDiagnostics_CISystemMemoryUsage** value);
    HRESULT (STDMETHODCALLTYPE* get_CpuUsage)(__x_ABI_CWindows_CSystem_CDiagnostics_CISystemDiagnosticInfo* This,
        __x_ABI_CWindows_CSystem_CDiagnostics_CISystemCpuUsage** value);

        END_INTERFACE
    } __x_ABI_CWindows_CSystem_CDiagnostics_CISystemDiagnosticInfoVtbl;

    interface __x_ABI_CWindows_CSystem_CDiagnostics_CISystemDiagnosticInfo
    {
        CONST_VTBL struct __x_ABI_CWindows_CSystem_CDiagnostics_CISystemDiagnosticInfoVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CSystem_CDiagnostics_CISystemDiagnosticInfo;
#endif /* !defined(____x_ABI_CWindows_CSystem_CDiagnostics_CISystemDiagnosticInfo_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CSystem_CDiagnostics_CISystemDiagnosticInfoStatics_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CSystem_CDiagnostics_CISystemDiagnosticInfoStatics_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CSystem_CDiagnostics_CISystemDiagnosticInfoStaticsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CSystem_CDiagnostics_CISystemDiagnosticInfoStatics* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CSystem_CDiagnostics_CISystemDiagnosticInfoStatics* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CSystem_CDiagnostics_CISystemDiagnosticInfoStatics* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CSystem_CDiagnostics_CISystemDiagnosticInfoStatics* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CSystem_CDiagnostics_CISystemDiagnosticInfoStatics* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CSystem_CDiagnostics_CISystemDiagnosticInfoStatics* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetForCurrentSystem)(__x_ABI_CWindows_CSystem_CDiagnostics_CISystemDiagnosticInfoStatics* This,
        __x_ABI_CWindows_CSystem_CDiagnostics_CISystemDiagnosticInfo** value);

        END_INTERFACE
    } __x_ABI_CWindows_CSystem_CDiagnostics_CISystemDiagnosticInfoStaticsVtbl;

    interface __x_ABI_CWindows_CSystem_CDiagnostics_CISystemDiagnosticInfoStatics
    {
        CONST_VTBL struct __x_ABI_CWindows_CSystem_CDiagnostics_CISystemDiagnosticInfoStaticsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CSystem_CDiagnostics_CISystemDiagnosticInfoStatics;
#endif /* !defined(____x_ABI_CWindows_CSystem_CDiagnostics_CISystemDiagnosticInfoStatics_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CSystem_CDiagnostics_CISystemMemoryUsage_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CSystem_CDiagnostics_CISystemMemoryUsage_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CSystem_CDiagnostics_CISystemMemoryUsageVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CSystem_CDiagnostics_CISystemMemoryUsage* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CSystem_CDiagnostics_CISystemMemoryUsage* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CSystem_CDiagnostics_CISystemMemoryUsage* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CSystem_CDiagnostics_CISystemMemoryUsage* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CSystem_CDiagnostics_CISystemMemoryUsage* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CSystem_CDiagnostics_CISystemMemoryUsage* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetReport)(__x_ABI_CWindows_CSystem_CDiagnostics_CISystemMemoryUsage* This,
        __x_ABI_CWindows_CSystem_CDiagnostics_CISystemMemoryUsageReport** value);

        END_INTERFACE
    } __x_ABI_CWindows_CSystem_CDiagnostics_CISystemMemoryUsageVtbl;

    interface __x_ABI_CWindows_CSystem_CDiagnostics_CISystemMemoryUsage
    {
        CONST_VTBL struct __x_ABI_CWindows_CSystem_CDiagnostics_CISystemMemoryUsageVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CSystem_CDiagnostics_CISystemMemoryUsage;
#endif /* !defined(____x_ABI_CWindows_CSystem_CDiagnostics_CISystemMemoryUsage_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CSystem_CDiagnostics_CISystemMemoryUsageReport_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CSystem_CDiagnostics_CISystemMemoryUsageReport_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CSystem_CDiagnostics_CISystemMemoryUsageReportVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CSystem_CDiagnostics_CISystemMemoryUsageReport* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CSystem_CDiagnostics_CISystemMemoryUsageReport* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CSystem_CDiagnostics_CISystemMemoryUsageReport* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CSystem_CDiagnostics_CISystemMemoryUsageReport* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CSystem_CDiagnostics_CISystemMemoryUsageReport* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CSystem_CDiagnostics_CISystemMemoryUsageReport* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_TotalPhysicalSizeInBytes)(__x_ABI_CWindows_CSystem_CDiagnostics_CISystemMemoryUsageReport* This,
        UINT64* value);
    HRESULT (STDMETHODCALLTYPE* get_AvailableSizeInBytes)(__x_ABI_CWindows_CSystem_CDiagnostics_CISystemMemoryUsageReport* This,
        UINT64* value);
    HRESULT (STDMETHODCALLTYPE* get_CommittedSizeInBytes)(__x_ABI_CWindows_CSystem_CDiagnostics_CISystemMemoryUsageReport* This,
        UINT64* value);

        END_INTERFACE
    } __x_ABI_CWindows_CSystem_CDiagnostics_CISystemMemoryUsageReportVtbl;

    interface __x_ABI_CWindows_CSystem_CDiagnostics_CISystemMemoryUsageReport
    {
        CONST_VTBL struct __x_ABI_CWindows_CSystem_CDiagnostics_CISystemMemoryUsageReportVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CSystem_CDiagnostics_CISystemMemoryUsageReport;
#endif /* !defined(____x_ABI_CWindows_CSystem_CDiagnostics_CISystemMemoryUsageReport_INTERFACE_DEFINED__) */
    

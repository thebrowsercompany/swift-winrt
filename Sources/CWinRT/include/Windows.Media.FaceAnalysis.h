// WARNING: Please don't edit this file. It was generated by Swift/WinRT v0.0.1

#pragma once
// Header files for imported files
#include <inspectable.h>
#include <EventToken.h>
#include <windowscontracts.h>
#include "Windows.Foundation.h"
#include "Windows.Graphics.Imaging.h"
#include "Windows.Media.h"
// Importing Collections header
#include "Windows.Foundation.Collections.h"

/* Forward Declarations */
#ifndef ____x_ABI_CWindows_CMedia_CFaceAnalysis_CIDetectedFace_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CFaceAnalysis_CIDetectedFace_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_CFaceAnalysis_CIDetectedFace __x_ABI_CWindows_CMedia_CFaceAnalysis_CIDetectedFace;

#endif // ____x_ABI_CWindows_CMedia_CFaceAnalysis_CIDetectedFace_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CFaceAnalysis_CIFaceDetector_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CFaceAnalysis_CIFaceDetector_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_CFaceAnalysis_CIFaceDetector __x_ABI_CWindows_CMedia_CFaceAnalysis_CIFaceDetector;

#endif // ____x_ABI_CWindows_CMedia_CFaceAnalysis_CIFaceDetector_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CFaceAnalysis_CIFaceDetectorStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CFaceAnalysis_CIFaceDetectorStatics_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_CFaceAnalysis_CIFaceDetectorStatics __x_ABI_CWindows_CMedia_CFaceAnalysis_CIFaceDetectorStatics;

#endif // ____x_ABI_CWindows_CMedia_CFaceAnalysis_CIFaceDetectorStatics_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CFaceAnalysis_CIFaceTracker_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CFaceAnalysis_CIFaceTracker_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_CFaceAnalysis_CIFaceTracker __x_ABI_CWindows_CMedia_CFaceAnalysis_CIFaceTracker;

#endif // ____x_ABI_CWindows_CMedia_CFaceAnalysis_CIFaceTracker_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CFaceAnalysis_CIFaceTrackerStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CFaceAnalysis_CIFaceTrackerStatics_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_CFaceAnalysis_CIFaceTrackerStatics __x_ABI_CWindows_CMedia_CFaceAnalysis_CIFaceTrackerStatics;

#endif // ____x_ABI_CWindows_CMedia_CFaceAnalysis_CIFaceTrackerStatics_FWD_DEFINED__

// Parameterized interface forward declarations (C)

// Collection interface definitions

#if !defined(____x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CFaceAnalysis__CDetectedFace_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CFaceAnalysis__CDetectedFace_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CFaceAnalysis__CDetectedFace __x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CFaceAnalysis__CDetectedFace;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CFaceAnalysis__CDetectedFace;

    typedef struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CFaceAnalysis__CDetectedFaceVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CFaceAnalysis__CDetectedFace* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CFaceAnalysis__CDetectedFace* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CFaceAnalysis__CDetectedFace* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CFaceAnalysis__CDetectedFace* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CFaceAnalysis__CDetectedFace* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CFaceAnalysis__CDetectedFace* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Current)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CFaceAnalysis__CDetectedFace* This,
        __x_ABI_CWindows_CMedia_CFaceAnalysis_CIDetectedFace** result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CFaceAnalysis__CDetectedFace* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CFaceAnalysis__CDetectedFace* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CFaceAnalysis__CDetectedFace* This,
        UINT32 itemsLength,
        __x_ABI_CWindows_CMedia_CFaceAnalysis_CIDetectedFace** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CFaceAnalysis__CDetectedFaceVtbl;

    interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CFaceAnalysis__CDetectedFace
    {
        CONST_VTBL struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CFaceAnalysis__CDetectedFaceVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CFaceAnalysis__CDetectedFace_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CFaceAnalysis__CDetectedFace_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CFaceAnalysis__CDetectedFace_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CFaceAnalysis__CDetectedFace __x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CFaceAnalysis__CDetectedFace;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CFaceAnalysis__CDetectedFace;

    typedef struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CFaceAnalysis__CDetectedFaceVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CFaceAnalysis__CDetectedFace* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CFaceAnalysis__CDetectedFace* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CFaceAnalysis__CDetectedFace* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CFaceAnalysis__CDetectedFace* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CFaceAnalysis__CDetectedFace* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CFaceAnalysis__CDetectedFace* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* First)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CFaceAnalysis__CDetectedFace* This,
        __x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CFaceAnalysis__CDetectedFace** result);

        END_INTERFACE
    } __x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CFaceAnalysis__CDetectedFaceVtbl;

    interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CFaceAnalysis__CDetectedFace
    {
        CONST_VTBL struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CFaceAnalysis__CDetectedFaceVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CFaceAnalysis__CDetectedFace_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CFaceAnalysis__CDetectedFace_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CFaceAnalysis__CDetectedFace_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CFaceAnalysis__CDetectedFace __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CFaceAnalysis__CDetectedFace;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CFaceAnalysis__CDetectedFace;

    typedef struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CFaceAnalysis__CDetectedFaceVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CFaceAnalysis__CDetectedFace* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CFaceAnalysis__CDetectedFace* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CFaceAnalysis__CDetectedFace* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CFaceAnalysis__CDetectedFace* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CFaceAnalysis__CDetectedFace* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CFaceAnalysis__CDetectedFace* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CFaceAnalysis__CDetectedFace* This,
        UINT32 index,
        __x_ABI_CWindows_CMedia_CFaceAnalysis_CIDetectedFace** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CFaceAnalysis__CDetectedFace* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CFaceAnalysis__CDetectedFace* This,
        __x_ABI_CWindows_CMedia_CFaceAnalysis_CIDetectedFace* value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CFaceAnalysis__CDetectedFace* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        __x_ABI_CWindows_CMedia_CFaceAnalysis_CIDetectedFace** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CFaceAnalysis__CDetectedFaceVtbl;

    interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CFaceAnalysis__CDetectedFace
    {
        CONST_VTBL struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CFaceAnalysis__CDetectedFaceVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CFaceAnalysis__CDetectedFace_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CFaceAnalysis__CDetectedFace_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CFaceAnalysis__CDetectedFace_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CFaceAnalysis__CDetectedFace __x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CFaceAnalysis__CDetectedFace;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CFaceAnalysis__CDetectedFace;

    typedef struct __x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CFaceAnalysis__CDetectedFaceVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CFaceAnalysis__CDetectedFace* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CFaceAnalysis__CDetectedFace* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CFaceAnalysis__CDetectedFace* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CFaceAnalysis__CDetectedFace* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CFaceAnalysis__CDetectedFace* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CFaceAnalysis__CDetectedFace* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CFaceAnalysis__CDetectedFace* This,
        UINT32 index,
        __x_ABI_CWindows_CMedia_CFaceAnalysis_CIDetectedFace** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CFaceAnalysis__CDetectedFace* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* GetView)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CFaceAnalysis__CDetectedFace* This,
        __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CFaceAnalysis__CDetectedFace** result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CFaceAnalysis__CDetectedFace* This,
        __x_ABI_CWindows_CMedia_CFaceAnalysis_CIDetectedFace* value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* SetAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CFaceAnalysis__CDetectedFace* This,
        UINT32 index,
        __x_ABI_CWindows_CMedia_CFaceAnalysis_CIDetectedFace* value);
    HRESULT (STDMETHODCALLTYPE* InsertAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CFaceAnalysis__CDetectedFace* This,
        UINT32 index,
        __x_ABI_CWindows_CMedia_CFaceAnalysis_CIDetectedFace* value);
    HRESULT (STDMETHODCALLTYPE* RemoveAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CFaceAnalysis__CDetectedFace* This,
        UINT32 index);
    HRESULT (STDMETHODCALLTYPE* Append)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CFaceAnalysis__CDetectedFace* This,
        __x_ABI_CWindows_CMedia_CFaceAnalysis_CIDetectedFace* value);
    HRESULT (STDMETHODCALLTYPE* RemoveAtEnd)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CFaceAnalysis__CDetectedFace* This);
    HRESULT (STDMETHODCALLTYPE* Clear)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CFaceAnalysis__CDetectedFace* This);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CFaceAnalysis__CDetectedFace* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        __x_ABI_CWindows_CMedia_CFaceAnalysis_CIDetectedFace** items,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* ReplaceAll)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CFaceAnalysis__CDetectedFace* This,
        UINT32 itemsLength,
        __x_ABI_CWindows_CMedia_CFaceAnalysis_CIDetectedFace** items);

        END_INTERFACE
    } __x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CFaceAnalysis__CDetectedFaceVtbl;

    interface __x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CFaceAnalysis__CDetectedFace
    {
        CONST_VTBL struct __x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CFaceAnalysis__CDetectedFaceVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CFaceAnalysis__CDetectedFace_INTERFACE_DEFINED__
    
typedef interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CFaceAnalysis__CDetectedFace __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CFaceAnalysis__CDetectedFace;

#if !defined(____x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CFaceAnalysis__CDetectedFace_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CFaceAnalysis__CDetectedFace_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CFaceAnalysis__CDetectedFace __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CFaceAnalysis__CDetectedFace;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CFaceAnalysis__CDetectedFace;

    typedef struct __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CFaceAnalysis__CDetectedFaceVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CFaceAnalysis__CDetectedFace* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CFaceAnalysis__CDetectedFace* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CFaceAnalysis__CDetectedFace* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CFaceAnalysis__CDetectedFace* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CFaceAnalysis__CDetectedFace* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CFaceAnalysis__CDetectedFace* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* put_Completed)(__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CFaceAnalysis__CDetectedFace* This,
        __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CFaceAnalysis__CDetectedFace* handler);
    HRESULT (STDMETHODCALLTYPE* get_Completed)(__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CFaceAnalysis__CDetectedFace* This,
        __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CFaceAnalysis__CDetectedFace** result);
    HRESULT (STDMETHODCALLTYPE* GetResults)(__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CFaceAnalysis__CDetectedFace* This,
        __x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CFaceAnalysis__CDetectedFace** result);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CFaceAnalysis__CDetectedFaceVtbl;

    interface __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CFaceAnalysis__CDetectedFace
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CFaceAnalysis__CDetectedFaceVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CFaceAnalysis__CDetectedFace_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CFaceAnalysis__CDetectedFace_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CFaceAnalysis__CDetectedFace_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CFaceAnalysis__CDetectedFace __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CFaceAnalysis__CDetectedFace;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CFaceAnalysis__CDetectedFace;

    typedef struct __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CFaceAnalysis__CDetectedFaceVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CFaceAnalysis__CDetectedFace* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CFaceAnalysis__CDetectedFace* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CFaceAnalysis__CDetectedFace* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CFaceAnalysis__CDetectedFace* This,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CFaceAnalysis__CDetectedFace* asyncInfo,
        enum __x_ABI_CWindows_CFoundation_CAsyncStatus asyncStatus);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CFaceAnalysis__CDetectedFaceVtbl;

    interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CFaceAnalysis__CDetectedFace
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CFaceAnalysis__CDetectedFaceVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CFaceAnalysis__CDetectedFace_INTERFACE_DEFINED__
    
typedef interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__CFaceAnalysis__CFaceDetector __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__CFaceAnalysis__CFaceDetector;

#if !defined(____x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CFaceAnalysis__CFaceDetector_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CFaceAnalysis__CFaceDetector_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CFaceAnalysis__CFaceDetector __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CFaceAnalysis__CFaceDetector;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CFaceAnalysis__CFaceDetector;

    typedef struct __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CFaceAnalysis__CFaceDetectorVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CFaceAnalysis__CFaceDetector* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CFaceAnalysis__CFaceDetector* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CFaceAnalysis__CFaceDetector* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CFaceAnalysis__CFaceDetector* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CFaceAnalysis__CFaceDetector* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CFaceAnalysis__CFaceDetector* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* put_Completed)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CFaceAnalysis__CFaceDetector* This,
        __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__CFaceAnalysis__CFaceDetector* handler);
    HRESULT (STDMETHODCALLTYPE* get_Completed)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CFaceAnalysis__CFaceDetector* This,
        __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__CFaceAnalysis__CFaceDetector** result);
    HRESULT (STDMETHODCALLTYPE* GetResults)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CFaceAnalysis__CFaceDetector* This,
        __x_ABI_CWindows_CMedia_CFaceAnalysis_CIFaceDetector** result);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CFaceAnalysis__CFaceDetectorVtbl;

    interface __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CFaceAnalysis__CFaceDetector
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CFaceAnalysis__CFaceDetectorVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CFaceAnalysis__CFaceDetector_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__CFaceAnalysis__CFaceDetector_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__CFaceAnalysis__CFaceDetector_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__CFaceAnalysis__CFaceDetector __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__CFaceAnalysis__CFaceDetector;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__CFaceAnalysis__CFaceDetector;

    typedef struct __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__CFaceAnalysis__CFaceDetectorVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__CFaceAnalysis__CFaceDetector* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__CFaceAnalysis__CFaceDetector* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__CFaceAnalysis__CFaceDetector* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__CFaceAnalysis__CFaceDetector* This,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CFaceAnalysis__CFaceDetector* asyncInfo,
        enum __x_ABI_CWindows_CFoundation_CAsyncStatus asyncStatus);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__CFaceAnalysis__CFaceDetectorVtbl;

    interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__CFaceAnalysis__CFaceDetector
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__CFaceAnalysis__CFaceDetectorVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__CFaceAnalysis__CFaceDetector_INTERFACE_DEFINED__
    
typedef interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__CFaceAnalysis__CFaceTracker __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__CFaceAnalysis__CFaceTracker;

#if !defined(____x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CFaceAnalysis__CFaceTracker_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CFaceAnalysis__CFaceTracker_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CFaceAnalysis__CFaceTracker __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CFaceAnalysis__CFaceTracker;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CFaceAnalysis__CFaceTracker;

    typedef struct __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CFaceAnalysis__CFaceTrackerVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CFaceAnalysis__CFaceTracker* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CFaceAnalysis__CFaceTracker* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CFaceAnalysis__CFaceTracker* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CFaceAnalysis__CFaceTracker* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CFaceAnalysis__CFaceTracker* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CFaceAnalysis__CFaceTracker* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* put_Completed)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CFaceAnalysis__CFaceTracker* This,
        __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__CFaceAnalysis__CFaceTracker* handler);
    HRESULT (STDMETHODCALLTYPE* get_Completed)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CFaceAnalysis__CFaceTracker* This,
        __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__CFaceAnalysis__CFaceTracker** result);
    HRESULT (STDMETHODCALLTYPE* GetResults)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CFaceAnalysis__CFaceTracker* This,
        __x_ABI_CWindows_CMedia_CFaceAnalysis_CIFaceTracker** result);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CFaceAnalysis__CFaceTrackerVtbl;

    interface __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CFaceAnalysis__CFaceTracker
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CFaceAnalysis__CFaceTrackerVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CFaceAnalysis__CFaceTracker_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__CFaceAnalysis__CFaceTracker_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__CFaceAnalysis__CFaceTracker_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__CFaceAnalysis__CFaceTracker __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__CFaceAnalysis__CFaceTracker;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__CFaceAnalysis__CFaceTracker;

    typedef struct __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__CFaceAnalysis__CFaceTrackerVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__CFaceAnalysis__CFaceTracker* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__CFaceAnalysis__CFaceTracker* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__CFaceAnalysis__CFaceTracker* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__CFaceAnalysis__CFaceTracker* This,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CFaceAnalysis__CFaceTracker* asyncInfo,
        enum __x_ABI_CWindows_CFoundation_CAsyncStatus asyncStatus);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__CFaceAnalysis__CFaceTrackerVtbl;

    interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__CFaceAnalysis__CFaceTracker
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__CFaceAnalysis__CFaceTrackerVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__CFaceAnalysis__CFaceTracker_INTERFACE_DEFINED__
    
typedef enum __x_ABI_CWindows_CGraphics_CImaging_CBitmapPixelFormat __x_ABI_CWindows_CGraphics_CImaging_CBitmapPixelFormat;

#if !defined(____x_ABI_C__FIIterator_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapPixelFormat_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapPixelFormat_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapPixelFormat __x_ABI_C__FIIterator_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapPixelFormat;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterator_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapPixelFormat;

    typedef struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapPixelFormatVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapPixelFormat* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapPixelFormat* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapPixelFormat* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapPixelFormat* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapPixelFormat* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapPixelFormat* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Current)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapPixelFormat* This,
        enum __x_ABI_CWindows_CGraphics_CImaging_CBitmapPixelFormat* result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapPixelFormat* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapPixelFormat* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapPixelFormat* This,
        UINT32 itemsLength,
        enum __x_ABI_CWindows_CGraphics_CImaging_CBitmapPixelFormat* items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIIterator_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapPixelFormatVtbl;

    interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapPixelFormat
    {
        CONST_VTBL struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapPixelFormatVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapPixelFormat_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterable_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapPixelFormat_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapPixelFormat_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapPixelFormat __x_ABI_C__FIIterable_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapPixelFormat;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterable_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapPixelFormat;

    typedef struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapPixelFormatVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapPixelFormat* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapPixelFormat* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapPixelFormat* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapPixelFormat* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapPixelFormat* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapPixelFormat* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* First)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapPixelFormat* This,
        __x_ABI_C__FIIterator_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapPixelFormat** result);

        END_INTERFACE
    } __x_ABI_C__FIIterable_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapPixelFormatVtbl;

    interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapPixelFormat
    {
        CONST_VTBL struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapPixelFormatVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapPixelFormat_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapPixelFormat_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapPixelFormat_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapPixelFormat __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapPixelFormat;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapPixelFormat;

    typedef struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapPixelFormatVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapPixelFormat* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapPixelFormat* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapPixelFormat* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapPixelFormat* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapPixelFormat* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapPixelFormat* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapPixelFormat* This,
        UINT32 index,
        enum __x_ABI_CWindows_CGraphics_CImaging_CBitmapPixelFormat* result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapPixelFormat* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapPixelFormat* This,
        enum __x_ABI_CWindows_CGraphics_CImaging_CBitmapPixelFormat value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapPixelFormat* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        enum __x_ABI_CWindows_CGraphics_CImaging_CBitmapPixelFormat* items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapPixelFormatVtbl;

    interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapPixelFormat
    {
        CONST_VTBL struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapPixelFormatVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapPixelFormat_INTERFACE_DEFINED__
    
typedef enum __x_ABI_CWindows_CFoundation_CAsyncStatus __x_ABI_CWindows_CFoundation_CAsyncStatus;

#ifndef ____x_ABI_CWindows_CFoundation_CIAsyncInfo_FWD_DEFINED__
#define ____x_ABI_CWindows_CFoundation_CIAsyncInfo_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CFoundation_CIAsyncInfo __x_ABI_CWindows_CFoundation_CIAsyncInfo;

#endif // ____x_ABI_CWindows_CFoundation_CIAsyncInfo_FWD_DEFINED__

typedef struct __x_ABI_CWindows_CGraphics_CImaging_CBitmapBounds __x_ABI_CWindows_CGraphics_CImaging_CBitmapBounds;

typedef struct __x_ABI_CWindows_CGraphics_CImaging_CBitmapSize __x_ABI_CWindows_CGraphics_CImaging_CBitmapSize;

#ifndef ____x_ABI_CWindows_CGraphics_CImaging_CISoftwareBitmap_FWD_DEFINED__
#define ____x_ABI_CWindows_CGraphics_CImaging_CISoftwareBitmap_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CGraphics_CImaging_CISoftwareBitmap __x_ABI_CWindows_CGraphics_CImaging_CISoftwareBitmap;

#endif // ____x_ABI_CWindows_CGraphics_CImaging_CISoftwareBitmap_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CIVideoFrame_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CIVideoFrame_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_CIVideoFrame __x_ABI_CWindows_CMedia_CIVideoFrame;

#endif // ____x_ABI_CWindows_CMedia_CIVideoFrame_FWD_DEFINED__

#if !defined(____x_ABI_CWindows_CMedia_CFaceAnalysis_CIDetectedFace_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CMedia_CFaceAnalysis_CIDetectedFace_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CMedia_CFaceAnalysis_CIDetectedFaceVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CFaceAnalysis_CIDetectedFace* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CFaceAnalysis_CIDetectedFace* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CFaceAnalysis_CIDetectedFace* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CFaceAnalysis_CIDetectedFace* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CFaceAnalysis_CIDetectedFace* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CFaceAnalysis_CIDetectedFace* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_FaceBox)(__x_ABI_CWindows_CMedia_CFaceAnalysis_CIDetectedFace* This,
        struct __x_ABI_CWindows_CGraphics_CImaging_CBitmapBounds* returnValue);

        END_INTERFACE
    } __x_ABI_CWindows_CMedia_CFaceAnalysis_CIDetectedFaceVtbl;

    interface __x_ABI_CWindows_CMedia_CFaceAnalysis_CIDetectedFace
    {
        CONST_VTBL struct __x_ABI_CWindows_CMedia_CFaceAnalysis_CIDetectedFaceVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CFaceAnalysis_CIDetectedFace;
#endif /* !defined(____x_ABI_CWindows_CMedia_CFaceAnalysis_CIDetectedFace_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CMedia_CFaceAnalysis_CIFaceDetector_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CMedia_CFaceAnalysis_CIFaceDetector_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CMedia_CFaceAnalysis_CIFaceDetectorVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CFaceAnalysis_CIFaceDetector* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CFaceAnalysis_CIFaceDetector* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CFaceAnalysis_CIFaceDetector* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CFaceAnalysis_CIFaceDetector* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CFaceAnalysis_CIFaceDetector* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CFaceAnalysis_CIFaceDetector* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* DetectFacesAsync)(__x_ABI_CWindows_CMedia_CFaceAnalysis_CIFaceDetector* This,
        __x_ABI_CWindows_CGraphics_CImaging_CISoftwareBitmap* image,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CFaceAnalysis__CDetectedFace** returnValue);
    HRESULT (STDMETHODCALLTYPE* DetectFacesWithSearchAreaAsync)(__x_ABI_CWindows_CMedia_CFaceAnalysis_CIFaceDetector* This,
        __x_ABI_CWindows_CGraphics_CImaging_CISoftwareBitmap* image,
        struct __x_ABI_CWindows_CGraphics_CImaging_CBitmapBounds searchArea,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CFaceAnalysis__CDetectedFace** returnValue);
    HRESULT (STDMETHODCALLTYPE* get_MinDetectableFaceSize)(__x_ABI_CWindows_CMedia_CFaceAnalysis_CIFaceDetector* This,
        struct __x_ABI_CWindows_CGraphics_CImaging_CBitmapSize* returnValue);
    HRESULT (STDMETHODCALLTYPE* put_MinDetectableFaceSize)(__x_ABI_CWindows_CMedia_CFaceAnalysis_CIFaceDetector* This,
        struct __x_ABI_CWindows_CGraphics_CImaging_CBitmapSize value);
    HRESULT (STDMETHODCALLTYPE* get_MaxDetectableFaceSize)(__x_ABI_CWindows_CMedia_CFaceAnalysis_CIFaceDetector* This,
        struct __x_ABI_CWindows_CGraphics_CImaging_CBitmapSize* returnValue);
    HRESULT (STDMETHODCALLTYPE* put_MaxDetectableFaceSize)(__x_ABI_CWindows_CMedia_CFaceAnalysis_CIFaceDetector* This,
        struct __x_ABI_CWindows_CGraphics_CImaging_CBitmapSize value);

        END_INTERFACE
    } __x_ABI_CWindows_CMedia_CFaceAnalysis_CIFaceDetectorVtbl;

    interface __x_ABI_CWindows_CMedia_CFaceAnalysis_CIFaceDetector
    {
        CONST_VTBL struct __x_ABI_CWindows_CMedia_CFaceAnalysis_CIFaceDetectorVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CFaceAnalysis_CIFaceDetector;
#endif /* !defined(____x_ABI_CWindows_CMedia_CFaceAnalysis_CIFaceDetector_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CMedia_CFaceAnalysis_CIFaceDetectorStatics_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CMedia_CFaceAnalysis_CIFaceDetectorStatics_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CMedia_CFaceAnalysis_CIFaceDetectorStaticsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CFaceAnalysis_CIFaceDetectorStatics* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CFaceAnalysis_CIFaceDetectorStatics* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CFaceAnalysis_CIFaceDetectorStatics* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CFaceAnalysis_CIFaceDetectorStatics* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CFaceAnalysis_CIFaceDetectorStatics* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CFaceAnalysis_CIFaceDetectorStatics* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* CreateAsync)(__x_ABI_CWindows_CMedia_CFaceAnalysis_CIFaceDetectorStatics* This,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CFaceAnalysis__CFaceDetector** returnValue);
    HRESULT (STDMETHODCALLTYPE* GetSupportedBitmapPixelFormats)(__x_ABI_CWindows_CMedia_CFaceAnalysis_CIFaceDetectorStatics* This,
        __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapPixelFormat** result);
    HRESULT (STDMETHODCALLTYPE* IsBitmapPixelFormatSupported)(__x_ABI_CWindows_CMedia_CFaceAnalysis_CIFaceDetectorStatics* This,
        enum __x_ABI_CWindows_CGraphics_CImaging_CBitmapPixelFormat bitmapPixelFormat,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* get_IsSupported)(__x_ABI_CWindows_CMedia_CFaceAnalysis_CIFaceDetectorStatics* This,
        boolean* returnValue);

        END_INTERFACE
    } __x_ABI_CWindows_CMedia_CFaceAnalysis_CIFaceDetectorStaticsVtbl;

    interface __x_ABI_CWindows_CMedia_CFaceAnalysis_CIFaceDetectorStatics
    {
        CONST_VTBL struct __x_ABI_CWindows_CMedia_CFaceAnalysis_CIFaceDetectorStaticsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CFaceAnalysis_CIFaceDetectorStatics;
#endif /* !defined(____x_ABI_CWindows_CMedia_CFaceAnalysis_CIFaceDetectorStatics_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CMedia_CFaceAnalysis_CIFaceTracker_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CMedia_CFaceAnalysis_CIFaceTracker_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CMedia_CFaceAnalysis_CIFaceTrackerVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CFaceAnalysis_CIFaceTracker* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CFaceAnalysis_CIFaceTracker* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CFaceAnalysis_CIFaceTracker* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CFaceAnalysis_CIFaceTracker* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CFaceAnalysis_CIFaceTracker* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CFaceAnalysis_CIFaceTracker* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* ProcessNextFrameAsync)(__x_ABI_CWindows_CMedia_CFaceAnalysis_CIFaceTracker* This,
        __x_ABI_CWindows_CMedia_CIVideoFrame* videoFrame,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CFaceAnalysis__CDetectedFace** returnValue);
    HRESULT (STDMETHODCALLTYPE* get_MinDetectableFaceSize)(__x_ABI_CWindows_CMedia_CFaceAnalysis_CIFaceTracker* This,
        struct __x_ABI_CWindows_CGraphics_CImaging_CBitmapSize* returnValue);
    HRESULT (STDMETHODCALLTYPE* put_MinDetectableFaceSize)(__x_ABI_CWindows_CMedia_CFaceAnalysis_CIFaceTracker* This,
        struct __x_ABI_CWindows_CGraphics_CImaging_CBitmapSize value);
    HRESULT (STDMETHODCALLTYPE* get_MaxDetectableFaceSize)(__x_ABI_CWindows_CMedia_CFaceAnalysis_CIFaceTracker* This,
        struct __x_ABI_CWindows_CGraphics_CImaging_CBitmapSize* returnValue);
    HRESULT (STDMETHODCALLTYPE* put_MaxDetectableFaceSize)(__x_ABI_CWindows_CMedia_CFaceAnalysis_CIFaceTracker* This,
        struct __x_ABI_CWindows_CGraphics_CImaging_CBitmapSize value);

        END_INTERFACE
    } __x_ABI_CWindows_CMedia_CFaceAnalysis_CIFaceTrackerVtbl;

    interface __x_ABI_CWindows_CMedia_CFaceAnalysis_CIFaceTracker
    {
        CONST_VTBL struct __x_ABI_CWindows_CMedia_CFaceAnalysis_CIFaceTrackerVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CFaceAnalysis_CIFaceTracker;
#endif /* !defined(____x_ABI_CWindows_CMedia_CFaceAnalysis_CIFaceTracker_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CMedia_CFaceAnalysis_CIFaceTrackerStatics_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CMedia_CFaceAnalysis_CIFaceTrackerStatics_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CMedia_CFaceAnalysis_CIFaceTrackerStaticsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CFaceAnalysis_CIFaceTrackerStatics* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CFaceAnalysis_CIFaceTrackerStatics* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CFaceAnalysis_CIFaceTrackerStatics* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CFaceAnalysis_CIFaceTrackerStatics* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CFaceAnalysis_CIFaceTrackerStatics* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CFaceAnalysis_CIFaceTrackerStatics* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* CreateAsync)(__x_ABI_CWindows_CMedia_CFaceAnalysis_CIFaceTrackerStatics* This,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CFaceAnalysis__CFaceTracker** returnValue);
    HRESULT (STDMETHODCALLTYPE* GetSupportedBitmapPixelFormats)(__x_ABI_CWindows_CMedia_CFaceAnalysis_CIFaceTrackerStatics* This,
        __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapPixelFormat** result);
    HRESULT (STDMETHODCALLTYPE* IsBitmapPixelFormatSupported)(__x_ABI_CWindows_CMedia_CFaceAnalysis_CIFaceTrackerStatics* This,
        enum __x_ABI_CWindows_CGraphics_CImaging_CBitmapPixelFormat bitmapPixelFormat,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* get_IsSupported)(__x_ABI_CWindows_CMedia_CFaceAnalysis_CIFaceTrackerStatics* This,
        boolean* returnValue);

        END_INTERFACE
    } __x_ABI_CWindows_CMedia_CFaceAnalysis_CIFaceTrackerStaticsVtbl;

    interface __x_ABI_CWindows_CMedia_CFaceAnalysis_CIFaceTrackerStatics
    {
        CONST_VTBL struct __x_ABI_CWindows_CMedia_CFaceAnalysis_CIFaceTrackerStaticsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CFaceAnalysis_CIFaceTrackerStatics;
#endif /* !defined(____x_ABI_CWindows_CMedia_CFaceAnalysis_CIFaceTrackerStatics_INTERFACE_DEFINED__) */
    

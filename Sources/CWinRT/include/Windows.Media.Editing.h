// WARNING: Please don't edit this file. It was generated by Swift/WinRT v0.0.1

#pragma once
// Header files for imported files
#include <inspectable.h>
#include <EventToken.h>
#include <windowscontracts.h>
#include "Windows.Foundation.h"
#include "Windows.Graphics.DirectX.Direct3D11.h"
#include "Windows.Media.Core.h"
#include "Windows.Media.Effects.h"
#include "Windows.Media.MediaProperties.h"
#include "Windows.Media.Transcoding.h"
#include "Windows.Storage.h"
#include "Windows.Storage.Streams.h"
#include "Windows.UI.h"
// Importing Collections header
#include "Windows.Foundation.Collections.h"

/* Forward Declarations */
#ifndef ____x_ABI_CWindows_CMedia_CEditing_CIBackgroundAudioTrack_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CEditing_CIBackgroundAudioTrack_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_CEditing_CIBackgroundAudioTrack __x_ABI_CWindows_CMedia_CEditing_CIBackgroundAudioTrack;

#endif // ____x_ABI_CWindows_CMedia_CEditing_CIBackgroundAudioTrack_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CEditing_CIBackgroundAudioTrackStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CEditing_CIBackgroundAudioTrackStatics_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_CEditing_CIBackgroundAudioTrackStatics __x_ABI_CWindows_CMedia_CEditing_CIBackgroundAudioTrackStatics;

#endif // ____x_ABI_CWindows_CMedia_CEditing_CIBackgroundAudioTrackStatics_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CEditing_CIEmbeddedAudioTrack_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CEditing_CIEmbeddedAudioTrack_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_CEditing_CIEmbeddedAudioTrack __x_ABI_CWindows_CMedia_CEditing_CIEmbeddedAudioTrack;

#endif // ____x_ABI_CWindows_CMedia_CEditing_CIEmbeddedAudioTrack_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CEditing_CIMediaClip_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CEditing_CIMediaClip_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_CEditing_CIMediaClip __x_ABI_CWindows_CMedia_CEditing_CIMediaClip;

#endif // ____x_ABI_CWindows_CMedia_CEditing_CIMediaClip_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CEditing_CIMediaClipStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CEditing_CIMediaClipStatics_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_CEditing_CIMediaClipStatics __x_ABI_CWindows_CMedia_CEditing_CIMediaClipStatics;

#endif // ____x_ABI_CWindows_CMedia_CEditing_CIMediaClipStatics_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CEditing_CIMediaClipStatics2_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CEditing_CIMediaClipStatics2_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_CEditing_CIMediaClipStatics2 __x_ABI_CWindows_CMedia_CEditing_CIMediaClipStatics2;

#endif // ____x_ABI_CWindows_CMedia_CEditing_CIMediaClipStatics2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CEditing_CIMediaComposition_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CEditing_CIMediaComposition_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_CEditing_CIMediaComposition __x_ABI_CWindows_CMedia_CEditing_CIMediaComposition;

#endif // ____x_ABI_CWindows_CMedia_CEditing_CIMediaComposition_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CEditing_CIMediaComposition2_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CEditing_CIMediaComposition2_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_CEditing_CIMediaComposition2 __x_ABI_CWindows_CMedia_CEditing_CIMediaComposition2;

#endif // ____x_ABI_CWindows_CMedia_CEditing_CIMediaComposition2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CEditing_CIMediaCompositionStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CEditing_CIMediaCompositionStatics_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_CEditing_CIMediaCompositionStatics __x_ABI_CWindows_CMedia_CEditing_CIMediaCompositionStatics;

#endif // ____x_ABI_CWindows_CMedia_CEditing_CIMediaCompositionStatics_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CEditing_CIMediaOverlay_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CEditing_CIMediaOverlay_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_CEditing_CIMediaOverlay __x_ABI_CWindows_CMedia_CEditing_CIMediaOverlay;

#endif // ____x_ABI_CWindows_CMedia_CEditing_CIMediaOverlay_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CEditing_CIMediaOverlayFactory_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CEditing_CIMediaOverlayFactory_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_CEditing_CIMediaOverlayFactory __x_ABI_CWindows_CMedia_CEditing_CIMediaOverlayFactory;

#endif // ____x_ABI_CWindows_CMedia_CEditing_CIMediaOverlayFactory_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CEditing_CIMediaOverlayLayer_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CEditing_CIMediaOverlayLayer_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_CEditing_CIMediaOverlayLayer __x_ABI_CWindows_CMedia_CEditing_CIMediaOverlayLayer;

#endif // ____x_ABI_CWindows_CMedia_CEditing_CIMediaOverlayLayer_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CEditing_CIMediaOverlayLayerFactory_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CEditing_CIMediaOverlayLayerFactory_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_CEditing_CIMediaOverlayLayerFactory __x_ABI_CWindows_CMedia_CEditing_CIMediaOverlayLayerFactory;

#endif // ____x_ABI_CWindows_CMedia_CEditing_CIMediaOverlayLayerFactory_FWD_DEFINED__

// Parameterized interface forward declarations (C)

// Collection interface definitions

#ifndef ____x_ABI_CWindows_CStorage_CStreams_CIRandomAccessStreamWithContentType_FWD_DEFINED__
#define ____x_ABI_CWindows_CStorage_CStreams_CIRandomAccessStreamWithContentType_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CStorage_CStreams_CIRandomAccessStreamWithContentType __x_ABI_CWindows_CStorage_CStreams_CIRandomAccessStreamWithContentType;

#endif // ____x_ABI_CWindows_CStorage_CStreams_CIRandomAccessStreamWithContentType_FWD_DEFINED__

#if !defined(____x_ABI_C__FIIterator_1___x_ABI_CWindows__CGraphics__CImaging__CImageStream_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CGraphics__CImaging__CImageStream_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CGraphics__CImaging__CImageStream __x_ABI_C__FIIterator_1___x_ABI_CWindows__CGraphics__CImaging__CImageStream;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterator_1___x_ABI_CWindows__CGraphics__CImaging__CImageStream;

    typedef struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CGraphics__CImaging__CImageStreamVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CGraphics__CImaging__CImageStream* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CGraphics__CImaging__CImageStream* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CGraphics__CImaging__CImageStream* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CGraphics__CImaging__CImageStream* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CGraphics__CImaging__CImageStream* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CGraphics__CImaging__CImageStream* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Current)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CGraphics__CImaging__CImageStream* This,
        __x_ABI_CWindows_CStorage_CStreams_CIRandomAccessStreamWithContentType** result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CGraphics__CImaging__CImageStream* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CGraphics__CImaging__CImageStream* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CGraphics__CImaging__CImageStream* This,
        UINT32 itemsLength,
        __x_ABI_CWindows_CStorage_CStreams_CIRandomAccessStreamWithContentType** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIIterator_1___x_ABI_CWindows__CGraphics__CImaging__CImageStreamVtbl;

    interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CGraphics__CImaging__CImageStream
    {
        CONST_VTBL struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CGraphics__CImaging__CImageStreamVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CGraphics__CImaging__CImageStream_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterable_1___x_ABI_CWindows__CGraphics__CImaging__CImageStream_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CGraphics__CImaging__CImageStream_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CGraphics__CImaging__CImageStream __x_ABI_C__FIIterable_1___x_ABI_CWindows__CGraphics__CImaging__CImageStream;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterable_1___x_ABI_CWindows__CGraphics__CImaging__CImageStream;

    typedef struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CGraphics__CImaging__CImageStreamVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CGraphics__CImaging__CImageStream* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CGraphics__CImaging__CImageStream* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CGraphics__CImaging__CImageStream* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CGraphics__CImaging__CImageStream* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CGraphics__CImaging__CImageStream* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CGraphics__CImaging__CImageStream* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* First)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CGraphics__CImaging__CImageStream* This,
        __x_ABI_C__FIIterator_1___x_ABI_CWindows__CGraphics__CImaging__CImageStream** result);

        END_INTERFACE
    } __x_ABI_C__FIIterable_1___x_ABI_CWindows__CGraphics__CImaging__CImageStreamVtbl;

    interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CGraphics__CImaging__CImageStream
    {
        CONST_VTBL struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CGraphics__CImaging__CImageStreamVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CGraphics__CImaging__CImageStream_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CGraphics__CImaging__CImageStream_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CGraphics__CImaging__CImageStream_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CGraphics__CImaging__CImageStream __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CGraphics__CImaging__CImageStream;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CGraphics__CImaging__CImageStream;

    typedef struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CGraphics__CImaging__CImageStreamVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CGraphics__CImaging__CImageStream* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CGraphics__CImaging__CImageStream* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CGraphics__CImaging__CImageStream* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CGraphics__CImaging__CImageStream* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CGraphics__CImaging__CImageStream* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CGraphics__CImaging__CImageStream* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CGraphics__CImaging__CImageStream* This,
        UINT32 index,
        __x_ABI_CWindows_CStorage_CStreams_CIRandomAccessStreamWithContentType** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CGraphics__CImaging__CImageStream* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CGraphics__CImaging__CImageStream* This,
        __x_ABI_CWindows_CStorage_CStreams_CIRandomAccessStreamWithContentType* value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CGraphics__CImaging__CImageStream* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        __x_ABI_CWindows_CStorage_CStreams_CIRandomAccessStreamWithContentType** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CGraphics__CImaging__CImageStreamVtbl;

    interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CGraphics__CImaging__CImageStream
    {
        CONST_VTBL struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CGraphics__CImaging__CImageStreamVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CGraphics__CImaging__CImageStream_INTERFACE_DEFINED__
    
typedef interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CGraphics__CImaging__CImageStream __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CGraphics__CImaging__CImageStream;

#if !defined(____x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CGraphics__CImaging__CImageStream_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CGraphics__CImaging__CImageStream_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CGraphics__CImaging__CImageStream __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CGraphics__CImaging__CImageStream;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CGraphics__CImaging__CImageStream;

    typedef struct __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CGraphics__CImaging__CImageStreamVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CGraphics__CImaging__CImageStream* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CGraphics__CImaging__CImageStream* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CGraphics__CImaging__CImageStream* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CGraphics__CImaging__CImageStream* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CGraphics__CImaging__CImageStream* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CGraphics__CImaging__CImageStream* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* put_Completed)(__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CGraphics__CImaging__CImageStream* This,
        __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CGraphics__CImaging__CImageStream* handler);
    HRESULT (STDMETHODCALLTYPE* get_Completed)(__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CGraphics__CImaging__CImageStream* This,
        __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CGraphics__CImaging__CImageStream** result);
    HRESULT (STDMETHODCALLTYPE* GetResults)(__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CGraphics__CImaging__CImageStream* This,
        __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CGraphics__CImaging__CImageStream** result);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CGraphics__CImaging__CImageStreamVtbl;

    interface __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CGraphics__CImaging__CImageStream
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CGraphics__CImaging__CImageStreamVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CGraphics__CImaging__CImageStream_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CGraphics__CImaging__CImageStream_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CGraphics__CImaging__CImageStream_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CGraphics__CImaging__CImageStream __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CGraphics__CImaging__CImageStream;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CGraphics__CImaging__CImageStream;

    typedef struct __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CGraphics__CImaging__CImageStreamVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CGraphics__CImaging__CImageStream* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CGraphics__CImaging__CImageStream* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CGraphics__CImaging__CImageStream* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CGraphics__CImaging__CImageStream* This,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CGraphics__CImaging__CImageStream* asyncInfo,
        enum __x_ABI_CWindows_CFoundation_CAsyncStatus asyncStatus);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CGraphics__CImaging__CImageStreamVtbl;

    interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CGraphics__CImaging__CImageStream
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CGraphics__CImaging__CImageStreamVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CGraphics__CImaging__CImageStream_INTERFACE_DEFINED__
    
typedef interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CGraphics__CImaging__CImageStream __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CGraphics__CImaging__CImageStream;

#if !defined(____x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CImageStream_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CImageStream_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CImageStream __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CImageStream;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CImageStream;

    typedef struct __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CImageStreamVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CImageStream* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CImageStream* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CImageStream* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CImageStream* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CImageStream* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CImageStream* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* put_Completed)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CImageStream* This,
        __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CGraphics__CImaging__CImageStream* handler);
    HRESULT (STDMETHODCALLTYPE* get_Completed)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CImageStream* This,
        __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CGraphics__CImaging__CImageStream** result);
    HRESULT (STDMETHODCALLTYPE* GetResults)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CImageStream* This,
        __x_ABI_CWindows_CStorage_CStreams_CIRandomAccessStreamWithContentType** result);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CImageStreamVtbl;

    interface __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CImageStream
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CImageStreamVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CImageStream_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CGraphics__CImaging__CImageStream_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CGraphics__CImaging__CImageStream_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CGraphics__CImaging__CImageStream __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CGraphics__CImaging__CImageStream;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CGraphics__CImaging__CImageStream;

    typedef struct __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CGraphics__CImaging__CImageStreamVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CGraphics__CImaging__CImageStream* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CGraphics__CImaging__CImageStream* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CGraphics__CImaging__CImageStream* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CGraphics__CImaging__CImageStream* This,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CImageStream* asyncInfo,
        enum __x_ABI_CWindows_CFoundation_CAsyncStatus asyncStatus);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CGraphics__CImaging__CImageStreamVtbl;

    interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CGraphics__CImaging__CImageStream
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CGraphics__CImaging__CImageStreamVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CGraphics__CImaging__CImageStream_INTERFACE_DEFINED__
    
typedef interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__CEditing__CBackgroundAudioTrack __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__CEditing__CBackgroundAudioTrack;

#if !defined(____x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CEditing__CBackgroundAudioTrack_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CEditing__CBackgroundAudioTrack_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CEditing__CBackgroundAudioTrack __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CEditing__CBackgroundAudioTrack;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CEditing__CBackgroundAudioTrack;

    typedef struct __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CEditing__CBackgroundAudioTrackVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CEditing__CBackgroundAudioTrack* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CEditing__CBackgroundAudioTrack* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CEditing__CBackgroundAudioTrack* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CEditing__CBackgroundAudioTrack* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CEditing__CBackgroundAudioTrack* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CEditing__CBackgroundAudioTrack* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* put_Completed)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CEditing__CBackgroundAudioTrack* This,
        __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__CEditing__CBackgroundAudioTrack* handler);
    HRESULT (STDMETHODCALLTYPE* get_Completed)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CEditing__CBackgroundAudioTrack* This,
        __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__CEditing__CBackgroundAudioTrack** result);
    HRESULT (STDMETHODCALLTYPE* GetResults)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CEditing__CBackgroundAudioTrack* This,
        __x_ABI_CWindows_CMedia_CEditing_CIBackgroundAudioTrack** result);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CEditing__CBackgroundAudioTrackVtbl;

    interface __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CEditing__CBackgroundAudioTrack
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CEditing__CBackgroundAudioTrackVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CEditing__CBackgroundAudioTrack_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__CEditing__CBackgroundAudioTrack_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__CEditing__CBackgroundAudioTrack_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__CEditing__CBackgroundAudioTrack __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__CEditing__CBackgroundAudioTrack;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__CEditing__CBackgroundAudioTrack;

    typedef struct __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__CEditing__CBackgroundAudioTrackVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__CEditing__CBackgroundAudioTrack* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__CEditing__CBackgroundAudioTrack* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__CEditing__CBackgroundAudioTrack* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__CEditing__CBackgroundAudioTrack* This,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CEditing__CBackgroundAudioTrack* asyncInfo,
        enum __x_ABI_CWindows_CFoundation_CAsyncStatus asyncStatus);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__CEditing__CBackgroundAudioTrackVtbl;

    interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__CEditing__CBackgroundAudioTrack
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__CEditing__CBackgroundAudioTrackVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__CEditing__CBackgroundAudioTrack_INTERFACE_DEFINED__
    
typedef interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__CEditing__CMediaClip __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__CEditing__CMediaClip;

#if !defined(____x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CEditing__CMediaClip_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CEditing__CMediaClip_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CEditing__CMediaClip __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CEditing__CMediaClip;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CEditing__CMediaClip;

    typedef struct __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CEditing__CMediaClipVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CEditing__CMediaClip* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CEditing__CMediaClip* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CEditing__CMediaClip* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CEditing__CMediaClip* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CEditing__CMediaClip* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CEditing__CMediaClip* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* put_Completed)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CEditing__CMediaClip* This,
        __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__CEditing__CMediaClip* handler);
    HRESULT (STDMETHODCALLTYPE* get_Completed)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CEditing__CMediaClip* This,
        __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__CEditing__CMediaClip** result);
    HRESULT (STDMETHODCALLTYPE* GetResults)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CEditing__CMediaClip* This,
        __x_ABI_CWindows_CMedia_CEditing_CIMediaClip** result);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CEditing__CMediaClipVtbl;

    interface __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CEditing__CMediaClip
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CEditing__CMediaClipVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CEditing__CMediaClip_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__CEditing__CMediaClip_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__CEditing__CMediaClip_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__CEditing__CMediaClip __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__CEditing__CMediaClip;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__CEditing__CMediaClip;

    typedef struct __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__CEditing__CMediaClipVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__CEditing__CMediaClip* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__CEditing__CMediaClip* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__CEditing__CMediaClip* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__CEditing__CMediaClip* This,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CEditing__CMediaClip* asyncInfo,
        enum __x_ABI_CWindows_CFoundation_CAsyncStatus asyncStatus);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__CEditing__CMediaClipVtbl;

    interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__CEditing__CMediaClip
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__CEditing__CMediaClipVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__CEditing__CMediaClip_INTERFACE_DEFINED__
    
typedef interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__CEditing__CMediaComposition __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__CEditing__CMediaComposition;

#if !defined(____x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CEditing__CMediaComposition_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CEditing__CMediaComposition_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CEditing__CMediaComposition __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CEditing__CMediaComposition;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CEditing__CMediaComposition;

    typedef struct __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CEditing__CMediaCompositionVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CEditing__CMediaComposition* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CEditing__CMediaComposition* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CEditing__CMediaComposition* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CEditing__CMediaComposition* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CEditing__CMediaComposition* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CEditing__CMediaComposition* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* put_Completed)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CEditing__CMediaComposition* This,
        __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__CEditing__CMediaComposition* handler);
    HRESULT (STDMETHODCALLTYPE* get_Completed)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CEditing__CMediaComposition* This,
        __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__CEditing__CMediaComposition** result);
    HRESULT (STDMETHODCALLTYPE* GetResults)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CEditing__CMediaComposition* This,
        __x_ABI_CWindows_CMedia_CEditing_CIMediaComposition** result);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CEditing__CMediaCompositionVtbl;

    interface __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CEditing__CMediaComposition
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CEditing__CMediaCompositionVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CEditing__CMediaComposition_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__CEditing__CMediaComposition_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__CEditing__CMediaComposition_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__CEditing__CMediaComposition __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__CEditing__CMediaComposition;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__CEditing__CMediaComposition;

    typedef struct __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__CEditing__CMediaCompositionVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__CEditing__CMediaComposition* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__CEditing__CMediaComposition* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__CEditing__CMediaComposition* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__CEditing__CMediaComposition* This,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CEditing__CMediaComposition* asyncInfo,
        enum __x_ABI_CWindows_CFoundation_CAsyncStatus asyncStatus);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__CEditing__CMediaCompositionVtbl;

    interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__CEditing__CMediaComposition
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__CEditing__CMediaCompositionVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__CEditing__CMediaComposition_INTERFACE_DEFINED__
    
typedef enum __x_ABI_CWindows_CMedia_CTranscoding_CTranscodeFailureReason __x_ABI_CWindows_CMedia_CTranscoding_CTranscodeFailureReason;

typedef interface __x_ABI_C__FIAsyncOperationProgressHandler_2___x_ABI_CWindows__CMedia__CTranscoding__CTranscodeFailureReason_double __x_ABI_C__FIAsyncOperationProgressHandler_2___x_ABI_CWindows__CMedia__CTranscoding__CTranscodeFailureReason_double;

typedef interface __x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CMedia__CTranscoding__CTranscodeFailureReason_double __x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CMedia__CTranscoding__CTranscodeFailureReason_double;

#if !defined(____x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2___x_ABI_CWindows__CMedia__CTranscoding__CTranscodeFailureReason_double_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2___x_ABI_CWindows__CMedia__CTranscoding__CTranscodeFailureReason_double_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2___x_ABI_CWindows__CMedia__CTranscoding__CTranscodeFailureReason_double __x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2___x_ABI_CWindows__CMedia__CTranscoding__CTranscodeFailureReason_double;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2___x_ABI_CWindows__CMedia__CTranscoding__CTranscodeFailureReason_double;

    typedef struct __x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2___x_ABI_CWindows__CMedia__CTranscoding__CTranscodeFailureReason_doubleVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2___x_ABI_CWindows__CMedia__CTranscoding__CTranscodeFailureReason_double* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2___x_ABI_CWindows__CMedia__CTranscoding__CTranscodeFailureReason_double* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2___x_ABI_CWindows__CMedia__CTranscoding__CTranscodeFailureReason_double* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2___x_ABI_CWindows__CMedia__CTranscoding__CTranscodeFailureReason_double* This,
        __x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CMedia__CTranscoding__CTranscodeFailureReason_double* asyncInfo,
        enum __x_ABI_CWindows_CFoundation_CAsyncStatus asyncStatus);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2___x_ABI_CWindows__CMedia__CTranscoding__CTranscodeFailureReason_doubleVtbl;

    interface __x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2___x_ABI_CWindows__CMedia__CTranscoding__CTranscodeFailureReason_double
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2___x_ABI_CWindows__CMedia__CTranscoding__CTranscodeFailureReason_doubleVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2___x_ABI_CWindows__CMedia__CTranscoding__CTranscodeFailureReason_double_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CMedia__CTranscoding__CTranscodeFailureReason_double_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CMedia__CTranscoding__CTranscodeFailureReason_double_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CMedia__CTranscoding__CTranscodeFailureReason_double __x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CMedia__CTranscoding__CTranscodeFailureReason_double;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CMedia__CTranscoding__CTranscodeFailureReason_double;

    typedef struct __x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CMedia__CTranscoding__CTranscodeFailureReason_doubleVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CMedia__CTranscoding__CTranscodeFailureReason_double* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CMedia__CTranscoding__CTranscodeFailureReason_double* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CMedia__CTranscoding__CTranscodeFailureReason_double* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CMedia__CTranscoding__CTranscodeFailureReason_double* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CMedia__CTranscoding__CTranscodeFailureReason_double* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CMedia__CTranscoding__CTranscodeFailureReason_double* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* put_Progress)(__x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CMedia__CTranscoding__CTranscodeFailureReason_double* This,
        __x_ABI_C__FIAsyncOperationProgressHandler_2___x_ABI_CWindows__CMedia__CTranscoding__CTranscodeFailureReason_double* handler);
    HRESULT (STDMETHODCALLTYPE* get_Progress)(__x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CMedia__CTranscoding__CTranscodeFailureReason_double* This,
        __x_ABI_C__FIAsyncOperationProgressHandler_2___x_ABI_CWindows__CMedia__CTranscoding__CTranscodeFailureReason_double** result);
    HRESULT (STDMETHODCALLTYPE* put_Completed)(__x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CMedia__CTranscoding__CTranscodeFailureReason_double* This,
        __x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2___x_ABI_CWindows__CMedia__CTranscoding__CTranscodeFailureReason_double* handler);
    HRESULT (STDMETHODCALLTYPE* get_Completed)(__x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CMedia__CTranscoding__CTranscodeFailureReason_double* This,
        __x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2___x_ABI_CWindows__CMedia__CTranscoding__CTranscodeFailureReason_double** result);
    HRESULT (STDMETHODCALLTYPE* GetResults)(__x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CMedia__CTranscoding__CTranscodeFailureReason_double* This,
        enum __x_ABI_CWindows_CMedia_CTranscoding_CTranscodeFailureReason* result);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CMedia__CTranscoding__CTranscodeFailureReason_doubleVtbl;

    interface __x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CMedia__CTranscoding__CTranscodeFailureReason_double
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CMedia__CTranscoding__CTranscodeFailureReason_doubleVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CMedia__CTranscoding__CTranscodeFailureReason_double_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIAsyncOperationProgressHandler_2___x_ABI_CWindows__CMedia__CTranscoding__CTranscodeFailureReason_double_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperationProgressHandler_2___x_ABI_CWindows__CMedia__CTranscoding__CTranscodeFailureReason_double_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperationProgressHandler_2___x_ABI_CWindows__CMedia__CTranscoding__CTranscodeFailureReason_double __x_ABI_C__FIAsyncOperationProgressHandler_2___x_ABI_CWindows__CMedia__CTranscoding__CTranscodeFailureReason_double;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperationProgressHandler_2___x_ABI_CWindows__CMedia__CTranscoding__CTranscodeFailureReason_double;

    typedef struct __x_ABI_C__FIAsyncOperationProgressHandler_2___x_ABI_CWindows__CMedia__CTranscoding__CTranscodeFailureReason_doubleVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperationProgressHandler_2___x_ABI_CWindows__CMedia__CTranscoding__CTranscodeFailureReason_double* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperationProgressHandler_2___x_ABI_CWindows__CMedia__CTranscoding__CTranscodeFailureReason_double* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperationProgressHandler_2___x_ABI_CWindows__CMedia__CTranscoding__CTranscodeFailureReason_double* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FIAsyncOperationProgressHandler_2___x_ABI_CWindows__CMedia__CTranscoding__CTranscodeFailureReason_double* This,
        __x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CMedia__CTranscoding__CTranscodeFailureReason_double* asyncInfo,
        DOUBLE progressInfo);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperationProgressHandler_2___x_ABI_CWindows__CMedia__CTranscoding__CTranscodeFailureReason_doubleVtbl;

    interface __x_ABI_C__FIAsyncOperationProgressHandler_2___x_ABI_CWindows__CMedia__CTranscoding__CTranscodeFailureReason_double
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperationProgressHandler_2___x_ABI_CWindows__CMedia__CTranscoding__CTranscodeFailureReason_doubleVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperationProgressHandler_2___x_ABI_CWindows__CMedia__CTranscoding__CTranscodeFailureReason_double_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING __x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING;

    typedef struct __x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRINGVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Key)(__x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING* This,
        HSTRING* result);
    HRESULT (STDMETHODCALLTYPE* get_Value)(__x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING* This,
        HSTRING* result);

        END_INTERFACE
    } __x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRINGVtbl;

    interface __x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING
    {
        CONST_VTBL struct __x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRINGVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING;

    typedef struct __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRINGVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Current)(__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING* This,
        __x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING** result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING* This,
        UINT32 itemsLength,
        __x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRINGVtbl;

    interface __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING
    {
        CONST_VTBL struct __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRINGVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING;

    typedef struct __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRINGVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* First)(__x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING* This,
        __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING** result);

        END_INTERFACE
    } __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRINGVtbl;

    interface __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING
    {
        CONST_VTBL struct __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRINGVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING_INTERFACE_DEFINED__
    
typedef struct __x_ABI_CWindows_CFoundation_CTimeSpan __x_ABI_CWindows_CFoundation_CTimeSpan;

#if !defined(____x_ABI_C__FIIterator_1___x_ABI_CWindows__CFoundation__CTimeSpan_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CFoundation__CTimeSpan_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CFoundation__CTimeSpan __x_ABI_C__FIIterator_1___x_ABI_CWindows__CFoundation__CTimeSpan;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterator_1___x_ABI_CWindows__CFoundation__CTimeSpan;

    typedef struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CFoundation__CTimeSpanVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CFoundation__CTimeSpan* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CFoundation__CTimeSpan* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CFoundation__CTimeSpan* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CFoundation__CTimeSpan* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CFoundation__CTimeSpan* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CFoundation__CTimeSpan* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Current)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CFoundation__CTimeSpan* This,
        struct __x_ABI_CWindows_CFoundation_CTimeSpan* result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CFoundation__CTimeSpan* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CFoundation__CTimeSpan* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CFoundation__CTimeSpan* This,
        UINT32 itemsLength,
        struct __x_ABI_CWindows_CFoundation_CTimeSpan* items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIIterator_1___x_ABI_CWindows__CFoundation__CTimeSpanVtbl;

    interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CFoundation__CTimeSpan
    {
        CONST_VTBL struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CFoundation__CTimeSpanVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CFoundation__CTimeSpan_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterable_1___x_ABI_CWindows__CFoundation__CTimeSpan_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CFoundation__CTimeSpan_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CFoundation__CTimeSpan __x_ABI_C__FIIterable_1___x_ABI_CWindows__CFoundation__CTimeSpan;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterable_1___x_ABI_CWindows__CFoundation__CTimeSpan;

    typedef struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CFoundation__CTimeSpanVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CFoundation__CTimeSpan* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CFoundation__CTimeSpan* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CFoundation__CTimeSpan* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CFoundation__CTimeSpan* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CFoundation__CTimeSpan* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CFoundation__CTimeSpan* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* First)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CFoundation__CTimeSpan* This,
        __x_ABI_C__FIIterator_1___x_ABI_CWindows__CFoundation__CTimeSpan** result);

        END_INTERFACE
    } __x_ABI_C__FIIterable_1___x_ABI_CWindows__CFoundation__CTimeSpanVtbl;

    interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CFoundation__CTimeSpan
    {
        CONST_VTBL struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CFoundation__CTimeSpanVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CFoundation__CTimeSpan_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CEditing__CBackgroundAudioTrack_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CEditing__CBackgroundAudioTrack_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CEditing__CBackgroundAudioTrack __x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CEditing__CBackgroundAudioTrack;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CEditing__CBackgroundAudioTrack;

    typedef struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CEditing__CBackgroundAudioTrackVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CEditing__CBackgroundAudioTrack* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CEditing__CBackgroundAudioTrack* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CEditing__CBackgroundAudioTrack* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CEditing__CBackgroundAudioTrack* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CEditing__CBackgroundAudioTrack* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CEditing__CBackgroundAudioTrack* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Current)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CEditing__CBackgroundAudioTrack* This,
        __x_ABI_CWindows_CMedia_CEditing_CIBackgroundAudioTrack** result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CEditing__CBackgroundAudioTrack* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CEditing__CBackgroundAudioTrack* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CEditing__CBackgroundAudioTrack* This,
        UINT32 itemsLength,
        __x_ABI_CWindows_CMedia_CEditing_CIBackgroundAudioTrack** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CEditing__CBackgroundAudioTrackVtbl;

    interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CEditing__CBackgroundAudioTrack
    {
        CONST_VTBL struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CEditing__CBackgroundAudioTrackVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CEditing__CBackgroundAudioTrack_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CEditing__CBackgroundAudioTrack_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CEditing__CBackgroundAudioTrack_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CEditing__CBackgroundAudioTrack __x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CEditing__CBackgroundAudioTrack;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CEditing__CBackgroundAudioTrack;

    typedef struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CEditing__CBackgroundAudioTrackVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CEditing__CBackgroundAudioTrack* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CEditing__CBackgroundAudioTrack* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CEditing__CBackgroundAudioTrack* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CEditing__CBackgroundAudioTrack* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CEditing__CBackgroundAudioTrack* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CEditing__CBackgroundAudioTrack* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* First)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CEditing__CBackgroundAudioTrack* This,
        __x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CEditing__CBackgroundAudioTrack** result);

        END_INTERFACE
    } __x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CEditing__CBackgroundAudioTrackVtbl;

    interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CEditing__CBackgroundAudioTrack
    {
        CONST_VTBL struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CEditing__CBackgroundAudioTrackVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CEditing__CBackgroundAudioTrack_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CEditing__CEmbeddedAudioTrack_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CEditing__CEmbeddedAudioTrack_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CEditing__CEmbeddedAudioTrack __x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CEditing__CEmbeddedAudioTrack;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CEditing__CEmbeddedAudioTrack;

    typedef struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CEditing__CEmbeddedAudioTrackVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CEditing__CEmbeddedAudioTrack* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CEditing__CEmbeddedAudioTrack* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CEditing__CEmbeddedAudioTrack* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CEditing__CEmbeddedAudioTrack* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CEditing__CEmbeddedAudioTrack* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CEditing__CEmbeddedAudioTrack* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Current)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CEditing__CEmbeddedAudioTrack* This,
        __x_ABI_CWindows_CMedia_CEditing_CIEmbeddedAudioTrack** result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CEditing__CEmbeddedAudioTrack* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CEditing__CEmbeddedAudioTrack* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CEditing__CEmbeddedAudioTrack* This,
        UINT32 itemsLength,
        __x_ABI_CWindows_CMedia_CEditing_CIEmbeddedAudioTrack** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CEditing__CEmbeddedAudioTrackVtbl;

    interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CEditing__CEmbeddedAudioTrack
    {
        CONST_VTBL struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CEditing__CEmbeddedAudioTrackVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CEditing__CEmbeddedAudioTrack_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CEditing__CEmbeddedAudioTrack_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CEditing__CEmbeddedAudioTrack_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CEditing__CEmbeddedAudioTrack __x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CEditing__CEmbeddedAudioTrack;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CEditing__CEmbeddedAudioTrack;

    typedef struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CEditing__CEmbeddedAudioTrackVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CEditing__CEmbeddedAudioTrack* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CEditing__CEmbeddedAudioTrack* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CEditing__CEmbeddedAudioTrack* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CEditing__CEmbeddedAudioTrack* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CEditing__CEmbeddedAudioTrack* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CEditing__CEmbeddedAudioTrack* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* First)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CEditing__CEmbeddedAudioTrack* This,
        __x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CEditing__CEmbeddedAudioTrack** result);

        END_INTERFACE
    } __x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CEditing__CEmbeddedAudioTrackVtbl;

    interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CEditing__CEmbeddedAudioTrack
    {
        CONST_VTBL struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CEditing__CEmbeddedAudioTrackVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CEditing__CEmbeddedAudioTrack_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CEditing__CMediaClip_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CEditing__CMediaClip_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CEditing__CMediaClip __x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CEditing__CMediaClip;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CEditing__CMediaClip;

    typedef struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CEditing__CMediaClipVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CEditing__CMediaClip* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CEditing__CMediaClip* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CEditing__CMediaClip* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CEditing__CMediaClip* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CEditing__CMediaClip* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CEditing__CMediaClip* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Current)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CEditing__CMediaClip* This,
        __x_ABI_CWindows_CMedia_CEditing_CIMediaClip** result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CEditing__CMediaClip* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CEditing__CMediaClip* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CEditing__CMediaClip* This,
        UINT32 itemsLength,
        __x_ABI_CWindows_CMedia_CEditing_CIMediaClip** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CEditing__CMediaClipVtbl;

    interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CEditing__CMediaClip
    {
        CONST_VTBL struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CEditing__CMediaClipVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CEditing__CMediaClip_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CEditing__CMediaClip_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CEditing__CMediaClip_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CEditing__CMediaClip __x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CEditing__CMediaClip;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CEditing__CMediaClip;

    typedef struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CEditing__CMediaClipVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CEditing__CMediaClip* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CEditing__CMediaClip* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CEditing__CMediaClip* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CEditing__CMediaClip* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CEditing__CMediaClip* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CEditing__CMediaClip* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* First)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CEditing__CMediaClip* This,
        __x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CEditing__CMediaClip** result);

        END_INTERFACE
    } __x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CEditing__CMediaClipVtbl;

    interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CEditing__CMediaClip
    {
        CONST_VTBL struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CEditing__CMediaClipVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CEditing__CMediaClip_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CEditing__CMediaOverlay_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CEditing__CMediaOverlay_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CEditing__CMediaOverlay __x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CEditing__CMediaOverlay;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CEditing__CMediaOverlay;

    typedef struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CEditing__CMediaOverlayVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CEditing__CMediaOverlay* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CEditing__CMediaOverlay* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CEditing__CMediaOverlay* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CEditing__CMediaOverlay* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CEditing__CMediaOverlay* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CEditing__CMediaOverlay* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Current)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CEditing__CMediaOverlay* This,
        __x_ABI_CWindows_CMedia_CEditing_CIMediaOverlay** result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CEditing__CMediaOverlay* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CEditing__CMediaOverlay* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CEditing__CMediaOverlay* This,
        UINT32 itemsLength,
        __x_ABI_CWindows_CMedia_CEditing_CIMediaOverlay** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CEditing__CMediaOverlayVtbl;

    interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CEditing__CMediaOverlay
    {
        CONST_VTBL struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CEditing__CMediaOverlayVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CEditing__CMediaOverlay_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CEditing__CMediaOverlay_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CEditing__CMediaOverlay_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CEditing__CMediaOverlay __x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CEditing__CMediaOverlay;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CEditing__CMediaOverlay;

    typedef struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CEditing__CMediaOverlayVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CEditing__CMediaOverlay* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CEditing__CMediaOverlay* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CEditing__CMediaOverlay* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CEditing__CMediaOverlay* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CEditing__CMediaOverlay* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CEditing__CMediaOverlay* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* First)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CEditing__CMediaOverlay* This,
        __x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CEditing__CMediaOverlay** result);

        END_INTERFACE
    } __x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CEditing__CMediaOverlayVtbl;

    interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CEditing__CMediaOverlay
    {
        CONST_VTBL struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CEditing__CMediaOverlayVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CEditing__CMediaOverlay_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CEditing__CMediaOverlayLayer_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CEditing__CMediaOverlayLayer_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CEditing__CMediaOverlayLayer __x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CEditing__CMediaOverlayLayer;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CEditing__CMediaOverlayLayer;

    typedef struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CEditing__CMediaOverlayLayerVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CEditing__CMediaOverlayLayer* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CEditing__CMediaOverlayLayer* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CEditing__CMediaOverlayLayer* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CEditing__CMediaOverlayLayer* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CEditing__CMediaOverlayLayer* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CEditing__CMediaOverlayLayer* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Current)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CEditing__CMediaOverlayLayer* This,
        __x_ABI_CWindows_CMedia_CEditing_CIMediaOverlayLayer** result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CEditing__CMediaOverlayLayer* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CEditing__CMediaOverlayLayer* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CEditing__CMediaOverlayLayer* This,
        UINT32 itemsLength,
        __x_ABI_CWindows_CMedia_CEditing_CIMediaOverlayLayer** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CEditing__CMediaOverlayLayerVtbl;

    interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CEditing__CMediaOverlayLayer
    {
        CONST_VTBL struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CEditing__CMediaOverlayLayerVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CEditing__CMediaOverlayLayer_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CEditing__CMediaOverlayLayer_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CEditing__CMediaOverlayLayer_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CEditing__CMediaOverlayLayer __x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CEditing__CMediaOverlayLayer;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CEditing__CMediaOverlayLayer;

    typedef struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CEditing__CMediaOverlayLayerVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CEditing__CMediaOverlayLayer* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CEditing__CMediaOverlayLayer* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CEditing__CMediaOverlayLayer* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CEditing__CMediaOverlayLayer* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CEditing__CMediaOverlayLayer* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CEditing__CMediaOverlayLayer* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* First)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CEditing__CMediaOverlayLayer* This,
        __x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CEditing__CMediaOverlayLayer** result);

        END_INTERFACE
    } __x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CEditing__CMediaOverlayLayerVtbl;

    interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CEditing__CMediaOverlayLayer
    {
        CONST_VTBL struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CEditing__CMediaOverlayLayerVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CEditing__CMediaOverlayLayer_INTERFACE_DEFINED__
    
#ifndef ____x_ABI_CWindows_CMedia_CEffects_CIAudioEffectDefinition_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CEffects_CIAudioEffectDefinition_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_CEffects_CIAudioEffectDefinition __x_ABI_CWindows_CMedia_CEffects_CIAudioEffectDefinition;

#endif // ____x_ABI_CWindows_CMedia_CEffects_CIAudioEffectDefinition_FWD_DEFINED__

#if !defined(____x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CEffects__CIAudioEffectDefinition_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CEffects__CIAudioEffectDefinition_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CEffects__CIAudioEffectDefinition __x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CEffects__CIAudioEffectDefinition;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CEffects__CIAudioEffectDefinition;

    typedef struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CEffects__CIAudioEffectDefinitionVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CEffects__CIAudioEffectDefinition* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CEffects__CIAudioEffectDefinition* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CEffects__CIAudioEffectDefinition* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CEffects__CIAudioEffectDefinition* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CEffects__CIAudioEffectDefinition* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CEffects__CIAudioEffectDefinition* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Current)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CEffects__CIAudioEffectDefinition* This,
        __x_ABI_CWindows_CMedia_CEffects_CIAudioEffectDefinition** result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CEffects__CIAudioEffectDefinition* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CEffects__CIAudioEffectDefinition* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CEffects__CIAudioEffectDefinition* This,
        UINT32 itemsLength,
        __x_ABI_CWindows_CMedia_CEffects_CIAudioEffectDefinition** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CEffects__CIAudioEffectDefinitionVtbl;

    interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CEffects__CIAudioEffectDefinition
    {
        CONST_VTBL struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CEffects__CIAudioEffectDefinitionVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CEffects__CIAudioEffectDefinition_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CEffects__CIAudioEffectDefinition_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CEffects__CIAudioEffectDefinition_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CEffects__CIAudioEffectDefinition __x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CEffects__CIAudioEffectDefinition;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CEffects__CIAudioEffectDefinition;

    typedef struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CEffects__CIAudioEffectDefinitionVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CEffects__CIAudioEffectDefinition* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CEffects__CIAudioEffectDefinition* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CEffects__CIAudioEffectDefinition* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CEffects__CIAudioEffectDefinition* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CEffects__CIAudioEffectDefinition* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CEffects__CIAudioEffectDefinition* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* First)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CEffects__CIAudioEffectDefinition* This,
        __x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CEffects__CIAudioEffectDefinition** result);

        END_INTERFACE
    } __x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CEffects__CIAudioEffectDefinitionVtbl;

    interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CEffects__CIAudioEffectDefinition
    {
        CONST_VTBL struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CEffects__CIAudioEffectDefinitionVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CEffects__CIAudioEffectDefinition_INTERFACE_DEFINED__
    
#ifndef ____x_ABI_CWindows_CMedia_CEffects_CIVideoEffectDefinition_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CEffects_CIVideoEffectDefinition_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_CEffects_CIVideoEffectDefinition __x_ABI_CWindows_CMedia_CEffects_CIVideoEffectDefinition;

#endif // ____x_ABI_CWindows_CMedia_CEffects_CIVideoEffectDefinition_FWD_DEFINED__

#if !defined(____x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CEffects__CIVideoEffectDefinition_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CEffects__CIVideoEffectDefinition_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CEffects__CIVideoEffectDefinition __x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CEffects__CIVideoEffectDefinition;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CEffects__CIVideoEffectDefinition;

    typedef struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CEffects__CIVideoEffectDefinitionVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CEffects__CIVideoEffectDefinition* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CEffects__CIVideoEffectDefinition* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CEffects__CIVideoEffectDefinition* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CEffects__CIVideoEffectDefinition* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CEffects__CIVideoEffectDefinition* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CEffects__CIVideoEffectDefinition* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Current)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CEffects__CIVideoEffectDefinition* This,
        __x_ABI_CWindows_CMedia_CEffects_CIVideoEffectDefinition** result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CEffects__CIVideoEffectDefinition* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CEffects__CIVideoEffectDefinition* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CEffects__CIVideoEffectDefinition* This,
        UINT32 itemsLength,
        __x_ABI_CWindows_CMedia_CEffects_CIVideoEffectDefinition** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CEffects__CIVideoEffectDefinitionVtbl;

    interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CEffects__CIVideoEffectDefinition
    {
        CONST_VTBL struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CEffects__CIVideoEffectDefinitionVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CEffects__CIVideoEffectDefinition_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CEffects__CIVideoEffectDefinition_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CEffects__CIVideoEffectDefinition_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CEffects__CIVideoEffectDefinition __x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CEffects__CIVideoEffectDefinition;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CEffects__CIVideoEffectDefinition;

    typedef struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CEffects__CIVideoEffectDefinitionVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CEffects__CIVideoEffectDefinition* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CEffects__CIVideoEffectDefinition* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CEffects__CIVideoEffectDefinition* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CEffects__CIVideoEffectDefinition* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CEffects__CIVideoEffectDefinition* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CEffects__CIVideoEffectDefinition* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* First)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CEffects__CIVideoEffectDefinition* This,
        __x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CEffects__CIVideoEffectDefinition** result);

        END_INTERFACE
    } __x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CEffects__CIVideoEffectDefinitionVtbl;

    interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CEffects__CIVideoEffectDefinition
    {
        CONST_VTBL struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CEffects__CIVideoEffectDefinitionVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CEffects__CIVideoEffectDefinition_INTERFACE_DEFINED__
    
typedef interface __x_ABI_C__FIMapView_2_HSTRING_HSTRING __x_ABI_C__FIMapView_2_HSTRING_HSTRING;

#if !defined(____x_ABI_C__FIMapView_2_HSTRING_HSTRING_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIMapView_2_HSTRING_HSTRING_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIMapView_2_HSTRING_HSTRING __x_ABI_C__FIMapView_2_HSTRING_HSTRING;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIMapView_2_HSTRING_HSTRING;

    typedef struct __x_ABI_C__FIMapView_2_HSTRING_HSTRINGVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIMapView_2_HSTRING_HSTRING* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIMapView_2_HSTRING_HSTRING* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIMapView_2_HSTRING_HSTRING* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIMapView_2_HSTRING_HSTRING* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIMapView_2_HSTRING_HSTRING* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIMapView_2_HSTRING_HSTRING* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* Lookup)(__x_ABI_C__FIMapView_2_HSTRING_HSTRING* This,
        HSTRING key,
        HSTRING* result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIMapView_2_HSTRING_HSTRING* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* HasKey)(__x_ABI_C__FIMapView_2_HSTRING_HSTRING* This,
        HSTRING key,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* Split)(__x_ABI_C__FIMapView_2_HSTRING_HSTRING* This,
        __x_ABI_C__FIMapView_2_HSTRING_HSTRING** first,
        __x_ABI_C__FIMapView_2_HSTRING_HSTRING** second);

        END_INTERFACE
    } __x_ABI_C__FIMapView_2_HSTRING_HSTRINGVtbl;

    interface __x_ABI_C__FIMapView_2_HSTRING_HSTRING
    {
        CONST_VTBL struct __x_ABI_C__FIMapView_2_HSTRING_HSTRINGVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIMapView_2_HSTRING_HSTRING_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIMap_2_HSTRING_HSTRING_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIMap_2_HSTRING_HSTRING_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIMap_2_HSTRING_HSTRING __x_ABI_C__FIMap_2_HSTRING_HSTRING;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIMap_2_HSTRING_HSTRING;

    typedef struct __x_ABI_C__FIMap_2_HSTRING_HSTRINGVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIMap_2_HSTRING_HSTRING* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIMap_2_HSTRING_HSTRING* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIMap_2_HSTRING_HSTRING* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIMap_2_HSTRING_HSTRING* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIMap_2_HSTRING_HSTRING* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIMap_2_HSTRING_HSTRING* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* Lookup)(__x_ABI_C__FIMap_2_HSTRING_HSTRING* This,
        HSTRING key,
        HSTRING* result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIMap_2_HSTRING_HSTRING* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* HasKey)(__x_ABI_C__FIMap_2_HSTRING_HSTRING* This,
        HSTRING key,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetView)(__x_ABI_C__FIMap_2_HSTRING_HSTRING* This,
        __x_ABI_C__FIMapView_2_HSTRING_HSTRING** result);
    HRESULT (STDMETHODCALLTYPE* Insert)(__x_ABI_C__FIMap_2_HSTRING_HSTRING* This,
        HSTRING key,
        HSTRING value,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* Remove)(__x_ABI_C__FIMap_2_HSTRING_HSTRING* This,
        HSTRING key);
    HRESULT (STDMETHODCALLTYPE* Clear)(__x_ABI_C__FIMap_2_HSTRING_HSTRING* This);

        END_INTERFACE
    } __x_ABI_C__FIMap_2_HSTRING_HSTRINGVtbl;

    interface __x_ABI_C__FIMap_2_HSTRING_HSTRING
    {
        CONST_VTBL struct __x_ABI_C__FIMap_2_HSTRING_HSTRINGVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIMap_2_HSTRING_HSTRING_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CEditing__CBackgroundAudioTrack_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CEditing__CBackgroundAudioTrack_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CEditing__CBackgroundAudioTrack __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CEditing__CBackgroundAudioTrack;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CEditing__CBackgroundAudioTrack;

    typedef struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CEditing__CBackgroundAudioTrackVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CEditing__CBackgroundAudioTrack* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CEditing__CBackgroundAudioTrack* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CEditing__CBackgroundAudioTrack* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CEditing__CBackgroundAudioTrack* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CEditing__CBackgroundAudioTrack* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CEditing__CBackgroundAudioTrack* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CEditing__CBackgroundAudioTrack* This,
        UINT32 index,
        __x_ABI_CWindows_CMedia_CEditing_CIBackgroundAudioTrack** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CEditing__CBackgroundAudioTrack* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CEditing__CBackgroundAudioTrack* This,
        __x_ABI_CWindows_CMedia_CEditing_CIBackgroundAudioTrack* value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CEditing__CBackgroundAudioTrack* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        __x_ABI_CWindows_CMedia_CEditing_CIBackgroundAudioTrack** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CEditing__CBackgroundAudioTrackVtbl;

    interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CEditing__CBackgroundAudioTrack
    {
        CONST_VTBL struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CEditing__CBackgroundAudioTrackVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CEditing__CBackgroundAudioTrack_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CEditing__CEmbeddedAudioTrack_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CEditing__CEmbeddedAudioTrack_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CEditing__CEmbeddedAudioTrack __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CEditing__CEmbeddedAudioTrack;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CEditing__CEmbeddedAudioTrack;

    typedef struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CEditing__CEmbeddedAudioTrackVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CEditing__CEmbeddedAudioTrack* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CEditing__CEmbeddedAudioTrack* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CEditing__CEmbeddedAudioTrack* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CEditing__CEmbeddedAudioTrack* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CEditing__CEmbeddedAudioTrack* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CEditing__CEmbeddedAudioTrack* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CEditing__CEmbeddedAudioTrack* This,
        UINT32 index,
        __x_ABI_CWindows_CMedia_CEditing_CIEmbeddedAudioTrack** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CEditing__CEmbeddedAudioTrack* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CEditing__CEmbeddedAudioTrack* This,
        __x_ABI_CWindows_CMedia_CEditing_CIEmbeddedAudioTrack* value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CEditing__CEmbeddedAudioTrack* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        __x_ABI_CWindows_CMedia_CEditing_CIEmbeddedAudioTrack** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CEditing__CEmbeddedAudioTrackVtbl;

    interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CEditing__CEmbeddedAudioTrack
    {
        CONST_VTBL struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CEditing__CEmbeddedAudioTrackVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CEditing__CEmbeddedAudioTrack_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CEditing__CMediaClip_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CEditing__CMediaClip_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CEditing__CMediaClip __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CEditing__CMediaClip;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CEditing__CMediaClip;

    typedef struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CEditing__CMediaClipVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CEditing__CMediaClip* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CEditing__CMediaClip* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CEditing__CMediaClip* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CEditing__CMediaClip* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CEditing__CMediaClip* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CEditing__CMediaClip* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CEditing__CMediaClip* This,
        UINT32 index,
        __x_ABI_CWindows_CMedia_CEditing_CIMediaClip** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CEditing__CMediaClip* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CEditing__CMediaClip* This,
        __x_ABI_CWindows_CMedia_CEditing_CIMediaClip* value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CEditing__CMediaClip* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        __x_ABI_CWindows_CMedia_CEditing_CIMediaClip** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CEditing__CMediaClipVtbl;

    interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CEditing__CMediaClip
    {
        CONST_VTBL struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CEditing__CMediaClipVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CEditing__CMediaClip_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CEditing__CMediaOverlay_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CEditing__CMediaOverlay_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CEditing__CMediaOverlay __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CEditing__CMediaOverlay;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CEditing__CMediaOverlay;

    typedef struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CEditing__CMediaOverlayVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CEditing__CMediaOverlay* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CEditing__CMediaOverlay* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CEditing__CMediaOverlay* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CEditing__CMediaOverlay* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CEditing__CMediaOverlay* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CEditing__CMediaOverlay* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CEditing__CMediaOverlay* This,
        UINT32 index,
        __x_ABI_CWindows_CMedia_CEditing_CIMediaOverlay** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CEditing__CMediaOverlay* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CEditing__CMediaOverlay* This,
        __x_ABI_CWindows_CMedia_CEditing_CIMediaOverlay* value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CEditing__CMediaOverlay* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        __x_ABI_CWindows_CMedia_CEditing_CIMediaOverlay** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CEditing__CMediaOverlayVtbl;

    interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CEditing__CMediaOverlay
    {
        CONST_VTBL struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CEditing__CMediaOverlayVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CEditing__CMediaOverlay_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CEditing__CMediaOverlayLayer_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CEditing__CMediaOverlayLayer_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CEditing__CMediaOverlayLayer __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CEditing__CMediaOverlayLayer;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CEditing__CMediaOverlayLayer;

    typedef struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CEditing__CMediaOverlayLayerVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CEditing__CMediaOverlayLayer* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CEditing__CMediaOverlayLayer* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CEditing__CMediaOverlayLayer* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CEditing__CMediaOverlayLayer* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CEditing__CMediaOverlayLayer* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CEditing__CMediaOverlayLayer* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CEditing__CMediaOverlayLayer* This,
        UINT32 index,
        __x_ABI_CWindows_CMedia_CEditing_CIMediaOverlayLayer** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CEditing__CMediaOverlayLayer* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CEditing__CMediaOverlayLayer* This,
        __x_ABI_CWindows_CMedia_CEditing_CIMediaOverlayLayer* value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CEditing__CMediaOverlayLayer* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        __x_ABI_CWindows_CMedia_CEditing_CIMediaOverlayLayer** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CEditing__CMediaOverlayLayerVtbl;

    interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CEditing__CMediaOverlayLayer
    {
        CONST_VTBL struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CEditing__CMediaOverlayLayerVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CEditing__CMediaOverlayLayer_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CEffects__CIAudioEffectDefinition_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CEffects__CIAudioEffectDefinition_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CEffects__CIAudioEffectDefinition __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CEffects__CIAudioEffectDefinition;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CEffects__CIAudioEffectDefinition;

    typedef struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CEffects__CIAudioEffectDefinitionVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CEffects__CIAudioEffectDefinition* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CEffects__CIAudioEffectDefinition* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CEffects__CIAudioEffectDefinition* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CEffects__CIAudioEffectDefinition* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CEffects__CIAudioEffectDefinition* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CEffects__CIAudioEffectDefinition* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CEffects__CIAudioEffectDefinition* This,
        UINT32 index,
        __x_ABI_CWindows_CMedia_CEffects_CIAudioEffectDefinition** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CEffects__CIAudioEffectDefinition* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CEffects__CIAudioEffectDefinition* This,
        __x_ABI_CWindows_CMedia_CEffects_CIAudioEffectDefinition* value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CEffects__CIAudioEffectDefinition* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        __x_ABI_CWindows_CMedia_CEffects_CIAudioEffectDefinition** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CEffects__CIAudioEffectDefinitionVtbl;

    interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CEffects__CIAudioEffectDefinition
    {
        CONST_VTBL struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CEffects__CIAudioEffectDefinitionVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CEffects__CIAudioEffectDefinition_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CEffects__CIVideoEffectDefinition_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CEffects__CIVideoEffectDefinition_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CEffects__CIVideoEffectDefinition __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CEffects__CIVideoEffectDefinition;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CEffects__CIVideoEffectDefinition;

    typedef struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CEffects__CIVideoEffectDefinitionVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CEffects__CIVideoEffectDefinition* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CEffects__CIVideoEffectDefinition* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CEffects__CIVideoEffectDefinition* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CEffects__CIVideoEffectDefinition* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CEffects__CIVideoEffectDefinition* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CEffects__CIVideoEffectDefinition* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CEffects__CIVideoEffectDefinition* This,
        UINT32 index,
        __x_ABI_CWindows_CMedia_CEffects_CIVideoEffectDefinition** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CEffects__CIVideoEffectDefinition* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CEffects__CIVideoEffectDefinition* This,
        __x_ABI_CWindows_CMedia_CEffects_CIVideoEffectDefinition* value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CEffects__CIVideoEffectDefinition* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        __x_ABI_CWindows_CMedia_CEffects_CIVideoEffectDefinition** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CEffects__CIVideoEffectDefinitionVtbl;

    interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CEffects__CIVideoEffectDefinition
    {
        CONST_VTBL struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CEffects__CIVideoEffectDefinitionVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CEffects__CIVideoEffectDefinition_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CEditing__CBackgroundAudioTrack_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CEditing__CBackgroundAudioTrack_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CEditing__CBackgroundAudioTrack __x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CEditing__CBackgroundAudioTrack;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CEditing__CBackgroundAudioTrack;

    typedef struct __x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CEditing__CBackgroundAudioTrackVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CEditing__CBackgroundAudioTrack* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CEditing__CBackgroundAudioTrack* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CEditing__CBackgroundAudioTrack* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CEditing__CBackgroundAudioTrack* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CEditing__CBackgroundAudioTrack* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CEditing__CBackgroundAudioTrack* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CEditing__CBackgroundAudioTrack* This,
        UINT32 index,
        __x_ABI_CWindows_CMedia_CEditing_CIBackgroundAudioTrack** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CEditing__CBackgroundAudioTrack* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* GetView)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CEditing__CBackgroundAudioTrack* This,
        __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CEditing__CBackgroundAudioTrack** result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CEditing__CBackgroundAudioTrack* This,
        __x_ABI_CWindows_CMedia_CEditing_CIBackgroundAudioTrack* value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* SetAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CEditing__CBackgroundAudioTrack* This,
        UINT32 index,
        __x_ABI_CWindows_CMedia_CEditing_CIBackgroundAudioTrack* value);
    HRESULT (STDMETHODCALLTYPE* InsertAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CEditing__CBackgroundAudioTrack* This,
        UINT32 index,
        __x_ABI_CWindows_CMedia_CEditing_CIBackgroundAudioTrack* value);
    HRESULT (STDMETHODCALLTYPE* RemoveAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CEditing__CBackgroundAudioTrack* This,
        UINT32 index);
    HRESULT (STDMETHODCALLTYPE* Append)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CEditing__CBackgroundAudioTrack* This,
        __x_ABI_CWindows_CMedia_CEditing_CIBackgroundAudioTrack* value);
    HRESULT (STDMETHODCALLTYPE* RemoveAtEnd)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CEditing__CBackgroundAudioTrack* This);
    HRESULT (STDMETHODCALLTYPE* Clear)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CEditing__CBackgroundAudioTrack* This);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CEditing__CBackgroundAudioTrack* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        __x_ABI_CWindows_CMedia_CEditing_CIBackgroundAudioTrack** items,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* ReplaceAll)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CEditing__CBackgroundAudioTrack* This,
        UINT32 itemsLength,
        __x_ABI_CWindows_CMedia_CEditing_CIBackgroundAudioTrack** items);

        END_INTERFACE
    } __x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CEditing__CBackgroundAudioTrackVtbl;

    interface __x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CEditing__CBackgroundAudioTrack
    {
        CONST_VTBL struct __x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CEditing__CBackgroundAudioTrackVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CEditing__CBackgroundAudioTrack_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CEditing__CMediaClip_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CEditing__CMediaClip_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CEditing__CMediaClip __x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CEditing__CMediaClip;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CEditing__CMediaClip;

    typedef struct __x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CEditing__CMediaClipVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CEditing__CMediaClip* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CEditing__CMediaClip* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CEditing__CMediaClip* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CEditing__CMediaClip* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CEditing__CMediaClip* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CEditing__CMediaClip* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CEditing__CMediaClip* This,
        UINT32 index,
        __x_ABI_CWindows_CMedia_CEditing_CIMediaClip** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CEditing__CMediaClip* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* GetView)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CEditing__CMediaClip* This,
        __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CEditing__CMediaClip** result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CEditing__CMediaClip* This,
        __x_ABI_CWindows_CMedia_CEditing_CIMediaClip* value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* SetAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CEditing__CMediaClip* This,
        UINT32 index,
        __x_ABI_CWindows_CMedia_CEditing_CIMediaClip* value);
    HRESULT (STDMETHODCALLTYPE* InsertAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CEditing__CMediaClip* This,
        UINT32 index,
        __x_ABI_CWindows_CMedia_CEditing_CIMediaClip* value);
    HRESULT (STDMETHODCALLTYPE* RemoveAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CEditing__CMediaClip* This,
        UINT32 index);
    HRESULT (STDMETHODCALLTYPE* Append)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CEditing__CMediaClip* This,
        __x_ABI_CWindows_CMedia_CEditing_CIMediaClip* value);
    HRESULT (STDMETHODCALLTYPE* RemoveAtEnd)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CEditing__CMediaClip* This);
    HRESULT (STDMETHODCALLTYPE* Clear)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CEditing__CMediaClip* This);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CEditing__CMediaClip* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        __x_ABI_CWindows_CMedia_CEditing_CIMediaClip** items,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* ReplaceAll)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CEditing__CMediaClip* This,
        UINT32 itemsLength,
        __x_ABI_CWindows_CMedia_CEditing_CIMediaClip** items);

        END_INTERFACE
    } __x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CEditing__CMediaClipVtbl;

    interface __x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CEditing__CMediaClip
    {
        CONST_VTBL struct __x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CEditing__CMediaClipVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CEditing__CMediaClip_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CEditing__CMediaOverlay_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CEditing__CMediaOverlay_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CEditing__CMediaOverlay __x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CEditing__CMediaOverlay;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CEditing__CMediaOverlay;

    typedef struct __x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CEditing__CMediaOverlayVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CEditing__CMediaOverlay* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CEditing__CMediaOverlay* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CEditing__CMediaOverlay* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CEditing__CMediaOverlay* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CEditing__CMediaOverlay* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CEditing__CMediaOverlay* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CEditing__CMediaOverlay* This,
        UINT32 index,
        __x_ABI_CWindows_CMedia_CEditing_CIMediaOverlay** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CEditing__CMediaOverlay* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* GetView)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CEditing__CMediaOverlay* This,
        __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CEditing__CMediaOverlay** result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CEditing__CMediaOverlay* This,
        __x_ABI_CWindows_CMedia_CEditing_CIMediaOverlay* value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* SetAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CEditing__CMediaOverlay* This,
        UINT32 index,
        __x_ABI_CWindows_CMedia_CEditing_CIMediaOverlay* value);
    HRESULT (STDMETHODCALLTYPE* InsertAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CEditing__CMediaOverlay* This,
        UINT32 index,
        __x_ABI_CWindows_CMedia_CEditing_CIMediaOverlay* value);
    HRESULT (STDMETHODCALLTYPE* RemoveAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CEditing__CMediaOverlay* This,
        UINT32 index);
    HRESULT (STDMETHODCALLTYPE* Append)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CEditing__CMediaOverlay* This,
        __x_ABI_CWindows_CMedia_CEditing_CIMediaOverlay* value);
    HRESULT (STDMETHODCALLTYPE* RemoveAtEnd)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CEditing__CMediaOverlay* This);
    HRESULT (STDMETHODCALLTYPE* Clear)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CEditing__CMediaOverlay* This);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CEditing__CMediaOverlay* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        __x_ABI_CWindows_CMedia_CEditing_CIMediaOverlay** items,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* ReplaceAll)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CEditing__CMediaOverlay* This,
        UINT32 itemsLength,
        __x_ABI_CWindows_CMedia_CEditing_CIMediaOverlay** items);

        END_INTERFACE
    } __x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CEditing__CMediaOverlayVtbl;

    interface __x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CEditing__CMediaOverlay
    {
        CONST_VTBL struct __x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CEditing__CMediaOverlayVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CEditing__CMediaOverlay_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CEditing__CMediaOverlayLayer_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CEditing__CMediaOverlayLayer_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CEditing__CMediaOverlayLayer __x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CEditing__CMediaOverlayLayer;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CEditing__CMediaOverlayLayer;

    typedef struct __x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CEditing__CMediaOverlayLayerVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CEditing__CMediaOverlayLayer* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CEditing__CMediaOverlayLayer* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CEditing__CMediaOverlayLayer* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CEditing__CMediaOverlayLayer* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CEditing__CMediaOverlayLayer* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CEditing__CMediaOverlayLayer* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CEditing__CMediaOverlayLayer* This,
        UINT32 index,
        __x_ABI_CWindows_CMedia_CEditing_CIMediaOverlayLayer** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CEditing__CMediaOverlayLayer* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* GetView)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CEditing__CMediaOverlayLayer* This,
        __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CEditing__CMediaOverlayLayer** result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CEditing__CMediaOverlayLayer* This,
        __x_ABI_CWindows_CMedia_CEditing_CIMediaOverlayLayer* value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* SetAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CEditing__CMediaOverlayLayer* This,
        UINT32 index,
        __x_ABI_CWindows_CMedia_CEditing_CIMediaOverlayLayer* value);
    HRESULT (STDMETHODCALLTYPE* InsertAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CEditing__CMediaOverlayLayer* This,
        UINT32 index,
        __x_ABI_CWindows_CMedia_CEditing_CIMediaOverlayLayer* value);
    HRESULT (STDMETHODCALLTYPE* RemoveAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CEditing__CMediaOverlayLayer* This,
        UINT32 index);
    HRESULT (STDMETHODCALLTYPE* Append)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CEditing__CMediaOverlayLayer* This,
        __x_ABI_CWindows_CMedia_CEditing_CIMediaOverlayLayer* value);
    HRESULT (STDMETHODCALLTYPE* RemoveAtEnd)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CEditing__CMediaOverlayLayer* This);
    HRESULT (STDMETHODCALLTYPE* Clear)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CEditing__CMediaOverlayLayer* This);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CEditing__CMediaOverlayLayer* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        __x_ABI_CWindows_CMedia_CEditing_CIMediaOverlayLayer** items,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* ReplaceAll)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CEditing__CMediaOverlayLayer* This,
        UINT32 itemsLength,
        __x_ABI_CWindows_CMedia_CEditing_CIMediaOverlayLayer** items);

        END_INTERFACE
    } __x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CEditing__CMediaOverlayLayerVtbl;

    interface __x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CEditing__CMediaOverlayLayer
    {
        CONST_VTBL struct __x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CEditing__CMediaOverlayLayerVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CEditing__CMediaOverlayLayer_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CEffects__CIAudioEffectDefinition_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CEffects__CIAudioEffectDefinition_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CEffects__CIAudioEffectDefinition __x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CEffects__CIAudioEffectDefinition;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CEffects__CIAudioEffectDefinition;

    typedef struct __x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CEffects__CIAudioEffectDefinitionVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CEffects__CIAudioEffectDefinition* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CEffects__CIAudioEffectDefinition* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CEffects__CIAudioEffectDefinition* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CEffects__CIAudioEffectDefinition* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CEffects__CIAudioEffectDefinition* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CEffects__CIAudioEffectDefinition* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CEffects__CIAudioEffectDefinition* This,
        UINT32 index,
        __x_ABI_CWindows_CMedia_CEffects_CIAudioEffectDefinition** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CEffects__CIAudioEffectDefinition* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* GetView)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CEffects__CIAudioEffectDefinition* This,
        __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CEffects__CIAudioEffectDefinition** result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CEffects__CIAudioEffectDefinition* This,
        __x_ABI_CWindows_CMedia_CEffects_CIAudioEffectDefinition* value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* SetAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CEffects__CIAudioEffectDefinition* This,
        UINT32 index,
        __x_ABI_CWindows_CMedia_CEffects_CIAudioEffectDefinition* value);
    HRESULT (STDMETHODCALLTYPE* InsertAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CEffects__CIAudioEffectDefinition* This,
        UINT32 index,
        __x_ABI_CWindows_CMedia_CEffects_CIAudioEffectDefinition* value);
    HRESULT (STDMETHODCALLTYPE* RemoveAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CEffects__CIAudioEffectDefinition* This,
        UINT32 index);
    HRESULT (STDMETHODCALLTYPE* Append)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CEffects__CIAudioEffectDefinition* This,
        __x_ABI_CWindows_CMedia_CEffects_CIAudioEffectDefinition* value);
    HRESULT (STDMETHODCALLTYPE* RemoveAtEnd)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CEffects__CIAudioEffectDefinition* This);
    HRESULT (STDMETHODCALLTYPE* Clear)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CEffects__CIAudioEffectDefinition* This);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CEffects__CIAudioEffectDefinition* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        __x_ABI_CWindows_CMedia_CEffects_CIAudioEffectDefinition** items,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* ReplaceAll)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CEffects__CIAudioEffectDefinition* This,
        UINT32 itemsLength,
        __x_ABI_CWindows_CMedia_CEffects_CIAudioEffectDefinition** items);

        END_INTERFACE
    } __x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CEffects__CIAudioEffectDefinitionVtbl;

    interface __x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CEffects__CIAudioEffectDefinition
    {
        CONST_VTBL struct __x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CEffects__CIAudioEffectDefinitionVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CEffects__CIAudioEffectDefinition_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CEffects__CIVideoEffectDefinition_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CEffects__CIVideoEffectDefinition_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CEffects__CIVideoEffectDefinition __x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CEffects__CIVideoEffectDefinition;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CEffects__CIVideoEffectDefinition;

    typedef struct __x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CEffects__CIVideoEffectDefinitionVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CEffects__CIVideoEffectDefinition* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CEffects__CIVideoEffectDefinition* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CEffects__CIVideoEffectDefinition* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CEffects__CIVideoEffectDefinition* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CEffects__CIVideoEffectDefinition* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CEffects__CIVideoEffectDefinition* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CEffects__CIVideoEffectDefinition* This,
        UINT32 index,
        __x_ABI_CWindows_CMedia_CEffects_CIVideoEffectDefinition** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CEffects__CIVideoEffectDefinition* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* GetView)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CEffects__CIVideoEffectDefinition* This,
        __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CEffects__CIVideoEffectDefinition** result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CEffects__CIVideoEffectDefinition* This,
        __x_ABI_CWindows_CMedia_CEffects_CIVideoEffectDefinition* value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* SetAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CEffects__CIVideoEffectDefinition* This,
        UINT32 index,
        __x_ABI_CWindows_CMedia_CEffects_CIVideoEffectDefinition* value);
    HRESULT (STDMETHODCALLTYPE* InsertAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CEffects__CIVideoEffectDefinition* This,
        UINT32 index,
        __x_ABI_CWindows_CMedia_CEffects_CIVideoEffectDefinition* value);
    HRESULT (STDMETHODCALLTYPE* RemoveAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CEffects__CIVideoEffectDefinition* This,
        UINT32 index);
    HRESULT (STDMETHODCALLTYPE* Append)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CEffects__CIVideoEffectDefinition* This,
        __x_ABI_CWindows_CMedia_CEffects_CIVideoEffectDefinition* value);
    HRESULT (STDMETHODCALLTYPE* RemoveAtEnd)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CEffects__CIVideoEffectDefinition* This);
    HRESULT (STDMETHODCALLTYPE* Clear)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CEffects__CIVideoEffectDefinition* This);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CEffects__CIVideoEffectDefinition* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        __x_ABI_CWindows_CMedia_CEffects_CIVideoEffectDefinition** items,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* ReplaceAll)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CEffects__CIVideoEffectDefinition* This,
        UINT32 itemsLength,
        __x_ABI_CWindows_CMedia_CEffects_CIVideoEffectDefinition** items);

        END_INTERFACE
    } __x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CEffects__CIVideoEffectDefinitionVtbl;

    interface __x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CEffects__CIVideoEffectDefinition
    {
        CONST_VTBL struct __x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CEffects__CIVideoEffectDefinitionVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CEffects__CIVideoEffectDefinition_INTERFACE_DEFINED__
    
typedef enum __x_ABI_CWindows_CFoundation_CAsyncStatus __x_ABI_CWindows_CFoundation_CAsyncStatus;

#ifndef ____x_ABI_CWindows_CFoundation_CIAsyncAction_FWD_DEFINED__
#define ____x_ABI_CWindows_CFoundation_CIAsyncAction_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CFoundation_CIAsyncAction __x_ABI_CWindows_CFoundation_CIAsyncAction;

#endif // ____x_ABI_CWindows_CFoundation_CIAsyncAction_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CFoundation_CIAsyncInfo_FWD_DEFINED__
#define ____x_ABI_CWindows_CFoundation_CIAsyncInfo_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CFoundation_CIAsyncInfo __x_ABI_CWindows_CFoundation_CIAsyncInfo;

#endif // ____x_ABI_CWindows_CFoundation_CIAsyncInfo_FWD_DEFINED__

typedef struct __x_ABI_CWindows_CFoundation_CRect __x_ABI_CWindows_CFoundation_CRect;

#ifndef ____x_ABI_CWindows_CGraphics_CDirectX_CDirect3D11_CIDirect3DSurface_FWD_DEFINED__
#define ____x_ABI_CWindows_CGraphics_CDirectX_CDirect3D11_CIDirect3DSurface_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CGraphics_CDirectX_CDirect3D11_CIDirect3DSurface __x_ABI_CWindows_CGraphics_CDirectX_CDirect3D11_CIDirect3DSurface;

#endif // ____x_ABI_CWindows_CGraphics_CDirectX_CDirect3D11_CIDirect3DSurface_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource;

#endif // ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CEffects_CIVideoCompositorDefinition_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CEffects_CIVideoCompositorDefinition_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_CEffects_CIVideoCompositorDefinition __x_ABI_CWindows_CMedia_CEffects_CIVideoCompositorDefinition;

#endif // ____x_ABI_CWindows_CMedia_CEffects_CIVideoCompositorDefinition_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CMediaProperties_CIAudioEncodingProperties_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CMediaProperties_CIAudioEncodingProperties_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_CMediaProperties_CIAudioEncodingProperties __x_ABI_CWindows_CMedia_CMediaProperties_CIAudioEncodingProperties;

#endif // ____x_ABI_CWindows_CMedia_CMediaProperties_CIAudioEncodingProperties_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CMediaProperties_CIMediaEncodingProfile_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CMediaProperties_CIMediaEncodingProfile_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_CMediaProperties_CIMediaEncodingProfile __x_ABI_CWindows_CMedia_CMediaProperties_CIMediaEncodingProfile;

#endif // ____x_ABI_CWindows_CMedia_CMediaProperties_CIMediaEncodingProfile_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CMediaProperties_CIVideoEncodingProperties_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CMediaProperties_CIVideoEncodingProperties_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_CMediaProperties_CIVideoEncodingProperties __x_ABI_CWindows_CMedia_CMediaProperties_CIVideoEncodingProperties;

#endif // ____x_ABI_CWindows_CMedia_CMediaProperties_CIVideoEncodingProperties_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CStorage_CIStorageFile_FWD_DEFINED__
#define ____x_ABI_CWindows_CStorage_CIStorageFile_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CStorage_CIStorageFile __x_ABI_CWindows_CStorage_CIStorageFile;

#endif // ____x_ABI_CWindows_CStorage_CIStorageFile_FWD_DEFINED__

typedef struct __x_ABI_CWindows_CUI_CColor __x_ABI_CWindows_CUI_CColor;

typedef enum __x_ABI_CWindows_CMedia_CEditing_CMediaTrimmingPreference __x_ABI_CWindows_CMedia_CEditing_CMediaTrimmingPreference;

typedef enum __x_ABI_CWindows_CMedia_CEditing_CVideoFramePrecision __x_ABI_CWindows_CMedia_CEditing_CVideoFramePrecision;

enum __x_ABI_CWindows_CMedia_CEditing_CMediaTrimmingPreference
    {
        __x_ABI_CWindows_CMedia_CEditing_CMediaTrimmingPreference_Fast = 0,
    __x_ABI_CWindows_CMedia_CEditing_CMediaTrimmingPreference_Precise = 1,
};

enum __x_ABI_CWindows_CMedia_CEditing_CVideoFramePrecision
    {
        __x_ABI_CWindows_CMedia_CEditing_CVideoFramePrecision_NearestFrame = 0,
    __x_ABI_CWindows_CMedia_CEditing_CVideoFramePrecision_NearestKeyFrame = 1,
};

#if !defined(____x_ABI_CWindows_CMedia_CEditing_CIBackgroundAudioTrack_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CMedia_CEditing_CIBackgroundAudioTrack_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CMedia_CEditing_CIBackgroundAudioTrackVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CEditing_CIBackgroundAudioTrack* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CEditing_CIBackgroundAudioTrack* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CEditing_CIBackgroundAudioTrack* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CEditing_CIBackgroundAudioTrack* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CEditing_CIBackgroundAudioTrack* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CEditing_CIBackgroundAudioTrack* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_TrimTimeFromStart)(__x_ABI_CWindows_CMedia_CEditing_CIBackgroundAudioTrack* This,
        struct __x_ABI_CWindows_CFoundation_CTimeSpan* value);
    HRESULT (STDMETHODCALLTYPE* put_TrimTimeFromStart)(__x_ABI_CWindows_CMedia_CEditing_CIBackgroundAudioTrack* This,
        struct __x_ABI_CWindows_CFoundation_CTimeSpan value);
    HRESULT (STDMETHODCALLTYPE* get_TrimTimeFromEnd)(__x_ABI_CWindows_CMedia_CEditing_CIBackgroundAudioTrack* This,
        struct __x_ABI_CWindows_CFoundation_CTimeSpan* value);
    HRESULT (STDMETHODCALLTYPE* put_TrimTimeFromEnd)(__x_ABI_CWindows_CMedia_CEditing_CIBackgroundAudioTrack* This,
        struct __x_ABI_CWindows_CFoundation_CTimeSpan value);
    HRESULT (STDMETHODCALLTYPE* get_OriginalDuration)(__x_ABI_CWindows_CMedia_CEditing_CIBackgroundAudioTrack* This,
        struct __x_ABI_CWindows_CFoundation_CTimeSpan* value);
    HRESULT (STDMETHODCALLTYPE* get_TrimmedDuration)(__x_ABI_CWindows_CMedia_CEditing_CIBackgroundAudioTrack* This,
        struct __x_ABI_CWindows_CFoundation_CTimeSpan* value);
    HRESULT (STDMETHODCALLTYPE* get_UserData)(__x_ABI_CWindows_CMedia_CEditing_CIBackgroundAudioTrack* This,
        __x_ABI_C__FIMap_2_HSTRING_HSTRING** value);
    HRESULT (STDMETHODCALLTYPE* put_Delay)(__x_ABI_CWindows_CMedia_CEditing_CIBackgroundAudioTrack* This,
        struct __x_ABI_CWindows_CFoundation_CTimeSpan value);
    HRESULT (STDMETHODCALLTYPE* get_Delay)(__x_ABI_CWindows_CMedia_CEditing_CIBackgroundAudioTrack* This,
        struct __x_ABI_CWindows_CFoundation_CTimeSpan* value);
    HRESULT (STDMETHODCALLTYPE* put_Volume)(__x_ABI_CWindows_CMedia_CEditing_CIBackgroundAudioTrack* This,
        DOUBLE value);
    HRESULT (STDMETHODCALLTYPE* get_Volume)(__x_ABI_CWindows_CMedia_CEditing_CIBackgroundAudioTrack* This,
        DOUBLE* value);
    HRESULT (STDMETHODCALLTYPE* Clone)(__x_ABI_CWindows_CMedia_CEditing_CIBackgroundAudioTrack* This,
        __x_ABI_CWindows_CMedia_CEditing_CIBackgroundAudioTrack** value);
    HRESULT (STDMETHODCALLTYPE* GetAudioEncodingProperties)(__x_ABI_CWindows_CMedia_CEditing_CIBackgroundAudioTrack* This,
        __x_ABI_CWindows_CMedia_CMediaProperties_CIAudioEncodingProperties** value);
    HRESULT (STDMETHODCALLTYPE* get_AudioEffectDefinitions)(__x_ABI_CWindows_CMedia_CEditing_CIBackgroundAudioTrack* This,
        __x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CEffects__CIAudioEffectDefinition** value);

        END_INTERFACE
    } __x_ABI_CWindows_CMedia_CEditing_CIBackgroundAudioTrackVtbl;

    interface __x_ABI_CWindows_CMedia_CEditing_CIBackgroundAudioTrack
    {
        CONST_VTBL struct __x_ABI_CWindows_CMedia_CEditing_CIBackgroundAudioTrackVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CEditing_CIBackgroundAudioTrack;
#endif /* !defined(____x_ABI_CWindows_CMedia_CEditing_CIBackgroundAudioTrack_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CMedia_CEditing_CIBackgroundAudioTrackStatics_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CMedia_CEditing_CIBackgroundAudioTrackStatics_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CMedia_CEditing_CIBackgroundAudioTrackStaticsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CEditing_CIBackgroundAudioTrackStatics* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CEditing_CIBackgroundAudioTrackStatics* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CEditing_CIBackgroundAudioTrackStatics* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CEditing_CIBackgroundAudioTrackStatics* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CEditing_CIBackgroundAudioTrackStatics* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CEditing_CIBackgroundAudioTrackStatics* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* CreateFromEmbeddedAudioTrack)(__x_ABI_CWindows_CMedia_CEditing_CIBackgroundAudioTrackStatics* This,
        __x_ABI_CWindows_CMedia_CEditing_CIEmbeddedAudioTrack* embeddedAudioTrack,
        __x_ABI_CWindows_CMedia_CEditing_CIBackgroundAudioTrack** value);
    HRESULT (STDMETHODCALLTYPE* CreateFromFileAsync)(__x_ABI_CWindows_CMedia_CEditing_CIBackgroundAudioTrackStatics* This,
        __x_ABI_CWindows_CStorage_CIStorageFile* file,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CEditing__CBackgroundAudioTrack** operation);

        END_INTERFACE
    } __x_ABI_CWindows_CMedia_CEditing_CIBackgroundAudioTrackStaticsVtbl;

    interface __x_ABI_CWindows_CMedia_CEditing_CIBackgroundAudioTrackStatics
    {
        CONST_VTBL struct __x_ABI_CWindows_CMedia_CEditing_CIBackgroundAudioTrackStaticsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CEditing_CIBackgroundAudioTrackStatics;
#endif /* !defined(____x_ABI_CWindows_CMedia_CEditing_CIBackgroundAudioTrackStatics_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CMedia_CEditing_CIEmbeddedAudioTrack_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CMedia_CEditing_CIEmbeddedAudioTrack_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CMedia_CEditing_CIEmbeddedAudioTrackVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CEditing_CIEmbeddedAudioTrack* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CEditing_CIEmbeddedAudioTrack* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CEditing_CIEmbeddedAudioTrack* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CEditing_CIEmbeddedAudioTrack* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CEditing_CIEmbeddedAudioTrack* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CEditing_CIEmbeddedAudioTrack* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAudioEncodingProperties)(__x_ABI_CWindows_CMedia_CEditing_CIEmbeddedAudioTrack* This,
        __x_ABI_CWindows_CMedia_CMediaProperties_CIAudioEncodingProperties** value);

        END_INTERFACE
    } __x_ABI_CWindows_CMedia_CEditing_CIEmbeddedAudioTrackVtbl;

    interface __x_ABI_CWindows_CMedia_CEditing_CIEmbeddedAudioTrack
    {
        CONST_VTBL struct __x_ABI_CWindows_CMedia_CEditing_CIEmbeddedAudioTrackVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CEditing_CIEmbeddedAudioTrack;
#endif /* !defined(____x_ABI_CWindows_CMedia_CEditing_CIEmbeddedAudioTrack_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CMedia_CEditing_CIMediaClip_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CMedia_CEditing_CIMediaClip_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CMedia_CEditing_CIMediaClipVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CEditing_CIMediaClip* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CEditing_CIMediaClip* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CEditing_CIMediaClip* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CEditing_CIMediaClip* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CEditing_CIMediaClip* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CEditing_CIMediaClip* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_TrimTimeFromStart)(__x_ABI_CWindows_CMedia_CEditing_CIMediaClip* This,
        struct __x_ABI_CWindows_CFoundation_CTimeSpan* value);
    HRESULT (STDMETHODCALLTYPE* put_TrimTimeFromStart)(__x_ABI_CWindows_CMedia_CEditing_CIMediaClip* This,
        struct __x_ABI_CWindows_CFoundation_CTimeSpan value);
    HRESULT (STDMETHODCALLTYPE* get_TrimTimeFromEnd)(__x_ABI_CWindows_CMedia_CEditing_CIMediaClip* This,
        struct __x_ABI_CWindows_CFoundation_CTimeSpan* value);
    HRESULT (STDMETHODCALLTYPE* put_TrimTimeFromEnd)(__x_ABI_CWindows_CMedia_CEditing_CIMediaClip* This,
        struct __x_ABI_CWindows_CFoundation_CTimeSpan value);
    HRESULT (STDMETHODCALLTYPE* get_OriginalDuration)(__x_ABI_CWindows_CMedia_CEditing_CIMediaClip* This,
        struct __x_ABI_CWindows_CFoundation_CTimeSpan* value);
    HRESULT (STDMETHODCALLTYPE* get_TrimmedDuration)(__x_ABI_CWindows_CMedia_CEditing_CIMediaClip* This,
        struct __x_ABI_CWindows_CFoundation_CTimeSpan* value);
    HRESULT (STDMETHODCALLTYPE* get_UserData)(__x_ABI_CWindows_CMedia_CEditing_CIMediaClip* This,
        __x_ABI_C__FIMap_2_HSTRING_HSTRING** value);
    HRESULT (STDMETHODCALLTYPE* Clone)(__x_ABI_CWindows_CMedia_CEditing_CIMediaClip* This,
        __x_ABI_CWindows_CMedia_CEditing_CIMediaClip** result);
    HRESULT (STDMETHODCALLTYPE* get_StartTimeInComposition)(__x_ABI_CWindows_CMedia_CEditing_CIMediaClip* This,
        struct __x_ABI_CWindows_CFoundation_CTimeSpan* value);
    HRESULT (STDMETHODCALLTYPE* get_EndTimeInComposition)(__x_ABI_CWindows_CMedia_CEditing_CIMediaClip* This,
        struct __x_ABI_CWindows_CFoundation_CTimeSpan* value);
    HRESULT (STDMETHODCALLTYPE* get_EmbeddedAudioTracks)(__x_ABI_CWindows_CMedia_CEditing_CIMediaClip* This,
        __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CEditing__CEmbeddedAudioTrack** value);
    HRESULT (STDMETHODCALLTYPE* get_SelectedEmbeddedAudioTrackIndex)(__x_ABI_CWindows_CMedia_CEditing_CIMediaClip* This,
        UINT32* value);
    HRESULT (STDMETHODCALLTYPE* put_SelectedEmbeddedAudioTrackIndex)(__x_ABI_CWindows_CMedia_CEditing_CIMediaClip* This,
        UINT32 value);
    HRESULT (STDMETHODCALLTYPE* put_Volume)(__x_ABI_CWindows_CMedia_CEditing_CIMediaClip* This,
        DOUBLE value);
    HRESULT (STDMETHODCALLTYPE* get_Volume)(__x_ABI_CWindows_CMedia_CEditing_CIMediaClip* This,
        DOUBLE* value);
    HRESULT (STDMETHODCALLTYPE* GetVideoEncodingProperties)(__x_ABI_CWindows_CMedia_CEditing_CIMediaClip* This,
        __x_ABI_CWindows_CMedia_CMediaProperties_CIVideoEncodingProperties** value);
    HRESULT (STDMETHODCALLTYPE* get_AudioEffectDefinitions)(__x_ABI_CWindows_CMedia_CEditing_CIMediaClip* This,
        __x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CEffects__CIAudioEffectDefinition** value);
    HRESULT (STDMETHODCALLTYPE* get_VideoEffectDefinitions)(__x_ABI_CWindows_CMedia_CEditing_CIMediaClip* This,
        __x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CEffects__CIVideoEffectDefinition** value);

        END_INTERFACE
    } __x_ABI_CWindows_CMedia_CEditing_CIMediaClipVtbl;

    interface __x_ABI_CWindows_CMedia_CEditing_CIMediaClip
    {
        CONST_VTBL struct __x_ABI_CWindows_CMedia_CEditing_CIMediaClipVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CEditing_CIMediaClip;
#endif /* !defined(____x_ABI_CWindows_CMedia_CEditing_CIMediaClip_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CMedia_CEditing_CIMediaClipStatics_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CMedia_CEditing_CIMediaClipStatics_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CMedia_CEditing_CIMediaClipStaticsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CEditing_CIMediaClipStatics* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CEditing_CIMediaClipStatics* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CEditing_CIMediaClipStatics* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CEditing_CIMediaClipStatics* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CEditing_CIMediaClipStatics* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CEditing_CIMediaClipStatics* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* CreateFromColor)(__x_ABI_CWindows_CMedia_CEditing_CIMediaClipStatics* This,
        struct __x_ABI_CWindows_CUI_CColor color,
        struct __x_ABI_CWindows_CFoundation_CTimeSpan originalDuration,
        __x_ABI_CWindows_CMedia_CEditing_CIMediaClip** value);
    HRESULT (STDMETHODCALLTYPE* CreateFromFileAsync)(__x_ABI_CWindows_CMedia_CEditing_CIMediaClipStatics* This,
        __x_ABI_CWindows_CStorage_CIStorageFile* file,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CEditing__CMediaClip** operation);
    HRESULT (STDMETHODCALLTYPE* CreateFromImageFileAsync)(__x_ABI_CWindows_CMedia_CEditing_CIMediaClipStatics* This,
        __x_ABI_CWindows_CStorage_CIStorageFile* file,
        struct __x_ABI_CWindows_CFoundation_CTimeSpan originalDuration,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CEditing__CMediaClip** operation);

        END_INTERFACE
    } __x_ABI_CWindows_CMedia_CEditing_CIMediaClipStaticsVtbl;

    interface __x_ABI_CWindows_CMedia_CEditing_CIMediaClipStatics
    {
        CONST_VTBL struct __x_ABI_CWindows_CMedia_CEditing_CIMediaClipStaticsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CEditing_CIMediaClipStatics;
#endif /* !defined(____x_ABI_CWindows_CMedia_CEditing_CIMediaClipStatics_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CMedia_CEditing_CIMediaClipStatics2_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CMedia_CEditing_CIMediaClipStatics2_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CMedia_CEditing_CIMediaClipStatics2Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CEditing_CIMediaClipStatics2* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CEditing_CIMediaClipStatics2* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CEditing_CIMediaClipStatics2* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CEditing_CIMediaClipStatics2* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CEditing_CIMediaClipStatics2* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CEditing_CIMediaClipStatics2* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* CreateFromSurface)(__x_ABI_CWindows_CMedia_CEditing_CIMediaClipStatics2* This,
        __x_ABI_CWindows_CGraphics_CDirectX_CDirect3D11_CIDirect3DSurface* surface,
        struct __x_ABI_CWindows_CFoundation_CTimeSpan originalDuration,
        __x_ABI_CWindows_CMedia_CEditing_CIMediaClip** value);

        END_INTERFACE
    } __x_ABI_CWindows_CMedia_CEditing_CIMediaClipStatics2Vtbl;

    interface __x_ABI_CWindows_CMedia_CEditing_CIMediaClipStatics2
    {
        CONST_VTBL struct __x_ABI_CWindows_CMedia_CEditing_CIMediaClipStatics2Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CEditing_CIMediaClipStatics2;
#endif /* !defined(____x_ABI_CWindows_CMedia_CEditing_CIMediaClipStatics2_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CMedia_CEditing_CIMediaComposition_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CMedia_CEditing_CIMediaComposition_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CMedia_CEditing_CIMediaCompositionVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CEditing_CIMediaComposition* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CEditing_CIMediaComposition* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CEditing_CIMediaComposition* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CEditing_CIMediaComposition* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CEditing_CIMediaComposition* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CEditing_CIMediaComposition* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Duration)(__x_ABI_CWindows_CMedia_CEditing_CIMediaComposition* This,
        struct __x_ABI_CWindows_CFoundation_CTimeSpan* value);
    HRESULT (STDMETHODCALLTYPE* get_Clips)(__x_ABI_CWindows_CMedia_CEditing_CIMediaComposition* This,
        __x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CEditing__CMediaClip** value);
    HRESULT (STDMETHODCALLTYPE* get_BackgroundAudioTracks)(__x_ABI_CWindows_CMedia_CEditing_CIMediaComposition* This,
        __x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CEditing__CBackgroundAudioTrack** value);
    HRESULT (STDMETHODCALLTYPE* get_UserData)(__x_ABI_CWindows_CMedia_CEditing_CIMediaComposition* This,
        __x_ABI_C__FIMap_2_HSTRING_HSTRING** value);
    HRESULT (STDMETHODCALLTYPE* Clone)(__x_ABI_CWindows_CMedia_CEditing_CIMediaComposition* This,
        __x_ABI_CWindows_CMedia_CEditing_CIMediaComposition** result);
    HRESULT (STDMETHODCALLTYPE* SaveAsync)(__x_ABI_CWindows_CMedia_CEditing_CIMediaComposition* This,
        __x_ABI_CWindows_CStorage_CIStorageFile* file,
        __x_ABI_CWindows_CFoundation_CIAsyncAction** operation);
    HRESULT (STDMETHODCALLTYPE* GetThumbnailAsync)(__x_ABI_CWindows_CMedia_CEditing_CIMediaComposition* This,
        struct __x_ABI_CWindows_CFoundation_CTimeSpan timeFromStart,
        INT32 scaledWidth,
        INT32 scaledHeight,
        enum __x_ABI_CWindows_CMedia_CEditing_CVideoFramePrecision framePrecision,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CImageStream** operation);
    HRESULT (STDMETHODCALLTYPE* GetThumbnailsAsync)(__x_ABI_CWindows_CMedia_CEditing_CIMediaComposition* This,
        __x_ABI_C__FIIterable_1___x_ABI_CWindows__CFoundation__CTimeSpan* timesFromStart,
        INT32 scaledWidth,
        INT32 scaledHeight,
        enum __x_ABI_CWindows_CMedia_CEditing_CVideoFramePrecision framePrecision,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CGraphics__CImaging__CImageStream** operation);
    HRESULT (STDMETHODCALLTYPE* RenderToFileAsync)(__x_ABI_CWindows_CMedia_CEditing_CIMediaComposition* This,
        __x_ABI_CWindows_CStorage_CIStorageFile* destination,
        __x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CMedia__CTranscoding__CTranscodeFailureReason_double** operation);
    HRESULT (STDMETHODCALLTYPE* RenderToFileWithTrimmingPreferenceAsync)(__x_ABI_CWindows_CMedia_CEditing_CIMediaComposition* This,
        __x_ABI_CWindows_CStorage_CIStorageFile* destination,
        enum __x_ABI_CWindows_CMedia_CEditing_CMediaTrimmingPreference trimmingPreference,
        __x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CMedia__CTranscoding__CTranscodeFailureReason_double** operation);
    HRESULT (STDMETHODCALLTYPE* RenderToFileWithProfileAsync)(__x_ABI_CWindows_CMedia_CEditing_CIMediaComposition* This,
        __x_ABI_CWindows_CStorage_CIStorageFile* destination,
        enum __x_ABI_CWindows_CMedia_CEditing_CMediaTrimmingPreference trimmingPreference,
        __x_ABI_CWindows_CMedia_CMediaProperties_CIMediaEncodingProfile* encodingProfile,
        __x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CMedia__CTranscoding__CTranscodeFailureReason_double** operation);
    HRESULT (STDMETHODCALLTYPE* CreateDefaultEncodingProfile)(__x_ABI_CWindows_CMedia_CEditing_CIMediaComposition* This,
        __x_ABI_CWindows_CMedia_CMediaProperties_CIMediaEncodingProfile** value);
    HRESULT (STDMETHODCALLTYPE* GenerateMediaStreamSource)(__x_ABI_CWindows_CMedia_CEditing_CIMediaComposition* This,
        __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource** value);
    HRESULT (STDMETHODCALLTYPE* GenerateMediaStreamSourceWithProfile)(__x_ABI_CWindows_CMedia_CEditing_CIMediaComposition* This,
        __x_ABI_CWindows_CMedia_CMediaProperties_CIMediaEncodingProfile* encodingProfile,
        __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource** value);
    HRESULT (STDMETHODCALLTYPE* GeneratePreviewMediaStreamSource)(__x_ABI_CWindows_CMedia_CEditing_CIMediaComposition* This,
        INT32 scaledWidth,
        INT32 scaledHeight,
        __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource** value);

        END_INTERFACE
    } __x_ABI_CWindows_CMedia_CEditing_CIMediaCompositionVtbl;

    interface __x_ABI_CWindows_CMedia_CEditing_CIMediaComposition
    {
        CONST_VTBL struct __x_ABI_CWindows_CMedia_CEditing_CIMediaCompositionVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CEditing_CIMediaComposition;
#endif /* !defined(____x_ABI_CWindows_CMedia_CEditing_CIMediaComposition_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CMedia_CEditing_CIMediaComposition2_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CMedia_CEditing_CIMediaComposition2_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CMedia_CEditing_CIMediaComposition2Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CEditing_CIMediaComposition2* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CEditing_CIMediaComposition2* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CEditing_CIMediaComposition2* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CEditing_CIMediaComposition2* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CEditing_CIMediaComposition2* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CEditing_CIMediaComposition2* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_OverlayLayers)(__x_ABI_CWindows_CMedia_CEditing_CIMediaComposition2* This,
        __x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CEditing__CMediaOverlayLayer** value);

        END_INTERFACE
    } __x_ABI_CWindows_CMedia_CEditing_CIMediaComposition2Vtbl;

    interface __x_ABI_CWindows_CMedia_CEditing_CIMediaComposition2
    {
        CONST_VTBL struct __x_ABI_CWindows_CMedia_CEditing_CIMediaComposition2Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CEditing_CIMediaComposition2;
#endif /* !defined(____x_ABI_CWindows_CMedia_CEditing_CIMediaComposition2_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CMedia_CEditing_CIMediaCompositionStatics_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CMedia_CEditing_CIMediaCompositionStatics_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CMedia_CEditing_CIMediaCompositionStaticsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CEditing_CIMediaCompositionStatics* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CEditing_CIMediaCompositionStatics* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CEditing_CIMediaCompositionStatics* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CEditing_CIMediaCompositionStatics* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CEditing_CIMediaCompositionStatics* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CEditing_CIMediaCompositionStatics* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* LoadAsync)(__x_ABI_CWindows_CMedia_CEditing_CIMediaCompositionStatics* This,
        __x_ABI_CWindows_CStorage_CIStorageFile* file,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CEditing__CMediaComposition** operation);

        END_INTERFACE
    } __x_ABI_CWindows_CMedia_CEditing_CIMediaCompositionStaticsVtbl;

    interface __x_ABI_CWindows_CMedia_CEditing_CIMediaCompositionStatics
    {
        CONST_VTBL struct __x_ABI_CWindows_CMedia_CEditing_CIMediaCompositionStaticsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CEditing_CIMediaCompositionStatics;
#endif /* !defined(____x_ABI_CWindows_CMedia_CEditing_CIMediaCompositionStatics_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CMedia_CEditing_CIMediaOverlay_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CMedia_CEditing_CIMediaOverlay_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CMedia_CEditing_CIMediaOverlayVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CEditing_CIMediaOverlay* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CEditing_CIMediaOverlay* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CEditing_CIMediaOverlay* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CEditing_CIMediaOverlay* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CEditing_CIMediaOverlay* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CEditing_CIMediaOverlay* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Position)(__x_ABI_CWindows_CMedia_CEditing_CIMediaOverlay* This,
        struct __x_ABI_CWindows_CFoundation_CRect* value);
    HRESULT (STDMETHODCALLTYPE* put_Position)(__x_ABI_CWindows_CMedia_CEditing_CIMediaOverlay* This,
        struct __x_ABI_CWindows_CFoundation_CRect value);
    HRESULT (STDMETHODCALLTYPE* put_Delay)(__x_ABI_CWindows_CMedia_CEditing_CIMediaOverlay* This,
        struct __x_ABI_CWindows_CFoundation_CTimeSpan value);
    HRESULT (STDMETHODCALLTYPE* get_Delay)(__x_ABI_CWindows_CMedia_CEditing_CIMediaOverlay* This,
        struct __x_ABI_CWindows_CFoundation_CTimeSpan* value);
    HRESULT (STDMETHODCALLTYPE* get_Opacity)(__x_ABI_CWindows_CMedia_CEditing_CIMediaOverlay* This,
        DOUBLE* value);
    HRESULT (STDMETHODCALLTYPE* put_Opacity)(__x_ABI_CWindows_CMedia_CEditing_CIMediaOverlay* This,
        DOUBLE value);
    HRESULT (STDMETHODCALLTYPE* Clone)(__x_ABI_CWindows_CMedia_CEditing_CIMediaOverlay* This,
        __x_ABI_CWindows_CMedia_CEditing_CIMediaOverlay** result);
    HRESULT (STDMETHODCALLTYPE* get_Clip)(__x_ABI_CWindows_CMedia_CEditing_CIMediaOverlay* This,
        __x_ABI_CWindows_CMedia_CEditing_CIMediaClip** value);
    HRESULT (STDMETHODCALLTYPE* get_AudioEnabled)(__x_ABI_CWindows_CMedia_CEditing_CIMediaOverlay* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* put_AudioEnabled)(__x_ABI_CWindows_CMedia_CEditing_CIMediaOverlay* This,
        boolean value);

        END_INTERFACE
    } __x_ABI_CWindows_CMedia_CEditing_CIMediaOverlayVtbl;

    interface __x_ABI_CWindows_CMedia_CEditing_CIMediaOverlay
    {
        CONST_VTBL struct __x_ABI_CWindows_CMedia_CEditing_CIMediaOverlayVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CEditing_CIMediaOverlay;
#endif /* !defined(____x_ABI_CWindows_CMedia_CEditing_CIMediaOverlay_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CMedia_CEditing_CIMediaOverlayFactory_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CMedia_CEditing_CIMediaOverlayFactory_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CMedia_CEditing_CIMediaOverlayFactoryVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CEditing_CIMediaOverlayFactory* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CEditing_CIMediaOverlayFactory* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CEditing_CIMediaOverlayFactory* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CEditing_CIMediaOverlayFactory* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CEditing_CIMediaOverlayFactory* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CEditing_CIMediaOverlayFactory* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* Create)(__x_ABI_CWindows_CMedia_CEditing_CIMediaOverlayFactory* This,
        __x_ABI_CWindows_CMedia_CEditing_CIMediaClip* clip,
        __x_ABI_CWindows_CMedia_CEditing_CIMediaOverlay** mediaOverlay);
    HRESULT (STDMETHODCALLTYPE* CreateWithPositionAndOpacity)(__x_ABI_CWindows_CMedia_CEditing_CIMediaOverlayFactory* This,
        __x_ABI_CWindows_CMedia_CEditing_CIMediaClip* clip,
        struct __x_ABI_CWindows_CFoundation_CRect position,
        DOUBLE opacity,
        __x_ABI_CWindows_CMedia_CEditing_CIMediaOverlay** mediaOverlay);

        END_INTERFACE
    } __x_ABI_CWindows_CMedia_CEditing_CIMediaOverlayFactoryVtbl;

    interface __x_ABI_CWindows_CMedia_CEditing_CIMediaOverlayFactory
    {
        CONST_VTBL struct __x_ABI_CWindows_CMedia_CEditing_CIMediaOverlayFactoryVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CEditing_CIMediaOverlayFactory;
#endif /* !defined(____x_ABI_CWindows_CMedia_CEditing_CIMediaOverlayFactory_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CMedia_CEditing_CIMediaOverlayLayer_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CMedia_CEditing_CIMediaOverlayLayer_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CMedia_CEditing_CIMediaOverlayLayerVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CEditing_CIMediaOverlayLayer* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CEditing_CIMediaOverlayLayer* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CEditing_CIMediaOverlayLayer* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CEditing_CIMediaOverlayLayer* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CEditing_CIMediaOverlayLayer* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CEditing_CIMediaOverlayLayer* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* Clone)(__x_ABI_CWindows_CMedia_CEditing_CIMediaOverlayLayer* This,
        __x_ABI_CWindows_CMedia_CEditing_CIMediaOverlayLayer** result);
    HRESULT (STDMETHODCALLTYPE* get_Overlays)(__x_ABI_CWindows_CMedia_CEditing_CIMediaOverlayLayer* This,
        __x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CEditing__CMediaOverlay** value);
    HRESULT (STDMETHODCALLTYPE* get_CustomCompositorDefinition)(__x_ABI_CWindows_CMedia_CEditing_CIMediaOverlayLayer* This,
        __x_ABI_CWindows_CMedia_CEffects_CIVideoCompositorDefinition** value);

        END_INTERFACE
    } __x_ABI_CWindows_CMedia_CEditing_CIMediaOverlayLayerVtbl;

    interface __x_ABI_CWindows_CMedia_CEditing_CIMediaOverlayLayer
    {
        CONST_VTBL struct __x_ABI_CWindows_CMedia_CEditing_CIMediaOverlayLayerVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CEditing_CIMediaOverlayLayer;
#endif /* !defined(____x_ABI_CWindows_CMedia_CEditing_CIMediaOverlayLayer_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CMedia_CEditing_CIMediaOverlayLayerFactory_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CMedia_CEditing_CIMediaOverlayLayerFactory_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CMedia_CEditing_CIMediaOverlayLayerFactoryVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CEditing_CIMediaOverlayLayerFactory* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CEditing_CIMediaOverlayLayerFactory* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CEditing_CIMediaOverlayLayerFactory* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CEditing_CIMediaOverlayLayerFactory* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CEditing_CIMediaOverlayLayerFactory* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CEditing_CIMediaOverlayLayerFactory* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* CreateWithCompositorDefinition)(__x_ABI_CWindows_CMedia_CEditing_CIMediaOverlayLayerFactory* This,
        __x_ABI_CWindows_CMedia_CEffects_CIVideoCompositorDefinition* compositorDefinition,
        __x_ABI_CWindows_CMedia_CEditing_CIMediaOverlayLayer** mediaOverlayLayer);

        END_INTERFACE
    } __x_ABI_CWindows_CMedia_CEditing_CIMediaOverlayLayerFactoryVtbl;

    interface __x_ABI_CWindows_CMedia_CEditing_CIMediaOverlayLayerFactory
    {
        CONST_VTBL struct __x_ABI_CWindows_CMedia_CEditing_CIMediaOverlayLayerFactoryVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CEditing_CIMediaOverlayLayerFactory;
#endif /* !defined(____x_ABI_CWindows_CMedia_CEditing_CIMediaOverlayLayerFactory_INTERFACE_DEFINED__) */
    
